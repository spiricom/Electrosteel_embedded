
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ae68  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2a0  0801b100  0801b100  0002b100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080273a0  080273a0  0005a610  2**0
                  CONTENTS
  4 .ARM          00000000  080273a0  080273a0  0005a610  2**0
                  CONTENTS
  5 .preinit_array 00000000  080273a0  080273a0  0005a610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080273a0  080273a0  000373a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080273a4  080273a4  000373a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ba0  20000000  080273a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d530  20000ba0  08027f48  00060ba0  2**3
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      0000a210  00000400  08027f48  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001e0d0  2001e0d0  0005a610  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001e0d0  2001e0d0  0005a610  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  0005a610  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  0005a63e  2**0
                  CONTENTS, READONLY
 21 .debug_info   0009ac4b  00000000  00000000  0005a681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000bbda  00000000  00000000  000f52cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0005cba7  00000000  00000000  00100ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00004418  00000000  00000000  0015da4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00009dd1  00000000  00000000  00161e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   00068eac  00000000  00000000  0016bc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    000158a0  00000000  00000000  001d4ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000f0c8  00000000  00000000  001ea384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000ba0 	.word	0x20000ba0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b070 	.word	0x0801b070

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000ba4 	.word	0x20000ba4
 80002d4:	0801b070 	.word	0x0801b070

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
 80002e8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
 80002ec:	4603      	mov	r3, r0
    if (x > 0.0f)
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dc12      	bgt.n	800031a <arm_atan2_f32+0x32>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 80002f4:	d450      	bmi.n	8000398 <arm_atan2_f32+0xb0>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 80002f6:	eef5 0a40 	vcmp.f32	s1, #0.0
 80002fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002fe:	f040 8135 	bne.w	800056c <arm_atan2_f32+0x284>
    {
        if (y > 0.0f)
 8000302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030a:	f300 808e 	bgt.w	800042a <arm_atan2_f32+0x142>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 800030e:	f140 812d 	bpl.w	800056c <arm_atan2_f32+0x284>
        {
            *result=-PIHALFF32;
 8000312:	4aac      	ldr	r2, [pc, #688]	; (80005c4 <arm_atan2_f32+0x2dc>)
            return(ARM_MATH_SUCCESS);
 8000314:	2000      	movs	r0, #0
            *result=-PIHALFF32;
 8000316:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8000318:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
 800031a:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 800031e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000326:	f100 80a9 	bmi.w	800047c <arm_atan2_f32+0x194>
   int sign=0;
 800032a:	2200      	movs	r2, #0
   if (x > 1.0f)
 800032c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000330:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000338:	dd7b      	ble.n	8000432 <arm_atan2_f32+0x14a>
      x = 1.0f / x;
 800033a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800033e:	eddf 2aa2 	vldr	s5, [pc, #648]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000342:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 80005cc <arm_atan2_f32+0x2e4>
 8000346:	eddf 3aa2 	vldr	s7, [pc, #648]	; 80005d0 <arm_atan2_f32+0x2e8>
 800034a:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 80005d4 <arm_atan2_f32+0x2ec>
 800034e:	eddf 4aa2 	vldr	s9, [pc, #648]	; 80005d8 <arm_atan2_f32+0x2f0>
 8000352:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 80005dc <arm_atan2_f32+0x2f4>
 8000356:	eddf 5aa2 	vldr	s11, [pc, #648]	; 80005e0 <arm_atan2_f32+0x2f8>
 800035a:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 80005e4 <arm_atan2_f32+0x2fc>
 800035e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000362:	eddf 7aa2 	vldr	s15, [pc, #648]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000366:	eea7 3a22 	vfma.f32	s6, s14, s5
 800036a:	eee7 3a03 	vfma.f32	s7, s14, s6
 800036e:	eea7 4a23 	vfma.f32	s8, s14, s7
 8000372:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000376:	eea7 5a24 	vfma.f32	s10, s14, s9
 800037a:	eee5 5a07 	vfma.f32	s11, s10, s14
 800037e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8000382:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000386:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 800038a:	b10a      	cbz	r2, 8000390 <arm_atan2_f32+0xa8>
     res = -res;
 800038c:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
 8000390:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
 8000392:	edc3 7a00 	vstr	s15, [r3]
        return(ARM_MATH_SUCCESS);
 8000396:	4770      	bx	lr
        if (y > 0.0f)
 8000398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800039c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a0:	dd70      	ble.n	8000484 <arm_atan2_f32+0x19c>
           *result=arm_atan_f32(y/x) + PI;
 80003a2:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 80003a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ae:	f100 80d9 	bmi.w	8000564 <arm_atan2_f32+0x27c>
   int sign=0;
 80003b2:	2200      	movs	r2, #0
   if (x > 1.0f)
 80003b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80003b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80003bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c0:	f340 80a8 	ble.w	8000514 <arm_atan2_f32+0x22c>
      x = 1.0f / x;
 80003c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003c8:	eddf 2a7f 	vldr	s5, [pc, #508]	; 80005c8 <arm_atan2_f32+0x2e0>
 80003cc:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 80005cc <arm_atan2_f32+0x2e4>
 80003d0:	eddf 3a7f 	vldr	s7, [pc, #508]	; 80005d0 <arm_atan2_f32+0x2e8>
 80003d4:	ed9f 4a7f 	vldr	s8, [pc, #508]	; 80005d4 <arm_atan2_f32+0x2ec>
 80003d8:	eddf 4a7f 	vldr	s9, [pc, #508]	; 80005d8 <arm_atan2_f32+0x2f0>
 80003dc:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 80005dc <arm_atan2_f32+0x2f4>
 80003e0:	eddf 5a7f 	vldr	s11, [pc, #508]	; 80005e0 <arm_atan2_f32+0x2f8>
 80003e4:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 80005e4 <arm_atan2_f32+0x2fc>
 80003e8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80003ec:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003f0:	eea7 3a22 	vfma.f32	s6, s14, s5
 80003f4:	eee7 3a03 	vfma.f32	s7, s14, s6
 80003f8:	eea7 4a23 	vfma.f32	s8, s14, s7
 80003fc:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000400:	eea7 5a24 	vfma.f32	s10, s14, s9
 8000404:	eee7 5a05 	vfma.f32	s11, s14, s10
 8000408:	eea7 6a25 	vfma.f32	s12, s14, s11
 800040c:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000410:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 8000414:	b10a      	cbz	r2, 800041a <arm_atan2_f32+0x132>
     res = -res;
 8000416:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 800041a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 800041e:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
 8000420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000424:	edc3 7a00 	vstr	s15, [r3]
 8000428:	4770      	bx	lr
            *result=PIHALFF32;
 800042a:	4a72      	ldr	r2, [pc, #456]	; (80005f4 <arm_atan2_f32+0x30c>)
            return(ARM_MATH_SUCCESS);
 800042c:	2000      	movs	r0, #0
            *result=PIHALFF32;
 800042e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8000430:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000432:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000436:	eddf 3a65 	vldr	s7, [pc, #404]	; 80005cc <arm_atan2_f32+0x2e4>
 800043a:	ed9f 4a65 	vldr	s8, [pc, #404]	; 80005d0 <arm_atan2_f32+0x2e8>
 800043e:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000442:	eddf 4a64 	vldr	s9, [pc, #400]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000446:	ed9f 5a64 	vldr	s10, [pc, #400]	; 80005d8 <arm_atan2_f32+0x2f0>
 800044a:	eddf 5a64 	vldr	s11, [pc, #400]	; 80005dc <arm_atan2_f32+0x2f4>
 800044e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000452:	eddf 6a64 	vldr	s13, [pc, #400]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000456:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80005e8 <arm_atan2_f32+0x300>
 800045a:	eea7 4aa3 	vfma.f32	s8, s15, s7
 800045e:	eee7 4a84 	vfma.f32	s9, s15, s8
 8000462:	eea7 5aa4 	vfma.f32	s10, s15, s9
 8000466:	eee7 5a85 	vfma.f32	s11, s15, s10
 800046a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800046e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8000472:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000476:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800047a:	e786      	b.n	800038a <arm_atan2_f32+0xa2>
      x=-x;
 800047c:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 8000480:	2201      	movs	r2, #1
 8000482:	e753      	b.n	800032c <arm_atan2_f32+0x44>
        else if (y < 0.0f)
 8000484:	d403      	bmi.n	800048e <arm_atan2_f32+0x1a6>
               *result= PI;
 8000486:	4a5c      	ldr	r2, [pc, #368]	; (80005f8 <arm_atan2_f32+0x310>)
        return(ARM_MATH_SUCCESS);
 8000488:	2000      	movs	r0, #0
               *result= PI;
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
 800048e:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 8000492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049a:	f100 808f 	bmi.w	80005bc <arm_atan2_f32+0x2d4>
   int sign=0;
 800049e:	2200      	movs	r2, #0
   if (x > 1.0f)
 80004a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80004a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80004a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ac:	dd61      	ble.n	8000572 <arm_atan2_f32+0x28a>
      x = 1.0f / x;
 80004ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004b2:	eddf 2a45 	vldr	s5, [pc, #276]	; 80005c8 <arm_atan2_f32+0x2e0>
 80004b6:	ed9f 3a45 	vldr	s6, [pc, #276]	; 80005cc <arm_atan2_f32+0x2e4>
 80004ba:	eddf 3a45 	vldr	s7, [pc, #276]	; 80005d0 <arm_atan2_f32+0x2e8>
 80004be:	ed9f 4a45 	vldr	s8, [pc, #276]	; 80005d4 <arm_atan2_f32+0x2ec>
 80004c2:	eddf 4a45 	vldr	s9, [pc, #276]	; 80005d8 <arm_atan2_f32+0x2f0>
 80004c6:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80005dc <arm_atan2_f32+0x2f4>
 80004ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80005e0 <arm_atan2_f32+0x2f8>
 80004ce:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80005e4 <arm_atan2_f32+0x2fc>
 80004d2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004d6:	eddf 7a45 	vldr	s15, [pc, #276]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004da:	eea7 3a22 	vfma.f32	s6, s14, s5
 80004de:	eee7 3a03 	vfma.f32	s7, s14, s6
 80004e2:	eea7 4a23 	vfma.f32	s8, s14, s7
 80004e6:	eee7 4a04 	vfma.f32	s9, s14, s8
 80004ea:	eea7 5a24 	vfma.f32	s10, s14, s9
 80004ee:	eee7 5a05 	vfma.f32	s11, s14, s10
 80004f2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80004f6:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004fa:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 80004fe:	b10a      	cbz	r2, 8000504 <arm_atan2_f32+0x21c>
     res = -res;
 8000500:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 8000504:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 8000508:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
 800050a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800050e:	edc3 7a00 	vstr	s15, [r3]
 8000512:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000514:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000518:	eddf 3a2c 	vldr	s7, [pc, #176]	; 80005cc <arm_atan2_f32+0x2e4>
 800051c:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 80005d0 <arm_atan2_f32+0x2e8>
 8000520:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000524:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000528:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 80005d8 <arm_atan2_f32+0x2f0>
 800052c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80005dc <arm_atan2_f32+0x2f4>
 8000530:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000534:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000538:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80005e8 <arm_atan2_f32+0x300>
 800053c:	eea7 4aa3 	vfma.f32	s8, s15, s7
 8000540:	eee7 4a84 	vfma.f32	s9, s15, s8
 8000544:	eea7 5aa4 	vfma.f32	s10, s15, s9
 8000548:	eee7 5a85 	vfma.f32	s11, s15, s10
 800054c:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8000550:	eee7 6a86 	vfma.f32	s13, s15, s12
 8000554:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000558:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
 800055c:	2a00      	cmp	r2, #0
 800055e:	f43f af5c 	beq.w	800041a <arm_atan2_f32+0x132>
 8000562:	e758      	b.n	8000416 <arm_atan2_f32+0x12e>
      x=-x;
 8000564:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 8000568:	2201      	movs	r2, #1
 800056a:	e723      	b.n	80003b4 <arm_atan2_f32+0xcc>
        }
    }
    

    return(ARM_MATH_NANINF);
 800056c:	f06f 0003 	mvn.w	r0, #3

}
 8000570:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000572:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000576:	eddf 3a15 	vldr	s7, [pc, #84]	; 80005cc <arm_atan2_f32+0x2e4>
 800057a:	ed9f 4a15 	vldr	s8, [pc, #84]	; 80005d0 <arm_atan2_f32+0x2e8>
 800057e:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000582:	eddf 4a14 	vldr	s9, [pc, #80]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000586:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80005d8 <arm_atan2_f32+0x2f0>
 800058a:	eddf 5a14 	vldr	s11, [pc, #80]	; 80005dc <arm_atan2_f32+0x2f4>
 800058e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000592:	eddf 6a14 	vldr	s13, [pc, #80]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000596:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80005e8 <arm_atan2_f32+0x300>
 800059a:	eea7 4aa3 	vfma.f32	s8, s15, s7
 800059e:	eee7 4a84 	vfma.f32	s9, s15, s8
 80005a2:	eea7 5aa4 	vfma.f32	s10, s15, s9
 80005a6:	eee7 5a85 	vfma.f32	s11, s15, s10
 80005aa:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80005ae:	eee7 6a86 	vfma.f32	s13, s15, s12
 80005b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80005b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80005ba:	e7a0      	b.n	80004fe <arm_atan2_f32+0x216>
      x=-x;
 80005bc:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 80005c0:	2201      	movs	r2, #1
 80005c2:	e76d      	b.n	80004a0 <arm_atan2_f32+0x1b8>
 80005c4:	bfc90fdb 	.word	0xbfc90fdb
 80005c8:	bd0492a5 	.word	0xbd0492a5
 80005cc:	3e0945e7 	.word	0x3e0945e7
 80005d0:	be32b708 	.word	0xbe32b708
 80005d4:	bca9fceb 	.word	0xbca9fceb
 80005d8:	3e5d693c 	.word	0x3e5d693c
 80005dc:	bb905643 	.word	0xbb905643
 80005e0:	beaa65e5 	.word	0xbeaa65e5
 80005e4:	b7c00cc9 	.word	0xb7c00cc9
 80005e8:	3f800001 	.word	0x3f800001
 80005ec:	3fc90fdb 	.word	0x3fc90fdb
 80005f0:	40490fdb 	.word	0x40490fdb
 80005f4:	3fc90fdb 	.word	0x3fc90fdb
 80005f8:	40490fdb 	.word	0x40490fdb

080005fc <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80005fc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8000600:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800068c <arm_cos_f32+0x90>

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000604:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000690 <arm_cos_f32+0x94>
  in = x * 0.159154943092f + 0.25f;
 8000608:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
 800060c:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8000610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
 8000614:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
 8000618:	d504      	bpl.n	8000624 <arm_cos_f32+0x28>
  {
    n--;
 800061a:	ee17 3a10 	vmov	r3, s14
 800061e:	3b01      	subs	r3, #1
 8000620:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000628:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000694 <arm_cos_f32+0x98>
  in = in - (float32_t) n;
 800062c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000630:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
 8000634:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000638:	ee17 3a10 	vmov	r3, s14
 800063c:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800063e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000642:	d21a      	bcs.n	800067a <arm_cos_f32+0x7e>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000644:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 8000648:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 800064a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800064e:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8000652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <arm_cos_f32+0x9c>)
  b = sinTable_f32[index+1];
 8000658:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 800065c:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 8000660:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 8000664:	ed91 6a00 	vldr	s12, [r1]
 8000668:	edd2 6a00 	vldr	s13, [r2]
 800066c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000670:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (cosVal);
}
 8000674:	eea7 0a26 	vfma.f32	s0, s14, s13
 8000678:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800067a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800067e:	2101      	movs	r1, #1
 8000680:	2300      	movs	r3, #0
 8000682:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800069c <arm_cos_f32+0xa0>
 8000686:	eeb0 0a67 	vmov.f32	s0, s15
 800068a:	e7e2      	b.n	8000652 <arm_cos_f32+0x56>
 800068c:	3e22f983 	.word	0x3e22f983
 8000690:	bfc90fdb 	.word	0xbfc90fdb
 8000694:	44000000 	.word	0x44000000
 8000698:	0801b100 	.word	0x0801b100
 800069c:	00000000 	.word	0x00000000

080006a0 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80006a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80006a4:	f890 9000 	ldrb.w	r9, [r0]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 80006a8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80006ac:	8844      	ldrh	r4, [r0, #2]
        float32_t *pState = S->pState;                 /* State pointer */
 80006ae:	6885      	ldr	r5, [r0, #8]
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80006b0:	4599      	cmp	r9, r3
  pStateCur = S->pState + (numTaps - 1U);
 80006b2:	4426      	add	r6, r4
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80006b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80006b8:	fbb3 f7f9 	udiv	r7, r3, r9
  pStateCur = S->pState + (numTaps - 1U);
 80006bc:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  while (blkCnt > 0U)
 80006c0:	d837      	bhi.n	8000732 <arm_fir_decimate_f32+0x92>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 80006c2:	464b      	mov	r3, r9
 80006c4:	46b6      	mov	lr, r6
 80006c6:	468c      	mov	ip, r1

    do
    {
      *pStateCur++ = *pSrc++;
 80006c8:	ecfc 7a01 	vldmia	ip!, {s15}

    } while (--i);
 80006cc:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 80006ce:	ecee 7a01 	vstmia	lr!, {s15}
    } while (--i);
 80006d2:	d1f9      	bne.n	80006c8 <arm_fir_decimate_f32+0x28>
      *pStateCur++ = *pSrc++;
 80006d4:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 80006d8:	eb06 0689 	add.w	r6, r6, r9, lsl #2
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 80006dc:	b1b4      	cbz	r4, 800070c <arm_fir_decimate_f32+0x6c>
 80006de:	4623      	mov	r3, r4
    pb = pCoeffs;
 80006e0:	46c6      	mov	lr, r8
    while (tapCnt > 0U)
 80006e2:	46ac      	mov	ip, r5
    acc0 = 0.0f;
 80006e4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000738 <arm_fir_decimate_f32+0x98>

      /* Fetch 1 state variable */
      x0 = *px0++;

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 80006e8:	ecfe 6a01 	vldmia	lr!, {s13}
    while (tapCnt > 0U)
 80006ec:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 80006ee:	ecbc 7a01 	vldmia	ip!, {s14}
 80006f2:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 80006f6:	d1f7      	bne.n	80006e8 <arm_fir_decimate_f32+0x48>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 80006f8:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 80006fa:	3f01      	subs	r7, #1

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 80006fc:	ece2 7a01 	vstmia	r2!, {s15}
    pState = pState + S->M;
 8000700:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  while (blkCnt > 0U)
 8000704:	d00b      	beq.n	800071e <arm_fir_decimate_f32+0x7e>
    i = S->M;
 8000706:	f890 9000 	ldrb.w	r9, [r0]
 800070a:	e7da      	b.n	80006c2 <arm_fir_decimate_f32+0x22>
    pState = pState + S->M;
 800070c:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 800070e:	3f01      	subs	r7, #1
    acc0 = 0.0f;
 8000710:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000738 <arm_fir_decimate_f32+0x98>
    pState = pState + S->M;
 8000714:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    *pDst++ = acc0;
 8000718:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 800071c:	d1f3      	bne.n	8000706 <arm_fir_decimate_f32+0x66>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 800071e:	6883      	ldr	r3, [r0, #8]
 8000720:	e003      	b.n	800072a <arm_fir_decimate_f32+0x8a>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000722:	f855 2b04 	ldr.w	r2, [r5], #4
 8000726:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 800072a:	3c01      	subs	r4, #1
 800072c:	d1f9      	bne.n	8000722 <arm_fir_decimate_f32+0x82>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 800072e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (blkCnt > 0U)
 8000732:	462b      	mov	r3, r5
 8000734:	e7f9      	b.n	800072a <arm_fir_decimate_f32+0x8a>
 8000736:	bf00      	nop
 8000738:	00000000 	.word	0x00000000

0800073c <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	4616      	mov	r6, r2
 8000740:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8000744:	fbb2 f4f6 	udiv	r4, r2, r6
 8000748:	fb06 2414 	mls	r4, r6, r4, r2
 800074c:	b96c      	cbnz	r4, 800076a <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800074e:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000750:	1e4b      	subs	r3, r1, #1
 8000752:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 8000754:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000756:	441a      	add	r2, r3
 8000758:	4621      	mov	r1, r4
 800075a:	4638      	mov	r0, r7
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	f018 fa6f 	bl	8018c40 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 8000762:	4620      	mov	r0, r4
    S->pState = pState;
 8000764:	60af      	str	r7, [r5, #8]
    S->M = M;
 8000766:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 8000768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800076a:	f06f 0001 	mvn.w	r0, #1
}
 800076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000770 <arm_fir_interpolate_f32>:
void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000774:	4607      	mov	r7, r0
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        float32_t *pState = S->pState;                 /* State pointer */
 8000776:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 800077a:	4691      	mov	r9, r2
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *ptr1;                               /* Temporary pointer for state buffer */
  const float32_t *ptr2;                               /* Temporary pointer for coefficient buffer */
        float32_t sum0;                                /* Accumulators */
        uint32_t i, blkCnt, tapCnt;                    /* Loop counters */
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
 800077c:	8840      	ldrh	r0, [r0, #2]
        float32_t c0, c1, c2, c3;
#endif

  /* S->pState buffer contains previous frame (phaseLen - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (phaseLen - 1U);
 800077e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
{
 8000782:	b085      	sub	sp, #20
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000784:	f8d7 8004 	ldr.w	r8, [r7, #4]
  pStateCur = S->pState + (phaseLen - 1U);
 8000788:	4402      	add	r2, r0
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800078a:	9302      	str	r3, [sp, #8]
  pStateCur = S->pState + (phaseLen - 1U);
 800078c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  while (blkCnt > 0U)
 8000790:	2b00      	cmp	r3, #0
 8000792:	d05a      	beq.n	800084a <arm_fir_interpolate_f32+0xda>
        float32_t *pState = S->pState;                 /* State pointer */
 8000794:	46d6      	mov	lr, sl
 8000796:	f8cd a00c 	str.w	sl, [sp, #12]
 800079a:	468b      	mov	fp, r1
 800079c:	469a      	mov	sl, r3
 800079e:	9201      	str	r2, [sp, #4]
  {
    /* Copy new input sample into the state buffer */
    *pStateCur++ = *pSrc++;
 80007a0:	9a01      	ldr	r2, [sp, #4]
 80007a2:	f85b 3b04 	ldr.w	r3, [fp], #4
 80007a6:	f842 3b04 	str.w	r3, [r2], #4

    /* Address modifier index of coefficient buffer */
    j = 1U;

    /* Loop over the Interpolation factor. */
    i = S->L;
 80007aa:	783e      	ldrb	r6, [r7, #0]
    *pStateCur++ = *pSrc++;
 80007ac:	9201      	str	r2, [sp, #4]

    while (i > 0U)
 80007ae:	b376      	cbz	r6, 800080e <arm_fir_interpolate_f32+0x9e>
 80007b0:	4632      	mov	r2, r6
    j = 1U;
 80007b2:	2501      	movs	r5, #1
    while (i > 0U)
 80007b4:	46cc      	mov	ip, r9

      /* Initialize state pointer */
      ptr1 = pState;

      /* Initialize coefficient pointer */
      ptr2 = pCoeffs + (S->L - j);
 80007b6:	1b53      	subs	r3, r2, r5
 80007b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      /* Initialize tapCnt with number of samples */
      tapCnt = phaseLen;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (tapCnt > 0U)
 80007bc:	b1e8      	cbz	r0, 80007fa <arm_fir_interpolate_f32+0x8a>
 80007be:	2a01      	cmp	r2, #1
        sum0 += *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
 80007c0:	ea4f 0482 	mov.w	r4, r2, lsl #2
      sum0 = 0.0f;
 80007c4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8000850 <arm_fir_interpolate_f32+0xe0>
        ptr2 += S->L;
 80007c8:	4602      	mov	r2, r0
 80007ca:	4671      	mov	r1, lr
 80007cc:	d133      	bne.n	8000836 <arm_fir_interpolate_f32+0xc6>
        sum0 += *ptr1++ * *ptr2;
 80007ce:	edd3 6a00 	vldr	s13, [r3]
      while (tapCnt > 0U)
 80007d2:	3a01      	subs	r2, #1
        sum0 += *ptr1++ * *ptr2;
 80007d4:	ecb1 7a01 	vldmia	r1!, {s14}
        ptr2 += S->L;
 80007d8:	4423      	add	r3, r4
        sum0 += *ptr1++ * *ptr2;
 80007da:	eee6 7a87 	vfma.f32	s15, s13, s14
      while (tapCnt > 0U)
 80007de:	d1f6      	bne.n	80007ce <arm_fir_interpolate_f32+0x5e>
    while (i > 0U)
 80007e0:	42ae      	cmp	r6, r5

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = sum0;

      /* Increment the address modifier index of coefficient buffer */
      j++;
 80007e2:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 80007e6:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 80007ea:	d00e      	beq.n	800080a <arm_fir_interpolate_f32+0x9a>
      ptr2 = pCoeffs + (S->L - j);
 80007ec:	461d      	mov	r5, r3
 80007ee:	783a      	ldrb	r2, [r7, #0]
 80007f0:	1b53      	subs	r3, r2, r5
 80007f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      while (tapCnt > 0U)
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d1e1      	bne.n	80007be <arm_fir_interpolate_f32+0x4e>
      sum0 = 0.0f;
 80007fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000850 <arm_fir_interpolate_f32+0xe0>
    while (i > 0U)
 80007fe:	42ae      	cmp	r6, r5
      j++;
 8000800:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 8000804:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 8000808:	d1f0      	bne.n	80007ec <arm_fir_interpolate_f32+0x7c>
      *pDst++ = sum0;
 800080a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
  while (blkCnt > 0U)
 800080e:	f1ba 0a01 	subs.w	sl, sl, #1
      i--;
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 8000812:	f10e 0e04 	add.w	lr, lr, #4
  while (blkCnt > 0U)
 8000816:	d1c3      	bne.n	80007a0 <arm_fir_interpolate_f32+0x30>
    pState = pState + 1;
 8000818:	e9dd 3a02 	ldrd	r3, sl, [sp, #8]
 800081c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
  /* Processing is complete.
     Now copy the last phaseLen - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	e003      	b.n	800082c <arm_fir_interpolate_f32+0xbc>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000824:	f85a 2b04 	ldr.w	r2, [sl], #4
 8000828:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 800082c:	3801      	subs	r0, #1
 800082e:	d1f9      	bne.n	8000824 <arm_fir_interpolate_f32+0xb4>
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 8000830:	b005      	add	sp, #20
 8000832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sum0 += *ptr1++ * *ptr2;
 8000836:	ed93 7a00 	vldr	s14, [r3]
      while (tapCnt > 0U)
 800083a:	3a01      	subs	r2, #1
        sum0 += *ptr1++ * *ptr2;
 800083c:	ecf1 6a01 	vldmia	r1!, {s13}
        ptr2 += S->L;
 8000840:	4423      	add	r3, r4
        sum0 += *ptr1++ * *ptr2;
 8000842:	eee6 7a87 	vfma.f32	s15, s13, s14
      while (tapCnt > 0U)
 8000846:	d1f6      	bne.n	8000836 <arm_fir_interpolate_f32+0xc6>
 8000848:	e7ca      	b.n	80007e0 <arm_fir_interpolate_f32+0x70>
  while (blkCnt > 0U)
 800084a:	4653      	mov	r3, sl
 800084c:	e7ee      	b.n	800082c <arm_fir_interpolate_f32+0xbc>
 800084e:	bf00      	nop
 8000850:	00000000 	.word	0x00000000

08000854 <arm_fir_interpolate_init_f32>:
        uint8_t L,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	4605      	mov	r5, r0
 8000858:	9e04      	ldr	r6, [sp, #16]
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
 800085a:	fbb2 f0f1 	udiv	r0, r2, r1
 800085e:	fb01 2410 	mls	r4, r1, r0, r2
 8000862:	b96c      	cbnz	r4, 8000880 <arm_fir_interpolate_init_f32+0x2c>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8000864:	606b      	str	r3, [r5, #4]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000866:	9b05      	ldr	r3, [sp, #20]
    S->L = L;
 8000868:	7029      	strb	r1, [r5, #0]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 800086a:	4621      	mov	r1, r4
 800086c:	1e5a      	subs	r2, r3, #1
    S->phaseLength = numTaps / L;
 800086e:	8068      	strh	r0, [r5, #2]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000870:	4402      	add	r2, r0
 8000872:	4630      	mov	r0, r6
 8000874:	0092      	lsls	r2, r2, #2
 8000876:	f018 f9e3 	bl	8018c40 <memset>

    /* Assign state pointer */
    S->pState = pState;

    status = ARM_MATH_SUCCESS;
 800087a:	4620      	mov	r0, r4
    S->pState = pState;
 800087c:	60ae      	str	r6, [r5, #8]
  }

  return (status);
}
 800087e:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
 8000880:	f06f 0001 	mvn.w	r0, #1
}
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	bf00      	nop

08000888 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000888:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000910 <arm_sin_f32+0x88>
 800088c:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000890:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
 8000894:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
 8000898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089c:	d504      	bpl.n	80008a8 <arm_sin_f32+0x20>
  {
    n--;
 800089e:	ee17 3a90 	vmov	r3, s15
 80008a2:	3b01      	subs	r3, #1
 80008a4:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80008ac:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000914 <arm_sin_f32+0x8c>
  in = in - (float32_t) n;
 80008b0:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80008b4:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
 80008b8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80008bc:	ee17 3a10 	vmov	r3, s14
 80008c0:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80008c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c6:	d21a      	bcs.n	80008fe <arm_sin_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80008c8:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 80008cc:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 80008ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80008d2:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 80008d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <arm_sin_f32+0x90>)
  b = sinTable_f32[index+1];
 80008dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 80008e0:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 80008e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 80008e8:	ed91 6a00 	vldr	s12, [r1]
 80008ec:	edd2 6a00 	vldr	s13, [r2]
 80008f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008f4:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (sinVal);
}
 80008f8:	eea7 0a26 	vfma.f32	s0, s14, s13
 80008fc:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80008fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000902:	2101      	movs	r1, #1
 8000904:	2300      	movs	r3, #0
 8000906:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800091c <arm_sin_f32+0x94>
 800090a:	eeb0 0a67 	vmov.f32	s0, s15
 800090e:	e7e2      	b.n	80008d6 <arm_sin_f32+0x4e>
 8000910:	3e22f983 	.word	0x3e22f983
 8000914:	44000000 	.word	0x44000000
 8000918:	0801b100 	.word	0x0801b100
 800091c:	00000000 	.word	0x00000000

08000920 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000920:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <dbToATableLookup+0x68>)
{
 8000924:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <dbToATableLookup+0x6c>)
 800092a:	edd2 0a00 	vldr	s1, [r2]
 800092e:	ed93 7a00 	vldr	s14, [r3]
 8000932:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000990 <dbToATableLookup+0x70>
 8000936:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800093a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000994 <dbToATableLookup+0x74>
 800093e:	f013 f943 	bl	8013bc8 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000942:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000946:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <dbToATableLookup+0x78>)
 800094c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000950:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
 8000954:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 8000958:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 800095a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800095e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000962:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
 8000964:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000968:	bf28      	it	cs
 800096a:	4601      	movcs	r1, r0
 800096c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000970:	ed93 7a00 	vldr	s14, [r3]
 8000974:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000978:	edd2 6a00 	vldr	s13, [r2]
 800097c:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000980:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000984:	bd08      	pop	{r3, pc}
 8000986:	bf00      	nop
 8000988:	200013a0 	.word	0x200013a0
 800098c:	200013a4 	.word	0x200013a4
 8000990:	467ffc00 	.word	0x467ffc00
 8000994:	00000000 	.word	0x00000000
 8000998:	30002000 	.word	0x30002000

0800099c <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 800099c:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80009a0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80009fc <mtofTableLookup+0x60>
 80009a4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000a00 <mtofTableLookup+0x64>
{
 80009a8:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80009aa:	f013 f90d 	bl	8013bc8 <LEAF_clip>
 80009ae:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000a04 <mtofTableLookup+0x68>
 80009b2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000a08 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80009b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80009bc:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
 80009c0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80009c4:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
 80009c8:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
 80009cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80009d0:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80009d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
 80009d6:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80009da:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80009de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80009e2:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80009e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80009ea:	edd3 7a00 	vldr	s15, [r3]
 80009ee:	edd2 6a00 	vldr	s13, [r2]
 80009f2:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80009f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80009fa:	bd08      	pop	{r3, pc}
 80009fc:	43230000 	.word	0x43230000
 8000a00:	c3230000 	.word	0xc3230000
 8000a04:	42c80000 	.word	0x42c80000
 8000a08:	46800000 	.word	0x46800000
 8000a0c:	30022000 	.word	0x30022000

08000a10 <audioInit>:


void audioInit()
{
 8000a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000a14:	4d92      	ldr	r5, [pc, #584]	; (8000c60 <audioInit+0x250>)
 8000a16:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a1a:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8000c64 <audioInit+0x254>
 8000a1e:	4628      	mov	r0, r5
 8000a20:	4991      	ldr	r1, [pc, #580]	; (8000c68 <audioInit+0x258>)
 8000a22:	4b92      	ldr	r3, [pc, #584]	; (8000c6c <audioInit+0x25c>)
 8000a24:	4c92      	ldr	r4, [pc, #584]	; (8000c70 <audioInit+0x260>)
{
 8000a26:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000a2a:	f018 f879 	bl	8018b20 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000a2e:	462b      	mov	r3, r5
 8000a30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a34:	498f      	ldr	r1, [pc, #572]	; (8000c74 <audioInit+0x264>)
 8000a36:	4890      	ldr	r0, [pc, #576]	; (8000c78 <audioInit+0x268>)
 8000a38:	f013 fcee 	bl	8014418 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000a3c:	462b      	mov	r3, r5
 8000a3e:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000a42:	498e      	ldr	r1, [pc, #568]	; (8000c7c <audioInit+0x26c>)
 8000a44:	488e      	ldr	r0, [pc, #568]	; (8000c80 <audioInit+0x270>)
 8000a46:	f013 fce7 	bl	8014418 <tMempool_init>

	leaf.clearOnAllocation = 1;
 8000a4a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000a54:	eddf 1a8b 	vldr	s3, [pc, #556]	; 8000c84 <audioInit+0x274>
 8000a58:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8000c88 <audioInit+0x278>
 8000a5c:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8000c8c <audioInit+0x27c>
 8000a60:	488b      	ldr	r0, [pc, #556]	; (8000c90 <audioInit+0x280>)
	leaf.clearOnAllocation = 1;
 8000a62:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000a64:	f013 f93c 	bl	8013ce0 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
 8000a68:	4b8a      	ldr	r3, [pc, #552]	; (8000c94 <audioInit+0x284>)
 8000a6a:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000a6c:	498a      	ldr	r1, [pc, #552]	; (8000c98 <audioInit+0x288>)
 8000a6e:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
 8000a72:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000a74:	eddf 8a89 	vldr	s17, [pc, #548]	; 8000c9c <audioInit+0x28c>
		previousStringInputs[i]	= 0;
 8000a78:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000a7a:	ed9f 8a89 	vldr	s16, [pc, #548]	; 8000ca0 <audioInit+0x290>
		previousStringInputs[i]	= 0;
 8000a7e:	809a      	strh	r2, [r3, #4]
 8000a80:	80da      	strh	r2, [r3, #6]
 8000a82:	811a      	strh	r2, [r3, #8]
 8000a84:	815a      	strh	r2, [r3, #10]
 8000a86:	819a      	strh	r2, [r3, #12]
 8000a88:	81da      	strh	r2, [r3, #14]
 8000a8a:	821a      	strh	r2, [r3, #16]
 8000a8c:	825a      	strh	r2, [r3, #18]
 8000a8e:	829a      	strh	r2, [r3, #20]
 8000a90:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000a92:	4b84      	ldr	r3, [pc, #528]	; (8000ca4 <audioInit+0x294>)
 8000a94:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000a96:	f01a fb2f 	bl	801b0f8 <__randomNumber_veneer>
 8000a9a:	eef0 7a48 	vmov.f32	s15, s16
 8000a9e:	eee0 7a28 	vfma.f32	s15, s0, s17
 8000aa2:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 8000aa6:	42ac      	cmp	r4, r5
 8000aa8:	d1f5      	bne.n	8000a96 <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 8000aaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000aae:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8000ca8 <audioInit+0x298>
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	487d      	ldr	r0, [pc, #500]	; (8000cac <audioInit+0x29c>)
 8000ab8:	f013 f97c 	bl	8013db4 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 8000abc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000cb0 <audioInit+0x2a0>
 8000ac0:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000cb4 <audioInit+0x2a4>
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	487b      	ldr	r0, [pc, #492]	; (8000cb8 <audioInit+0x2a8>)
 8000aca:	f013 f997 	bl	8013dfc <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000ace:	4b7b      	ldr	r3, [pc, #492]	; (8000cbc <audioInit+0x2ac>)
 8000ad0:	4a7b      	ldr	r2, [pc, #492]	; (8000cc0 <audioInit+0x2b0>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000ad2:	497c      	ldr	r1, [pc, #496]	; (8000cc4 <audioInit+0x2b4>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000ad4:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000ad6:	4b7c      	ldr	r3, [pc, #496]	; (8000cc8 <audioInit+0x2b8>)
 8000ad8:	4a7c      	ldr	r2, [pc, #496]	; (8000ccc <audioInit+0x2bc>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000ada:	487d      	ldr	r0, [pc, #500]	; (8000cd0 <audioInit+0x2c0>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000adc:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000ade:	4b7d      	ldr	r3, [pc, #500]	; (8000cd4 <audioInit+0x2c4>)
 8000ae0:	4a7d      	ldr	r2, [pc, #500]	; (8000cd8 <audioInit+0x2c8>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000ae2:	6008      	str	r0, [r1, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae8:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000cdc <audioInit+0x2cc>
 8000aec:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000ce0 <audioInit+0x2d0>
 8000af0:	487c      	ldr	r0, [pc, #496]	; (8000ce4 <audioInit+0x2d4>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000af2:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000af4:	f013 f9ac 	bl	8013e50 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000af8:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <audioInit+0x2d8>)
		numStringsThisBoard = 2;
 8000afa:	2002      	movs	r0, #2
 8000afc:	4c7b      	ldr	r4, [pc, #492]	; (8000cec <audioInit+0x2dc>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000afe:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
 8000b00:	497b      	ldr	r1, [pc, #492]	; (8000cf0 <audioInit+0x2e0>)
 8000b02:	f104 0650 	add.w	r6, r4, #80	; 0x50
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000b06:	4a7b      	ldr	r2, [pc, #492]	; (8000cf4 <audioInit+0x2e4>)
 8000b08:	005b      	lsls	r3, r3, #1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000b0a:	4d55      	ldr	r5, [pc, #340]	; (8000c60 <audioInit+0x250>)
 8000b0c:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8000cf8 <audioInit+0x2e8>
 8000b10:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8000c88 <audioInit+0x278>
		numStringsThisBoard = 2;
 8000b14:	7008      	strb	r0, [r1, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000b16:	eddf 0a78 	vldr	s1, [pc, #480]	; 8000cf8 <audioInit+0x2e8>
 8000b1a:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8000c88 <audioInit+0x278>
 8000b1e:	4950      	ldr	r1, [pc, #320]	; (8000c60 <audioInit+0x250>)
 8000b20:	4876      	ldr	r0, [pc, #472]	; (8000cfc <audioInit+0x2ec>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000b22:	6013      	str	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000b24:	f010 f8ac 	bl	8010c80 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000b28:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 8000b2a:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000b2c:	eef0 0a68 	vmov.f32	s1, s17
 8000b30:	4629      	mov	r1, r5
 8000b32:	eeb0 0a48 	vmov.f32	s0, s16
 8000b36:	f010 f8a3 	bl	8010c80 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 8000b3a:	42b4      	cmp	r4, r6
 8000b3c:	d1f4      	bne.n	8000b28 <audioInit+0x118>
 8000b3e:	4c70      	ldr	r4, [pc, #448]	; (8000d00 <audioInit+0x2f0>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000b40:	4e47      	ldr	r6, [pc, #284]	; (8000c60 <audioInit+0x250>)
 8000b42:	eddf 8a6d 	vldr	s17, [pc, #436]	; 8000cf8 <audioInit+0x2e8>
 8000b46:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b4a:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 8000c88 <audioInit+0x278>
 8000b4e:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000b50:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000b52:	eef0 0a68 	vmov.f32	s1, s17
 8000b56:	4631      	mov	r1, r6
 8000b58:	eeb0 0a48 	vmov.f32	s0, s16
 8000b5c:	f010 f890 	bl	8010c80 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d1f4      	bne.n	8000b4e <audioInit+0x13e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000b64:	493e      	ldr	r1, [pc, #248]	; (8000c60 <audioInit+0x250>)
 8000b66:	eddf 0a67 	vldr	s1, [pc, #412]	; 8000d04 <audioInit+0x2f4>
 8000b6a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000c88 <audioInit+0x278>
 8000b6e:	4866      	ldr	r0, [pc, #408]	; (8000d08 <audioInit+0x2f8>)
 8000b70:	f010 f886 	bl	8010c80 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000b74:	493a      	ldr	r1, [pc, #232]	; (8000c60 <audioInit+0x250>)
 8000b76:	eddf 0a65 	vldr	s1, [pc, #404]	; 8000d0c <audioInit+0x2fc>
 8000b7a:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8000d10 <audioInit+0x300>
 8000b7e:	4865      	ldr	r0, [pc, #404]	; (8000d14 <audioInit+0x304>)
 8000b80:	f00e ff70 	bl	800fa64 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000b84:	4936      	ldr	r1, [pc, #216]	; (8000c60 <audioInit+0x250>)
 8000b86:	4c64      	ldr	r4, [pc, #400]	; (8000d18 <audioInit+0x308>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000b88:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000b8a:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8000d04 <audioInit+0x2f4>
 8000b8e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8000c88 <audioInit+0x278>
 8000b92:	f104 0808 	add.w	r8, r4, #8
 8000b96:	4861      	ldr	r0, [pc, #388]	; (8000d1c <audioInit+0x30c>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000b98:	ed9f 9a61 	vldr	s18, [pc, #388]	; 8000d20 <audioInit+0x310>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000b9c:	f010 f870 	bl	8010c80 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000ba0:	eddf 8a39 	vldr	s17, [pc, #228]	; 8000c88 <audioInit+0x278>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000ba4:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000ba6:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8000cb0 <audioInit+0x2a0>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000baa:	4f5e      	ldr	r7, [pc, #376]	; (8000d24 <audioInit+0x314>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000bac:	4e5e      	ldr	r6, [pc, #376]	; (8000d28 <audioInit+0x318>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000bae:	eddf 0a57 	vldr	s1, [pc, #348]	; 8000d0c <audioInit+0x2fc>
 8000bb2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000d10 <audioInit+0x300>
 8000bb6:	485d      	ldr	r0, [pc, #372]	; (8000d2c <audioInit+0x31c>)
 8000bb8:	f00e ff54 	bl	800fa64 <tEnvelopeFollower_init>
	audioInitAdditive();
 8000bbc:	f01a fa98 	bl	801b0f0 <__audioInitAdditive_veneer>
	audioInitString1();
 8000bc0:	f01a fa6a 	bl	801b098 <__audioInitString1_veneer>
	audioInitVocal();
 8000bc4:	f01a fa90 	bl	801b0e8 <__audioInitVocal_veneer>
	audioInitSynth();
 8000bc8:	f002 fc4e 	bl	8003468 <audioInitSynth>
	audioInitString3();
 8000bcc:	f01a fa88 	bl	801b0e0 <__audioInitString3_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000bd0:	eef0 1a49 	vmov.f32	s3, s18
 8000bd4:	462b      	mov	r3, r5
 8000bd6:	eeb0 1a68 	vmov.f32	s2, s17
 8000bda:	4620      	mov	r0, r4
 8000bdc:	eef0 0a48 	vmov.f32	s1, s16
 8000be0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000c88 <audioInit+0x278>
 8000be4:	492a      	ldr	r1, [pc, #168]	; (8000c90 <audioInit+0x280>)
 8000be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bea:	f00f fd35 	bl	8010658 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000bee:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000bf2:	462a      	mov	r2, r5
 8000bf4:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000d30 <audioInit+0x320>
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f011 f814 	bl	8011c28 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000c00:	462a      	mov	r2, r5
 8000c02:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8000d34 <audioInit+0x324>
 8000c06:	2101      	movs	r1, #1
 8000c08:	4630      	mov	r0, r6
 8000c0a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000d38 <audioInit+0x328>
 8000c0e:	f011 f80b 	bl	8011c28 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 8000c12:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000d3c <audioInit+0x32c>
 8000c16:	f013 fa35 	bl	8014084 <faster_mtof>
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	f011 f808 	bl	8011c30 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000c20:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000d40 <audioInit+0x330>
 8000c24:	f013 fa2e 	bl	8014084 <faster_mtof>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000c28:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f011 f800 	bl	8011c30 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000c30:	462a      	mov	r2, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	4843      	ldr	r0, [pc, #268]	; (8000d44 <audioInit+0x334>)
 8000c36:	f013 ffdd 	bl	8014bf4 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000c3a:	45a0      	cmp	r8, r4
 8000c3c:	d1c8      	bne.n	8000bd0 <audioInit+0x1c0>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c42:	2100      	movs	r1, #0
 8000c44:	4840      	ldr	r0, [pc, #256]	; (8000d48 <audioInit+0x338>)
 8000c46:	f017 fffb 	bl	8018c40 <memset>
	}

	audioFrameFunction = audioFrameSynth;
 8000c4a:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <audioInit+0x33c>)
 8000c4c:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <audioInit+0x340>)
	HAL_Delay(1);
 8000c4e:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameSynth;
 8000c50:	601a      	str	r2, [r3, #0]

}
 8000c52:	ecbd 8b04 	vpop	{d8-d9}
 8000c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 8000c5a:	f003 b9ed 	b.w	8004038 <HAL_Delay>
 8000c5e:	bf00      	nop
 8000c60:	20005484 	.word	0x20005484
 8000c64:	473b8000 	.word	0x473b8000
 8000c68:	2000596c 	.word	0x2000596c
 8000c6c:	00001b21 	.word	0x00001b21
 8000c70:	20005568 	.word	0x20005568
 8000c74:	24040000 	.word	0x24040000
 8000c78:	200054d8 	.word	0x200054d8
 8000c7c:	60000000 	.word	0x60000000
 8000c80:	20005480 	.word	0x20005480
 8000c84:	ba51b717 	.word	0xba51b717
 8000c88:	00000000 	.word	0x00000000
 8000c8c:	3a83126f 	.word	0x3a83126f
 8000c90:	200013a8 	.word	0x200013a8
 8000c94:	20005550 	.word	0x20005550
 8000c98:	200053a8 	.word	0x200053a8
 8000c9c:	3ecccccd 	.word	0x3ecccccd
 8000ca0:	3f4ccccd 	.word	0x3f4ccccd
 8000ca4:	457ff000 	.word	0x457ff000
 8000ca8:	3727c5ac 	.word	0x3727c5ac
 8000cac:	30012000 	.word	0x30012000
 8000cb0:	42480000 	.word	0x42480000
 8000cb4:	c2b40000 	.word	0xc2b40000
 8000cb8:	30002000 	.word	0x30002000
 8000cbc:	2000137c 	.word	0x2000137c
 8000cc0:	467ffca8 	.word	0x467ffca8
 8000cc4:	20001378 	.word	0x20001378
 8000cc8:	200013a4 	.word	0x200013a4
 8000ccc:	42ea0af9 	.word	0x42ea0af9
 8000cd0:	3e27c37b 	.word	0x3e27c37b
 8000cd4:	200013a0 	.word	0x200013a0
 8000cd8:	c6248fb7 	.word	0xc6248fb7
 8000cdc:	4323d666 	.word	0x4323d666
 8000ce0:	c323d666 	.word	0xc323d666
 8000ce4:	30022000 	.word	0x30022000
 8000ce8:	200144e5 	.word	0x200144e5
 8000cec:	20005430 	.word	0x20005430
 8000cf0:	20000694 	.word	0x20000694
 8000cf4:	200053bc 	.word	0x200053bc
 8000cf8:	3a03126f 	.word	0x3a03126f
 8000cfc:	2001444c 	.word	0x2001444c
 8000d00:	2000551c 	.word	0x2000551c
 8000d04:	3c23d70a 	.word	0x3c23d70a
 8000d08:	20001394 	.word	0x20001394
 8000d0c:	3f7fd220 	.word	0x3f7fd220
 8000d10:	38d1b717 	.word	0x38d1b717
 8000d14:	2000138c 	.word	0x2000138c
 8000d18:	200053b4 	.word	0x200053b4
 8000d1c:	20001398 	.word	0x20001398
 8000d20:	43480000 	.word	0x43480000
 8000d24:	200054e4 	.word	0x200054e4
 8000d28:	200054e8 	.word	0x200054e8
 8000d2c:	20001390 	.word	0x20001390
 8000d30:	44bb8000 	.word	0x44bb8000
 8000d34:	3f666666 	.word	0x3f666666
 8000d38:	44480000 	.word	0x44480000
 8000d3c:	42e66666 	.word	0x42e66666
 8000d40:	42cccccd 	.word	0x42cccccd
 8000d44:	200054dc 	.word	0x200054dc
 8000d48:	30000000 	.word	0x30000000
 8000d4c:	20001380 	.word	0x20001380
 8000d50:	00009761 	.word	0x00009761

08000d54 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000d54:	b510      	push	{r4, lr}
 8000d56:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f003 f96d 	bl	8004038 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	4903      	ldr	r1, [pc, #12]	; (8000d70 <audioStart+0x1c>)
 8000d64:	4620      	mov	r0, r4
 8000d66:	f008 fba9 	bl	80094bc <HAL_SAI_Transmit_DMA>
 8000d6a:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <audioStart+0x20>)
 8000d6c:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000d6e:	bd10      	pop	{r4, pc}
 8000d70:	30000000 	.word	0x30000000
 8000d74:	2001443c 	.word	0x2001443c

08000d78 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000d7e:	b082      	sub	sp, #8
 8000d80:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d86:	483b      	ldr	r0, [pc, #236]	; (8000e74 <AudioCodec_init+0xfc>)
 8000d88:	f005 f918 	bl	8005fbc <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000d8c:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000d8e:	4c3a      	ldr	r4, [pc, #232]	; (8000e78 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8000d90:	f003 f952 	bl	8004038 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d94:	4f39      	ldr	r7, [pc, #228]	; (8000e7c <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8000d96:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d9a:	4e39      	ldr	r6, [pc, #228]	; (8000e80 <AudioCodec_init+0x108>)
 8000d9c:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000d9e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000da0:	2120      	movs	r1, #32
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	4628      	mov	r0, r5
 8000da6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000e88 <AudioCodec_init+0x110>
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	8833      	ldrh	r3, [r6, #0]
 8000dae:	f005 fa25 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000db6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dba:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8000dbc:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8000dc4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dc6:	8833      	ldrh	r3, [r6, #0]
 8000dc8:	f005 fa18 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dd0:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dd4:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8000dd6:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dd8:	2120      	movs	r1, #32
 8000dda:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8000ddc:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dde:	8833      	ldrh	r3, [r6, #0]
 8000de0:	f005 fa0c 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000de8:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dec:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8000dee:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000df2:	2120      	movs	r1, #32
 8000df4:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8000df6:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000df8:	8833      	ldrh	r3, [r6, #0]
 8000dfa:	f005 f9ff 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e02:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e06:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8000e08:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8000e10:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e12:	8833      	ldrh	r3, [r6, #0]
 8000e14:	f005 f9f2 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e1c:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e20:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8000e22:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e26:	2120      	movs	r1, #32
 8000e28:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8000e2a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e2c:	8833      	ldrh	r3, [r6, #0]
 8000e2e:	f005 f9e5 	bl	80061fc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e36:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e3a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8000e3c:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e40:	2120      	movs	r1, #32
 8000e42:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8000e44:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e46:	8833      	ldrh	r3, [r6, #0]
 8000e48:	f005 f9d8 	bl	80061fc <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e4c:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8000e4e:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e52:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e54:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e58:	4628      	mov	r0, r5
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000e5e:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000e60:	2120      	movs	r1, #32
 8000e62:	f005 f9cb 	bl	80061fc <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <AudioCodec_init+0x10c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

}
 8000e6c:	b002      	add	sp, #8
 8000e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e72:	bf00      	nop
 8000e74:	58020800 	.word	0x58020800
 8000e78:	20014454 	.word	0x20014454
 8000e7c:	200008a0 	.word	0x200008a0
 8000e80:	200008a4 	.word	0x200008a4
 8000e84:	2000139c 	.word	0x2000139c
 8000e88:	20014456 	.word	0x20014456

08000e8c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	210a      	movs	r1, #10
 8000e92:	200c      	movs	r0, #12
{
 8000e94:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000e9a:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9c:	f044 0401 	orr.w	r4, r4, #1
 8000ea0:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000eb0:	f003 f8f6 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eb4:	200c      	movs	r0, #12
 8000eb6:	f003 f931 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2109      	movs	r1, #9
 8000ebe:	200d      	movs	r0, #13
 8000ec0:	f003 f8ee 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ec4:	200d      	movs	r0, #13
 8000ec6:	f003 f929 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2108      	movs	r1, #8
 8000ece:	200e      	movs	r0, #14
 8000ed0:	f003 f8e6 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed4:	200e      	movs	r0, #14
 8000ed6:	f003 f921 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2107      	movs	r1, #7
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f003 f8de 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	f003 f919 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2010      	movs	r0, #16
 8000eee:	4611      	mov	r1, r2
 8000ef0:	f003 f8d6 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef4:	2010      	movs	r0, #16

}
 8000ef6:	b002      	add	sp, #8
 8000ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000efc:	f003 b90e 	b.w	800411c <HAL_NVIC_EnableIRQ>
 8000f00:	58024400 	.word	0x58024400

08000f04 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f06:	2300      	movs	r3, #0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000f08:	2206      	movs	r2, #6
  SdramTiming.LoadToActiveDelay = 2;
 8000f0a:	2102      	movs	r1, #2
{
 8000f0c:	b510      	push	{r4, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f0e:	6043      	str	r3, [r0, #4]
{
 8000f10:	b088      	sub	sp, #32
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f12:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f14:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000f16:	2304      	movs	r3, #4
  SdramTiming.RowCycleDelay = 6;
 8000f18:	9203      	str	r2, [sp, #12]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f1a:	4c17      	ldr	r4, [pc, #92]	; (8000f78 <MX_FMC_Init+0x74>)
  SdramTiming.LoadToActiveDelay = 2;
 8000f1c:	9100      	str	r1, [sp, #0]
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8000f1e:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f20:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f22:	6004      	str	r4, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 8000f24:	e9cd 2301 	strd	r2, r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f30:	2201      	movs	r2, #1
 8000f32:	2308      	movs	r3, #8
 8000f34:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f38:	2210      	movs	r2, #16
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000f40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000f48:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f4e:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f50:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f52:	f009 fb95 	bl	800a680 <HAL_SDRAM_Init>
 8000f56:	b928      	cbnz	r0, 8000f64 <MX_FMC_Init+0x60>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000f58:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f5c:	f003 f884 	bl	8004068 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f60:	b008      	add	sp, #32
 8000f62:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8000f64:	f001 fede 	bl	8002d24 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000f68:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f6c:	f003 f87c 	bl	8004068 <HAL_SetFMCMemorySwappingConfig>
}
 8000f70:	b008      	add	sp, #32
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	2001445c 	.word	0x2001445c
 8000f78:	52004140 	.word	0x52004140

08000f7c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000f7c:	4836      	ldr	r0, [pc, #216]	; (8001058 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f80:	b5d0      	push	{r4, r6, r7, lr}
 8000f82:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8000f84:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000f8a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000f8e:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8000f90:	b109      	cbz	r1, 8000f96 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f92:	b038      	add	sp, #224	; 0xe0
 8000f94:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8000f96:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8000f9a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	a80a      	add	r0, sp, #40	; 0x28
 8000f9e:	f017 fe4f 	bl	8018c40 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000fa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fa6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f006 fd87 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d14c      	bne.n	8001050 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fb8:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8000fbc:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fbe:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fc0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fc4:	2600      	movs	r6, #0
 8000fc6:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fcc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000fd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd4:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fde:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe0:	a902      	add	r1, sp, #8
 8000fe2:	481f      	ldr	r0, [pc, #124]	; (8001060 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fe4:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fea:	f004 fe97 	bl	8005d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000fee:	2219      	movs	r2, #25
 8000ff0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	a902      	add	r1, sp, #8
 8000ff4:	481b      	ldr	r0, [pc, #108]	; (8001064 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ffc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f004 fe8c 	bl	8005d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001004:	f248 1237 	movw	r2, #33079	; 0x8137
 8001008:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	a902      	add	r1, sp, #8
 800100c:	4816      	ldr	r0, [pc, #88]	; (8001068 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800100e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001014:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f004 fe80 	bl	8005d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800101c:	f64f 7283 	movw	r2, #65411	; 0xff83
 8001020:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	a902      	add	r1, sp, #8
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001026:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800102c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001030:	f004 fe74 	bl	8005d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001034:	f24c 7203 	movw	r2, #50947	; 0xc703
 8001038:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	a902      	add	r1, sp, #8
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800103e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001040:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001044:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f004 fe68 	bl	8005d1c <HAL_GPIO_Init>
}
 800104c:	b038      	add	sp, #224	; 0xe0
 800104e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001050:	f001 fe68 	bl	8002d24 <Error_Handler>
 8001054:	e7af      	b.n	8000fb6 <HAL_SDRAM_MspInit+0x3a>
 8001056:	bf00      	nop
 8001058:	20014458 	.word	0x20014458
 800105c:	58024400 	.word	0x58024400
 8001060:	58021400 	.word	0x58021400
 8001064:	58020800 	.word	0x58020800
 8001068:	58021800 	.word	0x58021800
 800106c:	58021000 	.word	0x58021000
 8001070:	58020c00 	.word	0x58020c00

08001074 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001078:	4b79      	ldr	r3, [pc, #484]	; (8001260 <MX_GPIO_Init+0x1ec>)
{
 800107a:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800107e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001278 <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001082:	4f78      	ldr	r7, [pc, #480]	; (8001264 <MX_GPIO_Init+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800108a:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800108c:	4e76      	ldr	r6, [pc, #472]	; (8001268 <MX_GPIO_Init+0x1f4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001094:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001098:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800109c:	f042 0210 	orr.w	r2, r2, #16
 80010a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010a8:	f002 0210 	and.w	r2, r2, #16
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010b4:	f042 0204 	orr.w	r2, r2, #4
 80010b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010c0:	f002 0204 	and.w	r2, r2, #4
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d8:	f002 0220 	and.w	r2, r2, #32
 80010dc:	9202      	str	r2, [sp, #8]
 80010de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010f4:	9203      	str	r2, [sp, #12]
 80010f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001104:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001108:	f002 0201 	and.w	r2, r2, #1
 800110c:	9204      	str	r2, [sp, #16]
 800110e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001114:	f042 0202 	orr.w	r2, r2, #2
 8001118:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800111c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001120:	f002 0202 	and.w	r2, r2, #2
 8001124:	9205      	str	r2, [sp, #20]
 8001126:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001128:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001130:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001138:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800113c:	9206      	str	r2, [sp, #24]
 800113e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001144:	f042 0208 	orr.w	r2, r2, #8
 8001148:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800114c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	9307      	str	r3, [sp, #28]
 8001158:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800115a:	f004 ff2f 	bl	8005fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800115e:	4622      	mov	r2, r4
 8001160:	4638      	mov	r0, r7
 8001162:	2102      	movs	r1, #2
 8001164:	f004 ff2a 	bl	8005fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001168:	4622      	mov	r2, r4
 800116a:	4630      	mov	r0, r6
 800116c:	2110      	movs	r1, #16
 800116e:	f004 ff25 	bl	8005fbc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001172:	f242 0220 	movw	r2, #8224	; 0x2020
 8001176:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	a908      	add	r1, sp, #32
 800117a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800117e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f004 fdcb 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	a908      	add	r1, sp, #32
 800118c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800118e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f004 fdc1 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800119a:	f248 02c6 	movw	r2, #32966	; 0x80c6
 800119e:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	4640      	mov	r0, r8
 80011a2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80011a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f004 fdb7 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b4:	a908      	add	r1, sp, #32
 80011b6:	482d      	ldr	r0, [pc, #180]	; (800126c <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011be:	f004 fdad 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2201      	movs	r2, #1
 80011c4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	a908      	add	r1, sp, #32
 80011c8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f004 fda4 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d4:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	a908      	add	r1, sp, #32
 80011d8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011da:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f004 fd9b 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80011e6:	f649 720c 	movw	r2, #40716	; 0x9f0c
 80011ea:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	4638      	mov	r0, r7
 80011ee:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80011f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f004 fd91 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80011fa:	f24f 32e5 	movw	r2, #62437	; 0xf3e5
 80011fe:	2303      	movs	r3, #3
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	a908      	add	r1, sp, #32
 8001202:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001206:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f004 fd87 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800120e:	2202      	movs	r2, #2
 8001210:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	a908      	add	r1, sp, #32
 8001214:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001218:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f004 fd7e 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001220:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8001224:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	a908      	add	r1, sp, #32
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 800122c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f004 fd74 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001234:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8001238:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	a908      	add	r1, sp, #32
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001240:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001244:	f004 fd6a 	bl	8005d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001248:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	a908      	add	r1, sp, #32
 800124c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f004 fd61 	bl	8005d1c <HAL_GPIO_Init>

}
 800125a:	b00e      	add	sp, #56	; 0x38
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001260:	58024400 	.word	0x58024400
 8001264:	58020000 	.word	0x58020000
 8001268:	58020400 	.word	0x58020400
 800126c:	58021400 	.word	0x58021400
 8001270:	58020c00 	.word	0x58020c00
 8001274:	58021800 	.word	0x58021800
 8001278:	58020800 	.word	0x58020800

0800127c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800127c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	2300      	movs	r3, #0
 8001282:	4917      	ldr	r1, [pc, #92]	; (80012e0 <MX_I2C2_Init+0x64>)
 8001284:	2401      	movs	r4, #1
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001288:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 800128e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001292:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001296:	f004 ff53 	bl	8006140 <HAL_I2C_Init>
 800129a:	b950      	cbnz	r0, 80012b2 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <MX_I2C2_Init+0x60>)
 80012a0:	f005 fcc0 	bl	8006c24 <HAL_I2CEx_ConfigAnalogFilter>
 80012a4:	b968      	cbnz	r0, 80012c2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_I2C2_Init+0x60>)
 80012aa:	f005 fcef 	bl	8006c8c <HAL_I2CEx_ConfigDigitalFilter>
 80012ae:	b980      	cbnz	r0, 80012d2 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012b2:	f001 fd37 	bl	8002d24 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <MX_I2C2_Init+0x60>)
 80012ba:	f005 fcb3 	bl	8006c24 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d0f1      	beq.n	80012a6 <MX_I2C2_Init+0x2a>
    Error_Handler();
 80012c2:	f001 fd2f 	bl	8002d24 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2C2_Init+0x60>)
 80012ca:	f005 fcdf 	bl	8006c8c <HAL_I2CEx_ConfigDigitalFilter>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0ee      	beq.n	80012b0 <MX_I2C2_Init+0x34>
}
 80012d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012d6:	f001 bd25 	b.w	8002d24 <Error_Handler>
 80012da:	bf00      	nop
 80012dc:	20014490 	.word	0x20014490
 80012e0:	40005800 	.word	0x40005800
 80012e4:	00b03fdb 	.word	0x00b03fdb

080012e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e8:	b510      	push	{r4, lr}
 80012ea:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	2100      	movs	r1, #0
{
 80012ee:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	22c0      	movs	r2, #192	; 0xc0
 80012f2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	9106      	str	r1, [sp, #24]
 80012f6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80012fa:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fe:	f017 fc9f 	bl	8018c40 <memset>
  if(i2cHandle->Instance==I2C2)
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_I2C_MspInit+0xb8>)
 8001304:	6822      	ldr	r2, [r4, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d001      	beq.n	800130e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800130a:	b038      	add	sp, #224	; 0xe0
 800130c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800130e:	2208      	movs	r2, #8
 8001310:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001314:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f006 fbd2 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	2800      	cmp	r0, #0
 800131e:	d138      	bne.n	8001392 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4c20      	ldr	r4, [pc, #128]	; (80013a4 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001322:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	a902      	add	r1, sp, #8
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001334:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001338:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800133a:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001340:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001398 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001348:	2303      	movs	r3, #3
 800134a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800134e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f004 fce3 	bl	8005d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001356:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 800135e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001362:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001364:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001368:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800136c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001374:	f002 fe94 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001378:	2021      	movs	r0, #33	; 0x21
 800137a:	f002 fecf 	bl	800411c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	2022      	movs	r0, #34	; 0x22
 8001384:	f002 fe8c 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001388:	2022      	movs	r0, #34	; 0x22
 800138a:	f002 fec7 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 800138e:	b038      	add	sp, #224	; 0xe0
 8001390:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001392:	f001 fcc7 	bl	8002d24 <Error_Handler>
 8001396:	e7c3      	b.n	8001320 <HAL_I2C_MspInit+0x38>
 8001398:	00000c00 	.word	0x00000c00
 800139c:	00000012 	.word	0x00000012
 80013a0:	40005800 	.word	0x40005800
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020400 	.word	0x58020400

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b530      	push	{r4, r5, lr}
 80013ae:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b0:	224c      	movs	r2, #76	; 0x4c
 80013b2:	2100      	movs	r1, #0
 80013b4:	a80c      	add	r0, sp, #48	; 0x30
 80013b6:	f017 fc43 	bl	8018c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ba:	2220      	movs	r2, #32
 80013bc:	2100      	movs	r1, #0
 80013be:	a804      	add	r0, sp, #16
 80013c0:	f017 fc3e 	bl	8018c40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f005 fc8d 	bl	8006ce4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <SystemClock_Config+0xf0>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <SystemClock_Config+0xf4>)
 80013d0:	9101      	str	r1, [sp, #4]
 80013d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d4:	f021 0101 	bic.w	r1, r1, #1
 80013d8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	6993      	ldr	r3, [r2, #24]
 80013e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	6993      	ldr	r3, [r2, #24]
 80013ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013f4:	6993      	ldr	r3, [r2, #24]
 80013f6:	049c      	lsls	r4, r3, #18
 80013f8:	d5fc      	bpl.n	80013f4 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <SystemClock_Config+0xf8>)
 80013fc:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8001400:	f041 0102 	orr.w	r1, r1, #2
 8001404:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001408:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001416:	9103      	str	r1, [sp, #12]
 8001418:	6991      	ldr	r1, [r2, #24]
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <SystemClock_Config+0xf0>)
 800141c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001420:	6191      	str	r1, [r2, #24]
 8001422:	6992      	ldr	r2, [r2, #24]
 8001424:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001428:	9203      	str	r2, [sp, #12]
 800142a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <SystemClock_Config+0xf4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800142e:	f041 0101 	orr.w	r1, r1, #1
 8001432:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	9303      	str	r3, [sp, #12]
 800143c:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800143e:	6993      	ldr	r3, [r2, #24]
 8001440:	0498      	lsls	r0, r3, #18
 8001442:	d5fc      	bpl.n	800143e <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001446:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001448:	2021      	movs	r0, #33	; 0x21
 800144a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800144e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001450:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001454:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001458:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800145c:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800145e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001462:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001464:	2105      	movs	r1, #5
 8001466:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 192;
 800146a:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800146e:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f005 fce1 	bl	8006e38 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001478:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001482:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001488:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800148a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800148c:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001494:	f006 f864 	bl	8007560 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001498:	b021      	add	sp, #132	; 0x84
 800149a:	bd30      	pop	{r4, r5, pc}
 800149c:	58000400 	.word	0x58000400
 80014a0:	58024800 	.word	0x58024800
 80014a4:	58024400 	.word	0x58024400

080014a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014a8:	b500      	push	{lr}
 80014aa:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	22a4      	movs	r2, #164	; 0xa4
 80014ae:	2100      	movs	r1, #0
 80014b0:	a807      	add	r0, sp, #28
 80014b2:	f017 fbc5 	bl	8018c40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80014b6:	2019      	movs	r0, #25
 80014b8:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014bc:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80014be:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c0:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80014c6:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80014c8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80014ca:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80014f0 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80014ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80014d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80014d8:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80014dc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80014f8 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80014e0:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80014e2:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f006 faeb 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80014ea:	b031      	add	sp, #196	; 0xc4
 80014ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f0:	00011100 	.word	0x00011100
 80014f4:	00000000 	.word	0x00000000
 80014f8:	00000007 	.word	0x00000007
 80014fc:	00000002 	.word	0x00000002

08001500 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
 8001500:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8001502:	2301      	movs	r3, #1
 8001504:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
 8001508:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800150c:	b002      	add	sp, #8
 800150e:	4770      	bx	lr

08001510 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8001514:	2301      	movs	r3, #1
{
 8001516:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8001518:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 800151c:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8001520:	b93b      	cbnz	r3, 8001532 <getPresetNamesFromSDCard+0x22>
 8001522:	f8df a078 	ldr.w	sl, [pc, #120]	; 800159c <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f88a 3000 	strb.w	r3, [sl]
	return;
}
 800152c:	b009      	add	sp, #36	; 0x24
 800152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <getPresetNamesFromSDCard+0x74>)
 8001534:	075a      	lsls	r2, r3, #29
 8001536:	f040 830c 	bne.w	8001b52 <getPresetNamesFromSDCard+0x642>
			audioOutBuffer[i] = 0;
 800153a:	2000      	movs	r0, #0
 800153c:	2100      	movs	r1, #0
 800153e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8001542:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001546:	429a      	cmp	r2, r3
 8001548:	d1fb      	bne.n	8001542 <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
 800154a:	2400      	movs	r4, #0
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
 800154e:	2501      	movs	r5, #1
 8001550:	f8df a048 	ldr.w	sl, [pc, #72]	; 800159c <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
 8001554:	4620      	mov	r0, r4
		loadFailed = 0;
 8001556:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8001558:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 800155c:	f00b fabe 	bl	800cadc <disk_initialize>
	    disk_status(0);
 8001560:	4620      	mov	r0, r4
 8001562:	f00b fab1 	bl	800cac8 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8001566:	462a      	mov	r2, r5
 8001568:	4908      	ldr	r1, [pc, #32]	; (800158c <getPresetNamesFromSDCard+0x7c>)
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <getPresetNamesFromSDCard+0x80>)
 800156c:	f00d fc58 	bl	800ee20 <f_mount>
 8001570:	2800      	cmp	r0, #0
 8001572:	d1d8      	bne.n	8001526 <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001574:	4605      	mov	r5, r0
 8001576:	4e07      	ldr	r6, [pc, #28]	; (8001594 <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001578:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800158c <getPresetNamesFromSDCard+0x7c>
 800157c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80015a0 <getPresetNamesFromSDCard+0x90>
 8001580:	4f05      	ldr	r7, [pc, #20]	; (8001598 <getPresetNamesFromSDCard+0x88>)
 8001582:	e027      	b.n	80015d4 <getPresetNamesFromSDCard+0xc4>
 8001584:	30000000 	.word	0x30000000
 8001588:	200186ec 	.word	0x200186ec
 800158c:	2001dd5c 	.word	0x2001dd5c
 8001590:	2001d8f8 	.word	0x2001d8f8
 8001594:	0801b904 	.word	0x0801b904
 8001598:	20014500 	.word	0x20014500
 800159c:	20014538 	.word	0x20014538
 80015a0:	200165a0 	.word	0x200165a0
					strcat(charBuf, "*.ebp");
 80015a4:	aa02      	add	r2, sp, #8
 80015a6:	6830      	ldr	r0, [r6, #0]
 80015a8:	88b1      	ldrh	r1, [r6, #4]
 80015aa:	f10d 0c08 	add.w	ip, sp, #8
 80015ae:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
 80015b0:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
 80015b2:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
 80015b6:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
 80015b8:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
 80015ba:	4661      	mov	r1, ip
 80015bc:	f017 fb6c 	bl	8018c98 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80015c0:	ab05      	add	r3, sp, #20
 80015c2:	464a      	mov	r2, r9
 80015c4:	4641      	mov	r1, r8
 80015c6:	4638      	mov	r0, r7
 80015c8:	f00e f972 	bl	800f8b0 <f_findfirst>
				if(res == FR_OK)
 80015cc:	b358      	cbz	r0, 8001626 <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 80015ce:	3501      	adds	r5, #1
 80015d0:	2d40      	cmp	r5, #64	; 0x40
 80015d2:	d0a8      	beq.n	8001526 <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
 80015d4:	220a      	movs	r2, #10
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	4628      	mov	r0, r5
 80015da:	f017 faed 	bl	8018bb8 <itoa>
				int len = ((strlen(charBuf)));
 80015de:	a802      	add	r0, sp, #8
 80015e0:	f7fe fe7a 	bl	80002d8 <strlen>
				if (len == 1)
 80015e4:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80015e6:	4603      	mov	r3, r0
				if (len == 1)
 80015e8:	d1dc      	bne.n	80015a4 <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
 80015ea:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 80015ee:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 80015f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
 80015f4:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 80015f6:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
 80015fa:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
 80015fc:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8001600:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 8001604:	f7fe fe68 	bl	80002d8 <strlen>
 8001608:	a905      	add	r1, sp, #20
 800160a:	4603      	mov	r3, r0
 800160c:	88b2      	ldrh	r2, [r6, #4]
 800160e:	4419      	add	r1, r3
 8001610:	6830      	ldr	r0, [r6, #0]
 8001612:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001614:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
 8001616:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001618:	4638      	mov	r0, r7
 800161a:	464a      	mov	r2, r9
 800161c:	4641      	mov	r1, r8
 800161e:	f00e f947 	bl	800f8b0 <f_findfirst>
				if(res == FR_OK)
 8001622:	2800      	cmp	r0, #0
 8001624:	d1d3      	bne.n	80015ce <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8001626:	f8df b374 	ldr.w	fp, [pc, #884]	; 800199c <getPresetNamesFromSDCard+0x48c>
 800162a:	2211      	movs	r2, #17
 800162c:	49d7      	ldr	r1, [pc, #860]	; (800198c <getPresetNamesFromSDCard+0x47c>)
 800162e:	4658      	mov	r0, fp
 8001630:	f00d fc42 	bl	800eeb8 <f_open>
 8001634:	2800      	cmp	r0, #0
 8001636:	d1ca      	bne.n	80015ce <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001638:	4cd5      	ldr	r4, [pc, #852]	; (8001990 <getPresetNamesFromSDCard+0x480>)
 800163a:	ab01      	add	r3, sp, #4
 800163c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001640:	4658      	mov	r0, fp
 8001642:	4621      	mov	r1, r4
 8001644:	f00d fd9c 	bl	800f180 <f_read>
						f_close(&SDFile);
 8001648:	4658      	mov	r0, fp
 800164a:	f00e f831 	bl	800f6b0 <f_close>
						if (buffer[bufferIndex] == 17)
 800164e:	7822      	ldrb	r2, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001650:	49d0      	ldr	r1, [pc, #832]	; (8001994 <getPresetNamesFromSDCard+0x484>)
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001652:	20c8      	movs	r0, #200	; 0xc8
						if (buffer[bufferIndex] == 17)
 8001654:	f1a2 0211 	sub.w	r2, r2, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001658:	fb05 f000 	mul.w	r0, r5, r0
						if (buffer[bufferIndex] == 17)
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	0952      	lsrs	r2, r2, #5
 8001662:	0093      	lsls	r3, r2, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001664:	f814 c022 	ldrb.w	ip, [r4, r2, lsl #2]
 8001668:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800166c:	f801 c012 	strb.w	ip, [r1, r2, lsl #1]
 8001670:	f103 0c01 	add.w	ip, r3, #1
 8001674:	eb01 0142 	add.w	r1, r1, r2, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001678:	4ac7      	ldr	r2, [pc, #796]	; (8001998 <getPresetNamesFromSDCard+0x488>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 800167a:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800167e:	f881 c001 	strb.w	ip, [r1, #1]
 8001682:	f103 0c02 	add.w	ip, r3, #2
 8001686:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800168a:	f881 c002 	strb.w	ip, [r1, #2]
 800168e:	f103 0c03 	add.w	ip, r3, #3
 8001692:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001696:	f881 c003 	strb.w	ip, [r1, #3]
 800169a:	f103 0c04 	add.w	ip, r3, #4
 800169e:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016a2:	f881 c004 	strb.w	ip, [r1, #4]
 80016a6:	f103 0c05 	add.w	ip, r3, #5
 80016aa:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016ae:	f881 c005 	strb.w	ip, [r1, #5]
 80016b2:	f103 0c06 	add.w	ip, r3, #6
 80016b6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016ba:	f881 c006 	strb.w	ip, [r1, #6]
 80016be:	f103 0c07 	add.w	ip, r3, #7
 80016c2:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016c6:	f881 c007 	strb.w	ip, [r1, #7]
 80016ca:	f103 0c08 	add.w	ip, r3, #8
 80016ce:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016d2:	f881 c008 	strb.w	ip, [r1, #8]
 80016d6:	f103 0c09 	add.w	ip, r3, #9
 80016da:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016de:	f881 c009 	strb.w	ip, [r1, #9]
 80016e2:	f103 0c0a 	add.w	ip, r3, #10
 80016e6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016ea:	f881 c00a 	strb.w	ip, [r1, #10]
 80016ee:	f103 0c0b 	add.w	ip, r3, #11
 80016f2:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80016f6:	f881 c00b 	strb.w	ip, [r1, #11]
 80016fa:	f103 0c0c 	add.w	ip, r3, #12
 80016fe:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001702:	f881 c00c 	strb.w	ip, [r1, #12]
 8001706:	f103 0c0d 	add.w	ip, r3, #13
 800170a:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800170e:	f881 c00d 	strb.w	ip, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001712:	f103 010e 	add.w	r1, r3, #14
 8001716:	5c61      	ldrb	r1, [r4, r1]
 8001718:	5411      	strb	r1, [r2, r0]
 800171a:	f103 010f 	add.w	r1, r3, #15
 800171e:	4402      	add	r2, r0
 8001720:	5c61      	ldrb	r1, [r4, r1]
 8001722:	7051      	strb	r1, [r2, #1]
 8001724:	f103 0110 	add.w	r1, r3, #16
 8001728:	5c61      	ldrb	r1, [r4, r1]
 800172a:	7091      	strb	r1, [r2, #2]
 800172c:	f103 0111 	add.w	r1, r3, #17
 8001730:	5c61      	ldrb	r1, [r4, r1]
 8001732:	70d1      	strb	r1, [r2, #3]
 8001734:	f103 0112 	add.w	r1, r3, #18
 8001738:	5c61      	ldrb	r1, [r4, r1]
 800173a:	7111      	strb	r1, [r2, #4]
 800173c:	f103 0113 	add.w	r1, r3, #19
 8001740:	5c61      	ldrb	r1, [r4, r1]
 8001742:	7151      	strb	r1, [r2, #5]
 8001744:	f103 0114 	add.w	r1, r3, #20
 8001748:	5c61      	ldrb	r1, [r4, r1]
 800174a:	7191      	strb	r1, [r2, #6]
 800174c:	f103 0115 	add.w	r1, r3, #21
 8001750:	5c61      	ldrb	r1, [r4, r1]
 8001752:	71d1      	strb	r1, [r2, #7]
 8001754:	f103 0116 	add.w	r1, r3, #22
 8001758:	5c61      	ldrb	r1, [r4, r1]
 800175a:	7211      	strb	r1, [r2, #8]
 800175c:	f103 0117 	add.w	r1, r3, #23
 8001760:	5c61      	ldrb	r1, [r4, r1]
 8001762:	7291      	strb	r1, [r2, #10]
 8001764:	f103 0118 	add.w	r1, r3, #24
 8001768:	5c61      	ldrb	r1, [r4, r1]
 800176a:	72d1      	strb	r1, [r2, #11]
 800176c:	f103 0119 	add.w	r1, r3, #25
 8001770:	5c61      	ldrb	r1, [r4, r1]
 8001772:	7311      	strb	r1, [r2, #12]
 8001774:	f103 011a 	add.w	r1, r3, #26
 8001778:	5c61      	ldrb	r1, [r4, r1]
 800177a:	7351      	strb	r1, [r2, #13]
 800177c:	f103 011b 	add.w	r1, r3, #27
 8001780:	5c61      	ldrb	r1, [r4, r1]
 8001782:	7391      	strb	r1, [r2, #14]
 8001784:	f103 011c 	add.w	r1, r3, #28
 8001788:	5c61      	ldrb	r1, [r4, r1]
 800178a:	73d1      	strb	r1, [r2, #15]
 800178c:	f103 011d 	add.w	r1, r3, #29
 8001790:	5c61      	ldrb	r1, [r4, r1]
 8001792:	7411      	strb	r1, [r2, #16]
 8001794:	f103 011e 	add.w	r1, r3, #30
 8001798:	5c61      	ldrb	r1, [r4, r1]
 800179a:	7451      	strb	r1, [r2, #17]
 800179c:	f103 011f 	add.w	r1, r3, #31
 80017a0:	5c61      	ldrb	r1, [r4, r1]
 80017a2:	7491      	strb	r1, [r2, #18]
 80017a4:	f103 0120 	add.w	r1, r3, #32
 80017a8:	5c61      	ldrb	r1, [r4, r1]
 80017aa:	7511      	strb	r1, [r2, #20]
 80017ac:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80017b0:	5c61      	ldrb	r1, [r4, r1]
 80017b2:	7551      	strb	r1, [r2, #21]
 80017b4:	f103 0122 	add.w	r1, r3, #34	; 0x22
 80017b8:	5c61      	ldrb	r1, [r4, r1]
 80017ba:	7591      	strb	r1, [r2, #22]
 80017bc:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80017c0:	5c61      	ldrb	r1, [r4, r1]
 80017c2:	75d1      	strb	r1, [r2, #23]
 80017c4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80017c8:	5c61      	ldrb	r1, [r4, r1]
 80017ca:	7611      	strb	r1, [r2, #24]
 80017cc:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80017d0:	5c61      	ldrb	r1, [r4, r1]
 80017d2:	7651      	strb	r1, [r2, #25]
 80017d4:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80017d8:	5c61      	ldrb	r1, [r4, r1]
 80017da:	7691      	strb	r1, [r2, #26]
 80017dc:	f103 0127 	add.w	r1, r3, #39	; 0x27
 80017e0:	5c61      	ldrb	r1, [r4, r1]
 80017e2:	76d1      	strb	r1, [r2, #27]
 80017e4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80017e8:	5c61      	ldrb	r1, [r4, r1]
 80017ea:	7711      	strb	r1, [r2, #28]
 80017ec:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80017f0:	5c61      	ldrb	r1, [r4, r1]
 80017f2:	7791      	strb	r1, [r2, #30]
 80017f4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80017f8:	5c61      	ldrb	r1, [r4, r1]
 80017fa:	77d1      	strb	r1, [r2, #31]
 80017fc:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8001800:	5c61      	ldrb	r1, [r4, r1]
 8001802:	f882 1020 	strb.w	r1, [r2, #32]
 8001806:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800180a:	5c61      	ldrb	r1, [r4, r1]
 800180c:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8001810:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001814:	5c61      	ldrb	r1, [r4, r1]
 8001816:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 800181a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 800181e:	5c61      	ldrb	r1, [r4, r1]
 8001820:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8001824:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8001828:	5c61      	ldrb	r1, [r4, r1]
 800182a:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 800182e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001832:	5c61      	ldrb	r1, [r4, r1]
 8001834:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 8001838:	f103 0131 	add.w	r1, r3, #49	; 0x31
 800183c:	5c61      	ldrb	r1, [r4, r1]
 800183e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8001842:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8001846:	5c61      	ldrb	r1, [r4, r1]
 8001848:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 800184c:	f103 0133 	add.w	r1, r3, #51	; 0x33
 8001850:	5c61      	ldrb	r1, [r4, r1]
 8001852:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8001856:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800185a:	5c61      	ldrb	r1, [r4, r1]
 800185c:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 8001860:	f103 0135 	add.w	r1, r3, #53	; 0x35
 8001864:	5c61      	ldrb	r1, [r4, r1]
 8001866:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 800186a:	f103 0136 	add.w	r1, r3, #54	; 0x36
 800186e:	5c61      	ldrb	r1, [r4, r1]
 8001870:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 8001874:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8001878:	5c61      	ldrb	r1, [r4, r1]
 800187a:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
 800187e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001882:	5c61      	ldrb	r1, [r4, r1]
 8001884:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8001888:	f103 0139 	add.w	r1, r3, #57	; 0x39
 800188c:	5c61      	ldrb	r1, [r4, r1]
 800188e:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 8001892:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8001896:	5c61      	ldrb	r1, [r4, r1]
 8001898:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 800189c:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 80018a0:	5c61      	ldrb	r1, [r4, r1]
 80018a2:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 80018a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80018aa:	5c61      	ldrb	r1, [r4, r1]
 80018ac:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
 80018b0:	f103 013d 	add.w	r1, r3, #61	; 0x3d
 80018b4:	5c61      	ldrb	r1, [r4, r1]
 80018b6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
 80018ba:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 80018be:	5c61      	ldrb	r1, [r4, r1]
 80018c0:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
 80018c4:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 80018c8:	5c61      	ldrb	r1, [r4, r1]
 80018ca:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
 80018ce:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80018d2:	5c61      	ldrb	r1, [r4, r1]
 80018d4:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
 80018d8:	f103 0141 	add.w	r1, r3, #65	; 0x41
 80018dc:	5c61      	ldrb	r1, [r4, r1]
 80018de:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 80018e2:	f103 0142 	add.w	r1, r3, #66	; 0x42
 80018e6:	5c61      	ldrb	r1, [r4, r1]
 80018e8:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
 80018ec:	f103 0143 	add.w	r1, r3, #67	; 0x43
 80018f0:	5c61      	ldrb	r1, [r4, r1]
 80018f2:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
 80018f6:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80018fa:	5c61      	ldrb	r1, [r4, r1]
 80018fc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8001900:	f103 0145 	add.w	r1, r3, #69	; 0x45
 8001904:	5c61      	ldrb	r1, [r4, r1]
 8001906:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
 800190a:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800190e:	5c61      	ldrb	r1, [r4, r1]
 8001910:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 8001914:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8001918:	5c61      	ldrb	r1, [r4, r1]
 800191a:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
 800191e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001922:	5c61      	ldrb	r1, [r4, r1]
 8001924:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8001928:	f103 0149 	add.w	r1, r3, #73	; 0x49
 800192c:	5c61      	ldrb	r1, [r4, r1]
 800192e:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 8001932:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 8001936:	5c61      	ldrb	r1, [r4, r1]
 8001938:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 800193c:	f103 014b 	add.w	r1, r3, #75	; 0x4b
 8001940:	5c61      	ldrb	r1, [r4, r1]
 8001942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001946:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800194a:	5c61      	ldrb	r1, [r4, r1]
 800194c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8001950:	f103 014d 	add.w	r1, r3, #77	; 0x4d
 8001954:	5c61      	ldrb	r1, [r4, r1]
 8001956:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800195a:	f103 014e 	add.w	r1, r3, #78	; 0x4e
 800195e:	5c61      	ldrb	r1, [r4, r1]
 8001960:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
 8001964:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 8001968:	5c61      	ldrb	r1, [r4, r1]
 800196a:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 800196e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001972:	5c61      	ldrb	r1, [r4, r1]
 8001974:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
 8001978:	f103 0151 	add.w	r1, r3, #81	; 0x51
 800197c:	5c61      	ldrb	r1, [r4, r1]
 800197e:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001982:	f103 0152 	add.w	r1, r3, #82	; 0x52
 8001986:	5c61      	ldrb	r1, [r4, r1]
 8001988:	e00a      	b.n	80019a0 <getPresetNamesFromSDCard+0x490>
 800198a:	bf00      	nop
 800198c:	200165b6 	.word	0x200165b6
 8001990:	30042380 	.word	0x30042380
 8001994:	30042000 	.word	0x30042000
 8001998:	30043380 	.word	0x30043380
 800199c:	2001db2c 	.word	0x2001db2c
 80019a0:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
 80019a4:	f103 0153 	add.w	r1, r3, #83	; 0x53
 80019a8:	5c61      	ldrb	r1, [r4, r1]
 80019aa:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
 80019ae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80019b2:	5c61      	ldrb	r1, [r4, r1]
 80019b4:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
 80019b8:	f103 0155 	add.w	r1, r3, #85	; 0x55
 80019bc:	5c61      	ldrb	r1, [r4, r1]
 80019be:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 80019c2:	f103 0156 	add.w	r1, r3, #86	; 0x56
 80019c6:	5c61      	ldrb	r1, [r4, r1]
 80019c8:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
 80019cc:	f103 0157 	add.w	r1, r3, #87	; 0x57
 80019d0:	5c61      	ldrb	r1, [r4, r1]
 80019d2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
 80019d6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80019da:	5c61      	ldrb	r1, [r4, r1]
 80019dc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 80019e0:	f103 0159 	add.w	r1, r3, #89	; 0x59
 80019e4:	5c61      	ldrb	r1, [r4, r1]
 80019e6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80019ea:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 80019ee:	5c61      	ldrb	r1, [r4, r1]
 80019f0:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 80019f4:	f103 015b 	add.w	r1, r3, #91	; 0x5b
 80019f8:	5c61      	ldrb	r1, [r4, r1]
 80019fa:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 80019fe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8001a02:	5c61      	ldrb	r1, [r4, r1]
 8001a04:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8001a08:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 8001a0c:	5c61      	ldrb	r1, [r4, r1]
 8001a0e:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8001a12:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8001a16:	5c61      	ldrb	r1, [r4, r1]
 8001a18:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8001a1c:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001a20:	5c61      	ldrb	r1, [r4, r1]
 8001a22:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8001a26:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8001a2a:	5c61      	ldrb	r1, [r4, r1]
 8001a2c:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8001a30:	f103 0161 	add.w	r1, r3, #97	; 0x61
 8001a34:	5c61      	ldrb	r1, [r4, r1]
 8001a36:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
 8001a3a:	f103 0162 	add.w	r1, r3, #98	; 0x62
 8001a3e:	5c61      	ldrb	r1, [r4, r1]
 8001a40:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8001a44:	f103 0163 	add.w	r1, r3, #99	; 0x63
 8001a48:	5c61      	ldrb	r1, [r4, r1]
 8001a4a:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
 8001a4e:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001a52:	5c61      	ldrb	r1, [r4, r1]
 8001a54:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
 8001a58:	f103 0165 	add.w	r1, r3, #101	; 0x65
 8001a5c:	5c61      	ldrb	r1, [r4, r1]
 8001a5e:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
 8001a62:	f103 0166 	add.w	r1, r3, #102	; 0x66
 8001a66:	5c61      	ldrb	r1, [r4, r1]
 8001a68:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
 8001a6c:	f103 0167 	add.w	r1, r3, #103	; 0x67
 8001a70:	5c61      	ldrb	r1, [r4, r1]
 8001a72:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
 8001a76:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8001a7a:	5c61      	ldrb	r1, [r4, r1]
 8001a7c:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
 8001a80:	f103 0169 	add.w	r1, r3, #105	; 0x69
 8001a84:	5c61      	ldrb	r1, [r4, r1]
 8001a86:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
 8001a8a:	f103 016a 	add.w	r1, r3, #106	; 0x6a
 8001a8e:	5c61      	ldrb	r1, [r4, r1]
 8001a90:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 8001a94:	f103 016b 	add.w	r1, r3, #107	; 0x6b
 8001a98:	5c61      	ldrb	r1, [r4, r1]
 8001a9a:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
 8001a9e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8001aa2:	5c61      	ldrb	r1, [r4, r1]
 8001aa4:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
 8001aa8:	f103 016d 	add.w	r1, r3, #109	; 0x6d
 8001aac:	5c61      	ldrb	r1, [r4, r1]
 8001aae:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
 8001ab2:	f103 016e 	add.w	r1, r3, #110	; 0x6e
 8001ab6:	5c61      	ldrb	r1, [r4, r1]
 8001ab8:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
 8001abc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8001ac0:	5c61      	ldrb	r1, [r4, r1]
 8001ac2:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
 8001ac6:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001aca:	5c61      	ldrb	r1, [r4, r1]
 8001acc:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8001ad0:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8001ad4:	5c61      	ldrb	r1, [r4, r1]
 8001ad6:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
 8001ada:	f103 0172 	add.w	r1, r3, #114	; 0x72
 8001ade:	5c61      	ldrb	r1, [r4, r1]
 8001ae0:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 8001ae4:	f103 0173 	add.w	r1, r3, #115	; 0x73
 8001ae8:	5c61      	ldrb	r1, [r4, r1]
 8001aea:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
 8001aee:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8001af2:	5c61      	ldrb	r1, [r4, r1]
 8001af4:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
 8001af8:	f103 0175 	add.w	r1, r3, #117	; 0x75
 8001afc:	5c61      	ldrb	r1, [r4, r1]
 8001afe:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
 8001b02:	f103 0176 	add.w	r1, r3, #118	; 0x76
 8001b06:	5c61      	ldrb	r1, [r4, r1]
 8001b08:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
 8001b0c:	f103 0177 	add.w	r1, r3, #119	; 0x77
 8001b10:	5c61      	ldrb	r1, [r4, r1]
 8001b12:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
 8001b16:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001b1a:	5c61      	ldrb	r1, [r4, r1]
 8001b1c:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
 8001b20:	f103 0179 	add.w	r1, r3, #121	; 0x79
 8001b24:	5c61      	ldrb	r1, [r4, r1]
 8001b26:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
 8001b2a:	f103 017a 	add.w	r1, r3, #122	; 0x7a
 8001b2e:	5c61      	ldrb	r1, [r4, r1]
 8001b30:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
 8001b34:	f103 017b 	add.w	r1, r3, #123	; 0x7b
 8001b38:	5c61      	ldrb	r1, [r4, r1]
 8001b3a:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8001b3e:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8001b42:	337d      	adds	r3, #125	; 0x7d
 8001b44:	5c61      	ldrb	r1, [r4, r1]
 8001b46:	5ce3      	ldrb	r3, [r4, r3]
 8001b48:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 8001b4c:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
 8001b50:	e53d      	b.n	80015ce <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
 8001b52:	2200      	movs	r2, #0
 8001b54:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
 8001b58:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	4299      	cmp	r1, r3
 8001b60:	d1fa      	bne.n	8001b58 <getPresetNamesFromSDCard+0x648>
 8001b62:	e4f2      	b.n	800154a <getPresetNamesFromSDCard+0x3a>

08001b64 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
 8001b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001b68:	4c21      	ldr	r4, [pc, #132]	; (8001bf0 <SDRAM_init+0x8c>)
{
 8001b6a:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b6c:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
 8001b6e:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b70:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001b72:	a902      	add	r1, sp, #8
 8001b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b78:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b7a:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
 8001b7e:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b80:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 8001b84:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001b88:	f008 fda4 	bl	800a6d4 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f002 fa53 	bl	8004038 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001b92:	a902      	add	r1, sp, #8
 8001b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b98:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 8001b9a:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b9c:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 8001ba0:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001ba4:	f008 fd96 	bl	800a6d4 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001ba8:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001baa:	a902      	add	r1, sp, #8
 8001bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb0:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 8001bb2:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001bb4:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001bb6:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
 8001bb8:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001bbc:	f008 fd8a 	bl	800a6d4 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001bc0:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001bc4:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001bc6:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001bc8:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8001bce:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001bd0:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
 8001bd2:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 8001bd4:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001bd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001bda:	f008 fd7b 	bl	800a6d4 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 8001bde:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001be2:	4620      	mov	r0, r4
 8001be4:	f008 fd96 	bl	800a714 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
 8001be8:	b006      	add	sp, #24
 8001bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bee:	bf00      	nop
 8001bf0:	2001445c 	.word	0x2001445c

08001bf4 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
 8001bf4:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <setEffectsFunctions+0x288>)
 8001bf6:	2201      	movs	r2, #1
{
 8001bf8:	b410      	push	{r4}
	effectsActive[i] = 1;
 8001bfa:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001bfc:	2815      	cmp	r0, #21
 8001bfe:	d82b      	bhi.n	8001c58 <setEffectsFunctions+0x64>
 8001c00:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001c04:	0217022b 	.word	0x0217022b
 8001c08:	01ef0203 	.word	0x01ef0203
 8001c0c:	01d601e9 	.word	0x01d601e9
 8001c10:	012601c2 	.word	0x012601c2
 8001c14:	01010111 	.word	0x01010111
 8001c18:	001600f1 	.word	0x001600f1
 8001c1c:	00c900dc 	.word	0x00c900dc
 8001c20:	00a300b6 	.word	0x00a300b6
 8001c24:	007c0090 	.word	0x007c0090
 8001c28:	00540068 	.word	0x00540068
 8001c2c:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
 8001c30:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c32:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
 8001c36:	4c93      	ldr	r4, [pc, #588]	; (8001e84 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c38:	4a93      	ldr	r2, [pc, #588]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
 8001c3a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c3e:	4993      	ldr	r1, [pc, #588]	; (8001e8c <setEffectsFunctions+0x298>)
 8001c40:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c44:	4c92      	ldr	r4, [pc, #584]	; (8001e90 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c46:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001c4a:	4892      	ldr	r0, [pc, #584]	; (8001e94 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001c4c:	4992      	ldr	r1, [pc, #584]	; (8001e98 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
 8001c4e:	4a93      	ldr	r2, [pc, #588]	; (8001e9c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
 8001c50:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
 8001c54:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
 8001c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c5c:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001c60:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
 8001c64:	4a8e      	ldr	r2, [pc, #568]	; (8001ea0 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001c66:	4888      	ldr	r0, [pc, #544]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
 8001c68:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001c6c:	498d      	ldr	r1, [pc, #564]	; (8001ea4 <setEffectsFunctions+0x2b0>)
 8001c6e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
 8001c72:	4a8d      	ldr	r2, [pc, #564]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001c74:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001c78:	498c      	ldr	r1, [pc, #560]	; (8001eac <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
 8001c7a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001c7c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001c7e:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001c82:	e7e9      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
 8001c84:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001c86:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
 8001c8a:	4a89      	ldr	r2, [pc, #548]	; (8001eb0 <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001c8c:	487e      	ldr	r0, [pc, #504]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
 8001c8e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001c92:	4988      	ldr	r1, [pc, #544]	; (8001eb4 <setEffectsFunctions+0x2c0>)
 8001c94:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8001c98:	4a83      	ldr	r2, [pc, #524]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001c9a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 8001c9e:	4886      	ldr	r0, [pc, #536]	; (8001eb8 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001ca0:	4986      	ldr	r1, [pc, #536]	; (8001ebc <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001ca2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001ca4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001ca6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001caa:	e7d5      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
 8001cac:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001cae:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
 8001cb2:	4a83      	ldr	r2, [pc, #524]	; (8001ec0 <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001cb4:	4874      	ldr	r0, [pc, #464]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
 8001cb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001cba:	4982      	ldr	r1, [pc, #520]	; (8001ec4 <setEffectsFunctions+0x2d0>)
 8001cbc:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8001cc0:	4a79      	ldr	r2, [pc, #484]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001cc2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001cc6:	4880      	ldr	r0, [pc, #512]	; (8001ec8 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001cc8:	4980      	ldr	r1, [pc, #512]	; (8001ecc <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001cca:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001ccc:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001cce:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001cd2:	e7c1      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001cd6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
 8001cda:	4a7d      	ldr	r2, [pc, #500]	; (8001ed0 <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001cdc:	486a      	ldr	r0, [pc, #424]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
 8001cde:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001ce2:	497c      	ldr	r1, [pc, #496]	; (8001ed4 <setEffectsFunctions+0x2e0>)
 8001ce4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001ce8:	4a6f      	ldr	r2, [pc, #444]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001cea:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001cee:	487a      	ldr	r0, [pc, #488]	; (8001ed8 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001cf0:	497a      	ldr	r1, [pc, #488]	; (8001edc <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001cf2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001cf4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001cf6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001cfa:	e7ad      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001cfe:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001d04:	4860      	ldr	r0, [pc, #384]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
 8001d06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001d0a:	4976      	ldr	r1, [pc, #472]	; (8001ee4 <setEffectsFunctions+0x2f0>)
 8001d0c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001d10:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001d12:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001d16:	4874      	ldr	r0, [pc, #464]	; (8001ee8 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001d18:	4974      	ldr	r1, [pc, #464]	; (8001eec <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001d1a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d1c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001d1e:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001d22:	e799      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001d26:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
 8001d2a:	4a71      	ldr	r2, [pc, #452]	; (8001ef0 <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001d2c:	4856      	ldr	r0, [pc, #344]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
 8001d2e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001d32:	4970      	ldr	r1, [pc, #448]	; (8001ef4 <setEffectsFunctions+0x300>)
 8001d34:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001d38:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001d3a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001d3e:	496e      	ldr	r1, [pc, #440]	; (8001ef8 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001d40:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001d42:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d44:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001d48:	e786      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001d4c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001d52:	484d      	ldr	r0, [pc, #308]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
 8001d54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001d58:	4969      	ldr	r1, [pc, #420]	; (8001f00 <setEffectsFunctions+0x30c>)
 8001d5a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001d60:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001d64:	4967      	ldr	r1, [pc, #412]	; (8001f04 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001d66:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001d68:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d6a:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001d6e:	e773      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001d72:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
 8001d76:	4a64      	ldr	r2, [pc, #400]	; (8001f08 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001d78:	4843      	ldr	r0, [pc, #268]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
 8001d7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001d7e:	4963      	ldr	r1, [pc, #396]	; (8001f0c <setEffectsFunctions+0x318>)
 8001d80:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001d86:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001d8a:	4961      	ldr	r1, [pc, #388]	; (8001f10 <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001d8c:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001d8e:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d90:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001d94:	e760      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001d98:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001d9e:	483a      	ldr	r0, [pc, #232]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
 8001da0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001da4:	495c      	ldr	r1, [pc, #368]	; (8001f18 <setEffectsFunctions+0x324>)
 8001da6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001daa:	4a3f      	ldr	r2, [pc, #252]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001dac:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001db0:	495a      	ldr	r1, [pc, #360]	; (8001f1c <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001db2:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001db4:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001db6:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001dba:	e74d      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001dbe:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
 8001dc2:	4c57      	ldr	r4, [pc, #348]	; (8001f20 <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001dc4:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
 8001dc6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001dca:	4956      	ldr	r1, [pc, #344]	; (8001f24 <setEffectsFunctions+0x330>)
 8001dcc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
 8001dd0:	4c55      	ldr	r4, [pc, #340]	; (8001f28 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001dd2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
 8001dd6:	4855      	ldr	r0, [pc, #340]	; (8001f2c <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
 8001dd8:	4955      	ldr	r1, [pc, #340]	; (8001f30 <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
 8001ddc:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
 8001de0:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001de4:	e738      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001de8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
 8001dec:	4c52      	ldr	r4, [pc, #328]	; (8001f38 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001dee:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
 8001df0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001df4:	4951      	ldr	r1, [pc, #324]	; (8001f3c <setEffectsFunctions+0x348>)
 8001df6:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
 8001dfa:	4c51      	ldr	r4, [pc, #324]	; (8001f40 <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001dfc:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
 8001e00:	4850      	ldr	r0, [pc, #320]	; (8001f44 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
 8001e02:	4951      	ldr	r1, [pc, #324]	; (8001f48 <setEffectsFunctions+0x354>)
 8001e04:	e723      	b.n	8001c4e <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e08:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
 8001e0c:	4c4f      	ldr	r4, [pc, #316]	; (8001f4c <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
 8001e10:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e14:	494e      	ldr	r1, [pc, #312]	; (8001f50 <setEffectsFunctions+0x35c>)
 8001e16:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
 8001e1a:	4c4e      	ldr	r4, [pc, #312]	; (8001f54 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e1c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
 8001e20:	484d      	ldr	r0, [pc, #308]	; (8001f58 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001e22:	491d      	ldr	r1, [pc, #116]	; (8001e98 <setEffectsFunctions+0x2a4>)
 8001e24:	e713      	b.n	8001c4e <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001e28:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
 8001e2c:	4c4b      	ldr	r4, [pc, #300]	; (8001f5c <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
 8001e30:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001e34:	494a      	ldr	r1, [pc, #296]	; (8001f60 <setEffectsFunctions+0x36c>)
 8001e36:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
 8001e3a:	4c4a      	ldr	r4, [pc, #296]	; (8001f64 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001e3c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
 8001e40:	4849      	ldr	r0, [pc, #292]	; (8001f68 <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
 8001e42:	494a      	ldr	r1, [pc, #296]	; (8001f6c <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
 8001e46:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001e4a:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001e4e:	e703      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e52:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
 8001e56:	4c46      	ldr	r4, [pc, #280]	; (8001f70 <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
 8001e5a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e5e:	4945      	ldr	r1, [pc, #276]	; (8001f74 <setEffectsFunctions+0x380>)
 8001e60:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
 8001e64:	4c44      	ldr	r4, [pc, #272]	; (8001f78 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e66:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001e6a:	4844      	ldr	r0, [pc, #272]	; (8001f7c <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
 8001e6c:	4944      	ldr	r1, [pc, #272]	; (8001f80 <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
 8001e6e:	4a45      	ldr	r2, [pc, #276]	; (8001f84 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
 8001e70:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001e74:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001e78:	e6ee      	b.n	8001c58 <setEffectsFunctions+0x64>
 8001e7a:	bf00      	nop
 8001e7c:	2001458c 	.word	0x2001458c
 8001e80:	2001d0e4 	.word	0x2001d0e4
 8001e84:	00008281 	.word	0x00008281
 8001e88:	2001453c 	.word	0x2001453c
 8001e8c:	00007cc1 	.word	0x00007cc1
 8001e90:	00007f81 	.word	0x00007f81
 8001e94:	00007d01 	.word	0x00007d01
 8001e98:	00008141 	.word	0x00008141
 8001e9c:	00008161 	.word	0x00008161
 8001ea0:	00008ae1 	.word	0x00008ae1
 8001ea4:	00008d01 	.word	0x00008d01
 8001ea8:	000018e1 	.word	0x000018e1
 8001eac:	00008f41 	.word	0x00008f41
 8001eb0:	00008ac1 	.word	0x00008ac1
 8001eb4:	00008cc1 	.word	0x00008cc1
 8001eb8:	00008e01 	.word	0x00008e01
 8001ebc:	00008f21 	.word	0x00008f21
 8001ec0:	00008aa1 	.word	0x00008aa1
 8001ec4:	00008c81 	.word	0x00008c81
 8001ec8:	00008dc1 	.word	0x00008dc1
 8001ecc:	00008f01 	.word	0x00008f01
 8001ed0:	00008a81 	.word	0x00008a81
 8001ed4:	00008c41 	.word	0x00008c41
 8001ed8:	00008d81 	.word	0x00008d81
 8001edc:	00008ee1 	.word	0x00008ee1
 8001ee0:	00008a61 	.word	0x00008a61
 8001ee4:	00008c01 	.word	0x00008c01
 8001ee8:	00008d41 	.word	0x00008d41
 8001eec:	00008ec1 	.word	0x00008ec1
 8001ef0:	00008a41 	.word	0x00008a41
 8001ef4:	00008bc1 	.word	0x00008bc1
 8001ef8:	00008ea1 	.word	0x00008ea1
 8001efc:	00008a21 	.word	0x00008a21
 8001f00:	00008b81 	.word	0x00008b81
 8001f04:	00008e81 	.word	0x00008e81
 8001f08:	00008a01 	.word	0x00008a01
 8001f0c:	00008b41 	.word	0x00008b41
 8001f10:	00008e61 	.word	0x00008e61
 8001f14:	000089e1 	.word	0x000089e1
 8001f18:	00008b01 	.word	0x00008b01
 8001f1c:	00008e41 	.word	0x00008e41
 8001f20:	08003e19 	.word	0x08003e19
 8001f24:	00008481 	.word	0x00008481
 8001f28:	000084c1 	.word	0x000084c1
 8001f2c:	00008501 	.word	0x00008501
 8001f30:	00008521 	.word	0x00008521
 8001f34:	00008541 	.word	0x00008541
 8001f38:	000086c1 	.word	0x000086c1
 8001f3c:	00007d41 	.word	0x00007d41
 8001f40:	00007da1 	.word	0x00007da1
 8001f44:	00007e01 	.word	0x00007e01
 8001f48:	00007e41 	.word	0x00007e41
 8001f4c:	00008981 	.word	0x00008981
 8001f50:	00007c81 	.word	0x00007c81
 8001f54:	00007fa1 	.word	0x00007fa1
 8001f58:	000081a1 	.word	0x000081a1
 8001f5c:	00008561 	.word	0x00008561
 8001f60:	000083a1 	.word	0x000083a1
 8001f64:	000083e1 	.word	0x000083e1
 8001f68:	00008401 	.word	0x00008401
 8001f6c:	00008441 	.word	0x00008441
 8001f70:	000089c1 	.word	0x000089c1
 8001f74:	00007e81 	.word	0x00007e81
 8001f78:	00007ea1 	.word	0x00007ea1
 8001f7c:	00007ee1 	.word	0x00007ee1
 8001f80:	00007f01 	.word	0x00007f01
 8001f84:	00007f41 	.word	0x00007f41
			  effectTick[i] = &shaperTick;
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001f8a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001f90:	483d      	ldr	r0, [pc, #244]	; (8002088 <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
 8001f92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001f96:	493d      	ldr	r1, [pc, #244]	; (800208c <setEffectsFunctions+0x498>)
 8001f98:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001f9e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001fa2:	483c      	ldr	r0, [pc, #240]	; (8002094 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
 8001fa4:	493c      	ldr	r1, [pc, #240]	; (8002098 <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001fa6:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001fa8:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
 8001faa:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001fae:	e653      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fb0:	4835      	ldr	r0, [pc, #212]	; (8002088 <setEffectsFunctions+0x494>)
 8001fb2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <setEffectsFunctions+0x48c>)
 8001fb8:	4a38      	ldr	r2, [pc, #224]	; (800209c <setEffectsFunctions+0x4a8>)
 8001fba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fbe:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8001fc2:	4932      	ldr	r1, [pc, #200]	; (800208c <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001fc4:	4a32      	ldr	r2, [pc, #200]	; (8002090 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fc6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001fca:	4932      	ldr	r1, [pc, #200]	; (8002094 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001fcc:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001fce:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001fd0:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001fd4:	e640      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fd6:	482c      	ldr	r0, [pc, #176]	; (8002088 <setEffectsFunctions+0x494>)
 8001fd8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <setEffectsFunctions+0x48c>)
 8001fde:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <setEffectsFunctions+0x4ac>)
 8001fe0:	e7eb      	b.n	8001fba <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fe4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
 8001fe8:	4a2e      	ldr	r2, [pc, #184]	; (80020a4 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001fea:	4827      	ldr	r0, [pc, #156]	; (8002088 <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
 8001fec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ff0:	4926      	ldr	r1, [pc, #152]	; (800208c <setEffectsFunctions+0x498>)
 8001ff2:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001ff6:	4a26      	ldr	r2, [pc, #152]	; (8002090 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ff8:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001ffc:	4825      	ldr	r0, [pc, #148]	; (8002094 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
 8001ffe:	492a      	ldr	r1, [pc, #168]	; (80020a8 <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8002000:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8002002:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
 8002004:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002008:	e626      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800200c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002012:	481d      	ldr	r0, [pc, #116]	; (8002088 <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
 8002014:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002018:	491c      	ldr	r1, [pc, #112]	; (800208c <setEffectsFunctions+0x498>)
 800201a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002020:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8002024:	481b      	ldr	r0, [pc, #108]	; (8002094 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
 8002026:	4922      	ldr	r1, [pc, #136]	; (80020b0 <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
 8002028:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 800202a:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
 800202c:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002030:	e612      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002034:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
 800203c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002040:	4912      	ldr	r1, [pc, #72]	; (800208c <setEffectsFunctions+0x498>)
 8002042:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002048:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
 800204e:	491a      	ldr	r1, [pc, #104]	; (80020b8 <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8002050:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8002052:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
 8002054:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002058:	e5fe      	b.n	8001c58 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <setEffectsFunctions+0x49c>)
 800205c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
 8002062:	4c07      	ldr	r4, [pc, #28]	; (8002080 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
 8002064:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
 8002068:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
 800206c:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8002070:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
 8002074:	2200      	movs	r2, #0
 8002076:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <setEffectsFunctions+0x4c8>)
 800207a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
 800207e:	e5eb      	b.n	8001c58 <setEffectsFunctions+0x64>
 8002080:	2001d0e4 	.word	0x2001d0e4
 8002084:	00008641 	.word	0x00008641
 8002088:	2001453c 	.word	0x2001453c
 800208c:	00007c81 	.word	0x00007c81
 8002090:	000018e1 	.word	0x000018e1
 8002094:	00007f81 	.word	0x00007f81
 8002098:	00007fc1 	.word	0x00007fc1
 800209c:	00008701 	.word	0x00008701
 80020a0:	00008901 	.word	0x00008901
 80020a4:	00008861 	.word	0x00008861
 80020a8:	000080c1 	.word	0x000080c1
 80020ac:	000087c1 	.word	0x000087c1
 80020b0:	00008041 	.word	0x00008041
 80020b4:	00008761 	.word	0x00008761
 80020b8:	00007fe1 	.word	0x00007fe1
 80020bc:	000086a1 	.word	0x000086a1

080020c0 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
 80020c0:	b410      	push	{r4}
	switch (filterType)
 80020c2:	2808      	cmp	r0, #8
 80020c4:	d812      	bhi.n	80020ec <setFilterTypes+0x2c>
 80020c6:	e8df f000 	tbb	[pc, r0]
 80020ca:	3223      	.short	0x3223
 80020cc:	6e5f5041 	.word	0x6e5f5041
 80020d0:	057d      	.short	0x057d
 80020d2:	14          	.byte	0x14
 80020d3:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 80020d4:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
 80020d6:	4a44      	ldr	r2, [pc, #272]	; (80021e8 <setFilterTypes+0x128>)
 80020d8:	4844      	ldr	r0, [pc, #272]	; (80021ec <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 80020da:	4c45      	ldr	r4, [pc, #276]	; (80021f0 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
 80020dc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 80020e0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80020e4:	4843      	ldr	r0, [pc, #268]	; (80021f4 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 80020e6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 80020ea:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
 80020ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020f0:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
 80020f4:	4a3c      	ldr	r2, [pc, #240]	; (80021e8 <setFilterTypes+0x128>)
 80020f6:	4840      	ldr	r0, [pc, #256]	; (80021f8 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 80020f8:	4c40      	ldr	r4, [pc, #256]	; (80021fc <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
 80020fa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 80020fe:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002102:	483f      	ldr	r0, [pc, #252]	; (8002200 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8002104:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8002108:	6050      	str	r0, [r2, #4]
}
 800210a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800210e:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
 8002112:	4a35      	ldr	r2, [pc, #212]	; (80021e8 <setFilterTypes+0x128>)
 8002114:	483b      	ldr	r0, [pc, #236]	; (8002204 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8002116:	4c3c      	ldr	r4, [pc, #240]	; (8002208 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
 8002118:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
 800211c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002120:	483a      	ldr	r0, [pc, #232]	; (800220c <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8002122:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8002126:	6050      	str	r0, [r2, #4]
}
 8002128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800212c:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
 8002130:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <setFilterTypes+0x128>)
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
 8002134:	4c37      	ldr	r4, [pc, #220]	; (8002214 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
 8002136:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
 800213a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800213e:	4836      	ldr	r0, [pc, #216]	; (8002218 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
 8002140:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8002144:	6050      	str	r0, [r2, #4]
}
 8002146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800214a:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
 800214e:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <setFilterTypes+0x128>)
 8002150:	4832      	ldr	r0, [pc, #200]	; (800221c <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8002152:	4c33      	ldr	r4, [pc, #204]	; (8002220 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
 8002154:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
 8002158:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800215c:	4831      	ldr	r0, [pc, #196]	; (8002224 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
 800215e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8002162:	6050      	str	r0, [r2, #4]
}
 8002164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002168:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <setFilterTypes+0x128>)
 800216e:	482e      	ldr	r0, [pc, #184]	; (8002228 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8002170:	4c2e      	ldr	r4, [pc, #184]	; (800222c <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
 8002172:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8002176:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800217a:	482d      	ldr	r0, [pc, #180]	; (8002230 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800217c:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8002180:	6050      	str	r0, [r2, #4]
}
 8002182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002186:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <setFilterTypes+0x128>)
 800218c:	4829      	ldr	r0, [pc, #164]	; (8002234 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 800218e:	4c2a      	ldr	r4, [pc, #168]	; (8002238 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
 8002190:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8002194:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002198:	4828      	ldr	r0, [pc, #160]	; (800223c <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 800219a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 800219e:	6050      	str	r0, [r2, #4]
}
 80021a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021a4:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <setFilterTypes+0x128>)
 80021aa:	4825      	ldr	r0, [pc, #148]	; (8002240 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80021ac:	4c25      	ldr	r4, [pc, #148]	; (8002244 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
 80021ae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80021b2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80021b6:	4824      	ldr	r0, [pc, #144]	; (8002248 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80021b8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80021bc:	6050      	str	r0, [r2, #4]
}
 80021be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c2:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <setFilterTypes+0x128>)
 80021c8:	4820      	ldr	r0, [pc, #128]	; (800224c <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80021ca:	4c21      	ldr	r4, [pc, #132]	; (8002250 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
 80021cc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80021d0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80021d4:	481f      	ldr	r0, [pc, #124]	; (8002254 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80021d6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80021da:	6050      	str	r0, [r2, #4]
}
 80021dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20016590 	.word	0x20016590
 80021e8:	2001d158 	.word	0x2001d158
 80021ec:	00007081 	.word	0x00007081
 80021f0:	00007301 	.word	0x00007301
 80021f4:	00007501 	.word	0x00007501
 80021f8:	000070e1 	.word	0x000070e1
 80021fc:	00007321 	.word	0x00007321
 8002200:	00007541 	.word	0x00007541
 8002204:	00006e41 	.word	0x00006e41
 8002208:	00007221 	.word	0x00007221
 800220c:	00007341 	.word	0x00007341
 8002210:	00006ea1 	.word	0x00006ea1
 8002214:	00007241 	.word	0x00007241
 8002218:	00007381 	.word	0x00007381
 800221c:	00006f01 	.word	0x00006f01
 8002220:	00007261 	.word	0x00007261
 8002224:	000073c1 	.word	0x000073c1
 8002228:	00006f61 	.word	0x00006f61
 800222c:	00007281 	.word	0x00007281
 8002230:	00007401 	.word	0x00007401
 8002234:	00006fc1 	.word	0x00006fc1
 8002238:	000072a1 	.word	0x000072a1
 800223c:	00007441 	.word	0x00007441
 8002240:	00007001 	.word	0x00007001
 8002244:	000072c1 	.word	0x000072c1
 8002248:	00007481 	.word	0x00007481
 800224c:	00007041 	.word	0x00007041
 8002250:	000072e1 	.word	0x000072e1
 8002254:	000074c1 	.word	0x000074c1

08002258 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
 8002258:	b410      	push	{r4}
	switch(LFOShape)
 800225a:	2805      	cmp	r0, #5
 800225c:	d814      	bhi.n	8002288 <setLFOShapes+0x30>
 800225e:	e8df f000 	tbb	[pc, r0]
 8002262:	3c29      	.short	0x3c29
 8002264:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 800226a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
 800226e:	4c38      	ldr	r4, [pc, #224]	; (8002350 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
 8002272:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002276:	4c38      	ldr	r4, [pc, #224]	; (8002358 <setLFOShapes+0x100>)
 8002278:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
 800227c:	4937      	ldr	r1, [pc, #220]	; (800235c <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 800227e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8002282:	4a37      	ldr	r2, [pc, #220]	; (8002360 <setLFOShapes+0x108>)
 8002284:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
 8002288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800228c:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002290:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
 8002294:	4c33      	ldr	r4, [pc, #204]	; (8002364 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
 8002298:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 800229c:	4c32      	ldr	r4, [pc, #200]	; (8002368 <setLFOShapes+0x110>)
 800229e:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
 80022a2:	4932      	ldr	r1, [pc, #200]	; (800236c <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 80022a4:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80022a8:	4a31      	ldr	r2, [pc, #196]	; (8002370 <setLFOShapes+0x118>)
 80022aa:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80022ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b2:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80022b6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
 80022ba:	4c2e      	ldr	r4, [pc, #184]	; (8002374 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80022bc:	4a25      	ldr	r2, [pc, #148]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
 80022be:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80022c2:	4c2d      	ldr	r4, [pc, #180]	; (8002378 <setLFOShapes+0x120>)
 80022c4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 80022c8:	492c      	ldr	r1, [pc, #176]	; (800237c <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80022ca:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <setLFOShapes+0x128>)
 80022d0:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80022d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022d8:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80022dc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
 80022e0:	4c28      	ldr	r4, [pc, #160]	; (8002384 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
 80022e4:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80022e8:	4c27      	ldr	r4, [pc, #156]	; (8002388 <setLFOShapes+0x130>)
 80022ea:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80022ee:	4927      	ldr	r1, [pc, #156]	; (800238c <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80022f0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <setLFOShapes+0x138>)
 80022f6:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80022fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022fe:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002302:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
 8002306:	4c23      	ldr	r4, [pc, #140]	; (8002394 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
 800230a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 800230e:	4c22      	ldr	r4, [pc, #136]	; (8002398 <setLFOShapes+0x140>)
 8002310:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
 8002314:	4921      	ldr	r1, [pc, #132]	; (800239c <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002316:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <setLFOShapes+0x148>)
 800231c:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002324:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002328:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
 800232c:	4c1d      	ldr	r4, [pc, #116]	; (80023a4 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
 8002330:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002334:	4c1c      	ldr	r4, [pc, #112]	; (80023a8 <setLFOShapes+0x150>)
 8002336:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
 800233a:	491c      	ldr	r1, [pc, #112]	; (80023ac <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 800233c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <setLFOShapes+0x158>)
 8002342:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	2001d2dc 	.word	0x2001d2dc
 8002350:	000079e1 	.word	0x000079e1
 8002354:	200186bc 	.word	0x200186bc
 8002358:	00007ac1 	.word	0x00007ac1
 800235c:	00007c41 	.word	0x00007c41
 8002360:	00007b81 	.word	0x00007b81
 8002364:	00007a21 	.word	0x00007a21
 8002368:	00007ae1 	.word	0x00007ae1
 800236c:	00007c61 	.word	0x00007c61
 8002370:	00007ba1 	.word	0x00007ba1
 8002374:	00007981 	.word	0x00007981
 8002378:	00007a61 	.word	0x00007a61
 800237c:	00007be1 	.word	0x00007be1
 8002380:	00007b21 	.word	0x00007b21
 8002384:	00007961 	.word	0x00007961
 8002388:	00007a41 	.word	0x00007a41
 800238c:	00007bc1 	.word	0x00007bc1
 8002390:	00007b01 	.word	0x00007b01
 8002394:	000079a1 	.word	0x000079a1
 8002398:	00007a81 	.word	0x00007a81
 800239c:	00007c01 	.word	0x00007c01
 80023a0:	00007b41 	.word	0x00007b41
 80023a4:	000079c1 	.word	0x000079c1
 80023a8:	00007aa1 	.word	0x00007aa1
 80023ac:	00007c21 	.word	0x00007c21
 80023b0:	00007b61 	.word	0x00007b61

080023b4 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80023b4:	4bd6      	ldr	r3, [pc, #856]	; (8002710 <main+0x35c>)
{
 80023b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ba:	ed2d 8b02 	vpush	{d8}
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	b08f      	sub	sp, #60	; 0x3c
 80023c2:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80023c6:	d111      	bne.n	80023ec <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023cc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80023d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80023d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80023e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023e8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80023ec:	49c8      	ldr	r1, [pc, #800]	; (8002710 <main+0x35c>)
 80023ee:	694b      	ldr	r3, [r1, #20]
 80023f0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80023f4:	d124      	bne.n	8002440 <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80023f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80023fa:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80023fe:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002402:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002406:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800240a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800240e:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002410:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002414:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002416:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800241a:	3b01      	subs	r3, #1
 800241c:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800241e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002422:	d1f8      	bne.n	8002416 <main+0x62>
    } while(sets-- != 0U);
 8002424:	3c20      	subs	r4, #32
 8002426:	f114 0f20 	cmn.w	r4, #32
 800242a:	d1f1      	bne.n	8002410 <main+0x5c>
 800242c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002430:	694b      	ldr	r3, [r1, #20]
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	614b      	str	r3, [r1, #20]
 8002438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800243c:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002440:	2400      	movs	r4, #0
  HAL_Init();
 8002442:	f001 fdb7 	bl	8003fb4 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002446:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002448:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800244c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
 8002450:	f001 fe88 	bl	8004164 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002454:	f248 721f 	movw	r2, #34591	; 0x871f
 8002458:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800245c:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800245e:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002462:	930d      	str	r3, [sp, #52]	; 0x34
 8002464:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002468:	f001 fe9a 	bl	80041a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 800246c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002470:	4ba8      	ldr	r3, [pc, #672]	; (8002714 <main+0x360>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002472:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002474:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002478:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800247c:	f001 fe90 	bl	80041a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8002480:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002484:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002486:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8002488:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800248a:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800248c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002490:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002494:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002498:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800249c:	f001 fe80 	bl	80041a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80024a0:	2103      	movs	r1, #3
  MPU_InitStruct.BaseAddress = 0x60000000;
 80024a2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80024a6:	2318      	movs	r3, #24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024a8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80024aa:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x60000000;
 80024ae:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80024b0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80024b4:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024b8:	f001 fe72 	bl	80041a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80024bc:	2004      	movs	r0, #4
 80024be:	f001 fe5f 	bl	8004180 <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80024c2:	b662      	cpsie	i
  SystemClock_Config();
 80024c4:	f7fe ff72 	bl	80013ac <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80024c8:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8002794 <main+0x3e0>
  PeriphCommonClock_Config();
 80024cc:	f7fe ffec 	bl	80014a8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80024d0:	f7fe fdd0 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 80024d4:	f7fe fcda 	bl	8000e8c <MX_DMA_Init>
  MX_FMC_Init();
 80024d8:	f7fe fd14 	bl	8000f04 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80024dc:	f000 fd5e 	bl	8002f9c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80024e0:	f00a fa06 	bl	800c8f0 <MX_FATFS_Init>
  MX_SAI1_Init();
 80024e4:	f000 fc60 	bl	8002da8 <MX_SAI1_Init>
  MX_RNG_Init();
 80024e8:	f000 fc1e 	bl	8002d28 <MX_RNG_Init>
  MX_I2C2_Init();
 80024ec:	f7fe fec6 	bl	800127c <MX_I2C2_Init>
  MX_SPI1_Init();
 80024f0:	f000 fdca 	bl	8003088 <MX_SPI1_Init>
  MX_SPI5_Init();
 80024f4:	f000 fdf4 	bl	80030e0 <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	4886      	ldr	r0, [pc, #536]	; (8002718 <main+0x364>)
 80024fe:	f003 fd57 	bl	8005fb0 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002506:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002508:	4883      	ldr	r0, [pc, #524]	; (8002718 <main+0x364>)
 800250a:	f003 fd51 	bl	8005fb0 <HAL_GPIO_ReadPin>
 800250e:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002510:	2104      	movs	r1, #4
 8002512:	4882      	ldr	r0, [pc, #520]	; (800271c <main+0x368>)
 8002514:	f003 fd4c 	bl	8005fb0 <HAL_GPIO_ReadPin>
 8002518:	4602      	mov	r2, r0
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800251a:	00a3      	lsls	r3, r4, #2
	HAL_Delay(500);
 800251c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002520:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002524:	4413      	add	r3, r2
 8002526:	f888 3000 	strb.w	r3, [r8]
	HAL_Delay(500);
 800252a:	f001 fd85 	bl	8004038 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 800252e:	4a7c      	ldr	r2, [pc, #496]	; (8002720 <main+0x36c>)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002538:	6813      	ldr	r3, [r2, #0]
 800253a:	05d9      	lsls	r1, r3, #23
 800253c:	d5fc      	bpl.n	8002538 <main+0x184>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <main+0x370>)
 8002540:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002548:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	9305      	str	r3, [sp, #20]
 8002556:	9b05      	ldr	r3, [sp, #20]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8002558:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800255c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8002560:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002564:	496a      	ldr	r1, [pc, #424]	; (8002710 <main+0x35c>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002566:	4a70      	ldr	r2, [pc, #448]	; (8002728 <main+0x374>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002568:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 800256c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002570:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002574:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
 8002578:	07db      	lsls	r3, r3, #31
 800257a:	d502      	bpl.n	8002582 <main+0x1ce>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800257c:	4b6b      	ldr	r3, [pc, #428]	; (800272c <main+0x378>)
 800257e:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8002582:	4b69      	ldr	r3, [pc, #420]	; (8002728 <main+0x374>)
 8002584:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 8002586:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <main+0x37c>)
	  buffer[i] = 0;
 8002588:	4c6a      	ldr	r4, [pc, #424]	; (8002734 <main+0x380>)
  DWT->CYCCNT = 0;
 800258a:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
 800258c:	486a      	ldr	r0, [pc, #424]	; (8002738 <main+0x384>)
  DWT->CTRL = 0x40000001;
 800258e:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	f016 fb55 	bl	8018c40 <memset>
	  buffer[i] = 0;
 8002596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800259a:	2100      	movs	r1, #0
 800259c:	4620      	mov	r0, r4
 800259e:	f016 fb4f 	bl	8018c40 <memset>
  buffer[15+112] = NUM_PARAMS;
 80025a2:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80025a4:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80025a8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
 80025ac:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
 80025b0:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80025b2:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80025b6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
 80025ba:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80025be:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80025c2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800273c <main+0x388>
 80025c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80025ca:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80025ce:	485c      	ldr	r0, [pc, #368]	; (8002740 <main+0x38c>)
 80025d0:	f011 fbae 	bl	8013d30 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 80025d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8002744 <main+0x390>
 80025dc:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002748 <main+0x394>
 80025e0:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800274c <main+0x398>
 80025e4:	485a      	ldr	r0, [pc, #360]	; (8002750 <main+0x39c>)
 80025e6:	f011 fba3 	bl	8013d30 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 80025ea:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80025ee:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80025f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f6:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800274c <main+0x398>
 80025fa:	4856      	ldr	r0, [pc, #344]	; (8002754 <main+0x3a0>)
 80025fc:	f011 fb98 	bl	8013d30 <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
 8002600:	f898 3000 	ldrb.w	r3, [r8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8369 	beq.w	8002cdc <main+0x928>
	  diskBusy = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <main+0x3a4>)
  specialModeMacroNames[0][0] = "Feedback  ";
 800260e:	4d53      	ldr	r5, [pc, #332]	; (800275c <main+0x3a8>)
	  diskBusy = 1;
 8002610:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
 8002612:	f7ff faa7 	bl	8001b64 <SDRAM_init>
  audioInit();
 8002616:	f7fe f9fb 	bl	8000a10 <audioInit>
  specialModeMacroNames[0][0] = "Feedback  ";
 800261a:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8002798 <main+0x3e4>
  specialModeNames[0] = "PHYS STR1     ";
 800261e:	4f50      	ldr	r7, [pc, #320]	; (8002760 <main+0x3ac>)
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002620:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  specialModeMacroNames[0][0] = "Feedback  ";
 8002624:	f8c5 c000 	str.w	ip, [r5]
  specialModeMacroNames[0][2] = "PluckWidt ";
 8002628:	f8df c170 	ldr.w	ip, [pc, #368]	; 800279c <main+0x3e8>
  specialModeNames[0] = "PHYS STR1     ";
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <main+0x3b0>)
  specialModeMacroNames[0][2] = "PluckWidt ";
 800262e:	f8c5 c008 	str.w	ip, [r5, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 8002632:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80027a0 <main+0x3ec>
  specialModeMacroNames[0][1] = "SlideNois ";
 8002636:	4a4c      	ldr	r2, [pc, #304]	; (8002768 <main+0x3b4>)
  specialModeMacroNames[0][3] = "PickNoise ";
 8002638:	f8c5 c00c 	str.w	ip, [r5, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
 800263c:	f8df c164 	ldr.w	ip, [pc, #356]	; 80027a4 <main+0x3f0>
  specialModeMacroNames[1][1] = "Tone      ";
 8002640:	4c4a      	ldr	r4, [pc, #296]	; (800276c <main+0x3b8>)
  specialModeMacroNames[0][4] = "PickupSim ";
 8002642:	f8c5 c010 	str.w	ip, [r5, #16]
  specialModeNames[1] = "PHYS STR2     ";
 8002646:	f8df c160 	ldr.w	ip, [pc, #352]	; 80027a8 <main+0x3f4>
  specialModeMacroNames[1][3] = "PickupPos ";
 800264a:	4e49      	ldr	r6, [pc, #292]	; (8002770 <main+0x3bc>)
  specialModeNames[1] = "PHYS STR2     ";
 800264c:	f8c7 c004 	str.w	ip, [r7, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 8002650:	f8df c158 	ldr.w	ip, [pc, #344]	; 80027ac <main+0x3f8>
  specialModeMacroNames[1][8] = "PU Filter ";
 8002654:	4947      	ldr	r1, [pc, #284]	; (8002774 <main+0x3c0>)
  specialModeMacroNames[1][0] = "DecayTime ";
 8002656:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
  specialModeMacroNames[1][2] = "PluckPos  ";
 800265a:	f8df c154 	ldr.w	ip, [pc, #340]	; 80027b0 <main+0x3fc>
  specialModeMacroNames[1][5] = "Stiffness ";
 800265e:	4846      	ldr	r0, [pc, #280]	; (8002778 <main+0x3c4>)
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002660:	f8c5 c058 	str.w	ip, [r5, #88]	; 0x58
  specialModeMacroNames[1][6] = "FB Amp    ";
 8002664:	f8df c14c 	ldr.w	ip, [pc, #332]	; 80027b4 <main+0x400>
  specialModeNames[0] = "PHYS STR1     ";
 8002668:	603b      	str	r3, [r7, #0]
  specialModeMacroNames[1][6] = "FB Amp    ";
 800266a:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
 800266e:	f8df c148 	ldr.w	ip, [pc, #328]	; 80027b8 <main+0x404>
  specialModeMacroNames[0][5] = "          ";
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <main+0x3c8>)
  specialModeMacroNames[1][7] = "FB Speed  ";
 8002674:	f8c5 c06c 	str.w	ip, [r5, #108]	; 0x6c
  specialModeMacroNames[1][9] = "Harmonic  ";
 8002678:	f8df c140 	ldr.w	ip, [pc, #320]	; 80027bc <main+0x408>
  specialModeMacroNames[0][11] = "          ";
 800267c:	62eb      	str	r3, [r5, #44]	; 0x2c
  specialModeMacroNames[1][9] = "Harmonic  ";
 800267e:	f8c5 c074 	str.w	ip, [r5, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
 8002682:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80027c0 <main+0x40c>
  specialModeMacroNames[0][1] = "SlideNois ";
 8002686:	606a      	str	r2, [r5, #4]
  specialModeMacroNames[1][10] = "HarmPosX  ";
 8002688:	f8c5 c078 	str.w	ip, [r5, #120]	; 0x78
  specialModeMacroNames[1][11] = "HarmPosY  ";
 800268c:	f8df c134 	ldr.w	ip, [pc, #308]	; 80027c4 <main+0x410>
  specialModeMacroNames[1][4] = "SlideNois ";
 8002690:	662a      	str	r2, [r5, #96]	; 0x60
  specialModeMacroNames[1][11] = "HarmPosY  ";
 8002692:	f8c5 c07c 	str.w	ip, [r5, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
 8002696:	f8df c130 	ldr.w	ip, [pc, #304]	; 80027c8 <main+0x414>
  specialModeMacroNames[1][1] = "Tone      ";
 800269a:	656c      	str	r4, [r5, #84]	; 0x54
  specialModeMacroNames[1][12] = "PUModRate ";
 800269c:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80026a0:	f8df c128 	ldr.w	ip, [pc, #296]	; 80027cc <main+0x418>
  specialModeMacroNames[1][3] = "PickupPos ";
 80026a4:	65ee      	str	r6, [r5, #92]	; 0x5c
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80026a6:	f8c5 c084 	str.w	ip, [r5, #132]	; 0x84
  specialModeMacroNames[1][14] = "Ph Harm G ";
 80026aa:	f8df c124 	ldr.w	ip, [pc, #292]	; 80027d0 <main+0x41c>
  specialModeMacroNames[1][8] = "PU Filter ";
 80026ae:	6729      	str	r1, [r5, #112]	; 0x70
  specialModeMacroNames[1][14] = "Ph Harm G ";
 80026b0:	f8c5 c088 	str.w	ip, [r5, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
 80026b4:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80027d4 <main+0x420>
  specialModeMacroNames[1][5] = "Stiffness ";
 80026b8:	6668      	str	r0, [r5, #100]	; 0x64
  specialModeMacroNames[1][15] = "PUFilterQ ";
 80026ba:	f8c5 c08c 	str.w	ip, [r5, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Q   ";
 80026be:	f8df c118 	ldr.w	ip, [pc, #280]	; 80027d8 <main+0x424>
  specialModeMacroNames[2][11] = "Decay     ";
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <main+0x3cc>)
  specialModeMacroNames[1][16] = "PeakF Q   ";
 80026c4:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Frq ";
 80026c8:	f8df c110 	ldr.w	ip, [pc, #272]	; 80027dc <main+0x428>
 80026cc:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
 80026d0:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80027e0 <main+0x42c>
  specialModeMacroNames[0][6] = "          ";
 80026d4:	e9c5 3305 	strd	r3, r3, [r5, #20]
  specialModeMacroNames[0][8] = "          ";
 80026d8:	e9c5 3307 	strd	r3, r3, [r5, #28]
  specialModeMacroNames[0][10] = "          ";
 80026dc:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
  specialModeMacroNames[1][18] = "Tension G ";
 80026e0:	f8c5 c098 	str.w	ip, [r5, #152]	; 0x98
  specialModeMacroNames[4][3] = "PU Filter ";
 80026e4:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
  specialModeMacroNames[1][19] = "Acoustic  ";
 80026e8:	4926      	ldr	r1, [pc, #152]	; (8002784 <main+0x3d0>)
  specialModeMacroNames[2][3] = "PickupPos ";
 80026ea:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
  specialModeMacroNames[4][11] = "PU Pos   ";
 80026ee:	263f      	movs	r6, #63	; 0x3f
  specialModeMacroNames[1][19] = "Acoustic  ";
 80026f0:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
 80026f4:	4924      	ldr	r1, [pc, #144]	; (8002788 <main+0x3d4>)
  specialModeMacroNames[2][10] = "Tone      ";
 80026f6:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8
  specialModeNames[2] = "ADDITIVE      ";
 80026fa:	60b9      	str	r1, [r7, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
 80026fc:	4923      	ldr	r1, [pc, #140]	; (800278c <main+0x3d8>)
  specialModeMacroNames[2][9] = "          ";
 80026fe:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  specialModeMacroNames[2][0] = "Stretch   ";
 8002702:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
 8002706:	4922      	ldr	r1, [pc, #136]	; (8002790 <main+0x3dc>)
  specialModeMacroNames[4][0] = "Stiffness ";
 8002708:	f8c5 0140 	str.w	r0, [r5, #320]	; 0x140
 800270c:	e06a      	b.n	80027e4 <main+0x430>
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	03010011 	.word	0x03010011
 8002718:	58020400 	.word	0x58020400
 800271c:	58020000 	.word	0x58020000
 8002720:	58024800 	.word	0x58024800
 8002724:	58024400 	.word	0x58024400
 8002728:	e0001000 	.word	0xe0001000
 800272c:	c5acce55 	.word	0xc5acce55
 8002730:	40000001 	.word	0x40000001
 8002734:	30042380 	.word	0x30042380
 8002738:	38000000 	.word	0x38000000
 800273c:	3c23d70a 	.word	0x3c23d70a
 8002740:	2001a618 	.word	0x2001a618
 8002744:	457a0000 	.word	0x457a0000
 8002748:	469c4000 	.word	0x469c4000
 800274c:	00000000 	.word	0x00000000
 8002750:	20014590 	.word	0x20014590
 8002754:	200166bc 	.word	0x200166bc
 8002758:	20014538 	.word	0x20014538
 800275c:	2001c618 	.word	0x2001c618
 8002760:	2001c7a8 	.word	0x2001c7a8
 8002764:	0801b90c 	.word	0x0801b90c
 8002768:	0801b928 	.word	0x0801b928
 800276c:	0801b980 	.word	0x0801b980
 8002770:	0801b998 	.word	0x0801b998
 8002774:	0801b9c8 	.word	0x0801b9c8
 8002778:	0801b9a4 	.word	0x0801b9a4
 800277c:	0801b958 	.word	0x0801b958
 8002780:	0801bab0 	.word	0x0801bab0
 8002784:	0801ba4c 	.word	0x0801ba4c
 8002788:	0801ba58 	.word	0x0801ba58
 800278c:	0801ba68 	.word	0x0801ba68
 8002790:	0801ba74 	.word	0x0801ba74
 8002794:	200144e5 	.word	0x200144e5
 8002798:	0801b91c 	.word	0x0801b91c
 800279c:	0801b934 	.word	0x0801b934
 80027a0:	0801b940 	.word	0x0801b940
 80027a4:	0801b94c 	.word	0x0801b94c
 80027a8:	0801b964 	.word	0x0801b964
 80027ac:	0801b974 	.word	0x0801b974
 80027b0:	0801b98c 	.word	0x0801b98c
 80027b4:	0801b9b0 	.word	0x0801b9b0
 80027b8:	0801b9bc 	.word	0x0801b9bc
 80027bc:	0801b9d4 	.word	0x0801b9d4
 80027c0:	0801b9e0 	.word	0x0801b9e0
 80027c4:	0801b9ec 	.word	0x0801b9ec
 80027c8:	0801b9f8 	.word	0x0801b9f8
 80027cc:	0801ba04 	.word	0x0801ba04
 80027d0:	0801ba10 	.word	0x0801ba10
 80027d4:	0801ba1c 	.word	0x0801ba1c
 80027d8:	0801ba28 	.word	0x0801ba28
 80027dc:	0801ba34 	.word	0x0801ba34
 80027e0:	0801ba40 	.word	0x0801ba40
  specialModeMacroNames[2][1] = "Tilt      ";
 80027e4:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 80027e8:	49af      	ldr	r1, [pc, #700]	; (8002aa8 <main+0x6f4>)
  specialModeMacroNames[2][11] = "Decay     ";
 80027ea:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 80027ee:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
  specialModeMacroNames[2][4] = "PickupAmp ";
 80027f2:	49ae      	ldr	r1, [pc, #696]	; (8002aac <main+0x6f8>)
 80027f4:	4cae      	ldr	r4, [pc, #696]	; (8002ab0 <main+0x6fc>)
 80027f6:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
 80027fa:	49ae      	ldr	r1, [pc, #696]	; (8002ab4 <main+0x700>)
 80027fc:	f8df c35c 	ldr.w	ip, [pc, #860]	; 8002b5c <main+0x7a8>
 8002800:	f8c5 10b4 	str.w	r1, [r5, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
 8002804:	49ac      	ldr	r1, [pc, #688]	; (8002ab8 <main+0x704>)
 8002806:	f8c5 10b8 	str.w	r1, [r5, #184]	; 0xb8
  specialModeNames[3] = "VOCAL        ";
 800280a:	49ac      	ldr	r1, [pc, #688]	; (8002abc <main+0x708>)
 800280c:	60f9      	str	r1, [r7, #12]
  specialModeMacroNames[3][0] = "Size      ";
 800280e:	49ac      	ldr	r1, [pc, #688]	; (8002ac0 <main+0x70c>)
 8002810:	f8c5 10f0 	str.w	r1, [r5, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
 8002814:	49ab      	ldr	r1, [pc, #684]	; (8002ac4 <main+0x710>)
 8002816:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
  specialModeMacroNames[3][2] = "Diameter  ";
 800281a:	49ab      	ldr	r1, [pc, #684]	; (8002ac8 <main+0x714>)
 800281c:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
 8002820:	49aa      	ldr	r1, [pc, #680]	; (8002acc <main+0x718>)
 8002822:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
 8002826:	49aa      	ldr	r1, [pc, #680]	; (8002ad0 <main+0x71c>)
 8002828:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
 800282c:	49a9      	ldr	r1, [pc, #676]	; (8002ad4 <main+0x720>)
 800282e:	f8c5 1104 	str.w	r1, [r5, #260]	; 0x104
  specialModeMacroNames[3][8] = "BackPos   ";
 8002832:	49a9      	ldr	r1, [pc, #676]	; (8002ad8 <main+0x724>)
 8002834:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
 8002838:	49a8      	ldr	r1, [pc, #672]	; (8002adc <main+0x728>)
 800283a:	f8c5 1114 	str.w	r1, [r5, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
 800283e:	49a8      	ldr	r1, [pc, #672]	; (8002ae0 <main+0x72c>)
 8002840:	f8c5 1118 	str.w	r1, [r5, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
 8002844:	49a7      	ldr	r1, [pc, #668]	; (8002ae4 <main+0x730>)
 8002846:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
 800284a:	49a7      	ldr	r1, [pc, #668]	; (8002ae8 <main+0x734>)
 800284c:	6139      	str	r1, [r7, #16]
  specialModeMacroNames[4][1] = "PU Prop   ";
 800284e:	49a7      	ldr	r1, [pc, #668]	; (8002aec <main+0x738>)
 8002850:	f8c5 1144 	str.w	r1, [r5, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
 8002854:	49a6      	ldr	r1, [pc, #664]	; (8002af0 <main+0x73c>)
 8002856:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
  specialModeMacroNames[4][4] = "NoiseFilt ";
 800285a:	49a6      	ldr	r1, [pc, #664]	; (8002af4 <main+0x740>)
  specialModeMacroNames[2][8] = "          ";
 800285c:	e9c5 332f 	strd	r3, r3, [r5, #188]	; 0xbc
  specialModeMacroNames[3][7] = "          ";
 8002860:	e9c5 3342 	strd	r3, r3, [r5, #264]	; 0x108
  specialModeMacroNames[4][4] = "NoiseFilt ";
 8002864:	f8c5 1150 	str.w	r1, [r5, #336]	; 0x150
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002868:	2150      	movs	r1, #80	; 0x50
  specialModeMacroNames[4][8] = "Decay     ";
 800286a:	f8c5 2160 	str.w	r2, [r5, #352]	; 0x160
  specialModeMacroNames[4][7] = "          ";
 800286e:	e9c5 3356 	strd	r3, r3, [r5, #344]	; 0x158
  specialModeMacroNames[4][5] = "NoiseGain ";
 8002872:	4ba1      	ldr	r3, [pc, #644]	; (8002af8 <main+0x744>)
 8002874:	3d04      	subs	r5, #4
 8002876:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
  specialModeMacroNames[4][9] = "Damping   ";
 800287a:	4ba0      	ldr	r3, [pc, #640]	; (8002afc <main+0x748>)
 800287c:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
  specialModeMacroNames[4][10] = "PluckPos ";
 8002880:	4b9f      	ldr	r3, [pc, #636]	; (8002b00 <main+0x74c>)
 8002882:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002886:	4b9f      	ldr	r3, [pc, #636]	; (8002b04 <main+0x750>)
 8002888:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 800288c:	f857 2b04 	ldr.w	r2, [r7], #4
 8002890:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 8002894:	4628      	mov	r0, r5
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002896:	fb0e f906 	mul.w	r9, lr, r6
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 800289a:	f80c 1013 	strb.w	r1, [ip, r3, lsl #1]
 800289e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80028a2:	7851      	ldrb	r1, [r2, #1]
 80028a4:	7059      	strb	r1, [r3, #1]
 80028a6:	7891      	ldrb	r1, [r2, #2]
 80028a8:	7099      	strb	r1, [r3, #2]
 80028aa:	78d1      	ldrb	r1, [r2, #3]
 80028ac:	70d9      	strb	r1, [r3, #3]
 80028ae:	7911      	ldrb	r1, [r2, #4]
 80028b0:	7119      	strb	r1, [r3, #4]
 80028b2:	7951      	ldrb	r1, [r2, #5]
 80028b4:	7159      	strb	r1, [r3, #5]
 80028b6:	7991      	ldrb	r1, [r2, #6]
 80028b8:	7199      	strb	r1, [r3, #6]
 80028ba:	79d1      	ldrb	r1, [r2, #7]
 80028bc:	71d9      	strb	r1, [r3, #7]
 80028be:	7a11      	ldrb	r1, [r2, #8]
 80028c0:	7219      	strb	r1, [r3, #8]
 80028c2:	7a51      	ldrb	r1, [r2, #9]
 80028c4:	7259      	strb	r1, [r3, #9]
 80028c6:	7a91      	ldrb	r1, [r2, #10]
 80028c8:	7299      	strb	r1, [r3, #10]
 80028ca:	7ad1      	ldrb	r1, [r2, #11]
 80028cc:	72d9      	strb	r1, [r3, #11]
 80028ce:	7b11      	ldrb	r1, [r2, #12]
 80028d0:	7319      	strb	r1, [r3, #12]
	  for (int k = 0; k < 20; k++)
 80028d2:	2100      	movs	r1, #0
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80028d4:	7b52      	ldrb	r2, [r2, #13]
 80028d6:	735a      	strb	r2, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80028d8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80028dc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
	  for (int k = 0; k < 20; k++)
 80028e0:	3101      	adds	r1, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80028e2:	f892 a000 	ldrb.w	sl, [r2]
 80028e6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
	  for (int k = 0; k < 20; k++)
 80028ea:	2914      	cmp	r1, #20
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80028ec:	f804 a003 	strb.w	sl, [r4, r3]
 80028f0:	4423      	add	r3, r4
 80028f2:	f892 a001 	ldrb.w	sl, [r2, #1]
 80028f6:	f883 a001 	strb.w	sl, [r3, #1]
 80028fa:	f892 a002 	ldrb.w	sl, [r2, #2]
 80028fe:	f883 a002 	strb.w	sl, [r3, #2]
 8002902:	f892 a003 	ldrb.w	sl, [r2, #3]
 8002906:	f883 a003 	strb.w	sl, [r3, #3]
 800290a:	f892 a004 	ldrb.w	sl, [r2, #4]
 800290e:	f883 a004 	strb.w	sl, [r3, #4]
 8002912:	f892 a005 	ldrb.w	sl, [r2, #5]
 8002916:	f883 a005 	strb.w	sl, [r3, #5]
 800291a:	f892 a006 	ldrb.w	sl, [r2, #6]
 800291e:	f883 a006 	strb.w	sl, [r3, #6]
 8002922:	f892 a007 	ldrb.w	sl, [r2, #7]
 8002926:	f883 a007 	strb.w	sl, [r3, #7]
 800292a:	f892 a008 	ldrb.w	sl, [r2, #8]
 800292e:	f883 a008 	strb.w	sl, [r3, #8]
 8002932:	7a52      	ldrb	r2, [r2, #9]
 8002934:	725a      	strb	r2, [r3, #9]
	  for (int k = 0; k < 20; k++)
 8002936:	d1cf      	bne.n	80028d8 <main+0x524>
  for (int i = 0; i < 5; i++)
 8002938:	2e3b      	cmp	r6, #59	; 0x3b
 800293a:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800293e:	d003      	beq.n	8002948 <main+0x594>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	3e01      	subs	r6, #1
 8002944:	7819      	ldrb	r1, [r3, #0]
 8002946:	e7a1      	b.n	800288c <main+0x4d8>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	496f      	ldr	r1, [pc, #444]	; (8002b08 <main+0x754>)
 800294c:	486f      	ldr	r0, [pc, #444]	; (8002b0c <main+0x758>)
 800294e:	f008 f863 	bl	800aa18 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002952:	4a6f      	ldr	r2, [pc, #444]	; (8002b10 <main+0x75c>)
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	486f      	ldr	r0, [pc, #444]	; (8002b14 <main+0x760>)
	  if (rand > TWO_TO_31)
 8002958:	eddf 8a6f 	vldr	s17, [pc, #444]	; 8002b18 <main+0x764>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 800295c:	18d1      	adds	r1, r2, r3
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 800295e:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 8002b1c <main+0x768>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002962:	f008 f939 	bl	800abd8 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002966:	496e      	ldr	r1, [pc, #440]	; (8002b20 <main+0x76c>)
 8002968:	486e      	ldr	r0, [pc, #440]	; (8002b24 <main+0x770>)
 800296a:	f7fe f9f3 	bl	8000d54 <audioStart>
	AudioCodec_init(&hi2c2);
 800296e:	486e      	ldr	r0, [pc, #440]	; (8002b28 <main+0x774>)
 8002970:	f7fe fa02 	bl	8000d78 <AudioCodec_init>
 8002974:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <main+0x778>)
 8002976:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8002b60 <main+0x7ac>
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8002982:	4f6b      	ldr	r7, [pc, #428]	; (8002b30 <main+0x77c>)
 8002984:	4e6b      	ldr	r6, [pc, #428]	; (8002b34 <main+0x780>)
 8002986:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8002b64 <main+0x7b0>
 800298a:	4d6b      	ldr	r5, [pc, #428]	; (8002b38 <main+0x784>)
 800298c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8002b68 <main+0x7b4>
 8002990:	9203      	str	r2, [sp, #12]
 8002992:	e020      	b.n	80029d6 <main+0x622>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 8002994:	8833      	ldrh	r3, [r6, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	b903      	cbnz	r3, 800299c <main+0x5e8>
 800299a:	8873      	ldrh	r3, [r6, #2]
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800299c:	a90a      	add	r1, sp, #40	; 0x28
 800299e:	4867      	ldr	r0, [pc, #412]	; (8002b3c <main+0x788>)
 80029a0:	f006 fac4 	bl	8008f2c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 80029a4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80029a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ac:	eef4 7ae8 	vcmpe.f32	s15, s17
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	dd04      	ble.n	80029c0 <main+0x60c>
		  myTestInt++;
 80029b6:	f8da 3000 	ldr.w	r3, [sl]
 80029ba:	3301      	adds	r3, #1
 80029bc:	f8ca 3000 	str.w	r3, [sl]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 80029c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80029c4:	782b      	ldrb	r3, [r5, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80029cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80029d0:	702a      	strb	r2, [r5, #0]
 80029d2:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
 80029d6:	f898 3000 	ldrb.w	r3, [r8]
 80029da:	b94b      	cbnz	r3, 80029f0 <main+0x63c>
		  if (presetWaitingToLoad > 0)
 80029dc:	f8db 1000 	ldr.w	r1, [fp]
 80029e0:	b179      	cbz	r1, 8002a02 <main+0x64e>
			  if (!i2cSending)
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <main+0x78c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80be 	beq.w	8002b6c <main+0x7b8>
	  if (presetWaitingToParse > 0)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ce      	beq.n	8002994 <main+0x5e0>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80029f6:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <main+0x790>)
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	7819      	ldrb	r1, [r3, #0]
 80029fc:	f018 fb68 	bl	801b0d0 <__parsePreset_veneer>
 8002a00:	e7c8      	b.n	8002994 <main+0x5e0>
		  else if (presetWaitingToWrite > 0)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <main+0x794>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f2      	beq.n	80029f0 <main+0x63c>
				  writePresetToSDCard(presetWaitingToWrite);
 8002a0a:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <main+0x794>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8002a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a16:	4845      	ldr	r0, [pc, #276]	; (8002b2c <main+0x778>)
 8002a18:	9101      	str	r1, [sp, #4]
 8002a1a:	f016 f911 	bl	8018c40 <memset>
  __IO uint8_t status = SD_PRESENT;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f88d 3013 	strb.w	r3, [sp, #19]
  return status;
 8002a24:	f89d 3013 	ldrb.w	r3, [sp, #19]
	if(BSP_SD_IsDetected())
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d035      	beq.n	8002a98 <main+0x6e4>
 8002a2c:	9b03      	ldr	r3, [sp, #12]
 8002a2e:	9901      	ldr	r1, [sp, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 8135 	bne.w	8002ca0 <main+0x8ec>
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <main+0x778>)
					audioOutBuffer[i] = 0;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	d1fb      	bne.n	8002a3c <main+0x688>
				diskBusy = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	4a41      	ldr	r2, [pc, #260]	; (8002b4c <main+0x798>)
 8002a48:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8002a4a:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <main+0x79c>)
 8002a4c:	7813      	ldrb	r3, [r2, #0]
 8002a4e:	2b63      	cmp	r3, #99	; 0x63
 8002a50:	d901      	bls.n	8002a56 <main+0x6a2>
			        presetNumberToSave = 99;
 8002a52:	2363      	movs	r3, #99	; 0x63
 8002a54:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <main+0x79c>)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	a907      	add	r1, sp, #28
 8002a5c:	7818      	ldrb	r0, [r3, #0]
 8002a5e:	f016 f8ab 	bl	8018bb8 <itoa>
				int len = ((strlen(charBuf)));
 8002a62:	a807      	add	r0, sp, #28
 8002a64:	f7fd fc38 	bl	80002d8 <strlen>
				if (len == 1)
 8002a68:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8002a6a:	4602      	mov	r2, r0
				if (len == 1)
 8002a6c:	f000 80b4 	beq.w	8002bd8 <main+0x824>
					strcat(charBuf, ".ebp");
 8002a70:	4938      	ldr	r1, [pc, #224]	; (8002b54 <main+0x7a0>)
 8002a72:	ab07      	add	r3, sp, #28
 8002a74:	6808      	ldr	r0, [r1, #0]
 8002a76:	7909      	ldrb	r1, [r1, #4]
 8002a78:	5098      	str	r0, [r3, r2]
 8002a7a:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8002a7c:	a80a      	add	r0, sp, #40	; 0x28
 8002a7e:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8002a80:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8002a82:	a907      	add	r1, sp, #28
 8002a84:	f016 f908 	bl	8018c98 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002a88:	220a      	movs	r2, #10
 8002a8a:	a90a      	add	r1, sp, #40	; 0x28
 8002a8c:	4832      	ldr	r0, [pc, #200]	; (8002b58 <main+0x7a4>)
 8002a8e:	f00c fa13 	bl	800eeb8 <f_open>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	f000 80b7 	beq.w	8002c06 <main+0x852>
	presetWaitingToWrite = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <main+0x794>)
 8002a9c:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <main+0x798>)
 8002aa0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
}
 8002aa4:	e7a4      	b.n	80029f0 <main+0x63c>
 8002aa6:	bf00      	nop
 8002aa8:	0801ba80 	.word	0x0801ba80
 8002aac:	0801ba8c 	.word	0x0801ba8c
 8002ab0:	30043380 	.word	0x30043380
 8002ab4:	0801ba98 	.word	0x0801ba98
 8002ab8:	0801baa4 	.word	0x0801baa4
 8002abc:	0801babc 	.word	0x0801babc
 8002ac0:	0801bacc 	.word	0x0801bacc
 8002ac4:	0801bad8 	.word	0x0801bad8
 8002ac8:	0801bae4 	.word	0x0801bae4
 8002acc:	0801baf0 	.word	0x0801baf0
 8002ad0:	0801bafc 	.word	0x0801bafc
 8002ad4:	0801bb08 	.word	0x0801bb08
 8002ad8:	0801bb14 	.word	0x0801bb14
 8002adc:	0801bb20 	.word	0x0801bb20
 8002ae0:	0801bb2c 	.word	0x0801bb2c
 8002ae4:	0801bb38 	.word	0x0801bb38
 8002ae8:	0801bb44 	.word	0x0801bb44
 8002aec:	0801bb54 	.word	0x0801bb54
 8002af0:	0801bb60 	.word	0x0801bb60
 8002af4:	0801bb6c 	.word	0x0801bb6c
 8002af8:	0801bb78 	.word	0x0801bb78
 8002afc:	0801bb84 	.word	0x0801bb84
 8002b00:	0801bb90 	.word	0x0801bb90
 8002b04:	0801bb9c 	.word	0x0801bb9c
 8002b08:	38000040 	.word	0x38000040
 8002b0c:	2001cc68 	.word	0x2001cc68
 8002b10:	30000800 	.word	0x30000800
 8002b14:	2001cbe0 	.word	0x2001cbe0
 8002b18:	4f000000 	.word	0x4f000000
 8002b1c:	3000000d 	.word	0x3000000d
 8002b20:	2001c960 	.word	0x2001c960
 8002b24:	2001c8c8 	.word	0x2001c8c8
 8002b28:	20014490 	.word	0x20014490
 8002b2c:	30000000 	.word	0x30000000
 8002b30:	2001a1bc 	.word	0x2001a1bc
 8002b34:	200143fc 	.word	0x200143fc
 8002b38:	200144fe 	.word	0x200144fe
 8002b3c:	2001c7c0 	.word	0x2001c7c0
 8002b40:	200166ba 	.word	0x200166ba
 8002b44:	2001a1b6 	.word	0x2001a1b6
 8002b48:	2001a1c0 	.word	0x2001a1c0
 8002b4c:	20014538 	.word	0x20014538
 8002b50:	2001a1b7 	.word	0x2001a1b7
 8002b54:	0801bba8 	.word	0x0801bba8
 8002b58:	2001db2c 	.word	0x2001db2c
 8002b5c:	30042000 	.word	0x30042000
 8002b60:	2001a1b8 	.word	0x2001a1b8
 8002b64:	20019078 	.word	0x20019078
 8002b68:	2001a214 	.word	0x2001a214
				  checkForSDCardPreset(presetNumberToLoad);
 8002b6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <main+0x930>)
	prevVoice = numberToLoad;
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <main+0x934>)
				  checkForSDCardPreset(presetNumberToLoad);
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
 8002b74:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <main+0x938>)
 8002b78:	6013      	str	r3, [r2, #0]
  __IO uint8_t status = SD_PRESENT;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f88d 2012 	strb.w	r2, [sp, #18]
  return status;
 8002b80:	f89d 2012 	ldrb.w	r2, [sp, #18]
	if(BSP_SD_IsDetected())
 8002b84:	b30a      	cbz	r2, 8002bca <main+0x816>
 8002b86:	9a03      	ldr	r2, [sp, #12]
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	f040 8082 	bne.w	8002c92 <main+0x8de>
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <main+0x93c>)
			audioOutBuffer[i] = 0;
 8002b90:	2000      	movs	r0, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002b98:	4294      	cmp	r4, r2
 8002b9a:	d1fb      	bne.n	8002b94 <main+0x7e0>
		loadFailed = 0;
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <main+0x940>)
		diskBusy = 1;
 8002ba2:	2201      	movs	r2, #1
		disk_initialize(0);
 8002ba4:	4608      	mov	r0, r1
		presetWaitingToLoad = 0;
 8002ba6:	f8cb 1000 	str.w	r1, [fp]
		loadFailed = 0;
 8002baa:	7019      	strb	r1, [r3, #0]
		diskBusy = 1;
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <main+0x944>)
 8002bae:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
 8002bb0:	f009 ff94 	bl	800cadc <disk_initialize>
	    disk_status(0);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4608      	mov	r0, r1
 8002bb8:	f009 ff86 	bl	800cac8 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	494f      	ldr	r1, [pc, #316]	; (8002cfc <main+0x948>)
 8002bc0:	484f      	ldr	r0, [pc, #316]	; (8002d00 <main+0x94c>)
 8002bc2:	f00c f92d 	bl	800ee20 <f_mount>
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	b338      	cbz	r0, 8002c1a <main+0x866>
		loadFailed = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <main+0x940>)
 8002bce:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <main+0x944>)
 8002bd4:	7013      	strb	r3, [r2, #0]
	return found;
 8002bd6:	e70b      	b.n	80029f0 <main+0x63c>
					finalString[2] = charBuf[1];
 8002bd8:	f89d 301d 	ldrb.w	r3, [sp, #29]
					strcat(finalString, ".ebp");
 8002bdc:	a80a      	add	r0, sp, #40	; 0x28
					finalString[2] = charBuf[1];
 8002bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
					finalString[1] = charBuf[0];
 8002be2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					finalString[0] = '0';
 8002bea:	2330      	movs	r3, #48	; 0x30
 8002bec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					strcat(finalString, ".ebp");
 8002bf0:	f7fd fb72 	bl	80002d8 <strlen>
 8002bf4:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <main+0x950>)
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	a90a      	add	r1, sp, #40	; 0x28
 8002bfa:	6810      	ldr	r0, [r2, #0]
 8002bfc:	7912      	ldrb	r2, [r2, #4]
 8002bfe:	50c8      	str	r0, [r1, r3]
 8002c00:	440b      	add	r3, r1
 8002c02:	711a      	strb	r2, [r3, #4]
 8002c04:	e740      	b.n	8002a88 <main+0x6d4>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8002c06:	9a02      	ldr	r2, [sp, #8]
 8002c08:	ab06      	add	r3, sp, #24
 8002c0a:	493f      	ldr	r1, [pc, #252]	; (8002d08 <main+0x954>)
 8002c0c:	483f      	ldr	r0, [pc, #252]	; (8002d0c <main+0x958>)
 8002c0e:	f00c fbf3 	bl	800f3f8 <f_write>
					f_close(&SDFile);
 8002c12:	483e      	ldr	r0, [pc, #248]	; (8002d0c <main+0x958>)
 8002c14:	f00c fd4c 	bl	800f6b0 <f_close>
 8002c18:	e73e      	b.n	8002a98 <main+0x6e4>
			itoa(numberToLoad, charBuf, 10);
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	a907      	add	r1, sp, #28
 8002c20:	f015 ffca 	bl	8018bb8 <itoa>
			int len = ((strlen(charBuf)));
 8002c24:	a807      	add	r0, sp, #28
 8002c26:	f7fd fb57 	bl	80002d8 <strlen>
			if (len == 1)
 8002c2a:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
 8002c2c:	4602      	mov	r2, r0
			if (len == 1)
 8002c2e:	d03e      	beq.n	8002cae <main+0x8fa>
				strcat(charBuf, "*.ebp");
 8002c30:	4937      	ldr	r1, [pc, #220]	; (8002d10 <main+0x95c>)
 8002c32:	ab07      	add	r3, sp, #28
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	8889      	ldrh	r1, [r1, #4]
 8002c38:	5098      	str	r0, [r3, r2]
 8002c3a:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
 8002c3c:	a80a      	add	r0, sp, #40	; 0x28
 8002c3e:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
 8002c40:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
 8002c42:	a907      	add	r1, sp, #28
 8002c44:	f016 f828 	bl	8018c98 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002c48:	ab0a      	add	r3, sp, #40	; 0x28
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <main+0x948>)
 8002c4c:	4931      	ldr	r1, [pc, #196]	; (8002d14 <main+0x960>)
 8002c4e:	4832      	ldr	r0, [pc, #200]	; (8002d18 <main+0x964>)
 8002c50:	f00c fe2e 	bl	800f8b0 <f_findfirst>
			if(res == FR_OK)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d1b8      	bne.n	8002bca <main+0x816>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8002c58:	2211      	movs	r2, #17
 8002c5a:	4930      	ldr	r1, [pc, #192]	; (8002d1c <main+0x968>)
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <main+0x958>)
 8002c5e:	f00c f92b 	bl	800eeb8 <f_open>
 8002c62:	9001      	str	r0, [sp, #4]
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d1b0      	bne.n	8002bca <main+0x816>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <main+0x958>)
 8002c6a:	ab06      	add	r3, sp, #24
 8002c6c:	4926      	ldr	r1, [pc, #152]	; (8002d08 <main+0x954>)
 8002c6e:	68d2      	ldr	r2, [r2, #12]
 8002c70:	4826      	ldr	r0, [pc, #152]	; (8002d0c <main+0x958>)
 8002c72:	f00c fa85 	bl	800f180 <f_read>
					presetWaitingToParse = bytesRead;
 8002c76:	9b06      	ldr	r3, [sp, #24]
					f_close(&SDFile);
 8002c78:	4824      	ldr	r0, [pc, #144]	; (8002d0c <main+0x958>)
					presetWaitingToParse = bytesRead;
 8002c7a:	603b      	str	r3, [r7, #0]
					f_close(&SDFile);
 8002c7c:	f00c fd18 	bl	800f6b0 <f_close>
	  	  i2cSending = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <main+0x96c>)
 8002c84:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c86:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8002c88:	b662      	cpsie	i
	  	i2cSending = 0;
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	9a01      	ldr	r2, [sp, #4]
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e79e      	b.n	8002bd0 <main+0x81c>
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <main+0x93c>)
			audioOutBuffer[i + 1] = 0;
 8002c94:	e9c2 1100 	strd	r1, r1, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002c98:	3208      	adds	r2, #8
 8002c9a:	42a2      	cmp	r2, r4
 8002c9c:	d1fa      	bne.n	8002c94 <main+0x8e0>
 8002c9e:	e77d      	b.n	8002b9c <main+0x7e8>
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <main+0x93c>)
					audioOutBuffer[i + 1] = 0;
 8002ca2:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	d1fa      	bne.n	8002ca2 <main+0x8ee>
 8002cac:	e6ca      	b.n	8002a44 <main+0x690>
				finalString[2] = charBuf[1];
 8002cae:	f89d 301d 	ldrb.w	r3, [sp, #29]
				strcat(finalString, "*.ebp");
 8002cb2:	a80a      	add	r0, sp, #40	; 0x28
				finalString[2] = charBuf[1];
 8002cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				finalString[1] = charBuf[0];
 8002cb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				finalString[0] = '0';
 8002cc0:	2330      	movs	r3, #48	; 0x30
 8002cc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				strcat(finalString, "*.ebp");
 8002cc6:	f7fd fb07 	bl	80002d8 <strlen>
 8002cca:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <main+0x95c>)
 8002ccc:	4603      	mov	r3, r0
 8002cce:	a90a      	add	r1, sp, #40	; 0x28
 8002cd0:	6810      	ldr	r0, [r2, #0]
 8002cd2:	8892      	ldrh	r2, [r2, #4]
 8002cd4:	50c8      	str	r0, [r1, r3]
 8002cd6:	440b      	add	r3, r1
 8002cd8:	809a      	strh	r2, [r3, #4]
 8002cda:	e7b5      	b.n	8002c48 <main+0x894>
	  getPresetNamesFromSDCard();
 8002cdc:	f7fe fc18 	bl	8001510 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 8002ce0:	e493      	b.n	800260a <main+0x256>
 8002ce2:	bf00      	nop
 8002ce4:	2001a1b6 	.word	0x2001a1b6
 8002ce8:	2000069c 	.word	0x2000069c
 8002cec:	20014440 	.word	0x20014440
 8002cf0:	30000000 	.word	0x30000000
 8002cf4:	200186ec 	.word	0x200186ec
 8002cf8:	20014538 	.word	0x20014538
 8002cfc:	2001dd5c 	.word	0x2001dd5c
 8002d00:	2001d8f8 	.word	0x2001d8f8
 8002d04:	0801bba8 	.word	0x0801bba8
 8002d08:	30042380 	.word	0x30042380
 8002d0c:	2001db2c 	.word	0x2001db2c
 8002d10:	0801b904 	.word	0x0801b904
 8002d14:	200165a0 	.word	0x200165a0
 8002d18:	20014500 	.word	0x20014500
 8002d1c:	200165b6 	.word	0x200165b6
 8002d20:	200166ba 	.word	0x200166ba

08002d24 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d28:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d2a:	4806      	ldr	r0, [pc, #24]	; (8002d44 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <MX_RNG_Init+0x20>)
 8002d30:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d34:	f006 f8b8 	bl	8008ea8 <HAL_RNG_Init>
 8002d38:	b900      	cbnz	r0, 8002d3c <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d3a:	bd08      	pop	{r3, pc}
 8002d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d40:	f7ff bff0 	b.w	8002d24 <Error_Handler>
 8002d44:	2001c7c0 	.word	0x2001c7c0
 8002d48:	48021800 	.word	0x48021800

08002d4c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	b0b2      	sub	sp, #200	; 0xc8
 8002d50:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d52:	22c0      	movs	r2, #192	; 0xc0
 8002d54:	2100      	movs	r1, #0
 8002d56:	a802      	add	r0, sp, #8
 8002d58:	f015 ff72 	bl	8018c40 <memset>
  if(rngHandle->Instance==RNG)
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RNG_MspInit+0x54>)
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002d64:	b032      	add	sp, #200	; 0xc8
 8002d66:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d6c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d6e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d70:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d74:	f004 fea4 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8002d78:	b970      	cbnz	r0, 8002d98 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RNG_MspInit+0x58>)
 8002d7c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002d88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	9b01      	ldr	r3, [sp, #4]
}
 8002d94:	b032      	add	sp, #200	; 0xc8
 8002d96:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002d98:	f7ff ffc4 	bl	8002d24 <Error_Handler>
 8002d9c:	e7ed      	b.n	8002d7a <HAL_RNG_MspInit+0x2e>
 8002d9e:	bf00      	nop
 8002da0:	48021800 	.word	0x48021800
 8002da4:	58024400 	.word	0x58024400

08002da8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002da8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002daa:	4818      	ldr	r0, [pc, #96]	; (8002e0c <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002dac:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002dae:	4c18      	ldr	r4, [pc, #96]	; (8002e10 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002db0:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002db2:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002db4:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002db6:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002db8:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002dba:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002dbc:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002dbe:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002dc2:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002dc6:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002dca:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002dcc:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002dd0:	f006 faba 	bl	8009348 <HAL_SAI_InitProtocol>
 8002dd4:	b998      	cbnz	r0, 8002dfe <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002dd6:	480f      	ldr	r0, [pc, #60]	; (8002e14 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002dd8:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002dda:	4c0f      	ldr	r4, [pc, #60]	; (8002e18 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002ddc:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002dde:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002de0:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002de2:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002de4:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002de6:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002de8:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002dea:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002dec:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002dee:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002df0:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002df2:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002df6:	f006 faa7 	bl	8009348 <HAL_SAI_InitProtocol>
 8002dfa:	b918      	cbnz	r0, 8002e04 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002dfc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002dfe:	f7ff ff91 	bl	8002d24 <Error_Handler>
 8002e02:	e7e8      	b.n	8002dd6 <MX_SAI1_Init+0x2e>
}
 8002e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002e08:	f7ff bf8c 	b.w	8002d24 <Error_Handler>
 8002e0c:	2001c8c8 	.word	0x2001c8c8
 8002e10:	40015804 	.word	0x40015804
 8002e14:	2001c960 	.word	0x2001c960
 8002e18:	40015824 	.word	0x40015824
 8002e1c:	00000000 	.word	0x00000000

08002e20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002e20:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002e22:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <HAL_SAI_MspInit+0x158>)
{
 8002e24:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8002e26:	6803      	ldr	r3, [r0, #0]
{
 8002e28:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002e2e:	4a53      	ldr	r2, [pc, #332]	; (8002f7c <HAL_SAI_MspInit+0x15c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d03f      	beq.n	8002eb4 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002e34:	b009      	add	sp, #36	; 0x24
 8002e36:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_SAI_MspInit+0x160>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	f000 8081 	beq.w	8002f44 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8002e42:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e44:	2074      	movs	r0, #116	; 0x74
 8002e46:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002e48:	4d4e      	ldr	r5, [pc, #312]	; (8002f84 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8002e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e4c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e4e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8002f70 <HAL_SAI_MspInit+0x150>
 8002e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e56:	a902      	add	r1, sp, #8
 8002e58:	484b      	ldr	r0, [pc, #300]	; (8002f88 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e5c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e60:	f002 ff5c 	bl	8005d1c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002e64:	4949      	ldr	r1, [pc, #292]	; (8002f8c <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002e66:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e68:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002e6a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6c:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002e6e:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002e70:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e78:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e7a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002e7e:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e88:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e8a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e8e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e96:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002e9e:	f001 fa91 	bl	80043c4 <HAL_DMA_Init>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d15c      	bne.n	8002f60 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8002ea6:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002ea8:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002eae:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8002eb2:	d1bf      	bne.n	8002e34 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_SAI_MspInit+0x160>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	b3b2      	cbz	r2, 8002f28 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8002eba:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ebc:	2008      	movs	r0, #8
 8002ebe:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002ec0:	4d33      	ldr	r5, [pc, #204]	; (8002f90 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8002ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ec4:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec6:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8002f70 <HAL_SAI_MspInit+0x150>
 8002eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ece:	a902      	add	r1, sp, #8
 8002ed0:	482d      	ldr	r0, [pc, #180]	; (8002f88 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ed2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ed4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed8:	f002 ff20 	bl	8005d1c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002edc:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002ede:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002ee2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ee4:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002ee6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ef2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efe:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f02:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002f06:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f10:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002f14:	f001 fa56 	bl	80043c4 <HAL_DMA_Init>
 8002f18:	bb28      	cbnz	r0, 8002f66 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002f1a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8002f1e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002f20:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8002f24:	b009      	add	sp, #36	; 0x24
 8002f26:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f28:	491b      	ldr	r1, [pc, #108]	; (8002f98 <HAL_SAI_MspInit+0x178>)
 8002f2a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002f2e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002f32:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002f36:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002f3a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f3e:	9101      	str	r1, [sp, #4]
 8002f40:	9901      	ldr	r1, [sp, #4]
 8002f42:	e7ba      	b.n	8002eba <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f44:	4914      	ldr	r1, [pc, #80]	; (8002f98 <HAL_SAI_MspInit+0x178>)
 8002f46:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002f4a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002f4e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002f52:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002f56:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f5a:	9100      	str	r1, [sp, #0]
 8002f5c:	9900      	ldr	r1, [sp, #0]
 8002f5e:	e770      	b.n	8002e42 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8002f60:	f7ff fee0 	bl	8002d24 <Error_Handler>
 8002f64:	e79f      	b.n	8002ea6 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8002f66:	f7ff fedd 	bl	8002d24 <Error_Handler>
 8002f6a:	e7d6      	b.n	8002f1a <HAL_SAI_MspInit+0xfa>
 8002f6c:	f3af 8000 	nop.w
 8002f70:	00000000 	.word	0x00000000
 8002f74:	00000003 	.word	0x00000003
 8002f78:	40015804 	.word	0x40015804
 8002f7c:	40015824 	.word	0x40015824
 8002f80:	2001c7d4 	.word	0x2001c7d4
 8002f84:	2001c7d8 	.word	0x2001c7d8
 8002f88:	58021000 	.word	0x58021000
 8002f8c:	40020028 	.word	0x40020028
 8002f90:	2001c850 	.word	0x2001c850
 8002f94:	40020040 	.word	0x40020040
 8002f98:	58024400 	.word	0x58024400

08002f9c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002f9c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002fa0:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8002fa2:	4c07      	ldr	r4, [pc, #28]	; (8002fc0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002fa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8002fa8:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8002faa:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002fae:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8002fb2:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	2001c9f8 	.word	0x2001c9f8
 8002fc0:	52007000 	.word	0x52007000

08002fc4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_SD_MspInit+0xb0>)
{
 8002fc8:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8002fca:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8002fce:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	9408      	str	r4, [sp, #32]
 8002fd2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002fd6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8002fda:	d001      	beq.n	8002fe0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002fdc:	b00b      	add	sp, #44	; 0x2c
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002fe2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002fe4:	2601      	movs	r6, #1
 8002fe6:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fe8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	4823      	ldr	r0, [pc, #140]	; (800307c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ff2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002ff6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002ffa:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003006:	f042 0204 	orr.w	r2, r2, #4
 800300a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800300e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003012:	f002 0204 	and.w	r2, r2, #4
 8003016:	9202      	str	r2, [sp, #8]
 8003018:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800301e:	f042 0208 	orr.w	r2, r2, #8
 8003022:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003026:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800302e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003036:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003038:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800303c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003040:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003044:	f002 fe6a 	bl	8005d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003048:	2302      	movs	r3, #2
 800304a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304c:	a904      	add	r1, sp, #16
 800304e:	480c      	ldr	r0, [pc, #48]	; (8003080 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003050:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003056:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305a:	f002 fe5f 	bl	8005d1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800305e:	4622      	mov	r2, r4
 8003060:	4621      	mov	r1, r4
 8003062:	2031      	movs	r0, #49	; 0x31
 8003064:	f001 f81c 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003068:	2031      	movs	r0, #49	; 0x31
 800306a:	f001 f857 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 800306e:	b00b      	add	sp, #44	; 0x2c
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	bf00      	nop
 8003074:	52007000 	.word	0x52007000
 8003078:	58024400 	.word	0x58024400
 800307c:	58020800 	.word	0x58020800
 8003080:	58020c00 	.word	0x58020c00
 8003084:	00000000 	.word	0x00000000

08003088 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003088:	4813      	ldr	r0, [pc, #76]	; (80030d8 <MX_SPI1_Init+0x50>)
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800308c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80030d0 <MX_SPI1_Init+0x48>
{
 8003090:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003092:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8003094:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003096:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003098:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800309a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800309c:	ed80 7b08 	vstr	d7, [r0, #32]
 80030a0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80030ac:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030b0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80030b4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80030b8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80030bc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c0:	f007 fbde 	bl	800a880 <HAL_SPI_Init>
 80030c4:	b900      	cbnz	r0, 80030c8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030c6:	bd08      	pop	{r3, pc}
 80030c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80030cc:	f7ff be2a 	b.w	8002d24 <Error_Handler>
	...
 80030d8:	2001cbe0 	.word	0x2001cbe0
 80030dc:	40013000 	.word	0x40013000

080030e0 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80030e0:	4813      	ldr	r0, [pc, #76]	; (8003130 <MX_SPI5_Init+0x50>)
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003128 <MX_SPI5_Init+0x48>
{
 80030e8:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80030ea:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 80030ec:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ee:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 80030f0:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80030f2:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030f4:	ed80 7b08 	vstr	d7, [r0, #32]
 80030f8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80030fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003100:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003104:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003108:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800310c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003110:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003114:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003118:	f007 fbb2 	bl	800a880 <HAL_SPI_Init>
 800311c:	b900      	cbnz	r0, 8003120 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800311e:	bd08      	pop	{r3, pc}
 8003120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003124:	f7ff bdfe 	b.w	8002d24 <Error_Handler>
	...
 8003130:	2001cc68 	.word	0x2001cc68
 8003134:	40015000 	.word	0x40015000

08003138 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	2400      	movs	r4, #0
{
 800313c:	b0bb      	sub	sp, #236	; 0xec
 800313e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003140:	22c0      	movs	r2, #192	; 0xc0
 8003142:	4621      	mov	r1, r4
 8003144:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003146:	9408      	str	r4, [sp, #32]
 8003148:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800314c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003150:	f015 fd76 	bl	8018c40 <memset>
  if(spiHandle->Instance==SPI1)
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	4a70      	ldr	r2, [pc, #448]	; (8003318 <HAL_SPI_MspInit+0x1e0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 800315c:	4a6f      	ldr	r2, [pc, #444]	; (800331c <HAL_SPI_MspInit+0x1e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d071      	beq.n	8003246 <HAL_SPI_MspInit+0x10e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003162:	b03b      	add	sp, #236	; 0xec
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003166:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <HAL_SPI_MspInit+0x1e8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	a904      	add	r1, sp, #16
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800316a:	4e6e      	ldr	r6, [pc, #440]	; (8003324 <HAL_SPI_MspInit+0x1ec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800316c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003174:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003178:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800317c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003180:	9200      	str	r2, [sp, #0]
 8003182:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003190:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800319c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	4861      	ldr	r0, [pc, #388]	; (8003328 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a6:	2203      	movs	r2, #3
 80031a8:	2305      	movs	r3, #5
 80031aa:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f002 fdb5 	bl	8005d1c <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80031b2:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80031b4:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_SPI_MspInit+0x1f4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031b6:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80031b8:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80031ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80031be:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c4:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c6:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031c8:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80031ca:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80031cc:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031d0:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031d2:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031d6:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80031dc:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031de:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80031e0:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031e2:	f001 f8ef 	bl	80043c4 <HAL_DMA_Init>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	f040 808d 	bne.w	8003306 <HAL_SPI_MspInit+0x1ce>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80031ec:	4c50      	ldr	r4, [pc, #320]	; (8003330 <HAL_SPI_MspInit+0x1f8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80031ee:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80031f0:	4950      	ldr	r1, [pc, #320]	; (8003334 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80031f4:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80031fa:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031fc:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003200:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003204:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003206:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003208:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800320c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003210:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003212:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003214:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003216:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003218:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800321a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800321c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800321e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003220:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003222:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003226:	f001 f8cd 	bl	80043c4 <HAL_DMA_Init>
 800322a:	2800      	cmp	r0, #0
 800322c:	d168      	bne.n	8003300 <HAL_SPI_MspInit+0x1c8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2102      	movs	r1, #2
 8003232:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003234:	67ac      	str	r4, [r5, #120]	; 0x78
 8003236:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8003238:	f000 ff32 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800323c:	2023      	movs	r0, #35	; 0x23
 800323e:	f000 ff6d 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 8003242:	b03b      	add	sp, #236	; 0xec
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800324a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800324e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003252:	f004 fc35 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8003256:	2800      	cmp	r0, #0
 8003258:	d158      	bne.n	800330c <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800325e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003264:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003268:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800326a:	4833      	ldr	r0, [pc, #204]	; (8003338 <HAL_SPI_MspInit+0x200>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800326c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003270:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003274:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003278:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800327c:	9202      	str	r2, [sp, #8]
 800327e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003290:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003292:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003298:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	e9cd 1404 	strd	r1, r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032a2:	a904      	add	r1, sp, #16
 80032a4:	f002 fd3a 	bl	8005d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ac:	4822      	ldr	r0, [pc, #136]	; (8003338 <HAL_SPI_MspInit+0x200>)
 80032ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032b2:	9304      	str	r3, [sp, #16]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80032b4:	4c21      	ldr	r4, [pc, #132]	; (800333c <HAL_SPI_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032bc:	f002 fd2e 	bl	8005d1c <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <HAL_SPI_MspInit+0x208>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80032c2:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80032c4:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032c6:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80032c8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d4:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d8:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032dc:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032de:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80032e2:	f001 f86f 	bl	80043c4 <HAL_DMA_Init>
 80032e6:	b9a0      	cbnz	r0, 8003312 <HAL_SPI_MspInit+0x1da>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2104      	movs	r1, #4
 80032ec:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80032ee:	67ec      	str	r4, [r5, #124]	; 0x7c
 80032f0:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80032f2:	f000 fed5 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80032f6:	2055      	movs	r0, #85	; 0x55
 80032f8:	f000 ff10 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 80032fc:	b03b      	add	sp, #236	; 0xec
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003300:	f7ff fd10 	bl	8002d24 <Error_Handler>
 8003304:	e793      	b.n	800322e <HAL_SPI_MspInit+0xf6>
      Error_Handler();
 8003306:	f7ff fd0d 	bl	8002d24 <Error_Handler>
 800330a:	e76f      	b.n	80031ec <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 800330c:	f7ff fd0a 	bl	8002d24 <Error_Handler>
 8003310:	e7a3      	b.n	800325a <HAL_SPI_MspInit+0x122>
      Error_Handler();
 8003312:	f7ff fd07 	bl	8002d24 <Error_Handler>
 8003316:	e7e7      	b.n	80032e8 <HAL_SPI_MspInit+0x1b0>
 8003318:	40013000 	.word	0x40013000
 800331c:	40015000 	.word	0x40015000
 8003320:	58024400 	.word	0x58024400
 8003324:	2001ca74 	.word	0x2001ca74
 8003328:	58020000 	.word	0x58020000
 800332c:	40020070 	.word	0x40020070
 8003330:	2001caec 	.word	0x2001caec
 8003334:	40020088 	.word	0x40020088
 8003338:	58021400 	.word	0x58021400
 800333c:	2001cb64 	.word	0x2001cb64
 8003340:	40020058 	.word	0x40020058

08003344 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8003344:	e7fe      	b.n	8003344 <Default_Handler>
 8003346:	bf00      	nop

08003348 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8003348:	480f      	ldr	r0, [pc, #60]	; (8003388 <Reset_Handler+0x40>)
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <Reset_Handler+0x44>)
 800334c:	4290      	cmp	r0, r2
 800334e:	d003      	beq.n	8003358 <Reset_Handler+0x10>
		*pDest = *pSource;
 8003350:	1a12      	subs	r2, r2, r0
 8003352:	490f      	ldr	r1, [pc, #60]	; (8003390 <Reset_Handler+0x48>)
 8003354:	f015 fca0 	bl	8018c98 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8003358:	480e      	ldr	r0, [pc, #56]	; (8003394 <Reset_Handler+0x4c>)
 800335a:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <Reset_Handler+0x50>)
 800335c:	4290      	cmp	r0, r2
 800335e:	d003      	beq.n	8003368 <Reset_Handler+0x20>
		*pDest = 0;
 8003360:	1a12      	subs	r2, r2, r0
 8003362:	2100      	movs	r1, #0
 8003364:	f015 fc6c 	bl	8018c40 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <Reset_Handler+0x54>)
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <Reset_Handler+0x58>)
 800336c:	4290      	cmp	r0, r2
 800336e:	d003      	beq.n	8003378 <Reset_Handler+0x30>
		*pDest = *pSource;
 8003370:	1a12      	subs	r2, r2, r0
 8003372:	490c      	ldr	r1, [pc, #48]	; (80033a4 <Reset_Handler+0x5c>)
 8003374:	f015 fc90 	bl	8018c98 <memcpy>
	SystemInit();
 8003378:	f000 fd90 	bl	8003e9c <SystemInit>
	__libc_init_array();
 800337c:	f015 fc68 	bl	8018c50 <__libc_init_array>
	(void)main();
 8003380:	f7ff f818 	bl	80023b4 <main>
	for (;;) ;
 8003384:	e7fe      	b.n	8003384 <Reset_Handler+0x3c>
 8003386:	bf00      	nop
 8003388:	20000000 	.word	0x20000000
 800338c:	20000ba0 	.word	0x20000ba0
 8003390:	080273a8 	.word	0x080273a8
 8003394:	20000ba0 	.word	0x20000ba0
 8003398:	2001e0d0 	.word	0x2001e0d0
 800339c:	00000400 	.word	0x00000400
 80033a0:	0000a610 	.word	0x0000a610
 80033a4:	08027f48 	.word	0x08027f48

080033a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_MspInit+0x20>)
{
 80033aa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80033b0:	f042 0202 	orr.w	r2, r2, #2
 80033b4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80033b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c4:	b002      	add	sp, #8
 80033c6:	4770      	bx	lr
 80033c8:	58024400 	.word	0x58024400

080033cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <NMI_Handler>
 80033ce:	bf00      	nop

080033d0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <HardFault_Handler>
 80033d2:	bf00      	nop

080033d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <MemManage_Handler>
 80033d6:	bf00      	nop

080033d8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <BusFault_Handler>
 80033da:	bf00      	nop

080033dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <UsageFault_Handler>
 80033de:	bf00      	nop

080033e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <DebugMon_Handler>:
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <PendSV_Handler>:
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ec:	f000 be12 	b.w	8004014 <HAL_IncTick>

080033f0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80033f0:	4801      	ldr	r0, [pc, #4]	; (80033f8 <DMA1_Stream1_IRQHandler+0x8>)
 80033f2:	f002 b853 	b.w	800549c <HAL_DMA_IRQHandler>
 80033f6:	bf00      	nop
 80033f8:	2001c7d8 	.word	0x2001c7d8

080033fc <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80033fc:	4801      	ldr	r0, [pc, #4]	; (8003404 <DMA1_Stream2_IRQHandler+0x8>)
 80033fe:	f002 b84d 	b.w	800549c <HAL_DMA_IRQHandler>
 8003402:	bf00      	nop
 8003404:	2001c850 	.word	0x2001c850

08003408 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003408:	4801      	ldr	r0, [pc, #4]	; (8003410 <DMA1_Stream3_IRQHandler+0x8>)
 800340a:	f002 b847 	b.w	800549c <HAL_DMA_IRQHandler>
 800340e:	bf00      	nop
 8003410:	2001cb64 	.word	0x2001cb64

08003414 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <DMA1_Stream4_IRQHandler+0x8>)
 8003416:	f002 b841 	b.w	800549c <HAL_DMA_IRQHandler>
 800341a:	bf00      	nop
 800341c:	2001ca74 	.word	0x2001ca74

08003420 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <DMA1_Stream5_IRQHandler+0x8>)
 8003422:	f002 b83b 	b.w	800549c <HAL_DMA_IRQHandler>
 8003426:	bf00      	nop
 8003428:	2001caec 	.word	0x2001caec

0800342c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <I2C2_EV_IRQHandler+0x8>)
 800342e:	f003 b8b1 	b.w	8006594 <HAL_I2C_EV_IRQHandler>
 8003432:	bf00      	nop
 8003434:	20014490 	.word	0x20014490

08003438 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <I2C2_ER_IRQHandler+0x8>)
 800343a:	f003 ba23 	b.w	8006884 <HAL_I2C_ER_IRQHandler>
 800343e:	bf00      	nop
 8003440:	20014490 	.word	0x20014490

08003444 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <SPI1_IRQHandler+0x8>)
 8003446:	f007 be41 	b.w	800b0cc <HAL_SPI_IRQHandler>
 800344a:	bf00      	nop
 800344c:	2001cbe0 	.word	0x2001cbe0

08003450 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <SDMMC1_IRQHandler+0x8>)
 8003452:	f006 bfdd 	b.w	800a410 <HAL_SD_IRQHandler>
 8003456:	bf00      	nop
 8003458:	2001c9f8 	.word	0x2001c9f8

0800345c <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <SPI5_IRQHandler+0x8>)
 800345e:	f007 be35 	b.w	800b0cc <HAL_SPI_IRQHandler>
 8003462:	bf00      	nop
 8003464:	2001cc68 	.word	0x2001cc68

08003468 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);

			freqMult[i][v] = 1.0f;
 8003470:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
 8003474:	b087      	sub	sp, #28
 8003476:	2600      	movs	r6, #0
 8003478:	4be1      	ldr	r3, [pc, #900]	; (8003800 <audioInitSynth+0x398>)
 800347a:	f8df b46c 	ldr.w	fp, [pc, #1132]	; 80038e8 <audioInitSynth+0x480>
			tPBSaw_init(&saw[i][v], &leaf);
 800347e:	4ce1      	ldr	r4, [pc, #900]	; (8003804 <audioInitSynth+0x39c>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 8003480:	ed9f 9ae1 	vldr	s18, [pc, #900]	; 8003808 <audioInitSynth+0x3a0>
 8003484:	eddf bae1 	vldr	s23, [pc, #900]	; 800380c <audioInitSynth+0x3a4>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8003488:	ed9f bae1 	vldr	s22, [pc, #900]	; 8003810 <audioInitSynth+0x3a8>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800348c:	ed9f aae1 	vldr	s20, [pc, #900]	; 8003814 <audioInitSynth+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003490:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
 8003494:	4be0      	ldr	r3, [pc, #896]	; (8003818 <audioInitSynth+0x3b0>)
{
 8003496:	4635      	mov	r5, r6
 8003498:	f106 0818 	add.w	r8, r6, #24
			midiAdd[i][v] = 0.0f;
 800349c:	f04f 0a00 	mov.w	sl, #0
 80034a0:	eb03 0906 	add.w	r9, r3, r6
 80034a4:	4bdd      	ldr	r3, [pc, #884]	; (800381c <audioInitSynth+0x3b4>)
 80034a6:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
 80034a8:	4648      	mov	r0, r9
 80034aa:	4621      	mov	r1, r4
 80034ac:	f011 fad2 	bl	8014a54 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
 80034b0:	4638      	mov	r0, r7
 80034b2:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 80034b4:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
 80034b8:	f011 fa3e 	bl	8014938 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 80034bc:	4bd8      	ldr	r3, [pc, #864]	; (8003820 <audioInitSynth+0x3b8>)
 80034be:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 80034c0:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
 80034c2:	1958      	adds	r0, r3, r5
 80034c4:	f010 ffc8 	bl	8014458 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
 80034c8:	4bd6      	ldr	r3, [pc, #856]	; (8003824 <audioInitSynth+0x3bc>)
 80034ca:	4621      	mov	r1, r4
 80034cc:	1958      	adds	r0, r3, r5
 80034ce:	f011 f85b 	bl	8014588 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 80034d2:	4bd5      	ldr	r3, [pc, #852]	; (8003828 <audioInitSynth+0x3c0>)
 80034d4:	4621      	mov	r1, r4
 80034d6:	1958      	adds	r0, r3, r5
 80034d8:	f011 fb0c 	bl	8014af4 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 80034dc:	4bd3      	ldr	r3, [pc, #844]	; (800382c <audioInitSynth+0x3c4>)
 80034de:	4621      	mov	r1, r4
 80034e0:	1958      	adds	r0, r3, r5
 80034e2:	f011 f927 	bl	8014734 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 80034e6:	4bd2      	ldr	r3, [pc, #840]	; (8003830 <audioInitSynth+0x3c8>)
 80034e8:	eef0 0a49 	vmov.f32	s1, s18
 80034ec:	4621      	mov	r1, r4
 80034ee:	1958      	adds	r0, r3, r5
 80034f0:	eeb0 0a6b 	vmov.f32	s0, s23
 80034f4:	f00d fbc4 	bl	8010c80 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
 80034f8:	4bce      	ldr	r3, [pc, #824]	; (8003834 <audioInitSynth+0x3cc>)
 80034fa:	442b      	add	r3, r5
 80034fc:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
 8003500:	4bcd      	ldr	r3, [pc, #820]	; (8003838 <audioInitSynth+0x3d0>)
 8003502:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
 8003504:	3508      	adds	r5, #8
 8003506:	4545      	cmp	r5, r8
			midiAdd[i][v] = 0.0f;
 8003508:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
 800350c:	d1cc      	bne.n	80034a8 <audioInitSynth+0x40>
 800350e:	4635      	mov	r5, r6
 8003510:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003514:	eddf 8ac9 	vldr	s17, [pc, #804]	; 800383c <audioInitSynth+0x3d4>
 8003518:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8003840 <audioInitSynth+0x3d8>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800351c:	eddf 9ac9 	vldr	s19, [pc, #804]	; 8003844 <audioInitSynth+0x3dc>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003520:	4bc9      	ldr	r3, [pc, #804]	; (8003848 <audioInitSynth+0x3e0>)
 8003522:	eef0 0a68 	vmov.f32	s1, s17
 8003526:	eeb0 0a48 	vmov.f32	s0, s16
 800352a:	2101      	movs	r1, #1
 800352c:	1958      	adds	r0, r3, r5
 800352e:	4622      	mov	r2, r4
 8003530:	f00d ff00 	bl	8011334 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003534:	4bc5      	ldr	r3, [pc, #788]	; (800384c <audioInitSynth+0x3e4>)
 8003536:	eef0 0a68 	vmov.f32	s1, s17
 800353a:	4622      	mov	r2, r4
 800353c:	1958      	adds	r0, r3, r5
 800353e:	eeb0 0a48 	vmov.f32	s0, s16
 8003542:	2100      	movs	r1, #0
 8003544:	f00d fef6 	bl	8011334 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003548:	4bc1      	ldr	r3, [pc, #772]	; (8003850 <audioInitSynth+0x3e8>)
 800354a:	4622      	mov	r2, r4
 800354c:	eef0 0a68 	vmov.f32	s1, s17
 8003550:	1958      	adds	r0, r3, r5
 8003552:	eeb0 0a48 	vmov.f32	s0, s16
 8003556:	2102      	movs	r1, #2
 8003558:	f00d feec 	bl	8011334 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 800355c:	4bbd      	ldr	r3, [pc, #756]	; (8003854 <audioInitSynth+0x3ec>)
 800355e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003562:	4621      	mov	r1, r4
 8003564:	1958      	adds	r0, r3, r5
 8003566:	eeb0 0a48 	vmov.f32	s0, s16
 800356a:	f00f facb 	bl	8012b04 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 800356e:	4bba      	ldr	r3, [pc, #744]	; (8003858 <audioInitSynth+0x3f0>)
 8003570:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003574:	4621      	mov	r1, r4
 8003576:	1958      	adds	r0, r3, r5
 8003578:	eef0 0a4b 	vmov.f32	s1, s22
 800357c:	eeb0 0a48 	vmov.f32	s0, s16
 8003580:	f00f f902 	bl	8012788 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003584:	4bb5      	ldr	r3, [pc, #724]	; (800385c <audioInitSynth+0x3f4>)
 8003586:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800358a:	4621      	mov	r1, r4
 800358c:	1958      	adds	r0, r3, r5
 800358e:	eef0 0a69 	vmov.f32	s1, s19
 8003592:	eeb0 0a48 	vmov.f32	s0, s16
 8003596:	f00e fded 	bl	8012174 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800359a:	4bb1      	ldr	r3, [pc, #708]	; (8003860 <audioInitSynth+0x3f8>)
 800359c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035a0:	4621      	mov	r1, r4
 80035a2:	1958      	adds	r0, r3, r5
 80035a4:	eef0 0a69 	vmov.f32	s1, s19
 80035a8:	eeb0 0a48 	vmov.f32	s0, s16
 80035ac:	f00e ff56 	bl	801245c <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 80035b0:	4bac      	ldr	r3, [pc, #688]	; (8003864 <audioInitSynth+0x3fc>)
 80035b2:	4622      	mov	r2, r4
 80035b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035b8:	1958      	adds	r0, r3, r5
 80035ba:	eeb0 0a48 	vmov.f32	s0, s16
 80035be:	2104      	movs	r1, #4
 80035c0:	f00e fb32 	bl	8011c28 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 80035c4:	4ba8      	ldr	r3, [pc, #672]	; (8003868 <audioInitSynth+0x400>)
 80035c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035ca:	4621      	mov	r1, r4
 80035cc:	1958      	adds	r0, r3, r5
 80035ce:	eeb0 0a48 	vmov.f32	s0, s16
 80035d2:	f00f ff47 	bl	8013464 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80035d6:	4ba5      	ldr	r3, [pc, #660]	; (800386c <audioInitSynth+0x404>)
 80035d8:	eeb0 0a6b 	vmov.f32	s0, s23
 80035dc:	4621      	mov	r1, r4
 80035de:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 80035e0:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80035e2:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8003870 <audioInitSynth+0x408>
 80035e6:	f00d fb4b 	bl	8010c80 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80035ea:	42bd      	cmp	r5, r7
 80035ec:	d198      	bne.n	8003520 <audioInitSynth+0xb8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80035ee:	4ba1      	ldr	r3, [pc, #644]	; (8003874 <audioInitSynth+0x40c>)
 80035f0:	2500      	movs	r5, #0
 80035f2:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80035f6:	4ba0      	ldr	r3, [pc, #640]	; (8003878 <audioInitSynth+0x410>)
 80035f8:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80035fa:	eb08 0005 	add.w	r0, r8, r5
 80035fe:	4621      	mov	r1, r4
 8003600:	f011 fb6e 	bl	8014ce0 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003604:	1978      	adds	r0, r7, r5
 8003606:	4621      	mov	r1, r4
 8003608:	f011 fbb0 	bl	8014d6c <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 800360c:	4b9b      	ldr	r3, [pc, #620]	; (800387c <audioInitSynth+0x414>)
 800360e:	4621      	mov	r1, r4
 8003610:	1998      	adds	r0, r3, r6
 8003612:	4428      	add	r0, r5
 8003614:	f010 ff20 	bl	8014458 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003618:	4b99      	ldr	r3, [pc, #612]	; (8003880 <audioInitSynth+0x418>)
 800361a:	4621      	mov	r1, r4
 800361c:	1998      	adds	r0, r3, r6
 800361e:	4428      	add	r0, r5
 8003620:	f011 fd96 	bl	8015150 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8003624:	4b97      	ldr	r3, [pc, #604]	; (8003884 <audioInitSynth+0x41c>)
 8003626:	4621      	mov	r1, r4
 8003628:	1998      	adds	r0, r3, r6
 800362a:	4428      	add	r0, r5
 800362c:	f011 fdec 	bl	8015208 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003630:	4b95      	ldr	r3, [pc, #596]	; (8003888 <audioInitSynth+0x420>)
 8003632:	4621      	mov	r1, r4
 8003634:	1998      	adds	r0, r3, r6
 8003636:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 8003638:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 800363a:	f011 fcc5 	bl	8014fc8 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 800363e:	2d20      	cmp	r5, #32
 8003640:	d1db      	bne.n	80035fa <audioInitSynth+0x192>
 8003642:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003644:	eddf 8a91 	vldr	s17, [pc, #580]	; 800388c <audioInitSynth+0x424>
 8003648:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800364c:	ed9f 8a90 	vldr	s16, [pc, #576]	; 8003890 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003650:	4628      	mov	r0, r5
 8003652:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003656:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800365a:	4623      	mov	r3, r4
 800365c:	eef0 0a4a 	vmov.f32	s1, s20
 8003660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003664:	eeb0 0a68 	vmov.f32	s0, s17
 8003668:	498a      	ldr	r1, [pc, #552]	; (8003894 <audioInitSynth+0x42c>)
 800366a:	f00c fff5 	bl	8010658 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800366e:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 8003670:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8003672:	eeb0 0a48 	vmov.f32	s0, s16
 8003676:	f00d f89d 	bl	80107b4 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 800367a:	42bd      	cmp	r5, r7
 800367c:	d1e8      	bne.n	8003650 <audioInitSynth+0x1e8>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 800367e:	4b86      	ldr	r3, [pc, #536]	; (8003898 <audioInitSynth+0x430>)
 8003680:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003684:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003688:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800389c <audioInitSynth+0x434>
 800368c:	1998      	adds	r0, r3, r6
 800368e:	4621      	mov	r1, r4
 8003690:	f00e fd70 	bl	8012174 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003694:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <audioInitSynth+0x438>)
 8003696:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800369a:	4621      	mov	r1, r4
 800369c:	1998      	adds	r0, r3, r6
 800369e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80036a2:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80038a4 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80036a6:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 80036a8:	f00e fed8 	bl	801245c <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <audioInitSynth+0x440>)
 80036ae:	4a7f      	ldr	r2, [pc, #508]	; (80038ac <audioInitSynth+0x444>)
 80036b0:	eef0 0a4b 	vmov.f32	s1, s22
 80036b4:	eb03 0a06 	add.w	sl, r3, r6
 80036b8:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <audioInitSynth+0x448>)
 80036ba:	1990      	adds	r0, r2, r6
 80036bc:	eeb0 0a4a 	vmov.f32	s0, s20
 80036c0:	199f      	adds	r7, r3, r6
 80036c2:	f106 0320 	add.w	r3, r6, #32
 80036c6:	4621      	mov	r1, r4
 80036c8:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 80038b4 <audioInitSynth+0x44c>
 80036cc:	9304      	str	r3, [sp, #16]
 80036ce:	f00f f85b 	bl	8012788 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80036d2:	ed9f 8a79 	vldr	s16, [pc, #484]	; 80038b8 <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80036d6:	9605      	str	r6, [sp, #20]

	        //tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80036d8:	eddf 9a58 	vldr	s19, [pc, #352]	; 800383c <audioInitSynth+0x3d4>
 80036dc:	eddf 8a58 	vldr	s17, [pc, #352]	; 8003840 <audioInitSynth+0x3d8>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80036e0:	eddf aa58 	vldr	s21, [pc, #352]	; 8003844 <audioInitSynth+0x3dc>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80036e4:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
 80036e6:	4650      	mov	r0, sl
 80036e8:	4621      	mov	r1, r4
 80036ea:	f00c fd97 	bl	801021c <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <audioInitSynth+0x454>)
 80036f0:	4621      	mov	r1, r4
 80036f2:	4638      	mov	r0, r7
 80036f4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80036f8:	eb03 0905 	add.w	r9, r3, r5
 80036fc:	f00e f806 	bl	801170c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003700:	4638      	mov	r0, r7
 8003702:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003706:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800370a:	f00e f85f 	bl	80117cc <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <audioInitSynth+0x458>)
 8003710:	4621      	mov	r1, r4
 8003712:	4648      	mov	r0, r9
 8003714:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003718:	eb03 0805 	add.w	r8, r3, r5
 800371c:	f00d fff6 	bl	801170c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003720:	4648      	mov	r0, r9
 8003722:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003726:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003728:	f00e f850 	bl	80117cc <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 800372c:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <audioInitSynth+0x45c>)
 800372e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003732:	4621      	mov	r1, r4
 8003734:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003738:	4640      	mov	r0, r8
 800373a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800389c <audioInitSynth+0x434>
 800373e:	eb03 0905 	add.w	r9, r3, r5
 8003742:	f00e fd17 	bl	8012174 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003746:	4640      	mov	r0, r8
 8003748:	eeb0 0a48 	vmov.f32	s0, s16
 800374c:	f00e fd16 	bl	801217c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003750:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <audioInitSynth+0x460>)
 8003752:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003756:	4621      	mov	r1, r4
 8003758:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800375c:	4648      	mov	r0, r9
 800375e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80038a4 <audioInitSynth+0x43c>
 8003762:	eb03 0805 	add.w	r8, r3, r5
 8003766:	f00e fe79 	bl	801245c <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800376a:	4648      	mov	r0, r9
 800376c:	eeb0 0a48 	vmov.f32	s0, s16
 8003770:	f00e fe78 	bl	8012464 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 8003774:	4b55      	ldr	r3, [pc, #340]	; (80038cc <audioInitSynth+0x464>)
 8003776:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800377a:	4621      	mov	r1, r4
 800377c:	eb03 0905 	add.w	r9, r3, r5
 8003780:	eef0 0a4b 	vmov.f32	s1, s22
 8003784:	4640      	mov	r0, r8
 8003786:	eeb0 0a4a 	vmov.f32	s0, s20
 800378a:	f00e fffd 	bl	8012788 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800378e:	eeb0 0a48 	vmov.f32	s0, s16
 8003792:	4640      	mov	r0, r8
 8003794:	f00e fffc 	bl	8012790 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8003798:	4648      	mov	r0, r9
 800379a:	4621      	mov	r1, r4
 800379c:	f00c fdfa 	bl	8010394 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 80037a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037a4:	494a      	ldr	r1, [pc, #296]	; (80038d0 <audioInitSynth+0x468>)
 80037a6:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80037aa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80037ae:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80038d4 <audioInitSynth+0x46c>
 80037b2:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <audioInitSynth+0x470>)
 80037b4:	eb01 0805 	add.w	r8, r1, r5
 80037b8:	4648      	mov	r0, r9
 80037ba:	4948      	ldr	r1, [pc, #288]	; (80038dc <audioInitSynth+0x474>)
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80038e0 <audioInitSynth+0x478>
 80037c2:	f00c fe8f 	bl	80104e4 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037c6:	eeb0 0a48 	vmov.f32	s0, s16
 80037ca:	4648      	mov	r0, r9
 80037cc:	f00c feb0 	bl	8010530 <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 80037d0:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <audioInitSynth+0x47c>)
 80037d2:	4621      	mov	r1, r4
 80037d4:	4640      	mov	r0, r8
 80037d6:	eb03 0905 	add.w	r9, r3, r5
 80037da:	f010 fe3d 	bl	8014458 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037de:	eeb0 0a48 	vmov.f32	s0, s16
 80037e2:	4640      	mov	r0, r8
 80037e4:	f010 feb8 	bl	8014558 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 80037e8:	4621      	mov	r1, r4
 80037ea:	4648      	mov	r0, r9
 80037ec:	f010 fe34 	bl	8014458 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037f0:	4648      	mov	r0, r9
 80037f2:	eeb0 0a48 	vmov.f32	s0, s16
 80037f6:	f010 feaf 	bl	8014558 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 80037fa:	4640      	mov	r0, r8
 80037fc:	e07a      	b.n	80038f4 <audioInitSynth+0x48c>
 80037fe:	bf00      	nop
 8003800:	2001d118 	.word	0x2001d118
 8003804:	20005484 	.word	0x20005484
 8003808:	3ba3d70a 	.word	0x3ba3d70a
 800380c:	42800000 	.word	0x42800000
 8003810:	3ff33333 	.word	0x3ff33333
 8003814:	447a0000 	.word	0x447a0000
 8003818:	2001d644 	.word	0x2001d644
 800381c:	2001d628 	.word	0x2001d628
 8003820:	2001d700 	.word	0x2001d700
 8003824:	2001d8b0 	.word	0x2001d8b0
 8003828:	2001d65c 	.word	0x2001d65c
 800382c:	2001d718 	.word	0x2001d718
 8003830:	2001d5ec 	.word	0x2001d5ec
 8003834:	2001d170 	.word	0x2001d170
 8003838:	2001d45c 	.word	0x2001d45c
 800383c:	3f333333 	.word	0x3f333333
 8003840:	44fa0000 	.word	0x44fa0000
 8003844:	3f19999a 	.word	0x3f19999a
 8003848:	2001d34c 	.word	0x2001d34c
 800384c:	2001d1c8 	.word	0x2001d1c8
 8003850:	2001cebc 	.word	0x2001cebc
 8003854:	2001d0d4 	.word	0x2001d0d4
 8003858:	2001cea4 	.word	0x2001cea4
 800385c:	2001ce94 	.word	0x2001ce94
 8003860:	2001ce84 	.word	0x2001ce84
 8003864:	2001ce74 	.word	0x2001ce74
 8003868:	2001ce64 	.word	0x2001ce64
 800386c:	2001d138 	.word	0x2001d138
 8003870:	3c23d70a 	.word	0x3c23d70a
 8003874:	2001d29c 	.word	0x2001d29c
 8003878:	2001d27c 	.word	0x2001d27c
 800387c:	2001d2ec 	.word	0x2001d2ec
 8003880:	2001d32c 	.word	0x2001d32c
 8003884:	2001d30c 	.word	0x2001d30c
 8003888:	2001d2bc 	.word	0x2001d2bc
 800388c:	3dcccccd 	.word	0x3dcccccd
 8003890:	3f7fffac 	.word	0x3f7fffac
 8003894:	200013a8 	.word	0x200013a8
 8003898:	2001d4d0 	.word	0x2001d4d0
 800389c:	42a00000 	.word	0x42a00000
 80038a0:	2001d4d8 	.word	0x2001d4d8
 80038a4:	463b8000 	.word	0x463b8000
 80038a8:	2001cecc 	.word	0x2001cecc
 80038ac:	2001d4b4 	.word	0x2001d4b4
 80038b0:	2001cf2c 	.word	0x2001cf2c
 80038b4:	3f8b851f 	.word	0x3f8b851f
 80038b8:	47bb8000 	.word	0x47bb8000
 80038bc:	2001cf4c 	.word	0x2001cf4c
 80038c0:	2001d6c0 	.word	0x2001d6c0
 80038c4:	2001d6e0 	.word	0x2001d6e0
 80038c8:	2001ceec 	.word	0x2001ceec
 80038cc:	2001cf0c 	.word	0x2001cf0c
 80038d0:	2001d474 	.word	0x2001d474
 80038d4:	c2b40000 	.word	0xc2b40000
 80038d8:	30002000 	.word	0x30002000
 80038dc:	30012000 	.word	0x30012000
 80038e0:	3727c5ac 	.word	0x3727c5ac
 80038e4:	2001d494 	.word	0x2001d494
 80038e8:	2001d45c 	.word	0x2001d45c
 80038ec:	3e4ccccd 	.word	0x3e4ccccd
 80038f0:	3e638e39 	.word	0x3e638e39
 80038f4:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 80038ec <audioInitSynth+0x484>
 80038f8:	f010 fe10 	bl	801451c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 80038fc:	4648      	mov	r0, r9
 80038fe:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 80038f0 <audioInitSynth+0x488>
 8003902:	f010 fe0b 	bl	801451c <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003906:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <audioInitSynth+0x680>)
 8003908:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 800390c:	4622      	mov	r2, r4
 800390e:	eb03 0805 	add.w	r8, r3, r5
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <audioInitSynth+0x684>)
 8003914:	eddf 0a76 	vldr	s1, [pc, #472]	; 8003af0 <audioInitSynth+0x688>
 8003918:	2100      	movs	r1, #0
 800391a:	1958      	adds	r0, r3, r5
 800391c:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003af4 <audioInitSynth+0x68c>
 8003920:	f00c fe0a 	bl	8010538 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003924:	4b74      	ldr	r3, [pc, #464]	; (8003af8 <audioInitSynth+0x690>)
 8003926:	eef0 0a69 	vmov.f32	s1, s19
 800392a:	4622      	mov	r2, r4
 800392c:	2101      	movs	r1, #1
 800392e:	4640      	mov	r0, r8
 8003930:	eeb0 0a68 	vmov.f32	s0, s17
 8003934:	eb03 0905 	add.w	r9, r3, r5
 8003938:	f00d fcfc 	bl	8011334 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800393c:	4640      	mov	r0, r8
 800393e:	eeb0 0a48 	vmov.f32	s0, s16
 8003942:	f00d fed9 	bl	80116f8 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <audioInitSynth+0x694>)
 8003948:	eef0 0a69 	vmov.f32	s1, s19
 800394c:	4622      	mov	r2, r4
 800394e:	2100      	movs	r1, #0
 8003950:	4648      	mov	r0, r9
 8003952:	eeb0 0a68 	vmov.f32	s0, s17
 8003956:	eb03 0805 	add.w	r8, r3, r5
 800395a:	f00d fceb 	bl	8011334 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800395e:	4648      	mov	r0, r9
 8003960:	eeb0 0a48 	vmov.f32	s0, s16
 8003964:	f00d fec8 	bl	80116f8 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003968:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <audioInitSynth+0x698>)
 800396a:	4622      	mov	r2, r4
 800396c:	eef0 0a69 	vmov.f32	s1, s19
 8003970:	2102      	movs	r1, #2
 8003972:	4640      	mov	r0, r8
 8003974:	eeb0 0a68 	vmov.f32	s0, s17
 8003978:	eb03 0905 	add.w	r9, r3, r5
 800397c:	f00d fcda 	bl	8011334 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003980:	4640      	mov	r0, r8
 8003982:	eeb0 0a48 	vmov.f32	s0, s16
 8003986:	f00d feb7 	bl	80116f8 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <audioInitSynth+0x69c>)
 800398c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003990:	4621      	mov	r1, r4
 8003992:	4648      	mov	r0, r9
 8003994:	eeb0 0a68 	vmov.f32	s0, s17
 8003998:	eb03 0805 	add.w	r8, r3, r5
 800399c:	f00f f8b2 	bl	8012b04 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 80039a0:	4648      	mov	r0, r9
 80039a2:	eeb0 0a48 	vmov.f32	s0, s16
 80039a6:	f00f fd43 	bl	8013430 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <audioInitSynth+0x6a0>)
 80039ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80039b0:	eddf 0a56 	vldr	s1, [pc, #344]	; 8003b0c <audioInitSynth+0x6a4>
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	eeb0 0a68 	vmov.f32	s0, s17
 80039bc:	eb03 0905 	add.w	r9, r3, r5
 80039c0:	f00e fee2 	bl	8012788 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 80039c4:	4640      	mov	r0, r8
 80039c6:	eeb0 0a48 	vmov.f32	s0, s16
 80039ca:	f00e fee1 	bl	8012790 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80039ce:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <audioInitSynth+0x6a8>)
 80039d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80039d4:	4621      	mov	r1, r4
 80039d6:	eef0 0a6a 	vmov.f32	s1, s21
 80039da:	4648      	mov	r0, r9
 80039dc:	eeb0 0a68 	vmov.f32	s0, s17
 80039e0:	eb03 0805 	add.w	r8, r3, r5
 80039e4:	f00e fbc6 	bl	8012174 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 80039e8:	4648      	mov	r0, r9
 80039ea:	eeb0 0a48 	vmov.f32	s0, s16
 80039ee:	f00e fbc5 	bl	801217c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80039f2:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <audioInitSynth+0x6ac>)
 80039f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80039f8:	4621      	mov	r1, r4
 80039fa:	eef0 0a6a 	vmov.f32	s1, s21
 80039fe:	4640      	mov	r0, r8
 8003a00:	eeb0 0a68 	vmov.f32	s0, s17
 8003a04:	eb03 0905 	add.w	r9, r3, r5
 8003a08:	f00e fd28 	bl	801245c <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8003a12:	f00e fd27 	bl	8012464 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003a16:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <audioInitSynth+0x6b0>)
 8003a18:	4622      	mov	r2, r4
 8003a1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a1e:	eb03 0805 	add.w	r8, r3, r5
 8003a22:	2104      	movs	r1, #4
 8003a24:	eeb0 0a68 	vmov.f32	s0, s17
 8003a28:	4648      	mov	r0, r9
 8003a2a:	f00e f8fd 	bl	8011c28 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a2e:	eeb0 0a48 	vmov.f32	s0, s16
 8003a32:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
 8003a34:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a36:	f00e faeb 	bl	8012010 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003a3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a3e:	eeb0 0a68 	vmov.f32	s0, s17
 8003a42:	4621      	mov	r1, r4
 8003a44:	4640      	mov	r0, r8
 8003a46:	f00f fd0d 	bl	8013464 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a4a:	eeb0 0a48 	vmov.f32	s0, s16
 8003a4e:	4640      	mov	r0, r8
 8003a50:	f00f fed0 	bl	80137f4 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 8003a54:	42ae      	cmp	r6, r5
 8003a56:	f47f ae46 	bne.w	80036e6 <audioInitSynth+0x27e>
 8003a5a:	9e05      	ldr	r6, [sp, #20]
 8003a5c:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003a60:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8003b1c <audioInitSynth+0x6b4>
 8003a64:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003a66:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003a68:	eef0 0a49 	vmov.f32	s1, s18
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8003a72:	f00d f905 	bl	8010c80 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003a76:	45ab      	cmp	fp, r5
 8003a78:	d1f4      	bne.n	8003a64 <audioInitSynth+0x5fc>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003a7a:	9b02      	ldr	r3, [sp, #8]
 8003a7c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <audioInitSynth+0x6b8>)
 8003a82:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003a84:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003a86:	4827      	ldr	r0, [pc, #156]	; (8003b24 <audioInitSynth+0x6bc>)
 8003a88:	2102      	movs	r1, #2
 8003a8a:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003a8c:	9302      	str	r3, [sp, #8]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003a8e:	4438      	add	r0, r7
 8003a90:	9b03      	ldr	r3, [sp, #12]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003a92:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003a96:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <audioInitSynth+0x6c0>)
 8003aa0:	f7fc fed8 	bl	8000854 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 8003aa4:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <audioInitSynth+0x6c4>)
 8003aa6:	eb06 1346 	add.w	r3, r6, r6, lsl #5
 8003aaa:	2120      	movs	r1, #32
 8003aac:	19d0      	adds	r0, r2, r7
 8003aae:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <audioInitSynth+0x6c8>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	9201      	str	r2, [sp, #4]
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <audioInitSynth+0x6c0>)
 8003aba:	f7fc fe3f 	bl	800073c <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003abe:	491d      	ldr	r1, [pc, #116]	; (8003b34 <audioInitSynth+0x6cc>)
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003b38 <audioInitSynth+0x6d0>
 8003ac6:	1988      	adds	r0, r1, r6
 8003ac8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003b3c <audioInitSynth+0x6d4>
 8003acc:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003ace:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003ad0:	f00d fc30 	bl	8011334 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	b90b      	cbnz	r3, 8003adc <audioInitSynth+0x674>
 8003ad8:	9503      	str	r5, [sp, #12]
 8003ada:	e4db      	b.n	8003494 <audioInitSynth+0x2c>
	}

}
 8003adc:	b007      	add	sp, #28
 8003ade:	ecbd 8b0a 	vpop	{d8-d12}
 8003ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2001ce44 	.word	0x2001ce44
 8003aec:	2001d118 	.word	0x2001d118
 8003af0:	3c23d70a 	.word	0x3c23d70a
 8003af4:	3f7d70a4 	.word	0x3f7d70a4
 8003af8:	2001ce24 	.word	0x2001ce24
 8003afc:	2001cde4 	.word	0x2001cde4
 8003b00:	2001ce04 	.word	0x2001ce04
 8003b04:	2001cdc4 	.word	0x2001cdc4
 8003b08:	2001cda4 	.word	0x2001cda4
 8003b0c:	3fcccccd 	.word	0x3fcccccd
 8003b10:	2001cd84 	.word	0x2001cd84
 8003b14:	2001cd64 	.word	0x2001cd64
 8003b18:	2001cd44 	.word	0x2001cd44
 8003b1c:	00000000 	.word	0x00000000
 8003b20:	2001d1d8 	.word	0x2001d1d8
 8003b24:	2001d4f8 	.word	0x2001d4f8
 8003b28:	08024030 	.word	0x08024030
 8003b2c:	2001d4e0 	.word	0x2001d4e0
 8003b30:	2001cf6c 	.word	0x2001cf6c
 8003b34:	2001d160 	.word	0x2001d160
 8003b38:	3e99999a 	.word	0x3e99999a
 8003b3c:	46947000 	.word	0x46947000

08003b40 <audioSwitchToSynth>:
{

}

void  audioSwitchToSynth()
{
 8003b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <audioSwitchToSynth+0x3c>)
	for (int i = 0; i < 20; i++)
 8003b46:	2500      	movs	r5, #0
 8003b48:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8003b84 <audioSwitchToSynth+0x44>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
 8003b4c:	2601      	movs	r6, #1
 8003b4e:	f104 0750 	add.w	r7, r4, #80	; 0x50
{
 8003b52:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 8003b56:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003b80 <audioSwitchToSynth+0x40>
 8003b5a:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 8003b5c:	3404      	adds	r4, #4
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 8003b5e:	eeb0 0a48 	vmov.f32	s0, s16
 8003b62:	f00d f8dd 	bl	8010d20 <tExpSmooth_setFactor>
	for (int i = 0; i < 20; i++)
 8003b66:	42bc      	cmp	r4, r7
		knobFrozen[i] = 1;
 8003b68:	f808 6005 	strb.w	r6, [r8, r5]
	for (int i = 0; i < 20; i++)
 8003b6c:	f105 0501 	add.w	r5, r5, #1
 8003b70:	d1f3      	bne.n	8003b5a <audioSwitchToSynth+0x1a>
	}
}
 8003b72:	ecbd 8b02 	vpop	{d8}
 8003b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20005430 	.word	0x20005430
 8003b80:	3a83126f 	.word	0x3a83126f
 8003b84:	200053cc 	.word	0x200053cc

08003b88 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
 8003b88:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <changeOversampling+0x240>)
{
 8003b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8e:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
 8003b92:	681b      	ldr	r3, [r3, #0]
{
 8003b94:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
 8003b96:	4283      	cmp	r3, r0
{
 8003b98:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
 8003b9a:	f000 810c 	beq.w	8003db6 <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <changeOversampling+0x244>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8107 	beq.w	8003db6 <changeOversampling+0x22e>
 8003ba8:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003baa:	eddf 7a89 	vldr	s15, [pc, #548]	; 8003dd0 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003bae:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003bb0:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
 8003bb2:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003bb4:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003bb8:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003bba:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003bbe:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003bc0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003bc4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003bc8:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8003bcc:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
 8003bce:	4614      	mov	r4, r2
 8003bd0:	9904      	ldr	r1, [sp, #16]
 8003bd2:	9206      	str	r2, [sp, #24]
 8003bd4:	eb03 0a01 	add.w	sl, r3, r1
 8003bd8:	4b7f      	ldr	r3, [pc, #508]	; (8003dd8 <changeOversampling+0x250>)
 8003bda:	eb03 0902 	add.w	r9, r3, r2
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <changeOversampling+0x254>)
 8003be0:	eb03 0802 	add.w	r8, r3, r2
 8003be4:	4b7e      	ldr	r3, [pc, #504]	; (8003de0 <changeOversampling+0x258>)
 8003be6:	189f      	adds	r7, r3, r2
 8003be8:	4b7e      	ldr	r3, [pc, #504]	; (8003de4 <changeOversampling+0x25c>)
 8003bea:	189e      	adds	r6, r3, r2
 8003bec:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <changeOversampling+0x260>)
 8003bee:	189d      	adds	r5, r3, r2
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	; (8003dec <changeOversampling+0x264>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003bf6:	4b7e      	ldr	r3, [pc, #504]	; (8003df0 <changeOversampling+0x268>)
 8003bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8003bfc:	1918      	adds	r0, r3, r4
 8003bfe:	f00d fde5 	bl	80117cc <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 8003c02:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <changeOversampling+0x26c>)
 8003c04:	eeb0 0a48 	vmov.f32	s0, s16
 8003c08:	1918      	adds	r0, r3, r4
 8003c0a:	f00d fddf 	bl	80117cc <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 8003c0e:	4650      	mov	r0, sl
 8003c10:	eeb0 0a48 	vmov.f32	s0, s16
 8003c14:	f00e fab2 	bl	801217c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003c18:	f8da 3000 	ldr.w	r3, [sl]
 8003c1c:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
 8003c1e:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003c22:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003c26:	f00e faf7 	bl	8012218 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 8003c2a:	4648      	mov	r0, r9
 8003c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8003c30:	f00e fc18 	bl	8012464 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003c34:	f8d9 3000 	ldr.w	r3, [r9]
 8003c38:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
 8003c3a:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003c3e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003c42:	f00e fc5d 	bl	8012500 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 8003c46:	4640      	mov	r0, r8
 8003c48:	eeb0 0a48 	vmov.f32	s0, s16
 8003c4c:	f00e fda0 	bl	8012790 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003c50:	f8d8 3000 	ldr.w	r3, [r8]
 8003c54:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
 8003c56:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003c5a:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003c5e:	f00e fe89 	bl	8012974 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 8003c62:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <changeOversampling+0x270>)
 8003c64:	eeb0 0a48 	vmov.f32	s0, s16
 8003c68:	1918      	adds	r0, r3, r4
 8003c6a:	f00c fc61 	bl	8010530 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 8003c6e:	4b63      	ldr	r3, [pc, #396]	; (8003dfc <changeOversampling+0x274>)
 8003c70:	eeb0 0a48 	vmov.f32	s0, s16
 8003c74:	1918      	adds	r0, r3, r4
 8003c76:	f010 fc6f 	bl	8014558 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <changeOversampling+0x278>)
 8003c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8003c80:	1918      	adds	r0, r3, r4
 8003c82:	f010 fc69 	bl	8014558 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 8003c86:	4638      	mov	r0, r7
 8003c88:	eeb0 0a48 	vmov.f32	s0, s16
 8003c8c:	f00d fd34 	bl	80116f8 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
 8003c94:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003c96:	ed93 0a04 	vldr	s0, [r3, #16]
 8003c9a:	f00d fccd 	bl	8011638 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ca4:	f00d fd28 	bl	80116f8 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
 8003cac:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003cae:	ed93 0a04 	vldr	s0, [r3, #16]
 8003cb2:	f00d fcc1 	bl	8011638 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8003cbc:	f00d fd1c 	bl	80116f8 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
 8003cc4:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003cc6:	ed93 0a04 	vldr	s0, [r3, #16]
 8003cca:	f00d fcb5 	bl	8011638 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 8003cce:	4658      	mov	r0, fp
 8003cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8003cd4:	f00f fbac 	bl	8013430 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003cd8:	f8db 3000 	ldr.w	r3, [fp]
 8003cdc:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
 8003cde:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003ce2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <changeOversampling+0x27c>)
 8003ce8:	4423      	add	r3, r4
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	f00f fba0 	bl	8013430 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 8003cf0:	9b00      	ldr	r3, [sp, #0]
 8003cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f00e fd4a 	bl	8012790 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 8003cfc:	9b00      	ldr	r3, [sp, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <changeOversampling+0x27c>)
 8003d02:	591b      	ldr	r3, [r3, r4]
 8003d04:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003d08:	f00e fe34 	bl	8012974 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 8003d0c:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <changeOversampling+0x280>)
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <changeOversampling+0x284>)
 8003d10:	eeb0 0a48 	vmov.f32	s0, s16
 8003d14:	1911      	adds	r1, r2, r4
 8003d16:	1918      	adds	r0, r3, r4
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <changeOversampling+0x288>)
 8003d1a:	9103      	str	r1, [sp, #12]
 8003d1c:	493d      	ldr	r1, [pc, #244]	; (8003e14 <changeOversampling+0x28c>)
 8003d1e:	4423      	add	r3, r4
 8003d20:	190a      	adds	r2, r1, r4
 8003d22:	e9cd 0300 	strd	r0, r3, [sp]
 8003d26:	9202      	str	r2, [sp, #8]
 8003d28:	f00e fa28 	bl	801217c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <changeOversampling+0x284>)
 8003d2e:	9800      	ldr	r0, [sp, #0]
 8003d30:	591b      	ldr	r3, [r3, r4]
 8003d32:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003d36:	f00e fa6f 	bl	8012218 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 8003d3a:	9903      	ldr	r1, [sp, #12]
 8003d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8003d40:	4608      	mov	r0, r1
 8003d42:	9100      	str	r1, [sp, #0]
 8003d44:	f00e fb8e 	bl	8012464 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8003d48:	9900      	ldr	r1, [sp, #0]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <changeOversampling+0x280>)
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	5911      	ldr	r1, [r2, r4]
 8003d50:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
 8003d54:	f00e fbd4 	bl	8012500 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8003d58:	9a02      	ldr	r2, [sp, #8]
 8003d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8003d5e:	4610      	mov	r0, r2
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	f00e f955 	bl	8012010 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 8003d66:	492b      	ldr	r1, [pc, #172]	; (8003e14 <changeOversampling+0x28c>)
 8003d68:	9a00      	ldr	r2, [sp, #0]
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	590a      	ldr	r2, [r1, r4]
 8003d6e:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
 8003d72:	f00d ff5d 	bl	8011c30 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	eeb0 0a48 	vmov.f32	s0, s16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f00f fd38 	bl	80137f4 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003d84:	9b00      	ldr	r3, [sp, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <changeOversampling+0x288>)
 8003d8a:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d8c:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003d8e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003d92:	f00f fced 	bl	8013770 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	f47f af2c 	bne.w	8003bf6 <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003d9e:	3304      	adds	r3, #4
 8003da0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <changeOversampling+0x244>)
 8003da8:	3101      	adds	r1, #1
 8003daa:	3204      	adds	r2, #4
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	9105      	str	r1, [sp, #20]
 8003db0:	428b      	cmp	r3, r1
 8003db2:	f73f af0b 	bgt.w	8003bcc <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <changeOversampling+0x240>)
 8003db8:	9a07      	ldr	r2, [sp, #28]
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	b009      	add	sp, #36	; 0x24
 8003dbe:	ecbd 8b02 	vpop	{d8}
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2001d624 	.word	0x2001d624
 8003dcc:	20000694 	.word	0x20000694
 8003dd0:	473b8000 	.word	0x473b8000
 8003dd4:	2001d6a0 	.word	0x2001d6a0
 8003dd8:	2001d6e0 	.word	0x2001d6e0
 8003ddc:	2001ceec 	.word	0x2001ceec
 8003de0:	2001ce44 	.word	0x2001ce44
 8003de4:	2001ce24 	.word	0x2001ce24
 8003de8:	2001cde4 	.word	0x2001cde4
 8003dec:	2001ce04 	.word	0x2001ce04
 8003df0:	2001cf2c 	.word	0x2001cf2c
 8003df4:	2001cf4c 	.word	0x2001cf4c
 8003df8:	2001cf0c 	.word	0x2001cf0c
 8003dfc:	2001d474 	.word	0x2001d474
 8003e00:	2001d494 	.word	0x2001d494
 8003e04:	2001cdc4 	.word	0x2001cdc4
 8003e08:	2001cd84 	.word	0x2001cd84
 8003e0c:	2001cda4 	.word	0x2001cda4
 8003e10:	2001cd44 	.word	0x2001cd44
 8003e14:	2001cd64 	.word	0x2001cd64

08003e18 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 8003e18:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 8003e1a:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003e1e:	4d18      	ldr	r5, [pc, #96]	; (8003e80 <delayTick+0x68>)
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <delayTick+0x6c>)
 8003e22:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003e28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003e2c:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
 8003e30:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003e34:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
 8003e38:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e3e:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
 8003e42:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	f00f ff15 	bl	8013c78 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 8003e4e:	480f      	ldr	r0, [pc, #60]	; (8003e8c <delayTick+0x74>)
 8003e50:	4420      	add	r0, r4
 8003e52:	f00c fbd9 	bl	8010608 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8003e56:	480e      	ldr	r0, [pc, #56]	; (8003e90 <delayTick+0x78>)
 8003e58:	4420      	add	r0, r4
 8003e5a:	f00c f953 	bl	8010104 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003e5e:	480d      	ldr	r0, [pc, #52]	; (8003e94 <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8003e60:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003e64:	4420      	add	r0, r4
 8003e66:	f00d fb79 	bl	801155c <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003e6a:	480b      	ldr	r0, [pc, #44]	; (8003e98 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003e6c:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003e70:	4420      	add	r0, r4
 8003e72:	f00d fb73 	bl	801155c <tSVF_tick>
    sample = fast_tanh5(sample);
 8003e76:	f00f feff 	bl	8013c78 <fast_tanh5>
    delayFB[v][string] = sample;
 8003e7a:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	2001d0b4 	.word	0x2001d0b4
 8003e84:	2001d56c 	.word	0x2001d56c
 8003e88:	2001d5cc 	.word	0x2001d5cc
 8003e8c:	2001d118 	.word	0x2001d118
 8003e90:	2001d860 	.word	0x2001d860
 8003e94:	2001ce44 	.word	0x2001ce44
 8003e98:	2001ce24 	.word	0x2001ce24

08003e9c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e9c:	4927      	ldr	r1, [pc, #156]	; (8003f3c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e9e:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <SystemInit+0xa4>)
{
 8003ea0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ea2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d805      	bhi.n	8003ec4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	f043 0307 	orr.w	r3, r3, #7
 8003ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ec6:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003eca:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ecc:	481c      	ldr	r0, [pc, #112]	; (8003f40 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8003ece:	f041 0101 	orr.w	r1, r1, #1
 8003ed2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003ed4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	400a      	ands	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	d505      	bpl.n	8003eee <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ee2:	6803      	ldr	r3, [r0, #0]
 8003ee4:	f023 030f 	bic.w	r3, r3, #15
 8003ee8:	f043 0307 	orr.w	r3, r3, #7
 8003eec:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <SystemInit+0xa8>)
 8003ef0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ef2:	4916      	ldr	r1, [pc, #88]	; (8003f4c <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8003ef4:	4c16      	ldr	r4, [pc, #88]	; (8003f50 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8003ef6:	4817      	ldr	r0, [pc, #92]	; (8003f54 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8003ef8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003efa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003efc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003efe:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8003f00:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003f02:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f06:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f0a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f0e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f10:	4c11      	ldr	r4, [pc, #68]	; (8003f58 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8003f12:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f16:	4911      	ldr	r1, [pc, #68]	; (8003f5c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8003f18:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	4019      	ands	r1, r3
 8003f20:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003f24:	d203      	bcs.n	8003f2e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <SystemInit+0xc4>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <SystemInit+0xc8>)
 8003f30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00
 8003f40:	52002000 	.word	0x52002000
 8003f44:	58024400 	.word	0x58024400
 8003f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f4c:	01010280 	.word	0x01010280
 8003f50:	02020200 	.word	0x02020200
 8003f54:	01ff0000 	.word	0x01ff0000
 8003f58:	5c001000 	.word	0x5c001000
 8003f5c:	ffff0000 	.word	0xffff0000
 8003f60:	51008000 	.word	0x51008000
 8003f64:	52004000 	.word	0x52004000

08003f68 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_InitTick+0x40>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b90b      	cbnz	r3, 8003f72 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003f70:	4770      	bx	lr
{
 8003f72:	b510      	push	{r4, lr}
 8003f74:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_InitTick+0x44>)
 8003f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f80:	6810      	ldr	r0, [r2, #0]
 8003f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f86:	f000 f8d7 	bl	8004138 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8a:	2c0f      	cmp	r4, #15
 8003f8c:	d800      	bhi.n	8003f90 <HAL_InitTick+0x28>
 8003f8e:	b108      	cbz	r0, 8003f94 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003f90:	2001      	movs	r0, #1
}
 8003f92:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f94:	2200      	movs	r2, #0
 8003f96:	4621      	mov	r1, r4
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9c:	f000 f880 	bl	80040a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_InitTick+0x48>)
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	601c      	str	r4, [r3, #0]
}
 8003fa6:	bd10      	pop	{r4, pc}
 8003fa8:	20000b38 	.word	0x20000b38
 8003fac:	20000af0 	.word	0x20000af0
 8003fb0:	20000b3c 	.word	0x20000b3c

08003fb4 <HAL_Init>:
{
 8003fb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb8:	4c12      	ldr	r4, [pc, #72]	; (8004004 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fba:	f000 f85f 	bl	800407c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fbe:	f003 fa2d 	bl	800741c <HAL_RCC_GetSysClockFreq>
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_Init+0x54>)
 8003fc4:	4911      	ldr	r1, [pc, #68]	; (800400c <HAL_Init+0x58>)
 8003fc6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fc8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fca:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fce:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fd2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fd6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003fda:	490d      	ldr	r1, [pc, #52]	; (8004010 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fdc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fe0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fe2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003fe6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fe8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fea:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fec:	f7ff ffbc 	bl	8003f68 <HAL_InitTick>
 8003ff0:	b110      	cbz	r0, 8003ff8 <HAL_Init+0x44>
    return HAL_ERROR;
 8003ff2:	2401      	movs	r4, #1
}
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	4604      	mov	r4, r0
  HAL_MspInit();
 8003ffa:	f7ff f9d5 	bl	80033a8 <HAL_MspInit>
}
 8003ffe:	4620      	mov	r0, r4
 8004000:	bd10      	pop	{r4, pc}
 8004002:	bf00      	nop
 8004004:	20000af4 	.word	0x20000af4
 8004008:	58024400 	.word	0x58024400
 800400c:	0801bbb0 	.word	0x0801bbb0
 8004010:	20000af0 	.word	0x20000af0

08004014 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004014:	4a03      	ldr	r2, [pc, #12]	; (8004024 <HAL_IncTick+0x10>)
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_IncTick+0x14>)
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	440b      	add	r3, r1
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2001d8f4 	.word	0x2001d8f4
 8004028:	20000b38 	.word	0x20000b38

0800402c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800402c:	4b01      	ldr	r3, [pc, #4]	; (8004034 <HAL_GetTick+0x8>)
 800402e:	6818      	ldr	r0, [r3, #0]
}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2001d8f4 	.word	0x2001d8f4

08004038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff fff6 	bl	800402c <HAL_GetTick>
 8004040:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004042:	1c63      	adds	r3, r4, #1
 8004044:	d002      	beq.n	800404c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_Delay+0x20>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800404c:	f7ff ffee 	bl	800402c <HAL_GetTick>
 8004050:	1b43      	subs	r3, r0, r5
 8004052:	42a3      	cmp	r3, r4
 8004054:	d3fa      	bcc.n	800404c <HAL_Delay+0x14>
  {
  }
}
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	20000b38 	.word	0x20000b38

0800405c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <HAL_GetREVID+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
}
 8004060:	0c00      	lsrs	r0, r0, #16
 8004062:	4770      	bx	lr
 8004064:	5c001000 	.word	0x5c001000

08004068 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004068:	4a03      	ldr	r2, [pc, #12]	; (8004078 <HAL_SetFMCMemorySwappingConfig+0x10>)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004070:	4318      	orrs	r0, r3
 8004072:	6010      	str	r0, [r2, #0]
}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	52004000 	.word	0x52004000

0800407c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800407c:	4906      	ldr	r1, [pc, #24]	; (8004098 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800407e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004082:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004086:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004088:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004090:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8004092:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004094:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	05fa0000 	.word	0x05fa0000

080040a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a2:	b500      	push	{lr}
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040aa:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b2:	f1be 0f04 	cmp.w	lr, #4
 80040b6:	bf28      	it	cs
 80040b8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040bc:	f1bc 0f06 	cmp.w	ip, #6
 80040c0:	d91a      	bls.n	80040f8 <HAL_NVIC_SetPriority+0x58>
 80040c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80040c8:	fa0c fc03 	lsl.w	ip, ip, r3
 80040cc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80040d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80040da:	ea21 010c 	bic.w	r1, r1, ip
 80040de:	fa01 f103 	lsl.w	r1, r1, r3
 80040e2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80040e6:	db0a      	blt.n	80040fe <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e8:	0109      	lsls	r1, r1, #4
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_NVIC_SetPriority+0x74>)
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	4403      	add	r3, r0
 80040f0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80040f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80040f8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fa:	4613      	mov	r3, r2
 80040fc:	e7e8      	b.n	80040d0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fe:	f000 000f 	and.w	r0, r0, #15
 8004102:	0109      	lsls	r1, r1, #4
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <HAL_NVIC_SetPriority+0x78>)
 8004106:	b2c9      	uxtb	r1, r1
 8004108:	4403      	add	r3, r0
 800410a:	7619      	strb	r1, [r3, #24]
 800410c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	e000e100 	.word	0xe000e100
 8004118:	e000ecfc 	.word	0xe000ecfc

0800411c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800411c:	2800      	cmp	r0, #0
 800411e:	db07      	blt.n	8004130 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004120:	2301      	movs	r3, #1
 8004122:	f000 011f 	and.w	r1, r0, #31
 8004126:	4a03      	ldr	r2, [pc, #12]	; (8004134 <HAL_NVIC_EnableIRQ+0x18>)
 8004128:	0940      	lsrs	r0, r0, #5
 800412a:	408b      	lsls	r3, r1
 800412c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000e100 	.word	0xe000e100

08004138 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	1e43      	subs	r3, r0, #1
 800413a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413e:	d20c      	bcs.n	800415a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004140:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004144:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004146:	4906      	ldr	r1, [pc, #24]	; (8004160 <HAL_SYSTICK_Config+0x28>)
 8004148:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800414c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800414e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004154:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004158:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800415a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004164:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800416a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800416c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8004174:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_MPU_Enable+0x1c>)
 8004182:	f040 0001 	orr.w	r0, r0, #1
 8004186:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800418a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004196:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80041a0:	7843      	ldrb	r3, [r0, #1]
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_MPU_ConfigRegion+0x5c>)
 80041a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80041a8:	7803      	ldrb	r3, [r0, #0]
 80041aa:	b313      	cbz	r3, 80041f2 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80041ac:	6843      	ldr	r3, [r0, #4]
 80041ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041b2:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041b4:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041b8:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80041ba:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041bc:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80041c0:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041c4:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80041c6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041c8:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80041cc:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041d0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80041d4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041d6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80041da:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80041e2:	7a01      	ldrb	r1, [r0, #8]
 80041e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80041e8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041ec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80041f0:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80041f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80041f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80041fa:	4770      	bx	lr
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <DMA_CalcBaseAndBitshift+0xd0>)
{
 8004202:	4601      	mov	r1, r0
 8004204:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004206:	4e33      	ldr	r6, [pc, #204]	; (80042d4 <DMA_CalcBaseAndBitshift+0xd4>)
 8004208:	6802      	ldr	r2, [r0, #0]
 800420a:	4d33      	ldr	r5, [pc, #204]	; (80042d8 <DMA_CalcBaseAndBitshift+0xd8>)
 800420c:	42b2      	cmp	r2, r6
 800420e:	bf18      	it	ne
 8004210:	429a      	cmpne	r2, r3
 8004212:	4c32      	ldr	r4, [pc, #200]	; (80042dc <DMA_CalcBaseAndBitshift+0xdc>)
 8004214:	4832      	ldr	r0, [pc, #200]	; (80042e0 <DMA_CalcBaseAndBitshift+0xe0>)
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	42aa      	cmp	r2, r5
 800421e:	bf08      	it	eq
 8004220:	f043 0301 	orreq.w	r3, r3, #1
 8004224:	42a2      	cmp	r2, r4
 8004226:	bf08      	it	eq
 8004228:	f043 0301 	orreq.w	r3, r3, #1
 800422c:	3430      	adds	r4, #48	; 0x30
 800422e:	4282      	cmp	r2, r0
 8004230:	bf08      	it	eq
 8004232:	f043 0301 	orreq.w	r3, r3, #1
 8004236:	3030      	adds	r0, #48	; 0x30
 8004238:	42a2      	cmp	r2, r4
 800423a:	bf08      	it	eq
 800423c:	f043 0301 	orreq.w	r3, r3, #1
 8004240:	3430      	adds	r4, #48	; 0x30
 8004242:	4282      	cmp	r2, r0
 8004244:	bf08      	it	eq
 8004246:	f043 0301 	orreq.w	r3, r3, #1
 800424a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800424e:	42a2      	cmp	r2, r4
 8004250:	bf08      	it	eq
 8004252:	f043 0301 	orreq.w	r3, r3, #1
 8004256:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800425a:	4282      	cmp	r2, r0
 800425c:	bf08      	it	eq
 800425e:	f043 0301 	orreq.w	r3, r3, #1
 8004262:	3030      	adds	r0, #48	; 0x30
 8004264:	42a2      	cmp	r2, r4
 8004266:	bf08      	it	eq
 8004268:	f043 0301 	orreq.w	r3, r3, #1
 800426c:	3430      	adds	r4, #48	; 0x30
 800426e:	4282      	cmp	r2, r0
 8004270:	bf08      	it	eq
 8004272:	f043 0301 	orreq.w	r3, r3, #1
 8004276:	3030      	adds	r0, #48	; 0x30
 8004278:	42a2      	cmp	r2, r4
 800427a:	bf08      	it	eq
 800427c:	f043 0301 	orreq.w	r3, r3, #1
 8004280:	3430      	adds	r4, #48	; 0x30
 8004282:	4282      	cmp	r2, r0
 8004284:	bf08      	it	eq
 8004286:	f043 0301 	orreq.w	r3, r3, #1
 800428a:	3030      	adds	r0, #48	; 0x30
 800428c:	42a2      	cmp	r2, r4
 800428e:	bf08      	it	eq
 8004290:	f043 0301 	orreq.w	r3, r3, #1
 8004294:	4282      	cmp	r2, r0
 8004296:	bf08      	it	eq
 8004298:	f043 0301 	orreq.w	r3, r3, #1
 800429c:	b913      	cbnz	r3, 80042a4 <DMA_CalcBaseAndBitshift+0xa4>
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <DMA_CalcBaseAndBitshift+0xe4>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d112      	bne.n	80042ca <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042a4:	b2d3      	uxtb	r3, r2
 80042a6:	4810      	ldr	r0, [pc, #64]	; (80042e8 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042a8:	4c10      	ldr	r4, [pc, #64]	; (80042ec <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042aa:	3b10      	subs	r3, #16
 80042ac:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80042b0:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042b2:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042b6:	5c20      	ldrb	r0, [r4, r0]
 80042b8:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <DMA_CalcBaseAndBitshift+0xf0>)
 80042bc:	ea00 0002 	and.w	r0, r0, r2
 80042c0:	bf88      	it	hi
 80042c2:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042c4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80042c6:	bc70      	pop	{r4, r5, r6}
 80042c8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042ca:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80042ce:	e7f9      	b.n	80042c4 <DMA_CalcBaseAndBitshift+0xc4>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	400204b8 	.word	0x400204b8
 80042e8:	aaaaaaab 	.word	0xaaaaaaab
 80042ec:	0801bbc0 	.word	0x0801bbc0
 80042f0:	fffffc00 	.word	0xfffffc00

080042f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042f4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042f6:	4a27      	ldr	r2, [pc, #156]	; (8004394 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80042f8:	4927      	ldr	r1, [pc, #156]	; (8004398 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80042fa:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042fc:	4d27      	ldr	r5, [pc, #156]	; (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80042fe:	4c28      	ldr	r4, [pc, #160]	; (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004300:	42ab      	cmp	r3, r5
 8004302:	bf18      	it	ne
 8004304:	4293      	cmpne	r3, r2
 8004306:	bf0c      	ite	eq
 8004308:	2201      	moveq	r2, #1
 800430a:	2200      	movne	r2, #0
 800430c:	428b      	cmp	r3, r1
 800430e:	bf08      	it	eq
 8004310:	f042 0201 	orreq.w	r2, r2, #1
 8004314:	3128      	adds	r1, #40	; 0x28
 8004316:	42a3      	cmp	r3, r4
 8004318:	bf08      	it	eq
 800431a:	f042 0201 	orreq.w	r2, r2, #1
 800431e:	3428      	adds	r4, #40	; 0x28
 8004320:	428b      	cmp	r3, r1
 8004322:	bf08      	it	eq
 8004324:	f042 0201 	orreq.w	r2, r2, #1
 8004328:	3128      	adds	r1, #40	; 0x28
 800432a:	42a3      	cmp	r3, r4
 800432c:	bf08      	it	eq
 800432e:	f042 0201 	orreq.w	r2, r2, #1
 8004332:	428b      	cmp	r3, r1
 8004334:	bf08      	it	eq
 8004336:	f042 0201 	orreq.w	r2, r2, #1
 800433a:	b912      	cbnz	r2, 8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004342:	b2db      	uxtb	r3, r3
 8004344:	4918      	ldr	r1, [pc, #96]	; (80043a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004346:	4a19      	ldr	r2, [pc, #100]	; (80043ac <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004348:	3b08      	subs	r3, #8
 800434a:	4c19      	ldr	r4, [pc, #100]	; (80043b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800434c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004350:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004352:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004356:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800435a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004362:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004366:	bc30      	pop	{r4, r5}
 8004368:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800436a:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800436e:	4c12      	ldr	r4, [pc, #72]	; (80043b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8004370:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004372:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004374:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004378:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800437a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800437e:	d800      	bhi.n	8004382 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8004380:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004384:	f001 041f 	and.w	r4, r1, #31
 8004388:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800438a:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800438c:	40a3      	lsls	r3, r4
 800438e:	4c0c      	ldr	r4, [pc, #48]	; (80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004390:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004392:	e7e5      	b.n	8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8004394:	58025408 	.word	0x58025408
 8004398:	58025430 	.word	0x58025430
 800439c:	5802541c 	.word	0x5802541c
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025494 	.word	0x58025494
 80043a8:	cccccccd 	.word	0xcccccccd
 80043ac:	16009600 	.word	0x16009600
 80043b0:	58025880 	.word	0x58025880
 80043b4:	bffdfbf0 	.word	0xbffdfbf0
 80043b8:	aaaaaaab 	.word	0xaaaaaaab
 80043bc:	10008200 	.word	0x10008200
 80043c0:	40020880 	.word	0x40020880

080043c4 <HAL_DMA_Init>:
{
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7ff fe30 	bl	800402c <HAL_GetTick>
  if(hdma == NULL)
 80043cc:	2c00      	cmp	r4, #0
 80043ce:	f000 816a 	beq.w	80046a6 <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	4605      	mov	r5, r0
 80043d6:	4ba3      	ldr	r3, [pc, #652]	; (8004664 <HAL_DMA_Init+0x2a0>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d048      	beq.n	800446e <HAL_DMA_Init+0xaa>
 80043dc:	3318      	adds	r3, #24
 80043de:	429a      	cmp	r2, r3
 80043e0:	d045      	beq.n	800446e <HAL_DMA_Init+0xaa>
 80043e2:	3330      	adds	r3, #48	; 0x30
 80043e4:	49a0      	ldr	r1, [pc, #640]	; (8004668 <HAL_DMA_Init+0x2a4>)
 80043e6:	428a      	cmp	r2, r1
 80043e8:	bf18      	it	ne
 80043ea:	429a      	cmpne	r2, r3
 80043ec:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	428a      	cmp	r2, r1
 80043f8:	bf08      	it	eq
 80043fa:	f043 0301 	orreq.w	r3, r3, #1
 80043fe:	3118      	adds	r1, #24
 8004400:	428a      	cmp	r2, r1
 8004402:	bf08      	it	eq
 8004404:	f043 0301 	orreq.w	r3, r3, #1
 8004408:	3118      	adds	r1, #24
 800440a:	428a      	cmp	r2, r1
 800440c:	bf08      	it	eq
 800440e:	f043 0301 	orreq.w	r3, r3, #1
 8004412:	3118      	adds	r1, #24
 8004414:	428a      	cmp	r2, r1
 8004416:	bf08      	it	eq
 8004418:	f043 0301 	orreq.w	r3, r3, #1
 800441c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004420:	428a      	cmp	r2, r1
 8004422:	bf08      	it	eq
 8004424:	f043 0301 	orreq.w	r3, r3, #1
 8004428:	3118      	adds	r1, #24
 800442a:	428a      	cmp	r2, r1
 800442c:	bf08      	it	eq
 800442e:	f043 0301 	orreq.w	r3, r3, #1
 8004432:	3118      	adds	r1, #24
 8004434:	428a      	cmp	r2, r1
 8004436:	bf08      	it	eq
 8004438:	f043 0301 	orreq.w	r3, r3, #1
 800443c:	3118      	adds	r1, #24
 800443e:	428a      	cmp	r2, r1
 8004440:	bf08      	it	eq
 8004442:	f043 0301 	orreq.w	r3, r3, #1
 8004446:	3118      	adds	r1, #24
 8004448:	428a      	cmp	r2, r1
 800444a:	bf08      	it	eq
 800444c:	f043 0301 	orreq.w	r3, r3, #1
 8004450:	3118      	adds	r1, #24
 8004452:	428a      	cmp	r2, r1
 8004454:	bf08      	it	eq
 8004456:	f043 0301 	orreq.w	r3, r3, #1
 800445a:	3118      	adds	r1, #24
 800445c:	428a      	cmp	r2, r1
 800445e:	bf08      	it	eq
 8004460:	f043 0301 	orreq.w	r3, r3, #1
 8004464:	b91b      	cbnz	r3, 800446e <HAL_DMA_Init+0xaa>
 8004466:	4b81      	ldr	r3, [pc, #516]	; (800466c <HAL_DMA_Init+0x2a8>)
 8004468:	429a      	cmp	r2, r3
 800446a:	f040 8184 	bne.w	8004776 <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 800446e:	2302      	movs	r3, #2
 8004470:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004474:	2300      	movs	r3, #0
 8004476:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e005      	b.n	8004490 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004484:	f7ff fdd2 	bl	800402c <HAL_GetTick>
 8004488:	1b43      	subs	r3, r0, r5
 800448a:	2b05      	cmp	r3, #5
 800448c:	f200 80fe 	bhi.w	800468c <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	07d0      	lsls	r0, r2, #31
 8004496:	d4f5      	bmi.n	8004484 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8004498:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800449e:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80044a0:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a4:	430a      	orrs	r2, r1
 80044a6:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a8:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044aa:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ae:	69a1      	ldr	r1, [r4, #24]
 80044b0:	ea42 0201 	orr.w	r2, r2, r1
 80044b4:	69e1      	ldr	r1, [r4, #28]
 80044b6:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80044ba:	6a21      	ldr	r1, [r4, #32]
 80044bc:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c0:	496b      	ldr	r1, [pc, #428]	; (8004670 <HAL_DMA_Init+0x2ac>)
 80044c2:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 80044c6:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ca:	d103      	bne.n	80044d4 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044cc:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 80044d0:	4301      	orrs	r1, r0
 80044d2:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80044d4:	4867      	ldr	r0, [pc, #412]	; (8004674 <HAL_DMA_Init+0x2b0>)
 80044d6:	4968      	ldr	r1, [pc, #416]	; (8004678 <HAL_DMA_Init+0x2b4>)
 80044d8:	6800      	ldr	r0, [r0, #0]
 80044da:	4001      	ands	r1, r0
 80044dc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80044e0:	d30a      	bcc.n	80044f8 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80044e2:	6861      	ldr	r1, [r4, #4]
 80044e4:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 80044e8:	281f      	cmp	r0, #31
 80044ea:	f240 80d6 	bls.w	800469a <HAL_DMA_Init+0x2d6>
 80044ee:	394f      	subs	r1, #79	; 0x4f
 80044f0:	2903      	cmp	r1, #3
 80044f2:	d801      	bhi.n	80044f8 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80044f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044f8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044fa:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 80044fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044fe:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004500:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004502:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004506:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800450a:	d10e      	bne.n	800452a <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800450c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8004510:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004512:	b150      	cbz	r0, 800452a <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004514:	69a5      	ldr	r5, [r4, #24]
 8004516:	2d00      	cmp	r5, #0
 8004518:	f040 8107 	bne.w	800472a <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
 800451c:	2a01      	cmp	r2, #1
 800451e:	f000 8125 	beq.w	800476c <HAL_DMA_Init+0x3a8>
 8004522:	f032 0202 	bics.w	r2, r2, #2
 8004526:	f000 8108 	beq.w	800473a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800452a:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff fe67 	bl	8004200 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004532:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004534:	233f      	movs	r3, #63	; 0x3f
 8004536:	f002 021f 	and.w	r2, r2, #31
 800453a:	4093      	lsls	r3, r2
 800453c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_DMA_Init+0x2a0>)
 8004542:	484e      	ldr	r0, [pc, #312]	; (800467c <HAL_DMA_Init+0x2b8>)
 8004544:	4948      	ldr	r1, [pc, #288]	; (8004668 <HAL_DMA_Init+0x2a4>)
 8004546:	4282      	cmp	r2, r0
 8004548:	bf18      	it	ne
 800454a:	429a      	cmpne	r2, r3
 800454c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	428a      	cmp	r2, r1
 8004558:	bf08      	it	eq
 800455a:	f043 0301 	orreq.w	r3, r3, #1
 800455e:	3130      	adds	r1, #48	; 0x30
 8004560:	4282      	cmp	r2, r0
 8004562:	bf08      	it	eq
 8004564:	f043 0301 	orreq.w	r3, r3, #1
 8004568:	3030      	adds	r0, #48	; 0x30
 800456a:	428a      	cmp	r2, r1
 800456c:	bf08      	it	eq
 800456e:	f043 0301 	orreq.w	r3, r3, #1
 8004572:	3130      	adds	r1, #48	; 0x30
 8004574:	4282      	cmp	r2, r0
 8004576:	bf08      	it	eq
 8004578:	f043 0301 	orreq.w	r3, r3, #1
 800457c:	3030      	adds	r0, #48	; 0x30
 800457e:	428a      	cmp	r2, r1
 8004580:	bf08      	it	eq
 8004582:	f043 0301 	orreq.w	r3, r3, #1
 8004586:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800458a:	4282      	cmp	r2, r0
 800458c:	bf08      	it	eq
 800458e:	f043 0301 	orreq.w	r3, r3, #1
 8004592:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004596:	428a      	cmp	r2, r1
 8004598:	bf08      	it	eq
 800459a:	f043 0301 	orreq.w	r3, r3, #1
 800459e:	3130      	adds	r1, #48	; 0x30
 80045a0:	4282      	cmp	r2, r0
 80045a2:	bf08      	it	eq
 80045a4:	f043 0301 	orreq.w	r3, r3, #1
 80045a8:	3030      	adds	r0, #48	; 0x30
 80045aa:	428a      	cmp	r2, r1
 80045ac:	bf08      	it	eq
 80045ae:	f043 0301 	orreq.w	r3, r3, #1
 80045b2:	3130      	adds	r1, #48	; 0x30
 80045b4:	4282      	cmp	r2, r0
 80045b6:	bf08      	it	eq
 80045b8:	f043 0301 	orreq.w	r3, r3, #1
 80045bc:	3030      	adds	r0, #48	; 0x30
 80045be:	428a      	cmp	r2, r1
 80045c0:	bf08      	it	eq
 80045c2:	f043 0301 	orreq.w	r3, r3, #1
 80045c6:	3130      	adds	r1, #48	; 0x30
 80045c8:	4282      	cmp	r2, r0
 80045ca:	bf08      	it	eq
 80045cc:	f043 0301 	orreq.w	r3, r3, #1
 80045d0:	3030      	adds	r0, #48	; 0x30
 80045d2:	428a      	cmp	r2, r1
 80045d4:	bf08      	it	eq
 80045d6:	f043 0301 	orreq.w	r3, r3, #1
 80045da:	4929      	ldr	r1, [pc, #164]	; (8004680 <HAL_DMA_Init+0x2bc>)
 80045dc:	4282      	cmp	r2, r0
 80045de:	bf08      	it	eq
 80045e0:	f043 0301 	orreq.w	r3, r3, #1
 80045e4:	4827      	ldr	r0, [pc, #156]	; (8004684 <HAL_DMA_Init+0x2c0>)
 80045e6:	428a      	cmp	r2, r1
 80045e8:	bf08      	it	eq
 80045ea:	f043 0301 	orreq.w	r3, r3, #1
 80045ee:	3128      	adds	r1, #40	; 0x28
 80045f0:	4282      	cmp	r2, r0
 80045f2:	bf08      	it	eq
 80045f4:	f043 0301 	orreq.w	r3, r3, #1
 80045f8:	3028      	adds	r0, #40	; 0x28
 80045fa:	428a      	cmp	r2, r1
 80045fc:	bf08      	it	eq
 80045fe:	f043 0301 	orreq.w	r3, r3, #1
 8004602:	3128      	adds	r1, #40	; 0x28
 8004604:	4282      	cmp	r2, r0
 8004606:	bf08      	it	eq
 8004608:	f043 0301 	orreq.w	r3, r3, #1
 800460c:	3028      	adds	r0, #40	; 0x28
 800460e:	428a      	cmp	r2, r1
 8004610:	bf08      	it	eq
 8004612:	f043 0301 	orreq.w	r3, r3, #1
 8004616:	3128      	adds	r1, #40	; 0x28
 8004618:	4282      	cmp	r2, r0
 800461a:	bf08      	it	eq
 800461c:	f043 0301 	orreq.w	r3, r3, #1
 8004620:	428a      	cmp	r2, r1
 8004622:	bf08      	it	eq
 8004624:	f043 0301 	orreq.w	r3, r3, #1
 8004628:	b913      	cbnz	r3, 8004630 <HAL_DMA_Init+0x26c>
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <HAL_DMA_Init+0x2c4>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d113      	bne.n	8004658 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff fe5f 	bl	80042f4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d036      	beq.n	80046aa <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800463c:	7922      	ldrb	r2, [r4, #4]
 800463e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004640:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004642:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8004646:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004648:	6861      	ldr	r1, [r4, #4]
 800464a:	1e4b      	subs	r3, r1, #1
 800464c:	2b07      	cmp	r3, #7
 800464e:	d930      	bls.n	80046b2 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
 8004650:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004652:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004656:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004658:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800465a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800465e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	40020010 	.word	0x40020010
 8004668:	40020040 	.word	0x40020040
 800466c:	400204b8 	.word	0x400204b8
 8004670:	fe10803f 	.word	0xfe10803f
 8004674:	5c001000 	.word	0x5c001000
 8004678:	ffff0000 	.word	0xffff0000
 800467c:	40020028 	.word	0x40020028
 8004680:	58025408 	.word	0x58025408
 8004684:	5802541c 	.word	0x5802541c
 8004688:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800468e:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004690:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004692:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004698:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800469a:	496b      	ldr	r1, [pc, #428]	; (8004848 <HAL_DMA_Init+0x484>)
 800469c:	40c1      	lsrs	r1, r0
 800469e:	07c9      	lsls	r1, r1, #31
 80046a0:	f57f af2a 	bpl.w	80044f8 <HAL_DMA_Init+0x134>
 80046a4:	e726      	b.n	80044f4 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 80046a6:	2001      	movs	r0, #1
}
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046aa:	2300      	movs	r3, #0
 80046ac:	461a      	mov	r2, r3
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	e7c5      	b.n	800463e <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_DMA_Init+0x488>)
 80046b6:	4d66      	ldr	r5, [pc, #408]	; (8004850 <HAL_DMA_Init+0x48c>)
 80046b8:	42a8      	cmp	r0, r5
 80046ba:	bf18      	it	ne
 80046bc:	4290      	cmpne	r0, r2
 80046be:	f105 0514 	add.w	r5, r5, #20
 80046c2:	bf0c      	ite	eq
 80046c4:	2201      	moveq	r2, #1
 80046c6:	2200      	movne	r2, #0
 80046c8:	42a8      	cmp	r0, r5
 80046ca:	bf08      	it	eq
 80046cc:	f042 0201 	orreq.w	r2, r2, #1
 80046d0:	3514      	adds	r5, #20
 80046d2:	42a8      	cmp	r0, r5
 80046d4:	bf08      	it	eq
 80046d6:	f042 0201 	orreq.w	r2, r2, #1
 80046da:	3514      	adds	r5, #20
 80046dc:	42a8      	cmp	r0, r5
 80046de:	bf08      	it	eq
 80046e0:	f042 0201 	orreq.w	r2, r2, #1
 80046e4:	3514      	adds	r5, #20
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	bf08      	it	eq
 80046ea:	f042 0201 	orreq.w	r2, r2, #1
 80046ee:	3514      	adds	r5, #20
 80046f0:	42a8      	cmp	r0, r5
 80046f2:	bf08      	it	eq
 80046f4:	f042 0201 	orreq.w	r2, r2, #1
 80046f8:	b93a      	cbnz	r2, 800470a <HAL_DMA_Init+0x346>
 80046fa:	4a56      	ldr	r2, [pc, #344]	; (8004854 <HAL_DMA_Init+0x490>)
 80046fc:	4290      	cmp	r0, r2
 80046fe:	d004      	beq.n	800470a <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004700:	4a55      	ldr	r2, [pc, #340]	; (8004858 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004702:	4856      	ldr	r0, [pc, #344]	; (800485c <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004704:	440a      	add	r2, r1
 8004706:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004708:	e003      	b.n	8004712 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800470a:	4a55      	ldr	r2, [pc, #340]	; (8004860 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800470c:	4855      	ldr	r0, [pc, #340]	; (8004864 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800470e:	440a      	add	r2, r1
 8004710:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004718:	2100      	movs	r1, #0
 800471a:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800471e:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004720:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004722:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	e796      	b.n	8004658 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800472a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800472e:	d00e      	beq.n	800474e <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
 8004730:	2a02      	cmp	r2, #2
 8004732:	d905      	bls.n	8004740 <HAL_DMA_Init+0x37c>
 8004734:	2a03      	cmp	r2, #3
 8004736:	f47f aef8 	bne.w	800452a <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473a:	01c2      	lsls	r2, r0, #7
 800473c:	f57f aef5 	bpl.w	800452a <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8004740:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004742:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004744:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004746:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004748:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800474c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 800474e:	2a03      	cmp	r2, #3
 8004750:	f63f aeeb 	bhi.w	800452a <HAL_DMA_Init+0x166>
 8004754:	a501      	add	r5, pc, #4	; (adr r5, 800475c <HAL_DMA_Init+0x398>)
 8004756:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004741 	.word	0x08004741
 8004760:	0800473b 	.word	0x0800473b
 8004764:	08004741 	.word	0x08004741
 8004768:	0800476d 	.word	0x0800476d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800476c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004770:	f47f aedb 	bne.w	800452a <HAL_DMA_Init+0x166>
 8004774:	e7e4      	b.n	8004740 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <HAL_DMA_Init+0x488>)
 8004778:	4835      	ldr	r0, [pc, #212]	; (8004850 <HAL_DMA_Init+0x48c>)
 800477a:	493b      	ldr	r1, [pc, #236]	; (8004868 <HAL_DMA_Init+0x4a4>)
 800477c:	4282      	cmp	r2, r0
 800477e:	bf18      	it	ne
 8004780:	429a      	cmpne	r2, r3
 8004782:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	428a      	cmp	r2, r1
 800478e:	bf08      	it	eq
 8004790:	f043 0301 	orreq.w	r3, r3, #1
 8004794:	3128      	adds	r1, #40	; 0x28
 8004796:	4282      	cmp	r2, r0
 8004798:	bf08      	it	eq
 800479a:	f043 0301 	orreq.w	r3, r3, #1
 800479e:	3028      	adds	r0, #40	; 0x28
 80047a0:	428a      	cmp	r2, r1
 80047a2:	bf08      	it	eq
 80047a4:	f043 0301 	orreq.w	r3, r3, #1
 80047a8:	3128      	adds	r1, #40	; 0x28
 80047aa:	4282      	cmp	r2, r0
 80047ac:	bf08      	it	eq
 80047ae:	f043 0301 	orreq.w	r3, r3, #1
 80047b2:	428a      	cmp	r2, r1
 80047b4:	bf08      	it	eq
 80047b6:	f043 0301 	orreq.w	r3, r3, #1
 80047ba:	b913      	cbnz	r3, 80047c2 <HAL_DMA_Init+0x3fe>
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_DMA_Init+0x490>)
 80047be:	429a      	cmp	r2, r3
 80047c0:	d13a      	bne.n	8004838 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
 80047c2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c4:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047c6:	4929      	ldr	r1, [pc, #164]	; (800486c <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80047cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047d0:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047d2:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047d4:	68a3      	ldr	r3, [r4, #8]
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d02c      	beq.n	8004834 <HAL_DMA_Init+0x470>
 80047da:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047e6:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047f0:	6965      	ldr	r5, [r4, #20]
 80047f2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047f6:	69a5      	ldr	r5, [r4, #24]
 80047f8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047fc:	69e5      	ldr	r5, [r4, #28]
 80047fe:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004802:	6a25      	ldr	r5, [r4, #32]
 8004804:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8004808:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800480a:	4919      	ldr	r1, [pc, #100]	; (8004870 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800480c:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004810:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004812:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	4411      	add	r1, r2
 8004818:	fba3 2301 	umull	r2, r3, r3, r1
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004822:	f7ff fced 	bl	8004200 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004826:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004828:	2301      	movs	r3, #1
 800482a:	f002 021f 	and.w	r2, r2, #31
 800482e:	4093      	lsls	r3, r2
 8004830:	6043      	str	r3, [r0, #4]
 8004832:	e684      	b.n	800453e <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004834:	2010      	movs	r0, #16
 8004836:	e7d6      	b.n	80047e6 <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004838:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800483a:	2303      	movs	r3, #3
    return HAL_ERROR;
 800483c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800483e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004840:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	c3c0003f 	.word	0xc3c0003f
 800484c:	58025408 	.word	0x58025408
 8004850:	5802541c 	.word	0x5802541c
 8004854:	58025494 	.word	0x58025494
 8004858:	1000823f 	.word	0x1000823f
 800485c:	40020940 	.word	0x40020940
 8004860:	1600963f 	.word	0x1600963f
 8004864:	58025940 	.word	0x58025940
 8004868:	58025430 	.word	0x58025430
 800486c:	fffe000f 	.word	0xfffe000f
 8004870:	a7fdabf8 	.word	0xa7fdabf8
 8004874:	cccccccd 	.word	0xcccccccd

08004878 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004878:	2800      	cmp	r0, #0
 800487a:	f000 8270 	beq.w	8004d5e <HAL_DMA_Start_IT+0x4e6>
 800487e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8004880:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004884:	2801      	cmp	r0, #1
 8004886:	f000 826c 	beq.w	8004d62 <HAL_DMA_Start_IT+0x4ea>
 800488a:	2001      	movs	r0, #1
{
 800488c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 800488e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004892:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004896:	4284      	cmp	r4, r0
 8004898:	d008      	beq.n	80048ac <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800489a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800489e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048a0:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80048a4:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80048a8:	bc70      	pop	{r4, r5, r6}
 80048aa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ac:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80048ae:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b2:	4ea2      	ldr	r6, [pc, #648]	; (8004b3c <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80048b4:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b8:	2000      	movs	r0, #0
 80048ba:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	f020 0001 	bic.w	r0, r0, #1
 80048c4:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048c6:	489e      	ldr	r0, [pc, #632]	; (8004b40 <HAL_DMA_Start_IT+0x2c8>)
 80048c8:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048cc:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048d0:	42b4      	cmp	r4, r6
 80048d2:	bf18      	it	ne
 80048d4:	4284      	cmpne	r4, r0
 80048d6:	f106 0618 	add.w	r6, r6, #24
 80048da:	bf0c      	ite	eq
 80048dc:	2001      	moveq	r0, #1
 80048de:	2000      	movne	r0, #0
 80048e0:	42b4      	cmp	r4, r6
 80048e2:	bf08      	it	eq
 80048e4:	f040 0001 	orreq.w	r0, r0, #1
 80048e8:	3618      	adds	r6, #24
 80048ea:	42b4      	cmp	r4, r6
 80048ec:	bf08      	it	eq
 80048ee:	f040 0001 	orreq.w	r0, r0, #1
 80048f2:	3618      	adds	r6, #24
 80048f4:	42b4      	cmp	r4, r6
 80048f6:	bf08      	it	eq
 80048f8:	f040 0001 	orreq.w	r0, r0, #1
 80048fc:	3618      	adds	r6, #24
 80048fe:	42b4      	cmp	r4, r6
 8004900:	bf08      	it	eq
 8004902:	f040 0001 	orreq.w	r0, r0, #1
 8004906:	3618      	adds	r6, #24
 8004908:	42b4      	cmp	r4, r6
 800490a:	bf08      	it	eq
 800490c:	f040 0001 	orreq.w	r0, r0, #1
 8004910:	3618      	adds	r6, #24
 8004912:	42b4      	cmp	r4, r6
 8004914:	bf08      	it	eq
 8004916:	f040 0001 	orreq.w	r0, r0, #1
 800491a:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800491e:	42b4      	cmp	r4, r6
 8004920:	bf08      	it	eq
 8004922:	f040 0001 	orreq.w	r0, r0, #1
 8004926:	3618      	adds	r6, #24
 8004928:	42b4      	cmp	r4, r6
 800492a:	bf08      	it	eq
 800492c:	f040 0001 	orreq.w	r0, r0, #1
 8004930:	3618      	adds	r6, #24
 8004932:	42b4      	cmp	r4, r6
 8004934:	bf08      	it	eq
 8004936:	f040 0001 	orreq.w	r0, r0, #1
 800493a:	3618      	adds	r6, #24
 800493c:	42b4      	cmp	r4, r6
 800493e:	bf08      	it	eq
 8004940:	f040 0001 	orreq.w	r0, r0, #1
 8004944:	3618      	adds	r6, #24
 8004946:	42b4      	cmp	r4, r6
 8004948:	bf08      	it	eq
 800494a:	f040 0001 	orreq.w	r0, r0, #1
 800494e:	3618      	adds	r6, #24
 8004950:	42b4      	cmp	r4, r6
 8004952:	bf08      	it	eq
 8004954:	f040 0001 	orreq.w	r0, r0, #1
 8004958:	3618      	adds	r6, #24
 800495a:	42b4      	cmp	r4, r6
 800495c:	bf08      	it	eq
 800495e:	f040 0001 	orreq.w	r0, r0, #1
 8004962:	3618      	adds	r6, #24
 8004964:	42b4      	cmp	r4, r6
 8004966:	bf08      	it	eq
 8004968:	f040 0001 	orreq.w	r0, r0, #1
 800496c:	4e75      	ldr	r6, [pc, #468]	; (8004b44 <HAL_DMA_Start_IT+0x2cc>)
 800496e:	42b4      	cmp	r4, r6
 8004970:	bf08      	it	eq
 8004972:	f040 0001 	orreq.w	r0, r0, #1
 8004976:	3614      	adds	r6, #20
 8004978:	42b4      	cmp	r4, r6
 800497a:	bf08      	it	eq
 800497c:	f040 0001 	orreq.w	r0, r0, #1
 8004980:	3614      	adds	r6, #20
 8004982:	42b4      	cmp	r4, r6
 8004984:	bf08      	it	eq
 8004986:	f040 0001 	orreq.w	r0, r0, #1
 800498a:	3614      	adds	r6, #20
 800498c:	42b4      	cmp	r4, r6
 800498e:	bf08      	it	eq
 8004990:	f040 0001 	orreq.w	r0, r0, #1
 8004994:	3614      	adds	r6, #20
 8004996:	42b4      	cmp	r4, r6
 8004998:	bf08      	it	eq
 800499a:	f040 0001 	orreq.w	r0, r0, #1
 800499e:	3614      	adds	r6, #20
 80049a0:	42b4      	cmp	r4, r6
 80049a2:	bf08      	it	eq
 80049a4:	f040 0001 	orreq.w	r0, r0, #1
 80049a8:	3614      	adds	r6, #20
 80049aa:	42b4      	cmp	r4, r6
 80049ac:	bf08      	it	eq
 80049ae:	f040 0001 	orreq.w	r0, r0, #1
 80049b2:	b910      	cbnz	r0, 80049ba <HAL_DMA_Start_IT+0x142>
 80049b4:	4864      	ldr	r0, [pc, #400]	; (8004b48 <HAL_DMA_Start_IT+0x2d0>)
 80049b6:	4284      	cmp	r4, r0
 80049b8:	d10a      	bne.n	80049d0 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ba:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 80049be:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80049c0:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 80049c4:	b110      	cbz	r0, 80049cc <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c6:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 80049ca:	6044      	str	r4, [r0, #4]
 80049cc:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049d0:	485b      	ldr	r0, [pc, #364]	; (8004b40 <HAL_DMA_Start_IT+0x2c8>)
 80049d2:	4e5a      	ldr	r6, [pc, #360]	; (8004b3c <HAL_DMA_Start_IT+0x2c4>)
 80049d4:	42b4      	cmp	r4, r6
 80049d6:	bf18      	it	ne
 80049d8:	4284      	cmpne	r4, r0
 80049da:	f106 0618 	add.w	r6, r6, #24
 80049de:	bf0c      	ite	eq
 80049e0:	2001      	moveq	r0, #1
 80049e2:	2000      	movne	r0, #0
 80049e4:	42b4      	cmp	r4, r6
 80049e6:	bf08      	it	eq
 80049e8:	f040 0001 	orreq.w	r0, r0, #1
 80049ec:	3618      	adds	r6, #24
 80049ee:	42b4      	cmp	r4, r6
 80049f0:	bf08      	it	eq
 80049f2:	f040 0001 	orreq.w	r0, r0, #1
 80049f6:	3618      	adds	r6, #24
 80049f8:	42b4      	cmp	r4, r6
 80049fa:	bf08      	it	eq
 80049fc:	f040 0001 	orreq.w	r0, r0, #1
 8004a00:	3618      	adds	r6, #24
 8004a02:	42b4      	cmp	r4, r6
 8004a04:	bf08      	it	eq
 8004a06:	f040 0001 	orreq.w	r0, r0, #1
 8004a0a:	3618      	adds	r6, #24
 8004a0c:	42b4      	cmp	r4, r6
 8004a0e:	bf08      	it	eq
 8004a10:	f040 0001 	orreq.w	r0, r0, #1
 8004a14:	3618      	adds	r6, #24
 8004a16:	42b4      	cmp	r4, r6
 8004a18:	bf08      	it	eq
 8004a1a:	f040 0001 	orreq.w	r0, r0, #1
 8004a1e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004a22:	42b4      	cmp	r4, r6
 8004a24:	bf08      	it	eq
 8004a26:	f040 0001 	orreq.w	r0, r0, #1
 8004a2a:	3618      	adds	r6, #24
 8004a2c:	42b4      	cmp	r4, r6
 8004a2e:	bf08      	it	eq
 8004a30:	f040 0001 	orreq.w	r0, r0, #1
 8004a34:	3618      	adds	r6, #24
 8004a36:	42b4      	cmp	r4, r6
 8004a38:	bf08      	it	eq
 8004a3a:	f040 0001 	orreq.w	r0, r0, #1
 8004a3e:	3618      	adds	r6, #24
 8004a40:	42b4      	cmp	r4, r6
 8004a42:	bf08      	it	eq
 8004a44:	f040 0001 	orreq.w	r0, r0, #1
 8004a48:	3618      	adds	r6, #24
 8004a4a:	42b4      	cmp	r4, r6
 8004a4c:	bf08      	it	eq
 8004a4e:	f040 0001 	orreq.w	r0, r0, #1
 8004a52:	3618      	adds	r6, #24
 8004a54:	42b4      	cmp	r4, r6
 8004a56:	bf08      	it	eq
 8004a58:	f040 0001 	orreq.w	r0, r0, #1
 8004a5c:	3618      	adds	r6, #24
 8004a5e:	42b4      	cmp	r4, r6
 8004a60:	bf08      	it	eq
 8004a62:	f040 0001 	orreq.w	r0, r0, #1
 8004a66:	b918      	cbnz	r0, 8004a70 <HAL_DMA_Start_IT+0x1f8>
 8004a68:	4838      	ldr	r0, [pc, #224]	; (8004b4c <HAL_DMA_Start_IT+0x2d4>)
 8004a6a:	4284      	cmp	r4, r0
 8004a6c:	f040 817b 	bne.w	8004d66 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a70:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004a74:	f000 041f 	and.w	r4, r0, #31
 8004a78:	203f      	movs	r0, #63	; 0x3f
 8004a7a:	40a0      	lsls	r0, r4
 8004a7c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a7e:	f8dc 4000 	ldr.w	r4, [ip]
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004a88:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a8a:	f8dc 0000 	ldr.w	r0, [ip]
 8004a8e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a90:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004a94:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a96:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9a:	f000 815b 	beq.w	8004d54 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a9e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004aa0:	f8dc 3000 	ldr.w	r3, [ip]
 8004aa4:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa6:	f8dc 4000 	ldr.w	r4, [ip]
 8004aaa:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_DMA_Start_IT+0x2c8>)
 8004aac:	4923      	ldr	r1, [pc, #140]	; (8004b3c <HAL_DMA_Start_IT+0x2c4>)
 8004aae:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <HAL_DMA_Start_IT+0x2d8>)
 8004ab0:	428c      	cmp	r4, r1
 8004ab2:	bf18      	it	ne
 8004ab4:	429c      	cmpne	r4, r3
 8004ab6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	4294      	cmp	r4, r2
 8004ac2:	bf08      	it	eq
 8004ac4:	f043 0301 	orreq.w	r3, r3, #1
 8004ac8:	3230      	adds	r2, #48	; 0x30
 8004aca:	428c      	cmp	r4, r1
 8004acc:	bf08      	it	eq
 8004ace:	f043 0301 	orreq.w	r3, r3, #1
 8004ad2:	3130      	adds	r1, #48	; 0x30
 8004ad4:	4294      	cmp	r4, r2
 8004ad6:	bf08      	it	eq
 8004ad8:	f043 0301 	orreq.w	r3, r3, #1
 8004adc:	3230      	adds	r2, #48	; 0x30
 8004ade:	428c      	cmp	r4, r1
 8004ae0:	bf08      	it	eq
 8004ae2:	f043 0301 	orreq.w	r3, r3, #1
 8004ae6:	3130      	adds	r1, #48	; 0x30
 8004ae8:	4294      	cmp	r4, r2
 8004aea:	bf08      	it	eq
 8004aec:	f043 0301 	orreq.w	r3, r3, #1
 8004af0:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004af4:	428c      	cmp	r4, r1
 8004af6:	bf08      	it	eq
 8004af8:	f043 0301 	orreq.w	r3, r3, #1
 8004afc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004b00:	4294      	cmp	r4, r2
 8004b02:	bf08      	it	eq
 8004b04:	f043 0301 	orreq.w	r3, r3, #1
 8004b08:	3230      	adds	r2, #48	; 0x30
 8004b0a:	428c      	cmp	r4, r1
 8004b0c:	bf08      	it	eq
 8004b0e:	f043 0301 	orreq.w	r3, r3, #1
 8004b12:	3130      	adds	r1, #48	; 0x30
 8004b14:	4294      	cmp	r4, r2
 8004b16:	bf08      	it	eq
 8004b18:	f043 0301 	orreq.w	r3, r3, #1
 8004b1c:	3230      	adds	r2, #48	; 0x30
 8004b1e:	428c      	cmp	r4, r1
 8004b20:	bf08      	it	eq
 8004b22:	f043 0301 	orreq.w	r3, r3, #1
 8004b26:	3130      	adds	r1, #48	; 0x30
 8004b28:	4294      	cmp	r4, r2
 8004b2a:	bf08      	it	eq
 8004b2c:	f043 0301 	orreq.w	r3, r3, #1
 8004b30:	3230      	adds	r2, #48	; 0x30
 8004b32:	428c      	cmp	r4, r1
 8004b34:	bf08      	it	eq
 8004b36:	f043 0301 	orreq.w	r3, r3, #1
 8004b3a:	e00b      	b.n	8004b54 <HAL_DMA_Start_IT+0x2dc>
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020010 	.word	0x40020010
 8004b44:	58025408 	.word	0x58025408
 8004b48:	58025494 	.word	0x58025494
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	40020040 	.word	0x40020040
 8004b54:	4294      	cmp	r4, r2
 8004b56:	bf08      	it	eq
 8004b58:	f043 0301 	orreq.w	r3, r3, #1
 8004b5c:	b91b      	cbnz	r3, 8004b66 <HAL_DMA_Start_IT+0x2ee>
 8004b5e:	4b9b      	ldr	r3, [pc, #620]	; (8004dcc <HAL_DMA_Start_IT+0x554>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	f040 8143 	bne.w	8004dec <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f023 031e 	bic.w	r3, r3, #30
 8004b6c:	f043 0316 	orr.w	r3, r3, #22
 8004b70:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004b72:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004b76:	b12b      	cbz	r3, 8004b84 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b78:	f8dc 2000 	ldr.w	r2, [ip]
 8004b7c:	6813      	ldr	r3, [r2, #0]
 8004b7e:	f043 0308 	orr.w	r3, r3, #8
 8004b82:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b84:	f8dc 4000 	ldr.w	r4, [ip]
 8004b88:	4b91      	ldr	r3, [pc, #580]	; (8004dd0 <HAL_DMA_Start_IT+0x558>)
 8004b8a:	4992      	ldr	r1, [pc, #584]	; (8004dd4 <HAL_DMA_Start_IT+0x55c>)
 8004b8c:	4a92      	ldr	r2, [pc, #584]	; (8004dd8 <HAL_DMA_Start_IT+0x560>)
 8004b8e:	428c      	cmp	r4, r1
 8004b90:	bf18      	it	ne
 8004b92:	429c      	cmpne	r4, r3
 8004b94:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	4294      	cmp	r4, r2
 8004ba0:	bf08      	it	eq
 8004ba2:	f043 0301 	orreq.w	r3, r3, #1
 8004ba6:	3230      	adds	r2, #48	; 0x30
 8004ba8:	428c      	cmp	r4, r1
 8004baa:	bf08      	it	eq
 8004bac:	f043 0301 	orreq.w	r3, r3, #1
 8004bb0:	3130      	adds	r1, #48	; 0x30
 8004bb2:	4294      	cmp	r4, r2
 8004bb4:	bf08      	it	eq
 8004bb6:	f043 0301 	orreq.w	r3, r3, #1
 8004bba:	3230      	adds	r2, #48	; 0x30
 8004bbc:	428c      	cmp	r4, r1
 8004bbe:	bf08      	it	eq
 8004bc0:	f043 0301 	orreq.w	r3, r3, #1
 8004bc4:	3130      	adds	r1, #48	; 0x30
 8004bc6:	4294      	cmp	r4, r2
 8004bc8:	bf08      	it	eq
 8004bca:	f043 0301 	orreq.w	r3, r3, #1
 8004bce:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004bd2:	428c      	cmp	r4, r1
 8004bd4:	bf08      	it	eq
 8004bd6:	f043 0301 	orreq.w	r3, r3, #1
 8004bda:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004bde:	4294      	cmp	r4, r2
 8004be0:	bf08      	it	eq
 8004be2:	f043 0301 	orreq.w	r3, r3, #1
 8004be6:	3230      	adds	r2, #48	; 0x30
 8004be8:	428c      	cmp	r4, r1
 8004bea:	bf08      	it	eq
 8004bec:	f043 0301 	orreq.w	r3, r3, #1
 8004bf0:	3130      	adds	r1, #48	; 0x30
 8004bf2:	4294      	cmp	r4, r2
 8004bf4:	bf08      	it	eq
 8004bf6:	f043 0301 	orreq.w	r3, r3, #1
 8004bfa:	3230      	adds	r2, #48	; 0x30
 8004bfc:	428c      	cmp	r4, r1
 8004bfe:	bf08      	it	eq
 8004c00:	f043 0301 	orreq.w	r3, r3, #1
 8004c04:	3130      	adds	r1, #48	; 0x30
 8004c06:	4294      	cmp	r4, r2
 8004c08:	bf08      	it	eq
 8004c0a:	f043 0301 	orreq.w	r3, r3, #1
 8004c0e:	3230      	adds	r2, #48	; 0x30
 8004c10:	428c      	cmp	r4, r1
 8004c12:	bf08      	it	eq
 8004c14:	f043 0301 	orreq.w	r3, r3, #1
 8004c18:	3130      	adds	r1, #48	; 0x30
 8004c1a:	4294      	cmp	r4, r2
 8004c1c:	bf08      	it	eq
 8004c1e:	f043 0301 	orreq.w	r3, r3, #1
 8004c22:	4a6e      	ldr	r2, [pc, #440]	; (8004ddc <HAL_DMA_Start_IT+0x564>)
 8004c24:	428c      	cmp	r4, r1
 8004c26:	bf08      	it	eq
 8004c28:	f043 0301 	orreq.w	r3, r3, #1
 8004c2c:	496c      	ldr	r1, [pc, #432]	; (8004de0 <HAL_DMA_Start_IT+0x568>)
 8004c2e:	4294      	cmp	r4, r2
 8004c30:	bf08      	it	eq
 8004c32:	f043 0301 	orreq.w	r3, r3, #1
 8004c36:	3228      	adds	r2, #40	; 0x28
 8004c38:	428c      	cmp	r4, r1
 8004c3a:	bf08      	it	eq
 8004c3c:	f043 0301 	orreq.w	r3, r3, #1
 8004c40:	3128      	adds	r1, #40	; 0x28
 8004c42:	4294      	cmp	r4, r2
 8004c44:	bf08      	it	eq
 8004c46:	f043 0301 	orreq.w	r3, r3, #1
 8004c4a:	3228      	adds	r2, #40	; 0x28
 8004c4c:	428c      	cmp	r4, r1
 8004c4e:	bf08      	it	eq
 8004c50:	f043 0301 	orreq.w	r3, r3, #1
 8004c54:	3128      	adds	r1, #40	; 0x28
 8004c56:	4294      	cmp	r4, r2
 8004c58:	bf08      	it	eq
 8004c5a:	f043 0301 	orreq.w	r3, r3, #1
 8004c5e:	3228      	adds	r2, #40	; 0x28
 8004c60:	428c      	cmp	r4, r1
 8004c62:	bf08      	it	eq
 8004c64:	f043 0301 	orreq.w	r3, r3, #1
 8004c68:	4294      	cmp	r4, r2
 8004c6a:	bf08      	it	eq
 8004c6c:	f043 0301 	orreq.w	r3, r3, #1
 8004c70:	b913      	cbnz	r3, 8004c78 <HAL_DMA_Start_IT+0x400>
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_DMA_Start_IT+0x56c>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d111      	bne.n	8004c9c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c78:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	03d2      	lsls	r2, r2, #15
 8004c80:	d503      	bpl.n	8004c8a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c88:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004c8a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8004c8e:	b11b      	cbz	r3, 8004c98 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_DMA_Start_IT+0x558>)
 8004c9e:	494d      	ldr	r1, [pc, #308]	; (8004dd4 <HAL_DMA_Start_IT+0x55c>)
 8004ca0:	4a4d      	ldr	r2, [pc, #308]	; (8004dd8 <HAL_DMA_Start_IT+0x560>)
 8004ca2:	428c      	cmp	r4, r1
 8004ca4:	bf18      	it	ne
 8004ca6:	429c      	cmpne	r4, r3
 8004ca8:	484f      	ldr	r0, [pc, #316]	; (8004de8 <HAL_DMA_Start_IT+0x570>)
 8004caa:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	4294      	cmp	r4, r2
 8004cb6:	bf08      	it	eq
 8004cb8:	f043 0301 	orreq.w	r3, r3, #1
 8004cbc:	3230      	adds	r2, #48	; 0x30
 8004cbe:	4284      	cmp	r4, r0
 8004cc0:	bf08      	it	eq
 8004cc2:	f043 0301 	orreq.w	r3, r3, #1
 8004cc6:	3060      	adds	r0, #96	; 0x60
 8004cc8:	4294      	cmp	r4, r2
 8004cca:	bf08      	it	eq
 8004ccc:	f043 0301 	orreq.w	r3, r3, #1
 8004cd0:	3230      	adds	r2, #48	; 0x30
 8004cd2:	428c      	cmp	r4, r1
 8004cd4:	bf08      	it	eq
 8004cd6:	f043 0301 	orreq.w	r3, r3, #1
 8004cda:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8004cde:	4294      	cmp	r4, r2
 8004ce0:	bf08      	it	eq
 8004ce2:	f043 0301 	orreq.w	r3, r3, #1
 8004ce6:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004cea:	4284      	cmp	r4, r0
 8004cec:	bf08      	it	eq
 8004cee:	f043 0301 	orreq.w	r3, r3, #1
 8004cf2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8004cf6:	4294      	cmp	r4, r2
 8004cf8:	bf08      	it	eq
 8004cfa:	f043 0301 	orreq.w	r3, r3, #1
 8004cfe:	3230      	adds	r2, #48	; 0x30
 8004d00:	428c      	cmp	r4, r1
 8004d02:	bf08      	it	eq
 8004d04:	f043 0301 	orreq.w	r3, r3, #1
 8004d08:	3160      	adds	r1, #96	; 0x60
 8004d0a:	4294      	cmp	r4, r2
 8004d0c:	bf08      	it	eq
 8004d0e:	f043 0301 	orreq.w	r3, r3, #1
 8004d12:	3230      	adds	r2, #48	; 0x30
 8004d14:	4284      	cmp	r4, r0
 8004d16:	bf08      	it	eq
 8004d18:	f043 0301 	orreq.w	r3, r3, #1
 8004d1c:	4294      	cmp	r4, r2
 8004d1e:	bf08      	it	eq
 8004d20:	f043 0301 	orreq.w	r3, r3, #1
 8004d24:	3230      	adds	r2, #48	; 0x30
 8004d26:	428c      	cmp	r4, r1
 8004d28:	bf08      	it	eq
 8004d2a:	f043 0301 	orreq.w	r3, r3, #1
 8004d2e:	4294      	cmp	r4, r2
 8004d30:	bf08      	it	eq
 8004d32:	f043 0301 	orreq.w	r3, r3, #1
 8004d36:	b933      	cbnz	r3, 8004d46 <HAL_DMA_Start_IT+0x4ce>
 8004d38:	3060      	adds	r0, #96	; 0x60
 8004d3a:	1a20      	subs	r0, r4, r0
 8004d3c:	fab0 f080 	clz	r0, r0
 8004d40:	0940      	lsrs	r0, r0, #5
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d03d      	beq.n	8004dc2 <HAL_DMA_Start_IT+0x54a>
 8004d46:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6023      	str	r3, [r4, #0]
}
 8004d50:	bc70      	pop	{r4, r5, r6}
 8004d52:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d56:	f8dc 3000 	ldr.w	r3, [ip]
 8004d5a:	60d9      	str	r1, [r3, #12]
 8004d5c:	e6a3      	b.n	8004aa6 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
 8004d60:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004d62:	2002      	movs	r0, #2
}
 8004d64:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d66:	481d      	ldr	r0, [pc, #116]	; (8004ddc <HAL_DMA_Start_IT+0x564>)
 8004d68:	4e1d      	ldr	r6, [pc, #116]	; (8004de0 <HAL_DMA_Start_IT+0x568>)
 8004d6a:	42b4      	cmp	r4, r6
 8004d6c:	bf18      	it	ne
 8004d6e:	4284      	cmpne	r4, r0
 8004d70:	f106 0614 	add.w	r6, r6, #20
 8004d74:	bf0c      	ite	eq
 8004d76:	2001      	moveq	r0, #1
 8004d78:	2000      	movne	r0, #0
 8004d7a:	42b4      	cmp	r4, r6
 8004d7c:	bf08      	it	eq
 8004d7e:	f040 0001 	orreq.w	r0, r0, #1
 8004d82:	3614      	adds	r6, #20
 8004d84:	42b4      	cmp	r4, r6
 8004d86:	bf08      	it	eq
 8004d88:	f040 0001 	orreq.w	r0, r0, #1
 8004d8c:	3614      	adds	r6, #20
 8004d8e:	42b4      	cmp	r4, r6
 8004d90:	bf08      	it	eq
 8004d92:	f040 0001 	orreq.w	r0, r0, #1
 8004d96:	3614      	adds	r6, #20
 8004d98:	42b4      	cmp	r4, r6
 8004d9a:	bf08      	it	eq
 8004d9c:	f040 0001 	orreq.w	r0, r0, #1
 8004da0:	3614      	adds	r6, #20
 8004da2:	42b4      	cmp	r4, r6
 8004da4:	bf08      	it	eq
 8004da6:	f040 0001 	orreq.w	r0, r0, #1
 8004daa:	b910      	cbnz	r0, 8004db2 <HAL_DMA_Start_IT+0x53a>
 8004dac:	480d      	ldr	r0, [pc, #52]	; (8004de4 <HAL_DMA_Start_IT+0x56c>)
 8004dae:	4284      	cmp	r4, r0
 8004db0:	d11c      	bne.n	8004dec <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004db2:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004db6:	f000 041f 	and.w	r4, r0, #31
 8004dba:	2001      	movs	r0, #1
 8004dbc:	40a0      	lsls	r0, r4
 8004dbe:	6068      	str	r0, [r5, #4]
 8004dc0:	e663      	b.n	8004a8a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	e56d      	b.n	80048a8 <HAL_DMA_Start_IT+0x30>
 8004dcc:	400204b8 	.word	0x400204b8
 8004dd0:	40020010 	.word	0x40020010
 8004dd4:	40020028 	.word	0x40020028
 8004dd8:	40020040 	.word	0x40020040
 8004ddc:	58025408 	.word	0x58025408
 8004de0:	5802541c 	.word	0x5802541c
 8004de4:	58025494 	.word	0x58025494
 8004de8:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	f023 030e 	bic.w	r3, r3, #14
 8004df2:	f043 030a 	orr.w	r3, r3, #10
 8004df6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004df8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f43f aec1 	beq.w	8004b84 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e02:	f8dc 2000 	ldr.w	r2, [ip]
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e6b9      	b.n	8004b84 <HAL_DMA_Start_IT+0x30c>

08004e10 <HAL_DMA_Abort>:
{
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff f90a 	bl	800402c <HAL_GetTick>
  if(hdma == NULL)
 8004e18:	2e00      	cmp	r6, #0
 8004e1a:	f000 81ef 	beq.w	80051fc <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e1e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	f040 81d9 	bne.w	80051da <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4b6e      	ldr	r3, [pc, #440]	; (8004fe8 <HAL_DMA_Abort+0x1d8>)
 8004e2e:	496f      	ldr	r1, [pc, #444]	; (8004fec <HAL_DMA_Abort+0x1dc>)
 8004e30:	428a      	cmp	r2, r1
 8004e32:	bf18      	it	ne
 8004e34:	429a      	cmpne	r2, r3
 8004e36:	f101 0118 	add.w	r1, r1, #24
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	428a      	cmp	r2, r1
 8004e42:	bf08      	it	eq
 8004e44:	f043 0301 	orreq.w	r3, r3, #1
 8004e48:	3118      	adds	r1, #24
 8004e4a:	428a      	cmp	r2, r1
 8004e4c:	bf08      	it	eq
 8004e4e:	f043 0301 	orreq.w	r3, r3, #1
 8004e52:	3118      	adds	r1, #24
 8004e54:	428a      	cmp	r2, r1
 8004e56:	bf08      	it	eq
 8004e58:	f043 0301 	orreq.w	r3, r3, #1
 8004e5c:	3118      	adds	r1, #24
 8004e5e:	428a      	cmp	r2, r1
 8004e60:	bf08      	it	eq
 8004e62:	f043 0301 	orreq.w	r3, r3, #1
 8004e66:	3118      	adds	r1, #24
 8004e68:	428a      	cmp	r2, r1
 8004e6a:	bf08      	it	eq
 8004e6c:	f043 0301 	orreq.w	r3, r3, #1
 8004e70:	3118      	adds	r1, #24
 8004e72:	428a      	cmp	r2, r1
 8004e74:	bf08      	it	eq
 8004e76:	f043 0301 	orreq.w	r3, r3, #1
 8004e7a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004e7e:	428a      	cmp	r2, r1
 8004e80:	bf08      	it	eq
 8004e82:	f043 0301 	orreq.w	r3, r3, #1
 8004e86:	3118      	adds	r1, #24
 8004e88:	428a      	cmp	r2, r1
 8004e8a:	bf08      	it	eq
 8004e8c:	f043 0301 	orreq.w	r3, r3, #1
 8004e90:	3118      	adds	r1, #24
 8004e92:	428a      	cmp	r2, r1
 8004e94:	bf08      	it	eq
 8004e96:	f043 0301 	orreq.w	r3, r3, #1
 8004e9a:	3118      	adds	r1, #24
 8004e9c:	428a      	cmp	r2, r1
 8004e9e:	bf08      	it	eq
 8004ea0:	f043 0301 	orreq.w	r3, r3, #1
 8004ea4:	3118      	adds	r1, #24
 8004ea6:	428a      	cmp	r2, r1
 8004ea8:	bf08      	it	eq
 8004eaa:	f043 0301 	orreq.w	r3, r3, #1
 8004eae:	3118      	adds	r1, #24
 8004eb0:	428a      	cmp	r2, r1
 8004eb2:	bf08      	it	eq
 8004eb4:	f043 0301 	orreq.w	r3, r3, #1
 8004eb8:	3118      	adds	r1, #24
 8004eba:	428a      	cmp	r2, r1
 8004ebc:	bf08      	it	eq
 8004ebe:	f043 0301 	orreq.w	r3, r3, #1
 8004ec2:	b91b      	cbnz	r3, 8004ecc <HAL_DMA_Abort+0xbc>
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <HAL_DMA_Abort+0x1e0>)
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	f040 81a2 	bne.w	8005210 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ecc:	6813      	ldr	r3, [r2, #0]
 8004ece:	f023 031e 	bic.w	r3, r3, #30
 8004ed2:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ed4:	6832      	ldr	r2, [r6, #0]
 8004ed6:	6953      	ldr	r3, [r2, #20]
 8004ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004edc:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ede:	6832      	ldr	r2, [r6, #0]
 8004ee0:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <HAL_DMA_Abort+0x1d8>)
 8004ee4:	4941      	ldr	r1, [pc, #260]	; (8004fec <HAL_DMA_Abort+0x1dc>)
 8004ee6:	428a      	cmp	r2, r1
 8004ee8:	bf18      	it	ne
 8004eea:	429a      	cmpne	r2, r3
 8004eec:	f101 0118 	add.w	r1, r1, #24
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	428a      	cmp	r2, r1
 8004ef8:	bf08      	it	eq
 8004efa:	f043 0301 	orreq.w	r3, r3, #1
 8004efe:	3118      	adds	r1, #24
 8004f00:	428a      	cmp	r2, r1
 8004f02:	bf08      	it	eq
 8004f04:	f043 0301 	orreq.w	r3, r3, #1
 8004f08:	3118      	adds	r1, #24
 8004f0a:	428a      	cmp	r2, r1
 8004f0c:	bf08      	it	eq
 8004f0e:	f043 0301 	orreq.w	r3, r3, #1
 8004f12:	3118      	adds	r1, #24
 8004f14:	428a      	cmp	r2, r1
 8004f16:	bf08      	it	eq
 8004f18:	f043 0301 	orreq.w	r3, r3, #1
 8004f1c:	3118      	adds	r1, #24
 8004f1e:	428a      	cmp	r2, r1
 8004f20:	bf08      	it	eq
 8004f22:	f043 0301 	orreq.w	r3, r3, #1
 8004f26:	3118      	adds	r1, #24
 8004f28:	428a      	cmp	r2, r1
 8004f2a:	bf08      	it	eq
 8004f2c:	f043 0301 	orreq.w	r3, r3, #1
 8004f30:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004f34:	428a      	cmp	r2, r1
 8004f36:	bf08      	it	eq
 8004f38:	f043 0301 	orreq.w	r3, r3, #1
 8004f3c:	3118      	adds	r1, #24
 8004f3e:	428a      	cmp	r2, r1
 8004f40:	bf08      	it	eq
 8004f42:	f043 0301 	orreq.w	r3, r3, #1
 8004f46:	3118      	adds	r1, #24
 8004f48:	428a      	cmp	r2, r1
 8004f4a:	bf08      	it	eq
 8004f4c:	f043 0301 	orreq.w	r3, r3, #1
 8004f50:	3118      	adds	r1, #24
 8004f52:	428a      	cmp	r2, r1
 8004f54:	bf08      	it	eq
 8004f56:	f043 0301 	orreq.w	r3, r3, #1
 8004f5a:	3118      	adds	r1, #24
 8004f5c:	428a      	cmp	r2, r1
 8004f5e:	bf08      	it	eq
 8004f60:	f043 0301 	orreq.w	r3, r3, #1
 8004f64:	3118      	adds	r1, #24
 8004f66:	428a      	cmp	r2, r1
 8004f68:	bf08      	it	eq
 8004f6a:	f043 0301 	orreq.w	r3, r3, #1
 8004f6e:	3118      	adds	r1, #24
 8004f70:	428a      	cmp	r2, r1
 8004f72:	bf08      	it	eq
 8004f74:	f043 0301 	orreq.w	r3, r3, #1
 8004f78:	3118      	adds	r1, #24
 8004f7a:	428a      	cmp	r2, r1
 8004f7c:	bf08      	it	eq
 8004f7e:	f043 0301 	orreq.w	r3, r3, #1
 8004f82:	491c      	ldr	r1, [pc, #112]	; (8004ff4 <HAL_DMA_Abort+0x1e4>)
 8004f84:	428a      	cmp	r2, r1
 8004f86:	bf08      	it	eq
 8004f88:	f043 0301 	orreq.w	r3, r3, #1
 8004f8c:	3114      	adds	r1, #20
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	bf08      	it	eq
 8004f92:	f043 0301 	orreq.w	r3, r3, #1
 8004f96:	3114      	adds	r1, #20
 8004f98:	428a      	cmp	r2, r1
 8004f9a:	bf08      	it	eq
 8004f9c:	f043 0301 	orreq.w	r3, r3, #1
 8004fa0:	3114      	adds	r1, #20
 8004fa2:	428a      	cmp	r2, r1
 8004fa4:	bf08      	it	eq
 8004fa6:	f043 0301 	orreq.w	r3, r3, #1
 8004faa:	3114      	adds	r1, #20
 8004fac:	428a      	cmp	r2, r1
 8004fae:	bf08      	it	eq
 8004fb0:	f043 0301 	orreq.w	r3, r3, #1
 8004fb4:	3114      	adds	r1, #20
 8004fb6:	428a      	cmp	r2, r1
 8004fb8:	bf08      	it	eq
 8004fba:	f043 0301 	orreq.w	r3, r3, #1
 8004fbe:	3114      	adds	r1, #20
 8004fc0:	428a      	cmp	r2, r1
 8004fc2:	bf08      	it	eq
 8004fc4:	f043 0301 	orreq.w	r3, r3, #1
 8004fc8:	b913      	cbnz	r3, 8004fd0 <HAL_DMA_Abort+0x1c0>
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_DMA_Abort+0x1e8>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d105      	bne.n	8004fdc <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fd0:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e010      	b.n	8005008 <HAL_DMA_Abort+0x1f8>
 8004fe6:	bf00      	nop
 8004fe8:	40020010 	.word	0x40020010
 8004fec:	40020028 	.word	0x40020028
 8004ff0:	400204b8 	.word	0x400204b8
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ffc:	f7ff f816 	bl	800402c <HAL_GetTick>
 8005000:	1b00      	subs	r0, r0, r4
 8005002:	2805      	cmp	r0, #5
 8005004:	f200 80f0 	bhi.w	80051e8 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	07db      	lsls	r3, r3, #31
 800500c:	d4f6      	bmi.n	8004ffc <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800500e:	6832      	ldr	r2, [r6, #0]
 8005010:	4b83      	ldr	r3, [pc, #524]	; (8005220 <HAL_DMA_Abort+0x410>)
 8005012:	4884      	ldr	r0, [pc, #528]	; (8005224 <HAL_DMA_Abort+0x414>)
 8005014:	4984      	ldr	r1, [pc, #528]	; (8005228 <HAL_DMA_Abort+0x418>)
 8005016:	4282      	cmp	r2, r0
 8005018:	bf18      	it	ne
 800501a:	429a      	cmpne	r2, r3
 800501c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	428a      	cmp	r2, r1
 8005028:	bf08      	it	eq
 800502a:	f043 0301 	orreq.w	r3, r3, #1
 800502e:	3130      	adds	r1, #48	; 0x30
 8005030:	4282      	cmp	r2, r0
 8005032:	bf08      	it	eq
 8005034:	f043 0301 	orreq.w	r3, r3, #1
 8005038:	3030      	adds	r0, #48	; 0x30
 800503a:	428a      	cmp	r2, r1
 800503c:	bf08      	it	eq
 800503e:	f043 0301 	orreq.w	r3, r3, #1
 8005042:	3130      	adds	r1, #48	; 0x30
 8005044:	4282      	cmp	r2, r0
 8005046:	bf08      	it	eq
 8005048:	f043 0301 	orreq.w	r3, r3, #1
 800504c:	3030      	adds	r0, #48	; 0x30
 800504e:	428a      	cmp	r2, r1
 8005050:	bf08      	it	eq
 8005052:	f043 0301 	orreq.w	r3, r3, #1
 8005056:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800505a:	4282      	cmp	r2, r0
 800505c:	bf08      	it	eq
 800505e:	f043 0301 	orreq.w	r3, r3, #1
 8005062:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005066:	428a      	cmp	r2, r1
 8005068:	bf08      	it	eq
 800506a:	f043 0301 	orreq.w	r3, r3, #1
 800506e:	3130      	adds	r1, #48	; 0x30
 8005070:	4282      	cmp	r2, r0
 8005072:	bf08      	it	eq
 8005074:	f043 0301 	orreq.w	r3, r3, #1
 8005078:	3030      	adds	r0, #48	; 0x30
 800507a:	428a      	cmp	r2, r1
 800507c:	bf08      	it	eq
 800507e:	f043 0301 	orreq.w	r3, r3, #1
 8005082:	3130      	adds	r1, #48	; 0x30
 8005084:	4282      	cmp	r2, r0
 8005086:	bf08      	it	eq
 8005088:	f043 0301 	orreq.w	r3, r3, #1
 800508c:	3030      	adds	r0, #48	; 0x30
 800508e:	428a      	cmp	r2, r1
 8005090:	bf08      	it	eq
 8005092:	f043 0301 	orreq.w	r3, r3, #1
 8005096:	3130      	adds	r1, #48	; 0x30
 8005098:	4282      	cmp	r2, r0
 800509a:	bf08      	it	eq
 800509c:	f043 0301 	orreq.w	r3, r3, #1
 80050a0:	428a      	cmp	r2, r1
 80050a2:	bf08      	it	eq
 80050a4:	f043 0301 	orreq.w	r3, r3, #1
 80050a8:	b91b      	cbnz	r3, 80050b2 <HAL_DMA_Abort+0x2a2>
 80050aa:	4b60      	ldr	r3, [pc, #384]	; (800522c <HAL_DMA_Abort+0x41c>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	f040 80a7 	bne.w	8005200 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80050b4:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b6:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b8:	f002 021f 	and.w	r2, r2, #31
 80050bc:	4093      	lsls	r3, r2
 80050be:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050c0:	6832      	ldr	r2, [r6, #0]
 80050c2:	4b57      	ldr	r3, [pc, #348]	; (8005220 <HAL_DMA_Abort+0x410>)
 80050c4:	4857      	ldr	r0, [pc, #348]	; (8005224 <HAL_DMA_Abort+0x414>)
 80050c6:	4958      	ldr	r1, [pc, #352]	; (8005228 <HAL_DMA_Abort+0x418>)
 80050c8:	4282      	cmp	r2, r0
 80050ca:	bf18      	it	ne
 80050cc:	429a      	cmpne	r2, r3
 80050ce:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80050d2:	bf0c      	ite	eq
 80050d4:	2301      	moveq	r3, #1
 80050d6:	2300      	movne	r3, #0
 80050d8:	428a      	cmp	r2, r1
 80050da:	bf08      	it	eq
 80050dc:	f043 0301 	orreq.w	r3, r3, #1
 80050e0:	3130      	adds	r1, #48	; 0x30
 80050e2:	4282      	cmp	r2, r0
 80050e4:	bf08      	it	eq
 80050e6:	f043 0301 	orreq.w	r3, r3, #1
 80050ea:	3030      	adds	r0, #48	; 0x30
 80050ec:	428a      	cmp	r2, r1
 80050ee:	bf08      	it	eq
 80050f0:	f043 0301 	orreq.w	r3, r3, #1
 80050f4:	3130      	adds	r1, #48	; 0x30
 80050f6:	4282      	cmp	r2, r0
 80050f8:	bf08      	it	eq
 80050fa:	f043 0301 	orreq.w	r3, r3, #1
 80050fe:	3030      	adds	r0, #48	; 0x30
 8005100:	428a      	cmp	r2, r1
 8005102:	bf08      	it	eq
 8005104:	f043 0301 	orreq.w	r3, r3, #1
 8005108:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800510c:	4282      	cmp	r2, r0
 800510e:	bf08      	it	eq
 8005110:	f043 0301 	orreq.w	r3, r3, #1
 8005114:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005118:	428a      	cmp	r2, r1
 800511a:	bf08      	it	eq
 800511c:	f043 0301 	orreq.w	r3, r3, #1
 8005120:	3130      	adds	r1, #48	; 0x30
 8005122:	4282      	cmp	r2, r0
 8005124:	bf08      	it	eq
 8005126:	f043 0301 	orreq.w	r3, r3, #1
 800512a:	3030      	adds	r0, #48	; 0x30
 800512c:	428a      	cmp	r2, r1
 800512e:	bf08      	it	eq
 8005130:	f043 0301 	orreq.w	r3, r3, #1
 8005134:	3130      	adds	r1, #48	; 0x30
 8005136:	4282      	cmp	r2, r0
 8005138:	bf08      	it	eq
 800513a:	f043 0301 	orreq.w	r3, r3, #1
 800513e:	3030      	adds	r0, #48	; 0x30
 8005140:	428a      	cmp	r2, r1
 8005142:	bf08      	it	eq
 8005144:	f043 0301 	orreq.w	r3, r3, #1
 8005148:	3130      	adds	r1, #48	; 0x30
 800514a:	4282      	cmp	r2, r0
 800514c:	bf08      	it	eq
 800514e:	f043 0301 	orreq.w	r3, r3, #1
 8005152:	3030      	adds	r0, #48	; 0x30
 8005154:	428a      	cmp	r2, r1
 8005156:	bf08      	it	eq
 8005158:	f043 0301 	orreq.w	r3, r3, #1
 800515c:	4934      	ldr	r1, [pc, #208]	; (8005230 <HAL_DMA_Abort+0x420>)
 800515e:	4282      	cmp	r2, r0
 8005160:	bf08      	it	eq
 8005162:	f043 0301 	orreq.w	r3, r3, #1
 8005166:	4833      	ldr	r0, [pc, #204]	; (8005234 <HAL_DMA_Abort+0x424>)
 8005168:	428a      	cmp	r2, r1
 800516a:	bf08      	it	eq
 800516c:	f043 0301 	orreq.w	r3, r3, #1
 8005170:	3128      	adds	r1, #40	; 0x28
 8005172:	4282      	cmp	r2, r0
 8005174:	bf08      	it	eq
 8005176:	f043 0301 	orreq.w	r3, r3, #1
 800517a:	3028      	adds	r0, #40	; 0x28
 800517c:	428a      	cmp	r2, r1
 800517e:	bf08      	it	eq
 8005180:	f043 0301 	orreq.w	r3, r3, #1
 8005184:	3128      	adds	r1, #40	; 0x28
 8005186:	4282      	cmp	r2, r0
 8005188:	bf08      	it	eq
 800518a:	f043 0301 	orreq.w	r3, r3, #1
 800518e:	3028      	adds	r0, #40	; 0x28
 8005190:	428a      	cmp	r2, r1
 8005192:	bf08      	it	eq
 8005194:	f043 0301 	orreq.w	r3, r3, #1
 8005198:	3128      	adds	r1, #40	; 0x28
 800519a:	4282      	cmp	r2, r0
 800519c:	bf08      	it	eq
 800519e:	f043 0301 	orreq.w	r3, r3, #1
 80051a2:	428a      	cmp	r2, r1
 80051a4:	bf08      	it	eq
 80051a6:	f043 0301 	orreq.w	r3, r3, #1
 80051aa:	b913      	cbnz	r3, 80051b2 <HAL_DMA_Abort+0x3a2>
 80051ac:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_DMA_Abort+0x428>)
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d10b      	bne.n	80051ca <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b2:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 80051b6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80051b8:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80051ba:	b133      	cbz	r3, 80051ca <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c4:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 80051c8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80051ca:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80051cc:	2201      	movs	r2, #1
  return HAL_OK;
 80051ce:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80051d0:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80051d4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80051dc:	2300      	movs	r3, #0
    return HAL_ERROR;
 80051de:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e0:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80051e2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e8:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80051ea:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80051ec:	2300      	movs	r3, #0
        return HAL_ERROR;
 80051ee:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051f0:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80051f2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80051f6:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80051fc:	2001      	movs	r0, #1
}
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005200:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8005202:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005204:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005206:	f002 021f 	and.w	r2, r2, #31
 800520a:	4093      	lsls	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
 800520e:	e757      	b.n	80050c0 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	f023 030e 	bic.w	r3, r3, #14
 8005216:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005218:	6832      	ldr	r2, [r6, #0]
 800521a:	4615      	mov	r5, r2
 800521c:	e661      	b.n	8004ee2 <HAL_DMA_Abort+0xd2>
 800521e:	bf00      	nop
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	40020040 	.word	0x40020040
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025494 	.word	0x58025494

0800523c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800523c:	2800      	cmp	r0, #0
 800523e:	d065      	beq.n	800530c <HAL_DMA_Abort_IT+0xd0>
{
 8005240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005244:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005248:	4603      	mov	r3, r0
 800524a:	2a02      	cmp	r2, #2
 800524c:	d159      	bne.n	8005302 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800524e:	6801      	ldr	r1, [r0, #0]
 8005250:	4883      	ldr	r0, [pc, #524]	; (8005460 <HAL_DMA_Abort_IT+0x224>)
 8005252:	4281      	cmp	r1, r0
 8005254:	d04b      	beq.n	80052ee <HAL_DMA_Abort_IT+0xb2>
 8005256:	4c83      	ldr	r4, [pc, #524]	; (8005464 <HAL_DMA_Abort_IT+0x228>)
 8005258:	42a1      	cmp	r1, r4
 800525a:	d048      	beq.n	80052ee <HAL_DMA_Abort_IT+0xb2>
 800525c:	f8df a228 	ldr.w	sl, [pc, #552]	; 8005488 <HAL_DMA_Abort_IT+0x24c>
 8005260:	f8df b214 	ldr.w	fp, [pc, #532]	; 8005478 <HAL_DMA_Abort_IT+0x23c>
 8005264:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800548c <HAL_DMA_Abort_IT+0x250>
 8005268:	4559      	cmp	r1, fp
 800526a:	bf18      	it	ne
 800526c:	4551      	cmpne	r1, sl
 800526e:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8005490 <HAL_DMA_Abort_IT+0x254>
 8005272:	f8df e220 	ldr.w	lr, [pc, #544]	; 8005494 <HAL_DMA_Abort_IT+0x258>
 8005276:	bf0c      	ite	eq
 8005278:	2201      	moveq	r2, #1
 800527a:	2200      	movne	r2, #0
 800527c:	f8df c218 	ldr.w	ip, [pc, #536]	; 8005498 <HAL_DMA_Abort_IT+0x25c>
 8005280:	4549      	cmp	r1, r9
 8005282:	bf08      	it	eq
 8005284:	f042 0201 	orreq.w	r2, r2, #1
 8005288:	4d77      	ldr	r5, [pc, #476]	; (8005468 <HAL_DMA_Abort_IT+0x22c>)
 800528a:	4f78      	ldr	r7, [pc, #480]	; (800546c <HAL_DMA_Abort_IT+0x230>)
 800528c:	4541      	cmp	r1, r8
 800528e:	bf08      	it	eq
 8005290:	f042 0201 	orreq.w	r2, r2, #1
 8005294:	4e76      	ldr	r6, [pc, #472]	; (8005470 <HAL_DMA_Abort_IT+0x234>)
 8005296:	4571      	cmp	r1, lr
 8005298:	bf08      	it	eq
 800529a:	f042 0201 	orreq.w	r2, r2, #1
 800529e:	4561      	cmp	r1, ip
 80052a0:	bf08      	it	eq
 80052a2:	f042 0201 	orreq.w	r2, r2, #1
 80052a6:	42a9      	cmp	r1, r5
 80052a8:	bf08      	it	eq
 80052aa:	f042 0201 	orreq.w	r2, r2, #1
 80052ae:	3518      	adds	r5, #24
 80052b0:	42a9      	cmp	r1, r5
 80052b2:	bf08      	it	eq
 80052b4:	f042 0201 	orreq.w	r2, r2, #1
 80052b8:	3518      	adds	r5, #24
 80052ba:	42a9      	cmp	r1, r5
 80052bc:	bf08      	it	eq
 80052be:	f042 0201 	orreq.w	r2, r2, #1
 80052c2:	3518      	adds	r5, #24
 80052c4:	42a9      	cmp	r1, r5
 80052c6:	bf08      	it	eq
 80052c8:	f042 0201 	orreq.w	r2, r2, #1
 80052cc:	3548      	adds	r5, #72	; 0x48
 80052ce:	42b9      	cmp	r1, r7
 80052d0:	bf08      	it	eq
 80052d2:	f042 0201 	orreq.w	r2, r2, #1
 80052d6:	42b1      	cmp	r1, r6
 80052d8:	bf08      	it	eq
 80052da:	f042 0201 	orreq.w	r2, r2, #1
 80052de:	42a9      	cmp	r1, r5
 80052e0:	bf08      	it	eq
 80052e2:	f042 0201 	orreq.w	r2, r2, #1
 80052e6:	b912      	cbnz	r2, 80052ee <HAL_DMA_Abort_IT+0xb2>
 80052e8:	4a62      	ldr	r2, [pc, #392]	; (8005474 <HAL_DMA_Abort_IT+0x238>)
 80052ea:	4291      	cmp	r1, r2
 80052ec:	d110      	bne.n	8005310 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80052ee:	2204      	movs	r2, #4
  return HAL_OK;
 80052f0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80052f6:	680b      	ldr	r3, [r1, #0]
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	600b      	str	r3, [r1, #0]
}
 80052fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005302:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005304:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 800530c:	2001      	movs	r0, #1
}
 800530e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005310:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005312:	4c54      	ldr	r4, [pc, #336]	; (8005464 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005314:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005318:	4857      	ldr	r0, [pc, #348]	; (8005478 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800531a:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	680a      	ldr	r2, [r1, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005326:	4a4e      	ldr	r2, [pc, #312]	; (8005460 <HAL_DMA_Abort_IT+0x224>)
 8005328:	6819      	ldr	r1, [r3, #0]
 800532a:	42a1      	cmp	r1, r4
 800532c:	bf18      	it	ne
 800532e:	4291      	cmpne	r1, r2
 8005330:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8005334:	bf0c      	ite	eq
 8005336:	2201      	moveq	r2, #1
 8005338:	2200      	movne	r2, #0
 800533a:	4281      	cmp	r1, r0
 800533c:	bf08      	it	eq
 800533e:	f042 0201 	orreq.w	r2, r2, #1
 8005342:	3030      	adds	r0, #48	; 0x30
 8005344:	42a1      	cmp	r1, r4
 8005346:	bf08      	it	eq
 8005348:	f042 0201 	orreq.w	r2, r2, #1
 800534c:	3430      	adds	r4, #48	; 0x30
 800534e:	4281      	cmp	r1, r0
 8005350:	bf08      	it	eq
 8005352:	f042 0201 	orreq.w	r2, r2, #1
 8005356:	3030      	adds	r0, #48	; 0x30
 8005358:	42a1      	cmp	r1, r4
 800535a:	bf08      	it	eq
 800535c:	f042 0201 	orreq.w	r2, r2, #1
 8005360:	3430      	adds	r4, #48	; 0x30
 8005362:	4281      	cmp	r1, r0
 8005364:	bf08      	it	eq
 8005366:	f042 0201 	orreq.w	r2, r2, #1
 800536a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800536e:	42a1      	cmp	r1, r4
 8005370:	bf08      	it	eq
 8005372:	f042 0201 	orreq.w	r2, r2, #1
 8005376:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800537a:	4281      	cmp	r1, r0
 800537c:	bf08      	it	eq
 800537e:	f042 0201 	orreq.w	r2, r2, #1
 8005382:	3030      	adds	r0, #48	; 0x30
 8005384:	42a1      	cmp	r1, r4
 8005386:	bf08      	it	eq
 8005388:	f042 0201 	orreq.w	r2, r2, #1
 800538c:	3430      	adds	r4, #48	; 0x30
 800538e:	4281      	cmp	r1, r0
 8005390:	bf08      	it	eq
 8005392:	f042 0201 	orreq.w	r2, r2, #1
 8005396:	3030      	adds	r0, #48	; 0x30
 8005398:	42a1      	cmp	r1, r4
 800539a:	bf08      	it	eq
 800539c:	f042 0201 	orreq.w	r2, r2, #1
 80053a0:	3430      	adds	r4, #48	; 0x30
 80053a2:	4281      	cmp	r1, r0
 80053a4:	bf08      	it	eq
 80053a6:	f042 0201 	orreq.w	r2, r2, #1
 80053aa:	3030      	adds	r0, #48	; 0x30
 80053ac:	42a1      	cmp	r1, r4
 80053ae:	bf08      	it	eq
 80053b0:	f042 0201 	orreq.w	r2, r2, #1
 80053b4:	3430      	adds	r4, #48	; 0x30
 80053b6:	4281      	cmp	r1, r0
 80053b8:	bf08      	it	eq
 80053ba:	f042 0201 	orreq.w	r2, r2, #1
 80053be:	482f      	ldr	r0, [pc, #188]	; (800547c <HAL_DMA_Abort_IT+0x240>)
 80053c0:	42a1      	cmp	r1, r4
 80053c2:	bf08      	it	eq
 80053c4:	f042 0201 	orreq.w	r2, r2, #1
 80053c8:	4c2d      	ldr	r4, [pc, #180]	; (8005480 <HAL_DMA_Abort_IT+0x244>)
 80053ca:	4281      	cmp	r1, r0
 80053cc:	bf08      	it	eq
 80053ce:	f042 0201 	orreq.w	r2, r2, #1
 80053d2:	3028      	adds	r0, #40	; 0x28
 80053d4:	42a1      	cmp	r1, r4
 80053d6:	bf08      	it	eq
 80053d8:	f042 0201 	orreq.w	r2, r2, #1
 80053dc:	3428      	adds	r4, #40	; 0x28
 80053de:	4281      	cmp	r1, r0
 80053e0:	bf08      	it	eq
 80053e2:	f042 0201 	orreq.w	r2, r2, #1
 80053e6:	3028      	adds	r0, #40	; 0x28
 80053e8:	42a1      	cmp	r1, r4
 80053ea:	bf08      	it	eq
 80053ec:	f042 0201 	orreq.w	r2, r2, #1
 80053f0:	3428      	adds	r4, #40	; 0x28
 80053f2:	4281      	cmp	r1, r0
 80053f4:	bf08      	it	eq
 80053f6:	f042 0201 	orreq.w	r2, r2, #1
 80053fa:	3028      	adds	r0, #40	; 0x28
 80053fc:	42a1      	cmp	r1, r4
 80053fe:	bf08      	it	eq
 8005400:	f042 0201 	orreq.w	r2, r2, #1
 8005404:	4281      	cmp	r1, r0
 8005406:	bf08      	it	eq
 8005408:	f042 0201 	orreq.w	r2, r2, #1
 800540c:	b912      	cbnz	r2, 8005414 <HAL_DMA_Abort_IT+0x1d8>
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_DMA_Abort_IT+0x248>)
 8005410:	4291      	cmp	r1, r2
 8005412:	d117      	bne.n	8005444 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005414:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005416:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800541e:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005420:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005424:	f001 011f 	and.w	r1, r1, #31
 8005428:	408a      	lsls	r2, r1
 800542a:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800542c:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8005430:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005432:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005434:	b132      	cbz	r2, 8005444 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800543c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800543e:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8005442:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005444:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005446:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8005448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800544a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800544e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005452:	b11a      	cbz	r2, 800545c <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8005454:	4618      	mov	r0, r3
 8005456:	4790      	blx	r2
  return HAL_OK;
 8005458:	4620      	mov	r0, r4
 800545a:	e755      	b.n	8005308 <HAL_DMA_Abort_IT+0xcc>
 800545c:	4610      	mov	r0, r2
 800545e:	e753      	b.n	8005308 <HAL_DMA_Abort_IT+0xcc>
 8005460:	40020010 	.word	0x40020010
 8005464:	40020028 	.word	0x40020028
 8005468:	40020410 	.word	0x40020410
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204b8 	.word	0x400204b8
 8005478:	40020040 	.word	0x40020040
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025494 	.word	0x58025494
 8005488:	40020058 	.word	0x40020058
 800548c:	40020070 	.word	0x40020070
 8005490:	40020088 	.word	0x40020088
 8005494:	400200a0 	.word	0x400200a0
 8005498:	400200b8 	.word	0x400200b8

0800549c <HAL_DMA_IRQHandler>:
{
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800549e:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80054a0:	4b9a      	ldr	r3, [pc, #616]	; (800570c <HAL_DMA_IRQHandler+0x270>)
{
 80054a2:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80054a6:	681f      	ldr	r7, [r3, #0]
{
 80054a8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80054aa:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054ac:	6803      	ldr	r3, [r0, #0]
 80054ae:	4a98      	ldr	r2, [pc, #608]	; (8005710 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 80054b0:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054b2:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80054b4:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054b6:	d048      	beq.n	800554a <HAL_DMA_IRQHandler+0xae>
 80054b8:	3218      	adds	r2, #24
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0xae>
 80054be:	3218      	adds	r2, #24
 80054c0:	4894      	ldr	r0, [pc, #592]	; (8005714 <HAL_DMA_IRQHandler+0x278>)
 80054c2:	4283      	cmp	r3, r0
 80054c4:	bf18      	it	ne
 80054c6:	4293      	cmpne	r3, r2
 80054c8:	f100 0018 	add.w	r0, r0, #24
 80054cc:	bf0c      	ite	eq
 80054ce:	2201      	moveq	r2, #1
 80054d0:	2200      	movne	r2, #0
 80054d2:	4283      	cmp	r3, r0
 80054d4:	bf08      	it	eq
 80054d6:	f042 0201 	orreq.w	r2, r2, #1
 80054da:	3018      	adds	r0, #24
 80054dc:	4283      	cmp	r3, r0
 80054de:	bf08      	it	eq
 80054e0:	f042 0201 	orreq.w	r2, r2, #1
 80054e4:	3018      	adds	r0, #24
 80054e6:	4283      	cmp	r3, r0
 80054e8:	bf08      	it	eq
 80054ea:	f042 0201 	orreq.w	r2, r2, #1
 80054ee:	3018      	adds	r0, #24
 80054f0:	4283      	cmp	r3, r0
 80054f2:	bf08      	it	eq
 80054f4:	f042 0201 	orreq.w	r2, r2, #1
 80054f8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80054fc:	4283      	cmp	r3, r0
 80054fe:	bf08      	it	eq
 8005500:	f042 0201 	orreq.w	r2, r2, #1
 8005504:	3018      	adds	r0, #24
 8005506:	4283      	cmp	r3, r0
 8005508:	bf08      	it	eq
 800550a:	f042 0201 	orreq.w	r2, r2, #1
 800550e:	3018      	adds	r0, #24
 8005510:	4283      	cmp	r3, r0
 8005512:	bf08      	it	eq
 8005514:	f042 0201 	orreq.w	r2, r2, #1
 8005518:	3018      	adds	r0, #24
 800551a:	4283      	cmp	r3, r0
 800551c:	bf08      	it	eq
 800551e:	f042 0201 	orreq.w	r2, r2, #1
 8005522:	3018      	adds	r0, #24
 8005524:	4283      	cmp	r3, r0
 8005526:	bf08      	it	eq
 8005528:	f042 0201 	orreq.w	r2, r2, #1
 800552c:	3018      	adds	r0, #24
 800552e:	4283      	cmp	r3, r0
 8005530:	bf08      	it	eq
 8005532:	f042 0201 	orreq.w	r2, r2, #1
 8005536:	3018      	adds	r0, #24
 8005538:	4283      	cmp	r3, r0
 800553a:	bf08      	it	eq
 800553c:	f042 0201 	orreq.w	r2, r2, #1
 8005540:	b91a      	cbnz	r2, 800554a <HAL_DMA_IRQHandler+0xae>
 8005542:	4a75      	ldr	r2, [pc, #468]	; (8005718 <HAL_DMA_IRQHandler+0x27c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	f040 8294 	bne.w	8005a72 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554a:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 800554e:	2208      	movs	r2, #8
 8005550:	f00e 011f 	and.w	r1, lr, #31
 8005554:	408a      	lsls	r2, r1
 8005556:	422a      	tst	r2, r5
 8005558:	f040 8193 	bne.w	8005882 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800555c:	fa25 f201 	lsr.w	r2, r5, r1
 8005560:	07d2      	lsls	r2, r2, #31
 8005562:	d50e      	bpl.n	8005582 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	0612      	lsls	r2, r2, #24
 8005568:	f140 824d 	bpl.w	8005a06 <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800556c:	2301      	movs	r3, #1
 800556e:	408b      	lsls	r3, r1
 8005570:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005572:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005574:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005578:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800557c:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005580:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005582:	f04f 0c04 	mov.w	ip, #4
 8005586:	fa0c fc01 	lsl.w	ip, ip, r1
 800558a:	ea1c 0f05 	tst.w	ip, r5
 800558e:	d05f      	beq.n	8005650 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	485f      	ldr	r0, [pc, #380]	; (8005710 <HAL_DMA_IRQHandler+0x274>)
 8005594:	4b61      	ldr	r3, [pc, #388]	; (800571c <HAL_DMA_IRQHandler+0x280>)
 8005596:	429a      	cmp	r2, r3
 8005598:	bf18      	it	ne
 800559a:	4282      	cmpne	r2, r0
 800559c:	f103 0318 	add.w	r3, r3, #24
 80055a0:	bf0c      	ite	eq
 80055a2:	2001      	moveq	r0, #1
 80055a4:	2000      	movne	r0, #0
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf08      	it	eq
 80055aa:	f040 0001 	orreq.w	r0, r0, #1
 80055ae:	3318      	adds	r3, #24
 80055b0:	429a      	cmp	r2, r3
 80055b2:	bf08      	it	eq
 80055b4:	f040 0001 	orreq.w	r0, r0, #1
 80055b8:	3318      	adds	r3, #24
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf08      	it	eq
 80055be:	f040 0001 	orreq.w	r0, r0, #1
 80055c2:	3318      	adds	r3, #24
 80055c4:	429a      	cmp	r2, r3
 80055c6:	bf08      	it	eq
 80055c8:	f040 0001 	orreq.w	r0, r0, #1
 80055cc:	3318      	adds	r3, #24
 80055ce:	429a      	cmp	r2, r3
 80055d0:	bf08      	it	eq
 80055d2:	f040 0001 	orreq.w	r0, r0, #1
 80055d6:	3318      	adds	r3, #24
 80055d8:	429a      	cmp	r2, r3
 80055da:	bf08      	it	eq
 80055dc:	f040 0001 	orreq.w	r0, r0, #1
 80055e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf08      	it	eq
 80055e8:	f040 0001 	orreq.w	r0, r0, #1
 80055ec:	3318      	adds	r3, #24
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf08      	it	eq
 80055f2:	f040 0001 	orreq.w	r0, r0, #1
 80055f6:	3318      	adds	r3, #24
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bf08      	it	eq
 80055fc:	f040 0001 	orreq.w	r0, r0, #1
 8005600:	3318      	adds	r3, #24
 8005602:	429a      	cmp	r2, r3
 8005604:	bf08      	it	eq
 8005606:	f040 0001 	orreq.w	r0, r0, #1
 800560a:	3318      	adds	r3, #24
 800560c:	429a      	cmp	r2, r3
 800560e:	bf08      	it	eq
 8005610:	f040 0001 	orreq.w	r0, r0, #1
 8005614:	3318      	adds	r3, #24
 8005616:	429a      	cmp	r2, r3
 8005618:	bf08      	it	eq
 800561a:	f040 0001 	orreq.w	r0, r0, #1
 800561e:	3318      	adds	r3, #24
 8005620:	429a      	cmp	r2, r3
 8005622:	bf08      	it	eq
 8005624:	f040 0001 	orreq.w	r0, r0, #1
 8005628:	4613      	mov	r3, r2
 800562a:	b918      	cbnz	r0, 8005634 <HAL_DMA_IRQHandler+0x198>
 800562c:	483a      	ldr	r0, [pc, #232]	; (8005718 <HAL_DMA_IRQHandler+0x27c>)
 800562e:	4282      	cmp	r2, r0
 8005630:	f040 825a 	bne.w	8005ae8 <HAL_DMA_IRQHandler+0x64c>
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	0790      	lsls	r0, r2, #30
 8005638:	f140 81f1 	bpl.w	8005a1e <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800563c:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005640:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005642:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005646:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800564a:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800564e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005650:	f04f 0c10 	mov.w	ip, #16
 8005654:	fa0c fc01 	lsl.w	ip, ip, r1
 8005658:	ea1c 0f05 	tst.w	ip, r5
 800565c:	d075      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	482b      	ldr	r0, [pc, #172]	; (8005710 <HAL_DMA_IRQHandler+0x274>)
 8005662:	4b2e      	ldr	r3, [pc, #184]	; (800571c <HAL_DMA_IRQHandler+0x280>)
 8005664:	429a      	cmp	r2, r3
 8005666:	bf18      	it	ne
 8005668:	4282      	cmpne	r2, r0
 800566a:	f103 0318 	add.w	r3, r3, #24
 800566e:	bf0c      	ite	eq
 8005670:	2001      	moveq	r0, #1
 8005672:	2000      	movne	r0, #0
 8005674:	429a      	cmp	r2, r3
 8005676:	bf08      	it	eq
 8005678:	f040 0001 	orreq.w	r0, r0, #1
 800567c:	3318      	adds	r3, #24
 800567e:	429a      	cmp	r2, r3
 8005680:	bf08      	it	eq
 8005682:	f040 0001 	orreq.w	r0, r0, #1
 8005686:	3318      	adds	r3, #24
 8005688:	429a      	cmp	r2, r3
 800568a:	bf08      	it	eq
 800568c:	f040 0001 	orreq.w	r0, r0, #1
 8005690:	3318      	adds	r3, #24
 8005692:	429a      	cmp	r2, r3
 8005694:	bf08      	it	eq
 8005696:	f040 0001 	orreq.w	r0, r0, #1
 800569a:	3318      	adds	r3, #24
 800569c:	429a      	cmp	r2, r3
 800569e:	bf08      	it	eq
 80056a0:	f040 0001 	orreq.w	r0, r0, #1
 80056a4:	3318      	adds	r3, #24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf08      	it	eq
 80056aa:	f040 0001 	orreq.w	r0, r0, #1
 80056ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056b2:	429a      	cmp	r2, r3
 80056b4:	bf08      	it	eq
 80056b6:	f040 0001 	orreq.w	r0, r0, #1
 80056ba:	3318      	adds	r3, #24
 80056bc:	429a      	cmp	r2, r3
 80056be:	bf08      	it	eq
 80056c0:	f040 0001 	orreq.w	r0, r0, #1
 80056c4:	3318      	adds	r3, #24
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf08      	it	eq
 80056ca:	f040 0001 	orreq.w	r0, r0, #1
 80056ce:	3318      	adds	r3, #24
 80056d0:	429a      	cmp	r2, r3
 80056d2:	bf08      	it	eq
 80056d4:	f040 0001 	orreq.w	r0, r0, #1
 80056d8:	3318      	adds	r3, #24
 80056da:	429a      	cmp	r2, r3
 80056dc:	bf08      	it	eq
 80056de:	f040 0001 	orreq.w	r0, r0, #1
 80056e2:	3318      	adds	r3, #24
 80056e4:	429a      	cmp	r2, r3
 80056e6:	bf08      	it	eq
 80056e8:	f040 0001 	orreq.w	r0, r0, #1
 80056ec:	3318      	adds	r3, #24
 80056ee:	429a      	cmp	r2, r3
 80056f0:	bf08      	it	eq
 80056f2:	f040 0001 	orreq.w	r0, r0, #1
 80056f6:	4613      	mov	r3, r2
 80056f8:	b918      	cbnz	r0, 8005702 <HAL_DMA_IRQHandler+0x266>
 80056fa:	4807      	ldr	r0, [pc, #28]	; (8005718 <HAL_DMA_IRQHandler+0x27c>)
 80056fc:	4282      	cmp	r2, r0
 80056fe:	f040 813c 	bne.w	800597a <HAL_DMA_IRQHandler+0x4de>
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	0712      	lsls	r2, r2, #28
 8005706:	f140 8177 	bpl.w	80059f8 <HAL_DMA_IRQHandler+0x55c>
 800570a:	e009      	b.n	8005720 <HAL_DMA_IRQHandler+0x284>
 800570c:	20000af0 	.word	0x20000af0
 8005710:	40020010 	.word	0x40020010
 8005714:	40020058 	.word	0x40020058
 8005718:	400204b8 	.word	0x400204b8
 800571c:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005720:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	0350      	lsls	r0, r2, #13
 800572a:	f100 8181 	bmi.w	8005a30 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	05d2      	lsls	r2, r2, #23
 8005732:	d403      	bmi.n	800573c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f022 0208 	bic.w	r2, r2, #8
 800573a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800573c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800573e:	b10b      	cbz	r3, 8005744 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 8005740:	4620      	mov	r0, r4
 8005742:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005744:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005746:	f001 011f 	and.w	r1, r1, #31
 800574a:	2320      	movs	r3, #32
 800574c:	fa03 f101 	lsl.w	r1, r3, r1
 8005750:	4229      	tst	r1, r5
 8005752:	d066      	beq.n	8005822 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	4a92      	ldr	r2, [pc, #584]	; (80059a0 <HAL_DMA_IRQHandler+0x504>)
 8005758:	4892      	ldr	r0, [pc, #584]	; (80059a4 <HAL_DMA_IRQHandler+0x508>)
 800575a:	4283      	cmp	r3, r0
 800575c:	bf18      	it	ne
 800575e:	4293      	cmpne	r3, r2
 8005760:	f100 0018 	add.w	r0, r0, #24
 8005764:	bf0c      	ite	eq
 8005766:	2201      	moveq	r2, #1
 8005768:	2200      	movne	r2, #0
 800576a:	4283      	cmp	r3, r0
 800576c:	bf08      	it	eq
 800576e:	f042 0201 	orreq.w	r2, r2, #1
 8005772:	3018      	adds	r0, #24
 8005774:	4283      	cmp	r3, r0
 8005776:	bf08      	it	eq
 8005778:	f042 0201 	orreq.w	r2, r2, #1
 800577c:	3018      	adds	r0, #24
 800577e:	4283      	cmp	r3, r0
 8005780:	bf08      	it	eq
 8005782:	f042 0201 	orreq.w	r2, r2, #1
 8005786:	3018      	adds	r0, #24
 8005788:	4283      	cmp	r3, r0
 800578a:	bf08      	it	eq
 800578c:	f042 0201 	orreq.w	r2, r2, #1
 8005790:	3018      	adds	r0, #24
 8005792:	4283      	cmp	r3, r0
 8005794:	bf08      	it	eq
 8005796:	f042 0201 	orreq.w	r2, r2, #1
 800579a:	3018      	adds	r0, #24
 800579c:	4283      	cmp	r3, r0
 800579e:	bf08      	it	eq
 80057a0:	f042 0201 	orreq.w	r2, r2, #1
 80057a4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80057a8:	4283      	cmp	r3, r0
 80057aa:	bf08      	it	eq
 80057ac:	f042 0201 	orreq.w	r2, r2, #1
 80057b0:	3018      	adds	r0, #24
 80057b2:	4283      	cmp	r3, r0
 80057b4:	bf08      	it	eq
 80057b6:	f042 0201 	orreq.w	r2, r2, #1
 80057ba:	3018      	adds	r0, #24
 80057bc:	4283      	cmp	r3, r0
 80057be:	bf08      	it	eq
 80057c0:	f042 0201 	orreq.w	r2, r2, #1
 80057c4:	3018      	adds	r0, #24
 80057c6:	4283      	cmp	r3, r0
 80057c8:	bf08      	it	eq
 80057ca:	f042 0201 	orreq.w	r2, r2, #1
 80057ce:	3018      	adds	r0, #24
 80057d0:	4283      	cmp	r3, r0
 80057d2:	bf08      	it	eq
 80057d4:	f042 0201 	orreq.w	r2, r2, #1
 80057d8:	3018      	adds	r0, #24
 80057da:	4283      	cmp	r3, r0
 80057dc:	bf08      	it	eq
 80057de:	f042 0201 	orreq.w	r2, r2, #1
 80057e2:	3018      	adds	r0, #24
 80057e4:	4283      	cmp	r3, r0
 80057e6:	bf08      	it	eq
 80057e8:	f042 0201 	orreq.w	r2, r2, #1
 80057ec:	b91a      	cbnz	r2, 80057f6 <HAL_DMA_IRQHandler+0x35a>
 80057ee:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_DMA_IRQHandler+0x50c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	f040 80cf 	bne.w	8005994 <HAL_DMA_IRQHandler+0x4f8>
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	06dd      	lsls	r5, r3, #27
 80057fa:	d512      	bpl.n	8005822 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057fc:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005802:	2b04      	cmp	r3, #4
 8005804:	f000 80d4 	beq.w	80059b0 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	0352      	lsls	r2, r2, #13
 800580e:	f140 8118 	bpl.w	8005a42 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	031e      	lsls	r6, r3, #12
 8005816:	f140 8123 	bpl.w	8005a60 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 800581a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800581c:	b10b      	cbz	r3, 8005822 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 800581e:	4620      	mov	r0, r4
 8005820:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005822:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80e5 	beq.w	80059f4 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800582a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800582c:	07dd      	lsls	r5, r3, #31
 800582e:	d51f      	bpl.n	8005870 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 8005830:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005832:	2104      	movs	r1, #4
 8005834:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8005838:	6813      	ldr	r3, [r2, #0]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005840:	4a5a      	ldr	r2, [pc, #360]	; (80059ac <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005842:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005844:	fba2 7207 	umull	r7, r2, r2, r7
 8005848:	0a92      	lsrs	r2, r2, #10
 800584a:	e002      	b.n	8005852 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800584c:	680b      	ldr	r3, [r1, #0]
 800584e:	07d8      	lsls	r0, r3, #31
 8005850:	d504      	bpl.n	800585c <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 8005852:	9b01      	ldr	r3, [sp, #4]
 8005854:	3301      	adds	r3, #1
 8005856:	4293      	cmp	r3, r2
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	d9f7      	bls.n	800584c <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800585c:	680b      	ldr	r3, [r1, #0]
 800585e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005860:	bf4c      	ite	mi
 8005862:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005864:	2301      	movpl	r3, #1
 8005866:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800586a:	2300      	movs	r3, #0
 800586c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005870:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80be 	beq.w	80059f4 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 8005878:	4620      	mov	r0, r4
}
 800587a:	b003      	add	sp, #12
 800587c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005880:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	0752      	lsls	r2, r2, #29
 8005886:	d511      	bpl.n	80058ac <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	f022 0204 	bic.w	r2, r2, #4
 800588e:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005890:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005892:	f003 021f 	and.w	r2, r3, #31
 8005896:	2308      	movs	r3, #8
 8005898:	4093      	lsls	r3, r2
 800589a:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800589c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800589e:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058a2:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058a6:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058aa:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058ac:	fa25 f301 	lsr.w	r3, r5, r1
 80058b0:	07d8      	lsls	r0, r3, #31
 80058b2:	f57f ae66 	bpl.w	8005582 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	4839      	ldr	r0, [pc, #228]	; (80059a0 <HAL_DMA_IRQHandler+0x504>)
 80058ba:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <HAL_DMA_IRQHandler+0x508>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	bf18      	it	ne
 80058c0:	4282      	cmpne	r2, r0
 80058c2:	f103 0318 	add.w	r3, r3, #24
 80058c6:	bf0c      	ite	eq
 80058c8:	2001      	moveq	r0, #1
 80058ca:	2000      	movne	r0, #0
 80058cc:	429a      	cmp	r2, r3
 80058ce:	bf08      	it	eq
 80058d0:	f040 0001 	orreq.w	r0, r0, #1
 80058d4:	3318      	adds	r3, #24
 80058d6:	429a      	cmp	r2, r3
 80058d8:	bf08      	it	eq
 80058da:	f040 0001 	orreq.w	r0, r0, #1
 80058de:	3318      	adds	r3, #24
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf08      	it	eq
 80058e4:	f040 0001 	orreq.w	r0, r0, #1
 80058e8:	3318      	adds	r3, #24
 80058ea:	429a      	cmp	r2, r3
 80058ec:	bf08      	it	eq
 80058ee:	f040 0001 	orreq.w	r0, r0, #1
 80058f2:	3318      	adds	r3, #24
 80058f4:	429a      	cmp	r2, r3
 80058f6:	bf08      	it	eq
 80058f8:	f040 0001 	orreq.w	r0, r0, #1
 80058fc:	3318      	adds	r3, #24
 80058fe:	429a      	cmp	r2, r3
 8005900:	bf08      	it	eq
 8005902:	f040 0001 	orreq.w	r0, r0, #1
 8005906:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800590a:	429a      	cmp	r2, r3
 800590c:	bf08      	it	eq
 800590e:	f040 0001 	orreq.w	r0, r0, #1
 8005912:	3318      	adds	r3, #24
 8005914:	429a      	cmp	r2, r3
 8005916:	bf08      	it	eq
 8005918:	f040 0001 	orreq.w	r0, r0, #1
 800591c:	3318      	adds	r3, #24
 800591e:	429a      	cmp	r2, r3
 8005920:	bf08      	it	eq
 8005922:	f040 0001 	orreq.w	r0, r0, #1
 8005926:	3318      	adds	r3, #24
 8005928:	429a      	cmp	r2, r3
 800592a:	bf08      	it	eq
 800592c:	f040 0001 	orreq.w	r0, r0, #1
 8005930:	3318      	adds	r3, #24
 8005932:	429a      	cmp	r2, r3
 8005934:	bf08      	it	eq
 8005936:	f040 0001 	orreq.w	r0, r0, #1
 800593a:	3318      	adds	r3, #24
 800593c:	429a      	cmp	r2, r3
 800593e:	bf08      	it	eq
 8005940:	f040 0001 	orreq.w	r0, r0, #1
 8005944:	3318      	adds	r3, #24
 8005946:	429a      	cmp	r2, r3
 8005948:	bf08      	it	eq
 800594a:	f040 0001 	orreq.w	r0, r0, #1
 800594e:	4613      	mov	r3, r2
 8005950:	2800      	cmp	r0, #0
 8005952:	f47f ae07 	bne.w	8005564 <HAL_DMA_IRQHandler+0xc8>
 8005956:	4814      	ldr	r0, [pc, #80]	; (80059a8 <HAL_DMA_IRQHandler+0x50c>)
 8005958:	4282      	cmp	r2, r0
 800595a:	f43f ae03 	beq.w	8005564 <HAL_DMA_IRQHandler+0xc8>
 800595e:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005960:	2304      	movs	r3, #4
 8005962:	408b      	lsls	r3, r1
 8005964:	422b      	tst	r3, r5
 8005966:	f040 80bf 	bne.w	8005ae8 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800596a:	f04f 0c10 	mov.w	ip, #16
 800596e:	fa0c fc01 	lsl.w	ip, ip, r1
 8005972:	ea15 0f0c 	tst.w	r5, ip
 8005976:	f43f aee8 	beq.w	800574a <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	075b      	lsls	r3, r3, #29
 800597e:	f53f aecf 	bmi.w	8005720 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005982:	f00e 0e1f 	and.w	lr, lr, #31
 8005986:	2120      	movs	r1, #32
 8005988:	fa01 f10e 	lsl.w	r1, r1, lr
 800598c:	420d      	tst	r5, r1
 800598e:	f43f af48 	beq.w	8005822 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005992:	4613      	mov	r3, r2
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	0798      	lsls	r0, r3, #30
 8005998:	f57f af43 	bpl.w	8005822 <HAL_DMA_IRQHandler+0x386>
 800599c:	e72e      	b.n	80057fc <HAL_DMA_IRQHandler+0x360>
 800599e:	bf00      	nop
 80059a0:	40020010 	.word	0x40020010
 80059a4:	40020028 	.word	0x40020028
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	f023 0316 	bic.w	r3, r3, #22
 80059b8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	6953      	ldr	r3, [r2, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d04f      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059d6:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80059d8:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059da:	f002 021f 	and.w	r2, r2, #31
 80059de:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 80059e0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059e2:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 80059e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80059e6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80059ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f47f af42 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
}
 80059f4:	b003      	add	sp, #12
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059f8:	2220      	movs	r2, #32
 80059fa:	fa02 f101 	lsl.w	r1, r2, r1
 80059fe:	420d      	tst	r5, r1
 8005a00:	f47f aef9 	bne.w	80057f6 <HAL_DMA_IRQHandler+0x35a>
 8005a04:	e70d      	b.n	8005822 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a06:	f04f 0c04 	mov.w	ip, #4
 8005a0a:	fa0c fc01 	lsl.w	ip, ip, r1
 8005a0e:	ea15 0f0c 	tst.w	r5, ip
 8005a12:	f43f ae1d 	beq.w	8005650 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	0790      	lsls	r0, r2, #30
 8005a1a:	f53f ae0f 	bmi.w	800563c <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a1e:	f04f 0c10 	mov.w	ip, #16
 8005a22:	fa0c fc01 	lsl.w	ip, ip, r1
 8005a26:	ea15 0f0c 	tst.w	r5, ip
 8005a2a:	f47f ae6a 	bne.w	8005702 <HAL_DMA_IRQHandler+0x266>
 8005a2e:	e68c      	b.n	800574a <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0319      	lsls	r1, r3, #12
 8005a34:	f57f ae82 	bpl.w	800573c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f47f ae80 	bne.w	8005740 <HAL_DMA_IRQHandler+0x2a4>
 8005a40:	e680      	b.n	8005744 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005a48:	f47f aee7 	bne.w	800581a <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	f021 0110 	bic.w	r1, r1, #16
 8005a52:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005a54:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8005a56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005a5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8005a5e:	e6dc      	b.n	800581a <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8005a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f aedb 	bne.w	800581e <HAL_DMA_IRQHandler+0x382>
 8005a68:	e6db      	b.n	8005822 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ac      	bne.n	80059ca <HAL_DMA_IRQHandler+0x52e>
 8005a70:	e7b0      	b.n	80059d4 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a72:	4a9b      	ldr	r2, [pc, #620]	; (8005ce0 <HAL_DMA_IRQHandler+0x844>)
 8005a74:	489b      	ldr	r0, [pc, #620]	; (8005ce4 <HAL_DMA_IRQHandler+0x848>)
 8005a76:	4283      	cmp	r3, r0
 8005a78:	bf18      	it	ne
 8005a7a:	4293      	cmpne	r3, r2
 8005a7c:	f100 0014 	add.w	r0, r0, #20
 8005a80:	bf0c      	ite	eq
 8005a82:	2201      	moveq	r2, #1
 8005a84:	2200      	movne	r2, #0
 8005a86:	4283      	cmp	r3, r0
 8005a88:	bf08      	it	eq
 8005a8a:	f042 0201 	orreq.w	r2, r2, #1
 8005a8e:	3014      	adds	r0, #20
 8005a90:	4283      	cmp	r3, r0
 8005a92:	bf08      	it	eq
 8005a94:	f042 0201 	orreq.w	r2, r2, #1
 8005a98:	3014      	adds	r0, #20
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	bf08      	it	eq
 8005a9e:	f042 0201 	orreq.w	r2, r2, #1
 8005aa2:	3014      	adds	r0, #20
 8005aa4:	4283      	cmp	r3, r0
 8005aa6:	bf08      	it	eq
 8005aa8:	f042 0201 	orreq.w	r2, r2, #1
 8005aac:	3014      	adds	r0, #20
 8005aae:	4283      	cmp	r3, r0
 8005ab0:	bf08      	it	eq
 8005ab2:	f042 0201 	orreq.w	r2, r2, #1
 8005ab6:	b912      	cbnz	r2, 8005abe <HAL_DMA_IRQHandler+0x622>
 8005ab8:	4a8b      	ldr	r2, [pc, #556]	; (8005ce8 <HAL_DMA_IRQHandler+0x84c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d19a      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005abe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005ac0:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ac2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ac4:	f000 001f 	and.w	r0, r0, #31
 8005ac8:	4085      	lsls	r5, r0
 8005aca:	420d      	tst	r5, r1
 8005acc:	d018      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x664>
 8005ace:	0757      	lsls	r7, r2, #29
 8005ad0:	d516      	bpl.n	8005b00 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ad4:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad6:	d544      	bpl.n	8005b62 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ad8:	03d2      	lsls	r2, r2, #15
 8005ada:	f100 8099 	bmi.w	8005c10 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ade:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f aec9 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
 8005ae6:	e785      	b.n	80059f4 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae8:	f00e 011f 	and.w	r1, lr, #31
 8005aec:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005af0:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005af2:	fa0c fc01 	lsl.w	ip, ip, r1
 8005af6:	ea15 0f0c 	tst.w	r5, ip
 8005afa:	f47f af3e 	bne.w	800597a <HAL_DMA_IRQHandler+0x4de>
 8005afe:	e624      	b.n	800574a <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b00:	2502      	movs	r5, #2
 8005b02:	4085      	lsls	r5, r0
 8005b04:	420d      	tst	r5, r1
 8005b06:	d00d      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x688>
 8005b08:	0797      	lsls	r7, r2, #30
 8005b0a:	d50b      	bpl.n	8005b24 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b0c:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b0e:	0416      	lsls	r6, r2, #16
 8005b10:	f140 8083 	bpl.w	8005c1a <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b14:	03d5      	lsls	r5, r2, #15
 8005b16:	f100 80dd 	bmi.w	8005cd4 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8005b1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f47f aeab 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
 8005b22:	e767      	b.n	80059f4 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b24:	2508      	movs	r5, #8
 8005b26:	fa05 f000 	lsl.w	r0, r5, r0
 8005b2a:	4208      	tst	r0, r1
 8005b2c:	f43f af62 	beq.w	80059f4 <HAL_DMA_IRQHandler+0x558>
 8005b30:	0711      	lsls	r1, r2, #28
 8005b32:	f57f af5f 	bpl.w	80059f4 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b36:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b38:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b3a:	f021 010e 	bic.w	r1, r1, #14
 8005b3e:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005b40:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8005b4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b50:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005b52:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005b56:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f47f ae8c 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
 8005b60:	e748      	b.n	80059f4 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b62:	0693      	lsls	r3, r2, #26
 8005b64:	d454      	bmi.n	8005c10 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	4b60      	ldr	r3, [pc, #384]	; (8005cec <HAL_DMA_IRQHandler+0x850>)
 8005b6a:	4861      	ldr	r0, [pc, #388]	; (8005cf0 <HAL_DMA_IRQHandler+0x854>)
 8005b6c:	4961      	ldr	r1, [pc, #388]	; (8005cf4 <HAL_DMA_IRQHandler+0x858>)
 8005b6e:	4282      	cmp	r2, r0
 8005b70:	bf18      	it	ne
 8005b72:	429a      	cmpne	r2, r3
 8005b74:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	428a      	cmp	r2, r1
 8005b80:	bf08      	it	eq
 8005b82:	f043 0301 	orreq.w	r3, r3, #1
 8005b86:	3130      	adds	r1, #48	; 0x30
 8005b88:	4282      	cmp	r2, r0
 8005b8a:	bf08      	it	eq
 8005b8c:	f043 0301 	orreq.w	r3, r3, #1
 8005b90:	3030      	adds	r0, #48	; 0x30
 8005b92:	428a      	cmp	r2, r1
 8005b94:	bf08      	it	eq
 8005b96:	f043 0301 	orreq.w	r3, r3, #1
 8005b9a:	3130      	adds	r1, #48	; 0x30
 8005b9c:	4282      	cmp	r2, r0
 8005b9e:	bf08      	it	eq
 8005ba0:	f043 0301 	orreq.w	r3, r3, #1
 8005ba4:	3030      	adds	r0, #48	; 0x30
 8005ba6:	428a      	cmp	r2, r1
 8005ba8:	bf08      	it	eq
 8005baa:	f043 0301 	orreq.w	r3, r3, #1
 8005bae:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005bb2:	4282      	cmp	r2, r0
 8005bb4:	bf08      	it	eq
 8005bb6:	f043 0301 	orreq.w	r3, r3, #1
 8005bba:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005bbe:	428a      	cmp	r2, r1
 8005bc0:	bf08      	it	eq
 8005bc2:	f043 0301 	orreq.w	r3, r3, #1
 8005bc6:	3130      	adds	r1, #48	; 0x30
 8005bc8:	4282      	cmp	r2, r0
 8005bca:	bf08      	it	eq
 8005bcc:	f043 0301 	orreq.w	r3, r3, #1
 8005bd0:	3030      	adds	r0, #48	; 0x30
 8005bd2:	428a      	cmp	r2, r1
 8005bd4:	bf08      	it	eq
 8005bd6:	f043 0301 	orreq.w	r3, r3, #1
 8005bda:	3130      	adds	r1, #48	; 0x30
 8005bdc:	4282      	cmp	r2, r0
 8005bde:	bf08      	it	eq
 8005be0:	f043 0301 	orreq.w	r3, r3, #1
 8005be4:	3030      	adds	r0, #48	; 0x30
 8005be6:	428a      	cmp	r2, r1
 8005be8:	bf08      	it	eq
 8005bea:	f043 0301 	orreq.w	r3, r3, #1
 8005bee:	3130      	adds	r1, #48	; 0x30
 8005bf0:	4282      	cmp	r2, r0
 8005bf2:	bf08      	it	eq
 8005bf4:	f043 0301 	orreq.w	r3, r3, #1
 8005bf8:	428a      	cmp	r2, r1
 8005bfa:	bf08      	it	eq
 8005bfc:	f043 0301 	orreq.w	r3, r3, #1
 8005c00:	b913      	cbnz	r3, 8005c08 <HAL_DMA_IRQHandler+0x76c>
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <HAL_DMA_IRQHandler+0x85c>)
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d179      	bne.n	8005cfc <HAL_DMA_IRQHandler+0x860>
 8005c08:	6813      	ldr	r3, [r2, #0]
 8005c0a:	f023 0308 	bic.w	r3, r3, #8
 8005c0e:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f47f ae30 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
 8005c18:	e6ec      	b.n	80059f4 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c1a:	0690      	lsls	r0, r2, #26
 8005c1c:	d45a      	bmi.n	8005cd4 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	4b32      	ldr	r3, [pc, #200]	; (8005cec <HAL_DMA_IRQHandler+0x850>)
 8005c22:	4833      	ldr	r0, [pc, #204]	; (8005cf0 <HAL_DMA_IRQHandler+0x854>)
 8005c24:	4933      	ldr	r1, [pc, #204]	; (8005cf4 <HAL_DMA_IRQHandler+0x858>)
 8005c26:	4282      	cmp	r2, r0
 8005c28:	bf18      	it	ne
 8005c2a:	429a      	cmpne	r2, r3
 8005c2c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	428a      	cmp	r2, r1
 8005c38:	bf08      	it	eq
 8005c3a:	f043 0301 	orreq.w	r3, r3, #1
 8005c3e:	3130      	adds	r1, #48	; 0x30
 8005c40:	4282      	cmp	r2, r0
 8005c42:	bf08      	it	eq
 8005c44:	f043 0301 	orreq.w	r3, r3, #1
 8005c48:	3030      	adds	r0, #48	; 0x30
 8005c4a:	428a      	cmp	r2, r1
 8005c4c:	bf08      	it	eq
 8005c4e:	f043 0301 	orreq.w	r3, r3, #1
 8005c52:	3130      	adds	r1, #48	; 0x30
 8005c54:	4282      	cmp	r2, r0
 8005c56:	bf08      	it	eq
 8005c58:	f043 0301 	orreq.w	r3, r3, #1
 8005c5c:	3030      	adds	r0, #48	; 0x30
 8005c5e:	428a      	cmp	r2, r1
 8005c60:	bf08      	it	eq
 8005c62:	f043 0301 	orreq.w	r3, r3, #1
 8005c66:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005c6a:	4282      	cmp	r2, r0
 8005c6c:	bf08      	it	eq
 8005c6e:	f043 0301 	orreq.w	r3, r3, #1
 8005c72:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005c76:	428a      	cmp	r2, r1
 8005c78:	bf08      	it	eq
 8005c7a:	f043 0301 	orreq.w	r3, r3, #1
 8005c7e:	3130      	adds	r1, #48	; 0x30
 8005c80:	4282      	cmp	r2, r0
 8005c82:	bf08      	it	eq
 8005c84:	f043 0301 	orreq.w	r3, r3, #1
 8005c88:	3030      	adds	r0, #48	; 0x30
 8005c8a:	428a      	cmp	r2, r1
 8005c8c:	bf08      	it	eq
 8005c8e:	f043 0301 	orreq.w	r3, r3, #1
 8005c92:	3130      	adds	r1, #48	; 0x30
 8005c94:	4282      	cmp	r2, r0
 8005c96:	bf08      	it	eq
 8005c98:	f043 0301 	orreq.w	r3, r3, #1
 8005c9c:	3030      	adds	r0, #48	; 0x30
 8005c9e:	428a      	cmp	r2, r1
 8005ca0:	bf08      	it	eq
 8005ca2:	f043 0301 	orreq.w	r3, r3, #1
 8005ca6:	3130      	adds	r1, #48	; 0x30
 8005ca8:	4282      	cmp	r2, r0
 8005caa:	bf08      	it	eq
 8005cac:	f043 0301 	orreq.w	r3, r3, #1
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	bf08      	it	eq
 8005cb4:	f043 0301 	orreq.w	r3, r3, #1
 8005cb8:	b913      	cbnz	r3, 8005cc0 <HAL_DMA_IRQHandler+0x824>
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <HAL_DMA_IRQHandler+0x85c>)
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d122      	bne.n	8005d06 <HAL_DMA_IRQHandler+0x86a>
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	f023 0314 	bic.w	r3, r3, #20
 8005cc6:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005cc8:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8005cca:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8005ccc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005cd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f47f adce 	bne.w	8005878 <HAL_DMA_IRQHandler+0x3dc>
 8005cdc:	e68a      	b.n	80059f4 <HAL_DMA_IRQHandler+0x558>
 8005cde:	bf00      	nop
 8005ce0:	58025408 	.word	0x58025408
 8005ce4:	5802541c 	.word	0x5802541c
 8005ce8:	58025494 	.word	0x58025494
 8005cec:	40020010 	.word	0x40020010
 8005cf0:	40020028 	.word	0x40020028
 8005cf4:	40020040 	.word	0x40020040
 8005cf8:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	f023 0304 	bic.w	r3, r3, #4
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e784      	b.n	8005c10 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	f023 030a 	bic.w	r3, r3, #10
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e7db      	b.n	8005cc8 <HAL_DMA_IRQHandler+0x82c>

08005d10 <HAL_DMA_GetState>:
  return hdma->State;
 8005d10:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop

08005d18 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005d18:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005d1a:	4770      	bx	lr

08005d1c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d1c:	680b      	ldr	r3, [r1, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8119 	beq.w	8005f56 <HAL_GPIO_Init+0x23a>
 8005d24:	f04f 0c00 	mov.w	ip, #0
{
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005d2c:	4662      	mov	r2, ip
{
 8005d2e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d30:	4d94      	ldr	r5, [pc, #592]	; (8005f84 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d32:	4f95      	ldr	r7, [pc, #596]	; (8005f88 <HAL_GPIO_Init+0x26c>)
 8005d34:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8005fa0 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d38:	f04f 0901 	mov.w	r9, #1
 8005d3c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8005d40:	ea19 0e03 	ands.w	lr, r9, r3
 8005d44:	f000 80c1 	beq.w	8005eca <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d48:	684b      	ldr	r3, [r1, #4]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	1e5c      	subs	r4, r3, #1
 8005d50:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d52:	f04f 0403 	mov.w	r4, #3
 8005d56:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d5a:	f240 80c0 	bls.w	8005ede <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d5e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d026      	beq.n	8005db2 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8005d64:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d66:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d6a:	688b      	ldr	r3, [r1, #8]
 8005d6c:	fa03 f30c 	lsl.w	r3, r3, ip
 8005d70:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8005d74:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d76:	684b      	ldr	r3, [r1, #4]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d118      	bne.n	8005db2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8005d80:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d84:	f002 0b07 	and.w	fp, r2, #7
 8005d88:	230f      	movs	r3, #15
 8005d8a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8005d8e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005d92:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d96:	fa03 f30b 	lsl.w	r3, r3, fp
 8005d9a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d9e:	690b      	ldr	r3, [r1, #16]
 8005da0:	fa03 f30b 	lsl.w	r3, r3, fp
 8005da4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005da8:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dac:	684b      	ldr	r3, [r1, #4]
 8005dae:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8005db2:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db6:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dba:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dbe:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8005dc0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dc2:	684b      	ldr	r3, [r1, #4]
 8005dc4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005dc8:	d07e      	beq.n	8005ec8 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dca:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005dce:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd2:	f002 0903 	and.w	r9, r2, #3
 8005dd6:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dda:	f043 0302 	orr.w	r3, r3, #2
 8005dde:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005de2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005dec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005df0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005df4:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005e00:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e02:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e06:	d02b      	beq.n	8005e60 <HAL_GPIO_Init+0x144>
 8005e08:	4540      	cmp	r0, r8
 8005e0a:	f000 8088 	beq.w	8005f1e <HAL_GPIO_Init+0x202>
 8005e0e:	4e5f      	ldr	r6, [pc, #380]	; (8005f8c <HAL_GPIO_Init+0x270>)
 8005e10:	42b0      	cmp	r0, r6
 8005e12:	f000 808b 	beq.w	8005f2c <HAL_GPIO_Init+0x210>
 8005e16:	4e5e      	ldr	r6, [pc, #376]	; (8005f90 <HAL_GPIO_Init+0x274>)
 8005e18:	42b0      	cmp	r0, r6
 8005e1a:	d079      	beq.n	8005f10 <HAL_GPIO_Init+0x1f4>
 8005e1c:	4e5d      	ldr	r6, [pc, #372]	; (8005f94 <HAL_GPIO_Init+0x278>)
 8005e1e:	42b0      	cmp	r0, r6
 8005e20:	f000 8092 	beq.w	8005f48 <HAL_GPIO_Init+0x22c>
 8005e24:	4e5c      	ldr	r6, [pc, #368]	; (8005f98 <HAL_GPIO_Init+0x27c>)
 8005e26:	42b0      	cmp	r0, r6
 8005e28:	f000 8096 	beq.w	8005f58 <HAL_GPIO_Init+0x23c>
 8005e2c:	4e5b      	ldr	r6, [pc, #364]	; (8005f9c <HAL_GPIO_Init+0x280>)
 8005e2e:	42b0      	cmp	r0, r6
 8005e30:	f000 8083 	beq.w	8005f3a <HAL_GPIO_Init+0x21e>
 8005e34:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8005fa4 <HAL_GPIO_Init+0x288>
 8005e38:	4550      	cmp	r0, sl
 8005e3a:	f000 8094 	beq.w	8005f66 <HAL_GPIO_Init+0x24a>
 8005e3e:	f8df a168 	ldr.w	sl, [pc, #360]	; 8005fa8 <HAL_GPIO_Init+0x28c>
 8005e42:	4550      	cmp	r0, sl
 8005e44:	f000 8096 	beq.w	8005f74 <HAL_GPIO_Init+0x258>
 8005e48:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005fac <HAL_GPIO_Init+0x290>
 8005e4c:	4550      	cmp	r0, sl
 8005e4e:	bf0c      	ite	eq
 8005e50:	f04f 0a09 	moveq.w	sl, #9
 8005e54:	f04f 0a0a 	movne.w	sl, #10
 8005e58:	fa0a f909 	lsl.w	r9, sl, r9
 8005e5c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e60:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e66:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8005e68:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8005e6c:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005e6e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e72:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8005e74:	bf54      	ite	pl
 8005e76:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005e78:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8005e7c:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e80:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8005e82:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005e86:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e8a:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8005e8c:	bf54      	ite	pl
 8005e8e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005e90:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8005e94:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e98:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005e9a:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e9e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ea2:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8005ea4:	bf54      	ite	pl
 8005ea6:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005ea8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 8005eac:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eb0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005eb2:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eb6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005eb8:	bf54      	ite	pl
 8005eba:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8005ebc:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ec0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005ec4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ec8:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8005eca:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ecc:	f10c 0c02 	add.w	ip, ip, #2
 8005ed0:	fa33 f402 	lsrs.w	r4, r3, r2
 8005ed4:	f47f af30 	bne.w	8005d38 <HAL_GPIO_Init+0x1c>
  }
}
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005ede:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ee0:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ee4:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ee6:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ee8:	fa03 f30c 	lsl.w	r3, r3, ip
 8005eec:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8005ef0:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef2:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8005ef4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef8:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efc:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f00:	4093      	lsls	r3, r2
 8005f02:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8005f06:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f08:	684b      	ldr	r3, [r1, #4]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	e727      	b.n	8005d60 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f10:	f04f 0a03 	mov.w	sl, #3
 8005f14:	fa0a f909 	lsl.w	r9, sl, r9
 8005f18:	ea43 0309 	orr.w	r3, r3, r9
 8005f1c:	e7a0      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f1e:	f04f 0a01 	mov.w	sl, #1
 8005f22:	fa0a f909 	lsl.w	r9, sl, r9
 8005f26:	ea43 0309 	orr.w	r3, r3, r9
 8005f2a:	e799      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f2c:	f04f 0a02 	mov.w	sl, #2
 8005f30:	fa0a f909 	lsl.w	r9, sl, r9
 8005f34:	ea43 0309 	orr.w	r3, r3, r9
 8005f38:	e792      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f3a:	f04f 0a06 	mov.w	sl, #6
 8005f3e:	fa0a f909 	lsl.w	r9, sl, r9
 8005f42:	ea43 0309 	orr.w	r3, r3, r9
 8005f46:	e78b      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f48:	f04f 0a04 	mov.w	sl, #4
 8005f4c:	fa0a f909 	lsl.w	r9, sl, r9
 8005f50:	ea43 0309 	orr.w	r3, r3, r9
 8005f54:	e784      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f56:	4770      	bx	lr
 8005f58:	f04f 0a05 	mov.w	sl, #5
 8005f5c:	fa0a f909 	lsl.w	r9, sl, r9
 8005f60:	ea43 0309 	orr.w	r3, r3, r9
 8005f64:	e77c      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f66:	f04f 0a07 	mov.w	sl, #7
 8005f6a:	fa0a f909 	lsl.w	r9, sl, r9
 8005f6e:	ea43 0309 	orr.w	r3, r3, r9
 8005f72:	e775      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f74:	f04f 0a08 	mov.w	sl, #8
 8005f78:	fa0a f909 	lsl.w	r9, sl, r9
 8005f7c:	ea43 0309 	orr.w	r3, r3, r9
 8005f80:	e76e      	b.n	8005e60 <HAL_GPIO_Init+0x144>
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
 8005f88:	58020000 	.word	0x58020000
 8005f8c:	58020800 	.word	0x58020800
 8005f90:	58020c00 	.word	0x58020c00
 8005f94:	58021000 	.word	0x58021000
 8005f98:	58021400 	.word	0x58021400
 8005f9c:	58021800 	.word	0x58021800
 8005fa0:	58020400 	.word	0x58020400
 8005fa4:	58021c00 	.word	0x58021c00
 8005fa8:	58022000 	.word	0x58022000
 8005fac:	58022400 	.word	0x58022400

08005fb0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fb0:	6903      	ldr	r3, [r0, #16]
 8005fb2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005fb4:	bf14      	ite	ne
 8005fb6:	2001      	movne	r0, #1
 8005fb8:	2000      	moveq	r0, #0
 8005fba:	4770      	bx	lr

08005fbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fbc:	b902      	cbnz	r2, 8005fc0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fbe:	0409      	lsls	r1, r1, #16
 8005fc0:	6181      	str	r1, [r0, #24]
  }
}
 8005fc2:	4770      	bx	lr

08005fc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fc8:	6803      	ldr	r3, [r0, #0]
{
 8005fca:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	0694      	lsls	r4, r2, #26
 8005fd0:	d46d      	bmi.n	80060ae <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fda:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fdc:	f014 0410 	ands.w	r4, r4, #16
 8005fe0:	d068      	beq.n	80060b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 8005fe2:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe4:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8005fe8:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fea:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	46b2      	mov	sl, r6
 8005fee:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	d161      	bne.n	80060b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 8005ff4:	0690      	lsls	r0, r2, #26
 8005ff6:	f100 8085 	bmi.w	8006104 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 8005ffa:	f1ba 0f00 	cmp.w	sl, #0
 8005ffe:	d105      	bne.n	800600c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8006000:	699c      	ldr	r4, [r3, #24]
 8006002:	06a1      	lsls	r1, r4, #26
 8006004:	d5fc      	bpl.n	8006000 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006006:	2220      	movs	r2, #32
 8006008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800600a:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 800600c:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8006010:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006012:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006014:	05d0      	lsls	r0, r2, #23
 8006016:	d535      	bpl.n	8006084 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006018:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800601c:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800601e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006022:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006024:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006026:	d505      	bpl.n	8006034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006028:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800602c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006030:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006032:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006034:	0597      	lsls	r7, r2, #22
 8006036:	d505      	bpl.n	8006044 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006038:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800603c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006040:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	0790      	lsls	r0, r2, #30
 8006048:	d502      	bpl.n	8006050 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	07d1      	lsls	r1, r2, #31
 8006054:	d404      	bmi.n	8006060 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006064:	4835      	ldr	r0, [pc, #212]	; (800613c <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006066:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8006068:	4002      	ands	r2, r0
      return HAL_ERROR;
 800606a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800606c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800606e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006070:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006074:	4323      	orrs	r3, r4
 8006076:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006078:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800607c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8006080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006084:	0550      	lsls	r0, r2, #21
 8006086:	d4cf      	bmi.n	8006028 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006088:	0596      	lsls	r6, r2, #22
 800608a:	d4d5      	bmi.n	8006038 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 800608c:	2900      	cmp	r1, #0
 800608e:	d1d9      	bne.n	8006044 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006090:	f7fd ffcc 	bl	800402c <HAL_GetTick>
 8006094:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006098:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	42b8      	cmp	r0, r7
 800609c:	d800      	bhi.n	80060a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 800609e:	b91f      	cbnz	r7, 80060a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	f012 0220 	ands.w	r2, r2, #32
 80060a6:	d032      	beq.n	800610e <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	0692      	lsls	r2, r2, #26
 80060ac:	d595      	bpl.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80060ae:	2000      	movs	r0, #0
}
 80060b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	4621      	mov	r1, r4
 80060b6:	e7ac      	b.n	8006012 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060b8:	0692      	lsls	r2, r2, #26
 80060ba:	d423      	bmi.n	8006104 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80060bc:	f1ba 0f00 	cmp.w	sl, #0
 80060c0:	d1a4      	bne.n	800600c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fd ffb3 	bl	800402c <HAL_GetTick>
 80060c6:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060c8:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	4287      	cmp	r7, r0
 80060cc:	d301      	bcc.n	80060d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 80060ce:	2f00      	cmp	r7, #0
 80060d0:	d18d      	bne.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060d2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80060d4:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060d8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80060da:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060dc:	0409      	lsls	r1, r1, #16
 80060de:	d503      	bpl.n	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 80060e0:	0441      	lsls	r1, r0, #17
 80060e2:	d401      	bmi.n	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 80060e4:	2a20      	cmp	r2, #32
 80060e6:	d11f      	bne.n	8006128 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	0690      	lsls	r0, r2, #26
 80060ec:	f53f af7f 	bmi.w	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060f0:	f7fd ff9c 	bl	800402c <HAL_GetTick>
 80060f4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060f6:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060f8:	2819      	cmp	r0, #25
 80060fa:	d9f5      	bls.n	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	2620      	movs	r6, #32
              status = HAL_ERROR;
 80060fe:	f04f 0a01 	mov.w	sl, #1
 8006102:	e774      	b.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8006104:	f1ba 0f00 	cmp.w	sl, #0
 8006108:	f43f af7d 	beq.w	8006006 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800610c:	e77e      	b.n	800600c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800610e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006110:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8006112:	2001      	movs	r0, #1
 8006114:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006118:	430b      	orrs	r3, r1
 800611a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800611c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006120:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800612e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006130:	f7fd ff7c 	bl	800402c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006134:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8006136:	4604      	mov	r4, r0
 8006138:	e7d6      	b.n	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800613a:	bf00      	nop
 800613c:	fe00e800 	.word	0xfe00e800

08006140 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006140:	2800      	cmp	r0, #0
 8006142:	d056      	beq.n	80061f2 <HAL_I2C_Init+0xb2>
{
 8006144:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006146:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800614a:	4604      	mov	r4, r0
 800614c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006150:	2b00      	cmp	r3, #0
 8006152:	d049      	beq.n	80061e8 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8006154:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006156:	2324      	movs	r3, #36	; 0x24
 8006158:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800615c:	6813      	ldr	r3, [r2, #0]
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006164:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006168:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800616c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	6893      	ldr	r3, [r2, #8]
 8006172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006176:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006178:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800617a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800617c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	bf0c      	ite	eq
 8006182:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006186:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800618a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800618c:	68e3      	ldr	r3, [r4, #12]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d103      	bne.n	800619a <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006198:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800619a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800619c:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <HAL_I2C_Init+0xb8>)
 80061a2:	6851      	ldr	r1, [r2, #4]
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	68d3      	ldr	r3, [r2, #12]
 80061ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061b0:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061b2:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80061ba:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061bc:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80061c2:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061c4:	6821      	ldr	r1, [r4, #0]
 80061c6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80061ca:	4303      	orrs	r3, r0
  return HAL_OK;
 80061cc:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061ce:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 80061d0:	6821      	ldr	r1, [r4, #0]
 80061d2:	680b      	ldr	r3, [r1, #0]
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061da:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061e0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80061e6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80061e8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80061ec:	f7fb f87c 	bl	80012e8 <HAL_I2C_MspInit>
 80061f0:	e7b0      	b.n	8006154 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80061f2:	2001      	movs	r0, #1
}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	02008000 	.word	0x02008000

080061fc <HAL_I2C_Master_Transmit>:
{
 80061fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006202:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006206:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006208:	2b20      	cmp	r3, #32
 800620a:	d12c      	bne.n	8006266 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800620c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006210:	4683      	mov	fp, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d027      	beq.n	8006266 <HAL_I2C_Master_Transmit+0x6a>
 8006216:	2301      	movs	r3, #1
 8006218:	468a      	mov	sl, r1
 800621a:	4616      	mov	r6, r2
 800621c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006220:	f7fd ff04 	bl	800402c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006224:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8006228:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	0417      	lsls	r7, r2, #16
 800622e:	d51d      	bpl.n	800626c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006230:	f7fd fefc 	bl	800402c <HAL_GetTick>
 8006234:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006238:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623c:	2819      	cmp	r0, #25
 800623e:	d9f4      	bls.n	800622a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	0410      	lsls	r0, r2, #16
 8006244:	d5f1      	bpl.n	800622a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006246:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800624a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	2200      	movs	r2, #0
      return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006250:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8006252:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006256:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800625a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8006262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8006266:	2002      	movs	r0, #2
}
 8006268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800626c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800626e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8006270:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006274:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006278:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800627a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800627e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006282:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 8006286:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800628a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 800628e:	b292      	uxth	r2, r2
 8006290:	2aff      	cmp	r2, #255	; 0xff
 8006292:	d87e      	bhi.n	8006392 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8006294:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006298:	49ad      	ldr	r1, [pc, #692]	; (8006550 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 800629a:	b292      	uxth	r2, r2
 800629c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062a0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80062a2:	6858      	ldr	r0, [r3, #4]
 80062a4:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062a6:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80062aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80062ae:	4301      	orrs	r1, r0
 80062b0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80062b4:	49a7      	ldr	r1, [pc, #668]	; (8006554 <HAL_I2C_Master_Transmit+0x358>)
 80062b6:	4311      	orrs	r1, r2
 80062b8:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 80062be:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8107 	beq.w	80064d8 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ca:	f8db 3000 	ldr.w	r3, [fp]
 80062ce:	699c      	ldr	r4, [r3, #24]
 80062d0:	f014 0402 	ands.w	r4, r4, #2
 80062d4:	f040 80c5 	bne.w	8006462 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 80062d8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062da:	f012 0210 	ands.w	r2, r2, #16
 80062de:	f000 808d 	beq.w	80063fc <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e2:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80062e4:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062ea:	f8db 3000 	ldr.w	r3, [fp]
 80062ee:	1c69      	adds	r1, r5, #1
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	f040 8085 	bne.w	8006400 <HAL_I2C_Master_Transmit+0x204>
 80062f6:	0690      	lsls	r0, r2, #26
 80062f8:	f100 8106 	bmi.w	8006508 <HAL_I2C_Master_Transmit+0x30c>
 80062fc:	b937      	cbnz	r7, 800630c <HAL_I2C_Master_Transmit+0x110>
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	0691      	lsls	r1, r2, #26
 8006302:	d5fc      	bpl.n	80062fe <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006304:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006308:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800630c:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8006310:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8006312:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006314:	05ce      	lsls	r6, r1, #23
 8006316:	d54b      	bpl.n	80063b0 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006318:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800631c:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800631e:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006322:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006324:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006328:	d506      	bpl.n	8006338 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800632a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800632e:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006332:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006334:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006338:	0589      	lsls	r1, r1, #22
 800633a:	d506      	bpl.n	800634a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800633c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006340:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006344:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006346:	f8db 3000 	ldr.w	r3, [fp]
 800634a:	6999      	ldr	r1, [r3, #24]
 800634c:	078e      	lsls	r6, r1, #30
 800634e:	d503      	bpl.n	8006358 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8006350:	2100      	movs	r1, #0
 8006352:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006354:	f8db 3000 	ldr.w	r3, [fp]
 8006358:	6999      	ldr	r1, [r3, #24]
 800635a:	07cd      	lsls	r5, r1, #31
 800635c:	d405      	bmi.n	800636a <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800635e:	6999      	ldr	r1, [r3, #24]
 8006360:	f041 0101 	orr.w	r1, r1, #1
 8006364:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8006366:	f8db 3000 	ldr.w	r3, [fp]
 800636a:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 800636e:	487a      	ldr	r0, [pc, #488]	; (8006558 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006370:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8006372:	4001      	ands	r1, r0
        return HAL_ERROR;
 8006374:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006376:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8006378:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800637c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006380:	4313      	orrs	r3, r2
 8006382:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006386:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 800638e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006392:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8006394:	496e      	ldr	r1, [pc, #440]	; (8006550 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006396:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800639e:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80063a2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80063a6:	4311      	orrs	r1, r2
 80063a8:	4a6c      	ldr	r2, [pc, #432]	; (800655c <HAL_I2C_Master_Transmit+0x360>)
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063ae:	e784      	b.n	80062ba <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063b0:	054c      	lsls	r4, r1, #21
 80063b2:	d4ba      	bmi.n	800632a <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063b4:	058f      	lsls	r7, r1, #22
 80063b6:	d4c1      	bmi.n	800633c <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d1c6      	bne.n	800634a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	1c6c      	adds	r4, r5, #1
 80063be:	d086      	beq.n	80062ce <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c0:	f7fd fe34 	bl	800402c <HAL_GetTick>
 80063c4:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063c8:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063cc:	4285      	cmp	r5, r0
 80063ce:	d302      	bcc.n	80063d6 <HAL_I2C_Master_Transmit+0x1da>
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	f47f af7c 	bne.w	80062ce <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	f012 0202 	ands.w	r2, r2, #2
 80063dc:	f47f af77 	bne.w	80062ce <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	2120      	movs	r1, #32
        return HAL_ERROR;
 80063e6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80063e8:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ec:	430b      	orrs	r3, r1
 80063ee:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063f2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 80063fa:	e735      	b.n	8006268 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	4610      	mov	r0, r2
 80063fe:	e788      	b.n	8006312 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006400:	0692      	lsls	r2, r2, #26
 8006402:	f100 8081 	bmi.w	8006508 <HAL_I2C_Master_Transmit+0x30c>
 8006406:	2f00      	cmp	r7, #0
 8006408:	d180      	bne.n	800630c <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800640a:	f7fd fe0f 	bl	800402c <HAL_GetTick>
 800640e:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006410:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006414:	4285      	cmp	r5, r0
 8006416:	d302      	bcc.n	800641e <HAL_I2C_Master_Transmit+0x222>
 8006418:	2d00      	cmp	r5, #0
 800641a:	f47f af68 	bne.w	80062ee <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800641e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006420:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006424:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8006426:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006428:	0409      	lsls	r1, r1, #16
 800642a:	d50c      	bpl.n	8006446 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800642c:	0441      	lsls	r1, r0, #17
 800642e:	d40a      	bmi.n	8006446 <HAL_I2C_Master_Transmit+0x24a>
 8006430:	2a20      	cmp	r2, #32
 8006432:	d008      	beq.n	8006446 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800643a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800643c:	f7fd fdf6 	bl	800402c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006440:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8006444:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	0690      	lsls	r0, r2, #26
 800644a:	f53f af50 	bmi.w	80062ee <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800644e:	f7fd fded 	bl	800402c <HAL_GetTick>
 8006452:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006454:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006458:	2819      	cmp	r0, #25
 800645a:	d9f4      	bls.n	8006446 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800645c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800645e:	2701      	movs	r7, #1
 8006460:	e745      	b.n	80062ee <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006462:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800646a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800646e:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8006472:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006474:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8006478:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800647a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800647c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800647e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8006480:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006484:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006488:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800648c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800648e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006492:	2b00      	cmp	r3, #0
 8006494:	f47f af13 	bne.w	80062be <HAL_I2C_Master_Transmit+0xc2>
 8006498:	2a00      	cmp	r2, #0
 800649a:	f43f af10 	beq.w	80062be <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649e:	f8db 2000 	ldr.w	r2, [fp]
 80064a2:	1c68      	adds	r0, r5, #1
 80064a4:	d134      	bne.n	8006510 <HAL_I2C_Master_Transmit+0x314>
 80064a6:	6993      	ldr	r3, [r2, #24]
 80064a8:	0619      	lsls	r1, r3, #24
 80064aa:	d5fc      	bpl.n	80064a6 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ac:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2bff      	cmp	r3, #255	; 0xff
 80064b4:	d958      	bls.n	8006568 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064b6:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80064b8:	4929      	ldr	r1, [pc, #164]	; (8006560 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ba:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80064be:	6853      	ldr	r3, [r2, #4]
 80064c0:	400b      	ands	r3, r1
 80064c2:	4928      	ldr	r1, [pc, #160]	; (8006564 <HAL_I2C_Master_Transmit+0x368>)
 80064c4:	ea4a 0303 	orr.w	r3, sl, r3
 80064c8:	4319      	orrs	r1, r3
 80064ca:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 80064cc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f47f aef9 	bne.w	80062ca <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d8:	4642      	mov	r2, r8
 80064da:	4629      	mov	r1, r5
 80064dc:	4658      	mov	r0, fp
 80064de:	f7ff fd71 	bl	8005fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d151      	bne.n	800658a <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e6:	f8db 3000 	ldr.w	r3, [fp]
 80064ea:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 80064ec:	4c1a      	ldr	r4, [pc, #104]	; (8006558 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064ee:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80064f0:	f8db 1000 	ldr.w	r1, [fp]
 80064f4:	684b      	ldr	r3, [r1, #4]
 80064f6:	4023      	ands	r3, r4
 80064f8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80064fe:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006502:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8006506:	e6af      	b.n	8006268 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8006508:	2f00      	cmp	r7, #0
 800650a:	f43f aefb 	beq.w	8006304 <HAL_I2C_Master_Transmit+0x108>
 800650e:	e6fd      	b.n	800630c <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006510:	6993      	ldr	r3, [r2, #24]
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	d4ca      	bmi.n	80064ac <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fd fd89 	bl	800402c <HAL_GetTick>
 800651a:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800651e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006522:	4285      	cmp	r5, r0
 8006524:	d301      	bcc.n	800652a <HAL_I2C_Master_Transmit+0x32e>
 8006526:	2d00      	cmp	r5, #0
 8006528:	d1bb      	bne.n	80064a2 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800652a:	6993      	ldr	r3, [r2, #24]
 800652c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006530:	d1b7      	bne.n	80064a2 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006532:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006536:	2120      	movs	r1, #32
          return HAL_ERROR;
 8006538:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800653a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800653e:	430a      	orrs	r2, r1
 8006540:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006544:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800654c:	e68c      	b.n	8006268 <HAL_I2C_Master_Transmit+0x6c>
 800654e:	bf00      	nop
 8006550:	fc009800 	.word	0xfc009800
 8006554:	02002000 	.word	0x02002000
 8006558:	fe00e800 	.word	0xfe00e800
 800655c:	01ff2000 	.word	0x01ff2000
 8006560:	fc009c00 	.word	0xfc009c00
 8006564:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 8006568:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800656c:	4808      	ldr	r0, [pc, #32]	; (8006590 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 800656e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006570:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8006572:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006576:	6853      	ldr	r3, [r2, #4]
 8006578:	4003      	ands	r3, r0
 800657a:	ea4a 0303 	orr.w	r3, sl, r3
 800657e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006586:	6053      	str	r3, [r2, #4]
}
 8006588:	e699      	b.n	80062be <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800658a:	2001      	movs	r0, #1
 800658c:	e66c      	b.n	8006268 <HAL_I2C_Master_Transmit+0x6c>
 800658e:	bf00      	nop
 8006590:	fc009c00 	.word	0xfc009c00

08006594 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006594:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8006596:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006598:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800659a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800659c:	b103      	cbz	r3, 80065a0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800659e:	4718      	bx	r3
}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop

080065a4 <HAL_I2C_SlaveTxCpltCallback>:
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <I2C_ITSlaveSeqCplt>:
{
 80065a8:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065aa:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ac:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065ae:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065b4:	0451      	lsls	r1, r2, #17
 80065b6:	d526      	bpl.n	8006606 <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065be:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065c4:	2b29      	cmp	r3, #41	; 0x29
 80065c6:	d028      	beq.n	800661a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065cc:	2b2a      	cmp	r3, #42	; 0x2a
 80065ce:	d000      	beq.n	80065d2 <I2C_ITSlaveSeqCplt+0x2a>
}
 80065d0:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80065d2:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065d4:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065d6:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80065d8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80065dc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065e0:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065e2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065e6:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065e8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80065ec:	2a28      	cmp	r2, #40	; 0x28
 80065ee:	bf0c      	ite	eq
 80065f0:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 80065f4:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065f8:	4013      	ands	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80065fc:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006600:	f014 fd46 	bl	801b090 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006604:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006606:	0412      	lsls	r2, r2, #16
 8006608:	d5da      	bpl.n	80065c0 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006610:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006612:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006616:	2b29      	cmp	r3, #41	; 0x29
 8006618:	d1d6      	bne.n	80065c8 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800661a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800661c:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800661e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006620:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006624:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006628:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800662a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800662e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006630:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006634:	2a28      	cmp	r2, #40	; 0x28
 8006636:	bf0c      	ite	eq
 8006638:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800663c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006640:	4013      	ands	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006644:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006648:	f7ff ffac 	bl	80065a4 <HAL_I2C_SlaveTxCpltCallback>
}
 800664c:	bd08      	pop	{r3, pc}
 800664e:	bf00      	nop

08006650 <HAL_I2C_AddrCallback>:
}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop

08006654 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006654:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006656:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006658:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800665a:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800665c:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800665e:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006660:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006662:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006664:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006668:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800666c:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800666e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006672:	d10f      	bne.n	8006694 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006674:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006678:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800667c:	f013 0306 	ands.w	r3, r3, #6
 8006680:	d106      	bne.n	8006690 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8006682:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006684:	3501      	adds	r5, #1
 8006686:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006688:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800668a:	2d02      	cmp	r5, #2
 800668c:	d00c      	beq.n	80066a8 <I2C_ITAddrCplt.part.0+0x54>
}
 800668e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006690:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800669a:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800669c:	2300      	movs	r3, #0
 800669e:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80066a2:	f7ff ffd5 	bl	8006650 <HAL_I2C_AddrCallback>
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80066a8:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 80066aa:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80066ac:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 80066ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80066b2:	f7ff ffcd 	bl	8006650 <HAL_I2C_AddrCallback>
}
 80066b6:	bd70      	pop	{r4, r5, r6, pc}

080066b8 <HAL_I2C_ListenCpltCallback>:
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop

080066bc <HAL_I2C_AbortCpltCallback>:
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <I2C_DMAAbort>:
{
 80066c0:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 80066c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066c6:	b10b      	cbz	r3, 80066cc <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066c8:	2200      	movs	r2, #0
 80066ca:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80066cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80066ce:	b10b      	cbz	r3, 80066d4 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066d0:	2200      	movs	r2, #0
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80066d8:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80066da:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066de:	d005      	beq.n	80066ec <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e0:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80066e6:	f014 fcf7 	bl	801b0d8 <__HAL_I2C_ErrorCallback_veneer>
}
 80066ea:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80066ec:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80066ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066f6:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80066f8:	f7ff ffe0 	bl	80066bc <HAL_I2C_AbortCpltCallback>
}
 80066fc:	bd08      	pop	{r3, pc}
 80066fe:	bf00      	nop

08006700 <I2C_ITError>:
{
 8006700:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006702:	4a5d      	ldr	r2, [pc, #372]	; (8006878 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006704:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006706:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800670a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800670c:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006710:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006712:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006714:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006716:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006718:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800671a:	ea41 0102 	orr.w	r1, r1, r2
 800671e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006720:	d874      	bhi.n	800680c <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006722:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006726:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800672a:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800672e:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006730:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006734:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006736:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006738:	bf14      	ite	ne
 800673a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 800673e:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006742:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006744:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006748:	bf18      	it	ne
 800674a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800674e:	4013      	ands	r3, r2
 8006750:	4a4a      	ldr	r2, [pc, #296]	; (800687c <I2C_ITError+0x17c>)
 8006752:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006754:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006758:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800675a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800675c:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800675e:	b118      	cbz	r0, 8006768 <I2C_ITError+0x68>
 8006760:	2b11      	cmp	r3, #17
 8006762:	d01e      	beq.n	80067a2 <I2C_ITError+0xa2>
 8006764:	2b21      	cmp	r3, #33	; 0x21
 8006766:	d01c      	beq.n	80067a2 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006768:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800676a:	b118      	cbz	r0, 8006774 <I2C_ITError+0x74>
 800676c:	2b12      	cmp	r3, #18
 800676e:	d030      	beq.n	80067d2 <I2C_ITError+0xd2>
 8006770:	2b22      	cmp	r3, #34	; 0x22
 8006772:	d02e      	beq.n	80067d2 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006774:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006778:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800677a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800677e:	d006      	beq.n	800678e <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006780:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006784:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006788:	f014 fca6 	bl	801b0d8 <__HAL_I2C_ErrorCallback_veneer>
}
 800678c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800678e:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006790:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006792:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006796:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800679a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800679c:	f7ff ff8e 	bl	80066bc <HAL_I2C_AbortCpltCallback>
}
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	0451      	lsls	r1, r2, #17
 80067a8:	d45f      	bmi.n	800686a <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067aa:	f7ff fab1 	bl	8005d10 <HAL_DMA_GetState>
 80067ae:	2801      	cmp	r0, #1
 80067b0:	d0e0      	beq.n	8006774 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80067b4:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067b6:	4932      	ldr	r1, [pc, #200]	; (8006880 <I2C_ITError+0x180>)
 80067b8:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80067ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80067c0:	f7fe fd3c 	bl	800523c <HAL_DMA_Abort_IT>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d0e1      	beq.n	800678c <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80067ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80067d0:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	0412      	lsls	r2, r2, #16
 80067d8:	d504      	bpl.n	80067e4 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067e0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80067e4:	f7ff fa94 	bl	8005d10 <HAL_DMA_GetState>
 80067e8:	2801      	cmp	r0, #1
 80067ea:	d0c3      	beq.n	8006774 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 80067ee:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067f0:	4923      	ldr	r1, [pc, #140]	; (8006880 <I2C_ITError+0x180>)
 80067f2:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80067f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80067fa:	f7fe fd1f 	bl	800523c <HAL_DMA_Abort_IT>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0c4      	beq.n	800678c <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006802:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8006804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006808:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800680a:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800680c:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800680e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006812:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800681c:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800681e:	6803      	ldr	r3, [r0, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	0792      	lsls	r2, r2, #30
 8006824:	d501      	bpl.n	800682a <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8006826:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006828:	6803      	ldr	r3, [r0, #0]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	07d6      	lsls	r6, r2, #31
 800682e:	d403      	bmi.n	8006838 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006838:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800683c:	2b60      	cmp	r3, #96	; 0x60
 800683e:	d012      	beq.n	8006866 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006840:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006842:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8006844:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	0695      	lsls	r5, r2, #26
 800684c:	d50b      	bpl.n	8006866 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800684e:	699a      	ldr	r2, [r3, #24]
 8006850:	06d0      	lsls	r0, r2, #27
 8006852:	d506      	bpl.n	8006862 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006854:	2210      	movs	r2, #16
 8006856:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006858:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800685a:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800685c:	f042 0204 	orr.w	r2, r2, #4
 8006860:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006862:	2220      	movs	r2, #32
 8006864:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8006866:	2200      	movs	r2, #0
 8006868:	e776      	b.n	8006758 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006870:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006872:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006874:	e799      	b.n	80067aa <I2C_ITError+0xaa>
 8006876:	bf00      	nop
 8006878:	ffff0000 	.word	0xffff0000
 800687c:	08006a7d 	.word	0x08006a7d
 8006880:	080066c1 	.word	0x080066c1

08006884 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006884:	6803      	ldr	r3, [r0, #0]
{
 8006886:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800688c:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800688e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006892:	d032      	beq.n	80068fa <HAL_I2C_ER_IRQHandler+0x76>
 8006894:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006898:	d021      	beq.n	80068de <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800689a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800689c:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80068a0:	f041 0101 	orr.w	r1, r1, #1
 80068a4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068a6:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80068a8:	0553      	lsls	r3, r2, #21
 80068aa:	d507      	bpl.n	80068bc <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ac:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80068ae:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80068b4:	f041 0108 	orr.w	r1, r1, #8
 80068b8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ba:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80068bc:	0592      	lsls	r2, r2, #22
 80068be:	d507      	bpl.n	80068d0 <HAL_I2C_ER_IRQHandler+0x4c>
 80068c0:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80068c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068ce:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 80068d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80068d2:	f011 0f0b 	tst.w	r1, #11
 80068d6:	d10c      	bne.n	80068f2 <HAL_I2C_ER_IRQHandler+0x6e>
}
 80068d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068dc:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80068de:	0553      	lsls	r3, r2, #21
 80068e0:	d4f6      	bmi.n	80068d0 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80068e2:	0593      	lsls	r3, r2, #22
 80068e4:	d5f4      	bpl.n	80068d0 <HAL_I2C_ER_IRQHandler+0x4c>
 80068e6:	060a      	lsls	r2, r1, #24
 80068e8:	d4eb      	bmi.n	80068c2 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 80068ea:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80068ec:	f011 0f0b 	tst.w	r1, #11
 80068f0:	d0f2      	beq.n	80068d8 <HAL_I2C_ER_IRQHandler+0x54>
}
 80068f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80068f6:	f7ff bf03 	b.w	8006700 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80068fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80068fe:	d0f0      	beq.n	80068e2 <HAL_I2C_ER_IRQHandler+0x5e>
 8006900:	0609      	lsls	r1, r1, #24
 8006902:	d5e5      	bpl.n	80068d0 <HAL_I2C_ER_IRQHandler+0x4c>
 8006904:	e7d3      	b.n	80068ae <HAL_I2C_ER_IRQHandler+0x2a>
 8006906:	bf00      	nop

08006908 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800690c:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690e:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006910:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006912:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006916:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006918:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800691c:	2b21      	cmp	r3, #33	; 0x21
 800691e:	d16d      	bne.n	80069fc <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006920:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006922:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006926:	682a      	ldr	r2, [r5, #0]
 8006928:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 800692c:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800692e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006930:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 8006932:	4d50      	ldr	r5, [pc, #320]	; (8006a74 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006934:	6853      	ldr	r3, [r2, #4]
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	6853      	ldr	r3, [r2, #4]
 8006940:	402b      	ands	r3, r5
 8006942:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	0792      	lsls	r2, r2, #30
 800694a:	d502      	bpl.n	8006952 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 800694c:	2200      	movs	r2, #0
 800694e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	07d6      	lsls	r6, r2, #31
 8006956:	d403      	bmi.n	8006960 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006960:	0445      	lsls	r5, r0, #17
 8006962:	d556      	bpl.n	8006a12 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800696c:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800696e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006970:	b11b      	cbz	r3, 800697a <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	6853      	ldr	r3, [r2, #4]
 8006976:	b29b      	uxth	r3, r3
 8006978:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800697a:	074b      	lsls	r3, r1, #29
 800697c:	d508      	bpl.n	8006990 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006984:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006986:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006988:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800698a:	3301      	adds	r3, #1
 800698c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800698e:	bb72      	cbnz	r2, 80069ee <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
 8006990:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	b11b      	cbz	r3, 800699e <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006996:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800699e:	2600      	movs	r6, #0
 80069a0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069a4:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80069a6:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	d13d      	bne.n	8006a28 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069ae:	4e32      	ldr	r6, [pc, #200]	; (8006a78 <I2C_ITSlaveCplt.constprop.0+0x170>)
 80069b0:	42b3      	cmp	r3, r6
 80069b2:	d10e      	bne.n	80069d2 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069b8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80069ba:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069be:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 80069c0:	f04f 0320 	mov.w	r3, #32
 80069c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c8:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069ca:	d050      	beq.n	8006a6e <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069cc:	f7ff fdea 	bl	80065a4 <HAL_I2C_SlaveTxCpltCallback>
}
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff fde8 	bl	80065a8 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80069d8:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069da:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 80069dc:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80069de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80069e2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80069e6:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80069e8:	f7ff fe66 	bl	80066b8 <HAL_I2C_ListenCpltCallback>
}
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 80069ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80069f0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80069f2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80069f4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80069fa:	e7c9      	b.n	8006990 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069fc:	2b22      	cmp	r3, #34	; 0x22
 80069fe:	d197      	bne.n	8006930 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a00:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a02:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a06:	682a      	ldr	r2, [r5, #0]
 8006a08:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006a0c:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a10:	e78e      	b.n	8006930 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a12:	0402      	lsls	r2, r0, #16
 8006a14:	d5b1      	bpl.n	800697a <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a1e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1a5      	bne.n	8006972 <I2C_ITSlaveCplt.constprop.0+0x6a>
 8006a26:	e7a8      	b.n	800697a <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f7ff fe68 	bl	8006700 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006a34:	2b28      	cmp	r3, #40	; 0x28
 8006a36:	d1cb      	bne.n	80069d0 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a38:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006a3a:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3c:	490e      	ldr	r1, [pc, #56]	; (8006a78 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a3e:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
 8006a40:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a42:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a46:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006a48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006a5e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006a64:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a68:	f7ff fe26 	bl	80066b8 <HAL_I2C_ListenCpltCallback>
}
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a6e:	f014 fb0f 	bl	801b090 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	fe00e800 	.word	0xfe00e800
 8006a78:	ffff0000 	.word	0xffff0000

08006a7c <I2C_Slave_ISR_IT>:
{
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006a7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a82:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f000 8081 	beq.w	8006b8c <I2C_Slave_ISR_IT+0x110>
 8006a8a:	4617      	mov	r7, r2
 8006a8c:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a8e:	068a      	lsls	r2, r1, #26
 8006a90:	4604      	mov	r4, r0
 8006a92:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006a94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a98:	d501      	bpl.n	8006a9e <I2C_Slave_ISR_IT+0x22>
 8006a9a:	06bb      	lsls	r3, r7, #26
 8006a9c:	d462      	bmi.n	8006b64 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a9e:	06ea      	lsls	r2, r5, #27
 8006aa0:	d51c      	bpl.n	8006adc <I2C_Slave_ISR_IT+0x60>
 8006aa2:	06fb      	lsls	r3, r7, #27
 8006aa4:	d51a      	bpl.n	8006adc <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
 8006aa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d15f      	bne.n	8006b6e <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006aae:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006ab2:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	d101      	bne.n	8006abe <I2C_Slave_ISR_IT+0x42>
 8006aba:	2a28      	cmp	r2, #40	; 0x28
 8006abc:	d07f      	beq.n	8006bbe <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006abe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac2:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ac4:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006aca:	d102      	bne.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
 8006acc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006ad0:	d162      	bne.n	8006b98 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
 8006ad2:	2300      	movs	r3, #0
  return HAL_OK;
 8006ad4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006adc:	076a      	lsls	r2, r5, #29
 8006ade:	d40d      	bmi.n	8006afc <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ae0:	0728      	lsls	r0, r5, #28
 8006ae2:	d529      	bpl.n	8006b38 <I2C_Slave_ISR_IT+0xbc>
 8006ae4:	0739      	lsls	r1, r7, #28
 8006ae6:	d527      	bpl.n	8006b38 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ae8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006aec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006af0:	2b28      	cmp	r3, #40	; 0x28
 8006af2:	d060      	beq.n	8006bb6 <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	2208      	movs	r2, #8
 8006af8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006afa:	e7ea      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006afc:	077b      	lsls	r3, r7, #29
 8006afe:	d5ef      	bpl.n	8006ae0 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8006b00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	b16b      	cbz	r3, 8006b22 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b0c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006b12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b14:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006b16:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006b18:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006b1a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006b1c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006b1e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b20:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1d3      	bne.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
 8006b2a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006b2e:	d0d0      	beq.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff fd39 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8006b36:	e7cc      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b38:	07aa      	lsls	r2, r5, #30
 8006b3a:	d5ca      	bpl.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
 8006b3c:	07bb      	lsls	r3, r7, #30
 8006b3e:	d5c8      	bpl.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 8006b40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	b323      	cbz	r3, 8006b90 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	7812      	ldrb	r2, [r2, #0]
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006b50:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006b52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b54:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006b56:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006b58:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006b5a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006b5c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006b5e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b60:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006b62:	e7b6      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b64:	f7ff fed0 	bl	8006908 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b68:	06ea      	lsls	r2, r5, #27
 8006b6a:	d5b7      	bpl.n	8006adc <I2C_Slave_ISR_IT+0x60>
 8006b6c:	e799      	b.n	8006aa2 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	2210      	movs	r2, #16
 8006b72:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b7c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006b80:	d1a7      	bne.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff fdbb 	bl	8006700 <I2C_ITError>
 8006b8a:	e7a2      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 8006b8c:	2002      	movs	r0, #2
}
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b90:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006b94:	d19d      	bne.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
 8006b96:	e7cb      	b.n	8006b30 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	0790      	lsls	r0, r2, #30
 8006b9e:	d502      	bpl.n	8006ba6 <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	07d1      	lsls	r1, r2, #31
 8006baa:	d4c1      	bmi.n	8006b30 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	619a      	str	r2, [r3, #24]
 8006bb4:	e7bc      	b.n	8006b30 <I2C_Slave_ISR_IT+0xb4>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f7ff fd4c 	bl	8006654 <I2C_ITAddrCplt.part.0>
 8006bbc:	e789      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bbe:	4918      	ldr	r1, [pc, #96]	; (8006c20 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bc2:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8006bc4:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc6:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bc8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006bca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bd2:	d512      	bpl.n	8006bfa <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006bde:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006be0:	3301      	adds	r3, #1
 8006be2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006be4:	b14a      	cbz	r2, 8006bfa <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
 8006be6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006be8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006bea:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006bec:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006bf4:	f043 0304 	orr.w	r3, r3, #4
 8006bf8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bfa:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfc:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bfe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8006c02:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006c0e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c14:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8006c16:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c1a:	f7ff fd4d 	bl	80066b8 <HAL_I2C_ListenCpltCallback>
}
 8006c1e:	e758      	b.n	8006ad2 <I2C_Slave_ISR_IT+0x56>
 8006c20:	ffff0000 	.word	0xffff0000

08006c24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c24:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006c28:	2a20      	cmp	r2, #32
 8006c2a:	d129      	bne.n	8006c80 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8006c2c:	4603      	mov	r3, r0
{
 8006c2e:	b500      	push	{lr}
 8006c30:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c34:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006c38:	2a01      	cmp	r2, #1
 8006c3a:	d023      	beq.n	8006c84 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8006c3c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c3e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c40:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006c4e:	6802      	ldr	r2, [r0, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	6802      	ldr	r2, [r0, #0]
 8006c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c5e:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	6802      	ldr	r2, [r0, #0]
 8006c64:	4311      	orrs	r1, r2
 8006c66:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8006c68:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8006c6a:	6819      	ldr	r1, [r3, #0]
 8006c6c:	680a      	ldr	r2, [r1, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c74:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006c78:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006c7c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8006c80:	2002      	movs	r0, #2
}
 8006c82:	4770      	bx	lr
    return HAL_BUSY;
 8006c84:	2002      	movs	r0, #2
}
 8006c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c8a:	bf00      	nop

08006c8c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8006c90:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c92:	2a20      	cmp	r2, #32
 8006c94:	fa5f fc82 	uxtb.w	ip, r2
 8006c98:	d121      	bne.n	8006cde <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c9a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006c9e:	2a01      	cmp	r2, #1
 8006ca0:	d01d      	beq.n	8006cde <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8006ca2:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca4:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006caa:	2224      	movs	r2, #36	; 0x24
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006cb0:	6802      	ldr	r2, [r0, #0]
 8006cb2:	f022 0201 	bic.w	r2, r2, #1
 8006cb6:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cbc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 8006cc6:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	6802      	ldr	r2, [r0, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 8006cd2:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd4:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006cd8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 8006cdc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006cde:	2002      	movs	r0, #2
  }
}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ce4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ce6:	4c10      	ldr	r4, [pc, #64]	; (8006d28 <HAL_PWREx_ConfigSupply+0x44>)
 8006ce8:	68e3      	ldr	r3, [r4, #12]
 8006cea:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cee:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cf0:	d105      	bne.n	8006cfe <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cf2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cf6:	1a18      	subs	r0, r3, r0
 8006cf8:	bf18      	it	ne
 8006cfa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cfe:	f023 0307 	bic.w	r3, r3, #7
 8006d02:	4303      	orrs	r3, r0
 8006d04:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8006d06:	f7fd f991 	bl	800402c <HAL_GetTick>
 8006d0a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d0c:	e005      	b.n	8006d1a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d0e:	f7fd f98d 	bl	800402c <HAL_GetTick>
 8006d12:	1b40      	subs	r0, r0, r5
 8006d14:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d18:	d804      	bhi.n	8006d24 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	049b      	lsls	r3, r3, #18
 8006d1e:	d5f6      	bpl.n	8006d0e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8006d20:	2000      	movs	r0, #0
}
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006d24:	2001      	movs	r0, #1
}
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	58024800 	.word	0x58024800

08006d2c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d2c:	4b3c      	ldr	r3, [pc, #240]	; (8006e20 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8006d2e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d32:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d34:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8006d36:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d3c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006d40:	d038      	beq.n	8006db4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d42:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d46:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d4a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d4e:	fb05 f101 	mul.w	r1, r5, r1
 8006d52:	2a01      	cmp	r2, #1
 8006d54:	ee07 1a90 	vmov	s15, r1
 8006d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8006d5c:	d002      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8006d5e:	2a02      	cmp	r2, #2
 8006d60:	d050      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8006d62:	b34a      	cbz	r2, 8006db8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d64:	ee07 0a90 	vmov	s15, r0
 8006d68:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8006e24 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8006d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006d76:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006e28 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d8a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006d8e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006d92:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d96:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006d9e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006db4:	bc30      	pop	{r4, r5}
 8006db6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	0692      	lsls	r2, r2, #26
 8006dbc:	d529      	bpl.n	8006e12 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dbe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc4:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dcc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006e28 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ddc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dde:	ee06 3a10 	vmov	s12, r3
 8006de2:	ee05 2a90 	vmov	s11, r2
 8006de6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006dea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006dee:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006df2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006df6:	eef0 7a46 	vmov.f32	s15, s12
 8006dfa:	eee7 7a05 	vfma.f32	s15, s14, s10
 8006dfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e02:	e7c8      	b.n	8006d96 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e04:	ee07 0a90 	vmov	s15, r0
 8006e08:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8006e30 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8006e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e10:	e7ae      	b.n	8006d70 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e12:	ee07 0a90 	vmov	s15, r0
 8006e16:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006e34 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8006e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1e:	e7a7      	b.n	8006d70 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8006e20:	58024400 	.word	0x58024400
 8006e24:	4a742400 	.word	0x4a742400
 8006e28:	39000000 	.word	0x39000000
 8006e2c:	03d09000 	.word	0x03d09000
 8006e30:	4bbebc20 	.word	0x4bbebc20
 8006e34:	4c742400 	.word	0x4c742400

08006e38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f000 81ef 	beq.w	800721c <HAL_RCC_OscConfig+0x3e4>
{
 8006e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e40:	6803      	ldr	r3, [r0, #0]
 8006e42:	4604      	mov	r4, r0
 8006e44:	07d9      	lsls	r1, r3, #31
 8006e46:	d52e      	bpl.n	8006ea6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e48:	49a4      	ldr	r1, [pc, #656]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006e4a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e4e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e52:	2a10      	cmp	r2, #16
 8006e54:	f000 8107 	beq.w	8007066 <HAL_RCC_OscConfig+0x22e>
 8006e58:	2a18      	cmp	r2, #24
 8006e5a:	f000 80ff 	beq.w	800705c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	f000 812a 	beq.w	80070bc <HAL_RCC_OscConfig+0x284>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f040 8188 	bne.w	800717e <HAL_RCC_OscConfig+0x346>
 8006e6e:	4b9b      	ldr	r3, [pc, #620]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e7e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 815c 	beq.w	8007140 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8006e88:	f7fd f8d0 	bl	800402c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e8c:	4e93      	ldr	r6, [pc, #588]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8006e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e90:	e005      	b.n	8006e9e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e92:	f7fd f8cb 	bl	800402c <HAL_GetTick>
 8006e96:	1b40      	subs	r0, r0, r5
 8006e98:	2864      	cmp	r0, #100	; 0x64
 8006e9a:	f200 814f 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e9e:	6833      	ldr	r3, [r6, #0]
 8006ea0:	039b      	lsls	r3, r3, #14
 8006ea2:	d5f6      	bpl.n	8006e92 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079d      	lsls	r5, r3, #30
 8006ea8:	f100 808a 	bmi.w	8006fc0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006eac:	06d9      	lsls	r1, r3, #27
 8006eae:	d533      	bpl.n	8006f18 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb0:	4a8a      	ldr	r2, [pc, #552]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006eb2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	f000 80e3 	beq.w	8007086 <HAL_RCC_OscConfig+0x24e>
 8006ec0:	2b18      	cmp	r3, #24
 8006ec2:	f000 80db 	beq.w	800707c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ec6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8006ec8:	4d84      	ldr	r5, [pc, #528]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8176 	beq.w	80071bc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ed8:	f7fd f8a8 	bl	800402c <HAL_GetTick>
 8006edc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ede:	e005      	b.n	8006eec <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ee0:	f7fd f8a4 	bl	800402c <HAL_GetTick>
 8006ee4:	1b80      	subs	r0, r0, r6
 8006ee6:	2802      	cmp	r0, #2
 8006ee8:	f200 8128 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	05db      	lsls	r3, r3, #23
 8006ef0:	d5f6      	bpl.n	8006ee0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ef2:	f7fd f8b3 	bl	800405c <HAL_GetREVID>
 8006ef6:	f241 0303 	movw	r3, #4099	; 0x1003
 8006efa:	4298      	cmp	r0, r3
 8006efc:	f200 8266 	bhi.w	80073cc <HAL_RCC_OscConfig+0x594>
 8006f00:	6a22      	ldr	r2, [r4, #32]
 8006f02:	686b      	ldr	r3, [r5, #4]
 8006f04:	2a20      	cmp	r2, #32
 8006f06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f0a:	bf0c      	ite	eq
 8006f0c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006f14:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	071d      	lsls	r5, r3, #28
 8006f1a:	d516      	bpl.n	8006f4a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f1c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006f1e:	4d6f      	ldr	r5, [pc, #444]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 811b 	beq.w	800715c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 8006f26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006f2e:	f7fd f87d 	bl	800402c <HAL_GetTick>
 8006f32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f34:	e005      	b.n	8006f42 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f36:	f7fd f879 	bl	800402c <HAL_GetTick>
 8006f3a:	1b80      	subs	r0, r0, r6
 8006f3c:	2802      	cmp	r0, #2
 8006f3e:	f200 80fd 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f44:	0798      	lsls	r0, r3, #30
 8006f46:	d5f6      	bpl.n	8006f36 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	069a      	lsls	r2, r3, #26
 8006f4c:	d516      	bpl.n	8006f7c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f4e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8006f50:	4d62      	ldr	r5, [pc, #392]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8121 	beq.w	800719a <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006f60:	f7fd f864 	bl	800402c <HAL_GetTick>
 8006f64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f66:	e005      	b.n	8006f74 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f68:	f7fd f860 	bl	800402c <HAL_GetTick>
 8006f6c:	1b80      	subs	r0, r0, r6
 8006f6e:	2802      	cmp	r0, #2
 8006f70:	f200 80e4 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	049f      	lsls	r7, r3, #18
 8006f78:	d5f6      	bpl.n	8006f68 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0759      	lsls	r1, r3, #29
 8006f7e:	f100 80a3 	bmi.w	80070c8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f84:	b1d0      	cbz	r0, 8006fbc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f86:	4d55      	ldr	r5, [pc, #340]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006f88:	692b      	ldr	r3, [r5, #16]
 8006f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8e:	2b18      	cmp	r3, #24
 8006f90:	f000 81b6 	beq.w	8007300 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8006f94:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f96:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f9e:	f000 8149 	beq.w	8007234 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 8006fa2:	f7fd f843 	bl	800402c <HAL_GetTick>
 8006fa6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fa8:	e005      	b.n	8006fb6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006faa:	f7fd f83f 	bl	800402c <HAL_GetTick>
 8006fae:	1b00      	subs	r0, r0, r4
 8006fb0:	2802      	cmp	r0, #2
 8006fb2:	f200 80c3 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	d4f6      	bmi.n	8006faa <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8006fbc:	2000      	movs	r0, #0
}
 8006fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc0:	4a46      	ldr	r2, [pc, #280]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006fc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fc6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006fca:	d12d      	bne.n	8007028 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fcc:	4b43      	ldr	r3, [pc, #268]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006fce:	68e2      	ldr	r2, [r4, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	0759      	lsls	r1, r3, #29
 8006fd4:	d501      	bpl.n	8006fda <HAL_RCC_OscConfig+0x1a2>
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d04e      	beq.n	8007078 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fda:	4d40      	ldr	r5, [pc, #256]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	f023 0319 	bic.w	r3, r3, #25
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006fe6:	f7fd f821 	bl	800402c <HAL_GetTick>
 8006fea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fec:	e005      	b.n	8006ffa <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fee:	f7fd f81d 	bl	800402c <HAL_GetTick>
 8006ff2:	1b80      	subs	r0, r0, r6
 8006ff4:	2802      	cmp	r0, #2
 8006ff6:	f200 80a1 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ffa:	682b      	ldr	r3, [r5, #0]
 8006ffc:	075b      	lsls	r3, r3, #29
 8006ffe:	d5f6      	bpl.n	8006fee <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	f7fd f82c 	bl	800405c <HAL_GetREVID>
 8007004:	f241 0303 	movw	r3, #4099	; 0x1003
 8007008:	4298      	cmp	r0, r3
 800700a:	f200 80fe 	bhi.w	800720a <HAL_RCC_OscConfig+0x3d2>
 800700e:	6922      	ldr	r2, [r4, #16]
 8007010:	686b      	ldr	r3, [r5, #4]
 8007012:	2a40      	cmp	r2, #64	; 0x40
 8007014:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007018:	bf0c      	ite	eq
 800701a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800701e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8007022:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	e741      	b.n	8006eac <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007028:	2b18      	cmp	r3, #24
 800702a:	f000 80ea 	beq.w	8007202 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800702e:	4d2b      	ldr	r5, [pc, #172]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007030:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007032:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007034:	2a00      	cmp	r2, #0
 8007036:	f000 80d3 	beq.w	80071e0 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800703a:	f023 0319 	bic.w	r3, r3, #25
 800703e:	4313      	orrs	r3, r2
 8007040:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007042:	f7fc fff3 	bl	800402c <HAL_GetTick>
 8007046:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007048:	e004      	b.n	8007054 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704a:	f7fc ffef 	bl	800402c <HAL_GetTick>
 800704e:	1b80      	subs	r0, r0, r6
 8007050:	2802      	cmp	r0, #2
 8007052:	d873      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	075f      	lsls	r7, r3, #29
 8007058:	d5f7      	bpl.n	800704a <HAL_RCC_OscConfig+0x212>
 800705a:	e7d1      	b.n	8007000 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800705c:	f001 0103 	and.w	r1, r1, #3
 8007060:	2902      	cmp	r1, #2
 8007062:	f47f aefc 	bne.w	8006e5e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007066:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	0392      	lsls	r2, r2, #14
 800706c:	f57f af1b 	bpl.w	8006ea6 <HAL_RCC_OscConfig+0x6e>
 8007070:	6862      	ldr	r2, [r4, #4]
 8007072:	2a00      	cmp	r2, #0
 8007074:	f47f af17 	bne.w	8006ea6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8007078:	2001      	movs	r0, #1
}
 800707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800707c:	f002 0203 	and.w	r2, r2, #3
 8007080:	2a01      	cmp	r2, #1
 8007082:	f47f af20 	bne.w	8006ec6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	05da      	lsls	r2, r3, #23
 800708c:	d502      	bpl.n	8007094 <HAL_RCC_OscConfig+0x25c>
 800708e:	69e3      	ldr	r3, [r4, #28]
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d1f1      	bne.n	8007078 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007094:	f7fc ffe2 	bl	800405c <HAL_GetREVID>
 8007098:	f241 0303 	movw	r3, #4099	; 0x1003
 800709c:	4298      	cmp	r0, r3
 800709e:	f200 80bf 	bhi.w	8007220 <HAL_RCC_OscConfig+0x3e8>
 80070a2:	6a22      	ldr	r2, [r4, #32]
 80070a4:	2a20      	cmp	r2, #32
 80070a6:	f000 81ad 	beq.w	8007404 <HAL_RCC_OscConfig+0x5cc>
 80070aa:	490c      	ldr	r1, [pc, #48]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 80070ac:	684b      	ldr	r3, [r1, #4]
 80070ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070b2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80070b6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	e72d      	b.n	8006f18 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070bc:	4a07      	ldr	r2, [pc, #28]	; (80070dc <HAL_RCC_OscConfig+0x2a4>)
 80070be:	6813      	ldr	r3, [r2, #0]
 80070c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e6db      	b.n	8006e80 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 80070c8:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <HAL_RCC_OscConfig+0x2a8>)
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80070d2:	f7fc ffab 	bl	800402c <HAL_GetTick>
 80070d6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070d8:	e009      	b.n	80070ee <HAL_RCC_OscConfig+0x2b6>
 80070da:	bf00      	nop
 80070dc:	58024400 	.word	0x58024400
 80070e0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fc ffa2 	bl	800402c <HAL_GetTick>
 80070e8:	1b80      	subs	r0, r0, r6
 80070ea:	2864      	cmp	r0, #100	; 0x64
 80070ec:	d826      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	05da      	lsls	r2, r3, #23
 80070f2:	d5f7      	bpl.n	80070e4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	f000 8171 	beq.w	80073de <HAL_RCC_OscConfig+0x5a6>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 8174 	bne.w	80073ea <HAL_RCC_OscConfig+0x5b2>
 8007102:	4baa      	ldr	r3, [pc, #680]	; (80073ac <HAL_RCC_OscConfig+0x574>)
 8007104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	671a      	str	r2, [r3, #112]	; 0x70
 800710c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800710e:	f022 0204 	bic.w	r2, r2, #4
 8007112:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8140 	beq.w	800739c <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800711c:	f7fc ff86 	bl	800402c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007120:	4ea2      	ldr	r6, [pc, #648]	; (80073ac <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007122:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007126:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007128:	e004      	b.n	8007134 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800712a:	f7fc ff7f 	bl	800402c <HAL_GetTick>
 800712e:	1b40      	subs	r0, r0, r5
 8007130:	42b8      	cmp	r0, r7
 8007132:	d803      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007134:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007136:	079b      	lsls	r3, r3, #30
 8007138:	d5f7      	bpl.n	800712a <HAL_RCC_OscConfig+0x2f2>
 800713a:	e722      	b.n	8006f82 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800713c:	2003      	movs	r0, #3
}
 800713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8007140:	f7fc ff74 	bl	800402c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007144:	4e99      	ldr	r6, [pc, #612]	; (80073ac <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 8007146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007148:	e004      	b.n	8007154 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714a:	f7fc ff6f 	bl	800402c <HAL_GetTick>
 800714e:	1b40      	subs	r0, r0, r5
 8007150:	2864      	cmp	r0, #100	; 0x64
 8007152:	d8f3      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007154:	6833      	ldr	r3, [r6, #0]
 8007156:	039f      	lsls	r7, r3, #14
 8007158:	d4f7      	bmi.n	800714a <HAL_RCC_OscConfig+0x312>
 800715a:	e6a3      	b.n	8006ea4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800715c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007164:	f7fc ff62 	bl	800402c <HAL_GetTick>
 8007168:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800716a:	e004      	b.n	8007176 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716c:	f7fc ff5e 	bl	800402c <HAL_GetTick>
 8007170:	1b80      	subs	r0, r0, r6
 8007172:	2802      	cmp	r0, #2
 8007174:	d8e2      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007176:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007178:	0799      	lsls	r1, r3, #30
 800717a:	d4f7      	bmi.n	800716c <HAL_RCC_OscConfig+0x334>
 800717c:	e6e4      	b.n	8006f48 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800717e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007182:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCC_OscConfig+0x574>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	f47f ae74 	bne.w	8006e72 <HAL_RCC_OscConfig+0x3a>
 800718a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e672      	b.n	8006e80 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80071a2:	f7fc ff43 	bl	800402c <HAL_GetTick>
 80071a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071a8:	e004      	b.n	80071b4 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071aa:	f7fc ff3f 	bl	800402c <HAL_GetTick>
 80071ae:	1b80      	subs	r0, r0, r6
 80071b0:	2802      	cmp	r0, #2
 80071b2:	d8c3      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	0498      	lsls	r0, r3, #18
 80071b8:	d4f7      	bmi.n	80071aa <HAL_RCC_OscConfig+0x372>
 80071ba:	e6de      	b.n	8006f7a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80071c4:	f7fc ff32 	bl	800402c <HAL_GetTick>
 80071c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071ca:	e004      	b.n	80071d6 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071cc:	f7fc ff2e 	bl	800402c <HAL_GetTick>
 80071d0:	1b80      	subs	r0, r0, r6
 80071d2:	2802      	cmp	r0, #2
 80071d4:	d8b2      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	05df      	lsls	r7, r3, #23
 80071da:	d4f7      	bmi.n	80071cc <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	e69b      	b.n	8006f18 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80071e6:	f7fc ff21 	bl	800402c <HAL_GetTick>
 80071ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071ec:	e004      	b.n	80071f8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071ee:	f7fc ff1d 	bl	800402c <HAL_GetTick>
 80071f2:	1b80      	subs	r0, r0, r6
 80071f4:	2802      	cmp	r0, #2
 80071f6:	d8a1      	bhi.n	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	0758      	lsls	r0, r3, #29
 80071fc:	d4f7      	bmi.n	80071ee <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	e654      	b.n	8006eac <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007202:	0790      	lsls	r0, r2, #30
 8007204:	f47f af13 	bne.w	800702e <HAL_RCC_OscConfig+0x1f6>
 8007208:	e6e0      	b.n	8006fcc <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800720a:	686b      	ldr	r3, [r5, #4]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007216:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	e647      	b.n	8006eac <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800721c:	2001      	movs	r0, #1
}
 800721e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007220:	4a62      	ldr	r2, [pc, #392]	; (80073ac <HAL_RCC_OscConfig+0x574>)
 8007222:	6a21      	ldr	r1, [r4, #32]
 8007224:	68d3      	ldr	r3, [r2, #12]
 8007226:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800722a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800722e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	e671      	b.n	8006f18 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8007234:	f7fc fefa 	bl	800402c <HAL_GetTick>
 8007238:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800723a:	e005      	b.n	8007248 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800723c:	f7fc fef6 	bl	800402c <HAL_GetTick>
 8007240:	1b80      	subs	r0, r0, r6
 8007242:	2802      	cmp	r0, #2
 8007244:	f63f af7a 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	0199      	lsls	r1, r3, #6
 800724c:	d4f6      	bmi.n	800723c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800724e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007250:	4b57      	ldr	r3, [pc, #348]	; (80073b0 <HAL_RCC_OscConfig+0x578>)
 8007252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007254:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007256:	4957      	ldr	r1, [pc, #348]	; (80073b4 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007258:	4e54      	ldr	r6, [pc, #336]	; (80073ac <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800725a:	4313      	orrs	r3, r2
 800725c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800725e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007262:	62ab      	str	r3, [r5, #40]	; 0x28
 8007264:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007268:	3b01      	subs	r3, #1
 800726a:	3a01      	subs	r2, #1
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	0412      	lsls	r2, r2, #16
 8007270:	b29b      	uxth	r3, r3
 8007272:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007276:	4313      	orrs	r3, r2
 8007278:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800727a:	3a01      	subs	r2, #1
 800727c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007280:	4313      	orrs	r3, r2
 8007282:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007284:	3a01      	subs	r2, #1
 8007286:	0612      	lsls	r2, r2, #24
 8007288:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800728c:	4313      	orrs	r3, r2
 800728e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8007290:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800729a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800729c:	4011      	ands	r1, r2
 800729e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80072a2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072a8:	f023 030c 	bic.w	r3, r3, #12
 80072ac:	4313      	orrs	r3, r2
 80072ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80072b4:	f023 0302 	bic.w	r3, r3, #2
 80072b8:	4313      	orrs	r3, r2
 80072ba:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80072d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80072e4:	f7fc fea2 	bl	800402c <HAL_GetTick>
 80072e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072ea:	e005      	b.n	80072f8 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ec:	f7fc fe9e 	bl	800402c <HAL_GetTick>
 80072f0:	1b00      	subs	r0, r0, r4
 80072f2:	2802      	cmp	r0, #2
 80072f4:	f63f af22 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072f8:	6833      	ldr	r3, [r6, #0]
 80072fa:	019a      	lsls	r2, r3, #6
 80072fc:	d5f6      	bpl.n	80072ec <HAL_RCC_OscConfig+0x4b4>
 80072fe:	e65d      	b.n	8006fbc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007300:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007302:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007304:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007306:	f43f ae5a 	beq.w	8006fbe <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800730a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800730e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007310:	428b      	cmp	r3, r1
 8007312:	f47f aeb1 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007316:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800731c:	429a      	cmp	r2, r3
 800731e:	f47f aeab 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007322:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007324:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8007328:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800732a:	429a      	cmp	r2, r3
 800732c:	f47f aea4 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007332:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8007336:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	f47f ae9d 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800733e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007340:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8007344:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	f47f ae96 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800734c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800734e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8007352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007354:	429e      	cmp	r6, r3
 8007356:	f47f ae8f 	bne.w	8007078 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800735a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800735c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800735e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007362:	429a      	cmp	r2, r3
 8007364:	f43f ae2a 	beq.w	8006fbc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8007368:	4a10      	ldr	r2, [pc, #64]	; (80073ac <HAL_RCC_OscConfig+0x574>)
 800736a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8007372:	f7fc fe5b 	bl	800402c <HAL_GetTick>
 8007376:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007378:	f7fc fe58 	bl	800402c <HAL_GetTick>
 800737c:	42a8      	cmp	r0, r5
 800737e:	d0fb      	beq.n	8007378 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 8007382:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007384:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <HAL_RCC_OscConfig+0x57c>)
 8007388:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800738a:	4023      	ands	r3, r4
 800738c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007390:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8007392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800739c:	f7fc fe46 	bl	800402c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073a0:	4e02      	ldr	r6, [pc, #8]	; (80073ac <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80073a6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073a8:	e00c      	b.n	80073c4 <HAL_RCC_OscConfig+0x58c>
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	fffffc0c 	.word	0xfffffc0c
 80073b4:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b8:	f7fc fe38 	bl	800402c <HAL_GetTick>
 80073bc:	1b40      	subs	r0, r0, r5
 80073be:	42b8      	cmp	r0, r7
 80073c0:	f63f aebc 	bhi.w	800713c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073c4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80073c6:	0798      	lsls	r0, r3, #30
 80073c8:	d4f6      	bmi.n	80073b8 <HAL_RCC_OscConfig+0x580>
 80073ca:	e5da      	b.n	8006f82 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073cc:	68eb      	ldr	r3, [r5, #12]
 80073ce:	6a22      	ldr	r2, [r4, #32]
 80073d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80073d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80073d8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	e59c      	b.n	8006f18 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073de:	4a0e      	ldr	r2, [pc, #56]	; (8007418 <HAL_RCC_OscConfig+0x5e0>)
 80073e0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	6713      	str	r3, [r2, #112]	; 0x70
 80073e8:	e694      	b.n	8007114 <HAL_RCC_OscConfig+0x2dc>
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_RCC_OscConfig+0x5e0>)
 80073ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073f0:	f47f ae89 	bne.w	8007106 <HAL_RCC_OscConfig+0x2ce>
 80073f4:	f042 0204 	orr.w	r2, r2, #4
 80073f8:	671a      	str	r2, [r3, #112]	; 0x70
 80073fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073fc:	f042 0201 	orr.w	r2, r2, #1
 8007400:	671a      	str	r2, [r3, #112]	; 0x70
 8007402:	e687      	b.n	8007114 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <HAL_RCC_OscConfig+0x5e0>)
 8007406:	6853      	ldr	r3, [r2, #4]
 8007408:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800740c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007410:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	e580      	b.n	8006f18 <HAL_RCC_OscConfig+0xe0>
 8007416:	bf00      	nop
 8007418:	58024400 	.word	0x58024400

0800741c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800741c:	4a48      	ldr	r2, [pc, #288]	; (8007540 <HAL_RCC_GetSysClockFreq+0x124>)
 800741e:	6913      	ldr	r3, [r2, #16]
 8007420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007424:	2b10      	cmp	r3, #16
 8007426:	d004      	beq.n	8007432 <HAL_RCC_GetSysClockFreq+0x16>
 8007428:	2b18      	cmp	r3, #24
 800742a:	d00d      	beq.n	8007448 <HAL_RCC_GetSysClockFreq+0x2c>
 800742c:	b11b      	cbz	r3, 8007436 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800742e:	4845      	ldr	r0, [pc, #276]	; (8007544 <HAL_RCC_GetSysClockFreq+0x128>)
 8007430:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007432:	4845      	ldr	r0, [pc, #276]	; (8007548 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007434:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	0699      	lsls	r1, r3, #26
 800743a:	d54a      	bpl.n	80074d2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800743c:	6813      	ldr	r3, [r2, #0]
 800743e:	4843      	ldr	r0, [pc, #268]	; (800754c <HAL_RCC_GetSysClockFreq+0x130>)
 8007440:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007444:	40d8      	lsrs	r0, r3
 8007446:	4770      	bx	lr
{
 8007448:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800744a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800744c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800744e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8007450:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007454:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007456:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800745a:	d038      	beq.n	80074ce <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800745c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007460:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007464:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007468:	fb05 f101 	mul.w	r1, r5, r1
 800746c:	2b01      	cmp	r3, #1
 800746e:	ee07 1a90 	vmov	s15, r1
 8007472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8007476:	d002      	beq.n	800747e <HAL_RCC_GetSysClockFreq+0x62>
 8007478:	2b02      	cmp	r3, #2
 800747a:	d02c      	beq.n	80074d6 <HAL_RCC_GetSysClockFreq+0xba>
 800747c:	b393      	cbz	r3, 80074e4 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747e:	ee07 0a90 	vmov	s15, r0
 8007482:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8007550 <HAL_RCC_GetSysClockFreq+0x134>
 8007486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800748a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800748c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007490:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007554 <HAL_RCC_GetSysClockFreq+0x138>
 8007494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80074a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80074a8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80074ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80074b0:	4b23      	ldr	r3, [pc, #140]	; (8007540 <HAL_RCC_GetSysClockFreq+0x124>)
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80074b8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ca:	ee17 0a90 	vmov	r0, s15
}
 80074ce:	bc30      	pop	{r4, r5}
 80074d0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074d2:	481e      	ldr	r0, [pc, #120]	; (800754c <HAL_RCC_GetSysClockFreq+0x130>)
}
 80074d4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074d6:	ee07 0a90 	vmov	s15, r0
 80074da:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8007558 <HAL_RCC_GetSysClockFreq+0x13c>
 80074de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e2:	e7d2      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e4:	6813      	ldr	r3, [r2, #0]
 80074e6:	069b      	lsls	r3, r3, #26
 80074e8:	d522      	bpl.n	8007530 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ea:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074ec:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f0:	4916      	ldr	r1, [pc, #88]	; (800754c <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007500:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8007554 <HAL_RCC_GetSysClockFreq+0x138>
 8007504:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007508:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800750a:	ee06 3a10 	vmov	s12, r3
 800750e:	ee05 1a90 	vmov	s11, r1
 8007512:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007516:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800751a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800751e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007522:	eef0 7a46 	vmov.f32	s15, s12
 8007526:	eee7 7a05 	vfma.f32	s15, s14, s10
 800752a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800752e:	e7bf      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007530:	ee07 0a90 	vmov	s15, r0
 8007534:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800755c <HAL_RCC_GetSysClockFreq+0x140>
 8007538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800753c:	e7a5      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x6e>
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
 8007544:	003d0900 	.word	0x003d0900
 8007548:	017d7840 	.word	0x017d7840
 800754c:	03d09000 	.word	0x03d09000
 8007550:	4a742400 	.word	0x4a742400
 8007554:	39000000 	.word	0x39000000
 8007558:	4bbebc20 	.word	0x4bbebc20
 800755c:	4c742400 	.word	0x4c742400

08007560 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007560:	2800      	cmp	r0, #0
 8007562:	f000 811a 	beq.w	800779a <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007566:	4a92      	ldr	r2, [pc, #584]	; (80077b0 <HAL_RCC_ClockConfig+0x250>)
{
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800756c:	6813      	ldr	r3, [r2, #0]
 800756e:	4604      	mov	r4, r0
 8007570:	460d      	mov	r5, r1
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	428b      	cmp	r3, r1
 8007578:	d20c      	bcs.n	8007594 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	f023 030f 	bic.w	r3, r3, #15
 8007580:	430b      	orrs	r3, r1
 8007582:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	428b      	cmp	r3, r1
 800758c:	d002      	beq.n	8007594 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800758e:	2001      	movs	r0, #1
}
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	075f      	lsls	r7, r3, #29
 8007598:	d50c      	bpl.n	80075b4 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800759a:	4986      	ldr	r1, [pc, #536]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 800759c:	6920      	ldr	r0, [r4, #16]
 800759e:	698a      	ldr	r2, [r1, #24]
 80075a0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075a4:	4290      	cmp	r0, r2
 80075a6:	d905      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075a8:	698b      	ldr	r3, [r1, #24]
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	4303      	orrs	r3, r0
 80075b0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	071e      	lsls	r6, r3, #28
 80075b6:	d50c      	bpl.n	80075d2 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075b8:	497e      	ldr	r1, [pc, #504]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80075ba:	6960      	ldr	r0, [r4, #20]
 80075bc:	69ca      	ldr	r2, [r1, #28]
 80075be:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075c2:	4290      	cmp	r0, r2
 80075c4:	d905      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075c6:	69cb      	ldr	r3, [r1, #28]
 80075c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075cc:	4303      	orrs	r3, r0
 80075ce:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	06d8      	lsls	r0, r3, #27
 80075d4:	d50c      	bpl.n	80075f0 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075d6:	4977      	ldr	r1, [pc, #476]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80075d8:	69a0      	ldr	r0, [r4, #24]
 80075da:	69ca      	ldr	r2, [r1, #28]
 80075dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075e0:	4290      	cmp	r0, r2
 80075e2:	d905      	bls.n	80075f0 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075e4:	69cb      	ldr	r3, [r1, #28]
 80075e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075ea:	4303      	orrs	r3, r0
 80075ec:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	0699      	lsls	r1, r3, #26
 80075f2:	d50c      	bpl.n	800760e <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075f4:	496f      	ldr	r1, [pc, #444]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80075f6:	69e0      	ldr	r0, [r4, #28]
 80075f8:	6a0a      	ldr	r2, [r1, #32]
 80075fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075fe:	4290      	cmp	r0, r2
 8007600:	d905      	bls.n	800760e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007602:	6a0b      	ldr	r3, [r1, #32]
 8007604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007608:	4303      	orrs	r3, r0
 800760a:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	079a      	lsls	r2, r3, #30
 8007610:	f140 8083 	bpl.w	800771a <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007614:	4867      	ldr	r0, [pc, #412]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	6982      	ldr	r2, [r0, #24]
 800761a:	f002 020f 	and.w	r2, r2, #15
 800761e:	4291      	cmp	r1, r2
 8007620:	f240 80a9 	bls.w	8007776 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007624:	6983      	ldr	r3, [r0, #24]
 8007626:	f023 030f 	bic.w	r3, r3, #15
 800762a:	430b      	orrs	r3, r1
 800762c:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07df      	lsls	r7, r3, #31
 8007632:	d474      	bmi.n	800771e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	079f      	lsls	r7, r3, #30
 8007636:	d507      	bpl.n	8007648 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007638:	4a5e      	ldr	r2, [pc, #376]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 800763a:	68e1      	ldr	r1, [r4, #12]
 800763c:	6993      	ldr	r3, [r2, #24]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	428b      	cmp	r3, r1
 8007644:	f200 80a0 	bhi.w	8007788 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007648:	4a59      	ldr	r2, [pc, #356]	; (80077b0 <HAL_RCC_ClockConfig+0x250>)
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	42ab      	cmp	r3, r5
 8007652:	d909      	bls.n	8007668 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007654:	6813      	ldr	r3, [r2, #0]
 8007656:	f023 030f 	bic.w	r3, r3, #15
 800765a:	432b      	orrs	r3, r5
 800765c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	42ab      	cmp	r3, r5
 8007666:	d192      	bne.n	800758e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	075e      	lsls	r6, r3, #29
 800766c:	d50c      	bpl.n	8007688 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800766e:	4951      	ldr	r1, [pc, #324]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 8007670:	6920      	ldr	r0, [r4, #16]
 8007672:	698a      	ldr	r2, [r1, #24]
 8007674:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007678:	4290      	cmp	r0, r2
 800767a:	d205      	bcs.n	8007688 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800767c:	698b      	ldr	r3, [r1, #24]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	4303      	orrs	r3, r0
 8007684:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	071d      	lsls	r5, r3, #28
 800768a:	d50c      	bpl.n	80076a6 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800768c:	4949      	ldr	r1, [pc, #292]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 800768e:	6960      	ldr	r0, [r4, #20]
 8007690:	69ca      	ldr	r2, [r1, #28]
 8007692:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007696:	4290      	cmp	r0, r2
 8007698:	d205      	bcs.n	80076a6 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800769a:	69cb      	ldr	r3, [r1, #28]
 800769c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a0:	4303      	orrs	r3, r0
 80076a2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	06d8      	lsls	r0, r3, #27
 80076a8:	d50c      	bpl.n	80076c4 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076aa:	4942      	ldr	r1, [pc, #264]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80076ac:	69a0      	ldr	r0, [r4, #24]
 80076ae:	69ca      	ldr	r2, [r1, #28]
 80076b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80076b4:	4290      	cmp	r0, r2
 80076b6:	d205      	bcs.n	80076c4 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076b8:	69cb      	ldr	r3, [r1, #28]
 80076ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076be:	4303      	orrs	r3, r0
 80076c0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	0699      	lsls	r1, r3, #26
 80076c6:	d50b      	bpl.n	80076e0 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076c8:	4a3a      	ldr	r2, [pc, #232]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80076ca:	69e1      	ldr	r1, [r4, #28]
 80076cc:	6a13      	ldr	r3, [r2, #32]
 80076ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d204      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076d6:	6a13      	ldr	r3, [r2, #32]
 80076d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076dc:	430b      	orrs	r3, r1
 80076de:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076e0:	f7ff fe9c 	bl	800741c <HAL_RCC_GetSysClockFreq>
 80076e4:	4a33      	ldr	r2, [pc, #204]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 80076e6:	4603      	mov	r3, r0
 80076e8:	4833      	ldr	r0, [pc, #204]	; (80077b8 <HAL_RCC_ClockConfig+0x258>)
 80076ea:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076ec:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076ee:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80076f2:	4d32      	ldr	r5, [pc, #200]	; (80077bc <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076f4:	f002 020f 	and.w	r2, r2, #15
 80076f8:	4c31      	ldr	r4, [pc, #196]	; (80077c0 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076fa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076fc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076fe:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8007702:	4830      	ldr	r0, [pc, #192]	; (80077c4 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007704:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007708:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800770a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800770c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800770e:	40d3      	lsrs	r3, r2
 8007710:	6023      	str	r3, [r4, #0]
}
 8007712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8007716:	f7fc bc27 	b.w	8003f68 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771a:	07db      	lsls	r3, r3, #31
 800771c:	d594      	bpl.n	8007648 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800771e:	4a25      	ldr	r2, [pc, #148]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 8007720:	68a1      	ldr	r1, [r4, #8]
 8007722:	6993      	ldr	r3, [r2, #24]
 8007724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007728:	430b      	orrs	r3, r1
 800772a:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772c:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800772e:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007730:	2902      	cmp	r1, #2
 8007732:	d034      	beq.n	800779e <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007734:	2903      	cmp	r1, #3
 8007736:	d02d      	beq.n	8007794 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007738:	2901      	cmp	r1, #1
 800773a:	d035      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800773c:	075b      	lsls	r3, r3, #29
 800773e:	f57f af26 	bpl.w	800758e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007742:	4e1c      	ldr	r6, [pc, #112]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007748:	6933      	ldr	r3, [r6, #16]
 800774a:	f023 0307 	bic.w	r3, r3, #7
 800774e:	430b      	orrs	r3, r1
 8007750:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8007752:	f7fc fc6b 	bl	800402c <HAL_GetTick>
 8007756:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007758:	e004      	b.n	8007764 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800775a:	f7fc fc67 	bl	800402c <HAL_GetTick>
 800775e:	1bc0      	subs	r0, r0, r7
 8007760:	4540      	cmp	r0, r8
 8007762:	d81f      	bhi.n	80077a4 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007764:	6933      	ldr	r3, [r6, #16]
 8007766:	6862      	ldr	r2, [r4, #4]
 8007768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800776c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007770:	d1f3      	bne.n	800775a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	e75e      	b.n	8007634 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007776:	07da      	lsls	r2, r3, #31
 8007778:	d4d1      	bmi.n	800771e <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800777a:	4a0e      	ldr	r2, [pc, #56]	; (80077b4 <HAL_RCC_ClockConfig+0x254>)
 800777c:	6993      	ldr	r3, [r2, #24]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	428b      	cmp	r3, r1
 8007784:	f67f af60 	bls.w	8007648 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007788:	6993      	ldr	r3, [r2, #24]
 800778a:	f023 030f 	bic.w	r3, r3, #15
 800778e:	430b      	orrs	r3, r1
 8007790:	6193      	str	r3, [r2, #24]
 8007792:	e759      	b.n	8007648 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007794:	0198      	lsls	r0, r3, #6
 8007796:	d4d4      	bmi.n	8007742 <HAL_RCC_ClockConfig+0x1e2>
 8007798:	e6f9      	b.n	800758e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800779a:	2001      	movs	r0, #1
}
 800779c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800779e:	039e      	lsls	r6, r3, #14
 80077a0:	d4cf      	bmi.n	8007742 <HAL_RCC_ClockConfig+0x1e2>
 80077a2:	e6f4      	b.n	800758e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80077a4:	2003      	movs	r0, #3
 80077a6:	e6f3      	b.n	8007590 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077a8:	05da      	lsls	r2, r3, #23
 80077aa:	d4ca      	bmi.n	8007742 <HAL_RCC_ClockConfig+0x1e2>
 80077ac:	e6ef      	b.n	800758e <HAL_RCC_ClockConfig+0x2e>
 80077ae:	bf00      	nop
 80077b0:	52002000 	.word	0x52002000
 80077b4:	58024400 	.word	0x58024400
 80077b8:	0801bbb0 	.word	0x0801bbb0
 80077bc:	20000af0 	.word	0x20000af0
 80077c0:	20000af4 	.word	0x20000af4
 80077c4:	20000b3c 	.word	0x20000b3c

080077c8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077c8:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ca:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077cc:	6913      	ldr	r3, [r2, #16]
 80077ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d01a      	beq.n	800780c <HAL_RCC_GetHCLKFreq+0x44>
 80077d6:	2b18      	cmp	r3, #24
 80077d8:	d023      	beq.n	8007822 <HAL_RCC_GetHCLKFreq+0x5a>
 80077da:	b1cb      	cbz	r3, 8007810 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80077dc:	4814      	ldr	r0, [pc, #80]	; (8007830 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <HAL_RCC_GetHCLKFreq+0x64>)
 80077e0:	4914      	ldr	r1, [pc, #80]	; (8007834 <HAL_RCC_GetHCLKFreq+0x6c>)
 80077e2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077e4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077e6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077ea:	4c13      	ldr	r4, [pc, #76]	; (8007838 <HAL_RCC_GetHCLKFreq+0x70>)
 80077ec:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077f0:	4d12      	ldr	r5, [pc, #72]	; (800783c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077f2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077f6:	f002 021f 	and.w	r2, r2, #31
 80077fa:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077fe:	f003 001f 	and.w	r0, r3, #31
 8007802:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8007806:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007808:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800780a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800780c:	480c      	ldr	r0, [pc, #48]	; (8007840 <HAL_RCC_GetHCLKFreq+0x78>)
 800780e:	e7e6      	b.n	80077de <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	069b      	lsls	r3, r3, #26
 8007814:	d508      	bpl.n	8007828 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	480a      	ldr	r0, [pc, #40]	; (8007844 <HAL_RCC_GetHCLKFreq+0x7c>)
 800781a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800781e:	40d8      	lsrs	r0, r3
 8007820:	e7dd      	b.n	80077de <HAL_RCC_GetHCLKFreq+0x16>
 8007822:	f7ff fa83 	bl	8006d2c <HAL_RCC_GetSysClockFreq.part.0>
 8007826:	e7da      	b.n	80077de <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007828:	4806      	ldr	r0, [pc, #24]	; (8007844 <HAL_RCC_GetHCLKFreq+0x7c>)
 800782a:	e7d8      	b.n	80077de <HAL_RCC_GetHCLKFreq+0x16>
 800782c:	58024400 	.word	0x58024400
 8007830:	003d0900 	.word	0x003d0900
 8007834:	0801bbb0 	.word	0x0801bbb0
 8007838:	20000af4 	.word	0x20000af4
 800783c:	20000af0 	.word	0x20000af0
 8007840:	017d7840 	.word	0x017d7840
 8007844:	03d09000 	.word	0x03d09000

08007848 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007848:	4a1c      	ldr	r2, [pc, #112]	; (80078bc <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800784a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800784c:	6913      	ldr	r3, [r2, #16]
 800784e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007852:	2b10      	cmp	r3, #16
 8007854:	d021      	beq.n	800789a <HAL_RCC_GetPCLK1Freq+0x52>
 8007856:	2b18      	cmp	r3, #24
 8007858:	d02a      	beq.n	80078b0 <HAL_RCC_GetPCLK1Freq+0x68>
 800785a:	b303      	cbz	r3, 800789e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800785c:	4818      	ldr	r0, [pc, #96]	; (80078c0 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800785e:	4a17      	ldr	r2, [pc, #92]	; (80078bc <HAL_RCC_GetPCLK1Freq+0x74>)
 8007860:	4918      	ldr	r1, [pc, #96]	; (80078c4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8007862:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007864:	4c18      	ldr	r4, [pc, #96]	; (80078c8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007866:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800786a:	4d18      	ldr	r5, [pc, #96]	; (80078cc <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800786c:	5ccb      	ldrb	r3, [r1, r3]
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007874:	6993      	ldr	r3, [r2, #24]
 8007876:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800787a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800787c:	5ccb      	ldrb	r3, [r1, r3]
 800787e:	f003 031f 	and.w	r3, r3, #31
 8007882:	fa20 f303 	lsr.w	r3, r0, r3
 8007886:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007888:	69d2      	ldr	r2, [r2, #28]
 800788a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800788e:	5c88      	ldrb	r0, [r1, r2]
 8007890:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007894:	fa23 f000 	lsr.w	r0, r3, r0
 8007898:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800789a:	480d      	ldr	r0, [pc, #52]	; (80078d0 <HAL_RCC_GetPCLK1Freq+0x88>)
 800789c:	e7df      	b.n	800785e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	069b      	lsls	r3, r3, #26
 80078a2:	d508      	bpl.n	80078b6 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a4:	6813      	ldr	r3, [r2, #0]
 80078a6:	480b      	ldr	r0, [pc, #44]	; (80078d4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80078a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80078ac:	40d8      	lsrs	r0, r3
 80078ae:	e7d6      	b.n	800785e <HAL_RCC_GetPCLK1Freq+0x16>
 80078b0:	f7ff fa3c 	bl	8006d2c <HAL_RCC_GetSysClockFreq.part.0>
 80078b4:	e7d3      	b.n	800785e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078b6:	4807      	ldr	r0, [pc, #28]	; (80078d4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80078b8:	e7d1      	b.n	800785e <HAL_RCC_GetPCLK1Freq+0x16>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
 80078c0:	003d0900 	.word	0x003d0900
 80078c4:	0801bbb0 	.word	0x0801bbb0
 80078c8:	20000af4 	.word	0x20000af4
 80078cc:	20000af0 	.word	0x20000af0
 80078d0:	017d7840 	.word	0x017d7840
 80078d4:	03d09000 	.word	0x03d09000

080078d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078da:	4c3a      	ldr	r4, [pc, #232]	; (80079c4 <RCCEx_PLL2_Config+0xec>)
 80078dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d067      	beq.n	80079b6 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	4606      	mov	r6, r0
 80078ea:	460f      	mov	r7, r1
 80078ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078f0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f2:	f7fc fb9b 	bl	800402c <HAL_GetTick>
 80078f6:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f8:	e004      	b.n	8007904 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078fa:	f7fc fb97 	bl	800402c <HAL_GetTick>
 80078fe:	1b43      	subs	r3, r0, r5
 8007900:	2b02      	cmp	r3, #2
 8007902:	d856      	bhi.n	80079b2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	011a      	lsls	r2, r3, #4
 8007908:	d4f7      	bmi.n	80078fa <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800790a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800790c:	6832      	ldr	r2, [r6, #0]
 800790e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007912:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007916:	62a3      	str	r3, [r4, #40]	; 0x28
 8007918:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800791c:	3b01      	subs	r3, #1
 800791e:	3a01      	subs	r2, #1
 8007920:	025b      	lsls	r3, r3, #9
 8007922:	0412      	lsls	r2, r2, #16
 8007924:	b29b      	uxth	r3, r3
 8007926:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800792a:	4313      	orrs	r3, r2
 800792c:	6872      	ldr	r2, [r6, #4]
 800792e:	3a01      	subs	r2, #1
 8007930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007934:	4313      	orrs	r3, r2
 8007936:	6932      	ldr	r2, [r6, #16]
 8007938:	3a01      	subs	r2, #1
 800793a:	0612      	lsls	r2, r2, #24
 800793c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007940:	4313      	orrs	r3, r2
 8007942:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007946:	6972      	ldr	r2, [r6, #20]
 8007948:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800794c:	4313      	orrs	r3, r2
 800794e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007952:	69b3      	ldr	r3, [r6, #24]
 8007954:	f022 0220 	bic.w	r2, r2, #32
 8007958:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800795a:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800795c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800795e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007960:	f022 0210 	bic.w	r2, r2, #16
 8007964:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007966:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007968:	69f2      	ldr	r2, [r6, #28]
 800796a:	400b      	ands	r3, r1
 800796c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007970:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007974:	f043 0310 	orr.w	r3, r3, #16
 8007978:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800797a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800797c:	b1ef      	cbz	r7, 80079ba <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800797e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007980:	bf0c      	ite	eq
 8007982:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007986:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800798a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800798c:	4c0d      	ldr	r4, [pc, #52]	; (80079c4 <RCCEx_PLL2_Config+0xec>)
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007994:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007996:	f7fc fb49 	bl	800402c <HAL_GetTick>
 800799a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800799c:	e004      	b.n	80079a8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800799e:	f7fc fb45 	bl	800402c <HAL_GetTick>
 80079a2:	1b40      	subs	r0, r0, r5
 80079a4:	2802      	cmp	r0, #2
 80079a6:	d804      	bhi.n	80079b2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	d5f7      	bpl.n	800799e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80079ae:	2000      	movs	r0, #0
}
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80079b2:	2003      	movs	r0, #3
}
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80079b6:	2001      	movs	r0, #1
}
 80079b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079c0:	e7e4      	b.n	800798c <RCCEx_PLL2_Config+0xb4>
 80079c2:	bf00      	nop
 80079c4:	58024400 	.word	0x58024400
 80079c8:	ffff0007 	.word	0xffff0007

080079cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079ce:	4c3a      	ldr	r4, [pc, #232]	; (8007ab8 <RCCEx_PLL3_Config+0xec>)
 80079d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d067      	beq.n	8007aaa <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	4606      	mov	r6, r0
 80079de:	460f      	mov	r7, r1
 80079e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e6:	f7fc fb21 	bl	800402c <HAL_GetTick>
 80079ea:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079ec:	e004      	b.n	80079f8 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079ee:	f7fc fb1d 	bl	800402c <HAL_GetTick>
 80079f2:	1b43      	subs	r3, r0, r5
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d856      	bhi.n	8007aa6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	009a      	lsls	r2, r3, #2
 80079fc:	d4f7      	bmi.n	80079ee <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a00:	6832      	ldr	r2, [r6, #0]
 8007a02:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007a06:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a0c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	3a01      	subs	r2, #1
 8007a14:	025b      	lsls	r3, r3, #9
 8007a16:	0412      	lsls	r2, r2, #16
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	6872      	ldr	r2, [r6, #4]
 8007a22:	3a01      	subs	r2, #1
 8007a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	6932      	ldr	r2, [r6, #16]
 8007a2c:	3a01      	subs	r2, #1
 8007a2e:	0612      	lsls	r2, r2, #24
 8007a30:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007a34:	4313      	orrs	r3, r2
 8007a36:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a3a:	6972      	ldr	r2, [r6, #20]
 8007a3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a40:	4313      	orrs	r3, r2
 8007a42:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a46:	69b3      	ldr	r3, [r6, #24]
 8007a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a4c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a50:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a58:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a5c:	69f2      	ldr	r2, [r6, #28]
 8007a5e:	400b      	ands	r3, r1
 8007a60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007a64:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007a70:	b1ef      	cbz	r7, 8007aae <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a72:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a74:	bf0c      	ite	eq
 8007a76:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a7a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a80:	4c0d      	ldr	r4, [pc, #52]	; (8007ab8 <RCCEx_PLL3_Config+0xec>)
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8a:	f7fc facf 	bl	800402c <HAL_GetTick>
 8007a8e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a90:	e004      	b.n	8007a9c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a92:	f7fc facb 	bl	800402c <HAL_GetTick>
 8007a96:	1b40      	subs	r0, r0, r5
 8007a98:	2802      	cmp	r0, #2
 8007a9a:	d804      	bhi.n	8007aa6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	d5f7      	bpl.n	8007a92 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8007aa2:	2000      	movs	r0, #0
}
 8007aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007aa6:	2003      	movs	r0, #3
}
 8007aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007aaa:	2001      	movs	r0, #1
}
 8007aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ab2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ab4:	e7e4      	b.n	8007a80 <RCCEx_PLL3_Config+0xb4>
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	ffff0007 	.word	0xffff0007

08007ac0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ac4:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8007ac8:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aca:	011d      	lsls	r5, r3, #4
 8007acc:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8007ad0:	d521      	bpl.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ad2:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007ad4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007ad8:	f000 8577 	beq.w	80085ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007adc:	d80e      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	f000 85d2 	beq.w	8008688 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8007ae4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007ae8:	f040 85cb 	bne.w	8008682 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aec:	2102      	movs	r1, #2
 8007aee:	3008      	adds	r0, #8
 8007af0:	f7ff fef2 	bl	80078d8 <RCCEx_PLL2_Config>
 8007af4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007af6:	b966      	cbnz	r6, 8007b12 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007af8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007afa:	e003      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007afc:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007b00:	f040 85bf 	bne.w	8008682 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b04:	4aa3      	ldr	r2, [pc, #652]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b06:	2600      	movs	r6, #0
 8007b08:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007b0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b12:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b16:	05d8      	lsls	r0, r3, #23
 8007b18:	d50a      	bpl.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b1c:	2904      	cmp	r1, #4
 8007b1e:	d806      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007b20:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007b24:	0564055d 	.word	0x0564055d
 8007b28:	0310057b 	.word	0x0310057b
 8007b2c:	0310      	.short	0x0310
 8007b2e:	2601      	movs	r6, #1
 8007b30:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b32:	0599      	lsls	r1, r3, #22
 8007b34:	d517      	bpl.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b38:	2980      	cmp	r1, #128	; 0x80
 8007b3a:	f000 8575 	beq.w	8008628 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8007b3e:	f200 80e1 	bhi.w	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007b42:	2900      	cmp	r1, #0
 8007b44:	f000 8446 	beq.w	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007b48:	2940      	cmp	r1, #64	; 0x40
 8007b4a:	f040 80e2 	bne.w	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f104 0008 	add.w	r0, r4, #8
 8007b54:	f7ff fec0 	bl	80078d8 <RCCEx_PLL2_Config>
 8007b58:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	f000 83f6 	beq.w	800834c <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b60:	462e      	mov	r6, r5
 8007b62:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b66:	055f      	lsls	r7, r3, #21
 8007b68:	d51a      	bpl.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b6a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8007b6e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007b72:	f000 8522 	beq.w	80085ba <HAL_RCCEx_PeriphCLKConfig+0xafa>
 8007b76:	f200 80cf 	bhi.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	f000 8431 	beq.w	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8007b80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007b84:	f040 80d0 	bne.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f104 0008 	add.w	r0, r4, #8
 8007b8e:	f7ff fea3 	bl	80078d8 <RCCEx_PLL2_Config>
 8007b92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	f000 83f8 	beq.w	800838a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b9a:	462e      	mov	r6, r5
 8007b9c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ba0:	0518      	lsls	r0, r3, #20
 8007ba2:	d51a      	bpl.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007ba4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007ba8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007bac:	f000 852d 	beq.w	800860a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8007bb0:	f200 80bd 	bhi.w	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	f000 8406 	beq.w	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8007bba:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007bbe:	f040 80be 	bne.w	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	f104 0008 	add.w	r0, r4, #8
 8007bc8:	f7ff fe86 	bl	80078d8 <RCCEx_PLL2_Config>
 8007bcc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	f000 83b1 	beq.w	8008336 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bd4:	462e      	mov	r6, r5
 8007bd6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bda:	0199      	lsls	r1, r3, #6
 8007bdc:	d51a      	bpl.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 8007bde:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007be0:	2920      	cmp	r1, #32
 8007be2:	f000 84b4 	beq.w	800854e <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8007be6:	f200 80ad 	bhi.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8007bea:	b139      	cbz	r1, 8007bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007bec:	2910      	cmp	r1, #16
 8007bee:	f040 80ac 	bne.w	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf2:	4a68      	ldr	r2, [pc, #416]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	f040 8418 	bne.w	8008432 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c02:	4a64      	ldr	r2, [pc, #400]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007c06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007c08:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c10:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c14:	04df      	lsls	r7, r3, #19
 8007c16:	d519      	bpl.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c18:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007c1a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007c1e:	f000 84ec 	beq.w	80085fa <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8007c22:	f200 8095 	bhi.w	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8007c26:	2900      	cmp	r1, #0
 8007c28:	f000 83c7 	beq.w	80083ba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8007c2c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007c30:	f040 8096 	bne.w	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c34:	2100      	movs	r1, #0
 8007c36:	f104 0008 	add.w	r0, r4, #8
 8007c3a:	f7ff fe4d 	bl	80078d8 <RCCEx_PLL2_Config>
 8007c3e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	f000 838d 	beq.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c46:	462e      	mov	r6, r5
 8007c48:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c4c:	0498      	lsls	r0, r3, #18
 8007c4e:	d51d      	bpl.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007c52:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007c56:	f000 8466 	beq.w	8008526 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007c5a:	f200 8084 	bhi.w	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c5e:	b149      	cbz	r1, 8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007c60:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007c64:	f040 8088 	bne.w	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c68:	2101      	movs	r1, #1
 8007c6a:	f104 0008 	add.w	r0, r4, #8
 8007c6e:	f7ff fe33 	bl	80078d8 <RCCEx_PLL2_Config>
 8007c72:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	f040 83eb 	bne.w	8008450 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c7a:	4a46      	ldr	r2, [pc, #280]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c7c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007c7e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007c80:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007c84:	430b      	orrs	r3, r1
 8007c86:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c88:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c8c:	0459      	lsls	r1, r3, #17
 8007c8e:	d51d      	bpl.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c90:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007c94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007c98:	f000 844f 	beq.w	800853a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007c9c:	d86f      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007c9e:	b141      	cbz	r1, 8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007ca0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007ca4:	d173      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	f104 0008 	add.w	r0, r4, #8
 8007cac:	f7ff fe14 	bl	80078d8 <RCCEx_PLL2_Config>
 8007cb0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	f040 83d4 	bne.w	8008460 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007cb8:	4a36      	ldr	r2, [pc, #216]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cba:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007cbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007cc0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cc8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ccc:	041f      	lsls	r7, r3, #16
 8007cce:	d50d      	bpl.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 8007cd0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007cd2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007cd6:	f000 841d 	beq.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007cda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007cde:	f000 8239 	beq.w	8008154 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	f000 823c 	beq.w	8008160 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8007ce8:	2601      	movs	r6, #1
 8007cea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cec:	01d8      	lsls	r0, r3, #7
 8007cee:	d55e      	bpl.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 8007cf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007cf2:	2903      	cmp	r1, #3
 8007cf4:	f200 84f3 	bhi.w	80086de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007cf8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007cfc:	004e0053 	.word	0x004e0053
 8007d00:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 8007d04:	29c0      	cmp	r1, #192	; 0xc0
 8007d06:	f43f af28 	beq.w	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007d0a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007d0e:	f43f af24 	beq.w	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007d12:	2601      	movs	r6, #1
 8007d14:	4635      	mov	r5, r6
 8007d16:	e726      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d18:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8007d1c:	f43f af3a 	beq.w	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007d24:	f43f af36 	beq.w	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d28:	2601      	movs	r6, #1
 8007d2a:	4635      	mov	r5, r6
 8007d2c:	e738      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d2e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007d32:	f43f af4c 	beq.w	8007bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007d36:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007d3a:	f43f af48 	beq.w	8007bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007d3e:	2601      	movs	r6, #1
 8007d40:	4635      	mov	r5, r6
 8007d42:	e74a      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 8007d44:	2930      	cmp	r1, #48	; 0x30
 8007d46:	f43f af59 	beq.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d4a:	2601      	movs	r6, #1
 8007d4c:	4635      	mov	r5, r6
 8007d4e:	e761      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d50:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8007d54:	f43f af74 	beq.w	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007d58:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007d5c:	f43f af70 	beq.w	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007d60:	2601      	movs	r6, #1
 8007d62:	4635      	mov	r5, r6
 8007d64:	e772      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d66:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8007d6a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8007d6e:	d081      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007d70:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007d74:	f43f af7e 	beq.w	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007d78:	2601      	movs	r6, #1
 8007d7a:	4635      	mov	r5, r6
 8007d7c:	e786      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d7e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8007d82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007d86:	d094      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007d88:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007d8c:	d091      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007d8e:	2601      	movs	r6, #1
 8007d90:	4635      	mov	r5, r6
 8007d92:	e79b      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8007d94:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d98:	4a34      	ldr	r2, [pc, #208]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	f000 834a 	beq.w	800843c <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007da8:	462e      	mov	r6, r5
 8007daa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007dae:	0259      	lsls	r1, r3, #9
 8007db0:	f100 826f 	bmi.w	8008292 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007db4:	07d8      	lsls	r0, r3, #31
 8007db6:	d52f      	bpl.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007db8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007dba:	2928      	cmp	r1, #40	; 0x28
 8007dbc:	d82a      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007dbe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007dc2:	020d      	.short	0x020d
 8007dc4:	00290029 	.word	0x00290029
 8007dc8:	00290029 	.word	0x00290029
 8007dcc:	00290029 	.word	0x00290029
 8007dd0:	02070029 	.word	0x02070029
 8007dd4:	00290029 	.word	0x00290029
 8007dd8:	00290029 	.word	0x00290029
 8007ddc:	00290029 	.word	0x00290029
 8007de0:	04500029 	.word	0x04500029
 8007de4:	00290029 	.word	0x00290029
 8007de8:	00290029 	.word	0x00290029
 8007dec:	00290029 	.word	0x00290029
 8007df0:	020d0029 	.word	0x020d0029
 8007df4:	00290029 	.word	0x00290029
 8007df8:	00290029 	.word	0x00290029
 8007dfc:	00290029 	.word	0x00290029
 8007e00:	020d0029 	.word	0x020d0029
 8007e04:	00290029 	.word	0x00290029
 8007e08:	00290029 	.word	0x00290029
 8007e0c:	00290029 	.word	0x00290029
 8007e10:	020d0029 	.word	0x020d0029
 8007e14:	2601      	movs	r6, #1
 8007e16:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e18:	0799      	lsls	r1, r3, #30
 8007e1a:	d517      	bpl.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e1c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007e1e:	2905      	cmp	r1, #5
 8007e20:	f200 8465 	bhi.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8007e24:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e28:	0006000c 	.word	0x0006000c
 8007e2c:	000c0412 	.word	0x000c0412
 8007e30:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e34:	2101      	movs	r1, #1
 8007e36:	f104 0008 	add.w	r0, r4, #8
 8007e3a:	f7ff fd4d 	bl	80078d8 <RCCEx_PLL2_Config>
 8007e3e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	f000 82dd 	beq.w	8008400 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e46:	462e      	mov	r6, r5
 8007e48:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e4c:	075f      	lsls	r7, r3, #29
 8007e4e:	d51b      	bpl.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e50:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007e54:	2905      	cmp	r1, #5
 8007e56:	f200 8446 	bhi.w	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007e5a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e5e:	000f      	.short	0x000f
 8007e60:	03ed0009 	.word	0x03ed0009
 8007e64:	000f000f 	.word	0x000f000f
 8007e68:	000f      	.short	0x000f
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e70:	2101      	movs	r1, #1
 8007e72:	f104 0008 	add.w	r0, r4, #8
 8007e76:	f7ff fd2f 	bl	80078d8 <RCCEx_PLL2_Config>
 8007e7a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	f000 82c9 	beq.w	8008414 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e82:	462e      	mov	r6, r5
 8007e84:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e88:	0698      	lsls	r0, r3, #26
 8007e8a:	d51f      	bpl.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e8c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007e90:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007e94:	f000 8365 	beq.w	8008562 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007e98:	f200 811c 	bhi.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007e9c:	b149      	cbz	r1, 8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007e9e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007ea2:	f040 8121 	bne.w	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f104 0008 	add.w	r0, r4, #8
 8007eac:	f7ff fd14 	bl	80078d8 <RCCEx_PLL2_Config>
 8007eb0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	f040 82b9 	bne.w	800842a <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eb8:	4ab0      	ldr	r2, [pc, #704]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007eba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007ebe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ec0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ec8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ecc:	0659      	lsls	r1, r3, #25
 8007ece:	d51f      	bpl.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ed0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007ed4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007ed8:	f000 8308 	beq.w	80084ec <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007edc:	f200 8107 	bhi.w	80080ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007ee0:	b149      	cbz	r1, 8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007ee2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ee6:	f040 810c 	bne.w	8008102 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eea:	2100      	movs	r1, #0
 8007eec:	f104 0008 	add.w	r0, r4, #8
 8007ef0:	f7ff fcf2 	bl	80078d8 <RCCEx_PLL2_Config>
 8007ef4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	f040 82b6 	bne.w	8008468 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007efc:	4a9f      	ldr	r2, [pc, #636]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007efe:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007f02:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f04:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f0c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f10:	061f      	lsls	r7, r3, #24
 8007f12:	d51f      	bpl.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f14:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007f18:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007f1c:	f000 82f0 	beq.w	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007f20:	f200 80f2 	bhi.w	8008108 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007f24:	b149      	cbz	r1, 8007f3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007f26:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007f2a:	f040 80f7 	bne.w	800811c <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f104 0008 	add.w	r0, r4, #8
 8007f34:	f7ff fcd0 	bl	80078d8 <RCCEx_PLL2_Config>
 8007f38:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	f040 828c 	bne.w	8008458 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f40:	4a8e      	ldr	r2, [pc, #568]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007f42:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007f46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f54:	0718      	lsls	r0, r3, #28
 8007f56:	d50d      	bpl.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f58:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007f5c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007f60:	f000 8313 	beq.w	800858a <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f64:	4985      	ldr	r1, [pc, #532]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007f66:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8007f68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f74:	06d9      	lsls	r1, r3, #27
 8007f76:	d50d      	bpl.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f78:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8007f7c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007f80:	f000 830f 	beq.w	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f84:	497d      	ldr	r1, [pc, #500]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007f86:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8007f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f90:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f94:	031f      	lsls	r7, r3, #12
 8007f96:	d50e      	bpl.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 8007f98:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007f9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007fa0:	f000 8102 	beq.w	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8007fa4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007fa8:	f000 8104 	beq.w	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007fac:	2900      	cmp	r1, #0
 8007fae:	f000 8292 	beq.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007fb2:	2601      	movs	r6, #1
 8007fb4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fb6:	0358      	lsls	r0, r3, #13
 8007fb8:	d50f      	bpl.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 8007fba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007fbe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007fc2:	f000 80dd 	beq.w	8008180 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8007fc6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007fca:	f000 80df 	beq.w	800818c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8007fce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007fd2:	f000 8277 	beq.w	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007fd6:	2601      	movs	r6, #1
 8007fd8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fda:	03d9      	lsls	r1, r3, #15
 8007fdc:	d509      	bpl.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007fde:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	f000 825a 	beq.w	800849a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007fe6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007fea:	f000 81da 	beq.w	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007fee:	2601      	movs	r6, #1
 8007ff0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ff2:	009f      	lsls	r7, r3, #2
 8007ff4:	f100 80ff 	bmi.w	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ff8:	0398      	lsls	r0, r3, #14
 8007ffa:	d50e      	bpl.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 8007ffc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008000:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008004:	f000 8240 	beq.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8008008:	f240 808b 	bls.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800800c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008010:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008014:	f000 8088 	beq.w	8008128 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8008018:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800801a:	02d9      	lsls	r1, r3, #11
 800801c:	d508      	bpl.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800801e:	4a57      	ldr	r2, [pc, #348]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008020:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008022:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008028:	430b      	orrs	r3, r1
 800802a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800802c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008030:	00df      	lsls	r7, r3, #3
 8008032:	d509      	bpl.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008034:	4a51      	ldr	r2, [pc, #324]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008036:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800803a:	6913      	ldr	r3, [r2, #16]
 800803c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008040:	430b      	orrs	r3, r1
 8008042:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008044:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008048:	029d      	lsls	r5, r3, #10
 800804a:	d508      	bpl.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800804c:	4a4b      	ldr	r2, [pc, #300]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800804e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008050:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008056:	430b      	orrs	r3, r1
 8008058:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800805a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800805e:	0058      	lsls	r0, r3, #1
 8008060:	d50b      	bpl.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008062:	4b46      	ldr	r3, [pc, #280]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800806a:	611a      	str	r2, [r3, #16]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8008072:	430a      	orrs	r2, r1
 8008074:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008076:	e9d4 3200 	ldrd	r3, r2, [r4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	da08      	bge.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800807e:	4a3f      	ldr	r2, [pc, #252]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008080:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008082:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008084:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008088:	430b      	orrs	r3, r1
 800808a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800808c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008090:	0219      	lsls	r1, r3, #8
 8008092:	d508      	bpl.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008094:	4a39      	ldr	r2, [pc, #228]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008096:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800809a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800809c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80080a0:	430b      	orrs	r3, r1
 80080a2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080a4:	6862      	ldr	r2, [r4, #4]
 80080a6:	07d3      	lsls	r3, r2, #31
 80080a8:	f100 80b1 	bmi.w	800820e <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080ac:	0797      	lsls	r7, r2, #30
 80080ae:	f100 80bb 	bmi.w	8008228 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080b2:	0755      	lsls	r5, r2, #29
 80080b4:	f100 80c5 	bmi.w	8008242 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080b8:	0710      	lsls	r0, r2, #28
 80080ba:	f100 80cf 	bmi.w	800825c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080be:	06d1      	lsls	r1, r2, #27
 80080c0:	f100 80d9 	bmi.w	8008276 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080c4:	0692      	lsls	r2, r2, #26
 80080c6:	f100 812a 	bmi.w	800831e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 80080ca:	1e30      	subs	r0, r6, #0
 80080cc:	bf18      	it	ne
 80080ce:	2001      	movne	r0, #1
}
 80080d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080d4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80080d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80080dc:	f43f aee9 	beq.w	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80080e0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80080e4:	f43f aee5 	beq.w	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80080e8:	2601      	movs	r6, #1
 80080ea:	4635      	mov	r5, r6
 80080ec:	e6ee      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80080ee:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80080f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80080f6:	f43f aefe 	beq.w	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80080fa:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80080fe:	f43f aefa 	beq.w	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008102:	2601      	movs	r6, #1
 8008104:	4635      	mov	r5, r6
 8008106:	e703      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008108:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800810c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008110:	f43f af13 	beq.w	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008114:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8008118:	f43f af0f 	beq.w	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800811c:	2601      	movs	r6, #1
 800811e:	4635      	mov	r5, r6
 8008120:	e718      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 8008122:	2900      	cmp	r1, #0
 8008124:	f47f af78 	bne.w	8008018 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 8008128:	2d00      	cmp	r5, #0
 800812a:	f040 81c7 	bne.w	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008130:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008134:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800813a:	430b      	orrs	r3, r1
 800813c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800813e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008142:	e76a      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8008144:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8008146:	2d00      	cmp	r5, #0
 8008148:	f000 8114 	beq.w	8008374 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800814c:	462e      	mov	r6, r5
 800814e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008152:	e4ee      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008154:	2101      	movs	r1, #1
 8008156:	f104 0008 	add.w	r0, r4, #8
 800815a:	f7ff fbbd 	bl	80078d8 <RCCEx_PLL2_Config>
 800815e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008160:	2d00      	cmp	r5, #0
 8008162:	f040 8149 	bne.w	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008166:	4a05      	ldr	r2, [pc, #20]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008168:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800816a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800816c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008170:	430b      	orrs	r3, r1
 8008172:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008174:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008178:	e5b8      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800817a:	bf00      	nop
 800817c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008180:	2101      	movs	r1, #1
 8008182:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008186:	f7ff fc21 	bl	80079cc <RCCEx_PLL3_Config>
 800818a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800818c:	2d00      	cmp	r5, #0
 800818e:	f040 8173 	bne.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008192:	4abb      	ldr	r2, [pc, #748]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008194:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8008198:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800819a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800819e:	430b      	orrs	r3, r1
 80081a0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081a6:	e718      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a8:	2102      	movs	r1, #2
 80081aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80081ae:	f7ff fc0d 	bl	80079cc <RCCEx_PLL3_Config>
 80081b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	f040 815b 	bne.w	8008470 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081ba:	4ab1      	ldr	r2, [pc, #708]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081bc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80081c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80081c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80081c6:	430b      	orrs	r3, r1
 80081c8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081ca:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081ce:	e6f2      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081d0:	2101      	movs	r1, #1
 80081d2:	f104 0008 	add.w	r0, r4, #8
 80081d6:	f7ff fb7f 	bl	80078d8 <RCCEx_PLL2_Config>
 80081da:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80081dc:	2d00      	cmp	r5, #0
 80081de:	f040 8107 	bne.w	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081e2:	4aa7      	ldr	r2, [pc, #668]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081e4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80081e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081e8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081f4:	e610      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081f6:	2102      	movs	r1, #2
 80081f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80081fc:	f7ff fbe6 	bl	80079cc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008200:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008204:	2800      	cmp	r0, #0
 8008206:	f43f aef7 	beq.w	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 800820a:	2601      	movs	r6, #1
 800820c:	e6f4      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800820e:	2100      	movs	r1, #0
 8008210:	f104 0008 	add.w	r0, r4, #8
 8008214:	f7ff fb60 	bl	80078d8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008218:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800821a:	2800      	cmp	r0, #0
 800821c:	f43f af46 	beq.w	80080ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008220:	0797      	lsls	r7, r2, #30
 8008222:	4606      	mov	r6, r0
 8008224:	f57f af45 	bpl.w	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008228:	2101      	movs	r1, #1
 800822a:	f104 0008 	add.w	r0, r4, #8
 800822e:	f7ff fb53 	bl	80078d8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008232:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008234:	2800      	cmp	r0, #0
 8008236:	f43f af3c 	beq.w	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800823a:	0755      	lsls	r5, r2, #29
 800823c:	4606      	mov	r6, r0
 800823e:	f57f af3b 	bpl.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008242:	2102      	movs	r1, #2
 8008244:	f104 0008 	add.w	r0, r4, #8
 8008248:	f7ff fb46 	bl	80078d8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800824c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800824e:	2800      	cmp	r0, #0
 8008250:	f43f af32 	beq.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008254:	4606      	mov	r6, r0
 8008256:	0710      	lsls	r0, r2, #28
 8008258:	f57f af31 	bpl.w	80080be <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800825c:	2100      	movs	r1, #0
 800825e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008262:	f7ff fbb3 	bl	80079cc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008266:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008268:	2800      	cmp	r0, #0
 800826a:	f43f af28 	beq.w	80080be <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800826e:	06d1      	lsls	r1, r2, #27
 8008270:	4606      	mov	r6, r0
 8008272:	f57f af27 	bpl.w	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008276:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800827a:	2101      	movs	r1, #1
 800827c:	4628      	mov	r0, r5
 800827e:	f7ff fba5 	bl	80079cc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8008282:	2800      	cmp	r0, #0
 8008284:	f000 8130 	beq.w	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	069b      	lsls	r3, r3, #26
 800828c:	d550      	bpl.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800828e:	4606      	mov	r6, r0
 8008290:	e047      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008292:	4f7c      	ldr	r7, [pc, #496]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800829c:	f7fb fec6 	bl	800402c <HAL_GetTick>
 80082a0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a2:	e006      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a4:	f7fb fec2 	bl	800402c <HAL_GetTick>
 80082a8:	eba0 0008 	sub.w	r0, r0, r8
 80082ac:	2864      	cmp	r0, #100	; 0x64
 80082ae:	f200 81e2 	bhi.w	8008676 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	05da      	lsls	r2, r3, #23
 80082b6:	d5f5      	bpl.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	f040 820b 	bne.w	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082be:	4b70      	ldr	r3, [pc, #448]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80082c0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80082c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80082c6:	4051      	eors	r1, r2
 80082c8:	f411 7f40 	tst.w	r1, #768	; 0x300
 80082cc:	d00d      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80082d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80082d6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80082da:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80082de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80082e2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80082e4:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082e6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80082ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80082ee:	f000 81d3 	beq.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082f2:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80082f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082fa:	f000 81e1 	beq.w	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 80082fe:	4a60      	ldr	r2, [pc, #384]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008300:	6913      	ldr	r3, [r2, #16]
 8008302:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008306:	6113      	str	r3, [r2, #16]
 8008308:	4a5d      	ldr	r2, [pc, #372]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800830a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800830e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008314:	430b      	orrs	r3, r1
 8008316:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008318:	e9d4 3200 	ldrd	r3, r2, [r4]
 800831c:	e54a      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800831e:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008322:	2102      	movs	r1, #2
 8008324:	4628      	mov	r0, r5
 8008326:	f7ff fb51 	bl	80079cc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800832a:	2800      	cmp	r0, #0
 800832c:	f43f aecd 	beq.w	80080ca <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 8008330:	2001      	movs	r0, #1
}
 8008332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008336:	4a52      	ldr	r2, [pc, #328]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008338:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800833c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800833e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008342:	430b      	orrs	r3, r1
 8008344:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008346:	e9d4 3200 	ldrd	r3, r2, [r4]
 800834a:	e446      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800834c:	4a4c      	ldr	r2, [pc, #304]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800834e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008350:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008352:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008356:	430b      	orrs	r3, r1
 8008358:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800835a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800835e:	e402      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008360:	4a47      	ldr	r2, [pc, #284]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008362:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008364:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836a:	430b      	orrs	r3, r1
 800836c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800836e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008372:	e46b      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008374:	4a42      	ldr	r2, [pc, #264]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008376:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008378:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	430b      	orrs	r3, r1
 8008380:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008382:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008386:	f7ff bbd4 	b.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800838a:	4a3d      	ldr	r2, [pc, #244]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800838c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008390:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008392:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008396:	430b      	orrs	r3, r1
 8008398:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800839a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800839e:	f7ff bbff 	b.w	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083a2:	2102      	movs	r1, #2
 80083a4:	f104 0008 	add.w	r0, r4, #8
 80083a8:	f7ff fa96 	bl	80078d8 <RCCEx_PLL2_Config>
 80083ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	d07a      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083b2:	462e      	mov	r6, r5
 80083b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083b8:	e61b      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ba:	4a31      	ldr	r2, [pc, #196]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80083bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80083c4:	e43c      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c6:	4a2e      	ldr	r2, [pc, #184]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80083c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80083d0:	f7ff bbfd 	b.w	8007bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d4:	4a2a      	ldr	r2, [pc, #168]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80083d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80083de:	f7ff bbbc 	b.w	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e2:	4a27      	ldr	r2, [pc, #156]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80083e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80083ec:	f7ff bbd2 	b.w	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083f4:	462e      	mov	r6, r5
 80083f6:	e50f      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083fc:	462e      	mov	r6, r5
 80083fe:	e475      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008402:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008404:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008406:	f023 0307 	bic.w	r3, r3, #7
 800840a:	430b      	orrs	r3, r1
 800840c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800840e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008412:	e51b      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008414:	4a1a      	ldr	r2, [pc, #104]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008416:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800841a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	430b      	orrs	r3, r1
 8008422:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008424:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008428:	e52e      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800842a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800842e:	462e      	mov	r6, r5
 8008430:	e54c      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008432:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008436:	462e      	mov	r6, r5
 8008438:	f7ff bbec 	b.w	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800843c:	4a10      	ldr	r2, [pc, #64]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800843e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008440:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008442:	f023 0303 	bic.w	r3, r3, #3
 8008446:	430b      	orrs	r3, r1
 8008448:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800844a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800844e:	e4ae      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008450:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008454:	462e      	mov	r6, r5
 8008456:	e419      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008458:	e9d4 3200 	ldrd	r3, r2, [r4]
 800845c:	462e      	mov	r6, r5
 800845e:	e579      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008460:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008464:	462e      	mov	r6, r5
 8008466:	e431      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008468:	e9d4 3200 	ldrd	r3, r2, [r4]
 800846c:	462e      	mov	r6, r5
 800846e:	e54f      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008470:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008474:	462e      	mov	r6, r5
 8008476:	e59e      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008478:	e9d4 3200 	ldrd	r3, r2, [r4]
 800847c:	462e      	mov	r6, r5
 800847e:	e5ac      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008480:	58024400 	.word	0x58024400
 8008484:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4a9b      	ldr	r2, [pc, #620]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800848a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800848c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008490:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8008492:	2d00      	cmp	r5, #0
 8008494:	f43f ae4b 	beq.w	800812e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008498:	e010      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849a:	4a97      	ldr	r2, [pc, #604]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800849c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800849e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	d184      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084a8:	4a93      	ldr	r2, [pc, #588]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80084aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80084ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80084ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b2:	430b      	orrs	r3, r1
 80084b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084ba:	e59a      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084c0:	462e      	mov	r6, r5
 80084c2:	e5aa      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4a8c      	ldr	r2, [pc, #560]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80084c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f43f ae5f 	beq.w	8008192 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 80084d4:	e7d0      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d6:	f104 0008 	add.w	r0, r4, #8
 80084da:	f7ff f9fd 	bl	80078d8 <RCCEx_PLL2_Config>
 80084de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	f43f ae6a 	beq.w	80081ba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80084e6:	e7c3      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084e8:	6862      	ldr	r2, [r4, #4]
 80084ea:	e5eb      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084ec:	2102      	movs	r1, #2
 80084ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80084f2:	f7ff fa6b 	bl	80079cc <RCCEx_PLL3_Config>
 80084f6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	f43f acff 	beq.w	8007efc <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80084fe:	e7b3      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008500:	2102      	movs	r1, #2
 8008502:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008506:	f7ff fa61 	bl	80079cc <RCCEx_PLL3_Config>
 800850a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800850c:	2d00      	cmp	r5, #0
 800850e:	f43f ad17 	beq.w	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008512:	e7a1      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008514:	4a78      	ldr	r2, [pc, #480]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008516:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800851c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800851e:	2d00      	cmp	r5, #0
 8008520:	f43f ae21 	beq.w	8008166 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8008524:	e768      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008526:	2101      	movs	r1, #1
 8008528:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800852c:	f7ff fa4e 	bl	80079cc <RCCEx_PLL3_Config>
 8008530:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008532:	2d00      	cmp	r5, #0
 8008534:	f43f aba1 	beq.w	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8008538:	e78a      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800853a:	2101      	movs	r1, #1
 800853c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008540:	f7ff fa44 	bl	80079cc <RCCEx_PLL3_Config>
 8008544:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008546:	2d00      	cmp	r5, #0
 8008548:	f43f abb6 	beq.w	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800854c:	e788      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800854e:	2102      	movs	r1, #2
 8008550:	f104 0008 	add.w	r0, r4, #8
 8008554:	f7ff f9c0 	bl	80078d8 <RCCEx_PLL2_Config>
 8008558:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800855a:	2d00      	cmp	r5, #0
 800855c:	f43f ab51 	beq.w	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008560:	e767      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008562:	2102      	movs	r1, #2
 8008564:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008568:	f7ff fa30 	bl	80079cc <RCCEx_PLL3_Config>
 800856c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800856e:	2d00      	cmp	r5, #0
 8008570:	f43f aca2 	beq.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008574:	e759      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008576:	2102      	movs	r1, #2
 8008578:	f104 0008 	add.w	r0, r4, #8
 800857c:	f7ff f9ac 	bl	80078d8 <RCCEx_PLL2_Config>
 8008580:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008582:	2d00      	cmp	r5, #0
 8008584:	f43f af5a 	beq.w	800843c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008588:	e40e      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800858a:	2102      	movs	r1, #2
 800858c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008590:	f7ff fa1c 	bl	80079cc <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008594:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008598:	2800      	cmp	r0, #0
 800859a:	f43f ace3 	beq.w	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 800859e:	2601      	movs	r6, #1
 80085a0:	e4e0      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085a2:	2102      	movs	r1, #2
 80085a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085a8:	f7ff fa10 	bl	80079cc <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085ac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f43f ace7 	beq.w	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 80085b6:	2601      	movs	r6, #1
 80085b8:	e4e4      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085ba:	2100      	movs	r1, #0
 80085bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085c0:	f7ff fa04 	bl	80079cc <RCCEx_PLL3_Config>
 80085c4:	4605      	mov	r5, r0
        break;
 80085c6:	f7ff bae5 	b.w	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ca:	2102      	movs	r1, #2
 80085cc:	3028      	adds	r0, #40	; 0x28
 80085ce:	f7ff f9fd 	bl	80079cc <RCCEx_PLL3_Config>
 80085d2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	f43f aa8f 	beq.w	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80085da:	f7ff ba9a 	b.w	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085de:	4a46      	ldr	r2, [pc, #280]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 80085e0:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80085ea:	e5ac      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ec:	2100      	movs	r1, #0
 80085ee:	f104 0008 	add.w	r0, r4, #8
 80085f2:	f7ff f971 	bl	80078d8 <RCCEx_PLL2_Config>
 80085f6:	4605      	mov	r5, r0
        break;
 80085f8:	e5a5      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085fa:	2100      	movs	r1, #0
 80085fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008600:	f7ff f9e4 	bl	80079cc <RCCEx_PLL3_Config>
 8008604:	4605      	mov	r5, r0
        break;
 8008606:	f7ff bb1b 	b.w	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800860a:	2100      	movs	r1, #0
 800860c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008610:	f7ff f9dc 	bl	80079cc <RCCEx_PLL3_Config>
 8008614:	4605      	mov	r5, r0
        break;
 8008616:	f7ff bada 	b.w	8007bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800861a:	2100      	movs	r1, #0
 800861c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008620:	f7ff f9d4 	bl	80079cc <RCCEx_PLL3_Config>
 8008624:	4605      	mov	r5, r0
        break;
 8008626:	e58e      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008628:	2100      	movs	r1, #0
 800862a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800862e:	f7ff f9cd 	bl	80079cc <RCCEx_PLL3_Config>
 8008632:	4605      	mov	r5, r0
        break;
 8008634:	f7ff ba91 	b.w	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008638:	2101      	movs	r1, #1
 800863a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800863e:	f7ff f9c5 	bl	80079cc <RCCEx_PLL3_Config>
 8008642:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008644:	2d00      	cmp	r5, #0
 8008646:	f43f aee5 	beq.w	8008414 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800864a:	e41a      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800864c:	2101      	movs	r1, #1
 800864e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008652:	f7ff f9bb 	bl	80079cc <RCCEx_PLL3_Config>
 8008656:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008658:	2d00      	cmp	r5, #0
 800865a:	f43f aed1 	beq.w	8008400 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800865e:	f7ff bbf2 	b.w	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008662:	2101      	movs	r1, #1
 8008664:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008668:	f7ff f9b0 	bl	80079cc <RCCEx_PLL3_Config>
 800866c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800866e:	2d00      	cmp	r5, #0
 8008670:	f43f adb7 	beq.w	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8008674:	e6bc      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 8008676:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008678:	e9d4 3200 	ldrd	r3, r2, [r4]
 800867c:	4635      	mov	r5, r6
 800867e:	f7ff bb99 	b.w	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8008682:	2601      	movs	r6, #1
 8008684:	f7ff ba47 	b.w	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008688:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800868a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800868c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008690:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008692:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8008694:	f7ff ba36 	b.w	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 8008698:	f7fb fcc8 	bl	800402c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800869c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 80086a0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a2:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086a6:	e004      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a8:	f7fb fcc0 	bl	800402c <HAL_GetTick>
 80086ac:	1bc0      	subs	r0, r0, r7
 80086ae:	4548      	cmp	r0, r9
 80086b0:	d8e1      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086b2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80086b6:	079b      	lsls	r3, r3, #30
 80086b8:	d5f6      	bpl.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086ba:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80086be:	e618      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80086c0:	490d      	ldr	r1, [pc, #52]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 80086c4:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80086c8:	690a      	ldr	r2, [r1, #16]
 80086ca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80086ce:	4313      	orrs	r3, r2
 80086d0:	610b      	str	r3, [r1, #16]
 80086d2:	e619      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80086d8:	462e      	mov	r6, r5
 80086da:	f7ff bb6b 	b.w	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 80086de:	2601      	movs	r6, #1
 80086e0:	4635      	mov	r5, r6
 80086e2:	f7ff bb64 	b.w	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80086e6:	2601      	movs	r6, #1
 80086e8:	4635      	mov	r5, r6
 80086ea:	f7ff bbcd 	b.w	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086ee:	2601      	movs	r6, #1
 80086f0:	4635      	mov	r5, r6
 80086f2:	f7ff bbab 	b.w	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80086f6:	bf00      	nop
 80086f8:	58024400 	.word	0x58024400
 80086fc:	00ffffcf 	.word	0x00ffffcf

08008700 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008700:	4a50      	ldr	r2, [pc, #320]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8008702:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008704:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008706:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008708:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800870a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800870e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008712:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8008714:	d05d      	beq.n	80087d2 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008716:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800871a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800871e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008722:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008726:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008728:	ee07 4a90 	vmov	s15, r4
 800872c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008732:	2902      	cmp	r1, #2
 8008734:	d078      	beq.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8008736:	2900      	cmp	r1, #0
 8008738:	d050      	beq.n	80087dc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008848 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008746:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008748:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800874c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800875c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008760:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008764:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008768:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800876c:	4a35      	ldr	r2, [pc, #212]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800876e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008772:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008774:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008780:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008782:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800878a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800878e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008792:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008794:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80087a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80087ac:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80087b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80087b6:	ee07 3a10 	vmov	s14, r3
 80087ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80087c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ca:	ee17 3a90 	vmov	r3, s15
 80087ce:	6083      	str	r3, [r0, #8]
}
 80087d0:	4770      	bx	lr
 80087d2:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087d4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087d8:	6083      	str	r3, [r0, #8]
}
 80087da:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087dc:	6811      	ldr	r1, [r2, #0]
 80087de:	0689      	lsls	r1, r1, #26
 80087e0:	d529      	bpl.n	8008836 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e2:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e4:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e8:	4919      	ldr	r1, [pc, #100]	; (8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087f8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80087fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008800:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008802:	ee06 3a10 	vmov	s12, r3
 8008806:	ee05 1a90 	vmov	s11, r1
 800880a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800880e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008812:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008816:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800881a:	eef0 7a46 	vmov.f32	s15, s12
 800881e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008822:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008826:	e7a1      	b.n	800876c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008834:	e787      	b.n	8008746 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800883e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008842:	e780      	b.n	8008746 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008844:	58024400 	.word	0x58024400
 8008848:	4a742400 	.word	0x4a742400
 800884c:	39000000 	.word	0x39000000
 8008850:	03d09000 	.word	0x03d09000
 8008854:	4bbebc20 	.word	0x4bbebc20
 8008858:	4c742400 	.word	0x4c742400

0800885c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800885c:	4a50      	ldr	r2, [pc, #320]	; (80089a0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800885e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008860:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008862:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008864:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8008866:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800886a:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800886e:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8008870:	d05d      	beq.n	800892e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008872:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008876:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800887a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800887e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008882:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008884:	ee07 4a90 	vmov	s15, r4
 8008888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800888c:	d003      	beq.n	8008896 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800888e:	2902      	cmp	r1, #2
 8008890:	d078      	beq.n	8008984 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8008892:	2900      	cmp	r1, #0
 8008894:	d050      	beq.n	8008938 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800889e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80088a4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80088a8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80088b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088bc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80088c0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80088c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80088c8:	4a35      	ldr	r2, [pc, #212]	; (80089a0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80088ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80088ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80088d0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80088dc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80088de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80088ea:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80088ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80088f0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008904:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008908:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800890c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800890e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008912:	ee07 3a10 	vmov	s14, r3
 8008916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800891a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800891e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008926:	ee17 3a90 	vmov	r3, s15
 800892a:	6083      	str	r3, [r0, #8]
}
 800892c:	4770      	bx	lr
 800892e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008930:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008934:	6083      	str	r3, [r0, #8]
}
 8008936:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	0689      	lsls	r1, r1, #26
 800893c:	d529      	bpl.n	8008992 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800893e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008940:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008944:	4919      	ldr	r1, [pc, #100]	; (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894a:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008954:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895c:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800895e:	ee06 3a10 	vmov	s12, r3
 8008962:	ee05 1a90 	vmov	s11, r1
 8008966:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800896a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800896e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008972:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008976:	eef0 7a46 	vmov.f32	s15, s12
 800897a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800897e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008982:	e7a1      	b.n	80088c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800898c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008990:	e787      	b.n	80088a2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800899a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800899e:	e780      	b.n	80088a2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80089a0:	58024400 	.word	0x58024400
 80089a4:	4a742400 	.word	0x4a742400
 80089a8:	39000000 	.word	0x39000000
 80089ac:	03d09000 	.word	0x03d09000
 80089b0:	4bbebc20 	.word	0x4bbebc20
 80089b4:	4c742400 	.word	0x4c742400

080089b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b8:	4a51      	ldr	r2, [pc, #324]	; (8008b00 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 80089ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80089be:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80089c0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80089c2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80089c6:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089ca:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80089cc:	d05e      	beq.n	8008a8c <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089ce:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80089d2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089d6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089da:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80089de:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089e0:	ee07 4a90 	vmov	s15, r4
 80089e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80089e8:	f000 8082 	beq.w	8008af0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 80089ec:	2902      	cmp	r1, #2
 80089ee:	d078      	beq.n	8008ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	d050      	beq.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008b04 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80089fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a02:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008a06:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008b08 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a1a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008a1e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008a22:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a26:	4a36      	ldr	r2, [pc, #216]	; (8008b00 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8008a28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008a2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a2e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008a3a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a3c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a44:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008a48:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a4e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a5a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a62:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008a66:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a6c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008a70:	ee07 3a10 	vmov	s14, r3
 8008a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008a78:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a84:	ee17 3a90 	vmov	r3, s15
 8008a88:	6083      	str	r3, [r0, #8]
}
 8008a8a:	4770      	bx	lr
 8008a8c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a8e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a92:	6083      	str	r3, [r0, #8]
}
 8008a94:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a96:	6811      	ldr	r1, [r2, #0]
 8008a98:	0689      	lsls	r1, r1, #26
 8008a9a:	d5ab      	bpl.n	80089f4 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9c:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a9e:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa2:	491a      	ldr	r1, [pc, #104]	; (8008b0c <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa8:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aaa:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ab2:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8008b08 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aba:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008abc:	ee06 3a10 	vmov	s12, r3
 8008ac0:	ee05 1a90 	vmov	s11, r1
 8008ac4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008ac8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008acc:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008ad0:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008ad4:	eef0 7a46 	vmov.f32	s15, s12
 8008ad8:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008ae0:	e7a1      	b.n	8008a26 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8008b10 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8008aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aee:	e787      	b.n	8008a00 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008b14 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8008af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008afc:	e780      	b.n	8008a00 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	4c742400 	.word	0x4c742400
 8008b08:	39000000 	.word	0x39000000
 8008b0c:	03d09000 	.word	0x03d09000
 8008b10:	4bbebc20 	.word	0x4bbebc20
 8008b14:	4a742400 	.word	0x4a742400

08008b18 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b18:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8008b1c:	430b      	orrs	r3, r1
{
 8008b1e:	b500      	push	{lr}
 8008b20:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b22:	f000 8083 	beq.w	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b26:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	d038      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b2e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8008b32:	430b      	orrs	r3, r1
 8008b34:	f000 80e6 	beq.w	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b38:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	f000 8089 	beq.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b42:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8008b46:	430b      	orrs	r3, r1
 8008b48:	d060      	beq.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b4a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	f000 8112 	beq.w	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b54:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	f000 80a3 	beq.w	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b5e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8008b62:	430b      	orrs	r3, r1
 8008b64:	f000 80fa 	beq.w	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b68:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	f000 8143 	beq.w	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b72:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8008b76:	4308      	orrs	r0, r1
 8008b78:	d137      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b7a:	4a9a      	ldr	r2, [pc, #616]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b7c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8008b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b86:	f000 8084 	beq.w	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8e:	f000 8157 	beq.w	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008b92:	bb53      	cbnz	r3, 8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b94:	6810      	ldr	r0, [r2, #0]
 8008b96:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008b9a:	d044      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8008b9c:	4892      	ldr	r0, [pc, #584]	; (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008b9e:	e042      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ba0:	4a90      	ldr	r2, [pc, #576]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ba2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ba4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8008ba8:	2b80      	cmp	r3, #128	; 0x80
 8008baa:	f000 80a6 	beq.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008bae:	d920      	bls.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8008bb2:	d037      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb8:	d117      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bbc:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc2:	0749      	lsls	r1, r1, #29
 8008bc4:	d502      	bpl.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80c2 	beq.w	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bcc:	4a85      	ldr	r2, [pc, #532]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	05d0      	lsls	r0, r2, #23
 8008bd2:	d503      	bpl.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8008bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd8:	f000 8102 	beq.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bdc:	4a81      	ldr	r2, [pc, #516]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	0391      	lsls	r1, r2, #14
 8008be2:	d502      	bpl.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be8:	d0d8      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8008bea:	2000      	movs	r0, #0
}
 8008bec:	b005      	add	sp, #20
 8008bee:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d04d      	beq.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008bf6:	2b40      	cmp	r3, #64	; 0x40
 8008bf8:	d1f7      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bfa:	6810      	ldr	r0, [r2, #0]
 8008bfc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008c00:	d011      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c02:	a801      	add	r0, sp, #4
 8008c04:	f7ff fd7c 	bl	8008700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	e00c      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c0c:	4a75      	ldr	r2, [pc, #468]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008c10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8008c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c18:	d06f      	beq.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008c1a:	d938      	bls.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c20:	f040 8088 	bne.w	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c24:	4871      	ldr	r0, [pc, #452]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8008c26:	b005      	add	sp, #20
 8008c28:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008c2c:	4b6d      	ldr	r3, [pc, #436]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c30:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d8d8      	bhi.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008c38:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8008c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3e:	bf00      	nop
 8008c40:	08008ce3 	.word	0x08008ce3
 8008c44:	08008cbf 	.word	0x08008cbf
 8008c48:	08008ccf 	.word	0x08008ccf
 8008c4c:	08008c25 	.word	0x08008c25
 8008c50:	08008ccb 	.word	0x08008ccb
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008c54:	4a63      	ldr	r2, [pc, #396]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008c58:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c60:	d04b      	beq.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008c62:	d944      	bls.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8008c64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c68:	d0dc      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c6e:	d1bc      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c72:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c78:	0752      	lsls	r2, r2, #29
 8008c7a:	d5a7      	bpl.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1a5      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c80:	4b58      	ldr	r3, [pc, #352]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c82:	485b      	ldr	r0, [pc, #364]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c8a:	40d8      	lsrs	r0, r3
 8008c8c:	e7cb      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d154      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c92:	6810      	ldr	r0, [r2, #0]
 8008c94:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008c98:	d0c5      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9a:	a801      	add	r0, sp, #4
 8008c9c:	f7ff fe8c 	bl	80089b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca0:	9802      	ldr	r0, [sp, #8]
 8008ca2:	e7c0      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ca4:	4a4f      	ldr	r2, [pc, #316]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ca6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb0:	f000 80d0 	beq.w	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8008cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb8:	d0da      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d195      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cbe:	4b49      	ldr	r3, [pc, #292]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008cc6:	d0ae      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008cc8:	e79b      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cca:	4a46      	ldr	r2, [pc, #280]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ccc:	e775      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cce:	4b45      	ldr	r3, [pc, #276]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008cd6:	d0a6      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd8:	a801      	add	r0, sp, #4
 8008cda:	f7ff fdbf 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cde:	9801      	ldr	r0, [sp, #4]
 8008ce0:	e7a1      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ce2:	4b40      	ldr	r3, [pc, #256]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008cea:	d09c      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008cec:	e7d5      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0cf      	beq.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cf6:	d080      	beq.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008cf8:	e777      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cfa:	6810      	ldr	r0, [r2, #0]
 8008cfc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008d00:	d091      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008d02:	e7e9      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008d04:	4a37      	ldr	r2, [pc, #220]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008d08:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d10:	d0f3      	beq.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d12:	d806      	bhi.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0bc      	beq.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d1c:	f43f af6d 	beq.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008d20:	e763      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008d22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d26:	f43f af7d 	beq.w	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d2e:	f43f af44 	beq.w	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008d32:	e75a      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8008d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d38:	d09a      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008d3a:	e756      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d40:	f43f af5b 	beq.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008d44:	e751      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d46:	6810      	ldr	r0, [r2, #0]
 8008d48:	f010 0004 	ands.w	r0, r0, #4
 8008d4c:	f43f af6b 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d50:	6813      	ldr	r3, [r2, #0]
 8008d52:	4827      	ldr	r0, [pc, #156]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d58:	40d8      	lsrs	r0, r3
 8008d5a:	e764      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d5c:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8008d60:	03d2      	lsls	r2, r2, #15
 8008d62:	d5bf      	bpl.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008d6a:	f43f af5c 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6e:	a801      	add	r0, sp, #4
 8008d70:	f7ff fcc6 	bl	8008700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d74:	9803      	ldr	r0, [sp, #12]
 8008d76:	e756      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008d78:	4a1a      	ldr	r2, [pc, #104]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008d7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8008d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d84:	d0df      	beq.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008d86:	d810      	bhi.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8c:	d058      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d92:	d118      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008d9c:	f43f af43 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da0:	a801      	add	r0, sp, #4
 8008da2:	f7ff fd5b 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008da6:	9802      	ldr	r0, [sp, #8]
 8008da8:	e73d      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dae:	d012      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8008db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008db4:	f47f af19 	bne.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008dc0:	f43f af31 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008dc4:	e6ea      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f47f af0f 	bne.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8008dcc:	b005      	add	sp, #20
 8008dce:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fe bd39 	b.w	8007848 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008dd6:	6810      	ldr	r0, [r2, #0]
 8008dd8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008ddc:	f43f af23 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8008de0:	4804      	ldr	r0, [pc, #16]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008de2:	e720      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008de4:	58024400 	.word	0x58024400
 8008de8:	017d7840 	.word	0x017d7840
 8008dec:	00bb8000 	.word	0x00bb8000
 8008df0:	03d09000 	.word	0x03d09000
 8008df4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008df8:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8008e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e04:	d037      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8008e06:	d814      	bhi.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8008e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e0c:	d03f      	beq.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e12:	d0bf      	beq.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f aee8 	bne.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e1a:	f7fe fcd5 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008e20:	4a1f      	ldr	r2, [pc, #124]	; (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008e28:	5cd3      	ldrb	r3, [r2, r3]
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	40d8      	lsrs	r0, r3
        break;
 8008e30:	e6f9      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d017      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8008e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e3c:	d0bc      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008e3e:	e6d4      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e40:	6810      	ldr	r0, [r2, #0]
 8008e42:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008e46:	f43f aeee 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4a:	a801      	add	r0, sp, #4
 8008e4c:	f7ff fc58 	bl	8008700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e50:	9802      	ldr	r0, [sp, #8]
 8008e52:	e6e8      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e54:	6810      	ldr	r0, [r2, #0]
 8008e56:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008e5a:	f43f aee4 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5e:	a801      	add	r0, sp, #4
 8008e60:	f7ff fcfc 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e64:	9803      	ldr	r0, [sp, #12]
 8008e66:	e6de      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008e70:	f43f aed9 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008e74:	e7b4      	b.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f010 0004 	ands.w	r0, r0, #4
 8008e7e:	f43f aed2 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4807      	ldr	r0, [pc, #28]	; (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8008e86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e8a:	40d8      	lsrs	r0, r3
 8008e8c:	e6cb      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e8e:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008e96:	f43f aec6 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008e9a:	e7d6      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	0801bbb0 	.word	0x0801bbb0
 8008ea4:	03d09000 	.word	0x03d09000

08008ea8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d03c      	beq.n	8008f26 <HAL_RNG_Init+0x7e>
{
 8008eac:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008eae:	7a43      	ldrb	r3, [r0, #9]
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d031      	beq.n	8008f1e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008eba:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008ebc:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008ebe:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008ec0:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	f023 0320 	bic.w	r3, r3, #32
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008ecc:	6822      	ldr	r2, [r4, #0]
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	f043 0304 	orr.w	r3, r3, #4
 8008ed4:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	0658      	lsls	r0, r3, #25
 8008edc:	d503      	bpl.n	8008ee6 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008ede:	2304      	movs	r3, #4
    return HAL_ERROR;
 8008ee0:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8008ee2:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8008ee6:	f7fb f8a1 	bl	800402c <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008eea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008eec:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	0759      	lsls	r1, r3, #29
 8008ef2:	d50e      	bpl.n	8008f12 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008ef4:	f7fb f89a 	bl	800402c <HAL_GetTick>
 8008ef8:	1b43      	subs	r3, r0, r5
 8008efa:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008efc:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008efe:	d9f6      	bls.n	8008eee <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	0752      	lsls	r2, r2, #29
 8008f04:	d5f3      	bpl.n	8008eee <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008f06:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008f08:	2302      	movs	r3, #2
        return HAL_ERROR;
 8008f0a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 8008f0c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008f0e:	60e3      	str	r3, [r4, #12]
}
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008f12:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8008f14:	2201      	movs	r2, #1
  return HAL_OK;
 8008f16:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8008f18:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008f1a:	60e3      	str	r3, [r4, #12]
}
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8008f1e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8008f20:	f7f9 ff14 	bl	8002d4c <HAL_RNG_MspInit>
 8008f24:	e7c9      	b.n	8008eba <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 8008f26:	2001      	movs	r0, #1
}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop

08008f2c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008f2e:	7a03      	ldrb	r3, [r0, #8]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d027      	beq.n	8008f84 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008f34:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8008f36:	2201      	movs	r2, #1
 8008f38:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 8008f3e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8008f40:	d006      	beq.n	8008f50 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008f42:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8008f44:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008f46:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008f48:	2300      	movs	r3, #0
 8008f4a:	7223      	strb	r3, [r4, #8]

  return status;
}
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008f50:	2302      	movs	r3, #2
 8008f52:	460d      	mov	r5, r1
 8008f54:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8008f56:	f7fb f869 	bl	800402c <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008f5a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008f5c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	07d2      	lsls	r2, r2, #31
 8008f62:	d412      	bmi.n	8008f8a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008f64:	f7fb f862 	bl	800402c <HAL_GetTick>
 8008f68:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008f6a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008f6c:	2802      	cmp	r0, #2
 8008f6e:	d9f6      	bls.n	8008f5e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	f012 0201 	ands.w	r2, r2, #1
 8008f76:	d1f2      	bne.n	8008f5e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 8008f78:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008f7a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 8008f7c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 8008f7e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008f80:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8008f82:	e7e3      	b.n	8008f4c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8008f84:	2602      	movs	r6, #2
}
 8008f86:	4630      	mov	r0, r6
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 8008f8a:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8008f8c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8008f8e:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8008f90:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8008f92:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8008f94:	7262      	strb	r2, [r4, #9]
 8008f96:	e7d7      	b.n	8008f48 <HAL_RNG_GenerateRandomNumber+0x1c>

08008f98 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008f9a:	4ba3      	ldr	r3, [pc, #652]	; (8009228 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8008f9c:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008f9e:	6802      	ldr	r2, [r0, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d01c      	beq.n	8008fde <HAL_SAI_Init.part.0+0x46>
 8008fa4:	3320      	adds	r3, #32
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d019      	beq.n	8008fde <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008faa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d04d      	beq.n	800904e <HAL_SAI_Init.part.0+0xb6>
 8008fb2:	3320      	adds	r3, #32
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d04a      	beq.n	800904e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008fb8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	f000 812f 	beq.w	8009220 <HAL_SAI_Init.part.0+0x288>
 8008fc2:	3320      	adds	r3, #32
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	f000 812b 	beq.w	8009220 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008fca:	4b98      	ldr	r3, [pc, #608]	; (800922c <HAL_SAI_Init.part.0+0x294>)
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	f000 8129 	beq.w	8009224 <HAL_SAI_Init.part.0+0x28c>
 8008fd2:	3320      	adds	r3, #32
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	f000 8125 	beq.w	8009224 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008fda:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 8008fde:	4c94      	ldr	r4, [pc, #592]	; (8009230 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008fe0:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 8008fe4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d037      	beq.n	800905c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008fec:	4b91      	ldr	r3, [pc, #580]	; (8009234 <HAL_SAI_Init.part.0+0x29c>)
 8008fee:	4992      	ldr	r1, [pc, #584]	; (8009238 <HAL_SAI_Init.part.0+0x2a0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008ff6:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ff8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8008ffa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ffe:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8009000:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009002:	2b00      	cmp	r3, #0
 8009004:	d031      	beq.n	800906a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009006:	682a      	ldr	r2, [r5, #0]
    count--;
 8009008:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800900a:	6812      	ldr	r2, [r2, #0]
 800900c:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8009010:	d1f7      	bne.n	8009002 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 8009012:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8009014:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 8009016:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8009018:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800901c:	f000 8150 	beq.w	80092c0 <HAL_SAI_Init.part.0+0x328>
 8009020:	428b      	cmp	r3, r1
 8009022:	bf19      	ittee	ne
 8009024:	460e      	movne	r6, r1
 8009026:	2003      	movne	r0, #3
 8009028:	2023      	moveq	r0, #35	; 0x23
 800902a:	2622      	moveq	r6, #34	; 0x22
 800902c:	bf15      	itete	ne
 800902e:	2701      	movne	r7, #1
 8009030:	2721      	moveq	r7, #33	; 0x21
 8009032:	2100      	movne	r1, #0
 8009034:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 8009036:	68ab      	ldr	r3, [r5, #8]
 8009038:	3b01      	subs	r3, #1
 800903a:	2b04      	cmp	r3, #4
 800903c:	f200 8180 	bhi.w	8009340 <HAL_SAI_Init.part.0+0x3a8>
 8009040:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009044:	001c00e3 	.word	0x001c00e3
 8009048:	001b00ea 	.word	0x001b00ea
 800904c:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
 800904e:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8009052:	4c7a      	ldr	r4, [pc, #488]	; (800923c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8009054:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1c7      	bne.n	8008fec <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800905c:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 800905e:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8009062:	f7f9 fedd 	bl	8002e20 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 8009066:	682a      	ldr	r2, [r5, #0]
 8009068:	e7c0      	b.n	8008fec <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800906a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 800906e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009074:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 8009078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800907a:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800907c:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009080:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009082:	6a2b      	ldr	r3, [r5, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d046      	beq.n	8009116 <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	4967      	ldr	r1, [pc, #412]	; (8009228 <HAL_SAI_Init.part.0+0x290>)
 800908c:	428b      	cmp	r3, r1
 800908e:	f000 812b 	beq.w	80092e8 <HAL_SAI_Init.part.0+0x350>
 8009092:	3120      	adds	r1, #32
 8009094:	428b      	cmp	r3, r1
 8009096:	f000 8127 	beq.w	80092e8 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800909a:	4969      	ldr	r1, [pc, #420]	; (8009240 <HAL_SAI_Init.part.0+0x2a8>)
 800909c:	428b      	cmp	r3, r1
 800909e:	f000 8133 	beq.w	8009308 <HAL_SAI_Init.part.0+0x370>
 80090a2:	3120      	adds	r1, #32
 80090a4:	428b      	cmp	r3, r1
 80090a6:	f000 812f 	beq.w	8009308 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80090aa:	4966      	ldr	r1, [pc, #408]	; (8009244 <HAL_SAI_Init.part.0+0x2ac>)
 80090ac:	428b      	cmp	r3, r1
 80090ae:	f000 8123 	beq.w	80092f8 <HAL_SAI_Init.part.0+0x360>
 80090b2:	3120      	adds	r1, #32
 80090b4:	428b      	cmp	r3, r1
 80090b6:	f000 811f 	beq.w	80092f8 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 80090ba:	495c      	ldr	r1, [pc, #368]	; (800922c <HAL_SAI_Init.part.0+0x294>)
 80090bc:	428b      	cmp	r3, r1
 80090be:	f000 8135 	beq.w	800932c <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
 80090c2:	4961      	ldr	r1, [pc, #388]	; (8009248 <HAL_SAI_Init.part.0+0x2b0>)
 80090c4:	428b      	cmp	r3, r1
 80090c6:	f000 812a 	beq.w	800931e <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80090ca:	69ab      	ldr	r3, [r5, #24]
 80090cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090d0:	f000 80fb 	beq.w	80092ca <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80090d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80090d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80090da:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80090dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80090e0:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80090e4:	bf0c      	ite	eq
 80090e6:	2202      	moveq	r2, #2
 80090e8:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80090ea:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80090ee:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80090f0:	0212      	lsls	r2, r2, #8
 80090f2:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 80090f6:	4a55      	ldr	r2, [pc, #340]	; (800924c <HAL_SAI_Init.part.0+0x2b4>)
 80090f8:	fba2 0203 	umull	r0, r2, r2, r3
 80090fc:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 80090fe:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8009102:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8009106:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8009108:	bf08      	it	eq
 800910a:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800910c:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800910e:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009110:	d101      	bne.n	8009116 <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009112:	0852      	lsrs	r2, r2, #1
 8009114:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009116:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009118:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800911a:	f033 0302 	bics.w	r3, r3, #2
 800911e:	f040 80c8 	bne.w	80092b2 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009122:	3f01      	subs	r7, #1
 8009124:	bf18      	it	ne
 8009126:	2701      	movne	r7, #1
 8009128:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800912a:	f7fa ff97 	bl	800405c <HAL_GetREVID>
 800912e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009132:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009134:	f0c0 80a9 	bcc.w	800928a <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009138:	6811      	ldr	r1, [r2, #0]
 800913a:	4b45      	ldr	r3, [pc, #276]	; (8009250 <HAL_SAI_Init.part.0+0x2b8>)
 800913c:	400b      	ands	r3, r1
 800913e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009140:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009142:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009146:	430b      	orrs	r3, r1
 8009148:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800914a:	430b      	orrs	r3, r1
 800914c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800914e:	430b      	orrs	r3, r1
 8009150:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8009152:	430b      	orrs	r3, r1
 8009154:	6969      	ldr	r1, [r5, #20]
 8009156:	430b      	orrs	r3, r1
 8009158:	69a9      	ldr	r1, [r5, #24]
 800915a:	430b      	orrs	r3, r1
 800915c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800915e:	430b      	orrs	r3, r1
 8009160:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009162:	430b      	orrs	r3, r1
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009168:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800916a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800916e:	4333      	orrs	r3, r6
 8009170:	433b      	orrs	r3, r7
 8009172:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009174:	682a      	ldr	r2, [r5, #0]
 8009176:	4b37      	ldr	r3, [pc, #220]	; (8009254 <HAL_SAI_Init.part.0+0x2bc>)
 8009178:	6851      	ldr	r1, [r2, #4]
 800917a:	400b      	ands	r3, r1
 800917c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800917e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009180:	69eb      	ldr	r3, [r5, #28]
 8009182:	682a      	ldr	r2, [r5, #0]
 8009184:	430b      	orrs	r3, r1
 8009186:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8009188:	430b      	orrs	r3, r1
 800918a:	6851      	ldr	r1, [r2, #4]
 800918c:	430b      	orrs	r3, r1
 800918e:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009190:	682a      	ldr	r2, [r5, #0]
 8009192:	4b31      	ldr	r3, [pc, #196]	; (8009258 <HAL_SAI_Init.part.0+0x2c0>)
 8009194:	6891      	ldr	r1, [r2, #8]
 8009196:	400b      	ands	r3, r1
 8009198:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800919a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800919c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919e:	6829      	ldr	r1, [r5, #0]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80091a4:	6888      	ldr	r0, [r1, #8]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80091aa:	4303      	orrs	r3, r0
 80091ac:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80091ae:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091b2:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80091b4:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80091b6:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091bc:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80091be:	682a      	ldr	r2, [r5, #0]
 80091c0:	68d3      	ldr	r3, [r2, #12]
 80091c2:	4003      	ands	r3, r0
 80091c4:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091c6:	6829      	ldr	r1, [r5, #0]
 80091c8:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
 80091cc:	68ca      	ldr	r2, [r1, #12]
 80091ce:	4303      	orrs	r3, r0
 80091d0:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091d2:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091d8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80091da:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80091e0:	4a11      	ldr	r2, [pc, #68]	; (8009228 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091e2:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d03c      	beq.n	8009264 <HAL_SAI_Init.part.0+0x2cc>
 80091ea:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80091ee:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d036      	beq.n	8009264 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80091f6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80091f8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80091fa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 80091fe:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8009200:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8009204:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 8009208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800920a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800920e:	e737      	b.n	8009080 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009210:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009212:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8009216:	e733      	b.n	8009080 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009218:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800921a:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800921e:	e72f      	b.n	8009080 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 8009220:	4c0e      	ldr	r4, [pc, #56]	; (800925c <HAL_SAI_Init.part.0+0x2c4>)
 8009222:	e6dd      	b.n	8008fe0 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 8009224:	4c0e      	ldr	r4, [pc, #56]	; (8009260 <HAL_SAI_Init.part.0+0x2c8>)
 8009226:	e6db      	b.n	8008fe0 <HAL_SAI_Init.part.0+0x48>
 8009228:	40015804 	.word	0x40015804
 800922c:	58005404 	.word	0x58005404
 8009230:	40015800 	.word	0x40015800
 8009234:	20000af0 	.word	0x20000af0
 8009238:	95cbec1b 	.word	0x95cbec1b
 800923c:	40015c00 	.word	0x40015c00
 8009240:	40015c04 	.word	0x40015c04
 8009244:	40016004 	.word	0x40016004
 8009248:	58005424 	.word	0x58005424
 800924c:	cccccccd 	.word	0xcccccccd
 8009250:	f005c010 	.word	0xf005c010
 8009254:	ffff1ff0 	.word	0xffff1ff0
 8009258:	fff88000 	.word	0xfff88000
 800925c:	40016000 	.word	0x40016000
 8009260:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009264:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800926c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8009270:	2b01      	cmp	r3, #1
 8009272:	d1c0      	bne.n	80091f6 <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009274:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009278:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800927a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800927e:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009280:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	6463      	str	r3, [r4, #68]	; 0x44
 8009288:	e7b5      	b.n	80091f6 <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800928a:	6811      	ldr	r1, [r2, #0]
 800928c:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <HAL_SAI_Init.part.0+0x3ac>)
 800928e:	400b      	ands	r3, r1
 8009290:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009292:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009294:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009298:	430b      	orrs	r3, r1
 800929a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800929c:	430b      	orrs	r3, r1
 800929e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80092a4:	430b      	orrs	r3, r1
 80092a6:	6969      	ldr	r1, [r5, #20]
 80092a8:	430b      	orrs	r3, r1
 80092aa:	69a9      	ldr	r1, [r5, #24]
 80092ac:	430b      	orrs	r3, r1
 80092ae:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80092b0:	e757      	b.n	8009162 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80092b2:	f1a7 0701 	sub.w	r7, r7, #1
 80092b6:	fab7 f787 	clz	r7, r7
 80092ba:	097f      	lsrs	r7, r7, #5
 80092bc:	027f      	lsls	r7, r7, #9
 80092be:	e734      	b.n	800912a <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
 80092c0:	2013      	movs	r0, #19
 80092c2:	2612      	movs	r6, #18
 80092c4:	2711      	movs	r7, #17
 80092c6:	2110      	movs	r1, #16
 80092c8:	e6b5      	b.n	8009036 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092ca:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80092cc:	2904      	cmp	r1, #4
 80092ce:	d035      	beq.n	800933c <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80092d0:	2908      	cmp	r1, #8
 80092d2:	d021      	beq.n	8009318 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 80092d4:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80092d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80092da:	0053      	lsls	r3, r2, #1
 80092dc:	6a2a      	ldr	r2, [r5, #32]
 80092de:	fb00 f202 	mul.w	r2, r0, r2
 80092e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092e6:	e706      	b.n	80090f6 <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80092e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80092ec:	2100      	movs	r1, #0
 80092ee:	f7ff fc13 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80092f2:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80092f4:	4602      	mov	r2, r0
 80092f6:	e6d0      	b.n	800909a <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80092f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80092fc:	2100      	movs	r1, #0
 80092fe:	f7ff fc0b 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8009302:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009304:	4602      	mov	r2, r0
 8009306:	e6d8      	b.n	80090ba <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009308:	f44f 7000 	mov.w	r0, #512	; 0x200
 800930c:	2100      	movs	r1, #0
 800930e:	f7ff fc03 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009312:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009314:	4602      	mov	r2, r0
 8009316:	e6c8      	b.n	80090aa <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800931c:	e7db      	b.n	80092d6 <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800931e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009322:	2100      	movs	r1, #0
 8009324:	f7ff fbf8 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8009328:	4602      	mov	r2, r0
 800932a:	e6ce      	b.n	80090ca <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800932c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009330:	2100      	movs	r1, #0
 8009332:	f7ff fbf1 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8009336:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009338:	4602      	mov	r2, r0
 800933a:	e6c2      	b.n	80090c2 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800933c:	2040      	movs	r0, #64	; 0x40
 800933e:	e7ca      	b.n	80092d6 <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
 8009340:	2600      	movs	r6, #0
 8009342:	e69d      	b.n	8009080 <HAL_SAI_Init.part.0+0xe8>
 8009344:	f805c010 	.word	0xf805c010

08009348 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8009348:	2902      	cmp	r1, #2
{
 800934a:	b538      	push	{r3, r4, r5, lr}
 800934c:	4604      	mov	r4, r0
  switch (protocol)
 800934e:	d935      	bls.n	80093bc <HAL_SAI_InitProtocol+0x74>
 8009350:	1ec8      	subs	r0, r1, #3
 8009352:	2801      	cmp	r0, #1
 8009354:	d830      	bhi.n	80093b8 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009356:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8009358:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800935a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800935c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800935e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8009360:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009366:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009368:	6860      	ldr	r0, [r4, #4]
 800936a:	f030 0002 	bics.w	r0, r0, #2
 800936e:	bf0c      	ite	eq
 8009370:	2501      	moveq	r5, #1
 8009372:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 8009374:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009376:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800937a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800937c:	bf0c      	ite	eq
 800937e:	2001      	moveq	r0, #1
 8009380:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009382:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009384:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009388:	65a0      	str	r0, [r4, #88]	; 0x58
 800938a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800938c:	2a03      	cmp	r2, #3
 800938e:	d813      	bhi.n	80093b8 <HAL_SAI_InitProtocol+0x70>
 8009390:	e8df f002 	tbb	[pc, r2]
 8009394:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	4a47      	ldr	r2, [pc, #284]	; (80094b8 <HAL_SAI_InitProtocol+0x170>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d005      	beq.n	80093ac <HAL_SAI_InitProtocol+0x64>
 80093a0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80093a4:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d105      	bne.n	80093b8 <HAL_SAI_InitProtocol+0x70>
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d102      	bne.n	80093b8 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80093b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d037      	beq.n	8009428 <HAL_SAI_InitProtocol+0xe0>
}
 80093b8:	2001      	movs	r0, #1
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80093bc:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80093be:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80093c0:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80093c2:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 80093c4:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80093c6:	6860      	ldr	r0, [r4, #4]
 80093c8:	f030 0002 	bics.w	r0, r0, #2
 80093cc:	bf14      	ite	ne
 80093ce:	2001      	movne	r0, #1
 80093d0:	2000      	moveq	r0, #0
 80093d2:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80093d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80093d8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80093da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80093de:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80093e0:	f013 0001 	ands.w	r0, r3, #1
 80093e4:	d1e8      	bne.n	80093b8 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 80093e6:	b949      	cbnz	r1, 80093fc <HAL_SAI_InitProtocol+0xb4>
 80093e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80093ec:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 80093f0:	2a03      	cmp	r2, #3
 80093f2:	d8e1      	bhi.n	80093b8 <HAL_SAI_InitProtocol+0x70>
 80093f4:	e8df f002 	tbb	[pc, r2]
 80093f8:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80093fc:	6660      	str	r0, [r4, #100]	; 0x64
 80093fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009402:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 8009404:	2a03      	cmp	r2, #3
 8009406:	d8d7      	bhi.n	80093b8 <HAL_SAI_InitProtocol+0x70>
 8009408:	e8df f002 	tbb	[pc, r2]
 800940c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009410:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009412:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009414:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009416:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009418:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800941a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800941c:	f7fa fe1e 	bl	800405c <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009420:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009424:	2b01      	cmp	r3, #1
 8009426:	d0b7      	beq.n	8009398 <HAL_SAI_InitProtocol+0x50>
 8009428:	4620      	mov	r0, r4
}
 800942a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942e:	f7ff bdb3 	b.w	8008f98 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009432:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009434:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009436:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009438:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800943a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800943c:	e7ee      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800943e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009440:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009442:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009444:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009446:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009448:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800944a:	e7e7      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800944c:	21e0      	movs	r1, #224	; 0xe0
 800944e:	e7f7      	b.n	8009440 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009450:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009452:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009454:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009456:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009458:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800945a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800945c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800945e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009462:	e7db      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009464:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009466:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009468:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800946a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800946c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009470:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009472:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009476:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009478:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800947a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800947c:	d1ce      	bne.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800947e:	2308      	movs	r3, #8
 8009480:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 8009482:	e7cb      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009484:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009486:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009488:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800948a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800948e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009490:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009494:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009496:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800949a:	d1bf      	bne.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800949c:	2310      	movs	r3, #16
 800949e:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80094a0:	e7bc      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80094a2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80094a4:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80094a6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80094a8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80094aa:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80094ac:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80094ae:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80094b0:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80094b4:	e7b2      	b.n	800941c <HAL_SAI_InitProtocol+0xd4>
 80094b6:	bf00      	nop
 80094b8:	40015804 	.word	0x40015804

080094bc <HAL_SAI_Transmit_DMA>:
{
 80094bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	4615      	mov	r5, r2
 80094c2:	f04f 0800 	mov.w	r8, #0
 80094c6:	460f      	mov	r7, r1
 80094c8:	4604      	mov	r4, r0
 80094ca:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 80094ce:	f7fa fdad 	bl	800402c <HAL_GetTick>
 80094d2:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 80094d6:	2f00      	cmp	r7, #0
 80094d8:	d066      	beq.n	80095a8 <HAL_SAI_Transmit_DMA+0xec>
 80094da:	fab5 f985 	clz	r9, r5
 80094de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80094e2:	2d00      	cmp	r5, #0
 80094e4:	d060      	beq.n	80095a8 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
 80094e6:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	fa5f fa83 	uxtb.w	sl, r3
 80094f0:	d155      	bne.n	800959e <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
 80094f2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d051      	beq.n	800959e <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80094fa:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80094fc:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009500:	4a39      	ldr	r2, [pc, #228]	; (80095e8 <HAL_SAI_Transmit_DMA+0x12c>)
 8009502:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009504:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009508:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
 800950c:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 8009510:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009514:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009516:	4a35      	ldr	r2, [pc, #212]	; (80095ec <HAL_SAI_Transmit_DMA+0x130>)
 8009518:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800951c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800951e:	4a34      	ldr	r2, [pc, #208]	; (80095f0 <HAL_SAI_Transmit_DMA+0x134>)
 8009520:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009524:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8009526:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800952a:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009534:	321c      	adds	r2, #28
 8009536:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009538:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800953c:	f7fb f99c 	bl	8004878 <HAL_DMA_Start_IT>
 8009540:	2800      	cmp	r0, #0
 8009542:	d13f      	bne.n	80095c4 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009544:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009546:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009548:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800954a:	d032      	beq.n	80095b2 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800954c:	2205      	movs	r2, #5
 800954e:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009550:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009552:	2b01      	cmp	r3, #1
 8009554:	bf98      	it	ls
 8009556:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009558:	6821      	ldr	r1, [r4, #0]
 800955a:	690b      	ldr	r3, [r1, #16]
 800955c:	4313      	orrs	r3, r2
 800955e:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009568:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800956a:	e005      	b.n	8009578 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800956c:	f7fa fd5e 	bl	800402c <HAL_GetTick>
 8009570:	1b83      	subs	r3, r0, r6
 8009572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009576:	d82a      	bhi.n	80095ce <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	6955      	ldr	r5, [r2, #20]
 800957c:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8009580:	d0f4      	beq.n	800956c <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	03db      	lsls	r3, r3, #15
 8009586:	d403      	bmi.n	8009590 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800958e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8009590:	2300      	movs	r3, #0
    return HAL_OK;
 8009592:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 8009594:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8009598:	4650      	mov	r0, sl
 800959a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800959e:	f04f 0a02 	mov.w	sl, #2
}
 80095a2:	4650      	mov	r0, sl
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 80095a8:	f04f 0a01 	mov.w	sl, #1
}
 80095ac:	4650      	mov	r0, sl
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80095b2:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80095b6:	2a01      	cmp	r2, #1
 80095b8:	bf0b      	itete	eq
 80095ba:	2215      	moveq	r2, #21
 80095bc:	2205      	movne	r2, #5
 80095be:	2171      	moveq	r1, #113	; 0x71
 80095c0:	2161      	movne	r1, #97	; 0x61
 80095c2:	e7c5      	b.n	8009550 <HAL_SAI_Transmit_DMA+0x94>
}
 80095c4:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 80095c6:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80095ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80095d2:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 80095d6:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80095da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80095de:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80095e0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80095e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e8:	08009659 	.word	0x08009659
 80095ec:	080095f5 	.word	0x080095f5
 80095f0:	08009665 	.word	0x08009665

080095f4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80095f4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095f6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095fe:	d01b      	beq.n	8009638 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009600:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009608:	6813      	ldr	r3, [r2, #0]
 800960a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800960e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009610:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009612:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009614:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009616:	d012      	beq.n	800963e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009618:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800961c:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009620:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009622:	3b02      	subs	r3, #2
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf98      	it	ls
 8009628:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800962a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800962c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009630:	4013      	ands	r3, r2
 8009632:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8009634:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009638:	f011 fd26 	bl	801b088 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 800963c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800963e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009642:	2a01      	cmp	r2, #1
 8009644:	bf0b      	itete	eq
 8009646:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800964a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800964e:	f06f 0215 	mvneq.w	r2, #21
 8009652:	f06f 0205 	mvnne.w	r2, #5
 8009656:	e7e3      	b.n	8009620 <SAI_DMATxCplt+0x2c>

08009658 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009658:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800965a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800965c:	f011 fd2c 	bl	801b0b8 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8009660:	bd08      	pop	{r3, pc}
 8009662:	bf00      	nop

08009664 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009664:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009666:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009668:	f7fc fb56 	bl	8005d18 <HAL_DMA_GetError>
 800966c:	2802      	cmp	r0, #2
 800966e:	d025      	beq.n	80096bc <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009670:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009674:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800967a:	4814      	ldr	r0, [pc, #80]	; (80096cc <SAI_DMAError+0x68>)
 800967c:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800967e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009682:	680b      	ldr	r3, [r1, #0]
 8009684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009688:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800968a:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 800968c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800968e:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8009692:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009694:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8009696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800969a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800969c:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800969e:	b173      	cbz	r3, 80096be <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80096a0:	6822      	ldr	r2, [r4, #0]
    count--;
 80096a2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80096a4:	6812      	ldr	r2, [r2, #0]
 80096a6:	03d2      	lsls	r2, r2, #15
 80096a8:	d4f9      	bmi.n	800969e <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80096aa:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80096ac:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80096ae:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80096b0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80096b4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80096b8:	f011 fd02 	bl	801b0c0 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
 80096bc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 80096ca:	e7ee      	b.n	80096aa <SAI_DMAError+0x46>
 80096cc:	20000af0 	.word	0x20000af0
 80096d0:	95cbec1b 	.word	0x95cbec1b

080096d4 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 80096d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d8:	4604      	mov	r4, r0
 80096da:	b096      	sub	sp, #88	; 0x58
 80096dc:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096de:	f7fa fca5 	bl	800402c <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096e2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80096e4:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	f001 feec 	bl	800b4c4 <SDMMC_GetResponse>
 80096ec:	0181      	lsls	r1, r0, #6
 80096ee:	d45a      	bmi.n	80097a6 <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	f001 ff00 	bl	800b4f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096f8:	b1e8      	cbz	r0, 8009736 <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80096fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096fc:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	4955      	ldr	r1, [pc, #340]	; (8009858 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 8009702:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009704:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009706:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8009708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800970a:	4303      	orrs	r3, r0
 800970c:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800970e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009716:	6820      	ldr	r0, [r4, #0]
 8009718:	f001 feee 	bl	800b4f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800971c:	b138      	cbz	r0, 800972e <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 800971e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	494d      	ldr	r1, [pc, #308]	; (8009858 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 8009724:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009726:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009728:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800972a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800972e:	4630      	mov	r0, r6
 8009730:	b016      	add	sp, #88	; 0x58
 8009732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009736:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	0409      	lsls	r1, r1, #16
 800973c:	f002 fc64 	bl	800c008 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009740:	2800      	cmp	r0, #0
 8009742:	d1da      	bne.n	80096fa <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
 8009744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009748:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800974a:	4669      	mov	r1, sp
 800974c:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800974e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009752:	2260      	movs	r2, #96	; 0x60
 8009754:	2302      	movs	r3, #2
 8009756:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800975a:	2200      	movs	r2, #0
 800975c:	2301      	movs	r3, #1
 800975e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009762:	f001 feb3 	bl	800b4cc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009766:	6820      	ldr	r0, [r4, #0]
 8009768:	f003 f81a 	bl	800c7a0 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800976c:	2800      	cmp	r0, #0
 800976e:	d1c4      	bne.n	80096fa <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 8009770:	ae06      	add	r6, sp, #24
 8009772:	e004      	b.n	800977e <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009774:	f7fa fc5a 	bl	800402c <HAL_GetTick>
 8009778:	1bc0      	subs	r0, r0, r7
 800977a:	3001      	adds	r0, #1
 800977c:	d017      	beq.n	80097ae <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009782:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009788:	d114      	bne.n	80097b4 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800978a:	0412      	lsls	r2, r2, #16
 800978c:	d5f2      	bpl.n	8009774 <HAL_SD_GetCardStatus.part.0+0xa0>
 800978e:	f106 0820 	add.w	r8, r6, #32
 8009792:	e000      	b.n	8009796 <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f001 fe7e 	bl	800b498 <SDMMC_ReadFIFO>
 800979c:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80097a0:	4546      	cmp	r6, r8
 80097a2:	d1f7      	bne.n	8009794 <HAL_SD_GetCardStatus.part.0+0xc0>
 80097a4:	e7e6      	b.n	8009774 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80097a6:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097ac:	e7a8      	b.n	8009700 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80097ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80097b2:	e7a4      	b.n	80096fe <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80097b4:	0710      	lsls	r0, r2, #28
 80097b6:	d449      	bmi.n	800984c <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097ba:	0791      	lsls	r1, r2, #30
 80097bc:	d448      	bmi.n	8009850 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c0:	0692      	lsls	r2, r2, #26
 80097c2:	d50a      	bpl.n	80097da <HAL_SD_GetCardStatus.part.0+0x106>
 80097c4:	e046      	b.n	8009854 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80097c6:	f001 fe67 	bl	800b498 <SDMMC_ReadFIFO>
 80097ca:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097ce:	f7fa fc2d 	bl	800402c <HAL_GetTick>
 80097d2:	1bc0      	subs	r0, r0, r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	d0ea      	beq.n	80097ae <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097d8:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80097da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80097dc:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80097de:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097e2:	d1f0      	bne.n	80097c6 <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097e4:	491d      	ldr	r1, [pc, #116]	; (800985c <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 80097e6:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097e8:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80097ea:	9b06      	ldr	r3, [sp, #24]
 80097ec:	f3c3 1281 	ubfx	r2, r3, #6, #2
 80097f0:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80097f2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80097f6:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80097f8:	0a1a      	lsrs	r2, r3, #8
 80097fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097fe:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8009802:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 8009806:	b292      	uxth	r2, r2
 8009808:	ba09      	rev	r1, r1
 800980a:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800980c:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800980e:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009810:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009812:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009816:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800981a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800981c:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009820:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009822:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800982a:	b2d0      	uxtb	r0, r2
 800982c:	4303      	orrs	r3, r0
 800982e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009830:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009834:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009836:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800983a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800983c:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009840:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009844:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009846:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009848:	74a9      	strb	r1, [r5, #18]
 800984a:	e762      	b.n	8009712 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800984c:	2008      	movs	r0, #8
 800984e:	e757      	b.n	8009700 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009850:	2002      	movs	r0, #2
 8009852:	e755      	b.n	8009700 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009854:	2020      	movs	r0, #32
 8009856:	e753      	b.n	8009700 <HAL_SD_GetCardStatus.part.0+0x2c>
 8009858:	1fe00fff 	.word	0x1fe00fff
 800985c:	18000f3a 	.word	0x18000f3a

08009860 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	4605      	mov	r5, r0
 8009866:	b086      	sub	sp, #24
 8009868:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800986a:	f7fa fbdf 	bl	800402c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800986e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009870:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009872:	6828      	ldr	r0, [r5, #0]
 8009874:	f001 fe40 	bl	800b4f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009878:	4604      	mov	r4, r0
 800987a:	b118      	cbz	r0, 8009884 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800987c:	4620      	mov	r0, r4
 800987e:	b006      	add	sp, #24
 8009880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009884:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009886:	6828      	ldr	r0, [r5, #0]
 8009888:	0409      	lsls	r1, r1, #16
 800988a:	f002 fbbd 	bl	800c008 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800988e:	4604      	mov	r4, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	d1f3      	bne.n	800987c <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8009894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009898:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800989a:	4669      	mov	r1, sp
 800989c:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800989e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098a2:	2230      	movs	r2, #48	; 0x30
 80098a4:	2302      	movs	r3, #2
 80098a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098aa:	2200      	movs	r2, #0
 80098ac:	2301      	movs	r3, #1
 80098ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098b2:	f001 fe0b 	bl	800b4cc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098b6:	6828      	ldr	r0, [r5, #0]
 80098b8:	f002 fd3e 	bl	800c338 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098bc:	4604      	mov	r4, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d1dc      	bne.n	800987c <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80098c2:	4682      	mov	sl, r0
 80098c4:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80098c6:	f240 582a 	movw	r8, #1322	; 0x52a
 80098ca:	e004      	b.n	80098d6 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098cc:	f7fa fbae 	bl	800402c <HAL_GetTick>
 80098d0:	1b83      	subs	r3, r0, r6
 80098d2:	3301      	adds	r3, #1
 80098d4:	d024      	beq.n	8009920 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80098d6:	6828      	ldr	r0, [r5, #0]
 80098d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80098da:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80098de:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80098e0:	d10c      	bne.n	80098fc <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80098e2:	0319      	lsls	r1, r3, #12
 80098e4:	d4f2      	bmi.n	80098cc <SD_FindSCR.constprop.0+0x6c>
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	d1f0      	bne.n	80098cc <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80098ea:	f001 fdd5 	bl	800b498 <SDMMC_ReadFIFO>
 80098ee:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80098f0:	6828      	ldr	r0, [r5, #0]
      index++;
 80098f2:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80098f4:	f001 fdd0 	bl	800b498 <SDMMC_ReadFIFO>
 80098f8:	4682      	mov	sl, r0
      index++;
 80098fa:	e7e7      	b.n	80098cc <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098fc:	071a      	lsls	r2, r3, #28
 80098fe:	d416      	bmi.n	800992e <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009902:	079b      	lsls	r3, r3, #30
 8009904:	d40f      	bmi.n	8009926 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009906:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009908:	f014 0420 	ands.w	r4, r4, #32
 800990c:	d113      	bne.n	8009936 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800990e:	fa9a f28a 	rev.w	r2, sl
 8009912:	fa99 f389 	rev.w	r3, r9
 8009916:	490a      	ldr	r1, [pc, #40]	; (8009940 <SD_FindSCR.constprop.0+0xe0>)
 8009918:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800991a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800991e:	e7ad      	b.n	800987c <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009920:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009924:	e7aa      	b.n	800987c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009926:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009928:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800992a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800992c:	e7a6      	b.n	800987c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800992e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009930:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009932:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009934:	e7a2      	b.n	800987c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009936:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8009938:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800993a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800993c:	e79e      	b.n	800987c <SD_FindSCR.constprop.0+0x1c>
 800993e:	bf00      	nop
 8009940:	18000f3a 	.word	0x18000f3a

08009944 <HAL_SD_ReadBlocks>:
{
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460d      	mov	r5, r1
 800994a:	b087      	sub	sp, #28
 800994c:	4604      	mov	r4, r0
 800994e:	4692      	mov	sl, r2
 8009950:	461f      	mov	r7, r3
 8009952:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009956:	f7fa fb69 	bl	800402c <HAL_GetTick>
  if (NULL == pData)
 800995a:	2d00      	cmp	r5, #0
 800995c:	d069      	beq.n	8009a32 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 800995e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009962:	2b01      	cmp	r3, #1
 8009964:	fa5f f983 	uxtb.w	r9, r3
 8009968:	d152      	bne.n	8009a10 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800996a:	eb0a 0307 	add.w	r3, sl, r7
 800996e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009970:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009972:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009974:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009976:	d866      	bhi.n	8009a46 <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
 8009978:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800997a:	f04f 0b02 	mov.w	fp, #2
 800997e:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8009980:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009988:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800998a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800998c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800998e:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009990:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009994:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800999c:	bf18      	it	ne
 800999e:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099a2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80099a4:	027b      	lsls	r3, r7, #9
 80099a6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099a8:	2390      	movs	r3, #144	; 0x90
 80099aa:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099ae:	f001 fd8d 	bl	800b4cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80099b2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 80099b4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80099b6:	68d3      	ldr	r3, [r2, #12]
 80099b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099bc:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80099be:	d931      	bls.n	8009a24 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80099c0:	4651      	mov	r1, sl
 80099c2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80099c4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80099c8:	f001 fef2 	bl	800b7b0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d142      	bne.n	8009a56 <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
 80099d0:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099d4:	e004      	b.n	80099e0 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80099d6:	f7fa fb29 	bl	800402c <HAL_GetTick>
 80099da:	1b80      	subs	r0, r0, r6
 80099dc:	4540      	cmp	r0, r8
 80099de:	d267      	bcs.n	8009ab0 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099e4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80099e8:	d141      	bne.n	8009a6e <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80099ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099ec:	041a      	lsls	r2, r3, #16
 80099ee:	d5f2      	bpl.n	80099d6 <HAL_SD_ReadBlocks+0x92>
 80099f0:	f1bb 0f1f 	cmp.w	fp, #31
 80099f4:	d9ef      	bls.n	80099d6 <HAL_SD_ReadBlocks+0x92>
 80099f6:	f105 0a20 	add.w	sl, r5, #32
 80099fa:	e000      	b.n	80099fe <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	f001 fd4b 	bl	800b498 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009a02:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8009a06:	45aa      	cmp	sl, r5
 8009a08:	d1f8      	bne.n	80099fc <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
 8009a0a:	f1ab 0b20 	sub.w	fp, fp, #32
 8009a0e:	e7e2      	b.n	80099d6 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009a12:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a1a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a1c:	4648      	mov	r0, r9
 8009a1e:	b007      	add	sp, #28
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a24:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a26:	4651      	mov	r1, sl
 8009a28:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a2c:	f001 fe12 	bl	800b654 <SDMMC_CmdReadSingleBlock>
 8009a30:	e7cc      	b.n	80099cc <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009a34:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009a3c:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a3e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a40:	b007      	add	sp, #28
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009a48:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a4e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a50:	b007      	add	sp, #28
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	4a30      	ldr	r2, [pc, #192]	; (8009b1c <HAL_SD_ReadBlocks+0x1d8>)
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a5c:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a60:	4303      	orrs	r3, r0
 8009a62:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a64:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009a66:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009a6c:	e7d6      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009a6e:	68c3      	ldr	r3, [r0, #12]
 8009a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a74:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a7a:	05db      	lsls	r3, r3, #23
 8009a7c:	d501      	bpl.n	8009a82 <HAL_SD_ReadBlocks+0x13e>
 8009a7e:	2f01      	cmp	r7, #1
 8009a80:	d825      	bhi.n	8009ace <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a84:	f013 0308 	ands.w	r3, r3, #8
 8009a88:	d135      	bne.n	8009af6 <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a8a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009a8c:	f012 0202 	ands.w	r2, r2, #2
 8009a90:	d126      	bne.n	8009ae0 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a94:	f013 0320 	ands.w	r3, r3, #32
 8009a98:	d039      	beq.n	8009b0e <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a9a:	4b20      	ldr	r3, [pc, #128]	; (8009b1c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009a9c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a9e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009aa8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009aac:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009aae:	e7b5      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ab0:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009ab2:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ab4:	4819      	ldr	r0, [pc, #100]	; (8009b1c <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
 8009ab6:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8009ab8:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009abc:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ac4:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009ac6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009aca:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009acc:	e7a6      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d0d6      	beq.n	8009a82 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ad4:	f002 f876 	bl	800bbc4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d1bc      	bne.n	8009a56 <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	e7d0      	b.n	8009a82 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ae0:	4a0e      	ldr	r2, [pc, #56]	; (8009b1c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009ae2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ae4:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ae6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009ae8:	f042 0202 	orr.w	r2, r2, #2
 8009aec:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009aee:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009af2:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009af4:	e792      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009af6:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009af8:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009afa:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009afe:	f043 0308 	orr.w	r3, r3, #8
 8009b02:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b04:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009b06:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009b0c:	e786      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b0e:	4904      	ldr	r1, [pc, #16]	; (8009b20 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8009b10:	2201      	movs	r2, #1
    return HAL_OK;
 8009b12:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b14:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b16:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009b1a:	e77f      	b.n	8009a1c <HAL_SD_ReadBlocks+0xd8>
 8009b1c:	1fe00fff 	.word	0x1fe00fff
 8009b20:	18000f3a 	.word	0x18000f3a

08009b24 <HAL_SD_WriteBlocks>:
{
 8009b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	460d      	mov	r5, r1
 8009b2a:	b089      	sub	sp, #36	; 0x24
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	4692      	mov	sl, r2
 8009b30:	461f      	mov	r7, r3
 8009b32:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8009b36:	f7fa fa79 	bl	800402c <HAL_GetTick>
  if (NULL == pData)
 8009b3a:	2d00      	cmp	r5, #0
 8009b3c:	d068      	beq.n	8009c10 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 8009b3e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	fa5f f983 	uxtb.w	r9, r3
 8009b48:	d152      	bne.n	8009bf0 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b4a:	eb0a 0307 	add.w	r3, sl, r7
 8009b4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b50:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b52:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b54:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b56:	d865      	bhi.n	8009c24 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b64:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b68:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b6a:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b6c:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b70:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b74:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009b7a:	bf18      	it	ne
 8009b7c:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b80:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009b82:	027b      	lsls	r3, r7, #9
 8009b84:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b86:	2390      	movs	r3, #144	; 0x90
 8009b88:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b8a:	f001 fc9f 	bl	800b4cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009b8e:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009b90:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b92:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009b94:	68d3      	ldr	r3, [r2, #12]
 8009b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9a:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009b9c:	d932      	bls.n	8009c04 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009b9e:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ba0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ba4:	f001 ff60 	bl	800ba68 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d143      	bne.n	8009c34 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8009bac:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009bb0:	e004      	b.n	8009bbc <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009bb2:	f7fa fa3b 	bl	800402c <HAL_GetTick>
 8009bb6:	1b80      	subs	r0, r0, r6
 8009bb8:	4540      	cmp	r0, r8
 8009bba:	d268      	bcs.n	8009c8e <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009bc0:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8009bc4:	d142      	bne.n	8009c4c <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009bc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009bc8:	045a      	lsls	r2, r3, #17
 8009bca:	d5f2      	bpl.n	8009bb2 <HAL_SD_WriteBlocks+0x8e>
 8009bcc:	f1bb 0f1f 	cmp.w	fp, #31
 8009bd0:	d9ef      	bls.n	8009bb2 <HAL_SD_WriteBlocks+0x8e>
 8009bd2:	f105 0a20 	add.w	sl, r5, #32
 8009bd6:	e000      	b.n	8009bda <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009bd8:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009bda:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009bde:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009be0:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009be2:	f001 fc5d 	bl	800b4a0 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009be6:	4555      	cmp	r5, sl
 8009be8:	d1f6      	bne.n	8009bd8 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 8009bea:	f1ab 0b20 	sub.w	fp, fp, #32
 8009bee:	e7e0      	b.n	8009bb2 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009bf2:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009bf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bfa:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	b009      	add	sp, #36	; 0x24
 8009c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009c04:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c06:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009c08:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c0a:	f001 fe7f 	bl	800b90c <SDMMC_CmdWriteSingleBlock>
 8009c0e:	e7cb      	b.n	8009ba8 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009c12:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009c1a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c1c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009c1e:	b009      	add	sp, #36	; 0x24
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009c26:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c2c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009c2e:	b009      	add	sp, #36	; 0x24
 8009c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	4a30      	ldr	r2, [pc, #192]	; (8009cf8 <HAL_SD_WriteBlocks+0x1d4>)
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009c3a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c3e:	4303      	orrs	r3, r0
 8009c40:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009c42:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009c44:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009c48:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009c4a:	e7d7      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c4c:	68c3      	ldr	r3, [r0, #12]
 8009c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c52:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c58:	05db      	lsls	r3, r3, #23
 8009c5a:	d501      	bpl.n	8009c60 <HAL_SD_WriteBlocks+0x13c>
 8009c5c:	2f01      	cmp	r7, #1
 8009c5e:	d823      	bhi.n	8009ca8 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c62:	f013 0308 	ands.w	r3, r3, #8
 8009c66:	d133      	bne.n	8009cd0 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c68:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009c6a:	f012 0202 	ands.w	r2, r2, #2
 8009c6e:	d124      	bne.n	8009cba <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c72:	f013 0310 	ands.w	r3, r3, #16
 8009c76:	d037      	beq.n	8009ce8 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c78:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009c7a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c7c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c80:	f043 0310 	orr.w	r3, r3, #16
 8009c84:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c86:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c8a:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009c8c:	e7b6      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c8e:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009c90:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c92:	4819      	ldr	r0, [pc, #100]	; (8009cf8 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 8009c94:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8009c96:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c9a:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9e:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009ca0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009ca6:	e7a9      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d0d8      	beq.n	8009c60 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cae:	f001 ff89 	bl	800bbc4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1be      	bne.n	8009c34 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb6:	6820      	ldr	r0, [r4, #0]
 8009cb8:	e7d2      	b.n	8009c60 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cba:	4a0f      	ldr	r2, [pc, #60]	; (8009cf8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009cbc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cbe:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009cc2:	f042 0202 	orr.w	r2, r2, #2
 8009cc6:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009cc8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009cce:	e795      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009cd2:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cd4:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd8:	f043 0308 	orr.w	r3, r3, #8
 8009cdc:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cde:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009ce0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009ce6:	e789      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ce8:	4904      	ldr	r1, [pc, #16]	; (8009cfc <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 8009cea:	2201      	movs	r2, #1
    return HAL_OK;
 8009cec:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cee:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009cf0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009cf4:	e782      	b.n	8009bfc <HAL_SD_WriteBlocks+0xd8>
 8009cf6:	bf00      	nop
 8009cf8:	1fe00fff 	.word	0x1fe00fff
 8009cfc:	18000f3a 	.word	0x18000f3a

08009d00 <HAL_SD_ErrorCallback>:
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop

08009d04 <HAL_SD_GetCardCSD>:
{
 8009d04:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009d06:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d08:	f04f 0c00 	mov.w	ip, #0
{
 8009d0c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009d0e:	0f92      	lsrs	r2, r2, #30
 8009d10:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009d12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009d14:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009d18:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009d1a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 8009d1e:	f002 0203 	and.w	r2, r2, #3
 8009d22:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009d24:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 8009d28:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009d2a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 8009d2e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009d30:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8009d34:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009d36:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009d38:	0d12      	lsrs	r2, r2, #20
 8009d3a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009d3c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8009d40:	f002 020f 	and.w	r2, r2, #15
 8009d44:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009d46:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009d48:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009d4c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009d4e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009d50:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009d54:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009d56:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009d58:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009d5c:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009d5e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009d60:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009d64:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d66:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009d6a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	f040 808a 	bne.w	8009e86 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009d72:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8009d74:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009d78:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009d7a:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 8009d7e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009d82:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d86:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009d8a:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d8c:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009d90:	f002 0207 	and.w	r2, r2, #7
 8009d94:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009d96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d98:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009d9c:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009da0:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8009da4:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009da6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009da8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009dac:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009dae:	690a      	ldr	r2, [r1, #16]
 8009db0:	3201      	adds	r2, #1
 8009db2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009db4:	7e08      	ldrb	r0, [r1, #24]
 8009db6:	f000 0007 	and.w	r0, r0, #7
 8009dba:	3002      	adds	r0, #2
 8009dbc:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009dbe:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009dc0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009dc2:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009dc6:	f00c 0c0f 	and.w	ip, ip, #15
 8009dca:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009dce:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009dd2:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009dd4:	fb02 f20c 	mul.w	r2, r2, ip
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009dda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 8009ddc:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 8009de0:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 8009de2:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009de6:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8009dea:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009dec:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009dee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009df0:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009df4:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009df6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009df8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009dfc:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009dfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e00:	0fd2      	lsrs	r2, r2, #31
 8009e02:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e06:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009e0a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e0e:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009e12:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009e14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e16:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009e1a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e1e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009e22:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009e26:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009e2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e2e:	ea02 020c 	and.w	r2, r2, ip
 8009e32:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009e36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e38:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009e3c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009e40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e42:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009e46:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009e4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e4c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009e50:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009e54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e56:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009e5a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009e5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e60:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009e64:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e6a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009e6e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e74:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009e78:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009e7c:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 8009e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e84:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e86:	2a01      	cmp	r2, #1
 8009e88:	d110      	bne.n	8009eac <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009e8a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e8c:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 8009e90:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009e94:	0412      	lsls	r2, r2, #16
 8009e96:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009e9a:	4322      	orrs	r2, r4
 8009e9c:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009e9e:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8009ea0:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ea2:	3201      	adds	r2, #1
 8009ea4:	0292      	lsls	r2, r2, #10
 8009ea6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ea8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009eaa:	e796      	b.n	8009dda <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009eac:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009eae:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009eb0:	4805      	ldr	r0, [pc, #20]	; (8009ec8 <HAL_SD_GetCardCSD+0x1c4>)
 8009eb2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8009eb4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009ebc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ebe:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 8009ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	1fe00fff 	.word	0x1fe00fff

08009ecc <HAL_SD_InitCard>:
{
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ece:	2200      	movs	r2, #0
{
 8009ed0:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ed2:	2300      	movs	r3, #0
{
 8009ed4:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009edc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ee4:	f7fe fe18 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009ee8:	b940      	cbnz	r0, 8009efc <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 8009eea:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8009ef0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ef4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	b015      	add	sp, #84	; 0x54
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009efc:	0a06      	lsrs	r6, r0, #8
 8009efe:	4b8e      	ldr	r3, [pc, #568]	; (800a138 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8009f00:	aa07      	add	r2, sp, #28
 8009f02:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009f04:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8009f08:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009f0a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8009f0c:	9608      	str	r6, [sp, #32]
 8009f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	f001 faa1 	bl	800b460 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	f001 fac4 	bl	800b4ac <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8009f24:	4b85      	ldr	r3, [pc, #532]	; (800a13c <HAL_SD_InitCard+0x270>)
 8009f26:	429d      	cmp	r5, r3
 8009f28:	d902      	bls.n	8009f30 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009f2a:	0076      	lsls	r6, r6, #1
 8009f2c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009f30:	4883      	ldr	r0, [pc, #524]	; (800a140 <HAL_SD_InitCard+0x274>)
 8009f32:	fbb0 f0f5 	udiv	r0, r0, r5
 8009f36:	3001      	adds	r0, #1
 8009f38:	f7fa f87e 	bl	8004038 <HAL_Delay>
  __IO uint32_t count = 0U;
 8009f3c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f3e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8009f40:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f42:	f001 fff5 	bl	800bf30 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f46:	4605      	mov	r5, r0
 8009f48:	b140      	cbz	r0, 8009f5c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8009f4a:	2601      	movs	r6, #1
 8009f4c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 8009f50:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8009f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f54:	432b      	orrs	r3, r5
 8009f56:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009f58:	b015      	add	sp, #84	; 0x54
 8009f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	f002 f813 	bl	800bf88 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009f62:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009f66:	f000 80ce 	beq.w	800a106 <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	f002 f849 	bl	800c008 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f76:	bb08      	cbnz	r0, 8009fbc <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8009f7e:	42b3      	cmp	r3, r6
 8009f80:	f200 80d3 	bhi.w	800a12a <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009f84:	4f6f      	ldr	r7, [pc, #444]	; (800a144 <HAL_SD_InitCard+0x278>)
 8009f86:	e010      	b.n	8009faa <HAL_SD_InitCard+0xde>
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	f002 f8eb 	bl	800c164 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	b9a0      	cbnz	r0, 8009fbc <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	f001 fa96 	bl	800b4c4 <SDMMC_GetResponse>
    count++;
 8009f98:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f9a:	2800      	cmp	r0, #0
    count++;
 8009f9c:	f103 0301 	add.w	r3, r3, #1
 8009fa0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	db0d      	blt.n	8009fc2 <HAL_SD_InitCard+0xf6>
 8009fa6:	42b3      	cmp	r3, r6
 8009fa8:	d80b      	bhi.n	8009fc2 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009faa:	2100      	movs	r1, #0
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	f002 f82b 	bl	800c008 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009fb2:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0e7      	beq.n	8009f88 <HAL_SD_InitCard+0xbc>
 8009fb8:	4605      	mov	r5, r0
 8009fba:	e7c6      	b.n	8009f4a <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009fc0:	e7c3      	b.n	8009f4a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009fc2:	9a03      	ldr	r2, [sp, #12]
 8009fc4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	f200 80b2 	bhi.w	800a132 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009fce:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 8009fd2:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009fd6:	bf18      	it	ne
 8009fd8:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 8009fda:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63a5      	str	r5, [r4, #56]	; 0x38
 8009fe0:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8009fe4:	f7fa f822 	bl	800402c <HAL_GetTick>
 8009fe8:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	f001 fa66 	bl	800b4bc <SDMMC_GetPowerState>
 8009ff0:	b350      	cbz	r0, 800a048 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d132      	bne.n	800a05e <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	6820      	ldr	r0, [r4, #0]
 8009ffc:	f001 fa62 	bl	800b4c4 <SDMMC_GetResponse>
 800a000:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a002:	a909      	add	r1, sp, #36	; 0x24
 800a004:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a006:	0d1b      	lsrs	r3, r3, #20
 800a008:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a00a:	f7ff fe7b 	bl	8009d04 <HAL_SD_GetCardCSD>
 800a00e:	4606      	mov	r6, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	f040 8084 	bne.w	800a11e <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a016:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a018:	6820      	ldr	r0, [r4, #0]
 800a01a:	0409      	lsls	r1, r1, #16
 800a01c:	f001 feda 	bl	800bdd4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a020:	b9a0      	cbnz	r0, 800a04c <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a022:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	f001 fa66 	bl	800b4f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a02c:	2800      	cmp	r0, #0
 800a02e:	f43f af62 	beq.w	8009ef6 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a032:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a034:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a036:	4944      	ldr	r1, [pc, #272]	; (800a148 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 800a038:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a03a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a03c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a03e:	4310      	orrs	r0, r2
 800a040:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a042:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800a046:	e756      	b.n	8009ef6 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a048:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a04c:	2601      	movs	r6, #1
 800a04e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a054:	4303      	orrs	r3, r0
}
 800a056:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a058:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a05a:	b015      	add	sp, #84	; 0x54
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	f002 fa12 	bl	800c488 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a064:	2800      	cmp	r0, #0
 800a066:	d1f1      	bne.n	800a04c <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a068:	4601      	mov	r1, r0
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	f001 fa2a 	bl	800b4c4 <SDMMC_GetResponse>
 800a070:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a072:	2104      	movs	r1, #4
 800a074:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a076:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a078:	f001 fa24 	bl	800b4c4 <SDMMC_GetResponse>
 800a07c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a07e:	2108      	movs	r1, #8
 800a080:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a082:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a084:	f001 fa1e 	bl	800b4c4 <SDMMC_GetResponse>
 800a088:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a08a:	210c      	movs	r1, #12
 800a08c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a08e:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a090:	f001 fa18 	bl	800b4c4 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a096:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d0ad      	beq.n	8009ff8 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a09c:	f241 3687 	movw	r6, #4999	; 0x1387
 800a0a0:	e009      	b.n	800a0b6 <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a0a2:	6820      	ldr	r0, [r4, #0]
 800a0a4:	f002 fa6e 	bl	800c584 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d1cf      	bne.n	800a04c <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a0ac:	f7f9 ffbe 	bl	800402c <HAL_GetTick>
 800a0b0:	1b43      	subs	r3, r0, r5
 800a0b2:	42b3      	cmp	r3, r6
 800a0b4:	d836      	bhi.n	800a124 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
 800a0b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a0ba:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a0c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0c4:	2a03      	cmp	r2, #3
 800a0c6:	d097      	beq.n	8009ff8 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c8:	0419      	lsls	r1, r3, #16
 800a0ca:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a0cc:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0ce:	f002 fa19 	bl	800c504 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d1ba      	bne.n	800a04c <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6820      	ldr	r0, [r4, #0]
 800a0da:	f001 f9f3 	bl	800b4c4 <SDMMC_GetResponse>
 800a0de:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0e4:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0e6:	f001 f9ed 	bl	800b4c4 <SDMMC_GetResponse>
 800a0ea:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0ec:	2108      	movs	r1, #8
 800a0ee:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0f0:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0f2:	f001 f9e7 	bl	800b4c4 <SDMMC_GetResponse>
 800a0f6:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0f8:	210c      	movs	r1, #12
 800a0fa:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0fc:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0fe:	f001 f9e1 	bl	800b4c4 <SDMMC_GetResponse>
 800a102:	66a0      	str	r0, [r4, #104]	; 0x68
 800a104:	e778      	b.n	8009ff8 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a106:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a108:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a10a:	f001 ff11 	bl	800bf30 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a10e:	2800      	cmp	r0, #0
 800a110:	f47f af52 	bne.w	8009fb8 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a116:	2b01      	cmp	r3, #1
 800a118:	f47f af2e 	bne.w	8009f78 <HAL_SD_InitCard+0xac>
 800a11c:	e727      	b.n	8009f6e <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a11e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a122:	e793      	b.n	800a04c <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
 800a124:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800a128:	e790      	b.n	800a04c <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	42b3      	cmp	r3, r6
 800a12e:	f67f af55 	bls.w	8009fdc <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a132:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800a136:	e708      	b.n	8009f4a <HAL_SD_InitCard+0x7e>
 800a138:	014f8b59 	.word	0x014f8b59
 800a13c:	000c34ff 	.word	0x000c34ff
 800a140:	00012110 	.word	0x00012110
 800a144:	c1100000 	.word	0xc1100000
 800a148:	1fe00fff 	.word	0x1fe00fff

0800a14c <HAL_SD_GetCardInfo>:
{
 800a14c:	4603      	mov	r3, r0
}
 800a14e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a152:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a156:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a15a:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15e:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a162:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a166:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a16a:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16e:	61cb      	str	r3, [r1, #28]
}
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop

0800a174 <HAL_SD_ConfigWideBusOperation>:
{
 800a174:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a176:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a178:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800a17a:	b089      	sub	sp, #36	; 0x24
 800a17c:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a17e:	4293      	cmp	r3, r2
{
 800a180:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800a182:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a186:	d040      	beq.n	800a20a <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a188:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a18c:	d03d      	beq.n	800a20a <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a18e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a192:	d07d      	beq.n	800a290 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a194:	2900      	cmp	r1, #0
 800a196:	d05c      	beq.n	800a252 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a198:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a19a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a19e:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a1a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d138      	bne.n	800a218 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a1a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f7fe fcb4 	bl	8008b18 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d048      	beq.n	800a246 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a1b4:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a1b6:	4b50      	ldr	r3, [pc, #320]	; (800a2f8 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a1b8:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800a1ba:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a1bc:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a1be:	fba3 5300 	umull	r5, r3, r3, r0
 800a1c2:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a1c4:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a1c6:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a1ca:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a1cc:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a1d0:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a1d2:	d20e      	bcs.n	800a1f2 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a1d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a1d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1da:	d00a      	beq.n	800a1f2 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a1dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a1e0:	d078      	beq.n	800a2d4 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
 800a1e2:	b112      	cbz	r2, 800a1ea <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a1e4:	0053      	lsls	r3, r2, #1
 800a1e6:	fbb0 f0f3 	udiv	r0, r0, r3
 800a1ea:	4b44      	ldr	r3, [pc, #272]	; (800a2fc <HAL_SD_ConfigWideBusOperation+0x188>)
 800a1ec:	4298      	cmp	r0, r3
 800a1ee:	bf88      	it	hi
 800a1f0:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800a1f2:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a1f4:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800a1f6:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a1f8:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800a1fa:	c903      	ldmia	r1, {r0, r1}
 800a1fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a200:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a202:	6820      	ldr	r0, [r4, #0]
 800a204:	f001 f92c 	bl	800b460 <SDMMC_Init>
 800a208:	e00a      	b.n	800a220 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a20c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a210:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0c6      	beq.n	800a1a6 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a218:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a21a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a21c:	4a38      	ldr	r2, [pc, #224]	; (800a300 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a220:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	f001 f967 	bl	800b4f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a22a:	b130      	cbz	r0, 800a23a <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a22c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a22e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a230:	4a33      	ldr	r2, [pc, #204]	; (800a300 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a232:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a236:	4303      	orrs	r3, r0
 800a238:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800a23a:	2301      	movs	r3, #1
}
 800a23c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a23e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800a242:	b009      	add	sp, #36	; 0x24
 800a244:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a246:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a248:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a24a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a24e:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a250:	e7e6      	b.n	800a220 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
 800a252:	2200      	movs	r2, #0
 800a254:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a256:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a258:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a25c:	f001 f932 	bl	800b4c4 <SDMMC_GetResponse>
 800a260:	0182      	lsls	r2, r0, #6
 800a262:	d434      	bmi.n	800a2ce <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a264:	a902      	add	r1, sp, #8
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff fafa 	bl	8009860 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a26c:	b960      	cbnz	r0, 800a288 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	03db      	lsls	r3, r3, #15
 800a272:	d535      	bpl.n	800a2e0 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a274:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a276:	6820      	ldr	r0, [r4, #0]
 800a278:	0409      	lsls	r1, r1, #16
 800a27a:	f001 fec5 	bl	800c008 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a27e:	b918      	cbnz	r0, 800a288 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a280:	4601      	mov	r1, r0
 800a282:	6820      	ldr	r0, [r4, #0]
 800a284:	f001 ffaa 	bl	800c1dc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a28a:	4303      	orrs	r3, r0
 800a28c:	6363      	str	r3, [r4, #52]	; 0x34
 800a28e:	e7c0      	b.n	800a212 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
 800a290:	2200      	movs	r2, #0
 800a292:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a294:	2100      	movs	r1, #0
 800a296:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a298:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a29c:	f001 f912 	bl	800b4c4 <SDMMC_GetResponse>
 800a2a0:	0180      	lsls	r0, r0, #6
 800a2a2:	d414      	bmi.n	800a2ce <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a2a4:	a902      	add	r1, sp, #8
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7ff fada 	bl	8009860 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d1eb      	bne.n	800a288 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	0359      	lsls	r1, r3, #13
 800a2b4:	d514      	bpl.n	800a2e0 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a2b8:	6820      	ldr	r0, [r4, #0]
 800a2ba:	0409      	lsls	r1, r1, #16
 800a2bc:	f001 fea4 	bl	800c008 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1e1      	bne.n	800a288 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a2c4:	2102      	movs	r1, #2
 800a2c6:	6820      	ldr	r0, [r4, #0]
 800a2c8:	f001 ff88 	bl	800c1dc <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2cc:	e7dc      	b.n	800a288 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2d2:	e7d9      	b.n	800a288 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
 800a2d4:	b93a      	cbnz	r2, 800a2e6 <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a2d6:	490b      	ldr	r1, [pc, #44]	; (800a304 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a2d8:	4288      	cmp	r0, r1
 800a2da:	d98a      	bls.n	800a1f2 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a2dc:	0e5a      	lsrs	r2, r3, #25
 800a2de:	e788      	b.n	800a1f2 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a2e4:	e7d0      	b.n	800a288 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a2e6:	0051      	lsls	r1, r2, #1
 800a2e8:	fbb0 f1f1 	udiv	r1, r0, r1
 800a2ec:	4805      	ldr	r0, [pc, #20]	; (800a304 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a2ee:	4281      	cmp	r1, r0
 800a2f0:	f67f af7f 	bls.w	800a1f2 <HAL_SD_ConfigWideBusOperation+0x7e>
 800a2f4:	e7f2      	b.n	800a2dc <HAL_SD_ConfigWideBusOperation+0x168>
 800a2f6:	bf00      	nop
 800a2f8:	55e63b89 	.word	0x55e63b89
 800a2fc:	017d7840 	.word	0x017d7840
 800a300:	1fe00fff 	.word	0x1fe00fff
 800a304:	02faf080 	.word	0x02faf080

0800a308 <HAL_SD_Init>:
{
 800a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30a:	b087      	sub	sp, #28
  if (hsd == NULL)
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d045      	beq.n	800a39c <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
 800a310:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a314:	4604      	mov	r4, r0
 800a316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d042      	beq.n	800a3a4 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a31e:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a320:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a322:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a326:	f7ff fdd1 	bl	8009ecc <HAL_SD_InitCard>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d136      	bne.n	800a39c <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a32e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a332:	2b03      	cmp	r3, #3
 800a334:	d032      	beq.n	800a39c <HAL_SD_Init+0x94>
 800a336:	a901      	add	r1, sp, #4
 800a338:	4620      	mov	r0, r4
 800a33a:	f7ff f9cb 	bl	80096d4 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a33e:	bb68      	cbnz	r0, 800a39c <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a340:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a342:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a346:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a348:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a34c:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a34e:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a350:	d02c      	beq.n	800a3ac <HAL_SD_Init+0xa4>
 800a352:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a354:	68e1      	ldr	r1, [r4, #12]
 800a356:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a358:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a35a:	f7ff ff0b 	bl	800a174 <HAL_SD_ConfigWideBusOperation>
 800a35e:	4606      	mov	r6, r0
 800a360:	b9e0      	cbnz	r0, 800a39c <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
 800a362:	f7f9 fe63 	bl	800402c <HAL_GetTick>
 800a366:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a368:	e00c      	b.n	800a384 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	4629      	mov	r1, r5
 800a36e:	f001 f8a9 	bl	800b4c4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a372:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a376:	2804      	cmp	r0, #4
 800a378:	d01f      	beq.n	800a3ba <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a37a:	f7f9 fe57 	bl	800402c <HAL_GetTick>
 800a37e:	1bc3      	subs	r3, r0, r7
 800a380:	3301      	adds	r3, #1
 800a382:	d020      	beq.n	800a3c6 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a384:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	0409      	lsls	r1, r1, #16
 800a38a:	f002 f95b 	bl	800c644 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a38e:	4605      	mov	r5, r0
 800a390:	2800      	cmp	r0, #0
 800a392:	d0ea      	beq.n	800a36a <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
 800a394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a396:	4303      	orrs	r3, r0
 800a398:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800a39a:	e7ee      	b.n	800a37a <HAL_SD_Init+0x72>
    return HAL_ERROR;
 800a39c:	2601      	movs	r6, #1
}
 800a39e:	4630      	mov	r0, r6
 800a3a0:	b007      	add	sp, #28
 800a3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800a3a4:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a3a6:	f7f8 fe0d 	bl	8002fc4 <HAL_SD_MspInit>
 800a3aa:	e7b8      	b.n	800a31e <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	bf0c      	ite	eq
 800a3b0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800a3b4:	f44f 7300 	movne.w	r3, #512	; 0x200
 800a3b8:	e7cc      	b.n	800a354 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800a3ba:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3bc:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a3be:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a3c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a3c4:	e7eb      	b.n	800a39e <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a3c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800a3ca:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800a3cc:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a3ce:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a3d4:	e7e3      	b.n	800a39e <HAL_SD_Init+0x96>
 800a3d6:	bf00      	nop

0800a3d8 <HAL_SD_GetCardState>:
{
 800a3d8:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3da:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800a3dc:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	0409      	lsls	r1, r1, #16
 800a3e2:	f002 f92f 	bl	800c644 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	b120      	cbz	r0, 800a3f4 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800a3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a3f2:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	f001 f865 	bl	800b4c4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a3fa:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a3fe:	bd10      	pop	{r4, pc}

0800a400 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop

0800a404 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop

0800a408 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop

0800a40c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop

0800a410 <HAL_SD_IRQHandler>:
{
 800a410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a412:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a414:	6800      	ldr	r0, [r0, #0]
{
 800a416:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800a418:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a41a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	d502      	bpl.n	800a426 <HAL_SD_IRQHandler+0x16>
 800a420:	072f      	lsls	r7, r5, #28
 800a422:	f100 80b4 	bmi.w	800a58e <HAL_SD_IRQHandler+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a426:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a428:	05de      	lsls	r6, r3, #23
 800a42a:	d529      	bpl.n	800a480 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a42c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a430:	4b91      	ldr	r3, [pc, #580]	; (800a678 <HAL_SD_IRQHandler+0x268>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a432:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a438:	400b      	ands	r3, r1
 800a43a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a43c:	6822      	ldr	r2, [r4, #0]
 800a43e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a444:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	68d3      	ldr	r3, [r2, #12]
 800a44a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a44e:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a450:	f015 0308 	ands.w	r3, r5, #8
 800a454:	d076      	beq.n	800a544 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a456:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a45a:	f040 80d9 	bne.w	800a610 <HAL_SD_IRQHandler+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a45e:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800a460:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a462:	4986      	ldr	r1, [pc, #536]	; (800a67c <HAL_SD_IRQHandler+0x26c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a464:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a466:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800a468:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a46c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a470:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a472:	f000 80a0 	beq.w	800a5b6 <HAL_SD_IRQHandler+0x1a6>
        HAL_SD_RxCpltCallback(hsd);
 800a476:	4620      	mov	r0, r4
 800a478:	f002 fa86 	bl	800c988 <HAL_SD_RxCpltCallback>
}
 800a47c:	b003      	add	sp, #12
 800a47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a480:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a482:	045b      	lsls	r3, r3, #17
 800a484:	d502      	bpl.n	800a48c <HAL_SD_IRQHandler+0x7c>
 800a486:	072f      	lsls	r7, r5, #28
 800a488:	f100 809a 	bmi.w	800a5c0 <HAL_SD_IRQHandler+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a48c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a48e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a492:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a494:	d06c      	beq.n	800a570 <HAL_SD_IRQHandler+0x160>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a496:	079e      	lsls	r6, r3, #30
 800a498:	d503      	bpl.n	800a4a2 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a49a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a49c:	f043 0302 	orr.w	r3, r3, #2
 800a4a0:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a4a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4a4:	0719      	lsls	r1, r3, #28
 800a4a6:	d503      	bpl.n	800a4b0 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4aa:	f043 0308 	orr.w	r3, r3, #8
 800a4ae:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a4b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4b2:	069a      	lsls	r2, r3, #26
 800a4b4:	d503      	bpl.n	800a4be <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b8:	f043 0320 	orr.w	r3, r3, #32
 800a4bc:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a4be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4c0:	06db      	lsls	r3, r3, #27
 800a4c2:	d503      	bpl.n	800a4cc <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4c6:	f043 0310 	orr.w	r3, r3, #16
 800a4ca:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4cc:	4b6b      	ldr	r3, [pc, #428]	; (800a67c <HAL_SD_IRQHandler+0x26c>)
 800a4ce:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a4d0:	6822      	ldr	r2, [r4, #0]
 800a4d2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a4d4:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a4d8:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	68d3      	ldr	r3, [r2, #12]
 800a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e2:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a4e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	68d3      	ldr	r3, [r2, #12]
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f6:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	f001 fb63 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 800a4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a500:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a502:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a506:	4318      	orrs	r0, r3
 800a508:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a50a:	68d3      	ldr	r3, [r2, #12]
 800a50c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a510:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a516:	f015 0308 	ands.w	r3, r5, #8
 800a51a:	f040 8087 	bne.w	800a62c <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a51e:	062f      	lsls	r7, r5, #24
 800a520:	d5ac      	bpl.n	800a47c <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a522:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a524:	2a00      	cmp	r2, #0
 800a526:	d0a9      	beq.n	800a47c <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a528:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a52a:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800a52c:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a52e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a530:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a534:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a536:	6822      	ldr	r2, [r4, #0]
 800a538:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a53a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a53e:	f7ff fbdf 	bl	8009d00 <HAL_SD_ErrorCallback>
 800a542:	e79b      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a544:	0629      	lsls	r1, r5, #24
 800a546:	d599      	bpl.n	800a47c <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800a548:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a54a:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a54e:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a558:	d176      	bne.n	800a648 <HAL_SD_IRQHandler+0x238>
      hsd->State = HAL_SD_STATE_READY;
 800a55a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a55c:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a55e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a562:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a566:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a568:	d17b      	bne.n	800a662 <HAL_SD_IRQHandler+0x252>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a56a:	07aa      	lsls	r2, r5, #30
 800a56c:	d086      	beq.n	800a47c <HAL_SD_IRQHandler+0x6c>
 800a56e:	e782      	b.n	800a476 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a570:	00de      	lsls	r6, r3, #3
 800a572:	d583      	bpl.n	800a47c <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a578:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a57a:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	0759      	lsls	r1, r3, #29
 800a582:	d45c      	bmi.n	800a63e <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a584:	06aa      	lsls	r2, r5, #26
 800a586:	d573      	bpl.n	800a670 <HAL_SD_IRQHandler+0x260>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a588:	f7ff ff40 	bl	800a40c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a58c:	e776      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800a58e:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 800a592:	2b1f      	cmp	r3, #31
 800a594:	f67f af72 	bls.w	800a47c <HAL_SD_IRQHandler+0x6c>
 800a598:	f105 0620 	add.w	r6, r5, #32
 800a59c:	e000      	b.n	800a5a0 <HAL_SD_IRQHandler+0x190>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	f000 ff7a 	bl	800b498 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a5a4:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 800a5a8:	42ae      	cmp	r6, r5
 800a5aa:	d1f8      	bne.n	800a59e <HAL_SD_IRQHandler+0x18e>
    hsd->RxXferSize -= 32U;
 800a5ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hsd->pRxBuffPtr = tmp;
 800a5ae:	6266      	str	r6, [r4, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a5b0:	3b20      	subs	r3, #32
 800a5b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5b4:	e762      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f002 f9e0 	bl	800c97c <HAL_SD_TxCpltCallback>
}
 800a5bc:	b003      	add	sp, #12
 800a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800a5c0:	6a23      	ldr	r3, [r4, #32]
 800a5c2:	2b1f      	cmp	r3, #31
 800a5c4:	f67f af5a 	bls.w	800a47c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800a5c8:	69e6      	ldr	r6, [r4, #28]
 800a5ca:	1d37      	adds	r7, r6, #4
 800a5cc:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800a5d0:	e000      	b.n	800a5d4 <HAL_SD_IRQHandler+0x1c4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a5d2:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800a5d4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800a5d8:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a5da:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800a5dc:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800a5de:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800a5e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5e6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800a5e8:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800a5ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800a5f2:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800a5f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5fa:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a5fc:	f000 ff50 	bl	800b4a0 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a600:	42af      	cmp	r7, r5
 800a602:	d1e6      	bne.n	800a5d2 <HAL_SD_IRQHandler+0x1c2>
    hsd->TxXferSize -= 32U;
 800a604:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800a606:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800a608:	3b20      	subs	r3, #32
 800a60a:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800a60e:	e735      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a610:	6820      	ldr	r0, [r4, #0]
 800a612:	f001 fad7 	bl	800bbc4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a616:	4603      	mov	r3, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	f43f af20 	beq.w	800a45e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a61e:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a620:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a622:	4313      	orrs	r3, r2
 800a624:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a626:	f7ff fb6b 	bl	8009d00 <HAL_SD_ErrorCallback>
 800a62a:	e718      	b.n	800a45e <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800a62c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a62e:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800a630:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800a632:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a636:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a638:	f7ff fb62 	bl	8009d00 <HAL_SD_ErrorCallback>
 800a63c:	e71e      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a63e:	06ab      	lsls	r3, r5, #26
 800a640:	d513      	bpl.n	800a66a <HAL_SD_IRQHandler+0x25a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a642:	f7ff fee1 	bl	800a408 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a646:	e719      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a648:	6820      	ldr	r0, [r4, #0]
 800a64a:	f001 fabb 	bl	800bbc4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a64e:	4603      	mov	r3, r0
 800a650:	2800      	cmp	r0, #0
 800a652:	d082      	beq.n	800a55a <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 800a654:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a656:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a658:	4313      	orrs	r3, r2
 800a65a:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a65c:	f7ff fb50 	bl	8009d00 <HAL_SD_ErrorCallback>
 800a660:	e77b      	b.n	800a55a <HAL_SD_IRQHandler+0x14a>
        HAL_SD_TxCpltCallback(hsd);
 800a662:	4620      	mov	r0, r4
 800a664:	f002 f98a 	bl	800c97c <HAL_SD_TxCpltCallback>
 800a668:	e77f      	b.n	800a56a <HAL_SD_IRQHandler+0x15a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a66a:	f7ff fec9 	bl	800a400 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a66e:	e705      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a670:	f7ff fec8 	bl	800a404 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a674:	e702      	b.n	800a47c <HAL_SD_IRQHandler+0x6c>
 800a676:	bf00      	nop
 800a678:	ffff3ec5 	.word	0xffff3ec5
 800a67c:	18000f3a 	.word	0x18000f3a

0800a680 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a680:	b318      	cbz	r0, 800a6ca <HAL_SDRAM_Init+0x4a>
{
 800a682:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a684:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a690:	b1b3      	cbz	r3, 800a6c0 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a692:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a694:	2302      	movs	r3, #2
 800a696:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a69a:	f851 0b04 	ldr.w	r0, [r1], #4
 800a69e:	f000 fe2d 	bl	800b2fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a6a2:	6862      	ldr	r2, [r4, #4]
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	6820      	ldr	r0, [r4, #0]
 800a6a8:	f000 fe66 	bl	800b378 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a6ac:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a6ae:	2101      	movs	r1, #1

  return HAL_OK;
 800a6b0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a6b2:	6813      	ldr	r3, [r2, #0]
 800a6b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6b8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a6ba:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a6c0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a6c4:	f7f6 fc5a 	bl	8000f7c <HAL_SDRAM_MspInit>
 800a6c8:	e7e3      	b.n	800a692 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a6ca:	2001      	movs	r0, #1
}
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	52004000 	.word	0x52004000

0800a6d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a6d4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a6d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a6da:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a6dc:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a6de:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a6e0:	d004      	beq.n	800a6ec <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a6e2:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800a6e6:	2e01      	cmp	r6, #1
 800a6e8:	d001      	beq.n	800a6ee <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a6ea:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a6f2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a6f8:	f000 fe8c 	bl	800b414 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d003      	beq.n	800a70a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a702:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a704:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800a708:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a70a:	2305      	movs	r3, #5
  return HAL_OK;
 800a70c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a70e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a712:	bd70      	pop	{r4, r5, r6, pc}

0800a714 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a714:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a716:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a71a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	b2d8      	uxtb	r0, r3
 800a720:	d005      	beq.n	800a72e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a722:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a726:	2b01      	cmp	r3, #1
 800a728:	b2dd      	uxtb	r5, r3
 800a72a:	d001      	beq.n	800a730 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a72c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a730:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a732:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a734:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a738:	f000 fe84 	bl	800b444 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a73c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a73e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a742:	bd38      	pop	{r3, r4, r5, pc}

0800a744 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a744:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a746:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
 800a748:	680a      	ldr	r2, [r1, #0]
 800a74a:	f022 0201 	bic.w	r2, r2, #1
 800a74e:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a750:	6802      	ldr	r2, [r0, #0]
 800a752:	6911      	ldr	r1, [r2, #16]
 800a754:	400b      	ands	r3, r1
 800a756:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a758:	6802      	ldr	r2, [r0, #0]
 800a75a:	6993      	ldr	r3, [r2, #24]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a762:	6802      	ldr	r2, [r0, #0]
 800a764:	6993      	ldr	r3, [r2, #24]
 800a766:	f043 0310 	orr.w	r3, r3, #16
 800a76a:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a76c:	6802      	ldr	r2, [r0, #0]
 800a76e:	6893      	ldr	r3, [r2, #8]
 800a770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a774:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a776:	6802      	ldr	r2, [r0, #0]
 800a778:	6993      	ldr	r3, [r2, #24]
 800a77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a780:	6802      	ldr	r2, [r0, #0]
 800a782:	6993      	ldr	r3, [r2, #24]
 800a784:	f043 0320 	orr.w	r3, r3, #32
 800a788:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a78a:	6802      	ldr	r2, [r0, #0]
 800a78c:	6993      	ldr	r3, [r2, #24]
 800a78e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a792:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a794:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a796:	6801      	ldr	r1, [r0, #0]
 800a798:	698b      	ldr	r3, [r1, #24]
 800a79a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a79e:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a7a0:	6801      	ldr	r1, [r0, #0]
 800a7a2:	698b      	ldr	r3, [r1, #24]
 800a7a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7a8:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800a7aa:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a7ae:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
 800a7b2:	4770      	bx	lr
 800a7b4:	fffffc90 	.word	0xfffffc90

0800a7b8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a7b8:	6802      	ldr	r2, [r0, #0]
{
 800a7ba:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a7bc:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7be:	6991      	ldr	r1, [r2, #24]
 800a7c0:	f041 0108 	orr.w	r1, r1, #8
 800a7c4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7c6:	6801      	ldr	r1, [r0, #0]
 800a7c8:	698a      	ldr	r2, [r1, #24]
 800a7ca:	f042 0210 	orr.w	r2, r2, #16
 800a7ce:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7d0:	6801      	ldr	r1, [r0, #0]
 800a7d2:	680a      	ldr	r2, [r1, #0]
 800a7d4:	f022 0201 	bic.w	r2, r2, #1
 800a7d8:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a7da:	6801      	ldr	r1, [r0, #0]
 800a7dc:	4a27      	ldr	r2, [pc, #156]	; (800a87c <SPI_CloseTransfer+0xc4>)
 800a7de:	690c      	ldr	r4, [r1, #16]
 800a7e0:	4022      	ands	r2, r4
 800a7e2:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7e4:	6801      	ldr	r1, [r0, #0]
 800a7e6:	688a      	ldr	r2, [r1, #8]
 800a7e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7ec:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7ee:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a7f2:	2a04      	cmp	r2, #4
 800a7f4:	d001      	beq.n	800a7fa <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a7f6:	069c      	lsls	r4, r3, #26
 800a7f8:	d433      	bmi.n	800a862 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a7fa:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a7fe:	2a03      	cmp	r2, #3
 800a800:	d001      	beq.n	800a806 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a802:	0659      	lsls	r1, r3, #25
 800a804:	d421      	bmi.n	800a84a <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a806:	059a      	lsls	r2, r3, #22
 800a808:	d50a      	bpl.n	800a820 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a80a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a80e:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a810:	f042 0201 	orr.w	r2, r2, #1
 800a814:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a818:	698a      	ldr	r2, [r1, #24]
 800a81a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a81e:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a820:	05db      	lsls	r3, r3, #23
 800a822:	d50a      	bpl.n	800a83a <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a824:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a828:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a82a:	f043 0308 	orr.w	r3, r3, #8
 800a82e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a832:	6993      	ldr	r3, [r2, #24]
 800a834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a838:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a83a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800a83c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800a840:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a844:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a848:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a84a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a84e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a850:	f042 0204 	orr.w	r2, r2, #4
 800a854:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a858:	698a      	ldr	r2, [r1, #24]
 800a85a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a85e:	618a      	str	r2, [r1, #24]
 800a860:	e7d1      	b.n	800a806 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a862:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a866:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a86c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a870:	698a      	ldr	r2, [r1, #24]
 800a872:	f042 0220 	orr.w	r2, r2, #32
 800a876:	618a      	str	r2, [r1, #24]
 800a878:	e7bf      	b.n	800a7fa <SPI_CloseTransfer+0x42>
 800a87a:	bf00      	nop
 800a87c:	fffffc90 	.word	0xfffffc90

0800a880 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a880:	2800      	cmp	r0, #0
 800a882:	f000 80be 	beq.w	800aa02 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a886:	4a62      	ldr	r2, [pc, #392]	; (800aa10 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a888:	2100      	movs	r1, #0
{
 800a88a:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a88c:	6803      	ldr	r3, [r0, #0]
 800a88e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a890:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a892:	4293      	cmp	r3, r2
 800a894:	d015      	beq.n	800a8c2 <HAL_SPI_Init+0x42>
 800a896:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d011      	beq.n	800a8c2 <HAL_SPI_Init+0x42>
 800a89e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	68c2      	ldr	r2, [r0, #12]
 800a8a6:	f000 80a5 	beq.w	800a9f4 <HAL_SPI_Init+0x174>
 800a8aa:	2a0f      	cmp	r2, #15
 800a8ac:	d807      	bhi.n	800a8be <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a8b0:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8b2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a8b4:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800a8b6:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8ba:	2a08      	cmp	r2, #8
 800a8bc:	d914      	bls.n	800a8e8 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800a8be:	2001      	movs	r0, #1
}
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800a8c2:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a8c6:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8c8:	4851      	ldr	r0, [pc, #324]	; (800aa10 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8ca:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a8cc:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a8ce:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8d2:	4950      	ldr	r1, [pc, #320]	; (800aa14 <HAL_SPI_Init+0x194>)
 800a8d4:	428b      	cmp	r3, r1
 800a8d6:	bf18      	it	ne
 800a8d8:	4283      	cmpne	r3, r0
 800a8da:	d003      	beq.n	800a8e4 <HAL_SPI_Init+0x64>
 800a8dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8e0:	428b      	cmp	r3, r1
 800a8e2:	d101      	bne.n	800a8e8 <HAL_SPI_Init+0x68>
 800a8e4:	2a10      	cmp	r2, #16
 800a8e6:	d8ea      	bhi.n	800a8be <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8e8:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800a8ec:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d078      	beq.n	800a9e6 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	f022 0201 	bic.w	r2, r2, #1
 800a900:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a902:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a904:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a906:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a90a:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a912:	d058      	beq.n	800a9c6 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a914:	0249      	lsls	r1, r1, #9
 800a916:	d502      	bpl.n	800a91e <HAL_SPI_Init+0x9e>
 800a918:	68e1      	ldr	r1, [r4, #12]
 800a91a:	2906      	cmp	r1, #6
 800a91c:	d84c      	bhi.n	800a9b8 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a91e:	6819      	ldr	r1, [r3, #0]
 800a920:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a924:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a926:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a928:	69e3      	ldr	r3, [r4, #28]
 800a92a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a92c:	432b      	orrs	r3, r5
 800a92e:	6821      	ldr	r1, [r4, #0]
 800a930:	4303      	orrs	r3, r0
 800a932:	68e0      	ldr	r0, [r4, #12]
 800a934:	4303      	orrs	r3, r0
 800a936:	4313      	orrs	r3, r2
 800a938:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a93a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a93c:	69a0      	ldr	r0, [r4, #24]
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800a944:	432b      	orrs	r3, r5
 800a946:	430b      	orrs	r3, r1
 800a948:	6921      	ldr	r1, [r4, #16]
 800a94a:	4303      	orrs	r3, r0
 800a94c:	6960      	ldr	r0, [r4, #20]
 800a94e:	430b      	orrs	r3, r1
 800a950:	6a21      	ldr	r1, [r4, #32]
 800a952:	4303      	orrs	r3, r0
 800a954:	6860      	ldr	r0, [r4, #4]
 800a956:	430b      	orrs	r3, r1
 800a958:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a95a:	4303      	orrs	r3, r0
 800a95c:	68a0      	ldr	r0, [r4, #8]
 800a95e:	430b      	orrs	r3, r1
 800a960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a962:	4303      	orrs	r3, r0
 800a964:	430b      	orrs	r3, r1
 800a966:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a968:	430b      	orrs	r3, r1
 800a96a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	b96b      	cbnz	r3, 800a98c <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a970:	6822      	ldr	r2, [r4, #0]
 800a972:	6893      	ldr	r3, [r2, #8]
 800a974:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a97c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	6893      	ldr	r3, [r2, #8]
 800a982:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a98a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	025b      	lsls	r3, r3, #9
 800a99a:	d506      	bpl.n	800a9aa <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a9a0:	68d3      	ldr	r3, [r2, #12]
 800a9a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9aa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800a9ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9ae:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a9b2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a9b8:	6819      	ldr	r1, [r3, #0]
 800a9ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a9bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a9c0:	4301      	orrs	r1, r0
 800a9c2:	6019      	str	r1, [r3, #0]
 800a9c4:	e7af      	b.n	800a926 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a9ca:	d01c      	beq.n	800aa06 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	d1a1      	bne.n	800a914 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a9d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9d2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a9d6:	d1a2      	bne.n	800a91e <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a9d8:	6819      	ldr	r1, [r3, #0]
 800a9da:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a9de:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a9e0:	e9d4 3100 	ldrd	r3, r1, [r4]
 800a9e4:	e796      	b.n	800a914 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800a9e6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a9e8:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a9ec:	f7f8 fba4 	bl	8003138 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	e77f      	b.n	800a8f4 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9f4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a9f6:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9f8:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a9fa:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a9fc:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa00:	e770      	b.n	800a8e4 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800aa02:	2001      	movs	r0, #1
}
 800aa04:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa08:	2900      	cmp	r1, #0
 800aa0a:	d0e5      	beq.n	800a9d8 <HAL_SPI_Init+0x158>
 800aa0c:	e784      	b.n	800a918 <HAL_SPI_Init+0x98>
 800aa0e:	bf00      	nop
 800aa10:	40013000 	.word	0x40013000
 800aa14:	40003800 	.word	0x40003800

0800aa18 <HAL_SPI_Receive_DMA>:
{
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800aa1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	f000 80a9 	beq.w	800ab76 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800aa24:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800aa28:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800aa2e:	b2de      	uxtb	r6, r3
 800aa30:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800aa32:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800aa36:	f040 8093 	bne.w	800ab60 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800aa3a:	2900      	cmp	r1, #0
 800aa3c:	f000 808b 	beq.w	800ab56 <HAL_SPI_Receive_DMA+0x13e>
 800aa40:	fab5 f385 	clz	r3, r5
 800aa44:	095b      	lsrs	r3, r3, #5
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	f000 8085 	beq.w	800ab56 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa4c:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa4e:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa50:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa52:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800aa56:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa5a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800aa5e:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa60:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aa64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800aa68:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa6c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800aa70:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa74:	d07a      	beq.n	800ab6c <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800aa76:	68d3      	ldr	r3, [r2, #12]
 800aa78:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800aa7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa80:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aa82:	68e3      	ldr	r3, [r4, #12]
 800aa84:	2b0f      	cmp	r3, #15
 800aa86:	d861      	bhi.n	800ab4c <HAL_SPI_Receive_DMA+0x134>
 800aa88:	2b07      	cmp	r3, #7
 800aa8a:	f200 8092 	bhi.w	800abb2 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	6893      	ldr	r3, [r2, #8]
 800aa92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa96:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800aa98:	68e3      	ldr	r3, [r4, #12]
 800aa9a:	2b07      	cmp	r3, #7
 800aa9c:	d86e      	bhi.n	800ab7c <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aaa0:	699a      	ldr	r2, [r3, #24]
 800aaa2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aaa6:	d107      	bne.n	800aab8 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800aaa8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800aaac:	b292      	uxth	r2, r2
 800aaae:	3201      	adds	r2, #1
 800aab0:	0852      	lsrs	r2, r2, #1
 800aab2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aabc:	d106      	bne.n	800aacc <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800aabe:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800aac2:	b292      	uxth	r2, r2
 800aac4:	3203      	adds	r2, #3
 800aac6:	0892      	lsrs	r2, r2, #2
 800aac8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aacc:	4a3e      	ldr	r2, [pc, #248]	; (800abc8 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800aace:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800aad2:	4a3e      	ldr	r2, [pc, #248]	; (800abcc <HAL_SPI_Receive_DMA+0x1b4>)
 800aad4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aad6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aad8:	4a3d      	ldr	r2, [pc, #244]	; (800abd0 <HAL_SPI_Receive_DMA+0x1b8>)
 800aada:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aadc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800aade:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aae0:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800aae2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aae6:	6821      	ldr	r1, [r4, #0]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaec:	3130      	adds	r1, #48	; 0x30
 800aaee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aaf0:	f7f9 fec2 	bl	8004878 <HAL_DMA_Start_IT>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d150      	bne.n	800ab9a <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aaf8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800aafa:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aafc:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800aafe:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ab00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ab04:	4b33      	ldr	r3, [pc, #204]	; (800abd4 <HAL_SPI_Receive_DMA+0x1bc>)
 800ab06:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab0a:	bf18      	it	ne
 800ab0c:	432b      	orrne	r3, r5
 800ab0e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	6893      	ldr	r3, [r2, #8]
 800ab14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab18:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	6913      	ldr	r3, [r2, #16]
 800ab1e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800ab22:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ab24:	6822      	ldr	r2, [r4, #0]
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	f043 0301 	orr.w	r3, r3, #1
 800ab2c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab34:	d104      	bne.n	800ab40 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	6813      	ldr	r3, [r2, #0]
 800ab3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab3e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800ab40:	2300      	movs	r3, #0
  return errorcode;
 800ab42:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800ab44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ab48:	4630      	mov	r0, r6
 800ab4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ab4c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab54:	d09b      	beq.n	800aa8e <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800ab56:	2300      	movs	r3, #0
 800ab58:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800ab60:	2300      	movs	r3, #0
    return errorcode;
 800ab62:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800ab64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800ab68:	4630      	mov	r0, r6
 800ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800ab6c:	6813      	ldr	r3, [r2, #0]
 800ab6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	e785      	b.n	800aa82 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800ab76:	2602      	movs	r6, #2
}
 800ab78:	4630      	mov	r0, r6
 800ab7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ab7c:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ab80:	d8a4      	bhi.n	800aacc <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab82:	699a      	ldr	r2, [r3, #24]
 800ab84:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ab88:	d1a0      	bne.n	800aacc <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab8a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ab8e:	b292      	uxth	r2, r2
 800ab90:	3201      	adds	r2, #1
 800ab92:	0852      	lsrs	r2, r2, #1
 800ab94:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ab98:	e798      	b.n	800aacc <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ab9e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800aba0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aba4:	f043 0310 	orr.w	r3, r3, #16
 800aba8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800abac:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800abb0:	e7d4      	b.n	800ab5c <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800abb2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abba:	f43f af68 	beq.w	800aa8e <HAL_SPI_Receive_DMA+0x76>
 800abbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc2:	d1c8      	bne.n	800ab56 <HAL_SPI_Receive_DMA+0x13e>
 800abc4:	e763      	b.n	800aa8e <HAL_SPI_Receive_DMA+0x76>
 800abc6:	bf00      	nop
 800abc8:	0800afa9 	.word	0x0800afa9
 800abcc:	0800af59 	.word	0x0800af59
 800abd0:	0800afc5 	.word	0x0800afc5
 800abd4:	ffff0000 	.word	0xffff0000

0800abd8 <HAL_SPI_TransmitReceive_DMA>:
{
 800abd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abdc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800abde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	f000 809a 	beq.w	800ad1c <HAL_SPI_TransmitReceive_DMA+0x144>
 800abe8:	2301      	movs	r3, #1
 800abea:	4604      	mov	r4, r0
 800abec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800abf0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	b2de      	uxtb	r6, r3
 800abf8:	d158      	bne.n	800acac <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	bf18      	it	ne
 800abfe:	2a00      	cmpne	r2, #0
 800ac00:	d04e      	beq.n	800aca0 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800ac02:	fab1 f381 	clz	r3, r1
 800ac06:	095b      	lsrs	r3, r3, #5
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d049      	beq.n	800aca0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ac0c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ac0e:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac10:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800ac12:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ac14:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800ac18:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac1c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800ac20:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800ac24:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800ac28:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ac2c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800ac30:	68d3      	ldr	r3, [r2, #12]
 800ac32:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ac36:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac38:	6802      	ldr	r2, [r0, #0]
 800ac3a:	6893      	ldr	r3, [r2, #8]
 800ac3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ac40:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ac42:	68c3      	ldr	r3, [r0, #12]
 800ac44:	2b0f      	cmp	r3, #15
 800ac46:	d938      	bls.n	800acba <HAL_SPI_TransmitReceive_DMA+0xe2>
 800ac48:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ac50:	d126      	bne.n	800aca0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ac52:	4a6c      	ldr	r2, [pc, #432]	; (800ae04 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800ac54:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ac58:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800ae10 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ac5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ac5e:	4a6a      	ldr	r2, [pc, #424]	; (800ae08 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800ac60:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ac64:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac66:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ac6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac6c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800ac70:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ac74:	6821      	ldr	r1, [r4, #0]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac7a:	3130      	adds	r1, #48	; 0x30
 800ac7c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ac7e:	f7f9 fdfb 	bl	8004878 <HAL_DMA_Start_IT>
 800ac82:	4607      	mov	r7, r0
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d04d      	beq.n	800ad24 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac88:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ac8c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800ac8e:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac92:	f043 0310 	orr.w	r3, r3, #16
 800ac96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ac9a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800ac9e:	e002      	b.n	800aca6 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800aca0:	2300      	movs	r3, #0
 800aca2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800aca6:	4630      	mov	r0, r6
 800aca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800acac:	2300      	movs	r3, #0
    return errorcode;
 800acae:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800acb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800acb4:	4630      	mov	r0, r6
 800acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800acba:	2b07      	cmp	r3, #7
 800acbc:	d87f      	bhi.n	800adbe <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800acbe:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800acc0:	6993      	ldr	r3, [r2, #24]
 800acc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc6:	d107      	bne.n	800acd8 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800acc8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800accc:	b29b      	uxth	r3, r3
 800acce:	3301      	adds	r3, #1
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800acd6:	6993      	ldr	r3, [r2, #24]
 800acd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acdc:	d106      	bne.n	800acec <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800acde:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3303      	adds	r3, #3
 800ace6:	089b      	lsrs	r3, r3, #2
 800ace8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800acec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800acee:	699a      	ldr	r2, [r3, #24]
 800acf0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800acf4:	d107      	bne.n	800ad06 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800acf6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800acfa:	b292      	uxth	r2, r2
 800acfc:	3201      	adds	r2, #1
 800acfe:	0852      	lsrs	r2, r2, #1
 800ad00:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ad0a:	d1a2      	bne.n	800ac52 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ad0c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ad10:	b292      	uxth	r2, r2
 800ad12:	3203      	adds	r2, #3
 800ad14:	0892      	lsrs	r2, r2, #2
 800ad16:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ad1a:	e79a      	b.n	800ac52 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800ad1c:	2602      	movs	r6, #2
}
 800ad1e:	4630      	mov	r0, r6
 800ad20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	6893      	ldr	r3, [r2, #8]
 800ad28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad2c:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ad2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad30:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ad32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad34:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ad36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad38:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ad3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad3c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800ad40:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ad44:	6822      	ldr	r2, [r4, #0]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ad4a:	3220      	adds	r2, #32
 800ad4c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ad4e:	f7f9 fd93 	bl	8004878 <HAL_DMA_Start_IT>
 800ad52:	bb40      	cbnz	r0, 800ada6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ad54:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ad56:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ad58:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ad5a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ad5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ad60:	4b2a      	ldr	r3, [pc, #168]	; (800ae0c <HAL_SPI_TransmitReceive_DMA+0x234>)
 800ad62:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad66:	bf18      	it	ne
 800ad68:	432b      	orrne	r3, r5
 800ad6a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ad6c:	6822      	ldr	r2, [r4, #0]
 800ad6e:	6893      	ldr	r3, [r2, #8]
 800ad70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad74:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	6913      	ldr	r3, [r2, #16]
 800ad7a:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800ad7e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	6813      	ldr	r3, [r2, #0]
 800ad84:	f043 0301 	orr.w	r3, r3, #1
 800ad88:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad90:	d104      	bne.n	800ad9c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	6813      	ldr	r3, [r2, #0]
 800ad96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad9a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800ad9c:	2300      	movs	r3, #0
  return errorcode;
 800ad9e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800ada0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ada4:	e77f      	b.n	800aca6 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ada6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800adaa:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800adac:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800adb0:	f043 0310 	orr.w	r3, r3, #16
 800adb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800adb8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800adbc:	e773      	b.n	800aca6 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800adbe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800adc0:	699a      	ldr	r2, [r3, #24]
 800adc2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800adc6:	d003      	beq.n	800add0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800adc8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800adcc:	f47f af68 	bne.w	800aca0 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800add0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800add2:	6989      	ldr	r1, [r1, #24]
 800add4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800add8:	d107      	bne.n	800adea <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800adda:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800adde:	b292      	uxth	r2, r2
 800ade0:	3201      	adds	r2, #1
 800ade2:	0852      	lsrs	r2, r2, #1
 800ade4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ade8:	699a      	ldr	r2, [r3, #24]
 800adea:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800adee:	f47f af30 	bne.w	800ac52 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800adf2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800adf6:	b292      	uxth	r2, r2
 800adf8:	3201      	adds	r2, #1
 800adfa:	0852      	lsrs	r2, r2, #1
 800adfc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ae00:	e727      	b.n	800ac52 <HAL_SPI_TransmitReceive_DMA+0x7a>
 800ae02:	bf00      	nop
 800ae04:	0800afb5 	.word	0x0800afb5
 800ae08:	0800af81 	.word	0x0800af81
 800ae0c:	ffff0000 	.word	0xffff0000
 800ae10:	0800afc5 	.word	0x0800afc5

0800ae14 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800ae14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	f000 8095 	beq.w	800af48 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae1e:	4b4b      	ldr	r3, [pc, #300]	; (800af4c <HAL_SPI_Abort+0x138>)
 800ae20:	2164      	movs	r1, #100	; 0x64
 800ae22:	4a4b      	ldr	r2, [pc, #300]	; (800af50 <HAL_SPI_Abort+0x13c>)
{
 800ae24:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800ae2a:	2001      	movs	r0, #1
{
 800ae2c:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae2e:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800ae32:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 800ae34:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800ae38:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae3a:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
 800ae3c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae40:	fb01 f303 	mul.w	r3, r1, r3
 800ae44:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d53e      	bpl.n	800aeca <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ae4c:	6913      	ldr	r3, [r2, #16]
 800ae4e:	f023 0308 	bic.w	r3, r3, #8
 800ae52:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	e002      	b.n	800ae5e <HAL_SPI_Abort+0x4a>
 800ae58:	6913      	ldr	r3, [r2, #16]
 800ae5a:	0719      	lsls	r1, r3, #28
 800ae5c:	d50b      	bpl.n	800ae76 <HAL_SPI_Abort+0x62>
      count--;
 800ae5e:	9b01      	ldr	r3, [sp, #4]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1f6      	bne.n	800ae58 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae6a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800ae76:	6813      	ldr	r3, [r2, #0]
 800ae78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae7c:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800ae7e:	6822      	ldr	r2, [r4, #0]
 800ae80:	e002      	b.n	800ae88 <HAL_SPI_Abort+0x74>
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	059b      	lsls	r3, r3, #22
 800ae86:	d50b      	bpl.n	800aea0 <HAL_SPI_Abort+0x8c>
      count--;
 800ae88:	9b01      	ldr	r3, [sp, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1f6      	bne.n	800ae82 <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aea0:	6993      	ldr	r3, [r2, #24]
 800aea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aea6:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	e002      	b.n	800aeb2 <HAL_SPI_Abort+0x9e>
 800aeac:	6953      	ldr	r3, [r2, #20]
 800aeae:	0518      	lsls	r0, r3, #20
 800aeb0:	d50b      	bpl.n	800aeca <HAL_SPI_Abort+0xb6>
      count--;
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aeb8:	9b01      	ldr	r3, [sp, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f6      	bne.n	800aeac <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aebe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800aeca:	6893      	ldr	r3, [r2, #8]
 800aecc:	0419      	lsls	r1, r3, #16
 800aece:	d508      	bpl.n	800aee2 <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
 800aed0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aed2:	b133      	cbz	r3, 800aee2 <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
 800aed4:	2200      	movs	r2, #0
 800aed6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800aed8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800aeda:	f7f9 ff99 	bl	8004e10 <HAL_DMA_Abort>
 800aede:	bb00      	cbnz	r0, 800af22 <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	6893      	ldr	r3, [r2, #8]
 800aee4:	045b      	lsls	r3, r3, #17
 800aee6:	d507      	bpl.n	800aef8 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
 800aee8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aeea:	b12b      	cbz	r3, 800aef8 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
 800aeec:	2200      	movs	r2, #0
 800aeee:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800aef0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aef2:	f7f9 ff8d 	bl	8004e10 <HAL_DMA_Abort>
 800aef6:	b9f0      	cbnz	r0, 800af36 <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
 800aef8:	4620      	mov	r0, r4
 800aefa:	f7ff fc23 	bl	800a744 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800aefe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af02:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800af06:	d10a      	bne.n	800af1e <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
 800af08:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af0a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800af0e:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800af10:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800af12:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800af16:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800af1a:	b002      	add	sp, #8
 800af1c:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
 800af1e:	2001      	movs	r0, #1
 800af20:	e7f5      	b.n	800af0e <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800af22:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800af24:	f7fa fef8 	bl	8005d18 <HAL_DMA_GetError>
 800af28:	2820      	cmp	r0, #32
 800af2a:	d1d9      	bne.n	800aee0 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800af2c:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800af2e:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800af30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800af34:	e7d5      	b.n	800aee2 <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800af36:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800af38:	f7fa feee 	bl	8005d18 <HAL_DMA_GetError>
 800af3c:	2820      	cmp	r0, #32
 800af3e:	d1db      	bne.n	800aef8 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800af40:	2340      	movs	r3, #64	; 0x40
 800af42:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800af46:	e7d7      	b.n	800aef8 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
 800af48:	2002      	movs	r0, #2
}
 800af4a:	4770      	bx	lr
 800af4c:	20000af0 	.word	0x20000af0
 800af50:	057619f1 	.word	0x057619f1

0800af54 <HAL_SPI_TxCpltCallback>:
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop

0800af58 <SPI_DMAReceiveCplt>:
{
 800af58:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800af5c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800af60:	2b07      	cmp	r3, #7
 800af62:	d009      	beq.n	800af78 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800af64:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af6c:	d005      	beq.n	800af7a <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800af6e:	6802      	ldr	r2, [r0, #0]
 800af70:	6913      	ldr	r3, [r2, #16]
 800af72:	f043 0308 	orr.w	r3, r3, #8
 800af76:	6113      	str	r3, [r2, #16]
}
 800af78:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800af7a:	f010 f891 	bl	801b0a0 <__HAL_SPI_RxCpltCallback_veneer>
}
 800af7e:	bd08      	pop	{r3, pc}

0800af80 <SPI_DMATransmitReceiveCplt>:
{
 800af80:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af82:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800af84:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800af88:	2b07      	cmp	r3, #7
 800af8a:	d009      	beq.n	800afa0 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800af8c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af94:	d005      	beq.n	800afa2 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800af96:	6802      	ldr	r2, [r0, #0]
 800af98:	6913      	ldr	r3, [r2, #16]
 800af9a:	f043 0308 	orr.w	r3, r3, #8
 800af9e:	6113      	str	r3, [r2, #16]
}
 800afa0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800afa2:	f010 f891 	bl	801b0c8 <__HAL_SPI_TxRxCpltCallback_veneer>
}
 800afa6:	bd08      	pop	{r3, pc}

0800afa8 <SPI_DMAHalfReceiveCplt>:
{
 800afa8:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800afaa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800afac:	f010 f880 	bl	801b0b0 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800afb0:	bd08      	pop	{r3, pc}
 800afb2:	bf00      	nop

0800afb4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800afb4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800afb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800afb8:	f010 f876 	bl	801b0a8 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800afbc:	bd08      	pop	{r3, pc}
 800afbe:	bf00      	nop

0800afc0 <HAL_SPI_ErrorCallback>:
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop

0800afc4 <SPI_DMAError>:
{
 800afc4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afc6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800afc8:	f7fa fea6 	bl	8005d18 <HAL_DMA_GetError>
 800afcc:	2802      	cmp	r0, #2
 800afce:	d100      	bne.n	800afd2 <SPI_DMAError+0xe>
}
 800afd0:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800afd6:	6991      	ldr	r1, [r2, #24]
 800afd8:	f041 0108 	orr.w	r1, r1, #8
 800afdc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afde:	6821      	ldr	r1, [r4, #0]
 800afe0:	698a      	ldr	r2, [r1, #24]
 800afe2:	f042 0210 	orr.w	r2, r2, #16
 800afe6:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800afe8:	6821      	ldr	r1, [r4, #0]
 800afea:	680a      	ldr	r2, [r1, #0]
 800afec:	f022 0201 	bic.w	r2, r2, #1
 800aff0:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aff2:	6821      	ldr	r1, [r4, #0]
 800aff4:	4a2c      	ldr	r2, [pc, #176]	; (800b0a8 <SPI_DMAError+0xe4>)
 800aff6:	6908      	ldr	r0, [r1, #16]
 800aff8:	4002      	ands	r2, r0
 800affa:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800affc:	6821      	ldr	r1, [r4, #0]
 800affe:	688a      	ldr	r2, [r1, #8]
 800b000:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b004:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b006:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b00a:	2a04      	cmp	r2, #4
 800b00c:	d001      	beq.n	800b012 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b00e:	0698      	lsls	r0, r3, #26
 800b010:	d43d      	bmi.n	800b08e <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b012:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b016:	2a03      	cmp	r2, #3
 800b018:	d001      	beq.n	800b01e <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b01a:	0659      	lsls	r1, r3, #25
 800b01c:	d42b      	bmi.n	800b076 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b01e:	059a      	lsls	r2, r3, #22
 800b020:	d50a      	bpl.n	800b038 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b022:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b026:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b030:	698a      	ldr	r2, [r1, #24]
 800b032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b036:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b038:	05db      	lsls	r3, r3, #23
 800b03a:	d50a      	bpl.n	800b052 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b03c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b040:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b042:	f043 0308 	orr.w	r3, r3, #8
 800b046:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b04a:	6993      	ldr	r3, [r2, #24]
 800b04c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b050:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800b052:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800b054:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800b056:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800b058:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b05c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b060:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b064:	f043 0310 	orr.w	r3, r3, #16
 800b068:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b06c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b070:	f7ff ffa6 	bl	800afc0 <HAL_SPI_ErrorCallback>
}
 800b074:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b076:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b07a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b07c:	f042 0204 	orr.w	r2, r2, #4
 800b080:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b084:	698a      	ldr	r2, [r1, #24]
 800b086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b08a:	618a      	str	r2, [r1, #24]
 800b08c:	e7c7      	b.n	800b01e <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b08e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b092:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b098:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b09c:	698a      	ldr	r2, [r1, #24]
 800b09e:	f042 0220 	orr.w	r2, r2, #32
 800b0a2:	618a      	str	r2, [r1, #24]
 800b0a4:	e7b5      	b.n	800b012 <SPI_DMAError+0x4e>
 800b0a6:	bf00      	nop
 800b0a8:	fffffc90 	.word	0xfffffc90

0800b0ac <SPI_DMAAbortOnError>:
{
 800b0ac:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800b0ae:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b0b8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b0bc:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b0c0:	f7ff ff7e 	bl	800afc0 <HAL_SPI_ErrorCallback>
}
 800b0c4:	bd08      	pop	{r3, pc}
 800b0c6:	bf00      	nop

0800b0c8 <HAL_SPI_SuspendCallback>:
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop

0800b0cc <HAL_SPI_IRQHandler>:
{
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b0d0:	6802      	ldr	r2, [r0, #0]
{
 800b0d2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b0d4:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b0d6:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b0d8:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800b0da:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800b0de:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b0e2:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800b0e4:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b0e6:	d502      	bpl.n	800b0ee <HAL_SPI_IRQHandler+0x22>
 800b0e8:	0709      	lsls	r1, r1, #28
 800b0ea:	f100 80e1 	bmi.w	800b2b0 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b0ee:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d044      	beq.n	800b180 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b0f6:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d04a      	beq.n	800b194 <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b0fe:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800b102:	2b02      	cmp	r3, #2
 800b104:	f000 80ea 	beq.w	800b2dc <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b108:	072b      	lsls	r3, r5, #28
 800b10a:	d563      	bpl.n	800b1d4 <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b10c:	6993      	ldr	r3, [r2, #24]
 800b10e:	f043 0308 	orr.w	r3, r3, #8
 800b112:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b114:	6821      	ldr	r1, [r4, #0]
 800b116:	698b      	ldr	r3, [r1, #24]
 800b118:	f043 0310 	orr.w	r3, r3, #16
 800b11c:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b11e:	6821      	ldr	r1, [r4, #0]
 800b120:	698b      	ldr	r3, [r1, #24]
 800b122:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b126:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b128:	6821      	ldr	r1, [r4, #0]
 800b12a:	690b      	ldr	r3, [r1, #16]
 800b12c:	f023 0308 	bic.w	r3, r3, #8
 800b130:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b13a:	d135      	bne.n	800b1a8 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 800b13c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d030      	beq.n	800b1a8 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b146:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b148:	e00f      	b.n	800b16a <HAL_SPI_IRQHandler+0x9e>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14e:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b150:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b152:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800b154:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b158:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b162:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b166:	b29b      	uxth	r3, r3
 800b168:	b1f3      	cbz	r3, 800b1a8 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	2b0f      	cmp	r3, #15
 800b16e:	d8ec      	bhi.n	800b14a <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b170:	2b07      	cmp	r3, #7
 800b172:	f240 80ac 	bls.w	800b2ce <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b176:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800b178:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b17a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b17c:	3102      	adds	r1, #2
 800b17e:	e7e9      	b.n	800b154 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b180:	4620      	mov	r0, r4
 800b182:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b184:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b186:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b188:	4620      	mov	r0, r4
 800b18a:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b18c:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b190:	2b01      	cmp	r3, #1
 800b192:	d102      	bne.n	800b19a <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 800b194:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b196:	4620      	mov	r0, r4
 800b198:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b19a:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800b19e:	2d02      	cmp	r5, #2
 800b1a0:	f000 809c 	beq.w	800b2dc <HAL_SPI_IRQHandler+0x210>
}
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7ff fb05 	bl	800a7b8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f040 8085 	bne.w	800b2c8 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b1be:	2e05      	cmp	r6, #5
 800b1c0:	f000 8091 	beq.w	800b2e6 <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b1c4:	2e04      	cmp	r6, #4
 800b1c6:	f000 8091 	beq.w	800b2ec <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b1ca:	2e03      	cmp	r6, #3
 800b1cc:	d1ea      	bne.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 800b1ce:	f7ff fec1 	bl	800af54 <HAL_SPI_TxCpltCallback>
 800b1d2:	e7e7      	b.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b1d4:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b1d8:	d0e4      	beq.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b1da:	0668      	lsls	r0, r5, #25
 800b1dc:	d509      	bpl.n	800b1f2 <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b1de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1e2:	f043 0304 	orr.w	r3, r3, #4
 800b1e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1ea:	6993      	ldr	r3, [r2, #24]
 800b1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b1f2:	05a9      	lsls	r1, r5, #22
 800b1f4:	d50a      	bpl.n	800b20c <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1fa:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1fc:	f043 0301 	orr.w	r3, r3, #1
 800b200:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b204:	6993      	ldr	r3, [r2, #24]
 800b206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b20a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b20c:	05ea      	lsls	r2, r5, #23
 800b20e:	d50a      	bpl.n	800b226 <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b210:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b214:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b216:	f043 0308 	orr.w	r3, r3, #8
 800b21a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b21e:	6993      	ldr	r3, [r2, #24]
 800b220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b224:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b226:	06ab      	lsls	r3, r5, #26
 800b228:	d50a      	bpl.n	800b240 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b22a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b22e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b234:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b238:	6993      	ldr	r3, [r2, #24]
 800b23a:	f043 0320 	orr.w	r3, r3, #32
 800b23e:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b240:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0ad      	beq.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 800b248:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b24a:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b24e:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b250:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	4b25      	ldr	r3, [pc, #148]	; (800b2f4 <HAL_SPI_IRQHandler+0x228>)
 800b25e:	6911      	ldr	r1, [r2, #16]
 800b260:	ea03 0301 	and.w	r3, r3, r1
 800b264:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b266:	d12b      	bne.n	800b2c0 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	6893      	ldr	r3, [r2, #8]
 800b26c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b270:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b272:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b274:	b15b      	cbz	r3, 800b28e <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b276:	4a20      	ldr	r2, [pc, #128]	; (800b2f8 <HAL_SPI_IRQHandler+0x22c>)
 800b278:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b27a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b27c:	f7f9 ffde 	bl	800523c <HAL_DMA_Abort_IT>
 800b280:	b128      	cbz	r0, 800b28e <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b282:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b28a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b28e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b290:	2b00      	cmp	r3, #0
 800b292:	d087      	beq.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b294:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <HAL_SPI_IRQHandler+0x22c>)
 800b296:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b298:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b29a:	f7f9 ffcf 	bl	800523c <HAL_DMA_Abort_IT>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d080      	beq.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b2ae:	e779      	b.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2b0:	6993      	ldr	r3, [r2, #24]
 800b2b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2b6:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b2b8:	f7ff ff06 	bl	800b0c8 <HAL_SPI_SuspendCallback>
}
 800b2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800b2c0:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800b2c2:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800b2c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b2c8:	f7ff fe7a 	bl	800afc0 <HAL_SPI_ErrorCallback>
 800b2cc:	e76a      	b.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2d4:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b2d8:	3101      	adds	r1, #1
 800b2da:	e73b      	b.n	800b154 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b2dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b2de:	4620      	mov	r0, r4
}
 800b2e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800b2e4:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800b2e6:	f00f feef 	bl	801b0c8 <__HAL_SPI_TxRxCpltCallback_veneer>
 800b2ea:	e75b      	b.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 800b2ec:	f00f fed8 	bl	801b0a0 <__HAL_SPI_RxCpltCallback_veneer>
 800b2f0:	e758      	b.n	800b1a4 <HAL_SPI_IRQHandler+0xd8>
 800b2f2:	bf00      	nop
 800b2f4:	fffffc94 	.word	0xfffffc94
 800b2f8:	0800b0ad 	.word	0x0800b0ad

0800b2fc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b2fc:	680b      	ldr	r3, [r1, #0]
{
 800b2fe:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b300:	b9d3      	cbnz	r3, 800b338 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b302:	6804      	ldr	r4, [r0, #0]
 800b304:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b308:	684a      	ldr	r2, [r1, #4]
 800b30a:	4023      	ands	r3, r4
 800b30c:	4313      	orrs	r3, r2
 800b30e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b312:	4323      	orrs	r3, r4
 800b314:	4313      	orrs	r3, r2
 800b316:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800b31a:	4323      	orrs	r3, r4
 800b31c:	4313      	orrs	r3, r2
 800b31e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800b322:	4323      	orrs	r3, r4
 800b324:	4313      	orrs	r3, r2
 800b326:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800b32a:	4323      	orrs	r3, r4
 800b32c:	4313      	orrs	r3, r2
 800b32e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b330:	2000      	movs	r0, #0
 800b332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b336:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b338:	6802      	ldr	r2, [r0, #0]
 800b33a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b33e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b342:	4322      	orrs	r2, r4
 800b344:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b346:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b34a:	4322      	orrs	r2, r4
 800b34c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b34e:	6842      	ldr	r2, [r0, #4]
 800b350:	4013      	ands	r3, r2
 800b352:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800b356:	4323      	orrs	r3, r4
 800b358:	4313      	orrs	r3, r2
 800b35a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800b35e:	4323      	orrs	r3, r4
 800b360:	4313      	orrs	r3, r2
 800b362:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800b366:	4323      	orrs	r3, r4
 800b368:	4313      	orrs	r3, r2
 800b36a:	6043      	str	r3, [r0, #4]
}
 800b36c:	2000      	movs	r0, #0
 800b36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	ffff8000 	.word	0xffff8000

0800b378 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b378:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b37a:	bb0a      	cbnz	r2, 800b3c0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b37c:	6883      	ldr	r3, [r0, #8]
 800b37e:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b386:	3c01      	subs	r4, #1
 800b388:	3a01      	subs	r2, #1
 800b38a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b38e:	4313      	orrs	r3, r2
 800b390:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b394:	3c01      	subs	r4, #1
 800b396:	3a01      	subs	r2, #1
 800b398:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b39c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800b3a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b3a4:	698a      	ldr	r2, [r1, #24]
 800b3a6:	3d01      	subs	r5, #1
 800b3a8:	1e61      	subs	r1, r4, #1
 800b3aa:	3a01      	subs	r2, #1
 800b3ac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b3b0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800b3b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b3b8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	bc30      	pop	{r4, r5}
 800b3be:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b3c0:	6885      	ldr	r5, [r0, #8]
 800b3c2:	68ca      	ldr	r2, [r1, #12]
 800b3c4:	4b12      	ldr	r3, [pc, #72]	; (800b410 <FMC_SDRAM_Timing_Init+0x98>)
 800b3c6:	1e54      	subs	r4, r2, #1
 800b3c8:	694a      	ldr	r2, [r1, #20]
 800b3ca:	402b      	ands	r3, r5
 800b3cc:	3a01      	subs	r2, #1
 800b3ce:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800b3d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b3d6:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b3d8:	68c3      	ldr	r3, [r0, #12]
 800b3da:	688d      	ldr	r5, [r1, #8]
 800b3dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3e0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800b3e4:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b3e8:	3c01      	subs	r4, #1
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b3f0:	690c      	ldr	r4, [r1, #16]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	698a      	ldr	r2, [r1, #24]
 800b3f6:	1e61      	subs	r1, r4, #1
 800b3f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b3fc:	3a01      	subs	r2, #1
 800b3fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b402:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b406:	60c3      	str	r3, [r0, #12]
}
 800b408:	2000      	movs	r0, #0
 800b40a:	bc30      	pop	{r4, r5}
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	ff0f0fff 	.word	0xff0f0fff

0800b414 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b414:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b416:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800b41a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b41c:	6900      	ldr	r0, [r0, #16]
 800b41e:	4323      	orrs	r3, r4
 800b420:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800b424:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b428:	4c05      	ldr	r4, [pc, #20]	; (800b440 <FMC_SDRAM_SendCommand+0x2c>)
 800b42a:	3901      	subs	r1, #1
 800b42c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b42e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b430:	4323      	orrs	r3, r4
 800b432:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800b436:	6113      	str	r3, [r2, #16]
}
 800b438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	ffc00000 	.word	0xffc00000

0800b444 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b444:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800b448:	2000      	movs	r0, #0
{
 800b44a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b44c:	6954      	ldr	r4, [r2, #20]
 800b44e:	4023      	ands	r3, r4
 800b450:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b454:	6151      	str	r1, [r2, #20]
}
 800b456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	ffffc001 	.word	0xffffc001

0800b460 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b460:	b084      	sub	sp, #16
 800b462:	b410      	push	{r4}
 800b464:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b468:	4614      	mov	r4, r2
{
 800b46a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b46e:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800b470:	9904      	ldr	r1, [sp, #16]
{
 800b472:	4602      	mov	r2, r0
             Init.BusWide             | \
 800b474:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800b476:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b478:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800b47a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800b47c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800b47e:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800b480:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800b482:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b484:	4903      	ldr	r1, [pc, #12]	; (800b494 <SDMMC_Init+0x34>)
 800b486:	4021      	ands	r1, r4
 800b488:	430b      	orrs	r3, r1
 800b48a:	6053      	str	r3, [r2, #4]
}
 800b48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b490:	b004      	add	sp, #16
 800b492:	4770      	bx	lr
 800b494:	ffc02c00 	.word	0xffc02c00

0800b498 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b498:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop

0800b4a0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b4a0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b4a2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b4a4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b4a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b4aa:	4770      	bx	lr

0800b4ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b4ac:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800b4ae:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	f042 0203 	orr.w	r2, r2, #3
 800b4b6:	601a      	str	r2, [r3, #0]
}
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop

0800b4bc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4bc:	6800      	ldr	r0, [r0, #0]
}
 800b4be:	f000 0003 	and.w	r0, r0, #3
 800b4c2:	4770      	bx	lr

0800b4c4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b4c4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800b4c6:	5840      	ldr	r0, [r0, r1]
}
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop

0800b4cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b4cc:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b4ce:	680b      	ldr	r3, [r1, #0]
{
 800b4d0:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b4d2:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b4d4:	684b      	ldr	r3, [r1, #4]
 800b4d6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800b4d8:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4dc:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800b4e0:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800b4e2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4e4:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800b4e8:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800b4ea:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800b4ec:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4ee:	430b      	orrs	r3, r1
 800b4f0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b4f2:	bc30      	pop	{r4, r5}
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop

0800b4f8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b4f8:	4a50      	ldr	r2, [pc, #320]	; (800b63c <SDMMC_CmdBlockLength+0x144>)
{
 800b4fa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b4fc:	4b50      	ldr	r3, [pc, #320]	; (800b640 <SDMMC_CmdBlockLength+0x148>)
 800b4fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b500:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b504:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b508:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b50c:	484d      	ldr	r0, [pc, #308]	; (800b644 <SDMMC_CmdBlockLength+0x14c>)
 800b50e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b512:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b514:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b516:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b51a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b51c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b520:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800b524:	1e53      	subs	r3, r2, #1
 800b526:	b14a      	cbz	r2, 800b53c <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b528:	4947      	ldr	r1, [pc, #284]	; (800b648 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 800b52a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b52e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b530:	420a      	tst	r2, r1
 800b532:	d001      	beq.n	800b538 <SDMMC_CmdBlockLength+0x40>
 800b534:	0492      	lsls	r2, r2, #18
 800b536:	d504      	bpl.n	800b542 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b538:	1c58      	adds	r0, r3, #1
 800b53a:	d1f6      	bne.n	800b52a <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b53c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b540:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b542:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b546:	0758      	lsls	r0, r3, #29
 800b548:	d445      	bmi.n	800b5d6 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b54a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b54e:	f010 0001 	ands.w	r0, r0, #1
 800b552:	d137      	bne.n	800b5c4 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b554:	4b3d      	ldr	r3, [pc, #244]	; (800b64c <SDMMC_CmdBlockLength+0x154>)
 800b556:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b55a:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b10      	cmp	r3, #16
 800b562:	d136      	bne.n	800b5d2 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 800b564:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b568:	4839      	ldr	r0, [pc, #228]	; (800b650 <SDMMC_CmdBlockLength+0x158>)
 800b56a:	4018      	ands	r0, r3
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d02f      	beq.n	800b5d0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b570:	2b00      	cmp	r3, #0
 800b572:	db35      	blt.n	800b5e0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b574:	0059      	lsls	r1, r3, #1
 800b576:	d436      	bmi.n	800b5e6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b578:	009a      	lsls	r2, r3, #2
 800b57a:	d436      	bmi.n	800b5ea <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b57c:	00d9      	lsls	r1, r3, #3
 800b57e:	d436      	bmi.n	800b5ee <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b580:	011a      	lsls	r2, r3, #4
 800b582:	d437      	bmi.n	800b5f4 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b584:	0159      	lsls	r1, r3, #5
 800b586:	d438      	bmi.n	800b5fa <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b588:	01da      	lsls	r2, r3, #7
 800b58a:	d439      	bmi.n	800b600 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b58c:	0219      	lsls	r1, r3, #8
 800b58e:	d43a      	bmi.n	800b606 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b590:	025a      	lsls	r2, r3, #9
 800b592:	d43b      	bmi.n	800b60c <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b594:	0299      	lsls	r1, r3, #10
 800b596:	d445      	bmi.n	800b624 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b598:	02da      	lsls	r2, r3, #11
 800b59a:	d440      	bmi.n	800b61e <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b59c:	0359      	lsls	r1, r3, #13
 800b59e:	d43b      	bmi.n	800b618 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b5a0:	039a      	lsls	r2, r3, #14
 800b5a2:	d436      	bmi.n	800b612 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b5a4:	03d9      	lsls	r1, r3, #15
 800b5a6:	d446      	bmi.n	800b636 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b5a8:	041a      	lsls	r2, r3, #16
 800b5aa:	d441      	bmi.n	800b630 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b5ac:	0459      	lsls	r1, r3, #17
 800b5ae:	d43c      	bmi.n	800b62a <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b5b0:	049a      	lsls	r2, r3, #18
 800b5b2:	d40b      	bmi.n	800b5cc <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b5b4:	f013 0f08 	tst.w	r3, #8
 800b5b8:	bf14      	ite	ne
 800b5ba:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b5be:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b5c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ca:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b5cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b5d0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5d6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5d8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5de:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5e0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b5e4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5e6:	2040      	movs	r0, #64	; 0x40
 800b5e8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5ea:	2080      	movs	r0, #128	; 0x80
 800b5ec:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b5f2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b5f8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b5fe:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b600:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b604:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b606:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b60a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b60c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b610:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b612:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b616:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b618:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b61c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b61e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b622:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b624:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b628:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b62a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b62e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b630:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b634:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b636:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b63a:	4770      	bx	lr
 800b63c:	20000af0 	.word	0x20000af0
 800b640:	10624dd3 	.word	0x10624dd3
 800b644:	fffee0c0 	.word	0xfffee0c0
 800b648:	00200045 	.word	0x00200045
 800b64c:	002000c5 	.word	0x002000c5
 800b650:	fdffe008 	.word	0xfdffe008

0800b654 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b654:	4a50      	ldr	r2, [pc, #320]	; (800b798 <SDMMC_CmdReadSingleBlock+0x144>)
{
 800b656:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b658:	4b50      	ldr	r3, [pc, #320]	; (800b79c <SDMMC_CmdReadSingleBlock+0x148>)
 800b65a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b65c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b660:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b664:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b668:	484d      	ldr	r0, [pc, #308]	; (800b7a0 <SDMMC_CmdReadSingleBlock+0x14c>)
 800b66a:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b66e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b670:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b672:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b676:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b678:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b67c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b680:	1e53      	subs	r3, r2, #1
 800b682:	b14a      	cbz	r2, 800b698 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b684:	4947      	ldr	r1, [pc, #284]	; (800b7a4 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b686:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b68a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b68c:	420a      	tst	r2, r1
 800b68e:	d001      	beq.n	800b694 <SDMMC_CmdReadSingleBlock+0x40>
 800b690:	0492      	lsls	r2, r2, #18
 800b692:	d504      	bpl.n	800b69e <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800b694:	1c58      	adds	r0, r3, #1
 800b696:	d1f6      	bne.n	800b686 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b698:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b69c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b69e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b6a2:	0758      	lsls	r0, r3, #29
 800b6a4:	d445      	bmi.n	800b732 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6a6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b6aa:	f010 0001 	ands.w	r0, r0, #1
 800b6ae:	d137      	bne.n	800b720 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6b0:	4b3d      	ldr	r3, [pc, #244]	; (800b7a8 <SDMMC_CmdReadSingleBlock+0x154>)
 800b6b2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b6b6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b11      	cmp	r3, #17
 800b6be:	d136      	bne.n	800b72e <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b6c0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6c4:	4839      	ldr	r0, [pc, #228]	; (800b7ac <SDMMC_CmdReadSingleBlock+0x158>)
 800b6c6:	4018      	ands	r0, r3
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d02f      	beq.n	800b72c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	db35      	blt.n	800b73c <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6d0:	0059      	lsls	r1, r3, #1
 800b6d2:	d436      	bmi.n	800b742 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6d4:	009a      	lsls	r2, r3, #2
 800b6d6:	d436      	bmi.n	800b746 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6d8:	00d9      	lsls	r1, r3, #3
 800b6da:	d436      	bmi.n	800b74a <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6dc:	011a      	lsls	r2, r3, #4
 800b6de:	d437      	bmi.n	800b750 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b6e0:	0159      	lsls	r1, r3, #5
 800b6e2:	d438      	bmi.n	800b756 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b6e4:	01da      	lsls	r2, r3, #7
 800b6e6:	d439      	bmi.n	800b75c <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b6e8:	0219      	lsls	r1, r3, #8
 800b6ea:	d43a      	bmi.n	800b762 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b6ec:	025a      	lsls	r2, r3, #9
 800b6ee:	d43b      	bmi.n	800b768 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b6f0:	0299      	lsls	r1, r3, #10
 800b6f2:	d445      	bmi.n	800b780 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b6f4:	02da      	lsls	r2, r3, #11
 800b6f6:	d440      	bmi.n	800b77a <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6f8:	0359      	lsls	r1, r3, #13
 800b6fa:	d43b      	bmi.n	800b774 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6fc:	039a      	lsls	r2, r3, #14
 800b6fe:	d436      	bmi.n	800b76e <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b700:	03d9      	lsls	r1, r3, #15
 800b702:	d446      	bmi.n	800b792 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b704:	041a      	lsls	r2, r3, #16
 800b706:	d441      	bmi.n	800b78c <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b708:	0459      	lsls	r1, r3, #17
 800b70a:	d43c      	bmi.n	800b786 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b70c:	049a      	lsls	r2, r3, #18
 800b70e:	d40b      	bmi.n	800b728 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b710:	f013 0f08 	tst.w	r3, #8
 800b714:	bf14      	ite	ne
 800b716:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b71a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b71e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b720:	2301      	movs	r3, #1
 800b722:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b726:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b728:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b72c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b72e:	2001      	movs	r0, #1
 800b730:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b732:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b734:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b736:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b73a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b73c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b740:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b742:	2040      	movs	r0, #64	; 0x40
 800b744:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b746:	2080      	movs	r0, #128	; 0x80
 800b748:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b74a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b74e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b750:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b754:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b756:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b75a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b75c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b760:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b766:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b768:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b76c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b76e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b772:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b774:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b778:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b77a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b77e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b784:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b786:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b78a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b78c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b790:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b792:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b796:	4770      	bx	lr
 800b798:	20000af0 	.word	0x20000af0
 800b79c:	10624dd3 	.word	0x10624dd3
 800b7a0:	fffee0c0 	.word	0xfffee0c0
 800b7a4:	00200045 	.word	0x00200045
 800b7a8:	002000c5 	.word	0x002000c5
 800b7ac:	fdffe008 	.word	0xfdffe008

0800b7b0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7b0:	4a50      	ldr	r2, [pc, #320]	; (800b8f4 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800b7b2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7b4:	4b50      	ldr	r3, [pc, #320]	; (800b8f8 <SDMMC_CmdReadMultiBlock+0x148>)
 800b7b6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b7b8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7bc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7c0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b7c4:	484d      	ldr	r0, [pc, #308]	; (800b8fc <SDMMC_CmdReadMultiBlock+0x14c>)
 800b7c6:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7ca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7cc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7ce:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7d2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7d4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7d8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b7dc:	1e53      	subs	r3, r2, #1
 800b7de:	b14a      	cbz	r2, 800b7f4 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b7e0:	4947      	ldr	r1, [pc, #284]	; (800b900 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b7e2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b7e6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b7e8:	420a      	tst	r2, r1
 800b7ea:	d001      	beq.n	800b7f0 <SDMMC_CmdReadMultiBlock+0x40>
 800b7ec:	0492      	lsls	r2, r2, #18
 800b7ee:	d504      	bpl.n	800b7fa <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800b7f0:	1c58      	adds	r0, r3, #1
 800b7f2:	d1f6      	bne.n	800b7e2 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b7f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b7f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7fa:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b7fe:	0758      	lsls	r0, r3, #29
 800b800:	d445      	bmi.n	800b88e <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b802:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b806:	f010 0001 	ands.w	r0, r0, #1
 800b80a:	d137      	bne.n	800b87c <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b80c:	4b3d      	ldr	r3, [pc, #244]	; (800b904 <SDMMC_CmdReadMultiBlock+0x154>)
 800b80e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b812:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b12      	cmp	r3, #18
 800b81a:	d136      	bne.n	800b88a <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b81c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b820:	4839      	ldr	r0, [pc, #228]	; (800b908 <SDMMC_CmdReadMultiBlock+0x158>)
 800b822:	4018      	ands	r0, r3
 800b824:	2800      	cmp	r0, #0
 800b826:	d02f      	beq.n	800b888 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b828:	2b00      	cmp	r3, #0
 800b82a:	db35      	blt.n	800b898 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b82c:	0059      	lsls	r1, r3, #1
 800b82e:	d436      	bmi.n	800b89e <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b830:	009a      	lsls	r2, r3, #2
 800b832:	d436      	bmi.n	800b8a2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b834:	00d9      	lsls	r1, r3, #3
 800b836:	d436      	bmi.n	800b8a6 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b838:	011a      	lsls	r2, r3, #4
 800b83a:	d437      	bmi.n	800b8ac <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b83c:	0159      	lsls	r1, r3, #5
 800b83e:	d438      	bmi.n	800b8b2 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b840:	01da      	lsls	r2, r3, #7
 800b842:	d439      	bmi.n	800b8b8 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b844:	0219      	lsls	r1, r3, #8
 800b846:	d43a      	bmi.n	800b8be <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b848:	025a      	lsls	r2, r3, #9
 800b84a:	d43b      	bmi.n	800b8c4 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b84c:	0299      	lsls	r1, r3, #10
 800b84e:	d445      	bmi.n	800b8dc <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b850:	02da      	lsls	r2, r3, #11
 800b852:	d440      	bmi.n	800b8d6 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b854:	0359      	lsls	r1, r3, #13
 800b856:	d43b      	bmi.n	800b8d0 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b858:	039a      	lsls	r2, r3, #14
 800b85a:	d436      	bmi.n	800b8ca <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b85c:	03d9      	lsls	r1, r3, #15
 800b85e:	d446      	bmi.n	800b8ee <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b860:	041a      	lsls	r2, r3, #16
 800b862:	d441      	bmi.n	800b8e8 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b864:	0459      	lsls	r1, r3, #17
 800b866:	d43c      	bmi.n	800b8e2 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b868:	049a      	lsls	r2, r3, #18
 800b86a:	d40b      	bmi.n	800b884 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b86c:	f013 0f08 	tst.w	r3, #8
 800b870:	bf14      	ite	ne
 800b872:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b876:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b87a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b87c:	2301      	movs	r3, #1
 800b87e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b882:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b884:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b888:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b88a:	2001      	movs	r0, #1
 800b88c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b88e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b890:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b892:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b896:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b898:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b89c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b89e:	2040      	movs	r0, #64	; 0x40
 800b8a0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8a2:	2080      	movs	r0, #128	; 0x80
 800b8a4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8aa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b8b0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b8b6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b8bc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b8c2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b8c8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b8ce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b8d4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b8d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b8da:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b8e0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b8e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b8e6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b8ec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b8f2:	4770      	bx	lr
 800b8f4:	20000af0 	.word	0x20000af0
 800b8f8:	10624dd3 	.word	0x10624dd3
 800b8fc:	fffee0c0 	.word	0xfffee0c0
 800b900:	00200045 	.word	0x00200045
 800b904:	002000c5 	.word	0x002000c5
 800b908:	fdffe008 	.word	0xfdffe008

0800b90c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b90c:	4a50      	ldr	r2, [pc, #320]	; (800ba50 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800b90e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b910:	4b50      	ldr	r3, [pc, #320]	; (800ba54 <SDMMC_CmdWriteSingleBlock+0x148>)
 800b912:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b914:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b918:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b91c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b920:	484d      	ldr	r0, [pc, #308]	; (800ba58 <SDMMC_CmdWriteSingleBlock+0x14c>)
 800b922:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b926:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b928:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b92a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b92e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b930:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b934:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b938:	1e53      	subs	r3, r2, #1
 800b93a:	b14a      	cbz	r2, 800b950 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b93c:	4947      	ldr	r1, [pc, #284]	; (800ba5c <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b93e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b942:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b944:	420a      	tst	r2, r1
 800b946:	d001      	beq.n	800b94c <SDMMC_CmdWriteSingleBlock+0x40>
 800b948:	0492      	lsls	r2, r2, #18
 800b94a:	d504      	bpl.n	800b956 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800b94c:	1c58      	adds	r0, r3, #1
 800b94e:	d1f6      	bne.n	800b93e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b950:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b954:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b956:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b95a:	0758      	lsls	r0, r3, #29
 800b95c:	d445      	bmi.n	800b9ea <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b95e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b962:	f010 0001 	ands.w	r0, r0, #1
 800b966:	d137      	bne.n	800b9d8 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b968:	4b3d      	ldr	r3, [pc, #244]	; (800ba60 <SDMMC_CmdWriteSingleBlock+0x154>)
 800b96a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b96e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b18      	cmp	r3, #24
 800b976:	d136      	bne.n	800b9e6 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b978:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b97c:	4839      	ldr	r0, [pc, #228]	; (800ba64 <SDMMC_CmdWriteSingleBlock+0x158>)
 800b97e:	4018      	ands	r0, r3
 800b980:	2800      	cmp	r0, #0
 800b982:	d02f      	beq.n	800b9e4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b984:	2b00      	cmp	r3, #0
 800b986:	db35      	blt.n	800b9f4 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b988:	0059      	lsls	r1, r3, #1
 800b98a:	d436      	bmi.n	800b9fa <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b98c:	009a      	lsls	r2, r3, #2
 800b98e:	d436      	bmi.n	800b9fe <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b990:	00d9      	lsls	r1, r3, #3
 800b992:	d436      	bmi.n	800ba02 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b994:	011a      	lsls	r2, r3, #4
 800b996:	d437      	bmi.n	800ba08 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b998:	0159      	lsls	r1, r3, #5
 800b99a:	d438      	bmi.n	800ba0e <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b99c:	01da      	lsls	r2, r3, #7
 800b99e:	d439      	bmi.n	800ba14 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9a0:	0219      	lsls	r1, r3, #8
 800b9a2:	d43a      	bmi.n	800ba1a <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9a4:	025a      	lsls	r2, r3, #9
 800b9a6:	d43b      	bmi.n	800ba20 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9a8:	0299      	lsls	r1, r3, #10
 800b9aa:	d445      	bmi.n	800ba38 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9ac:	02da      	lsls	r2, r3, #11
 800b9ae:	d440      	bmi.n	800ba32 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9b0:	0359      	lsls	r1, r3, #13
 800b9b2:	d43b      	bmi.n	800ba2c <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9b4:	039a      	lsls	r2, r3, #14
 800b9b6:	d436      	bmi.n	800ba26 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9b8:	03d9      	lsls	r1, r3, #15
 800b9ba:	d446      	bmi.n	800ba4a <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9bc:	041a      	lsls	r2, r3, #16
 800b9be:	d441      	bmi.n	800ba44 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9c0:	0459      	lsls	r1, r3, #17
 800b9c2:	d43c      	bmi.n	800ba3e <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9c4:	049a      	lsls	r2, r3, #18
 800b9c6:	d40b      	bmi.n	800b9e0 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9c8:	f013 0f08 	tst.w	r3, #8
 800b9cc:	bf14      	ite	ne
 800b9ce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b9d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b9d6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9d8:	2301      	movs	r3, #1
 800b9da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9de:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b9e0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b9e4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9ea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9ec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9ee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9f2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9f4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b9f8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9fa:	2040      	movs	r0, #64	; 0x40
 800b9fc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9fe:	2080      	movs	r0, #128	; 0x80
 800ba00:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba02:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba06:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba08:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba0c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ba12:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ba18:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba1e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ba24:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba26:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ba2a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ba30:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ba32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ba36:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ba3c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ba42:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba48:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba4a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ba4e:	4770      	bx	lr
 800ba50:	20000af0 	.word	0x20000af0
 800ba54:	10624dd3 	.word	0x10624dd3
 800ba58:	fffee0c0 	.word	0xfffee0c0
 800ba5c:	00200045 	.word	0x00200045
 800ba60:	002000c5 	.word	0x002000c5
 800ba64:	fdffe008 	.word	0xfdffe008

0800ba68 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba68:	4a50      	ldr	r2, [pc, #320]	; (800bbac <SDMMC_CmdWriteMultiBlock+0x144>)
{
 800ba6a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba6c:	4b50      	ldr	r3, [pc, #320]	; (800bbb0 <SDMMC_CmdWriteMultiBlock+0x148>)
 800ba6e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ba70:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba74:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba78:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ba7c:	484d      	ldr	r0, [pc, #308]	; (800bbb4 <SDMMC_CmdWriteMultiBlock+0x14c>)
 800ba7e:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba82:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba84:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba86:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba8a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba8c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba90:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800ba94:	1e53      	subs	r3, r2, #1
 800ba96:	b14a      	cbz	r2, 800baac <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba98:	4947      	ldr	r1, [pc, #284]	; (800bbb8 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800ba9a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800ba9e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800baa0:	420a      	tst	r2, r1
 800baa2:	d001      	beq.n	800baa8 <SDMMC_CmdWriteMultiBlock+0x40>
 800baa4:	0492      	lsls	r2, r2, #18
 800baa6:	d504      	bpl.n	800bab2 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800baa8:	1c58      	adds	r0, r3, #1
 800baaa:	d1f6      	bne.n	800ba9a <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800baac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bab0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bab2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bab6:	0758      	lsls	r0, r3, #29
 800bab8:	d445      	bmi.n	800bb46 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baba:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800babe:	f010 0001 	ands.w	r0, r0, #1
 800bac2:	d137      	bne.n	800bb34 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bac4:	4b3d      	ldr	r3, [pc, #244]	; (800bbbc <SDMMC_CmdWriteMultiBlock+0x154>)
 800bac6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800baca:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b19      	cmp	r3, #25
 800bad2:	d136      	bne.n	800bb42 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bad4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bad8:	4839      	ldr	r0, [pc, #228]	; (800bbc0 <SDMMC_CmdWriteMultiBlock+0x158>)
 800bada:	4018      	ands	r0, r3
 800badc:	2800      	cmp	r0, #0
 800bade:	d02f      	beq.n	800bb40 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	db35      	blt.n	800bb50 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bae4:	0059      	lsls	r1, r3, #1
 800bae6:	d436      	bmi.n	800bb56 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bae8:	009a      	lsls	r2, r3, #2
 800baea:	d436      	bmi.n	800bb5a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800baec:	00d9      	lsls	r1, r3, #3
 800baee:	d436      	bmi.n	800bb5e <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baf0:	011a      	lsls	r2, r3, #4
 800baf2:	d437      	bmi.n	800bb64 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800baf4:	0159      	lsls	r1, r3, #5
 800baf6:	d438      	bmi.n	800bb6a <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800baf8:	01da      	lsls	r2, r3, #7
 800bafa:	d439      	bmi.n	800bb70 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bafc:	0219      	lsls	r1, r3, #8
 800bafe:	d43a      	bmi.n	800bb76 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb00:	025a      	lsls	r2, r3, #9
 800bb02:	d43b      	bmi.n	800bb7c <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb04:	0299      	lsls	r1, r3, #10
 800bb06:	d445      	bmi.n	800bb94 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb08:	02da      	lsls	r2, r3, #11
 800bb0a:	d440      	bmi.n	800bb8e <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb0c:	0359      	lsls	r1, r3, #13
 800bb0e:	d43b      	bmi.n	800bb88 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb10:	039a      	lsls	r2, r3, #14
 800bb12:	d436      	bmi.n	800bb82 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb14:	03d9      	lsls	r1, r3, #15
 800bb16:	d446      	bmi.n	800bba6 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb18:	041a      	lsls	r2, r3, #16
 800bb1a:	d441      	bmi.n	800bba0 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb1c:	0459      	lsls	r1, r3, #17
 800bb1e:	d43c      	bmi.n	800bb9a <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb20:	049a      	lsls	r2, r3, #18
 800bb22:	d40b      	bmi.n	800bb3c <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb24:	f013 0f08 	tst.w	r3, #8
 800bb28:	bf14      	ite	ne
 800bb2a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bb2e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bb32:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb34:	2301      	movs	r3, #1
 800bb36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb3a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bb3c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bb40:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb42:	2001      	movs	r0, #1
 800bb44:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb46:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb48:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb4a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb4e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb50:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bb54:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb56:	2040      	movs	r0, #64	; 0x40
 800bb58:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb5a:	2080      	movs	r0, #128	; 0x80
 800bb5c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb62:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb64:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb68:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb6e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bb74:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bb7a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bb80:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb82:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bb86:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bb8c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bb8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bb92:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bb98:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb9a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bb9e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bba0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bba4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bba6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bbaa:	4770      	bx	lr
 800bbac:	20000af0 	.word	0x20000af0
 800bbb0:	10624dd3 	.word	0x10624dd3
 800bbb4:	fffee0c0 	.word	0xfffee0c0
 800bbb8:	00200045 	.word	0x00200045
 800bbbc:	002000c5 	.word	0x002000c5
 800bbc0:	fdffe008 	.word	0xfdffe008

0800bbc4 <SDMMC_CmdStopTransfer>:
{
 800bbc4:	b430      	push	{r4, r5}
 800bbc6:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbc8:	4b7b      	ldr	r3, [pc, #492]	; (800bdb8 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbca:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800bbcc:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbce:	4c7b      	ldr	r4, [pc, #492]	; (800bdbc <SDMMC_CmdStopTransfer+0x1f8>)
 800bbd0:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbd2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbd6:	4b7a      	ldr	r3, [pc, #488]	; (800bdc0 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbd8:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbda:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bbde:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbe0:	4c78      	ldr	r4, [pc, #480]	; (800bdc4 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bbe2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbe6:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bbe8:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbea:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800bbee:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbf0:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbf4:	68cc      	ldr	r4, [r1, #12]
 800bbf6:	4023      	ands	r3, r4
 800bbf8:	4318      	orrs	r0, r3
 800bbfa:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800bbfc:	b14a      	cbz	r2, 800bc12 <SDMMC_CmdStopTransfer+0x4e>
 800bbfe:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bc00:	4871      	ldr	r0, [pc, #452]	; (800bdc8 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 800bc02:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bc04:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc06:	4202      	tst	r2, r0
 800bc08:	d001      	beq.n	800bc0e <SDMMC_CmdStopTransfer+0x4a>
 800bc0a:	0492      	lsls	r2, r2, #18
 800bc0c:	d509      	bpl.n	800bc22 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800bc0e:	1c5c      	adds	r4, r3, #1
 800bc10:	d1f7      	bne.n	800bc02 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc12:	68cb      	ldr	r3, [r1, #12]
 800bc14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc1c:	60cb      	str	r3, [r1, #12]
}
 800bc1e:	bc30      	pop	{r4, r5}
 800bc20:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc22:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bc24:	075b      	lsls	r3, r3, #29
 800bc26:	d452      	bmi.n	800bcce <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc28:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bc2a:	f010 0001 	ands.w	r0, r0, #1
 800bc2e:	d13b      	bne.n	800bca8 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc30:	4b66      	ldr	r3, [pc, #408]	; (800bdcc <SDMMC_CmdStopTransfer+0x208>)
 800bc32:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc34:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b0c      	cmp	r3, #12
 800bc3a:	d142      	bne.n	800bcc2 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 800bc3c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc3e:	4a64      	ldr	r2, [pc, #400]	; (800bdd0 <SDMMC_CmdStopTransfer+0x20c>)
 800bc40:	401a      	ands	r2, r3
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	d037      	beq.n	800bcb6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	db35      	blt.n	800bcb6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc4a:	005d      	lsls	r5, r3, #1
 800bc4c:	d446      	bmi.n	800bcdc <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc4e:	009c      	lsls	r4, r3, #2
 800bc50:	d44a      	bmi.n	800bce8 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc52:	00d8      	lsls	r0, r3, #3
 800bc54:	d44e      	bmi.n	800bcf4 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc56:	011a      	lsls	r2, r3, #4
 800bc58:	d453      	bmi.n	800bd02 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc5a:	015d      	lsls	r5, r3, #5
 800bc5c:	d458      	bmi.n	800bd10 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc5e:	01dc      	lsls	r4, r3, #7
 800bc60:	d464      	bmi.n	800bd2c <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc62:	0218      	lsls	r0, r3, #8
 800bc64:	d45b      	bmi.n	800bd1e <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc66:	025a      	lsls	r2, r3, #9
 800bc68:	d46e      	bmi.n	800bd48 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc6a:	029d      	lsls	r5, r3, #10
 800bc6c:	d465      	bmi.n	800bd3a <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc6e:	02dc      	lsls	r4, r3, #11
 800bc70:	d47f      	bmi.n	800bd72 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc72:	0358      	lsls	r0, r3, #13
 800bc74:	d476      	bmi.n	800bd64 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc76:	039a      	lsls	r2, r3, #14
 800bc78:	d46d      	bmi.n	800bd56 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc7a:	03dd      	lsls	r5, r3, #15
 800bc7c:	f100 8095 	bmi.w	800bdaa <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc80:	041c      	lsls	r4, r3, #16
 800bc82:	f100 8084 	bmi.w	800bd8e <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc86:	0458      	lsls	r0, r3, #17
 800bc88:	d47a      	bmi.n	800bd80 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc8a:	049a      	lsls	r2, r3, #18
 800bc8c:	f100 8086 	bmi.w	800bd9c <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc90:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc94:	68cb      	ldr	r3, [r1, #12]
 800bc96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc9a:	bf14      	ite	ne
 800bc9c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bca0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bca4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bca6:	e7ba      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca8:	2301      	movs	r3, #1
 800bcaa:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcac:	68cb      	ldr	r3, [r1, #12]
 800bcae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bcb4:	e7b3      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcb6:	68cb      	ldr	r3, [r1, #12]
 800bcb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcbc:	60cb      	str	r3, [r1, #12]
}
 800bcbe:	bc30      	pop	{r4, r5}
 800bcc0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcc2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcc4:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcca:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bccc:	e7a7      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcce:	2004      	movs	r0, #4
 800bcd0:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcd2:	68cb      	ldr	r3, [r1, #12]
 800bcd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcd8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bcda:	e7a0      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcdc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcde:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bce4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bce6:	e79a      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bce8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bcea:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bcf2:	e794      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcf4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bcf6:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bcfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcfe:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd00:	e78d      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd02:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd04:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd0c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd0e:	e786      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd10:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd12:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd1a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd1c:	e77f      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd1e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd28:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd2a:	e778      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd2c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd36:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd38:	e771      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd3a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd44:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd46:	e76a      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd48:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd52:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd54:	e763      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd56:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd58:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd60:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd62:	e75c      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd64:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd6e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd70:	e755      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd72:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800bd74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd7c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd7e:	e74e      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd80:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd8a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd8c:	e747      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd8e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd98:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bd9a:	e740      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd9c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800bd9e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bda2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bda6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bda8:	e739      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdaa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdb6:	e732      	b.n	800bc1e <SDMMC_CmdStopTransfer+0x5a>
 800bdb8:	20000af0 	.word	0x20000af0
 800bdbc:	10624dd3 	.word	0x10624dd3
 800bdc0:	fffee0c0 	.word	0xfffee0c0
 800bdc4:	05f5e100 	.word	0x05f5e100
 800bdc8:	00200045 	.word	0x00200045
 800bdcc:	002000c5 	.word	0x002000c5
 800bdd0:	fdffe008 	.word	0xfdffe008

0800bdd4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bdd4:	4a50      	ldr	r2, [pc, #320]	; (800bf18 <SDMMC_CmdSelDesel+0x144>)
{
 800bdd6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bdd8:	4b50      	ldr	r3, [pc, #320]	; (800bf1c <SDMMC_CmdSelDesel+0x148>)
 800bdda:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bddc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bde0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bde4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bde8:	484d      	ldr	r0, [pc, #308]	; (800bf20 <SDMMC_CmdSelDesel+0x14c>)
 800bdea:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bdee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdf0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bdf2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdf6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bdf8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdfc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800be00:	1e53      	subs	r3, r2, #1
 800be02:	b14a      	cbz	r2, 800be18 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800be04:	4947      	ldr	r1, [pc, #284]	; (800bf24 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 800be06:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800be0a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800be0c:	420a      	tst	r2, r1
 800be0e:	d001      	beq.n	800be14 <SDMMC_CmdSelDesel+0x40>
 800be10:	0492      	lsls	r2, r2, #18
 800be12:	d504      	bpl.n	800be1e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800be14:	1c58      	adds	r0, r3, #1
 800be16:	d1f6      	bne.n	800be06 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800be18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800be1c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be1e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800be22:	0758      	lsls	r0, r3, #29
 800be24:	d445      	bmi.n	800beb2 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be26:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800be2a:	f010 0001 	ands.w	r0, r0, #1
 800be2e:	d137      	bne.n	800bea0 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be30:	4b3d      	ldr	r3, [pc, #244]	; (800bf28 <SDMMC_CmdSelDesel+0x154>)
 800be32:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800be36:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b07      	cmp	r3, #7
 800be3e:	d136      	bne.n	800beae <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 800be40:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be44:	4839      	ldr	r0, [pc, #228]	; (800bf2c <SDMMC_CmdSelDesel+0x158>)
 800be46:	4018      	ands	r0, r3
 800be48:	2800      	cmp	r0, #0
 800be4a:	d02f      	beq.n	800beac <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	db35      	blt.n	800bebc <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be50:	0059      	lsls	r1, r3, #1
 800be52:	d436      	bmi.n	800bec2 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be54:	009a      	lsls	r2, r3, #2
 800be56:	d436      	bmi.n	800bec6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be58:	00d9      	lsls	r1, r3, #3
 800be5a:	d436      	bmi.n	800beca <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be5c:	011a      	lsls	r2, r3, #4
 800be5e:	d437      	bmi.n	800bed0 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be60:	0159      	lsls	r1, r3, #5
 800be62:	d438      	bmi.n	800bed6 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be64:	01da      	lsls	r2, r3, #7
 800be66:	d439      	bmi.n	800bedc <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be68:	0219      	lsls	r1, r3, #8
 800be6a:	d43a      	bmi.n	800bee2 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be6c:	025a      	lsls	r2, r3, #9
 800be6e:	d43b      	bmi.n	800bee8 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be70:	0299      	lsls	r1, r3, #10
 800be72:	d445      	bmi.n	800bf00 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be74:	02da      	lsls	r2, r3, #11
 800be76:	d440      	bmi.n	800befa <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be78:	0359      	lsls	r1, r3, #13
 800be7a:	d43b      	bmi.n	800bef4 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be7c:	039a      	lsls	r2, r3, #14
 800be7e:	d436      	bmi.n	800beee <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be80:	03d9      	lsls	r1, r3, #15
 800be82:	d446      	bmi.n	800bf12 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be84:	041a      	lsls	r2, r3, #16
 800be86:	d441      	bmi.n	800bf0c <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be88:	0459      	lsls	r1, r3, #17
 800be8a:	d43c      	bmi.n	800bf06 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be8c:	049a      	lsls	r2, r3, #18
 800be8e:	d40b      	bmi.n	800bea8 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be90:	f013 0f08 	tst.w	r3, #8
 800be94:	bf14      	ite	ne
 800be96:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800be9a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800be9e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bea0:	2301      	movs	r3, #1
 800bea2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bea6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bea8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800beac:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beae:	2001      	movs	r0, #1
 800beb0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800beb2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beb4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800beb6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beba:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bebc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bec0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bec2:	2040      	movs	r0, #64	; 0x40
 800bec4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bec6:	2080      	movs	r0, #128	; 0x80
 800bec8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800beca:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bece:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bed0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bed4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bed6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800beda:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bedc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bee0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bee2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bee6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bee8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800beec:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800beee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bef2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bef4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bef8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800befa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800befe:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bf04:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf06:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bf0a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bf10:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bf16:	4770      	bx	lr
 800bf18:	20000af0 	.word	0x20000af0
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	fffee0c0 	.word	0xfffee0c0
 800bf24:	00200045 	.word	0x00200045
 800bf28:	002000c5 	.word	0x002000c5
 800bf2c:	fdffe008 	.word	0xfdffe008

0800bf30 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <SDMMC_CmdGoIdleState+0x48>)
{
 800bf32:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <SDMMC_CmdGoIdleState+0x4c>)
{
 800bf36:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf38:	4c11      	ldr	r4, [pc, #68]	; (800bf80 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800bf3a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf3c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800bf3e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf40:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf44:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf46:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf4a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf4c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf52:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf56:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf58:	e002      	b.n	800bf60 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf5a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800bf5c:	0612      	lsls	r2, r2, #24
 800bf5e:	d405      	bmi.n	800bf6c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800bf60:	3b01      	subs	r3, #1
 800bf62:	d2fa      	bcs.n	800bf5a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800bf64:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bf68:	bc30      	pop	{r4, r5}
 800bf6a:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800bf6e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf70:	638b      	str	r3, [r1, #56]	; 0x38
}
 800bf72:	bc30      	pop	{r4, r5}
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20000af0 	.word	0x20000af0
 800bf7c:	fffee0c0 	.word	0xfffee0c0
 800bf80:	10624dd3 	.word	0x10624dd3
 800bf84:	002000c5 	.word	0x002000c5

0800bf88 <SDMMC_CmdOperCond>:
{
 800bf88:	b410      	push	{r4}
 800bf8a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800bf8c:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf90:	4a1a      	ldr	r2, [pc, #104]	; (800bffc <SDMMC_CmdOperCond+0x74>)
 800bf92:	4b1b      	ldr	r3, [pc, #108]	; (800c000 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800bf94:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf96:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf98:	68cc      	ldr	r4, [r1, #12]
 800bf9a:	481a      	ldr	r0, [pc, #104]	; (800c004 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf9c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bfa0:	f241 1308 	movw	r3, #4360	; 0x1108
 800bfa4:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfa6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bfa8:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfaa:	f241 3088 	movw	r0, #5000	; 0x1388
 800bfae:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bfb2:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800bfb4:	b14a      	cbz	r2, 800bfca <SDMMC_CmdOperCond+0x42>
 800bfb6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bfb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bfba:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfbc:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bfc0:	d001      	beq.n	800bfc6 <SDMMC_CmdOperCond+0x3e>
 800bfc2:	0490      	lsls	r0, r2, #18
 800bfc4:	d506      	bpl.n	800bfd4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800bfc6:	1c5c      	adds	r4, r3, #1
 800bfc8:	d1f6      	bne.n	800bfb8 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bfca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bfce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bfd6:	075a      	lsls	r2, r3, #29
 800bfd8:	d40c      	bmi.n	800bff4 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfda:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bfdc:	f010 0001 	ands.w	r0, r0, #1
 800bfe0:	d105      	bne.n	800bfee <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bfe2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bfe4:	065b      	lsls	r3, r3, #25
 800bfe6:	d5f2      	bpl.n	800bfce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bfe8:	2340      	movs	r3, #64	; 0x40
 800bfea:	638b      	str	r3, [r1, #56]	; 0x38
 800bfec:	e7ef      	b.n	800bfce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfee:	2301      	movs	r3, #1
 800bff0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bff2:	e7ec      	b.n	800bfce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bff4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bff6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bff8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bffa:	e7e8      	b.n	800bfce <SDMMC_CmdOperCond+0x46>
 800bffc:	20000af0 	.word	0x20000af0
 800c000:	10624dd3 	.word	0x10624dd3
 800c004:	fffee0c0 	.word	0xfffee0c0

0800c008 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c008:	4a50      	ldr	r2, [pc, #320]	; (800c14c <SDMMC_CmdAppCommand+0x144>)
{
 800c00a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c00c:	4b50      	ldr	r3, [pc, #320]	; (800c150 <SDMMC_CmdAppCommand+0x148>)
 800c00e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c010:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c014:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c018:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c01c:	484d      	ldr	r0, [pc, #308]	; (800c154 <SDMMC_CmdAppCommand+0x14c>)
 800c01e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c022:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c024:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c026:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c02a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c02c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c030:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c034:	1e53      	subs	r3, r2, #1
 800c036:	b14a      	cbz	r2, 800c04c <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c038:	4947      	ldr	r1, [pc, #284]	; (800c158 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 800c03a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c03e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c040:	420a      	tst	r2, r1
 800c042:	d001      	beq.n	800c048 <SDMMC_CmdAppCommand+0x40>
 800c044:	0492      	lsls	r2, r2, #18
 800c046:	d504      	bpl.n	800c052 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800c048:	1c58      	adds	r0, r3, #1
 800c04a:	d1f6      	bne.n	800c03a <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c04c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c050:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c052:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c056:	0758      	lsls	r0, r3, #29
 800c058:	d445      	bmi.n	800c0e6 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c05a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c05e:	f010 0001 	ands.w	r0, r0, #1
 800c062:	d137      	bne.n	800c0d4 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c064:	4b3d      	ldr	r3, [pc, #244]	; (800c15c <SDMMC_CmdAppCommand+0x154>)
 800c066:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c06a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b37      	cmp	r3, #55	; 0x37
 800c072:	d136      	bne.n	800c0e2 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800c074:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c078:	4839      	ldr	r0, [pc, #228]	; (800c160 <SDMMC_CmdAppCommand+0x158>)
 800c07a:	4018      	ands	r0, r3
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d02f      	beq.n	800c0e0 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c080:	2b00      	cmp	r3, #0
 800c082:	db35      	blt.n	800c0f0 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c084:	0059      	lsls	r1, r3, #1
 800c086:	d436      	bmi.n	800c0f6 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c088:	009a      	lsls	r2, r3, #2
 800c08a:	d436      	bmi.n	800c0fa <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c08c:	00d9      	lsls	r1, r3, #3
 800c08e:	d436      	bmi.n	800c0fe <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c090:	011a      	lsls	r2, r3, #4
 800c092:	d437      	bmi.n	800c104 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c094:	0159      	lsls	r1, r3, #5
 800c096:	d438      	bmi.n	800c10a <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c098:	01da      	lsls	r2, r3, #7
 800c09a:	d439      	bmi.n	800c110 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c09c:	0219      	lsls	r1, r3, #8
 800c09e:	d43a      	bmi.n	800c116 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0a0:	025a      	lsls	r2, r3, #9
 800c0a2:	d43b      	bmi.n	800c11c <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0a4:	0299      	lsls	r1, r3, #10
 800c0a6:	d445      	bmi.n	800c134 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0a8:	02da      	lsls	r2, r3, #11
 800c0aa:	d440      	bmi.n	800c12e <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0ac:	0359      	lsls	r1, r3, #13
 800c0ae:	d43b      	bmi.n	800c128 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0b0:	039a      	lsls	r2, r3, #14
 800c0b2:	d436      	bmi.n	800c122 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0b4:	03d9      	lsls	r1, r3, #15
 800c0b6:	d446      	bmi.n	800c146 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0b8:	041a      	lsls	r2, r3, #16
 800c0ba:	d441      	bmi.n	800c140 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0bc:	0459      	lsls	r1, r3, #17
 800c0be:	d43c      	bmi.n	800c13a <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0c0:	049a      	lsls	r2, r3, #18
 800c0c2:	d40b      	bmi.n	800c0dc <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0c4:	f013 0f08 	tst.w	r3, #8
 800c0c8:	bf14      	ite	ne
 800c0ca:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c0ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c0d2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0da:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c0dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c0e0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0e6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0e8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0ea:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0ee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c0f4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0f6:	2040      	movs	r0, #64	; 0x40
 800c0f8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0fa:	2080      	movs	r0, #128	; 0x80
 800c0fc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c102:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c104:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c108:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c10a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c10e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c110:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c114:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c116:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c11a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c11c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c120:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c122:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c126:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c128:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c12c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c12e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c132:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c134:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c138:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c13a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c13e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c140:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c144:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c146:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c14a:	4770      	bx	lr
 800c14c:	20000af0 	.word	0x20000af0
 800c150:	10624dd3 	.word	0x10624dd3
 800c154:	fffee0c0 	.word	0xfffee0c0
 800c158:	00200045 	.word	0x00200045
 800c15c:	002000c5 	.word	0x002000c5
 800c160:	fdffe008 	.word	0xfdffe008

0800c164 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c164:	4a19      	ldr	r2, [pc, #100]	; (800c1cc <SDMMC_CmdAppOperCommand+0x68>)
{
 800c166:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c168:	4b19      	ldr	r3, [pc, #100]	; (800c1d0 <SDMMC_CmdAppOperCommand+0x6c>)
 800c16a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c16c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c170:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c174:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c178:	4816      	ldr	r0, [pc, #88]	; (800c1d4 <SDMMC_CmdAppOperCommand+0x70>)
 800c17a:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c17e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c180:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c182:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c186:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c188:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c18c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c190:	1e53      	subs	r3, r2, #1
 800c192:	b14a      	cbz	r2, 800c1a8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800c194:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c198:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c19a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c19e:	d001      	beq.n	800c1a4 <SDMMC_CmdAppOperCommand+0x40>
 800c1a0:	0492      	lsls	r2, r2, #18
 800c1a2:	d504      	bpl.n	800c1ae <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800c1a4:	1c59      	adds	r1, r3, #1
 800c1a6:	d1f5      	bne.n	800c194 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c1a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c1ac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c1b2:	f010 0004 	ands.w	r0, r0, #4
 800c1b6:	d103      	bne.n	800c1c0 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1b8:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <SDMMC_CmdAppOperCommand+0x74>)
 800c1ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c1be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1c0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1c2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1c4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000af0 	.word	0x20000af0
 800c1d0:	10624dd3 	.word	0x10624dd3
 800c1d4:	fffee0c0 	.word	0xfffee0c0
 800c1d8:	002000c5 	.word	0x002000c5

0800c1dc <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1dc:	4a50      	ldr	r2, [pc, #320]	; (800c320 <SDMMC_CmdBusWidth+0x144>)
{
 800c1de:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1e0:	4b50      	ldr	r3, [pc, #320]	; (800c324 <SDMMC_CmdBusWidth+0x148>)
 800c1e2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c1e4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1e8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1ec:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c1f0:	484d      	ldr	r0, [pc, #308]	; (800c328 <SDMMC_CmdBusWidth+0x14c>)
 800c1f2:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1f6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1f8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1fa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1fe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c200:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c204:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c208:	1e53      	subs	r3, r2, #1
 800c20a:	b14a      	cbz	r2, 800c220 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c20c:	4947      	ldr	r1, [pc, #284]	; (800c32c <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800c20e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c212:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c214:	420a      	tst	r2, r1
 800c216:	d001      	beq.n	800c21c <SDMMC_CmdBusWidth+0x40>
 800c218:	0492      	lsls	r2, r2, #18
 800c21a:	d504      	bpl.n	800c226 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800c21c:	1c58      	adds	r0, r3, #1
 800c21e:	d1f6      	bne.n	800c20e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c220:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c224:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c226:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c22a:	0758      	lsls	r0, r3, #29
 800c22c:	d445      	bmi.n	800c2ba <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c22e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c232:	f010 0001 	ands.w	r0, r0, #1
 800c236:	d137      	bne.n	800c2a8 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c238:	4b3d      	ldr	r3, [pc, #244]	; (800c330 <SDMMC_CmdBusWidth+0x154>)
 800c23a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c23e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b06      	cmp	r3, #6
 800c246:	d136      	bne.n	800c2b6 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800c248:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c24c:	4839      	ldr	r0, [pc, #228]	; (800c334 <SDMMC_CmdBusWidth+0x158>)
 800c24e:	4018      	ands	r0, r3
 800c250:	2800      	cmp	r0, #0
 800c252:	d02f      	beq.n	800c2b4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c254:	2b00      	cmp	r3, #0
 800c256:	db35      	blt.n	800c2c4 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c258:	0059      	lsls	r1, r3, #1
 800c25a:	d436      	bmi.n	800c2ca <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c25c:	009a      	lsls	r2, r3, #2
 800c25e:	d436      	bmi.n	800c2ce <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c260:	00d9      	lsls	r1, r3, #3
 800c262:	d436      	bmi.n	800c2d2 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c264:	011a      	lsls	r2, r3, #4
 800c266:	d437      	bmi.n	800c2d8 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c268:	0159      	lsls	r1, r3, #5
 800c26a:	d438      	bmi.n	800c2de <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c26c:	01da      	lsls	r2, r3, #7
 800c26e:	d439      	bmi.n	800c2e4 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c270:	0219      	lsls	r1, r3, #8
 800c272:	d43a      	bmi.n	800c2ea <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c274:	025a      	lsls	r2, r3, #9
 800c276:	d43b      	bmi.n	800c2f0 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c278:	0299      	lsls	r1, r3, #10
 800c27a:	d445      	bmi.n	800c308 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c27c:	02da      	lsls	r2, r3, #11
 800c27e:	d440      	bmi.n	800c302 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c280:	0359      	lsls	r1, r3, #13
 800c282:	d43b      	bmi.n	800c2fc <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c284:	039a      	lsls	r2, r3, #14
 800c286:	d436      	bmi.n	800c2f6 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c288:	03d9      	lsls	r1, r3, #15
 800c28a:	d446      	bmi.n	800c31a <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c28c:	041a      	lsls	r2, r3, #16
 800c28e:	d441      	bmi.n	800c314 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c290:	0459      	lsls	r1, r3, #17
 800c292:	d43c      	bmi.n	800c30e <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c294:	049a      	lsls	r2, r3, #18
 800c296:	d40b      	bmi.n	800c2b0 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c298:	f013 0f08 	tst.w	r3, #8
 800c29c:	bf14      	ite	ne
 800c29e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c2a2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c2a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ae:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c2b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c2b4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2ba:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2bc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2be:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2c2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c2c8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2ca:	2040      	movs	r0, #64	; 0x40
 800c2cc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2ce:	2080      	movs	r0, #128	; 0x80
 800c2d0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c2d6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c2dc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c2e2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c2e8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2ee:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c2f4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c2f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c2fa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c2fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c300:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c302:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c306:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c308:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c30c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c30e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c312:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c314:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c318:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c31a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c31e:	4770      	bx	lr
 800c320:	20000af0 	.word	0x20000af0
 800c324:	10624dd3 	.word	0x10624dd3
 800c328:	fffee0c0 	.word	0xfffee0c0
 800c32c:	00200045 	.word	0x00200045
 800c330:	002000c5 	.word	0x002000c5
 800c334:	fdffe008 	.word	0xfdffe008

0800c338 <SDMMC_CmdSendSCR>:
{
 800c338:	b410      	push	{r4}
 800c33a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c33c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c33e:	4a4c      	ldr	r2, [pc, #304]	; (800c470 <SDMMC_CmdSendSCR+0x138>)
 800c340:	4b4c      	ldr	r3, [pc, #304]	; (800c474 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c342:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c344:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c346:	68cc      	ldr	r4, [r1, #12]
 800c348:	484b      	ldr	r0, [pc, #300]	; (800c478 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c34a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c34e:	f241 1333 	movw	r3, #4403	; 0x1133
 800c352:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c354:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c356:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c358:	f241 3088 	movw	r0, #5000	; 0x1388
 800c35c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c360:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c362:	b14a      	cbz	r2, 800c378 <SDMMC_CmdSendSCR+0x40>
 800c364:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c366:	4845      	ldr	r0, [pc, #276]	; (800c47c <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800c368:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c36a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c36c:	4202      	tst	r2, r0
 800c36e:	d001      	beq.n	800c374 <SDMMC_CmdSendSCR+0x3c>
 800c370:	0494      	lsls	r4, r2, #18
 800c372:	d506      	bpl.n	800c382 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	d1f7      	bne.n	800c368 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c378:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c380:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c382:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c384:	0758      	lsls	r0, r3, #29
 800c386:	d43d      	bmi.n	800c404 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c388:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c38a:	f010 0001 	ands.w	r0, r0, #1
 800c38e:	d134      	bne.n	800c3fa <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c390:	4b3b      	ldr	r3, [pc, #236]	; (800c480 <SDMMC_CmdSendSCR+0x148>)
 800c392:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c394:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c396:	b2db      	uxtb	r3, r3
 800c398:	2b33      	cmp	r3, #51	; 0x33
 800c39a:	d131      	bne.n	800c400 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c39c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c39e:	4839      	ldr	r0, [pc, #228]	; (800c484 <SDMMC_CmdSendSCR+0x14c>)
 800c3a0:	4018      	ands	r0, r3
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d0ea      	beq.n	800c37c <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	db30      	blt.n	800c40c <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3aa:	005a      	lsls	r2, r3, #1
 800c3ac:	d431      	bmi.n	800c412 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3ae:	009c      	lsls	r4, r3, #2
 800c3b0:	d431      	bmi.n	800c416 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3b2:	00d9      	lsls	r1, r3, #3
 800c3b4:	d431      	bmi.n	800c41a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3b6:	011a      	lsls	r2, r3, #4
 800c3b8:	d432      	bmi.n	800c420 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3ba:	015c      	lsls	r4, r3, #5
 800c3bc:	d433      	bmi.n	800c426 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c3be:	01d9      	lsls	r1, r3, #7
 800c3c0:	d434      	bmi.n	800c42c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c3c2:	021a      	lsls	r2, r3, #8
 800c3c4:	d435      	bmi.n	800c432 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3c6:	025c      	lsls	r4, r3, #9
 800c3c8:	d436      	bmi.n	800c438 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3ca:	0299      	lsls	r1, r3, #10
 800c3cc:	d440      	bmi.n	800c450 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3ce:	02da      	lsls	r2, r3, #11
 800c3d0:	d43b      	bmi.n	800c44a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3d2:	035c      	lsls	r4, r3, #13
 800c3d4:	d436      	bmi.n	800c444 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3d6:	0399      	lsls	r1, r3, #14
 800c3d8:	d431      	bmi.n	800c43e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3da:	03da      	lsls	r2, r3, #15
 800c3dc:	d444      	bmi.n	800c468 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3de:	041c      	lsls	r4, r3, #16
 800c3e0:	d43f      	bmi.n	800c462 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c3e2:	0459      	lsls	r1, r3, #17
 800c3e4:	d43a      	bmi.n	800c45c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c3e6:	049a      	lsls	r2, r3, #18
 800c3e8:	d435      	bmi.n	800c456 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3ea:	f013 0f08 	tst.w	r3, #8
 800c3ee:	bf14      	ite	ne
 800c3f0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c3f4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c3f8:	e7c0      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3fe:	e7bd      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c400:	2001      	movs	r0, #1
 800c402:	e7bb      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c404:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c406:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c408:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c40a:	e7b7      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c40c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c410:	e7b4      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c412:	2040      	movs	r0, #64	; 0x40
 800c414:	e7b2      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c416:	2080      	movs	r0, #128	; 0x80
 800c418:	e7b0      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c41a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c41e:	e7ad      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c420:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c424:	e7aa      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c426:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c42a:	e7a7      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c42c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c430:	e7a4      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c432:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c436:	e7a1      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c43c:	e79e      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c43e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c442:	e79b      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c444:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c448:	e798      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c44a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c44e:	e795      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c450:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c454:	e792      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c456:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c45a:	e78f      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c45c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c460:	e78c      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c462:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c466:	e789      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c468:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c46c:	e786      	b.n	800c37c <SDMMC_CmdSendSCR+0x44>
 800c46e:	bf00      	nop
 800c470:	20000af0 	.word	0x20000af0
 800c474:	10624dd3 	.word	0x10624dd3
 800c478:	fffee0c0 	.word	0xfffee0c0
 800c47c:	00200045 	.word	0x00200045
 800c480:	002000c5 	.word	0x002000c5
 800c484:	fdffe008 	.word	0xfdffe008

0800c488 <SDMMC_CmdSendCID>:
{
 800c488:	b410      	push	{r4}
 800c48a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c48c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c48e:	4a19      	ldr	r2, [pc, #100]	; (800c4f4 <SDMMC_CmdSendCID+0x6c>)
 800c490:	4b19      	ldr	r3, [pc, #100]	; (800c4f8 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
 800c492:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c494:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c496:	68cc      	ldr	r4, [r1, #12]
 800c498:	4818      	ldr	r0, [pc, #96]	; (800c4fc <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c49a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c49e:	f241 3302 	movw	r3, #4866	; 0x1302
 800c4a2:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4a4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4a6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4a8:	f241 3088 	movw	r0, #5000	; 0x1388
 800c4ac:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4b0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c4b2:	b14a      	cbz	r2, 800c4c8 <SDMMC_CmdSendCID+0x40>
 800c4b4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c4b6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c4b8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c4be:	d001      	beq.n	800c4c4 <SDMMC_CmdSendCID+0x3c>
 800c4c0:	0492      	lsls	r2, r2, #18
 800c4c2:	d506      	bpl.n	800c4d2 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c4c4:	1c58      	adds	r0, r3, #1
 800c4c6:	d1f6      	bne.n	800c4b6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c4c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4d2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c4d4:	075b      	lsls	r3, r3, #29
 800c4d6:	d409      	bmi.n	800c4ec <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4d8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c4da:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4de:	bf14      	ite	ne
 800c4e0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4e2:	4b07      	ldreq	r3, [pc, #28]	; (800c500 <SDMMC_CmdSendCID+0x78>)
 800c4e4:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4ec:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ee:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4f0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4f2:	e7eb      	b.n	800c4cc <SDMMC_CmdSendCID+0x44>
 800c4f4:	20000af0 	.word	0x20000af0
 800c4f8:	10624dd3 	.word	0x10624dd3
 800c4fc:	fffee0c0 	.word	0xfffee0c0
 800c500:	002000c5 	.word	0x002000c5

0800c504 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c504:	4a1b      	ldr	r2, [pc, #108]	; (800c574 <SDMMC_CmdSendCSD+0x70>)
{
 800c506:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c508:	4b1b      	ldr	r3, [pc, #108]	; (800c578 <SDMMC_CmdSendCSD+0x74>)
 800c50a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c50c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c510:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c514:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c518:	4818      	ldr	r0, [pc, #96]	; (800c57c <SDMMC_CmdSendCSD+0x78>)
 800c51a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c51e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c520:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c522:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c526:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c528:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c52c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c530:	1e53      	subs	r3, r2, #1
 800c532:	b14a      	cbz	r2, 800c548 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c534:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c538:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c53a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c53e:	d001      	beq.n	800c544 <SDMMC_CmdSendCSD+0x40>
 800c540:	0492      	lsls	r2, r2, #18
 800c542:	d504      	bpl.n	800c54e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c544:	1c59      	adds	r1, r3, #1
 800c546:	d1f5      	bne.n	800c534 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c548:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c54c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c54e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c552:	075b      	lsls	r3, r3, #29
 800c554:	d409      	bmi.n	800c56a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c556:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c55a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c55e:	bf14      	ite	ne
 800c560:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c562:	4b07      	ldreq	r3, [pc, #28]	; (800c580 <SDMMC_CmdSendCSD+0x7c>)
 800c564:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c568:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c56a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c56c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c56e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c572:	4770      	bx	lr
 800c574:	20000af0 	.word	0x20000af0
 800c578:	10624dd3 	.word	0x10624dd3
 800c57c:	fffee0c0 	.word	0xfffee0c0
 800c580:	002000c5 	.word	0x002000c5

0800c584 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c584:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c586:	4a2b      	ldr	r2, [pc, #172]	; (800c634 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c588:	4684      	mov	ip, r0
 800c58a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c58c:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c58e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c590:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c592:	4829      	ldr	r0, [pc, #164]	; (800c638 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c594:	4c29      	ldr	r4, [pc, #164]	; (800c63c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c596:	fba0 0202 	umull	r0, r2, r0, r2
 800c59a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c59e:	401c      	ands	r4, r3
 800c5a0:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5a6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5ac:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c5b0:	b152      	cbz	r2, 800c5c8 <SDMMC_CmdSetRelAdd+0x44>
 800c5b2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c5b4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c5b8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c5be:	d001      	beq.n	800c5c4 <SDMMC_CmdSetRelAdd+0x40>
 800c5c0:	0494      	lsls	r4, r2, #18
 800c5c2:	d506      	bpl.n	800c5d2 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	d1f5      	bne.n	800c5b4 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c5c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5d2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c5d6:	0758      	lsls	r0, r3, #29
 800c5d8:	d421      	bmi.n	800c61e <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5da:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c5de:	f010 0001 	ands.w	r0, r0, #1
 800c5e2:	d116      	bne.n	800c612 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c5e4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d115      	bne.n	800c61a <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5ee:	4b14      	ldr	r3, [pc, #80]	; (800c640 <SDMMC_CmdSetRelAdd+0xbc>)
 800c5f0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c5f4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c5f8:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c5fc:	d017      	beq.n	800c62e <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5fe:	045a      	lsls	r2, r3, #17
 800c600:	d412      	bmi.n	800c628 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c602:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c606:	bf14      	ite	ne
 800c608:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c60c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c610:	e7dc      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c612:	2301      	movs	r3, #1
 800c614:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c618:	e7d8      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7d6      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c61e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c620:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c622:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c626:	e7d1      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c628:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c62c:	e7ce      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c62e:	0c1b      	lsrs	r3, r3, #16
 800c630:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c632:	e7cb      	b.n	800c5cc <SDMMC_CmdSetRelAdd+0x48>
 800c634:	20000af0 	.word	0x20000af0
 800c638:	10624dd3 	.word	0x10624dd3
 800c63c:	fffee0c0 	.word	0xfffee0c0
 800c640:	002000c5 	.word	0x002000c5

0800c644 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c644:	4a50      	ldr	r2, [pc, #320]	; (800c788 <SDMMC_CmdSendStatus+0x144>)
{
 800c646:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c648:	4b50      	ldr	r3, [pc, #320]	; (800c78c <SDMMC_CmdSendStatus+0x148>)
 800c64a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c64c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c650:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c654:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c658:	484d      	ldr	r0, [pc, #308]	; (800c790 <SDMMC_CmdSendStatus+0x14c>)
 800c65a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c65e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c660:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c662:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c666:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c668:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c66c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c670:	1e53      	subs	r3, r2, #1
 800c672:	b14a      	cbz	r2, 800c688 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c674:	4947      	ldr	r1, [pc, #284]	; (800c794 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800c676:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c67a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c67c:	420a      	tst	r2, r1
 800c67e:	d001      	beq.n	800c684 <SDMMC_CmdSendStatus+0x40>
 800c680:	0492      	lsls	r2, r2, #18
 800c682:	d504      	bpl.n	800c68e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800c684:	1c58      	adds	r0, r3, #1
 800c686:	d1f6      	bne.n	800c676 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c688:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c68c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c68e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c692:	0758      	lsls	r0, r3, #29
 800c694:	d445      	bmi.n	800c722 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c696:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c69a:	f010 0001 	ands.w	r0, r0, #1
 800c69e:	d137      	bne.n	800c710 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6a0:	4b3d      	ldr	r3, [pc, #244]	; (800c798 <SDMMC_CmdSendStatus+0x154>)
 800c6a2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6a6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b0d      	cmp	r3, #13
 800c6ae:	d136      	bne.n	800c71e <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800c6b0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6b4:	4839      	ldr	r0, [pc, #228]	; (800c79c <SDMMC_CmdSendStatus+0x158>)
 800c6b6:	4018      	ands	r0, r3
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d02f      	beq.n	800c71c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	db35      	blt.n	800c72c <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6c0:	0059      	lsls	r1, r3, #1
 800c6c2:	d436      	bmi.n	800c732 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c6c4:	009a      	lsls	r2, r3, #2
 800c6c6:	d436      	bmi.n	800c736 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6c8:	00d9      	lsls	r1, r3, #3
 800c6ca:	d436      	bmi.n	800c73a <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6cc:	011a      	lsls	r2, r3, #4
 800c6ce:	d437      	bmi.n	800c740 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6d0:	0159      	lsls	r1, r3, #5
 800c6d2:	d438      	bmi.n	800c746 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6d4:	01da      	lsls	r2, r3, #7
 800c6d6:	d439      	bmi.n	800c74c <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6d8:	0219      	lsls	r1, r3, #8
 800c6da:	d43a      	bmi.n	800c752 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6dc:	025a      	lsls	r2, r3, #9
 800c6de:	d43b      	bmi.n	800c758 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6e0:	0299      	lsls	r1, r3, #10
 800c6e2:	d445      	bmi.n	800c770 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6e4:	02da      	lsls	r2, r3, #11
 800c6e6:	d440      	bmi.n	800c76a <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6e8:	0359      	lsls	r1, r3, #13
 800c6ea:	d43b      	bmi.n	800c764 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c6ec:	039a      	lsls	r2, r3, #14
 800c6ee:	d436      	bmi.n	800c75e <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c6f0:	03d9      	lsls	r1, r3, #15
 800c6f2:	d446      	bmi.n	800c782 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c6f4:	041a      	lsls	r2, r3, #16
 800c6f6:	d441      	bmi.n	800c77c <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c6f8:	0459      	lsls	r1, r3, #17
 800c6fa:	d43c      	bmi.n	800c776 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c6fc:	049a      	lsls	r2, r3, #18
 800c6fe:	d40b      	bmi.n	800c718 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c700:	f013 0f08 	tst.w	r3, #8
 800c704:	bf14      	ite	ne
 800c706:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c70a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c70e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c710:	2301      	movs	r3, #1
 800c712:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c716:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c718:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c71c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c71e:	2001      	movs	r0, #1
 800c720:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c722:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c724:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c726:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c72a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c72c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c730:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c732:	2040      	movs	r0, #64	; 0x40
 800c734:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c736:	2080      	movs	r0, #128	; 0x80
 800c738:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c73a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c73e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c740:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c744:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c746:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c74a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c74c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c750:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c752:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c756:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c75c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c75e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c762:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c764:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c768:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c76a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c76e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c770:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c774:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c77a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c77c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c780:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c782:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c786:	4770      	bx	lr
 800c788:	20000af0 	.word	0x20000af0
 800c78c:	10624dd3 	.word	0x10624dd3
 800c790:	fffee0c0 	.word	0xfffee0c0
 800c794:	00200045 	.word	0x00200045
 800c798:	002000c5 	.word	0x002000c5
 800c79c:	fdffe008 	.word	0xfdffe008

0800c7a0 <SDMMC_CmdStatusRegister>:
{
 800c7a0:	b410      	push	{r4}
 800c7a2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c7a4:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c7a6:	4a4c      	ldr	r2, [pc, #304]	; (800c8d8 <SDMMC_CmdStatusRegister+0x138>)
 800c7a8:	4b4c      	ldr	r3, [pc, #304]	; (800c8dc <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c7aa:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c7ac:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7ae:	68cc      	ldr	r4, [r1, #12]
 800c7b0:	484b      	ldr	r0, [pc, #300]	; (800c8e0 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c7b2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7b6:	f241 130d 	movw	r3, #4365	; 0x110d
 800c7ba:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c7bc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7be:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c7c0:	f241 3088 	movw	r0, #5000	; 0x1388
 800c7c4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7c8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c7ca:	b14a      	cbz	r2, 800c7e0 <SDMMC_CmdStatusRegister+0x40>
 800c7cc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c7ce:	4845      	ldr	r0, [pc, #276]	; (800c8e4 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800c7d0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c7d2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c7d4:	4202      	tst	r2, r0
 800c7d6:	d001      	beq.n	800c7dc <SDMMC_CmdStatusRegister+0x3c>
 800c7d8:	0494      	lsls	r4, r2, #18
 800c7da:	d506      	bpl.n	800c7ea <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	d1f7      	bne.n	800c7d0 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c7e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c7ec:	0758      	lsls	r0, r3, #29
 800c7ee:	d43d      	bmi.n	800c86c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7f0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c7f2:	f010 0001 	ands.w	r0, r0, #1
 800c7f6:	d134      	bne.n	800c862 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7f8:	4b3b      	ldr	r3, [pc, #236]	; (800c8e8 <SDMMC_CmdStatusRegister+0x148>)
 800c7fa:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c7fc:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b0d      	cmp	r3, #13
 800c802:	d131      	bne.n	800c868 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c804:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c806:	4839      	ldr	r0, [pc, #228]	; (800c8ec <SDMMC_CmdStatusRegister+0x14c>)
 800c808:	4018      	ands	r0, r3
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d0ea      	beq.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c80e:	2b00      	cmp	r3, #0
 800c810:	db30      	blt.n	800c874 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c812:	005a      	lsls	r2, r3, #1
 800c814:	d431      	bmi.n	800c87a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c816:	009c      	lsls	r4, r3, #2
 800c818:	d431      	bmi.n	800c87e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c81a:	00d9      	lsls	r1, r3, #3
 800c81c:	d431      	bmi.n	800c882 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c81e:	011a      	lsls	r2, r3, #4
 800c820:	d432      	bmi.n	800c888 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c822:	015c      	lsls	r4, r3, #5
 800c824:	d433      	bmi.n	800c88e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c826:	01d9      	lsls	r1, r3, #7
 800c828:	d434      	bmi.n	800c894 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c82a:	021a      	lsls	r2, r3, #8
 800c82c:	d435      	bmi.n	800c89a <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c82e:	025c      	lsls	r4, r3, #9
 800c830:	d436      	bmi.n	800c8a0 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c832:	0299      	lsls	r1, r3, #10
 800c834:	d440      	bmi.n	800c8b8 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c836:	02da      	lsls	r2, r3, #11
 800c838:	d43b      	bmi.n	800c8b2 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c83a:	035c      	lsls	r4, r3, #13
 800c83c:	d436      	bmi.n	800c8ac <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c83e:	0399      	lsls	r1, r3, #14
 800c840:	d431      	bmi.n	800c8a6 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c842:	03da      	lsls	r2, r3, #15
 800c844:	d444      	bmi.n	800c8d0 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c846:	041c      	lsls	r4, r3, #16
 800c848:	d43f      	bmi.n	800c8ca <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c84a:	0459      	lsls	r1, r3, #17
 800c84c:	d43a      	bmi.n	800c8c4 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c84e:	049a      	lsls	r2, r3, #18
 800c850:	d435      	bmi.n	800c8be <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c852:	f013 0f08 	tst.w	r3, #8
 800c856:	bf14      	ite	ne
 800c858:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c85c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c860:	e7c0      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c862:	2301      	movs	r3, #1
 800c864:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c866:	e7bd      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c868:	2001      	movs	r0, #1
 800c86a:	e7bb      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c86c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c86e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c870:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c872:	e7b7      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c874:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c878:	e7b4      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c87a:	2040      	movs	r0, #64	; 0x40
 800c87c:	e7b2      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c87e:	2080      	movs	r0, #128	; 0x80
 800c880:	e7b0      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c882:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c886:	e7ad      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c888:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c88c:	e7aa      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c88e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c892:	e7a7      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c894:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c898:	e7a4      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c89a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c89e:	e7a1      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c8a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c8a4:	e79e      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c8a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c8aa:	e79b      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c8ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c8b0:	e798      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c8b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c8b6:	e795      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c8b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c8bc:	e792      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c8be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c8c2:	e78f      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c8c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c8c8:	e78c      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c8ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c8ce:	e789      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c8d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c8d4:	e786      	b.n	800c7e4 <SDMMC_CmdStatusRegister+0x44>
 800c8d6:	bf00      	nop
 800c8d8:	20000af0 	.word	0x20000af0
 800c8dc:	10624dd3 	.word	0x10624dd3
 800c8e0:	fffee0c0 	.word	0xfffee0c0
 800c8e4:	00200045 	.word	0x00200045
 800c8e8:	002000c5 	.word	0x002000c5
 800c8ec:	fdffe008 	.word	0xfdffe008

0800c8f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c8f0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c8f2:	4903      	ldr	r1, [pc, #12]	; (800c900 <MX_FATFS_Init+0x10>)
 800c8f4:	4803      	ldr	r0, [pc, #12]	; (800c904 <MX_FATFS_Init+0x14>)
 800c8f6:	f003 f825 	bl	800f944 <FATFS_LinkDriver>
 800c8fa:	4b03      	ldr	r3, [pc, #12]	; (800c908 <MX_FATFS_Init+0x18>)
 800c8fc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c8fe:	bd08      	pop	{r3, pc}
 800c900:	2001dd5c 	.word	0x2001dd5c
 800c904:	0801bbc8 	.word	0x0801bbc8
 800c908:	2001dd60 	.word	0x2001dd60

0800c90c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800c90c:	2000      	movs	r0, #0
 800c90e:	4770      	bx	lr

0800c910 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c910:	b510      	push	{r4, lr}
 800c912:	4694      	mov	ip, r2
 800c914:	b082      	sub	sp, #8
 800c916:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c918:	460a      	mov	r2, r1
 800c91a:	4663      	mov	r3, ip
 800c91c:	4601      	mov	r1, r0
 800c91e:	9400      	str	r4, [sp, #0]
 800c920:	4803      	ldr	r0, [pc, #12]	; (800c930 <BSP_SD_ReadBlocks+0x20>)
 800c922:	f7fd f80f 	bl	8009944 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c926:	3800      	subs	r0, #0
 800c928:	bf18      	it	ne
 800c92a:	2001      	movne	r0, #1
 800c92c:	b002      	add	sp, #8
 800c92e:	bd10      	pop	{r4, pc}
 800c930:	2001c9f8 	.word	0x2001c9f8

0800c934 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c934:	b510      	push	{r4, lr}
 800c936:	4694      	mov	ip, r2
 800c938:	b082      	sub	sp, #8
 800c93a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c93c:	460a      	mov	r2, r1
 800c93e:	4663      	mov	r3, ip
 800c940:	4601      	mov	r1, r0
 800c942:	9400      	str	r4, [sp, #0]
 800c944:	4803      	ldr	r0, [pc, #12]	; (800c954 <BSP_SD_WriteBlocks+0x20>)
 800c946:	f7fd f8ed 	bl	8009b24 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c94a:	3800      	subs	r0, #0
 800c94c:	bf18      	it	ne
 800c94e:	2001      	movne	r0, #1
 800c950:	b002      	add	sp, #8
 800c952:	bd10      	pop	{r4, pc}
 800c954:	2001c9f8 	.word	0x2001c9f8

0800c958 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c958:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c95a:	4803      	ldr	r0, [pc, #12]	; (800c968 <BSP_SD_GetCardState+0x10>)
 800c95c:	f7fd fd3c 	bl	800a3d8 <HAL_SD_GetCardState>
}
 800c960:	3804      	subs	r0, #4
 800c962:	bf18      	it	ne
 800c964:	2001      	movne	r0, #1
 800c966:	bd08      	pop	{r3, pc}
 800c968:	2001c9f8 	.word	0x2001c9f8

0800c96c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c96c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c96e:	4801      	ldr	r0, [pc, #4]	; (800c974 <BSP_SD_GetCardInfo+0x8>)
 800c970:	f7fd bbec 	b.w	800a14c <HAL_SD_GetCardInfo>
 800c974:	2001c9f8 	.word	0x2001c9f8

0800c978 <BSP_SD_WriteCpltCallback>:
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop

0800c97c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c97c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800c97e:	f7ff fffb 	bl	800c978 <BSP_SD_WriteCpltCallback>
}
 800c982:	bd08      	pop	{r3, pc}

0800c984 <BSP_SD_ReadCpltCallback>:
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop

0800c988 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c988:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800c98a:	f7ff fffb 	bl	800c984 <BSP_SD_ReadCpltCallback>
}
 800c98e:	bd08      	pop	{r3, pc}

0800c990 <BSP_SD_Init>:
{
 800c990:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c992:	f7f4 fdb5 	bl	8001500 <BSP_SD_IsDetected>
 800c996:	2801      	cmp	r0, #1
 800c998:	d001      	beq.n	800c99e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800c99a:	2002      	movs	r0, #2
}
 800c99c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800c99e:	4807      	ldr	r0, [pc, #28]	; (800c9bc <BSP_SD_Init+0x2c>)
 800c9a0:	f7fd fcb2 	bl	800a308 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d1f9      	bne.n	800c99c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c9a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c9ac:	4803      	ldr	r0, [pc, #12]	; (800c9bc <BSP_SD_Init+0x2c>)
 800c9ae:	f7fd fbe1 	bl	800a174 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800c9b2:	3800      	subs	r0, #0
 800c9b4:	bf18      	it	ne
 800c9b6:	2001      	movne	r0, #1
}
 800c9b8:	bd08      	pop	{r3, pc}
 800c9ba:	bf00      	nop
 800c9bc:	2001c9f8 	.word	0x2001c9f8

0800c9c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c9c0:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800c9c2:	4c0a      	ldr	r4, [pc, #40]	; (800c9ec <SD_initialize+0x2c>)
 800c9c4:	2501      	movs	r5, #1
 800c9c6:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c9c8:	f7ff ffe2 	bl	800c990 <BSP_SD_Init>
 800c9cc:	b108      	cbz	r0, 800c9d2 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c9ce:	7820      	ldrb	r0, [r4, #0]
}
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800c9d2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c9d4:	f7ff ffc0 	bl	800c958 <BSP_SD_GetCardState>
 800c9d8:	b918      	cbnz	r0, 800c9e2 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800c9da:	7823      	ldrb	r3, [r4, #0]
 800c9dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c9e0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c9e2:	7823      	ldrb	r3, [r4, #0]
 800c9e4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800c9e6:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c9e8:	7820      	ldrb	r0, [r4, #0]
}
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	20000b40 	.word	0x20000b40

0800c9f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c9f0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	4c05      	ldr	r4, [pc, #20]	; (800ca0c <SD_status+0x1c>)
 800c9f6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c9f8:	f7ff ffae 	bl	800c958 <BSP_SD_GetCardState>
 800c9fc:	b918      	cbnz	r0, 800ca06 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800c9fe:	7823      	ldrb	r3, [r4, #0]
 800ca00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca04:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ca06:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800ca08:	bd10      	pop	{r4, pc}
 800ca0a:	bf00      	nop
 800ca0c:	20000b40 	.word	0x20000b40

0800ca10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca10:	b508      	push	{r3, lr}
 800ca12:	4608      	mov	r0, r1
 800ca14:	4611      	mov	r1, r2
 800ca16:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ca18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca1c:	f7ff ff78 	bl	800c910 <BSP_SD_ReadBlocks>
 800ca20:	b108      	cbz	r0, 800ca26 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ca22:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800ca24:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ca26:	f7ff ff97 	bl	800c958 <BSP_SD_GetCardState>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0fa      	beq.n	800ca24 <SD_read+0x14>
 800ca2e:	f7ff ff93 	bl	800c958 <BSP_SD_GetCardState>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d1f7      	bne.n	800ca26 <SD_read+0x16>
 800ca36:	e7f5      	b.n	800ca24 <SD_read+0x14>

0800ca38 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca38:	4b18      	ldr	r3, [pc, #96]	; (800ca9c <SD_ioctl+0x64>)
{
 800ca3a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca3c:	7818      	ldrb	r0, [r3, #0]
{
 800ca3e:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca40:	f010 0401 	ands.w	r4, r0, #1
 800ca44:	d106      	bne.n	800ca54 <SD_ioctl+0x1c>
 800ca46:	4615      	mov	r5, r2

  switch (cmd)
 800ca48:	2903      	cmp	r1, #3
 800ca4a:	d824      	bhi.n	800ca96 <SD_ioctl+0x5e>
 800ca4c:	e8df f001 	tbb	[pc, r1]
 800ca50:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca54:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ca56:	4620      	mov	r0, r4
 800ca58:	b00b      	add	sp, #44	; 0x2c
 800ca5a:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800ca5c:	460c      	mov	r4, r1
}
 800ca5e:	4620      	mov	r0, r4
 800ca60:	b00b      	add	sp, #44	; 0x2c
 800ca62:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ca64:	a801      	add	r0, sp, #4
 800ca66:	f7ff ff81 	bl	800c96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ca6a:	9b07      	ldr	r3, [sp, #28]
}
 800ca6c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ca6e:	602b      	str	r3, [r5, #0]
}
 800ca70:	b00b      	add	sp, #44	; 0x2c
 800ca72:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ca74:	a801      	add	r0, sp, #4
 800ca76:	f7ff ff79 	bl	800c96c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ca7a:	9b08      	ldr	r3, [sp, #32]
}
 800ca7c:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ca7e:	802b      	strh	r3, [r5, #0]
}
 800ca80:	b00b      	add	sp, #44	; 0x2c
 800ca82:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ca84:	a801      	add	r0, sp, #4
 800ca86:	f7ff ff71 	bl	800c96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ca8a:	9b08      	ldr	r3, [sp, #32]
}
 800ca8c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ca8e:	0a5b      	lsrs	r3, r3, #9
 800ca90:	602b      	str	r3, [r5, #0]
}
 800ca92:	b00b      	add	sp, #44	; 0x2c
 800ca94:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800ca96:	2404      	movs	r4, #4
 800ca98:	e7dd      	b.n	800ca56 <SD_ioctl+0x1e>
 800ca9a:	bf00      	nop
 800ca9c:	20000b40 	.word	0x20000b40

0800caa0 <SD_write>:
{
 800caa0:	b508      	push	{r3, lr}
 800caa2:	4608      	mov	r0, r1
 800caa4:	4611      	mov	r1, r2
 800caa6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800caa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caac:	f7ff ff42 	bl	800c934 <BSP_SD_WriteBlocks>
 800cab0:	b108      	cbz	r0, 800cab6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800cab2:	2001      	movs	r0, #1
}
 800cab4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cab6:	f7ff ff4f 	bl	800c958 <BSP_SD_GetCardState>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d0fa      	beq.n	800cab4 <SD_write+0x14>
 800cabe:	f7ff ff4b 	bl	800c958 <BSP_SD_GetCardState>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d1f7      	bne.n	800cab6 <SD_write+0x16>
 800cac6:	e7f5      	b.n	800cab4 <SD_write+0x14>

0800cac8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cac8:	4b03      	ldr	r3, [pc, #12]	; (800cad8 <disk_status+0x10>)
 800caca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cace:	4418      	add	r0, r3
 800cad0:	6853      	ldr	r3, [r2, #4]
 800cad2:	7a00      	ldrb	r0, [r0, #8]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	4718      	bx	r3
 800cad8:	2001df8c 	.word	0x2001df8c

0800cadc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800cadc:	4b07      	ldr	r3, [pc, #28]	; (800cafc <disk_initialize+0x20>)
 800cade:	5c1a      	ldrb	r2, [r3, r0]
 800cae0:	b952      	cbnz	r2, 800caf8 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cae2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cae6:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800cae8:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800caec:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800caee:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800caf2:	7a08      	ldrb	r0, [r1, #8]
 800caf4:	6813      	ldr	r3, [r2, #0]
 800caf6:	4718      	bx	r3
  }
  return stat;
}
 800caf8:	2000      	movs	r0, #0
 800cafa:	4770      	bx	lr
 800cafc:	2001df8c 	.word	0x2001df8c

0800cb00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb00:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb02:	4c06      	ldr	r4, [pc, #24]	; (800cb1c <disk_read+0x1c>)
 800cb04:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cb08:	4420      	add	r0, r4
 800cb0a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cb0e:	7a00      	ldrb	r0, [r0, #8]
 800cb10:	68a4      	ldr	r4, [r4, #8]
 800cb12:	46a4      	mov	ip, r4
  return res;
}
 800cb14:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb18:	4760      	bx	ip
 800cb1a:	bf00      	nop
 800cb1c:	2001df8c 	.word	0x2001df8c

0800cb20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb20:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb22:	4c06      	ldr	r4, [pc, #24]	; (800cb3c <disk_write+0x1c>)
 800cb24:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cb28:	4420      	add	r0, r4
 800cb2a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cb2e:	7a00      	ldrb	r0, [r0, #8]
 800cb30:	68e4      	ldr	r4, [r4, #12]
 800cb32:	46a4      	mov	ip, r4
  return res;
}
 800cb34:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb38:	4760      	bx	ip
 800cb3a:	bf00      	nop
 800cb3c:	2001df8c 	.word	0x2001df8c

0800cb40 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb40:	4b04      	ldr	r3, [pc, #16]	; (800cb54 <disk_ioctl+0x14>)
 800cb42:	eb03 0c00 	add.w	ip, r3, r0
 800cb46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb4a:	6843      	ldr	r3, [r0, #4]
 800cb4c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	4718      	bx	r3
 800cb54:	2001df8c 	.word	0x2001df8c

0800cb58 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800cb58:	4b2a      	ldr	r3, [pc, #168]	; (800cc04 <inc_lock+0xac>)
{
 800cb5a:	4684      	mov	ip, r0
 800cb5c:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	6804      	ldr	r4, [r0, #0]
 800cb62:	4294      	cmp	r4, r2
 800cb64:	d01c      	beq.n	800cba0 <inc_lock+0x48>
 800cb66:	6918      	ldr	r0, [r3, #16]
 800cb68:	42a0      	cmp	r0, r4
 800cb6a:	d005      	beq.n	800cb78 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb6c:	b372      	cbz	r2, 800cbcc <inc_lock+0x74>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d044      	beq.n	800cbfc <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb72:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800cb74:	bc70      	pop	{r4, r5, r6}
 800cb76:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800cb78:	695d      	ldr	r5, [r3, #20]
 800cb7a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800cb7e:	42b5      	cmp	r5, r6
 800cb80:	d1f4      	bne.n	800cb6c <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800cb82:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800cb86:	699e      	ldr	r6, [r3, #24]
 800cb88:	42ae      	cmp	r6, r5
 800cb8a:	d1ef      	bne.n	800cb6c <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb8c:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cb8e:	b999      	cbnz	r1, 800cbb8 <inc_lock+0x60>
 800cb90:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb94:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cb96:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cb98:	89a2      	ldrh	r2, [r4, #12]
 800cb9a:	3201      	adds	r2, #1
 800cb9c:	b292      	uxth	r2, r2
 800cb9e:	e029      	b.n	800cbf4 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
 800cba0:	6880      	ldr	r0, [r0, #8]
 800cba2:	685d      	ldr	r5, [r3, #4]
 800cba4:	4285      	cmp	r5, r0
 800cba6:	d1de      	bne.n	800cb66 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800cba8:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800cbac:	6898      	ldr	r0, [r3, #8]
 800cbae:	4285      	cmp	r5, r0
 800cbb0:	d1d9      	bne.n	800cb66 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbb2:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbb4:	2900      	cmp	r1, #0
 800cbb6:	d0eb      	beq.n	800cb90 <inc_lock+0x38>
 800cbb8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cbbc:	0111      	lsls	r1, r2, #4
 800cbbe:	8980      	ldrh	r0, [r0, #12]
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d1d6      	bne.n	800cb72 <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbc4:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cbc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbca:	e013      	b.n	800cbf4 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbcc:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbce:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800cbd0:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800cbd4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800cbd8:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800cbda:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800cbde:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800cbe2:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
 800cbe6:	f04f 0400 	mov.w	r4, #0
 800cbea:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbec:	bf14      	ite	ne
 800cbee:	f44f 7280 	movne.w	r2, #256	; 0x100
 800cbf2:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cbf4:	440b      	add	r3, r1
 800cbf6:	819a      	strh	r2, [r3, #12]
}
 800cbf8:	bc70      	pop	{r4, r5, r6}
 800cbfa:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbfc:	2002      	movs	r0, #2
 800cbfe:	2201      	movs	r2, #1
 800cc00:	e7e5      	b.n	800cbce <inc_lock+0x76>
 800cc02:	bf00      	nop
 800cc04:	2001dd68 	.word	0x2001dd68

0800cc08 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	440a      	add	r2, r1
 800cc0e:	460d      	mov	r5, r1
 800cc10:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cc12:	4f37      	ldr	r7, [pc, #220]	; (800ccf0 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800cc14:	42aa      	cmp	r2, r5
 800cc16:	d012      	beq.n	800cc3e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cc18:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc1c:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cc20:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cc24:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc28:	2919      	cmp	r1, #25
 800cc2a:	d9f3      	bls.n	800cc14 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cc2c:	2c7f      	cmp	r4, #127	; 0x7f
 800cc2e:	bf88      	it	hi
 800cc30:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800cc34:	2c00      	cmp	r4, #0
 800cc36:	d1ed      	bne.n	800cc14 <pattern_matching+0xc>
 800cc38:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800cc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800cc3e:	1e1f      	subs	r7, r3, #0
 800cc40:	f896 8000 	ldrb.w	r8, [r6]
 800cc44:	bf18      	it	ne
 800cc46:	2701      	movne	r7, #1
 800cc48:	f1b8 0f00 	cmp.w	r8, #0
 800cc4c:	d100      	bne.n	800cc50 <pattern_matching+0x48>
 800cc4e:	bb8f      	cbnz	r7, 800ccb4 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cc50:	4c27      	ldr	r4, [pc, #156]	; (800ccf0 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800cc52:	4630      	mov	r0, r6
{
 800cc54:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800cc56:	46a9      	mov	r9, r5
 800cc58:	e010      	b.n	800cc7c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc5a:	3a20      	subs	r2, #32
 800cc5c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cc5e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc62:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cc66:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc68:	f1bc 0f19 	cmp.w	ip, #25
 800cc6c:	d815      	bhi.n	800cc9a <pattern_matching+0x92>
 800cc6e:	3b20      	subs	r3, #32
 800cc70:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d118      	bne.n	800cca8 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800cc76:	b1eb      	cbz	r3, 800ccb4 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800cc78:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cc7c:	2b3f      	cmp	r3, #63	; 0x3f
 800cc7e:	d01c      	beq.n	800ccba <pattern_matching+0xb2>
 800cc80:	2b2a      	cmp	r3, #42	; 0x2a
 800cc82:	d01a      	beq.n	800ccba <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc84:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cc88:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cc8a:	2919      	cmp	r1, #25
 800cc8c:	d9e5      	bls.n	800cc5a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cc8e:	2a7f      	cmp	r2, #127	; 0x7f
 800cc90:	d9e5      	bls.n	800cc5e <pattern_matching+0x56>
 800cc92:	4423      	add	r3, r4
 800cc94:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800cc98:	e7e1      	b.n	800cc5e <pattern_matching+0x56>
 800cc9a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc9c:	d9e9      	bls.n	800cc72 <pattern_matching+0x6a>
 800cc9e:	4421      	add	r1, r4
 800cca0:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d0e6      	beq.n	800cc76 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cca8:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0c4      	beq.n	800cc38 <pattern_matching+0x30>
 800ccae:	2f00      	cmp	r7, #0
 800ccb0:	d1cf      	bne.n	800cc52 <pattern_matching+0x4a>
 800ccb2:	e7c1      	b.n	800cc38 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ccb4:	2001      	movs	r0, #1
}
 800ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccba:	4601      	mov	r1, r0
				nm = nx = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f811 cb01 	ldrb.w	ip, [r1], #1
 800ccc2:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800ccc4:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ccc8:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800ccca:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800ccce:	bf0c      	ite	eq
 800ccd0:	3201      	addeq	r2, #1
 800ccd2:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800ccd4:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800ccd8:	d0f4      	beq.n	800ccc4 <pattern_matching+0xbc>
 800ccda:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ccde:	d0f1      	beq.n	800ccc4 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800cce0:	4649      	mov	r1, r9
 800cce2:	f7ff ff91 	bl	800cc08 <pattern_matching>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d1e4      	bne.n	800ccb4 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800ccea:	f899 3000 	ldrb.w	r3, [r9]
 800ccee:	e7db      	b.n	800cca8 <pattern_matching+0xa0>
 800ccf0:	0801bbf0 	.word	0x0801bbf0

0800ccf4 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800ccf4:	2300      	movs	r3, #0
{
 800ccf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800ccfa:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800ccfe:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cd00:	69c2      	ldr	r2, [r0, #28]
 800cd02:	2a00      	cmp	r2, #0
 800cd04:	d063      	beq.n	800cdce <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cd06:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800cd08:	4604      	mov	r4, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	3201      	adds	r2, #1
 800cd0e:	d01f      	beq.n	800cd50 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd14:	8818      	ldrh	r0, [r3, #0]
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d063      	beq.n	800cde2 <get_fileinfo+0xee>
 800cd1a:	f101 0715 	add.w	r7, r1, #21
 800cd1e:	2601      	movs	r6, #1
 800cd20:	e000      	b.n	800cd24 <get_fileinfo+0x30>
 800cd22:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cd24:	2100      	movs	r1, #0
 800cd26:	f002 fe33 	bl	800f990 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd2a:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d058      	beq.n	800cde2 <get_fileinfo+0xee>
 800cd30:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800cd34:	d055      	beq.n	800cde2 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800cd36:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd3a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800cd3e:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d1ed      	bne.n	800cd22 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cd46:	442e      	add	r6, r5
 800cd48:	2300      	movs	r3, #0
 800cd4a:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cd4c:	7da8      	ldrb	r0, [r5, #22]
 800cd4e:	e000      	b.n	800cd52 <get_fileinfo+0x5e>
 800cd50:	4618      	mov	r0, r3
	i = j = 0;
 800cd52:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800cd56:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800cd58:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800cd5a:	6a21      	ldr	r1, [r4, #32]
 800cd5c:	5c8b      	ldrb	r3, [r1, r2]
 800cd5e:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800cd60:	2b20      	cmp	r3, #32
 800cd62:	d01b      	beq.n	800cd9c <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	bf08      	it	eq
 800cd68:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800cd6a:	2a09      	cmp	r2, #9
 800cd6c:	d031      	beq.n	800cdd2 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800cd6e:	eb05 010c 	add.w	r1, r5, ip
 800cd72:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800cd74:	b980      	cbnz	r0, 800cd98 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cd76:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800cd7a:	2e19      	cmp	r6, #25
 800cd7c:	d80b      	bhi.n	800cd96 <get_fileinfo+0xa2>
 800cd7e:	6a26      	ldr	r6, [r4, #32]
 800cd80:	2a08      	cmp	r2, #8
 800cd82:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800cd86:	bf8c      	ite	hi
 800cd88:	2610      	movhi	r6, #16
 800cd8a:	2608      	movls	r6, #8
 800cd8c:	ea1e 0f06 	tst.w	lr, r6
 800cd90:	d001      	beq.n	800cd96 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800cd92:	3320      	adds	r3, #32
 800cd94:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800cd96:	758b      	strb	r3, [r1, #22]
		j++;
 800cd98:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800cd9c:	2a0b      	cmp	r2, #11
 800cd9e:	d1dc      	bne.n	800cd5a <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800cda0:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800cda4:	b928      	cbnz	r0, 800cdb2 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800cda6:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cda8:	6a23      	ldr	r3, [r4, #32]
 800cdaa:	7b1b      	ldrb	r3, [r3, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	bf08      	it	eq
 800cdb0:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cdb6:	6a23      	ldr	r3, [r4, #32]
 800cdb8:	7adb      	ldrb	r3, [r3, #11]
 800cdba:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800cdbc:	6a23      	ldr	r3, [r4, #32]
 800cdbe:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cdc0:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800cdc2:	6a23      	ldr	r3, [r4, #32]
 800cdc4:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cdc8:	0c1a      	lsrs	r2, r3, #16
 800cdca:	80eb      	strh	r3, [r5, #6]
 800cdcc:	80aa      	strh	r2, [r5, #4]
}
 800cdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800cdd2:	eb05 010c 	add.w	r1, r5, ip
 800cdd6:	b900      	cbnz	r0, 800cdda <get_fileinfo+0xe6>
 800cdd8:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800cdda:	f10c 0c01 	add.w	ip, ip, #1
 800cdde:	724f      	strb	r7, [r1, #9]
 800cde0:	e7c5      	b.n	800cd6e <get_fileinfo+0x7a>
			i = j = 0;
 800cde2:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cde4:	2300      	movs	r3, #0
 800cde6:	442e      	add	r6, r5
 800cde8:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cdea:	7da8      	ldrb	r0, [r5, #22]
 800cdec:	e7b1      	b.n	800cd52 <get_fileinfo+0x5e>
 800cdee:	bf00      	nop

0800cdf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cdf0:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cdf2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cdf6:	2300      	movs	r3, #0
{
 800cdf8:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cdfa:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cdfc:	70c3      	strb	r3, [r0, #3]
 800cdfe:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce00:	d00c      	beq.n	800ce1c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce02:	460d      	mov	r5, r1
 800ce04:	460a      	mov	r2, r1
 800ce06:	2301      	movs	r3, #1
 800ce08:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800ce0c:	7840      	ldrb	r0, [r0, #1]
 800ce0e:	f7ff fe77 	bl	800cb00 <disk_read>
 800ce12:	b110      	cbz	r0, 800ce1a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ce14:	2004      	movs	r0, #4
			fs->winsect = sector;
 800ce16:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800ce1a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce20:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d11a      	bne.n	800ce5e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ce28:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ce2c:	2be9      	cmp	r3, #233	; 0xe9
 800ce2e:	d007      	beq.n	800ce40 <check_fs+0x50>
 800ce30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce32:	4a0d      	ldr	r2, [pc, #52]	; (800ce68 <check_fs+0x78>)
 800ce34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d001      	beq.n	800ce40 <check_fs+0x50>
	return 2;
 800ce3c:	2002      	movs	r0, #2
}
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800ce40:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce44:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <check_fs+0x7c>)
 800ce46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d009      	beq.n	800ce62 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800ce4e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <check_fs+0x80>)
 800ce54:	1ac0      	subs	r0, r0, r3
 800ce56:	bf18      	it	ne
 800ce58:	2001      	movne	r0, #1
 800ce5a:	0040      	lsls	r0, r0, #1
}
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce5e:	2003      	movs	r0, #3
}
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce62:	2000      	movs	r0, #0
}
 800ce64:	bd70      	pop	{r4, r5, r6, pc}
 800ce66:	bf00      	nop
 800ce68:	009000eb 	.word	0x009000eb
 800ce6c:	00544146 	.word	0x00544146
 800ce70:	33544146 	.word	0x33544146

0800ce74 <move_window>:
{
 800ce74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce76:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 800ce78:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce7a:	428e      	cmp	r6, r1
 800ce7c:	d024      	beq.n	800cec8 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce7e:	78c3      	ldrb	r3, [r0, #3]
 800ce80:	460d      	mov	r5, r1
 800ce82:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce84:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce88:	b963      	cbnz	r3, 800cea4 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	462a      	mov	r2, r5
 800ce8e:	7860      	ldrb	r0, [r4, #1]
 800ce90:	f7ff fe36 	bl	800cb00 <disk_read>
 800ce94:	b910      	cbnz	r0, 800ce9c <move_window+0x28>
			fs->winsect = sector;
 800ce96:	6325      	str	r5, [r4, #48]	; 0x30
}
 800ce98:	b003      	add	sp, #12
 800ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800ce9c:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cea2:	e7f8      	b.n	800ce96 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cea4:	2301      	movs	r3, #1
 800cea6:	4632      	mov	r2, r6
 800cea8:	7840      	ldrb	r0, [r0, #1]
 800ceaa:	9101      	str	r1, [sp, #4]
 800ceac:	f7ff fe38 	bl	800cb20 <disk_write>
 800ceb0:	b9d0      	cbnz	r0, 800cee8 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ceb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ceb4:	69e3      	ldr	r3, [r4, #28]
 800ceb6:	1ab2      	subs	r2, r6, r2
 800ceb8:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800ceba:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d2e4      	bcs.n	800ce8a <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cec0:	78a7      	ldrb	r7, [r4, #2]
 800cec2:	2f01      	cmp	r7, #1
 800cec4:	d804      	bhi.n	800ced0 <move_window+0x5c>
 800cec6:	e7e0      	b.n	800ce8a <move_window+0x16>
	FRESULT res = FR_OK;
 800cec8:	2000      	movs	r0, #0
}
 800ceca:	b003      	add	sp, #12
 800cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 800cece:	69e3      	ldr	r3, [r4, #28]
 800ced0:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ced2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ced4:	2301      	movs	r3, #1
 800ced6:	7860      	ldrb	r0, [r4, #1]
 800ced8:	4632      	mov	r2, r6
 800ceda:	9101      	str	r1, [sp, #4]
 800cedc:	f7ff fe20 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cee0:	2f01      	cmp	r7, #1
 800cee2:	9901      	ldr	r1, [sp, #4]
 800cee4:	d1f3      	bne.n	800cece <move_window+0x5a>
 800cee6:	e7d0      	b.n	800ce8a <move_window+0x16>
			res = FR_DISK_ERR;
 800cee8:	2001      	movs	r0, #1
}
 800ceea:	b003      	add	sp, #12
 800ceec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceee:	bf00      	nop

0800cef0 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cef0:	2300      	movs	r3, #0
{
 800cef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800cef6:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800cef8:	6804      	ldr	r4, [r0, #0]
 800cefa:	b18c      	cbz	r4, 800cf20 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cefc:	7825      	ldrb	r5, [r4, #0]
 800cefe:	2d1f      	cmp	r5, #31
 800cf00:	d912      	bls.n	800cf28 <find_volume+0x38>
 800cf02:	2d3a      	cmp	r5, #58	; 0x3a
 800cf04:	d010      	beq.n	800cf28 <find_volume+0x38>
 800cf06:	46a4      	mov	ip, r4
 800cf08:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800cf0c:	2b1f      	cmp	r3, #31
 800cf0e:	d90d      	bls.n	800cf2c <find_volume+0x3c>
 800cf10:	2b3a      	cmp	r3, #58	; 0x3a
 800cf12:	d1f9      	bne.n	800cf08 <find_volume+0x18>
			i = *tp++ - '0';
 800cf14:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cf16:	45a4      	cmp	ip, r4
 800cf18:	d102      	bne.n	800cf20 <find_volume+0x30>
 800cf1a:	2d30      	cmp	r5, #48	; 0x30
 800cf1c:	f000 80da 	beq.w	800d0d4 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf20:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800cf22:	4620      	mov	r0, r4
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf28:	462b      	mov	r3, r5
 800cf2a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf2c:	2b3a      	cmp	r3, #58	; 0x3a
 800cf2e:	d0f1      	beq.n	800cf14 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf30:	4ba3      	ldr	r3, [pc, #652]	; (800d1c0 <find_volume+0x2d0>)
 800cf32:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf34:	2d00      	cmp	r5, #0
 800cf36:	f000 80c9 	beq.w	800d0cc <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800cf3a:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cf3c:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf40:	782b      	ldrb	r3, [r5, #0]
 800cf42:	b17b      	cbz	r3, 800cf64 <find_volume+0x74>
		stat = disk_status(fs->drv);
 800cf44:	7868      	ldrb	r0, [r5, #1]
 800cf46:	f7ff fdbf 	bl	800cac8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf4a:	07c1      	lsls	r1, r0, #31
 800cf4c:	d40a      	bmi.n	800cf64 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	f000 80ab 	beq.w	800d0aa <find_volume+0x1ba>
 800cf54:	f010 0404 	ands.w	r4, r0, #4
 800cf58:	f000 80a7 	beq.w	800d0aa <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800cf5c:	240a      	movs	r4, #10
}
 800cf5e:	4620      	mov	r0, r4
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800cf64:	2000      	movs	r0, #0
 800cf66:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf68:	f7ff fdb8 	bl	800cadc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf6c:	07c2      	lsls	r2, r0, #31
 800cf6e:	f100 809f 	bmi.w	800d0b0 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf72:	b10c      	cbz	r4, 800cf78 <find_volume+0x88>
 800cf74:	0743      	lsls	r3, r0, #29
 800cf76:	d4f1      	bmi.n	800cf5c <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf78:	2100      	movs	r1, #0
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	f7ff ff38 	bl	800cdf0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf80:	2802      	cmp	r0, #2
 800cf82:	d077      	beq.n	800d074 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf84:	2804      	cmp	r0, #4
 800cf86:	f000 809f 	beq.w	800d0c8 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf8a:	2801      	cmp	r0, #1
 800cf8c:	f200 808c 	bhi.w	800d0a8 <find_volume+0x1b8>
	bsect = 0;
 800cf90:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf92:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800cf96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf9a:	f040 8085 	bne.w	800d0a8 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf9e:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cfa2:	b902      	cbnz	r2, 800cfa6 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800cfa4:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cfa6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800cfaa:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cfac:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cfae:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cfb0:	2901      	cmp	r1, #1
 800cfb2:	d879      	bhi.n	800d0a8 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cfb4:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800cfb8:	b288      	uxth	r0, r1
 800cfba:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d073      	beq.n	800d0a8 <find_volume+0x1b8>
 800cfc0:	1e48      	subs	r0, r1, #1
 800cfc2:	4208      	tst	r0, r1
 800cfc4:	d170      	bne.n	800d0a8 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfc6:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cfca:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfce:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cfd2:	d169      	bne.n	800d0a8 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cfd4:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cfd8:	b900      	cbnz	r0, 800cfdc <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800cfda:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cfdc:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cfe0:	2f00      	cmp	r7, #0
 800cfe2:	d061      	beq.n	800d0a8 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cfe4:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cfe8:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800cfec:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cfee:	42b0      	cmp	r0, r6
 800cff0:	d35a      	bcc.n	800d0a8 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cff2:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cff6:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cff8:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cffc:	d354      	bcc.n	800d0a8 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cffe:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800d002:	4288      	cmp	r0, r1
 800d004:	f200 8084 	bhi.w	800d110 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d008:	f640 71f5 	movw	r1, #4085	; 0xff5
 800d00c:	4288      	cmp	r0, r1
 800d00e:	f200 80a3 	bhi.w	800d158 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d012:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d014:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d016:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d018:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d01a:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d01c:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d01e:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d020:	f1bc 0f00 	cmp.w	ip, #0
 800d024:	d040      	beq.n	800d0a8 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d026:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800d02a:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d02e:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d030:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800d034:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d036:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d03a:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d03c:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800d040:	d332      	bcc.n	800d0a8 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d046:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d048:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800d04c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800d04e:	495d      	ldr	r1, [pc, #372]	; (800d1c4 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800d050:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d052:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d054:	485c      	ldr	r0, [pc, #368]	; (800d1c8 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d056:	4a5d      	ldr	r2, [pc, #372]	; (800d1cc <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800d058:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d05a:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d05c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d05e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d060:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800d062:	800b      	strh	r3, [r1, #0]
 800d064:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d066:	f000 8085 	beq.w	800d174 <find_volume+0x284>
 800d06a:	6913      	ldr	r3, [r2, #16]
 800d06c:	429d      	cmp	r5, r3
 800d06e:	d06f      	beq.n	800d150 <find_volume+0x260>
	return FR_OK;
 800d070:	2400      	movs	r4, #0
 800d072:	e01a      	b.n	800d0aa <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d074:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800d078:	b10e      	cbz	r6, 800d07e <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800d07a:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d07e:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800d082:	b10c      	cbz	r4, 800d088 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800d084:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d088:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800d08c:	b303      	cbz	r3, 800d0d0 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800d08e:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d092:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800d096:	b10f      	cbz	r7, 800d09c <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800d098:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d09c:	b9f6      	cbnz	r6, 800d0dc <find_volume+0x1ec>
 800d09e:	bb2c      	cbnz	r4, 800d0ec <find_volume+0x1fc>
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	d12c      	bne.n	800d100 <find_volume+0x210>
 800d0a6:	b93f      	cbnz	r7, 800d0b8 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0a8:	240d      	movs	r4, #13
}
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d0b0:	2403      	movs	r4, #3
}
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f7ff fe98 	bl	800cdf0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0c0:	2801      	cmp	r0, #1
 800d0c2:	d95a      	bls.n	800d17a <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0c4:	2804      	cmp	r0, #4
 800d0c6:	d1ef      	bne.n	800d0a8 <find_volume+0x1b8>
 800d0c8:	2401      	movs	r4, #1
 800d0ca:	e7ee      	b.n	800d0aa <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0cc:	240c      	movs	r4, #12
 800d0ce:	e7ec      	b.n	800d0aa <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d0d0:	4698      	mov	r8, r3
 800d0d2:	e7de      	b.n	800d092 <find_volume+0x1a2>
					*path = ++tt;
 800d0d4:	f10c 0301 	add.w	r3, ip, #1
 800d0d8:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0da:	e729      	b.n	800cf30 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f7ff fe86 	bl	800cdf0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0e4:	2801      	cmp	r0, #1
 800d0e6:	d8da      	bhi.n	800d09e <find_volume+0x1ae>
 800d0e8:	4634      	mov	r4, r6
 800d0ea:	e752      	b.n	800cf92 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f7ff fe7e 	bl	800cdf0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0f4:	2801      	cmp	r0, #1
 800d0f6:	f67f af4c 	bls.w	800cf92 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0fa:	f1b8 0f00 	cmp.w	r8, #0
 800d0fe:	d0d2      	beq.n	800d0a6 <find_volume+0x1b6>
 800d100:	4641      	mov	r1, r8
 800d102:	4628      	mov	r0, r5
 800d104:	f7ff fe74 	bl	800cdf0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d108:	2801      	cmp	r0, #1
 800d10a:	d8cc      	bhi.n	800d0a6 <find_volume+0x1b6>
 800d10c:	4644      	mov	r4, r8
 800d10e:	e740      	b.n	800cf92 <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d110:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d114:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d116:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d118:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d11a:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d11e:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d120:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d122:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d124:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d126:	d1bf      	bne.n	800d0a8 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d128:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800d12a:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d12c:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d130:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d132:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800d136:	d3b7      	bcc.n	800d0a8 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d138:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d140:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d142:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800d144:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d146:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d14a:	d018      	beq.n	800d17e <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d14c:	2003      	movs	r0, #3
 800d14e:	e77e      	b.n	800d04e <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d150:	2300      	movs	r3, #0
	return FR_OK;
 800d152:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d154:	6113      	str	r3, [r2, #16]
 800d156:	e7a8      	b.n	800d0aa <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d158:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d15a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d15c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d15e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d160:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d162:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d164:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d166:	f1bc 0f00 	cmp.w	ip, #0
 800d16a:	d09d      	beq.n	800d0a8 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d16c:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d16e:	0049      	lsls	r1, r1, #1
 800d170:	2002      	movs	r0, #2
 800d172:	e760      	b.n	800d036 <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	6013      	str	r3, [r2, #0]
 800d178:	e777      	b.n	800d06a <find_volume+0x17a>
 800d17a:	463c      	mov	r4, r7
 800d17c:	e709      	b.n	800cf92 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d17e:	1c61      	adds	r1, r4, #1
 800d180:	4628      	mov	r0, r5
 800d182:	f7ff fe77 	bl	800ce74 <move_window>
 800d186:	2800      	cmp	r0, #0
 800d188:	d1e0      	bne.n	800d14c <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d18a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d18e:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800d192:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d194:	429a      	cmp	r2, r3
 800d196:	d1d9      	bne.n	800d14c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800d198:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d19a:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <find_volume+0x2e0>)
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d1d5      	bne.n	800d14c <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1a0:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800d1a4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d1ac:	3320      	adds	r3, #32
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d1cc      	bne.n	800d14c <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d1b2:	2003      	movs	r0, #3
 800d1b4:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
 800d1b8:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800d1bc:	e747      	b.n	800d04e <find_volume+0x15e>
 800d1be:	bf00      	nop
 800d1c0:	2001dd64 	.word	0x2001dd64
 800d1c4:	2001dd88 	.word	0x2001dd88
 800d1c8:	2001dd8c 	.word	0x2001dd8c
 800d1cc:	2001dd68 	.word	0x2001dd68
 800d1d0:	41615252 	.word	0x41615252

0800d1d4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d1d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 800d1d8:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
 800d1de:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 800d1e0:	2e02      	cmp	r6, #2
 800d1e2:	d007      	beq.n	800d1f4 <put_fat.part.0+0x20>
 800d1e4:	2e03      	cmp	r6, #3
 800d1e6:	d041      	beq.n	800d26c <put_fat.part.0+0x98>
 800d1e8:	2e01      	cmp	r6, #1
 800d1ea:	d01b      	beq.n	800d224 <put_fat.part.0+0x50>
 800d1ec:	2702      	movs	r7, #2
}
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d1f4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d1f6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d1fa:	f7ff fe3b 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800d1fe:	4607      	mov	r7, r0
 800d200:	2800      	cmp	r0, #0
 800d202:	d1f4      	bne.n	800d1ee <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d204:	006d      	lsls	r5, r5, #1
 800d206:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800d20a:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 800d20e:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d210:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 800d214:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d216:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d21a:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800d21c:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 800d21e:	70e1      	strb	r1, [r4, #3]
}
 800d220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d224:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d226:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d22a:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d22e:	f7ff fe21 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800d232:	4607      	mov	r7, r0
 800d234:	2800      	cmp	r0, #0
 800d236:	d1da      	bne.n	800d1ee <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d238:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800d23a:	f109 0b01 	add.w	fp, r9, #1
 800d23e:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 800d242:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d246:	d52a      	bpl.n	800d29e <put_fat.part.0+0xca>
 800d248:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d24c:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d24e:	f003 030f 	and.w	r3, r3, #15
 800d252:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 800d256:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d25a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d25c:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d25e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d262:	f7ff fe07 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800d266:	b3a0      	cbz	r0, 800d2d2 <put_fat.part.0+0xfe>
 800d268:	4607      	mov	r7, r0
	return res;
 800d26a:	e7c0      	b.n	800d1ee <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d26c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d26e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d272:	f7ff fdff 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800d276:	4607      	mov	r7, r0
 800d278:	2800      	cmp	r0, #0
 800d27a:	d1b8      	bne.n	800d1ee <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d27c:	00ad      	lsls	r5, r5, #2
 800d27e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800d282:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 800d286:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d288:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d28c:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d28e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d292:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d294:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 800d296:	70e0      	strb	r0, [r4, #3]
}
 800d298:	4638      	mov	r0, r7
 800d29a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d29e:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d2a6:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2a8:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d2ac:	f7ff fde2 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d1d9      	bne.n	800d268 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 800d2b4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2b8:	f3c8 2203 	ubfx	r2, r8, #8, #4
 800d2bc:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 800d2c0:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2c2:	f023 030f 	bic.w	r3, r3, #15
 800d2c6:	4313      	orrs	r3, r2
			fs->wflag = 1;
 800d2c8:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2ca:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 800d2ce:	70e2      	strb	r2, [r4, #3]
			break;
 800d2d0:	e78d      	b.n	800d1ee <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800d2d2:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2d6:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 800d2da:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2dc:	e7f4      	b.n	800d2c8 <put_fat.part.0+0xf4>
 800d2de:	bf00      	nop

0800d2e0 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2e0:	2901      	cmp	r1, #1
 800d2e2:	d90e      	bls.n	800d302 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2e6:	6983      	ldr	r3, [r0, #24]
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	4299      	cmp	r1, r3
 800d2ee:	d206      	bcs.n	800d2fe <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800d2f0:	7803      	ldrb	r3, [r0, #0]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d021      	beq.n	800d33a <get_fat.isra.0+0x5a>
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d010      	beq.n	800d31c <get_fat.isra.0+0x3c>
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d003      	beq.n	800d306 <get_fat.isra.0+0x26>
 800d2fe:	2001      	movs	r0, #1
}
 800d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d302:	2001      	movs	r0, #1
}
 800d304:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d306:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d308:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d30c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d310:	f7ff fdb0 	bl	800ce74 <move_window>
 800d314:	b1f0      	cbz	r0, 800d354 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d31c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d31e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d322:	f7ff fda7 	bl	800ce74 <move_window>
 800d326:	2800      	cmp	r0, #0
 800d328:	d1f5      	bne.n	800d316 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d32a:	00a4      	lsls	r4, r4, #2
 800d32c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d330:	4425      	add	r5, r4
 800d332:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d334:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800d338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d33a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d33c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d340:	f7ff fd98 	bl	800ce74 <move_window>
 800d344:	2800      	cmp	r0, #0
 800d346:	d1e6      	bne.n	800d316 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d348:	0063      	lsls	r3, r4, #1
 800d34a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d34e:	442b      	add	r3, r5
 800d350:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 800d352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800d354:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d358:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d35a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d35c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d35e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d360:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d364:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d368:	f7ff fd84 	bl	800ce74 <move_window>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d1d2      	bne.n	800d316 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d370:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d374:	442f      	add	r7, r5
 800d376:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d37a:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d37e:	07e3      	lsls	r3, r4, #31
 800d380:	bf4c      	ite	mi
 800d382:	0900      	lsrmi	r0, r0, #4
 800d384:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800d388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38a:	bf00      	nop

0800d38c <dir_read>:
{
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800d390:	69c6      	ldr	r6, [r0, #28]
{
 800d392:	b083      	sub	sp, #12
 800d394:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d396:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800d398:	2e00      	cmp	r6, #0
 800d39a:	d064      	beq.n	800d466 <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800d39c:	23ff      	movs	r3, #255	; 0xff
 800d39e:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d3a0:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800d3a4:	4698      	mov	r8, r3
 800d3a6:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d3a8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d3aa:	42b5      	cmp	r5, r6
 800d3ac:	d014      	beq.n	800d3d8 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d3ae:	78fb      	ldrb	r3, [r7, #3]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f040 80d1 	bne.w	800d558 <dir_read+0x1cc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	7878      	ldrb	r0, [r7, #1]
 800d3be:	f7ff fb9f 	bl	800cb00 <disk_read>
 800d3c2:	b140      	cbz	r0, 800d3d6 <dir_read+0x4a>
			fs->winsect = sector;
 800d3c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800d3c8:	2001      	movs	r0, #1
			fs->winsect = sector;
 800d3ca:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61e3      	str	r3, [r4, #28]
}
 800d3d0:	b003      	add	sp, #12
 800d3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d3d6:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d3d8:	6a21      	ldr	r1, [r4, #32]
 800d3da:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	d042      	beq.n	800d466 <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d3e0:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d3e2:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d3e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3e8:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d3ea:	d00a      	beq.n	800d402 <dir_read+0x76>
 800d3ec:	2a2e      	cmp	r2, #46	; 0x2e
 800d3ee:	d008      	beq.n	800d402 <dir_read+0x76>
 800d3f0:	f023 0020 	bic.w	r0, r3, #32
 800d3f4:	f1a0 0008 	sub.w	r0, r0, #8
 800d3f8:	fab0 f080 	clz	r0, r0
 800d3fc:	0940      	lsrs	r0, r0, #5
 800d3fe:	4550      	cmp	r0, sl
 800d400:	d038      	beq.n	800d474 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d402:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d406:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d408:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d40a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d40c:	69e6      	ldr	r6, [r4, #28]
 800d40e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800d412:	d228      	bcs.n	800d466 <dir_read+0xda>
 800d414:	b33e      	cbz	r6, 800d466 <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d416:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d41a:	bb32      	cbnz	r2, 800d46a <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800d41c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800d41e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d420:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d422:	b961      	cbnz	r1, 800d43e <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d424:	891a      	ldrh	r2, [r3, #8]
 800d426:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800d42a:	d91c      	bls.n	800d466 <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d42c:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d42e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d430:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d432:	2e00      	cmp	r6, #0
 800d434:	d1b8      	bne.n	800d3a8 <dir_read+0x1c>
		res = move_window(fs, dp->sect);
 800d436:	2000      	movs	r0, #0
}
 800d438:	b003      	add	sp, #12
 800d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d43e:	895a      	ldrh	r2, [r3, #10]
 800d440:	3a01      	subs	r2, #1
 800d442:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800d446:	d1f1      	bne.n	800d42c <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d448:	4618      	mov	r0, r3
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	f7ff ff48 	bl	800d2e0 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d450:	2801      	cmp	r0, #1
 800d452:	f240 80b5 	bls.w	800d5c0 <dir_read+0x234>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	f000 8085 	beq.w	800d566 <dir_read+0x1da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d45c:	9b01      	ldr	r3, [sp, #4]
 800d45e:	699a      	ldr	r2, [r3, #24]
 800d460:	4290      	cmp	r0, r2
 800d462:	f0c0 80a1 	bcc.w	800d5a8 <dir_read+0x21c>
	FRESULT res = FR_NO_FILE;
 800d466:	2004      	movs	r0, #4
 800d468:	e7b0      	b.n	800d3cc <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d46a:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d46c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d46e:	4413      	add	r3, r2
 800d470:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d472:	e799      	b.n	800d3a8 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d474:	2b0f      	cmp	r3, #15
 800d476:	f040 80ab 	bne.w	800d5d0 <dir_read+0x244>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d47a:	0650      	lsls	r0, r2, #25
 800d47c:	d575      	bpl.n	800d56a <dir_read+0x1de>
						sum = dp->dir[LDIR_Chksum];
 800d47e:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800d480:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800d484:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d48a:	7b4b      	ldrb	r3, [r1, #13]
 800d48c:	9a00      	ldr	r2, [sp, #0]
 800d48e:	4293      	cmp	r3, r2
 800d490:	d1b7      	bne.n	800d402 <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d492:	8b4b      	ldrh	r3, [r1, #26]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1b4      	bne.n	800d402 <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d498:	780b      	ldrb	r3, [r1, #0]
 800d49a:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800d49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d4a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d4ac:	2bfe      	cmp	r3, #254	; 0xfe
 800d4ae:	d8a8      	bhi.n	800d402 <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d4b0:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800d4b8:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f040 8090 	bne.w	800d5e2 <dir_read+0x256>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4c6:	429e      	cmp	r6, r3
 800d4c8:	d19b      	bne.n	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d4ca:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4d2:	459e      	cmp	lr, r3
 800d4d4:	d195      	bne.n	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d4d6:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4de:	459c      	cmp	ip, r3
 800d4e0:	d18f      	bne.n	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d4e2:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4ea:	429e      	cmp	r6, r3
 800d4ec:	d189      	bne.n	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d4ee:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4f6:	459c      	cmp	ip, r3
 800d4f8:	d183      	bne.n	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d4fa:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d502:	459e      	cmp	lr, r3
 800d504:	f47f af7d 	bne.w	800d402 <dir_read+0x76>
	rv = rv << 8 | ptr[0];
 800d508:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d50a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d50e:	429e      	cmp	r6, r3
 800d510:	f47f af77 	bne.w	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d514:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d51c:	459c      	cmp	ip, r3
 800d51e:	f47f af70 	bne.w	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d522:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d528:	429e      	cmp	r6, r3
 800d52a:	f47f af6a 	bne.w	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d52e:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d536:	459c      	cmp	ip, r3
 800d538:	f47f af63 	bne.w	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d53c:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d542:	429e      	cmp	r6, r3
 800d544:	f47f af5d 	bne.w	800d402 <dir_read+0x76>
	rv = ptr[1];
 800d548:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d550:	459c      	cmp	ip, r3
 800d552:	f000 80ca 	beq.w	800d6ea <dir_read+0x35e>
 800d556:	e754      	b.n	800d402 <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d558:	2301      	movs	r3, #1
 800d55a:	462a      	mov	r2, r5
 800d55c:	4649      	mov	r1, r9
 800d55e:	7878      	ldrb	r0, [r7, #1]
 800d560:	f7ff fade 	bl	800cb20 <disk_write>
 800d564:	b128      	cbz	r0, 800d572 <dir_read+0x1e6>
	FRESULT res = FR_NO_FILE;
 800d566:	2001      	movs	r0, #1
 800d568:	e730      	b.n	800d3cc <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d56a:	4542      	cmp	r2, r8
 800d56c:	f47f af49 	bne.w	800d402 <dir_read+0x76>
 800d570:	e78b      	b.n	800d48a <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800d574:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d576:	1aea      	subs	r2, r5, r3
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f4bf af1b 	bcs.w	800d3b6 <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d580:	f897 b002 	ldrb.w	fp, [r7, #2]
 800d584:	f1bb 0f01 	cmp.w	fp, #1
 800d588:	d801      	bhi.n	800d58e <dir_read+0x202>
 800d58a:	e714      	b.n	800d3b6 <dir_read+0x2a>
					wsect += fs->fsize;
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d590:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800d594:	2301      	movs	r3, #1
 800d596:	4649      	mov	r1, r9
 800d598:	462a      	mov	r2, r5
 800d59a:	7878      	ldrb	r0, [r7, #1]
 800d59c:	f7ff fac0 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5a0:	f1bb 0f01 	cmp.w	fp, #1
 800d5a4:	d1f2      	bne.n	800d58c <dir_read+0x200>
 800d5a6:	e706      	b.n	800d3b6 <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800d5a8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d5aa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d5ac:	699a      	ldr	r2, [r3, #24]
 800d5ae:	3a02      	subs	r2, #2
 800d5b0:	4290      	cmp	r0, r2
 800d5b2:	d207      	bcs.n	800d5c4 <dir_read+0x238>
	return clst * fs->csize + fs->database;
 800d5b4:	895a      	ldrh	r2, [r3, #10]
 800d5b6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800d5b8:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800d5bc:	61e6      	str	r6, [r4, #28]
 800d5be:	e735      	b.n	800d42c <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d5c0:	2002      	movs	r0, #2
 800d5c2:	e703      	b.n	800d3cc <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5c4:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d5c6:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800d5ca:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5cc:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d5ce:	e732      	b.n	800d436 <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d5d0:	f1b8 0f00 	cmp.w	r8, #0
 800d5d4:	f000 8096 	beq.w	800d704 <dir_read+0x378>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d5d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800d5dc:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d5de:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d5e0:	e6f6      	b.n	800d3d0 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d5e2:	2aff      	cmp	r2, #255	; 0xff
 800d5e4:	f000 80d9 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d5e8:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 800d5ec:	0050      	lsls	r0, r2, #1
 800d5ee:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800d5f2:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800d5f4:	2e00      	cmp	r6, #0
 800d5f6:	f43f af6a 	beq.w	800d4ce <dir_read+0x142>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d5fa:	2aff      	cmp	r2, #255	; 0xff
 800d5fc:	f000 80cd 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d600:	4428      	add	r0, r5
 800d602:	1cda      	adds	r2, r3, #3
 800d604:	f8a0 e002 	strh.w	lr, [r0, #2]
 800d608:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800d60c:	f1be 0f00 	cmp.w	lr, #0
 800d610:	f43f af63 	beq.w	800d4da <dir_read+0x14e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d614:	2aff      	cmp	r2, #255	; 0xff
 800d616:	f000 80c0 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d61a:	f8a0 c004 	strh.w	ip, [r0, #4]
 800d61e:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 800d620:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800d624:	f1bc 0f00 	cmp.w	ip, #0
 800d628:	f43f af5d 	beq.w	800d4e6 <dir_read+0x15a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d62c:	2aff      	cmp	r2, #255	; 0xff
 800d62e:	f000 80b4 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d632:	80c6      	strh	r6, [r0, #6]
 800d634:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 800d636:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800d63a:	2e00      	cmp	r6, #0
 800d63c:	f43f af59 	beq.w	800d4f2 <dir_read+0x166>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d640:	2aff      	cmp	r2, #255	; 0xff
 800d642:	f000 80aa 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d646:	f8a0 c008 	strh.w	ip, [r0, #8]
 800d64a:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 800d64c:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800d650:	f1bc 0f00 	cmp.w	ip, #0
 800d654:	f43f af53 	beq.w	800d4fe <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d658:	2aff      	cmp	r2, #255	; 0xff
 800d65a:	f000 809e 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d65e:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800d662:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 800d664:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800d666:	f1be 0f00 	cmp.w	lr, #0
 800d66a:	f43f af4e 	beq.w	800d50a <dir_read+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d66e:	2aff      	cmp	r2, #255	; 0xff
 800d670:	f000 8093 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d674:	8186      	strh	r6, [r0, #12]
 800d676:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 800d67a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800d67e:	2e00      	cmp	r6, #0
 800d680:	f43f af4a 	beq.w	800d518 <dir_read+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d684:	2aff      	cmp	r2, #255	; 0xff
 800d686:	f000 8088 	beq.w	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d68a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800d68e:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 800d692:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800d694:	f1bc 0f00 	cmp.w	ip, #0
 800d698:	f43f af44 	beq.w	800d524 <dir_read+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d69c:	2aff      	cmp	r2, #255	; 0xff
 800d69e:	d07c      	beq.n	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6a0:	8206      	strh	r6, [r0, #16]
 800d6a2:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 800d6a6:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800d6aa:	2e00      	cmp	r6, #0
 800d6ac:	f43f af41 	beq.w	800d532 <dir_read+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6b0:	2aff      	cmp	r2, #255	; 0xff
 800d6b2:	d072      	beq.n	800d79a <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6b4:	f8a0 c012 	strh.w	ip, [r0, #18]
 800d6b8:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 800d6bc:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800d6be:	f1bc 0f00 	cmp.w	ip, #0
 800d6c2:	f43f af3c 	beq.w	800d53e <dir_read+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6c6:	2aff      	cmp	r2, #255	; 0xff
 800d6c8:	f43f ae9b 	beq.w	800d402 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6cc:	8286      	strh	r6, [r0, #20]
 800d6ce:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 800d6d2:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800d6d6:	2e00      	cmp	r6, #0
 800d6d8:	f43f af38 	beq.w	800d54c <dir_read+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6dc:	2aff      	cmp	r2, #255	; 0xff
 800d6de:	f43f ae90 	beq.w	800d402 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6e2:	f103 020d 	add.w	r2, r3, #13
 800d6e6:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d6ea:	780b      	ldrb	r3, [r1, #0]
 800d6ec:	0659      	lsls	r1, r3, #25
 800d6ee:	d504      	bpl.n	800d6fa <dir_read+0x36e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d6f0:	2aff      	cmp	r2, #255	; 0xff
 800d6f2:	d052      	beq.n	800d79a <dir_read+0x40e>
		lfnbuf[i] = 0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d6fe:	fa5f f888 	uxtb.w	r8, r8
 800d702:	e680      	b.n	800d406 <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d704:	780b      	ldrb	r3, [r1, #0]
 800d706:	01da      	lsls	r2, r3, #7
 800d708:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800d70c:	784b      	ldrb	r3, [r1, #1]
 800d70e:	441a      	add	r2, r3
 800d710:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d714:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d718:	788a      	ldrb	r2, [r1, #2]
 800d71a:	fa52 f383 	uxtab	r3, r2, r3
 800d71e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d722:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d726:	78cb      	ldrb	r3, [r1, #3]
 800d728:	fa53 f282 	uxtab	r2, r3, r2
 800d72c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d730:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d734:	790a      	ldrb	r2, [r1, #4]
 800d736:	fa52 f383 	uxtab	r3, r2, r3
 800d73a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d73e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d742:	794b      	ldrb	r3, [r1, #5]
 800d744:	fa53 f282 	uxtab	r2, r3, r2
 800d748:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d74c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d750:	798a      	ldrb	r2, [r1, #6]
 800d752:	fa52 f383 	uxtab	r3, r2, r3
 800d756:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d75a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d75e:	79cb      	ldrb	r3, [r1, #7]
 800d760:	fa53 f282 	uxtab	r2, r3, r2
 800d764:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d768:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d76c:	7a0a      	ldrb	r2, [r1, #8]
 800d76e:	fa52 f383 	uxtab	r3, r2, r3
 800d772:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d776:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d77a:	7a4b      	ldrb	r3, [r1, #9]
 800d77c:	7a89      	ldrb	r1, [r1, #10]
 800d77e:	fa53 f282 	uxtab	r2, r3, r2
 800d782:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d786:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d78a:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d78c:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d790:	b2db      	uxtb	r3, r3
 800d792:	4293      	cmp	r3, r2
 800d794:	f47f af20 	bne.w	800d5d8 <dir_read+0x24c>
 800d798:	e64d      	b.n	800d436 <dir_read+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d79a:	4690      	mov	r8, r2
 800d79c:	e633      	b.n	800d406 <dir_read+0x7a>
 800d79e:	bf00      	nop

0800d7a0 <sync_fs>:
{
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a2:	78c3      	ldrb	r3, [r0, #3]
{
 800d7a4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a6:	b95b      	cbnz	r3, 800d7c0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d7a8:	7823      	ldrb	r3, [r4, #0]
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d029      	beq.n	800d802 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	7860      	ldrb	r0, [r4, #1]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	f7ff f9c4 	bl	800cb40 <disk_ioctl>
			res = FR_DISK_ERR;
 800d7b8:	3800      	subs	r0, #0
 800d7ba:	bf18      	it	ne
 800d7bc:	2001      	movne	r0, #1
}
 800d7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800d7c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7c2:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	7840      	ldrb	r0, [r0, #1]
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	f7ff f9a7 	bl	800cb20 <disk_write>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d13e      	bne.n	800d854 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d7d8:	69e3      	ldr	r3, [r4, #28]
 800d7da:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800d7dc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d2e2      	bcs.n	800d7a8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7e2:	78a6      	ldrb	r6, [r4, #2]
 800d7e4:	2e01      	cmp	r6, #1
 800d7e6:	d801      	bhi.n	800d7ec <sync_fs+0x4c>
 800d7e8:	e7de      	b.n	800d7a8 <sync_fs+0x8>
					wsect += fs->fsize;
 800d7ea:	69e3      	ldr	r3, [r4, #28]
 800d7ec:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7ee:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	462a      	mov	r2, r5
 800d7f6:	7860      	ldrb	r0, [r4, #1]
 800d7f8:	f7ff f992 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7fc:	2e01      	cmp	r6, #1
 800d7fe:	d1f4      	bne.n	800d7ea <sync_fs+0x4a>
 800d800:	e7d2      	b.n	800d7a8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d802:	7925      	ldrb	r5, [r4, #4]
 800d804:	2d01      	cmp	r5, #1
 800d806:	d1d2      	bne.n	800d7ae <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800d808:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800d80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d810:	2100      	movs	r1, #0
 800d812:	4630      	mov	r0, r6
 800d814:	f00b fa14 	bl	8018c40 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800d818:	480f      	ldr	r0, [pc, #60]	; (800d858 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800d81a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800d81e:	6360      	str	r0, [r4, #52]	; 0x34
 800d820:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800d824:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d828:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800d82a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800d82e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d832:	3020      	adds	r0, #32
 800d834:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 800d838:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800d83a:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d83e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800d840:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800d842:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d846:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800d848:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d84a:	f7ff f969 	bl	800cb20 <disk_write>
			fs->fsi_flag = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	7123      	strb	r3, [r4, #4]
 800d852:	e7ac      	b.n	800d7ae <sync_fs+0xe>
			res = FR_DISK_ERR;
 800d854:	2001      	movs	r0, #1
}
 800d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d858:	41615252 	.word	0x41615252

0800d85c <create_chain>:
{
 800d85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 800d862:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 800d864:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800d868:	2900      	cmp	r1, #0
 800d86a:	f040 80a7 	bne.w	800d9bc <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d86e:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d872:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d876:	b9c6      	cbnz	r6, 800d8aa <create_chain+0x4e>
 800d878:	2601      	movs	r6, #1
 800d87a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800d87c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d87e:	429c      	cmp	r4, r3
 800d880:	d317      	bcc.n	800d8b2 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 800d882:	2e01      	cmp	r6, #1
 800d884:	f000 8096 	beq.w	800d9b4 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d888:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 800d88c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d88e:	69ab      	ldr	r3, [r5, #24]
 800d890:	42a3      	cmp	r3, r4
 800d892:	d906      	bls.n	800d8a2 <create_chain+0x46>
		switch (fs->fs_type) {
 800d894:	782b      	ldrb	r3, [r5, #0]
 800d896:	2b02      	cmp	r3, #2
 800d898:	d07e      	beq.n	800d998 <create_chain+0x13c>
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d064      	beq.n	800d968 <create_chain+0x10c>
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d00c      	beq.n	800d8bc <create_chain+0x60>
 800d8a2:	2401      	movs	r4, #1
}
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d8aa:	42b3      	cmp	r3, r6
 800d8ac:	bf98      	it	ls
 800d8ae:	2601      	movls	r6, #1
 800d8b0:	e7e3      	b.n	800d87a <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d8b2:	2c01      	cmp	r4, #1
 800d8b4:	f8d9 5000 	ldr.w	r5, [r9]
 800d8b8:	d9f3      	bls.n	800d8a2 <create_chain+0x46>
 800d8ba:	e7e8      	b.n	800d88e <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d8be:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d8c8:	f7ff fad4 	bl	800ce74 <move_window>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d146      	bne.n	800d95e <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 800d8d0:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d8d6:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8da:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d8dc:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8de:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d8e2:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8e6:	f7ff fac5 	bl	800ce74 <move_window>
 800d8ea:	bbc0      	cbnz	r0, 800d95e <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d8ec:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d8f0:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800d8f2:	44ab      	add	fp, r5
 800d8f4:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800d8f8:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d8fc:	bf4c      	ite	mi
 800d8fe:	091b      	lsrmi	r3, r3, #4
 800d900:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800d904:	2b00      	cmp	r3, #0
 800d906:	d140      	bne.n	800d98a <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d908:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	d9c8      	bls.n	800d8a2 <create_chain+0x46>
 800d910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d914:	4621      	mov	r1, r4
 800d916:	4640      	mov	r0, r8
 800d918:	f7ff fc5c 	bl	800d1d4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800d91c:	b958      	cbnz	r0, 800d936 <create_chain+0xda>
 800d91e:	b157      	cbz	r7, 800d936 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d920:	2f01      	cmp	r7, #1
 800d922:	d0be      	beq.n	800d8a2 <create_chain+0x46>
 800d924:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d928:	429f      	cmp	r7, r3
 800d92a:	d2ba      	bcs.n	800d8a2 <create_chain+0x46>
 800d92c:	4622      	mov	r2, r4
 800d92e:	4639      	mov	r1, r7
 800d930:	4640      	mov	r0, r8
 800d932:	f7ff fc4f 	bl	800d1d4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d936:	b980      	cbnz	r0, 800d95a <create_chain+0xfe>
		fs->last_clst = ncl;
 800d938:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d93c:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800d940:	3b02      	subs	r3, #2
 800d942:	429a      	cmp	r2, r3
 800d944:	d802      	bhi.n	800d94c <create_chain+0xf0>
 800d946:	3a01      	subs	r2, #1
 800d948:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800d94c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d950:	f043 0301 	orr.w	r3, r3, #1
 800d954:	f888 3004 	strb.w	r3, [r8, #4]
 800d958:	e7a4      	b.n	800d8a4 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d95a:	2801      	cmp	r0, #1
 800d95c:	d1a1      	bne.n	800d8a2 <create_chain+0x46>
 800d95e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800d962:	4620      	mov	r0, r4
 800d964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d968:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d96a:	4628      	mov	r0, r5
 800d96c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d970:	f7ff fa80 	bl	800ce74 <move_window>
 800d974:	2800      	cmp	r0, #0
 800d976:	d1f2      	bne.n	800d95e <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d978:	00a3      	lsls	r3, r4, #2
 800d97a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d97e:	441d      	add	r5, r3
 800d980:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d982:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0be      	beq.n	800d908 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d089      	beq.n	800d8a2 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800d98e:	42a6      	cmp	r6, r4
 800d990:	d010      	beq.n	800d9b4 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d992:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d996:	e771      	b.n	800d87c <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d998:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d99a:	4628      	mov	r0, r5
 800d99c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d9a0:	f7ff fa68 	bl	800ce74 <move_window>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d1da      	bne.n	800d95e <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d9a8:	0063      	lsls	r3, r4, #1
 800d9aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d9ae:	442b      	add	r3, r5
 800d9b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 800d9b2:	e7a7      	b.n	800d904 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 800d9b4:	2400      	movs	r4, #0
}
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d9bc:	4640      	mov	r0, r8
 800d9be:	f7ff fc8f 	bl	800d2e0 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d9c2:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d9c4:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d9c6:	f67f af6c 	bls.w	800d8a2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d9ca:	1c41      	adds	r1, r0, #1
 800d9cc:	d0c7      	beq.n	800d95e <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d9ce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d9d2:	4283      	cmp	r3, r0
 800d9d4:	f63f af66 	bhi.w	800d8a4 <create_chain+0x48>
 800d9d8:	463e      	mov	r6, r7
 800d9da:	e74e      	b.n	800d87a <create_chain+0x1e>

0800d9dc <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d9dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 800d9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800d9e4:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d9e8:	d24e      	bcs.n	800da88 <dir_sdi+0xac>
 800d9ea:	06ca      	lsls	r2, r1, #27
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	d14b      	bne.n	800da88 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d9f0:	6885      	ldr	r5, [r0, #8]
 800d9f2:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800d9f4:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d9f6:	2d00      	cmp	r5, #0
 800d9f8:	d049      	beq.n	800da8e <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9fa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9fe:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800da02:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800da06:	f0c0 8084 	bcc.w	800db12 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da0a:	2d01      	cmp	r5, #1
 800da0c:	d03c      	beq.n	800da88 <dir_sdi+0xac>
 800da0e:	4647      	mov	r7, r8
 800da10:	e037      	b.n	800da82 <dir_sdi+0xa6>
		switch (fs->fs_type) {
 800da12:	783b      	ldrb	r3, [r7, #0]
 800da14:	2b02      	cmp	r3, #2
 800da16:	d06e      	beq.n	800daf6 <dir_sdi+0x11a>
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d05c      	beq.n	800dad6 <dir_sdi+0xfa>
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d133      	bne.n	800da88 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da20:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800da22:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da26:	4638      	mov	r0, r7
 800da28:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800da2c:	f7ff fa22 	bl	800ce74 <move_window>
 800da30:	2800      	cmp	r0, #0
 800da32:	d14d      	bne.n	800dad0 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 800da34:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da38:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800da3a:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da3e:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800da40:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da42:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800da46:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da4a:	f7ff fa13 	bl	800ce74 <move_window>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d13e      	bne.n	800dad0 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da52:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800da56:	44ba      	add	sl, r7
 800da58:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800da5c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da60:	07eb      	lsls	r3, r5, #31
 800da62:	bf4c      	ite	mi
 800da64:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800da68:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800da6c:	2d01      	cmp	r5, #1
 800da6e:	d90b      	bls.n	800da88 <dir_sdi+0xac>
 800da70:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800da74:	42ab      	cmp	r3, r5
 800da76:	d907      	bls.n	800da88 <dir_sdi+0xac>
			ofs -= csz;
 800da78:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800da7c:	45a1      	cmp	r9, r4
 800da7e:	d84a      	bhi.n	800db16 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800da80:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	42ab      	cmp	r3, r5
 800da86:	d8c4      	bhi.n	800da12 <dir_sdi+0x36>
		switch (fs->fs_type) {
 800da88:	2002      	movs	r0, #2
}
 800da8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da8e:	f898 3000 	ldrb.w	r3, [r8]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d816      	bhi.n	800dac4 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da96:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800da9a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800da9e:	d9f3      	bls.n	800da88 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800daa0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 800daa4:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0ed      	beq.n	800da88 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800daac:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800dab0:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dab4:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 800dab8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800daba:	4441      	add	r1, r8
 800dabc:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 800dac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800dac4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d0e4      	beq.n	800da96 <dir_sdi+0xba>
 800dacc:	461d      	mov	r5, r3
 800dace:	e794      	b.n	800d9fa <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dad0:	2001      	movs	r0, #1
}
 800dad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dad8:	4638      	mov	r0, r7
 800dada:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800dade:	f7ff f9c9 	bl	800ce74 <move_window>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d1f4      	bne.n	800dad0 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dae6:	00ab      	lsls	r3, r5, #2
 800dae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800daec:	443b      	add	r3, r7
 800daee:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800daf0:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 800daf4:	e7ba      	b.n	800da6c <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800daf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf8:	4638      	mov	r0, r7
 800dafa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800dafe:	f7ff f9b9 	bl	800ce74 <move_window>
 800db02:	2800      	cmp	r0, #0
 800db04:	d1e4      	bne.n	800dad0 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db06:	006b      	lsls	r3, r5, #1
 800db08:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db0c:	443b      	add	r3, r7
 800db0e:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 800db10:	e7ac      	b.n	800da6c <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db12:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800db16:	3b02      	subs	r3, #2
	clst -= 2;
 800db18:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d206      	bcs.n	800db2c <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 800db1e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 800db22:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800db26:	fb02 3301 	mla	r3, r2, r1, r3
 800db2a:	e7bb      	b.n	800daa4 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800db32:	e7a9      	b.n	800da88 <dir_sdi+0xac>

0800db34 <dir_find>:
{
 800db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db38:	2100      	movs	r1, #0
{
 800db3a:	b085      	sub	sp, #20
 800db3c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800db3e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db42:	f7ff ff4b 	bl	800d9dc <dir_sdi>
	if (res != FR_OK) return res;
 800db46:	4607      	mov	r7, r0
 800db48:	b9e8      	cbnz	r0, 800db86 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db4a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800db4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800db52:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db54:	464f      	mov	r7, r9
 800db56:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800db58:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 800db5c:	42b5      	cmp	r5, r6
 800db5e:	d018      	beq.n	800db92 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db60:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db64:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f040 8085 	bne.w	800dc78 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db6e:	2301      	movs	r3, #1
 800db70:	4632      	mov	r2, r6
 800db72:	f898 0001 	ldrb.w	r0, [r8, #1]
 800db76:	f7fe ffc3 	bl	800cb00 <disk_read>
 800db7a:	b140      	cbz	r0, 800db8e <dir_find+0x5a>
			fs->winsect = sector;
 800db7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800db80:	2701      	movs	r7, #1
			fs->winsect = sector;
 800db82:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800db86:	4638      	mov	r0, r7
 800db88:	b005      	add	sp, #20
 800db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800db8e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 800db92:	6a25      	ldr	r5, [r4, #32]
 800db94:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db96:	b346      	cbz	r6, 800dbea <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800db98:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800db9a:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800db9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dba0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dba2:	d004      	beq.n	800dbae <dir_find+0x7a>
 800dba4:	071b      	lsls	r3, r3, #28
 800dba6:	d525      	bpl.n	800dbf4 <dir_find+0xc0>
 800dba8:	2a0f      	cmp	r2, #15
 800dbaa:	f000 8093 	beq.w	800dcd4 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dbae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbb2:	27ff      	movs	r7, #255	; 0xff
 800dbb4:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dbb6:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800dbb8:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dbba:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dbbc:	69e6      	ldr	r6, [r4, #28]
 800dbbe:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800dbc2:	d212      	bcs.n	800dbea <dir_find+0xb6>
 800dbc4:	b18e      	cbz	r6, 800dbea <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dbc6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800dbca:	b94a      	cbnz	r2, 800dbe0 <dir_find+0xac>
		dp->sect++;				/* Next sector */
 800dbcc:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800dbce:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800dbd0:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	d15c      	bne.n	800dc90 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dbd6:	8919      	ldrh	r1, [r3, #8]
 800dbd8:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800dbdc:	f240 813a 	bls.w	800de54 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbe0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800dbe2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbe4:	4413      	add	r3, r2
 800dbe6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 800dbe8:	e7b6      	b.n	800db58 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dbea:	2704      	movs	r7, #4
}
 800dbec:	4638      	mov	r0, r7
 800dbee:	b005      	add	sp, #20
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dbf4:	2a0f      	cmp	r2, #15
 800dbf6:	d06d      	beq.n	800dcd4 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dbf8:	2f00      	cmp	r7, #0
 800dbfa:	f000 80d9 	beq.w	800ddb0 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dbfe:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 800dc02:	f017 0701 	ands.w	r7, r7, #1
 800dc06:	d1d2      	bne.n	800dbae <dir_find+0x7a>
	} while (--cnt && r == 0);
 800dc08:	782a      	ldrb	r2, [r5, #0]
 800dc0a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d1cd      	bne.n	800dbae <dir_find+0x7a>
 800dc12:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800dc16:	786b      	ldrb	r3, [r5, #1]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d1c8      	bne.n	800dbae <dir_find+0x7a>
 800dc1c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800dc20:	78ab      	ldrb	r3, [r5, #2]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d1c3      	bne.n	800dbae <dir_find+0x7a>
 800dc26:	78ea      	ldrb	r2, [r5, #3]
 800dc28:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d1be      	bne.n	800dbae <dir_find+0x7a>
 800dc30:	792a      	ldrb	r2, [r5, #4]
 800dc32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d1b9      	bne.n	800dbae <dir_find+0x7a>
 800dc3a:	796a      	ldrb	r2, [r5, #5]
 800dc3c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d1b4      	bne.n	800dbae <dir_find+0x7a>
 800dc44:	79aa      	ldrb	r2, [r5, #6]
 800dc46:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d1af      	bne.n	800dbae <dir_find+0x7a>
 800dc4e:	79ea      	ldrb	r2, [r5, #7]
 800dc50:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d1aa      	bne.n	800dbae <dir_find+0x7a>
 800dc58:	7a2a      	ldrb	r2, [r5, #8]
 800dc5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d1a5      	bne.n	800dbae <dir_find+0x7a>
 800dc62:	7a6a      	ldrb	r2, [r5, #9]
 800dc64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d1a0      	bne.n	800dbae <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dc6c:	7aaa      	ldrb	r2, [r5, #10]
 800dc6e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d19b      	bne.n	800dbae <dir_find+0x7a>
 800dc76:	e786      	b.n	800db86 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc78:	2301      	movs	r3, #1
 800dc7a:	462a      	mov	r2, r5
 800dc7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dc80:	9100      	str	r1, [sp, #0]
 800dc82:	f7fe ff4d 	bl	800cb20 <disk_write>
 800dc86:	9900      	ldr	r1, [sp, #0]
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d06e      	beq.n	800dd6a <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dc8c:	2701      	movs	r7, #1
 800dc8e:	e77a      	b.n	800db86 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dc90:	8958      	ldrh	r0, [r3, #10]
 800dc92:	3801      	subs	r0, #1
 800dc94:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 800dc98:	d1a2      	bne.n	800dbe0 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	9201      	str	r2, [sp, #4]
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	f7ff fb1e 	bl	800d2e0 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dca4:	2801      	cmp	r0, #1
 800dca6:	f240 80d9 	bls.w	800de5c <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	d0ee      	beq.n	800dc8c <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dcae:	9b00      	ldr	r3, [sp, #0]
 800dcb0:	6999      	ldr	r1, [r3, #24]
 800dcb2:	4288      	cmp	r0, r1
 800dcb4:	f080 80ce 	bcs.w	800de54 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
 800dcb8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800dcba:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dcbc:	6999      	ldr	r1, [r3, #24]
 800dcbe:	9a01      	ldr	r2, [sp, #4]
 800dcc0:	3902      	subs	r1, #2
 800dcc2:	4288      	cmp	r0, r1
 800dcc4:	f080 80cc 	bcs.w	800de60 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
 800dcc8:	8959      	ldrh	r1, [r3, #10]
 800dcca:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800dccc:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 800dcd0:	61e6      	str	r6, [r4, #28]
 800dcd2:	e785      	b.n	800dbe0 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dcd4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800dcd8:	0658      	lsls	r0, r3, #25
 800dcda:	f53f af6c 	bmi.w	800dbb6 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dcde:	0671      	lsls	r1, r6, #25
 800dce0:	f140 80b3 	bpl.w	800de4a <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dce4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dce6:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800dcea:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dcee:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dcf0:	7b6b      	ldrb	r3, [r5, #13]
 800dcf2:	454b      	cmp	r3, r9
 800dcf4:	f040 80ac 	bne.w	800de50 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcf8:	8b6b      	ldrh	r3, [r5, #26]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f040 80a8 	bne.w	800de50 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd00:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd02:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd04:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd08:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800dd0c:	f8df a178 	ldr.w	sl, [pc, #376]	; 800de88 <dir_find+0x354>
 800dd10:	9602      	str	r6, [sp, #8]
 800dd12:	462e      	mov	r6, r5
 800dd14:	3f01      	subs	r7, #1
 800dd16:	f10a 0b0d 	add.w	fp, sl, #13
 800dd1a:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd1c:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd1e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800dd22:	f8cd 8000 	str.w	r8, [sp]
 800dd26:	9401      	str	r4, [sp, #4]
 800dd28:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd2c:	e010      	b.n	800dd50 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd2e:	2ffe      	cmp	r7, #254	; 0xfe
 800dd30:	4620      	mov	r0, r4
 800dd32:	d816      	bhi.n	800dd62 <dir_find+0x22e>
 800dd34:	f001 fe4a 	bl	800f9cc <ff_wtoupper>
 800dd38:	4680      	mov	r8, r0
 800dd3a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 800dd3e:	3701      	adds	r7, #1
 800dd40:	f001 fe44 	bl	800f9cc <ff_wtoupper>
 800dd44:	4580      	cmp	r8, r0
 800dd46:	4621      	mov	r1, r4
 800dd48:	d10b      	bne.n	800dd62 <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd4a:	45d3      	cmp	fp, sl
 800dd4c:	f000 808a 	beq.w	800de64 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd50:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800dd54:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 800dd56:	2900      	cmp	r1, #0
 800dd58:	d1e9      	bne.n	800dd2e <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd5e:	429c      	cmp	r4, r3
 800dd60:	d0f3      	beq.n	800dd4a <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd62:	e9dd 8400 	ldrd	r8, r4, [sp]
 800dd66:	27ff      	movs	r7, #255	; 0xff
 800dd68:	e725      	b.n	800dbb6 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd6a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800dd6e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd72:	1aea      	subs	r2, r5, r3
 800dd74:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	f4bf aef8 	bcs.w	800db6e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd7e:	f898 a002 	ldrb.w	sl, [r8, #2]
 800dd82:	f1ba 0f01 	cmp.w	sl, #1
 800dd86:	f67f aef2 	bls.w	800db6e <dir_find+0x3a>
 800dd8a:	468b      	mov	fp, r1
 800dd8c:	e001      	b.n	800dd92 <dir_find+0x25e>
					wsect += fs->fsize;
 800dd8e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dd92:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800dd98:	2301      	movs	r3, #1
 800dd9a:	4659      	mov	r1, fp
 800dd9c:	462a      	mov	r2, r5
 800dd9e:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dda2:	f7fe febd 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dda6:	f1ba 0f01 	cmp.w	sl, #1
 800ddaa:	d1f0      	bne.n	800dd8e <dir_find+0x25a>
 800ddac:	4659      	mov	r1, fp
 800ddae:	e6de      	b.n	800db6e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ddb0:	782a      	ldrb	r2, [r5, #0]
 800ddb2:	7869      	ldrb	r1, [r5, #1]
 800ddb4:	01d0      	lsls	r0, r2, #7
 800ddb6:	78ae      	ldrb	r6, [r5, #2]
 800ddb8:	78eb      	ldrb	r3, [r5, #3]
 800ddba:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800ddbe:	792a      	ldrb	r2, [r5, #4]
 800ddc0:	f895 a005 	ldrb.w	sl, [r5, #5]
 800ddc4:	4408      	add	r0, r1
 800ddc6:	f895 e006 	ldrb.w	lr, [r5, #6]
 800ddca:	f895 c007 	ldrb.w	ip, [r5, #7]
 800ddce:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800ddd2:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800ddd6:	7a68      	ldrb	r0, [r5, #9]
 800ddd8:	fa56 f181 	uxtab	r1, r6, r1
 800dddc:	7a2e      	ldrb	r6, [r5, #8]
 800ddde:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800dde2:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800dde6:	7aa9      	ldrb	r1, [r5, #10]
 800dde8:	fa53 fb8b 	uxtab	fp, r3, fp
 800ddec:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800ddf0:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800ddf4:	fa52 f383 	uxtab	r3, r2, r3
 800ddf8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800ddfc:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800de00:	fa5a f282 	uxtab	r2, sl, r2
 800de04:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800de08:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800de0c:	fa5e f383 	uxtab	r3, lr, r3
 800de10:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800de14:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800de18:	fa5c f282 	uxtab	r2, ip, r2
 800de1c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800de20:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800de24:	fa56 f383 	uxtab	r3, r6, r3
 800de28:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800de2c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800de30:	fa50 f282 	uxtab	r2, r0, r2
 800de34:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800de38:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800de3c:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800de40:	b2db      	uxtb	r3, r3
 800de42:	4599      	cmp	r9, r3
 800de44:	f47f aedb 	bne.w	800dbfe <dir_find+0xca>
 800de48:	e69d      	b.n	800db86 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de4a:	42b7      	cmp	r7, r6
 800de4c:	f43f af50 	beq.w	800dcf0 <dir_find+0x1bc>
 800de50:	27ff      	movs	r7, #255	; 0xff
 800de52:	e6b0      	b.n	800dbb6 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 800de54:	2300      	movs	r3, #0
 800de56:	2704      	movs	r7, #4
 800de58:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800de5a:	e694      	b.n	800db86 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de5c:	2702      	movs	r7, #2
 800de5e:	e692      	b.n	800db86 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de60:	4616      	mov	r6, r2
 800de62:	e735      	b.n	800dcd0 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800de64:	4635      	mov	r5, r6
 800de66:	f8dd 8000 	ldr.w	r8, [sp]
 800de6a:	782b      	ldrb	r3, [r5, #0]
 800de6c:	065a      	lsls	r2, r3, #25
 800de6e:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 800de72:	d500      	bpl.n	800de76 <dir_find+0x342>
 800de74:	b911      	cbnz	r1, 800de7c <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de76:	3e01      	subs	r6, #1
 800de78:	b2f7      	uxtb	r7, r6
 800de7a:	e69c      	b.n	800dbb6 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0f7      	beq.n	800de76 <dir_find+0x342>
 800de86:	e7e3      	b.n	800de50 <dir_find+0x31c>
 800de88:	0801bc70 	.word	0x0801bc70

0800de8c <follow_path>:
{
 800de8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de90:	780b      	ldrb	r3, [r1, #0]
{
 800de92:	b083      	sub	sp, #12
 800de94:	4688      	mov	r8, r1
 800de96:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de98:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 800de9a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de9e:	d103      	bne.n	800dea8 <follow_path+0x1c>
 800dea0:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800dea4:	2b2f      	cmp	r3, #47	; 0x2f
 800dea6:	d0fb      	beq.n	800dea0 <follow_path+0x14>
 800dea8:	2b5c      	cmp	r3, #92	; 0x5c
 800deaa:	d0f9      	beq.n	800dea0 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800deac:	2100      	movs	r1, #0
 800deae:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800deb0:	f898 3000 	ldrb.w	r3, [r8]
 800deb4:	2b1f      	cmp	r3, #31
 800deb6:	f240 8147 	bls.w	800e148 <follow_path+0x2bc>
 800deba:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800debc:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800debe:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800dec0:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800dec2:	d929      	bls.n	800df18 <follow_path+0x8c>
 800dec4:	f1a5 0902 	sub.w	r9, r5, #2
 800dec8:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800deca:	2401      	movs	r4, #1
 800decc:	e008      	b.n	800dee0 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 800dece:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800ded2:	1c63      	adds	r3, r4, #1
 800ded4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800ded8:	281f      	cmp	r0, #31
 800deda:	f240 80f6 	bls.w	800e0ca <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 800dede:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dee0:	282f      	cmp	r0, #47	; 0x2f
 800dee2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800dee6:	d01d      	beq.n	800df24 <follow_path+0x98>
 800dee8:	285c      	cmp	r0, #92	; 0x5c
 800deea:	d01b      	beq.n	800df24 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800deec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800def0:	d00e      	beq.n	800df10 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800def2:	2101      	movs	r1, #1
 800def4:	f001 fd4c 	bl	800f990 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800def8:	b150      	cbz	r0, 800df10 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800defa:	287f      	cmp	r0, #127	; 0x7f
 800defc:	d8e7      	bhi.n	800dece <follow_path+0x42>
	while (*str && *str != chr) str++;
 800defe:	2322      	movs	r3, #34	; 0x22
 800df00:	4aa5      	ldr	r2, [pc, #660]	; (800e198 <follow_path+0x30c>)
 800df02:	e003      	b.n	800df0c <follow_path+0x80>
 800df04:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0e0      	beq.n	800dece <follow_path+0x42>
 800df0c:	4298      	cmp	r0, r3
 800df0e:	d1f9      	bne.n	800df04 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800df10:	2006      	movs	r0, #6
}
 800df12:	b003      	add	sp, #12
 800df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800df18:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800df1a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800df1c:	802b      	strh	r3, [r5, #0]
}
 800df1e:	b003      	add	sp, #12
 800df20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df24:	f818 3004 	ldrb.w	r3, [r8, r4]
 800df28:	eb08 0204 	add.w	r2, r8, r4
 800df2c:	2b2f      	cmp	r3, #47	; 0x2f
 800df2e:	d002      	beq.n	800df36 <follow_path+0xaa>
 800df30:	2b5c      	cmp	r3, #92	; 0x5c
 800df32:	f040 811e 	bne.w	800e172 <follow_path+0x2e6>
 800df36:	1c63      	adds	r3, r4, #1
 800df38:	4443      	add	r3, r8
 800df3a:	4698      	mov	r8, r3
 800df3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df40:	2a2f      	cmp	r2, #47	; 0x2f
 800df42:	d0fa      	beq.n	800df3a <follow_path+0xae>
 800df44:	2a5c      	cmp	r2, #92	; 0x5c
 800df46:	d0f8      	beq.n	800df3a <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df48:	f1ba 0f00 	cmp.w	sl, #0
 800df4c:	d0e4      	beq.n	800df18 <follow_path+0x8c>
 800df4e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df50:	2400      	movs	r4, #0
 800df52:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800df56:	e002      	b.n	800df5e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df58:	f1ba 0a01 	subs.w	sl, sl, #1
 800df5c:	d0dc      	beq.n	800df18 <follow_path+0x8c>
		w = lfn[di - 1];
 800df5e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800df62:	2b20      	cmp	r3, #32
 800df64:	d0f8      	beq.n	800df58 <follow_path+0xcc>
 800df66:	2b2e      	cmp	r3, #46	; 0x2e
 800df68:	d0f6      	beq.n	800df58 <follow_path+0xcc>
		*d++ = (BYTE)val;
 800df6a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800df6e:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 800df70:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 800df74:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800df78:	627b      	str	r3, [r7, #36]	; 0x24
 800df7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df7c:	2320      	movs	r3, #32
 800df7e:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800df80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800df84:	8828      	ldrh	r0, [r5, #0]
 800df86:	282e      	cmp	r0, #46	; 0x2e
 800df88:	d002      	beq.n	800df90 <follow_path+0x104>
 800df8a:	4298      	cmp	r0, r3
 800df8c:	f040 80e5 	bne.w	800e15a <follow_path+0x2ce>
 800df90:	462a      	mov	r2, r5
 800df92:	2300      	movs	r3, #0
 800df94:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800df98:	461c      	mov	r4, r3
 800df9a:	3301      	adds	r3, #1
 800df9c:	2820      	cmp	r0, #32
 800df9e:	d0f9      	beq.n	800df94 <follow_path+0x108>
 800dfa0:	282e      	cmp	r0, #46	; 0x2e
 800dfa2:	d0f7      	beq.n	800df94 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 800dfa4:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dfa6:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800dfaa:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800dfae:	2a2e      	cmp	r2, #46	; 0x2e
 800dfb0:	d002      	beq.n	800dfb8 <follow_path+0x12c>
 800dfb2:	f1ba 0a01 	subs.w	sl, sl, #1
 800dfb6:	d1f8      	bne.n	800dfaa <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 800dfb8:	b3b0      	cbz	r0, 800e028 <follow_path+0x19c>
 800dfba:	2208      	movs	r2, #8
 800dfbc:	4641      	mov	r1, r8
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	46b8      	mov	r8, r7
 800dfc2:	462f      	mov	r7, r5
 800dfc4:	4615      	mov	r5, r2
 800dfc6:	4699      	mov	r9, r3
 800dfc8:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dfca:	2820      	cmp	r0, #32
 800dfcc:	d003      	beq.n	800dfd6 <follow_path+0x14a>
 800dfce:	282e      	cmp	r0, #46	; 0x2e
 800dfd0:	d14d      	bne.n	800e06e <follow_path+0x1e2>
 800dfd2:	45a2      	cmp	sl, r4
 800dfd4:	d04b      	beq.n	800e06e <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 800dfd6:	f046 0603 	orr.w	r6, r6, #3
 800dfda:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 800dfdc:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800dfe0:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d1f1      	bne.n	800dfca <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfe6:	4647      	mov	r7, r8
 800dfe8:	4690      	mov	r8, r2
 800dfea:	462a      	mov	r2, r5
 800dfec:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800dff0:	29e5      	cmp	r1, #229	; 0xe5
 800dff2:	d102      	bne.n	800dffa <follow_path+0x16e>
 800dff4:	2105      	movs	r1, #5
 800dff6:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800dffa:	2a08      	cmp	r2, #8
 800dffc:	f000 8093 	beq.w	800e126 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e000:	f003 020c 	and.w	r2, r3, #12
 800e004:	2a0c      	cmp	r2, #12
 800e006:	d065      	beq.n	800e0d4 <follow_path+0x248>
 800e008:	f003 0303 	and.w	r3, r3, #3
 800e00c:	2b03      	cmp	r3, #3
 800e00e:	d061      	beq.n	800e0d4 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e010:	07b1      	lsls	r1, r6, #30
 800e012:	d409      	bmi.n	800e028 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e014:	2b01      	cmp	r3, #1
 800e016:	d102      	bne.n	800e01e <follow_path+0x192>
 800e018:	f046 0610 	orr.w	r6, r6, #16
 800e01c:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e01e:	2a04      	cmp	r2, #4
 800e020:	d102      	bne.n	800e028 <follow_path+0x19c>
 800e022:	f046 0608 	orr.w	r6, r6, #8
 800e026:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800e028:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e02a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e02e:	f7ff fd81 	bl	800db34 <dir_find>
			ns = dp->fn[NSFLAG];
 800e032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e036:	2800      	cmp	r0, #0
 800e038:	d158      	bne.n	800e0ec <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e03a:	075a      	lsls	r2, r3, #29
 800e03c:	f53f af69 	bmi.w	800df12 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e040:	79bb      	ldrb	r3, [r7, #6]
 800e042:	06db      	lsls	r3, r3, #27
 800e044:	f140 8097 	bpl.w	800e176 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800e04e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e052:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800e056:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e058:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800e05a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800e05c:	d102      	bne.n	800e064 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e05e:	8a9b      	ldrh	r3, [r3, #20]
 800e060:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e064:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e066:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 800e068:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e06c:	e726      	b.n	800debc <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e06e:	454d      	cmp	r5, r9
 800e070:	d91c      	bls.n	800e0ac <follow_path+0x220>
 800e072:	ebaa 0104 	sub.w	r1, sl, r4
 800e076:	fab1 f181 	clz	r1, r1
 800e07a:	0949      	lsrs	r1, r1, #5
 800e07c:	b9b1      	cbnz	r1, 800e0ac <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 800e07e:	287f      	cmp	r0, #127	; 0x7f
 800e080:	d83c      	bhi.n	800e0fc <follow_path+0x270>
	while (*str && *str != chr) str++;
 800e082:	212b      	movs	r1, #43	; 0x2b
 800e084:	f8df c118 	ldr.w	ip, [pc, #280]	; 800e1a0 <follow_path+0x314>
 800e088:	e003      	b.n	800e092 <follow_path+0x206>
 800e08a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800e08e:	2900      	cmp	r1, #0
 800e090:	d052      	beq.n	800e138 <follow_path+0x2ac>
 800e092:	4281      	cmp	r1, r0
 800e094:	d1f9      	bne.n	800e08a <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e096:	f046 0603 	orr.w	r6, r6, #3
 800e09a:	205f      	movs	r0, #95	; 0x5f
 800e09c:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 800e09e:	eb08 0109 	add.w	r1, r8, r9
 800e0a2:	f109 0901 	add.w	r9, r9, #1
 800e0a6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800e0aa:	e797      	b.n	800dfdc <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 800e0ac:	2d0b      	cmp	r5, #11
 800e0ae:	d064      	beq.n	800e17a <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e0b0:	45a2      	cmp	sl, r4
 800e0b2:	d003      	beq.n	800e0bc <follow_path+0x230>
 800e0b4:	f046 0603 	orr.w	r6, r6, #3
 800e0b8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 800e0ba:	d394      	bcc.n	800dfe6 <follow_path+0x15a>
			b <<= 2; continue;
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e0c0:	250b      	movs	r5, #11
 800e0c2:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	e788      	b.n	800dfdc <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 800e0ca:	46a2      	mov	sl, r4
 800e0cc:	4498      	add	r8, r3
 800e0ce:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e0d0:	2404      	movs	r4, #4
 800e0d2:	e73e      	b.n	800df52 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e0d4:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800e0d8:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e0da:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e0dc:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e0e0:	f7ff fd28 	bl	800db34 <dir_find>
			ns = dp->fn[NSFLAG];
 800e0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d0a6      	beq.n	800e03a <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e0ec:	2804      	cmp	r0, #4
 800e0ee:	f47f af10 	bne.w	800df12 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e0f2:	f013 0f04 	tst.w	r3, #4
 800e0f6:	bf08      	it	eq
 800e0f8:	2005      	moveq	r0, #5
 800e0fa:	e70a      	b.n	800df12 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e0fc:	e9cd 3200 	strd	r3, r2, [sp]
 800e100:	f001 fc46 	bl	800f990 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e104:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e108:	b918      	cbnz	r0, 800e112 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 800e10a:	f046 0602 	orr.w	r6, r6, #2
 800e10e:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e110:	e7c1      	b.n	800e096 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e112:	4922      	ldr	r1, [pc, #136]	; (800e19c <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800e114:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e118:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 800e11a:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e11c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e120:	2800      	cmp	r0, #0
 800e122:	d0b8      	beq.n	800e096 <follow_path+0x20a>
 800e124:	e7ad      	b.n	800e082 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 800e126:	009a      	lsls	r2, r3, #2
 800e128:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e12c:	2a0c      	cmp	r2, #12
 800e12e:	d0d1      	beq.n	800e0d4 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e130:	07b0      	lsls	r0, r6, #30
 800e132:	f57f af74 	bpl.w	800e01e <follow_path+0x192>
 800e136:	e777      	b.n	800e028 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 800e138:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800e13c:	2919      	cmp	r1, #25
 800e13e:	d80f      	bhi.n	800e160 <follow_path+0x2d4>
					b |= 2;
 800e140:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800e144:	b2c0      	uxtb	r0, r0
 800e146:	e7aa      	b.n	800e09e <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 800e148:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800e14a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800e14c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800e150:	b003      	add	sp, #12
 800e152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800e156:	f7ff bc41 	b.w	800d9dc <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e15a:	4626      	mov	r6, r4
 800e15c:	2401      	movs	r4, #1
 800e15e:	e722      	b.n	800dfa6 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 800e160:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800e164:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800e166:	bf9c      	itt	ls
 800e168:	3820      	subls	r0, #32
 800e16a:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800e16e:	b2c0      	uxtb	r0, r0
 800e170:	e795      	b.n	800e09e <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e172:	4690      	mov	r8, r2
 800e174:	e6e8      	b.n	800df48 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e176:	2005      	movs	r0, #5
 800e178:	e6cb      	b.n	800df12 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 800e17a:	4647      	mov	r7, r8
 800e17c:	4690      	mov	r8, r2
 800e17e:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e182:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800e186:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e188:	2ae5      	cmp	r2, #229	; 0xe5
 800e18a:	f47f af39 	bne.w	800e000 <follow_path+0x174>
 800e18e:	2205      	movs	r2, #5
 800e190:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800e194:	e734      	b.n	800e000 <follow_path+0x174>
 800e196:	bf00      	nop
 800e198:	0801bbdc 	.word	0x0801bbdc
 800e19c:	0801bbf0 	.word	0x0801bbf0
 800e1a0:	0801bbe8 	.word	0x0801bbe8

0800e1a4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e1a4:	2901      	cmp	r1, #1
{
 800e1a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 800e1ae:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e1b0:	d914      	bls.n	800e1dc <remove_chain+0x38>
 800e1b2:	69ab      	ldr	r3, [r5, #24]
 800e1b4:	428b      	cmp	r3, r1
 800e1b6:	d911      	bls.n	800e1dc <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	b992      	cbnz	r2, 800e1e4 <remove_chain+0x40>
 800e1be:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e1c0:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 800e1c4:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e1c8:	429c      	cmp	r4, r3
 800e1ca:	d207      	bcs.n	800e1dc <remove_chain+0x38>
		switch (fs->fs_type) {
 800e1cc:	783b      	ldrb	r3, [r7, #0]
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	f000 80a3 	beq.w	800e31a <remove_chain+0x176>
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	d022      	beq.n	800e21e <remove_chain+0x7a>
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d011      	beq.n	800e200 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e1dc:	2002      	movs	r0, #2
}
 800e1de:	b003      	add	sp, #12
 800e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d9f9      	bls.n	800e1dc <remove_chain+0x38>
 800e1e8:	2a01      	cmp	r2, #1
 800e1ea:	d0f7      	beq.n	800e1dc <remove_chain+0x38>
 800e1ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f7fe ffef 	bl	800d1d4 <put_fat.part.0>
		if (res != FR_OK) return res;
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d1f1      	bne.n	800e1de <remove_chain+0x3a>
 800e1fa:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	e7df      	b.n	800e1c0 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e200:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e202:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e206:	4638      	mov	r0, r7
 800e208:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e20c:	f7fe fe32 	bl	800ce74 <move_window>
 800e210:	2800      	cmp	r0, #0
 800e212:	f000 80a9 	beq.w	800e368 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e216:	2001      	movs	r0, #1
}
 800e218:	b003      	add	sp, #12
 800e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e21e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e220:	4638      	mov	r0, r7
 800e222:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e226:	f7fe fe25 	bl	800ce74 <move_window>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d1f3      	bne.n	800e216 <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e22e:	00a3      	lsls	r3, r4, #2
 800e230:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e234:	443b      	add	r3, r7
 800e236:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e23a:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 800e23e:	f1ba 0f00 	cmp.w	sl, #0
 800e242:	f000 80af 	beq.w	800e3a4 <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e246:	f1ba 0f01 	cmp.w	sl, #1
 800e24a:	d0c7      	beq.n	800e1dc <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e24c:	69ab      	ldr	r3, [r5, #24]
 800e24e:	42a3      	cmp	r3, r4
 800e250:	d9c4      	bls.n	800e1dc <remove_chain+0x38>
		switch (fs->fs_type) {
 800e252:	782f      	ldrb	r7, [r5, #0]
 800e254:	2f02      	cmp	r7, #2
 800e256:	d029      	beq.n	800e2ac <remove_chain+0x108>
 800e258:	2f03      	cmp	r7, #3
 800e25a:	d047      	beq.n	800e2ec <remove_chain+0x148>
 800e25c:	2f01      	cmp	r7, #1
 800e25e:	d1bd      	bne.n	800e1dc <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e260:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e262:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e266:	4628      	mov	r0, r5
 800e268:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e26c:	f7fe fe02 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800e270:	2800      	cmp	r0, #0
 800e272:	d1b4      	bne.n	800e1de <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e274:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 800e276:	f10b 0301 	add.w	r3, fp, #1
 800e27a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e27e:	d55c      	bpl.n	800e33a <remove_chain+0x196>
 800e280:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e284:	4628      	mov	r0, r5
 800e286:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e288:	f002 020f 	and.w	r2, r2, #15
 800e28c:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e290:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e292:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e294:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e298:	f7fe fdec 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800e29c:	9b01      	ldr	r3, [sp, #4]
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d19d      	bne.n	800e1de <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2a6:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e2a8:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e2aa:	e00c      	b.n	800e2c6 <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e2ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e2b4:	f7fe fdde 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d190      	bne.n	800e1de <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e2bc:	0064      	lsls	r4, r4, #1
 800e2be:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e2c2:	442c      	add	r4, r5
 800e2c4:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 800e2c6:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e2ca:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800e2ce:	1e91      	subs	r1, r2, #2
 800e2d0:	428b      	cmp	r3, r1
 800e2d2:	d205      	bcs.n	800e2e0 <remove_chain+0x13c>
			fs->free_clst++;
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800e2d8:	792b      	ldrb	r3, [r5, #4]
 800e2da:	f043 0301 	orr.w	r3, r3, #1
 800e2de:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e2e0:	4552      	cmp	r2, sl
 800e2e2:	d95f      	bls.n	800e3a4 <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e2e4:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e2e6:	4654      	mov	r4, sl
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	e76d      	b.n	800e1c8 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e2ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e2f4:	f7fe fdbe 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	f47f af70 	bne.w	800e1de <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e2fe:	00a4      	lsls	r4, r4, #2
 800e300:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e304:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e308:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e30c:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 800e30e:	0e13      	lsrs	r3, r2, #24
 800e310:	70a0      	strb	r0, [r4, #2]
 800e312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 800e316:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 800e318:	e7d5      	b.n	800e2c6 <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e31a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e31c:	4638      	mov	r0, r7
 800e31e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e322:	f7fe fda7 	bl	800ce74 <move_window>
 800e326:	2800      	cmp	r0, #0
 800e328:	f47f af75 	bne.w	800e216 <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e32c:	0063      	lsls	r3, r4, #1
 800e32e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e332:	443b      	add	r3, r7
 800e334:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 800e338:	e781      	b.n	800e23e <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e33a:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e33e:	4628      	mov	r0, r5
 800e340:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e342:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e344:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	f7fe fd93 	bl	800ce74 <move_window>
			if (res != FR_OK) break;
 800e34e:	2800      	cmp	r0, #0
 800e350:	f47f af45 	bne.w	800e1de <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e354:	9b01      	ldr	r3, [sp, #4]
 800e356:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e35a:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 800e35e:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e360:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800e364:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e366:	e7ae      	b.n	800e2c6 <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 800e368:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e36c:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800e36e:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e372:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e374:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e376:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e37a:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e37e:	f7fe fd79 	bl	800ce74 <move_window>
 800e382:	2800      	cmp	r0, #0
 800e384:	f47f af47 	bne.w	800e216 <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e388:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e38c:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e38e:	44ba      	add	sl, r7
 800e390:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800e394:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e398:	bf4c      	ite	mi
 800e39a:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 800e39e:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 800e3a2:	e74c      	b.n	800e23e <remove_chain+0x9a>
	return FR_OK;
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e71a      	b.n	800e1de <remove_chain+0x3a>

0800e3a8 <dir_next>:
{
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e3ac:	69c3      	ldr	r3, [r0, #28]
{
 800e3ae:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e3b0:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d03d      	beq.n	800e432 <dir_next+0x8a>
 800e3b6:	3520      	adds	r5, #32
 800e3b8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800e3bc:	d239      	bcs.n	800e432 <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e3be:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800e3c2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e3c4:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e3c6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ca:	d008      	beq.n	800e3de <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e3cc:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e3d0:	4446      	add	r6, r8
	return FR_OK;
 800e3d2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800e3d4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e3d6:	6226      	str	r6, [r4, #32]
}
 800e3d8:	b005      	add	sp, #20
 800e3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800e3de:	460e      	mov	r6, r1
 800e3e0:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800e3e2:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800e3e4:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800e3e6:	b341      	cbz	r1, 800e43a <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e3e8:	897b      	ldrh	r3, [r7, #10]
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	d1eb      	bne.n	800e3cc <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	f7fe ff73 	bl	800d2e0 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e3fa:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e3fc:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e3fe:	d924      	bls.n	800e44a <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e404:	d023      	beq.n	800e44e <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	4283      	cmp	r3, r0
 800e40a:	d922      	bls.n	800e452 <dir_next+0xaa>
	clst -= 2;
 800e40c:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e40e:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800e412:	4619      	mov	r1, r3
	clst -= 2;
 800e414:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800e416:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	3b02      	subs	r3, #2
 800e41e:	428b      	cmp	r3, r1
 800e420:	d904      	bls.n	800e42c <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800e422:	897a      	ldrh	r2, [r7, #10]
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	fb01 3302 	mla	r3, r1, r2, r3
 800e42a:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 800e42c:	9b00      	ldr	r3, [sp, #0]
 800e42e:	61e3      	str	r3, [r4, #28]
 800e430:	e7ce      	b.n	800e3d0 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e432:	2004      	movs	r0, #4
}
 800e434:	b005      	add	sp, #20
 800e436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e43a:	893b      	ldrh	r3, [r7, #8]
 800e43c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800e440:	d8c4      	bhi.n	800e3cc <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 800e442:	2300      	movs	r3, #0
 800e444:	2004      	movs	r0, #4
 800e446:	61e3      	str	r3, [r4, #28]
 800e448:	e7c6      	b.n	800e3d8 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e44a:	2002      	movs	r0, #2
 800e44c:	e7c4      	b.n	800e3d8 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e44e:	2001      	movs	r0, #1
 800e450:	e7c2      	b.n	800e3d8 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 800e452:	2e00      	cmp	r6, #0
 800e454:	d0f5      	beq.n	800e442 <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e456:	69a1      	ldr	r1, [r4, #24]
 800e458:	4620      	mov	r0, r4
 800e45a:	f7ff f9ff 	bl	800d85c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e45e:	4681      	mov	r9, r0
 800e460:	2800      	cmp	r0, #0
 800e462:	d05a      	beq.n	800e51a <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e464:	2801      	cmp	r0, #1
 800e466:	d0f0      	beq.n	800e44a <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e468:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e46c:	d0ef      	beq.n	800e44e <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d154      	bne.n	800e51e <dir_next+0x176>
 800e474:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 800e478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e47c:	2100      	movs	r1, #0
 800e47e:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e480:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 800e482:	f00a fbdd 	bl	8018c40 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e486:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 800e488:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e48c:	3b02      	subs	r3, #2
	clst -= 2;
 800e48e:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e490:	429a      	cmp	r2, r3
 800e492:	d267      	bcs.n	800e564 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
 800e494:	4611      	mov	r1, r2
 800e496:	897b      	ldrh	r3, [r7, #10]
 800e498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e49a:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e49e:	633a      	str	r2, [r7, #48]	; 0x30
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d036      	beq.n	800e512 <dir_next+0x16a>
 800e4a4:	2300      	movs	r3, #0
						fs->wflag = 1;
 800e4a6:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800e4aa:	465e      	mov	r6, fp
 800e4ac:	461c      	mov	r4, r3
 800e4ae:	46ab      	mov	fp, r5
 800e4b0:	4615      	mov	r5, r2
 800e4b2:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e4b6:	462a      	mov	r2, r5
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800e4bc:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e4be:	2301      	movs	r3, #1
 800e4c0:	f7fe fb2e 	bl	800cb20 <disk_write>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d1c2      	bne.n	800e44e <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e4ca:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e4cc:	1aea      	subs	r2, r5, r3
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d212      	bcs.n	800e4fa <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4d4:	f897 a002 	ldrb.w	sl, [r7, #2]
 800e4d8:	f1ba 0f01 	cmp.w	sl, #1
 800e4dc:	d801      	bhi.n	800e4e2 <dir_next+0x13a>
 800e4de:	e00c      	b.n	800e4fa <dir_next+0x152>
					wsect += fs->fsize;
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	462a      	mov	r2, r5
 800e4ee:	7878      	ldrb	r0, [r7, #1]
 800e4f0:	f7fe fb16 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4f4:	f1ba 0f01 	cmp.w	sl, #1
 800e4f8:	d1f2      	bne.n	800e4e0 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	3401      	adds	r4, #1
 800e4fe:	1c5d      	adds	r5, r3, #1
 800e500:	897b      	ldrh	r3, [r7, #10]
 800e502:	42a3      	cmp	r3, r4
 800e504:	633d      	str	r5, [r7, #48]	; 0x30
 800e506:	d8d4      	bhi.n	800e4b2 <dir_next+0x10a>
 800e508:	462a      	mov	r2, r5
 800e50a:	4623      	mov	r3, r4
 800e50c:	465d      	mov	r5, fp
 800e50e:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 800e512:	1ad2      	subs	r2, r2, r3
 800e514:	9901      	ldr	r1, [sp, #4]
 800e516:	633a      	str	r2, [r7, #48]	; 0x30
 800e518:	e77d      	b.n	800e416 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e51a:	2007      	movs	r0, #7
 800e51c:	e75c      	b.n	800e3d8 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 800e51e:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e522:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 800e526:	2301      	movs	r3, #1
 800e528:	7878      	ldrb	r0, [r7, #1]
 800e52a:	4652      	mov	r2, sl
 800e52c:	4659      	mov	r1, fp
 800e52e:	f7fe faf7 	bl	800cb20 <disk_write>
 800e532:	2800      	cmp	r0, #0
 800e534:	d18b      	bne.n	800e44e <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e538:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e53a:	ebaa 0203 	sub.w	r2, sl, r3
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	429a      	cmp	r2, r3
 800e542:	d299      	bcs.n	800e478 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e544:	78be      	ldrb	r6, [r7, #2]
 800e546:	2e01      	cmp	r6, #1
 800e548:	d801      	bhi.n	800e54e <dir_next+0x1a6>
 800e54a:	e795      	b.n	800e478 <dir_next+0xd0>
 800e54c:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 800e54e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e550:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800e552:	2301      	movs	r3, #1
 800e554:	4659      	mov	r1, fp
 800e556:	4652      	mov	r2, sl
 800e558:	7878      	ldrb	r0, [r7, #1]
 800e55a:	f7fe fae1 	bl	800cb20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e55e:	2e01      	cmp	r6, #1
 800e560:	d1f4      	bne.n	800e54c <dir_next+0x1a4>
 800e562:	e789      	b.n	800e478 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
 800e564:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e566:	2200      	movs	r2, #0
 800e568:	e799      	b.n	800e49e <dir_next+0xf6>
 800e56a:	bf00      	nop

0800e56c <dir_register>:
{
 800e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e570:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800e574:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e576:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 800e57a:	9302      	str	r3, [sp, #8]
 800e57c:	f040 82ce 	bne.w	800eb1c <dir_register+0x5b0>
	FATFS *fs = dp->obj.fs;
 800e580:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e584:	4605      	mov	r5, r0
 800e586:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e58a:	8813      	ldrh	r3, [r2, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 82ca 	beq.w	800eb26 <dir_register+0x5ba>
 800e592:	468b      	mov	fp, r1
 800e594:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800e598:	f10b 0b01 	add.w	fp, fp, #1
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1f9      	bne.n	800e594 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 800e5a0:	f105 0724 	add.w	r7, r5, #36	; 0x24
			*d++ = *s++;
 800e5a4:	ab0a      	add	r3, sp, #40	; 0x28
 800e5a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e5aa:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e5ae:	9b02      	ldr	r3, [sp, #8]
 800e5b0:	07dc      	lsls	r4, r3, #31
 800e5b2:	d462      	bmi.n	800e67a <dir_register+0x10e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e5b4:	f013 0402 	ands.w	r4, r3, #2
 800e5b8:	4657      	mov	r7, sl
 800e5ba:	f000 8239 	beq.w	800ea30 <dir_register+0x4c4>
 800e5be:	4bc5      	ldr	r3, [pc, #788]	; (800e8d4 <dir_register+0x368>)
 800e5c0:	f10b 040c 	add.w	r4, fp, #12
	res = dir_sdi(dp, 0);
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e5c8:	fba3 3404 	umull	r3, r4, r3, r4
	res = dir_sdi(dp, 0);
 800e5cc:	f7ff fa06 	bl	800d9dc <dir_sdi>
	if (res == FR_OK) {
 800e5d0:	4606      	mov	r6, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e5d2:	08a4      	lsrs	r4, r4, #2
 800e5d4:	f104 0901 	add.w	r9, r4, #1
	if (res == FR_OK) {
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	f040 8233 	bne.w	800ea44 <dir_register+0x4d8>
		n = 0;
 800e5de:	4680      	mov	r8, r0
 800e5e0:	e008      	b.n	800e5f4 <dir_register+0x88>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e5e2:	0952      	lsrs	r2, r2, #5
 800e5e4:	b1c3      	cbz	r3, 800e618 <dir_register+0xac>
				n = 0;					/* Not a blank entry. Restart to search */
 800e5e6:	4690      	mov	r8, r2
			res = dir_next(dp, 1);
 800e5e8:	f7ff fede 	bl	800e3a8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f040 8228 	bne.w	800ea44 <dir_register+0x4d8>
			res = move_window(fs, dp->sect);
 800e5f4:	69e9      	ldr	r1, [r5, #28]
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f7fe fc3c 	bl	800ce74 <move_window>
 800e5fc:	4606      	mov	r6, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e5fe:	f108 0801 	add.w	r8, r8, #1
			res = dir_next(dp, 1);
 800e602:	2101      	movs	r1, #1
 800e604:	4628      	mov	r0, r5
			if (res != FR_OK) break;
 800e606:	2e00      	cmp	r6, #0
 800e608:	f040 821c 	bne.w	800ea44 <dir_register+0x4d8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e60c:	6a2b      	ldr	r3, [r5, #32]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	2be5      	cmp	r3, #229	; 0xe5
 800e612:	fab3 f283 	clz	r2, r3
 800e616:	d1e4      	bne.n	800e5e2 <dir_register+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e618:	45c1      	cmp	r9, r8
 800e61a:	d1e5      	bne.n	800e5e8 <dir_register+0x7c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e61c:	2c00      	cmp	r4, #0
 800e61e:	f040 8284 	bne.w	800eb2a <dir_register+0x5be>
		res = move_window(fs, dp->sect);
 800e622:	69e9      	ldr	r1, [r5, #28]
 800e624:	4650      	mov	r0, sl
 800e626:	f7fe fc25 	bl	800ce74 <move_window>
		if (res == FR_OK) {
 800e62a:	4606      	mov	r6, r0
 800e62c:	bb08      	cbnz	r0, 800e672 <dir_register+0x106>
		*d++ = (BYTE)val;
 800e62e:	2220      	movs	r2, #32
 800e630:	4601      	mov	r1, r0
 800e632:	6a28      	ldr	r0, [r5, #32]
 800e634:	f00a fb04 	bl	8018c40 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e638:	6a2b      	ldr	r3, [r5, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e63a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800e63e:	1a9a      	subs	r2, r3, r2
 800e640:	2a02      	cmp	r2, #2
 800e642:	f240 83d3 	bls.w	800edec <dir_register+0x880>
			*d++ = *s++;
 800e646:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e648:	601a      	str	r2, [r3, #0]
 800e64a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e64c:	605a      	str	r2, [r3, #4]
 800e64e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800e652:	721a      	strb	r2, [r3, #8]
 800e654:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800e658:	725a      	strb	r2, [r3, #9]
 800e65a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800e65e:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800e660:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e662:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e666:	6a29      	ldr	r1, [r5, #32]
 800e668:	f003 0318 	and.w	r3, r3, #24
 800e66c:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800e66e:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800e672:	4630      	mov	r0, r6
 800e674:	b00b      	add	sp, #44	; 0x2c
 800e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*d++ = *s++;
 800e67a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		for (n = 1; n < 100; n++) {
 800e67e:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e682:	2240      	movs	r2, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e684:	f8cd b00c 	str.w	fp, [sp, #12]
			*d++ = *s++;
 800e688:	9300      	str	r3, [sp, #0]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e68a:	46c3      	mov	fp, r8
			*d++ = *s++;
 800e68c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e690:	460e      	mov	r6, r1
				if (sr & 0x10000) sr ^= 0x11021;
 800e692:	4c91      	ldr	r4, [pc, #580]	; (800e8d8 <dir_register+0x36c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e694:	f04f 0920 	mov.w	r9, #32
 800e698:	4698      	mov	r8, r3
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e69a:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
			*d++ = *s++;
 800e69e:	9001      	str	r0, [sp, #4]
 800e6a0:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e6a2:	f1bb 0f05 	cmp.w	fp, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e6a6:	f8da 100c 	ldr.w	r1, [sl, #12]
			*d++ = *s++;
 800e6aa:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 800e6ae:	e9c5 3609 	strd	r3, r6, [r5, #36]	; 0x24
 800e6b2:	9b00      	ldr	r3, [sp, #0]
 800e6b4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e6b8:	f240 8135 	bls.w	800e926 <dir_register+0x3ba>
		while (*lfn) {	/* Create a CRC */
 800e6bc:	880a      	ldrh	r2, [r1, #0]
 800e6be:	2a00      	cmp	r2, #0
 800e6c0:	f000 8131 	beq.w	800e926 <dir_register+0x3ba>
				sr = (sr << 1) + (wc & 1);
 800e6c4:	468c      	mov	ip, r1
 800e6c6:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 800e6ca:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 800e6cc:	eb01 014b 	add.w	r1, r1, fp, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e6d0:	e009      	b.n	800e6e6 <dir_register+0x17a>
				sr = (sr << 1) + (wc & 1);
 800e6d2:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e6d6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 800e6da:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 800e6de:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e6e2:	bf18      	it	ne
 800e6e4:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e6e6:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 800e6ea:	0893      	lsrs	r3, r2, #2
 800e6ec:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 800e6ee:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e6f2:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 800e6f4:	f003 0301 	and.w	r3, r3, #1
 800e6f8:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e6fc:	bf48      	it	mi
 800e6fe:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800e702:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 800e704:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e708:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 800e70c:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 800e710:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800e714:	bf18      	it	ne
 800e716:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e718:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e71c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e71e:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800e722:	bf48      	it	mi
 800e724:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e726:	f003 0301 	and.w	r3, r3, #1
 800e72a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e72e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e730:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800e734:	bf48      	it	mi
 800e736:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e738:	f000 0001 	and.w	r0, r0, #1
 800e73c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e740:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e742:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800e746:	bf48      	it	mi
 800e748:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e74a:	f001 0101 	and.w	r1, r1, #1
 800e74e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e752:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e754:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800e758:	bf48      	it	mi
 800e75a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e764:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e766:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800e76a:	bf48      	it	mi
 800e76c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e76e:	f000 0001 	and.w	r0, r0, #1
 800e772:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e776:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e778:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800e77c:	bf48      	it	mi
 800e77e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e780:	f001 0101 	and.w	r1, r1, #1
 800e784:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e788:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e78a:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 800e78e:	bf48      	it	mi
 800e790:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e79a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e79c:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800e7a0:	bf48      	it	mi
 800e7a2:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e7a4:	f000 0001 	and.w	r0, r0, #1
 800e7a8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e7ac:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e7ae:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800e7b2:	bf48      	it	mi
 800e7b4:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e7b6:	f001 0101 	and.w	r1, r1, #1
 800e7ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e7be:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e7c0:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 800e7c4:	bf48      	it	mi
 800e7c6:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e7d0:	0400      	lsls	r0, r0, #16
 800e7d2:	bf48      	it	mi
 800e7d4:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e7d6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e7da:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 800e7dc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 800e7e0:	bf48      	it	mi
 800e7e2:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e7e4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e7e8:	041b      	lsls	r3, r3, #16
 800e7ea:	bf48      	it	mi
 800e7ec:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 800e7f0:	2a00      	cmp	r2, #0
 800e7f2:	f47f af6e 	bne.w	800e6d2 <dir_register+0x166>
		c = (BYTE)((seq % 16) + '0');
 800e7f6:	f00e 010f 	and.w	r1, lr, #15
 800e7fa:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e7fe:	2a39      	cmp	r2, #57	; 0x39
 800e800:	bf88      	it	hi
 800e802:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e806:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 800e80a:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 800e80e:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 800e812:	f240 8156 	bls.w	800eac2 <dir_register+0x556>
		c = (BYTE)((seq % 16) + '0');
 800e816:	f001 000f 	and.w	r0, r1, #15
 800e81a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e81e:	2a39      	cmp	r2, #57	; 0x39
 800e820:	bf88      	it	hi
 800e822:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e826:	290f      	cmp	r1, #15
		seq /= 16;
 800e828:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 800e82c:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 800e830:	f240 814d 	bls.w	800eace <dir_register+0x562>
		c = (BYTE)((seq % 16) + '0');
 800e834:	f000 010f 	and.w	r1, r0, #15
 800e838:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e83c:	2a39      	cmp	r2, #57	; 0x39
 800e83e:	bf88      	it	hi
 800e840:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e844:	280f      	cmp	r0, #15
		seq /= 16;
 800e846:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 800e84a:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 800e84e:	f240 814d 	bls.w	800eaec <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 800e852:	f001 000f 	and.w	r0, r1, #15
 800e856:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e85a:	2a39      	cmp	r2, #57	; 0x39
 800e85c:	bf88      	it	hi
 800e85e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e862:	290f      	cmp	r1, #15
		seq /= 16;
 800e864:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 800e868:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 800e86c:	f240 8144 	bls.w	800eaf8 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 800e870:	f000 010f 	and.w	r1, r0, #15
 800e874:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e878:	2a39      	cmp	r2, #57	; 0x39
 800e87a:	bf88      	it	hi
 800e87c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e880:	280f      	cmp	r0, #15
		seq /= 16;
 800e882:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 800e886:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 800e88a:	f240 813b 	bls.w	800eb04 <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 800e88e:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 800e892:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 800e896:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e89a:	2a39      	cmp	r2, #57	; 0x39
 800e89c:	bf88      	it	hi
 800e89e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e8a2:	290f      	cmp	r1, #15
		ns[i--] = c;
 800e8a4:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 800e8a8:	f240 8132 	bls.w	800eb10 <dir_register+0x5a4>
		c = (BYTE)((seq % 16) + '0');
 800e8ac:	f00e 010f 	and.w	r1, lr, #15
 800e8b0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e8b4:	2a39      	cmp	r2, #57	; 0x39
 800e8b6:	bf88      	it	hi
 800e8b8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e8bc:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 800e8c0:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 800e8c4:	f240 8109 	bls.w	800eada <dir_register+0x56e>
		ns[i--] = c;
 800e8c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e8cc:	f105 0123 	add.w	r1, r5, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	e006      	b.n	800e8e2 <dir_register+0x376>
 800e8d4:	4ec4ec4f 	.word	0x4ec4ec4f
 800e8d8:	00011021 	.word	0x00011021
 800e8dc:	3201      	adds	r2, #1
 800e8de:	4562      	cmp	r2, ip
 800e8e0:	d003      	beq.n	800e8ea <dir_register+0x37e>
 800e8e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e8e6:	2b20      	cmp	r3, #32
 800e8e8:	d1f8      	bne.n	800e8dc <dir_register+0x370>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8ea:	f1bc 0f07 	cmp.w	ip, #7
 800e8ee:	d91c      	bls.n	800e92a <dir_register+0x3be>
 800e8f0:	1c50      	adds	r0, r2, #1
 800e8f2:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800e8f6:	2807      	cmp	r0, #7
 800e8f8:	d809      	bhi.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8fa:	1c42      	adds	r2, r0, #1
 800e8fc:	2120      	movs	r1, #32
 800e8fe:	2a08      	cmp	r2, #8
 800e900:	f1c0 0208 	rsb	r2, r0, #8
 800e904:	4438      	add	r0, r7
 800e906:	bf88      	it	hi
 800e908:	2201      	movhi	r2, #1
 800e90a:	f00a f999 	bl	8018c40 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e90e:	4628      	mov	r0, r5
 800e910:	f7ff f910 	bl	800db34 <dir_find>
			if (res != FR_OK) break;
 800e914:	2800      	cmp	r0, #0
 800e916:	d17d      	bne.n	800ea14 <dir_register+0x4a8>
		for (n = 1; n < 100; n++) {
 800e918:	f10b 0b01 	add.w	fp, fp, #1
 800e91c:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 800e920:	f47f aebe 	bne.w	800e6a0 <dir_register+0x134>
 800e924:	e091      	b.n	800ea4a <dir_register+0x4de>
 800e926:	46de      	mov	lr, fp
 800e928:	e765      	b.n	800e7f6 <dir_register+0x28a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e92a:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 800e92e:	f10c 0c01 	add.w	ip, ip, #1
 800e932:	eb0d 0103 	add.w	r1, sp, r3
 800e936:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e93a:	54b9      	strb	r1, [r7, r2]
 800e93c:	3201      	adds	r2, #1
	} while (j < 8);
 800e93e:	2a07      	cmp	r2, #7
 800e940:	d8e5      	bhi.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e942:	f1bc 0f08 	cmp.w	ip, #8
 800e946:	f000 8085 	beq.w	800ea54 <dir_register+0x4e8>
 800e94a:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 800e94e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e950:	f102 0001 	add.w	r0, r2, #1
 800e954:	eb0d 0103 	add.w	r1, sp, r3
 800e958:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e95c:	54b9      	strb	r1, [r7, r2]
 800e95e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 800e962:	d0d4      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e964:	2908      	cmp	r1, #8
 800e966:	d07d      	beq.n	800ea64 <dir_register+0x4f8>
 800e968:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 800e96c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e96e:	eb0d 0103 	add.w	r1, sp, r3
 800e972:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e976:	5439      	strb	r1, [r7, r0]
 800e978:	f10c 0102 	add.w	r1, ip, #2
 800e97c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800e980:	d0c5      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e982:	2908      	cmp	r1, #8
 800e984:	d076      	beq.n	800ea74 <dir_register+0x508>
 800e986:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 800e98a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e98c:	eb0d 0103 	add.w	r1, sp, r3
 800e990:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e994:	5439      	strb	r1, [r7, r0]
 800e996:	f10c 0103 	add.w	r1, ip, #3
 800e99a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800e99e:	d0b6      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9a0:	2908      	cmp	r1, #8
 800e9a2:	d06f      	beq.n	800ea84 <dir_register+0x518>
 800e9a4:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 800e9a8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9aa:	eb0d 0103 	add.w	r1, sp, r3
 800e9ae:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e9b2:	5439      	strb	r1, [r7, r0]
 800e9b4:	f10c 0104 	add.w	r1, ip, #4
 800e9b8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800e9bc:	d0a7      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9be:	2908      	cmp	r1, #8
 800e9c0:	d068      	beq.n	800ea94 <dir_register+0x528>
 800e9c2:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 800e9c6:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9c8:	eb0d 0103 	add.w	r1, sp, r3
 800e9cc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e9d0:	5439      	strb	r1, [r7, r0]
 800e9d2:	f10c 0105 	add.w	r1, ip, #5
 800e9d6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800e9da:	d098      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9dc:	2908      	cmp	r1, #8
 800e9de:	d061      	beq.n	800eaa4 <dir_register+0x538>
 800e9e0:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 800e9e4:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9e6:	eb0d 0103 	add.w	r1, sp, r3
 800e9ea:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e9ee:	5439      	strb	r1, [r7, r0]
 800e9f0:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 800e9f4:	d08b      	beq.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9f6:	f1bc 0f01 	cmp.w	ip, #1
 800e9fa:	d15b      	bne.n	800eab4 <dir_register+0x548>
 800e9fc:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 800ea00:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea02:	547a      	strb	r2, [r7, r1]
	} while (j < 8);
 800ea04:	d183      	bne.n	800e90e <dir_register+0x3a2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea06:	4628      	mov	r0, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea08:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea0c:	f7ff f892 	bl	800db34 <dir_find>
			if (res != FR_OK) break;
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d081      	beq.n	800e918 <dir_register+0x3ac>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ea14:	2804      	cmp	r0, #4
 800ea16:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	f47f ae29 	bne.w	800e672 <dir_register+0x106>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ea20:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 800ea22:	682f      	ldr	r7, [r5, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea24:	f013 0402 	ands.w	r4, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ea28:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea2c:	f47f adc7 	bne.w	800e5be <dir_register+0x52>
	res = dir_sdi(dp, 0);
 800ea30:	2100      	movs	r1, #0
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7fe ffd2 	bl	800d9dc <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea38:	f04f 0901 	mov.w	r9, #1
	if (res == FR_OK) {
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f43f adcd 	beq.w	800e5de <dir_register+0x72>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ea44:	2e04      	cmp	r6, #4
 800ea46:	f47f ae14 	bne.w	800e672 <dir_register+0x106>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ea4a:	2607      	movs	r6, #7
}
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	b00b      	add	sp, #44	; 0x2c
 800ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 800ea54:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea56:	f102 0001 	add.w	r0, r2, #1
 800ea5a:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800ea5e:	f47f af4c 	bne.w	800e8fa <dir_register+0x38e>
 800ea62:	e754      	b.n	800e90e <dir_register+0x3a2>
 800ea64:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea66:	f807 9000 	strb.w	r9, [r7, r0]
 800ea6a:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800ea6e:	f47f af44 	bne.w	800e8fa <dir_register+0x38e>
 800ea72:	e74c      	b.n	800e90e <dir_register+0x3a2>
 800ea74:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea76:	f807 9000 	strb.w	r9, [r7, r0]
 800ea7a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800ea7e:	f47f af3c 	bne.w	800e8fa <dir_register+0x38e>
 800ea82:	e744      	b.n	800e90e <dir_register+0x3a2>
 800ea84:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea86:	f807 9000 	strb.w	r9, [r7, r0]
 800ea8a:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800ea8e:	f47f af34 	bne.w	800e8fa <dir_register+0x38e>
 800ea92:	e73c      	b.n	800e90e <dir_register+0x3a2>
 800ea94:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea96:	f807 9000 	strb.w	r9, [r7, r0]
 800ea9a:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800ea9e:	f47f af2c 	bne.w	800e8fa <dir_register+0x38e>
 800eaa2:	e734      	b.n	800e90e <dir_register+0x3a2>
 800eaa4:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eaa6:	f807 9000 	strb.w	r9, [r7, r0]
 800eaaa:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 800eaae:	f47f af24 	bne.w	800e8fa <dir_register+0x38e>
 800eab2:	e72c      	b.n	800e90e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eab4:	f807 9001 	strb.w	r9, [r7, r1]
	} while (j < 8);
 800eab8:	2a00      	cmp	r2, #0
 800eaba:	f47f af28 	bne.w	800e90e <dir_register+0x3a2>
 800eabe:	2007      	movs	r0, #7
 800eac0:	e71b      	b.n	800e8fa <dir_register+0x38e>
	ns[i] = '~';
 800eac2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800eac4:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 800eac8:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eacc:	e6fe      	b.n	800e8cc <dir_register+0x360>
	ns[i] = '~';
 800eace:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ead0:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 800ead4:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ead8:	e6f8      	b.n	800e8cc <dir_register+0x360>
	ns[i] = '~';
 800eada:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eadc:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800eae0:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eae4:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800eae8:	4662      	mov	r2, ip
 800eaea:	e72e      	b.n	800e94a <dir_register+0x3de>
	ns[i] = '~';
 800eaec:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800eaee:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 800eaf2:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eaf6:	e6e9      	b.n	800e8cc <dir_register+0x360>
	ns[i] = '~';
 800eaf8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800eafa:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 800eafe:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb02:	e6e3      	b.n	800e8cc <dir_register+0x360>
	ns[i] = '~';
 800eb04:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800eb06:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 800eb0a:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb0e:	e6dd      	b.n	800e8cc <dir_register+0x360>
	ns[i] = '~';
 800eb10:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800eb12:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800eb16:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb1a:	e6d7      	b.n	800e8cc <dir_register+0x360>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eb1c:	2606      	movs	r6, #6
}
 800eb1e:	4630      	mov	r0, r6
 800eb20:	b00b      	add	sp, #44	; 0x2c
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eb26:	469b      	mov	fp, r3
 800eb28:	e53a      	b.n	800e5a0 <dir_register+0x34>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eb2a:	6969      	ldr	r1, [r5, #20]
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800eb32:	f7fe ff53 	bl	800d9dc <dir_sdi>
		if (res == FR_OK) {
 800eb36:	4606      	mov	r6, r0
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f47f ad9a 	bne.w	800e672 <dir_register+0x106>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eb3e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800eb42:	f04f 080f 	mov.w	r8, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb46:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 800eb4a:	f64f 7bff 	movw	fp, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eb4e:	01d3      	lsls	r3, r2, #7
 800eb50:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800eb54:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800eb58:	4413      	add	r3, r2
 800eb5a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800eb5e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800eb62:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800eb66:	fa53 f282 	uxtab	r2, r3, r2
 800eb6a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800eb6e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800eb72:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800eb76:	fa52 f383 	uxtab	r3, r2, r3
 800eb7a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800eb7e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800eb82:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800eb86:	fa53 f282 	uxtab	r2, r3, r2
 800eb8a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800eb8e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800eb92:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800eb96:	fa52 f383 	uxtab	r3, r2, r3
 800eb9a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800eb9e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800eba2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800eba6:	fa53 f282 	uxtab	r2, r3, r2
 800ebaa:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800ebae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800ebb2:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800ebb6:	fa52 f383 	uxtab	r3, r2, r3
 800ebba:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800ebbe:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800ebc2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ebc6:	fa53 f282 	uxtab	r2, r3, r2
 800ebca:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800ebce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800ebd2:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800ebd6:	fa52 f383 	uxtab	r3, r2, r3
 800ebda:	f3c3 0746 	ubfx	r7, r3, #1, #7
 800ebde:	ea47 17c3 	orr.w	r7, r7, r3, lsl #7
 800ebe2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800ebe6:	fa53 f787 	uxtab	r7, r3, r7
 800ebea:	b2ff      	uxtb	r7, r7
	} while (--n);
 800ebec:	e028      	b.n	800ec40 <dir_register+0x6d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800ebee:	f8a3 b003 	strh.w	fp, [r3, #3]
 800ebf2:	f8a3 b005 	strh.w	fp, [r3, #5]
 800ebf6:	f8a3 b007 	strh.w	fp, [r3, #7]
 800ebfa:	f8a3 b009 	strh.w	fp, [r3, #9]
 800ebfe:	f8a3 b00e 	strh.w	fp, [r3, #14]
 800ec02:	f8a3 b010 	strh.w	fp, [r3, #16]
 800ec06:	f8a3 b012 	strh.w	fp, [r3, #18]
 800ec0a:	f8a3 b014 	strh.w	fp, [r3, #20]
 800ec0e:	f8a3 b016 	strh.w	fp, [r3, #22]
 800ec12:	f8a3 b018 	strh.w	fp, [r3, #24]
 800ec16:	f8a3 b01c 	strh.w	fp, [r3, #28]
 800ec1a:	f8a3 b01e 	strh.w	fp, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ec1e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ec22:	701e      	strb	r6, [r3, #0]
				fs->wflag = 1;
 800ec24:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800ec26:	2100      	movs	r1, #0
 800ec28:	4628      	mov	r0, r5
				fs->wflag = 1;
 800ec2a:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ec2e:	f7ff fbbb 	bl	800e3a8 <dir_next>
			} while (res == FR_OK && --nent);
 800ec32:	4606      	mov	r6, r0
 800ec34:	2800      	cmp	r0, #0
 800ec36:	f47f ad1c 	bne.w	800e672 <dir_register+0x106>
 800ec3a:	3c01      	subs	r4, #1
 800ec3c:	f43f acf1 	beq.w	800e622 <dir_register+0xb6>
				res = move_window(fs, dp->sect);
 800ec40:	69e9      	ldr	r1, [r5, #28]
 800ec42:	4650      	mov	r0, sl
 800ec44:	f7fe f916 	bl	800ce74 <move_window>
 800ec48:	4606      	mov	r6, r0
				if (res != FR_OK) break;
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	f47f ad11 	bne.w	800e672 <dir_register+0x106>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec50:	b2e6      	uxtb	r6, r4
 800ec52:	6a2b      	ldr	r3, [r5, #32]
 800ec54:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ec58:	1e72      	subs	r2, r6, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ec5a:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ec5c:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ec5e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ec62:	f8a3 800b 	strh.w	r8, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ec66:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec6a:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800ec6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ec72:	7058      	strb	r0, [r3, #1]
 800ec74:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec76:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
 800ec7a:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec7c:	0050      	lsls	r0, r2, #1
 800ec7e:	45cc      	cmp	ip, r9
 800ec80:	d8b5      	bhi.n	800ebee <dir_register+0x682>
 800ec82:	3201      	adds	r2, #1
 800ec84:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800ec88:	0052      	lsls	r2, r2, #1
 800ec8a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ec8e:	f883 c003 	strb.w	ip, [r3, #3]
 800ec92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec96:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ec9a:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec9e:	45ce      	cmp	lr, r9
 800eca0:	d8a7      	bhi.n	800ebf2 <dir_register+0x686>
 800eca2:	440a      	add	r2, r1
 800eca4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800eca8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ecac:	f883 c005 	strb.w	ip, [r3, #5]
 800ecb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecb4:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ecb8:	f883 c006 	strb.w	ip, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecbc:	45ce      	cmp	lr, r9
 800ecbe:	d89a      	bhi.n	800ebf6 <dir_register+0x68a>
 800ecc0:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 800ecc4:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ecc8:	f883 c007 	strb.w	ip, [r3, #7]
 800eccc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecd0:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ecd4:	f883 c008 	strb.w	ip, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecd8:	45ce      	cmp	lr, r9
 800ecda:	d88e      	bhi.n	800ebfa <dir_register+0x68e>
 800ecdc:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 800ece0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ece4:	f883 c009 	strb.w	ip, [r3, #9]
 800ece8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecec:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ecf0:	f883 c00a 	strb.w	ip, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecf4:	45ce      	cmp	lr, r9
 800ecf6:	d882      	bhi.n	800ebfe <dir_register+0x692>
 800ecf8:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800ecfc:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed00:	f883 c00e 	strb.w	ip, [r3, #14]
 800ed04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed08:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ed0c:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed10:	45ce      	cmp	lr, r9
 800ed12:	f63f af76 	bhi.w	800ec02 <dir_register+0x696>
 800ed16:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 800ed1a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed1e:	f883 c010 	strb.w	ip, [r3, #16]
 800ed22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed26:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ed2a:	f883 c011 	strb.w	ip, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed2e:	45ce      	cmp	lr, r9
 800ed30:	f63f af69 	bhi.w	800ec06 <dir_register+0x69a>
 800ed34:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
 800ed38:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed3c:	f883 c012 	strb.w	ip, [r3, #18]
 800ed40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed44:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ed48:	f883 c013 	strb.w	ip, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed4c:	45ce      	cmp	lr, r9
 800ed4e:	f63f af5c 	bhi.w	800ec0a <dir_register+0x69e>
 800ed52:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 800ed56:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed5a:	f883 c014 	strb.w	ip, [r3, #20]
 800ed5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed62:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ed66:	f883 c015 	strb.w	ip, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed6a:	45ce      	cmp	lr, r9
 800ed6c:	f63f af4f 	bhi.w	800ec0e <dir_register+0x6a2>
 800ed70:	f8b2 c010 	ldrh.w	ip, [r2, #16]
 800ed74:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed78:	f883 c016 	strb.w	ip, [r3, #22]
 800ed7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed80:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ed84:	f883 c017 	strb.w	ip, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed88:	45ce      	cmp	lr, r9
 800ed8a:	f63f af42 	bhi.w	800ec12 <dir_register+0x6a6>
 800ed8e:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 800ed92:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ed96:	f883 c018 	strb.w	ip, [r3, #24]
 800ed9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed9e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eda2:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eda6:	45ce      	cmp	lr, r9
 800eda8:	f63f af35 	bhi.w	800ec16 <dir_register+0x6aa>
 800edac:	f8b2 c014 	ldrh.w	ip, [r2, #20]
 800edb0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800edb4:	f883 c01c 	strb.w	ip, [r3, #28]
 800edb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800edbc:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800edc0:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800edc4:	45ce      	cmp	lr, r9
 800edc6:	f63f af28 	bhi.w	800ec1a <dir_register+0x6ae>
 800edca:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800edcc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800edd0:	779a      	strb	r2, [r3, #30]
 800edd2:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800edd4:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800edd6:	fa1f f28c 	uxth.w	r2, ip
 800edda:	454a      	cmp	r2, r9
 800eddc:	f63f af1f 	bhi.w	800ec1e <dir_register+0x6b2>
 800ede0:	180a      	adds	r2, r1, r0
 800ede2:	8b52      	ldrh	r2, [r2, #26]
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	f47f af1c 	bne.w	800ec22 <dir_register+0x6b6>
 800edea:	e718      	b.n	800ec1e <dir_register+0x6b2>
			*d++ = *s++;
 800edec:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800edf0:	701a      	strb	r2, [r3, #0]
 800edf2:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800edf6:	705a      	strb	r2, [r3, #1]
 800edf8:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800edfc:	709a      	strb	r2, [r3, #2]
 800edfe:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800ee02:	70da      	strb	r2, [r3, #3]
 800ee04:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800ee08:	711a      	strb	r2, [r3, #4]
 800ee0a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800ee0e:	715a      	strb	r2, [r3, #5]
 800ee10:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800ee14:	719a      	strb	r2, [r3, #6]
 800ee16:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800ee1a:	71da      	strb	r2, [r3, #7]
 800ee1c:	e417      	b.n	800e64e <dir_register+0xe2>
 800ee1e:	bf00      	nop

0800ee20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ee20:	b510      	push	{r4, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800ee28:	b1a1      	cbz	r1, 800ee54 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee2a:	f891 c000 	ldrb.w	ip, [r1]
 800ee2e:	f1bc 0f1f 	cmp.w	ip, #31
 800ee32:	d912      	bls.n	800ee5a <f_mount+0x3a>
 800ee34:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 800ee38:	d00f      	beq.n	800ee5a <f_mount+0x3a>
 800ee3a:	4608      	mov	r0, r1
 800ee3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ee40:	2b1f      	cmp	r3, #31
 800ee42:	d90c      	bls.n	800ee5e <f_mount+0x3e>
 800ee44:	2b3a      	cmp	r3, #58	; 0x3a
 800ee46:	d1f9      	bne.n	800ee3c <f_mount+0x1c>
			i = *tp++ - '0';
 800ee48:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ee4a:	4288      	cmp	r0, r1
 800ee4c:	d102      	bne.n	800ee54 <f_mount+0x34>
 800ee4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ee52:	d006      	beq.n	800ee62 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee54:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800ee56:	b002      	add	sp, #8
 800ee58:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee5a:	4663      	mov	r3, ip
 800ee5c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ee5e:	2b3a      	cmp	r3, #58	; 0x3a
 800ee60:	d0f2      	beq.n	800ee48 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ee62:	4913      	ldr	r1, [pc, #76]	; (800eeb0 <f_mount+0x90>)
 800ee64:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800ee66:	b143      	cbz	r3, 800ee7a <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee68:	4812      	ldr	r0, [pc, #72]	; (800eeb4 <f_mount+0x94>)
 800ee6a:	6804      	ldr	r4, [r0, #0]
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	d019      	beq.n	800eea4 <f_mount+0x84>
 800ee70:	6904      	ldr	r4, [r0, #16]
 800ee72:	429c      	cmp	r4, r3
 800ee74:	d013      	beq.n	800ee9e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800ee76:	2000      	movs	r0, #0
 800ee78:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800ee7a:	9b01      	ldr	r3, [sp, #4]
 800ee7c:	b15b      	cbz	r3, 800ee96 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800ee7e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ee80:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800ee82:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800ee84:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ee86:	d1e6      	bne.n	800ee56 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ee88:	4602      	mov	r2, r0
 800ee8a:	a901      	add	r1, sp, #4
 800ee8c:	4668      	mov	r0, sp
 800ee8e:	f7fe f82f 	bl	800cef0 <find_volume>
}
 800ee92:	b002      	add	sp, #8
 800ee94:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ee96:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800ee98:	600b      	str	r3, [r1, #0]
}
 800ee9a:	b002      	add	sp, #8
 800ee9c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee9e:	2400      	movs	r4, #0
 800eea0:	6104      	str	r4, [r0, #16]
 800eea2:	e7e8      	b.n	800ee76 <f_mount+0x56>
 800eea4:	2400      	movs	r4, #0
 800eea6:	6004      	str	r4, [r0, #0]
 800eea8:	6904      	ldr	r4, [r0, #16]
 800eeaa:	429c      	cmp	r4, r3
 800eeac:	d1e3      	bne.n	800ee76 <f_mount+0x56>
 800eeae:	e7f6      	b.n	800ee9e <f_mount+0x7e>
 800eeb0:	2001dd64 	.word	0x2001dd64
 800eeb4:	2001dd68 	.word	0x2001dd68

0800eeb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eebc:	b092      	sub	sp, #72	; 0x48
 800eebe:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eec0:	2800      	cmp	r0, #0
 800eec2:	f000 8096 	beq.w	800eff2 <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eec6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800eeca:	4616      	mov	r6, r2
 800eecc:	4604      	mov	r4, r0
 800eece:	a903      	add	r1, sp, #12
 800eed0:	a801      	add	r0, sp, #4
 800eed2:	463a      	mov	r2, r7
 800eed4:	f7fe f80c 	bl	800cef0 <find_volume>
	if (res == FR_OK) {
 800eed8:	4605      	mov	r5, r0
 800eeda:	b128      	cbz	r0, 800eee8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eedc:	2300      	movs	r3, #0
 800eede:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800eee0:	4628      	mov	r0, r5
 800eee2:	b012      	add	sp, #72	; 0x48
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800eee8:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eeec:	a804      	add	r0, sp, #16
 800eeee:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800eef0:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eef4:	f7fe ffca 	bl	800de8c <follow_path>
		if (res == FR_OK) {
 800eef8:	b9f0      	cbnz	r0, 800ef38 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eefa:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	db7e      	blt.n	800f000 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
 800ef02:	4b9e      	ldr	r3, [pc, #632]	; (800f17c <f_open+0x2c4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef04:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef08:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800ef0a:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef0e:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
 800ef10:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800ef14:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800ef18:	f1b9 0f00 	cmp.w	r9, #0
 800ef1c:	f000 80d9 	beq.w	800f0d2 <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef20:	4591      	cmp	r9, r2
 800ef22:	d06f      	beq.n	800f004 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
 800ef24:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800ef28:	f1b9 0f00 	cmp.w	r9, #0
 800ef2c:	d071      	beq.n	800f012 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef2e:	454a      	cmp	r2, r9
 800ef30:	f000 80e8 	beq.w	800f104 <f_open+0x24c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ef34:	2512      	movs	r5, #18
 800ef36:	e7d1      	b.n	800eedc <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ef38:	f016 0f1c 	tst.w	r6, #28
 800ef3c:	d05e      	beq.n	800effc <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ef3e:	2804      	cmp	r0, #4
 800ef40:	d15c      	bne.n	800effc <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef42:	4b8e      	ldr	r3, [pc, #568]	; (800f17c <f_open+0x2c4>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	b112      	cbz	r2, 800ef4e <f_open+0x96>
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1f2      	bne.n	800ef34 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ef4e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ef50:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ef54:	f7ff fb0a 	bl	800e56c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d14f      	bne.n	800effc <f_open+0x144>
				dw = GET_FATTIME();
 800ef5c:	f7fd fcd6 	bl	800c90c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ef60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ef62:	0a02      	lsrs	r2, r0, #8
 800ef64:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ef68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ef6a:	75da      	strb	r2, [r3, #23]
 800ef6c:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ef6e:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef70:	0e00      	lsrs	r0, r0, #24
 800ef72:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef74:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 800ef76:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef7a:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 800ef7c:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800ef82:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ef84:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ef86:	d102      	bne.n	800ef8e <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ef88:	8a9a      	ldrh	r2, [r3, #20]
 800ef8a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ef8e:	2200      	movs	r2, #0
 800ef90:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ef92:	f898 1000 	ldrb.w	r1, [r8]
 800ef96:	2903      	cmp	r1, #3
 800ef98:	d100      	bne.n	800ef9c <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
 800ef9a:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ef9e:	2200      	movs	r2, #0
 800efa0:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800efa2:	2301      	movs	r3, #1
 800efa4:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800efa8:	b186      	cbz	r6, 800efcc <f_open+0x114>
						dw = fs->winsect;
 800efaa:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800efae:	4631      	mov	r1, r6
 800efb0:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800efb2:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800efb4:	f7ff f8f6 	bl	800e1a4 <remove_chain>
						if (res == FR_OK) {
 800efb8:	9b00      	ldr	r3, [sp, #0]
 800efba:	b9f8      	cbnz	r0, 800effc <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800efbc:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800efbe:	4619      	mov	r1, r3
 800efc0:	4640      	mov	r0, r8
 800efc2:	f7fd ff57 	bl	800ce74 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800efc6:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800efca:	b9b8      	cbnz	r0, 800effc <f_open+0x144>
				mode |= FA_MODIFIED;
 800efcc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efd0:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efd4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efd8:	3900      	subs	r1, #0
 800efda:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efdc:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efde:	bf18      	it	ne
 800efe0:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 800efe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efe4:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efe6:	f7fd fdb7 	bl	800cb58 <inc_lock>
 800efea:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800efec:	b9e8      	cbnz	r0, 800f02a <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800efee:	2502      	movs	r5, #2
 800eff0:	e774      	b.n	800eedc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800eff2:	2509      	movs	r5, #9
}
 800eff4:	4628      	mov	r0, r5
 800eff6:	b012      	add	sp, #72	; 0x48
 800eff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800effc:	4605      	mov	r5, r0
 800effe:	e76d      	b.n	800eedc <f_open+0x24>
				res = FR_INVALID_NAME;
 800f000:	2506      	movs	r5, #6
 800f002:	e76b      	b.n	800eedc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	4562      	cmp	r2, ip
 800f008:	f000 8085 	beq.w	800f116 <f_open+0x25e>
		if (Files[i].fs) {	/* Existing entry */
 800f00c:	691a      	ldr	r2, [r3, #16]
 800f00e:	2a00      	cmp	r2, #0
 800f010:	d18d      	bne.n	800ef2e <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f012:	f016 0f1c 	tst.w	r6, #28
 800f016:	d049      	beq.n	800f0ac <f_open+0x1f4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f018:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f01c:	f013 0f11 	tst.w	r3, #17
 800f020:	d155      	bne.n	800f0ce <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f022:	0773      	lsls	r3, r6, #29
 800f024:	d550      	bpl.n	800f0c8 <f_open+0x210>
 800f026:	2508      	movs	r5, #8
 800f028:	e758      	b.n	800eedc <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 800f02a:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f02e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800f030:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f032:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f034:	d102      	bne.n	800f03c <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f036:	8a9a      	ldrh	r2, [r3, #20]
 800f038:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f03c:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f03e:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800f040:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f044:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f048:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 800f04c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f050:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 800f054:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f056:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 800f058:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 800f05c:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 800f05e:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 800f060:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f062:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f064:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800f066:	f009 fdeb 	bl	8018c40 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f06a:	06bf      	lsls	r7, r7, #26
 800f06c:	f57f af38 	bpl.w	800eee0 <f_open+0x28>
 800f070:	f1b9 0f00 	cmp.w	r9, #0
 800f074:	f43f af34 	beq.w	800eee0 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f078:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f07c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f080:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f084:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f088:	d804      	bhi.n	800f094 <f_open+0x1dc>
 800f08a:	e04a      	b.n	800f122 <f_open+0x26a>
 800f08c:	1c70      	adds	r0, r6, #1
 800f08e:	d06c      	beq.n	800f16a <f_open+0x2b2>
 800f090:	454f      	cmp	r7, r9
 800f092:	d26a      	bcs.n	800f16a <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
 800f094:	4631      	mov	r1, r6
 800f096:	6820      	ldr	r0, [r4, #0]
 800f098:	f7fe f922 	bl	800d2e0 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800f09c:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f09e:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800f0a2:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f0a4:	d8f2      	bhi.n	800f08c <f_open+0x1d4>
 800f0a6:	2502      	movs	r5, #2
				fp->clust = clst;
 800f0a8:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0aa:	e717      	b.n	800eedc <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f0ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f0b0:	06da      	lsls	r2, r3, #27
 800f0b2:	d425      	bmi.n	800f100 <f_open+0x248>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f0b4:	07b2      	lsls	r2, r6, #30
 800f0b6:	d501      	bpl.n	800f0bc <f_open+0x204>
 800f0b8:	07db      	lsls	r3, r3, #31
 800f0ba:	d408      	bmi.n	800f0ce <f_open+0x216>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f0bc:	f006 0608 	and.w	r6, r6, #8
 800f0c0:	2e00      	cmp	r6, #0
 800f0c2:	d183      	bne.n	800efcc <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f0c4:	4601      	mov	r1, r0
 800f0c6:	e785      	b.n	800efd4 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f0c8:	0730      	lsls	r0, r6, #28
 800f0ca:	d583      	bpl.n	800efd4 <f_open+0x11c>
 800f0cc:	e746      	b.n	800ef5c <f_open+0xa4>
						res = FR_DENIED;
 800f0ce:	2507      	movs	r5, #7
 800f0d0:	e704      	b.n	800eedc <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800f0d2:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800f0d6:	f1b9 0f00 	cmp.w	r9, #0
 800f0da:	d09a      	beq.n	800f012 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f0dc:	4591      	cmp	r9, r2
 800f0de:	d198      	bne.n	800f012 <f_open+0x15a>
 800f0e0:	695a      	ldr	r2, [r3, #20]
 800f0e2:	4562      	cmp	r2, ip
 800f0e4:	d195      	bne.n	800f012 <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
 800f0e6:	699a      	ldr	r2, [r3, #24]
 800f0e8:	4572      	cmp	r2, lr
 800f0ea:	d192      	bne.n	800f012 <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f0ec:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f0ee:	b928      	cbnz	r0, 800f0fc <f_open+0x244>
 800f0f0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f0f4:	899b      	ldrh	r3, [r3, #12]
 800f0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0fa:	d18a      	bne.n	800f012 <f_open+0x15a>
 800f0fc:	2510      	movs	r5, #16
 800f0fe:	e6ed      	b.n	800eedc <f_open+0x24>
					res = FR_NO_FILE;
 800f100:	2504      	movs	r5, #4
 800f102:	e6eb      	b.n	800eedc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f104:	695a      	ldr	r2, [r3, #20]
 800f106:	4562      	cmp	r2, ip
 800f108:	f47f af14 	bne.w	800ef34 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800f10c:	699a      	ldr	r2, [r3, #24]
 800f10e:	4572      	cmp	r2, lr
 800f110:	f47f af10 	bne.w	800ef34 <f_open+0x7c>
 800f114:	e7ea      	b.n	800f0ec <f_open+0x234>
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	4572      	cmp	r2, lr
 800f11a:	f47f af77 	bne.w	800f00c <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f11e:	462a      	mov	r2, r5
 800f120:	e7e5      	b.n	800f0ee <f_open+0x236>
				fp->clust = clst;
 800f122:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f124:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f43f aed9 	beq.w	800eee0 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f12e:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800f132:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f134:	3b02      	subs	r3, #2
 800f136:	429e      	cmp	r6, r3
 800f138:	f4bf af59 	bcs.w	800efee <f_open+0x136>
	return clst * fs->csize + fs->database;
 800f13c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800f140:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800f144:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f148:	2a00      	cmp	r2, #0
 800f14a:	f43f af50 	beq.w	800efee <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f14e:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f152:	4651      	mov	r1, sl
 800f154:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f156:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f158:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f15c:	f7fd fcd0 	bl	800cb00 <disk_read>
 800f160:	2800      	cmp	r0, #0
 800f162:	f43f aebd 	beq.w	800eee0 <f_open+0x28>
 800f166:	2501      	movs	r5, #1
 800f168:	e6b8      	b.n	800eedc <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f16a:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 800f16c:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800f16e:	bf0c      	ite	eq
 800f170:	2301      	moveq	r3, #1
 800f172:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f174:	d1d6      	bne.n	800f124 <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f176:	461d      	mov	r5, r3
 800f178:	e6b0      	b.n	800eedc <f_open+0x24>
 800f17a:	bf00      	nop
 800f17c:	2001dd68 	.word	0x2001dd68

0800f180 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800f186:	2300      	movs	r3, #0
{
 800f188:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800f18a:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f18c:	b150      	cbz	r0, 800f1a4 <f_read+0x24>
 800f18e:	6803      	ldr	r3, [r0, #0]
 800f190:	4604      	mov	r4, r0
 800f192:	b13b      	cbz	r3, 800f1a4 <f_read+0x24>
 800f194:	4691      	mov	r9, r2
 800f196:	781a      	ldrb	r2, [r3, #0]
 800f198:	b122      	cbz	r2, 800f1a4 <f_read+0x24>
 800f19a:	460d      	mov	r5, r1
 800f19c:	88da      	ldrh	r2, [r3, #6]
 800f19e:	8881      	ldrh	r1, [r0, #4]
 800f1a0:	4291      	cmp	r1, r2
 800f1a2:	d005      	beq.n	800f1b0 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f1a4:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	b005      	add	sp, #20
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f1b0:	7858      	ldrb	r0, [r3, #1]
 800f1b2:	f7fd fc89 	bl	800cac8 <disk_status>
 800f1b6:	07c2      	lsls	r2, r0, #31
 800f1b8:	d4f4      	bmi.n	800f1a4 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f1ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f1be:	f1b8 0f00 	cmp.w	r8, #0
 800f1c2:	d1f1      	bne.n	800f1a8 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f1c4:	7d23      	ldrb	r3, [r4, #20]
 800f1c6:	f013 0301 	ands.w	r3, r3, #1
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	f000 80da 	beq.w	800f384 <f_read+0x204>
	remain = fp->obj.objsize - fp->fptr;
 800f1d0:	69a3      	ldr	r3, [r4, #24]
 800f1d2:	68e7      	ldr	r7, [r4, #12]
 800f1d4:	1aff      	subs	r7, r7, r3
 800f1d6:	454f      	cmp	r7, r9
 800f1d8:	bf28      	it	cs
 800f1da:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f1dc:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	d0e1      	beq.n	800f1a8 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f1e4:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1e8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f1ec:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f1f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f1f4:	2a00      	cmp	r2, #0
 800f1f6:	d142      	bne.n	800f27e <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f1f8:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800f1fc:	0a59      	lsrs	r1, r3, #9
 800f1fe:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f200:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 800f204:	d06f      	beq.n	800f2e6 <f_read+0x166>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f206:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f208:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800f20c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f20e:	3b02      	subs	r3, #2
 800f210:	4298      	cmp	r0, r3
 800f212:	d275      	bcs.n	800f300 <f_read+0x180>
	return clst * fs->csize + fs->database;
 800f214:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f218:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800f21c:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f220:	2b00      	cmp	r3, #0
 800f222:	d06d      	beq.n	800f300 <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f224:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800f228:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f22c:	d36f      	bcc.n	800f30e <f_read+0x18e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f22e:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f232:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f236:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f238:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f23c:	bf88      	it	hi
 800f23e:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f242:	465a      	mov	r2, fp
 800f244:	4629      	mov	r1, r5
 800f246:	4643      	mov	r3, r8
 800f248:	f7fd fc5a 	bl	800cb00 <disk_read>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	f040 8087 	bne.w	800f360 <f_read+0x1e0>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f252:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f256:	2a00      	cmp	r2, #0
 800f258:	f2c0 80ab 	blt.w	800f3b2 <f_read+0x232>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f25c:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f260:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f262:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f264:	440d      	add	r5, r1
 800f266:	440b      	add	r3, r1
 800f268:	61a3      	str	r3, [r4, #24]
 800f26a:	6833      	ldr	r3, [r6, #0]
 800f26c:	440b      	add	r3, r1
 800f26e:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f270:	f000 80b5 	beq.w	800f3de <f_read+0x25e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f274:	69a3      	ldr	r3, [r4, #24]
 800f276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f27a:	2a00      	cmp	r2, #0
 800f27c:	d0bc      	beq.n	800f1f8 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f27e:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f280:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f284:	eb0a 0302 	add.w	r3, sl, r2
 800f288:	4450      	add	r0, sl
 800f28a:	42b9      	cmp	r1, r7
 800f28c:	eba5 0000 	sub.w	r0, r5, r0
 800f290:	bf28      	it	cs
 800f292:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f294:	2802      	cmp	r0, #2
 800f296:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800f29a:	d969      	bls.n	800f370 <f_read+0x1f0>
 800f29c:	f1bb 0f05 	cmp.w	fp, #5
 800f2a0:	d966      	bls.n	800f370 <f_read+0x1f0>
 800f2a2:	f021 0e03 	bic.w	lr, r1, #3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	449e      	add	lr, r3
			*d++ = *s++;
 800f2ac:	f852 cb04 	ldr.w	ip, [r2], #4
 800f2b0:	4572      	cmp	r2, lr
 800f2b2:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 800f2b6:	d1f9      	bne.n	800f2ac <f_read+0x12c>
 800f2b8:	f021 0203 	bic.w	r2, r1, #3
 800f2bc:	4291      	cmp	r1, r2
 800f2be:	eb05 0002 	add.w	r0, r5, r2
 800f2c2:	eb03 0c02 	add.w	ip, r3, r2
 800f2c6:	d0cb      	beq.n	800f260 <f_read+0xe0>
			*d++ = *s++;
 800f2c8:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 800f2ca:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 800f2ce:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 800f2d0:	d0c6      	beq.n	800f260 <f_read+0xe0>
			*d++ = *s++;
 800f2d2:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 800f2d6:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f2da:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 800f2dc:	d0c0      	beq.n	800f260 <f_read+0xe0>
			*d++ = *s++;
 800f2de:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800f2e2:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 800f2e4:	e7bc      	b.n	800f260 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f2e6:	bb3b      	cbnz	r3, 800f338 <f_read+0x1b8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f2e8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f2ea:	2801      	cmp	r0, #1
 800f2ec:	d908      	bls.n	800f300 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	d036      	beq.n	800f360 <f_read+0x1e0>
				fp->clust = clst;				/* Update current cluster */
 800f2f2:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f2f4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f2f6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f2fa:	3b02      	subs	r3, #2
 800f2fc:	4298      	cmp	r0, r3
 800f2fe:	d389      	bcc.n	800f214 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f300:	2302      	movs	r3, #2
 800f302:	4698      	mov	r8, r3
 800f304:	7563      	strb	r3, [r4, #21]
}
 800f306:	4640      	mov	r0, r8
 800f308:	b005      	add	sp, #20
 800f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f30e:	6a22      	ldr	r2, [r4, #32]
 800f310:	455a      	cmp	r2, fp
 800f312:	d00b      	beq.n	800f32c <f_read+0x1ac>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f314:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	db3d      	blt.n	800f398 <f_read+0x218>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f31c:	2301      	movs	r3, #1
 800f31e:	465a      	mov	r2, fp
 800f320:	4651      	mov	r1, sl
 800f322:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f326:	f7fd fbeb 	bl	800cb00 <disk_read>
 800f32a:	b9c8      	cbnz	r0, 800f360 <f_read+0x1e0>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f32c:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f32e:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f336:	e7a2      	b.n	800f27e <f_read+0xfe>
					if (fp->cltbl) {
 800f338:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f33a:	b330      	cbz	r0, 800f38a <f_read+0x20a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f33c:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f33e:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f340:	895b      	ldrh	r3, [r3, #10]
 800f342:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f346:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f348:	b929      	cbnz	r1, 800f356 <f_read+0x1d6>
 800f34a:	e7d9      	b.n	800f300 <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 800f34c:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f34e:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f352:	2900      	cmp	r1, #0
 800f354:	d0d4      	beq.n	800f300 <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 800f356:	4299      	cmp	r1, r3
 800f358:	d9f8      	bls.n	800f34c <f_read+0x1cc>
	return cl + *tbl;	/* Return the cluster number */
 800f35a:	6840      	ldr	r0, [r0, #4]
 800f35c:	4418      	add	r0, r3
 800f35e:	e7c4      	b.n	800f2ea <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f360:	f8dd 8000 	ldr.w	r8, [sp]
 800f364:	2301      	movs	r3, #1
}
 800f366:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f368:	7563      	strb	r3, [r4, #21]
}
 800f36a:	b005      	add	sp, #20
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f370:	1e6a      	subs	r2, r5, #1
 800f372:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 800f376:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f37a:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f37c:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f380:	d1f9      	bne.n	800f376 <f_read+0x1f6>
 800f382:	e76d      	b.n	800f260 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f384:	f04f 0807 	mov.w	r8, #7
 800f388:	e70e      	b.n	800f1a8 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f38a:	69e1      	ldr	r1, [r4, #28]
 800f38c:	6820      	ldr	r0, [r4, #0]
 800f38e:	9203      	str	r2, [sp, #12]
 800f390:	f7fd ffa6 	bl	800d2e0 <get_fat.isra.0>
 800f394:	9a03      	ldr	r2, [sp, #12]
 800f396:	e7a8      	b.n	800f2ea <f_read+0x16a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f398:	2301      	movs	r3, #1
 800f39a:	4651      	mov	r1, sl
 800f39c:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f3a0:	f7fd fbbe 	bl	800cb20 <disk_write>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d1db      	bne.n	800f360 <f_read+0x1e0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f3a8:	7d23      	ldrb	r3, [r4, #20]
 800f3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3ae:	7523      	strb	r3, [r4, #20]
 800f3b0:	e7b4      	b.n	800f31c <f_read+0x19c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f3b2:	6a22      	ldr	r2, [r4, #32]
 800f3b4:	eba2 020b 	sub.w	r2, r2, fp
 800f3b8:	4542      	cmp	r2, r8
 800f3ba:	f4bf af4f 	bcs.w	800f25c <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f3be:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 800f3c2:	9b01      	ldr	r3, [sp, #4]
 800f3c4:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f3c6:	1ad0      	subs	r0, r2, r3
 800f3c8:	2802      	cmp	r0, #2
 800f3ca:	d90b      	bls.n	800f3e4 <f_read+0x264>
 800f3cc:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 800f3d0:	f851 3b04 	ldr.w	r3, [r1], #4
 800f3d4:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f3d8:	4562      	cmp	r2, ip
 800f3da:	d1f9      	bne.n	800f3d0 <f_read+0x250>
 800f3dc:	e73e      	b.n	800f25c <f_read+0xdc>
 800f3de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f3e2:	e6e1      	b.n	800f1a8 <f_read+0x28>
 800f3e4:	3a01      	subs	r2, #1
 800f3e6:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 800f3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f3ee:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f3f0:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f3f4:	d1f9      	bne.n	800f3ea <f_read+0x26a>
 800f3f6:	e731      	b.n	800f25c <f_read+0xdc>

0800f3f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f3fe:	2300      	movs	r3, #0
{
 800f400:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 800f402:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f404:	b150      	cbz	r0, 800f41c <f_write+0x24>
 800f406:	6803      	ldr	r3, [r0, #0]
 800f408:	4604      	mov	r4, r0
 800f40a:	b13b      	cbz	r3, 800f41c <f_write+0x24>
 800f40c:	4616      	mov	r6, r2
 800f40e:	781a      	ldrb	r2, [r3, #0]
 800f410:	b122      	cbz	r2, 800f41c <f_write+0x24>
 800f412:	460d      	mov	r5, r1
 800f414:	88da      	ldrh	r2, [r3, #6]
 800f416:	8881      	ldrh	r1, [r0, #4]
 800f418:	4291      	cmp	r1, r2
 800f41a:	d005      	beq.n	800f428 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f41c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f420:	4640      	mov	r0, r8
 800f422:	b005      	add	sp, #20
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f428:	7858      	ldrb	r0, [r3, #1]
 800f42a:	f7fd fb4d 	bl	800cac8 <disk_status>
 800f42e:	07c1      	lsls	r1, r0, #31
 800f430:	d4f4      	bmi.n	800f41c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f432:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f436:	f1b8 0f00 	cmp.w	r8, #0
 800f43a:	d1f1      	bne.n	800f420 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f43c:	7d23      	ldrb	r3, [r4, #20]
 800f43e:	079a      	lsls	r2, r3, #30
 800f440:	f140 80f6 	bpl.w	800f630 <f_write+0x238>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f444:	69a2      	ldr	r2, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f446:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f44a:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f44c:	bf28      	it	cs
 800f44e:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 800f450:	2e00      	cmp	r6, #0
 800f452:	f000 80cb 	beq.w	800f5ec <f_write+0x1f4>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f456:	f504 730c 	add.w	r3, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f45a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f45e:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f460:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f464:	2b00      	cmp	r3, #0
 800f466:	d160      	bne.n	800f52a <f_write+0x132>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f468:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 800f46c:	0a53      	lsrs	r3, r2, #9
 800f46e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 800f472:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 800f476:	d110      	bne.n	800f49a <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f478:	2a00      	cmp	r2, #0
 800f47a:	f040 80a0 	bne.w	800f5be <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f47e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f480:	2800      	cmp	r0, #0
 800f482:	f000 80e0 	beq.w	800f646 <f_write+0x24e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f486:	2801      	cmp	r0, #1
 800f488:	f000 8087 	beq.w	800f59a <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f48c:	1c43      	adds	r3, r0, #1
 800f48e:	f000 80be 	beq.w	800f60e <f_write+0x216>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f492:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f494:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f496:	b903      	cbnz	r3, 800f49a <f_write+0xa2>
 800f498:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f49a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f2c0 80a8 	blt.w	800f5f4 <f_write+0x1fc>
	clst -= 2;
 800f4a4:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4a6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 800f4aa:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4ac:	3a02      	subs	r2, #2
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d273      	bcs.n	800f59a <f_write+0x1a2>
	return clst * fs->csize + fs->database;
 800f4b2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f4b6:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800f4ba:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f4be:	2a00      	cmp	r2, #0
 800f4c0:	d06b      	beq.n	800f59a <f_write+0x1a2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f4c2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800f4c6:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f4c8:	d36e      	bcc.n	800f5a8 <f_write+0x1b0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f4ca:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f4ce:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f4d0:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4d2:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f4d6:	bf88      	it	hi
 800f4d8:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4dc:	4629      	mov	r1, r5
 800f4de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4e2:	f7fd fb1d 	bl	800cb20 <disk_write>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	f040 8091 	bne.w	800f60e <f_write+0x216>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f4ec:	6a21      	ldr	r1, [r4, #32]
 800f4ee:	9a02      	ldr	r2, [sp, #8]
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	1a8a      	subs	r2, r1, r2
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	f0c0 80ba 	bcc.w	800f66e <f_write+0x276>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f4fa:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800f4fe:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f502:	69a3      	ldr	r3, [r4, #24]
 800f504:	4615      	mov	r5, r2
 800f506:	68e2      	ldr	r2, [r4, #12]
 800f508:	4463      	add	r3, ip
 800f50a:	429a      	cmp	r2, r3
 800f50c:	61a3      	str	r3, [r4, #24]
 800f50e:	bf38      	it	cc
 800f510:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800f512:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f516:	60e2      	str	r2, [r4, #12]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	4463      	add	r3, ip
 800f51c:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800f51e:	d064      	beq.n	800f5ea <f_write+0x1f2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f520:	69a2      	ldr	r2, [r4, #24]
 800f522:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f526:	2b00      	cmp	r3, #0
 800f528:	d09e      	beq.n	800f468 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f52a:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
 800f52e:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f530:	4453      	add	r3, sl
 800f532:	45b4      	cmp	ip, r6
 800f534:	eba3 0202 	sub.w	r2, r3, r2
 800f538:	bf28      	it	cs
 800f53a:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f53c:	2a02      	cmp	r2, #2
 800f53e:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800f542:	d96b      	bls.n	800f61c <f_write+0x224>
 800f544:	f1bb 0f05 	cmp.w	fp, #5
 800f548:	d968      	bls.n	800f61c <f_write+0x224>
 800f54a:	f02c 0e03 	bic.w	lr, ip, #3
 800f54e:	461a      	mov	r2, r3
 800f550:	4629      	mov	r1, r5
 800f552:	449e      	add	lr, r3
			*d++ = *s++;
 800f554:	f851 0b04 	ldr.w	r0, [r1], #4
 800f558:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f55c:	4596      	cmp	lr, r2
 800f55e:	d1f9      	bne.n	800f554 <f_write+0x15c>
 800f560:	f02c 0103 	bic.w	r1, ip, #3
 800f564:	458c      	cmp	ip, r1
 800f566:	eb03 0001 	add.w	r0, r3, r1
 800f56a:	eb05 0201 	add.w	r2, r5, r1
 800f56e:	d00f      	beq.n	800f590 <f_write+0x198>
			*d++ = *s++;
 800f570:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 800f574:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 800f578:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 800f57c:	d006      	beq.n	800f58c <f_write+0x194>
			*d++ = *s++;
 800f57e:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 800f580:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f584:	7043      	strb	r3, [r0, #1]
 800f586:	bf1c      	itt	ne
 800f588:	7893      	ldrbne	r3, [r2, #2]
 800f58a:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 800f58c:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 800f590:	7d23      	ldrb	r3, [r4, #20]
 800f592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f596:	7523      	strb	r3, [r4, #20]
 800f598:	e7b3      	b.n	800f502 <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f59a:	2302      	movs	r3, #2
 800f59c:	4698      	mov	r8, r3
 800f59e:	7563      	strb	r3, [r4, #21]
}
 800f5a0:	4640      	mov	r0, r8
 800f5a2:	b005      	add	sp, #20
 800f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5a8:	6a23      	ldr	r3, [r4, #32]
 800f5aa:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 800f5ac:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5ae:	d002      	beq.n	800f5b6 <f_write+0x1be>
 800f5b0:	68e1      	ldr	r1, [r4, #12]
 800f5b2:	428b      	cmp	r3, r1
 800f5b4:	d34f      	bcc.n	800f656 <f_write+0x25e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 800f5ba:	6222      	str	r2, [r4, #32]
 800f5bc:	e7b5      	b.n	800f52a <f_write+0x132>
					if (fp->cltbl) {
 800f5be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f5c0:	2900      	cmp	r1, #0
 800f5c2:	d038      	beq.n	800f636 <f_write+0x23e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5c4:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5c6:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5c8:	8952      	ldrh	r2, [r2, #10]
 800f5ca:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5ce:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5d0:	b922      	cbnz	r2, 800f5dc <f_write+0x1e4>
 800f5d2:	e00a      	b.n	800f5ea <f_write+0x1f2>
		cl -= ncl; tbl++;		/* Next fragment */
 800f5d4:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5d6:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5da:	b132      	cbz	r2, 800f5ea <f_write+0x1f2>
		if (cl < ncl) break;	/* In this fragment? */
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d2f9      	bcs.n	800f5d4 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 800f5e0:	6848      	ldr	r0, [r1, #4]
 800f5e2:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	f47f af4e 	bne.w	800f486 <f_write+0x8e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f5ea:	7d23      	ldrb	r3, [r4, #20]
 800f5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f5f2:	e715      	b.n	800f420 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	6a22      	ldr	r2, [r4, #32]
 800f5f8:	4651      	mov	r1, sl
 800f5fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f5fe:	f7fd fa8f 	bl	800cb20 <disk_write>
 800f602:	b920      	cbnz	r0, 800f60e <f_write+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f604:	7d23      	ldrb	r3, [r4, #20]
 800f606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f60a:	7523      	strb	r3, [r4, #20]
 800f60c:	e74a      	b.n	800f4a4 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f60e:	2301      	movs	r3, #1
 800f610:	4698      	mov	r8, r3
 800f612:	7563      	strb	r3, [r4, #21]
}
 800f614:	4640      	mov	r0, r8
 800f616:	b005      	add	sp, #20
 800f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61c:	3b01      	subs	r3, #1
 800f61e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 800f622:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 800f626:	4295      	cmp	r5, r2
			*d++ = *s++;
 800f628:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800f62c:	d1f9      	bne.n	800f622 <f_write+0x22a>
 800f62e:	e7af      	b.n	800f590 <f_write+0x198>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f630:	f04f 0807 	mov.w	r8, #7
 800f634:	e6f4      	b.n	800f420 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f636:	69e1      	ldr	r1, [r4, #28]
 800f638:	4620      	mov	r0, r4
 800f63a:	f7fe f90f 	bl	800d85c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f63e:	2800      	cmp	r0, #0
 800f640:	f47f af21 	bne.w	800f486 <f_write+0x8e>
 800f644:	e7d1      	b.n	800f5ea <f_write+0x1f2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f646:	4659      	mov	r1, fp
 800f648:	4620      	mov	r0, r4
 800f64a:	f7fe f907 	bl	800d85c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f64e:	2800      	cmp	r0, #0
 800f650:	f47f af19 	bne.w	800f486 <f_write+0x8e>
 800f654:	e7c9      	b.n	800f5ea <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f656:	2301      	movs	r3, #1
 800f658:	4651      	mov	r1, sl
 800f65a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f65e:	9202      	str	r2, [sp, #8]
 800f660:	f7fd fa4e 	bl	800cb00 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f664:	2800      	cmp	r0, #0
 800f666:	d1d2      	bne.n	800f60e <f_write+0x216>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f668:	69a3      	ldr	r3, [r4, #24]
 800f66a:	9a02      	ldr	r2, [sp, #8]
 800f66c:	e7a3      	b.n	800f5b6 <f_write+0x1be>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f66e:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 800f672:	1c42      	adds	r2, r0, #1
 800f674:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f676:	ebaa 0202 	sub.w	r2, sl, r2
 800f67a:	2a02      	cmp	r2, #2
 800f67c:	d90d      	bls.n	800f69a <f_write+0x2a2>
 800f67e:	4652      	mov	r2, sl
 800f680:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 800f684:	f851 0b04 	ldr.w	r0, [r1], #4
 800f688:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f68c:	4562      	cmp	r2, ip
 800f68e:	d1f9      	bne.n	800f684 <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f690:	7d22      	ldrb	r2, [r4, #20]
 800f692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f696:	7522      	strb	r2, [r4, #20]
 800f698:	e72f      	b.n	800f4fa <f_write+0x102>
 800f69a:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 800f69e:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 800f6a2:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 800f6a6:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f6a8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f6ac:	d1f9      	bne.n	800f6a2 <f_write+0x2aa>
 800f6ae:	e7ef      	b.n	800f690 <f_write+0x298>

0800f6b0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6b0:	b158      	cbz	r0, 800f6ca <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f6b2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6b4:	6803      	ldr	r3, [r0, #0]
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	b12b      	cbz	r3, 800f6c6 <f_close+0x16>
 800f6ba:	781a      	ldrb	r2, [r3, #0]
 800f6bc:	b11a      	cbz	r2, 800f6c6 <f_close+0x16>
 800f6be:	8881      	ldrh	r1, [r0, #4]
 800f6c0:	88da      	ldrh	r2, [r3, #6]
 800f6c2:	4291      	cmp	r1, r2
 800f6c4:	d003      	beq.n	800f6ce <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800f6c6:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800f6ca:	2009      	movs	r0, #9
}
 800f6cc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f6ce:	7858      	ldrb	r0, [r3, #1]
 800f6d0:	f7fd f9fa 	bl	800cac8 <disk_status>
 800f6d4:	07c1      	lsls	r1, r0, #31
 800f6d6:	d4f6      	bmi.n	800f6c6 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f6d8:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f6da:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f6dc:	065a      	lsls	r2, r3, #25
 800f6de:	d52e      	bpl.n	800f73e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f6e0:	061b      	lsls	r3, r3, #24
 800f6e2:	d451      	bmi.n	800f788 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800f6e4:	f7fd f912 	bl	800c90c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f6e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f6ea:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	f7fd fbc1 	bl	800ce74 <move_window>
				if (res == FR_OK) {
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d1e8      	bne.n	800f6c8 <f_close+0x18>
					dir = fp->dir_ptr;
 800f6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f6f8:	7ada      	ldrb	r2, [r3, #11]
 800f6fa:	f042 0220 	orr.w	r2, r2, #32
 800f6fe:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f700:	68a2      	ldr	r2, [r4, #8]
 800f702:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f704:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f708:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800f70a:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800f70c:	7809      	ldrb	r1, [r1, #0]
 800f70e:	2903      	cmp	r1, #3
 800f710:	d103      	bne.n	800f71a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f712:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f714:	751a      	strb	r2, [r3, #20]
 800f716:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f718:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f71a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f71c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f71e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f722:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f724:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f726:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800f728:	2301      	movs	r3, #1
 800f72a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f72c:	f7fe f838 	bl	800d7a0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f730:	7d23      	ldrb	r3, [r4, #20]
 800f732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f736:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800f738:	2800      	cmp	r0, #0
 800f73a:	d1c5      	bne.n	800f6c8 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f73c:	6825      	ldr	r5, [r4, #0]
 800f73e:	2d00      	cmp	r5, #0
 800f740:	d0c1      	beq.n	800f6c6 <f_close+0x16>
 800f742:	782b      	ldrb	r3, [r5, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0be      	beq.n	800f6c6 <f_close+0x16>
 800f748:	88a2      	ldrh	r2, [r4, #4]
 800f74a:	88eb      	ldrh	r3, [r5, #6]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d1ba      	bne.n	800f6c6 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f750:	7868      	ldrb	r0, [r5, #1]
 800f752:	f7fd f9b9 	bl	800cac8 <disk_status>
 800f756:	f010 0001 	ands.w	r0, r0, #1
 800f75a:	d1b4      	bne.n	800f6c6 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	3b01      	subs	r3, #1
 800f760:	2b01      	cmp	r3, #1
 800f762:	d81e      	bhi.n	800f7a2 <f_close+0xf2>
		n = Files[i].ctr;
 800f764:	4912      	ldr	r1, [pc, #72]	; (800f7b0 <f_close+0x100>)
 800f766:	011d      	lsls	r5, r3, #4
 800f768:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f76c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f76e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f772:	d01a      	beq.n	800f7aa <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800f774:	b11a      	cbz	r2, 800f77e <f_close+0xce>
 800f776:	3a01      	subs	r2, #1
 800f778:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800f77a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f77c:	b90a      	cbnz	r2, 800f782 <f_close+0xd2>
 800f77e:	2300      	movs	r3, #0
 800f780:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800f782:	2300      	movs	r3, #0
 800f784:	6023      	str	r3, [r4, #0]
}
 800f786:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f788:	2301      	movs	r3, #1
 800f78a:	6a22      	ldr	r2, [r4, #32]
 800f78c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f790:	7868      	ldrb	r0, [r5, #1]
 800f792:	f7fd f9c5 	bl	800cb20 <disk_write>
 800f796:	b930      	cbnz	r0, 800f7a6 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f798:	7d23      	ldrb	r3, [r4, #20]
 800f79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f79e:	7523      	strb	r3, [r4, #20]
 800f7a0:	e7a0      	b.n	800f6e4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f7a2:	2002      	movs	r0, #2
}
 800f7a4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7a6:	2001      	movs	r0, #1
}
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800f7aa:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7ac:	e7e7      	b.n	800f77e <f_close+0xce>
 800f7ae:	bf00      	nop
 800f7b0:	2001dd68 	.word	0x2001dd68

0800f7b4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f7b8:	b150      	cbz	r0, 800f7d0 <f_findnext+0x1c>
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f7be:	4c3b      	ldr	r4, [pc, #236]	; (800f8ac <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	b12b      	cbz	r3, 800f7d0 <f_findnext+0x1c>
 800f7c4:	781a      	ldrb	r2, [r3, #0]
 800f7c6:	b11a      	cbz	r2, 800f7d0 <f_findnext+0x1c>
 800f7c8:	88a9      	ldrh	r1, [r5, #4]
 800f7ca:	88da      	ldrh	r2, [r3, #6]
 800f7cc:	4291      	cmp	r1, r2
 800f7ce:	d003      	beq.n	800f7d8 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 800f7d0:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f7d8:	7858      	ldrb	r0, [r3, #1]
 800f7da:	f7fd f975 	bl	800cac8 <disk_status>
 800f7de:	f010 0101 	ands.w	r1, r0, #1
 800f7e2:	d1f5      	bne.n	800f7d0 <f_findnext+0x1c>
		if (!fno) {
 800f7e4:	2e00      	cmp	r6, #0
 800f7e6:	d059      	beq.n	800f89c <f_findnext+0xe8>
			res = dir_read(dp, 0);			/* Read an item */
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	f7fd fdcf 	bl	800d38c <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800f7ee:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800f7f2:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800f7f4:	d1ed      	bne.n	800f7d2 <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f7f6:	4631      	mov	r1, r6
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f7fd fa7b 	bl	800ccf4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f7fe:	4641      	mov	r1, r8
 800f800:	4628      	mov	r0, r5
 800f802:	f7fe fdd1 	bl	800e3a8 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800f806:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 800f80a:	d14d      	bne.n	800f8a8 <f_findnext+0xf4>
 800f80c:	7db3      	ldrb	r3, [r6, #22]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0df      	beq.n	800f7d2 <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f812:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f816:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 800f81a:	e00f      	b.n	800f83c <f_findnext+0x88>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f81c:	3a20      	subs	r2, #32
 800f81e:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f820:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f824:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f828:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f82a:	f1be 0f19 	cmp.w	lr, #25
 800f82e:	d817      	bhi.n	800f860 <f_findnext+0xac>
 800f830:	3b20      	subs	r3, #32
 800f832:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800f834:	4293      	cmp	r3, r2
 800f836:	d1c3      	bne.n	800f7c0 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d0ca      	beq.n	800f7d2 <f_findnext+0x1e>
 800f83c:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800f83e:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800f842:	2b3f      	cmp	r3, #63	; 0x3f
 800f844:	d012      	beq.n	800f86c <f_findnext+0xb8>
 800f846:	2b2a      	cmp	r3, #42	; 0x2a
 800f848:	d010      	beq.n	800f86c <f_findnext+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f84a:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f84e:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f850:	2819      	cmp	r0, #25
 800f852:	d9e3      	bls.n	800f81c <f_findnext+0x68>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f854:	2a7f      	cmp	r2, #127	; 0x7f
 800f856:	d9e3      	bls.n	800f820 <f_findnext+0x6c>
 800f858:	4423      	add	r3, r4
 800f85a:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800f85e:	e7df      	b.n	800f820 <f_findnext+0x6c>
 800f860:	2b7f      	cmp	r3, #127	; 0x7f
 800f862:	d9e7      	bls.n	800f834 <f_findnext+0x80>
 800f864:	4420      	add	r0, r4
 800f866:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 800f86a:	e7e3      	b.n	800f834 <f_findnext+0x80>
 800f86c:	4694      	mov	ip, r2
				nm = nx = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	f81c eb01 	ldrb.w	lr, [ip], #1
 800f874:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800f876:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800f87a:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 800f87c:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800f880:	bf0c      	ite	eq
 800f882:	3201      	addeq	r2, #1
 800f884:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800f886:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800f88a:	d0f4      	beq.n	800f876 <f_findnext+0xc2>
 800f88c:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 800f890:	d0f1      	beq.n	800f876 <f_findnext+0xc2>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800f892:	f7fd f9b9 	bl	800cc08 <pattern_matching>
 800f896:	2800      	cmp	r0, #0
 800f898:	d092      	beq.n	800f7c0 <f_findnext+0xc>
 800f89a:	e79a      	b.n	800f7d2 <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f89c:	4631      	mov	r1, r6
 800f89e:	4628      	mov	r0, r5
}
 800f8a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f8a4:	f7fe b89a 	b.w	800d9dc <dir_sdi>
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	e792      	b.n	800f7d2 <f_findnext+0x1e>
 800f8ac:	0801bbf0 	.word	0x0801bbf0

0800f8b0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	4615      	mov	r5, r2
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800f8ba:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 800f8bc:	2200      	movs	r2, #0
 800f8be:	a901      	add	r1, sp, #4
 800f8c0:	4668      	mov	r0, sp
 800f8c2:	9500      	str	r5, [sp, #0]
 800f8c4:	f7fd fb14 	bl	800cef0 <find_volume>
	if (res == FR_OK) {
 800f8c8:	b118      	cbz	r0, 800f8d2 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800f8ce:	b002      	add	sp, #8
 800f8d0:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f8d2:	e9dd 1500 	ldrd	r1, r5, [sp]
 800f8d6:	4620      	mov	r0, r4
		obj->fs = fs;
 800f8d8:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f8da:	f7fe fad7 	bl	800de8c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f8de:	bb00      	cbnz	r0, 800f922 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f8e0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	db0b      	blt.n	800f900 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f8e8:	79a3      	ldrb	r3, [r4, #6]
 800f8ea:	06db      	lsls	r3, r3, #27
 800f8ec:	d51f      	bpl.n	800f92e <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
 800f8ee:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f8f0:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800f8f2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f8f4:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800f8f6:	d102      	bne.n	800f8fe <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f8f8:	8a92      	ldrh	r2, [r2, #20]
 800f8fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f8fe:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 800f900:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f902:	2100      	movs	r1, #0
 800f904:	4620      	mov	r0, r4
				obj->id = fs->id;
 800f906:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f908:	f7fe f868 	bl	800d9dc <dir_sdi>
				if (res == FR_OK) {
 800f90c:	b948      	cbnz	r0, 800f922 <f_findfirst+0x72>
					if (obj->sclust) {
 800f90e:	68a3      	ldr	r3, [r4, #8]
 800f910:	b97b      	cbnz	r3, 800f932 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f912:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 800f914:	4631      	mov	r1, r6
 800f916:	4620      	mov	r0, r4
}
 800f918:	b002      	add	sp, #8
 800f91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800f91e:	f7ff bf49 	b.w	800f7b4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f922:	2804      	cmp	r0, #4
 800f924:	d1d1      	bne.n	800f8ca <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f926:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
 800f928:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f92a:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 800f92c:	e7cf      	b.n	800f8ce <f_findfirst+0x1e>
					res = FR_NO_PATH;
 800f92e:	2005      	movs	r0, #5
 800f930:	e7cb      	b.n	800f8ca <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f932:	4601      	mov	r1, r0
 800f934:	4620      	mov	r0, r4
 800f936:	f7fd f90f 	bl	800cb58 <inc_lock>
 800f93a:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d1e9      	bne.n	800f914 <f_findfirst+0x64>
 800f940:	2012      	movs	r0, #18
 800f942:	e7c2      	b.n	800f8ca <f_findfirst+0x1a>

0800f944 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800f944:	4b11      	ldr	r3, [pc, #68]	; (800f98c <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f946:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800f948:	7a5c      	ldrb	r4, [r3, #9]
 800f94a:	b9cc      	cbnz	r4, 800f980 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800f94c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800f950:	7a5c      	ldrb	r4, [r3, #9]
 800f952:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800f954:	7a5c      	ldrb	r4, [r3, #9]
 800f956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f95a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800f95c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800f95e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800f960:	441c      	add	r4, r3
 800f962:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800f964:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800f966:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800f968:	b2e4      	uxtb	r4, r4
 800f96a:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800f96c:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800f96e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800f970:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800f972:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800f974:	4610      	mov	r0, r2
 800f976:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800f97a:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800f97c:	708b      	strb	r3, [r1, #2]
}
 800f97e:	4770      	bx	lr
  uint8_t ret = 1;
 800f980:	2201      	movs	r2, #1
}
 800f982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f986:	4610      	mov	r0, r2
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	2001df8c 	.word	0x2001df8c

0800f990 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f990:	287f      	cmp	r0, #127	; 0x7f
 800f992:	d913      	bls.n	800f9bc <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f994:	b979      	cbnz	r1, 800f9b6 <ff_convert+0x26>
 800f996:	4b0c      	ldr	r3, [pc, #48]	; (800f9c8 <ff_convert+0x38>)
 800f998:	e001      	b.n	800f99e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f99a:	2980      	cmp	r1, #128	; 0x80
 800f99c:	d00d      	beq.n	800f9ba <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800f99e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800f9a2:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800f9a6:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 800f9a8:	4282      	cmp	r2, r0
 800f9aa:	d1f6      	bne.n	800f99a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800f9ac:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800f9b0:	fa1f f08c 	uxth.w	r0, ip
 800f9b4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f9b6:	28ff      	cmp	r0, #255	; 0xff
 800f9b8:	d901      	bls.n	800f9be <ff_convert+0x2e>
 800f9ba:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800f9bc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f9be:	4b02      	ldr	r3, [pc, #8]	; (800f9c8 <ff_convert+0x38>)
 800f9c0:	3880      	subs	r0, #128	; 0x80
 800f9c2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f9c6:	4770      	bx	lr
 800f9c8:	0801bc80 	.word	0x0801bc80

0800f9cc <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f9cc:	4b23      	ldr	r3, [pc, #140]	; (800fa5c <ff_wtoupper+0x90>)
 800f9ce:	4a24      	ldr	r2, [pc, #144]	; (800fa60 <ff_wtoupper+0x94>)
 800f9d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f9d4:	bf28      	it	cs
 800f9d6:	4613      	movcs	r3, r2
{
 800f9d8:	b510      	push	{r4, lr}
 800f9da:	3304      	adds	r3, #4
 800f9dc:	e00a      	b.n	800f9f4 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f9de:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800f9e2:	fa5f fc82 	uxtb.w	ip, r2
 800f9e6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800f9e8:	eb0c 0e01 	add.w	lr, ip, r1
 800f9ec:	4570      	cmp	r0, lr
 800f9ee:	db09      	blt.n	800fa04 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	b182      	cbz	r2, 800fa16 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800f9f4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800f9f8:	461c      	mov	r4, r3
 800f9fa:	1e4a      	subs	r2, r1, #1
 800f9fc:	b292      	uxth	r2, r2
 800f9fe:	4290      	cmp	r0, r2
 800fa00:	d8ed      	bhi.n	800f9de <ff_wtoupper+0x12>
	}

	return chr;
}
 800fa02:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800fa04:	2a08      	cmp	r2, #8
 800fa06:	d8fc      	bhi.n	800fa02 <ff_wtoupper+0x36>
 800fa08:	e8df f002 	tbb	[pc, r2]
 800fa0c:	1916100c 	.word	0x1916100c
 800fa10:	25221f1c 	.word	0x25221f1c
 800fa14:	08          	.byte	0x08
 800fa15:	00          	.byte	0x00
		if (!cmd) p += nc;
 800fa16:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800fa1a:	e7de      	b.n	800f9da <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fa1c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800fa20:	b280      	uxth	r0, r0
}
 800fa22:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fa24:	1a41      	subs	r1, r0, r1
 800fa26:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 800fa2a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fa2c:	1a43      	subs	r3, r0, r1
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	1ac3      	subs	r3, r0, r3
 800fa34:	b298      	uxth	r0, r3
}
 800fa36:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800fa38:	3810      	subs	r0, #16
 800fa3a:	b280      	uxth	r0, r0
}
 800fa3c:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fa3e:	3820      	subs	r0, #32
 800fa40:	b280      	uxth	r0, r0
}
 800fa42:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fa44:	3830      	subs	r0, #48	; 0x30
 800fa46:	b280      	uxth	r0, r0
}
 800fa48:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fa4a:	381a      	subs	r0, #26
 800fa4c:	b280      	uxth	r0, r0
}
 800fa4e:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800fa50:	3008      	adds	r0, #8
 800fa52:	b280      	uxth	r0, r0
}
 800fa54:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800fa56:	3850      	subs	r0, #80	; 0x50
 800fa58:	b280      	uxth	r0, r0
}
 800fa5a:	bd10      	pop	{r4, pc}
 800fa5c:	0801bd80 	.word	0x0801bd80
 800fa60:	0801bf74 	.word	0x0801bf74

0800fa64 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 800fa6a:	698d      	ldr	r5, [r1, #24]
{
 800fa6c:	eef0 8a40 	vmov.f32	s17, s0
 800fa70:	eeb0 8a60 	vmov.f32	s16, s1
 800fa74:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800fa76:	4629      	mov	r1, r5
 800fa78:	2010      	movs	r0, #16
 800fa7a:	f004 fba7 	bl	80141cc <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 800fa7e:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800fa80:	6020      	str	r0, [r4, #0]
    e->mempool = m;
 800fa82:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
 800fa84:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800fa86:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 800fa8a:	ed80 8a03 	vstr	s16, [r0, #12]
}
 800fa8e:	ecbd 8b02 	vpop	{d8}
 800fa92:	bd38      	pop	{r3, r4, r5, pc}

0800fa94 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800fa94:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800fa96:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800fa9a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa9e:	eef4 7ac0 	vcmpe.f32	s15, s0
 800faa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa6:	d809      	bhi.n	800fabc <tEnvelopeFollower_tick+0x28>
 800faa8:	ed93 7a02 	vldr	s14, [r3, #8]
 800faac:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800fab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab4:	d502      	bpl.n	800fabc <tEnvelopeFollower_tick+0x28>
 800fab6:	ed83 0a01 	vstr	s0, [r3, #4]
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
}
 800faba:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800fabc:	ed93 0a03 	vldr	s0, [r3, #12]
 800fac0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fac4:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop

0800facc <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800fad2:	680d      	ldr	r5, [r1, #0]
{
 800fad4:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fad6:	2010      	movs	r0, #16
{
 800fad8:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fadc:	4629      	mov	r1, r5
 800fade:	f004 fb75 	bl	80141cc <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800fae2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800fae6:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fae8:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800faea:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800faec:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800faf0:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800faf2:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800faf6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800fafa:	ecbd 8b02 	vpop	{d8}
 800fafe:	bd38      	pop	{r3, r4, r5, pc}

0800fb00 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 800fb00:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800fb02:	6801      	ldr	r1, [r0, #0]
 800fb04:	f004 bc24 	b.w	8014350 <mpool_free>

0800fb08 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800fb08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb0c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800fb28 <tPowerFollower_setFactor+0x20>
 800fb10:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
 800fb12:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 800fb16:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800fb1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 800fb1e:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800fb22:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800fb26:	4770      	bx	lr
 800fb28:	00000000 	.word	0x00000000

0800fb2c <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800fb2c:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800fb2e:	ee60 7a00 	vmul.f32	s15, s0, s0
 800fb32:	edd3 6a03 	vldr	s13, [r3, #12]
 800fb36:	ed93 0a02 	vldr	s0, [r3, #8]
 800fb3a:	ed93 7a01 	vldr	s14, [r3, #4]
 800fb3e:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fb42:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fb46:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800fb4a:	4770      	bx	lr

0800fb4c <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	460d      	mov	r5, r1
 800fb50:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fb52:	202c      	movs	r0, #44	; 0x2c
{
 800fb54:	ed2d 8b02 	vpush	{d8}
 800fb58:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800fb5a:	6811      	ldr	r1, [r2, #0]
{
 800fb5c:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800fb60:	eddf 8a30 	vldr	s17, [pc, #192]	; 800fc24 <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fb64:	9101      	str	r1, [sp, #4]
 800fb66:	f004 fb31 	bl	80141cc <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800fb6a:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fb6e:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fb70:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fb72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fb76:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fb78:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
 800fb7c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800fb7e:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fb80:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
 800fb82:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 800fb86:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fb8a:	f004 fb1f 	bl	80141cc <mpool_alloc>

    d->gain = 1.0f;
 800fb8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 800fb92:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fb94:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800fb96:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fb98:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
 800fb9c:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
 800fba0:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
 800fba4:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800fba6:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
 800fba8:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fbaa:	edd4 0a08 	vldr	s1, [r4, #32]
 800fbae:	edd5 7a07 	vldr	s15, [r5, #28]
 800fbb2:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800fbb6:	f004 f807 	bl	8013bc8 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
 800fbba:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800fbbe:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800fbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fbc4:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800fbc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800fbcc:	eef4 7ae8 	vcmpe.f32	s15, s17
 800fbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd4:	d50a      	bpl.n	800fbec <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
 800fbd6:	ee07 2a10 	vmov	s14, r2
 800fbda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fbde:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fbe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbea:	d4f8      	bmi.n	800fbde <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800fbec:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fbf0:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 800fbf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800fbf8:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	bf08      	it	eq
 800fc00:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 800fc02:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800fc06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fc0a:	61ab      	str	r3, [r5, #24]
 800fc0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800fc10:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 800fc14:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800fc18:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
 800fc1c:	b002      	add	sp, #8
 800fc1e:	ecbd 8b02 	vpop	{d8}
 800fc22:	bd70      	pop	{r4, r5, r6, pc}
 800fc24:	00000000 	.word	0x00000000

0800fc28 <tLinearDelay_free>:
{
 800fc28:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800fc2a:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 800fc2c:	6821      	ldr	r1, [r4, #0]
 800fc2e:	68a0      	ldr	r0, [r4, #8]
 800fc30:	f004 fb8e 	bl	8014350 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800fc34:	6821      	ldr	r1, [r4, #0]
 800fc36:	4620      	mov	r0, r4
}
 800fc38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800fc3c:	f004 bb88 	b.w	8014350 <mpool_free>

0800fc40 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 800fc40:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc42:	69cb      	ldr	r3, [r1, #28]
 800fc44:	b14b      	cbz	r3, 800fc5a <tLinearDelay_clear+0x1a>
 800fc46:	2300      	movs	r3, #0
        d->buff[i] = 0;
 800fc48:	2000      	movs	r0, #0
 800fc4a:	688a      	ldr	r2, [r1, #8]
 800fc4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc50:	3301      	adds	r3, #1
        d->buff[i] = 0;
 800fc52:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc54:	69ca      	ldr	r2, [r1, #28]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d8f7      	bhi.n	800fc4a <tLinearDelay_clear+0xa>
}
 800fc5a:	4770      	bx	lr

0800fc5c <tLinearDelay_tick>:
{
 800fc5c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800fc5e:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800fc60:	edd3 7a01 	vldr	s15, [r3, #4]
 800fc64:	6959      	ldr	r1, [r3, #20]
 800fc66:	689a      	ldr	r2, [r3, #8]
 800fc68:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fc70:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fc74:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fc76:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
 800fc7a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fc7e:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
 800fc80:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fc82:	42a2      	cmp	r2, r4
 800fc84:	bf08      	it	eq
 800fc86:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
 800fc88:	4284      	cmp	r4, r0
 800fc8a:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fc8c:	689a      	ldr	r2, [r3, #8]
 800fc8e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fc92:	ed91 0a00 	vldr	s0, [r1]
 800fc96:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc9a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800fc9e:	d90b      	bls.n	800fcb8 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fca0:	ed91 7a01 	vldr	s14, [r1, #4]
 800fca4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fca8:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fcaa:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fcae:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fcb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800fcb8:	ed92 7a00 	vldr	s14, [r2]
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fcc2:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800fcc4:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fcc8:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop

0800fcd4 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 800fcd4:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800fcd6:	edd3 7a01 	vldr	s15, [r3, #4]
 800fcda:	6959      	ldr	r1, [r3, #20]
 800fcdc:	689a      	ldr	r2, [r3, #8]
 800fcde:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fce2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fce6:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fcea:	695a      	ldr	r2, [r3, #20]
 800fcec:	69d9      	ldr	r1, [r3, #28]
 800fcee:	3201      	adds	r2, #1
 800fcf0:	428a      	cmp	r2, r1
 800fcf2:	bf08      	it	eq
 800fcf4:	2200      	moveq	r2, #0
 800fcf6:	615a      	str	r2, [r3, #20]
}
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <tLinearDelay_tickOut>:
{
 800fcfc:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800fcfe:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 800fd00:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fd02:	6899      	ldr	r1, [r3, #8]
 800fd04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fd08:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 800fd0c:	69dc      	ldr	r4, [r3, #28]
 800fd0e:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fd10:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 800fd14:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fd16:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd1a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800fd1e:	d20b      	bcs.n	800fd38 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fd20:	ed90 7a01 	vldr	s14, [r0, #4]
 800fd24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fd28:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fd2a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fd2e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fd32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd36:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800fd38:	ed91 7a00 	vldr	s14, [r1]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fd42:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800fd44:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fd48:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fd4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop

0800fd54 <tLinearDelay_setDelay>:
{
 800fd54:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800fd56:	6804      	ldr	r4, [r0, #0]
{
 800fd58:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fd5c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd60:	edd4 7a07 	vldr	s15, [r4, #28]
 800fd64:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800fd68:	f003 ff2e 	bl	8013bc8 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
 800fd6c:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
 800fd70:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800fd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fd76:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800fd7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800fd7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd86:	d50a      	bpl.n	800fd9e <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 800fd88:	ee07 2a10 	vmov	s14, r2
 800fd8c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fd90:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fd94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9c:	d4f8      	bmi.n	800fd90 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 800fd9e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fda2:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
 800fda6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800fdaa:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	bf08      	it	eq
 800fdb2:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 800fdb4:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800fdb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fdbc:	61a3      	str	r3, [r4, #24]
 800fdbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800fdc2:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 800fdc6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800fdca:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 800fdce:	bd10      	pop	{r4, pc}

0800fdd0 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800fdd0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800fdd2:	6953      	ldr	r3, [r2, #20]
 800fdd4:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800fdd6:	3901      	subs	r1, #1
 800fdd8:	d502      	bpl.n	800fde0 <tLinearDelay_addTo+0x10>
 800fdda:	69d3      	ldr	r3, [r2, #28]
 800fddc:	18c9      	adds	r1, r1, r3
 800fdde:	d4fd      	bmi.n	800fddc <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
 800fde0:	6893      	ldr	r3, [r2, #8]
 800fde2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fde6:	edd3 7a00 	vldr	s15, [r3]
 800fdea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fdee:	ed83 0a00 	vstr	s0, [r3]
}
 800fdf2:	4770      	bx	lr

0800fdf4 <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800fdf4:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800fdf6:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800fdf8:	e9d4 1000 	ldrd	r1, r0, [r4]
 800fdfc:	f004 faa8 	bl	8014350 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800fe00:	6821      	ldr	r1, [r4, #0]
 800fe02:	4620      	mov	r0, r4
}
 800fe04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800fe08:	f004 baa2 	b.w	8014350 <mpool_free>

0800fe0c <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800fe0c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fe0e:	69cb      	ldr	r3, [r1, #28]
 800fe10:	b14b      	cbz	r3, 800fe26 <tLagrangeDelay_clear+0x1a>
 800fe12:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
 800fe14:	2000      	movs	r0, #0
 800fe16:	684a      	ldr	r2, [r1, #4]
 800fe18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fe1c:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
 800fe1e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fe20:	69ca      	ldr	r2, [r1, #28]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d8f7      	bhi.n	800fe16 <tLagrangeDelay_clear+0xa>
    }
}
 800fe26:	4770      	bx	lr

0800fe28 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800fe28:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800fe2a:	6959      	ldr	r1, [r3, #20]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fe32:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800fe36:	695a      	ldr	r2, [r3, #20]
 800fe38:	6899      	ldr	r1, [r3, #8]
 800fe3a:	3201      	adds	r2, #1
 800fe3c:	400a      	ands	r2, r1
 800fe3e:	615a      	str	r2, [r3, #20]
}
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop

0800fe44 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800fe44:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
 800fe46:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800fe48:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fe4a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800fe4e:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fe50:	1c44      	adds	r4, r0, #1
 800fe52:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800fe56:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fe5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fe5e:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fe62:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fe64:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fe66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fe6a:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fe6e:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fe72:	ee20 0a06 	vmul.f32	s0, s0, s12
 800fe76:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800fe7a:	69da      	ldr	r2, [r3, #28]
 800fe7c:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fe80:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
 800fe82:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800fe86:	3a01      	subs	r2, #1
 800fe88:	edd0 6a00 	vldr	s13, [r0]
 800fe8c:	402a      	ands	r2, r5
 800fe8e:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fe92:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fe96:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800fe9a:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fe9c:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fea0:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 800fea4:	bc30      	pop	{r4, r5}
 800fea6:	4770      	bx	lr

0800fea8 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800fea8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
 800feac:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
 800feae:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800feb2:	ee37 7ac0 	vsub.f32	s14, s15, s0
 800feb6:	edd3 7a05 	vldr	s15, [r3, #20]
 800feba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800febe:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feca:	d50a      	bpl.n	800fee2 <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
 800fecc:	ed93 7a07 	vldr	s14, [r3, #28]
 800fed0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fed4:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee0:	d4f8      	bmi.n	800fed4 <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800fee2:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fee6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800ff5c <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
 800feea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800feee:	eddf 3a1c 	vldr	s7, [pc, #112]	; 800ff60 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
 800fef2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
 800fef6:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800fef8:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
 800fefc:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800ff00:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
 800ff04:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
 800ff08:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800ff0a:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 800ff0e:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
 800ff10:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
 800ff14:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
 800ff18:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800ff1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800ff20:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
 800ff24:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800ff28:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
 800ff2c:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800ff30:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800ff34:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
 800ff38:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800ff3c:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800ff40:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800ff44:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
 800ff48:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800ff4c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800ff50:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800ff54:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	be2aaaab 	.word	0xbe2aaaab
 800ff60:	3e2aaaab 	.word	0x3e2aaaab

0800ff64 <tLagrangeDelay_initToPool>:
{
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	460d      	mov	r5, r1
 800ff68:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800ff6a:	2034      	movs	r0, #52	; 0x34
{
 800ff6c:	ed2d 8b02 	vpush	{d8}
 800ff70:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800ff72:	6811      	ldr	r1, [r2, #0]
{
 800ff74:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800ff78:	9101      	str	r1, [sp, #4]
 800ff7a:	f004 f927 	bl	80141cc <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800ff7e:	ee07 5a90 	vmov	s15, r5
 800ff82:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800fff4 <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
 800ff86:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800ff88:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800ff8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800ff8e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800ff90:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
 800ff94:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800ff96:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800ff98:	fe80 0a67 	vminnm.f32	s0, s0, s15
 800ff9c:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800ffa0:	bb1d      	cbnz	r5, 800ffea <tLagrangeDelay_initToPool+0x86>
 800ffa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
 800ffa6:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800ffaa:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800ffae:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800ffb2:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800ffb6:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 800ffba:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 800ffbc:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800ffbe:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffc0:	00a8      	lsls	r0, r5, #2
 800ffc2:	f004 f903 	bl	80141cc <mpool_alloc>
    d->lastIn = 0.0f;
 800ffc6:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffc8:	4601      	mov	r1, r0
    d->inPoint = 0;
 800ffca:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
 800ffcc:	ed94 0a08 	vldr	s0, [r4, #32]
 800ffd0:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffd2:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 800ffd4:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 800ffd6:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 800ffd8:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800ffdc:	b002      	add	sp, #8
 800ffde:	ecbd 8b02 	vpop	{d8}
 800ffe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
 800ffe6:	f7ff bf5f 	b.w	800fea8 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800ffea:	1e6b      	subs	r3, r5, #1
 800ffec:	422b      	tst	r3, r5
 800ffee:	461a      	mov	r2, r3
 800fff0:	d1d9      	bne.n	800ffa6 <tLagrangeDelay_initToPool+0x42>
 800fff2:	e7e4      	b.n	800ffbe <tLagrangeDelay_initToPool+0x5a>
 800fff4:	00000000 	.word	0x00000000

0800fff8 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800fff8:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800fffa:	6953      	ldr	r3, [r2, #20]
 800fffc:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
 800fffe:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8010002:	3b01      	subs	r3, #1
 8010004:	4003      	ands	r3, r0
    return d->buff[tap];
 8010006:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 801000a:	ed92 0a00 	vldr	s0, [r2]
 801000e:	4770      	bx	lr

08010010 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 8010010:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010012:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
 8010016:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
 8010018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 801001c:	eddf 4a27 	vldr	s9, [pc, #156]	; 80100bc <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010020:	1a59      	subs	r1, r3, r1
 8010022:	6953      	ldr	r3, [r2, #20]
 8010024:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
 8010026:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 801002a:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
 801002c:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010030:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
 8010032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010036:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
 8010038:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801003c:	3b01      	subs	r3, #1
 801003e:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010040:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
 8010042:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010046:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801004a:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
 801004c:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010050:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010052:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010054:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010058:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 801005c:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010060:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010064:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010068:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 801006c:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010070:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010074:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010078:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
 801007c:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010080:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 8010084:	3101      	adds	r1, #1
 8010086:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 801008a:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
 801008e:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 8010092:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010094:	ee67 7a84 	vmul.f32	s15, s15, s8

}
 8010098:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 801009c:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80100a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80100a4:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 80100a8:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80100ac:	edd2 7a00 	vldr	s15, [r2]
 80100b0:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80100b4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	be2aaaab 	.word	0xbe2aaaab

080100c0 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 80100c0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80100c2:	6953      	ldr	r3, [r2, #20]
 80100c4:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
 80100c6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80100ca:	3b01      	subs	r3, #1
 80100cc:	4003      	ands	r3, r0
    d->buff[tap] = value;
 80100ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80100d2:	ed82 0a00 	vstr	s0, [r2]
}
 80100d6:	4770      	bx	lr

080100d8 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 80100d8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80100da:	6953      	ldr	r3, [r2, #20]
 80100dc:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
 80100de:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80100e2:	3b01      	subs	r3, #1
 80100e4:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 80100e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100ea:	edd3 7a00 	vldr	s15, [r3]
 80100ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100f2:	ed83 0a00 	vstr	s0, [r3]
}
 80100f6:	4770      	bx	lr

080100f8 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
 80100f8:	6803      	ldr	r3, [r0, #0]
 80100fa:	ed93 0a07 	vldr	s0, [r3, #28]
}
 80100fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8010102:	4770      	bx	lr

08010104 <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 8010104:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 8010106:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 8010108:	edd4 7a01 	vldr	s15, [r4, #4]
 801010c:	6962      	ldr	r2, [r4, #20]
 801010e:	68a3      	ldr	r3, [r4, #8]
 8010110:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010114:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010118:	ed83 0a00 	vstr	s0, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;

    int idx =  (int) d->idx;
 801011c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    Lfloat alpha = d->idx - idx;

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010120:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 8010122:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8010126:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
 801012a:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
 801012e:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8010132:	3001      	adds	r0, #1
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
                                              d->buff[(idx + 2) % d->maxDelay],
 8010134:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
 8010138:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801013c:	4298      	cmp	r0, r3
 801013e:	bf08      	it	eq
 8010140:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010142:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8010146:	6160      	str	r0, [r4, #20]
 8010148:	1e58      	subs	r0, r3, #1
 801014a:	4410      	add	r0, r2
 801014c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010150:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 8010154:	fbbe f2f3 	udiv	r2, lr, r3
 8010158:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
 801015c:	fbbc f2f3 	udiv	r2, ip, r3
 8010160:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010164:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8010168:	fbb0 f2f3 	udiv	r2, r0, r3
 801016c:	fb03 0012 	mls	r0, r3, r2, r0
 8010170:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8010174:	edde 1a00 	vldr	s3, [lr]
 8010178:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801017c:	ed9c 1a00 	vldr	s2, [ip]
 8010180:	ed91 0a00 	vldr	s0, [r1]
 8010184:	f003 ff1e 	bl	8013fc4 <LEAF_interpolate_hermite_x>
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 8010188:	edd4 7a05 	vldr	s15, [r4, #20]
 801018c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8010190:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 8010194:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010198:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 801019c:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
 80101a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
 80101a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ac:	d506      	bpl.n	80101bc <tTapeDelay_tick+0xb8>
 80101ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	d4f8      	bmi.n	80101ae <tTapeDelay_tick+0xaa>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 80101bc:	edd4 5a07 	vldr	s11, [r4, #28]
 80101c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80101c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80101c8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80101cc:	ee36 6a05 	vadd.f32	s12, s12, s10

    d->idx += d->inc;
 80101d0:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 80101d4:	ed84 6a08 	vstr	s12, [r4, #32]

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 80101d8:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
 80101dc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 80101e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e4:	db08      	blt.n	80101f8 <tTapeDelay_tick+0xf4>
 80101e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80101ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80101ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f2:	daf8      	bge.n	80101e6 <tTapeDelay_tick+0xe2>
 80101f4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    if (d->lastOut)
        return d->lastOut;
    return 0.0f;
}
 80101f8:	bd10      	pop	{r4, pc}
 80101fa:	bf00      	nop

080101fc <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 80101fc:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 80101fe:	6804      	ldr	r4, [r0, #0]
{
 8010200:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 8010204:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010208:	edd4 7a06 	vldr	s15, [r4, #24]
 801020c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8010210:	f003 fcda 	bl	8013bc8 <LEAF_clip>
 8010214:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8010218:	bd10      	pop	{r4, pc}
 801021a:	bf00      	nop

0801021c <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 801021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 801021e:	698f      	ldr	r7, [r1, #24]
{
 8010220:	4606      	mov	r6, r0
 8010222:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8010224:	2020      	movs	r0, #32
 8010226:	4639      	mov	r1, r7
 8010228:	f003 ffd0 	bl	80141cc <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 801022c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8010230:	4a10      	ldr	r2, [pc, #64]	; (8010274 <tCrusher_init+0x58>)
    c->op = 4;
 8010232:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8010234:	6030      	str	r0, [r6, #0]
 8010236:	4604      	mov	r4, r0
    c->op = 4;
 8010238:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 801023a:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 801023c:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 801023e:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8010240:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010242:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8010244:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010246:	4629      	mov	r1, r5
 8010248:	f003 ffc0 	bl	80141cc <mpool_alloc>
    s->invRatio = 1.0f;
 801024c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8010250:	2200      	movs	r2, #0
    s->count = 0;
 8010252:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010254:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8010256:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010278 <tCrusher_init+0x5c>
    s->mempool = m;
 801025a:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 801025c:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 801025e:	6082      	str	r2, [r0, #8]
    s->count = 0;
 8010260:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8010262:	eddf 7a06 	vldr	s15, [pc, #24]	; 801027c <tCrusher_init+0x60>
 8010266:	edd4 6a03 	vldr	s13, [r4, #12]
 801026a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801026e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010274:	3951b717 	.word	0x3951b717
 8010278:	3912ccf6 	.word	0x3912ccf6
 801027c:	3e99999a 	.word	0x3e99999a

08010280 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 8010280:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80102fc <tCrusher_tick+0x7c>
 8010284:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8010288:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 801028a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 801028e:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 8010290:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 8010294:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8010298:	6960      	ldr	r0, [r4, #20]
 801029a:	05c0      	lsls	r0, r0, #23
 801029c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102a0:	f003 fc8c 	bl	8013bbc <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80102a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80102a8:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 80102ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80102b0:	f003 fc8a 	bl	8013bc8 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80102b4:	edd4 0a04 	vldr	s1, [r4, #16]
 80102b8:	f003 fc6e 	bl	8013b98 <LEAF_round>
    _tSampleReducer* s = *sr;
 80102bc:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 80102be:	68da      	ldr	r2, [r3, #12]
 80102c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80102c4:	ee07 2a10 	vmov	s14, r2
 80102c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80102cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d4:	dc08      	bgt.n	80102e8 <tCrusher_tick+0x68>
    s->count++;
 80102d6:	3201      	adds	r2, #1
    return s->hold;
 80102d8:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 80102dc:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 80102de:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 80102e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102e6:	bd10      	pop	{r4, pc}
        s->hold = input;
 80102e8:	2201      	movs	r2, #1
 80102ea:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 80102ee:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 80102f0:	edd4 7a06 	vldr	s15, [r4, #24]
}
 80102f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	bf00      	nop
 80102fc:	459c4000 	.word	0x459c4000

08010300 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 8010300:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 8010304:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 8010306:	ee20 0a27 	vmul.f32	s0, s0, s15
 801030a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801030e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8010312:	4770      	bx	lr

08010314 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 8010314:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 8010318:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801034c <tCrusher_setQuality+0x38>
 801031c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8010320:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 8010322:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 8010324:	f003 fc50 	bl	8013bc8 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 8010328:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8010350 <tCrusher_setQuality+0x3c>
 801032c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010354 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010330:	eddf 6a09 	vldr	s13, [pc, #36]	; 8010358 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 8010334:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010338:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801035c <tCrusher_setQuality+0x48>
 801033c:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 8010340:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010344:	ed84 7a06 	vstr	s14, [r4, #24]
}
 8010348:	bd10      	pop	{r4, pc}
 801034a:	bf00      	nop
 801034c:	00000000 	.word	0x00000000
 8010350:	459c4000 	.word	0x459c4000
 8010354:	3c23d70a 	.word	0x3c23d70a
 8010358:	3912ccf6 	.word	0x3912ccf6
 801035c:	3e99999a 	.word	0x3e99999a

08010360 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 8010360:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 8010362:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8010366:	4770      	bx	lr

08010368 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8010368:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
 801036c:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 801036e:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8010372:	eeb4 0a67 	vcmp.f32	s0, s15
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	d809      	bhi.n	8010390 <tCrusher_setSamplingRatio+0x28>
 801037c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	db04      	blt.n	8010390 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 8010386:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 801038a:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 801038c:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop

08010394 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 801039a:	698d      	ldr	r5, [r1, #24]
{
 801039c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801039e:	206c      	movs	r0, #108	; 0x6c
 80103a0:	4629      	mov	r1, r5
 80103a2:	f003 ff13 	bl	80141cc <mpool_alloc>
 80103a6:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80103a8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80103aa:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 80103ae:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80103b0:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 80103b2:	ed93 8a00 	vldr	s16, [r3]
 80103b6:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80103ba:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80103be:	f008 fc9f 	bl	8018d00 <expf>
 80103c2:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80103c6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80103ca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80103ce:	f008 fc97 	bl	8018d00 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 80103d2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
 80103d6:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 80103d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 80103dc:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 80103de:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
 80103e0:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 80103e2:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 80103e4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
 80103e8:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 80103ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 80103ec:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 80103ee:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 80103f0:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 80103f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 80103f4:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 80103f6:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 80103f8:	4905      	ldr	r1, [pc, #20]	; (8010410 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80103fa:	4b06      	ldr	r3, [pc, #24]	; (8010414 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80103fc:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 8010400:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 8010402:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 8010404:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8010406:	6223      	str	r3, [r4, #32]
}
 8010408:	ecbd 8b02 	vpop	{d8}
 801040c:	bd70      	pop	{r4, r5, r6, pc}
 801040e:	bf00      	nop
 8010410:	40400000 	.word	0x40400000
 8010414:	3e2aaaab 	.word	0x3e2aaaab

08010418 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 8010418:	b510      	push	{r4, lr}
 801041a:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 801041e:	6804      	ldr	r4, [r0, #0]
{
 8010420:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8010424:	f003 fa8e 	bl	8013944 <fastabsf>
 8010428:	f003 fe66 	bl	80140f8 <fasteratodb>
 801042c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80104dc <tCompressor_tick+0xc4>
 8010430:	eef0 0a40 	vmov.f32	s1, s0
 8010434:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80104e0 <tCompressor_tick+0xc8>
 8010438:	f003 fbc6 	bl	8013bc8 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 801043c:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
 8010440:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8010444:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
 8010448:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 801044c:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
 8010450:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8010454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045c:	da16      	bge.n	801048c <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801045e:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
 8010462:	edd4 5a07 	vldr	s11, [r4, #28]
 8010466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 801046e:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8010472:	dd2f      	ble.n	80104d4 <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8010474:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
 8010478:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
 801047c:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 801047e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010482:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010486:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
 801048a:	e002      	b.n	8010492 <tCompressor_tick+0x7a>
 801048c:	2300      	movs	r3, #0
 801048e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80104dc <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8010492:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8010496:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801049a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
 801049e:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
 80104a0:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80104a8:	bf4c      	ite	mi
 80104aa:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 80104ae:	ed94 6a02 	vldrpl	s12, [r4, #8]
 80104b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80104b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80104ba:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80104be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104c2:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80104c6:	f003 fe45 	bl	8014154 <fasterdbtoa>
    return attenuation * in;
}
 80104ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 80104ce:	ecbd 8b02 	vpop	{d8}
 80104d2:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
 80104d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104d8:	2301      	movs	r3, #1
 80104da:	e7da      	b.n	8010492 <tCompressor_tick+0x7a>
 80104dc:	00000000 	.word	0x00000000
 80104e0:	c2b40000 	.word	0xc2b40000

080104e4 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 80104e4:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80104e6:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
 80104ea:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 80104ec:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80104f0:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
 80104f4:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80104f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
 80104fa:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
 80104fc:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 80104fe:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
 8010500:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010502:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 8010506:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010508:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 801050c:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010510:	ee07 3a90 	vmov	s15, r3
 8010514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010518:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 801051c:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010520:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010524:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010528:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop

08010530 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 8010530:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 8010532:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 8010536:	4770      	bx	lr

08010538 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
 8010538:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 801053a:	4614      	mov	r4, r2
{
 801053c:	4606      	mov	r6, r0
 801053e:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010540:	2018      	movs	r0, #24
{
 8010542:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010546:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 801054a:	b083      	sub	sp, #12
 801054c:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010550:	4639      	mov	r1, r7
{
 8010552:	eeb0 8a41 	vmov.f32	s16, s2
 8010556:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801055a:	f003 fe37 	bl	80141cc <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 801055e:	4621      	mov	r1, r4
    p->curr=0.0f;
 8010560:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010562:	4604      	mov	r4, r0
 8010564:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010566:	ed9d 0a01 	vldr	s0, [sp, #4]
 801056a:	3014      	adds	r0, #20
    p->mempool = m;
 801056c:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8010570:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8010574:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010576:	f7ff faa9 	bl	800facc <tPowerFollower_initToPool>
    p->mode=mode;
 801057a:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 801057c:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8010580:	b003      	add	sp, #12
 8010582:	ecbd 8b02 	vpop	{d8}
 8010586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010588 <tFeedbackLeveler_initToPool>:
{
 8010588:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801058a:	6817      	ldr	r7, [r2, #0]
{
 801058c:	4614      	mov	r4, r2
 801058e:	4606      	mov	r6, r0
 8010590:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010592:	2018      	movs	r0, #24
 8010594:	4639      	mov	r1, r7
{
 8010596:	ed2d 8b02 	vpush	{d8}
 801059a:	eef0 8a40 	vmov.f32	s17, s0
 801059e:	b083      	sub	sp, #12
 80105a0:	eeb0 8a41 	vmov.f32	s16, s2
 80105a4:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80105a8:	f003 fe10 	bl	80141cc <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80105ac:	4621      	mov	r1, r4
    p->curr=0.0f;
 80105ae:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80105b0:	4604      	mov	r4, r0
 80105b2:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80105b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80105b8:	3014      	adds	r0, #20
    p->mempool = m;
 80105ba:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 80105be:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 80105c2:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80105c4:	f7ff fa82 	bl	800facc <tPowerFollower_initToPool>
    p->mode=mode;
 80105c8:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 80105ca:	ed84 8a02 	vstr	s16, [r4, #8]
}
 80105ce:	b003      	add	sp, #12
 80105d0:	ecbd 8b02 	vpop	{d8}
 80105d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d6:	bf00      	nop

080105d8 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 80105d8:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 80105da:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 80105dc:	f104 0014 	add.w	r0, r4, #20
 80105e0:	f7ff fa8e 	bl	800fb00 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 80105e4:	6821      	ldr	r1, [r4, #0]
 80105e6:	4620      	mov	r0, r4
}
 80105e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 80105ec:	f003 beb0 	b.w	8014350 <mpool_free>

080105f0 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 80105f0:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 80105f2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80105f6:	4770      	bx	lr

080105f8 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 80105f8:	6800      	ldr	r0, [r0, #0]
 80105fa:	3014      	adds	r0, #20
 80105fc:	f7ff ba84 	b.w	800fb08 <tPowerFollower_setFactor>

08010600 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8010600:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8010602:	60d9      	str	r1, [r3, #12]
}
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop

08010608 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 8010608:	b510      	push	{r4, lr}
 801060a:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 801060e:	6804      	ldr	r4, [r0, #0]
{
 8010610:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010614:	f104 0014 	add.w	r0, r4, #20
 8010618:	f7ff fa88 	bl	800fb2c <tPowerFollower_tick>
 801061c:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010620:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010622:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010626:	b91b      	cbnz	r3, 8010630 <tFeedbackLeveler_tick+0x28>
 8010628:	eddf 7a08 	vldr	s15, [pc, #32]	; 801064c <tFeedbackLeveler_tick+0x44>
 801062c:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8010630:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010634:	edd4 6a02 	vldr	s13, [r4, #8]
 8010638:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801063c:	ee27 0a88 	vmul.f32	s0, s15, s16
 8010640:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8010644:	ecbd 8b02 	vpop	{d8}
 8010648:	bd10      	pop	{r4, pc}
 801064a:	bf00      	nop
 801064c:	00000000 	.word	0x00000000

08010650 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8010650:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 8010652:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8010656:	4770      	bx	lr

08010658 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 801065e:	699e      	ldr	r6, [r3, #24]
{
 8010660:	4614      	mov	r4, r2
 8010662:	4607      	mov	r7, r0
 8010664:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010666:	206c      	movs	r0, #108	; 0x6c
 8010668:	4631      	mov	r1, r6
{
 801066a:	eef0 9a40 	vmov.f32	s19, s0
 801066e:	eeb0 9a60 	vmov.f32	s18, s1
 8010672:	eef0 8a61 	vmov.f32	s17, s3
 8010676:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801067a:	f003 fda7 	bl	80141cc <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801067e:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010682:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010684:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8010686:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010688:	eef8 5a67 	vcvt.f32.u32	s11, s15
 801068c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010718 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8010690:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 8010692:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010696:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010698:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801069c:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
 80106a0:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 80106a2:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
 80106a4:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 80106a8:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
 80106ac:	2200      	movs	r2, #0
 80106ae:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 801071c <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80106b2:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
 80106b6:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80106ba:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 80106be:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 80106c2:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
 80106c6:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 80106ca:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
 80106ce:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 80106d2:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 80106d6:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
 80106d8:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
 80106dc:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
 80106e0:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
 80106e4:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80106e8:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80106ec:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80106f0:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80106f4:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80106f8:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80106fc:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010700:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010704:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010708:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	6683      	str	r3, [r0, #104]	; 0x68
}
 8010710:	ecbd 8b04 	vpop	{d8-d9}
 8010714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010716:	bf00      	nop
 8010718:	4479ffff 	.word	0x4479ffff
 801071c:	00000000 	.word	0x00000000

08010720 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8010720:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010724:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010726:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 801072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 801072e:	bf48      	it	mi
 8010730:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010744 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010734:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8010738:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801073c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	3c23d70a 	.word	0x3c23d70a

08010748 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8010748:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801074c:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801074e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8010756:	bf48      	it	mi
 8010758:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 801076c <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801075c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8010760:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010764:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	3c23d70a 	.word	0x3c23d70a

08010770 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010770:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010774:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010788 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
 8010778:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 801077a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 801077e:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8010782:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 8010786:	4770      	bx	lr
 8010788:	00000000 	.word	0x00000000

0801078c <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 801078c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010790:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010792:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8010796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 801079a:	bf48      	it	mi
 801079c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80107b0 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80107a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 80107a4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80107a8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	3c23d70a 	.word	0x3c23d70a

080107b4 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 80107b4:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80107b6:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80107b8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80107d4 <tADSRT_setLeakFactor+0x20>
 80107bc:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
 80107c0:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80107c4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80107c8:	f008 fd12 	bl	80191f0 <powf>
 80107cc:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 80107d0:	bd10      	pop	{r4, pc}
 80107d2:	bf00      	nop
 80107d4:	472c4400 	.word	0x472c4400

080107d8 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 80107d8:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 80107da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107dc:	b162      	cbz	r2, 80107f8 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 80107de:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 80107e0:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 80107e2:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 80107e4:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
 80107e6:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 80107e8:	2200      	movs	r2, #0
 80107ea:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 80107ec:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
 80107f0:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 80107f2:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 80107f4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80107f6:	4770      	bx	lr
        adsr->whichStage = env_attack;
 80107f8:	2101      	movs	r1, #1
 80107fa:	e7f5      	b.n	80107e8 <tADSRT_on+0x10>

080107fc <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 80107fc:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 80107fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010800:	b11a      	cbz	r2, 801080a <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8010802:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8010804:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8010806:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 8010808:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 801080a:	4770      	bx	lr

0801080c <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 801080c:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 801080e:	2100      	movs	r1, #0
    adsr->next = 0.0f;
 8010810:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
 8010812:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 8010814:	619a      	str	r2, [r3, #24]
}
 8010816:	4770      	bx	lr

08010818 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 8010818:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 801081a:	6804      	ldr	r4, [r0, #0]
{
 801081c:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8010820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010822:	3b01      	subs	r3, #1
 8010824:	2b04      	cmp	r3, #4
 8010826:	f200 8154 	bhi.w	8010ad2 <tADSRT_tick+0x2ba>
 801082a:	e8df f003 	tbb	[pc, r3]
 801082e:	4d1f      	.short	0x4d1f
 8010830:	6f3a      	.short	0x6f3a
 8010832:	03          	.byte	0x03
 8010833:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8010834:	edd4 7a03 	vldr	s15, [r4, #12]
 8010838:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 801083c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010840:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010848:	dd7d      	ble.n	8010946 <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 801084a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8010ad8 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
 801084e:	2301      	movs	r3, #1
 8010850:	eeb0 0a67 	vmov.f32	s0, s15
 8010854:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010856:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 801085a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 801085e:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010862:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8010866:	ecbd 8b02 	vpop	{d8}
 801086a:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 801086c:	edd4 7a03 	vldr	s15, [r4, #12]
 8010870:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8010874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010878:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010880:	f340 808b 	ble.w	801099a <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
 8010884:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8010886:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
 801088a:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 801088c:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 8010890:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010894:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010898:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 801089c:	ecbd 8b02 	vpop	{d8}
 80108a0:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 80108a2:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80108a6:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80108aa:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80108ae:	ee20 0a26 	vmul.f32	s0, s0, s13
 80108b2:	edd4 7a07 	vldr	s15, [r4, #28]
 80108b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80108ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80108be:	ed84 0a06 	vstr	s0, [r4, #24]
}
 80108c2:	ecbd 8b02 	vpop	{d8}
 80108c6:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 80108c8:	edd4 7a03 	vldr	s15, [r4, #12]
 80108cc:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80108d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108d4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80108d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108dc:	f340 808b 	ble.w	80109f6 <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
 80108e0:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 80108e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 80108e8:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 80108ec:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
 80108ee:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
 80108f0:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 80108f4:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 80108f6:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 80108fa:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80108fe:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010902:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8010906:	ecbd 8b02 	vpop	{d8}
 801090a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 801090c:	edd4 7a03 	vldr	s15, [r4, #12]
 8010910:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 8010914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010918:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010920:	f340 809e 	ble.w	8010a60 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
 8010924:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8010ad8 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
 8010928:	2300      	movs	r3, #0
 801092a:	eeb0 0a67 	vmov.f32	s0, s15
 801092e:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010930:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 8010934:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010938:	ee77 7a81 	vadd.f32	s15, s15, s2
 801093c:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
 8010940:	ecbd 8b02 	vpop	{d8}
 8010944:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 801094a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801094e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010952:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010956:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 801095a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010962:	f100 80b2 	bmi.w	8010aca <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010966:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801096a:	6862      	ldr	r2, [r4, #4]
 801096c:	ee17 3a90 	vmov	r3, s15
 8010970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010974:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010978:	ee16 3a90 	vmov	r3, s13
 801097c:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8010980:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010984:	ed92 0a00 	vldr	s0, [r2]
 8010988:	f003 fb3e 	bl	8014008 <LEAF_interpolation_linear>
 801098c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8010990:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010994:	ed84 0a06 	vstr	s0, [r4, #24]
 8010998:	e75f      	b.n	801085a <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 801099a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 801099e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80109a2:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 80109a6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80109aa:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 80109ae:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80109b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b6:	f100 8084 	bmi.w	8010ac2 <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 80109ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80109be:	6862      	ldr	r2, [r4, #4]
 80109c0:	ee17 3a90 	vmov	r3, s15
 80109c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109c8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80109cc:	ee16 3a90 	vmov	r3, s13
 80109d0:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 80109d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80109d8:	ed92 0a00 	vldr	s0, [r2]
 80109dc:	f003 fb14 	bl	8014008 <LEAF_interpolation_linear>
 80109e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 80109e4:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80109e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80109ec:	ee20 0a08 	vmul.f32	s0, s0, s16
 80109f0:	ed84 0a06 	vstr	s0, [r4, #24]
 80109f4:	e74c      	b.n	8010890 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80109f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 80109fa:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80109fe:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010a02:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a06:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010a0a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a12:	d452      	bmi.n	8010aba <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8010a14:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010a18:	6862      	ldr	r2, [r4, #4]
 8010a1a:	ee17 3a90 	vmov	r3, s15
 8010a1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a22:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 8010a26:	ee16 3a90 	vmov	r3, s13
 8010a2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a2e:	ed92 0a00 	vldr	s0, [r2]
 8010a32:	f003 fae9 	bl	8014008 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a3a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8010a3e:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010a42:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010a46:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
 8010a4a:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010a4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a52:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010a56:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010a5a:	ed84 0a06 	vstr	s0, [r4, #24]
 8010a5e:	e74c      	b.n	80108fa <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8010a64:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a68:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8010a6c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a70:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8010a74:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7c:	d419      	bmi.n	8010ab2 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8010a7e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010a82:	6862      	ldr	r2, [r4, #4]
 8010a84:	ee17 3a90 	vmov	r3, s15
 8010a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a8c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8010a90:	ee16 3a90 	vmov	r3, s13
 8010a94:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8010a98:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a9c:	ed92 0a00 	vldr	s0, [r2]
 8010aa0:	f003 fab2 	bl	8014008 <LEAF_interpolation_linear>
 8010aa4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 8010aa8:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8010aac:	ed84 0a06 	vstr	s0, [r4, #24]
 8010ab0:	e740      	b.n	8010934 <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010ab2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010ab4:	eddf 0a08 	vldr	s1, [pc, #32]	; 8010ad8 <tADSRT_tick+0x2c0>
 8010ab8:	e7ea      	b.n	8010a90 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010aba:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010abc:	eddf 0a06 	vldr	s1, [pc, #24]	; 8010ad8 <tADSRT_tick+0x2c0>
 8010ac0:	e7b1      	b.n	8010a26 <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010ac2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010ac4:	eddf 0a04 	vldr	s1, [pc, #16]	; 8010ad8 <tADSRT_tick+0x2c0>
 8010ac8:	e780      	b.n	80109cc <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010aca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010acc:	eddf 0a02 	vldr	s1, [pc, #8]	; 8010ad8 <tADSRT_tick+0x2c0>
 8010ad0:	e752      	b.n	8010978 <tADSRT_tick+0x160>
    return adsr->next;
 8010ad2:	ed94 0a06 	vldr	s0, [r4, #24]
 8010ad6:	e6c6      	b.n	8010866 <tADSRT_tick+0x4e>
 8010ad8:	00000000 	.word	0x00000000

08010adc <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010adc:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 8010ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ae0:	3a01      	subs	r2, #1
 8010ae2:	2a04      	cmp	r2, #4
 8010ae4:	f200 80c7 	bhi.w	8010c76 <tADSRT_tickNoInterp+0x19a>
 8010ae8:	e8df f002 	tbb	[pc, r2]
 8010aec:	6533461b 	.word	0x6533461b
 8010af0:	03          	.byte	0x03
 8010af1:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8010af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8010af6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8010afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b06:	dd6e      	ble.n	8010be6 <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
 8010b08:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 8010b0a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8010c7c <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
 8010b0e:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8010b10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010b14:	ed83 0a06 	vstr	s0, [r3, #24]
 8010b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b1c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
 8010b20:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8010b22:	edd3 7a03 	vldr	s15, [r3, #12]
 8010b26:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8010b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b36:	dd64      	ble.n	8010c02 <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
 8010b38:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 8010b3a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010b3e:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8010b40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010b44:	ed83 0a06 	vstr	s0, [r3, #24]
 8010b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b4c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8010b50:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010b52:	edd3 7a07 	vldr	s15, [r3, #28]
 8010b56:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010b5a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8010b5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010b66:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010b6a:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010b6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010b72:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8010b76:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8010b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8010b7c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8010b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8c:	dd4b      	ble.n	8010c26 <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
 8010b8e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 8010b92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 8010b96:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8010b9a:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
 8010b9c:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
 8010b9e:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 8010ba2:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
 8010ba4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8010ba8:	ed83 0a06 	vstr	s0, [r3, #24]
 8010bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bb0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 8010bb4:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8010bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8010bba:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8010bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bca:	dd46      	ble.n	8010c5a <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
 8010bcc:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 8010bce:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8010c7c <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
 8010bd2:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8010bd4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010bd8:	ed83 0a06 	vstr	s0, [r3, #24]
 8010bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010be0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
 8010be4:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8010be6:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8010bf0:	ee16 1a90 	vmov	r1, s13
 8010bf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010bf8:	ed92 0a00 	vldr	s0, [r2]
 8010bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c00:	e786      	b.n	8010b10 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8010c02:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8010c06:	685a      	ldr	r2, [r3, #4]
 8010c08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010c0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010c10:	ee16 1a90 	vmov	r1, s13
 8010c14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c18:	edd2 6a00 	vldr	s13, [r2]
 8010c1c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010c20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c24:	e78c      	b.n	8010b40 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8010c26:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c30:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8010c34:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8010c38:	ee15 1a90 	vmov	r1, s11
 8010c3c:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8010c40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c48:	ee20 0a06 	vmul.f32	s0, s0, s12
 8010c4c:	ed92 6a00 	vldr	s12, [r2]
 8010c50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010c54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c58:	e7a4      	b.n	8010ba4 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8010c5a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8010c5e:	685a      	ldr	r2, [r3, #4]
 8010c60:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010c64:	ee16 1a90 	vmov	r1, s13
 8010c68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c6c:	ed92 0a00 	vldr	s0, [r2]
 8010c70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c74:	e7ae      	b.n	8010bd4 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
 8010c76:	ed93 0a06 	vldr	s0, [r3, #24]
 8010c7a:	4770      	bx	lr
 8010c7c:	00000000 	.word	0x00000000

08010c80 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010c86:	698d      	ldr	r5, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010c88:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010c8a:	2014      	movs	r0, #20
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010c8c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010c90:	4629      	mov	r1, r5
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010c92:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010c96:	f003 fa99 	bl	80141cc <mpool_alloc>
 8010c9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010c9e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8010cc8 <tExpSmooth_init+0x48>
 8010ca2:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 8010ca4:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8010ca8:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8010cac:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8010cb0:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
 8010cb2:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 8010cb6:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
 8010cba:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 8010cbe:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8010cc2:	ecbd 8b02 	vpop	{d8}
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}
 8010cc8:	00000000 	.word	0x00000000

08010ccc <tExpSmooth_initToPool>:
{
 8010ccc:	b538      	push	{r3, r4, r5, lr}
 8010cce:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010cd2:	680d      	ldr	r5, [r1, #0]
{
 8010cd4:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010cd6:	2014      	movs	r0, #20
{
 8010cd8:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010cdc:	4629      	mov	r1, r5
{
 8010cde:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010ce2:	f003 fa73 	bl	80141cc <mpool_alloc>
 8010ce6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010cea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8010d14 <tExpSmooth_initToPool+0x48>
 8010cee:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 8010cf0:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8010cf4:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8010cf8:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8010cfc:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
 8010cfe:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 8010d02:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
 8010d06:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 8010d0a:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
 8010d0e:	ecbd 8b02 	vpop	{d8}
 8010d12:	bd38      	pop	{r3, r4, r5, pc}
 8010d14:	00000000 	.word	0x00000000

08010d18 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8010d18:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 8010d1a:	6801      	ldr	r1, [r0, #0]
 8010d1c:	f003 bb18 	b.w	8014350 <mpool_free>

08010d20 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
 8010d20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010d24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8010d40 <tExpSmooth_setFactor+0x20>
 8010d28:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
 8010d2a:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8010d2e:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - smooth->factor;
 8010d32:	ee77 7ac0 	vsub.f32	s15, s15, s0
    smooth->factor = factor;
 8010d36:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 8010d3a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8010d3e:	4770      	bx	lr
 8010d40:	00000000 	.word	0x00000000

08010d44 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 8010d44:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8010d46:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8010d4a:	4770      	bx	lr

08010d4c <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 8010d4c:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 8010d4e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8010d52:	4770      	bx	lr

08010d54 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 8010d54:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 8010d56:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
 8010d5a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8010d5e:	4770      	bx	lr

08010d60 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 8010d60:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8010d62:	edd3 6a03 	vldr	s13, [r3, #12]
 8010d66:	ed93 0a02 	vldr	s0, [r3, #8]
 8010d6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8010d6e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010d72:	edd3 7a04 	vldr	s15, [r3, #16]
 8010d76:	eea7 0a27 	vfma.f32	s0, s14, s15
 8010d7a:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 8010d7e:	4770      	bx	lr

08010d80 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010d86:	680d      	ldr	r5, [r1, #0]
{
 8010d88:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010d8a:	201c      	movs	r0, #28
{
 8010d8c:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010d90:	4629      	mov	r1, r5
{
 8010d92:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010d96:	f003 fa19 	bl	80141cc <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8010d9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8010d9e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010da0:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8010da2:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8010da4:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8010da8:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8010dac:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8010db0:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8010db2:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8010db4:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8010db6:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8010db8:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8010dbc:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8010dc0:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8010dc4:	ecbd 8b02 	vpop	{d8}
 8010dc8:	bd38      	pop	{r3, r4, r5, pc}
 8010dca:	bf00      	nop

08010dcc <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 8010dcc:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 8010dce:	6801      	ldr	r1, [r0, #0]
 8010dd0:	f003 babe 	b.w	8014350 <mpool_free>

08010dd4 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 8010dd4:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 8010dd6:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8010dda:	4770      	bx	lr

08010ddc <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 8010ddc:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
 8010dde:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
 8010de2:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
 8010de6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8010dea:	edc3 7a03 	vstr	s15, [r3, #12]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010dee:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
 8010df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010df6:	bf94      	ite	ls
 8010df8:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8010dfc:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8010e00:	eea6 0a87 	vfma.f32	s0, s13, s14
 8010e04:	ed83 0a02 	vstr	s0, [r3, #8]
    s->prevOut = s->currentOut;
 8010e08:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop

08010e10 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 8010e10:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8010e12:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8010e16:	ed83 0a03 	vstr	s0, [r3, #12]
    if (in >= s->prevOut)
 8010e1a:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010e1e:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 8010e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010e26:	bf94      	ite	ls
 8010e28:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8010e2c:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8010e30:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 8010e34:	eeb0 0a67 	vmov.f32	s0, s15
 8010e38:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8010e3c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop

08010e44 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 8010e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e48:	460f      	mov	r7, r1
 8010e4a:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8010e4c:	6811      	ldr	r1, [r2, #0]
{
 8010e4e:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010e50:	2058      	movs	r0, #88	; 0x58
{
 8010e52:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010e54:	9101      	str	r1, [sp, #4]
 8010e56:	f003 f9b9 	bl	80141cc <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010e5a:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
 8010e60:	2400      	movs	r4, #0
    f->numFilts = numFilts;
 8010e62:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010e66:	00b8      	lsls	r0, r7, #2
 8010e68:	f003 fa14 	bl	8014294 <mpool_calloc>
    f->k1[0] = -0.00050469f;
 8010e6c:	4b1a      	ldr	r3, [pc, #104]	; (8010ed8 <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
 8010e6e:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010e70:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
 8010e72:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
 8010e74:	4b19      	ldr	r3, [pc, #100]	; (8010edc <tThiranAllpassSOCascade_initToPool+0x98>)
 8010e76:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
 8010e78:	4b19      	ldr	r3, [pc, #100]	; (8010ee0 <tThiranAllpassSOCascade_initToPool+0x9c>)
 8010e7a:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 8010e7c:	4b19      	ldr	r3, [pc, #100]	; (8010ee4 <tThiranAllpassSOCascade_initToPool+0xa0>)
 8010e7e:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
 8010e80:	4b19      	ldr	r3, [pc, #100]	; (8010ee8 <tThiranAllpassSOCascade_initToPool+0xa4>)
 8010e82:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 8010e84:	4b19      	ldr	r3, [pc, #100]	; (8010eec <tThiranAllpassSOCascade_initToPool+0xa8>)
 8010e86:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
 8010e88:	4b19      	ldr	r3, [pc, #100]	; (8010ef0 <tThiranAllpassSOCascade_initToPool+0xac>)
 8010e8a:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
 8010e8c:	4b19      	ldr	r3, [pc, #100]	; (8010ef4 <tThiranAllpassSOCascade_initToPool+0xb0>)
 8010e8e:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
 8010e90:	4b19      	ldr	r3, [pc, #100]	; (8010ef8 <tThiranAllpassSOCascade_initToPool+0xb4>)
 8010e92:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
 8010e94:	4b19      	ldr	r3, [pc, #100]	; (8010efc <tThiranAllpassSOCascade_initToPool+0xb8>)
 8010e96:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
 8010e98:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
 8010e9c:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
 8010ea0:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
 8010ea4:	dd15      	ble.n	8010ed2 <tThiranAllpassSOCascade_initToPool+0x8e>
 8010ea6:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
 8010ea8:	2500      	movs	r5, #0
 8010eaa:	e001      	b.n	8010eb0 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 8010eac:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
 8010eb0:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 8010eb4:	201c      	movs	r0, #28
 8010eb6:	4649      	mov	r1, r9
 8010eb8:	f003 f988 	bl	80141cc <mpool_alloc>
 8010ebc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
 8010ec0:	3401      	adds	r4, #1
    f->mempool = m;
 8010ec2:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
 8010ec6:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
 8010ec8:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
 8010eca:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
 8010ecc:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
 8010ece:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
 8010ed0:	d1ec      	bne.n	8010eac <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
 8010ed2:	b002      	add	sp, #8
 8010ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed8:	ba044d2c 	.word	0xba044d2c
 8010edc:	bbd2948d 	.word	0xbbd2948d
 8010ee0:	c037f488 	.word	0xc037f488
 8010ee4:	3d8e93e2 	.word	0x3d8e93e2
 8010ee8:	4002bb99 	.word	0x4002bb99
 8010eec:	bb2e31d7 	.word	0xbb2e31d7
 8010ef0:	bc72a9d6 	.word	0xbc72a9d6
 8010ef4:	c039b717 	.word	0xc039b717
 8010ef8:	3d91971c 	.word	0x3d91971c
 8010efc:	4006dfa4 	.word	0x4006dfa4

08010f00 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 8010f00:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 8010f02:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 8010f04:	686b      	ldr	r3, [r5, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	dd0a      	ble.n	8010f20 <tThiranAllpassSOCascade_free+0x20>
 8010f0a:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
 8010f0c:	68ab      	ldr	r3, [r5, #8]
 8010f0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8010f12:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
 8010f14:	6801      	ldr	r1, [r0, #0]
 8010f16:	f003 fa1b 	bl	8014350 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
 8010f1a:	686b      	ldr	r3, [r5, #4]
 8010f1c:	42a3      	cmp	r3, r4
 8010f1e:	dcf5      	bgt.n	8010f0c <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 8010f20:	6829      	ldr	r1, [r5, #0]
 8010f22:	68a8      	ldr	r0, [r5, #8]
 8010f24:	f003 fa14 	bl	8014350 <mpool_free>
    mpool_free((char*)f, f->mempool);
 8010f28:	6829      	ldr	r1, [r5, #0]
 8010f2a:	4628      	mov	r0, r5
}
 8010f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
 8010f30:	f003 ba0e 	b.w	8014350 <mpool_free>

08010f34 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 8010f34:	eef0 7a40 	vmov.f32	s15, s0
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010f3e:	eddf 9a68 	vldr	s19, [pc, #416]	; 80110e0 <tThiranAllpassSOCascade_setCoeff+0x1ac>
 8010f42:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
 8010f46:	6804      	ldr	r4, [r0, #0]
{
 8010f48:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010f4c:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
 8010f50:	edc4 7a03 	vstr	s15, [r4, #12]
{
 8010f54:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010f58:	f007 ffac 	bl	8018eb4 <log2f>
 8010f5c:	eddf 7a61 	vldr	s15, [pc, #388]	; 80110e4 <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8010f60:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010f64:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8010f68:	ee28 8a29 	vmul.f32	s16, s16, s19
 8010f6c:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010f70:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8010f74:	f007 ff9e 	bl	8018eb4 <log2f>
 8010f78:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8010f7c:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80110e8 <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8010f80:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8010f84:	eddf 7a59 	vldr	s15, [pc, #356]	; 80110ec <tThiranAllpassSOCascade_setCoeff+0x1b8>
 8010f88:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8010f8c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80110f0 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 8010f90:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010f94:	f002 fe18 	bl	8013bc8 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010f98:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010f9c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8010fa0:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010fa4:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8010fa8:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010fac:	ee60 8a28 	vmul.f32	s17, s0, s17
 8010fb0:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010fb4:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010fb8:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010fbc:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010fc0:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010fc4:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010fc8:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010fcc:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010fd0:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010fd4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010fd8:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010fdc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010fe0:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
 8010fe4:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010fe8:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010fec:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
 8010ff0:	f007 fefa 	bl	8018de8 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 8010ff4:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
 8010ff8:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
 8010ffc:	eeb0 0a4a 	vmov.f32	s0, s20
 8011000:	eea8 0a89 	vfma.f32	s0, s17, s18
 8011004:	f002 fcc0 	bl	8013988 <fastExp3>
 8011008:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 801100c:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
 8011010:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 8011014:	eea9 0a89 	vfma.f32	s0, s19, s18
 8011018:	f002 fcb6 	bl	8013988 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 801101c:	edd4 7a04 	vldr	s15, [r4, #16]
 8011020:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8011024:	f002 fcb0 	bl	8013988 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 8011028:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801102c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
 8011030:	eddf 5a30 	vldr	s11, [pc, #192]	; 80110f4 <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
 8011034:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
 8011038:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
 801103c:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
 8011040:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
 8011044:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
 8011048:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
 801104c:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
 8011050:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
 8011054:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
 8011058:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
 801105c:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
 8011060:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
 8011064:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
 8011068:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
 801106c:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 8011070:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
 8011074:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
 8011078:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
 801107c:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
 8011080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011084:	dd0b      	ble.n	801109e <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
 8011086:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80110f8 <tThiranAllpassSOCascade_setCoeff+0x1c4>
 801108a:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
 801108e:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
 8011092:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
 8011096:	eeb0 6a47 	vmov.f32	s12, s14
 801109a:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 801109e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80110a0:	2a00      	cmp	r2, #0
 80110a2:	dd14      	ble.n	80110ce <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
 80110a4:	68a3      	ldr	r3, [r4, #8]
 80110a6:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
 80110a8:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
 80110ac:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 80110b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80110b2:	2a01      	cmp	r2, #1
 80110b4:	dd0b      	ble.n	80110ce <tThiranAllpassSOCascade_setCoeff+0x19a>
 80110b6:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
 80110b8:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 80110ba:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
 80110bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 80110c0:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 80110c2:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
 80110c4:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
 80110c6:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 80110c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80110ca:	429a      	cmp	r2, r3
 80110cc:	dcf4      	bgt.n	80110b8 <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 80110ce:	ee07 2a90 	vmov	s15, r2
 80110d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80110d6:	ecbd 8b08 	vpop	{d8-d11}
 80110da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80110de:	bd10      	pop	{r4, pc}
 80110e0:	3b14f209 	.word	0x3b14f209
 80110e4:	42440000 	.word	0x42440000
 80110e8:	42040000 	.word	0x42040000
 80110ec:	3cf5c28f 	.word	0x3cf5c28f
 80110f0:	00000000 	.word	0x00000000
 80110f4:	3f7d70a4 	.word	0x3f7d70a4
 80110f8:	3c23d70a 	.word	0x3c23d70a

080110fc <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
 80110fc:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 80110fe:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8011100:	2b00      	cmp	r3, #0
 8011102:	dd27      	ble.n	8011154 <tThiranAllpassSOCascade_tick+0x58>
 8011104:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
 8011106:	688b      	ldr	r3, [r1, #8]
 8011108:	eef0 4a40 	vmov.f32	s9, s0
 801110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011110:	3201      	adds	r2, #1
 8011112:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 8011116:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 801111a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801111e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011122:	ed93 5a06 	vldr	s10, [r3, #24]
 8011126:	ee37 6a67 	vsub.f32	s12, s14, s15
 801112a:	edd3 5a05 	vldr	s11, [r3, #20]
 801112e:	ee20 0a05 	vmul.f32	s0, s0, s10
 8011132:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
 8011136:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
 801113a:	ed83 7a02 	vstr	s14, [r3, #8]
 801113e:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
 8011142:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 8011146:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
 801114a:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
 801114e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8011150:	4293      	cmp	r3, r2
 8011152:	dcd8      	bgt.n	8011106 <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop

08011158 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 8011158:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 801115a:	6853      	ldr	r3, [r2, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	dd0d      	ble.n	801117c <tThiranAllpassSOCascade_clear+0x24>
 8011160:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 8011162:	2100      	movs	r1, #0
 8011164:	6890      	ldr	r0, [r2, #8]
 8011166:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801116a:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 801116c:	6890      	ldr	r0, [r2, #8]
 801116e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8011172:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
 8011174:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 8011176:	6850      	ldr	r0, [r2, #4]
 8011178:	4298      	cmp	r0, r3
 801117a:	dcf3      	bgt.n	8011164 <tThiranAllpassSOCascade_clear+0xc>

    }
}
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop

08011180 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011186:	680d      	ldr	r5, [r1, #0]
{
 8011188:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 801118a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801118e:	2028      	movs	r0, #40	; 0x28
 8011190:	4629      	mov	r1, r5
{
 8011192:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8011196:	f003 f819 	bl	80141cc <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 801119a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80111e4 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801119e:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80111a0:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 80111a4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 80111a6:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 80111a8:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 80111ac:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 80111b0:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 80111b4:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 80111bc:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 80111be:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 80111c2:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 80111c6:	ee68 0a27 	vmul.f32	s1, s16, s15
 80111ca:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80111ce:	f002 fcfb 	bl	8013bc8 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 80111d2:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80111d6:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 80111da:	edc4 8a05 	vstr	s17, [r4, #20]
}
 80111de:	ecbd 8b02 	vpop	{d8}
 80111e2:	bd38      	pop	{r3, r4, r5, pc}
 80111e4:	00000000 	.word	0x00000000

080111e8 <tOnePole_free>:
    _tOnePole* f = *ft;
 80111e8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 80111ea:	6801      	ldr	r1, [r0, #0]
 80111ec:	f003 b8b0 	b.w	8014350 <mpool_free>

080111f0 <tOnePole_setFreq>:
{
 80111f0:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 80111f2:	6804      	ldr	r4, [r0, #0]
{
 80111f4:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80111f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80111fc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011228 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011200:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8011204:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011208:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801120c:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011210:	f002 fcda 	bl	8013bc8 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 8011214:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011218:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 801121c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011220:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8011224:	bd10      	pop	{r4, pc}
 8011226:	bf00      	nop
 8011228:	00000000 	.word	0x00000000

0801122c <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 801122c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 801122e:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
 8011232:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 8011236:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
 801123a:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 801123e:	edd3 6a05 	vldr	s13, [r3, #20]
 8011242:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 8011246:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 801124a:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 801124e:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 8011252:	4770      	bx	lr

08011254 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011254:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8011290 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011258:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 801125c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011260:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011294 <tOnePole_setSampleRate+0x40>
{
 8011264:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8011266:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8011268:	edd4 0a01 	vldr	s1, [r4, #4]
 801126c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011270:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8011274:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011278:	f002 fca6 	bl	8013bc8 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 801127c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011280:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8011284:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011288:	edc4 7a04 	vstr	s15, [r4, #16]
}
 801128c:	bd10      	pop	{r4, pc}
 801128e:	bf00      	nop
 8011290:	40c90fdb 	.word	0x40c90fdb
 8011294:	00000000 	.word	0x00000000

08011298 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 8011298:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801129a:	680c      	ldr	r4, [r1, #0]
{
 801129c:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 801129e:	2018      	movs	r0, #24
 80112a0:	4621      	mov	r1, r4
 80112a2:	f002 ff93 	bl	80141cc <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
 80112a6:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 80112a8:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
 80112aa:	4906      	ldr	r1, [pc, #24]	; (80112c4 <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
 80112ac:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 80112ae:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
 80112b0:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
 80112b2:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
 80112b4:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
 80112b6:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	6103      	str	r3, [r0, #16]
}
 80112bc:	bd38      	pop	{r3, r4, r5, pc}
 80112be:	bf00      	nop
 80112c0:	3f666666 	.word	0x3f666666
 80112c4:	3dcccccd 	.word	0x3dcccccd

080112c8 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
 80112c8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 80112ca:	6801      	ldr	r1, [r0, #0]
 80112cc:	f003 b840 	b.w	8014350 <mpool_free>

080112d0 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 80112d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
 80112d4:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
 80112d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
 80112da:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
 80112e2:	bfcc      	ite	gt
 80112e4:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
 80112e8:	ee30 0a27 	vaddle.f32	s0, s0, s15
 80112ec:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop

080112f4 <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 80112f4:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 80112f6:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 80112fa:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 80112fe:	4770      	bx	lr

08011300 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 8011300:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 8011302:	edd3 6a03 	vldr	s13, [r3, #12]
 8011306:	edd3 7a01 	vldr	s15, [r3, #4]
 801130a:	ed93 7a02 	vldr	s14, [r3, #8]
 801130e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011312:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
 8011316:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 801131a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 801131e:	4770      	bx	lr

08011320 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011320:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8011330 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
 8011324:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011326:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801132a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 801132e:	4770      	bx	lr
 8011330:	40c90fdb 	.word	0x40c90fdb

08011334 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
 8011334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011336:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 801133a:	6995      	ldr	r5, [r2, #24]
{
 801133c:	4606      	mov	r6, r0
 801133e:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8011340:	2050      	movs	r0, #80	; 0x50
 8011342:	4629      	mov	r1, r5
{
 8011344:	eef0 8a40 	vmov.f32	s17, s0
 8011348:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 801134c:	f002 ff3e 	bl	80141cc <mpool_alloc>
 8011350:	6030      	str	r0, [r6, #0]
 8011352:	4604      	mov	r4, r0
    svf->mempool = m;
 8011354:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 8011356:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 8011358:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801135a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8011430 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
 801135e:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011360:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8011364:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 8011366:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 801136a:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801136c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8011370:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 8011374:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 8011376:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 8011378:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 801137c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011380:	f008 f918 	bl	80195b4 <tanf>
    svf->k = 1.0f/Q;
 8011384:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011388:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 801138c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 801138e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 8011390:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 8011394:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 8011398:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 801139a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801139c:	eef0 6a67 	vmov.f32	s13, s15
 80113a0:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 80113a4:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80113a8:	eee0 6a06 	vfma.f32	s13, s0, s12
 80113ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 80113b0:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80113b4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 80113b8:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 80113bc:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 80113c0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 80113c4:	d00d      	beq.n	80113e2 <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 80113c6:	2f04      	cmp	r7, #4
 80113c8:	d80b      	bhi.n	80113e2 <tSVF_init+0xae>
 80113ca:	e8df f007 	tbb	[pc, r7]
 80113ce:	0a23      	.short	0x0a23
 80113d0:	032a      	.short	0x032a
 80113d2:	1a          	.byte	0x1a
 80113d3:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
 80113d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 80113d8:	4a16      	ldr	r2, [pc, #88]	; (8011434 <tSVF_init+0x100>)
        svf->cL = 0.0f;
 80113da:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 80113dc:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 80113de:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 80113e0:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 80113e2:	ed96 7a00 	vldr	s14, [r6]
 80113e6:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011438 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
 80113ea:	4a14      	ldr	r2, [pc, #80]	; (801143c <tSVF_init+0x108>)
 80113ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113f0:	4b13      	ldr	r3, [pc, #76]	; (8011440 <tSVF_init+0x10c>)
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	bfd8      	it	le
 80113f8:	4613      	movle	r3, r2
 80113fa:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80113fc:	ecbd 8b02 	vpop	{d8}
 8011400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 8011402:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011406:	4a0b      	ldr	r2, [pc, #44]	; (8011434 <tSVF_init+0x100>)
        svf->cL = -2.0f;
 8011408:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 801140c:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801140e:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 8011410:	63a3      	str	r3, [r4, #56]	; 0x38
 8011412:	e7e6      	b.n	80113e2 <tSVF_init+0xae>
        svf->cBK = -1.0f;
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <tSVF_init+0x100>)
        svf->cH = 1.0f;
 8011416:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801141a:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 801141c:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 801141e:	63a3      	str	r3, [r4, #56]	; 0x38
 8011420:	e7df      	b.n	80113e2 <tSVF_init+0xae>
        svf->cB = 1.0f;
 8011422:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 8011426:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 8011428:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 801142a:	63a2      	str	r2, [r4, #56]	; 0x38
 801142c:	e7d9      	b.n	80113e2 <tSVF_init+0xae>
 801142e:	bf00      	nop
 8011430:	40490fdb 	.word	0x40490fdb
 8011434:	bf800000 	.word	0xbf800000
 8011438:	47afc800 	.word	0x47afc800
 801143c:	0801c030 	.word	0x0801c030
 8011440:	08020030 	.word	0x08020030

08011444 <tSVF_initToPool>:
{
 8011444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011446:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801144a:	6815      	ldr	r5, [r2, #0]
{
 801144c:	4606      	mov	r6, r0
 801144e:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8011450:	2050      	movs	r0, #80	; 0x50
 8011452:	4629      	mov	r1, r5
{
 8011454:	eef0 8a40 	vmov.f32	s17, s0
 8011458:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 801145c:	f002 feb6 	bl	80141cc <mpool_alloc>
 8011460:	6030      	str	r0, [r6, #0]
 8011462:	4604      	mov	r4, r0
    svf->mempool = m;
 8011464:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 8011466:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0;
 8011468:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801146a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8011540 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
 801146e:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011470:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8011474:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 8011476:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 801147a:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801147c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8011480:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 8011484:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 8011486:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 8011488:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 801148c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011490:	f008 f890 	bl	80195b4 <tanf>
    svf->k = 1.0f/Q;
 8011494:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011498:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
 801149c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 801149e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 80114a0:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 80114a4:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 80114a8:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 80114aa:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114ac:	eef0 6a67 	vmov.f32	s13, s15
 80114b0:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 80114b4:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114b8:	eee0 6a06 	vfma.f32	s13, s0, s12
 80114bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 80114c0:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114c4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 80114c8:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 80114cc:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 80114d0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 80114d4:	d00b      	beq.n	80114ee <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
 80114d6:	2f04      	cmp	r7, #4
 80114d8:	d809      	bhi.n	80114ee <tSVF_initToPool+0xaa>
 80114da:	e8df f007 	tbb	[pc, r7]
 80114de:	0821      	.short	0x0821
 80114e0:	2803      	.short	0x2803
 80114e2:	18          	.byte	0x18
 80114e3:	00          	.byte	0x00
        svf->cB = 1.0f;
 80114e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 80114e8:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 80114ea:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 80114ec:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
 80114ee:	ed96 7a00 	vldr	s14, [r6]
 80114f2:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011544 <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
 80114f6:	4a14      	ldr	r2, [pc, #80]	; (8011548 <tSVF_initToPool+0x104>)
 80114f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114fc:	4b13      	ldr	r3, [pc, #76]	; (801154c <tSVF_initToPool+0x108>)
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	bfd8      	it	le
 8011504:	4613      	movle	r3, r2
 8011506:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
 8011508:	ecbd 8b02 	vpop	{d8}
 801150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 801150e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011512:	4a0f      	ldr	r2, [pc, #60]	; (8011550 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
 8011514:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8011518:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801151a:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 801151c:	63a3      	str	r3, [r4, #56]	; 0x38
 801151e:	e7e6      	b.n	80114ee <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
 8011520:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
 8011522:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011526:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 8011528:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 801152a:	63a3      	str	r3, [r4, #56]	; 0x38
 801152c:	e7df      	b.n	80114ee <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 801152e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011532:	4a07      	ldr	r2, [pc, #28]	; (8011550 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
 8011534:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 8011536:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011538:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 801153a:	63a3      	str	r3, [r4, #56]	; 0x38
 801153c:	e7d7      	b.n	80114ee <tSVF_initToPool+0xaa>
 801153e:	bf00      	nop
 8011540:	40490fdb 	.word	0x40490fdb
 8011544:	47afc800 	.word	0x47afc800
 8011548:	0801c030 	.word	0x0801c030
 801154c:	08020030 	.word	0x08020030
 8011550:	bf800000 	.word	0xbf800000

08011554 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 8011554:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 8011556:	6801      	ldr	r1, [r0, #0]
 8011558:	f002 befa 	b.w	8014350 <mpool_free>

0801155c <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 801155c:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 801155e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8011562:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011566:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 801156a:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 801156e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
 8011572:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8011576:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
 801157a:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 801157e:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011582:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
 8011586:	ee67 7a84 	vmul.f32	s15, s15, s8
 801158a:	ed93 2a08 	vldr	s4, [r3, #32]
 801158e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8011592:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011596:	eea2 5a23 	vfma.f32	s10, s4, s7
 801159a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 801159e:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80115a2:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80115a6:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80115aa:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80115ae:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 80115b2:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80115b6:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80115ba:	edc3 6a06 	vstr	s13, [r3, #24]
}
 80115be:	eea3 7a80 	vfma.f32	s14, s7, s0
 80115c2:	eeb0 0a47 	vmov.f32	s0, s14
 80115c6:	4770      	bx	lr

080115c8 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 80115c8:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 80115ca:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 80115cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80115d0:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 80115d4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8011630 <tSVF_setFreq+0x68>
 80115d8:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 80115dc:	ee21 1a27 	vmul.f32	s2, s2, s15
 80115e0:	f002 faf2 	bl	8013bc8 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 80115e4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011634 <tSVF_setFreq+0x6c>
 80115e8:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 80115ec:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 80115f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80115f8:	f007 ffdc 	bl	80195b4 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80115fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011600:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011604:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011608:	ee70 7a27 	vadd.f32	s15, s0, s15
 801160c:	eeb0 6a66 	vmov.f32	s12, s13
 8011610:	eea0 6a27 	vfma.f32	s12, s0, s15
 8011614:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
 8011618:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801161c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011620:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8011624:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011628:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 801162c:	bd10      	pop	{r4, pc}
 801162e:	bf00      	nop
 8011630:	00000000 	.word	0x00000000
 8011634:	40490fdb 	.word	0x40490fdb

08011638 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011638:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80116b8 <tSVF_setFreqFast+0x80>
 801163c:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
 8011640:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011646:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 801164a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
 801164c:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
 8011650:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011654:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011658:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
 801165c:	ee17 2a90 	vmov	r2, s15
 8011660:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011664:	4562      	cmp	r2, ip
 8011666:	bfa8      	it	ge
 8011668:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801166a:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 801166e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011672:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011676:	ed92 4a01 	vldr	s8, [r2, #4]
 801167a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801167e:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011682:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011686:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 801168a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801168e:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011692:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011696:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801169a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801169e:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
 80116a2:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80116a6:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80116aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80116ae:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 80116b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80116b6:	4770      	bx	lr
 80116b8:	41f4898d 	.word	0x41f4898d

080116bc <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 80116bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 80116c0:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80116c2:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
 80116c6:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 80116ca:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80116ce:	eeb0 6a47 	vmov.f32	s12, s14
 80116d2:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 80116d6:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80116da:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80116de:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 80116e2:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80116e6:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80116ea:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80116ee:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 80116f2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80116f6:	4770      	bx	lr

080116f8 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
 80116f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 80116fc:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 80116fe:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011706:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 801170a:	4770      	bx	lr

0801170c <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
 801170c:	b538      	push	{r3, r4, r5, lr}
 801170e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8011712:	698c      	ldr	r4, [r1, #24]
{
 8011714:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011716:	2018      	movs	r0, #24
{
 8011718:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801171c:	4621      	mov	r1, r4
 801171e:	f002 fdb9 	bl	8014294 <mpool_calloc>
 8011722:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011724:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801172a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 801172c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801172e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011732:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011734:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8011738:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 801173a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801173e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011742:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011746:	ecbd 8b02 	vpop	{d8}
 801174a:	bd38      	pop	{r3, r4, r5, pc}

0801174c <tHighpass_initToPool>:
{
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011752:	680c      	ldr	r4, [r1, #0]
{
 8011754:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011756:	2018      	movs	r0, #24
{
 8011758:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801175c:	4621      	mov	r1, r4
 801175e:	f002 fd99 	bl	8014294 <mpool_calloc>
 8011762:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011764:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011766:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801176a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 801176c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801176e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011772:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011774:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8011778:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 801177a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801177e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011782:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011786:	ecbd 8b02 	vpop	{d8}
 801178a:	bd38      	pop	{r3, r4, r5, pc}

0801178c <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 801178c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 801178e:	6801      	ldr	r1, [r0, #0]
 8011790:	f002 bdde 	b.w	8014350 <mpool_free>

08011794 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 8011794:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801179a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 801179e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80117a2:	eee7 7a40 	vfms.f32	s15, s14, s0
 80117a6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80117aa:	4770      	bx	lr

080117ac <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
 80117ac:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 80117ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80117b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80117b6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 80117ba:	ed83 0a01 	vstr	s0, [r3, #4]
 80117be:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 80117c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80117c6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 80117ca:	4770      	bx	lr

080117cc <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80117cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80117ec <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80117d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 80117d4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80117d6:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80117da:	edd3 6a04 	vldr	s13, [r3, #16]
 80117de:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80117e2:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80117e6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80117ea:	4770      	bx	lr
 80117ec:	40c90fdb 	.word	0x40c90fdb

080117f0 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 80117f0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80117f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80117f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80117fa:	ee70 7a66 	vsub.f32	s15, s0, s13
 80117fe:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8011802:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011806:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801180a:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 801180e:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8011812:	edd3 4a08 	vldr	s9, [r3, #32]
 8011816:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801181a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 801181e:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011822:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8011826:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801182a:	eeb0 5a47 	vmov.f32	s10, s14
 801182e:	eea4 0a87 	vfma.f32	s0, s9, s14
 8011832:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011836:	eef0 7a66 	vmov.f32	s15, s13
}
 801183a:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 801183e:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011842:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011846:	edc3 7a03 	vstr	s15, [r3, #12]
}
 801184a:	4770      	bx	lr

0801184c <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 801184c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 801184e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011850:	eddf 7a98 	vldr	s15, [pc, #608]	; 8011ab4 <tVZFilter_calcCoeffs+0x268>
{
 8011854:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011858:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801185c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8011860:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011864:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011868:	eeb0 0a68 	vmov.f32	s0, s17
 801186c:	f007 fea2 	bl	80195b4 <tanf>
    
    switch( f->type )
 8011870:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011872:	eeb0 8a40 	vmov.f32	s16, s0
 8011876:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 801187a:	2b0a      	cmp	r3, #10
 801187c:	f200 8117 	bhi.w	8011aae <tVZFilter_calcCoeffs+0x262>
 8011880:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011884:	002f0026 	.word	0x002f0026
 8011888:	00410038 	.word	0x00410038
 801188c:	0056004d 	.word	0x0056004d
 8011890:	00a1008b 	.word	0x00a1008b
 8011894:	010a00b7 	.word	0x010a00b7
 8011898:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 801189a:	edd4 7a05 	vldr	s15, [r4, #20]
 801189e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80118a2:	eeb1 7a67 	vneg.f32	s14, s15
 80118a6:	61e3      	str	r3, [r4, #28]
 80118a8:	6263      	str	r3, [r4, #36]	; 0x24
 80118aa:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80118ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80118b2:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80118b6:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 80118ba:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80118be:	eee7 6a88 	vfma.f32	s13, s15, s16
 80118c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118c6:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80118ca:	ecbd 8b02 	vpop	{d8}
 80118ce:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80118d0:	2300      	movs	r3, #0
 80118d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80118d6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80118da:	61e3      	str	r3, [r4, #28]
 80118dc:	6223      	str	r3, [r4, #32]
 80118de:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80118e0:	e7e5      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80118e2:	2300      	movs	r3, #0
 80118e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80118e8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80118ec:	6223      	str	r3, [r4, #32]
 80118ee:	6263      	str	r3, [r4, #36]	; 0x24
 80118f0:	61e2      	str	r2, [r4, #28]
            break;
 80118f2:	e7dc      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80118f4:	2300      	movs	r3, #0
 80118f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80118fa:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80118fe:	61e3      	str	r3, [r4, #28]
 8011900:	6263      	str	r3, [r4, #36]	; 0x24
 8011902:	6222      	str	r2, [r4, #32]
            break;
 8011904:	e7d3      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011906:	edd4 7a05 	vldr	s15, [r4, #20]
 801190a:	2300      	movs	r3, #0
 801190c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8011910:	61e3      	str	r3, [r4, #28]
 8011912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011916:	6263      	str	r3, [r4, #36]	; 0x24
 8011918:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 801191c:	e7c7      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 801191e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011922:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011924:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011928:	6222      	str	r2, [r4, #32]
 801192a:	61e3      	str	r3, [r4, #28]
 801192c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801192e:	e7be      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011930:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011934:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011938:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801193c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011940:	f007 fc56 	bl	80191f0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011944:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011948:	f007 fe34 	bl	80195b4 <tanf>
            Lfloat r  = f->g/wl;
 801194c:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011950:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8011954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011958:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801195c:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011960:	ed84 7a07 	vstr	s14, [r4, #28]
 8011964:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011968:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801196c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011970:	eef0 6a47 	vmov.f32	s13, s14
 8011974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011978:	ee77 7a45 	vsub.f32	s15, s14, s10
 801197c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011980:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8011984:	eef1 7ac7 	vsqrt.f32	s15, s14
 8011988:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801198c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011990:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011994:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8011998:	e789      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 801199a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801199e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80119a2:	edd4 7a05 	vldr	s15, [r4, #20]
 80119a6:	eef1 6ac7 	vsqrt.f32	s13, s14
 80119aa:	ed84 7a07 	vstr	s14, [r4, #28]
 80119ae:	6263      	str	r3, [r4, #36]	; 0x24
 80119b0:	ee27 6a27 	vmul.f32	s12, s14, s15
 80119b4:	ed84 6a08 	vstr	s12, [r4, #32]
 80119b8:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80119bc:	ee80 8a07 	vdiv.f32	s16, s0, s14
 80119c0:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80119c4:	e773      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 80119c6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80119ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80119ce:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80119d2:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80119d6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80119da:	61e3      	str	r3, [r4, #28]
 80119dc:	ee27 6a27 	vmul.f32	s12, s14, s15
 80119e0:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80119e4:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80119e8:	ee20 8a07 	vmul.f32	s16, s0, s14
 80119ec:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80119f0:	e75d      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
 80119f2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80119f6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80119fa:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80119fe:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8011ab8 <tVZFilter_calcCoeffs+0x26c>
 8011a02:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 8011a06:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a0e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011a12:	f002 fbb9 	bl	8014188 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011a16:	eddf 0a28 	vldr	s1, [pc, #160]	; 8011ab8 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011a1a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011a1e:	eeb0 0a68 	vmov.f32	s0, s17
 8011a22:	f002 fbb5 	bl	8014190 <minimum>
            f->cB = 1.0f-x*x;
 8011a26:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a2a:	edd4 7a05 	vldr	s15, [r4, #20]
 8011a2e:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8011a32:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a36:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011a3a:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011a3e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a42:	ee76 5a06 	vadd.f32	s11, s12, s12
 8011a46:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011a4a:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a4e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011a52:	eee0 7a00 	vfma.f32	s15, s0, s0
 8011a56:	eee0 7a65 	vfms.f32	s15, s0, s11
 8011a5a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8011a5e:	f001 ff4f 	bl	8013900 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011a62:	edd4 5a07 	vldr	s11, [r4, #28]
 8011a66:	ed94 6a08 	vldr	s12, [r4, #32]
 8011a6a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8011a6e:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a72:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8011a76:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011a7a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011a7e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8011a82:	ee26 6a00 	vmul.f32	s12, s12, s0
 8011a86:	ee66 6a80 	vmul.f32	s13, s13, s0
 8011a8a:	edc4 5a07 	vstr	s11, [r4, #28]
 8011a8e:	ed84 6a08 	vstr	s12, [r4, #32]
 8011a92:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8011a96:	e70a      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8011a98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8011a9c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8011aa0:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8011aa2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8011aa6:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8011aaa:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011aac:	e6ff      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011aae:	edd4 7a05 	vldr	s15, [r4, #20]
 8011ab2:	e6fc      	b.n	80118ae <tVZFilter_calcCoeffs+0x62>
 8011ab4:	40490fdb 	.word	0x40490fdb
 8011ab8:	00000000 	.word	0x00000000

08011abc <tVZFilter_initToPool>:
{
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8011ac4:	6816      	ldr	r6, [r2, #0]
{
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	4605      	mov	r5, r0
 8011aca:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011acc:	2054      	movs	r0, #84	; 0x54
 8011ace:	4631      	mov	r1, r6
{
 8011ad0:	eef0 8a60 	vmov.f32	s17, s1
 8011ad4:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011ad8:	f002 fb78 	bl	80141cc <mpool_alloc>
 8011adc:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011ade:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011ae0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8011ae4:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011ae6:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011ae8:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8011c08 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
 8011aec:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011af0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011af4:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8011af8:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011afc:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8011b00:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b02:	ed9f 9a42 	vldr	s18, [pc, #264]	; 8011c0c <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
 8011b06:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011b08:	f002 f85e 	bl	8013bc8 <LEAF_clip>
 8011b0c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 8011b10:	f002 fad8 	bl	80140c4 <ftom>
    f->invG = 1.414213562373095f;
 8011b14:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8011c10 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b18:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8011b1c:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8011b20:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
 8011b24:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b28:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
 8011b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
 8011b30:	4b38      	ldr	r3, [pc, #224]	; (8011c14 <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
 8011b32:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
 8011b36:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b38:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
 8011b3c:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8011b40:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
 8011b44:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
 8011b46:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8011b4a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8011b4e:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8011b52:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8011b56:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b5a:	f007 fd2b 	bl	80195b4 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011b5e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8011c18 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011b62:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011b66:	eef0 0a68 	vmov.f32	s1, s17
 8011b6a:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8011b6e:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011b72:	f002 f829 	bl	8013bc8 <LEAF_clip>
 8011b76:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8011b7a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011b7e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011b82:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
 8011b86:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8011b88:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011b8c:	f007 fb30 	bl	80191f0 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011b90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011b94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b9c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011ba0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011ba4:	f007 fd06 	bl	80195b4 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8011ba8:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8011bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8011bb0:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8011bb2:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8011bb6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8011bba:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011bce:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8011bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011bd6:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
 8011bda:	f7ff fe37 	bl	801184c <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8011bde:	4628      	mov	r0, r5
 8011be0:	f7ff fe34 	bl	801184c <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 8011be4:	ed96 7a00 	vldr	s14, [r6]
 8011be8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011c1c <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
 8011bec:	4a0c      	ldr	r2, [pc, #48]	; (8011c20 <tVZFilter_initToPool+0x164>)
 8011bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bf2:	4b0c      	ldr	r3, [pc, #48]	; (8011c24 <tVZFilter_initToPool+0x168>)
 8011bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf8:	bfd8      	it	le
 8011bfa:	4613      	movle	r3, r2
 8011bfc:	6523      	str	r3, [r4, #80]	; 0x50
}
 8011bfe:	b002      	add	sp, #8
 8011c00:	ecbd 8b04 	vpop	{d8-d9}
 8011c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	40490fdb 	.word	0x40490fdb
 8011c10:	3fb504f3 	.word	0x3fb504f3
 8011c14:	3f3504f3 	.word	0x3f3504f3
 8011c18:	42c80000 	.word	0x42c80000
 8011c1c:	47afc800 	.word	0x47afc800
 8011c20:	0801c030 	.word	0x0801c030
 8011c24:	08020030 	.word	0x08020030

08011c28 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8011c28:	3218      	adds	r2, #24
 8011c2a:	f7ff bf47 	b.w	8011abc <tVZFilter_initToPool>
 8011c2e:	bf00      	nop

08011c30 <tVZFilter_setFreq>:
{
 8011c30:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 8011c32:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011c34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8011c38:	4604      	mov	r4, r0
 8011c3a:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011c3e:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 8011c42:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8011c5c <tVZFilter_setFreq+0x2c>
 8011c46:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011c4a:	f001 ffbd 	bl	8013bc8 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 8011c4e:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011c50:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 8011c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011c58:	f7ff bdf8 	b.w	801184c <tVZFilter_calcCoeffs>
 8011c5c:	00000000 	.word	0x00000000

08011c60 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
 8011c60:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8011f28 <tVZFilter_setFreqFast+0x2c8>
 8011c64:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
 8011c6c:	ee20 7a07 	vmul.f32	s14, s0, s14
{
 8011c70:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
 8011c72:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
 8011c76:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011c78:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
 8011c7c:	ee17 3a90 	vmov	r3, s15
 8011c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c84:	4563      	cmp	r3, ip
 8011c86:	bfa8      	it	ge
 8011c88:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011c8a:	ee07 3a90 	vmov	s15, r3
{
 8011c8e:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011c92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011c96:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
 8011c98:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011c9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
 8011ca0:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011ca2:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011ca6:	ed93 5a01 	vldr	s10, [r3, #4]
 8011caa:	ee36 7a86 	vadd.f32	s14, s13, s12
 8011cae:	edd3 5a00 	vldr	s11, [r3]
 8011cb2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011cb6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011cba:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 8011cbe:	290a      	cmp	r1, #10
 8011cc0:	f200 812f 	bhi.w	8011f22 <tVZFilter_setFreqFast+0x2c2>
 8011cc4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8011cc8:	002f0026 	.word	0x002f0026
 8011ccc:	00410038 	.word	0x00410038
 8011cd0:	0056004d 	.word	0x0056004d
 8011cd4:	00b5009b 	.word	0x00b5009b
 8011cd8:	012200cf 	.word	0x012200cf
 8011cdc:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8011cde:	ed94 7a05 	vldr	s14, [r4, #20]
 8011ce2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011ce6:	eef1 6a47 	vneg.f32	s13, s14
 8011cea:	61e3      	str	r3, [r4, #28]
 8011cec:	6263      	str	r3, [r4, #36]	; 0x24
 8011cee:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8011cf2:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8011cfa:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011cfe:	eef0 6a47 	vmov.f32	s13, s14
 8011d02:	eee0 6a27 	vfma.f32	s13, s0, s15
 8011d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d0a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8011d0e:	ecbd 8b02 	vpop	{d8}
 8011d12:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d14:	2300      	movs	r3, #0
 8011d16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d1a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d1e:	61e3      	str	r3, [r4, #28]
 8011d20:	6223      	str	r3, [r4, #32]
 8011d22:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8011d24:	e7e5      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011d26:	2300      	movs	r3, #0
 8011d28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d2c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011d30:	6223      	str	r3, [r4, #32]
 8011d32:	6263      	str	r3, [r4, #36]	; 0x24
 8011d34:	61e2      	str	r2, [r4, #28]
            break;
 8011d36:	e7dc      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d3e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011d42:	61e3      	str	r3, [r4, #28]
 8011d44:	6263      	str	r3, [r4, #36]	; 0x24
 8011d46:	6222      	str	r2, [r4, #32]
            break;
 8011d48:	e7d3      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d4a:	ed94 7a05 	vldr	s14, [r4, #20]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011d54:	61e3      	str	r3, [r4, #28]
 8011d56:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011d5a:	6263      	str	r3, [r4, #36]	; 0x24
 8011d5c:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011d60:	e7c7      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011d66:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d68:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d6c:	6222      	str	r2, [r4, #32]
 8011d6e:	61e3      	str	r3, [r4, #28]
 8011d70:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011d72:	e7be      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011d74:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011d78:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011d7c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011d80:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011d84:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011d88:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011d8c:	f001 fe8e 	bl	8013aac <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011d90:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8011d94:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011f2c <tVZFilter_setFreqFast+0x2cc>
 8011d98:	ee28 8a07 	vmul.f32	s16, s16, s14
 8011d9c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011da0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011da4:	f001 fd5e 	bl	8013864 <fastertanf>
            Lfloat r  = f->g/wl;
 8011da8:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011dac:	eeb0 5a68 	vmov.f32	s10, s17
 8011db0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
 8011db4:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011db8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011dbc:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011dc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011dc4:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8011dc8:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8011dcc:	ee77 7a65 	vsub.f32	s15, s14, s11
 8011dd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011dd4:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8011dd8:	f001 fd92 	bl	8013900 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011ddc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 8011de0:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011de4:	edc4 8a07 	vstr	s17, [r4, #28]
 8011de8:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011dec:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011df0:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011df4:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011df8:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011dfc:	e779      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 8011dfe:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8011e02:	f001 fd7d 	bl	8013900 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e06:	f001 fd7b 	bl	8013900 <fastsqrtf>
 8011e0a:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011e0e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e16:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011e1a:	ed94 7a05 	vldr	s14, [r4, #20]
 8011e1e:	edc4 6a07 	vstr	s13, [r4, #28]
 8011e22:	6263      	str	r3, [r4, #36]	; 0x24
 8011e24:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011e28:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e2c:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 8011e30:	e75f      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 8011e32:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8011e36:	f001 fd63 	bl	8013900 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e3a:	f001 fd61 	bl	8013900 <fastsqrtf>
 8011e3e:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011e42:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011e46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011e4a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e4e:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011e52:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8011e56:	ee67 6a26 	vmul.f32	s13, s14, s13
 8011e5a:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e5c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011e60:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011e64:	e745      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
 8011e66:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e6a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011e6e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e72:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8011f30 <tVZFilter_setFreqFast+0x2d0>
 8011e76:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 8011e7a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e7e:	eeb0 0a48 	vmov.f32	s0, s16
 8011e82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011e86:	f002 f97f 	bl	8014188 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011e8a:	eddf 0a29 	vldr	s1, [pc, #164]	; 8011f30 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e8e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011e92:	eeb0 0a68 	vmov.f32	s0, s17
 8011e96:	f002 f97b 	bl	8014190 <minimum>
            f->cB = 1.0f-x*x;
 8011e9a:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011e9e:	edd4 7a05 	vldr	s15, [r4, #20]
 8011ea2:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8011ea6:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011eaa:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011eae:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011eb2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011eb6:	ee76 5a06 	vadd.f32	s11, s12, s12
 8011eba:	ee38 8a08 	vadd.f32	s16, s16, s16
 8011ebe:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011ec2:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011ec6:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011eca:	eee0 7a00 	vfma.f32	s15, s0, s0
 8011ece:	eee0 7a65 	vfms.f32	s15, s0, s11
 8011ed2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8011ed6:	f001 fd13 	bl	8013900 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011eda:	edd4 5a07 	vldr	s11, [r4, #28]
 8011ede:	ed94 6a08 	vldr	s12, [r4, #32]
 8011ee2:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8011ee6:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011eea:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 8011eee:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011ef2:	ee65 5a80 	vmul.f32	s11, s11, s0
 8011ef6:	ee26 6a00 	vmul.f32	s12, s12, s0
 8011efa:	ee66 6a80 	vmul.f32	s13, s13, s0
 8011efe:	edc4 5a07 	vstr	s11, [r4, #28]
 8011f02:	ed84 6a08 	vstr	s12, [r4, #32]
 8011f06:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8011f0a:	e6f2      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
 8011f0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8011f10:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8011f14:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8011f16:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8011f1a:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 8011f1e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011f20:	e6e7      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011f22:	ed94 7a05 	vldr	s14, [r4, #20]
 8011f26:	e6e4      	b.n	8011cf2 <tVZFilter_setFreqFast+0x92>
 8011f28:	41f4898d 	.word	0x41f4898d
 8011f2c:	40490fdb 	.word	0x40490fdb
 8011f30:	00000000 	.word	0x00000000

08011f34 <tVZFilter_setGain>:
{
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011f3a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8011f64 <tVZFilter_setGain+0x30>
 8011f3e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011f68 <tVZFilter_setGain+0x34>
{
 8011f42:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8011f44:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011f46:	f001 fe3f 	bl	8013bc8 <LEAF_clip>
    f->invG = 1.0f/f->G;
 8011f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8011f4e:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011f50:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 8011f54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f58:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 8011f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011f60:	f7ff bc74 	b.w	801184c <tVZFilter_calcCoeffs>
 8011f64:	457a0000 	.word	0x457a0000
 8011f68:	358637bd 	.word	0x358637bd

08011f6c <tVZFilter_setResonance>:
{
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011f72:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8011f9c <tVZFilter_setResonance+0x30>
 8011f76:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011fa0 <tVZFilter_setResonance+0x34>
{
 8011f7a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8011f7c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011f7e:	f001 fe23 	bl	8013bc8 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8011f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8011f86:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011f88:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 8011f8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f90:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8011f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011f98:	f7ff bc58 	b.w	801184c <tVZFilter_calcCoeffs>
 8011f9c:	42c80000 	.word	0x42c80000
 8011fa0:	3c23d70a 	.word	0x3c23d70a

08011fa4 <tVZFilter_setFrequencyAndResonance>:
{
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 8011faa:	6804      	ldr	r4, [r0, #0]
{
 8011fac:	eeb0 8a60 	vmov.f32	s16, s1
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 8011fb0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012000 <tVZFilter_setFrequencyAndResonance+0x5c>
 8011fb4:	eef0 0a40 	vmov.f32	s1, s0
 8011fb8:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
{
 8011fbc:	4605      	mov	r5, r0
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 8011fbe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8012004 <tVZFilter_setFrequencyAndResonance+0x60>
 8011fc2:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011fc6:	f001 fdff 	bl	8013bc8 <LEAF_clip>
 8011fca:	eef0 7a40 	vmov.f32	s15, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011fce:	eef0 0a48 	vmov.f32	s1, s16
 8011fd2:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8012008 <tVZFilter_setFrequencyAndResonance+0x64>
 8011fd6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801200c <tVZFilter_setFrequencyAndResonance+0x68>
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 8011fda:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011fde:	f001 fdf3 	bl	8013bc8 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8011fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011fe6:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    tVZFilter_calcCoeffs(vf);
 8011fea:	4628      	mov	r0, r5
    f->R2 = 1.0f / f->Q;
 8011fec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011ff0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8011ff4:	ecbd 8b02 	vpop	{d8}
 8011ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011ffc:	f7ff bc26 	b.w	801184c <tVZFilter_calcCoeffs>
 8012000:	3ecccccd 	.word	0x3ecccccd
 8012004:	3dcccccd 	.word	0x3dcccccd
 8012008:	42c80000 	.word	0x42c80000
 801200c:	3c23d70a 	.word	0x3c23d70a

08012010 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8012010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8012014:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801203c <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012018:	4909      	ldr	r1, [pc, #36]	; (8012040 <tVZFilter_setSampleRate+0x30>)
 801201a:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
 801201e:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
 8012020:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
 8012024:	4a07      	ldr	r2, [pc, #28]	; (8012044 <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
 8012026:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
 801202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202e:	bfd8      	it	le
 8012030:	460a      	movle	r2, r1
 8012032:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
 8012034:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
 8012038:	4770      	bx	lr
 801203a:	bf00      	nop
 801203c:	47afc800 	.word	0x47afc800
 8012040:	0801c030 	.word	0x0801c030
 8012044:	08020030 	.word	0x08020030

08012048 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801204e:	680d      	ldr	r5, [r1, #0]
{
 8012050:	b082      	sub	sp, #8
 8012052:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012054:	2048      	movs	r0, #72	; 0x48
 8012056:	4629      	mov	r1, r5
{
 8012058:	eef0 8a60 	vmov.f32	s17, s1
 801205c:	eeb0 9a41 	vmov.f32	s18, s2
 8012060:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012064:	f002 f8b2 	bl	80141cc <mpool_alloc>
 8012068:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801206a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801206c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012070:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012072:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012074:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012154 <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012078:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 801207c:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012080:	eddf 9a35 	vldr	s19, [pc, #212]	; 8012158 <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012088:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801208c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012090:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012094:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8012098:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 801209c:	686b      	ldr	r3, [r5, #4]
 801209e:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80120a0:	f001 fd92 	bl	8013bc8 <LEAF_clip>
 80120a4:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80120a8:	f002 f80c 	bl	80140c4 <ftom>
    f->R2 =    1.0f/Q;
 80120ac:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80120b0:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 80120b4:	edd4 7a06 	vldr	s15, [r4, #24]
 80120b8:	eddf 6a28 	vldr	s13, [pc, #160]	; 801215c <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
 80120bc:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80120c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 80120c4:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
 80120c8:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80120cc:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80120d0:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 80120d4:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80120d8:	f007 fa6c 	bl	80195b4 <tanf>
 80120dc:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80120e0:	eef0 0a49 	vmov.f32	s1, s18
 80120e4:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8012160 <tVZFilterLS_initToPool+0x118>
 80120e8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8012164 <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80120ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80120f0:	f001 fd6a 	bl	8013bc8 <LEAF_clip>
 80120f4:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80120f8:	f001 fc02 	bl	8013900 <fastsqrtf>
 80120fc:	f001 fc00 	bl	8013900 <fastsqrtf>
 8012100:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012104:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012108:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 801210c:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012168 <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012110:	4a16      	ldr	r2, [pc, #88]	; (801216c <tVZFilterLS_initToPool+0x124>)
 8012112:	4b17      	ldr	r3, [pc, #92]	; (8012170 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012114:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8012118:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801211c:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012120:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012124:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012128:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 801212c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012130:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012134:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8012138:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 801213c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012144:	bfd8      	it	le
 8012146:	4613      	movle	r3, r2
 8012148:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 801214a:	b002      	add	sp, #8
 801214c:	ecbd 8b04 	vpop	{d8-d9}
 8012150:	bd70      	pop	{r4, r5, r6, pc}
 8012152:	bf00      	nop
 8012154:	473b8000 	.word	0x473b8000
 8012158:	00000000 	.word	0x00000000
 801215c:	40490fdb 	.word	0x40490fdb
 8012160:	457a0000 	.word	0x457a0000
 8012164:	358637bd 	.word	0x358637bd
 8012168:	47afc800 	.word	0x47afc800
 801216c:	0801c030 	.word	0x0801c030
 8012170:	08020030 	.word	0x08020030

08012174 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8012174:	3118      	adds	r1, #24
 8012176:	f7ff bf67 	b.w	8012048 <tVZFilterLS_initToPool>
 801217a:	bf00      	nop

0801217c <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 801217c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012180:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80121b4 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012184:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80121b8 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 8012188:	490c      	ldr	r1, [pc, #48]	; (80121bc <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801218a:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
 801218e:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
 8012190:	4a0b      	ldr	r2, [pc, #44]	; (80121c0 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012192:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012196:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
 801219a:	eeb4 0ae6 	vcmpe.f32	s0, s13
 801219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a2:	bfd8      	it	le
 80121a4:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 80121a6:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80121aa:	641a      	str	r2, [r3, #64]	; 0x40
 80121ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop
 80121b4:	473b8000 	.word	0x473b8000
 80121b8:	47afc800 	.word	0x47afc800
 80121bc:	0801c030 	.word	0x0801c030
 80121c0:	08020030 	.word	0x08020030

080121c4 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 80121c4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80121c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80121ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80121ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121d2:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 80121d6:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80121da:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80121de:	eea5 0a47 	vfms.f32	s0, s10, s14
 80121e2:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
 80121e6:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80121ea:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
 80121ee:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
 80121f2:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80121f6:	eeb0 5a47 	vmov.f32	s10, s14
 80121fa:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 80121fe:	eef0 5a67 	vmov.f32	s11, s15
 8012202:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012206:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801220a:	ed83 5a01 	vstr	s10, [r3, #4]
}
 801220e:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012212:	edc3 5a02 	vstr	s11, [r3, #8]
}
 8012216:	4770      	bx	lr

08012218 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8012218:	eddf 7a21 	vldr	s15, [pc, #132]	; 80122a0 <tVZFilterLS_setFreqFast+0x88>
 801221c:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012220:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 8012224:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 8012226:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801222a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801222c:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 8012230:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 8012234:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012238:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801223c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 8012240:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
 8012244:	edd3 6a04 	vldr	s13, [r3, #16]
 8012248:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801224c:	4562      	cmp	r2, ip
 801224e:	bfa8      	it	ge
 8012250:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012252:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012256:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801225a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801225e:	ed92 4a01 	vldr	s8, [r2, #4]
 8012262:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012266:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801226a:	ee75 5a85 	vadd.f32	s11, s11, s10
 801226e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012272:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012276:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801227a:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801227e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012282:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012286:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801228a:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 801228e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012292:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012296:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801229a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 801229e:	4770      	bx	lr
 80122a0:	41f4898d 	.word	0x41f4898d

080122a4 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 80122a4:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
 80122a6:	6804      	ldr	r4, [r0, #0]
{
 80122a8:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80122ac:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80122fc <tVZFilterLS_setGain+0x58>
 80122b0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012300 <tVZFilterLS_setGain+0x5c>
 80122b4:	f001 fc88 	bl	8013bc8 <LEAF_clip>
 80122b8:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80122bc:	f001 fb20 	bl	8013900 <fastsqrtf>
 80122c0:	f001 fb1e 	bl	8013900 <fastsqrtf>
 80122c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80122c8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80122cc:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80122d0:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80122d4:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80122d8:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80122dc:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80122e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80122e4:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80122e8:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80122ec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80122f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80122f4:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80122f8:	bd10      	pop	{r4, pc}
 80122fa:	bf00      	nop
 80122fc:	457a0000 	.word	0x457a0000
 8012300:	358637bd 	.word	0x358637bd

08012304 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 8012304:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 8012308:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 801230a:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 801230e:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 8012312:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 8012316:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 801231a:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801231e:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 8012322:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012326:	eea6 6a87 	vfma.f32	s12, s13, s14
 801232a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801232e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8012332:	4770      	bx	lr

08012334 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801233a:	680d      	ldr	r5, [r1, #0]
{
 801233c:	b082      	sub	sp, #8
 801233e:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8012340:	2048      	movs	r0, #72	; 0x48
 8012342:	4629      	mov	r1, r5
{
 8012344:	eeb0 8a60 	vmov.f32	s16, s1
 8012348:	eeb0 9a41 	vmov.f32	s18, s2
 801234c:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8012350:	f001 ff3c 	bl	80141cc <mpool_alloc>
 8012354:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8012356:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012358:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 801235c:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 801235e:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012360:	eddf 6a36 	vldr	s13, [pc, #216]	; 801243c <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012364:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012368:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801236c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8012440 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012374:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 8012378:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801237a:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
 801237e:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012380:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012384:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8012388:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801238c:	f001 fc1c 	bl	8013bc8 <LEAF_clip>
 8012390:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012394:	f001 fe96 	bl	80140c4 <ftom>
    f->R2 =    1.0f/Q;
 8012398:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801239c:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 80123a0:	edd4 7a06 	vldr	s15, [r4, #24]
 80123a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012444 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
 80123a8:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80123ac:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 80123b0:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 80123b4:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80123b8:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80123bc:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 80123c0:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80123c4:	f007 f8f6 	bl	80195b4 <tanf>
 80123c8:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80123cc:	eef0 0a49 	vmov.f32	s1, s18
 80123d0:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8012448 <tVZFilterHS_initToPool+0x114>
 80123d4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801244c <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80123d8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80123dc:	f001 fbf4 	bl	8013bc8 <LEAF_clip>
 80123e0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 80123e4:	f001 fa8c 	bl	8013900 <fastsqrtf>
 80123e8:	f001 fa8a 	bl	8013900 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80123ec:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80123f0:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80123f4:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80123f8:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
 80123fc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8012450 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8012400:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012404:	4a13      	ldr	r2, [pc, #76]	; (8012454 <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
 8012406:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801240a:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
 801240e:	4b12      	ldr	r3, [pc, #72]	; (8012458 <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012410:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 8012414:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012418:	eec8 7a86 	vdiv.f32	s15, s17, s12
 801241c:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8012420:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012424:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242c:	bfd8      	it	le
 801242e:	4613      	movle	r3, r2
 8012430:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 8012432:	b002      	add	sp, #8
 8012434:	ecbd 8b04 	vpop	{d8-d9}
 8012438:	bd70      	pop	{r4, r5, r6, pc}
 801243a:	bf00      	nop
 801243c:	473b8000 	.word	0x473b8000
 8012440:	00000000 	.word	0x00000000
 8012444:	40490fdb 	.word	0x40490fdb
 8012448:	457a0000 	.word	0x457a0000
 801244c:	358637bd 	.word	0x358637bd
 8012450:	47afc800 	.word	0x47afc800
 8012454:	0801c030 	.word	0x0801c030
 8012458:	08020030 	.word	0x08020030

0801245c <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 801245c:	3118      	adds	r1, #24
 801245e:	f7ff bf69 	b.w	8012334 <tVZFilterHS_initToPool>
 8012462:	bf00      	nop

08012464 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012464:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012468:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 801249c <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
 801246c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80124a0 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012470:	490c      	ldr	r1, [pc, #48]	; (80124a4 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8012472:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
 8012476:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012478:	4a0b      	ldr	r2, [pc, #44]	; (80124a8 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 801247a:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801247e:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 8012482:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8012486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248a:	bfd8      	it	le
 801248c:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 801248e:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8012492:	641a      	str	r2, [r3, #64]	; 0x40
 8012494:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	473b8000 	.word	0x473b8000
 80124a0:	47afc800 	.word	0x47afc800
 80124a4:	0801c030 	.word	0x0801c030
 80124a8:	08020030 	.word	0x08020030

080124ac <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 80124ac:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80124ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80124b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80124b6:	ee70 7a66 	vsub.f32	s15, s0, s13
 80124ba:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 80124be:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80124c2:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80124c6:	eee4 7a47 	vfms.f32	s15, s8, s14
 80124ca:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
 80124ce:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80124d2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80124d6:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 80124da:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80124de:	eeb0 5a47 	vmov.f32	s10, s14
 80124e2:	eea6 5a27 	vfma.f32	s10, s12, s15
 80124e6:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
 80124ea:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 80124ee:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80124f2:	ed83 5a01 	vstr	s10, [r3, #4]
}
 80124f6:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 80124fa:	edc3 6a02 	vstr	s13, [r3, #8]
}
 80124fe:	4770      	bx	lr

08012500 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8012500:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012588 <tVZFilterHS_setFreqFast+0x88>
 8012504:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012508:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 801250c:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 801250e:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012512:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012514:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 8012518:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 801251c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012520:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012524:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 8012528:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
 801252c:	edd3 6a04 	vldr	s13, [r3, #16]
 8012530:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012534:	4562      	cmp	r2, ip
 8012536:	bfa8      	it	ge
 8012538:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801253a:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801253e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012542:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012546:	ed92 4a01 	vldr	s8, [r2, #4]
 801254a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801254e:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012552:	ee75 5a85 	vadd.f32	s11, s11, s10
 8012556:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801255a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801255e:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012562:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012566:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 801256a:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801256e:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012572:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 8012576:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801257a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801257e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012582:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8012586:	4770      	bx	lr
 8012588:	41f4898d 	.word	0x41f4898d

0801258c <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 801258c:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
 801258e:	6804      	ldr	r4, [r0, #0]
{
 8012590:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012594:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80125e0 <tVZFilterHS_setGain+0x54>
 8012598:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80125e4 <tVZFilterHS_setGain+0x58>
 801259c:	f001 fb14 	bl	8013bc8 <LEAF_clip>
 80125a0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 80125a4:	f001 f9ac 	bl	8013900 <fastsqrtf>
 80125a8:	f001 f9aa 	bl	8013900 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80125ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80125b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80125b4:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80125b8:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 80125bc:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80125c0:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80125c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80125c8:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80125cc:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80125d0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80125d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80125d8:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80125dc:	bd10      	pop	{r4, pc}
 80125de:	bf00      	nop
 80125e0:	457a0000 	.word	0x457a0000
 80125e4:	358637bd 	.word	0x358637bd

080125e8 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 80125e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 80125ec:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 80125ee:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 80125f2:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 80125f6:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 80125fa:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 80125fe:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012602:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 8012606:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801260a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801260e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012612:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8012616:	4770      	bx	lr

08012618 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 801261e:	680d      	ldr	r5, [r1, #0]
{
 8012620:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012622:	2040      	movs	r0, #64	; 0x40
{
 8012624:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012628:	4629      	mov	r1, r5
{
 801262a:	eef0 9a60 	vmov.f32	s19, s1
 801262e:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012632:	f001 fdcb 	bl	80141cc <mpool_alloc>
 8012636:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012638:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 801263c:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 801263e:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 8012640:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012642:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
 8012646:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012768 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801264a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 801264e:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012652:	ed9f 9a46 	vldr	s18, [pc, #280]	; 801276c <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 801265a:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 801265e:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012660:	eddf aa43 	vldr	s21, [pc, #268]	; 8012770 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
 8012664:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012666:	ee27 1a81 	vmul.f32	s2, s15, s2
 801266a:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
 801266e:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
 8012672:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012676:	f001 faa7 	bl	8013bc8 <LEAF_clip>
 801267a:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 801267e:	f001 fd21 	bl	80140c4 <ftom>
 8012682:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012686:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8012774 <tVZFilterBell_initToPool+0x15c>
 801268a:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
 801268e:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
 8012692:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
 8012696:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 801269a:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801269e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8012778 <tVZFilterBell_initToPool+0x160>
 80126a2:	f001 fa91 	bl	8013bc8 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
 80126a6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80126aa:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 80126ae:	ee28 0a27 	vmul.f32	s0, s16, s15
 80126b2:	f006 ff7f 	bl	80195b4 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126b6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 80126ba:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126be:	edd4 0a08 	vldr	s1, [r4, #32]
 80126c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80126c6:	ed94 8a06 	vldr	s16, [r4, #24]
 80126ca:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 80126ce:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126d2:	f001 f9eb 	bl	8013aac <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80126d6:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80126da:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80126de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80126e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80126e6:	f001 f8bd 	bl	8013864 <fastertanf>
    Lfloat r  = f->g/wl;
 80126ea:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80126ee:	eeb0 5a68 	vmov.f32	s10, s17
 80126f2:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 80126f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80126fa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80126fe:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012702:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012706:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 801270a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801270e:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012712:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012716:	ee67 7a86 	vmul.f32	s15, s15, s12
 801271a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 801271e:	f001 f8ef 	bl	8013900 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012722:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8012726:	eddf 6a15 	vldr	s13, [pc, #84]	; 801277c <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801272a:	4a15      	ldr	r2, [pc, #84]	; (8012780 <tVZFilterBell_initToPool+0x168>)
 801272c:	4b15      	ldr	r3, [pc, #84]	; (8012784 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801272e:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012732:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
 8012736:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801273a:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801273e:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012742:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012746:	eec8 7a86 	vdiv.f32	s15, s17, s12
 801274a:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 801274e:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012752:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801275a:	bfd8      	it	le
 801275c:	4613      	movle	r3, r2
 801275e:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 8012760:	ecbd 8b06 	vpop	{d8-d10}
 8012764:	bd70      	pop	{r4, r5, r6, pc}
 8012766:	bf00      	nop
 8012768:	473b8000 	.word	0x473b8000
 801276c:	00000000 	.word	0x00000000
 8012770:	40490fdb 	.word	0x40490fdb
 8012774:	457a0000 	.word	0x457a0000
 8012778:	358637bd 	.word	0x358637bd
 801277c:	47afc800 	.word	0x47afc800
 8012780:	0801c030 	.word	0x0801c030
 8012784:	08020030 	.word	0x08020030

08012788 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8012788:	3118      	adds	r1, #24
 801278a:	f7ff bf45 	b.w	8012618 <tVZFilterBell_initToPool>
 801278e:	bf00      	nop

08012790 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012790:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012794:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80127c8 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012798:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80127cc <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 801279c:	490c      	ldr	r1, [pc, #48]	; (80127d0 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801279e:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
 80127a2:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 80127a4:	4a0b      	ldr	r2, [pc, #44]	; (80127d4 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 80127a6:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 80127aa:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 80127ae:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80127b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b6:	bfd8      	it	le
 80127b8:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 80127ba:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 80127be:	639a      	str	r2, [r3, #56]	; 0x38
 80127c0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	473b8000 	.word	0x473b8000
 80127cc:	47afc800 	.word	0x47afc800
 80127d0:	0801c030 	.word	0x0801c030
 80127d4:	08020030 	.word	0x08020030

080127d8 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 80127d8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80127da:	edd3 6a02 	vldr	s13, [r3, #8]
 80127de:	ed93 7a01 	vldr	s14, [r3, #4]
 80127e2:	ee70 7a66 	vsub.f32	s15, s0, s13
 80127e6:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
 80127ea:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80127ee:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80127f2:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
 80127f6:	edd3 5a04 	vldr	s11, [r3, #16]
 80127fa:	edd3 4a07 	vldr	s9, [r3, #28]
 80127fe:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012802:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012806:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 801280a:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801280e:	eeb0 5a47 	vmov.f32	s10, s14
 8012812:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012816:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 801281a:	eef0 5a66 	vmov.f32	s11, s13
 801281e:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012822:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012826:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 801282a:	edc3 5a02 	vstr	s11, [r3, #8]
}
 801282e:	4770      	bx	lr

08012830 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 8012830:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012834:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8012838:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 801283c:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
 801283e:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012840:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8012844:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
 8012848:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801284c:	ed94 8a06 	vldr	s16, [r4, #24]
 8012850:	f001 f92c 	bl	8013aac <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012854:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012858:	eddf 7a17 	vldr	s15, [pc, #92]	; 80128b8 <tVZFilterBell_setBandwidth+0x88>
 801285c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8012860:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012864:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012868:	f000 fffc 	bl	8013864 <fastertanf>
    Lfloat r  = f->g/wl;
 801286c:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
 8012874:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012878:	ed94 0a07 	vldr	s0, [r4, #28]
 801287c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012880:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012884:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012888:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
 801288c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012890:	eef0 6a47 	vmov.f32	s13, s14
 8012894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012898:	ee77 7a65 	vsub.f32	s15, s14, s11
 801289c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80128a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80128a4:	f001 f82c 	bl	8013900 <fastsqrtf>
 80128a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128ac:	ed84 0a04 	vstr	s0, [r4, #16]
}
 80128b0:	ecbd 8b02 	vpop	{d8}
 80128b4:	bd10      	pop	{r4, pc}
 80128b6:	bf00      	nop
 80128b8:	40490fdb 	.word	0x40490fdb

080128bc <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 80128bc:	b510      	push	{r4, lr}
 80128be:	ed2d 8b02 	vpush	{d8}
 80128c2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8012970 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80128c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 80128ca:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 80128cc:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
 80128d0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
 80128d4:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 80128d8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80128dc:	f006 fe6a 	bl	80195b4 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80128e0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 80128e4:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80128e8:	edd4 0a08 	vldr	s1, [r4, #32]
 80128ec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80128f0:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 80128f4:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80128f8:	f001 f8d8 	bl	8013aac <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80128fc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012900:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012904:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012908:	f000 ffac 	bl	8013864 <fastertanf>
    Lfloat r  = f->g/wl;
 801290c:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012910:	eeb0 5a68 	vmov.f32	s10, s17
 8012914:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 8012918:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801291c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012920:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012924:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012928:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 801292c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012930:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012934:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012938:	ee67 7a86 	vmul.f32	s15, s15, s12
 801293c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012940:	f000 ffde 	bl	8013900 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012944:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012948:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801294c:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
 8012950:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012954:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012958:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 801295c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012960:	eec8 7aa6 	vdiv.f32	s15, s17, s13
 8012964:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012968:	ecbd 8b02 	vpop	{d8}
 801296c:	bd10      	pop	{r4, pc}
 801296e:	bf00      	nop
 8012970:	40490fdb 	.word	0x40490fdb

08012974 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8012974:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012a84 <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012978:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 801297c:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012980:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
 8012984:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012988:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
 801298c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
 8012990:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
 8012992:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
 8012994:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012998:	eeb0 7a67 	vmov.f32	s14, s15
 801299c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
 80129a0:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 80129a4:	ed94 6a08 	vldr	s12, [r4, #32]
 80129a8:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129aa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80129ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 80129b0:	eea6 7a26 	vfma.f32	s14, s12, s13
 80129b4:	bfa8      	it	ge
 80129b6:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129b8:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80129bc:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129c0:	ee38 6a67 	vsub.f32	s12, s16, s15
 80129c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
 80129c8:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80129cc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80129d0:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129d4:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
 80129d8:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129dc:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80129e0:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129e4:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
 80129e8:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129ec:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80129f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80129f4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80129f8:	4562      	cmp	r2, ip
 80129fa:	ee67 7a83 	vmul.f32	s15, s15, s6
 80129fe:	bfa8      	it	ge
 8012a00:	4662      	movge	r2, ip
 8012a02:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
 8012a06:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012a0a:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
 8012a0e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012a12:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012a16:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012a1a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012a1e:	ed93 6a00 	vldr	s12, [r3]
 8012a22:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012a26:	edd3 5a01 	vldr	s11, [r3, #4]
 8012a2a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012a2e:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
 8012a32:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012a36:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012a3a:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
 8012a3e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012a42:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8012a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a4a:	ee77 7a44 	vsub.f32	s15, s14, s8
 8012a4e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012a52:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012a56:	f000 ff53 	bl	8013900 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012a5a:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012a5e:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012a62:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012a66:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012a6a:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012a6e:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012a72:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012a76:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012a7a:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012a7e:	ecbd 8b02 	vpop	{d8}
 8012a82:	bd10      	pop	{r4, pc}
 8012a84:	41f4898d 	.word	0x41f4898d

08012a88 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 8012a88:	b510      	push	{r4, lr}
 8012a8a:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012a8e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 8012a92:	6804      	ldr	r4, [r0, #0]
{
 8012a94:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012a98:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8012afc <tVZFilterBell_setGain+0x74>
 8012a9c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012b00 <tVZFilterBell_setGain+0x78>
 8012aa0:	f001 f892 	bl	8013bc8 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012aa4:	eef0 5a48 	vmov.f32	s11, s16
 8012aa8:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012aac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8012ab0:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012ab4:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ab8:	eee7 5a07 	vfma.f32	s11, s14, s14
 8012abc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8012ac0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ac8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012acc:	f000 ff18 	bl	8013900 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012ad0:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ad4:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ad8:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012adc:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ae0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ae4:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012ae8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012aec:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012af0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012af4:	ecbd 8b02 	vpop	{d8}
 8012af8:	bd10      	pop	{r4, pc}
 8012afa:	bf00      	nop
 8012afc:	457a0000 	.word	0x457a0000
 8012b00:	358637bd 	.word	0x358637bd

08012b04 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8012b04:	b570      	push	{r4, r5, r6, lr}
 8012b06:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012b0a:	698d      	ldr	r5, [r1, #24]
{
 8012b0c:	eeb0 8a40 	vmov.f32	s16, s0
 8012b10:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012b12:	2048      	movs	r0, #72	; 0x48
 8012b14:	4629      	mov	r1, r5
{
 8012b16:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012b1a:	f001 fb57 	bl	80141cc <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012b1e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8012bbc <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012b22:	6030      	str	r0, [r6, #0]
 8012b24:	4604      	mov	r4, r0
    f->mempool = m;
 8012b26:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012b28:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
 8012b2c:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
 8012b2e:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
 8012b32:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012b36:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
 8012b3a:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012b3e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8012b42:	f006 fdcd 	bl	80196e0 <tan>
 8012b46:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
 8012b4a:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012b4e:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 8012b52:	f001 fab7 	bl	80140c4 <ftom>
    f->r = (7.f * resonance + 0.5f);
 8012b56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b5a:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8012b5e:	4b18      	ldr	r3, [pc, #96]	; (8012bc0 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8012b60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
 8012b64:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
 8012b66:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
 8012b6a:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
 8012b6c:	4b15      	ldr	r3, [pc, #84]	; (8012bc4 <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
 8012b6e:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
 8012b70:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
 8012b74:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
 8012b76:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
 8012b78:	4913      	ldr	r1, [pc, #76]	; (8012bc8 <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
 8012b7a:	4a14      	ldr	r2, [pc, #80]	; (8012bcc <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
 8012b7c:	4b14      	ldr	r3, [pc, #80]	; (8012bd0 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
 8012b7e:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8012b80:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
 8012b82:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 8012b84:	4a13      	ldr	r2, [pc, #76]	; (8012bd4 <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
 8012b86:	4b14      	ldr	r3, [pc, #80]	; (8012bd8 <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
 8012b88:	4914      	ldr	r1, [pc, #80]	; (8012bdc <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
 8012b8a:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 8012b8c:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
 8012b8e:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
 8012b92:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8012b96:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
 8012b9a:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
 8012b9c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012be0 <tDiodeFilter_init+0xdc>
 8012ba0:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012ba4:	4a0f      	ldr	r2, [pc, #60]	; (8012be4 <tDiodeFilter_init+0xe0>)
 8012ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012baa:	4b0f      	ldr	r3, [pc, #60]	; (8012be8 <tDiodeFilter_init+0xe4>)
 8012bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb0:	bfd8      	it	le
 8012bb2:	4613      	movle	r3, r2
 8012bb4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8012bb6:	ecbd 8b02 	vpop	{d8}
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
 8012bbc:	40490fdb 	.word	0x40490fdb
 8012bc0:	3feb020c 	.word	0x3feb020c
 8012bc4:	3f6b020c 	.word	0x3f6b020c
 8012bc8:	3f0b6efd 	.word	0x3f0b6efd
 8012bcc:	3e39e952 	.word	0x3e39e952
 8012bd0:	3c23d70a 	.word	0x3c23d70a
 8012bd4:	3cf5c28f 	.word	0x3cf5c28f
 8012bd8:	3d23d70a 	.word	0x3d23d70a
 8012bdc:	3ca3d70a 	.word	0x3ca3d70a
 8012be0:	47afc800 	.word	0x47afc800
 8012be4:	0801c030 	.word	0x0801c030
 8012be8:	08020030 	.word	0x08020030

08012bec <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 8012bec:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8012bee:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012bf0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012bf4:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
 8012bf8:	eddf 6aee 	vldr	s13, [pc, #952]	; 8012fb4 <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
 8012bfc:	eddf 5aee 	vldr	s11, [pc, #952]	; 8012fb8 <tDiodeFilter_tick+0x3cc>
{
 8012c00:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012c04:	ed94 4a03 	vldr	s8, [r4, #12]
{
 8012c08:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012c0c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8012c10:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012c14:	ee67 7a44 	vnmul.f32	s15, s14, s8
 8012c18:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8012c1c:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012c20:	ed94 2a02 	vldr	s4, [r4, #8]
 8012c24:	eee6 7a23 	vfma.f32	s15, s12, s7
 8012c28:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
 8012c2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012c30:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8012c34:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
 8012c38:	eef4 6a65 	vcmp.f32	s13, s11
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	f000 81aa 	beq.w	8012f98 <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012c44:	ed9f 6add 	vldr	s12, [pc, #884]	; 8012fbc <tDiodeFilter_tick+0x3d0>
 8012c48:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012c4c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012c50:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012c54:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012c58:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012c5c:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012c60:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012c64:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
 8012c68:	eddf 1ad4 	vldr	s3, [pc, #848]	; 8012fbc <tDiodeFilter_tick+0x3d0>
 8012c6c:	eddf 4ad4 	vldr	s9, [pc, #848]	; 8012fc0 <tDiodeFilter_tick+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012c70:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012c74:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012c78:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8012fb4 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012c7c:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012c80:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012c84:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 8012c88:	eddf 4acb 	vldr	s9, [pc, #812]	; 8012fb8 <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
 8012c8c:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012c90:	eef0 7a46 	vmov.f32	s15, s12
 8012c94:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8012fb4 <tDiodeFilter_tick+0x3c8>
 8012c98:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012c9c:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8012fbc <tDiodeFilter_tick+0x3d0>
 8012ca0:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ca8:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012cac:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
 8012cb0:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012cb4:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012cbc:	bf18      	it	ne
 8012cbe:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012cc2:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012cc6:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 8012cca:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8012fc0 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 8012cce:	bf08      	it	eq
 8012cd0:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012cd4:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012cd8:	ee36 5a85 	vadd.f32	s10, s13, s10
 8012cdc:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 8012ce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ce4:	eea6 8a85 	vfma.f32	s16, s13, s10
 8012ce8:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 8012fc0 <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012cec:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012cf0:	ee37 5a85 	vadd.f32	s10, s15, s10
 8012cf4:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
 8012cf8:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8012fb8 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012cfc:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 8012d00:	eeb4 6a65 	vcmp.f32	s12, s11
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d08:	bf18      	it	ne
 8012d0a:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d0e:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8012fbc <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012d12:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d16:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 8012d1a:	bf08      	it	eq
 8012d1c:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012d20:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d24:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
 8012d28:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 8012fb8 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d2c:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8012d30:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012d34:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d38:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d3c:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8012fb4 <tDiodeFilter_tick+0x3c8>
 8012d40:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d44:	eddf 2a9d 	vldr	s5, [pc, #628]	; 8012fbc <tDiodeFilter_tick+0x3d0>
 8012d48:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d4c:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8012d50:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012d54:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 8012d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d5c:	bf18      	it	ne
 8012d5e:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d62:	eddf 5a97 	vldr	s11, [pc, #604]	; 8012fc0 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 8012d66:	bf08      	it	eq
 8012d68:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012d6c:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d70:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012d74:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d78:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d7c:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8012fb4 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d80:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012d84:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d88:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8012d8c:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
 8012d90:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012d94:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012d98:	eddf 0a88 	vldr	s1, [pc, #544]	; 8012fbc <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012d9c:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8012da0:	eddf 1a85 	vldr	s3, [pc, #532]	; 8012fb8 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012da4:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
 8012da8:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012dac:	eddf 1a84 	vldr	s3, [pc, #528]	; 8012fc0 <tDiodeFilter_tick+0x3d4>
 8012db0:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
 8012db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8012db8:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012dbc:	bf14      	ite	ne
 8012dbe:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 8012dc2:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012dc6:	ee37 6a24 	vadd.f32	s12, s14, s9
 8012dca:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012dce:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012dd2:	ee73 2aa4 	vadd.f32	s5, s7, s9
 8012dd6:	ee74 0a81 	vadd.f32	s1, s9, s2
 8012dda:	ee72 2a81 	vadd.f32	s5, s5, s2
 8012dde:	eeb0 1a60 	vmov.f32	s2, s1
 8012de2:	eef0 0a61 	vmov.f32	s1, s3
 8012de6:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012dea:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012dee:	eea2 1aa6 	vfma.f32	s2, s5, s13
 8012df2:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012df6:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 8012dfa:	ee35 8a28 	vadd.f32	s16, s10, s17
 8012dfe:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012e02:	ee67 2a26 	vmul.f32	s5, s14, s13
 8012e06:	eee5 0a21 	vfma.f32	s1, s10, s3
 8012e0a:	eea1 6a27 	vfma.f32	s12, s2, s15
 8012e0e:	eeb0 1a47 	vmov.f32	s2, s14
 8012e12:	eea2 1aa1 	vfma.f32	s2, s5, s3
 8012e16:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8012e1a:	eee7 2a21 	vfma.f32	s5, s14, s3
 8012e1e:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8012e22:	eef0 2a41 	vmov.f32	s5, s2
 8012e26:	eeb0 1a42 	vmov.f32	s2, s4
 8012e2a:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012e2e:	eea4 1a03 	vfma.f32	s2, s8, s6
 8012e32:	eeb0 6a42 	vmov.f32	s12, s4
 8012e36:	eea5 6a21 	vfma.f32	s12, s10, s3
 8012e3a:	ee35 2a01 	vadd.f32	s4, s10, s2
 8012e3e:	ee35 1a29 	vadd.f32	s2, s10, s19
 8012e42:	eea2 8a26 	vfma.f32	s16, s4, s13
 8012e46:	ee35 2a21 	vadd.f32	s4, s10, s3
 8012e4a:	eea6 2a26 	vfma.f32	s4, s12, s13
 8012e4e:	eeb0 6a45 	vmov.f32	s12, s10
 8012e52:	eea8 2a27 	vfma.f32	s4, s16, s15
 8012e56:	ee21 8a26 	vmul.f32	s16, s2, s13
 8012e5a:	eee8 0a28 	vfma.f32	s1, s16, s17
 8012e5e:	eea8 6a21 	vfma.f32	s12, s16, s3
 8012e62:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8012e66:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8012e6a:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 8012e6e:	eeb4 6a42 	vcmp.f32	s12, s4
 8012e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8012e76:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012e7a:	bf14      	ite	ne
 8012e7c:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8012e80:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 8012fc4 <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8012e88:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
 8012e8c:	f000 808c 	beq.w	8012fa8 <tDiodeFilter_tick+0x3bc>
 8012e90:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012e94:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8012e98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea0:	d07d      	beq.n	8012f9e <tDiodeFilter_tick+0x3b2>
 8012ea2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8012ea6:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8012eaa:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 8012eae:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012eb2:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
 8012eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eba:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8012ebe:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
 8012ec2:	bf08      	it	eq
 8012ec4:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 8012fc4 <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012ec8:	ee31 1a25 	vadd.f32	s2, s2, s11
 8012ecc:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012ed0:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012ed4:	ee91 4a02 	vfnms.f32	s8, s2, s4
 8012ed8:	eeb0 1a40 	vmov.f32	s2, s0
 8012edc:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012ee0:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
 8012ee4:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012ee8:	ee92 4a86 	vfnms.f32	s8, s5, s12
 8012eec:	eea7 1a86 	vfma.f32	s2, s15, s12
 8012ef0:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8012ef4:	ee91 1aa2 	vfnms.f32	s2, s3, s5
 8012ef8:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012efc:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012f00:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012f04:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012f08:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012f0c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012f10:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012f14:	eee3 6a20 	vfma.f32	s13, s6, s1
 8012f18:	eeb0 4a46 	vmov.f32	s8, s12
 8012f1c:	eed2 1aa7 	vfnms.f32	s3, s5, s15
 8012f20:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012f24:	eea2 4ae7 	vfms.f32	s8, s5, s15
 8012f28:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
 8012f2c:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012f30:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012f34:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8012f38:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012f3c:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
 8012f40:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012f44:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8012f48:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
 8012f4c:	f006 fb5e 	bl	801960c <tanhf>
 8012f50:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8012f54:	eeb0 0a69 	vmov.f32	s0, s19
 8012f58:	f006 fb58 	bl	801960c <tanhf>
 8012f5c:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
 8012f60:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
 8012f64:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8012f68:	f006 fb50 	bl	801960c <tanhf>
 8012f6c:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
 8012f70:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
 8012f74:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8012f78:	f006 fb48 	bl	801960c <tanhf>
 8012f7c:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
 8012f80:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
 8012f84:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
 8012f88:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
 8012f8c:	ecbd 8b06 	vpop	{d8-d10}
 8012f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
 8012f94:	f006 bb3a 	b.w	801960c <tanhf>
    Lfloat output = 1.0f;
 8012f98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012f9c:	e656      	b.n	8012c4c <tDiodeFilter_tick+0x60>
 8012f9e:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8012fc8 <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
 8012fa2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012fc4 <tDiodeFilter_tick+0x3d8>
 8012fa6:	e780      	b.n	8012eaa <tDiodeFilter_tick+0x2be>
 8012fa8:	eddf 1a07 	vldr	s3, [pc, #28]	; 8012fc8 <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
 8012fac:	eddf 6a05 	vldr	s13, [pc, #20]	; 8012fc4 <tDiodeFilter_tick+0x3d8>
 8012fb0:	e772      	b.n	8012e98 <tDiodeFilter_tick+0x2ac>
 8012fb2:	bf00      	nop
 8012fb4:	43d20000 	.word	0x43d20000
 8012fb8:	c46c4000 	.word	0xc46c4000
 8012fbc:	446c4000 	.word	0x446c4000
 8012fc0:	42d20000 	.word	0x42d20000
 8012fc4:	358637bd 	.word	0x358637bd
 8012fc8:	3f800008 	.word	0x3f800008

08012fcc <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8012fcc:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8012fce:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012fd0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012fd4:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
 8012fd8:	ed9f 7aee 	vldr	s14, [pc, #952]	; 8013394 <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
 8012fdc:	eddf 5aee 	vldr	s11, [pc, #952]	; 8013398 <tDiodeFilter_tickEfficient+0x3cc>
{
 8012fe0:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012fe4:	ed94 5a03 	vldr	s10, [r4, #12]
{
 8012fe8:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012fec:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8012ff0:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012ff4:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 8012ff8:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8012ffc:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013000:	ed94 2a02 	vldr	s4, [r4, #8]
 8013004:	eee6 7a23 	vfma.f32	s15, s12, s7
 8013008:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
 801300c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013010:	eea7 7a84 	vfma.f32	s14, s15, s8
 8013014:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
 8013018:	eeb4 7a65 	vcmp.f32	s14, s11
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	f000 81aa 	beq.w	8013378 <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013024:	ed9f 6add 	vldr	s12, [pc, #884]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
 8013028:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801302c:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013030:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013034:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013038:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801303c:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013040:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013044:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
 8013048:	eddf 1ad4 	vldr	s3, [pc, #848]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
 801304c:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 80133a0 <tDiodeFilter_tickEfficient+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013050:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8013054:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013058:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8013394 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 801305c:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013060:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013064:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
 8013068:	ed9f 4acb 	vldr	s8, [pc, #812]	; 8013398 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
 801306c:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013070:	eef0 7a46 	vmov.f32	s15, s12
 8013074:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8013394 <tDiodeFilter_tickEfficient+0x3c8>
 8013078:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801307c:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
 8013080:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013088:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801308c:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
 8013090:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013094:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8013098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801309c:	bf18      	it	ne
 801309e:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80130a2:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80130a6:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 80130aa:	eddf 4abd 	vldr	s9, [pc, #756]	; 80133a0 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 80130ae:	bf08      	it	eq
 80130b0:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80130b4:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80130b8:	ee77 4a24 	vadd.f32	s9, s14, s9
 80130bc:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 80130c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 80130c4:	eee7 8a24 	vfma.f32	s17, s14, s9
 80130c8:	eddf 4ab5 	vldr	s9, [pc, #724]	; 80133a0 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130cc:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 80130d0:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80130d4:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
 80130d8:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8013398 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130dc:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 80130e0:	eeb4 6a65 	vcmp.f32	s12, s11
 80130e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130e8:	bf18      	it	ne
 80130ea:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 80130ee:	ed9f 1aab 	vldr	s2, [pc, #684]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80130f2:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
 80130f6:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 80130fa:	bf08      	it	eq
 80130fc:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013100:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013104:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 8013108:	eddf 4aa3 	vldr	s9, [pc, #652]	; 8013398 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801310c:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8013110:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013114:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8013118:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801311c:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8013394 <tDiodeFilter_tickEfficient+0x3c8>
 8013120:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013124:	eddf 2a9d 	vldr	s5, [pc, #628]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
 8013128:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801312c:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8013130:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013134:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 8013138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801313c:	bf18      	it	ne
 801313e:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013142:	eddf 5a97 	vldr	s11, [pc, #604]	; 80133a0 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 8013146:	bf08      	it	eq
 8013148:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801314c:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8013150:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013154:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013158:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801315c:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8013394 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013160:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013164:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013168:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801316c:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
 8013170:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013174:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013178:	eddf 0a88 	vldr	s1, [pc, #544]	; 801339c <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801317c:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8013180:	eddf 1a85 	vldr	s3, [pc, #532]	; 8013398 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013184:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
 8013188:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 801318c:	eddf 1a84 	vldr	s3, [pc, #528]	; 80133a0 <tDiodeFilter_tickEfficient+0x3d4>
 8013190:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
 8013194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8013198:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801319c:	bf14      	ite	ne
 801319e:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 80131a2:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131a6:	ee36 6a84 	vadd.f32	s12, s13, s8
 80131aa:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80131ae:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131b2:	ee70 2a04 	vadd.f32	s5, s0, s8
 80131b6:	ee74 0a01 	vadd.f32	s1, s8, s2
 80131ba:	ee72 2a81 	vadd.f32	s5, s5, s2
 80131be:	eeb0 1a60 	vmov.f32	s2, s1
 80131c2:	eef0 0a61 	vmov.f32	s1, s3
 80131c6:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80131ca:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131ce:	eea2 1a87 	vfma.f32	s2, s5, s14
 80131d2:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80131d6:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 80131da:	ee74 8a89 	vadd.f32	s17, s9, s18
 80131de:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131e2:	ee66 2a87 	vmul.f32	s5, s13, s14
 80131e6:	eee4 0aa1 	vfma.f32	s1, s9, s3
 80131ea:	eea1 6a27 	vfma.f32	s12, s2, s15
 80131ee:	eeb0 1a66 	vmov.f32	s2, s13
 80131f2:	eea2 1aa1 	vfma.f32	s2, s5, s3
 80131f6:	ee62 2a89 	vmul.f32	s5, s5, s18
 80131fa:	eee6 2aa1 	vfma.f32	s5, s13, s3
 80131fe:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8013202:	eef0 2a41 	vmov.f32	s5, s2
 8013206:	eeb0 1a42 	vmov.f32	s2, s4
 801320a:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801320e:	eea5 1a03 	vfma.f32	s2, s10, s6
 8013212:	eeb0 6a42 	vmov.f32	s12, s4
 8013216:	eea4 6aa1 	vfma.f32	s12, s9, s3
 801321a:	ee34 2a81 	vadd.f32	s4, s9, s2
 801321e:	ee34 1aa9 	vadd.f32	s2, s9, s19
 8013222:	eee2 8a07 	vfma.f32	s17, s4, s14
 8013226:	ee34 2aa1 	vadd.f32	s4, s9, s3
 801322a:	eea6 2a07 	vfma.f32	s4, s12, s14
 801322e:	eeb0 6a64 	vmov.f32	s12, s9
 8013232:	eea8 2aa7 	vfma.f32	s4, s17, s15
 8013236:	ee61 8a07 	vmul.f32	s17, s2, s14
 801323a:	eee8 0a89 	vfma.f32	s1, s17, s18
 801323e:	eea8 6aa1 	vfma.f32	s12, s17, s3
 8013242:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8013246:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 801324a:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 801324e:	eeb4 6a42 	vcmp.f32	s12, s4
 8013252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013256:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801325a:	bf14      	ite	ne
 801325c:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8013260:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 80133a4 <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
 8013264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013268:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
 801326c:	f000 808c 	beq.w	8013388 <tDiodeFilter_tickEfficient+0x3bc>
 8013270:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8013274:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013278:	eef5 7a40 	vcmp.f32	s15, #0.0
 801327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013280:	d07d      	beq.n	801337e <tDiodeFilter_tickEfficient+0x3b2>
 8013282:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013286:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 801328a:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 801328e:	eef0 0a48 	vmov.f32	s1, s16
 8013292:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
 8013296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
 801329a:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801329e:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
 80132a2:	bf08      	it	eq
 80132a4:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 80133a4 <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80132a8:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80132ac:	ee31 1a25 	vadd.f32	s2, s2, s11
 80132b0:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80132b4:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80132b8:	ee91 5a28 	vfnms.f32	s10, s2, s17
 80132bc:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80132c0:	eed2 1a06 	vfnms.f32	s3, s4, s12
 80132c4:	eeb0 2a63 	vmov.f32	s4, s7
 80132c8:	eea7 2a86 	vfma.f32	s4, s15, s12
 80132cc:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80132d0:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80132d4:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80132d8:	ee38 6ac6 	vsub.f32	s12, s17, s12
 80132dc:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80132e0:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80132e4:	eeb0 2a46 	vmov.f32	s4, s12
 80132e8:	eea4 6aa8 	vfma.f32	s12, s9, s17
 80132ec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80132f0:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80132f4:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80132f8:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80132fc:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013300:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013304:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013308:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801330c:	eeb0 7a45 	vmov.f32	s14, s10
 8013310:	ee92 5aa7 	vfnms.f32	s10, s5, s15
 8013314:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013318:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801331c:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013320:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013324:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
 8013328:	f000 fc7a 	bl	8013c20 <fast_tanh4>
 801332c:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
 8013330:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
 8013334:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 8013338:	f000 fc72 	bl	8013c20 <fast_tanh4>
 801333c:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
 8013340:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
 8013344:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 8013348:	f000 fc6a 	bl	8013c20 <fast_tanh4>
 801334c:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
 8013350:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
 8013354:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 8013358:	f000 fc62 	bl	8013c20 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
 801335c:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
 8013360:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8013364:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
 8013368:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
 801336c:	ecbd 8b04 	vpop	{d8-d9}
 8013370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
 8013374:	f000 bc54 	b.w	8013c20 <fast_tanh4>
    Lfloat output = 1.0f;
 8013378:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801337c:	e656      	b.n	801302c <tDiodeFilter_tickEfficient+0x60>
 801337e:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80133a8 <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
 8013382:	eddf 7a08 	vldr	s15, [pc, #32]	; 80133a4 <tDiodeFilter_tickEfficient+0x3d8>
 8013386:	e780      	b.n	801328a <tDiodeFilter_tickEfficient+0x2be>
 8013388:	eddf 2a07 	vldr	s5, [pc, #28]	; 80133a8 <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
 801338c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80133a4 <tDiodeFilter_tickEfficient+0x3d8>
 8013390:	e772      	b.n	8013278 <tDiodeFilter_tickEfficient+0x2ac>
 8013392:	bf00      	nop
 8013394:	43d20000 	.word	0x43d20000
 8013398:	c46c4000 	.word	0xc46c4000
 801339c:	446c4000 	.word	0x446c4000
 80133a0:	42d20000 	.word	0x42d20000
 80133a4:	358637bd 	.word	0x358637bd
 80133a8:	3f800008 	.word	0x3f800008

080133ac <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80133ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013404 <tDiodeFilter_setFreqFast+0x58>
 80133b0:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
 80133b4:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80133ba:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
 80133c0:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
 80133c4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133c8:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
 80133cc:	ee16 3a90 	vmov	r3, s13
 80133d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133d4:	4563      	cmp	r3, ip
 80133d6:	bfa8      	it	ge
 80133d8:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80133da:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80133e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133e6:	edd3 5a01 	vldr	s11, [r3, #4]
 80133ea:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80133ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80133f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80133f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80133fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80133fe:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8013402:	4770      	bx	lr
 8013404:	41f4898d 	.word	0x41f4898d

08013408 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013408:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801340c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8013410:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8013414:	eef0 0a67 	vmov.f32	s1, s15
{
 8013418:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 801341a:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 801341c:	eee0 0a07 	vfma.f32	s1, s0, s14
 8013420:	eeb0 0a67 	vmov.f32	s0, s15
 8013424:	f000 fbd0 	bl	8013bc8 <LEAF_clip>
 8013428:	ed84 0a03 	vstr	s0, [r4, #12]
}
 801342c:	bd10      	pop	{r4, pc}
 801342e:	bf00      	nop

08013430 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 8013430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8013434:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013458 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013438:	4908      	ldr	r1, [pc, #32]	; (801345c <tDiodeFilter_setSampleRate+0x2c>)
 801343a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801343e:	4b08      	ldr	r3, [pc, #32]	; (8013460 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8013440:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
 8013444:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 8013446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344a:	bfd8      	it	le
 801344c:	460b      	movle	r3, r1
 801344e:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
 8013450:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
 8013454:	4770      	bx	lr
 8013456:	bf00      	nop
 8013458:	47afc800 	.word	0x47afc800
 801345c:	0801c030 	.word	0x0801c030
 8013460:	08020030 	.word	0x08020030

08013464 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8013464:	b570      	push	{r4, r5, r6, lr}
 8013466:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 801346a:	698d      	ldr	r5, [r1, #24]
{
 801346c:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801346e:	2040      	movs	r0, #64	; 0x40
{
 8013470:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013474:	4629      	mov	r1, r5
{
 8013476:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801347a:	f000 fea7 	bl	80141cc <mpool_alloc>
 801347e:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8013480:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
 8013482:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8013486:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013488:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 801348a:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
 801348c:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
 8013490:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
 8013492:	f000 fe17 	bl	80140c4 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013496:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013508 <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
 801349a:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 801349e:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80134a0:	ee28 0a07 	vmul.f32	s0, s16, s14
 80134a4:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
 80134a8:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80134aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80134ae:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80134b2:	f006 f915 	bl	80196e0 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 80134b6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80134ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 80134be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 80134c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 80134c6:	4911      	ldr	r1, [pc, #68]	; (801350c <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
 80134c8:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
 80134cc:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
 80134ce:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 80134d2:	4b0f      	ldr	r3, [pc, #60]	; (8013510 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
 80134d4:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
 80134d6:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80134d8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
 80134dc:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
 80134de:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
 80134e2:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
 80134e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013514 <tLadderFilter_init+0xb0>
 80134ea:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80134ee:	4a0a      	ldr	r2, [pc, #40]	; (8013518 <tLadderFilter_init+0xb4>)
 80134f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134f4:	4b09      	ldr	r3, [pc, #36]	; (801351c <tLadderFilter_init+0xb8>)
 80134f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fa:	bfd8      	it	le
 80134fc:	4613      	movle	r3, r2
 80134fe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8013500:	ecbd 8b02 	vpop	{d8}
 8013504:	bd70      	pop	{r4, r5, r6, pc}
 8013506:	bf00      	nop
 8013508:	40490fdb 	.word	0x40490fdb
 801350c:	3dcccccd 	.word	0x3dcccccd
 8013510:	3d23d70a 	.word	0x3d23d70a
 8013514:	47afc800 	.word	0x47afc800
 8013518:	0801c030 	.word	0x0801c030
 801351c:	08020030 	.word	0x08020030

08013520 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
 8013520:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8013522:	eddf 7a90 	vldr	s15, [pc, #576]	; 8013764 <tLadderFilter_tick+0x244>
{
 8013526:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 801352a:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 801352c:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8013530:	2900      	cmp	r1, #0
 8013532:	f340 8112 	ble.w	801375a <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013536:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 801353a:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801353e:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013542:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8013546:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801354a:	ed92 7a08 	vldr	s14, [r2, #32]
 801354e:	ee72 2a27 	vadd.f32	s5, s4, s15
 8013552:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8013556:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801355a:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 801355e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013562:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8013566:	ee25 9a28 	vmul.f32	s18, s10, s17
 801356a:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801356e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8013572:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013576:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 801357a:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 801357c:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013580:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8013768 <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013584:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8013588:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 801358a:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 801358e:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 8013592:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013594:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013598:	ee26 6a06 	vmul.f32	s12, s12, s12
 801359c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80135a0:	ee22 baa5 	vmul.f32	s22, s5, s11
 80135a4:	ee26 ca22 	vmul.f32	s24, s12, s5
 80135a8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80135ac:	ee32 6a06 	vadd.f32	s12, s4, s12
 80135b0:	ee66 baa2 	vmul.f32	s23, s13, s5
 80135b4:	eecb ea25 	vdiv.f32	s29, s22, s11
 80135b8:	eecc 5a06 	vdiv.f32	s11, s24, s12
 80135bc:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80135c0:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80135c4:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 80135c8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80135cc:	ee77 eaee 	vsub.f32	s29, s15, s29
 80135d0:	ee77 6ae5 	vsub.f32	s13, s15, s11
 80135d4:	ee22 ba87 	vmul.f32	s22, s5, s14
 80135d8:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80135dc:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80135e0:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80135e4:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80135e8:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80135ec:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80135f0:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 80135f4:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 80135f8:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 80135fc:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013600:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013604:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013608:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 801360c:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013610:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013614:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8013618:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 801361c:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013620:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013624:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013628:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801362c:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 8013630:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
 8013634:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8013638:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801363c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013640:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013644:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013648:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 801364c:	ee65 5aae 	vmul.f32	s11, s11, s29
 8013650:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013654:	ee2c ca2c 	vmul.f32	s24, s24, s25
 8013658:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801365c:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013660:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8013664:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013668:	eeeb ca8e 	vfma.f32	s25, s23, s28
 801366c:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013670:	eec9 baac 	vdiv.f32	s23, s19, s25
 8013674:	eeed 5a04 	vfma.f32	s11, s26, s8
 8013678:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 801367c:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013680:	eeb0 da48 	vmov.f32	s26, s16
 8013684:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013688:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 801368c:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013690:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013694:	eef0 ca48 	vmov.f32	s25, s16
 8013698:	eeab da0b 	vfma.f32	s26, s22, s22
 801369c:	eee5 caa5 	vfma.f32	s25, s11, s11
 80136a0:	eef1 5acd 	vsqrt.f32	s11, s26
 80136a4:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80136a8:	ee3b ba65 	vsub.f32	s22, s22, s11
 80136ac:	eef0 5a40 	vmov.f32	s11, s0
 80136b0:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 80136b4:	eeb0 ba43 	vmov.f32	s22, s6
 80136b8:	eea5 ba25 	vfma.f32	s22, s10, s11
 80136bc:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80136c0:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 80136c4:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80136c8:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 80136cc:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80136d0:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80136d4:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80136d8:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 80136dc:	ee36 6a66 	vsub.f32	s12, s12, s13
 80136e0:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80136e4:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80136e8:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80136ec:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 80136f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80136f4:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80136f8:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 80136fc:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8013700:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8013704:	f47f af3e 	bne.w	8013584 <tLadderFilter_tick+0x64>
 8013708:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 801370c:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8013710:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8013714:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013718:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013768 <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 801371c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013720:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013724:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013728:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801372c:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013730:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013734:	eee0 7aa0 	vfma.f32	s15, s1, s1
 8013738:	eeb0 7a67 	vmov.f32	s14, s15
 801373c:	eef1 7ac5 	vsqrt.f32	s15, s10
 8013740:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
 8013744:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013748:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801374c:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
 8013750:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013754:	ecbd 8b10 	vpop	{d8-d15}
 8013758:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801375a:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
 801375e:	ed9f ca03 	vldr	s24, [pc, #12]	; 801376c <tLadderFilter_tick+0x24c>
 8013762:	e7d9      	b.n	8013718 <tLadderFilter_tick+0x1f8>
 8013764:	3c75c28f 	.word	0x3c75c28f
 8013768:	3c23d70a 	.word	0x3c23d70a
 801376c:	00000000 	.word	0x00000000

08013770 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8013770:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80137d0 <tLadderFilter_setFreqFast+0x60>
 8013774:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
 8013778:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
 801377e:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013782:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
 8013784:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
 8013788:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801378c:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
 8013790:	ee17 3a90 	vmov	r3, s15
 8013794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013798:	4563      	cmp	r3, ip
 801379a:	bfa8      	it	ge
 801379c:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801379e:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80137a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137aa:	ed93 5a01 	vldr	s10, [r3, #4]
 80137ae:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80137b2:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137b6:	ee36 7a86 	vadd.f32	s14, s13, s12
 80137ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80137be:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
 80137c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137c6:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 80137ca:	ed82 7a06 	vstr	s14, [r2, #24]
}
 80137ce:	4770      	bx	lr
 80137d0:	41f4898d 	.word	0x41f4898d

080137d4 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 80137d4:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 80137d6:	6804      	ldr	r4, [r0, #0]
{
 80137d8:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 80137dc:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80137e0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80137f0 <tLadderFilter_setQ+0x1c>
 80137e4:	f000 f9f0 	bl	8013bc8 <LEAF_clip>
 80137e8:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80137ec:	bd10      	pop	{r4, pc}
 80137ee:	bf00      	nop
 80137f0:	3e4ccccd 	.word	0x3e4ccccd

080137f4 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 80137f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 80137f8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801381c <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80137fc:	4908      	ldr	r1, [pc, #32]	; (8013820 <tLadderFilter_setSampleRate+0x2c>)
 80137fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013802:	4b08      	ldr	r3, [pc, #32]	; (8013824 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8013804:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
 8013808:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 801380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801380e:	bfd8      	it	le
 8013810:	460b      	movle	r3, r1
 8013812:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
 8013814:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
 8013818:	4770      	bx	lr
 801381a:	bf00      	nop
 801381c:	47afc800 	.word	0x47afc800
 8013820:	0801c030 	.word	0x0801c030
 8013824:	08020030 	.word	0x08020030

08013828 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8013828:	ee70 7a60 	vsub.f32	s15, s0, s1
 801382c:	ee31 1a60 	vsub.f32	s2, s2, s1
 8013830:	ee32 2a61 	vsub.f32	s4, s4, s3
 8013834:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
 8013838:	eee2 1a07 	vfma.f32	s3, s4, s14
 801383c:	eeb0 0a61 	vmov.f32	s0, s3
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop

08013844 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 8013844:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013848:	eee1 0a00 	vfma.f32	s1, s2, s0
 801384c:	eeb0 0a60 	vmov.f32	s0, s1
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop

08013854 <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
 8013854:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013858:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 801385c:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 8013864:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8013868:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8013884 <fastertanf+0x20>
 801386c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013888 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8013870:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8013874:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8013878:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 801387c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013880:	4770      	bx	lr
 8013882:	bf00      	nop
 8013884:	3e502de0 	.word	0x3e502de0
 8013888:	3ea295ea 	.word	0x3ea295ea

0801388c <my_faster_logf>:
/* natural log on [0x1.f7a5ecp-127, 0x1.fffffep127]. Maximum relative error 9.4529e-5 */
inline Lfloat my_faster_logf (Lfloat a)
{
 801388c:	b082      	sub	sp, #8
	Lfloat m, r, s, t, i, f;
    int32_t e;
    union unholy_t unholy;
    unholy.f = a;
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 801388e:	4915      	ldr	r1, [pc, #84]	; (80138e4 <my_faster_logf+0x58>)
 8013890:	4a15      	ldr	r2, [pc, #84]	; (80138e8 <my_faster_logf+0x5c>)
    union unholy_t unholy2;
    unholy2.i = (unholy.i - e);
    m = unholy2.f;
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
    /* m in [2/3, 4/3] */
    f = m - 1.0f;
 8013892:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
{
 8013896:	ed8d 0a01 	vstr	s0, [sp, #4]
    unholy.f = a;
 801389a:	9b01      	ldr	r3, [sp, #4]
    s = f * f;
    /* Compute log1p(f) for f in [-1/3, 1/3] */
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 801389c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80138ec <my_faster_logf+0x60>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 80138a0:	4419      	add	r1, r3
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80138a2:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80138f0 <my_faster_logf+0x64>
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80138a6:	eddf 6a13 	vldr	s13, [pc, #76]	; 80138f4 <my_faster_logf+0x68>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 80138aa:	400a      	ands	r2, r1
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80138ac:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80138f8 <my_faster_logf+0x6c>
    r = fmaf (r, s, t);
    r = fmaf (r, s, f);
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80138b0:	eddf 5a12 	vldr	s11, [pc, #72]	; 80138fc <my_faster_logf+0x70>
    unholy2.i = (unholy.i - e);
 80138b4:	1a9b      	subs	r3, r3, r2
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 80138b6:	ee07 2a90 	vmov	s15, r2
    unholy2.i = (unholy.i - e);
 80138ba:	ee00 3a10 	vmov	s0, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 80138be:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
    f = m - 1.0f;
 80138c2:	ee30 0a64 	vsub.f32	s0, s0, s9
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80138c6:	eee5 6a00 	vfma.f32	s13, s10, s0
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80138ca:	eea6 7a00 	vfma.f32	s14, s12, s0
    s = f * f;
 80138ce:	ee20 6a00 	vmul.f32	s12, s0, s0
    r = fmaf (r, s, t);
 80138d2:	eea6 7a86 	vfma.f32	s14, s13, s12
    r = fmaf (r, s, f);
 80138d6:	eea7 0a06 	vfma.f32	s0, s14, s12
    return r;
}
 80138da:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80138de:	b002      	add	sp, #8
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop
 80138e4:	c0d55555 	.word	0xc0d55555
 80138e8:	ff800000 	.word	0xff800000
 80138ec:	3e6c6078 	.word	0x3e6c6078
 80138f0:	3ea9e51a 	.word	0x3ea9e51a
 80138f4:	be8ef46d 	.word	0xbe8ef46d
 80138f8:	beff712d 	.word	0xbeff712d
 80138fc:	3f317218 	.word	0x3f317218

08013900 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013900:	ee10 2a10 	vmov	r2, s0
 8013904:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8013908:	4b0d      	ldr	r3, [pc, #52]	; (8013940 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 801390a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801390e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8013912:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013916:	ee00 3a10 	vmov	s0, r3
 801391a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801391e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8013922:	ee60 7a07 	vmul.f32	s15, s0, s14
 8013926:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 801392a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 801392e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8013932:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8013936:	336e      	adds	r3, #110	; 0x6e
}
 8013938:	ee00 3a10 	vmov	s0, r3
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	5f3759df 	.word	0x5f3759df

08013944 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8013944:	ee10 3a10 	vmov	r3, s0
 8013948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801394c:	ee00 3a10 	vmov	s0, r3
}
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop

08013954 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 8013954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013958:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013984 <fasterexpf+0x30>
 801395c:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8013960:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8013964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013968:	ee20 0a00 	vmul.f32	s0, s0, s0
 801396c:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8013970:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013974:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013978:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 801397c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop
 8013984:	3b800000 	.word	0x3b800000

08013988 <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013988:	eddf 7a10 	vldr	s15, [pc, #64]	; 80139cc <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 801398c:	f240 4cfd 	movw	ip, #1277	; 0x4fd
 8013990:	f643 11e9 	movw	r1, #14825	; 0x39e9
 8013994:	4b0e      	ldr	r3, [pc, #56]	; (80139d0 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013996:	ee20 0a27 	vmul.f32	s0, s0, s15
 801399a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801399e:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80139a2:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80139a6:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 80139aa:	fb0c fc00 	mul.w	ip, ip, r0
 80139ae:	eb01 31ac 	add.w	r1, r1, ip, asr #14
 80139b2:	fb00 f101 	mul.w	r1, r0, r1
 80139b6:	eb03 33a1 	add.w	r3, r3, r1, asr #14
 80139ba:	fb00 f303 	mul.w	r3, r0, r3
 80139be:	12db      	asrs	r3, r3, #11
 80139c0:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 80139c4:	4413      	add	r3, r2
 80139c6:	ee00 3a10 	vmov	s0, r3
}
 80139ca:	4770      	bx	lr
 80139cc:	4b38aa3b 	.word	0x4b38aa3b
 80139d0:	fffec87b 	.word	0xfffec87b

080139d4 <fastExp4>:

inline Lfloat fastExp4(Lfloat x)  // quartic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80139d4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013a20 <fastExp4+0x4c>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (1.21e-5):
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80139d8:	f640 5cd1 	movw	ip, #3537	; 0xdd1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 80139dc:	f243 5264 	movw	r2, #13668	; 0x3564
 80139e0:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80139e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80139e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80139ec:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80139f0:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80139f4:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80139f8:	fb0c fc00 	mul.w	ip, ip, r0
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 80139fc:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8013a00:	fb00 f202 	mul.w	r2, r0, r2
 8013a04:	eb01 41a2 	add.w	r1, r1, r2, asr #18
 8013a08:	4a06      	ldr	r2, [pc, #24]	; (8013a24 <fastExp4+0x50>)
 8013a0a:	fb00 f101 	mul.w	r1, r0, r1
 8013a0e:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 8013a12:	fb00 f202 	mul.w	r2, r0, r2
    return reinterpreter.f;
 8013a16:	eb03 23e2 	add.w	r3, r3, r2, asr #11
 8013a1a:	ee00 3a10 	vmov	s0, r3
}
 8013a1e:	4770      	bx	lr
 8013a20:	4b38aa3b 	.word	0x4b38aa3b
 8013a24:	fffec5aa 	.word	0xfffec5aa

08013a28 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8013a28:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8013aa0 <fast_sinf2+0x78>
 8013a2c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013a30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a34:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8013a38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a40:	d426      	bmi.n	8013a90 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 8013a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 8013a46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013a4a:	4a17      	ldr	r2, [pc, #92]	; (8013aa8 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
 8013a4c:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013a50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
 8013a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013a58:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
 8013a5c:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
 8013a5e:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013a62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
 8013a66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
 8013a6a:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013a6e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
 8013a72:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013a76:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013a7e:	ed93 7a00 	vldr	s14, [r3]
 8013a82:	ee20 0a06 	vmul.f32	s0, s0, s12
 8013a86:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
 8013a8a:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013a8e:	4770      	bx	lr
		x *= -1.0f;
 8013a90:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 8013a94:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8013a98:	e7d5      	b.n	8013a46 <fast_sinf2+0x1e>
 8013a9a:	bf00      	nop
 8013a9c:	f3af 8000 	nop.w
 8013aa0:	6dc9c883 	.word	0x6dc9c883
 8013aa4:	40745f30 	.word	0x40745f30
 8013aa8:	080240b0 	.word	0x080240b0

08013aac <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8013aac:	ee10 3a10 	vmov	r3, s0
 8013ab0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013ad4 <fastPowf+0x28>
 8013ab4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8013ab8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8013abc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8013ac0:	330b      	adds	r3, #11
 8013ac2:	ee07 3a90 	vmov	s15, r3
 8013ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013aca:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8013ace:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8013ad2:	4770      	bx	lr
 8013ad4:	4e7de250 	.word	0x4e7de250

08013ad8 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013ad8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013adc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013ae0:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013ae4:	ee37 0ac0 	vsub.f32	s0, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013ae8:	ee67 7a26 	vmul.f32	s15, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013aec:	ee20 0a26 	vmul.f32	s0, s0, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013af0:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013af4:	eef1 7ac0 	vsqrt.f32	s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013af8:	ed80 7a00 	vstr	s14, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013afc:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8013b00:	4770      	bx	lr
 8013b02:	bf00      	nop

08013b04 <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 8013b04:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013b80 <LEAF_shaper+0x7c>
 8013b08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	d406      	bmi.n	8013b20 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
 8013b12:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013b84 <LEAF_shaper+0x80>
 8013b16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1e:	dd02      	ble.n	8013b26 <LEAF_shaper+0x22>
 8013b20:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013b88 <LEAF_shaper+0x84>
}
 8013b24:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
 8013b26:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013b2a:	eddf 4a18 	vldr	s9, [pc, #96]	; 8013b8c <LEAF_shaper+0x88>
 8013b2e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013b32:	eddf 3a17 	vldr	s7, [pc, #92]	; 8013b90 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 8013b36:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
 8013b3a:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 8013b3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013b42:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013b46:	ee26 4a06 	vmul.f32	s8, s12, s12
 8013b4a:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
 8013b4e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013b52:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013b56:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013b5a:	ee70 0a85 	vadd.f32	s1, s1, s10
 8013b5e:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8013b94 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013b62:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8013b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b6a:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013b6e:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013b72:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8013b76:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
 8013b7a:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
 8013b7e:	4770      	bx	lr
 8013b80:	bfb504f3 	.word	0xbfb504f3
 8013b84:	3fb504f3 	.word	0x3fb504f3
 8013b88:	00000000 	.word	0x00000000
 8013b8c:	3c800000 	.word	0x3c800000
 8013b90:	3f272f05 	.word	0x3f272f05
 8013b94:	3d4ccccd 	.word	0x3d4ccccd

08013b98 <LEAF_round>:
    rnd = fabsf(rnd);
 8013b98:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8013b9c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013bb8 <LEAF_round+0x20>
 8013ba0:	eef4 0ae7 	vcmpe.f32	s1, s15
 8013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba8:	d905      	bls.n	8013bb6 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8013baa:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8013bae:	fef8 7a67 	vrinta.f32	s15, s15
 8013bb2:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8013bb6:	4770      	bx	lr
 8013bb8:	33d6bf95 	.word	0x33d6bf95

08013bbc <LEAF_bitwise_xor>:
    return unholy.f;
 8013bbc:	ee10 3a10 	vmov	r3, s0
 8013bc0:	4043      	eors	r3, r0
 8013bc2:	ee00 3a10 	vmov	s0, r3
}
 8013bc6:	4770      	bx	lr

08013bc8 <LEAF_clip>:
    if (val < min)
 8013bc8:	eef4 0ac0 	vcmpe.f32	s1, s0
 8013bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd0:	d401      	bmi.n	8013bd6 <LEAF_clip+0xe>
    else if (val > max)
 8013bd2:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
 8013bd6:	4770      	bx	lr

08013bd8 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 8013bd8:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8013bdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be4:	d418      	bmi.n	8013c18 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8013be6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013bea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf2:	dd02      	ble.n	8013bfa <LEAF_tanh+0x22>
        return 1.0f;
 8013bf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8013bf8:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8013bfa:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013bfe:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8013c02:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8013c06:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013c0a:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013c0e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013c12:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013c16:	4770      	bx	lr
        return -1.0f;
 8013c18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013c1c:	4770      	bx	lr
 8013c1e:	bf00      	nop

08013c20 <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
 8013c20:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013c24:	ed9f 4a11 	vldr	s8, [pc, #68]	; 8013c6c <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
 8013c28:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
 8013c2c:	eddf 4a10 	vldr	s9, [pc, #64]	; 8013c70 <fast_tanh4+0x50>
 8013c30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013c34:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8013c74 <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
 8013c38:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8013c3c:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
 8013c40:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013c44:	eee5 5a04 	vfma.f32	s11, s10, s8
 8013c48:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
 8013c4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013c50:	eee5 7a24 	vfma.f32	s15, s10, s9
 8013c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013c58:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013c5c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8013c60:	bf54      	ite	pl
 8013c62:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
 8013c66:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
 8013c6a:	4770      	bx	lr
 8013c6c:	3d6b71bb 	.word	0x3d6b71bb
 8013c70:	3f0dee8b 	.word	0x3f0dee8b
 8013c74:	3f15f4d3 	.word	0x3f15f4d3

08013c78 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013c78:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013c7c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8013ca4 <fast_tanh5+0x2c>
 8013c80:	eddf 6a09 	vldr	s13, [pc, #36]	; 8013ca8 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
 8013c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c88:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013c8c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c90:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
 8013c94:	eea0 7a00 	vfma.f32	s14, s0, s0
 8013c98:	eef1 7ac7 	vsqrt.f32	s15, s14
}
 8013c9c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	3c217586 	.word	0x3c217586
 8013ca8:	3e28d927 	.word	0x3e28d927

08013cac <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
 8013cac:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013cb0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8013cd4 <fastSine+0x28>
 8013cb4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013cd8 <fastSine+0x2c>
 8013cb8:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
 8013cbc:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8013cdc <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
 8013cc0:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8013cc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
 8013cc8:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8013ccc:	eea7 0a86 	vfma.f32	s0, s15, s12
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop
 8013cd4:	3d947433 	.word	0x3d947433
 8013cd8:	3fc8f6e3 	.word	0x3fc8f6e3
 8013cdc:	bf247c4c 	.word	0xbf247c4c

08013ce0 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8013ce0:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8013ce2:	1e4b      	subs	r3, r1, #1
 8013ce4:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8013ce8:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8013cea:	ee07 3a90 	vmov	s15, r3
 8013cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013cf2:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8013cf6:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 8013cfa:	dd16      	ble.n	8013d2a <LEAF_generate_exp+0x4a>
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8013d02:	eeb0 8a60 	vmov.f32	s16, s1
 8013d06:	eef0 8a40 	vmov.f32	s17, s0
 8013d0a:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 8013d0e:	eef0 0a48 	vmov.f32	s1, s16
 8013d12:	eeb0 0a68 	vmov.f32	s0, s17
 8013d16:	f005 fa6b 	bl	80191f0 <powf>
 8013d1a:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 8013d1e:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8013d22:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013d26:	42a5      	cmp	r5, r4
 8013d28:	d1f1      	bne.n	8013d0e <LEAF_generate_exp+0x2e>
    }
}
 8013d2a:	ecbd 8b04 	vpop	{d8-d9}
 8013d2e:	bd38      	pop	{r3, r4, r5, pc}

08013d30 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8013d30:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013d32:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8013d36:	460d      	mov	r5, r1
 8013d38:	4604      	mov	r4, r0
 8013d3a:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013d3e:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8013d42:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013d46:	ee81 0a29 	vdiv.f32	s0, s2, s19
 8013d4a:	f005 f84d 	bl	8018de8 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013d4e:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8013d50:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013d52:	ee07 3a90 	vmov	s15, r3
 8013d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d5e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8013d62:	dd1e      	ble.n	8013da2 <LEAF_generate_table_skew_non_sym+0x72>
 8013d64:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013da8 <LEAF_generate_table_skew_non_sym+0x78>
 8013d68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
 8013d6c:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8013dac <LEAF_generate_table_skew_non_sym+0x7c>
 8013d70:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
 8013d74:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013db0 <LEAF_generate_table_skew_non_sym+0x80>
 8013d78:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013d7c:	e001      	b.n	8013d82 <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
 8013d7e:	f005 f833 	bl	8018de8 <logf>
 8013d82:	ee29 0a00 	vmul.f32	s0, s18, s0
 8013d86:	f004 ffbb 	bl	8018d00 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013d8a:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8013d8e:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013d92:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
 8013d96:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013d9a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013d9e:	42a5      	cmp	r5, r4
 8013da0:	d1ed      	bne.n	8013d7e <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
 8013da2:	ecbd 8b06 	vpop	{d8-d10}
 8013da6:	bd38      	pop	{r3, r4, r5, pc}
 8013da8:	bfb8aa3b 	.word	0xbfb8aa3b
 8013dac:	2edbe6ff 	.word	0x2edbe6ff
 8013db0:	c1b834f1 	.word	0xc1b834f1

08013db4 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8013db4:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013db6:	1e4b      	subs	r3, r1, #1
 8013db8:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 8013dbc:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013dbe:	ee07 3a90 	vmov	s15, r3
 8013dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013dc6:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013dca:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8013dce:	dd12      	ble.n	8013df6 <LEAF_generate_atodb+0x42>
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8013dd6:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
 8013dda:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8013dde:	eeb0 0a48 	vmov.f32	s0, s16
 8013de2:	f005 fbab 	bl	801953c <log10f>
 8013de6:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8013dea:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8013dee:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8013df2:	42a5      	cmp	r5, r4
 8013df4:	d1f3      	bne.n	8013dde <LEAF_generate_atodb+0x2a>
}
 8013df6:	ecbd 8b04 	vpop	{d8-d9}
 8013dfa:	bd38      	pop	{r3, r4, r5, pc}

08013dfc <LEAF_generate_dbtoa>:
{
 8013dfc:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013dfe:	1e4b      	subs	r3, r1, #1
 8013e00:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
 8013e04:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013e06:	ee07 3a90 	vmov	s15, r3
 8013e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013e0e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013e12:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8013e16:	dd14      	ble.n	8013e42 <LEAF_generate_dbtoa+0x46>
 8013e18:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 8013e1a:	eddf 9a0b 	vldr	s19, [pc, #44]	; 8013e48 <LEAF_generate_dbtoa+0x4c>
 8013e1e:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8013e4c <LEAF_generate_dbtoa+0x50>
 8013e22:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8013e26:	eeb0 8a40 	vmov.f32	s16, s0
 8013e2a:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
 8013e2e:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
 8013e32:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013e36:	f004 ff63 	bl	8018d00 <expf>
        buffer[i] = dbtoa(x);
 8013e3a:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8013e3e:	42a5      	cmp	r5, r4
 8013e40:	d1f3      	bne.n	8013e2a <LEAF_generate_dbtoa+0x2e>
}
 8013e42:	ecbd 8b04 	vpop	{d8-d9}
 8013e46:	bd38      	pop	{r3, r4, r5, pc}
 8013e48:	3d4ccccd 	.word	0x3d4ccccd
 8013e4c:	40135d8e 	.word	0x40135d8e

08013e50 <LEAF_generate_mtof>:
{
 8013e50:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013e52:	1e4b      	subs	r3, r1, #1
 8013e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
 8013e58:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013e5a:	ee07 3a90 	vmov	s15, r3
 8013e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013e62:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013e66:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 8013e6a:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8013e6e:	dd29      	ble.n	8013ec4 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
 8013e70:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8013ed8 <LEAF_generate_mtof+0x88>
 8013e74:	eef0 9a40 	vmov.f32	s19, s0
 8013e78:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
 8013e7a:	eddf 8a18 	vldr	s17, [pc, #96]	; 8013edc <LEAF_generate_mtof+0x8c>
 8013e7e:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8013e82:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8013ee0 <LEAF_generate_mtof+0x90>
 8013e86:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013e8a:	ed9f ca16 	vldr	s24, [pc, #88]	; 8013ee4 <LEAF_generate_mtof+0x94>
 8013e8e:	eddf ba16 	vldr	s23, [pc, #88]	; 8013ee8 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8013e92:	eeb0 0a69 	vmov.f32	s0, s19
 8013e96:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
 8013e9a:	e006      	b.n	8013eaa <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8013e9c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8013ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea4:	dd11      	ble.n	8013eca <LEAF_generate_mtof+0x7a>
 8013ea6:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 8013eaa:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8013eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb2:	d8f3      	bhi.n	8013e9c <LEAF_generate_mtof+0x4c>
 8013eb4:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8013eb8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013ebc:	42ac      	cmp	r4, r5
        x += increment;
 8013ebe:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8013ec2:	d1e6      	bne.n	8013e92 <LEAF_generate_mtof+0x42>
}
 8013ec4:	ecbd 8b0a 	vpop	{d8-d12}
 8013ec8:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013eca:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013ece:	f004 ff17 	bl	8018d00 <expf>
 8013ed2:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8013ed6:	e7ef      	b.n	8013eb8 <LEAF_generate_mtof+0x68>
 8013ed8:	00000000 	.word	0x00000000
 8013edc:	c4bb8000 	.word	0xc4bb8000
 8013ee0:	44bb6000 	.word	0x44bb6000
 8013ee4:	3d6c9820 	.word	0x3d6c9820
 8013ee8:	4102d013 	.word	0x4102d013

08013eec <LEAF_poly_blep>:
    if (t < dt) {
 8013eec:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	d418      	bmi.n	8013f28 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
 8013ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013efa:	ee77 7a60 	vsub.f32	s15, s14, s1
 8013efe:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f06:	d50c      	bpl.n	8013f22 <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
 8013f08:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
 8013f0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
 8013f10:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
 8013f14:	ee76 7a26 	vadd.f32	s15, s12, s13
 8013f18:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8013f20:	4770      	bx	lr
    else return 0.0f;
 8013f22:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8013f40 <LEAF_poly_blep+0x54>
}
 8013f26:	4770      	bx	lr
        t /= dt;
 8013f28:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
 8013f2c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013f30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f38:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	00000000 	.word	0x00000000

08013f44 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
 8013f44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4c:	db2c      	blt.n	8013fa8 <LEAF_poly_blamp+0x64>
 8013f4e:	ee70 7aa0 	vadd.f32	s15, s1, s1
 8013f52:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5a:	dd25      	ble.n	8013fa8 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
 8013f5c:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
 8013f60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
 8013f64:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8013f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
 8013f6c:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
 8013f70:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
 8013f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f78:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
 8013f7c:	d517      	bpl.n	8013fae <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
 8013f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
 8013f82:	eddf 5a0e 	vldr	s11, [pc, #56]	; 8013fbc <LEAF_poly_blamp+0x78>
 8013f86:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8013f8a:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
 8013f8e:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
 8013f92:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
 8013f96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013f9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f9e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
 8013fa2:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8013fa6:	4770      	bx	lr
 8013fa8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8013fc0 <LEAF_poly_blamp+0x7c>
}
 8013fac:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
 8013fae:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8013fbc <LEAF_poly_blamp+0x78>
 8013fb2:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013fb6:	ee27 0ae0 	vnmul.f32	s0, s15, s1
 8013fba:	4770      	bx	lr
 8013fbc:	416fffff 	.word	0x416fffff
 8013fc0:	00000000 	.word	0x00000000

08013fc4 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8013fc4:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8013fc8:	ee31 6a40 	vsub.f32	s12, s2, s0
 8013fcc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8013fd0:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8013fd4:	eef0 5a60 	vmov.f32	s11, s1
 8013fd8:	ee30 7ac1 	vsub.f32	s14, s1, s2
 8013fdc:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8013fe0:	eed6 5a26 	vfnms.f32	s11, s12, s13
 8013fe4:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
 8013fe8:	ee70 7a25 	vadd.f32	s15, s0, s11
 8013fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8013ff0:	eee7 7a02 	vfma.f32	s15, s14, s4
 8013ff4:	ee67 7a82 	vmul.f32	s15, s15, s4
 8013ff8:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 8013ffc:	eee7 0a82 	vfma.f32	s1, s15, s4
 8014000:	eeb0 0a60 	vmov.f32	s0, s1
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop

08014008 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8014008:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801400c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801402c <LEAF_interpolation_linear+0x24>
 8014010:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8014014:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
 8014018:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 801401c:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8014020:	eee7 0a80 	vfma.f32	s1, s15, s0
 8014024:	eeb0 0a60 	vmov.f32	s0, s1
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	00000000 	.word	0x00000000

08014030 <mtof>:
    if (f <= -1500.0f) return(0);
 8014030:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014070 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8014034:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014074 <mtof+0x44>
 8014038:	e006      	b.n	8014048 <mtof+0x18>
 801403a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014042:	dd09      	ble.n	8014058 <mtof+0x28>
 8014044:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8014048:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014050:	d8f3      	bhi.n	801403a <mtof+0xa>
 8014052:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014078 <mtof+0x48>
}
 8014056:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 8014058:	eddf 7a08 	vldr	s15, [pc, #32]	; 801407c <mtof+0x4c>
{
 801405c:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 801405e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014062:	f004 fe4d 	bl	8018d00 <expf>
 8014066:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014080 <mtof+0x50>
 801406a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801406e:	bd08      	pop	{r3, pc}
 8014070:	c4bb8000 	.word	0xc4bb8000
 8014074:	44bb6000 	.word	0x44bb6000
 8014078:	00000000 	.word	0x00000000
 801407c:	3d6c9820 	.word	0x3d6c9820
 8014080:	4102d013 	.word	0x4102d013

08014084 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 8014084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014088:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80140bc <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 801408c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80140c0 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 8014090:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 8014094:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014098:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801409c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80140a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 80140a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80140a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80140ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 80140b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 80140b4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	396c9820 	.word	0x396c9820
 80140c0:	4102d013 	.word	0x4102d013

080140c4 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80140c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80140c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140cc:	dd0b      	ble.n	80140e6 <ftom+0x22>
 80140ce:	eddf 7a07 	vldr	s15, [pc, #28]	; 80140ec <ftom+0x28>
{
 80140d2:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80140d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80140d8:	f004 fe86 	bl	8018de8 <logf>
 80140dc:	eddf 7a04 	vldr	s15, [pc, #16]	; 80140f0 <ftom+0x2c>
 80140e0:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80140e4:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80140e6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80140f4 <ftom+0x30>
}
 80140ea:	4770      	bx	lr
 80140ec:	3dfa7ed2 	.word	0x3dfa7ed2
 80140f0:	418a7fac 	.word	0x418a7fac
 80140f4:	c4bb8000 	.word	0xc4bb8000

080140f8 <fasteratodb>:
{
 80140f8:	b500      	push	{lr}
 80140fa:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 80140fc:	eeb0 0ac0 	vabs.f32	s0, s0
 8014100:	a801      	add	r0, sp, #4
 8014102:	f004 fdd7 	bl	8018cb4 <frexpf>
    Y += -4.11852516267426f;
 8014106:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8014140 <fasteratodb+0x48>
 801410a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014144 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
 801410e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014148 <fasteratodb+0x50>
    Y += -4.11852516267426f;
 8014112:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
 8014116:	eddf 5a0d 	vldr	s11, [pc, #52]	; 801414c <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
 801411a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8014150 <fasteratodb+0x58>
    Y += -4.11852516267426f;
 801411e:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
 8014122:	eddd 7a01 	vldr	s15, [sp, #4]
 8014126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
 801412a:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 801412e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014132:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 8014136:	ee27 0a86 	vmul.f32	s0, s15, s12
 801413a:	b003      	add	sp, #12
 801413c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014140:	3f9da1a8 	.word	0x3f9da1a8
 8014144:	c083caf5 	.word	0xc083caf5
 8014148:	40c0b3fb 	.word	0x40c0b3fb
 801414c:	404892e0 	.word	0x404892e0
 8014150:	40c0a8c2 	.word	0x40c0a8c2

08014154 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8014154:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014158:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014184 <fasterdbtoa+0x30>
 801415c:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8014160:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8014164:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014168:	ee20 0a00 	vmul.f32	s0, s0, s0
 801416c:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8014170:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014174:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014178:	ee20 0a00 	vmul.f32	s0, s0, s0

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 801417c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	39ebc8e3 	.word	0x39ebc8e3

08014188 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8014188:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 801418c:	4770      	bx	lr
 801418e:	bf00      	nop

08014190 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8014190:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop

08014198 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8014198:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801419a:	6a03      	ldr	r3, [r0, #32]
 801419c:	2510      	movs	r5, #16
    pool->usize  = 0;
 801419e:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80141a0:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 80141a2:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
 80141a4:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
 80141a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80141aa:	42aa      	cmp	r2, r5
 80141ac:	bf38      	it	cc
 80141ae:	462a      	movcc	r2, r5
    pool->msize  = size;
 80141b0:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80141b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141b4:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 80141b6:	440b      	add	r3, r1
 80141b8:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 80141ba:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 80141be:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 80141c0:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 80141c4:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80141c6:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 80141c8:	6183      	str	r3, [r0, #24]
}
 80141ca:	4770      	bx	lr

080141cc <mpool_alloc>:
{
 80141cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80141ce:	684a      	ldr	r2, [r1, #4]
{
 80141d0:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80141d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80141d4:	3301      	adds	r3, #1
 80141d6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80141d8:	694b      	ldr	r3, [r1, #20]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d04a      	beq.n	8014274 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80141de:	1dc4      	adds	r4, r0, #7
 80141e0:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80141e4:	e002      	b.n	80141ec <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80141e6:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d043      	beq.n	8014274 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 80141ec:	68da      	ldr	r2, [r3, #12]
 80141ee:	42a2      	cmp	r2, r4
 80141f0:	d3f9      	bcc.n	80141e6 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80141f2:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80141f4:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80141f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80141fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80141fc:	4281      	cmp	r1, r0
 80141fe:	d246      	bcs.n	801428e <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014200:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014204:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8014206:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014208:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801420a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 801420c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 801420e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8014212:	4429      	add	r1, r5
 8014214:	5111      	str	r1, [r2, r4]
    node->size = size;
 8014216:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8014218:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 801421c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8014220:	429a      	cmp	r2, r3
        pool->head = new_node;
 8014222:	bf08      	it	eq
 8014224:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	b10a      	cbz	r2, 8014230 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 801422c:	6899      	ldr	r1, [r3, #8]
 801422e:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8014230:	689a      	ldr	r2, [r3, #8]
 8014232:	b10a      	cbz	r2, 8014238 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8014234:	6859      	ldr	r1, [r3, #4]
 8014236:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8014238:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801423a:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 801423c:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014240:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014244:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014248:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 801424a:	4422      	add	r2, r4
 801424c:	4402      	add	r2, r0
 801424e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8014252:	694a      	ldr	r2, [r1, #20]
 8014254:	42aa      	cmp	r2, r5
 8014256:	dd0b      	ble.n	8014270 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8014258:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 801425a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801425c:	b14a      	cbz	r2, 8014272 <mpool_alloc+0xa6>
 801425e:	1e41      	subs	r1, r0, #1
 8014260:	460a      	mov	r2, r1
 8014262:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014266:	68dc      	ldr	r4, [r3, #12]
 8014268:	3202      	adds	r2, #2
 801426a:	1a12      	subs	r2, r2, r0
 801426c:	42a2      	cmp	r2, r4
 801426e:	d3f7      	bcc.n	8014260 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 8014270:	6818      	ldr	r0, [r3, #0]
}
 8014272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8014274:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8014278:	1a9b      	subs	r3, r3, r2
 801427a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801427c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8014280:	bf8c      	ite	hi
 8014282:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014284:	2100      	movls	r1, #0
 8014286:	f004 fc75 	bl	8018b74 <LEAF_internalErrorCallback>
        return NULL;
 801428a:	2000      	movs	r0, #0
}
 801428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801428e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8014290:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8014292:	e7c3      	b.n	801421c <mpool_alloc+0x50>

08014294 <mpool_calloc>:
{
 8014294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8014296:	684a      	ldr	r2, [r1, #4]
{
 8014298:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801429a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801429c:	3301      	adds	r3, #1
 801429e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80142a0:	694b      	ldr	r3, [r1, #20]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d044      	beq.n	8014330 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80142a6:	1dc4      	adds	r4, r0, #7
 80142a8:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80142ac:	e002      	b.n	80142b4 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80142ae:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d03d      	beq.n	8014330 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 80142b4:	68da      	ldr	r2, [r3, #12]
 80142b6:	42a2      	cmp	r2, r4
 80142b8:	d3f9      	bcc.n	80142ae <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80142ba:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80142bc:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80142be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80142c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80142c4:	4281      	cmp	r1, r0
 80142c6:	d240      	bcs.n	801434a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80142c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80142cc:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80142ce:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80142d0:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80142d2:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80142d4:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 80142d6:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80142da:	4429      	add	r1, r5
 80142dc:	5111      	str	r1, [r2, r4]
    node->size = size;
 80142de:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 80142e0:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80142e4:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80142e8:	429a      	cmp	r2, r3
        pool->head = new_node;
 80142ea:	bf08      	it	eq
 80142ec:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 80142f0:	685a      	ldr	r2, [r3, #4]
 80142f2:	b10a      	cbz	r2, 80142f8 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 80142f4:	6899      	ldr	r1, [r3, #8]
 80142f6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80142f8:	689a      	ldr	r2, [r3, #8]
 80142fa:	b10a      	cbz	r2, 8014300 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 80142fc:	6859      	ldr	r1, [r3, #4]
 80142fe:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8014300:	2200      	movs	r2, #0
    node->prev = NULL;
 8014302:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014306:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801430a:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801430e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014310:	4401      	add	r1, r0
 8014312:	68d8      	ldr	r0, [r3, #12]
 8014314:	4401      	add	r1, r0
 8014316:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801431a:	68d9      	ldr	r1, [r3, #12]
 801431c:	b131      	cbz	r1, 801432c <mpool_calloc+0x98>
 801431e:	4610      	mov	r0, r2
 8014320:	6819      	ldr	r1, [r3, #0]
 8014322:	5488      	strb	r0, [r1, r2]
 8014324:	3201      	adds	r2, #1
 8014326:	68d9      	ldr	r1, [r3, #12]
 8014328:	4291      	cmp	r1, r2
 801432a:	d8f9      	bhi.n	8014320 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 801432c:	6818      	ldr	r0, [r3, #0]
}
 801432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8014330:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8014334:	1a9b      	subs	r3, r3, r2
 8014336:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014338:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 801433c:	bf8c      	ite	hi
 801433e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014340:	2100      	movls	r1, #0
 8014342:	f004 fc17 	bl	8018b74 <LEAF_internalErrorCallback>
        return NULL;
 8014346:	2000      	movs	r0, #0
}
 8014348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801434a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 801434c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801434e:	e7c9      	b.n	80142e4 <mpool_calloc+0x50>

08014350 <mpool_free>:
{
 8014350:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
 8014352:	684a      	ldr	r2, [r1, #4]
 8014354:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014356:	3301      	adds	r3, #1
 8014358:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801435a:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 801435c:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801435e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8014360:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8014362:	1a9b      	subs	r3, r3, r2
 8014364:	68e2      	ldr	r2, [r4, #12]
 8014366:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
 8014368:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 801436a:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
 801436c:	2b00      	cmp	r3, #0
 801436e:	d051      	beq.n	8014414 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
 8014370:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
 8014372:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
 8014374:	429a      	cmp	r2, r3
 8014376:	dc17      	bgt.n	80143a8 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8014378:	690d      	ldr	r5, [r1, #16]
 801437a:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
 801437c:	429a      	cmp	r2, r3
 801437e:	d913      	bls.n	80143a8 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014380:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8014382:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
 8014384:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014386:	eb02 0c06 	add.w	ip, r2, r6
 801438a:	eb0c 0604 	add.w	r6, ip, r4
 801438e:	42b3      	cmp	r3, r6
 8014390:	d029      	beq.n	80143e6 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 8014392:	68de      	ldr	r6, [r3, #12]
 8014394:	441a      	add	r2, r3
 8014396:	4432      	add	r2, r6
 8014398:	4294      	cmp	r4, r2
 801439a:	d00a      	beq.n	80143b2 <mpool_free+0x62>
    while (other_node != NULL)
 801439c:	b1e5      	cbz	r5, 80143d8 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 801439e:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
 80143a0:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80143a2:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
 80143a4:	429a      	cmp	r2, r3
 80143a6:	dde7      	ble.n	8014378 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80143a8:	4630      	mov	r0, r6
 80143aa:	2102      	movs	r1, #2
}
 80143ac:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80143ae:	f004 bbe1 	b.w	8018b74 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
 80143b2:	4466      	add	r6, ip
 80143b4:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
 80143b6:	694a      	ldr	r2, [r1, #20]
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d028      	beq.n	801440e <mpool_free+0xbe>
    if (node->next != NULL)
 80143bc:	b10d      	cbz	r5, 80143c2 <mpool_free+0x72>
        node->next->prev = node->prev;
 80143be:	689a      	ldr	r2, [r3, #8]
 80143c0:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
 80143c2:	689a      	ldr	r2, [r3, #8]
 80143c4:	b10a      	cbz	r2, 80143ca <mpool_free+0x7a>
        node->prev->next = node->next;
 80143c6:	685c      	ldr	r4, [r3, #4]
 80143c8:	6054      	str	r4, [r2, #4]
    node->next = NULL;
 80143ca:	461c      	mov	r4, r3
    node->prev = NULL;
 80143cc:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
 80143d0:	694a      	ldr	r2, [r1, #20]
 80143d2:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 80143d4:	2d00      	cmp	r5, #0
 80143d6:	d1e2      	bne.n	801439e <mpool_free+0x4e>
    freed_node->next = pool->head;
 80143d8:	694b      	ldr	r3, [r1, #20]
 80143da:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 80143dc:	b103      	cbz	r3, 80143e0 <mpool_free+0x90>
 80143de:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
 80143e0:	614c      	str	r4, [r1, #20]
}
 80143e2:	bc70      	pop	{r4, r5, r6}
 80143e4:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
 80143e6:	68da      	ldr	r2, [r3, #12]
 80143e8:	4462      	add	r2, ip
 80143ea:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 80143ec:	694a      	ldr	r2, [r1, #20]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d00a      	beq.n	8014408 <mpool_free+0xb8>
    if (node->next != NULL)
 80143f2:	685a      	ldr	r2, [r3, #4]
 80143f4:	b10a      	cbz	r2, 80143fa <mpool_free+0xaa>
        node->next->prev = node->prev;
 80143f6:	689e      	ldr	r6, [r3, #8]
 80143f8:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
 80143fa:	689a      	ldr	r2, [r3, #8]
 80143fc:	b10a      	cbz	r2, 8014402 <mpool_free+0xb2>
        node->prev->next = node->next;
 80143fe:	685e      	ldr	r6, [r3, #4]
 8014400:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
 8014402:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 8014406:	e7c9      	b.n	801439c <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	614a      	str	r2, [r1, #20]
 801440c:	e7f1      	b.n	80143f2 <mpool_free+0xa2>
                pool->head = pool->head->next;
 801440e:	461c      	mov	r4, r3
 8014410:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
 8014412:	e7c3      	b.n	801439c <mpool_free+0x4c>
    freed_node->next = pool->head;
 8014414:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8014416:	e7e3      	b.n	80143e0 <mpool_free+0x90>

08014418 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 801441a:	699f      	ldr	r7, [r3, #24]
{
 801441c:	4606      	mov	r6, r0
 801441e:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014420:	2018      	movs	r0, #24
 8014422:	4639      	mov	r1, r7
{
 8014424:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014426:	f7ff fed1 	bl	80141cc <mpool_alloc>
 801442a:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 801442c:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801442e:	2210      	movs	r2, #16
    pool->usize  = 0;
 8014430:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
 8014432:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014434:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8014436:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 8014438:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
 801443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801443e:	42aa      	cmp	r2, r5
 8014440:	bf38      	it	cc
 8014442:	462a      	movcc	r2, r5
    pool->msize  = size;
 8014444:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014448:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 801444a:	4423      	add	r3, r4
    node->prev = prev;
 801444c:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
 8014450:	6023      	str	r3, [r4, #0]
    node->size = size;
 8014452:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014454:	6144      	str	r4, [r0, #20]
}
 8014456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014458 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 8014458:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801445a:	698c      	ldr	r4, [r1, #24]
{
 801445c:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801445e:	2018      	movs	r0, #24
 8014460:	4621      	mov	r1, r4
 8014462:	f7ff feb3 	bl	80141cc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8014466:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014468:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 801446a:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 801446e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014470:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014472:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801448c <tCycle_init+0x34>
    c->phase    =  0;
 8014476:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801447a:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801447e:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014484:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014488:	bd38      	pop	{r3, r4, r5, pc}
 801448a:	bf00      	nop
 801448c:	4f800000 	.word	0x4f800000

08014490 <tCycle_initToPool>:
{
 8014490:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8014492:	680c      	ldr	r4, [r1, #0]
{
 8014494:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014496:	2018      	movs	r0, #24
 8014498:	4621      	mov	r1, r4
 801449a:	f7ff fe97 	bl	80141cc <mpool_alloc>
    c->inc      =  0;
 801449e:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80144a0:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 80144a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80144a6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80144a8:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80144aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80144c4 <tCycle_initToPool+0x34>
    c->phase    =  0;
 80144ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80144b2:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80144b6:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80144b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144bc:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80144c0:	bd38      	pop	{r3, r4, r5, pc}
 80144c2:	bf00      	nop
 80144c4:	4f800000 	.word	0x4f800000

080144c8 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 80144c8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80144ca:	6801      	ldr	r1, [r0, #0]
 80144cc:	f7ff bf40 	b.w	8014350 <mpool_free>

080144d0 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 80144d0:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 80144d2:	4910      	ldr	r1, [pc, #64]	; (8014514 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80144d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014518 <tCycle_tick+0x48>
    c->phase += c->inc;
 80144d8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80144dc:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 80144de:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 80144e0:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80144e2:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 80144e6:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80144e8:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 80144ec:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 80144f0:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80144f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 80144f6:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 80144fa:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 80144fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014504:	ed91 7a00 	vldr	s14, [r1]
 8014508:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801450c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	080240b0 	.word	0x080240b0
 8014518:	35000004 	.word	0x35000004

0801451c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 801451c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801451e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8014522:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014526:	ee20 0a27 	vmul.f32	s0, s0, s15
 801452a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801452e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014532:	4770      	bx	lr

08014534 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8014534:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014538:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014554 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 801453c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801453e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014542:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014546:	ee20 0a07 	vmul.f32	s0, s0, s14
 801454a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801454e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014552:	4770      	bx	lr
 8014554:	4f800000 	.word	0x4f800000

08014558 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8014558:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014584 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
 801455c:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 801455e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
 8014562:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8014566:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
 801456a:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801456c:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
 8014570:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801457c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8014580:	4770      	bx	lr
 8014582:	bf00      	nop
 8014584:	4f800000 	.word	0x4f800000

08014588 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
 8014588:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 801458a:	698c      	ldr	r4, [r1, #24]
{
 801458c:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 801458e:	2020      	movs	r0, #32
 8014590:	4621      	mov	r1, r4
 8014592:	f7ff fe1b 	bl	80141cc <mpool_alloc>
 8014596:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014598:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
 801459a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 801459e:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
 80145a0:	2300      	movs	r3, #0
    c->phase    =  0.25f;
 80145a2:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
 80145a6:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
 80145a8:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80145ac:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
 80145ae:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
 80145b0:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 80145b2:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 80145b4:	6183      	str	r3, [r0, #24]
}
 80145b6:	bd38      	pop	{r3, r4, r5, pc}

080145b8 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 80145b8:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 80145ba:	6804      	ldr	r4, [r0, #0]
{
 80145bc:	ed2d 8b08 	vpush	{d8-d11}

    Lfloat t = c->phase;
 80145c0:	ed94 8a01 	vldr	s16, [r4, #4]
{
 80145c4:	b082      	sub	sp, #8
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 80145c6:	edd4 7a04 	vldr	s15, [r4, #16]
 80145ca:	edd4 0a02 	vldr	s1, [r4, #8]
 80145ce:	eef4 7ac8 	vcmpe.f32	s15, s16
 80145d2:	eef0 0ae0 	vabs.f32	s1, s1
 80145d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145da:	eef1 0a60 	vneg.f32	s1, s1
 80145de:	dd71      	ble.n	80146c4 <tPBTriangle_tick+0x10c>
    {
        v = 2.0f * t / c->skew - 1.0f;
 80145e0:	ee38 7a08 	vadd.f32	s14, s16, s16
 80145e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80145e8:	ee87 aa27 	vdiv.f32	s20, s14, s15
 80145ec:	ee3a aa66 	vsub.f32	s20, s20, s13
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80145f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
 80145f4:	edcd 0a01 	vstr	s1, [sp, #4]
 80145f8:	eeb0 0a48 	vmov.f32	s0, s16
 80145fc:	f7ff fca2 	bl	8013f44 <LEAF_poly_blamp>
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014600:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
 8014604:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014608:	ee38 0ac8 	vsub.f32	s0, s17, s16
 801460c:	f7ff fc9a 	bl	8013f44 <LEAF_poly_blamp>
    t += 0.5f;
 8014610:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014614:	eef0 aa40 	vmov.f32	s21, s0
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 8014618:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
 801461c:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
 8014620:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014624:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
 8014628:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801462c:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
 8014630:	f7ff fc88 	bl	8013f44 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014634:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 8014638:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801463c:	ee38 0a29 	vadd.f32	s0, s16, s19
 8014640:	f7ff fc80 	bl	8013f44 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8014644:	edd4 7a02 	vldr	s15, [r4, #8]
 8014648:	edd4 6a01 	vldr	s13, [r4, #4]
 801464c:	ee39 9a00 	vadd.f32	s18, s18, s0
 8014650:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014658:	ee39 9a4a 	vsub.f32	s18, s18, s20
 801465c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014660:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014664:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 8014668:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 801466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014670:	db0c      	blt.n	801468c <tPBTriangle_tick+0xd4>
 8014672:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014676:	eeb0 7a67 	vmov.f32	s14, s15
 801467a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801467e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014686:	daf6      	bge.n	8014676 <tPBTriangle_tick+0xbe>
 8014688:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
 801468c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014694:	d50e      	bpl.n	80146b4 <tPBTriangle_tick+0xfc>
 8014696:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801469a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801469e:	eeb0 7a67 	vmov.f32	s14, s15
 80146a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80146a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ae:	d4f6      	bmi.n	801469e <tPBTriangle_tick+0xe6>
 80146b0:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
 80146b4:	ee39 9a4b 	vsub.f32	s18, s18, s22
 80146b8:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
 80146bc:	b002      	add	sp, #8
 80146be:	ecbd 8b08 	vpop	{d8-d11}
 80146c2:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 80146c4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80146c8:	edd4 6a05 	vldr	s13, [r4, #20]
 80146cc:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 80146d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146d8:	ee87 aaa6 	vdiv.f32	s20, s15, s13
 80146dc:	ee3a aa07 	vadd.f32	s20, s20, s14
 80146e0:	e786      	b.n	80145f0 <tPBTriangle_tick+0x38>
 80146e2:	bf00      	nop

080146e4 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 80146e4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 80146e6:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 80146ea:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 80146ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80146f2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80146f6:	4770      	bx	lr

080146f8 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 80146f8:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 80146fc:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 801472c <tPBTriangle_setSkew+0x34>
 8014700:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8014730 <tPBTriangle_setSkew+0x38>
{
 8014704:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 8014706:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 8014708:	f7ff fa5e 	bl	8013bc8 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 801470c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014710:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014714:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014718:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
 801471c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
 8014720:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8014724:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8014728:	bd10      	pop	{r4, pc}
 801472a:	bf00      	nop
 801472c:	3f7d70a4 	.word	0x3f7d70a4
 8014730:	3c23d70a 	.word	0x3c23d70a

08014734 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
 8014734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014736:	698e      	ldr	r6, [r1, #24]
{
 8014738:	4607      	mov	r7, r0
 801473a:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 801473c:	2028      	movs	r0, #40	; 0x28
 801473e:	4631      	mov	r1, r6
 8014740:	f7ff fd44 	bl	80141cc <mpool_alloc>
 8014744:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8014746:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014748:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801474a:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801474c:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
 801474e:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014750:	4629      	mov	r1, r5
 8014752:	f7ff fd3b 	bl	80141cc <mpool_alloc>
    c->inc      =  0;
 8014756:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014758:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
 801475a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
 801475e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014760:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014762:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014798 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
 8014766:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801476a:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
 801476e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
 8014772:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
 8014774:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014776:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
 801477a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801477e:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 8014782:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
 8014784:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
 8014786:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
 801478a:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
 801478c:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
 801478e:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
 8014790:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
 8014792:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 8014794:	6222      	str	r2, [r4, #32]
}
 8014796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014798:	4f800000 	.word	0x4f800000

0801479c <tPBSineTriangle_tick>:
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 801479c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 80147a0:	b510      	push	{r4, lr}
 80147a2:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
 80147a6:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80147a8:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 80147ac:	eeb0 7a67 	vmov.f32	s14, s15
{
 80147b0:	b082      	sub	sp, #8
    Lfloat t = c->phase;
 80147b2:	edd4 9a01 	vldr	s19, [r4, #4]

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80147b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80147ba:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80147be:	eea9 7a89 	vfma.f32	s14, s19, s18
 80147c2:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
 80147c6:	eeb0 0a69 	vmov.f32	s0, s19
 80147ca:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80147ce:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
 80147d2:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80147d6:	eee7 7a09 	vfma.f32	s15, s14, s18
 80147da:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
 80147de:	f7ff fbb1 	bl	8013f44 <LEAF_poly_blamp>
 80147e2:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80147e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80147ea:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
 80147ee:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80147f2:	f7ff fba7 	bl	8013f44 <LEAF_poly_blamp>
    t += 0.5f;
 80147f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 80147fa:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80147fe:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
 8014802:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
 8014806:	eebd aae9 	vcvt.s32.f32	s20, s19
 801480a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
 801480e:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014812:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
 8014816:	f7ff fb95 	bl	8013f44 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801481a:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 801481e:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014822:	ee39 0a8a 	vadd.f32	s0, s19, s20
 8014826:	f7ff fb8d 	bl	8013f44 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 801482a:	edd4 7a02 	vldr	s15, [r4, #8]
 801482e:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014832:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
 8014836:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801483e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014842:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014846:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 801484a:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 801484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014852:	db0a      	blt.n	801486a <tPBSineTriangle_tick+0xce>
 8014854:	eeb0 7a67 	vmov.f32	s14, s15
 8014858:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801485c:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8014860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014864:	daf6      	bge.n	8014854 <tPBSineTriangle_tick+0xb8>
 8014866:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
 801486a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014872:	d50e      	bpl.n	8014892 <tPBSineTriangle_tick+0xf6>
 8014874:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014878:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801487c:	eeb0 7a67 	vmov.f32	s14, s15
 8014880:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014884:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488c:	d4f6      	bmi.n	801487c <tPBSineTriangle_tick+0xe0>
 801488e:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
 8014892:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8014894:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
 8014898:	4a14      	ldr	r2, [pc, #80]	; (80148ec <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801489a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80148f0 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
 801489e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80148a2:	440b      	add	r3, r1
 80148a4:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 80148a6:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80148a8:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 80148ac:	6940      	ldr	r0, [r0, #20]

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 80148ae:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80148b2:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
 80148b6:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 80148b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
 80148bc:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80148be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 80148c2:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
 80148c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80148ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148ce:	ed92 7a00 	vldr	s14, [r2]
 80148d2:	ee37 7a40 	vsub.f32	s14, s14, s0
 80148d6:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 80148da:	ee20 0a06 	vmul.f32	s0, s0, s12
    return out;
}
 80148de:	eea6 0a88 	vfma.f32	s0, s13, s16
 80148e2:	b002      	add	sp, #8
 80148e4:	ecbd 8b06 	vpop	{d8-d10}
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	bf00      	nop
 80148ec:	080240b0 	.word	0x080240b0
 80148f0:	35000004 	.word	0x35000004

080148f4 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
 80148f4:	6803      	ldr	r3, [r0, #0]

    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 80148f6:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
 80148fa:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
 80148fc:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
 8014900:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 8014904:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014908:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
 801490c:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014910:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014914:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014918:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop

08014920 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
 8014920:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
 8014924:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014926:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
 801492a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 801492e:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 8014932:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8014936:	4770      	bx	lr

08014938 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 8014938:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 801493a:	698c      	ldr	r4, [r1, #24]
{
 801493c:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 801493e:	2020      	movs	r0, #32
 8014940:	4621      	mov	r1, r4
 8014942:	f7ff fc43 	bl	80141cc <mpool_alloc>
 8014946:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014948:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 801494a:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 801494c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 801494e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014952:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014974 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 8014956:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 801495a:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801495c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014960:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
 8014964:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 8014966:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 801496a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801496e:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8014972:	bd38      	pop	{r3, r4, r5, pc}
 8014974:	4f800000 	.word	0x4f800000

08014978 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 8014978:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 801497a:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801497c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014980:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80149f4 <tPBPulse_tick+0x7c>
{
 8014984:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014988:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801498a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 801498e:	edd4 6a02 	vldr	s13, [r4, #8]
{
 8014992:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014994:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014998:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 801499c:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80149a0:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 80149a2:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 80149a4:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80149a8:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 80149ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 80149b0:	bf28      	it	cs
 80149b2:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80149b6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80149ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149be:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80149c2:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80149c6:	f7ff fa91 	bl	8013eec <LEAF_poly_blep>
 80149ca:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80149ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80149d2:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80149d6:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80149da:	f7ff fa87 	bl	8013eec <LEAF_poly_blep>
    c->phase += c->inc;
 80149de:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
}
 80149e2:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
 80149e6:	4413      	add	r3, r2
 80149e8:	6063      	str	r3, [r4, #4]
}
 80149ea:	b002      	add	sp, #8
 80149ec:	ecbd 8b02 	vpop	{d8}
 80149f0:	bd10      	pop	{r4, pc}
 80149f2:	bf00      	nop
 80149f4:	2f80000d 	.word	0x2f80000d

080149f8 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 80149f8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80149fa:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 80149fe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a0a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014a0e:	4770      	bx	lr

08014a10 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014a10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a14:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8014a48 <tPBPulse_setWidth+0x38>
 8014a18:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8014a4c <tPBPulse_setWidth+0x3c>
 8014a1c:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 8014a20:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8014a50 <tPBPulse_setWidth+0x40>
 8014a24:	fe80 0a66 	vminnm.f32	s0, s0, s13
 8014a28:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
 8014a2c:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
 8014a30:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014a32:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
 8014a36:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
 8014a3e:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014a42:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8014a46:	4770      	bx	lr
 8014a48:	3d4ccccd 	.word	0x3d4ccccd
 8014a4c:	3f733333 	.word	0x3f733333
 8014a50:	4f800000 	.word	0x4f800000

08014a54 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
 8014a54:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014a56:	698c      	ldr	r4, [r1, #24]
{
 8014a58:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 8014a5a:	2020      	movs	r0, #32
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	f7ff fbb5 	bl	80141cc <mpool_alloc>
 8014a62:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014a64:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014a66:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014a68:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8014a6a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a6c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014a88 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 8014a70:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8014a74:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a76:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014a7a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 8014a7e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a82:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014a86:	bd38      	pop	{r3, r4, r5, pc}
 8014a88:	4f800000 	.word	0x4f800000

08014a8c <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 8014a8c:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
 8014a8e:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014a90:	eddf 0a10 	vldr	s1, [pc, #64]	; 8014ad4 <tPBSaw_tick+0x48>
{
 8014a94:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8014a98:	edd4 7a01 	vldr	s15, [r4, #4]
 8014a9c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014aa0:	edd4 7a02 	vldr	s15, [r4, #8]
 8014aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8014aa8:	ee28 0a20 	vmul.f32	s0, s16, s1
 8014aac:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014ab0:	f7ff fa1c 	bl	8013eec <LEAF_poly_blep>
    c->phase += c->inc;
 8014ab4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ab8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014ad8 <tPBSaw_tick+0x4c>
 8014abc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8014ac0:	eee8 7a47 	vfms.f32	s15, s16, s14
 8014ac4:	4413      	add	r3, r2
 8014ac6:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 8014ac8:	ecbd 8b02 	vpop	{d8}
 8014acc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ad0:	bd10      	pop	{r4, pc}
 8014ad2:	bf00      	nop
 8014ad4:	2f80000d 	.word	0x2f80000d
 8014ad8:	2ffffff6 	.word	0x2ffffff6

08014adc <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8014adc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ade:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014ae2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014aea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014aee:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014af2:	4770      	bx	lr

08014af4 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
 8014af4:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014af6:	698c      	ldr	r4, [r1, #24]
{
 8014af8:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 8014afa:	2028      	movs	r0, #40	; 0x28
 8014afc:	4621      	mov	r1, r4
 8014afe:	f7ff fb65 	bl	80141cc <mpool_alloc>
 8014b02:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014b04:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014b06:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014b08:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8014b0a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014b0c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014b28 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 8014b10:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8014b14:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014b16:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014b1a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 8014b1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014b22:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014b26:	bd38      	pop	{r3, r4, r5, pc}
 8014b28:	4f800000 	.word	0x4f800000

08014b2c <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 8014b2c:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
 8014b2e:	6804      	ldr	r4, [r0, #0]
{
 8014b30:	ed2d 8b06 	vpush	{d8-d10}

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014b34:	6865      	ldr	r5, [r4, #4]
 8014b36:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014b3a:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014b3e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014b42:	eddf 9a1f 	vldr	s19, [pc, #124]	; 8014bc0 <tPBSawSquare_tick+0x94>
{
 8014b46:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014b48:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014b4c:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014b50:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014b52:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014b56:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014b5a:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014b5e:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8014b62:	ee2a 0a29 	vmul.f32	s0, s20, s19
 8014b66:	edcd 0a01 	vstr	s1, [sp, #4]
 8014b6a:	f7ff f9bf 	bl	8013eec <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014b6e:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8014b72:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014b76:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014b7a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    

    sawOut -= resetBlep;
    
    squareOut += resetBlep;
 8014b7e:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014b82:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014b86:	f7ff f9b1 	bl	8013eec <LEAF_poly_blep>
    squareOut -= midBlep;
 8014b8a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014bc4 <tPBSawSquare_tick+0x98>
 8014b8e:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014b92:	ed94 7a08 	vldr	s14, [r4, #32]
 8014b96:	eeea 8a67 	vfms.f32	s17, s20, s15
 8014b9a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
 8014b9e:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014ba0:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
 8014ba4:	68a2      	ldr	r2, [r4, #8]
 8014ba6:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014ba8:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
 8014bac:	6063      	str	r3, [r4, #4]
}
 8014bae:	eea0 8a27 	vfma.f32	s16, s0, s15
 8014bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8014bb6:	b003      	add	sp, #12
 8014bb8:	ecbd 8b06 	vpop	{d8-d10}
 8014bbc:	bd30      	pop	{r4, r5, pc}
 8014bbe:	bf00      	nop
 8014bc0:	2f80000d 	.word	0x2f80000d
 8014bc4:	3000000d 	.word	0x3000000d

08014bc8 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 8014bc8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8014bca:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014bce:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8014bd2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bd6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014bda:	ed83 0a02 	vstr	s0, [r3, #8]

}
 8014bde:	4770      	bx	lr

08014be0 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
 8014be0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
 8014be4:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
 8014be6:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 8014bea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014bee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8014bf2:	4770      	bx	lr

08014bf4 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8014bf4:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014bf6:	6995      	ldr	r5, [r2, #24]
{
 8014bf8:	4606      	mov	r6, r0
 8014bfa:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8014bfc:	2018      	movs	r0, #24
 8014bfe:	4629      	mov	r1, r5
 8014c00:	f7ff fae4 	bl	80141cc <mpool_alloc>
 8014c04:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8014c06:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8014c08:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 8014c0a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8014c0c:	691b      	ldr	r3, [r3, #16]
 8014c0e:	6143      	str	r3, [r0, #20]
}
 8014c10:	bd70      	pop	{r4, r5, r6, pc}
 8014c12:	bf00      	nop

08014c14 <tNoise_initToPool>:
{
 8014c14:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8014c16:	6815      	ldr	r5, [r2, #0]
{
 8014c18:	4606      	mov	r6, r0
 8014c1a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8014c1c:	2018      	movs	r0, #24
 8014c1e:	4629      	mov	r1, r5
 8014c20:	f7ff fad4 	bl	80141cc <mpool_alloc>
 8014c24:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8014c26:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8014c28:	686b      	ldr	r3, [r5, #4]
    n->type = type;
 8014c2a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8014c2c:	691b      	ldr	r3, [r3, #16]
 8014c2e:	6143      	str	r3, [r0, #20]
}
 8014c30:	bd70      	pop	{r4, r5, r6, pc}
 8014c32:	bf00      	nop

08014c34 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 8014c34:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8014c36:	6801      	ldr	r1, [r0, #0]
 8014c38:	f7ff bb8a 	b.w	8014350 <mpool_free>

08014c3c <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
 8014c3c:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8014c3e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014c40:	6963      	ldr	r3, [r4, #20]
 8014c42:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8014c44:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014c46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014c4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 8014c4e:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014c50:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8014c54:	d131      	bne.n	8014cba <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014c56:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8014cc0 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014c5a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8014cc4 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014c5e:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014c62:	ed94 5a03 	vldr	s10, [r4, #12]
 8014c66:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014c6a:	edd4 3a02 	vldr	s7, [r4, #8]
 8014c6e:	eddf 4a16 	vldr	s9, [pc, #88]	; 8014cc8 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014c72:	eddf 5a16 	vldr	s11, [pc, #88]	; 8014ccc <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014c76:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014c7a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014cd0 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014c7e:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014c82:	ed94 4a04 	vldr	s8, [r4, #16]
 8014c86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014c8a:	eddf 5a12 	vldr	s11, [pc, #72]	; 8014cd4 <tNoise_tick+0x98>
 8014c8e:	eddf 4a12 	vldr	s9, [pc, #72]	; 8014cd8 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 8014c92:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8014cdc <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014c96:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014c9a:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8014c9e:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014ca2:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014ca6:	eef0 6a65 	vmov.f32	s13, s11
 8014caa:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8014cae:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8014cb2:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
 8014cb6:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8014cba:	eeb0 0a67 	vmov.f32	s0, s15
 8014cbe:	bd10      	pop	{r4, pc}
 8014cc0:	3dcad8a1 	.word	0x3dcad8a1
 8014cc4:	3e97d0ff 	.word	0x3e97d0ff
 8014cc8:	3f7f65fe 	.word	0x3f7f65fe
 8014ccc:	3f76872b 	.word	0x3f76872b
 8014cd0:	3f86be97 	.word	0x3f86be97
 8014cd4:	3f11eb85 	.word	0x3f11eb85
 8014cd8:	3e3d3c36 	.word	0x3e3d3c36
 8014cdc:	3d4ccccd 	.word	0x3d4ccccd

08014ce0 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8014ce0:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014ce2:	698c      	ldr	r4, [r1, #24]
{
 8014ce4:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014ce6:	201c      	movs	r0, #28
 8014ce8:	4621      	mov	r1, r4
 8014cea:	f7ff fa6f 	bl	80141cc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 8014cee:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014cf0:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014cf2:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014cf4:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014cf6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8014d0c <tIntPhasor_init+0x2c>
    c->inc  = 0;
 8014cfa:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014cfe:	edd2 7a01 	vldr	s15, [r2, #4]
 8014d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d06:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}
 8014d0c:	4f800000 	.word	0x4f800000

08014d10 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8014d10:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8014d12:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014d2c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8014d16:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8014d1a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8014d1c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8014d20:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8014d22:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8014d26:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d2a:	4770      	bx	lr
 8014d2c:	2f80000d 	.word	0x2f80000d

08014d30 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8014d30:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d32:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014d36:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d3e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014d42:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014d46:	4770      	bx	lr

08014d48 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8014d48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014d4c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014d68 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8014d50:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d56:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014d5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014d5e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014d62:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014d66:	4770      	bx	lr
 8014d68:	4f800000 	.word	0x4f800000

08014d6c <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8014d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d6e:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014d72:	698f      	ldr	r7, [r1, #24]
{
 8014d74:	4606      	mov	r6, r0
 8014d76:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014d78:	2010      	movs	r0, #16
 8014d7a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014d7c:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8014e08 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014d80:	f7ff fa24 	bl	80141cc <mpool_alloc>
 8014d84:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014d86:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014d88:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014d8a:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014d8c:	201c      	movs	r0, #28
 8014d8e:	4639      	mov	r1, r7
 8014d90:	f7ff fa1c 	bl	80141cc <mpool_alloc>
 8014d94:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014d96:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014d98:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8014d9a:	2700      	movs	r7, #0
    c->inc  = 0;
 8014d9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014da0:	edd2 7a01 	vldr	s15, [r2, #4]
 8014da4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014da8:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014dac:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8014dae:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014db0:	4629      	mov	r1, r5
 8014db2:	f7ff fa0b 	bl	80141cc <mpool_alloc>
 8014db6:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8014db8:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8014dba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8014dbe:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014dc0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014e0c <tSquareLFO_init+0xa0>
    c->inc  = 0;
 8014dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014dc8:	ed92 7a01 	vldr	s14, [r2, #4]
 8014dcc:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014dd0:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8014dd4:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014dd6:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014dd8:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014ddc:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014de0:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014de2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014de6:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8014dea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014df6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014dfe:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014e02:	ecbd 8b02 	vpop	{d8}
 8014e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e08:	4f800000 	.word	0x4f800000
 8014e0c:	2f80000d 	.word	0x2f80000d

08014e10 <tSquareLFO_initToPool>:
{
 8014e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e12:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8014e16:	680f      	ldr	r7, [r1, #0]
{
 8014e18:	4606      	mov	r6, r0
 8014e1a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014e1c:	2010      	movs	r0, #16
 8014e1e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014e20:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8014eac <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014e24:	f7ff f9d2 	bl	80141cc <mpool_alloc>
 8014e28:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014e2a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014e2c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014e2e:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014e30:	201c      	movs	r0, #28
 8014e32:	4639      	mov	r1, r7
 8014e34:	f7ff f9ca 	bl	80141cc <mpool_alloc>
 8014e38:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014e3a:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014e3c:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8014e3e:	2700      	movs	r7, #0
    c->inc  = 0;
 8014e40:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014e44:	edd2 7a01 	vldr	s15, [r2, #4]
 8014e48:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014e4c:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014e50:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8014e52:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014e54:	4629      	mov	r1, r5
 8014e56:	f7ff f9b9 	bl	80141cc <mpool_alloc>
 8014e5a:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8014e5c:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 8014e5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8014e62:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014e64:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014eb0 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
 8014e68:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014e6c:	ed92 7a01 	vldr	s14, [r2, #4]
 8014e70:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014e74:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8014e78:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014e7a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014e7c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014e80:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014e84:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014e86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014e8a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8014e8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014e92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014e9a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ea2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014ea6:	ecbd 8b02 	vpop	{d8}
 8014eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eac:	4f800000 	.word	0x4f800000
 8014eb0:	2f80000d 	.word	0x2f80000d

08014eb4 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8014eb4:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014eb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014eba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014ef8 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8014ebe:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8014ec0:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014ec4:	4403      	add	r3, r0
 8014ec6:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014ec8:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8014ecc:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8014ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8014ed2:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014ed6:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8014ed8:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8014edc:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014ede:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8014ee2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014ee6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014eea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014eee:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8014ef2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ef6:	4770      	bx	lr
 8014ef8:	2f80000d 	.word	0x2f80000d

08014efc <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8014efc:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8014efe:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f00:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014f04:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f08:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f10:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8014f14:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f16:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014f1a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f22:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014f26:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014f2a:	4770      	bx	lr

08014f2c <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8014f2c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f2e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014f64 <tSquareLFO_setPulseWidth+0x38>
 8014f32:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014f34:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f38:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8014f3c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014f68 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8014f44:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f46:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8014f4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8014f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f52:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014f56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014f5a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014f5e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014f62:	4770      	bx	lr
 8014f64:	2f80000d 	.word	0x2f80000d
 8014f68:	4f800000 	.word	0x4f800000

08014f6c <tSquareLFO_setPhase>:
    int i = phase;
 8014f6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8014f70:	eddf 6a13 	vldr	s13, [pc, #76]	; 8014fc0 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
 8014f74:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f76:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014fc4 <tSquareLFO_setPhase+0x58>
    phase -= i;
 8014f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 8014f7e:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8014f80:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014f84:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014f88:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014f8c:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f90:	689a      	ldr	r2, [r3, #8]
 8014f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8014f96:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014f9a:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014f9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014fa0:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014fa4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014fb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014fb8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	4f800000 	.word	0x4f800000
 8014fc4:	2f80000d 	.word	0x2f80000d

08014fc8 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8014fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014fca:	460c      	mov	r4, r1
{
 8014fcc:	4606      	mov	r6, r0
 8014fce:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014fd0:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8014fd2:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	f7ff f8f8 	bl	80141cc <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8014fdc:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014fde:	6030      	str	r0, [r6, #0]
 8014fe0:	4604      	mov	r4, r0
    c->mempool = m;
 8014fe2:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8014fe6:	f7ff ff13 	bl	8014e10 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8014fea:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014fec:	201c      	movs	r0, #28
 8014fee:	4629      	mov	r1, r5
 8014ff0:	f7ff f8ec 	bl	80141cc <mpool_alloc>
    c->phase    =  0;
 8014ff4:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014ff6:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014ff8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014ffa:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014ffc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8015014 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
 8015000:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015004:	edd2 7a01 	vldr	s15, [r2, #4]
 8015008:	ee67 7a87 	vmul.f32	s15, s15, s14
 801500c:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8015010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015012:	bf00      	nop
 8015014:	4f800000 	.word	0x4f800000

08015018 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8015018:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 801501a:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801501c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8015020:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8015098 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015024:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 8015028:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 801502a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 801502e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015032:	4403      	add	r3, r0
 8015034:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8015036:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 801503a:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801503c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8015040:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 8015042:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8015044:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8015048:	6884      	ldr	r4, [r0, #8]
 801504a:	4423      	add	r3, r4
 801504c:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801504e:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8015052:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 8015054:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8015058:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801505c:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 801505e:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 8015062:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8015064:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8015068:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801506c:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8015070:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8015074:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015078:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801507c:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 8015080:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015084:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015088:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 801508c:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8015090:	eea6 0a07 	vfma.f32	s0, s12, s14
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop
 8015098:	2f80000d 	.word	0x2f80000d

0801509c <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
 801509c:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 801509e:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 80150a0:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150a2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80150a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80150b2:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 80150b6:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150b8:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80150bc:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80150c8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 80150cc:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150ce:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80150d2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80150d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80150da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80150de:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 80150e2:	4770      	bx	lr

080150e4 <tSawSquareLFO_setPhase>:
    int i = phase;
 80150e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 80150e8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8015140 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
 80150ec:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80150ee:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8015144 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 80150f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 80150f6:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 80150f8:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 80150fa:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80150fe:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015102:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015106:	edc0 7a01 	vstr	s15, [r0, #4]
 801510a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801510e:	6890      	ldr	r0, [r2, #8]
 8015110:	edd2 7a01 	vldr	s15, [r2, #4]
 8015114:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8015118:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801511a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801511e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8015122:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8015126:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801512a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801512e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015136:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 801513a:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 801513c:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 801513e:	4770      	bx	lr
 8015140:	4f800000 	.word	0x4f800000
 8015144:	2f80000d 	.word	0x2f80000d

08015148 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8015148:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801514a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801514e:	4770      	bx	lr

08015150 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8015150:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015152:	698d      	ldr	r5, [r1, #24]
{
 8015154:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8015156:	2018      	movs	r0, #24
 8015158:	4629      	mov	r1, r5
 801515a:	f7ff f837 	bl	80141cc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801515e:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8015160:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8015162:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015164:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015166:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801519c <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 801516a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80151a0 <tTriLFO_init+0x50>
    c->phase    =  0;
 801516e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8015172:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015176:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 801517a:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801517e:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 8015182:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015184:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015188:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015194:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8015198:	bd38      	pop	{r3, r4, r5, pc}
 801519a:	bf00      	nop
 801519c:	4f800000 	.word	0x4f800000
 80151a0:	435c0000 	.word	0x435c0000

080151a4 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 80151a4:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80151a6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80151aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80151d4 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 80151ae:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 80151b2:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 80151b4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 80151b8:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 80151ba:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 80151be:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80151c2:	ee07 3a90 	vmov	s15, r3
 80151c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ca:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 80151ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151d2:	4770      	bx	lr
 80151d4:	2ffffff6 	.word	0x2ffffff6

080151d8 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 80151d8:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80151da:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80151de:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80151e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80151e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80151ea:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80151ee:	4770      	bx	lr

080151f0 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 80151f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 80151f4:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80151f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151fa:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80151fe:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8015202:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8015206:	4770      	bx	lr

08015208 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8015208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801520a:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801520e:	698f      	ldr	r7, [r1, #24]
{
 8015210:	4606      	mov	r6, r0
 8015212:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8015214:	2010      	movs	r0, #16
 8015216:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015218:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8015294 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801521c:	f7fe ffd6 	bl	80141cc <mpool_alloc>
 8015220:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8015222:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8015224:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 8015226:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 8015228:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801522a:	4631      	mov	r1, r6
 801522c:	f7fe ffce 	bl	80141cc <mpool_alloc>
 8015230:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8015232:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015234:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 8015236:	2600      	movs	r6, #0
    c->freq  = freq;
 8015238:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015298 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 801523c:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8015240:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015244:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 8015248:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801524c:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8015250:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 8015252:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015254:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015258:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801525c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015264:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 8015268:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801526a:	4629      	mov	r1, r5
 801526c:	f7fe ffae 	bl	80141cc <mpool_alloc>
 8015270:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8015272:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8015274:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 8015278:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801527a:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801527e:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8015282:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015284:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015288:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801528c:	ecbd 8b02 	vpop	{d8}
 8015290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015292:	bf00      	nop
 8015294:	4f800000 	.word	0x4f800000
 8015298:	435c0000 	.word	0x435c0000

0801529c <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 801529c:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801529e:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 80152a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 80152a4:	4a21      	ldr	r2, [pc, #132]	; (801532c <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80152a6:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 80152aa:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80152ac:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015330 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
 80152b0:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80152b2:	eddf 4a20 	vldr	s9, [pc, #128]	; 8015334 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
 80152b6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80152ba:	440b      	add	r3, r1
 80152bc:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 80152be:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
 80152c0:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80152c2:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80152c6:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 80152ca:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80152ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 80152d2:	4433      	add	r3, r6
 80152d4:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
 80152d6:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 80152d8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 80152dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
 80152e0:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80152e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
 80152e6:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
 80152ea:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 80152ee:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 80152f2:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80152f6:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
 80152fa:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 80152fe:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 8015302:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015306:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801530a:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801530e:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015312:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015316:	eef0 7a65 	vmov.f32	s15, s11
}
 801531a:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801531c:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
 8015320:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8015324:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop
 801532c:	080240b0 	.word	0x080240b0
 8015330:	35000004 	.word	0x35000004
 8015334:	2ffffff6 	.word	0x2ffffff6

08015338 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
 8015338:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801533a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801533c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015340:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015344:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801534c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 8015350:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015352:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8015356:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801535a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801535e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015362:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8015366:	4770      	bx	lr

08015368 <tSineTriLFO_setPhase>:
    int i = phase;
 8015368:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801536c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015394 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
 8015370:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8015372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 8015376:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8015378:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801537c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015380:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8015384:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8015388:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801538c:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801538e:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 8015392:	4770      	bx	lr
 8015394:	4f800000 	.word	0x4f800000

08015398 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8015398:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801539a:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801539e:	4770      	bx	lr

080153a0 <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
 80153a0:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
 80153a2:	698d      	ldr	r5, [r1, #24]
{
 80153a4:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 80153a6:	2008      	movs	r0, #8
 80153a8:	4629      	mov	r1, r5
 80153aa:	f7fe ff0f 	bl	80141cc <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
 80153ae:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 80153b0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 80153b2:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 80153b4:	6043      	str	r3, [r0, #4]
}
 80153b6:	bd38      	pop	{r3, r4, r5, pc}

080153b8 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
 80153b8:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 80153ba:	6801      	ldr	r1, [r0, #0]
 80153bc:	f7fe bfc8 	b.w	8014350 <mpool_free>

080153c0 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
 80153c0:	ee70 7a00 	vadd.f32	s15, s0, s0
 80153c4:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8015404 <tPickupNonLinearity_tick+0x44>
 80153c8:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8015408 <tPickupNonLinearity_tick+0x48>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80153cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801540c <tPickupNonLinearity_tick+0x4c>
 80153d0:	ee67 5aa7 	vmul.f32	s11, s15, s15
 80153d4:	ed9f 4a0e 	vldr	s8, [pc, #56]	; 8015410 <tPickupNonLinearity_tick+0x50>
 80153d8:	eea7 6a85 	vfma.f32	s12, s15, s10
 80153dc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8015414 <tPickupNonLinearity_tick+0x54>
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
 80153e0:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80153e2:	ee25 5aa7 	vmul.f32	s10, s11, s15
	Lfloat y = out - p->prev;
 80153e6:	eddf 4a0c 	vldr	s9, [pc, #48]	; 8015418 <tPickupNonLinearity_tick+0x58>
 80153ea:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80153ee:	ee25 7a07 	vmul.f32	s14, s10, s14
 80153f2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80153f6:	eea5 7a84 	vfma.f32	s14, s11, s8
 80153fa:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return y;
}
 80153fe:	ee97 0a24 	vfnms.f32	s0, s14, s9
 8015402:	4770      	bx	lr
 8015404:	3a59d777 	.word	0x3a59d777
 8015408:	39f9096c 	.word	0x39f9096c
 801540c:	3b0a47ed 	.word	0x3b0a47ed
 8015410:	3bdd2f1b 	.word	0x3bdd2f1b
 8015414:	3d99999a 	.word	0x3d99999a
 8015418:	408bbced 	.word	0x408bbced
 801541c:	00000000 	.word	0x00000000

08015420 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
 8015420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015424:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 8015428:	f8d3 9000 	ldr.w	r9, [r3]
{
 801542c:	b083      	sub	sp, #12
 801542e:	460e      	mov	r6, r1
 8015430:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015432:	4649      	mov	r1, r9
 8015434:	2070      	movs	r0, #112	; 0x70
{
 8015436:	461d      	mov	r5, r3
 8015438:	eeb0 8a40 	vmov.f32	s16, s0
 801543c:	eeb0 9a41 	vmov.f32	s18, s2
 8015440:	4617      	mov	r7, r2
 8015442:	eef0 9a61 	vmov.f32	s19, s3
 8015446:	eeb0 aa42 	vmov.f32	s20, s4
 801544a:	eeb0 ba62 	vmov.f32	s22, s5
 801544e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015452:	f7fe febb 	bl	80141cc <mpool_alloc>
 8015456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 801545a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801545e:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015462:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
 8015466:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 801546a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801546e:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
 8015472:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 8015476:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015478:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
 801547a:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 801547e:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015482:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8015486:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
 801548a:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
 801548e:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
 8015490:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015494:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8015690 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
 8015498:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801549a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 801549c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801549e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 80154a2:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80154a6:	4650      	mov	r0, sl
 80154a8:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 80154ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154b0:	f7fb fc0c 	bl	8010ccc <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 80154b4:	ed94 0a02 	vldr	s0, [r4, #8]
 80154b8:	462a      	mov	r2, r5
 80154ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80154bc:	4658      	mov	r0, fp
 80154be:	f7fa fb45 	bl	800fb4c <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 80154c2:	ed94 0a02 	vldr	s0, [r4, #8]
 80154c6:	462a      	mov	r2, r5
 80154c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80154ca:	4648      	mov	r0, r9
 80154cc:	f7fa fb3e 	bl	800fb4c <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
 80154d0:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
 80154d4:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
 80154d8:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 80154dc:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
 80154e0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8015680 <tSimpleLivingString3_initToPool+0x260>
 80154e4:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 80154e8:	eeb4 5bc6 	vcmpe.f64	d5, d6
 80154ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f0:	f100 80bf 	bmi.w	8015672 <tSimpleLivingString3_initToPool+0x252>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 80154f4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	ee07 3a90 	vmov	s15, r3
 80154fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015500:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8015504:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015508:	f106 0058 	add.w	r0, r6, #88	; 0x58
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801550c:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015510:	ed86 0a02 	vstr	s0, [r6, #8]
    p->rippleDelay = 0.5f;
 8015514:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015518:	f7fb fc14 	bl	8010d44 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801551c:	ed96 7a05 	vldr	s14, [r6, #20]
 8015520:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015694 <tSimpleLivingString3_initToPool+0x274>
 8015524:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015528:	ed96 6a01 	vldr	s12, [r6, #4]
 801552c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015530:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015534:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8015688 <tSimpleLivingString3_initToPool+0x268>
 8015538:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801553c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015540:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015544:	f003 fd1c 	bl	8018f80 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8015548:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801554a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801554e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015552:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8015556:	ed94 0a02 	vldr	s0, [r4, #8]
 801555a:	f7fa fbfb 	bl	800fd54 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 801555e:	ed94 0a02 	vldr	s0, [r4, #8]
 8015562:	4648      	mov	r0, r9
 8015564:	f7fa fbf6 	bl	800fd54 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 8015568:	4658      	mov	r0, fp
 801556a:	f7fa fb69 	bl	800fc40 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 801556e:	4648      	mov	r0, r9
 8015570:	f7fa fb66 	bl	800fc40 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8015574:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015578:	4629      	mov	r1, r5
 801557a:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
 801557e:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8015582:	9001      	str	r0, [sp, #4]
 8015584:	f7fb fdfc 	bl	8011180 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 8015588:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801558c:	9801      	ldr	r0, [sp, #4]
 801558e:	f7fb fe61 	bl	8011254 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8015592:	eeb0 0a68 	vmov.f32	s0, s17
 8015596:	9801      	ldr	r0, [sp, #4]
 8015598:	f7fb fe2a 	bl	80111f0 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 801559c:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801559e:	4629      	mov	r1, r5
 80155a0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
 80155a4:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80155a6:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
 80155a8:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 80155ac:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80155b0:	9601      	str	r6, [sp, #4]
 80155b2:	f7fc f8cb 	bl	801174c <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 80155b6:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80155ba:	9801      	ldr	r0, [sp, #4]
 80155bc:	f7fc f906 	bl	80117cc <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 80155c0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80155c4:	9801      	ldr	r0, [sp, #4]
 80155c6:	f7fc f8e5 	bl	8011794 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 80155ca:	eeb0 1a4b 	vmov.f32	s2, s22
 80155ce:	eef0 0a4a 	vmov.f32	s1, s20
 80155d2:	462a      	mov	r2, r5
 80155d4:	eeb0 0a69 	vmov.f32	s0, s19
 80155d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80155dc:	4639      	mov	r1, r7
    p->userDecay = decay;
 80155de:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 80155e2:	f7fa ffd1 	bl	8010588 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
 80155e6:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
 80155ea:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
 80155ec:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
 80155f0:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 80155f4:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 80155f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015680 <tSimpleLivingString3_initToPool+0x260>
 80155fc:	eeb7 6acc 	vcvt.f64.f32	d6, s24
 8015600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015608:	d436      	bmi.n	8015678 <tSimpleLivingString3_initToPool+0x258>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801560a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	ee00 3a10 	vmov	s0, r3
 8015612:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015616:	fe80 0a4c 	vminnm.f32	s0, s0, s24
 801561a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801561e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015620:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015624:	f7fb fb8e 	bl	8010d44 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801562c:	ed94 7a05 	vldr	s14, [r4, #20]
 8015630:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015694 <tSimpleLivingString3_initToPool+0x274>
 8015634:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015638:	ed94 6a01 	vldr	s12, [r4, #4]
 801563c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015640:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015644:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8015688 <tSimpleLivingString3_initToPool+0x268>
 8015648:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801564c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015650:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015654:	f003 fc94 	bl	8018f80 <exp>
    p->pickupPoint = 0.9f;
 8015658:	4a0f      	ldr	r2, [pc, #60]	; (8015698 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
 801565a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 801565c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801565e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 8015662:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015664:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8015668:	b003      	add	sp, #12
 801566a:	ecbd 8b0a 	vpop	{d8-d12}
 801566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015672:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801569c <tSimpleLivingString3_initToPool+0x27c>
 8015676:	e747      	b.n	8015508 <tSimpleLivingString3_initToPool+0xe8>
 8015678:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801569c <tSimpleLivingString3_initToPool+0x27c>
 801567c:	e7cf      	b.n	801561e <tSimpleLivingString3_initToPool+0x1fe>
 801567e:	bf00      	nop
 8015680:	33333333 	.word	0x33333333
 8015684:	40133333 	.word	0x40133333
 8015688:	0a3d70a4 	.word	0x0a3d70a4
 801568c:	c01ba3d7 	.word	0xc01ba3d7
 8015690:	3c23d70a 	.word	0x3c23d70a
 8015694:	3d8d78c4 	.word	0x3d8d78c4
 8015698:	3f666666 	.word	0x3f666666
 801569c:	4019999a 	.word	0x4019999a

080156a0 <tSimpleLivingString3_free>:
{
 80156a0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 80156a2:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 80156a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80156a8:	f7fa ff96 	bl	80105d8 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 80156ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80156b0:	f7fc f86c 	bl	801178c <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 80156b4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80156b8:	f7fb fd96 	bl	80111e8 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 80156bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80156c0:	f7fa fab2 	bl	800fc28 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 80156c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80156c8:	f7fa faae 	bl	800fc28 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
 80156cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156d0:	f7fb fb22 	bl	8010d18 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
 80156d4:	6821      	ldr	r1, [r4, #0]
 80156d6:	4620      	mov	r0, r4
}
 80156d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 80156dc:	f7fe be38 	b.w	8014350 <mpool_free>

080156e0 <tSimpleLivingString3_setFreq>:
{
 80156e0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 80156e2:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
 80156e4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 80156e8:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 80156ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 80156f0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8015768 <tSimpleLivingString3_setFreq+0x88>
 80156f4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80156f8:	eeb4 5bc6 	vcmpe.f64	d5, d6
 80156fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015700:	d42e      	bmi.n	8015760 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015702:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015704:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015708:	005b      	lsls	r3, r3, #1
 801570a:	ee00 3a10 	vmov	s0, r3
 801570e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015712:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8015716:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801571a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801571e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015722:	f7fb fb0f 	bl	8010d44 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801572a:	ed94 7a05 	vldr	s14, [r4, #20]
 801572e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015778 <tSimpleLivingString3_setFreq+0x98>
 8015732:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015736:	ed94 6a01 	vldr	s12, [r4, #4]
 801573a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801573e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015742:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8015770 <tSimpleLivingString3_setFreq+0x90>
 8015746:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801574a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801574e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015752:	f003 fc15 	bl	8018f80 <exp>
 8015756:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801575a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 801575e:	bd10      	pop	{r4, pc}
 8015760:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801577c <tSimpleLivingString3_setFreq+0x9c>
 8015764:	e7d9      	b.n	801571a <tSimpleLivingString3_setFreq+0x3a>
 8015766:	bf00      	nop
 8015768:	33333333 	.word	0x33333333
 801576c:	40133333 	.word	0x40133333
 8015770:	0a3d70a4 	.word	0x0a3d70a4
 8015774:	c01ba3d7 	.word	0xc01ba3d7
 8015778:	3d8d78c4 	.word	0x3d8d78c4
 801577c:	4019999a 	.word	0x4019999a

08015780 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8015780:	6800      	ldr	r0, [r0, #0]
 8015782:	303c      	adds	r0, #60	; 0x3c
 8015784:	f7fb bd34 	b.w	80111f0 <tOnePole_setFreq>

08015788 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801578c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80157d0 <tSimpleLivingString3_setDecay+0x48>
{
 8015790:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015792:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
 8015796:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015798:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801579c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
 80157a0:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 80157a4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80157a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80157ac:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80157c8 <tSimpleLivingString3_setDecay+0x40>
 80157b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80157b4:	ee85 0b07 	vdiv.f64	d0, d5, d7
 80157b8:	f003 fbe2 	bl	8018f80 <exp>
 80157bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80157c0:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 80157c4:	bd10      	pop	{r4, pc}
 80157c6:	bf00      	nop
 80157c8:	52bd3c36 	.word	0x52bd3c36
 80157cc:	c01ba196 	.word	0xc01ba196
 80157d0:	3d8d78c4 	.word	0x3d8d78c4

080157d4 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 80157d4:	6800      	ldr	r0, [r0, #0]
 80157d6:	3054      	adds	r0, #84	; 0x54
 80157d8:	f7fa bf3a 	b.w	8010650 <tFeedbackLeveler_setTargetLevel>

080157dc <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 80157dc:	6800      	ldr	r0, [r0, #0]
 80157de:	3054      	adds	r0, #84	; 0x54
 80157e0:	f7fa bf0a 	b.w	80105f8 <tFeedbackLeveler_setFactor>

080157e4 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 80157e4:	6800      	ldr	r0, [r0, #0]
 80157e6:	3054      	adds	r0, #84	; 0x54
 80157e8:	f7fa bf02 	b.w	80105f0 <tFeedbackLeveler_setStrength>

080157ec <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 80157ec:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 80157ee:	6805      	ldr	r5, [r0, #0]
{
 80157f0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 80157f2:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80157f6:	f7fa ff03 	bl	8010600 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 80157fa:	622c      	str	r4, [r5, #32]
}
 80157fc:	bd38      	pop	{r3, r4, r5, pc}
 80157fe:	bf00      	nop

08015800 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8015800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
 8015804:	6801      	ldr	r1, [r0, #0]
{
 8015806:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
 8015808:	edd1 7a02 	vldr	s15, [r1, #8]
 801580c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015810:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 8015814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015818:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801581c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8015820:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
 8015824:	2e00      	cmp	r6, #0
 8015826:	f340 8085 	ble.w	8015934 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 801582a:	42b0      	cmp	r0, r6
 801582c:	dc11      	bgt.n	8015852 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
 801582e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 8015832:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 8015834:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
 8015836:	dd7a      	ble.n	801592e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015838:	ee07 ca90 	vmov	s15, ip
 801583c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015840:	f1bc 0f00 	cmp.w	ip, #0
 8015844:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015848:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801584c:	da10      	bge.n	8015870 <tSimpleLivingString3_pluck+0x70>
 801584e:	2300      	movs	r3, #0
 8015850:	e02d      	b.n	80158ae <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
 8015852:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015854:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015858:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801585c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015860:	ee07 3a90 	vmov	s15, r3
 8015864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015868:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801586c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8015870:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
 8015872:	f04f 0300 	mov.w	r3, #0
 8015876:	bfa8      	it	ge
 8015878:	4666      	movge	r6, ip
 801587a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801587e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015880:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015884:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801588c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801588e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 8015890:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015892:	fbb2 f7f5 	udiv	r7, r2, r5
 8015896:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 801589a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 801589e:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
 80158a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80158a4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 80158a8:	dde9      	ble.n	801587e <tSimpleLivingString3_pluck+0x7e>
 80158aa:	4298      	cmp	r0, r3
 80158ac:	dd1d      	ble.n	80158ea <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80158ae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80158b2:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80158b6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80158b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80158bc:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80158c0:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80158c4:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 80158c8:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80158ca:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 80158cc:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80158ce:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 80158d2:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80158d4:	fbb2 f6f5 	udiv	r6, r2, r5
 80158d8:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80158dc:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 80158e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80158e4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 80158e8:	dce3      	bgt.n	80158b2 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80158ea:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 80158ee:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 80158f2:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 80158f6:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 80158f8:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 80158fa:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 80158fc:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 80158fe:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015900:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015902:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015904:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015906:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015908:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 801590a:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801590e:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015912:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015916:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
 801591a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801591c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015920:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8015924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015928:	6812      	ldr	r2, [r2, #0]
 801592a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801592c:	d1df      	bne.n	80158ee <tSimpleLivingString3_pluck+0xee>
    }
}
 801592e:	b003      	add	sp, #12
 8015930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
 8015934:	2800      	cmp	r0, #0
 8015936:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801593a:	ddf8      	ble.n	801592e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 801593c:	ee07 ca10 	vmov	s14, ip
 8015940:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 8015944:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015946:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801594a:	eeb0 7a67 	vmov.f32	s14, s15
 801594e:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015952:	eeb0 6a67 	vmov.f32	s12, s15
 8015956:	e78b      	b.n	8015870 <tSimpleLivingString3_pluck+0x70>

08015958 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 8015958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801595c:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 8015960:	6804      	ldr	r4, [r0, #0]
{
 8015962:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8015966:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801596a:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 801596e:	f7fb f9f7 	bl	8010d60 <tExpSmooth_tick>
 8015972:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015976:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801597a:	4628      	mov	r0, r5
 801597c:	f7fa f9ea 	bl	800fd54 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015980:	eeb0 0a48 	vmov.f32	s0, s16
 8015984:	4638      	mov	r0, r7
 8015986:	f7fa f9e5 	bl	800fd54 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 801598a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801598c:	2b00      	cmp	r3, #0
 801598e:	dd56      	ble.n	8015a3e <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015990:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8015994:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015998:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 801599c:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 801599e:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
 80159a0:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80159a2:	f7fa f9ab 	bl	800fcfc <tLinearDelay_tickOut>
 80159a6:	4648      	mov	r0, r9
 80159a8:	f7fb fc40 	bl	801122c <tOnePole_tick>
 80159ac:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 80159b0:	edd4 7a04 	vldr	s15, [r4, #16]
 80159b4:	4650      	mov	r0, sl
 80159b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80159ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80159be:	f7fb fef5 	bl	80117ac <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80159c2:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80159c4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80159c8:	f7fa fe1e 	bl	8010608 <tFeedbackLeveler_tick>
 80159cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80159d0:	eef0 0a40 	vmov.f32	s1, s0
 80159d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80159d8:	f7fe f8f6 	bl	8013bc8 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 80159dc:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80159de:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 80159e2:	f7fa f98b 	bl	800fcfc <tLinearDelay_tickOut>
 80159e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80159ea:	eef0 0a40 	vmov.f32	s1, s0
 80159ee:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80159f2:	f7fe f8e9 	bl	8013bc8 <LEAF_clip>
 80159f6:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 80159fa:	4628      	mov	r0, r5
 80159fc:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015a00:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015a04:	f7fa f966 	bl	800fcd4 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 8015a08:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8015a0c:	4638      	mov	r0, r7
 8015a0e:	eeb1 0a40 	vneg.f32	s0, s0
 8015a12:	f7fa f95f 	bl	800fcd4 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8015a16:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8015a1a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015a1e:	4628      	mov	r0, r5
 8015a20:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015a24:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8015a28:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015a30:	ee17 1a90 	vmov	r1, s15
 8015a34:	f7fa f9cc 	bl	800fdd0 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8015a38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015a3a:	42b3      	cmp	r3, r6
 8015a3c:	dcaf      	bgt.n	801599e <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015a3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
 8015a42:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015a48:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
 8015a4c:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015a50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015a52:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015a56:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 8015a58:	feb8 6a65 	vrinta.f32	s12, s11
 8015a5c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015a60:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015a64:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 8015a68:	feb8 7a66 	vrinta.f32	s14, s13
 8015a6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015a70:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015a74:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015a78:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015a7c:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
 8015a80:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015a84:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015a86:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015a88:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015a8c:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015a8e:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015a92:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015a96:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8015a98:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015a9a:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
 8015a9c:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
 8015aa0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8015aa4:	fb93 f6f0 	sdiv	r6, r3, r0
 8015aa8:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015aac:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015aae:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015ab2:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
 8015ab6:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015aba:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015abe:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015ac2:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015ac4:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015ac8:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015acc:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015ad0:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8015ad4:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015ad6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8015ada:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015ade:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015ae2:	fb93 f5f0 	sdiv	r5, r3, r0
 8015ae6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015aea:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015aee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015af2:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 8015af6:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015af8:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8015afc:	ee20 0a24 	vmul.f32	s0, s0, s9
 8015b00:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8015b04:	ecbd 8b02 	vpop	{d8}
 8015b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015b0c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 8015b0c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 8015b0e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8015b12:	4770      	bx	lr

08015b14 <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 8015b1c:	6817      	ldr	r7, [r2, #0]
{
 8015b1e:	460e      	mov	r6, r1
 8015b20:	b085      	sub	sp, #20
 8015b22:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015b24:	4639      	mov	r1, r7
 8015b26:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
 8015b2a:	4615      	mov	r5, r2
 8015b2c:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015b30:	f7fe fb4c 	bl	80141cc <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
 8015b34:	ee07 6a90 	vmov	s15, r6
 8015b38:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015b3c:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
 8015b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
 8015b44:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 8015b46:	687a      	ldr	r2, [r7, #4]

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
    x->barPulsePhasor = 0;
 8015b48:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
 8015b4c:	6046      	str	r6, [r0, #4]
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015b4e:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
 8015b52:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015b56:	eddf baf7 	vldr	s23, [pc, #988]	; 8015f34 <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
 8015b5a:	4bf7      	ldr	r3, [pc, #988]	; (8015f38 <tTString_initToPool+0x424>)
    x->wound = 1;
 8015b5c:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
 8015b5e:	ed9f 8af7 	vldr	s16, [pc, #988]	; 8015f3c <tTString_initToPool+0x428>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015b62:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
 8015b64:	eddf 9af6 	vldr	s19, [pc, #984]	; 8015f40 <tTString_initToPool+0x42c>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer

    tLagrangeDelay_clear(&x->delay);
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8015b68:	f104 0918 	add.w	r9, r4, #24
 8015b6c:	eddf aaf5 	vldr	s21, [pc, #980]	; 8015f44 <tTString_initToPool+0x430>
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015b70:	eeb0 0a69 	vmov.f32	s0, s19
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015b74:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
 8015b78:	ed9f baf3 	vldr	s22, [pc, #972]	; 8015f48 <tTString_initToPool+0x434>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8015b7c:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8015b80:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
 8015b84:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8015b88:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015b8c:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015b90:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
 8015b92:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015b96:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
 8015b9a:	4bec      	ldr	r3, [pc, #944]	; (8015f4c <tTString_initToPool+0x438>)
    x->wound = 1;
 8015b9c:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
 8015ba0:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 8015ba4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
 8015ba8:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015bac:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
 8015bb0:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
 8015bb4:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
 8015bb8:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8015bbc:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8015bc0:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
 8015bc4:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 8015bc8:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 8015bcc:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8015bd0:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8015bd4:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 8015bd8:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 8015bdc:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
 8015be0:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 8015be4:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8015be8:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 8015bec:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015bf0:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
 8015bf4:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015bf8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015bfc:	4638      	mov	r0, r7
 8015bfe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015c02:	ee17 1a90 	vmov	r1, s15
 8015c06:	edcd 7a01 	vstr	s15, [sp, #4]
 8015c0a:	f7fa f9ab 	bl	800ff64 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 8015c0e:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
 8015c12:	4638      	mov	r0, r7
 8015c14:	f7fa fa70 	bl	80100f8 <tLagrangeDelay_getMaxDelay>
 8015c18:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
 8015c1c:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 8015c1e:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 8015c22:	f7fa f8f3 	bl	800fe0c <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8015c26:	462a      	mov	r2, r5
 8015c28:	9901      	ldr	r1, [sp, #4]
 8015c2a:	eeb0 0a69 	vmov.f32	s0, s19
 8015c2e:	4648      	mov	r0, r9
 8015c30:	f7fa f998 	bl	800ff64 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 8015c34:	4648      	mov	r0, r9
 8015c36:	f7fa f8e9 	bl	800fe0c <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8015c3a:	4638      	mov	r0, r7
 8015c3c:	f7fa fa5c 	bl	80100f8 <tLagrangeDelay_getMaxDelay>
 8015c40:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015c44:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8015c48:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015c4c:	4629      	mov	r1, r5
 8015c4e:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8015c50:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015c54:	f7fb fb20 	bl	8011298 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 8015c58:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f7fb fb5f 	bl	8011320 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8015c62:	4629      	mov	r1, r5
 8015c64:	4638      	mov	r0, r7
 8015c66:	f7fb fb17 	bl	8011298 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015c70:	f7fb fb56 	bl	8011320 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8015c74:	4648      	mov	r0, r9
 8015c76:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8015f50 <tTString_initToPool+0x43c>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8015c7a:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8015c7e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8015f54 <tTString_initToPool+0x440>
 8015c82:	f7fb fb37 	bl	80112f4 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 8015c86:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8015f50 <tTString_initToPool+0x43c>
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015f54 <tTString_initToPool+0x440>
 8015c90:	f7fb fb30 	bl	80112f4 <tCookOnePole_setGainAndPole>
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015c94:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8015c98:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8015c9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8015ca0:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015ca4:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8015ca8:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 8015cac:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8015cb0:	4638      	mov	r0, r7
    x->freq = freq;
 8015cb2:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8015cb6:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015cba:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015cbe:	f7fb f841 	bl	8010d44 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8015cc2:	eeb0 0a49 	vmov.f32	s0, s18
 8015cc6:	ed94 aa50 	vldr	s20, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8015cca:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8015cce:	f7ea fddb 	bl	8000888 <arm_sin_f32>
 8015cd2:	eef0 7a40 	vmov.f32	s15, s0
 8015cd6:	ed94 ca50 	vldr	s24, [r4, #320]	; 0x140
 8015cda:	eeb0 0a49 	vmov.f32	s0, s18
 8015cde:	ee2a aa27 	vmul.f32	s20, s20, s15
 8015ce2:	f7ea fc8b 	bl	80005fc <arm_cos_f32>
 8015ce6:	eef0 0a68 	vmov.f32	s1, s17
 8015cea:	a803      	add	r0, sp, #12
 8015cec:	eef0 7a40 	vmov.f32	s15, s0
 8015cf0:	eeb0 0a4a 	vmov.f32	s0, s20
 8015cf4:	eeec 0a67 	vfms.f32	s1, s24, s15
 8015cf8:	f7ea faf6 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 8015cfc:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015cfe:	edd4 0a02 	vldr	s1, [r4, #8]
 8015d02:	4629      	mov	r1, r5
     x->phaseComp = result;
 8015d04:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015d08:	eeb0 0a48 	vmov.f32	s0, s16
 8015d0c:	ee60 0a8b 	vmul.f32	s1, s1, s22
 8015d10:	4658      	mov	r0, fp
 8015d12:	f7fa ffdb 	bl	8010ccc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 8015d16:	eeb0 0a48 	vmov.f32	s0, s16
 8015d1a:	4658      	mov	r0, fp
 8015d1c:	f7fb f812 	bl	8010d44 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 8015d20:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8015f9c <tTString_initToPool+0x488>
 8015d24:	edd4 0a02 	vldr	s1, [r4, #8]
 8015d28:	4629      	mov	r1, r5
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	eeb0 0a69 	vmov.f32	s0, s19
 8015d30:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015d34:	f7fa ffca 	bl	8010ccc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8015d38:	4638      	mov	r0, r7
 8015d3a:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 8015d3e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8015d42:	f7fa ffff 	bl	8010d44 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8015d46:	eddf 7a84 	vldr	s15, [pc, #528]	; 8015f58 <tTString_initToPool+0x444>
 8015d4a:	edd4 0a02 	vldr	s1, [r4, #8]
 8015d4e:	4629      	mov	r1, r5
 8015d50:	eeb0 0a48 	vmov.f32	s0, s16
 8015d54:	4650      	mov	r0, sl
 8015d56:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015d5a:	f7fa ffb7 	bl	8010ccc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 8015d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8015d62:	4650      	mov	r0, sl
 8015d64:	f7fa ffee 	bl	8010d44 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8015d68:	462a      	mov	r2, r5
 8015d6a:	2104      	movs	r1, #4
 8015d6c:	4648      	mov	r0, r9
 8015d6e:	f7fb f869 	bl	8010e44 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 8015d72:	462a      	mov	r2, r5
 8015d74:	2104      	movs	r1, #4
 8015d76:	4638      	mov	r0, r7
 8015d78:	f7fb f864 	bl	8010e44 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8015d7c:	eef0 0a69 	vmov.f32	s1, s19
 8015d80:	ed94 1a02 	vldr	s2, [r4, #8]
 8015d84:	4648      	mov	r0, r9
 8015d86:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8015f5c <tTString_initToPool+0x448>
 8015d8a:	f7fb f8d3 	bl	8010f34 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8015d8e:	ed94 1a02 	vldr	s2, [r4, #8]
 8015d92:	4638      	mov	r0, r7
 8015d94:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8015d98:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8015d9c:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8015da0:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8015f60 <tTString_initToPool+0x44c>
 8015da4:	f7fb f8c6 	bl	8010f34 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8015da8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015dac:	4631      	mov	r1, r6
 8015dae:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8015f64 <tTString_initToPool+0x450>
 8015db2:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8015db4:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8015db8:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015f68 <tTString_initToPool+0x454>
 8015dbc:	9001      	str	r0, [sp, #4]
 8015dbe:	f7fb fb41 	bl	8011444 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8015dc2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015dc6:	9801      	ldr	r0, [sp, #4]
 8015dc8:	f7fb fc96 	bl	80116f8 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 8015dcc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8015f6c <tTString_initToPool+0x458>
 8015dd0:	9801      	ldr	r0, [sp, #4]
 8015dd2:	f7fb fbf9 	bl	80115c8 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8015dd6:	eddf 0a63 	vldr	s1, [pc, #396]	; 8015f64 <tTString_initToPool+0x450>
 8015dda:	462a      	mov	r2, r5
 8015ddc:	4641      	mov	r1, r8
 8015dde:	4638      	mov	r0, r7
 8015de0:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8015f70 <tTString_initToPool+0x45c>
 8015de4:	f7fb fb2e 	bl	8011444 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8015de8:	4638      	mov	r0, r7
 8015dea:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 8015dee:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8015df2:	f7fb fc81 	bl	80116f8 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8015df6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015f70 <tTString_initToPool+0x45c>
 8015dfa:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 8015dfc:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8015e00:	f7fb fbe2 	bl	80115c8 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8015e04:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015e08:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8015e0c:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8015e0e:	ee67 7aab 	vmul.f32	s15, s15, s23
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015e12:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8015e14:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015e18:	f7fe fb3a 	bl	8014490 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 8015e1c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015e20:	9801      	ldr	r0, [sp, #4]
 8015e22:	f7fe fb99 	bl	8014558 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 8015e26:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	9001      	str	r0, [sp, #4]
 8015e2e:	f7fe fb2f 	bl	8014490 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 8015e32:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015e36:	9801      	ldr	r0, [sp, #4]
 8015e38:	f7fe fb8e 	bl	8014558 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	eef0 0a68 	vmov.f32	s1, s17
 8015e42:	462a      	mov	r2, r5
 8015e44:	4638      	mov	r0, r7
 8015e46:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8015f74 <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
 8015e4a:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 8015e4e:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 8015e52:	f7fb faf7 	bl	8011444 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 8015e56:	4638      	mov	r0, r7
 8015e58:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015e5c:	f7fb fc4c 	bl	80116f8 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8015e60:	4638      	mov	r0, r7
 8015e62:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015f78 <tTString_initToPool+0x464>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 8015e66:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8015e6a:	f7fb fbad 	bl	80115c8 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 8015e6e:	4631      	mov	r1, r6
 8015e70:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015f7c <tTString_initToPool+0x468>
 8015e74:	462a      	mov	r2, r5
 8015e76:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8015f80 <tTString_initToPool+0x46c>
 8015e7a:	4640      	mov	r0, r8
 8015e7c:	f7fb fae2 	bl	8011444 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 8015e80:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015e84:	4640      	mov	r0, r8
 8015e86:	f7fb fc37 	bl	80116f8 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 8015e8a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8015f84 <tTString_initToPool+0x470>
 8015e8e:	4640      	mov	r0, r8
 8015e90:	f7fb fb9a 	bl	80115c8 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 8015e94:	eddf 0a43 	vldr	s1, [pc, #268]	; 8015fa4 <tTString_initToPool+0x490>
 8015e98:	462a      	mov	r2, r5
 8015e9a:	2104      	movs	r1, #4
 8015e9c:	4638      	mov	r0, r7
 8015e9e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8015f94 <tTString_initToPool+0x480>
 8015ea2:	f7fb facf 	bl	8011444 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 8015ea6:	4638      	mov	r0, r7
 8015ea8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015eac:	f7fb fc24 	bl	80116f8 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8015eb0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8015f94 <tTString_initToPool+0x480>
 8015eb4:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8015eb6:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8015eba:	f7fb fb85 	bl	80115c8 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 8015ebe:	462a      	mov	r2, r5
 8015ec0:	4631      	mov	r1, r6
 8015ec2:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8015ec6:	f7fe fea5 	bl	8014c14 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8015eca:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8015ece:	4629      	mov	r1, r5
 8015ed0:	eeb0 0a68 	vmov.f32	s0, s17
 8015ed4:	4638      	mov	r0, r7
 8015ed6:	f7fb fc39 	bl	801174c <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8015eda:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015ede:	4638      	mov	r0, r7
 8015ee0:	f7fb fc74 	bl	80117cc <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8015ee4:	4629      	mov	r1, r5
 8015ee6:	eeb0 0a68 	vmov.f32	s0, s17
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7fb fc2e 	bl	801174c <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 8015ef0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	f7fb fc69 	bl	80117cc <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 8015efa:	4629      	mov	r1, r5
 8015efc:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8015f00:	eeb0 0a48 	vmov.f32	s0, s16
 8015f04:	eddf 0a20 	vldr	s1, [pc, #128]	; 8015f88 <tTString_initToPool+0x474>
 8015f08:	f7fa ff3a 	bl	8010d80 <tSlide_initToPool>
    if (x->wound)
 8015f0c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8015f10:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8015f14:	4629      	mov	r1, r5
    if (x->wound)
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	f000 80e4 	beq.w	80160e4 <tTString_initToPool+0x5d0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8015f1c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015f8c <tTString_initToPool+0x478>
 8015f20:	eeb0 0a48 	vmov.f32	s0, s16
 8015f24:	9001      	str	r0, [sp, #4]
 8015f26:	f7fa fed1 	bl	8010ccc <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8015f2a:	eeb0 0a48 	vmov.f32	s0, s16
 8015f2e:	9801      	ldr	r0, [sp, #4]
 8015f30:	e040      	b.n	8015fb4 <tTString_initToPool+0x4a0>
 8015f32:	bf00      	nop
 8015f34:	40c90fdb 	.word	0x40c90fdb
 8015f38:	41200000 	.word	0x41200000
 8015f3c:	00000000 	.word	0x00000000
 8015f40:	42c80000 	.word	0x42c80000
 8015f44:	43dc0000 	.word	0x43dc0000
 8015f48:	3b83126f 	.word	0x3b83126f
 8015f4c:	3ecccccd 	.word	0x3ecccccd
 8015f50:	bab78034 	.word	0xbab78034
 8015f54:	3f7fbe77 	.word	0x3f7fbe77
 8015f58:	3db851ec 	.word	0x3db851ec
 8015f5c:	38d1b717 	.word	0x38d1b717
 8015f60:	37d1b717 	.word	0x37d1b717
 8015f64:	3f4ccccd 	.word	0x3f4ccccd
 8015f68:	459c4000 	.word	0x459c4000
 8015f6c:	45bb8000 	.word	0x45bb8000
 8015f70:	44e10000 	.word	0x44e10000
 8015f74:	45354000 	.word	0x45354000
 8015f78:	4573c000 	.word	0x4573c000
 8015f7c:	3f8ccccd 	.word	0x3f8ccccd
 8015f80:	456d8000 	.word	0x456d8000
 8015f84:	45802000 	.word	0x45802000
 8015f88:	453b8000 	.word	0x453b8000
 8015f8c:	3a03126f 	.word	0x3a03126f
 8015f90:	3a51b717 	.word	0x3a51b717
 8015f94:	447a0000 	.word	0x447a0000
 8015f98:	00000000 	.word	0x00000000
 8015f9c:	3d23d70a 	.word	0x3d23d70a
 8015fa0:	3d4ccccd 	.word	0x3d4ccccd
 8015fa4:	3f666666 	.word	0x3f666666
 8015fa8:	45dac000 	.word	0x45dac000
 8015fac:	3dcccccd 	.word	0x3dcccccd
 8015fb0:	3e7ae148 	.word	0x3e7ae148
 8015fb4:	f7fa fec6 	bl	8010d44 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 8015fb8:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 8015fbc:	4629      	mov	r1, r5
 8015fbe:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8015f90 <tTString_initToPool+0x47c>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8015fc2:	eeb0 0a48 	vmov.f32	s0, s16
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	9601      	str	r6, [sp, #4]
 8015fca:	f7fa fe7f 	bl	8010ccc <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8015fce:	eeb0 0a48 	vmov.f32	s0, s16
 8015fd2:	9801      	ldr	r0, [sp, #4]
 8015fd4:	f7fa feb6 	bl	8010d44 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015fd8:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 8015f94 <tTString_initToPool+0x480>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8015fdc:	ed1f 8a12 	vldr	s16, [pc, #-72]	; 8015f98 <tTString_initToPool+0x484>
 8015fe0:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015fe4:	eeb0 0a60 	vmov.f32	s0, s1
 8015fe8:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8015fec:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015fee:	ed5f 8a15 	vldr	s17, [pc, #-84]	; 8015f9c <tTString_initToPool+0x488>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015ff2:	f7fa fec5 	bl	8010d80 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8015ffc:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8016000:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8016004:	f7fa febc 	bl	8010d80 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8016008:	4629      	mov	r1, r5
 801600a:	eeb0 0a48 	vmov.f32	s0, s16
 801600e:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 8015fa0 <tTString_initToPool+0x48c>
 8016012:	4630      	mov	r0, r6
 8016014:	f7fa fe5a 	bl	8010ccc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8016018:	eeb0 0a48 	vmov.f32	s0, s16
 801601c:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
 801601e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8016022:	f7fa fe8f 	bl	8010d44 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 8016026:	462a      	mov	r2, r5
 8016028:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801602c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8016030:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8016034:	2102      	movs	r1, #2
 8016036:	f7fb fa05 	bl	8011444 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 801603a:	4629      	mov	r1, r5
 801603c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8016040:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
 8016044:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 8016048:	f7fb fb80 	bl	801174c <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 801604c:	462a      	mov	r2, r5
 801604e:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8016052:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 8015fa4 <tTString_initToPool+0x490>
 8016056:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 8015fa8 <tTString_initToPool+0x494>
 801605a:	2101      	movs	r1, #1
 801605c:	f7fb f9f2 	bl	8011444 <tSVF_initToPool>
    x->inharmonic = 1;
 8016060:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016062:	edd4 0a02 	vldr	s1, [r4, #8]
 8016066:	462a      	mov	r2, r5
 8016068:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
 801606c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016070:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8016074:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 8015fac <tTString_initToPool+0x498>
 8016078:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
 801607c:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016080:	f7fa fa82 	bl	8010588 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016084:	edd4 0a02 	vldr	s1, [r4, #8]
 8016088:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 801608c:	ed1f 1a39 	vldr	s2, [pc, #-228]	; 8015fac <tTString_initToPool+0x498>
 8016090:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8016094:	462a      	mov	r2, r5
 8016096:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801609a:	2101      	movs	r1, #1
 801609c:	f7fa fa74 	bl	8010588 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 80160a0:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8015fb0 <tTString_initToPool+0x49c>
 80160a4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80160a8:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
 80160aa:	4b17      	ldr	r3, [pc, #92]	; (8016108 <tTString_initToPool+0x5f4>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80160ac:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 80160b0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80160b4:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
 80160b6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 80160ba:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80160be:	f7fe fda9 	bl	8014c14 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 80160c2:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
 80160c6:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 80160c8:	2008      	movs	r0, #8
 80160ca:	4629      	mov	r1, r5
 80160cc:	f7fe f87e 	bl	80141cc <mpool_alloc>
 80160d0:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
 80160d4:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 80160d6:	ed80 8a01 	vstr	s16, [r0, #4]
}
 80160da:	b005      	add	sp, #20
 80160dc:	ecbd 8b0a 	vpop	{d8-d12}
 80160e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 80160e4:	eddf 0a09 	vldr	s1, [pc, #36]	; 801610c <tTString_initToPool+0x5f8>
 80160e8:	eeb0 0a48 	vmov.f32	s0, s16
 80160ec:	9001      	str	r0, [sp, #4]
 80160ee:	f7fa fded 	bl	8010ccc <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 80160f2:	eeb0 0a48 	vmov.f32	s0, s16
 80160f6:	9801      	ldr	r0, [sp, #4]
 80160f8:	f7fa fe24 	bl	8010d44 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 80160fc:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 8016100:	eef0 0a4b 	vmov.f32	s1, s22
 8016104:	4629      	mov	r1, r5
 8016106:	e75c      	b.n	8015fc2 <tTString_initToPool+0x4ae>
 8016108:	428c0000 	.word	0x428c0000
 801610c:	3ba3d70a 	.word	0x3ba3d70a

08016110 <tTString_free>:
{
 8016110:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8016112:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
 8016114:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
 8016118:	6801      	ldr	r1, [r0, #0]
 801611a:	f7fe f919 	bl	8014350 <mpool_free>
    tNoise_free(&x->pickNoiseSource);
 801611e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8016122:	f7fe fd87 	bl	8014c34 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 8016126:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801612a:	f7fa fa55 	bl	80105d8 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 801612e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8016132:	f7fa fa51 	bl	80105d8 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 8016136:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801613a:	f7fb fa0b 	bl	8011554 <tSVF_free>
    tHighpass_free(&x->barHP);
 801613e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8016142:	f7fb fb23 	bl	801178c <tHighpass_free>
    tSVF_free(&x->barResonator);
 8016146:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801614a:	f7fb fa03 	bl	8011554 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 801614e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8016152:	f7fa fde1 	bl	8010d18 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 8016156:	f504 708a 	add.w	r0, r4, #276	; 0x114
 801615a:	f7fa fe37 	bl	8010dcc <tSlide_free>
    tSlide_free(&x->barSmooth);
 801615e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8016162:	f7fa fe33 	bl	8010dcc <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 8016166:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 801616a:	f7fa fdd5 	bl	8010d18 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 801616e:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8016172:	f7fa fdd1 	bl	8010d18 <tExpSmooth_free>
	tSlide_free(&x->slide);
 8016176:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801617a:	f7fa fe27 	bl	8010dcc <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 801617e:	f104 0020 	add.w	r0, r4, #32
 8016182:	f7fb fb03 	bl	801178c <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 8016186:	f104 001c 	add.w	r0, r4, #28
 801618a:	f7fb faff 	bl	801178c <tHighpass_free>
    tNoise_free(&x->noise);
 801618e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8016192:	f7fe fd4f 	bl	8014c34 <tNoise_free>
    tSVF_free(&x->peakFilt);
 8016196:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 801619a:	f7fb f9db 	bl	8011554 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 801619e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80161a2:	f7fb f9d7 	bl	8011554 <tSVF_free>
    tSVF_free(&x->pickupFilter);
 80161a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80161aa:	f7fb f9d3 	bl	8011554 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 80161ae:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80161b2:	f7fe f989 	bl	80144c8 <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 80161b6:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80161ba:	f7fe f985 	bl	80144c8 <tCycle_free>
    tSVF_free(&x->highpassP);
 80161be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80161c2:	f7fb f9c7 	bl	8011554 <tSVF_free>
    tSVF_free(&x->lowpassP),
 80161c6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80161ca:	f7fb f9c3 	bl	8011554 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 80161ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80161d2:	f7fa fe95 	bl	8010f00 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 80161d6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80161da:	f7fa fe91 	bl	8010f00 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 80161de:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 80161e2:	f7fa fd99 	bl	8010d18 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 80161e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80161ea:	f7fa fd95 	bl	8010d18 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 80161ee:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80161f2:	f7fa fd91 	bl	8010d18 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 80161f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80161fa:	f7fb f865 	bl	80112c8 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 80161fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016202:	f7fb f861 	bl	80112c8 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 8016206:	f104 0018 	add.w	r0, r4, #24
 801620a:	f7f9 fdf3 	bl	800fdf4 <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 801620e:	f104 0014 	add.w	r0, r4, #20
 8016212:	f7f9 fdef 	bl	800fdf4 <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 8016216:	6821      	ldr	r1, [r4, #0]
 8016218:	4620      	mov	r0, r4
}
 801621a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
 801621e:	f7fe b897 	b.w	8014350 <mpool_free>
 8016222:	bf00      	nop

08016224 <tTString_tick>:
{
 8016224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016228:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
 801622c:	6804      	ldr	r4, [r0, #0]
{
 801622e:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
 8016230:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8016234:	f7fe fd02 	bl	8014c3c <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016238:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801623c:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016240:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
 8016244:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016248:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
 801624c:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016250:	9000      	str	r0, [sp, #0]
 8016252:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016256:	eef4 6ac8 	vcmpe.f32	s13, s16
 801625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625e:	d407      	bmi.n	8016270 <tTString_tick+0x4c>
 8016260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016264:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801626c:	f340 83d5 	ble.w	8016a1a <tTString_tick+0x7f6>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016270:	f7fa fd70 	bl	8010d54 <tExpSmooth_setValAndDest>
 8016274:	9800      	ldr	r0, [sp, #0]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 8016276:	f7fa fd73 	bl	8010d60 <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 801627a:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 801627e:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 8016282:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8016286:	ee30 0a67 	vsub.f32	s0, s0, s15
 801628a:	f7fd fb5b 	bl	8013944 <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 801628e:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8016290:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8016294:	9500      	str	r5, [sp, #0]
 8016296:	eeb0 0a48 	vmov.f32	s0, s16
 801629a:	f7fa fd53 	bl	8010d44 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 801629e:	9800      	ldr	r0, [sp, #0]
 80162a0:	f7fa fd5e 	bl	8010d60 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80162a4:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80162a8:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80162ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80162b0:	f7fd fb48 	bl	8013944 <fastabsf>
        if (differenceFastSmooth < 0.0001f)
 80162b4:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8016604 <tTString_tick+0x3e0>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 80162b8:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
 80162bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80162c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c4:	f140 8359 	bpl.w	801697a <tTString_tick+0x756>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 80162c8:	eddf 6acf 	vldr	s13, [pc, #828]	; 8016608 <tTString_tick+0x3e4>
 80162cc:	ed9f 7acf 	vldr	s14, [pc, #828]	; 801660c <tTString_tick+0x3e8>
 80162d0:	ee30 8a66 	vsub.f32	s16, s0, s13
 80162d4:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016610 <tTString_tick+0x3ec>
 80162d8:	ee28 8a07 	vmul.f32	s16, s16, s14
 80162dc:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 80162e0:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 80162e4:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 80162e8:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 80162ec:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80162f0:	f7fd fb28 	bl	8013944 <fastabsf>
 80162f4:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 80162f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
 80162fc:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8016300:	ee79 0a09 	vadd.f32	s1, s18, s18
 8016304:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8016610 <tTString_tick+0x3ec>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8016308:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 801630c:	f7fd fc5c 	bl	8013bc8 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8016310:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016314:	f7fa fd7c 	bl	8010e10 <tSlide_tick>
    if (x->wound)
 8016318:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 801631c:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 8016320:	2b00      	cmp	r3, #0
 8016322:	f000 83a9 	beq.w	8016a78 <tTString_tick+0x854>
		if (bumpDifference > 1.0f)
 8016326:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801632a:	eef4 8ac9 	vcmpe.f32	s17, s18
 801632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016332:	f300 8325 	bgt.w	8016980 <tTString_tick+0x75c>
			x->bumpOsc = 0;
 8016336:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016338:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 801633c:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016340:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
 8016344:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
 8016348:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 801634c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016350:	4293      	cmp	r3, r2
 8016352:	f240 835e 	bls.w	8016a12 <tTString_tick+0x7ee>
			tSlide_setDest(&x->barSmooth, 5.0f);
 8016356:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 801635a:	4628      	mov	r0, r5
 801635c:	f7fa fd3a 	bl	8010dd4 <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8016360:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
 8016362:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8016366:	f7fa fd39 	bl	8010ddc <tSlide_tickNoInput>
 801636a:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 801636e:	4628      	mov	r0, r5
 8016370:	f7fb f92a 	bl	80115c8 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
 8016374:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8016378:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
 801637a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 801637e:	f7fa fd2d 	bl	8010ddc <tSlide_tickNoInput>
		if (pulseVal > .99f)
 8016382:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8016614 <tTString_tick+0x3f0>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8016386:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
 801638a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016392:	f300 83ad 	bgt.w	8016af0 <tTString_tick+0x8cc>
		x->slideNoise *= pulseVal;
 8016396:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 801639a:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
 801639c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80163a0:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80163a4:	f7fa fcdc 	bl	8010d60 <tExpSmooth_tick>
 80163a8:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 80163ac:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80163ae:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 80163b2:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80163b6:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 80163ba:	f7fb f8cf 	bl	801155c <tSVF_tick>
 80163be:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 80163c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80163c6:	f7fd fc57 	bl	8013c78 <fast_tanh5>
		if (barFreq < 300.0f)
 80163ca:	eddf 7a93 	vldr	s15, [pc, #588]	; 8016618 <tTString_tick+0x3f4>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 80163ce:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
 80163d2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80163d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163da:	f100 837a 	bmi.w	8016ad2 <tTString_tick+0x8ae>
		Lfloat filterFade = 1.0f;
 80163de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 80163e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
 80163e6:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80163ea:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 80163ee:	ee29 9a07 	vmul.f32	s18, s18, s14
 80163f2:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
 80163f6:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80163fa:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80163fe:	f7fb f9d5 	bl	80117ac <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8016402:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016406:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 801640a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801640e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016412:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016416:	f7fb f8a1 	bl	801155c <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 801641a:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 801641e:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 8016420:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8016424:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8016426:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 801642a:	f340 834b 	ble.w	8016ac4 <tTString_tick+0x8a0>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 801642e:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016432:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016436:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 801643a:	f104 0518 	add.w	r5, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 801643e:	9304      	str	r3, [sp, #16]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016440:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8016444:	ed9f 9a75 	vldr	s18, [pc, #468]	; 801661c <tTString_tick+0x3f8>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8016448:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 801644c:	9305      	str	r3, [sp, #20]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 801644e:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 8016452:	9306      	str	r3, [sp, #24]
 8016454:	f504 73be 	add.w	r3, r4, #380	; 0x17c
 8016458:	9307      	str	r3, [sp, #28]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 801645a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801645e:	9300      	str	r3, [sp, #0]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016460:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016464:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8016466:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 801646a:	9301      	str	r3, [sp, #4]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 801646c:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 8016470:	9302      	str	r3, [sp, #8]
 8016472:	f104 031c 	add.w	r3, r4, #28
 8016476:	9308      	str	r3, [sp, #32]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016478:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 801647c:	9309      	str	r3, [sp, #36]	; 0x24
 801647e:	f104 0320 	add.w	r3, r4, #32
 8016482:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016484:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016488:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 801648a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 801648e:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016490:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8016494:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016496:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801649a:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 801649c:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 80164a0:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80164a2:	9804      	ldr	r0, [sp, #16]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 80164a4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80164a8:	f7fa fc5a 	bl	8010d60 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 80164ac:	9805      	ldr	r0, [sp, #20]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80164ae:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 80164b2:	f7fa fc55 	bl	8010d60 <tExpSmooth_tick>
 80164b6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80164ba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 80164be:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
 80164c0:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
 80164c4:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
 80164c8:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
 80164cc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80164d0:	ed9f 5a53 	vldr	s10, [pc, #332]	; 8016620 <tTString_tick+0x3fc>
 80164d4:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
 80164d8:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
 80164dc:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
 80164e0:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
 80164e4:	ee27 7a09 	vmul.f32	s14, s14, s18
 80164e8:	eeb8 da45 	vcvt.f32.u32	s26, s10
    	x->tensionAmount = tension * 0.01f;
 80164ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164f0:	fe8d da66 	vminnm.f32	s26, s26, s13
 80164f4:	eeb0 0a4d 	vmov.f32	s0, s26
 80164f8:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 80164fc:	eef1 8a4d 	vneg.f32	s17, s26
 8016500:	ee2d 8a08 	vmul.f32	s16, s26, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016504:	eea5 0ac6 	vfms.f32	s0, s11, s12
 8016508:	eead 0a47 	vfms.f32	s0, s26, s14
 801650c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016510:	f7f9 fcca 	bl	800fea8 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016514:	eeb0 0a4d 	vmov.f32	s0, s26
 8016518:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 801651c:	4628      	mov	r0, r5
 801651e:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
 8016522:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 8016526:	eea6 0a66 	vfms.f32	s0, s12, s13
 801652a:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 801652e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016532:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016536:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801653a:	f7f9 fcb5 	bl	800fea8 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 801653e:	9806      	ldr	r0, [sp, #24]
 8016540:	f7fe fb7c 	bl	8014c3c <tNoise_tick>
 8016544:	eef0 8a40 	vmov.f32	s17, s0
 8016548:	9807      	ldr	r0, [sp, #28]
 801654a:	f7fa fc09 	bl	8010d60 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 801654e:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8016552:	ee68 8a80 	vmul.f32	s17, s17, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8016556:	4630      	mov	r0, r6
 8016558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801655c:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8016560:	ee17 1a90 	vmov	r1, s15
 8016564:	eeb0 0a68 	vmov.f32	s0, s17
 8016568:	f7f9 fdb6 	bl	80100d8 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 801656c:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 8016570:	eeb0 0a68 	vmov.f32	s0, s17
 8016574:	4628      	mov	r0, r5
 8016576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801657a:	ee17 1a90 	vmov	r1, s15
 801657e:	f7f9 fdab 	bl	80100d8 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8016582:	9800      	ldr	r0, [sp, #0]
 8016584:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8016588:	f7fa feba 	bl	8011300 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 801658c:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 801658e:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016592:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8016596:	f7fa feb3 	bl	8011300 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 801659a:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 801659e:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80165a0:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 80165a4:	ee2d ca0c 	vmul.f32	s24, s26, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 80165a8:	eebc aacc 	vcvt.u32.f32	s20, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 80165ac:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80165b0:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 80165b4:	f7f9 fc46 	bl	800fe44 <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 80165b8:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 80165ba:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 80165be:	f7f9 fc41 	bl	800fe44 <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 80165c2:	ee1a 1a10 	vmov	r1, s20
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 80165c6:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 80165ca:	4630      	mov	r0, r6
 80165cc:	eeb0 0a4c 	vmov.f32	s0, s24
 80165d0:	f7f9 fd1e 	bl	8010010 <tLagrangeDelay_tapOutInterpolated>
 80165d4:	eef0 7a40 	vmov.f32	s15, s0
 80165d8:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 80165dc:	eeb0 0a4c 	vmov.f32	s0, s24
 80165e0:	ee1a 1a10 	vmov	r1, s20
 80165e4:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
 80165e6:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 80165ea:	f7f9 fd11 	bl	8010010 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 80165ee:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
 80165f2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 80165f6:	eee0 da27 	vfma.f32	s27, s0, s15
        if (x->inharmonic)
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	f040 8224 	bne.w	8016a48 <tTString_tick+0x824>
 8016600:	e024      	b.n	801664c <tTString_tick+0x428>
 8016602:	bf00      	nop
 8016604:	38d1b717 	.word	0x38d1b717
 8016608:	3727c5ac 	.word	0x3727c5ac
 801660c:	448ae38e 	.word	0x448ae38e
 8016610:	00000000 	.word	0x00000000
 8016614:	3f7d70a4 	.word	0x3f7d70a4
 8016618:	43960000 	.word	0x43960000
 801661c:	3e22f983 	.word	0x3e22f983
 8016620:	3c23d70a 	.word	0x3c23d70a
 8016624:	3cb17e4b 	.word	0x3cb17e4b
 8016628:	3dd55555 	.word	0x3dd55555
 801662c:	3b0a47ed 	.word	0x3b0a47ed
 8016630:	3bdd2f1b 	.word	0x3bdd2f1b
 8016634:	39f9096c 	.word	0x39f9096c
 8016638:	3d99999a 	.word	0x3d99999a
 801663c:	3a59d777 	.word	0x3a59d777
 8016640:	408bbced 	.word	0x408bbced
 8016644:	3fa66666 	.word	0x3fa66666
 8016648:	42c80000 	.word	0x42c80000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 801664c:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8016650:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8016654:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 8016658:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801665c:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 8016660:	ee60 0a87 	vmul.f32	s1, s1, s14
 8016664:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016668:	ee60 0a8e 	vmul.f32	s1, s1, s28
 801666c:	f7fd faac 	bl	8013bc8 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016670:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8016674:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 8016678:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801667c:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 8016680:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016684:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016688:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801668c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016690:	ee60 0aad 	vmul.f32	s1, s1, s27
 8016694:	f7fd fa98 	bl	8013bc8 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8016698:	9801      	ldr	r0, [sp, #4]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 801669a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 801669e:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80166a2:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
 80166a6:	f7fd ff13 	bl	80144d0 <tCycle_tick>
 80166aa:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 80166ae:	eee0 da27 	vfma.f32	s27, s0, s15
 80166b2:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8016624 <tTString_tick+0x400>
 80166b6:	ee2c 1a27 	vmul.f32	s2, s24, s15
 80166ba:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 8016628 <tTString_tick+0x404>
 80166be:	ee6c 0a27 	vmul.f32	s1, s24, s15
 80166c2:	eeb0 0a6d 	vmov.f32	s0, s27
 80166c6:	f7fd f8bd 	bl	8013844 <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
 80166ca:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 80166ce:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
 80166d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d6:	f140 81c8 	bpl.w	8016a6a <tTString_tick+0x846>
        uint32_t backwards = 0;
 80166da:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
 80166dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 80166e0:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 80166e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80166e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ec:	d4f6      	bmi.n	80166dc <tTString_tick+0x4b8>
        while (pickupPos < 0.0f)
 80166ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f6:	d508      	bpl.n	801670a <tTString_tick+0x4e6>
        	pickupPos = pickupPos + halfCurrentDelay;
 80166f8:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 80166fc:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8016700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016708:	d4f6      	bmi.n	80166f8 <tTString_tick+0x4d4>
        if (backwards)
 801670a:	2b00      	cmp	r3, #0
 801670c:	f000 8189 	beq.w	8016a22 <tTString_tick+0x7fe>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8016710:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016714:	ee79 dac8 	vsub.f32	s27, s19, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8016718:	ee38 da27 	vadd.f32	s26, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 801671c:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016720:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016724:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8016728:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 801672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016730:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016734:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016738:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 801673c:	eefc 7acd 	vcvt.u32.f32	s15, s26
 8016740:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016744:	ee39 eacd 	vsub.f32	s28, s19, s26
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016748:	4639      	mov	r1, r7
 801674a:	4630      	mov	r0, r6
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801674c:	ed1f fa49 	vldr	s30, [pc, #-292]	; 801662c <tTString_tick+0x408>
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016750:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016758:	ed5f fa4b 	vldr	s31, [pc, #-300]	; 8016630 <tTString_tick+0x40c>
    for (int i = 0; i < x->oversampling; i++)
 801675c:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8016760:	f108 0b01 	add.w	fp, r8, #1
 8016764:	ed5f ea4d 	vldr	s29, [pc, #-308]	; 8016634 <tTString_tick+0x410>
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016768:	ee3d da67 	vsub.f32	s26, s26, s15
 801676c:	ed1f aa4e 	vldr	s20, [pc, #-312]	; 8016638 <tTString_tick+0x414>
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016770:	ee3e ea27 	vadd.f32	s28, s28, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016774:	f7f9 fc40 	bl	800fff8 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016778:	4651      	mov	r1, sl
 801677a:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 801677c:	eeb0 ba40 	vmov.f32	s22, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016780:	f7f9 fc3a 	bl	800fff8 <tLagrangeDelay_tapOut>
 8016784:	ee60 5a08 	vmul.f32	s11, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016788:	4641      	mov	r1, r8
 801678a:	4630      	mov	r0, r6
 801678c:	ed5f aa55 	vldr	s21, [pc, #-340]	; 801663c <tTString_tick+0x418>
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016790:	ed1f ca55 	vldr	s24, [pc, #-340]	; 8016640 <tTString_tick+0x41c>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016794:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 8016798:	eef0 ba65 	vmov.f32	s23, s11
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 801679c:	f7f9 fc2c 	bl	800fff8 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80167a0:	4659      	mov	r1, fp
 80167a2:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 80167a4:	eeb0 ba40 	vmov.f32	s22, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80167a8:	f7f9 fc26 	bl	800fff8 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 80167ac:	ee7b 5aab 	vadd.f32	s11, s23, s23
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 80167b0:	4639      	mov	r1, r7
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80167b2:	ee20 6a0d 	vmul.f32	s12, s0, s26
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 80167b6:	4628      	mov	r0, r5
 80167b8:	eeb0 3a4a 	vmov.f32	s6, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80167bc:	ee65 4aa5 	vmul.f32	s9, s11, s11
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80167c0:	eeab 6a0e 	vfma.f32	s12, s22, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80167c4:	ee25 5aa4 	vmul.f32	s10, s11, s9
 80167c8:	ee65 7a0f 	vmul.f32	s15, s10, s30
 80167cc:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 80167d0:	ee36 6a06 	vadd.f32	s12, s12, s12
 80167d4:	eee4 7aaf 	vfma.f32	s15, s9, s31
 80167d8:	eea5 3a2a 	vfma.f32	s6, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80167dc:	ee66 3a06 	vmul.f32	s7, s12, s12
 80167e0:	ee26 4a2a 	vmul.f32	s8, s12, s21
 80167e4:	ee66 4a23 	vmul.f32	s9, s12, s7
 80167e8:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 80167ec:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 80167f0:	eee6 7a4a 	vfms.f32	s15, s12, s20
 80167f4:	eee5 7a83 	vfma.f32	s15, s11, s6
 80167f8:	eee3 7aef 	vfms.f32	s15, s7, s31
 80167fc:	eee4 7acf 	vfms.f32	s15, s9, s30
 8016800:	eee5 7a2e 	vfma.f32	s15, s10, s29
 8016804:	eee5 7a04 	vfma.f32	s15, s10, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016808:	ee67 7a8c 	vmul.f32	s15, s15, s24
 801680c:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016810:	f7f9 fbf2 	bl	800fff8 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016814:	4651      	mov	r1, sl
 8016816:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016818:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 801681c:	f7f9 fbec 	bl	800fff8 <tLagrangeDelay_tapOut>
 8016820:	ee60 5a08 	vmul.f32	s11, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016824:	4641      	mov	r1, r8
 8016826:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016828:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 801682c:	eeb0 8a65 	vmov.f32	s16, s11
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016830:	f7f9 fbe2 	bl	800fff8 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016834:	4659      	mov	r1, fp
 8016836:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016838:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 801683c:	f7f9 fbdc 	bl	800fff8 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 8016840:	ee78 5a08 	vadd.f32	s11, s16, s16
 8016844:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
 8016848:	ed94 5a59 	vldr	s10, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 801684c:	ee20 6a0d 	vmul.f32	s12, s0, s26
 8016850:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8016854:	eef0 3a4a 	vmov.f32	s7, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016858:	ee65 4aa5 	vmul.f32	s9, s11, s11
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 801685c:	9808      	ldr	r0, [sp, #32]
 801685e:	eee4 7a05 	vfma.f32	s15, s8, s10
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016862:	eead 6a8e 	vfma.f32	s12, s27, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016866:	ee25 5aa4 	vmul.f32	s10, s11, s9
 801686a:	eeb0 0a67 	vmov.f32	s0, s15
 801686e:	ee65 7a0f 	vmul.f32	s15, s10, s30
 8016872:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 8016876:	ee36 6a06 	vadd.f32	s12, s12, s12
 801687a:	eee4 7aaf 	vfma.f32	s15, s9, s31
 801687e:	eee5 3a2a 	vfma.f32	s7, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016882:	ee26 4a06 	vmul.f32	s8, s12, s12
 8016886:	ee66 6a2a 	vmul.f32	s13, s12, s21
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 801688a:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801688e:	ee64 4a06 	vmul.f32	s9, s8, s12
 8016892:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 8016896:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 801689a:	eee6 7a4a 	vfms.f32	s15, s12, s20
 801689e:	eee5 7aa3 	vfma.f32	s15, s11, s7
 80168a2:	eee4 7a6f 	vfms.f32	s15, s8, s31
 80168a6:	eee4 7acf 	vfms.f32	s15, s9, s30
 80168aa:	eee5 7a2e 	vfma.f32	s15, s10, s29
 80168ae:	eee5 7a26 	vfma.f32	s15, s10, s13
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 80168b2:	ee67 7a8c 	vmul.f32	s15, s15, s24
 80168b6:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 80168ba:	f7fa ff77 	bl	80117ac <tHighpass_tick>
 80168be:	9802      	ldr	r0, [sp, #8]
 80168c0:	f7f9 fea2 	bl	8010608 <tFeedbackLeveler_tick>
 80168c4:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
 80168c8:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 80168cc:	eeb0 aa40 	vmov.f32	s20, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 80168d0:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 80168d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80168da:	ee38 0aa7 	vadd.f32	s0, s17, s15
 80168de:	f7fa ff65 	bl	80117ac <tHighpass_tick>
 80168e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168e4:	f7f9 fe90 	bl	8010608 <tFeedbackLeveler_tick>
 80168e8:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 80168ec:	4630      	mov	r0, r6
 80168ee:	eeb0 0a4a 	vmov.f32	s0, s20
 80168f2:	f7f9 fa99 	bl	800fe28 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 80168f6:	4628      	mov	r0, r5
 80168f8:	eeb0 0a48 	vmov.f32	s0, s16
 80168fc:	f7f9 fa94 	bl	800fe28 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016900:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016902:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8016906:	f7fa fe29 	bl	801155c <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 801690a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801690c:	f7fa fe26 	bl	801155c <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016910:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016914:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016918:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
 801691c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016920:	a810      	add	r0, sp, #64	; 0x40
 8016922:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016926:	f7fd f8d7 	bl	8013ad8 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 801692a:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
 801692e:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016932:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016934:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016938:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 801693c:	eeb0 0a48 	vmov.f32	s0, s16
 8016940:	f7fa fe0c 	bl	801155c <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016944:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016946:	f7fa fe09 	bl	801155c <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 801694a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801694c:	f7fa fe06 	bl	801155c <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 8016950:	6863      	ldr	r3, [r4, #4]
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016952:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
 8016956:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016958:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
 801695c:	f73f ada1 	bgt.w	80164a2 <tTString_tick+0x27e>
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016960:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016964:	ed5f 6ac9 	vldr	s13, [pc, #-804]	; 8016644 <tTString_tick+0x420>
 8016968:	eee7 7a08 	vfma.f32	s15, s14, s16
 801696c:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
 8016970:	b013      	add	sp, #76	; 0x4c
 8016972:	ecbd 8b10 	vpop	{d8-d15}
 8016976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
 801697a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801697e:	e4af      	b.n	80162e0 <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016980:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016984:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016988:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 801698c:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016990:	4638      	mov	r0, r7
 8016992:	f7fa f9db 	bl	8010d4c <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016996:	eeb0 0a49 	vmov.f32	s0, s18
 801699a:	4630      	mov	r0, r6
 801699c:	f7fa fa1a 	bl	8010dd4 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80169a0:	eec9 6a28 	vdiv.f32	s13, s18, s17
 80169a4:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80169a8:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
 80169aa:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8016648 <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80169ae:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80169b2:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80169b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
 80169ba:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80169be:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80169c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
 80169c6:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80169ca:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80169ce:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
 80169d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d6:	bf4c      	ite	mi
 80169d8:	2301      	movmi	r3, #1
 80169da:	2300      	movpl	r3, #0
 80169dc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80169e0:	f7fa f9f8 	bl	8010dd4 <tSlide_setDest>
			x->sampleCount = 0;
 80169e4:	2200      	movs	r2, #0
		if (x->bumpOsc)
 80169e6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
 80169ea:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
 80169ee:	b183      	cbz	r3, 8016a12 <tTString_tick+0x7ee>
			if (x->bumpCount > x->timeSinceLastBump)
 80169f0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80169f4:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
 80169f8:	ee07 3a10 	vmov	s14, r3
 80169fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a08:	dc78      	bgt.n	8016afc <tTString_tick+0x8d8>
			x->bumpCount++;
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8016a10:	4613      	mov	r3, r2
			x->sampleCount++;
 8016a12:	3301      	adds	r3, #1
 8016a14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8016a18:	e4a2      	b.n	8016360 <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 8016a1a:	f7fa f993 	bl	8010d44 <tExpSmooth_setDest>
 8016a1e:	9800      	ldr	r0, [sp, #0]
 8016a20:	e429      	b.n	8016276 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016a22:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016a26:	ee79 dae7 	vsub.f32	s27, s19, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016a2a:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016a2e:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016a32:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016a36:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
 8016a3a:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016a3e:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016a42:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
 8016a46:	e679      	b.n	801673c <tTString_tick+0x518>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8016a48:	eeb0 0a4e 	vmov.f32	s0, s28
 8016a4c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016a50:	f7fa fb54 	bl	80110fc <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8016a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8016a58:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8016a5c:	eeb0 0a6d 	vmov.f32	s0, s27
 8016a60:	f7fa fb4c 	bl	80110fc <tThiranAllpassSOCascade_tick>
 8016a64:	eef0 da40 	vmov.f32	s27, s0
 8016a68:	e5f0      	b.n	801664c <tTString_tick+0x428>
        while (pickupPos < 0.0f)
 8016a6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a72:	d5d6      	bpl.n	8016a22 <tTString_tick+0x7fe>
        uint32_t backwards = 0;
 8016a74:	2300      	movs	r3, #0
 8016a76:	e63f      	b.n	80166f8 <tTString_tick+0x4d4>
		x->slideNoise *= x->muted;
 8016a78:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016a7c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
 8016a80:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 8016a84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016a88:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016a8c:	f7fa fe8e 	bl	80117ac <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8016a90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016a94:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8016a98:	f504 7088 	add.w	r0, r4, #272	; 0x110
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016a9c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8016aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016aa4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016aa8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016aac:	f7fa fd56 	bl	801155c <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 8016ab0:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 8016ab4:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 8016ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8016aba:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8016abc:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 8016ac0:	f73f acb5 	bgt.w	801642e <tTString_tick+0x20a>
 8016ac4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8016b1c <tTString_tick+0x8f8>
}
 8016ac8:	b013      	add	sp, #76	; 0x4c
 8016aca:	ecbd 8b10 	vpop	{d8-d15}
 8016ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
 8016ad2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016b20 <tTString_tick+0x8fc>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8016ad6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
 8016ada:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016b24 <tTString_tick+0x900>
 8016ade:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8016ae2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8016b1c <tTString_tick+0x8f8>
 8016ae6:	ee69 0aa0 	vmul.f32	s1, s19, s1
 8016aea:	f7fd f86d 	bl	8013bc8 <LEAF_clip>
 8016aee:	e478      	b.n	80163e2 <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 8016af0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8016b1c <tTString_tick+0x8f8>
 8016af4:	4630      	mov	r0, r6
 8016af6:	f7fa f96d 	bl	8010dd4 <tSlide_setDest>
 8016afa:	e44c      	b.n	8016396 <tTString_tick+0x172>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016afc:	eeb0 0a49 	vmov.f32	s0, s18
 8016b00:	4638      	mov	r0, r7
 8016b02:	f7fa f923 	bl	8010d4c <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016b06:	eeb0 0a49 	vmov.f32	s0, s18
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7fa f962 	bl	8010dd4 <tSlide_setDest>
			x->bumpCount++;
 8016b10:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
 8016b12:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
 8016b16:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8016b1a:	e417      	b.n	801634c <tTString_tick+0x128>
 8016b1c:	00000000 	.word	0x00000000
 8016b20:	42c80000 	.word	0x42c80000
 8016b24:	3ba3d70a 	.word	0x3ba3d70a

08016b28 <tTString_setFreq>:
{
 8016b28:	b510      	push	{r4, lr}
 8016b2a:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
 8016b2e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016b30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
 8016b34:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016b36:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016b3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016b3e:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016b42:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8016b46:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016b4a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
 8016b4e:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016b52:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016b56:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016b5a:	f7fa f8f3 	bl	8010d44 <tExpSmooth_setDest>
    Lfloat result = 0.0f;
 8016b5e:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016b60:	eeb0 0a48 	vmov.f32	s0, s16
 8016b64:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8016b68:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016b6a:	f7e9 fe8d 	bl	8000888 <arm_sin_f32>
 8016b6e:	eef0 7a40 	vmov.f32	s15, s0
 8016b72:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 8016b76:	eeb0 0a48 	vmov.f32	s0, s16
 8016b7a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016b7e:	f7e9 fd3d 	bl	80005fc <arm_cos_f32>
 8016b82:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016b86:	a801      	add	r0, sp, #4
 8016b88:	eef0 7a40 	vmov.f32	s15, s0
 8016b8c:	eeb0 0a68 	vmov.f32	s0, s17
 8016b90:	eee9 0a67 	vfms.f32	s1, s18, s15
 8016b94:	f7e9 fba8 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 8016b98:	9b01      	ldr	r3, [sp, #4]
 8016b9a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 8016b9e:	b002      	add	sp, #8
 8016ba0:	ecbd 8b04 	vpop	{d8-d9}
 8016ba4:	bd10      	pop	{r4, pc}
 8016ba6:	bf00      	nop

08016ba8 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
 8016ba8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
 8016bac:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
 8016bae:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
 8016bb2:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
 8016bb4:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 8016bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bbc:	dd04      	ble.n	8016bc8 <tTString_setDecayInSeconds+0x20>
 8016bbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
 8016bc2:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 8016bc6:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8016bc8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8016bcc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016bd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016bd4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016bd8:	f7fc fed6 	bl	8013988 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016bdc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8016be0:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016be4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016bf4 <tTString_setDecayInSeconds+0x4c>
 8016be8:	f7fc ffee 	bl	8013bc8 <LEAF_clip>
		 x->decayCoeff = 1.0f;
 8016bec:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 8016bf0:	bd10      	pop	{r4, pc}
 8016bf2:	bf00      	nop
 8016bf4:	3dcccccd 	.word	0x3dcccccd

08016bf8 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8016bf8:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 8016bfa:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 8016bfe:	4770      	bx	lr

08016c00 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
 8016c00:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
 8016c02:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
 8016c06:	4770      	bx	lr

08016c08 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8016c08:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 8016c0a:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 8016c0e:	4770      	bx	lr

08016c10 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
 8016c10:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
 8016c12:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
 8016c16:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 8016c1a:	f7fd bc7f 	b.w	801451c <tCycle_setFreq>
 8016c1e:	bf00      	nop

08016c20 <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
 8016c20:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 8016c22:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 8016c24:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8016c48 <tTString_mute+0x28>
 8016c28:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8016c2c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016c30:	f7fc feaa 	bl	8013988 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
 8016c34:	2300      	movs	r3, #0
 8016c36:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8016c3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c3e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8016c42:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
 8016c46:	bd10      	pop	{r4, pc}
 8016c48:	c30edb6d 	.word	0xc30edb6d

08016c4c <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 8016c4c:	b510      	push	{r4, lr}
 8016c4e:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 8016c52:	6804      	ldr	r4, [r0, #0]
{
 8016c54:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8016c58:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8016c5c:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016c60:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8016c64:	f7fc ffb0 	bl	8013bc8 <LEAF_clip>
 8016c68:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016c6c:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
 8016c70:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016c74:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016c78:	f7e9 fe06 	bl	8000888 <arm_sin_f32>
 8016c7c:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 8016c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016c84:	eeb0 0a48 	vmov.f32	s0, s16
 8016c88:	f7fa fb22 	bl	80112d0 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 8016c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8016c90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016c94:	f7fa fb1c 	bl	80112d0 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 8016c98:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 8016c9c:	ecbd 8b02 	vpop	{d8}
 8016ca0:	bd10      	pop	{r4, pc}
 8016ca2:	bf00      	nop

08016ca4 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 8016ca4:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 8016ca6:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8016caa:	4770      	bx	lr

08016cac <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 8016cac:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 8016cae:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
 8016cb2:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
 8016cb6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8016cba:	4770      	bx	lr

08016cbc <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 8016cbc:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 8016cbe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016cc2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8016cc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cce:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 8016cd2:	4770      	bx	lr

08016cd4 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8016cd4:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 8016cd6:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 8016cda:	4770      	bx	lr

08016cdc <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8016cdc:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 8016cde:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
 8016ce2:	4770      	bx	lr

08016ce4 <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 8016ce4:	b510      	push	{r4, lr}
 8016ce6:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 8016cea:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016cec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016cf0:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8016d60 <tTString_setRippleDepth+0x7c>
{
 8016cf4:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016cf8:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
 8016cfc:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016d64 <tTString_setRippleDepth+0x80>
 8016d00:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 8016d04:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016d10:	f7fc fe3a 	bl	8013988 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8016d14:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016d18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8016d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8016d20:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016d24:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8016d28:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016d2c:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8016d30:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8016d34:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016d38:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8016d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8016d40:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8016d44:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8016d48:	f7fa fd24 	bl	8011794 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8016d4c:	eeb0 0a68 	vmov.f32	s0, s17
 8016d50:	f104 0020 	add.w	r0, r4, #32
}
 8016d54:	ecbd 8b02 	vpop	{d8}
 8016d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8016d5c:	f7fa bd1a 	b.w	8011794 <tHighpass_setFreq>
 8016d60:	3ba3d70a 	.word	0x3ba3d70a
 8016d64:	38d1b717 	.word	0x38d1b717

08016d68 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
 8016d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
 8016d6c:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 8016d6e:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 8016d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d76:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8016d7a:	4770      	bx	lr

08016d7c <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
 8016d7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8016d80:	b510      	push	{r4, lr}
 8016d82:	ed2d 8b02 	vpush	{d8}
 8016d86:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8016d8a:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 8016d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8016d90:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 8016d92:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8016d96:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016d9a:	f7f9 fc29 	bl	80105f0 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 8016d9e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016da2:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8016da6:	f7f9 fc23 	bl	80105f0 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 8016daa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8016dc0 <tTString_setFeedbackStrength+0x44>
 8016dae:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016db2:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 8016db6:	b002      	add	sp, #8
 8016db8:	ecbd 8b02 	vpop	{d8}
 8016dbc:	bd10      	pop	{r4, pc}
 8016dbe:	bf00      	nop
 8016dc0:	3ba3d70a 	.word	0x3ba3d70a

08016dc4 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 8016dc4:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8016dc6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8016df8 <tTString_setFeedbackReactionSpeed+0x34>
{
 8016dca:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8016dce:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8016dfc <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
 8016dd2:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8016dd4:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8016dd8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8016ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8016de0:	f7f9 fc0a 	bl	80105f8 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8016de4:	eeb0 0a48 	vmov.f32	s0, s16
 8016de8:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
 8016dec:	ecbd 8b02 	vpop	{d8}
 8016df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8016df4:	f7f9 bc00 	b.w	80105f8 <tFeedbackLeveler_setFactor>
 8016df8:	3dcccccd 	.word	0x3dcccccd
 8016dfc:	3727c5ac 	.word	0x3727c5ac

08016e00 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	ed2d 8b06 	vpush	{d8-d10}
    _tTString* x = *bw;

    x->muted = 1.0f;
 8016e08:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
 8016e0c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8016e10:	b085      	sub	sp, #20
 8016e12:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8016e16:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 8016e1a:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
 8016e1e:	ed88 aa51 	vstr	s20, [r8, #324]	; 0x144
{
 8016e22:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8016e26:	f7f9 ff91 	bl	8010d4c <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8016e2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016e2e:	f508 70ac 	add.w	r0, r8, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
 8016e32:	ed9f 9aa4 	vldr	s18, [pc, #656]	; 80170c4 <tTString_pluck+0x2c4>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
 8016e36:	f108 0514 	add.w	r5, r8, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8016e3a:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8016e3e:	ed8d 0a00 	vstr	s0, [sp]
 8016e42:	f7f9 fc05 	bl	8010650 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 8016e46:	ed9d 0a00 	vldr	s0, [sp]
 8016e4a:	f508 70ae 	add.w	r0, r8, #348	; 0x15c
 8016e4e:	f7f9 fbff 	bl	8010650 <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
 8016e52:	4640      	mov	r0, r8
 8016e54:	f850 3f50 	ldr.w	r3, [r0, #80]!
 8016e58:	ed93 0a04 	vldr	s0, [r3, #16]
 8016e5c:	f7f9 ff7a 	bl	8010d54 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
 8016e60:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8016e64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8016e68:	edd8 6a3d 	vldr	s13, [r8, #244]	; 0xf4
    x->baseDelay = x->pitchSmoother->dest;
 8016e6c:	ed93 7a04 	vldr	s14, [r3, #16]
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016e70:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8016e74:	eddf 0a94 	vldr	s1, [pc, #592]	; 80170c8 <tTString_pluck+0x2c8>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016e78:	ee26 1a89 	vmul.f32	s2, s13, s18
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8016e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
    x->baseDelay = x->pitchSmoother->dest;
 8016e80:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016e84:	ee66 0aa0 	vmul.f32	s1, s13, s1
    x->muteCoeff = 1.0f;
 8016e88:	ed88 aa1e 	vstr	s20, [r8, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8016e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8016e90:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8016e94:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8016e98:	ee78 7a08 	vadd.f32	s15, s16, s16
 8016e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ea0:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016ea4:	f7fc fcce 	bl	8013844 <LEAF_mapFromZeroToOneInput>
 8016ea8:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8016eac:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80170cc <tTString_pluck+0x2cc>
 8016eb0:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016eb4:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8016eb8:	eddd 0a02 	vldr	s1, [sp, #8]
 8016ebc:	f7fc fe84 	bl	8013bc8 <LEAF_clip>
 8016ec0:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8016ec4:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 8016ec8:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016eca:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8016ece:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016ed2:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8016ed6:	eef8 9a47 	vcvt.f32.u32	s19, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8016eda:	ee17 4a10 	vmov	r4, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016ede:	ee77 7a88 	vadd.f32	s15, s15, s16
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8016ee2:	ee39 9a89 	vadd.f32	s18, s19, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016ee6:	ee8a 7a27 	vdiv.f32	s14, s20, s15
 8016eea:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
 8016eee:	f7f8 ff8d 	bl	800fe0c <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016ef2:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
 8016ef6:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016ef8:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
 8016efc:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016f00:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016f02:	edc8 7a5d 	vstr	s15, [r8, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	f000 80c7 	beq.w	801709a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016f0c:	f108 0618 	add.w	r6, r8, #24
 8016f10:	2c00      	cmp	r4, #0
 8016f12:	f000 80d5 	beq.w	80170c0 <tTString_pluck+0x2c0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016f16:	eddf aa6e 	vldr	s21, [pc, #440]	; 80170d0 <tTString_pluck+0x2d0>
 8016f1a:	42a3      	cmp	r3, r4
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016f1c:	f04f 0900 	mov.w	r9, #0
 8016f20:	eba7 0a04 	sub.w	sl, r7, r4
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016f24:	ee8a aa89 	vdiv.f32	s20, s21, s18
 8016f28:	bf28      	it	cs
 8016f2a:	4623      	movcs	r3, r4
 8016f2c:	9301      	str	r3, [sp, #4]
 8016f2e:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
 8016f32:	454c      	cmp	r4, r9
 8016f34:	eba7 0b09 	sub.w	fp, r7, r9
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016f38:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8016f3c:	ee20 0a0a 	vmul.f32	s0, s0, s20
        if (i == pluckPointInt)
 8016f40:	f000 8081 	beq.w	8017046 <tTString_pluck+0x246>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016f44:	f7fc fe48 	bl	8013bd8 <LEAF_tanh>
 8016f48:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016f4c:	4649      	mov	r1, r9
 8016f4e:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016f50:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016f54:	eeb0 0a48 	vmov.f32	s0, s16
 8016f58:	f7f9 f8b2 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016f5c:	4659      	mov	r1, fp
 8016f5e:	eeb0 0a49 	vmov.f32	s0, s18
 8016f62:	4628      	mov	r0, r5
 8016f64:	f7f9 f8ac 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016f68:	4649      	mov	r1, r9
 8016f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8016f6e:	4630      	mov	r0, r6
 8016f70:	f7f9 f8a6 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016f74:	eeb0 0a49 	vmov.f32	s0, s18
 8016f78:	4659      	mov	r1, fp
 8016f7a:	4630      	mov	r0, r6
 8016f7c:	f7f9 f8a0 	bl	80100c0 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016f80:	f109 0901 	add.w	r9, r9, #1
 8016f84:	9b01      	ldr	r3, [sp, #4]
 8016f86:	454b      	cmp	r3, r9
 8016f88:	d8d1      	bhi.n	8016f2e <tTString_pluck+0x12e>
 8016f8a:	9b00      	ldr	r3, [sp, #0]
 8016f8c:	454b      	cmp	r3, r9
 8016f8e:	f240 8084 	bls.w	801709a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016f92:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016f96:	ed9f aa4e 	vldr	s20, [pc, #312]	; 80170d0 <tTString_pluck+0x2d0>
 8016f9a:	eba7 0a04 	sub.w	sl, r7, r4
 8016f9e:	e02a      	b.n	8016ff6 <tTString_pluck+0x1f6>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016fa0:	eeb0 0a6a 	vmov.f32	s0, s21
 8016fa4:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016fa8:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8016fac:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8016fb0:	f7fc fe12 	bl	8013bd8 <LEAF_tanh>
 8016fb4:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016fb8:	4649      	mov	r1, r9
 8016fba:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016fbc:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8016fc4:	f7f9 f87c 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016fc8:	4659      	mov	r1, fp
 8016fca:	eeb0 0a49 	vmov.f32	s0, s18
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f7f9 f876 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016fd4:	4649      	mov	r1, r9
 8016fd6:	eeb0 0a48 	vmov.f32	s0, s16
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7f9 f870 	bl	80100c0 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016fe0:	f109 0901 	add.w	r9, r9, #1
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016fe4:	4659      	mov	r1, fp
 8016fe6:	eeb0 0a49 	vmov.f32	s0, s18
 8016fea:	4630      	mov	r0, r6
 8016fec:	f7f9 f868 	bl	80100c0 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016ff0:	9b00      	ldr	r3, [sp, #0]
 8016ff2:	454b      	cmp	r3, r9
 8016ff4:	d951      	bls.n	801709a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016ff6:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
 8016ffa:	454c      	cmp	r4, r9
 8016ffc:	eba7 0b09 	sub.w	fp, r7, r9
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8017000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017004:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
 8017008:	d1ca      	bne.n	8016fa0 <tTString_pluck+0x1a0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 801700a:	eeb0 0a4a 	vmov.f32	s0, s20
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 801700e:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8017012:	f7fc fde1 	bl	8013bd8 <LEAF_tanh>
 8017016:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801701a:	4621      	mov	r1, r4
 801701c:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801701e:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017022:	eeb0 0a48 	vmov.f32	s0, s16
 8017026:	f7f9 f84b 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801702a:	4651      	mov	r1, sl
 801702c:	eeb0 0a49 	vmov.f32	s0, s18
 8017030:	4628      	mov	r0, r5
 8017032:	f7f9 f845 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017036:	4621      	mov	r1, r4
 8017038:	eeb0 0a48 	vmov.f32	s0, s16
 801703c:	4630      	mov	r0, r6
 801703e:	f7f9 f83f 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8017042:	4651      	mov	r1, sl
 8017044:	e7cf      	b.n	8016fe6 <tTString_pluck+0x1e6>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8017046:	eeb0 0a6a 	vmov.f32	s0, s21
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 801704a:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
 801704e:	f7fc fdc3 	bl	8013bd8 <LEAF_tanh>
 8017052:	ee20 8a28 	vmul.f32	s16, s0, s17
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017056:	4621      	mov	r1, r4
 8017058:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801705a:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801705e:	eeb0 0a48 	vmov.f32	s0, s16
 8017062:	f7f9 f82d 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017066:	4651      	mov	r1, sl
 8017068:	eeb0 0a49 	vmov.f32	s0, s18
 801706c:	4628      	mov	r0, r5
 801706e:	f7f9 f827 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017072:	eeb0 0a48 	vmov.f32	s0, s16
 8017076:	4621      	mov	r1, r4
 8017078:	4630      	mov	r0, r6
 801707a:	f7f9 f821 	bl	80100c0 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 801707e:	eeb0 0a49 	vmov.f32	s0, s18
 8017082:	4651      	mov	r1, sl
 8017084:	4630      	mov	r0, r6
 8017086:	f7f9 f81b 	bl	80100c0 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 801708a:	9b01      	ldr	r3, [sp, #4]
 801708c:	4599      	cmp	r9, r3
 801708e:	f4ff af4e 	bcc.w	8016f2e <tTString_pluck+0x12e>
 8017092:	9b00      	ldr	r3, [sp, #0]
 8017094:	454b      	cmp	r3, r9
 8017096:	f63f af7c 	bhi.w	8016f92 <tTString_pluck+0x192>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 801709a:	f108 0054 	add.w	r0, r8, #84	; 0x54
 801709e:	f7fa f85b 	bl	8011158 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 80170a2:	f108 0058 	add.w	r0, r8, #88	; 0x58
 80170a6:	f7fa f857 	bl	8011158 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 80170aa:	eeb0 0a68 	vmov.f32	s0, s17
 80170ae:	f508 70be 	add.w	r0, r8, #380	; 0x17c
}
 80170b2:	b005      	add	sp, #20
 80170b4:	ecbd 8b06 	vpop	{d8-d10}
 80170b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
 80170bc:	f7f9 be46 	b.w	8010d4c <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80170c0:	46a1      	mov	r9, r4
 80170c2:	e766      	b.n	8016f92 <tTString_pluck+0x192>
 80170c4:	3a83126f 	.word	0x3a83126f
 80170c8:	3e511111 	.word	0x3e511111
 80170cc:	00000000 	.word	0x00000000
 80170d0:	3f99999a 	.word	0x3f99999a

080170d4 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 80170d4:	b510      	push	{r4, lr}
 80170d6:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 80170da:	6804      	ldr	r4, [r0, #0]
{
 80170dc:	eeb0 8a60 	vmov.f32	s16, s1
 80170e0:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 80170e4:	edd4 7a01 	vldr	s15, [r4, #4]
 80170e8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80170ec:	edd4 0a02 	vldr	s1, [r4, #8]
 80170f0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 80170f4:	ee68 0a20 	vmul.f32	s1, s16, s1
 80170f8:	f7f9 ff1c 	bl	8010f34 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 80170fc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8017100:	edd4 0a02 	vldr	s1, [r4, #8]
 8017104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017108:	ed94 7a01 	vldr	s14, [r4, #4]
 801710c:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8017110:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8017114:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 8017118:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801711c:	f7f9 ff0a 	bl	8010f34 <tThiranAllpassSOCascade_setCoeff>
 8017120:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8017124:	ecbd 8b02 	vpop	{d8}
 8017128:	bd10      	pop	{r4, pc}
 801712a:	bf00      	nop

0801712c <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
 801712c:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8017130:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
 8017132:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
 8017136:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 801713a:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 801713e:	4770      	bx	lr

08017140 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
 8017140:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8017142:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
 8017144:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
 8017148:	b169      	cbz	r1, 8017166 <tTString_setWoundOrUnwound+0x26>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
 801714a:	f504 708c 	add.w	r0, r4, #280	; 0x118
 801714e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8017184 <tTString_setWoundOrUnwound+0x44>
 8017152:	f7f9 fde5 	bl	8010d20 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8017156:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 801715a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8017188 <tTString_setWoundOrUnwound+0x48>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
 801715e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8017162:	f7f9 bddd 	b.w	8010d20 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
 8017166:	f504 708c 	add.w	r0, r4, #280	; 0x118
 801716a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801718c <tTString_setWoundOrUnwound+0x4c>
 801716e:	f7f9 fdd7 	bl	8010d20 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8017172:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8017176:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8017190 <tTString_setWoundOrUnwound+0x50>
}
 801717a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 801717e:	f7f9 bdcf 	b.w	8010d20 <tExpSmooth_setFactor>
 8017182:	bf00      	nop
 8017184:	3a03126f 	.word	0x3a03126f
 8017188:	3a51b717 	.word	0x3a51b717
 801718c:	3ba3d70a 	.word	0x3ba3d70a
 8017190:	3b83126f 	.word	0x3b83126f

08017194 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
    _tTString* x = *bw;
    x->windingsPerInch = windings;
 8017194:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8017198:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
 801719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801719e:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
 80171a2:	4770      	bx	lr

080171a4 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->pickupFilter,cutoff);
 80171a4:	6800      	ldr	r0, [r0, #0]
 80171a6:	30b8      	adds	r0, #184	; 0xb8
 80171a8:	f7fa ba0e 	b.w	80115c8 <tSVF_setFreq>

080171ac <tTString_setPickupFilterQ>:

}
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
 80171ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80171b0:	6800      	ldr	r0, [r0, #0]
 80171b2:	30b8      	adds	r0, #184	; 0xb8
 80171b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80171b8:	f7fa ba80 	b.w	80116bc <tSVF_setQ>

080171bc <tTString_setPeakFilterFreq>:
}

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->peakFilt,cutoff);
 80171bc:	6800      	ldr	r0, [r0, #0]
 80171be:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80171c2:	f7fa ba01 	b.w	80115c8 <tSVF_setFreq>
 80171c6:	bf00      	nop

080171c8 <tTString_setPeakFilterQ>:

}
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->peakFilt,Q+0.5f);
 80171c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80171cc:	6800      	ldr	r0, [r0, #0]
 80171ce:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80171d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80171d6:	f7fa ba71 	b.w	80116bc <tSVF_setQ>
 80171da:	bf00      	nop

080171dc <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
 80171dc:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
 80171de:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
 80171e0:	686b      	ldr	r3, [r5, #4]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	dd09      	ble.n	80171fa <tStiffString_free+0x1e>
 80171e6:	2400      	movs	r4, #0
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
 80171e8:	68a8      	ldr	r0, [r5, #8]
 80171ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 80171ee:	3401      	adds	r4, #1
    	tCycle_free(&p->osc[i]);
 80171f0:	f7fd f96a 	bl	80144c8 <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
 80171f4:	686b      	ldr	r3, [r5, #4]
 80171f6:	42a3      	cmp	r3, r4
 80171f8:	dcf6      	bgt.n	80171e8 <tStiffString_free+0xc>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
 80171fa:	6829      	ldr	r1, [r5, #0]
 80171fc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80171fe:	f7fd f8a7 	bl	8014350 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
 8017202:	6829      	ldr	r1, [r5, #0]
 8017204:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8017206:	f7fd f8a3 	bl	8014350 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
 801720a:	6829      	ldr	r1, [r5, #0]
 801720c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801720e:	f7fd f89f 	bl	8014350 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
 8017212:	6829      	ldr	r1, [r5, #0]
 8017214:	68e8      	ldr	r0, [r5, #12]
 8017216:	f7fd f89b 	bl	8014350 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
 801721a:	6829      	ldr	r1, [r5, #0]
 801721c:	6928      	ldr	r0, [r5, #16]
 801721e:	f7fd f897 	bl	8014350 <mpool_free>
    mpool_free((char *) p, p->mempool);
 8017222:	6829      	ldr	r1, [r5, #0]
 8017224:	4628      	mov	r0, r5
}
 8017226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char *) p, p->mempool);
 801722a:	f7fd b891 	b.w	8014350 <mpool_free>
 801722e:	bf00      	nop

08017230 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
 8017230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017232:	ed2d 8b08 	vpush	{d8-d11}
	_tStiffString *p = *pm;
 8017236:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8017238:	6863      	ldr	r3, [r4, #4]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 801723a:	edd4 9a06 	vldr	s19, [r4, #24]
    for (int i = 0; i < p->numModes; ++i) {
 801723e:	2b00      	cmp	r3, #0
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 8017240:	ee69 9aa9 	vmul.f32	s19, s19, s19
    for (int i = 0; i < p->numModes; ++i) {
 8017244:	dd60      	ble.n	8017308 <tStiffString_updateOscillators+0xd8>
 8017246:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
	Lfloat compensation = 0.0f;
 801724a:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8017310 <tStiffString_updateOscillators+0xe0>
      int n = i + 1;
      int n_sq = n * n;
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
      //Lfloat w0 = n * sqrtf(1.0f + kappa_sq * n_sq);
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 801724e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    for (int i = 0; i < p->numModes; ++i) {
 8017252:	2500      	movs	r5, #0
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8017254:	eef0 aa49 	vmov.f32	s21, s18
 8017258:	ee69 9a8a 	vmul.f32	s19, s19, s20
    	  compensation = 1.0f / w;
 801725c:	462e      	mov	r6, r5
 801725e:	3501      	adds	r5, #1
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017260:	eef0 6a4b 	vmov.f32	s13, s22
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8017264:	ed94 6a0a 	vldr	s12, [r4, #40]	; 0x28
      int n_sq = n * n;
 8017268:	fb05 f305 	mul.w	r3, r5, r5
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 801726c:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017270:	ee07 5a90 	vmov	s15, r5
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8017274:	eeb0 8a4b 	vmov.f32	s16, s22
      int n_sq = n * n;
 8017278:	ee07 3a10 	vmov	s14, r3
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 801727c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017284:	00b7      	lsls	r7, r6, #2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8017286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 801728a:	eeb0 0a6a 	vmov.f32	s0, s21
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 801728e:	eee7 6a29 	vfma.f32	s13, s14, s19
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8017292:	eee6 8a07 	vfma.f32	s17, s12, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017296:	ee67 7aa6 	vmul.f32	s15, s15, s13
      Lfloat zeta = sig / w0;
 801729a:	ee88 7aa7 	vdiv.f32	s14, s17, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 801729e:	ee27 7a47 	vnmul.f32	s14, s14, s14
 80172a2:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80172a6:	ee28 8a27 	vmul.f32	s16, s16, s15
      if (i == 0)
 80172aa:	b90e      	cbnz	r6, 80172b0 <tStiffString_updateOscillators+0x80>
    	  compensation = 1.0f / w;
 80172ac:	ee8b 9a08 	vdiv.f32	s18, s22, s16
      Lfloat	testFreq = (p->freqHz * w);
 80172b0:	ed94 7a05 	vldr	s14, [r4, #20]
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 80172b4:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 80172b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 80172ba:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
      Lfloat	testFreq = (p->freqHz * w);
 80172be:	ee28 8a07 	vmul.f32	s16, s16, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 80172c2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 80172c6:	ee78 7a67 	vsub.f32	s15, s16, s15
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 80172ca:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80172ce:	f7fc fc7b 	bl	8013bc8 <LEAF_clip>
 80172d2:	ed86 0a00 	vstr	s0, [r6]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
 80172d6:	68a0      	ldr	r0, [r4, #8]
 80172d8:	ee29 0a08 	vmul.f32	s0, s18, s16
 80172dc:	4438      	add	r0, r7
 80172de:	f7fd f91d 	bl	801451c <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
 80172e2:	ed94 0a05 	vldr	s0, [r4, #20]
 80172e6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80172ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80172ee:	ee28 0ac0 	vnmul.f32	s0, s17, s0
 80172f2:	f7fc fb6f 	bl	80139d4 <fastExp4>
	  p->decayScalar[i] = r * r;
 80172f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80172fc:	443b      	add	r3, r7
 80172fe:	ed83 0a00 	vstr	s0, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8017302:	6863      	ldr	r3, [r4, #4]
 8017304:	42ab      	cmp	r3, r5
 8017306:	dca9      	bgt.n	801725c <tStiffString_updateOscillators+0x2c>
    }
}
 8017308:	ecbd 8b08 	vpop	{d8-d11}
 801730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801730e:	bf00      	nop
 8017310:	00000000 	.word	0x00000000

08017314 <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
 8017314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017316:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
 801731a:	6807      	ldr	r7, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
 801731c:	eddf 7a20 	vldr	s15, [pc, #128]	; 80173a0 <tStiffString_updateOutputWeights+0x8c>
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
 8017320:	687b      	ldr	r3, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
 8017322:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
 8017326:	2b00      	cmp	r3, #0
		Lfloat x0 = p->pickupPos * PI;
 8017328:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
 801732c:	dd34      	ble.n	8017398 <tStiffString_updateOutputWeights+0x84>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 801732e:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
 8017330:	2500      	movs	r5, #0
		Lfloat totalGain = 0.0f;
 8017332:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 80173a4 <tStiffString_updateOutputWeights+0x90>
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 8017336:	3501      	adds	r5, #1
 8017338:	ee07 5a90 	vmov	s15, r5
 801733c:	00ac      	lsls	r4, r5, #2
 801733e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017342:	3c04      	subs	r4, #4
 8017344:	4426      	add	r6, r4
 8017346:	ee20 0a28 	vmul.f32	s0, s0, s17
 801734a:	f7e9 fa9d 	bl	8000888 <arm_sin_f32>
 801734e:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
 8017352:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8017354:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
 8017358:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 801735a:	eb06 0004 	add.w	r0, r6, r4
 801735e:	4422      	add	r2, r4
 8017360:	edd0 7a00 	vldr	s15, [r0]
 8017364:	ed92 7a00 	vldr	s14, [r2]
 8017368:	eef0 7ae7 	vabs.f32	s15, s15
 801736c:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
 8017370:	dbe1      	blt.n	8017336 <tStiffString_updateOutputWeights+0x22>
 8017372:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80173a8 <tStiffString_updateOutputWeights+0x94>
 8017376:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
	  }
	  if (totalGain < 0.01f)
	  {
		  totalGain = 0.01f;
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
 801737a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801737e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80173a8 <tStiffString_updateOutputWeights+0x94>
 8017382:	f7fc fc21 	bl	8013bc8 <LEAF_clip>
	  p->gainComp = 1.0f / totalGain;
 8017386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801738a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801738e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
 8017392:	ecbd 8b02 	vpop	{d8}
 8017396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  for (int i = 0; i < p->numModes; ++i)
 8017398:	eddf 0a03 	vldr	s1, [pc, #12]	; 80173a8 <tStiffString_updateOutputWeights+0x94>
 801739c:	e7ed      	b.n	801737a <tStiffString_updateOutputWeights+0x66>
 801739e:	bf00      	nop
 80173a0:	40490fdb 	.word	0x40490fdb
 80173a4:	00000000 	.word	0x00000000
 80173a8:	3c23d70a 	.word	0x3c23d70a

080173ac <tStiffString_initToPool>:
{
 80173ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 80173b0:	6813      	ldr	r3, [r2, #0]
{
 80173b2:	b082      	sub	sp, #8
 80173b4:	460e      	mov	r6, r1
 80173b6:	4680      	mov	r8, r0
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 80173b8:	4619      	mov	r1, r3
 80173ba:	2054      	movs	r0, #84	; 0x54
    _tMempool* m = *mp;
 80173bc:	9301      	str	r3, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 80173be:	f7fc ff05 	bl	80141cc <mpool_alloc>
    p->freqHz = 440.0f;
 80173c2:	4b2f      	ldr	r3, [pc, #188]	; (8017480 <tStiffString_initToPool+0xd4>)
    p->nyquist = p->sampleRate * 0.5f;
 80173c4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 80173c8:	f8c8 0000 	str.w	r0, [r8]
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 80173cc:	00b7      	lsls	r7, r6, #2
    p->freqHz = 440.0f;
 80173ce:	6143      	str	r3, [r0, #20]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 80173d0:	4605      	mov	r5, r0
    p->pluckPos = 0.2f;
 80173d2:	4b2c      	ldr	r3, [pc, #176]	; (8017484 <tStiffString_initToPool+0xd8>)
    p->mempool = m;
 80173d4:	9a01      	ldr	r2, [sp, #4]
    p->pluckPos = 0.2f;
 80173d6:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
 80173d8:	4b2b      	ldr	r3, [pc, #172]	; (8017488 <tStiffString_initToPool+0xdc>)
    p->mempool = m;
 80173da:	6002      	str	r2, [r0, #0]
    p->pickupPos = 0.3f;
 80173dc:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
 80173de:	4b2b      	ldr	r3, [pc, #172]	; (801748c <tStiffString_initToPool+0xe0>)
    p->sampleRate = m->leaf->sampleRate;
 80173e0:	9901      	ldr	r1, [sp, #4]
    p->decay = 0.0001f;
 80173e2:	6243      	str	r3, [r0, #36]	; 0x24
    p->decayHighFreq = 0.0003f;
 80173e4:	4b2a      	ldr	r3, [pc, #168]	; (8017490 <tStiffString_initToPool+0xe4>)
    p->stiffness = 0.001f;
 80173e6:	4a2b      	ldr	r2, [pc, #172]	; (8017494 <tStiffString_initToPool+0xe8>)
    p->decayHighFreq = 0.0003f;
 80173e8:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
 80173ea:	4b2b      	ldr	r3, [pc, #172]	; (8017498 <tStiffString_initToPool+0xec>)
    p->stiffness = 0.001f;
 80173ec:	6182      	str	r2, [r0, #24]
    p->numModes = numModes;
 80173ee:	6046      	str	r6, [r0, #4]
    p->muteDecay = 0.4f;
 80173f0:	6483      	str	r3, [r0, #72]	; 0x48
    p->sampleRate = m->leaf->sampleRate;
 80173f2:	684b      	ldr	r3, [r1, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 80173f4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 801749c <tStiffString_initToPool+0xf0>
    p->sampleRate = m->leaf->sampleRate;
 80173f8:	edd3 7a00 	vldr	s15, [r3]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 80173fc:	ee86 7a27 	vdiv.f32	s14, s12, s15
    p->sampleRate = m->leaf->sampleRate;
 8017400:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 8017404:	684b      	ldr	r3, [r1, #4]
 8017406:	68db      	ldr	r3, [r3, #12]
    p->nyquist = p->sampleRate * 0.5f;
 8017408:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 801740c:	6303      	str	r3, [r0, #48]	; 0x30
    p->amp = 0.0f;
 801740e:	2300      	movs	r3, #0
    p->nyquist = p->sampleRate * 0.5f;
 8017410:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    p->amp = 0.0f;
 8017414:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
 8017416:	6503      	str	r3, [r0, #80]	; 0x50
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8017418:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 801741c:	4638      	mov	r0, r7
 801741e:	f7fc fed5 	bl	80141cc <mpool_alloc>
    for (int i = 0; i < numModes; ++i) {
 8017422:	2e00      	cmp	r6, #0
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8017424:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
 8017426:	dd0a      	ble.n	801743e <tStiffString_initToPool+0x92>
 8017428:	2400      	movs	r4, #0
 801742a:	e000      	b.n	801742e <tStiffString_initToPool+0x82>
    	tCycle_initToPool(&p->osc[i], &m);
 801742c:	68a8      	ldr	r0, [r5, #8]
 801742e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < numModes; ++i) {
 8017432:	3401      	adds	r4, #1
    	tCycle_initToPool(&p->osc[i], &m);
 8017434:	a901      	add	r1, sp, #4
 8017436:	f7fd f82b 	bl	8014490 <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
 801743a:	42a6      	cmp	r6, r4
 801743c:	d1f6      	bne.n	801742c <tStiffString_initToPool+0x80>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801743e:	9901      	ldr	r1, [sp, #4]
 8017440:	4638      	mov	r0, r7
 8017442:	f7fc fec3 	bl	80141cc <mpool_alloc>
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017446:	9901      	ldr	r1, [sp, #4]
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017448:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801744a:	4638      	mov	r0, r7
 801744c:	f7fc febe 	bl	80141cc <mpool_alloc>
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017450:	9901      	ldr	r1, [sp, #4]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017452:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017454:	4638      	mov	r0, r7
 8017456:	f7fc feb9 	bl	80141cc <mpool_alloc>
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801745a:	9901      	ldr	r1, [sp, #4]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801745c:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801745e:	4638      	mov	r0, r7
 8017460:	f7fc feb4 	bl	80141cc <mpool_alloc>
 8017464:	4603      	mov	r3, r0
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017466:	9901      	ldr	r1, [sp, #4]
 8017468:	4638      	mov	r0, r7
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801746a:	63ab      	str	r3, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801746c:	f7fc feae 	bl	80141cc <mpool_alloc>
 8017470:	4603      	mov	r3, r0
    tStiffString_updateOutputWeights(pm);
 8017472:	4640      	mov	r0, r8
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017474:	63eb      	str	r3, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
 8017476:	f7ff ff4d 	bl	8017314 <tStiffString_updateOutputWeights>
}
 801747a:	b002      	add	sp, #8
 801747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017480:	43dc0000 	.word	0x43dc0000
 8017484:	3e4ccccd 	.word	0x3e4ccccd
 8017488:	3e99999a 	.word	0x3e99999a
 801748c:	38d1b717 	.word	0x38d1b717
 8017490:	399d4952 	.word	0x399d4952
 8017494:	3a83126f 	.word	0x3a83126f
 8017498:	3ecccccd 	.word	0x3ecccccd
 801749c:	c1200001 	.word	0xc1200001

080174a0 <tStiffString_init>:
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
 80174a0:	3218      	adds	r2, #24
 80174a2:	f7ff bf83 	b.w	80173ac <tStiffString_initToPool>
 80174a6:	bf00      	nop

080174a8 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
 80174a8:	b570      	push	{r4, r5, r6, lr}
 80174aa:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
 80174ae:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 80174b0:	6863      	ldr	r3, [r4, #4]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	dd3b      	ble.n	801752e <tStiffString_tick+0x86>
 80174b6:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
 80174b8:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8017534 <tStiffString_tick+0x8c>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174bc:	68a0      	ldr	r0, [r4, #8]
 80174be:	00b5      	lsls	r5, r6, #2
 80174c0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 80174c4:	3601      	adds	r6, #1
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174c6:	f7fd f803 	bl	80144d0 <tCycle_tick>
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174ca:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174ce:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80174d2:	442b      	add	r3, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174d4:	442a      	add	r2, r5
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174d6:	4428      	add	r0, r5
 80174d8:	4429      	add	r1, r5
 80174da:	edd3 6a00 	vldr	s13, [r3]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174de:	ed92 7a00 	vldr	s14, [r2]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174e2:	ed91 6a00 	vldr	s12, [r1]
 80174e6:	edd0 7a00 	vldr	s15, [r0]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174ea:	ee26 7a87 	vmul.f32	s14, s13, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80174f0:	ee67 7a86 	vmul.f32	s15, s15, s12
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174f4:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174f8:	442a      	add	r2, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 80174fa:	ee27 7a06 	vmul.f32	s14, s14, s12
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80174fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017502:	edd2 7a00 	vldr	s15, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017506:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 801750a:	6863      	ldr	r3, [r4, #4]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 801750c:	ee20 0a26 	vmul.f32	s0, s0, s13
    for (int i = 0; i < p->numModes; ++i) {
 8017510:	42b3      	cmp	r3, r6
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017512:	eea0 8a27 	vfma.f32	s16, s0, s15
    for (int i = 0; i < p->numModes; ++i) {
 8017516:	dcd1      	bgt.n	80174bc <tStiffString_tick+0x14>
    }
    return sample * p->amp * p->gainComp;
 8017518:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 801751c:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8017520:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8017524:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017528:	ecbd 8b02 	vpop	{d8}
 801752c:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat sample = 0.0f;
 801752e:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8017534 <tStiffString_tick+0x8c>
 8017532:	e7f1      	b.n	8017518 <tStiffString_tick+0x70>
 8017534:	00000000 	.word	0x00000000

08017538 <tStiffString_setFreq>:
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8017538:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 801753a:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
 801753e:	f7ff be77 	b.w	8017230 <tStiffString_updateOscillators>
 8017542:	bf00      	nop

08017544 <tStiffString_mute>:
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
    p->muteDecay = 0.99f;
 8017544:	4a01      	ldr	r2, [pc, #4]	; (801754c <tStiffString_mute+0x8>)
    _tStiffString *p = *pm;
 8017546:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
 8017548:	649a      	str	r2, [r3, #72]	; 0x48
}
 801754a:	4770      	bx	lr
 801754c:	3f7d70a4 	.word	0x3f7d70a4

08017550 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
 8017550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017554:	ed2d 8b04 	vpush	{d8-d9}
    _tStiffString* p = *mp;
 8017558:	6807      	ldr	r7, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
    p->muteDecay = 1.0f;
 801755a:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
    Lfloat x0 = p->pluckPos * PI;
 801755e:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80175e4 <tStiffString_pluck+0x94>
{
 8017562:	eef0 9a40 	vmov.f32	s19, s0
    for (int i = 0; i < p->numModes; ++i) {
 8017566:	687b      	ldr	r3, [r7, #4]
{
 8017568:	4606      	mov	r6, r0
    Lfloat x0 = p->pluckPos * PI;
 801756a:	edd7 8a07 	vldr	s17, [r7, #28]
    for (int i = 0; i < p->numModes; ++i) {
 801756e:	2b00      	cmp	r3, #0
    p->muteDecay = 1.0f;
 8017570:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
    Lfloat x0 = p->pluckPos * PI;
 8017574:	ee68 8a88 	vmul.f32	s17, s17, s16
    for (int i = 0; i < p->numModes; ++i) {
 8017578:	dd2a      	ble.n	80175d0 <tStiffString_pluck+0x80>
        int n = i + 1;
        float denom = n * n * x0 * (PI - x0);
 801757a:	ee38 8a68 	vsub.f32	s16, s16, s17
 801757e:	2500      	movs	r5, #0
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017580:	ed9f 9a19 	vldr	s18, [pc, #100]	; 80175e8 <tStiffString_pluck+0x98>
    for (int i = 0; i < p->numModes; ++i) {
 8017584:	462c      	mov	r4, r5
 8017586:	ee28 8a28 	vmul.f32	s16, s16, s17
        int n = i + 1;
 801758a:	3401      	adds	r4, #1
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 801758c:	ee07 4a90 	vmov	s15, r4
 8017590:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017594:	ee20 0a28 	vmul.f32	s0, s0, s17
 8017598:	f7e9 f976 	bl	8000888 <arm_sin_f32>
        float denom = n * n * x0 * (PI - x0);
 801759c:	fb04 f304 	mul.w	r3, r4, r4
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80175a0:	ee30 0a00 	vadd.f32	s0, s0, s0
        float denom = n * n * x0 * (PI - x0);
 80175a4:	ee07 3a90 	vmov	s15, r3
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80175a8:	68fb      	ldr	r3, [r7, #12]
        float denom = n * n * x0 * (PI - x0);
 80175aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80175ae:	442b      	add	r3, r5
        float denom = n * n * x0 * (PI - x0);
 80175b0:	ee67 7a88 	vmul.f32	s15, s15, s16
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80175b4:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
 80175b8:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80175bc:	ed83 7a00 	vstr	s14, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
 80175c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c2:	442b      	add	r3, r5
 80175c4:	3504      	adds	r5, #4
 80175c6:	f8c3 8000 	str.w	r8, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	42a3      	cmp	r3, r4
 80175ce:	dcdc      	bgt.n	801758a <tStiffString_pluck+0x3a>
    }
    p->amp = amp;
 80175d0:	edc7 9a13 	vstr	s19, [r7, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
 80175d4:	4630      	mov	r0, r6
}
 80175d6:	ecbd 8b04 	vpop	{d8-d9}
 80175da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tStiffString_updateOutputWeights(mp);
 80175de:	f7ff be99 	b.w	8017314 <tStiffString_updateOutputWeights>
 80175e2:	bf00      	nop
 80175e4:	40490fdb 	.word	0x40490fdb
 80175e8:	3a83126f 	.word	0x3a83126f

080175ec <tStiffString_setStiffnessNoUpdate>:
 80175ec:	b510      	push	{r4, lr}
 80175ee:	6804      	ldr	r4, [r0, #0]
 80175f0:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017604 <tStiffString_setStiffnessNoUpdate+0x18>
 80175f4:	eddf 0a04 	vldr	s1, [pc, #16]	; 8017608 <tStiffString_setStiffnessNoUpdate+0x1c>
 80175f8:	f7fc f924 	bl	8013844 <LEAF_mapFromZeroToOneInput>
 80175fc:	ed84 0a06 	vstr	s0, [r4, #24]
 8017600:	bd10      	pop	{r4, pc}
 8017602:	bf00      	nop
 8017604:	3e4ccccd 	.word	0x3e4ccccd
 8017608:	00000000 	.word	0x00000000

0801760c <tStiffString_setPickupPosNoUpdate>:

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
}

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 801760c:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 801760e:	6804      	ldr	r4, [r0, #0]
{
 8017610:	eef0 0a40 	vmov.f32	s1, s0

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
 8017614:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017628 <tStiffString_setPickupPosNoUpdate+0x1c>
 8017618:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801762c <tStiffString_setPickupPosNoUpdate+0x20>
 801761c:	f7fc fad4 	bl	8013bc8 <LEAF_clip>
 8017620:	ed84 0a08 	vstr	s0, [r4, #32]
}
 8017624:	bd10      	pop	{r4, pc}
 8017626:	bf00      	nop
 8017628:	3f7d70a4 	.word	0x3f7d70a4
 801762c:	3c23d70a 	.word	0x3c23d70a

08017630 <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8017630:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 8017632:	6804      	ldr	r4, [r0, #0]
{
 8017634:	eef0 0a40 	vmov.f32	s1, s0

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
 8017638:	ed9f 1a04 	vldr	s2, [pc, #16]	; 801764c <tStiffString_setPluckPosNoUpdate+0x1c>
 801763c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8017650 <tStiffString_setPluckPosNoUpdate+0x20>
 8017640:	f7fc fac2 	bl	8013bc8 <LEAF_clip>
 8017644:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8017648:	bd10      	pop	{r4, pc}
 801764a:	bf00      	nop
 801764c:	3f7d70a4 	.word	0x3f7d70a4
 8017650:	3c23d70a 	.word	0x3c23d70a

08017654 <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8017654:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8017656:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801765a:	4770      	bx	lr

0801765c <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
 801765c:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
 801765e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
 8017662:	4770      	bx	lr

08017664 <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
 8017664:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
 8017666:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 801766a:	4770      	bx	lr
 801766c:	0000      	movs	r0, r0
	...

08017670 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 8017670:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
 8017672:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017674:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8017678:	eddf 3a53 	vldr	s7, [pc, #332]	; 80177c8 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
 801767c:	eddf 6a53 	vldr	s13, [pc, #332]	; 80177cc <glottis_setup_waveform+0x15c>
 8017680:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80177d0 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
 8017684:	ed9f 4a53 	vldr	s8, [pc, #332]	; 80177d4 <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017688:	eddf 4a53 	vldr	s9, [pc, #332]	; 80177d8 <glottis_setup_waveform+0x168>
 801768c:	eddf 5a53 	vldr	s11, [pc, #332]	; 80177dc <glottis_setup_waveform+0x16c>
{
 8017690:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017694:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8017698:	edd4 7a02 	vldr	s15, [r4, #8]
 801769c:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
 80176a0:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
 80176a4:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 80177e0 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80176a8:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
 80176ac:	eddf aa4d 	vldr	s21, [pc, #308]	; 80177e4 <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80176b0:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
 80176b4:	ee89 5a07 	vdiv.f32	s10, s18, s14
 80176b8:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
 80176bc:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80176c0:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
 80176c4:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
 80176c8:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80176cc:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
 80176d0:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80176d4:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
 80176d8:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
 80176dc:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80176e0:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
 80176e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80176e8:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 80176ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80176f0:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
 80176f4:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
 80176f8:	ee38 0a49 	vsub.f32	s0, s16, s18
 80176fc:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8017700:	f7fc f928 	bl	8013954 <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
 8017704:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017708:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 801770c:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8017710:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017714:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
 8017718:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80177b8 <glottis_setup_waveform+0x148>
 801771c:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017720:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
 8017724:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017728:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
 801772c:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8017730:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
 8017734:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
 8017738:	ee28 0a2a 	vmul.f32	s0, s16, s21
 801773c:	f7fc f974 	bl	8013a28 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017740:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
 8017744:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017748:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
 801774c:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017750:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8017754:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8017758:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80177c0 <glottis_setup_waveform+0x150>
 801775c:	ee25 5b04 	vmul.f64	d5, d5, d4
 8017760:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017764:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = my_faster_logf(y);
 8017768:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801776c:	f7fc f88e 	bl	801388c <my_faster_logf>
    alpha = z / (Tp/2.0f - Te);
 8017770:	eef0 7a48 	vmov.f32	s15, s16
 8017774:	eeda 7a0b 	vfnms.f32	s15, s20, s22
 8017778:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 801777c:	ee28 0a0a 	vmul.f32	s0, s16, s20
 8017780:	f7fc f928 	bl	80139d4 <fastExp4>
 8017784:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017788:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
 801778c:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
 8017790:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
 8017794:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 8017798:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
 801779c:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
 80177a0:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 80177a4:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
 80177a8:	edc4 7a07 	vstr	s15, [r4, #28]
}
 80177ac:	ecbd 8b08 	vpop	{d8-d11}
 80177b0:	bd10      	pop	{r4, pc}
 80177b2:	bf00      	nop
 80177b4:	f3af 8000 	nop.w
 80177b8:	54442d18 	.word	0x54442d18
 80177bc:	400921fb 	.word	0x400921fb
 80177c0:	54442d18 	.word	0x54442d18
 80177c4:	c00921fb 	.word	0xc00921fb
 80177c8:	402ccccd 	.word	0x402ccccd
 80177cc:	3df1a9fc 	.word	0x3df1a9fc
 80177d0:	3e656042 	.word	0x3e656042
 80177d4:	3d449ba6 	.word	0x3d449ba6
 80177d8:	3f99999a 	.word	0x3f99999a
 80177dc:	3de147ae 	.word	0x3de147ae
 80177e0:	3f9cac08 	.word	0x3f9cac08
 80177e4:	bc23d70a 	.word	0xbc23d70a

080177e8 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 80177e8:	b530      	push	{r4, r5, lr}
 80177ea:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
 80177ee:	6804      	ldr	r4, [r0, #0]
{
 80177f0:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 80177f2:	edd4 7a05 	vldr	s15, [r4, #20]
 80177f6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38

    if(glot->time_in_waveform > glot->waveform_length) {
 80177fa:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
 80177fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
 8017802:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
 8017804:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 8017806:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017808:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
 801780c:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017814:	dc50      	bgt.n	80178b8 <glottis_compute+0xd0>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 8017816:	ed94 7a01 	vldr	s14, [r4, #4]

    if(t > glot->Te) {
 801781a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 801781e:	ee27 8a87 	vmul.f32	s16, s15, s14
    if(t > glot->Te) {
 8017822:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8017826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782a:	d530      	bpl.n	801788e <glottis_compute+0xa6>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 801782c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8017830:	edd4 7a08 	vldr	s15, [r4, #32]
 8017834:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8017838:	ee20 0a27 	vmul.f32	s0, s0, s15
 801783c:	f7fc f8ca 	bl	80139d4 <fastExp4>
 8017840:	ee38 0a40 	vsub.f32	s0, s16, s0
 8017844:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8017848:	ee80 9a27 	vdiv.f32	s18, s0, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
 801784c:	692b      	ldr	r3, [r5, #16]
 801784e:	4798      	blx	r3

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
 8017850:	ed94 7a02 	vldr	s14, [r4, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8017854:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    noise = (2.0f * leaf->random()) - 1.0f;
 8017858:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801785c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017864:	eee0 7a26 	vfma.f32	s15, s0, s13
 8017868:	db31      	blt.n	80178ce <glottis_compute+0xe6>
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
 801786a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 801786e:	eeb1 7ac7 	vsqrt.f32	s14, s14
 8017872:	ee36 7ac7 	vsub.f32	s14, s13, s14
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;

    out += aspiration;
 8017876:	eddf 6a17 	vldr	s13, [pc, #92]	; 80178d4 <glottis_compute+0xec>

    return out;
}
 801787a:	eeb0 0a49 	vmov.f32	s0, s18
    out += aspiration;
 801787e:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8017882:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017886:	b003      	add	sp, #12
 8017888:	ecbd 8b04 	vpop	{d8-d9}
 801788c:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
 801788e:	ed94 0a06 	vldr	s0, [r4, #24]
 8017892:	ed94 9a07 	vldr	s18, [r4, #28]
 8017896:	ee28 0a00 	vmul.f32	s0, s16, s0
 801789a:	f7fc f89b 	bl	80139d4 <fastExp4>
 801789e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80178a2:	eef0 8a40 	vmov.f32	s17, s0
 80178a6:	ee28 0a27 	vmul.f32	s0, s16, s15
 80178aa:	f7e8 ffed 	bl	8000888 <arm_sin_f32>
 80178ae:	ee28 0a80 	vmul.f32	s0, s17, s0
 80178b2:	ee20 9a09 	vmul.f32	s18, s0, s18
 80178b6:	e7c9      	b.n	801784c <glottis_compute+0x64>
        glot->time_in_waveform -= glot->waveform_length;
 80178b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
 80178bc:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
 80178be:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
 80178c2:	f7ff fed5 	bl	8017670 <glottis_setup_waveform>
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 80178c6:	9c01      	ldr	r4, [sp, #4]
 80178c8:	edd4 7a05 	vldr	s15, [r4, #20]
 80178cc:	e7a3      	b.n	8017816 <glottis_compute+0x2e>
 80178ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80178d2:	e7d0      	b.n	8017876 <glottis_compute+0x8e>
 80178d4:	3d75c290 	.word	0x3d75c290

080178d8 <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
 80178d8:	b500      	push	{lr}
	_tract* tr = *t;
 80178da:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 80178dc:	685a      	ldr	r2, [r3, #4]
 80178de:	2a00      	cmp	r2, #0
 80178e0:	dd34      	ble.n	801794c <tract_calculate_reflections+0x74>
 80178e2:	2200      	movs	r2, #0
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80178e4:	6958      	ldr	r0, [r3, #20]
 80178e6:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 80178ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        tr->A[i] = scaledDiameter * scaledDiameter;
 80178ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80178f0:	edd0 7a00 	vldr	s15, [r0]
        tr->A[i] = scaledDiameter * scaledDiameter;
 80178f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 80178f8:	3201      	adds	r2, #1
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80178fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
 80178fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017902:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8017906:	6859      	ldr	r1, [r3, #4]
 8017908:	4291      	cmp	r1, r2
 801790a:	dceb      	bgt.n	80178e4 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 801790c:	2901      	cmp	r1, #1
 801790e:	dd1d      	ble.n	801794c <tract_calculate_reflections+0x74>
 8017910:	2204      	movs	r2, #4
 8017912:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8017916:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 80179ec <tract_calculate_reflections+0x114>
        tr->reflection[i] = tr->new_reflection[i];
 801791a:	e9d3 100b 	ldrd	r1, r0, [r3, #44]	; 0x2c
 801791e:	4410      	add	r0, r2
 8017920:	4411      	add	r1, r2
 8017922:	6800      	ldr	r0, [r0, #0]
 8017924:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8017926:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017928:	4411      	add	r1, r2
 801792a:	edd1 7a00 	vldr	s15, [r1]
 801792e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017936:	d146      	bne.n	80179c6 <tract_calculate_reflections+0xee>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8017938:	6b19      	ldr	r1, [r3, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
 801793a:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 801793e:	4411      	add	r1, r2
 8017940:	3204      	adds	r2, #4
 8017942:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
 8017946:	6859      	ldr	r1, [r3, #4]
 8017948:	4561      	cmp	r1, ip
 801794a:	dce6      	bgt.n	801791a <tract_calculate_reflections+0x42>
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 801794c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
 8017950:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    tr->reflection_right = tr->new_reflection_right;
 8017954:	f8d3 c090 	ldr.w	ip, [r3, #144]	; 0x90
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8017958:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    tr->reflection_left = tr->new_reflection_left;
 801795c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    tr->reflection_nose = tr->new_reflection_nose;
 8017962:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017966:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    tr->reflection_right = tr->new_reflection_right;
 8017968:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
 801796c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017970:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8017974:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8017976:	eddc 5a00 	vldr	s11, [ip]
 801797a:	edd1 7a00 	vldr	s15, [r1]
 801797e:	ed9c 7a01 	vldr	s14, [ip, #4]
 8017982:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8017986:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
 801798a:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 801798e:	eeb0 6a67 	vmov.f32	s12, s15
 8017992:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8017996:	ee26 6a07 	vmul.f32	s12, s12, s14
 801799a:	ed83 6a23 	vstr	s12, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 801799e:	eeb0 6a67 	vmov.f32	s12, s15
 80179a2:	eddc 5a01 	vldr	s11, [ip, #4]
 80179a6:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 80179aa:	ee26 6a07 	vmul.f32	s12, s12, s14
 80179ae:	ed83 6a24 	vstr	s12, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 80179b2:	ed91 6a00 	vldr	s12, [r1]
 80179b6:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80179ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80179be:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
 80179c2:	f85d fb04 	ldr.w	pc, [sp], #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80179c6:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
 80179ca:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
 80179ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80179d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80179d4:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 80179d8:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
 80179da:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80179dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 80179e0:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 80179e4:	6859      	ldr	r1, [r3, #4]
 80179e6:	4561      	cmp	r1, ip
 80179e8:	dc97      	bgt.n	801791a <tract_calculate_reflections+0x42>
 80179ea:	e7af      	b.n	801794c <tract_calculate_reflections+0x74>
 80179ec:	3f7fbe77 	.word	0x3f7fbe77

080179f0 <tract_initToPool>:
{
 80179f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179f4:	ed2d 8b02 	vpush	{d8}
	_tMempool* m = *mp;
 80179f8:	681b      	ldr	r3, [r3, #0]
{
 80179fa:	b082      	sub	sp, #8
 80179fc:	ee08 1a10 	vmov	s16, r1
 8017a00:	4605      	mov	r5, r0
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017a02:	4619      	mov	r1, r3
 8017a04:	20e8      	movs	r0, #232	; 0xe8
{
 8017a06:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 8017a08:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017a0a:	f7fc fc43 	bl	8014294 <mpool_calloc>
    tr->invN = 1.0f / n;
 8017a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat n = numTractSections;
 8017a12:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->nose_length = n*0.636363636363636f; //28
 8017a16:	eddf 5ace 	vldr	s11, [pc, #824]	; 8017d50 <tract_initToPool+0x360>
    tr->tip_start = n*0.727272727272727f;
 8017a1a:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8017d54 <tract_initToPool+0x364>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017a1e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
 8017a22:	eddf 6acd 	vldr	s13, [pc, #820]	; 8017d58 <tract_initToPool+0x368>
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017a26:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
    tr->invN = 1.0f / n;
 8017a2a:	ee87 2a27 	vdiv.f32	s4, s14, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017a2e:	eddf 0acb 	vldr	s1, [pc, #812]	; 8017d5c <tract_initToPool+0x36c>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017a32:	eddf 1acb 	vldr	s3, [pc, #812]	; 8017d60 <tract_initToPool+0x370>
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017a36:	4604      	mov	r4, r0
    tr->lip_start = n*0.886363636363636f;
 8017a38:	ed9f 5aca 	vldr	s10, [pc, #808]	; 8017d64 <tract_initToPool+0x374>
    tr->glottal_reflection = 0.75f;
 8017a3c:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
	tr->mempool = m;
 8017a40:	9b00      	ldr	r3, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017a42:	00be      	lsls	r6, r7, #2
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017a44:	ed9f 4ac8 	vldr	s8, [pc, #800]	; 8017d68 <tract_initToPool+0x378>
    tr->nose_length = n*0.636363636363636f; //28
 8017a48:	ee67 5aa5 	vmul.f32	s11, s15, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017a4c:	6028      	str	r0, [r5, #0]
    tr->tip_start = n*0.727272727272727f;
 8017a4e:	ee27 6a86 	vmul.f32	s12, s15, s12
	tr->mempool = m;
 8017a52:	6003      	str	r3, [r0, #0]
    tr->blade_start = n*0.227272727272727f;
 8017a54:	ee67 6aa6 	vmul.f32	s13, s15, s13
    tr->reflection_left = 0.0f;
 8017a58:	2300      	movs	r3, #0
    tr->nose_length = n*0.636363636363636f; //28
 8017a5a:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->lip_reflection = -0.85f;
 8017a5e:	f8df c334 	ldr.w	ip, [pc, #820]	; 8017d94 <tract_initToPool+0x3a4>
    tr->tip_start = n*0.727272727272727f;
 8017a62:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->movement_speed = 200.0f;
 8017a66:	4ac1      	ldr	r2, [pc, #772]	; (8017d6c <tract_initToPool+0x37c>)
    tr->blade_start = n*0.227272727272727f;
 8017a68:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	LEAF* leaf = m->leaf;
 8017a6c:	9900      	ldr	r1, [sp, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017a6e:	ee77 4a87 	vadd.f32	s9, s15, s14
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017a72:	9001      	str	r0, [sp, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017a74:	eef8 2ae5 	vcvt.f32.s32	s5, s11
    tr->last_obstruction = -1;
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017a7c:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
    tr->velum_target = 0.01f;
 8017a80:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8017d98 <tract_initToPool+0x3a8>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017a84:	eef8 3ae6 	vcvt.f32.s32	s7, s13
	LEAF* leaf = m->leaf;
 8017a88:	684d      	ldr	r5, [r1, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017a8a:	ee74 4ae2 	vsub.f32	s9, s9, s5
    tr->glottal_reflection = 0.75f;
 8017a8e:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017a92:	eea7 3ae0 	vfms.f32	s6, s15, s1
    tr->lip_reflection = -0.85f;
 8017a96:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017a9a:	eee7 3aa1 	vfma.f32	s7, s15, s3
    tr->movement_speed = 200.0f;
 8017a9e:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    tr->lip_start = n*0.886363636363636f;
 8017aa2:	ee27 5a85 	vmul.f32	s10, s15, s10
    tr->invN = 1.0f / n;
 8017aa6:	ed84 2a02 	vstr	s4, [r4, #8]
    tr->n = n; //44
 8017aaa:	eefd 1ae7 	vcvt.s32.f32	s3, s15
    tr->nose_length = n*0.636363636363636f; //28
 8017aae:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017ab2:	ee27 4a84 	vmul.f32	s8, s15, s8
    tr->tip_start = n*0.727272727272727f;
 8017ab6:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017aba:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    tr->blade_start = n*0.227272727272727f;
 8017abe:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017ac2:	ee67 7a81 	vmul.f32	s15, s15, s2
    tr->n = n; //44
 8017ac6:	edc4 1a01 	vstr	s3, [r4, #4]
    tr->lip_start = n*0.886363636363636f;
 8017aca:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->TnoiseGain = 1.0f;
 8017ace:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017ad2:	edc4 4a13 	vstr	s9, [r4, #76]	; 0x4c
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8017ad6:	ee87 8a22 	vdiv.f32	s16, s14, s5
    tr->AnoiseGain = 1.0f;
 8017ada:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
    tr->lip_start = n*0.886363636363636f;
 8017ade:	ed84 5a16 	vstr	s10, [r4, #88]	; 0x58
    tr->diameterScale = 1.0f;
 8017ae2:	ed84 7a2f 	vstr	s14, [r4, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017ae6:	ed84 3a17 	vstr	s6, [r4, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017aea:	edc4 3a18 	vstr	s7, [r4, #96]	; 0x60
    tr->reflection_left = 0.0f;
 8017aee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->reflection_right = 0.0f;
 8017af2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 8017af6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 8017afa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 8017afe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 8017b02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    tr->lip_output = 0.0f;
 8017b06:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8017b0a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    tr->last_obstruction = -1;
 8017b0e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b12:	4630      	mov	r0, r6
    tr->maxNumTractSections = maxNumTractSections;
 8017b14:	6127      	str	r7, [r4, #16]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b16:	1d37      	adds	r7, r6, #4
    tr->velum_target = 0.01f;
 8017b18:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017b1c:	ed84 4a34 	vstr	s8, [r4, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017b20:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017b24:	edc4 8a36 	vstr	s17, [r4, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 8017b28:	edc4 8a37 	vstr	s17, [r4, #220]	; 0xdc
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b2c:	f7fc fbb2 	bl	8014294 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b30:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b32:	6160      	str	r0, [r4, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b34:	4630      	mov	r0, r6
 8017b36:	f7fc fbad 	bl	8014294 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b3a:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b3c:	61a0      	str	r0, [r4, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f7fc fba8 	bl	8014294 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b44:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b46:	61e0      	str	r0, [r4, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b48:	4630      	mov	r0, r6
 8017b4a:	f7fc fba3 	bl	8014294 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b4e:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b50:	6220      	str	r0, [r4, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b52:	4630      	mov	r0, r6
 8017b54:	f7fc fb9e 	bl	8014294 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b58:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b5a:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b5c:	4630      	mov	r0, r6
 8017b5e:	f7fc fb99 	bl	8014294 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b62:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b64:	6260      	str	r0, [r4, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b66:	4638      	mov	r0, r7
 8017b68:	f7fc fb94 	bl	8014294 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b6c:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b6e:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b70:	4638      	mov	r0, r7
 8017b72:	f7fc fb8f 	bl	8014294 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b76:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b78:	6320      	str	r0, [r4, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b7a:	4638      	mov	r0, r7
 8017b7c:	f7fc fb8a 	bl	8014294 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b80:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b82:	6360      	str	r0, [r4, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b84:	4638      	mov	r0, r7
 8017b86:	f7fc fb85 	bl	8014294 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b8a:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017b8c:	63a0      	str	r0, [r4, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b8e:	4630      	mov	r0, r6
 8017b90:	f7fc fb80 	bl	8014294 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b94:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b96:	63e0      	str	r0, [r4, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b98:	4630      	mov	r0, r6
 8017b9a:	f7fc fb7b 	bl	8014294 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017b9e:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017ba0:	6660      	str	r0, [r4, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	f7fc fb76 	bl	8014294 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017ba8:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017baa:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017bac:	4638      	mov	r0, r7
 8017bae:	f7fc fb71 	bl	8014294 <mpool_calloc>
 8017bb2:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017bb4:	9900      	ldr	r1, [sp, #0]
 8017bb6:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017bb8:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017bba:	f7fc fb6b 	bl	8014294 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bbe:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017bc0:	6720      	str	r0, [r4, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bc2:	4630      	mov	r0, r6
 8017bc4:	f7fc fb66 	bl	8014294 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bc8:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bca:	67a0      	str	r0, [r4, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f7fc fb61 	bl	8014294 <mpool_calloc>
 8017bd2:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bd4:	9900      	ldr	r1, [sp, #0]
 8017bd6:	4630      	mov	r0, r6
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bd8:	6763      	str	r3, [r4, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017bda:	f7fc fb5b 	bl	8014294 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
 8017bde:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017be0:	67e0      	str	r0, [r4, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	dd3f      	ble.n	8017c66 <tract_initToPool+0x276>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017be6:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 8017bea:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017bec:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 8017bf0:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8017d70 <tract_initToPool+0x380>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8017bf4:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.1f;
 8017bf8:	ed9f 4a5e 	vldr	s8, [pc, #376]	; 8017d74 <tract_initToPool+0x384>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017bfc:	ee07 3a90 	vmov	s15, r3
 8017c00:	edd4 6a02 	vldr	s13, [r4, #8]
            diameter = 0.6f;
 8017c04:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017c10:	eef0 6a45 	vmov.f32	s13, s10
 8017c14:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8017c18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017c20:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017c24:	ee16 3a90 	vmov	r3, s13
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	dc04      	bgt.n	8017c36 <tract_initToPool+0x246>
            diameter = 1.1f;
 8017c2c:	ee17 3a90 	vmov	r3, s15
 8017c30:	4293      	cmp	r3, r2
 8017c32:	fe34 7a28 	vselgt.f32	s14, s8, s17
            tr->new_diameter[i] = diameter;
 8017c36:	6a23      	ldr	r3, [r4, #32]
 8017c38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017c3c:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
 8017c40:	69e3      	ldr	r3, [r4, #28]
 8017c42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017c46:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
 8017c4a:	69a3      	ldr	r3, [r4, #24]
 8017c4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017c50:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
 8017c54:	6963      	ldr	r3, [r4, #20]
 8017c56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8017c5a:	3201      	adds	r2, #1
        tr->diameter[i] =
 8017c5c:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
 8017c60:	6863      	ldr	r3, [r4, #4]
 8017c62:	4293      	cmp	r3, r2
 8017c64:	dcca      	bgt.n	8017bfc <tract_initToPool+0x20c>
	for(i = 0; i < tr->nose_length; i++) {
 8017c66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	dd2f      	ble.n	8017ccc <tract_initToPool+0x2dc>
		if(d < 1.0f) {
 8017c6c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
 8017c70:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017c72:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
 8017c76:	ed9f 4a40 	vldr	s8, [pc, #256]	; 8017d78 <tract_initToPool+0x388>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017c7a:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
 8017c7e:	eddf 4a3f 	vldr	s9, [pc, #252]	; 8017d7c <tract_initToPool+0x38c>
 8017c82:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8017d80 <tract_initToPool+0x390>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017c86:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
 8017c8a:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
 8017c8e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c94:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017c98:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 8017c9c:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017ca0:	eef0 7a46 	vmov.f32	s15, s12
 8017ca4:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
 8017ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 8017cac:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017cb0:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
 8017cb4:	f140 80de 	bpl.w	8017e74 <tract_initToPool+0x484>
		tr->nose_diameter[i] = diameter;
 8017cb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017cbc:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
 8017cc0:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8017cc2:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8017cc6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	dcdc      	bgt.n	8017c86 <tract_initToPool+0x296>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 8017ccc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8017cd0:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8017d84 <tract_initToPool+0x394>
 8017cd4:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8017d88 <tract_initToPool+0x398>
 8017cd8:	2102      	movs	r1, #2
 8017cda:	466a      	mov	r2, sp
 8017cdc:	f7f9 fbb2 	bl	8011444 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
 8017ce0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8017ce4:	466a      	mov	r2, sp
 8017ce6:	eddf 0a27 	vldr	s1, [pc, #156]	; 8017d84 <tract_initToPool+0x394>
 8017cea:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8017d8c <tract_initToPool+0x39c>
 8017cee:	2102      	movs	r1, #2
 8017cf0:	f7f9 fba8 	bl	8011444 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
 8017cf4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8017cf8:	466a      	mov	r2, sp
 8017cfa:	eddf 0a22 	vldr	s1, [pc, #136]	; 8017d84 <tract_initToPool+0x394>
 8017cfe:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8017d90 <tract_initToPool+0x3a0>
 8017d02:	2102      	movs	r1, #2
 8017d04:	f7f9 fb9e 	bl	8011444 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8017d08:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8017d0c:	466a      	mov	r2, sp
 8017d0e:	2100      	movs	r1, #0
 8017d10:	f7fc ff80 	bl	8014c14 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8017d14:	a801      	add	r0, sp, #4
 8017d16:	f7ff fddf 	bl	80178d8 <tract_calculate_reflections>

}

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 8017d1a:	9c01      	ldr	r4, [sp, #4]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 8017d1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	dd57      	ble.n	8017dd2 <tract_initToPool+0x3e2>
 8017d22:	2300      	movs	r3, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8017d24:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
 8017d28:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017d2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
 8017d30:	3301      	adds	r3, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8017d32:	edd1 7a00 	vldr	s15, [r1]
 8017d36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017d3a:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->nose_length; i++) {
 8017d3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017d40:	4293      	cmp	r3, r2
 8017d42:	dbef      	blt.n	8017d24 <tract_initToPool+0x334>
    }

    for(i = 1; i < tr->nose_length; i++) {
 8017d44:	2a01      	cmp	r2, #1
 8017d46:	dd44      	ble.n	8017dd2 <tract_initToPool+0x3e2>
 8017d48:	2000      	movs	r0, #0
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	e028      	b.n	8017da0 <tract_initToPool+0x3b0>
 8017d4e:	bf00      	nop
 8017d50:	3f22e8ba 	.word	0x3f22e8ba
 8017d54:	3f3a2e8c 	.word	0x3f3a2e8c
 8017d58:	3e68ba2f 	.word	0x3e68ba2f
 8017d5c:	3d8ba2e9 	.word	0x3d8ba2e9
 8017d60:	3d3a2e8c 	.word	0x3d3a2e8c
 8017d64:	3f62e8ba 	.word	0x3f62e8ba
 8017d68:	3ee66666 	.word	0x3ee66666
 8017d6c:	43480000 	.word	0x43480000
 8017d70:	3f19999a 	.word	0x3f19999a
 8017d74:	3f8ccccd 	.word	0x3f8ccccd
 8017d78:	3ff33333 	.word	0x3ff33333
 8017d7c:	3fcccccd 	.word	0x3fcccccd
 8017d80:	3ecccccd 	.word	0x3ecccccd
 8017d84:	3f333333 	.word	0x3f333333
 8017d88:	447c8000 	.word	0x447c8000
 8017d8c:	44778000 	.word	0x44778000
 8017d90:	43fa0000 	.word	0x43fa0000
 8017d94:	bf59999a 	.word	0xbf59999a
 8017d98:	3c23d70a 	.word	0x3c23d70a
 8017d9c:	42800000 	.word	0x42800000
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017da0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8017da2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8017da4:	eb02 0c00 	add.w	ip, r2, r0
 8017da8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017dac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
 8017db0:	3301      	adds	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017db2:	ed92 7a00 	vldr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8017db6:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017db8:	eddc 7a00 	vldr	s15, [ip]
 8017dbc:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 8017dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017dc8:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8017dcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017dce:	4293      	cmp	r3, r2
 8017dd0:	dbe6      	blt.n	8017da0 <tract_initToPool+0x3b0>
    tr->nose_diameter[0] = tr->velum_target;
 8017dd2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    tr->T = 1.0f / leaf->sampleRate;
 8017dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
 8017dd8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017ddc:	201c      	movs	r0, #28
    tr->block_time = 64.0f / leaf->sampleRate;
 8017dde:	ed1f 6a11 	vldr	s12, [pc, #-68]	; 8017d9c <tract_initToPool+0x3ac>
        tr->tpool->pool[i]->is_free = 1;
 8017de2:	2701      	movs	r7, #1
    tr->nose_diameter[0] = tr->velum_target;
 8017de4:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017de6:	2600      	movs	r6, #0
    tr->block_time = 64.0f / leaf->sampleRate;
 8017de8:	ed95 7a00 	vldr	s14, [r5]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017dec:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8017dee:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8017df2:	edc4 7a2e 	vstr	s15, [r4, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
 8017df6:	ed95 7a00 	vldr	s14, [r5]
 8017dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017dfe:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017e02:	f7fc f9e3 	bl	80141cc <mpool_alloc>
    tr->tpool->size = 0;
 8017e06:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017e08:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017e0c:	461d      	mov	r5, r3
    tr->tpool->size = 0;
 8017e0e:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
 8017e10:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8017e14:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8017e16:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
 8017e1a:	2020      	movs	r0, #32
 8017e1c:	9900      	ldr	r1, [sp, #0]
 8017e1e:	f7fc f9d5 	bl	80141cc <mpool_alloc>
 8017e22:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8017e26:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        tr->tpool->pool[i]->position = 0;
 8017e2a:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
 8017e2c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e30:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
 8017e32:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8017e36:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e3a:	619d      	str	r5, [r3, #24]
        tr->tpool->pool[i]->position = 0;
 8017e3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8017e40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e44:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017e46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8017e4a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e4e:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
 8017e50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8017e54:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017e58:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
 8017e5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8017e5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017e62:	3501      	adds	r5, #1
 8017e64:	2d04      	cmp	r5, #4
        tr->tpool->pool[i]->exponent = 0;
 8017e66:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017e68:	d1d5      	bne.n	8017e16 <tract_initToPool+0x426>
}
 8017e6a:	b002      	add	sp, #8
 8017e6c:	ecbd 8b02 	vpop	{d8}
 8017e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
 8017e74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017e78:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
 8017e7c:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8017e7e:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8017e82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017e84:	429a      	cmp	r2, r3
 8017e86:	f73f aefe 	bgt.w	8017c86 <tract_initToPool+0x296>
 8017e8a:	e71f      	b.n	8017ccc <tract_initToPool+0x2dc>

08017e8c <tract_newLength>:
{
 8017e8c:	b410      	push	{r4}
	_tract* tr = *t;
 8017e8e:	6803      	ldr	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017e90:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    tr->nose_length = n*0.636363636363636f; //28
 8017e94:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 8018120 <tract_newLength+0x294>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017e98:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
    if (numTractSections < tr->maxNumTractSections)
 8017e9c:	691a      	ldr	r2, [r3, #16]
    tr->blade_start = n*0.227272727272727f;
 8017e9e:	eddf 5aa1 	vldr	s11, [pc, #644]	; 8018124 <tract_newLength+0x298>
    if (numTractSections < tr->maxNumTractSections)
 8017ea2:	428a      	cmp	r2, r1
    tr->tip_start = n*0.727272727272727f;
 8017ea4:	ed9f 5aa0 	vldr	s10, [pc, #640]	; 8018128 <tract_newLength+0x29c>
    tr->lip_start = n*0.886363636363636f;
 8017ea8:	eddf 4aa0 	vldr	s9, [pc, #640]	; 801812c <tract_newLength+0x2a0>
    	n = numTractSections;
 8017eac:	bfcc      	ite	gt
 8017eae:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
 8017eb2:	ee07 2a90 	vmovle	s15, r2
    tr->velum_target = 0.01f;
 8017eb6:	4c9e      	ldr	r4, [pc, #632]	; (8018130 <tract_newLength+0x2a4>)
    tr->reflection_left = 0.0f;
 8017eb8:	2100      	movs	r1, #0
    	n = tr->maxNumTractSections;
 8017eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017ebe:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8018134 <tract_newLength+0x2a8>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017ec2:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8018138 <tract_newLength+0x2ac>
    tr->velum_target = 0.01f;
 8017ec6:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 8017eca:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
    tr->n = n; //44
 8017ece:	eefd 7ae6 	vcvt.s32.f32	s15, s13
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017ed2:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 801813c <tract_newLength+0x2b0>
    tr->nose_length = n*0.636363636363636f; //28
 8017ed6:	ee26 6a86 	vmul.f32	s12, s13, s12
    tr->glottal_reflection = 0.75f;
 8017eda:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    tr->blade_start = n*0.227272727272727f;
 8017ede:	ee66 5aa5 	vmul.f32	s11, s13, s11
    tr->lip_reflection = -0.85f;
 8017ee2:	4c97      	ldr	r4, [pc, #604]	; (8018140 <tract_newLength+0x2b4>)
    tr->invN = 1.0f / tr->n;
 8017ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    tr->n = n; //44
 8017ee8:	ee17 0a90 	vmov	r0, s15
    tr->nose_length = n*0.636363636363636f; //28
 8017eec:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->movement_speed = 200.0f;
 8017ef0:	f8df c264 	ldr.w	ip, [pc, #612]	; 8018158 <tract_newLength+0x2cc>
    tr->tip_start = n*0.727272727272727f;
 8017ef4:	ee26 5a85 	vmul.f32	s10, s13, s10
    tr->lip_reflection = -0.85f;
 8017ef8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    tr->invN = 1.0f / tr->n;
 8017efc:	eec4 7a07 	vdiv.f32	s15, s8, s14
    tr->last_obstruction = -1;
 8017f00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    tr->nose_length = n*0.636363636363636f; //28
 8017f04:	ee16 2a10 	vmov	r2, s12
    for(i = 0; i < tr->n; i++) {
 8017f08:	2800      	cmp	r0, #0
    tr->n = n; //44
 8017f0a:	6058      	str	r0, [r3, #4]
    tr->nose_length = n*0.636363636363636f; //28
 8017f0c:	649a      	str	r2, [r3, #72]	; 0x48
    tr->reflection_left = 0.0f;
 8017f0e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->blade_start = n*0.227272727272727f;
 8017f12:	eebd 6ae5 	vcvt.s32.f32	s12, s11
    tr->reflection_right = 0.0f;
 8017f16:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    tr->lip_start = n*0.886363636363636f;
 8017f1a:	ee66 5aa4 	vmul.f32	s11, s13, s9
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017f1e:	ee04 2a90 	vmov	s9, r2
 8017f22:	ee76 3a84 	vadd.f32	s7, s13, s8
    tr->reflection_nose = 0.0f;
 8017f26:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->tip_start = n*0.727272727272727f;
 8017f2a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->new_reflection_left = 0.0f;
 8017f2e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017f32:	eef8 1ae4 	vcvt.f32.s32	s3, s9
    tr->new_reflection_right= 0.0f;
 8017f36:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017f3a:	eef8 2ac6 	vcvt.f32.s32	s5, s12
    tr->new_reflection_nose = 0.0f;
 8017f3e:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017f42:	eeb8 2ac5 	vcvt.f32.s32	s4, s10
    tr->lip_output = 0.0f;
 8017f46:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017f4a:	ee73 4ae1 	vsub.f32	s9, s7, s3
    tr->nose_output = 0.0f;
 8017f4e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017f52:	ee66 3a83 	vmul.f32	s7, s13, s6
    tr->tip_start = n*0.727272727272727f;
 8017f56:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017f5a:	eeb0 3a62 	vmov.f32	s6, s5
    tr->blade_start = n*0.227272727272727f;
 8017f5e:	ed83 6a15 	vstr	s12, [r3, #84]	; 0x54
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017f62:	eea6 2ac0 	vfms.f32	s4, s13, s0
    tr->last_obstruction = -1;
 8017f66:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017f6a:	eeb7 4a08 	vmov.f32	s8, #120	; 0x3fc00000  1.5
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017f6e:	edc3 3a35 	vstr	s7, [r3, #212]	; 0xd4
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017f72:	eea6 3aa0 	vfma.f32	s6, s13, s1
    tr->invN = 1.0f / tr->n;
 8017f76:	edc3 7a02 	vstr	s15, [r3, #8]
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017f7a:	ee66 6a81 	vmul.f32	s13, s13, s2
    tr->movement_speed = 200.0f;
 8017f7e:	f8c3 c0ac 	str.w	ip, [r3, #172]	; 0xac
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017f82:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017f86:	ed83 4a36 	vstr	s8, [r3, #216]	; 0xd8
    tr->lip_start = n*0.886363636363636f;
 8017f8a:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	tr->turbuluencePointDiameter[1] = 1.5f;
 8017f8e:	ed83 4a37 	vstr	s8, [r3, #220]	; 0xdc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017f92:	ed83 2a17 	vstr	s4, [r3, #92]	; 0x5c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017f96:	edc3 4a13 	vstr	s9, [r3, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017f9a:	ed83 3a18 	vstr	s6, [r3, #96]	; 0x60
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017f9e:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
    tr->lip_start = n*0.886363636363636f;
 8017fa2:	edc3 5a16 	vstr	s11, [r3, #88]	; 0x58
    for(i = 0; i < tr->n; i++) {
 8017fa6:	dd5d      	ble.n	8018064 <tract_newLength+0x1d8>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017fa8:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 8017fac:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017fae:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 8017fb2:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8018144 <tract_newLength+0x2b8>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8017fb6:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.5f;
 8017fba:	eddf 3a63 	vldr	s7, [pc, #396]	; 8018148 <tract_newLength+0x2bc>
 8017fbe:	e001      	b.n	8017fc4 <tract_newLength+0x138>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017fc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8017fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017fc8:	eef0 6a45 	vmov.f32	s13, s10
            diameter = 0.6f;
 8017fcc:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017fd0:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8017fd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8017fdc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017fe0:	ee16 0a90 	vmov	r0, s13
 8017fe4:	4290      	cmp	r0, r2
 8017fe6:	dc04      	bgt.n	8017ff2 <tract_newLength+0x166>
            diameter = 1.5f;
 8017fe8:	ee17 0a90 	vmov	r0, s15
 8017fec:	4290      	cmp	r0, r2
 8017fee:	fe33 7a84 	vselgt.f32	s14, s7, s8
            tr->new_diameter[i] = diameter;
 8017ff2:	6a18      	ldr	r0, [r3, #32]
 8017ff4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8017ff8:	ed80 7a00 	vstr	s14, [r0]
            tr->target_diameter[i] =
 8017ffc:	69d8      	ldr	r0, [r3, #28]
 8017ffe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018002:	ed80 7a00 	vstr	s14, [r0]
            tr->rest_diameter[i] =
 8018006:	6998      	ldr	r0, [r3, #24]
 8018008:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801800c:	ed80 7a00 	vstr	s14, [r0]
        tr->diameter[i] =
 8018010:	6958      	ldr	r0, [r3, #20]
 8018012:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018016:	ed80 7a00 	vstr	s14, [r0]
        tr->reflection[i] = 0.0f;
 801801a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801801c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018020:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
 8018022:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018024:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018028:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
 801802a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801802c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018030:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
 8018032:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8018034:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018038:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
 801803a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801803c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018040:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
 8018042:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018044:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8018048:	3201      	adds	r2, #1
        tr->junction_outL[i] = 0.0f;
 801804a:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 801804c:	6858      	ldr	r0, [r3, #4]
 801804e:	ee07 0a90 	vmov	s15, r0
 8018052:	4290      	cmp	r0, r2
 8018054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018058:	dcb2      	bgt.n	8017fc0 <tract_newLength+0x134>
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 801805a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801805c:	ee07 2a90 	vmov	s15, r2
 8018060:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 8018064:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 8018068:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 801806a:	eec7 5aa1 	vdiv.f32	s11, s15, s3
	for(i = 0; i < tr->nose_length; i++) {
 801806e:	dd43      	ble.n	80180f8 <tract_newLength+0x26c>
 8018070:	2200      	movs	r2, #0
			diameter = 0.4f + 1.6f * d;
 8018072:	ed9f 4a36 	vldr	s8, [pc, #216]	; 801814c <tract_newLength+0x2c0>
 8018076:	eddf 4a36 	vldr	s9, [pc, #216]	; 8018150 <tract_newLength+0x2c4>
        tr->nose_reflection[i] = 0.0f;
 801807a:	2100      	movs	r1, #0
		diameter = MIN(diameter, 1.9f);
 801807c:	ed9f 5a35 	vldr	s10, [pc, #212]	; 8018154 <tract_newLength+0x2c8>
		if(d < 1.0f) {
 8018080:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018084:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8018088:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801808c:	ee07 2a90 	vmov	s15, r2
 8018090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018094:	ee67 7aa5 	vmul.f32	s15, s15, s11
		if(d < 1.0f) {
 8018098:	eef4 7ae6 	vcmpe.f32	s15, s13
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801809c:	ee37 7aa7 	vadd.f32	s14, s15, s15
			diameter = 0.4f + 1.6f * d;
 80180a0:	eef0 7a64 	vmov.f32	s15, s9
		if(d < 1.0f) {
 80180a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.5f + 1.5f*(2.0f-d);
 80180a8:	ee33 6ac7 	vsub.f32	s12, s7, s14
			diameter = 0.4f + 1.6f * d;
 80180ac:	eee7 7a04 	vfma.f32	s15, s14, s8
		if(d < 1.0f) {
 80180b0:	d403      	bmi.n	80180ba <tract_newLength+0x22e>
			diameter = 0.5f + 1.5f*(2.0f-d);
 80180b2:	eef0 7a66 	vmov.f32	s15, s13
 80180b6:	eee6 7a03 	vfma.f32	s15, s12, s6
		tr->nose_diameter[i] = diameter;
 80180ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
		diameter = MIN(diameter, 1.9f);
 80180bc:	fec7 7ac5 	vminnm.f32	s15, s15, s10
		tr->nose_diameter[i] = diameter;
 80180c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80180c4:	edc0 7a00 	vstr	s15, [r0]
        tr->nose_reflection[i] = 0.0f;
 80180c8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80180ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80180ce:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
 80180d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80180d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80180d6:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
 80180d8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80180da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80180de:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
 80180e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80180e2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80180e6:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
 80180e8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80180ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
 80180ee:	3201      	adds	r2, #1
        tr->nose_junc_outL[i] = 0.0f;
 80180f0:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
 80180f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80180f4:	4290      	cmp	r0, r2
 80180f6:	dcc9      	bgt.n	801808c <tract_newLength+0x200>
    tr->new_reflection_left = 0.0f;
 80180f8:	2200      	movs	r2, #0
 80180fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
 80180fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->new_reflection_right = 0.0f;
 8018102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
 8018106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->new_reflection_nose = 0.0f;
 801810a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
 801810e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    tr->lip_output = 0.0f;
 8018112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8018116:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 801811a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801811e:	4770      	bx	lr
 8018120:	3f22e8ba 	.word	0x3f22e8ba
 8018124:	3e68ba2f 	.word	0x3e68ba2f
 8018128:	3f3a2e8c 	.word	0x3f3a2e8c
 801812c:	3f62e8ba 	.word	0x3f62e8ba
 8018130:	3c23d70a 	.word	0x3c23d70a
 8018134:	3d8ba2e9 	.word	0x3d8ba2e9
 8018138:	3d3a2e8c 	.word	0x3d3a2e8c
 801813c:	3ee66666 	.word	0x3ee66666
 8018140:	bf59999a 	.word	0xbf59999a
 8018144:	3f19999a 	.word	0x3f19999a
 8018148:	3f8ccccd 	.word	0x3f8ccccd
 801814c:	3fcccccd 	.word	0x3fcccccd
 8018150:	3ecccccd 	.word	0x3ecccccd
 8018154:	3ff33333 	.word	0x3ff33333
 8018158:	43480000 	.word	0x43480000

0801815c <tract_reshape>:
{
 801815c:	b410      	push	{r4}
	_tract* tr = *t;
 801815e:	6802      	ldr	r2, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 8018160:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
 8018162:	ed92 5a2e 	vldr	s10, [r2, #184]	; 0xb8
 8018166:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
 801816a:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
 801816c:	ee25 5a27 	vmul.f32	s10, s10, s15
    for(i = 0; i < tr->n; i++) {
 8018170:	dd41      	ble.n	80181f6 <tract_reshape+0x9a>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018172:	ed9f 3a36 	vldr	s6, [pc, #216]	; 801824c <tract_reshape+0xf0>
 8018176:	ee35 4a05 	vadd.f32	s8, s10, s10
    for(i = 0; i < tr->n; i++) {
 801817a:	2300      	movs	r3, #0
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801817c:	eddf 3a34 	vldr	s7, [pc, #208]	; 8018250 <tract_reshape+0xf4>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018180:	ee65 4a03 	vmul.f32	s9, s10, s6
        diameter = tr->diameter[i];
 8018184:	6951      	ldr	r1, [r2, #20]
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018186:	eef0 7a64 	vmov.f32	s15, s9
        if(i < tr->nose_start) slow_return = 0.6f;
 801818a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
        target_diameter = tr->target_diameter[i];
 801818c:	69d4      	ldr	r4, [r2, #28]
        diameter = tr->diameter[i];
 801818e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(i < tr->nose_start) slow_return = 0.6f;
 8018192:	4298      	cmp	r0, r3
        target_diameter = tr->target_diameter[i];
 8018194:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        diameter = tr->diameter[i];
 8018198:	ed91 6a00 	vldr	s12, [r1]
        target_diameter = tr->target_diameter[i];
 801819c:	eddc 6a00 	vldr	s13, [ip]
        if(i < tr->nose_start) slow_return = 0.6f;
 80181a0:	dc16      	bgt.n	80181d0 <tract_reshape+0x74>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80181a2:	1a1c      	subs	r4, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
 80181a4:	eef0 7a45 	vmov.f32	s15, s10
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80181a8:	ee05 4a90 	vmov	s11, r4
        else if(i >= tr->tip_start) slow_return = 1.0f;
 80181ac:	6d14      	ldr	r4, [r2, #80]	; 0x50
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80181ae:	1a20      	subs	r0, r4, r0
 80181b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
 80181b4:	429c      	cmp	r4, r3
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80181b6:	ee07 0a10 	vmov	s14, r0
 80181ba:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80181be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        else if(i >= tr->tip_start) slow_return = 1.0f;
 80181c2:	dd05      	ble.n	80181d0 <tract_reshape+0x74>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80181c4:	eec5 7a87 	vdiv.f32	s15, s11, s14
            slow_return =
 80181c8:	ee77 7a83 	vadd.f32	s15, s15, s6
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80181cc:	ee67 7a85 	vmul.f32	s15, s15, s10

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 80181d0:	eef4 6ac6 	vcmpe.f32	s13, s12
        tmp = current + amt_up;
 80181d4:	ee76 7a27 	vadd.f32	s15, s12, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
 80181d8:	ee36 7a44 	vsub.f32	s14, s12, s8
    if(current < target) {
 80181dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
 80181e0:	fec7 7ae6 	vminnm.f32	s15, s15, s13
        return MAX(tmp, target);
 80181e4:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
    if(current < target) {
 80181e8:	dd22      	ble.n	8018230 <tract_reshape+0xd4>
    for(i = 0; i < tr->n; i++) {
 80181ea:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80181ec:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80181f0:	6851      	ldr	r1, [r2, #4]
 80181f2:	428b      	cmp	r3, r1
 80181f4:	dbc6      	blt.n	8018184 <tract_reshape+0x28>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80181f6:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80181f8:	edd2 7a26 	vldr	s15, [r2, #152]	; 0x98
 80181fc:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
 8018200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018208:	d519      	bpl.n	801823e <tract_reshape+0xe2>
        tmp = current + amt_up;
 801820a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801820e:	eea5 7a26 	vfma.f32	s14, s10, s13
        return MIN(tmp, target);
 8018212:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8018216:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 801821a:	e9d2 131e 	ldrd	r1, r3, [r2, #120]	; 0x78
 801821e:	edd1 7a00 	vldr	s15, [r1]
 8018222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018226:	edc3 7a00 	vstr	s15, [r3]
}
 801822a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801822e:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
 8018230:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018232:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
 8018236:	6851      	ldr	r1, [r2, #4]
 8018238:	428b      	cmp	r3, r1
 801823a:	dba3      	blt.n	8018184 <tract_reshape+0x28>
 801823c:	e7db      	b.n	80181f6 <tract_reshape+0x9a>
        tmp = current - amt_down;
 801823e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8018254 <tract_reshape+0xf8>
 8018242:	eea5 7a66 	vfms.f32	s14, s10, s13
        return MAX(tmp, target);
 8018246:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801824a:	e7e4      	b.n	8018216 <tract_reshape+0xba>
 801824c:	3f19999a 	.word	0x3f19999a
 8018250:	3ecccccd 	.word	0x3ecccccd
 8018254:	3dcccccd 	.word	0x3dcccccd

08018258 <tract_addTurbulenceNoiseAtPosition>:
{
 8018258:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801825a:	eddf 7a36 	vldr	s15, [pc, #216]	; 8018334 <tract_addTurbulenceNoiseAtPosition+0xdc>
 801825e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
 8018262:	6805      	ldr	r5, [r0, #0]
{
 8018264:	ed2d 8b06 	vpush	{d8-d10}
 8018268:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801826c:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
 8018270:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
 8018274:	fefb 7a68 	vrintm.f32	s15, s17
 8018278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801827c:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 8018280:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8018284:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018338 <tract_addTurbulenceNoiseAtPosition+0xe0>
 8018288:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
 801828c:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8018290:	f7fb fc9a 	bl	8013bc8 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8018294:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
 8018298:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801829c:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80182a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80182a4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8018338 <tract_addTurbulenceNoiseAtPosition+0xe0>
 80182a8:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
 80182ac:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80182b0:	f7fb fc8a 	bl	8013bc8 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80182b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
 80182b8:	686b      	ldr	r3, [r5, #4]
 80182ba:	1c62      	adds	r2, r4, #1
 80182bc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80182c0:	429a      	cmp	r2, r3
 80182c2:	ee28 8a29 	vmul.f32	s16, s16, s19
 80182c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80182ca:	da18      	bge.n	80182fe <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80182cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
 80182d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80182d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80182d6:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
 80182da:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80182de:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
 80182e2:	eea7 7a80 	vfma.f32	s14, s15, s0
 80182e6:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 80182ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80182ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80182f0:	ed93 7a00 	vldr	s14, [r3]
 80182f4:	eea7 7a80 	vfma.f32	s14, s15, s0
 80182f8:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
 80182fc:	686b      	ldr	r3, [r5, #4]
 80182fe:	3402      	adds	r4, #2
 8018300:	429c      	cmp	r4, r3
 8018302:	da13      	bge.n	801832c <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
 8018304:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	Lfloat delta = position - i;
 8018306:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
 801830a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801830e:	edd3 7a00 	vldr	s15, [r3]
 8018312:	eee8 7a80 	vfma.f32	s15, s17, s0
 8018316:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 801831a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801831c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018320:	edd3 7a00 	vldr	s15, [r3]
 8018324:	eee8 7a80 	vfma.f32	s15, s17, s0
 8018328:	edc3 7a00 	vstr	s15, [r3]
 }
 801832c:	ecbd 8b06 	vpop	{d8-d10}
 8018330:	bd38      	pop	{r3, r4, r5, pc}
 8018332:	bf00      	nop
 8018334:	3db851ec 	.word	0x3db851ec
 8018338:	00000000 	.word	0x00000000

0801833c <tract_compute>:
{
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	ed2d 8b06 	vpush	{d8-d10}
	_tract* tr = *t;
 8018342:	6804      	ldr	r4, [r0, #0]
    Lfloat oneMinusLambda = 1.0f - lambda;
 8018344:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
{
 8018348:	b083      	sub	sp, #12
 801834a:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 801834e:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
{
 8018352:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat oneMinusLambda = 1.0f - lambda;
 8018356:	ee79 8a60 	vsub.f32	s17, s18, s1
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 801835a:	ed9f aabd 	vldr	s20, [pc, #756]	; 8018650 <tract_compute+0x314>
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 801835e:	4628      	mov	r0, r5
 8018360:	f7fc fc6c 	bl	8014c3c <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
 8018364:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8018368:	f7f9 f8f8 	bl	801155c <tSVF_tick>
    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 801836c:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8018370:	ee39 9a67 	vsub.f32	s18, s18, s15
 8018374:	ee29 9a29 	vmul.f32	s18, s18, s19
 8018378:	eea7 9a80 	vfma.f32	s18, s15, s0
 801837c:	eeb0 0a49 	vmov.f32	s0, s18
 8018380:	f001 f944 	bl	801960c <tanhf>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8018384:	4628      	mov	r0, r5
 8018386:	edd4 9a10 	vldr	s19, [r4, #64]	; 0x40
    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 801838a:	eeb0 9a40 	vmov.f32	s18, s0
	_tract* tr = *t;
 801838e:	9401      	str	r4, [sp, #4]
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8018390:	f7fc fc54 	bl	8014c3c <tNoise_tick>
 8018394:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8018398:	ee20 0a0a 	vmul.f32	s0, s0, s20
 801839c:	f7f9 f8de 	bl	801155c <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 80183a0:	ed94 1a36 	vldr	s2, [r4, #216]	; 0xd8
 80183a4:	edd4 0a34 	vldr	s1, [r4, #208]	; 0xd0
 80183a8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80183ac:	a801      	add	r0, sp, #4
 80183ae:	f7ff ff53 	bl	8018258 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 80183b2:	9d01      	ldr	r5, [sp, #4]
 80183b4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 80183b8:	edd5 9a10 	vldr	s19, [r5, #64]	; 0x40
 80183bc:	f7fc fc3e 	bl	8014c3c <tNoise_tick>
 80183c0:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
 80183c4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80183c8:	f7f9 f8c8 	bl	801155c <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 80183cc:	ed95 1a37 	vldr	s2, [r5, #220]	; 0xdc
 80183d0:	ee29 0a80 	vmul.f32	s0, s19, s0
 80183d4:	edd5 0a35 	vldr	s1, [r5, #212]	; 0xd4
 80183d8:	a801      	add	r0, sp, #4
 80183da:	f7ff ff3d 	bl	8018258 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 80183de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80183e0:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 80183e4:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 80183e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 80183ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80183ee:	eea7 9a27 	vfma.f32	s18, s14, s15
 80183f2:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 80183f6:	6862      	ldr	r2, [r4, #4]
 80183f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80183fa:	4413      	add	r3, r2
 80183fc:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 8018400:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018402:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018406:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801840a:	edd1 7a00 	vldr	s15, [r1]
 801840e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018412:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
 8018416:	6863      	ldr	r3, [r4, #4]
 8018418:	2b01      	cmp	r3, #1
 801841a:	dd2f      	ble.n	801847c <tract_compute+0x140>
 801841c:	2304      	movs	r3, #4
 801841e:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8018422:	6b25      	ldr	r5, [r4, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
 8018424:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8018428:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801842a:	eb05 0e03 	add.w	lr, r5, r3
 801842e:	4418      	add	r0, r3
 8018430:	edde 7a00 	vldr	s15, [lr]
 8018434:	ed90 6a00 	vldr	s12, [r0]
 8018438:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 801843c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8018440:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
 8018444:	4419      	add	r1, r3
 8018446:	441a      	add	r2, r3
 8018448:	ed51 6a01 	vldr	s13, [r1, #-4]
 801844c:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8018450:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        w = r * (tr->R[i - 1] + tr->L[i]);
 8018452:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8018456:	441a      	add	r2, r3
 8018458:	eee7 6a67 	vfms.f32	s13, s14, s15
 801845c:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 8018460:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018462:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018464:	4419      	add	r1, r3
 8018466:	441a      	add	r2, r3
 8018468:	3304      	adds	r3, #4
 801846a:	edd1 6a00 	vldr	s13, [r1]
 801846e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018472:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
 8018476:	6862      	ldr	r2, [r4, #4]
 8018478:	4562      	cmp	r2, ip
 801847a:	dcd2      	bgt.n	8018422 <tract_compute+0xe6>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 801847c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801847e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8018482:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801848a:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 801848c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8018490:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018494:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018496:	009b      	lsls	r3, r3, #2
 8018498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801849a:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 801849e:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80184a2:	1d1a      	adds	r2, r3, #4
 80184a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80184a6:	4410      	add	r0, r2
 80184a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184aa:	441d      	add	r5, r3
 80184ac:	edd0 7a00 	vldr	s15, [r0]
 80184b0:	4411      	add	r1, r2
 80184b2:	ed95 6a00 	vldr	s12, [r5]
 80184b6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80184ba:	ee77 5a26 	vadd.f32	s11, s14, s13
 80184be:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80184c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80184c6:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 80184ca:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 80184ce:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 80184d2:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 80184d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80184d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80184da:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 80184dc:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 80184e0:	4419      	add	r1, r3
 80184e2:	ed90 6a00 	vldr	s12, [r0]
 80184e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80184e8:	edd1 7a00 	vldr	s15, [r1]
 80184ec:	ed90 5a00 	vldr	s10, [r0]
 80184f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80184f2:	ee77 5a26 	vadd.f32	s11, s14, s13
 80184f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80184fa:	4411      	add	r1, r2
 80184fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018500:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018504:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8018508:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 801850c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 801850e:	ee28 7a07 	vmul.f32	s14, s16, s14
 8018512:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8018516:	ed91 6a00 	vldr	s12, [r1]
 801851a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 801851c:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8018520:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018522:	4411      	add	r1, r2
 8018524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018526:	441a      	add	r2, r3
 8018528:	edd1 7a00 	vldr	s15, [r1]
 801852c:	edd2 5a00 	vldr	s11, [r2]
 8018530:	ee77 6a26 	vadd.f32	s13, s14, s13
 8018534:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8018538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801853c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018540:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
 8018544:	6862      	ldr	r2, [r4, #4]
 8018546:	2a00      	cmp	r2, #0
 8018548:	dd1d      	ble.n	8018586 <tract_compute+0x24a>
 801854a:	2300      	movs	r3, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
 801854c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018654 <tract_compute+0x318>
    for(i = 0; i < tr->n; i++) {
 8018550:	4618      	mov	r0, r3
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8018552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018554:	469c      	mov	ip, r3
 8018556:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(i = 0; i < tr->n; i++) {
 8018558:	3001      	adds	r0, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
 801855a:	4419      	add	r1, r3
 801855c:	441a      	add	r2, r3
 801855e:	3304      	adds	r3, #4
 8018560:	edd1 7a00 	vldr	s15, [r1]
 8018564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018568:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 801856c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801856e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018570:	4419      	add	r1, r3
 8018572:	4462      	add	r2, ip
 8018574:	edd1 7a00 	vldr	s15, [r1]
 8018578:	ee67 7a87 	vmul.f32	s15, s15, s14
 801857c:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
 8018580:	6862      	ldr	r2, [r4, #4]
 8018582:	4282      	cmp	r2, r0
 8018584:	dce5      	bgt.n	8018552 <tract_compute+0x216>
    tr->lip_output = tr->R[tr->n - 1];
 8018586:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801858a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 801858c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tr->lip_output = tr->R[tr->n - 1];
 801858e:	441a      	add	r2, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018590:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 8018594:	440b      	add	r3, r1
    tr->nose_junc_outL[tr->nose_length] =
 8018596:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    tr->lip_output = tr->R[tr->n - 1];
 8018598:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
 801859c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
 80185a0:	6802      	ldr	r2, [r0, #0]
 80185a2:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 80185a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80185a8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80185ac:	edd2 7a00 	vldr	s15, [r2]
 80185b0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 80185b4:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->nose_length; i++) {
 80185b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80185ba:	2a01      	cmp	r2, #1
 80185bc:	dd27      	ble.n	801860e <tract_compute+0x2d2>
 80185be:	2304      	movs	r3, #4
 80185c0:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80185c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
    for(i = 1; i < tr->nose_length; i++) {
 80185c6:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80185ca:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80185cc:	4418      	add	r0, r3
 80185ce:	eb05 0e03 	add.w	lr, r5, r3
 80185d2:	edd0 7a00 	vldr	s15, [r0]
 80185d6:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80185da:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80185de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185e2:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80185e4:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80185e6:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80185ea:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80185ee:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 80185f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80185f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80185f6:	4419      	add	r1, r3
 80185f8:	441a      	add	r2, r3
 80185fa:	3304      	adds	r3, #4
 80185fc:	ed91 7a00 	vldr	s14, [r1]
 8018600:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018604:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8018608:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801860a:	4562      	cmp	r2, ip
 801860c:	dcda      	bgt.n	80185c4 <tract_compute+0x288>
    for(i = 0; i < tr->nose_length; i++) {
 801860e:	2a00      	cmp	r2, #0
 8018610:	dd13      	ble.n	801863a <tract_compute+0x2fe>
 8018612:	2300      	movs	r3, #0
 8018614:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
 8018616:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8018618:	469c      	mov	ip, r3
 801861a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    for(i = 0; i < tr->nose_length; i++) {
 801861c:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
 801861e:	4419      	add	r1, r3
 8018620:	441a      	add	r2, r3
 8018622:	3304      	adds	r3, #4
 8018624:	6809      	ldr	r1, [r1, #0]
 8018626:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 8018628:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801862a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801862c:	4419      	add	r1, r3
 801862e:	4462      	add	r2, ip
 8018630:	6809      	ldr	r1, [r1, #0]
 8018632:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8018634:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8018636:	4282      	cmp	r2, r0
 8018638:	dced      	bgt.n	8018616 <tract_compute+0x2da>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 801863a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801863c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018640:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018644:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
}
 8018648:	b003      	add	sp, #12
 801864a:	ecbd 8b06 	vpop	{d8-d10}
 801864e:	bd30      	pop	{r4, r5, pc}
 8018650:	3e4ccccd 	.word	0x3e4ccccd
 8018654:	3f7fbe77 	.word	0x3f7fbe77

08018658 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
 8018658:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
 801865a:	699d      	ldr	r5, [r3, #24]
{
 801865c:	b085      	sub	sp, #20
 801865e:	4607      	mov	r7, r0
 8018660:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8018662:	2018      	movs	r0, #24
 8018664:	4629      	mov	r1, r5
{
 8018666:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
 8018668:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 801866a:	f7fb fdaf 	bl	80141cc <mpool_alloc>
 801866e:	4604      	mov	r4, r0
 8018670:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018672:	4629      	mov	r1, r5
	v->mempool = m;
 8018674:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018676:	203c      	movs	r0, #60	; 0x3c
 8018678:	f7fb fe0c 	bl	8014294 <mpool_calloc>
 801867c:	6060      	str	r0, [r4, #4]
 801867e:	4603      	mov	r3, r0
	glot->mempool = m;
 8018680:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018682:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8018688:	480d      	ldr	r0, [pc, #52]	; (80186c0 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
 801868a:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 801868c:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 801868e:	480d      	ldr	r0, [pc, #52]	; (80186c4 <tVoc_init+0x6c>)
 8018690:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
 8018692:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018694:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
 8018698:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 801869a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
 801869e:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80186a0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glottis_setup_waveform(&glot);
 80186a4:	f7fe ffe4 	bl	8017670 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 80186a8:	ab02      	add	r3, sp, #8
 80186aa:	9a01      	ldr	r2, [sp, #4]
 80186ac:	4631      	mov	r1, r6
 80186ae:	f104 0008 	add.w	r0, r4, #8
 80186b2:	f7ff f99d 	bl	80179f0 <tract_initToPool>
	v->counter = 0;
 80186b6:	2300      	movs	r3, #0
 80186b8:	6123      	str	r3, [r4, #16]
}
 80186ba:	b005      	add	sp, #20
 80186bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186be:	bf00      	nop
 80186c0:	430c0000 	.word	0x430c0000
 80186c4:	3f19999a 	.word	0x3f19999a

080186c8 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 80186c8:	b538      	push	{r3, r4, r5, lr}
 80186ca:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 80186ce:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 80186d0:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
 80186d2:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
 80186d6:	b323      	cbz	r3, 8018722 <tVoc_tick+0x5a>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 80186d8:	ee07 3a90 	vmov	s15, r3
 80186dc:	eddf 9a21 	vldr	s19, [pc, #132]	; 8018764 <tVoc_tick+0x9c>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
 80186e0:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 80186e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
 80186e6:	f7ff f87f 	bl	80177e8 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
 80186ea:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
 80186ec:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
 80186f0:	ee68 0a29 	vmul.f32	s1, s16, s19
 80186f4:	f7ff fe22 	bl	801833c <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
 80186f8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 80186fc:	edd3 8a2c 	vldr	s17, [r3, #176]	; 0xb0
 8018700:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8018704:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (v->doubleCompute)
 8018708:	b99a      	cbnz	r2, 8018732 <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
 801870a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801870e:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}

	v->counter = (v->counter + 1) & 63;
 8018712:	6923      	ldr	r3, [r4, #16]
 8018714:	3301      	adds	r3, #1
 8018716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801871a:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 801871c:	ecbd 8b04 	vpop	{d8-d9}
 8018720:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8018722:	4628      	mov	r0, r5
 8018724:	f7ff fd1a 	bl	801815c <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8018728:	4628      	mov	r0, r5
 801872a:	f7ff f8d5 	bl	80178d8 <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 801872e:	6923      	ldr	r3, [r4, #16]
 8018730:	e7d2      	b.n	80186d8 <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8018732:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		tract_compute(&v->tr, glot, lambda2);
 8018736:	4628      	mov	r0, r5
 8018738:	eeb0 0a49 	vmov.f32	s0, s18
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 801873c:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
 8018740:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8018744:	f7ff fdfa 	bl	801833c <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018748:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.125f;
 801874a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 801874e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018752:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8018756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801875a:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.125f;
 801875e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018762:	e7d6      	b.n	8018712 <tVoc_tick+0x4a>
 8018764:	3c800000 	.word	0x3c800000

08018768 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 8018768:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 801876a:	60d9      	str	r1, [r3, #12]
}
 801876c:	4770      	bx	lr
 801876e:	bf00      	nop

08018770 <tVoc_setFreq>:
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
 8018770:	6803      	ldr	r3, [r0, #0]
 8018772:	685b      	ldr	r3, [r3, #4]
 8018774:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018778:	4770      	bx	lr
 801877a:	bf00      	nop

0801877c <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
 801877c:	6800      	ldr	r0, [r0, #0]
 801877e:	3008      	adds	r0, #8
 8018780:	f7ff bb84 	b.w	8017e8c <tract_newLength>

08018784 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
 8018784:	6803      	ldr	r3, [r0, #0]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801878c:	4770      	bx	lr
 801878e:	bf00      	nop

08018790 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
 8018790:	6803      	ldr	r3, [r0, #0]
 8018792:	689b      	ldr	r3, [r3, #8]
 8018794:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 8018798:	4770      	bx	lr
 801879a:	bf00      	nop

0801879c <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->TnoiseGain = gain;
 801879c:	6803      	ldr	r3, [r0, #0]
 801879e:	689b      	ldr	r3, [r3, #8]
 80187a0:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 80187a4:	4770      	bx	lr
 80187a6:	bf00      	nop

080187a8 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->AnoiseGain = gain;
 80187a8:	6803      	ldr	r3, [r0, #0]
 80187aa:	689b      	ldr	r3, [r3, #8]
 80187ac:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop

080187b4 <tVoc_setAspirationNoiseFilterFreq>:

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
 80187b4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80187b8:	eddf 7a05 	vldr	s15, [pc, #20]	; 80187d0 <tVoc_setAspirationNoiseFilterFreq+0x1c>
 80187bc:	6803      	ldr	r3, [r0, #0]
 80187be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80187c2:	6898      	ldr	r0, [r3, #8]
 80187c4:	30c8      	adds	r0, #200	; 0xc8
 80187c6:	eeb0 0a67 	vmov.f32	s0, s15
 80187ca:	f7f8 bf35 	b.w	8011638 <tSVF_setFreqFast>
 80187ce:	bf00      	nop
 80187d0:	42700000 	.word	0x42700000

080187d4 <tVoc_setAspirationNoiseFilterQ>:
}

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
	_tVoc* v = *voc;
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
 80187d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80187d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80187f0 <tVoc_setAspirationNoiseFilterQ+0x1c>
 80187dc:	6803      	ldr	r3, [r0, #0]
 80187de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80187e2:	6898      	ldr	r0, [r3, #8]
 80187e4:	30c8      	adds	r0, #200	; 0xc8
 80187e6:	eeb0 0a67 	vmov.f32	s0, s15
 80187ea:	f7f8 bf67 	b.w	80116bc <tSVF_setQ>
 80187ee:	bf00      	nop
 80187f0:	3efae148 	.word	0x3efae148
 80187f4:	00000000 	.word	0x00000000

080187f8 <tVoc_set_tongue_and_touch_diameters>:
}


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 80187f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fa:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
 80187fe:	6805      	ldr	r5, [r0, #0]
{
 8018800:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018806:	68ab      	ldr	r3, [r5, #8]
{
 8018808:	eeb0 9a40 	vmov.f32	s18, s0
 801880c:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018810:	6d5c      	ldr	r4, [r3, #84]	; 0x54
{
 8018812:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018816:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	for (i = 0; i < v->tr->n; i++)
 8018818:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 801881a:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
 801881c:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 801881e:	ee07 2a90 	vmov	s15, r2
 8018822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018826:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
 801882a:	dd0d      	ble.n	8018848 <tVoc_set_tongue_and_touch_diameters+0x50>
 801882c:	4630      	mov	r0, r6
 801882e:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 8018830:	699b      	ldr	r3, [r3, #24]
 8018832:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
 8018836:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
 801883e:	68ab      	ldr	r3, [r5, #8]
 8018840:	6859      	ldr	r1, [r3, #4]
 8018842:	4291      	cmp	r1, r2
 8018844:	dcf4      	bgt.n	8018830 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018846:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8018848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801884a:	42a2      	cmp	r2, r4
 801884c:	dd47      	ble.n	80188de <tVoc_set_tongue_and_touch_diameters+0xe6>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 801884e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
#ifdef ARM_MATH_CM7
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018852:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8018a50 <tVoc_set_tongue_and_touch_diameters+0x258>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8018856:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 801885a:	eddf 9a7e 	vldr	s19, [pc, #504]	; 8018a54 <tVoc_set_tongue_and_touch_diameters+0x25c>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
 801885e:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 8018862:	eb06 0784 	add.w	r7, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018866:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
 801886a:	ed9f ca7b 	vldr	s24, [pc, #492]	; 8018a58 <tVoc_set_tongue_and_touch_diameters+0x260>
			curve *= 0.94f;
 801886e:	eddf ba7b 	vldr	s23, [pc, #492]	; 8018a5c <tVoc_set_tongue_and_touch_diameters+0x264>
 8018872:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8018a40 <tVoc_set_tongue_and_touch_diameters+0x248>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018876:	eee7 9a87 	vfma.f32	s19, s15, s14
 801887a:	ee28 8b06 	vmul.f64	d8, d8, d6
 801887e:	e00c      	b.n	801889a <tVoc_set_tongue_and_touch_diameters+0xa2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8018880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018882:	3b02      	subs	r3, #2
 8018884:	42a3      	cmp	r3, r4
 8018886:	d023      	beq.n	80188d0 <tVoc_set_tongue_and_touch_diameters+0xd8>
		theDiameters[i] = 1.5f - curve;
 8018888:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 801888c:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
 801888e:	ece7 7a01 	vstmia	r7!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018892:	68ab      	ldr	r3, [r5, #8]
 8018894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018896:	42a2      	cmp	r2, r4
 8018898:	dd20      	ble.n	80188dc <tVoc_set_tongue_and_touch_diameters+0xe4>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 801889a:	ee07 4a90 	vmov	s15, r4
 801889e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80188a2:	ee39 7a47 	vsub.f32	s14, s18, s14
 80188a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80188aa:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 80188ae:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 80188b2:	f7e7 fea3 	bl	80005fc <arm_cos_f32>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 80188b6:	68ab      	ldr	r3, [r5, #8]
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 80188b8:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 80188bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80188be:	1e91      	subs	r1, r2, #2
 80188c0:	42a1      	cmp	r1, r4
 80188c2:	d008      	beq.n	80188d6 <tVoc_set_tongue_and_touch_diameters+0xde>
 80188c4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80188c6:	3901      	subs	r1, #1
 80188c8:	42a1      	cmp	r1, r4
 80188ca:	d004      	beq.n	80188d6 <tVoc_set_tongue_and_touch_diameters+0xde>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 80188cc:	42a2      	cmp	r2, r4
 80188ce:	d1d7      	bne.n	8018880 <tVoc_set_tongue_and_touch_diameters+0x88>
			curve *= 0.94f;
 80188d0:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80188d4:	e7d8      	b.n	8018888 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
 80188d6:	ee20 0a0c 	vmul.f32	s0, s0, s24
 80188da:	e7f7      	b.n	80188cc <tVoc_set_tongue_and_touch_diameters+0xd4>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 80188dc:	6859      	ldr	r1, [r3, #4]
 80188de:	ee07 1a90 	vmov	s15, r1
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 80188e2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8018a60 <tVoc_set_tongue_and_touch_diameters+0x268>
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 80188e6:	ed9f 8a5f 	vldr	s16, [pc, #380]	; 8018a64 <tVoc_set_tongue_and_touch_diameters+0x26c>
 80188ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 80188ee:	ee27 7a87 	vmul.f32	s14, s15, s14
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 80188f2:	ee27 8a88 	vmul.f32	s16, s15, s16
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 80188f6:	eeb4 7aea 	vcmpe.f32	s14, s21
 80188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fe:	dc0e      	bgt.n	801891e <tVoc_set_tongue_and_touch_diameters+0x126>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018900:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8018904:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8018a68 <tVoc_set_tongue_and_touch_diameters+0x270>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018908:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 801890c:	ee27 6a86 	vmul.f32	s12, s15, s12
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018910:	eef4 6aea 	vcmpe.f32	s13, s21
 8018914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018918:	d878      	bhi.n	8018a0c <tVoc_set_tongue_and_touch_diameters+0x214>
 801891a:	eeb0 8a46 	vmov.f32	s16, s12
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
		Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 801891e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8018922:	eeb4 ba47 	vcmp.f32	s22, s14
 8018926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801892a:	d504      	bpl.n	8018936 <tVoc_set_tongue_and_touch_diameters+0x13e>
 801892c:	eef4 7aea 	vcmpe.f32	s15, s21
 8018930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018934:	dc02      	bgt.n	801893c <tVoc_set_tongue_and_touch_diameters+0x144>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
 8018936:	ecbd 8b0a 	vpop	{d8-d12}
 801893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 801893c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8018940:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
 8018944:	feb8 7a6a 	vrinta.f32	s14, s21
 8018948:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 801894c:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8018950:	ee78 8a29 	vadd.f32	s17, s16, s19
		int intIndex = roundf(touch_index);
 8018954:	ee17 7a10 	vmov	r7, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8018958:	eef1 7a67 	vneg.f32	s15, s15
 801895c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018964:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8018968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801896c:	d5e3      	bpl.n	8018936 <tVoc_set_tongue_and_touch_diameters+0x13e>
		Lfloat invWidth = 1.0f / width;
 801896e:	ee89 ca88 	vdiv.f32	s24, s19, s16
 8018972:	ee17 4a90 	vmov	r4, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 8018976:	ed9f aa3d 	vldr	s20, [pc, #244]	; 8018a6c <tVoc_set_tongue_and_touch_diameters+0x274>
 801897a:	443c      	add	r4, r7
 801897c:	f1c7 0701 	rsb	r7, r7, #1
 8018980:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8018984:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8018988:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8018a48 <tVoc_set_tongue_and_touch_diameters+0x250>
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 801898c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8018990:	ee2c cb06 	vmul.f64	d12, d12, d6
			Lfloat relpos = (intIndex+i) - touch_index;
 8018994:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8018998:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
 801899a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 801899e:	db26      	blt.n	80189ee <tVoc_set_tongue_and_touch_diameters+0x1f6>
 80189a0:	68ab      	ldr	r3, [r5, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
 80189a2:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80189a6:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
 80189a8:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80189ac:	429c      	cmp	r4, r3
 80189ae:	da1e      	bge.n	80189ee <tVoc_set_tongue_and_touch_diameters+0x1f6>
			if (relpos <= 0.0f) shrink = 0.0f;
 80189b0:	eef4 7ac9 	vcmpe.f32	s15, s18
			relpos = fabsf(relpos)-0.5f;
 80189b4:	ee37 0ac9 	vsub.f32	s0, s15, s18
			if (relpos <= 0.0f) shrink = 0.0f;
 80189b8:	eef0 7a4a 	vmov.f32	s15, s20
 80189bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c0:	d906      	bls.n	80189d0 <tVoc_set_tongue_and_touch_diameters+0x1d8>
			else if (relpos > width) shrink = 1.0f;
 80189c2:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80189c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80189ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ce:	d528      	bpl.n	8018a22 <tVoc_set_tongue_and_touch_diameters+0x22a>
			if (touch_diameter < theDiameters[intIndex+i])
 80189d0:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 80189d4:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 80189d8:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 80189dc:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 80189e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 80189e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189e8:	bfc8      	it	gt
 80189ea:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80189ee:	193b      	adds	r3, r7, r4
 80189f0:	3604      	adds	r6, #4
 80189f2:	3401      	adds	r4, #1
 80189f4:	ee07 3a90 	vmov	s15, r3
 80189f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189fc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a04:	d4c6      	bmi.n	8018994 <tVoc_set_tongue_and_touch_diameters+0x19c>
}
 8018a06:	ecbd 8b0a 	vpop	{d8-d12}
 8018a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8018a0c:	ee7a 5ac7 	vsub.f32	s11, s21, s14
 8018a10:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018a14:	ee65 6a86 	vmul.f32	s13, s11, s12
 8018a18:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8018a1c:	ee38 8a06 	vadd.f32	s16, s16, s12
 8018a20:	e77d      	b.n	801891e <tVoc_set_tongue_and_touch_diameters+0x126>
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 8018a22:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8018a26:	ee20 0b0c 	vmul.f64	d0, d0, d12
 8018a2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018a2e:	f7e7 fde5 	bl	80005fc <arm_cos_f32>
 8018a32:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8018a36:	ee60 7a09 	vmul.f32	s15, s0, s18
 8018a3a:	e7c9      	b.n	80189d0 <tVoc_set_tongue_and_touch_diameters+0x1d8>
 8018a3c:	f3af 8000 	nop.w
 8018a40:	4d2562ef 	.word	0x4d2562ef
 8018a44:	400ba561 	.word	0x400ba561
 8018a48:	54442d18 	.word	0x54442d18
 8018a4c:	400921fb 	.word	0x400921fb
 8018a50:	3f2aaaab 	.word	0x3f2aaaab
 8018a54:	3f99999a 	.word	0x3f99999a
 8018a58:	3f4ccccd 	.word	0x3f4ccccd
 8018a5c:	3f70a3d7 	.word	0x3f70a3d7
 8018a60:	3f11745d 	.word	0x3f11745d
 8018a64:	3e68ba2f 	.word	0x3e68ba2f
 8018a68:	3de8ba2f 	.word	0x3de8ba2f
 8018a6c:	00000000 	.word	0x00000000

08018a70 <tVoc_set_tongue_shape_and_touch>:
{
 8018a70:	b500      	push	{lr}
	tongue_diameter += 2.05f;
 8018a72:	eddf 7a23 	vldr	s15, [pc, #140]	; 8018b00 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018a76:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8018a7a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8018b04 <tVoc_set_tongue_shape_and_touch+0x94>
{
 8018a7e:	ed2d 8b04 	vpush	{d8-d9}
 8018a82:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
 8018a86:	b083      	sub	sp, #12
	_tVoc* v = *voc;
 8018a88:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
 8018a8a:	eddf 9a1f 	vldr	s19, [pc, #124]	; 8018b08 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018a8e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
 8018a92:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018a94:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
 8018a96:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
 8018a98:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
 8018a9c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8018b0c <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018aa0:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
	touch_diameter *= 1.6f;
 8018aa4:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018aa8:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018aac:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018ab4:	69d9      	ldr	r1, [r3, #28]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018ab6:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018aba:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018abe:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018ac2:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018ac6:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018aca:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018ace:	eeb0 0a68 	vmov.f32	s0, s17
 8018ad2:	eeb0 1a49 	vmov.f32	s2, s18
 8018ad6:	f7ff fe8f 	bl	80187f8 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 8018ada:	9b01      	ldr	r3, [sp, #4]
 8018adc:	689a      	ldr	r2, [r3, #8]
 8018ade:	edc2 8a34 	vstr	s17, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 8018ae2:	689a      	ldr	r2, [r3, #8]
 8018ae4:	edc2 9a36 	vstr	s19, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
 8018ae8:	689a      	ldr	r2, [r3, #8]
 8018aea:	ed82 9a35 	vstr	s18, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 8018aee:	689b      	ldr	r3, [r3, #8]
 8018af0:	ed83 8a37 	vstr	s16, [r3, #220]	; 0xdc
}
 8018af4:	b003      	add	sp, #12
 8018af6:	ecbd 8b04 	vpop	{d8-d9}
 8018afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8018afe:	bf00      	nop
 8018b00:	3fb9999a 	.word	0x3fb9999a
 8018b04:	00000000 	.word	0x00000000
 8018b08:	40033333 	.word	0x40033333
 8018b0c:	3fcccccd 	.word	0x3fcccccd

08018b10 <tVoc_rescaleDiameter>:
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
	v->tr->diameterScale = scale;
 8018b10:	6803      	ldr	r3, [r0, #0]
 8018b12:	689b      	ldr	r3, [r3, #8]
 8018b14:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
 8018b18:	4770      	bx	lr
 8018b1a:	bf00      	nop

08018b1c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8018b1c:	4770      	bx	lr
 8018b1e:	bf00      	nop

08018b20 <LEAF_init>:
{
 8018b20:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8018b22:	6200      	str	r0, [r0, #32]
{
 8018b24:	4604      	mov	r4, r0
 8018b26:	461d      	mov	r5, r3
 8018b28:	ed2d 8b02 	vpush	{d8}
 8018b2c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8018b30:	f7fb fb32 	bl	8014198 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8018b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8018b38:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8018b6c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8018b3c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8018b3e:	4b0c      	ldr	r3, [pc, #48]	; (8018b70 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8018b40:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8018b44:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8018b48:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8018b4a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8018b4c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8018b50:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8018b54:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8018b58:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8018b5c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8018b60:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8018b64:	ecbd 8b02 	vpop	{d8}
 8018b68:	bd38      	pop	{r3, r4, r5, pc}
 8018b6a:	bf00      	nop
 8018b6c:	40c90fdb 	.word	0x40c90fdb
 8018b70:	08018b1d 	.word	0x08018b1d

08018b74 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8018b74:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8018b76:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8018b7a:	2401      	movs	r4, #1
 8018b7c:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8018b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8018b82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018b84:	4718      	bx	r3
 8018b86:	bf00      	nop

08018b88 <__itoa>:
 8018b88:	1e93      	subs	r3, r2, #2
 8018b8a:	2b22      	cmp	r3, #34	; 0x22
 8018b8c:	b510      	push	{r4, lr}
 8018b8e:	460c      	mov	r4, r1
 8018b90:	d904      	bls.n	8018b9c <__itoa+0x14>
 8018b92:	2300      	movs	r3, #0
 8018b94:	700b      	strb	r3, [r1, #0]
 8018b96:	461c      	mov	r4, r3
 8018b98:	4620      	mov	r0, r4
 8018b9a:	bd10      	pop	{r4, pc}
 8018b9c:	2a0a      	cmp	r2, #10
 8018b9e:	d109      	bne.n	8018bb4 <__itoa+0x2c>
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	da07      	bge.n	8018bb4 <__itoa+0x2c>
 8018ba4:	232d      	movs	r3, #45	; 0x2d
 8018ba6:	700b      	strb	r3, [r1, #0]
 8018ba8:	4240      	negs	r0, r0
 8018baa:	2101      	movs	r1, #1
 8018bac:	4421      	add	r1, r4
 8018bae:	f000 f805 	bl	8018bbc <__utoa>
 8018bb2:	e7f1      	b.n	8018b98 <__itoa+0x10>
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	e7f9      	b.n	8018bac <__itoa+0x24>

08018bb8 <itoa>:
 8018bb8:	f7ff bfe6 	b.w	8018b88 <__itoa>

08018bbc <__utoa>:
 8018bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bbe:	4c1f      	ldr	r4, [pc, #124]	; (8018c3c <__utoa+0x80>)
 8018bc0:	b08b      	sub	sp, #44	; 0x2c
 8018bc2:	4605      	mov	r5, r0
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	466e      	mov	r6, sp
 8018bc8:	f104 0c20 	add.w	ip, r4, #32
 8018bcc:	6820      	ldr	r0, [r4, #0]
 8018bce:	6861      	ldr	r1, [r4, #4]
 8018bd0:	4637      	mov	r7, r6
 8018bd2:	c703      	stmia	r7!, {r0, r1}
 8018bd4:	3408      	adds	r4, #8
 8018bd6:	4564      	cmp	r4, ip
 8018bd8:	463e      	mov	r6, r7
 8018bda:	d1f7      	bne.n	8018bcc <__utoa+0x10>
 8018bdc:	7921      	ldrb	r1, [r4, #4]
 8018bde:	7139      	strb	r1, [r7, #4]
 8018be0:	1e91      	subs	r1, r2, #2
 8018be2:	6820      	ldr	r0, [r4, #0]
 8018be4:	6038      	str	r0, [r7, #0]
 8018be6:	2922      	cmp	r1, #34	; 0x22
 8018be8:	f04f 0100 	mov.w	r1, #0
 8018bec:	d904      	bls.n	8018bf8 <__utoa+0x3c>
 8018bee:	7019      	strb	r1, [r3, #0]
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	b00b      	add	sp, #44	; 0x2c
 8018bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bf8:	1e58      	subs	r0, r3, #1
 8018bfa:	4684      	mov	ip, r0
 8018bfc:	fbb5 f7f2 	udiv	r7, r5, r2
 8018c00:	fb02 5617 	mls	r6, r2, r7, r5
 8018c04:	3628      	adds	r6, #40	; 0x28
 8018c06:	446e      	add	r6, sp
 8018c08:	460c      	mov	r4, r1
 8018c0a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8018c0e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8018c12:	462e      	mov	r6, r5
 8018c14:	42b2      	cmp	r2, r6
 8018c16:	f101 0101 	add.w	r1, r1, #1
 8018c1a:	463d      	mov	r5, r7
 8018c1c:	d9ee      	bls.n	8018bfc <__utoa+0x40>
 8018c1e:	2200      	movs	r2, #0
 8018c20:	545a      	strb	r2, [r3, r1]
 8018c22:	1919      	adds	r1, r3, r4
 8018c24:	1aa5      	subs	r5, r4, r2
 8018c26:	42aa      	cmp	r2, r5
 8018c28:	dae3      	bge.n	8018bf2 <__utoa+0x36>
 8018c2a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018c2e:	780e      	ldrb	r6, [r1, #0]
 8018c30:	7006      	strb	r6, [r0, #0]
 8018c32:	3201      	adds	r2, #1
 8018c34:	f801 5901 	strb.w	r5, [r1], #-1
 8018c38:	e7f4      	b.n	8018c24 <__utoa+0x68>
 8018c3a:	bf00      	nop
 8018c3c:	080260b0 	.word	0x080260b0

08018c40 <memset>:
 8018c40:	4402      	add	r2, r0
 8018c42:	4603      	mov	r3, r0
 8018c44:	4293      	cmp	r3, r2
 8018c46:	d100      	bne.n	8018c4a <memset+0xa>
 8018c48:	4770      	bx	lr
 8018c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8018c4e:	e7f9      	b.n	8018c44 <memset+0x4>

08018c50 <__libc_init_array>:
 8018c50:	b570      	push	{r4, r5, r6, lr}
 8018c52:	4d0d      	ldr	r5, [pc, #52]	; (8018c88 <__libc_init_array+0x38>)
 8018c54:	4c0d      	ldr	r4, [pc, #52]	; (8018c8c <__libc_init_array+0x3c>)
 8018c56:	1b64      	subs	r4, r4, r5
 8018c58:	10a4      	asrs	r4, r4, #2
 8018c5a:	2600      	movs	r6, #0
 8018c5c:	42a6      	cmp	r6, r4
 8018c5e:	d109      	bne.n	8018c74 <__libc_init_array+0x24>
 8018c60:	4d0b      	ldr	r5, [pc, #44]	; (8018c90 <__libc_init_array+0x40>)
 8018c62:	4c0c      	ldr	r4, [pc, #48]	; (8018c94 <__libc_init_array+0x44>)
 8018c64:	f002 fa04 	bl	801b070 <_init>
 8018c68:	1b64      	subs	r4, r4, r5
 8018c6a:	10a4      	asrs	r4, r4, #2
 8018c6c:	2600      	movs	r6, #0
 8018c6e:	42a6      	cmp	r6, r4
 8018c70:	d105      	bne.n	8018c7e <__libc_init_array+0x2e>
 8018c72:	bd70      	pop	{r4, r5, r6, pc}
 8018c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c78:	4798      	blx	r3
 8018c7a:	3601      	adds	r6, #1
 8018c7c:	e7ee      	b.n	8018c5c <__libc_init_array+0xc>
 8018c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c82:	4798      	blx	r3
 8018c84:	3601      	adds	r6, #1
 8018c86:	e7f2      	b.n	8018c6e <__libc_init_array+0x1e>
 8018c88:	080273a0 	.word	0x080273a0
 8018c8c:	080273a0 	.word	0x080273a0
 8018c90:	080273a0 	.word	0x080273a0
 8018c94:	080273a4 	.word	0x080273a4

08018c98 <memcpy>:
 8018c98:	440a      	add	r2, r1
 8018c9a:	4291      	cmp	r1, r2
 8018c9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018ca0:	d100      	bne.n	8018ca4 <memcpy+0xc>
 8018ca2:	4770      	bx	lr
 8018ca4:	b510      	push	{r4, lr}
 8018ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018cae:	4291      	cmp	r1, r2
 8018cb0:	d1f9      	bne.n	8018ca6 <memcpy+0xe>
 8018cb2:	bd10      	pop	{r4, pc}

08018cb4 <frexpf>:
 8018cb4:	ee10 3a10 	vmov	r3, s0
 8018cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018cbc:	2100      	movs	r1, #0
 8018cbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018cc2:	6001      	str	r1, [r0, #0]
 8018cc4:	da19      	bge.n	8018cfa <frexpf+0x46>
 8018cc6:	b1c2      	cbz	r2, 8018cfa <frexpf+0x46>
 8018cc8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018ccc:	d10a      	bne.n	8018ce4 <frexpf+0x30>
 8018cce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018cfc <frexpf+0x48>
 8018cd2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018cd6:	f06f 0118 	mvn.w	r1, #24
 8018cda:	ee17 3a90 	vmov	r3, s15
 8018cde:	6001      	str	r1, [r0, #0]
 8018ce0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018ce4:	6801      	ldr	r1, [r0, #0]
 8018ce6:	15d2      	asrs	r2, r2, #23
 8018ce8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018cec:	3a7e      	subs	r2, #126	; 0x7e
 8018cee:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8018cf2:	4411      	add	r1, r2
 8018cf4:	ee00 3a10 	vmov	s0, r3
 8018cf8:	6001      	str	r1, [r0, #0]
 8018cfa:	4770      	bx	lr
 8018cfc:	4c000000 	.word	0x4c000000

08018d00 <expf>:
 8018d00:	ee10 2a10 	vmov	r2, s0
 8018d04:	f240 412a 	movw	r1, #1066	; 0x42a
 8018d08:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8018d0c:	428b      	cmp	r3, r1
 8018d0e:	b430      	push	{r4, r5}
 8018d10:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018d14:	d92a      	bls.n	8018d6c <expf+0x6c>
 8018d16:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8018d1a:	d058      	beq.n	8018dce <expf+0xce>
 8018d1c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8018d20:	d303      	bcc.n	8018d2a <expf+0x2a>
 8018d22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018d26:	bc30      	pop	{r4, r5}
 8018d28:	4770      	bx	lr
 8018d2a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018dd4 <expf+0xd4>
 8018d2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d36:	dd03      	ble.n	8018d40 <expf+0x40>
 8018d38:	bc30      	pop	{r4, r5}
 8018d3a:	2000      	movs	r0, #0
 8018d3c:	f000 bbd6 	b.w	80194ec <__math_oflowf>
 8018d40:	eddf 7a25 	vldr	s15, [pc, #148]	; 8018dd8 <expf+0xd8>
 8018d44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d4c:	d503      	bpl.n	8018d56 <expf+0x56>
 8018d4e:	bc30      	pop	{r4, r5}
 8018d50:	2000      	movs	r0, #0
 8018d52:	f000 bbbf 	b.w	80194d4 <__math_uflowf>
 8018d56:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018ddc <expf+0xdc>
 8018d5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d62:	d503      	bpl.n	8018d6c <expf+0x6c>
 8018d64:	bc30      	pop	{r4, r5}
 8018d66:	2000      	movs	r0, #0
 8018d68:	f000 bbba 	b.w	80194e0 <__math_may_uflowf>
 8018d6c:	4b1c      	ldr	r3, [pc, #112]	; (8018de0 <expf+0xe0>)
 8018d6e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018d72:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8018d76:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8018d7a:	eeb0 7b44 	vmov.f64	d7, d4
 8018d7e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018d82:	ee17 0a10 	vmov	r0, s14
 8018d86:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018d8a:	f000 021f 	and.w	r2, r0, #31
 8018d8e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018d92:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8018d96:	ee27 4b07 	vmul.f64	d4, d7, d7
 8018d9a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8018d9e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8018da2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018da6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8018daa:	684d      	ldr	r5, [r1, #4]
 8018dac:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8018db0:	2100      	movs	r1, #0
 8018db2:	190a      	adds	r2, r1, r4
 8018db4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8018db8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8018dbc:	ec43 2b17 	vmov	d7, r2, r3
 8018dc0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8018dc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018dc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018dcc:	e7ab      	b.n	8018d26 <expf+0x26>
 8018dce:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8018de4 <expf+0xe4>
 8018dd2:	e7a8      	b.n	8018d26 <expf+0x26>
 8018dd4:	42b17217 	.word	0x42b17217
 8018dd8:	c2cff1b4 	.word	0xc2cff1b4
 8018ddc:	c2ce8ecf 	.word	0xc2ce8ecf
 8018de0:	080260d8 	.word	0x080260d8
 8018de4:	00000000 	.word	0x00000000

08018de8 <logf>:
 8018de8:	ee10 3a10 	vmov	r3, s0
 8018dec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018df0:	b410      	push	{r4}
 8018df2:	d055      	beq.n	8018ea0 <logf+0xb8>
 8018df4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8018df8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8018dfc:	d31a      	bcc.n	8018e34 <logf+0x4c>
 8018dfe:	005a      	lsls	r2, r3, #1
 8018e00:	d104      	bne.n	8018e0c <logf+0x24>
 8018e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e06:	2001      	movs	r0, #1
 8018e08:	f000 bb76 	b.w	80194f8 <__math_divzerof>
 8018e0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018e10:	d043      	beq.n	8018e9a <logf+0xb2>
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	db02      	blt.n	8018e1c <logf+0x34>
 8018e16:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8018e1a:	d303      	bcc.n	8018e24 <logf+0x3c>
 8018e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e20:	f000 bb7c 	b.w	801951c <__math_invalidf>
 8018e24:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018ea8 <logf+0xc0>
 8018e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018e2c:	ee10 3a10 	vmov	r3, s0
 8018e30:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8018e34:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8018e38:	491c      	ldr	r1, [pc, #112]	; (8018eac <logf+0xc4>)
 8018e3a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8018e3e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8018e42:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8018e46:	0dd4      	lsrs	r4, r2, #23
 8018e48:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018e4c:	05e4      	lsls	r4, r4, #23
 8018e4e:	ed90 6b00 	vldr	d6, [r0]
 8018e52:	1b1b      	subs	r3, r3, r4
 8018e54:	ee07 3a90 	vmov	s15, r3
 8018e58:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018e60:	15d2      	asrs	r2, r2, #23
 8018e62:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018e66:	ed90 6b02 	vldr	d6, [r0, #8]
 8018e6a:	ee20 4b00 	vmul.f64	d4, d0, d0
 8018e6e:	ee07 2a90 	vmov	s15, r2
 8018e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018e76:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018e7a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8018e7e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8018e82:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018e86:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018e8a:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018e8e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018e92:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018e96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e9e:	4770      	bx	lr
 8018ea0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018eb0 <logf+0xc8>
 8018ea4:	e7f9      	b.n	8018e9a <logf+0xb2>
 8018ea6:	bf00      	nop
 8018ea8:	4b000000 	.word	0x4b000000
 8018eac:	08026220 	.word	0x08026220
 8018eb0:	00000000 	.word	0x00000000

08018eb4 <log2f>:
 8018eb4:	ee10 2a10 	vmov	r2, s0
 8018eb8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018ebc:	b410      	push	{r4}
 8018ebe:	d055      	beq.n	8018f6c <log2f+0xb8>
 8018ec0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8018ec4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018ec8:	d31a      	bcc.n	8018f00 <log2f+0x4c>
 8018eca:	0053      	lsls	r3, r2, #1
 8018ecc:	d104      	bne.n	8018ed8 <log2f+0x24>
 8018ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ed2:	2001      	movs	r0, #1
 8018ed4:	f000 bb10 	b.w	80194f8 <__math_divzerof>
 8018ed8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018edc:	d043      	beq.n	8018f66 <log2f+0xb2>
 8018ede:	2a00      	cmp	r2, #0
 8018ee0:	db02      	blt.n	8018ee8 <log2f+0x34>
 8018ee2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8018ee6:	d303      	bcc.n	8018ef0 <log2f+0x3c>
 8018ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eec:	f000 bb16 	b.w	801951c <__math_invalidf>
 8018ef0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018f74 <log2f+0xc0>
 8018ef4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018ef8:	ee10 3a10 	vmov	r3, s0
 8018efc:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8018f00:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8018f04:	491c      	ldr	r1, [pc, #112]	; (8018f78 <log2f+0xc4>)
 8018f06:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018f0a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8018f0e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8018f12:	0ddc      	lsrs	r4, r3, #23
 8018f14:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018f18:	05e4      	lsls	r4, r4, #23
 8018f1a:	ed90 5b00 	vldr	d5, [r0]
 8018f1e:	1b12      	subs	r2, r2, r4
 8018f20:	ee07 2a90 	vmov	s15, r2
 8018f24:	15db      	asrs	r3, r3, #23
 8018f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018f2a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018f2e:	ed90 7b02 	vldr	d7, [r0, #8]
 8018f32:	ee26 4b06 	vmul.f64	d4, d6, d6
 8018f36:	ee00 3a10 	vmov	s0, r3
 8018f3a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018f3e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8018f42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018f46:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8018f4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018f4e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018f52:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018f56:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8018f5a:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018f5e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018f62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f6a:	4770      	bx	lr
 8018f6c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018f7c <log2f+0xc8>
 8018f70:	e7f9      	b.n	8018f66 <log2f+0xb2>
 8018f72:	bf00      	nop
 8018f74:	4b000000 	.word	0x4b000000
 8018f78:	08026bb0 	.word	0x08026bb0
 8018f7c:	00000000 	.word	0x00000000

08018f80 <exp>:
 8018f80:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8018f82:	ee10 3a90 	vmov	r3, s1
 8018f86:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8018f8a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018f8e:	18a2      	adds	r2, r4, r2
 8018f90:	2a3e      	cmp	r2, #62	; 0x3e
 8018f92:	ee10 1a10 	vmov	r1, s0
 8018f96:	d922      	bls.n	8018fde <exp+0x5e>
 8018f98:	2a00      	cmp	r2, #0
 8018f9a:	da06      	bge.n	8018faa <exp+0x2a>
 8018f9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018fa0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018fa4:	b004      	add	sp, #16
 8018fa6:	bcf0      	pop	{r4, r5, r6, r7}
 8018fa8:	4770      	bx	lr
 8018faa:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8018fae:	f04f 0000 	mov.w	r0, #0
 8018fb2:	d913      	bls.n	8018fdc <exp+0x5c>
 8018fb4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8018fb8:	bf08      	it	eq
 8018fba:	4281      	cmpeq	r1, r0
 8018fbc:	f000 80a0 	beq.w	8019100 <exp+0x180>
 8018fc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018fc4:	4294      	cmp	r4, r2
 8018fc6:	d0e9      	beq.n	8018f9c <exp+0x1c>
 8018fc8:	4283      	cmp	r3, r0
 8018fca:	da03      	bge.n	8018fd4 <exp+0x54>
 8018fcc:	b004      	add	sp, #16
 8018fce:	bcf0      	pop	{r4, r5, r6, r7}
 8018fd0:	f000 b8c6 	b.w	8019160 <__math_uflow>
 8018fd4:	b004      	add	sp, #16
 8018fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8018fd8:	f000 b8ca 	b.w	8019170 <__math_oflow>
 8018fdc:	4604      	mov	r4, r0
 8018fde:	4950      	ldr	r1, [pc, #320]	; (8019120 <exp+0x1a0>)
 8018fe0:	ed91 6b02 	vldr	d6, [r1, #8]
 8018fe4:	ed91 5b00 	vldr	d5, [r1]
 8018fe8:	eeb0 7b46 	vmov.f64	d7, d6
 8018fec:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018ff0:	ee17 5a10 	vmov	r5, s14
 8018ff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018ff8:	ed91 6b04 	vldr	d6, [r1, #16]
 8018ffc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8019000:	eea6 0b07 	vfma.f64	d0, d6, d7
 8019004:	ed91 6b06 	vldr	d6, [r1, #24]
 8019008:	18d8      	adds	r0, r3, r3
 801900a:	f100 030f 	add.w	r3, r0, #15
 801900e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8019012:	eea6 0b07 	vfma.f64	d0, d6, d7
 8019016:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801901a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801901e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8019022:	ed91 4b08 	vldr	d4, [r1, #32]
 8019026:	ee30 6b06 	vadd.f64	d6, d0, d6
 801902a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801902e:	eea3 4b00 	vfma.f64	d4, d3, d0
 8019032:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8019036:	eea4 6b07 	vfma.f64	d6, d4, d7
 801903a:	ee27 7b07 	vmul.f64	d7, d7, d7
 801903e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8019042:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8019046:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801904a:	eea3 4b00 	vfma.f64	d4, d3, d0
 801904e:	2600      	movs	r6, #0
 8019050:	19f2      	adds	r2, r6, r7
 8019052:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8019056:	eea7 6b04 	vfma.f64	d6, d7, d4
 801905a:	2c00      	cmp	r4, #0
 801905c:	d14b      	bne.n	80190f6 <exp+0x176>
 801905e:	42b5      	cmp	r5, r6
 8019060:	db10      	blt.n	8019084 <exp+0x104>
 8019062:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8019066:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8019108 <exp+0x188>
 801906a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801906e:	4610      	mov	r0, r2
 8019070:	ec41 0b10 	vmov	d0, r0, r1
 8019074:	eea6 0b00 	vfma.f64	d0, d6, d0
 8019078:	ee20 0b07 	vmul.f64	d0, d0, d7
 801907c:	b004      	add	sp, #16
 801907e:	bcf0      	pop	{r4, r5, r6, r7}
 8019080:	f000 b88a 	b.w	8019198 <__math_check_oflow>
 8019084:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019088:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801908c:	4610      	mov	r0, r2
 801908e:	ec41 0b17 	vmov	d7, r0, r1
 8019092:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8019096:	ee26 6b07 	vmul.f64	d6, d6, d7
 801909a:	ee37 5b06 	vadd.f64	d5, d7, d6
 801909e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80190a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019110 <exp+0x190>
 80190aa:	d51e      	bpl.n	80190ea <exp+0x16a>
 80190ac:	ee35 3b04 	vadd.f64	d3, d5, d4
 80190b0:	ee37 7b45 	vsub.f64	d7, d7, d5
 80190b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80190b8:	ee34 6b43 	vsub.f64	d6, d4, d3
 80190bc:	ee36 6b05 	vadd.f64	d6, d6, d5
 80190c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80190c4:	ee36 6b03 	vadd.f64	d6, d6, d3
 80190c8:	ee36 5b44 	vsub.f64	d5, d6, d4
 80190cc:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80190d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190d4:	d101      	bne.n	80190da <exp+0x15a>
 80190d6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8019118 <exp+0x198>
 80190da:	ed8d 0b00 	vstr	d0, [sp]
 80190de:	ed9d 7b00 	vldr	d7, [sp]
 80190e2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80190e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80190ea:	ee25 0b00 	vmul.f64	d0, d5, d0
 80190ee:	b004      	add	sp, #16
 80190f0:	bcf0      	pop	{r4, r5, r6, r7}
 80190f2:	f000 b845 	b.w	8019180 <__math_check_uflow>
 80190f6:	ec43 2b10 	vmov	d0, r2, r3
 80190fa:	eea6 0b00 	vfma.f64	d0, d6, d0
 80190fe:	e751      	b.n	8018fa4 <exp+0x24>
 8019100:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8019118 <exp+0x198>
 8019104:	e74e      	b.n	8018fa4 <exp+0x24>
 8019106:	bf00      	nop
 8019108:	00000000 	.word	0x00000000
 801910c:	7f000000 	.word	0x7f000000
 8019110:	00000000 	.word	0x00000000
 8019114:	00100000 	.word	0x00100000
	...
 8019120:	08026340 	.word	0x08026340

08019124 <with_errno>:
 8019124:	b513      	push	{r0, r1, r4, lr}
 8019126:	4604      	mov	r4, r0
 8019128:	ed8d 0b00 	vstr	d0, [sp]
 801912c:	f001 ff9a 	bl	801b064 <__errno>
 8019130:	ed9d 0b00 	vldr	d0, [sp]
 8019134:	6004      	str	r4, [r0, #0]
 8019136:	b002      	add	sp, #8
 8019138:	bd10      	pop	{r4, pc}

0801913a <xflow>:
 801913a:	b082      	sub	sp, #8
 801913c:	b158      	cbz	r0, 8019156 <xflow+0x1c>
 801913e:	eeb1 7b40 	vneg.f64	d7, d0
 8019142:	ed8d 7b00 	vstr	d7, [sp]
 8019146:	ed9d 7b00 	vldr	d7, [sp]
 801914a:	2022      	movs	r0, #34	; 0x22
 801914c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019150:	b002      	add	sp, #8
 8019152:	f7ff bfe7 	b.w	8019124 <with_errno>
 8019156:	eeb0 7b40 	vmov.f64	d7, d0
 801915a:	e7f2      	b.n	8019142 <xflow+0x8>
 801915c:	0000      	movs	r0, r0
	...

08019160 <__math_uflow>:
 8019160:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019168 <__math_uflow+0x8>
 8019164:	f7ff bfe9 	b.w	801913a <xflow>
 8019168:	00000000 	.word	0x00000000
 801916c:	10000000 	.word	0x10000000

08019170 <__math_oflow>:
 8019170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019178 <__math_oflow+0x8>
 8019174:	f7ff bfe1 	b.w	801913a <xflow>
 8019178:	00000000 	.word	0x00000000
 801917c:	70000000 	.word	0x70000000

08019180 <__math_check_uflow>:
 8019180:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019188:	d102      	bne.n	8019190 <__math_check_uflow+0x10>
 801918a:	2022      	movs	r0, #34	; 0x22
 801918c:	f7ff bfca 	b.w	8019124 <with_errno>
 8019190:	4770      	bx	lr
 8019192:	0000      	movs	r0, r0
 8019194:	0000      	movs	r0, r0
	...

08019198 <__math_check_oflow>:
 8019198:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80191b8 <__math_check_oflow+0x20>
 801919c:	eeb0 7bc0 	vabs.f64	d7, d0
 80191a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80191a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191a8:	dd02      	ble.n	80191b0 <__math_check_oflow+0x18>
 80191aa:	2022      	movs	r0, #34	; 0x22
 80191ac:	f7ff bfba 	b.w	8019124 <with_errno>
 80191b0:	4770      	bx	lr
 80191b2:	bf00      	nop
 80191b4:	f3af 8000 	nop.w
 80191b8:	ffffffff 	.word	0xffffffff
 80191bc:	7fefffff 	.word	0x7fefffff

080191c0 <checkint>:
 80191c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80191c4:	2b7e      	cmp	r3, #126	; 0x7e
 80191c6:	dd10      	ble.n	80191ea <checkint+0x2a>
 80191c8:	2b96      	cmp	r3, #150	; 0x96
 80191ca:	dc0c      	bgt.n	80191e6 <checkint+0x26>
 80191cc:	2201      	movs	r2, #1
 80191ce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80191d2:	fa02 f303 	lsl.w	r3, r2, r3
 80191d6:	1e5a      	subs	r2, r3, #1
 80191d8:	4202      	tst	r2, r0
 80191da:	d106      	bne.n	80191ea <checkint+0x2a>
 80191dc:	4203      	tst	r3, r0
 80191de:	bf0c      	ite	eq
 80191e0:	2002      	moveq	r0, #2
 80191e2:	2001      	movne	r0, #1
 80191e4:	4770      	bx	lr
 80191e6:	2002      	movs	r0, #2
 80191e8:	4770      	bx	lr
 80191ea:	2000      	movs	r0, #0
 80191ec:	4770      	bx	lr
	...

080191f0 <powf>:
 80191f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80191f2:	ee10 1a10 	vmov	r1, s0
 80191f6:	ee10 4a90 	vmov	r4, s1
 80191fa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80191fe:	0062      	lsls	r2, r4, #1
 8019200:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019204:	eef0 7a40 	vmov.f32	s15, s0
 8019208:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801920c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019210:	d252      	bcs.n	80192b8 <powf+0xc8>
 8019212:	4298      	cmp	r0, r3
 8019214:	d252      	bcs.n	80192bc <powf+0xcc>
 8019216:	2000      	movs	r0, #0
 8019218:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801921c:	4a9e      	ldr	r2, [pc, #632]	; (8019498 <powf+0x2a8>)
 801921e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8019222:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8019226:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801922a:	0ddb      	lsrs	r3, r3, #23
 801922c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8019230:	05db      	lsls	r3, r3, #23
 8019232:	ed94 5b00 	vldr	d5, [r4]
 8019236:	1ac9      	subs	r1, r1, r3
 8019238:	ee07 1a90 	vmov	s15, r1
 801923c:	15db      	asrs	r3, r3, #23
 801923e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019242:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019246:	ed94 5b02 	vldr	d5, [r4, #8]
 801924a:	ee26 2b06 	vmul.f64	d2, d6, d6
 801924e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8019252:	ee07 3a90 	vmov	s15, r3
 8019256:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 801925a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801925e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019262:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8019266:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 801926a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801926e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8019272:	eea6 5b04 	vfma.f64	d5, d6, d4
 8019276:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 801927a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801927e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8019282:	eea2 7b05 	vfma.f64	d7, d2, d5
 8019286:	eea3 7b01 	vfma.f64	d7, d3, d1
 801928a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801928e:	ee16 3a90 	vmov	r3, s13
 8019292:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8019296:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801929a:	429a      	cmp	r2, r3
 801929c:	f0c0 80b0 	bcc.w	8019400 <powf+0x210>
 80192a0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8019478 <powf+0x288>
 80192a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80192a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ac:	dd78      	ble.n	80193a0 <powf+0x1b0>
 80192ae:	b003      	add	sp, #12
 80192b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80192b4:	f000 b91a 	b.w	80194ec <__math_oflowf>
 80192b8:	4298      	cmp	r0, r3
 80192ba:	d32d      	bcc.n	8019318 <powf+0x128>
 80192bc:	b952      	cbnz	r2, 80192d4 <powf+0xe4>
 80192be:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 80192c2:	0049      	lsls	r1, r1, #1
 80192c4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80192c8:	f240 80c8 	bls.w	801945c <powf+0x26c>
 80192cc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80192d0:	b003      	add	sp, #12
 80192d2:	bd30      	pop	{r4, r5, pc}
 80192d4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80192d8:	d105      	bne.n	80192e6 <powf+0xf6>
 80192da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80192de:	0064      	lsls	r4, r4, #1
 80192e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80192e4:	e7f0      	b.n	80192c8 <powf+0xd8>
 80192e6:	0049      	lsls	r1, r1, #1
 80192e8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80192ec:	d8ee      	bhi.n	80192cc <powf+0xdc>
 80192ee:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80192f2:	d1eb      	bne.n	80192cc <powf+0xdc>
 80192f4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80192f8:	f000 80b0 	beq.w	801945c <powf+0x26c>
 80192fc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8019300:	ea6f 0404 	mvn.w	r4, r4
 8019304:	bf34      	ite	cc
 8019306:	2100      	movcc	r1, #0
 8019308:	2101      	movcs	r1, #1
 801930a:	0fe4      	lsrs	r4, r4, #31
 801930c:	42a1      	cmp	r1, r4
 801930e:	f040 80a8 	bne.w	8019462 <powf+0x272>
 8019312:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8019316:	e7db      	b.n	80192d0 <powf+0xe0>
 8019318:	004d      	lsls	r5, r1, #1
 801931a:	1e6a      	subs	r2, r5, #1
 801931c:	429a      	cmp	r2, r3
 801931e:	d31c      	bcc.n	801935a <powf+0x16a>
 8019320:	2900      	cmp	r1, #0
 8019322:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019326:	da0f      	bge.n	8019348 <powf+0x158>
 8019328:	ee10 0a90 	vmov	r0, s1
 801932c:	f7ff ff48 	bl	80191c0 <checkint>
 8019330:	2801      	cmp	r0, #1
 8019332:	d109      	bne.n	8019348 <powf+0x158>
 8019334:	eeb1 0a40 	vneg.f32	s0, s0
 8019338:	b945      	cbnz	r5, 801934c <powf+0x15c>
 801933a:	2c00      	cmp	r4, #0
 801933c:	dac8      	bge.n	80192d0 <powf+0xe0>
 801933e:	b003      	add	sp, #12
 8019340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019344:	f000 b8d8 	b.w	80194f8 <__math_divzerof>
 8019348:	2000      	movs	r0, #0
 801934a:	e7f5      	b.n	8019338 <powf+0x148>
 801934c:	2c00      	cmp	r4, #0
 801934e:	dabf      	bge.n	80192d0 <powf+0xe0>
 8019350:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019354:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019358:	e7ba      	b.n	80192d0 <powf+0xe0>
 801935a:	2900      	cmp	r1, #0
 801935c:	da1e      	bge.n	801939c <powf+0x1ac>
 801935e:	ee10 0a90 	vmov	r0, s1
 8019362:	f7ff ff2d 	bl	80191c0 <checkint>
 8019366:	b920      	cbnz	r0, 8019372 <powf+0x182>
 8019368:	b003      	add	sp, #12
 801936a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801936e:	f000 b8d5 	b.w	801951c <__math_invalidf>
 8019372:	1e43      	subs	r3, r0, #1
 8019374:	4258      	negs	r0, r3
 8019376:	4158      	adcs	r0, r3
 8019378:	0400      	lsls	r0, r0, #16
 801937a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801937e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8019382:	f4bf af49 	bcs.w	8019218 <powf+0x28>
 8019386:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801949c <powf+0x2ac>
 801938a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801938e:	ee10 3a10 	vmov	r3, s0
 8019392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019396:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801939a:	e73d      	b.n	8019218 <powf+0x28>
 801939c:	2000      	movs	r0, #0
 801939e:	e7ee      	b.n	801937e <powf+0x18e>
 80193a0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8019480 <powf+0x290>
 80193a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ac:	dd10      	ble.n	80193d0 <powf+0x1e0>
 80193ae:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80193b2:	2800      	cmp	r0, #0
 80193b4:	d158      	bne.n	8019468 <powf+0x278>
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	eddd 7a00 	vldr	s15, [sp]
 80193bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80193c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193c4:	eef4 7a47 	vcmp.f32	s15, s14
 80193c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193cc:	f47f af6f 	bne.w	80192ae <powf+0xbe>
 80193d0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019488 <powf+0x298>
 80193d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193dc:	d804      	bhi.n	80193e8 <powf+0x1f8>
 80193de:	b003      	add	sp, #12
 80193e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193e4:	f000 b876 	b.w	80194d4 <__math_uflowf>
 80193e8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8019490 <powf+0x2a0>
 80193ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f4:	d504      	bpl.n	8019400 <powf+0x210>
 80193f6:	b003      	add	sp, #12
 80193f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193fc:	f000 b870 	b.w	80194e0 <__math_may_uflowf>
 8019400:	4b27      	ldr	r3, [pc, #156]	; (80194a0 <powf+0x2b0>)
 8019402:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019406:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801940a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801940e:	ee17 2a10 	vmov	r2, s14
 8019412:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019416:	f002 011f 	and.w	r1, r2, #31
 801941a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801941e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019422:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019426:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801942a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801942e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8019432:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019436:	686d      	ldr	r5, [r5, #4]
 8019438:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801943c:	1882      	adds	r2, r0, r2
 801943e:	2300      	movs	r3, #0
 8019440:	1918      	adds	r0, r3, r4
 8019442:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019446:	eea7 0b05 	vfma.f64	d0, d7, d5
 801944a:	ec41 0b17 	vmov	d7, r0, r1
 801944e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019452:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019456:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801945a:	e739      	b.n	80192d0 <powf+0xe0>
 801945c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019460:	e736      	b.n	80192d0 <powf+0xe0>
 8019462:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80194a4 <powf+0x2b4>
 8019466:	e733      	b.n	80192d0 <powf+0xe0>
 8019468:	9301      	str	r3, [sp, #4]
 801946a:	eddd 7a01 	vldr	s15, [sp, #4]
 801946e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019476:	e7a5      	b.n	80193c4 <powf+0x1d4>
 8019478:	ffd1d571 	.word	0xffd1d571
 801947c:	405fffff 	.word	0x405fffff
 8019480:	ffa3aae2 	.word	0xffa3aae2
 8019484:	405fffff 	.word	0x405fffff
 8019488:	00000000 	.word	0x00000000
 801948c:	c062c000 	.word	0xc062c000
 8019490:	00000000 	.word	0x00000000
 8019494:	c062a000 	.word	0xc062a000
 8019498:	080271f0 	.word	0x080271f0
 801949c:	4b000000 	.word	0x4b000000
 80194a0:	080260d8 	.word	0x080260d8
 80194a4:	00000000 	.word	0x00000000

080194a8 <with_errnof>:
 80194a8:	b513      	push	{r0, r1, r4, lr}
 80194aa:	4604      	mov	r4, r0
 80194ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80194b0:	f001 fdd8 	bl	801b064 <__errno>
 80194b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80194b8:	6004      	str	r4, [r0, #0]
 80194ba:	b002      	add	sp, #8
 80194bc:	bd10      	pop	{r4, pc}

080194be <xflowf>:
 80194be:	b130      	cbz	r0, 80194ce <xflowf+0x10>
 80194c0:	eef1 7a40 	vneg.f32	s15, s0
 80194c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80194c8:	2022      	movs	r0, #34	; 0x22
 80194ca:	f7ff bfed 	b.w	80194a8 <with_errnof>
 80194ce:	eef0 7a40 	vmov.f32	s15, s0
 80194d2:	e7f7      	b.n	80194c4 <xflowf+0x6>

080194d4 <__math_uflowf>:
 80194d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194dc <__math_uflowf+0x8>
 80194d8:	f7ff bff1 	b.w	80194be <xflowf>
 80194dc:	10000000 	.word	0x10000000

080194e0 <__math_may_uflowf>:
 80194e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194e8 <__math_may_uflowf+0x8>
 80194e4:	f7ff bfeb 	b.w	80194be <xflowf>
 80194e8:	1a200000 	.word	0x1a200000

080194ec <__math_oflowf>:
 80194ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194f4 <__math_oflowf+0x8>
 80194f0:	f7ff bfe5 	b.w	80194be <xflowf>
 80194f4:	70000000 	.word	0x70000000

080194f8 <__math_divzerof>:
 80194f8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019518 <__math_divzerof+0x20>
 80194fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019504:	2800      	cmp	r0, #0
 8019506:	f04f 0022 	mov.w	r0, #34	; 0x22
 801950a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801950e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019512:	f7ff bfc9 	b.w	80194a8 <with_errnof>
 8019516:	bf00      	nop
 8019518:	00000000 	.word	0x00000000

0801951c <__math_invalidf>:
 801951c:	eef0 7a40 	vmov.f32	s15, s0
 8019520:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019524:	eef4 7a67 	vcmp.f32	s15, s15
 8019528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019530:	d602      	bvs.n	8019538 <__math_invalidf+0x1c>
 8019532:	2021      	movs	r0, #33	; 0x21
 8019534:	f7ff bfb8 	b.w	80194a8 <with_errnof>
 8019538:	4770      	bx	lr
	...

0801953c <log10f>:
 801953c:	b508      	push	{r3, lr}
 801953e:	ed2d 8b02 	vpush	{d8}
 8019542:	eeb0 8a40 	vmov.f32	s16, s0
 8019546:	f000 f9df 	bl	8019908 <__ieee754_log10f>
 801954a:	eeb4 8a48 	vcmp.f32	s16, s16
 801954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019552:	d60f      	bvs.n	8019574 <log10f+0x38>
 8019554:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801955c:	d80a      	bhi.n	8019574 <log10f+0x38>
 801955e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019566:	d108      	bne.n	801957a <log10f+0x3e>
 8019568:	f001 fd7c 	bl	801b064 <__errno>
 801956c:	2322      	movs	r3, #34	; 0x22
 801956e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019590 <log10f+0x54>
 8019572:	6003      	str	r3, [r0, #0]
 8019574:	ecbd 8b02 	vpop	{d8}
 8019578:	bd08      	pop	{r3, pc}
 801957a:	f001 fd73 	bl	801b064 <__errno>
 801957e:	ecbd 8b02 	vpop	{d8}
 8019582:	2321      	movs	r3, #33	; 0x21
 8019584:	6003      	str	r3, [r0, #0]
 8019586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801958a:	4802      	ldr	r0, [pc, #8]	; (8019594 <log10f+0x58>)
 801958c:	f000 b80c 	b.w	80195a8 <nanf>
 8019590:	ff800000 	.word	0xff800000
 8019594:	080260d4 	.word	0x080260d4

08019598 <fabsf>:
 8019598:	ee10 3a10 	vmov	r3, s0
 801959c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80195a0:	ee00 3a10 	vmov	s0, r3
 80195a4:	4770      	bx	lr
	...

080195a8 <nanf>:
 80195a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80195b0 <nanf+0x8>
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	7fc00000 	.word	0x7fc00000

080195b4 <tanf>:
 80195b4:	ee10 3a10 	vmov	r3, s0
 80195b8:	b507      	push	{r0, r1, r2, lr}
 80195ba:	4a12      	ldr	r2, [pc, #72]	; (8019604 <tanf+0x50>)
 80195bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80195c0:	4293      	cmp	r3, r2
 80195c2:	dc07      	bgt.n	80195d4 <tanf+0x20>
 80195c4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019608 <tanf+0x54>
 80195c8:	2001      	movs	r0, #1
 80195ca:	b003      	add	sp, #12
 80195cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80195d0:	f000 b8ba 	b.w	8019748 <__kernel_tanf>
 80195d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80195d8:	db04      	blt.n	80195e4 <tanf+0x30>
 80195da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195de:	b003      	add	sp, #12
 80195e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80195e4:	4668      	mov	r0, sp
 80195e6:	f000 f9e7 	bl	80199b8 <__ieee754_rem_pio2f>
 80195ea:	0040      	lsls	r0, r0, #1
 80195ec:	f000 0002 	and.w	r0, r0, #2
 80195f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80195f4:	ed9d 0a00 	vldr	s0, [sp]
 80195f8:	f1c0 0001 	rsb	r0, r0, #1
 80195fc:	f000 f8a4 	bl	8019748 <__kernel_tanf>
 8019600:	e7ed      	b.n	80195de <tanf+0x2a>
 8019602:	bf00      	nop
 8019604:	3f490fda 	.word	0x3f490fda
 8019608:	00000000 	.word	0x00000000

0801960c <tanhf>:
 801960c:	b538      	push	{r3, r4, r5, lr}
 801960e:	ee10 5a10 	vmov	r5, s0
 8019612:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019616:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801961a:	ed2d 8b02 	vpush	{d8}
 801961e:	db0f      	blt.n	8019640 <tanhf+0x34>
 8019620:	4b2a      	ldr	r3, [pc, #168]	; (80196cc <tanhf+0xc0>)
 8019622:	ed93 6a00 	vldr	s12, [r3]
 8019626:	edd3 6a00 	vldr	s13, [r3]
 801962a:	eec6 7a00 	vdiv.f32	s15, s12, s0
 801962e:	2d00      	cmp	r5, #0
 8019630:	bfac      	ite	ge
 8019632:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8019636:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 801963a:	ecbd 8b02 	vpop	{d8}
 801963e:	bd38      	pop	{r3, r4, r5, pc}
 8019640:	4a23      	ldr	r2, [pc, #140]	; (80196d0 <tanhf+0xc4>)
 8019642:	4293      	cmp	r3, r2
 8019644:	dc39      	bgt.n	80196ba <tanhf+0xae>
 8019646:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801964a:	da07      	bge.n	801965c <tanhf+0x50>
 801964c:	4b1f      	ldr	r3, [pc, #124]	; (80196cc <tanhf+0xc0>)
 801964e:	edd3 7a00 	vldr	s15, [r3]
 8019652:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019656:	ee27 0a80 	vmul.f32	s0, s15, s0
 801965a:	e7ee      	b.n	801963a <tanhf+0x2e>
 801965c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019660:	4c1c      	ldr	r4, [pc, #112]	; (80196d4 <tanhf+0xc8>)
 8019662:	db19      	blt.n	8019698 <tanhf+0x8c>
 8019664:	f7ff ff98 	bl	8019598 <fabsf>
 8019668:	edd4 7a00 	vldr	s15, [r4]
 801966c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019670:	f000 ffc2 	bl	801a5f8 <expm1f>
 8019674:	4b15      	ldr	r3, [pc, #84]	; (80196cc <tanhf+0xc0>)
 8019676:	edd3 7a00 	vldr	s15, [r3]
 801967a:	edd4 6a00 	vldr	s13, [r4]
 801967e:	ed94 7a00 	vldr	s14, [r4]
 8019682:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019686:	ee86 7a80 	vdiv.f32	s14, s13, s0
 801968a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801968e:	2d00      	cmp	r5, #0
 8019690:	bfb8      	it	lt
 8019692:	eeb1 0a40 	vneglt.f32	s0, s0
 8019696:	e7d0      	b.n	801963a <tanhf+0x2e>
 8019698:	ed94 8a00 	vldr	s16, [r4]
 801969c:	f7ff ff7c 	bl	8019598 <fabsf>
 80196a0:	ee28 0a40 	vnmul.f32	s0, s16, s0
 80196a4:	f000 ffa8 	bl	801a5f8 <expm1f>
 80196a8:	edd4 7a00 	vldr	s15, [r4]
 80196ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 80196b0:	eeb1 7a40 	vneg.f32	s14, s0
 80196b4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80196b8:	e7e9      	b.n	801968e <tanhf+0x82>
 80196ba:	4b04      	ldr	r3, [pc, #16]	; (80196cc <tanhf+0xc0>)
 80196bc:	ed93 0a00 	vldr	s0, [r3]
 80196c0:	4b05      	ldr	r3, [pc, #20]	; (80196d8 <tanhf+0xcc>)
 80196c2:	edd3 7a00 	vldr	s15, [r3]
 80196c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80196ca:	e7e0      	b.n	801968e <tanhf+0x82>
 80196cc:	20000b94 	.word	0x20000b94
 80196d0:	41afffff 	.word	0x41afffff
 80196d4:	20000b9c 	.word	0x20000b9c
 80196d8:	20000b98 	.word	0x20000b98
 80196dc:	00000000 	.word	0x00000000

080196e0 <tan>:
 80196e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196e2:	eeb0 7b40 	vmov.f64	d7, d0
 80196e6:	ee17 3a90 	vmov	r3, s15
 80196ea:	4a15      	ldr	r2, [pc, #84]	; (8019740 <tan+0x60>)
 80196ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196f0:	4293      	cmp	r3, r2
 80196f2:	dc07      	bgt.n	8019704 <tan+0x24>
 80196f4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8019738 <tan+0x58>
 80196f8:	2001      	movs	r0, #1
 80196fa:	b005      	add	sp, #20
 80196fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019700:	f000 be5e 	b.w	801a3c0 <__kernel_tan>
 8019704:	4a0f      	ldr	r2, [pc, #60]	; (8019744 <tan+0x64>)
 8019706:	4293      	cmp	r3, r2
 8019708:	dd04      	ble.n	8019714 <tan+0x34>
 801970a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801970e:	b005      	add	sp, #20
 8019710:	f85d fb04 	ldr.w	pc, [sp], #4
 8019714:	4668      	mov	r0, sp
 8019716:	f000 fa7b 	bl	8019c10 <__ieee754_rem_pio2>
 801971a:	0040      	lsls	r0, r0, #1
 801971c:	f000 0002 	and.w	r0, r0, #2
 8019720:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019724:	ed9d 0b00 	vldr	d0, [sp]
 8019728:	f1c0 0001 	rsb	r0, r0, #1
 801972c:	f000 fe48 	bl	801a3c0 <__kernel_tan>
 8019730:	e7ed      	b.n	801970e <tan+0x2e>
 8019732:	bf00      	nop
 8019734:	f3af 8000 	nop.w
	...
 8019740:	3fe921fb 	.word	0x3fe921fb
 8019744:	7fefffff 	.word	0x7fefffff

08019748 <__kernel_tanf>:
 8019748:	b508      	push	{r3, lr}
 801974a:	ee10 3a10 	vmov	r3, s0
 801974e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019752:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019756:	eef0 7a40 	vmov.f32	s15, s0
 801975a:	da17      	bge.n	801978c <__kernel_tanf+0x44>
 801975c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019760:	ee17 1a10 	vmov	r1, s14
 8019764:	bb41      	cbnz	r1, 80197b8 <__kernel_tanf+0x70>
 8019766:	1c43      	adds	r3, r0, #1
 8019768:	4313      	orrs	r3, r2
 801976a:	d108      	bne.n	801977e <__kernel_tanf+0x36>
 801976c:	f7ff ff14 	bl	8019598 <fabsf>
 8019770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019774:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019778:	eeb0 0a67 	vmov.f32	s0, s15
 801977c:	bd08      	pop	{r3, pc}
 801977e:	2801      	cmp	r0, #1
 8019780:	d0fa      	beq.n	8019778 <__kernel_tanf+0x30>
 8019782:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019786:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801978a:	e7f5      	b.n	8019778 <__kernel_tanf+0x30>
 801978c:	494c      	ldr	r1, [pc, #304]	; (80198c0 <__kernel_tanf+0x178>)
 801978e:	428a      	cmp	r2, r1
 8019790:	db12      	blt.n	80197b8 <__kernel_tanf+0x70>
 8019792:	2b00      	cmp	r3, #0
 8019794:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80198c4 <__kernel_tanf+0x17c>
 8019798:	bfb8      	it	lt
 801979a:	eef1 7a40 	vneglt.f32	s15, s0
 801979e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80197a2:	eddf 7a49 	vldr	s15, [pc, #292]	; 80198c8 <__kernel_tanf+0x180>
 80197a6:	bfb8      	it	lt
 80197a8:	eef1 0a60 	vneglt.f32	s1, s1
 80197ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80197b0:	eddf 0a46 	vldr	s1, [pc, #280]	; 80198cc <__kernel_tanf+0x184>
 80197b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80197bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80198d0 <__kernel_tanf+0x188>
 80197c0:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80198d4 <__kernel_tanf+0x18c>
 80197c4:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80198d8 <__kernel_tanf+0x190>
 80197c8:	493d      	ldr	r1, [pc, #244]	; (80198c0 <__kernel_tanf+0x178>)
 80197ca:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80197ce:	428a      	cmp	r2, r1
 80197d0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80197d4:	eddf 5a41 	vldr	s11, [pc, #260]	; 80198dc <__kernel_tanf+0x194>
 80197d8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80197dc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80198e0 <__kernel_tanf+0x198>
 80197e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80197e4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80198e4 <__kernel_tanf+0x19c>
 80197e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80197ec:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80198e8 <__kernel_tanf+0x1a0>
 80197f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80197f4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80198ec <__kernel_tanf+0x1a4>
 80197f8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80197fc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80198f0 <__kernel_tanf+0x1a8>
 8019800:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019804:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80198f4 <__kernel_tanf+0x1ac>
 8019808:	eee5 5a07 	vfma.f32	s11, s10, s14
 801980c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80198f8 <__kernel_tanf+0x1b0>
 8019810:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019814:	eddf 5a39 	vldr	s11, [pc, #228]	; 80198fc <__kernel_tanf+0x1b4>
 8019818:	eee5 5a07 	vfma.f32	s11, s10, s14
 801981c:	eeb0 7a46 	vmov.f32	s14, s12
 8019820:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019824:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8019828:	eeb0 6a60 	vmov.f32	s12, s1
 801982c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8019830:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019900 <__kernel_tanf+0x1b8>
 8019834:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019838:	eee5 0a07 	vfma.f32	s1, s10, s14
 801983c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019840:	db1d      	blt.n	801987e <__kernel_tanf+0x136>
 8019842:	ee07 0a10 	vmov	s14, r0
 8019846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801984a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801984e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8019852:	179b      	asrs	r3, r3, #30
 8019854:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8019858:	f003 0302 	and.w	r3, r3, #2
 801985c:	f1c3 0301 	rsb	r3, r3, #1
 8019860:	ee76 6a60 	vsub.f32	s13, s12, s1
 8019864:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019868:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801986c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019870:	ee07 3a90 	vmov	s15, r3
 8019874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019878:	ee67 7a87 	vmul.f32	s15, s15, s14
 801987c:	e77c      	b.n	8019778 <__kernel_tanf+0x30>
 801987e:	2801      	cmp	r0, #1
 8019880:	d01b      	beq.n	80198ba <__kernel_tanf+0x172>
 8019882:	4b20      	ldr	r3, [pc, #128]	; (8019904 <__kernel_tanf+0x1bc>)
 8019884:	ee16 2a90 	vmov	r2, s13
 8019888:	401a      	ands	r2, r3
 801988a:	ee05 2a90 	vmov	s11, r2
 801988e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019896:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801989a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801989e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80198a2:	ee16 2a10 	vmov	r2, s12
 80198a6:	4013      	ands	r3, r2
 80198a8:	ee07 3a90 	vmov	s15, r3
 80198ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80198b0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80198b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80198b8:	e75e      	b.n	8019778 <__kernel_tanf+0x30>
 80198ba:	eef0 7a66 	vmov.f32	s15, s13
 80198be:	e75b      	b.n	8019778 <__kernel_tanf+0x30>
 80198c0:	3f2ca140 	.word	0x3f2ca140
 80198c4:	3f490fda 	.word	0x3f490fda
 80198c8:	33222168 	.word	0x33222168
 80198cc:	00000000 	.word	0x00000000
 80198d0:	b79bae5f 	.word	0xb79bae5f
 80198d4:	38a3f445 	.word	0x38a3f445
 80198d8:	37d95384 	.word	0x37d95384
 80198dc:	3a1a26c8 	.word	0x3a1a26c8
 80198e0:	3b6b6916 	.word	0x3b6b6916
 80198e4:	3cb327a4 	.word	0x3cb327a4
 80198e8:	3e088889 	.word	0x3e088889
 80198ec:	3895c07a 	.word	0x3895c07a
 80198f0:	398137b9 	.word	0x398137b9
 80198f4:	3abede48 	.word	0x3abede48
 80198f8:	3c11371f 	.word	0x3c11371f
 80198fc:	3d5d0dd1 	.word	0x3d5d0dd1
 8019900:	3eaaaaab 	.word	0x3eaaaaab
 8019904:	fffff000 	.word	0xfffff000

08019908 <__ieee754_log10f>:
 8019908:	b508      	push	{r3, lr}
 801990a:	ee10 2a10 	vmov	r2, s0
 801990e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019912:	ed2d 8b02 	vpush	{d8}
 8019916:	d108      	bne.n	801992a <__ieee754_log10f+0x22>
 8019918:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80199a0 <__ieee754_log10f+0x98>
 801991c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80199a4 <__ieee754_log10f+0x9c>
 8019920:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019924:	ecbd 8b02 	vpop	{d8}
 8019928:	bd08      	pop	{r3, pc}
 801992a:	2a00      	cmp	r2, #0
 801992c:	da02      	bge.n	8019934 <__ieee754_log10f+0x2c>
 801992e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019932:	e7f3      	b.n	801991c <__ieee754_log10f+0x14>
 8019934:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019938:	db02      	blt.n	8019940 <__ieee754_log10f+0x38>
 801993a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801993e:	e7f1      	b.n	8019924 <__ieee754_log10f+0x1c>
 8019940:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8019944:	bfbf      	itttt	lt
 8019946:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80199a8 <__ieee754_log10f+0xa0>
 801994a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801994e:	f06f 0118 	mvnlt.w	r1, #24
 8019952:	ee17 2a90 	vmovlt	r2, s15
 8019956:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801995a:	bfa8      	it	ge
 801995c:	2100      	movge	r1, #0
 801995e:	3b7f      	subs	r3, #127	; 0x7f
 8019960:	440b      	add	r3, r1
 8019962:	0fd9      	lsrs	r1, r3, #31
 8019964:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019968:	ee07 3a90 	vmov	s15, r3
 801996c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019970:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8019974:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019978:	ee00 3a10 	vmov	s0, r3
 801997c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8019980:	f7ff fa32 	bl	8018de8 <logf>
 8019984:	eddf 7a09 	vldr	s15, [pc, #36]	; 80199ac <__ieee754_log10f+0xa4>
 8019988:	ee20 0a27 	vmul.f32	s0, s0, s15
 801998c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80199b0 <__ieee754_log10f+0xa8>
 8019990:	eea8 0a27 	vfma.f32	s0, s16, s15
 8019994:	eddf 7a07 	vldr	s15, [pc, #28]	; 80199b4 <__ieee754_log10f+0xac>
 8019998:	eea8 0a27 	vfma.f32	s0, s16, s15
 801999c:	e7c2      	b.n	8019924 <__ieee754_log10f+0x1c>
 801999e:	bf00      	nop
 80199a0:	cc000000 	.word	0xcc000000
 80199a4:	00000000 	.word	0x00000000
 80199a8:	4c000000 	.word	0x4c000000
 80199ac:	3ede5bd9 	.word	0x3ede5bd9
 80199b0:	355427db 	.word	0x355427db
 80199b4:	3e9a2080 	.word	0x3e9a2080

080199b8 <__ieee754_rem_pio2f>:
 80199b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ba:	ee10 6a10 	vmov	r6, s0
 80199be:	4b86      	ldr	r3, [pc, #536]	; (8019bd8 <__ieee754_rem_pio2f+0x220>)
 80199c0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80199c4:	429d      	cmp	r5, r3
 80199c6:	b087      	sub	sp, #28
 80199c8:	4604      	mov	r4, r0
 80199ca:	dc05      	bgt.n	80199d8 <__ieee754_rem_pio2f+0x20>
 80199cc:	2300      	movs	r3, #0
 80199ce:	ed80 0a00 	vstr	s0, [r0]
 80199d2:	6043      	str	r3, [r0, #4]
 80199d4:	2000      	movs	r0, #0
 80199d6:	e020      	b.n	8019a1a <__ieee754_rem_pio2f+0x62>
 80199d8:	4b80      	ldr	r3, [pc, #512]	; (8019bdc <__ieee754_rem_pio2f+0x224>)
 80199da:	429d      	cmp	r5, r3
 80199dc:	dc38      	bgt.n	8019a50 <__ieee754_rem_pio2f+0x98>
 80199de:	2e00      	cmp	r6, #0
 80199e0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019be0 <__ieee754_rem_pio2f+0x228>
 80199e4:	4b7f      	ldr	r3, [pc, #508]	; (8019be4 <__ieee754_rem_pio2f+0x22c>)
 80199e6:	f025 050f 	bic.w	r5, r5, #15
 80199ea:	dd18      	ble.n	8019a1e <__ieee754_rem_pio2f+0x66>
 80199ec:	429d      	cmp	r5, r3
 80199ee:	ee70 7a47 	vsub.f32	s15, s0, s14
 80199f2:	bf09      	itett	eq
 80199f4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019be8 <__ieee754_rem_pio2f+0x230>
 80199f8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019bec <__ieee754_rem_pio2f+0x234>
 80199fc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019a00:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019bf0 <__ieee754_rem_pio2f+0x238>
 8019a04:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019a08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a0c:	edc0 6a00 	vstr	s13, [r0]
 8019a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a14:	edc0 7a01 	vstr	s15, [r0, #4]
 8019a18:	2001      	movs	r0, #1
 8019a1a:	b007      	add	sp, #28
 8019a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a1e:	429d      	cmp	r5, r3
 8019a20:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019a24:	bf09      	itett	eq
 8019a26:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019be8 <__ieee754_rem_pio2f+0x230>
 8019a2a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019bec <__ieee754_rem_pio2f+0x234>
 8019a2e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019a32:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019bf0 <__ieee754_rem_pio2f+0x238>
 8019a36:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019a3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a3e:	edc0 6a00 	vstr	s13, [r0]
 8019a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a46:	edc0 7a01 	vstr	s15, [r0, #4]
 8019a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a4e:	e7e4      	b.n	8019a1a <__ieee754_rem_pio2f+0x62>
 8019a50:	4b68      	ldr	r3, [pc, #416]	; (8019bf4 <__ieee754_rem_pio2f+0x23c>)
 8019a52:	429d      	cmp	r5, r3
 8019a54:	dc71      	bgt.n	8019b3a <__ieee754_rem_pio2f+0x182>
 8019a56:	f7ff fd9f 	bl	8019598 <fabsf>
 8019a5a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019bf8 <__ieee754_rem_pio2f+0x240>
 8019a5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019a6e:	ee17 0a90 	vmov	r0, s15
 8019a72:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019be0 <__ieee754_rem_pio2f+0x228>
 8019a76:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019a7a:	281f      	cmp	r0, #31
 8019a7c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019bec <__ieee754_rem_pio2f+0x234>
 8019a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a84:	eeb1 6a47 	vneg.f32	s12, s14
 8019a88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019a8c:	ee16 2a90 	vmov	r2, s13
 8019a90:	dc1c      	bgt.n	8019acc <__ieee754_rem_pio2f+0x114>
 8019a92:	495a      	ldr	r1, [pc, #360]	; (8019bfc <__ieee754_rem_pio2f+0x244>)
 8019a94:	1e47      	subs	r7, r0, #1
 8019a96:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019a9a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019a9e:	428b      	cmp	r3, r1
 8019aa0:	d014      	beq.n	8019acc <__ieee754_rem_pio2f+0x114>
 8019aa2:	6022      	str	r2, [r4, #0]
 8019aa4:	ed94 7a00 	vldr	s14, [r4]
 8019aa8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019aac:	2e00      	cmp	r6, #0
 8019aae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019ab2:	ed84 0a01 	vstr	s0, [r4, #4]
 8019ab6:	dab0      	bge.n	8019a1a <__ieee754_rem_pio2f+0x62>
 8019ab8:	eeb1 7a47 	vneg.f32	s14, s14
 8019abc:	eeb1 0a40 	vneg.f32	s0, s0
 8019ac0:	ed84 7a00 	vstr	s14, [r4]
 8019ac4:	ed84 0a01 	vstr	s0, [r4, #4]
 8019ac8:	4240      	negs	r0, r0
 8019aca:	e7a6      	b.n	8019a1a <__ieee754_rem_pio2f+0x62>
 8019acc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019ad0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8019ad4:	2908      	cmp	r1, #8
 8019ad6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019ada:	dde2      	ble.n	8019aa2 <__ieee754_rem_pio2f+0xea>
 8019adc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019be8 <__ieee754_rem_pio2f+0x230>
 8019ae0:	eef0 6a40 	vmov.f32	s13, s0
 8019ae4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019ae8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019aec:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019af0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019bf0 <__ieee754_rem_pio2f+0x238>
 8019af4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019af8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019afc:	ee15 2a90 	vmov	r2, s11
 8019b00:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b04:	1a5b      	subs	r3, r3, r1
 8019b06:	2b19      	cmp	r3, #25
 8019b08:	dc04      	bgt.n	8019b14 <__ieee754_rem_pio2f+0x15c>
 8019b0a:	edc4 5a00 	vstr	s11, [r4]
 8019b0e:	eeb0 0a66 	vmov.f32	s0, s13
 8019b12:	e7c7      	b.n	8019aa4 <__ieee754_rem_pio2f+0xec>
 8019b14:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019c00 <__ieee754_rem_pio2f+0x248>
 8019b18:	eeb0 0a66 	vmov.f32	s0, s13
 8019b1c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019b20:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019b24:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019c04 <__ieee754_rem_pio2f+0x24c>
 8019b28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b2c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019b30:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019b34:	ed84 7a00 	vstr	s14, [r4]
 8019b38:	e7b4      	b.n	8019aa4 <__ieee754_rem_pio2f+0xec>
 8019b3a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019b3e:	db06      	blt.n	8019b4e <__ieee754_rem_pio2f+0x196>
 8019b40:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019b44:	edc0 7a01 	vstr	s15, [r0, #4]
 8019b48:	edc0 7a00 	vstr	s15, [r0]
 8019b4c:	e742      	b.n	80199d4 <__ieee754_rem_pio2f+0x1c>
 8019b4e:	15ea      	asrs	r2, r5, #23
 8019b50:	3a86      	subs	r2, #134	; 0x86
 8019b52:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019b56:	ee07 3a90 	vmov	s15, r3
 8019b5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019b5e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019c08 <__ieee754_rem_pio2f+0x250>
 8019b62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b6a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019b6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019b72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b7e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b8e:	edcd 7a05 	vstr	s15, [sp, #20]
 8019b92:	d11e      	bne.n	8019bd2 <__ieee754_rem_pio2f+0x21a>
 8019b94:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b9c:	bf14      	ite	ne
 8019b9e:	2302      	movne	r3, #2
 8019ba0:	2301      	moveq	r3, #1
 8019ba2:	491a      	ldr	r1, [pc, #104]	; (8019c0c <__ieee754_rem_pio2f+0x254>)
 8019ba4:	9101      	str	r1, [sp, #4]
 8019ba6:	2102      	movs	r1, #2
 8019ba8:	9100      	str	r1, [sp, #0]
 8019baa:	a803      	add	r0, sp, #12
 8019bac:	4621      	mov	r1, r4
 8019bae:	f000 fec9 	bl	801a944 <__kernel_rem_pio2f>
 8019bb2:	2e00      	cmp	r6, #0
 8019bb4:	f6bf af31 	bge.w	8019a1a <__ieee754_rem_pio2f+0x62>
 8019bb8:	edd4 7a00 	vldr	s15, [r4]
 8019bbc:	eef1 7a67 	vneg.f32	s15, s15
 8019bc0:	edc4 7a00 	vstr	s15, [r4]
 8019bc4:	edd4 7a01 	vldr	s15, [r4, #4]
 8019bc8:	eef1 7a67 	vneg.f32	s15, s15
 8019bcc:	edc4 7a01 	vstr	s15, [r4, #4]
 8019bd0:	e77a      	b.n	8019ac8 <__ieee754_rem_pio2f+0x110>
 8019bd2:	2303      	movs	r3, #3
 8019bd4:	e7e5      	b.n	8019ba2 <__ieee754_rem_pio2f+0x1ea>
 8019bd6:	bf00      	nop
 8019bd8:	3f490fd8 	.word	0x3f490fd8
 8019bdc:	4016cbe3 	.word	0x4016cbe3
 8019be0:	3fc90f80 	.word	0x3fc90f80
 8019be4:	3fc90fd0 	.word	0x3fc90fd0
 8019be8:	37354400 	.word	0x37354400
 8019bec:	37354443 	.word	0x37354443
 8019bf0:	2e85a308 	.word	0x2e85a308
 8019bf4:	43490f80 	.word	0x43490f80
 8019bf8:	3f22f984 	.word	0x3f22f984
 8019bfc:	08026cd0 	.word	0x08026cd0
 8019c00:	2e85a300 	.word	0x2e85a300
 8019c04:	248d3132 	.word	0x248d3132
 8019c08:	43800000 	.word	0x43800000
 8019c0c:	08026d50 	.word	0x08026d50

08019c10 <__ieee754_rem_pio2>:
 8019c10:	b570      	push	{r4, r5, r6, lr}
 8019c12:	eeb0 7b40 	vmov.f64	d7, d0
 8019c16:	ee17 5a90 	vmov	r5, s15
 8019c1a:	4b99      	ldr	r3, [pc, #612]	; (8019e80 <__ieee754_rem_pio2+0x270>)
 8019c1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c20:	429e      	cmp	r6, r3
 8019c22:	b088      	sub	sp, #32
 8019c24:	4604      	mov	r4, r0
 8019c26:	dc07      	bgt.n	8019c38 <__ieee754_rem_pio2+0x28>
 8019c28:	2200      	movs	r2, #0
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	ed84 0b00 	vstr	d0, [r4]
 8019c30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019c34:	2000      	movs	r0, #0
 8019c36:	e01b      	b.n	8019c70 <__ieee754_rem_pio2+0x60>
 8019c38:	4b92      	ldr	r3, [pc, #584]	; (8019e84 <__ieee754_rem_pio2+0x274>)
 8019c3a:	429e      	cmp	r6, r3
 8019c3c:	dc3b      	bgt.n	8019cb6 <__ieee754_rem_pio2+0xa6>
 8019c3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8019c42:	2d00      	cmp	r5, #0
 8019c44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8019e40 <__ieee754_rem_pio2+0x230>
 8019c48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8019c4c:	dd19      	ble.n	8019c82 <__ieee754_rem_pio2+0x72>
 8019c4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019c52:	429e      	cmp	r6, r3
 8019c54:	d00e      	beq.n	8019c74 <__ieee754_rem_pio2+0x64>
 8019c56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8019e48 <__ieee754_rem_pio2+0x238>
 8019c5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8019c5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019c62:	ed84 5b00 	vstr	d5, [r4]
 8019c66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019c6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8019c6e:	2001      	movs	r0, #1
 8019c70:	b008      	add	sp, #32
 8019c72:	bd70      	pop	{r4, r5, r6, pc}
 8019c74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019e50 <__ieee754_rem_pio2+0x240>
 8019c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019c7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019e58 <__ieee754_rem_pio2+0x248>
 8019c80:	e7eb      	b.n	8019c5a <__ieee754_rem_pio2+0x4a>
 8019c82:	429e      	cmp	r6, r3
 8019c84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019c88:	d00e      	beq.n	8019ca8 <__ieee754_rem_pio2+0x98>
 8019c8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8019e48 <__ieee754_rem_pio2+0x238>
 8019c8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019c92:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019c96:	ed84 5b00 	vstr	d5, [r4]
 8019c9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ca2:	ed84 7b02 	vstr	d7, [r4, #8]
 8019ca6:	e7e3      	b.n	8019c70 <__ieee754_rem_pio2+0x60>
 8019ca8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019e50 <__ieee754_rem_pio2+0x240>
 8019cac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019cb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019e58 <__ieee754_rem_pio2+0x248>
 8019cb4:	e7eb      	b.n	8019c8e <__ieee754_rem_pio2+0x7e>
 8019cb6:	4b74      	ldr	r3, [pc, #464]	; (8019e88 <__ieee754_rem_pio2+0x278>)
 8019cb8:	429e      	cmp	r6, r3
 8019cba:	dc70      	bgt.n	8019d9e <__ieee754_rem_pio2+0x18e>
 8019cbc:	f000 fdb8 	bl	801a830 <fabs>
 8019cc0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019cc4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019e60 <__ieee754_rem_pio2+0x250>
 8019cc8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019ccc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019cd0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019cd4:	ee17 0a90 	vmov	r0, s15
 8019cd8:	eeb1 4b45 	vneg.f64	d4, d5
 8019cdc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019e40 <__ieee754_rem_pio2+0x230>
 8019ce0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019ce4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019e48 <__ieee754_rem_pio2+0x238>
 8019ce8:	281f      	cmp	r0, #31
 8019cea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019cee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019cf2:	dc08      	bgt.n	8019d06 <__ieee754_rem_pio2+0xf6>
 8019cf4:	4b65      	ldr	r3, [pc, #404]	; (8019e8c <__ieee754_rem_pio2+0x27c>)
 8019cf6:	1e42      	subs	r2, r0, #1
 8019cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cfc:	42b3      	cmp	r3, r6
 8019cfe:	d002      	beq.n	8019d06 <__ieee754_rem_pio2+0xf6>
 8019d00:	ed84 6b00 	vstr	d6, [r4]
 8019d04:	e024      	b.n	8019d50 <__ieee754_rem_pio2+0x140>
 8019d06:	ee16 3a90 	vmov	r3, s13
 8019d0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019d0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019d12:	2b10      	cmp	r3, #16
 8019d14:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019d18:	ddf2      	ble.n	8019d00 <__ieee754_rem_pio2+0xf0>
 8019d1a:	eeb0 6b40 	vmov.f64	d6, d0
 8019d1e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8019e50 <__ieee754_rem_pio2+0x240>
 8019d22:	eea4 6b03 	vfma.f64	d6, d4, d3
 8019d26:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019d2a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019d2e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8019e58 <__ieee754_rem_pio2+0x248>
 8019d32:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019d36:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019d3a:	ee13 3a90 	vmov	r3, s7
 8019d3e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019d42:	1ad3      	subs	r3, r2, r3
 8019d44:	2b31      	cmp	r3, #49	; 0x31
 8019d46:	dc17      	bgt.n	8019d78 <__ieee754_rem_pio2+0x168>
 8019d48:	eeb0 0b46 	vmov.f64	d0, d6
 8019d4c:	ed84 3b00 	vstr	d3, [r4]
 8019d50:	ed94 6b00 	vldr	d6, [r4]
 8019d54:	2d00      	cmp	r5, #0
 8019d56:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019d5a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019d5e:	ed84 0b02 	vstr	d0, [r4, #8]
 8019d62:	da85      	bge.n	8019c70 <__ieee754_rem_pio2+0x60>
 8019d64:	eeb1 6b46 	vneg.f64	d6, d6
 8019d68:	eeb1 0b40 	vneg.f64	d0, d0
 8019d6c:	ed84 6b00 	vstr	d6, [r4]
 8019d70:	ed84 0b02 	vstr	d0, [r4, #8]
 8019d74:	4240      	negs	r0, r0
 8019d76:	e77b      	b.n	8019c70 <__ieee754_rem_pio2+0x60>
 8019d78:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8019e68 <__ieee754_rem_pio2+0x258>
 8019d7c:	eeb0 0b46 	vmov.f64	d0, d6
 8019d80:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019d84:	ee36 6b40 	vsub.f64	d6, d6, d0
 8019d88:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019d8c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8019e70 <__ieee754_rem_pio2+0x260>
 8019d90:	eeb0 7b46 	vmov.f64	d7, d6
 8019d94:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8019d98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019d9c:	e7b0      	b.n	8019d00 <__ieee754_rem_pio2+0xf0>
 8019d9e:	4b3c      	ldr	r3, [pc, #240]	; (8019e90 <__ieee754_rem_pio2+0x280>)
 8019da0:	429e      	cmp	r6, r3
 8019da2:	dd06      	ble.n	8019db2 <__ieee754_rem_pio2+0x1a2>
 8019da4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019da8:	ed80 7b02 	vstr	d7, [r0, #8]
 8019dac:	ed80 7b00 	vstr	d7, [r0]
 8019db0:	e740      	b.n	8019c34 <__ieee754_rem_pio2+0x24>
 8019db2:	1532      	asrs	r2, r6, #20
 8019db4:	ee10 0a10 	vmov	r0, s0
 8019db8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8019dbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019dc0:	ec41 0b17 	vmov	d7, r0, r1
 8019dc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019dc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8019e78 <__ieee754_rem_pio2+0x268>
 8019dcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019dd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019dd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019ddc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019de0:	a808      	add	r0, sp, #32
 8019de2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019dea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019dee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019df2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019df6:	2103      	movs	r1, #3
 8019df8:	ed30 7b02 	vldmdb	r0!, {d7}
 8019dfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e04:	460b      	mov	r3, r1
 8019e06:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8019e0a:	d0f5      	beq.n	8019df8 <__ieee754_rem_pio2+0x1e8>
 8019e0c:	4921      	ldr	r1, [pc, #132]	; (8019e94 <__ieee754_rem_pio2+0x284>)
 8019e0e:	9101      	str	r1, [sp, #4]
 8019e10:	2102      	movs	r1, #2
 8019e12:	9100      	str	r1, [sp, #0]
 8019e14:	a802      	add	r0, sp, #8
 8019e16:	4621      	mov	r1, r4
 8019e18:	f000 f83e 	bl	8019e98 <__kernel_rem_pio2>
 8019e1c:	2d00      	cmp	r5, #0
 8019e1e:	f6bf af27 	bge.w	8019c70 <__ieee754_rem_pio2+0x60>
 8019e22:	ed94 7b00 	vldr	d7, [r4]
 8019e26:	eeb1 7b47 	vneg.f64	d7, d7
 8019e2a:	ed84 7b00 	vstr	d7, [r4]
 8019e2e:	ed94 7b02 	vldr	d7, [r4, #8]
 8019e32:	eeb1 7b47 	vneg.f64	d7, d7
 8019e36:	ed84 7b02 	vstr	d7, [r4, #8]
 8019e3a:	e79b      	b.n	8019d74 <__ieee754_rem_pio2+0x164>
 8019e3c:	f3af 8000 	nop.w
 8019e40:	54400000 	.word	0x54400000
 8019e44:	3ff921fb 	.word	0x3ff921fb
 8019e48:	1a626331 	.word	0x1a626331
 8019e4c:	3dd0b461 	.word	0x3dd0b461
 8019e50:	1a600000 	.word	0x1a600000
 8019e54:	3dd0b461 	.word	0x3dd0b461
 8019e58:	2e037073 	.word	0x2e037073
 8019e5c:	3ba3198a 	.word	0x3ba3198a
 8019e60:	6dc9c883 	.word	0x6dc9c883
 8019e64:	3fe45f30 	.word	0x3fe45f30
 8019e68:	2e000000 	.word	0x2e000000
 8019e6c:	3ba3198a 	.word	0x3ba3198a
 8019e70:	252049c1 	.word	0x252049c1
 8019e74:	397b839a 	.word	0x397b839a
 8019e78:	00000000 	.word	0x00000000
 8019e7c:	41700000 	.word	0x41700000
 8019e80:	3fe921fb 	.word	0x3fe921fb
 8019e84:	4002d97b 	.word	0x4002d97b
 8019e88:	413921fb 	.word	0x413921fb
 8019e8c:	08027068 	.word	0x08027068
 8019e90:	7fefffff 	.word	0x7fefffff
 8019e94:	080270e8 	.word	0x080270e8

08019e98 <__kernel_rem_pio2>:
 8019e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e9c:	ed2d 8b06 	vpush	{d8-d10}
 8019ea0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8019ea4:	460f      	mov	r7, r1
 8019ea6:	9002      	str	r0, [sp, #8]
 8019ea8:	49c3      	ldr	r1, [pc, #780]	; (801a1b8 <__kernel_rem_pio2+0x320>)
 8019eaa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8019eac:	9301      	str	r3, [sp, #4]
 8019eae:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8019eb2:	9901      	ldr	r1, [sp, #4]
 8019eb4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8019eb6:	f112 0f14 	cmn.w	r2, #20
 8019eba:	bfa8      	it	ge
 8019ebc:	1ed0      	subge	r0, r2, #3
 8019ebe:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8019ec2:	bfaa      	itet	ge
 8019ec4:	2418      	movge	r4, #24
 8019ec6:	2000      	movlt	r0, #0
 8019ec8:	fb90 f0f4 	sdivge	r0, r0, r4
 8019ecc:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801a1a0 <__kernel_rem_pio2+0x308>
 8019ed0:	f06f 0417 	mvn.w	r4, #23
 8019ed4:	fb00 4404 	mla	r4, r0, r4, r4
 8019ed8:	eba0 060a 	sub.w	r6, r0, sl
 8019edc:	4414      	add	r4, r2
 8019ede:	eb09 0c0a 	add.w	ip, r9, sl
 8019ee2:	ad1a      	add	r5, sp, #104	; 0x68
 8019ee4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8019ee8:	2200      	movs	r2, #0
 8019eea:	4562      	cmp	r2, ip
 8019eec:	dd10      	ble.n	8019f10 <__kernel_rem_pio2+0x78>
 8019eee:	9a01      	ldr	r2, [sp, #4]
 8019ef0:	a91a      	add	r1, sp, #104	; 0x68
 8019ef2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8019ef6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8019efa:	f04f 0c00 	mov.w	ip, #0
 8019efe:	45cc      	cmp	ip, r9
 8019f00:	dc26      	bgt.n	8019f50 <__kernel_rem_pio2+0xb8>
 8019f02:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801a1a0 <__kernel_rem_pio2+0x308>
 8019f06:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019f0a:	4616      	mov	r6, r2
 8019f0c:	2500      	movs	r5, #0
 8019f0e:	e015      	b.n	8019f3c <__kernel_rem_pio2+0xa4>
 8019f10:	42d6      	cmn	r6, r2
 8019f12:	d409      	bmi.n	8019f28 <__kernel_rem_pio2+0x90>
 8019f14:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8019f18:	ee07 1a90 	vmov	s15, r1
 8019f1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019f20:	eca5 7b02 	vstmia	r5!, {d7}
 8019f24:	3201      	adds	r2, #1
 8019f26:	e7e0      	b.n	8019eea <__kernel_rem_pio2+0x52>
 8019f28:	eeb0 7b46 	vmov.f64	d7, d6
 8019f2c:	e7f8      	b.n	8019f20 <__kernel_rem_pio2+0x88>
 8019f2e:	ecbe 5b02 	vldmia	lr!, {d5}
 8019f32:	ed96 6b00 	vldr	d6, [r6]
 8019f36:	3501      	adds	r5, #1
 8019f38:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019f3c:	4555      	cmp	r5, sl
 8019f3e:	f1a6 0608 	sub.w	r6, r6, #8
 8019f42:	ddf4      	ble.n	8019f2e <__kernel_rem_pio2+0x96>
 8019f44:	eca8 7b02 	vstmia	r8!, {d7}
 8019f48:	f10c 0c01 	add.w	ip, ip, #1
 8019f4c:	3208      	adds	r2, #8
 8019f4e:	e7d6      	b.n	8019efe <__kernel_rem_pio2+0x66>
 8019f50:	aa06      	add	r2, sp, #24
 8019f52:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801a1a8 <__kernel_rem_pio2+0x310>
 8019f56:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a1b0 <__kernel_rem_pio2+0x318>
 8019f5a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8019f5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019f62:	9204      	str	r2, [sp, #16]
 8019f64:	9303      	str	r3, [sp, #12]
 8019f66:	464d      	mov	r5, r9
 8019f68:	00eb      	lsls	r3, r5, #3
 8019f6a:	9305      	str	r3, [sp, #20]
 8019f6c:	ab92      	add	r3, sp, #584	; 0x248
 8019f6e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019f72:	f10d 0b18 	add.w	fp, sp, #24
 8019f76:	ab6a      	add	r3, sp, #424	; 0x1a8
 8019f78:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8019f7c:	465e      	mov	r6, fp
 8019f7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019f82:	4628      	mov	r0, r5
 8019f84:	2800      	cmp	r0, #0
 8019f86:	f1a2 0208 	sub.w	r2, r2, #8
 8019f8a:	dc48      	bgt.n	801a01e <__kernel_rem_pio2+0x186>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f000 fc5b 	bl	801a848 <scalbn>
 8019f92:	eeb0 8b40 	vmov.f64	d8, d0
 8019f96:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8019f9a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8019f9e:	f000 ff43 	bl	801ae28 <floor>
 8019fa2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8019fa6:	eea0 8b47 	vfms.f64	d8, d0, d7
 8019faa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8019fae:	2c00      	cmp	r4, #0
 8019fb0:	ee17 8a90 	vmov	r8, s15
 8019fb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019fb8:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019fbc:	dd41      	ble.n	801a042 <__kernel_rem_pio2+0x1aa>
 8019fbe:	1e68      	subs	r0, r5, #1
 8019fc0:	ab06      	add	r3, sp, #24
 8019fc2:	f1c4 0c18 	rsb	ip, r4, #24
 8019fc6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8019fca:	fa46 f20c 	asr.w	r2, r6, ip
 8019fce:	4490      	add	r8, r2
 8019fd0:	fa02 f20c 	lsl.w	r2, r2, ip
 8019fd4:	1ab6      	subs	r6, r6, r2
 8019fd6:	f1c4 0217 	rsb	r2, r4, #23
 8019fda:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8019fde:	4116      	asrs	r6, r2
 8019fe0:	2e00      	cmp	r6, #0
 8019fe2:	dd3d      	ble.n	801a060 <__kernel_rem_pio2+0x1c8>
 8019fe4:	f04f 0c00 	mov.w	ip, #0
 8019fe8:	f108 0801 	add.w	r8, r8, #1
 8019fec:	4660      	mov	r0, ip
 8019fee:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8019ff2:	4565      	cmp	r5, ip
 8019ff4:	dc6a      	bgt.n	801a0cc <__kernel_rem_pio2+0x234>
 8019ff6:	2c00      	cmp	r4, #0
 8019ff8:	dd04      	ble.n	801a004 <__kernel_rem_pio2+0x16c>
 8019ffa:	2c01      	cmp	r4, #1
 8019ffc:	d07b      	beq.n	801a0f6 <__kernel_rem_pio2+0x25e>
 8019ffe:	2c02      	cmp	r4, #2
 801a000:	f000 8083 	beq.w	801a10a <__kernel_rem_pio2+0x272>
 801a004:	2e02      	cmp	r6, #2
 801a006:	d12b      	bne.n	801a060 <__kernel_rem_pio2+0x1c8>
 801a008:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a00c:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a010:	b330      	cbz	r0, 801a060 <__kernel_rem_pio2+0x1c8>
 801a012:	4620      	mov	r0, r4
 801a014:	f000 fc18 	bl	801a848 <scalbn>
 801a018:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a01c:	e020      	b.n	801a060 <__kernel_rem_pio2+0x1c8>
 801a01e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a022:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a026:	3801      	subs	r0, #1
 801a028:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a02c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a030:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a034:	eca6 0a01 	vstmia	r6!, {s0}
 801a038:	ed92 0b00 	vldr	d0, [r2]
 801a03c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a040:	e7a0      	b.n	8019f84 <__kernel_rem_pio2+0xec>
 801a042:	d105      	bne.n	801a050 <__kernel_rem_pio2+0x1b8>
 801a044:	1e6a      	subs	r2, r5, #1
 801a046:	ab06      	add	r3, sp, #24
 801a048:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a04c:	15f6      	asrs	r6, r6, #23
 801a04e:	e7c7      	b.n	8019fe0 <__kernel_rem_pio2+0x148>
 801a050:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a054:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a05c:	da34      	bge.n	801a0c8 <__kernel_rem_pio2+0x230>
 801a05e:	2600      	movs	r6, #0
 801a060:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a068:	f040 80aa 	bne.w	801a1c0 <__kernel_rem_pio2+0x328>
 801a06c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801a070:	4658      	mov	r0, fp
 801a072:	2200      	movs	r2, #0
 801a074:	4548      	cmp	r0, r9
 801a076:	da50      	bge.n	801a11a <__kernel_rem_pio2+0x282>
 801a078:	2a00      	cmp	r2, #0
 801a07a:	d06b      	beq.n	801a154 <__kernel_rem_pio2+0x2bc>
 801a07c:	ab06      	add	r3, sp, #24
 801a07e:	3c18      	subs	r4, #24
 801a080:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a084:	2b00      	cmp	r3, #0
 801a086:	f000 8087 	beq.w	801a198 <__kernel_rem_pio2+0x300>
 801a08a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a08e:	4620      	mov	r0, r4
 801a090:	f000 fbda 	bl	801a848 <scalbn>
 801a094:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801a1a8 <__kernel_rem_pio2+0x310>
 801a098:	f10b 0201 	add.w	r2, fp, #1
 801a09c:	a96a      	add	r1, sp, #424	; 0x1a8
 801a09e:	00d3      	lsls	r3, r2, #3
 801a0a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a0a4:	465a      	mov	r2, fp
 801a0a6:	2a00      	cmp	r2, #0
 801a0a8:	f280 80b8 	bge.w	801a21c <__kernel_rem_pio2+0x384>
 801a0ac:	465a      	mov	r2, fp
 801a0ae:	2a00      	cmp	r2, #0
 801a0b0:	f2c0 80d6 	blt.w	801a260 <__kernel_rem_pio2+0x3c8>
 801a0b4:	a96a      	add	r1, sp, #424	; 0x1a8
 801a0b6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a0ba:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801a1a0 <__kernel_rem_pio2+0x308>
 801a0be:	4d3f      	ldr	r5, [pc, #252]	; (801a1bc <__kernel_rem_pio2+0x324>)
 801a0c0:	2000      	movs	r0, #0
 801a0c2:	ebab 0102 	sub.w	r1, fp, r2
 801a0c6:	e0c0      	b.n	801a24a <__kernel_rem_pio2+0x3b2>
 801a0c8:	2602      	movs	r6, #2
 801a0ca:	e78b      	b.n	8019fe4 <__kernel_rem_pio2+0x14c>
 801a0cc:	f8db 2000 	ldr.w	r2, [fp]
 801a0d0:	b958      	cbnz	r0, 801a0ea <__kernel_rem_pio2+0x252>
 801a0d2:	b122      	cbz	r2, 801a0de <__kernel_rem_pio2+0x246>
 801a0d4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a0d8:	f8cb 2000 	str.w	r2, [fp]
 801a0dc:	2201      	movs	r2, #1
 801a0de:	f10c 0c01 	add.w	ip, ip, #1
 801a0e2:	f10b 0b04 	add.w	fp, fp, #4
 801a0e6:	4610      	mov	r0, r2
 801a0e8:	e783      	b.n	8019ff2 <__kernel_rem_pio2+0x15a>
 801a0ea:	ebae 0202 	sub.w	r2, lr, r2
 801a0ee:	f8cb 2000 	str.w	r2, [fp]
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	e7f3      	b.n	801a0de <__kernel_rem_pio2+0x246>
 801a0f6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a0fa:	ab06      	add	r3, sp, #24
 801a0fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a100:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a104:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a108:	e77c      	b.n	801a004 <__kernel_rem_pio2+0x16c>
 801a10a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a10e:	ab06      	add	r3, sp, #24
 801a110:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a114:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a118:	e7f4      	b.n	801a104 <__kernel_rem_pio2+0x26c>
 801a11a:	ab06      	add	r3, sp, #24
 801a11c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a120:	3801      	subs	r0, #1
 801a122:	431a      	orrs	r2, r3
 801a124:	e7a6      	b.n	801a074 <__kernel_rem_pio2+0x1dc>
 801a126:	3201      	adds	r2, #1
 801a128:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a12c:	2e00      	cmp	r6, #0
 801a12e:	d0fa      	beq.n	801a126 <__kernel_rem_pio2+0x28e>
 801a130:	9b05      	ldr	r3, [sp, #20]
 801a132:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a136:	eb0d 0003 	add.w	r0, sp, r3
 801a13a:	9b01      	ldr	r3, [sp, #4]
 801a13c:	18ee      	adds	r6, r5, r3
 801a13e:	ab1a      	add	r3, sp, #104	; 0x68
 801a140:	f105 0c01 	add.w	ip, r5, #1
 801a144:	3898      	subs	r0, #152	; 0x98
 801a146:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a14a:	442a      	add	r2, r5
 801a14c:	4562      	cmp	r2, ip
 801a14e:	da04      	bge.n	801a15a <__kernel_rem_pio2+0x2c2>
 801a150:	4615      	mov	r5, r2
 801a152:	e709      	b.n	8019f68 <__kernel_rem_pio2+0xd0>
 801a154:	9804      	ldr	r0, [sp, #16]
 801a156:	2201      	movs	r2, #1
 801a158:	e7e6      	b.n	801a128 <__kernel_rem_pio2+0x290>
 801a15a:	9b03      	ldr	r3, [sp, #12]
 801a15c:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a160:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a164:	9305      	str	r3, [sp, #20]
 801a166:	ee07 3a90 	vmov	s15, r3
 801a16a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a16e:	2500      	movs	r5, #0
 801a170:	eca6 7b02 	vstmia	r6!, {d7}
 801a174:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801a1a0 <__kernel_rem_pio2+0x308>
 801a178:	46b0      	mov	r8, r6
 801a17a:	4555      	cmp	r5, sl
 801a17c:	dd04      	ble.n	801a188 <__kernel_rem_pio2+0x2f0>
 801a17e:	eca0 7b02 	vstmia	r0!, {d7}
 801a182:	f10c 0c01 	add.w	ip, ip, #1
 801a186:	e7e1      	b.n	801a14c <__kernel_rem_pio2+0x2b4>
 801a188:	ecbe 5b02 	vldmia	lr!, {d5}
 801a18c:	ed38 6b02 	vldmdb	r8!, {d6}
 801a190:	3501      	adds	r5, #1
 801a192:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a196:	e7f0      	b.n	801a17a <__kernel_rem_pio2+0x2e2>
 801a198:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a19c:	e76e      	b.n	801a07c <__kernel_rem_pio2+0x1e4>
 801a19e:	bf00      	nop
	...
 801a1ac:	3e700000 	.word	0x3e700000
 801a1b0:	00000000 	.word	0x00000000
 801a1b4:	41700000 	.word	0x41700000
 801a1b8:	08027358 	.word	0x08027358
 801a1bc:	08027318 	.word	0x08027318
 801a1c0:	4260      	negs	r0, r4
 801a1c2:	eeb0 0b48 	vmov.f64	d0, d8
 801a1c6:	f000 fb3f 	bl	801a848 <scalbn>
 801a1ca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801a3a8 <__kernel_rem_pio2+0x510>
 801a1ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d6:	db18      	blt.n	801a20a <__kernel_rem_pio2+0x372>
 801a1d8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801a3b0 <__kernel_rem_pio2+0x518>
 801a1dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a1e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a1e4:	aa06      	add	r2, sp, #24
 801a1e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a1ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a1ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a1f2:	f105 0b01 	add.w	fp, r5, #1
 801a1f6:	ee10 3a10 	vmov	r3, s0
 801a1fa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a1fe:	ee17 3a10 	vmov	r3, s14
 801a202:	3418      	adds	r4, #24
 801a204:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a208:	e73f      	b.n	801a08a <__kernel_rem_pio2+0x1f2>
 801a20a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a20e:	aa06      	add	r2, sp, #24
 801a210:	ee10 3a10 	vmov	r3, s0
 801a214:	46ab      	mov	fp, r5
 801a216:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a21a:	e736      	b.n	801a08a <__kernel_rem_pio2+0x1f2>
 801a21c:	a806      	add	r0, sp, #24
 801a21e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a222:	9001      	str	r0, [sp, #4]
 801a224:	ee07 0a90 	vmov	s15, r0
 801a228:	3a01      	subs	r2, #1
 801a22a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a22e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a232:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a236:	ed21 7b02 	vstmdb	r1!, {d7}
 801a23a:	e734      	b.n	801a0a6 <__kernel_rem_pio2+0x20e>
 801a23c:	ecb5 5b02 	vldmia	r5!, {d5}
 801a240:	ecb4 6b02 	vldmia	r4!, {d6}
 801a244:	3001      	adds	r0, #1
 801a246:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a24a:	4548      	cmp	r0, r9
 801a24c:	dc01      	bgt.n	801a252 <__kernel_rem_pio2+0x3ba>
 801a24e:	4288      	cmp	r0, r1
 801a250:	ddf4      	ble.n	801a23c <__kernel_rem_pio2+0x3a4>
 801a252:	a842      	add	r0, sp, #264	; 0x108
 801a254:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a258:	ed81 7b00 	vstr	d7, [r1]
 801a25c:	3a01      	subs	r2, #1
 801a25e:	e726      	b.n	801a0ae <__kernel_rem_pio2+0x216>
 801a260:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a262:	2a02      	cmp	r2, #2
 801a264:	dc0a      	bgt.n	801a27c <__kernel_rem_pio2+0x3e4>
 801a266:	2a00      	cmp	r2, #0
 801a268:	dc2e      	bgt.n	801a2c8 <__kernel_rem_pio2+0x430>
 801a26a:	d047      	beq.n	801a2fc <__kernel_rem_pio2+0x464>
 801a26c:	f008 0007 	and.w	r0, r8, #7
 801a270:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a274:	ecbd 8b06 	vpop	{d8-d10}
 801a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a27c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a27e:	2a03      	cmp	r2, #3
 801a280:	d1f4      	bne.n	801a26c <__kernel_rem_pio2+0x3d4>
 801a282:	a942      	add	r1, sp, #264	; 0x108
 801a284:	f1a3 0208 	sub.w	r2, r3, #8
 801a288:	440a      	add	r2, r1
 801a28a:	4611      	mov	r1, r2
 801a28c:	4658      	mov	r0, fp
 801a28e:	2800      	cmp	r0, #0
 801a290:	f1a1 0108 	sub.w	r1, r1, #8
 801a294:	dc55      	bgt.n	801a342 <__kernel_rem_pio2+0x4aa>
 801a296:	4659      	mov	r1, fp
 801a298:	2901      	cmp	r1, #1
 801a29a:	f1a2 0208 	sub.w	r2, r2, #8
 801a29e:	dc60      	bgt.n	801a362 <__kernel_rem_pio2+0x4ca>
 801a2a0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801a3b8 <__kernel_rem_pio2+0x520>
 801a2a4:	aa42      	add	r2, sp, #264	; 0x108
 801a2a6:	4413      	add	r3, r2
 801a2a8:	f1bb 0f01 	cmp.w	fp, #1
 801a2ac:	dc69      	bgt.n	801a382 <__kernel_rem_pio2+0x4ea>
 801a2ae:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a2b2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a2b6:	2e00      	cmp	r6, #0
 801a2b8:	d16a      	bne.n	801a390 <__kernel_rem_pio2+0x4f8>
 801a2ba:	ed87 5b00 	vstr	d5, [r7]
 801a2be:	ed87 6b02 	vstr	d6, [r7, #8]
 801a2c2:	ed87 7b04 	vstr	d7, [r7, #16]
 801a2c6:	e7d1      	b.n	801a26c <__kernel_rem_pio2+0x3d4>
 801a2c8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801a3b8 <__kernel_rem_pio2+0x520>
 801a2cc:	aa42      	add	r2, sp, #264	; 0x108
 801a2ce:	4413      	add	r3, r2
 801a2d0:	465a      	mov	r2, fp
 801a2d2:	2a00      	cmp	r2, #0
 801a2d4:	da26      	bge.n	801a324 <__kernel_rem_pio2+0x48c>
 801a2d6:	b35e      	cbz	r6, 801a330 <__kernel_rem_pio2+0x498>
 801a2d8:	eeb1 7b46 	vneg.f64	d7, d6
 801a2dc:	ed87 7b00 	vstr	d7, [r7]
 801a2e0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a2e4:	aa44      	add	r2, sp, #272	; 0x110
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a2ec:	459b      	cmp	fp, r3
 801a2ee:	da22      	bge.n	801a336 <__kernel_rem_pio2+0x49e>
 801a2f0:	b10e      	cbz	r6, 801a2f6 <__kernel_rem_pio2+0x45e>
 801a2f2:	eeb1 7b47 	vneg.f64	d7, d7
 801a2f6:	ed87 7b02 	vstr	d7, [r7, #8]
 801a2fa:	e7b7      	b.n	801a26c <__kernel_rem_pio2+0x3d4>
 801a2fc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a3b8 <__kernel_rem_pio2+0x520>
 801a300:	aa42      	add	r2, sp, #264	; 0x108
 801a302:	4413      	add	r3, r2
 801a304:	f1bb 0f00 	cmp.w	fp, #0
 801a308:	da05      	bge.n	801a316 <__kernel_rem_pio2+0x47e>
 801a30a:	b10e      	cbz	r6, 801a310 <__kernel_rem_pio2+0x478>
 801a30c:	eeb1 7b47 	vneg.f64	d7, d7
 801a310:	ed87 7b00 	vstr	d7, [r7]
 801a314:	e7aa      	b.n	801a26c <__kernel_rem_pio2+0x3d4>
 801a316:	ed33 6b02 	vldmdb	r3!, {d6}
 801a31a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a31e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a322:	e7ef      	b.n	801a304 <__kernel_rem_pio2+0x46c>
 801a324:	ed33 7b02 	vldmdb	r3!, {d7}
 801a328:	3a01      	subs	r2, #1
 801a32a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a32e:	e7d0      	b.n	801a2d2 <__kernel_rem_pio2+0x43a>
 801a330:	eeb0 7b46 	vmov.f64	d7, d6
 801a334:	e7d2      	b.n	801a2dc <__kernel_rem_pio2+0x444>
 801a336:	ecb2 6b02 	vldmia	r2!, {d6}
 801a33a:	3301      	adds	r3, #1
 801a33c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a340:	e7d4      	b.n	801a2ec <__kernel_rem_pio2+0x454>
 801a342:	ed91 7b00 	vldr	d7, [r1]
 801a346:	ed91 5b02 	vldr	d5, [r1, #8]
 801a34a:	3801      	subs	r0, #1
 801a34c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a350:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a354:	ed81 6b00 	vstr	d6, [r1]
 801a358:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a35c:	ed81 7b02 	vstr	d7, [r1, #8]
 801a360:	e795      	b.n	801a28e <__kernel_rem_pio2+0x3f6>
 801a362:	ed92 7b00 	vldr	d7, [r2]
 801a366:	ed92 5b02 	vldr	d5, [r2, #8]
 801a36a:	3901      	subs	r1, #1
 801a36c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a370:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a374:	ed82 6b00 	vstr	d6, [r2]
 801a378:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a37c:	ed82 7b02 	vstr	d7, [r2, #8]
 801a380:	e78a      	b.n	801a298 <__kernel_rem_pio2+0x400>
 801a382:	ed33 6b02 	vldmdb	r3!, {d6}
 801a386:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a38a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a38e:	e78b      	b.n	801a2a8 <__kernel_rem_pio2+0x410>
 801a390:	eeb1 5b45 	vneg.f64	d5, d5
 801a394:	eeb1 6b46 	vneg.f64	d6, d6
 801a398:	ed87 5b00 	vstr	d5, [r7]
 801a39c:	eeb1 7b47 	vneg.f64	d7, d7
 801a3a0:	ed87 6b02 	vstr	d6, [r7, #8]
 801a3a4:	e78d      	b.n	801a2c2 <__kernel_rem_pio2+0x42a>
 801a3a6:	bf00      	nop
 801a3a8:	00000000 	.word	0x00000000
 801a3ac:	41700000 	.word	0x41700000
 801a3b0:	00000000 	.word	0x00000000
 801a3b4:	3e700000 	.word	0x3e700000
	...

0801a3c0 <__kernel_tan>:
 801a3c0:	eeb0 7b40 	vmov.f64	d7, d0
 801a3c4:	ee17 3a90 	vmov	r3, s15
 801a3c8:	4989      	ldr	r1, [pc, #548]	; (801a5f0 <__kernel_tan+0x230>)
 801a3ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a3ce:	428a      	cmp	r2, r1
 801a3d0:	b510      	push	{r4, lr}
 801a3d2:	dc33      	bgt.n	801a43c <__kernel_tan+0x7c>
 801a3d4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801a3d8:	ee16 1a90 	vmov	r1, s13
 801a3dc:	2900      	cmp	r1, #0
 801a3de:	d143      	bne.n	801a468 <__kernel_tan+0xa8>
 801a3e0:	ee10 4a10 	vmov	r4, s0
 801a3e4:	1c43      	adds	r3, r0, #1
 801a3e6:	4323      	orrs	r3, r4
 801a3e8:	4313      	orrs	r3, r2
 801a3ea:	d108      	bne.n	801a3fe <__kernel_tan+0x3e>
 801a3ec:	f000 fa20 	bl	801a830 <fabs>
 801a3f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a3f4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a3f8:	eeb0 0b47 	vmov.f64	d0, d7
 801a3fc:	bd10      	pop	{r4, pc}
 801a3fe:	2801      	cmp	r0, #1
 801a400:	d0fa      	beq.n	801a3f8 <__kernel_tan+0x38>
 801a402:	ee30 6b01 	vadd.f64	d6, d0, d1
 801a406:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a40a:	ec53 2b16 	vmov	r2, r3, d6
 801a40e:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801a412:	460a      	mov	r2, r1
 801a414:	ec43 2b15 	vmov	d5, r2, r3
 801a418:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a41c:	ec53 2b13 	vmov	r2, r3, d3
 801a420:	ee35 4b40 	vsub.f64	d4, d5, d0
 801a424:	460a      	mov	r2, r1
 801a426:	ec43 2b17 	vmov	d7, r2, r3
 801a42a:	ee31 4b44 	vsub.f64	d4, d1, d4
 801a42e:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a432:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a436:	eea6 7b03 	vfma.f64	d7, d6, d3
 801a43a:	e7dd      	b.n	801a3f8 <__kernel_tan+0x38>
 801a43c:	496d      	ldr	r1, [pc, #436]	; (801a5f4 <__kernel_tan+0x234>)
 801a43e:	428a      	cmp	r2, r1
 801a440:	dd12      	ble.n	801a468 <__kernel_tan+0xa8>
 801a442:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 801a570 <__kernel_tan+0x1b0>
 801a446:	2b00      	cmp	r3, #0
 801a448:	bfb8      	it	lt
 801a44a:	eeb1 7b40 	vneglt.f64	d7, d0
 801a44e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a452:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801a578 <__kernel_tan+0x1b8>
 801a456:	bfb8      	it	lt
 801a458:	eeb1 1b41 	vneglt.f64	d1, d1
 801a45c:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a460:	ed9f 1b47 	vldr	d1, [pc, #284]	; 801a580 <__kernel_tan+0x1c0>
 801a464:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a468:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a46c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a588 <__kernel_tan+0x1c8>
 801a470:	ee25 6b05 	vmul.f64	d6, d5, d5
 801a474:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a590 <__kernel_tan+0x1d0>
 801a478:	eea6 4b03 	vfma.f64	d4, d6, d3
 801a47c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a598 <__kernel_tan+0x1d8>
 801a480:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a484:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a5a0 <__kernel_tan+0x1e0>
 801a488:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a48c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a5a8 <__kernel_tan+0x1e8>
 801a490:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a494:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a5b0 <__kernel_tan+0x1f0>
 801a498:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a5b8 <__kernel_tan+0x1f8>
 801a49c:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a4a0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a5c0 <__kernel_tan+0x200>
 801a4a4:	eea6 3b02 	vfma.f64	d3, d6, d2
 801a4a8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a5c8 <__kernel_tan+0x208>
 801a4ac:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a4b0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a5d0 <__kernel_tan+0x210>
 801a4b4:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a4b8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a5d8 <__kernel_tan+0x218>
 801a4bc:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a4c0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a5e0 <__kernel_tan+0x220>
 801a4c4:	494b      	ldr	r1, [pc, #300]	; (801a5f4 <__kernel_tan+0x234>)
 801a4c6:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a4ca:	ee27 2b05 	vmul.f64	d2, d7, d5
 801a4ce:	eeb0 6b44 	vmov.f64	d6, d4
 801a4d2:	eeb0 4b41 	vmov.f64	d4, d1
 801a4d6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a4da:	eea6 4b02 	vfma.f64	d4, d6, d2
 801a4de:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801a5e8 <__kernel_tan+0x228>
 801a4e2:	eea4 1b05 	vfma.f64	d1, d4, d5
 801a4e6:	428a      	cmp	r2, r1
 801a4e8:	eea2 1b06 	vfma.f64	d1, d2, d6
 801a4ec:	ee37 5b01 	vadd.f64	d5, d7, d1
 801a4f0:	dd1d      	ble.n	801a52e <__kernel_tan+0x16e>
 801a4f2:	ee25 3b05 	vmul.f64	d3, d5, d5
 801a4f6:	179b      	asrs	r3, r3, #30
 801a4f8:	ee06 0a90 	vmov	s13, r0
 801a4fc:	f003 0302 	and.w	r3, r3, #2
 801a500:	f1c3 0301 	rsb	r3, r3, #1
 801a504:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a508:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a50c:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801a510:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a514:	ee34 4b41 	vsub.f64	d4, d4, d1
 801a518:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a51c:	eea7 6b45 	vfms.f64	d6, d7, d5
 801a520:	ee07 3a90 	vmov	s15, r3
 801a524:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a528:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a52c:	e764      	b.n	801a3f8 <__kernel_tan+0x38>
 801a52e:	2801      	cmp	r0, #1
 801a530:	d01a      	beq.n	801a568 <__kernel_tan+0x1a8>
 801a532:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a536:	ec51 0b15 	vmov	r0, r1, d5
 801a53a:	2000      	movs	r0, #0
 801a53c:	ec41 0b13 	vmov	d3, r0, r1
 801a540:	ee33 7b47 	vsub.f64	d7, d3, d7
 801a544:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a548:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a54c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801a550:	ec53 2b14 	vmov	r2, r3, d4
 801a554:	4602      	mov	r2, r0
 801a556:	ec43 2b17 	vmov	d7, r2, r3
 801a55a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801a55e:	eea1 6b07 	vfma.f64	d6, d1, d7
 801a562:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a566:	e747      	b.n	801a3f8 <__kernel_tan+0x38>
 801a568:	eeb0 7b45 	vmov.f64	d7, d5
 801a56c:	e744      	b.n	801a3f8 <__kernel_tan+0x38>
 801a56e:	bf00      	nop
 801a570:	54442d18 	.word	0x54442d18
 801a574:	3fe921fb 	.word	0x3fe921fb
 801a578:	33145c07 	.word	0x33145c07
 801a57c:	3c81a626 	.word	0x3c81a626
	...
 801a588:	db605373 	.word	0xdb605373
 801a58c:	bef375cb 	.word	0xbef375cb
 801a590:	a03792a6 	.word	0xa03792a6
 801a594:	3f147e88 	.word	0x3f147e88
 801a598:	f2f26501 	.word	0xf2f26501
 801a59c:	3f4344d8 	.word	0x3f4344d8
 801a5a0:	c9560328 	.word	0xc9560328
 801a5a4:	3f6d6d22 	.word	0x3f6d6d22
 801a5a8:	8406d637 	.word	0x8406d637
 801a5ac:	3f9664f4 	.word	0x3f9664f4
 801a5b0:	1110fe7a 	.word	0x1110fe7a
 801a5b4:	3fc11111 	.word	0x3fc11111
 801a5b8:	74bf7ad4 	.word	0x74bf7ad4
 801a5bc:	3efb2a70 	.word	0x3efb2a70
 801a5c0:	32f0a7e9 	.word	0x32f0a7e9
 801a5c4:	3f12b80f 	.word	0x3f12b80f
 801a5c8:	1a8d1068 	.word	0x1a8d1068
 801a5cc:	3f3026f7 	.word	0x3f3026f7
 801a5d0:	fee08315 	.word	0xfee08315
 801a5d4:	3f57dbc8 	.word	0x3f57dbc8
 801a5d8:	e96e8493 	.word	0xe96e8493
 801a5dc:	3f8226e3 	.word	0x3f8226e3
 801a5e0:	1bb341fe 	.word	0x1bb341fe
 801a5e4:	3faba1ba 	.word	0x3faba1ba
 801a5e8:	55555563 	.word	0x55555563
 801a5ec:	3fd55555 	.word	0x3fd55555
 801a5f0:	3e2fffff 	.word	0x3e2fffff
 801a5f4:	3fe59427 	.word	0x3fe59427

0801a5f8 <expm1f>:
 801a5f8:	ee10 2a10 	vmov	r2, s0
 801a5fc:	497d      	ldr	r1, [pc, #500]	; (801a7f4 <expm1f+0x1fc>)
 801a5fe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a602:	428b      	cmp	r3, r1
 801a604:	d920      	bls.n	801a648 <expm1f+0x50>
 801a606:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a60a:	d902      	bls.n	801a612 <expm1f+0x1a>
 801a60c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a610:	4770      	bx	lr
 801a612:	d105      	bne.n	801a620 <expm1f+0x28>
 801a614:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a618:	2a00      	cmp	r2, #0
 801a61a:	fe20 0a27 	vselge.f32	s0, s0, s15
 801a61e:	4770      	bx	lr
 801a620:	2a00      	cmp	r2, #0
 801a622:	db05      	blt.n	801a630 <expm1f+0x38>
 801a624:	4974      	ldr	r1, [pc, #464]	; (801a7f8 <expm1f+0x200>)
 801a626:	428b      	cmp	r3, r1
 801a628:	d95c      	bls.n	801a6e4 <expm1f+0xec>
 801a62a:	2000      	movs	r0, #0
 801a62c:	f7fe bf5e 	b.w	80194ec <__math_oflowf>
 801a630:	eddf 7a72 	vldr	s15, [pc, #456]	; 801a7fc <expm1f+0x204>
 801a634:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a640:	d550      	bpl.n	801a6e4 <expm1f+0xec>
 801a642:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a646:	4770      	bx	lr
 801a648:	496d      	ldr	r1, [pc, #436]	; (801a800 <expm1f+0x208>)
 801a64a:	428b      	cmp	r3, r1
 801a64c:	d966      	bls.n	801a71c <expm1f+0x124>
 801a64e:	496d      	ldr	r1, [pc, #436]	; (801a804 <expm1f+0x20c>)
 801a650:	428b      	cmp	r3, r1
 801a652:	d847      	bhi.n	801a6e4 <expm1f+0xec>
 801a654:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801a808 <expm1f+0x210>
 801a658:	2a00      	cmp	r2, #0
 801a65a:	bfa7      	ittee	ge
 801a65c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801a660:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 801a80c <expm1f+0x214>
 801a664:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 801a810 <expm1f+0x218>
 801a668:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801a66c:	bfac      	ite	ge
 801a66e:	2301      	movge	r3, #1
 801a670:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a674:	ee37 0a66 	vsub.f32	s0, s14, s13
 801a678:	ee77 7a40 	vsub.f32	s15, s14, s0
 801a67c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a680:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a684:	ee20 4a25 	vmul.f32	s8, s0, s11
 801a688:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801a814 <expm1f+0x21c>
 801a68c:	eddf 6a62 	vldr	s13, [pc, #392]	; 801a818 <expm1f+0x220>
 801a690:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801a81c <expm1f+0x224>
 801a694:	ee20 7a04 	vmul.f32	s14, s0, s8
 801a698:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801a69c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801a6a0:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801a820 <expm1f+0x228>
 801a6a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 801a6a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801a824 <expm1f+0x22c>
 801a6ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a6b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a6b4:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a6b8:	eef0 6a46 	vmov.f32	s13, s12
 801a6bc:	eee5 6a07 	vfma.f32	s13, s10, s14
 801a6c0:	eee4 4a66 	vfms.f32	s9, s8, s13
 801a6c4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801a6c8:	eea0 4a64 	vfms.f32	s8, s0, s9
 801a6cc:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801a6d0:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801a6d4:	ee66 6a87 	vmul.f32	s13, s13, s14
 801a6d8:	bb73      	cbnz	r3, 801a738 <expm1f+0x140>
 801a6da:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801a6de:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a6e2:	4770      	bx	lr
 801a6e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801a6e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a6ec:	2a00      	cmp	r2, #0
 801a6ee:	fe67 7a87 	vselge.f32	s15, s15, s14
 801a6f2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801a828 <expm1f+0x230>
 801a6f6:	ee40 7a07 	vmla.f32	s15, s0, s14
 801a6fa:	eeb0 7a40 	vmov.f32	s14, s0
 801a6fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a702:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a706:	ee17 3a90 	vmov	r3, s15
 801a70a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801a808 <expm1f+0x210>
 801a70e:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801a712:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801a80c <expm1f+0x214>
 801a716:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801a71a:	e7ab      	b.n	801a674 <expm1f+0x7c>
 801a71c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801a720:	d208      	bcs.n	801a734 <expm1f+0x13c>
 801a722:	eddf 7a42 	vldr	s15, [pc, #264]	; 801a82c <expm1f+0x234>
 801a726:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a72a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801a72e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a732:	4770      	bx	lr
 801a734:	2300      	movs	r3, #0
 801a736:	e7a3      	b.n	801a680 <expm1f+0x88>
 801a738:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801a73c:	1c5a      	adds	r2, r3, #1
 801a73e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801a742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a746:	d106      	bne.n	801a756 <expm1f+0x15e>
 801a748:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a74c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a750:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801a754:	4770      	bx	lr
 801a756:	2b01      	cmp	r3, #1
 801a758:	d118      	bne.n	801a78c <expm1f+0x194>
 801a75a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801a75e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a766:	bf5b      	ittet	pl
 801a768:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801a76c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801a770:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 801a774:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801a778:	bf43      	ittte	mi
 801a77a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801a77e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801a782:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801a786:	eeb0 0a46 	vmovpl.f32	s0, s12
 801a78a:	4770      	bx	lr
 801a78c:	1c5a      	adds	r2, r3, #1
 801a78e:	2a39      	cmp	r2, #57	; 0x39
 801a790:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801a794:	d90b      	bls.n	801a7ae <expm1f+0x1b6>
 801a796:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a79a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a79e:	ee17 3a90 	vmov	r3, s15
 801a7a2:	4419      	add	r1, r3
 801a7a4:	ee07 1a90 	vmov	s15, r1
 801a7a8:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801a7ac:	4770      	bx	lr
 801a7ae:	2b16      	cmp	r3, #22
 801a7b0:	dc11      	bgt.n	801a7d6 <expm1f+0x1de>
 801a7b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a7b6:	fa42 f303 	asr.w	r3, r2, r3
 801a7ba:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801a7be:	ee07 3a10 	vmov	s14, r3
 801a7c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a7c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a7ca:	ee17 3a90 	vmov	r3, s15
 801a7ce:	440b      	add	r3, r1
 801a7d0:	ee00 3a10 	vmov	s0, r3
 801a7d4:	4770      	bx	lr
 801a7d6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801a7da:	05db      	lsls	r3, r3, #23
 801a7dc:	ee07 3a10 	vmov	s14, r3
 801a7e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a7e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a7ec:	ee17 3a90 	vmov	r3, s15
 801a7f0:	e7ed      	b.n	801a7ce <expm1f+0x1d6>
 801a7f2:	bf00      	nop
 801a7f4:	4195b843 	.word	0x4195b843
 801a7f8:	42b17217 	.word	0x42b17217
 801a7fc:	0da24260 	.word	0x0da24260
 801a800:	3eb17218 	.word	0x3eb17218
 801a804:	3f851591 	.word	0x3f851591
 801a808:	3f317180 	.word	0x3f317180
 801a80c:	3717f7d1 	.word	0x3717f7d1
 801a810:	b717f7d1 	.word	0xb717f7d1
 801a814:	b457edbb 	.word	0xb457edbb
 801a818:	36867e54 	.word	0x36867e54
 801a81c:	bd088889 	.word	0xbd088889
 801a820:	b8a670cd 	.word	0xb8a670cd
 801a824:	3ad00d01 	.word	0x3ad00d01
 801a828:	3fb8aa3b 	.word	0x3fb8aa3b
 801a82c:	7149f2ca 	.word	0x7149f2ca

0801a830 <fabs>:
 801a830:	ec51 0b10 	vmov	r0, r1, d0
 801a834:	ee10 2a10 	vmov	r2, s0
 801a838:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a83c:	ec43 2b10 	vmov	d0, r2, r3
 801a840:	4770      	bx	lr
 801a842:	0000      	movs	r0, r0
 801a844:	0000      	movs	r0, r0
	...

0801a848 <scalbn>:
 801a848:	ee10 1a90 	vmov	r1, s1
 801a84c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a850:	b98b      	cbnz	r3, 801a876 <scalbn+0x2e>
 801a852:	ee10 3a10 	vmov	r3, s0
 801a856:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a85a:	4319      	orrs	r1, r3
 801a85c:	d00a      	beq.n	801a874 <scalbn+0x2c>
 801a85e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801a910 <scalbn+0xc8>
 801a862:	4b37      	ldr	r3, [pc, #220]	; (801a940 <scalbn+0xf8>)
 801a864:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a868:	4298      	cmp	r0, r3
 801a86a:	da0b      	bge.n	801a884 <scalbn+0x3c>
 801a86c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801a918 <scalbn+0xd0>
 801a870:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a874:	4770      	bx	lr
 801a876:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a87a:	4293      	cmp	r3, r2
 801a87c:	d107      	bne.n	801a88e <scalbn+0x46>
 801a87e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a882:	4770      	bx	lr
 801a884:	ee10 1a90 	vmov	r1, s1
 801a888:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a88c:	3b36      	subs	r3, #54	; 0x36
 801a88e:	f24c 3250 	movw	r2, #50000	; 0xc350
 801a892:	4290      	cmp	r0, r2
 801a894:	dd0d      	ble.n	801a8b2 <scalbn+0x6a>
 801a896:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a920 <scalbn+0xd8>
 801a89a:	ee10 3a90 	vmov	r3, s1
 801a89e:	eeb0 6b47 	vmov.f64	d6, d7
 801a8a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801a928 <scalbn+0xe0>
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	fe27 7b05 	vselge.f64	d7, d7, d5
 801a8ac:	ee27 0b06 	vmul.f64	d0, d7, d6
 801a8b0:	4770      	bx	lr
 801a8b2:	4418      	add	r0, r3
 801a8b4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801a8b8:	4298      	cmp	r0, r3
 801a8ba:	dcec      	bgt.n	801a896 <scalbn+0x4e>
 801a8bc:	2800      	cmp	r0, #0
 801a8be:	dd0a      	ble.n	801a8d6 <scalbn+0x8e>
 801a8c0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801a8c4:	ec53 2b10 	vmov	r2, r3, d0
 801a8c8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801a8cc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a8d0:	ec43 2b10 	vmov	d0, r2, r3
 801a8d4:	4770      	bx	lr
 801a8d6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801a8da:	da09      	bge.n	801a8f0 <scalbn+0xa8>
 801a8dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801a918 <scalbn+0xd0>
 801a8e0:	ee10 3a90 	vmov	r3, s1
 801a8e4:	eeb0 6b47 	vmov.f64	d6, d7
 801a8e8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801a930 <scalbn+0xe8>
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	e7db      	b.n	801a8a8 <scalbn+0x60>
 801a8f0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801a8f4:	ec53 2b10 	vmov	r2, r3, d0
 801a8f8:	3036      	adds	r0, #54	; 0x36
 801a8fa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801a8fe:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a902:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801a938 <scalbn+0xf0>
 801a906:	ec43 2b10 	vmov	d0, r2, r3
 801a90a:	e7b1      	b.n	801a870 <scalbn+0x28>
 801a90c:	f3af 8000 	nop.w
 801a910:	00000000 	.word	0x00000000
 801a914:	43500000 	.word	0x43500000
 801a918:	c2f8f359 	.word	0xc2f8f359
 801a91c:	01a56e1f 	.word	0x01a56e1f
 801a920:	8800759c 	.word	0x8800759c
 801a924:	7e37e43c 	.word	0x7e37e43c
 801a928:	8800759c 	.word	0x8800759c
 801a92c:	fe37e43c 	.word	0xfe37e43c
 801a930:	c2f8f359 	.word	0xc2f8f359
 801a934:	81a56e1f 	.word	0x81a56e1f
 801a938:	00000000 	.word	0x00000000
 801a93c:	3c900000 	.word	0x3c900000
 801a940:	ffff3cb0 	.word	0xffff3cb0

0801a944 <__kernel_rem_pio2f>:
 801a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a948:	ed2d 8b04 	vpush	{d8-d9}
 801a94c:	b0d9      	sub	sp, #356	; 0x164
 801a94e:	4688      	mov	r8, r1
 801a950:	9002      	str	r0, [sp, #8]
 801a952:	49b8      	ldr	r1, [pc, #736]	; (801ac34 <__kernel_rem_pio2f+0x2f0>)
 801a954:	9866      	ldr	r0, [sp, #408]	; 0x198
 801a956:	9301      	str	r3, [sp, #4]
 801a958:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801a95c:	9901      	ldr	r1, [sp, #4]
 801a95e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801a960:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801a964:	1d11      	adds	r1, r2, #4
 801a966:	db25      	blt.n	801a9b4 <__kernel_rem_pio2f+0x70>
 801a968:	1ed0      	subs	r0, r2, #3
 801a96a:	bf48      	it	mi
 801a96c:	1d10      	addmi	r0, r2, #4
 801a96e:	10c0      	asrs	r0, r0, #3
 801a970:	1c45      	adds	r5, r0, #1
 801a972:	00e9      	lsls	r1, r5, #3
 801a974:	eba0 070b 	sub.w	r7, r0, fp
 801a978:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801a97c:	9103      	str	r1, [sp, #12]
 801a97e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a982:	eb0a 0c0b 	add.w	ip, sl, fp
 801a986:	ae1c      	add	r6, sp, #112	; 0x70
 801a988:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801a98c:	2400      	movs	r4, #0
 801a98e:	4564      	cmp	r4, ip
 801a990:	dd12      	ble.n	801a9b8 <__kernel_rem_pio2f+0x74>
 801a992:	9901      	ldr	r1, [sp, #4]
 801a994:	ac1c      	add	r4, sp, #112	; 0x70
 801a996:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a99a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801a99e:	f04f 0c00 	mov.w	ip, #0
 801a9a2:	45d4      	cmp	ip, sl
 801a9a4:	dc27      	bgt.n	801a9f6 <__kernel_rem_pio2f+0xb2>
 801a9a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a9aa:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801a9ae:	4627      	mov	r7, r4
 801a9b0:	2600      	movs	r6, #0
 801a9b2:	e016      	b.n	801a9e2 <__kernel_rem_pio2f+0x9e>
 801a9b4:	2000      	movs	r0, #0
 801a9b6:	e7db      	b.n	801a970 <__kernel_rem_pio2f+0x2c>
 801a9b8:	42e7      	cmn	r7, r4
 801a9ba:	bf5d      	ittte	pl
 801a9bc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801a9c0:	ee07 1a90 	vmovpl	s15, r1
 801a9c4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a9c8:	eef0 7a47 	vmovmi.f32	s15, s14
 801a9cc:	ece6 7a01 	vstmia	r6!, {s15}
 801a9d0:	3401      	adds	r4, #1
 801a9d2:	e7dc      	b.n	801a98e <__kernel_rem_pio2f+0x4a>
 801a9d4:	ecfe 6a01 	vldmia	lr!, {s13}
 801a9d8:	ed97 7a00 	vldr	s14, [r7]
 801a9dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9e0:	3601      	adds	r6, #1
 801a9e2:	455e      	cmp	r6, fp
 801a9e4:	f1a7 0704 	sub.w	r7, r7, #4
 801a9e8:	ddf4      	ble.n	801a9d4 <__kernel_rem_pio2f+0x90>
 801a9ea:	ece9 7a01 	vstmia	r9!, {s15}
 801a9ee:	f10c 0c01 	add.w	ip, ip, #1
 801a9f2:	3404      	adds	r4, #4
 801a9f4:	e7d5      	b.n	801a9a2 <__kernel_rem_pio2f+0x5e>
 801a9f6:	a908      	add	r1, sp, #32
 801a9f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a9fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801aa00:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801ac40 <__kernel_rem_pio2f+0x2fc>
 801aa04:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801ac3c <__kernel_rem_pio2f+0x2f8>
 801aa08:	9105      	str	r1, [sp, #20]
 801aa0a:	9304      	str	r3, [sp, #16]
 801aa0c:	4656      	mov	r6, sl
 801aa0e:	00b3      	lsls	r3, r6, #2
 801aa10:	9306      	str	r3, [sp, #24]
 801aa12:	ab58      	add	r3, sp, #352	; 0x160
 801aa14:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801aa18:	ac08      	add	r4, sp, #32
 801aa1a:	ab44      	add	r3, sp, #272	; 0x110
 801aa1c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801aa20:	46a4      	mov	ip, r4
 801aa22:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801aa26:	4637      	mov	r7, r6
 801aa28:	2f00      	cmp	r7, #0
 801aa2a:	f1a0 0004 	sub.w	r0, r0, #4
 801aa2e:	dc4a      	bgt.n	801aac6 <__kernel_rem_pio2f+0x182>
 801aa30:	4628      	mov	r0, r5
 801aa32:	9207      	str	r2, [sp, #28]
 801aa34:	f000 fab2 	bl	801af9c <scalbnf>
 801aa38:	eeb0 8a40 	vmov.f32	s16, s0
 801aa3c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801aa40:	ee28 0a00 	vmul.f32	s0, s16, s0
 801aa44:	f000 fa68 	bl	801af18 <floorf>
 801aa48:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801aa4c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801aa50:	2d00      	cmp	r5, #0
 801aa52:	9a07      	ldr	r2, [sp, #28]
 801aa54:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801aa58:	ee17 9a90 	vmov	r9, s15
 801aa5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa60:	ee38 8a67 	vsub.f32	s16, s16, s15
 801aa64:	dd41      	ble.n	801aaea <__kernel_rem_pio2f+0x1a6>
 801aa66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801aa6a:	ab08      	add	r3, sp, #32
 801aa6c:	f1c5 0e08 	rsb	lr, r5, #8
 801aa70:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801aa74:	fa47 f00e 	asr.w	r0, r7, lr
 801aa78:	4481      	add	r9, r0
 801aa7a:	fa00 f00e 	lsl.w	r0, r0, lr
 801aa7e:	1a3f      	subs	r7, r7, r0
 801aa80:	f1c5 0007 	rsb	r0, r5, #7
 801aa84:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801aa88:	4107      	asrs	r7, r0
 801aa8a:	2f00      	cmp	r7, #0
 801aa8c:	dd3c      	ble.n	801ab08 <__kernel_rem_pio2f+0x1c4>
 801aa8e:	f04f 0e00 	mov.w	lr, #0
 801aa92:	f109 0901 	add.w	r9, r9, #1
 801aa96:	4671      	mov	r1, lr
 801aa98:	4576      	cmp	r6, lr
 801aa9a:	dc67      	bgt.n	801ab6c <__kernel_rem_pio2f+0x228>
 801aa9c:	2d00      	cmp	r5, #0
 801aa9e:	dd03      	ble.n	801aaa8 <__kernel_rem_pio2f+0x164>
 801aaa0:	2d01      	cmp	r5, #1
 801aaa2:	d074      	beq.n	801ab8e <__kernel_rem_pio2f+0x24a>
 801aaa4:	2d02      	cmp	r5, #2
 801aaa6:	d07b      	beq.n	801aba0 <__kernel_rem_pio2f+0x25c>
 801aaa8:	2f02      	cmp	r7, #2
 801aaaa:	d12d      	bne.n	801ab08 <__kernel_rem_pio2f+0x1c4>
 801aaac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aab0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801aab4:	b341      	cbz	r1, 801ab08 <__kernel_rem_pio2f+0x1c4>
 801aab6:	4628      	mov	r0, r5
 801aab8:	9207      	str	r2, [sp, #28]
 801aaba:	f000 fa6f 	bl	801af9c <scalbnf>
 801aabe:	9a07      	ldr	r2, [sp, #28]
 801aac0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801aac4:	e020      	b.n	801ab08 <__kernel_rem_pio2f+0x1c4>
 801aac6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801aaca:	3f01      	subs	r7, #1
 801aacc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aad4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801aad8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aadc:	ecac 0a01 	vstmia	ip!, {s0}
 801aae0:	ed90 0a00 	vldr	s0, [r0]
 801aae4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801aae8:	e79e      	b.n	801aa28 <__kernel_rem_pio2f+0xe4>
 801aaea:	d105      	bne.n	801aaf8 <__kernel_rem_pio2f+0x1b4>
 801aaec:	1e70      	subs	r0, r6, #1
 801aaee:	ab08      	add	r3, sp, #32
 801aaf0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801aaf4:	11ff      	asrs	r7, r7, #7
 801aaf6:	e7c8      	b.n	801aa8a <__kernel_rem_pio2f+0x146>
 801aaf8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aafc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ab00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab04:	da30      	bge.n	801ab68 <__kernel_rem_pio2f+0x224>
 801ab06:	2700      	movs	r7, #0
 801ab08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab10:	f040 809a 	bne.w	801ac48 <__kernel_rem_pio2f+0x304>
 801ab14:	1e74      	subs	r4, r6, #1
 801ab16:	46a4      	mov	ip, r4
 801ab18:	2100      	movs	r1, #0
 801ab1a:	45d4      	cmp	ip, sl
 801ab1c:	da47      	bge.n	801abae <__kernel_rem_pio2f+0x26a>
 801ab1e:	2900      	cmp	r1, #0
 801ab20:	d063      	beq.n	801abea <__kernel_rem_pio2f+0x2a6>
 801ab22:	ab08      	add	r3, sp, #32
 801ab24:	3d08      	subs	r5, #8
 801ab26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d07f      	beq.n	801ac2e <__kernel_rem_pio2f+0x2ea>
 801ab2e:	4628      	mov	r0, r5
 801ab30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ab34:	f000 fa32 	bl	801af9c <scalbnf>
 801ab38:	1c63      	adds	r3, r4, #1
 801ab3a:	aa44      	add	r2, sp, #272	; 0x110
 801ab3c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801ac40 <__kernel_rem_pio2f+0x2fc>
 801ab40:	0099      	lsls	r1, r3, #2
 801ab42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ab46:	4623      	mov	r3, r4
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	f280 80ad 	bge.w	801aca8 <__kernel_rem_pio2f+0x364>
 801ab4e:	4623      	mov	r3, r4
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	f2c0 80cb 	blt.w	801acec <__kernel_rem_pio2f+0x3a8>
 801ab56:	aa44      	add	r2, sp, #272	; 0x110
 801ab58:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801ab5c:	4e36      	ldr	r6, [pc, #216]	; (801ac38 <__kernel_rem_pio2f+0x2f4>)
 801ab5e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801ab62:	2000      	movs	r0, #0
 801ab64:	1ae2      	subs	r2, r4, r3
 801ab66:	e0b6      	b.n	801acd6 <__kernel_rem_pio2f+0x392>
 801ab68:	2702      	movs	r7, #2
 801ab6a:	e790      	b.n	801aa8e <__kernel_rem_pio2f+0x14a>
 801ab6c:	6820      	ldr	r0, [r4, #0]
 801ab6e:	b949      	cbnz	r1, 801ab84 <__kernel_rem_pio2f+0x240>
 801ab70:	b118      	cbz	r0, 801ab7a <__kernel_rem_pio2f+0x236>
 801ab72:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ab76:	6020      	str	r0, [r4, #0]
 801ab78:	2001      	movs	r0, #1
 801ab7a:	f10e 0e01 	add.w	lr, lr, #1
 801ab7e:	3404      	adds	r4, #4
 801ab80:	4601      	mov	r1, r0
 801ab82:	e789      	b.n	801aa98 <__kernel_rem_pio2f+0x154>
 801ab84:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ab88:	6020      	str	r0, [r4, #0]
 801ab8a:	4608      	mov	r0, r1
 801ab8c:	e7f5      	b.n	801ab7a <__kernel_rem_pio2f+0x236>
 801ab8e:	1e74      	subs	r4, r6, #1
 801ab90:	ab08      	add	r3, sp, #32
 801ab92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab96:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ab9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ab9e:	e783      	b.n	801aaa8 <__kernel_rem_pio2f+0x164>
 801aba0:	1e74      	subs	r4, r6, #1
 801aba2:	ab08      	add	r3, sp, #32
 801aba4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aba8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801abac:	e7f5      	b.n	801ab9a <__kernel_rem_pio2f+0x256>
 801abae:	ab08      	add	r3, sp, #32
 801abb0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801abb4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801abb8:	4301      	orrs	r1, r0
 801abba:	e7ae      	b.n	801ab1a <__kernel_rem_pio2f+0x1d6>
 801abbc:	3001      	adds	r0, #1
 801abbe:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801abc2:	2f00      	cmp	r7, #0
 801abc4:	d0fa      	beq.n	801abbc <__kernel_rem_pio2f+0x278>
 801abc6:	9b06      	ldr	r3, [sp, #24]
 801abc8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801abcc:	eb0d 0403 	add.w	r4, sp, r3
 801abd0:	9b01      	ldr	r3, [sp, #4]
 801abd2:	18f7      	adds	r7, r6, r3
 801abd4:	ab1c      	add	r3, sp, #112	; 0x70
 801abd6:	f106 0c01 	add.w	ip, r6, #1
 801abda:	3c4c      	subs	r4, #76	; 0x4c
 801abdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801abe0:	4430      	add	r0, r6
 801abe2:	4560      	cmp	r0, ip
 801abe4:	da04      	bge.n	801abf0 <__kernel_rem_pio2f+0x2ac>
 801abe6:	4606      	mov	r6, r0
 801abe8:	e711      	b.n	801aa0e <__kernel_rem_pio2f+0xca>
 801abea:	9c05      	ldr	r4, [sp, #20]
 801abec:	2001      	movs	r0, #1
 801abee:	e7e6      	b.n	801abbe <__kernel_rem_pio2f+0x27a>
 801abf0:	9b04      	ldr	r3, [sp, #16]
 801abf2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801abf6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801abfa:	9306      	str	r3, [sp, #24]
 801abfc:	ee07 3a90 	vmov	s15, r3
 801ac00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac04:	2600      	movs	r6, #0
 801ac06:	ece7 7a01 	vstmia	r7!, {s15}
 801ac0a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801ac0e:	46b9      	mov	r9, r7
 801ac10:	455e      	cmp	r6, fp
 801ac12:	dd04      	ble.n	801ac1e <__kernel_rem_pio2f+0x2da>
 801ac14:	ece4 7a01 	vstmia	r4!, {s15}
 801ac18:	f10c 0c01 	add.w	ip, ip, #1
 801ac1c:	e7e1      	b.n	801abe2 <__kernel_rem_pio2f+0x29e>
 801ac1e:	ecfe 6a01 	vldmia	lr!, {s13}
 801ac22:	ed39 7a01 	vldmdb	r9!, {s14}
 801ac26:	3601      	adds	r6, #1
 801ac28:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac2c:	e7f0      	b.n	801ac10 <__kernel_rem_pio2f+0x2cc>
 801ac2e:	3c01      	subs	r4, #1
 801ac30:	e777      	b.n	801ab22 <__kernel_rem_pio2f+0x1de>
 801ac32:	bf00      	nop
 801ac34:	08027394 	.word	0x08027394
 801ac38:	08027368 	.word	0x08027368
 801ac3c:	43800000 	.word	0x43800000
 801ac40:	3b800000 	.word	0x3b800000
 801ac44:	00000000 	.word	0x00000000
 801ac48:	9b03      	ldr	r3, [sp, #12]
 801ac4a:	eeb0 0a48 	vmov.f32	s0, s16
 801ac4e:	1a98      	subs	r0, r3, r2
 801ac50:	f000 f9a4 	bl	801af9c <scalbnf>
 801ac54:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801ac3c <__kernel_rem_pio2f+0x2f8>
 801ac58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ac5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac60:	db19      	blt.n	801ac96 <__kernel_rem_pio2f+0x352>
 801ac62:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801ac40 <__kernel_rem_pio2f+0x2fc>
 801ac66:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ac6a:	aa08      	add	r2, sp, #32
 801ac6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac70:	1c74      	adds	r4, r6, #1
 801ac72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac76:	3508      	adds	r5, #8
 801ac78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ac7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ac84:	ee10 3a10 	vmov	r3, s0
 801ac88:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ac8c:	ee17 3a90 	vmov	r3, s15
 801ac90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ac94:	e74b      	b.n	801ab2e <__kernel_rem_pio2f+0x1ea>
 801ac96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ac9a:	aa08      	add	r2, sp, #32
 801ac9c:	ee10 3a10 	vmov	r3, s0
 801aca0:	4634      	mov	r4, r6
 801aca2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801aca6:	e742      	b.n	801ab2e <__kernel_rem_pio2f+0x1ea>
 801aca8:	a808      	add	r0, sp, #32
 801acaa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801acae:	9001      	str	r0, [sp, #4]
 801acb0:	ee07 0a90 	vmov	s15, r0
 801acb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801acb8:	3b01      	subs	r3, #1
 801acba:	ee67 7a80 	vmul.f32	s15, s15, s0
 801acbe:	ee20 0a07 	vmul.f32	s0, s0, s14
 801acc2:	ed62 7a01 	vstmdb	r2!, {s15}
 801acc6:	e73f      	b.n	801ab48 <__kernel_rem_pio2f+0x204>
 801acc8:	ecf6 6a01 	vldmia	r6!, {s13}
 801accc:	ecb5 7a01 	vldmia	r5!, {s14}
 801acd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801acd4:	3001      	adds	r0, #1
 801acd6:	4550      	cmp	r0, sl
 801acd8:	dc01      	bgt.n	801acde <__kernel_rem_pio2f+0x39a>
 801acda:	4290      	cmp	r0, r2
 801acdc:	ddf4      	ble.n	801acc8 <__kernel_rem_pio2f+0x384>
 801acde:	a858      	add	r0, sp, #352	; 0x160
 801ace0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ace4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801ace8:	3b01      	subs	r3, #1
 801acea:	e731      	b.n	801ab50 <__kernel_rem_pio2f+0x20c>
 801acec:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801acee:	2b02      	cmp	r3, #2
 801acf0:	dc09      	bgt.n	801ad06 <__kernel_rem_pio2f+0x3c2>
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	dc2b      	bgt.n	801ad4e <__kernel_rem_pio2f+0x40a>
 801acf6:	d044      	beq.n	801ad82 <__kernel_rem_pio2f+0x43e>
 801acf8:	f009 0007 	and.w	r0, r9, #7
 801acfc:	b059      	add	sp, #356	; 0x164
 801acfe:	ecbd 8b04 	vpop	{d8-d9}
 801ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad06:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ad08:	2b03      	cmp	r3, #3
 801ad0a:	d1f5      	bne.n	801acf8 <__kernel_rem_pio2f+0x3b4>
 801ad0c:	aa30      	add	r2, sp, #192	; 0xc0
 801ad0e:	1f0b      	subs	r3, r1, #4
 801ad10:	4413      	add	r3, r2
 801ad12:	461a      	mov	r2, r3
 801ad14:	4620      	mov	r0, r4
 801ad16:	2800      	cmp	r0, #0
 801ad18:	f1a2 0204 	sub.w	r2, r2, #4
 801ad1c:	dc52      	bgt.n	801adc4 <__kernel_rem_pio2f+0x480>
 801ad1e:	4622      	mov	r2, r4
 801ad20:	2a01      	cmp	r2, #1
 801ad22:	f1a3 0304 	sub.w	r3, r3, #4
 801ad26:	dc5d      	bgt.n	801ade4 <__kernel_rem_pio2f+0x4a0>
 801ad28:	ab30      	add	r3, sp, #192	; 0xc0
 801ad2a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801ad2e:	440b      	add	r3, r1
 801ad30:	2c01      	cmp	r4, #1
 801ad32:	dc67      	bgt.n	801ae04 <__kernel_rem_pio2f+0x4c0>
 801ad34:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ad38:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ad3c:	2f00      	cmp	r7, #0
 801ad3e:	d167      	bne.n	801ae10 <__kernel_rem_pio2f+0x4cc>
 801ad40:	edc8 6a00 	vstr	s13, [r8]
 801ad44:	ed88 7a01 	vstr	s14, [r8, #4]
 801ad48:	edc8 7a02 	vstr	s15, [r8, #8]
 801ad4c:	e7d4      	b.n	801acf8 <__kernel_rem_pio2f+0x3b4>
 801ad4e:	ab30      	add	r3, sp, #192	; 0xc0
 801ad50:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801ad54:	440b      	add	r3, r1
 801ad56:	4622      	mov	r2, r4
 801ad58:	2a00      	cmp	r2, #0
 801ad5a:	da24      	bge.n	801ada6 <__kernel_rem_pio2f+0x462>
 801ad5c:	b34f      	cbz	r7, 801adb2 <__kernel_rem_pio2f+0x46e>
 801ad5e:	eef1 7a47 	vneg.f32	s15, s14
 801ad62:	edc8 7a00 	vstr	s15, [r8]
 801ad66:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ad6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad6e:	aa31      	add	r2, sp, #196	; 0xc4
 801ad70:	2301      	movs	r3, #1
 801ad72:	429c      	cmp	r4, r3
 801ad74:	da20      	bge.n	801adb8 <__kernel_rem_pio2f+0x474>
 801ad76:	b10f      	cbz	r7, 801ad7c <__kernel_rem_pio2f+0x438>
 801ad78:	eef1 7a67 	vneg.f32	s15, s15
 801ad7c:	edc8 7a01 	vstr	s15, [r8, #4]
 801ad80:	e7ba      	b.n	801acf8 <__kernel_rem_pio2f+0x3b4>
 801ad82:	ab30      	add	r3, sp, #192	; 0xc0
 801ad84:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801ac44 <__kernel_rem_pio2f+0x300>
 801ad88:	440b      	add	r3, r1
 801ad8a:	2c00      	cmp	r4, #0
 801ad8c:	da05      	bge.n	801ad9a <__kernel_rem_pio2f+0x456>
 801ad8e:	b10f      	cbz	r7, 801ad94 <__kernel_rem_pio2f+0x450>
 801ad90:	eef1 7a67 	vneg.f32	s15, s15
 801ad94:	edc8 7a00 	vstr	s15, [r8]
 801ad98:	e7ae      	b.n	801acf8 <__kernel_rem_pio2f+0x3b4>
 801ad9a:	ed33 7a01 	vldmdb	r3!, {s14}
 801ad9e:	3c01      	subs	r4, #1
 801ada0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ada4:	e7f1      	b.n	801ad8a <__kernel_rem_pio2f+0x446>
 801ada6:	ed73 7a01 	vldmdb	r3!, {s15}
 801adaa:	3a01      	subs	r2, #1
 801adac:	ee37 7a27 	vadd.f32	s14, s14, s15
 801adb0:	e7d2      	b.n	801ad58 <__kernel_rem_pio2f+0x414>
 801adb2:	eef0 7a47 	vmov.f32	s15, s14
 801adb6:	e7d4      	b.n	801ad62 <__kernel_rem_pio2f+0x41e>
 801adb8:	ecb2 7a01 	vldmia	r2!, {s14}
 801adbc:	3301      	adds	r3, #1
 801adbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801adc2:	e7d6      	b.n	801ad72 <__kernel_rem_pio2f+0x42e>
 801adc4:	edd2 7a00 	vldr	s15, [r2]
 801adc8:	edd2 6a01 	vldr	s13, [r2, #4]
 801adcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801add0:	3801      	subs	r0, #1
 801add2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801add6:	ed82 7a00 	vstr	s14, [r2]
 801adda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adde:	edc2 7a01 	vstr	s15, [r2, #4]
 801ade2:	e798      	b.n	801ad16 <__kernel_rem_pio2f+0x3d2>
 801ade4:	edd3 7a00 	vldr	s15, [r3]
 801ade8:	edd3 6a01 	vldr	s13, [r3, #4]
 801adec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801adf0:	3a01      	subs	r2, #1
 801adf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801adf6:	ed83 7a00 	vstr	s14, [r3]
 801adfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adfe:	edc3 7a01 	vstr	s15, [r3, #4]
 801ae02:	e78d      	b.n	801ad20 <__kernel_rem_pio2f+0x3dc>
 801ae04:	ed33 7a01 	vldmdb	r3!, {s14}
 801ae08:	3c01      	subs	r4, #1
 801ae0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ae0e:	e78f      	b.n	801ad30 <__kernel_rem_pio2f+0x3ec>
 801ae10:	eef1 6a66 	vneg.f32	s13, s13
 801ae14:	eeb1 7a47 	vneg.f32	s14, s14
 801ae18:	edc8 6a00 	vstr	s13, [r8]
 801ae1c:	ed88 7a01 	vstr	s14, [r8, #4]
 801ae20:	eef1 7a67 	vneg.f32	s15, s15
 801ae24:	e790      	b.n	801ad48 <__kernel_rem_pio2f+0x404>
 801ae26:	bf00      	nop

0801ae28 <floor>:
 801ae28:	ee10 1a90 	vmov	r1, s1
 801ae2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ae30:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801ae34:	2b13      	cmp	r3, #19
 801ae36:	b530      	push	{r4, r5, lr}
 801ae38:	ee10 0a10 	vmov	r0, s0
 801ae3c:	ee10 5a10 	vmov	r5, s0
 801ae40:	dc31      	bgt.n	801aea6 <floor+0x7e>
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	da15      	bge.n	801ae72 <floor+0x4a>
 801ae46:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801af08 <floor+0xe0>
 801ae4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ae4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae56:	dd07      	ble.n	801ae68 <floor+0x40>
 801ae58:	2900      	cmp	r1, #0
 801ae5a:	da4e      	bge.n	801aefa <floor+0xd2>
 801ae5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ae60:	4308      	orrs	r0, r1
 801ae62:	d04d      	beq.n	801af00 <floor+0xd8>
 801ae64:	492a      	ldr	r1, [pc, #168]	; (801af10 <floor+0xe8>)
 801ae66:	2000      	movs	r0, #0
 801ae68:	460b      	mov	r3, r1
 801ae6a:	4602      	mov	r2, r0
 801ae6c:	ec43 2b10 	vmov	d0, r2, r3
 801ae70:	e020      	b.n	801aeb4 <floor+0x8c>
 801ae72:	4a28      	ldr	r2, [pc, #160]	; (801af14 <floor+0xec>)
 801ae74:	411a      	asrs	r2, r3
 801ae76:	ea01 0402 	and.w	r4, r1, r2
 801ae7a:	4304      	orrs	r4, r0
 801ae7c:	d01a      	beq.n	801aeb4 <floor+0x8c>
 801ae7e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801af08 <floor+0xe0>
 801ae82:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ae86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae8e:	ddeb      	ble.n	801ae68 <floor+0x40>
 801ae90:	2900      	cmp	r1, #0
 801ae92:	bfbe      	ittt	lt
 801ae94:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801ae98:	fa40 f303 	asrlt.w	r3, r0, r3
 801ae9c:	18c9      	addlt	r1, r1, r3
 801ae9e:	ea21 0102 	bic.w	r1, r1, r2
 801aea2:	2000      	movs	r0, #0
 801aea4:	e7e0      	b.n	801ae68 <floor+0x40>
 801aea6:	2b33      	cmp	r3, #51	; 0x33
 801aea8:	dd05      	ble.n	801aeb6 <floor+0x8e>
 801aeaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aeae:	d101      	bne.n	801aeb4 <floor+0x8c>
 801aeb0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801aeb4:	bd30      	pop	{r4, r5, pc}
 801aeb6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801aeba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801aebe:	40e2      	lsrs	r2, r4
 801aec0:	4210      	tst	r0, r2
 801aec2:	d0f7      	beq.n	801aeb4 <floor+0x8c>
 801aec4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801af08 <floor+0xe0>
 801aec8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801aecc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aed4:	ddc8      	ble.n	801ae68 <floor+0x40>
 801aed6:	2900      	cmp	r1, #0
 801aed8:	da02      	bge.n	801aee0 <floor+0xb8>
 801aeda:	2b14      	cmp	r3, #20
 801aedc:	d103      	bne.n	801aee6 <floor+0xbe>
 801aede:	3101      	adds	r1, #1
 801aee0:	ea20 0002 	bic.w	r0, r0, r2
 801aee4:	e7c0      	b.n	801ae68 <floor+0x40>
 801aee6:	2401      	movs	r4, #1
 801aee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801aeec:	fa04 f303 	lsl.w	r3, r4, r3
 801aef0:	4418      	add	r0, r3
 801aef2:	4285      	cmp	r5, r0
 801aef4:	bf88      	it	hi
 801aef6:	1909      	addhi	r1, r1, r4
 801aef8:	e7f2      	b.n	801aee0 <floor+0xb8>
 801aefa:	2000      	movs	r0, #0
 801aefc:	4601      	mov	r1, r0
 801aefe:	e7b3      	b.n	801ae68 <floor+0x40>
 801af00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801af04:	e7b0      	b.n	801ae68 <floor+0x40>
 801af06:	bf00      	nop
 801af08:	8800759c 	.word	0x8800759c
 801af0c:	7e37e43c 	.word	0x7e37e43c
 801af10:	bff00000 	.word	0xbff00000
 801af14:	000fffff 	.word	0x000fffff

0801af18 <floorf>:
 801af18:	ee10 3a10 	vmov	r3, s0
 801af1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801af20:	3a7f      	subs	r2, #127	; 0x7f
 801af22:	2a16      	cmp	r2, #22
 801af24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801af28:	dc2a      	bgt.n	801af80 <floorf+0x68>
 801af2a:	2a00      	cmp	r2, #0
 801af2c:	da11      	bge.n	801af52 <floorf+0x3a>
 801af2e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801af90 <floorf+0x78>
 801af32:	ee30 0a27 	vadd.f32	s0, s0, s15
 801af36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801af3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af3e:	dd05      	ble.n	801af4c <floorf+0x34>
 801af40:	2b00      	cmp	r3, #0
 801af42:	da23      	bge.n	801af8c <floorf+0x74>
 801af44:	4a13      	ldr	r2, [pc, #76]	; (801af94 <floorf+0x7c>)
 801af46:	2900      	cmp	r1, #0
 801af48:	bf18      	it	ne
 801af4a:	4613      	movne	r3, r2
 801af4c:	ee00 3a10 	vmov	s0, r3
 801af50:	4770      	bx	lr
 801af52:	4911      	ldr	r1, [pc, #68]	; (801af98 <floorf+0x80>)
 801af54:	4111      	asrs	r1, r2
 801af56:	420b      	tst	r3, r1
 801af58:	d0fa      	beq.n	801af50 <floorf+0x38>
 801af5a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801af90 <floorf+0x78>
 801af5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801af62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af6a:	ddef      	ble.n	801af4c <floorf+0x34>
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	bfbe      	ittt	lt
 801af70:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801af74:	fa40 f202 	asrlt.w	r2, r0, r2
 801af78:	189b      	addlt	r3, r3, r2
 801af7a:	ea23 0301 	bic.w	r3, r3, r1
 801af7e:	e7e5      	b.n	801af4c <floorf+0x34>
 801af80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801af84:	d3e4      	bcc.n	801af50 <floorf+0x38>
 801af86:	ee30 0a00 	vadd.f32	s0, s0, s0
 801af8a:	4770      	bx	lr
 801af8c:	2300      	movs	r3, #0
 801af8e:	e7dd      	b.n	801af4c <floorf+0x34>
 801af90:	7149f2ca 	.word	0x7149f2ca
 801af94:	bf800000 	.word	0xbf800000
 801af98:	007fffff 	.word	0x007fffff

0801af9c <scalbnf>:
 801af9c:	ee10 3a10 	vmov	r3, s0
 801afa0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801afa4:	d02a      	beq.n	801affc <scalbnf+0x60>
 801afa6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801afaa:	d302      	bcc.n	801afb2 <scalbnf+0x16>
 801afac:	ee30 0a00 	vadd.f32	s0, s0, s0
 801afb0:	4770      	bx	lr
 801afb2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801afb6:	d122      	bne.n	801affe <scalbnf+0x62>
 801afb8:	4b23      	ldr	r3, [pc, #140]	; (801b048 <scalbnf+0xac>)
 801afba:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b04c <scalbnf+0xb0>
 801afbe:	4298      	cmp	r0, r3
 801afc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801afc4:	db16      	blt.n	801aff4 <scalbnf+0x58>
 801afc6:	ee10 3a10 	vmov	r3, s0
 801afca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801afce:	3a19      	subs	r2, #25
 801afd0:	f24c 3150 	movw	r1, #50000	; 0xc350
 801afd4:	4288      	cmp	r0, r1
 801afd6:	dd14      	ble.n	801b002 <scalbnf+0x66>
 801afd8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801b050 <scalbnf+0xb4>
 801afdc:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801b054 <scalbnf+0xb8>
 801afe0:	ee10 3a10 	vmov	r3, s0
 801afe4:	eeb0 7a67 	vmov.f32	s14, s15
 801afe8:	2b00      	cmp	r3, #0
 801afea:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801afee:	ee27 0a87 	vmul.f32	s0, s15, s14
 801aff2:	4770      	bx	lr
 801aff4:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b058 <scalbnf+0xbc>
 801aff8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801affc:	4770      	bx	lr
 801affe:	0dd2      	lsrs	r2, r2, #23
 801b000:	e7e6      	b.n	801afd0 <scalbnf+0x34>
 801b002:	4410      	add	r0, r2
 801b004:	28fe      	cmp	r0, #254	; 0xfe
 801b006:	dce7      	bgt.n	801afd8 <scalbnf+0x3c>
 801b008:	2800      	cmp	r0, #0
 801b00a:	dd06      	ble.n	801b01a <scalbnf+0x7e>
 801b00c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b010:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b014:	ee00 3a10 	vmov	s0, r3
 801b018:	4770      	bx	lr
 801b01a:	f110 0f16 	cmn.w	r0, #22
 801b01e:	da09      	bge.n	801b034 <scalbnf+0x98>
 801b020:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b058 <scalbnf+0xbc>
 801b024:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b05c <scalbnf+0xc0>
 801b028:	ee10 3a10 	vmov	r3, s0
 801b02c:	eeb0 7a67 	vmov.f32	s14, s15
 801b030:	2b00      	cmp	r3, #0
 801b032:	e7da      	b.n	801afea <scalbnf+0x4e>
 801b034:	3019      	adds	r0, #25
 801b036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b03a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b03e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b060 <scalbnf+0xc4>
 801b042:	ee07 3a90 	vmov	s15, r3
 801b046:	e7d7      	b.n	801aff8 <scalbnf+0x5c>
 801b048:	ffff3cb0 	.word	0xffff3cb0
 801b04c:	4c000000 	.word	0x4c000000
 801b050:	7149f2ca 	.word	0x7149f2ca
 801b054:	f149f2ca 	.word	0xf149f2ca
 801b058:	0da24260 	.word	0x0da24260
 801b05c:	8da24260 	.word	0x8da24260
 801b060:	33000000 	.word	0x33000000

0801b064 <__errno>:
 801b064:	4b01      	ldr	r3, [pc, #4]	; (801b06c <__errno+0x8>)
 801b066:	6818      	ldr	r0, [r3, #0]
 801b068:	4770      	bx	lr
 801b06a:	bf00      	nop
 801b06c:	20000b90 	.word	0x20000b90

0801b070 <_init>:
 801b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b072:	bf00      	nop
 801b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b076:	bc08      	pop	{r3}
 801b078:	469e      	mov	lr, r3
 801b07a:	4770      	bx	lr

0801b07c <_fini>:
 801b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b07e:	bf00      	nop
 801b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b082:	bc08      	pop	{r3}
 801b084:	469e      	mov	lr, r3
 801b086:	4770      	bx	lr

0801b088 <__HAL_SAI_TxCpltCallback_veneer>:
 801b088:	f85f f000 	ldr.w	pc, [pc]	; 801b08c <__HAL_SAI_TxCpltCallback_veneer+0x4>
 801b08c:	00001541 	.word	0x00001541

0801b090 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 801b090:	f85f f000 	ldr.w	pc, [pc]	; 801b094 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801b094:	00004741 	.word	0x00004741

0801b098 <__audioInitString1_veneer>:
 801b098:	f85f f000 	ldr.w	pc, [pc]	; 801b09c <__audioInitString1_veneer+0x4>
 801b09c:	00004ec1 	.word	0x00004ec1

0801b0a0 <__HAL_SPI_RxCpltCallback_veneer>:
 801b0a0:	f85f f000 	ldr.w	pc, [pc]	; 801b0a4 <__HAL_SPI_RxCpltCallback_veneer+0x4>
 801b0a4:	00004981 	.word	0x00004981

0801b0a8 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 801b0a8:	f85f f000 	ldr.w	pc, [pc]	; 801b0ac <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801b0ac:	000048a1 	.word	0x000048a1

0801b0b0 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 801b0b0:	f85f f000 	ldr.w	pc, [pc]	; 801b0b4 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 801b0b4:	00004c21 	.word	0x00004c21

0801b0b8 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 801b0b8:	f85f f000 	ldr.w	pc, [pc]	; 801b0bc <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801b0bc:	000016a1 	.word	0x000016a1

0801b0c0 <__HAL_SAI_ErrorCallback_veneer>:
 801b0c0:	f85f f000 	ldr.w	pc, [pc]	; 801b0c4 <__HAL_SAI_ErrorCallback_veneer+0x4>
 801b0c4:	00001801 	.word	0x00001801

0801b0c8 <__HAL_SPI_TxRxCpltCallback_veneer>:
 801b0c8:	f85f f000 	ldr.w	pc, [pc]	; 801b0cc <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801b0cc:	000047c1 	.word	0x000047c1

0801b0d0 <__parsePreset_veneer>:
 801b0d0:	f85f f000 	ldr.w	pc, [pc]	; 801b0d4 <__parsePreset_veneer+0x4>
 801b0d4:	00001b81 	.word	0x00001b81

0801b0d8 <__HAL_I2C_ErrorCallback_veneer>:
 801b0d8:	f85f f000 	ldr.w	pc, [pc]	; 801b0dc <__HAL_I2C_ErrorCallback_veneer+0x4>
 801b0dc:	00004781 	.word	0x00004781

0801b0e0 <__audioInitString3_veneer>:
 801b0e0:	f85f f000 	ldr.w	pc, [pc]	; 801b0e4 <__audioInitString3_veneer+0x4>
 801b0e4:	00006061 	.word	0x00006061

0801b0e8 <__audioInitVocal_veneer>:
 801b0e8:	f85f f000 	ldr.w	pc, [pc]	; 801b0ec <__audioInitVocal_veneer+0x4>
 801b0ec:	00009aa1 	.word	0x00009aa1

0801b0f0 <__audioInitAdditive_veneer>:
 801b0f0:	f85f f000 	ldr.w	pc, [pc]	; 801b0f4 <__audioInitAdditive_veneer+0x4>
 801b0f4:	00000401 	.word	0x00000401

0801b0f8 <__randomNumber_veneer>:
 801b0f8:	f85f f000 	ldr.w	pc, [pc]	; 801b0fc <__randomNumber_veneer+0x4>
 801b0fc:	00001b21 	.word	0x00001b21

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	f8df c3f4 	ldr.w	ip, [pc, #1012]	; 7fc <audioInitAdditive+0x3fc>
     408:	f04f 5476 	mov.w	r4, #1031798784	; 0x3d800000
     40c:	4fe2      	ldr	r7, [pc, #904]	; (798 <audioInitAdditive+0x398>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	49e3      	ldr	r1, [pc, #908]	; (79c <audioInitAdditive+0x39c>)
     410:	4ae3      	ldr	r2, [pc, #908]	; (7a0 <audioInitAdditive+0x3a0>)
     412:	48e4      	ldr	r0, [pc, #912]	; (7a4 <audioInitAdditive+0x3a4>)
     414:	f101 0540 	add.w	r5, r1, #64	; 0x40
}
     418:	4be3      	ldr	r3, [pc, #908]	; (7a8 <audioInitAdditive+0x3a8>)
     41a:	4606      	mov	r6, r0
        p->curr = pickupOut;
     41c:	ed2d 8b10 	vpush	{d8-d15}
}
     420:	edd7 2a00 	vldr	s5, [r7]
     424:	b083      	sub	sp, #12
     426:	6014      	str	r4, [r2, #0]
     428:	461a      	mov	r2, r3
     42a:	ed9c 4a00 	vldr	s8, [ip]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     42e:	460c      	mov	r4, r1
     430:	eddc 4a01 	vldr	s9, [ip, #4]
     434:	ed97 3a01 	vldr	s6, [r7, #4]
     438:	edd7 3a02 	vldr	s7, [r7, #8]
     43c:	ed97 5a03 	vldr	s10, [r7, #12]
     440:	edd7 5a04 	vldr	s11, [r7, #16]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     444:	ed97 6a05 	vldr	s12, [r7, #20]
     448:	edd7 6a06 	vldr	s13, [r7, #24]
    __HAL_UNLOCK(hdma);
     44c:	ed97 7a07 	vldr	s14, [r7, #28]
  return status;
     450:	edd7 7a08 	vldr	s15, [r7, #32]
    hdma->State = HAL_DMA_STATE_READY;
     454:	ecf2 9a01 	vldmia	r2!, {s19}
    __HAL_UNLOCK(hdma);
     458:	ecf4 aa01 	vldmia	r4!, {s21}
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
     45c:	ecb6 aa01 	vldmia	r6!, {s20}
     460:	ee72 2aa9 	vadd.f32	s5, s5, s19
     464:	ed92 9a11 	vldr	s18, [r2, #68]	; 0x44
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     468:	42a5      	cmp	r5, r4
        __HAL_UNLOCK(hdma);
     46a:	edd2 8a23 	vldr	s17, [r2, #140]	; 0x8c
        hdma->State = HAL_DMA_STATE_READY;
     46e:	ee34 4a2a 	vadd.f32	s8, s8, s21
        __HAL_UNLOCK(hdma);
     472:	ed92 8a35 	vldr	s16, [r2, #212]	; 0xd4
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
     476:	ee74 4a8a 	vadd.f32	s9, s9, s20
     47a:	ed92 0a47 	vldr	s0, [r2, #284]	; 0x11c
        (void) HAL_DMA_Abort(hdma);
     47e:	ee33 3a09 	vadd.f32	s6, s6, s18
        return HAL_ERROR;
     482:	edd2 0a59 	vldr	s1, [r2, #356]	; 0x164
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     486:	ee73 3aa8 	vadd.f32	s7, s7, s17
     48a:	ed92 1a6b 	vldr	s2, [r2, #428]	; 0x1ac
     48e:	ee35 5a08 	vadd.f32	s10, s10, s16
     492:	edd2 1a7d 	vldr	s3, [r2, #500]	; 0x1f4
     496:	ee75 5a80 	vadd.f32	s11, s11, s0
     49a:	ed92 2a8f 	vldr	s4, [r2, #572]	; 0x23c
     49e:	ee36 6a20 	vadd.f32	s12, s12, s1
     4a2:	ee76 6a81 	vadd.f32	s13, s13, s2
     4a6:	ee37 7a21 	vadd.f32	s14, s14, s3
     4aa:	ee77 7a82 	vadd.f32	s15, s15, s4
     4ae:	d1d1      	bne.n	454 <audioInitAdditive+0x54>
     4b0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
     4b4:	edc7 2a00 	vstr	s5, [r7]
     4b8:	4abc      	ldr	r2, [pc, #752]	; (7ac <audioInitAdditive+0x3ac>)
     4ba:	ed8c 4a00 	vstr	s8, [ip]
     4be:	ee8a aaa2 	vdiv.f32	s20, s21, s5
     4c2:	edcc 4a01 	vstr	s9, [ip, #4]
     4c6:	ed87 3a01 	vstr	s6, [r7, #4]
     4ca:	edc7 3a02 	vstr	s7, [r7, #8]
     4ce:	ed87 5a03 	vstr	s10, [r7, #12]
     4d2:	edc7 5a04 	vstr	s11, [r7, #16]
     4d6:	eeca 9a83 	vdiv.f32	s19, s21, s6
     4da:	ed87 6a05 	vstr	s12, [r7, #20]
     4de:	edc7 6a06 	vstr	s13, [r7, #24]
     4e2:	ed87 7a07 	vstr	s14, [r7, #28]
     4e6:	edc7 7a08 	vstr	s15, [r7, #32]
     4ea:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
     4ee:	eeca 8a85 	vdiv.f32	s17, s21, s10
     4f2:	ed82 aa00 	vstr	s20, [r2]
     4f6:	ee8a 8aa5 	vdiv.f32	s16, s21, s11
     4fa:	edc2 9a01 	vstr	s19, [r2, #4]
     4fe:	ee8a 0a86 	vdiv.f32	s0, s21, s12
     502:	ed82 9a02 	vstr	s18, [r2, #8]
     506:	eeca 0aa6 	vdiv.f32	s1, s21, s13
     50a:	edc2 8a03 	vstr	s17, [r2, #12]
     50e:	ee8a 1a87 	vdiv.f32	s2, s21, s14
     512:	ed82 8a04 	vstr	s16, [r2, #16]
     516:	eeca 1aa7 	vdiv.f32	s3, s21, s15
     51a:	ed82 0a05 	vstr	s0, [r2, #20]
     51e:	ee8a 2a84 	vdiv.f32	s4, s21, s8
     522:	edc2 0a06 	vstr	s1, [r2, #24]
     526:	eeca 2aa4 	vdiv.f32	s5, s21, s9
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     52a:	ed82 1a07 	vstr	s2, [r2, #28]
  return status;
     52e:	edc2 1a08 	vstr	s3, [r2, #32]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     532:	4a9f      	ldr	r2, [pc, #636]	; (7b0 <audioInitAdditive+0x3b0>)
     534:	ed82 2a00 	vstr	s4, [r2]
     538:	edc2 2a01 	vstr	s5, [r2, #4]
     53c:	edd3 7a00 	vldr	s15, [r3]
     540:	ed91 3a00 	vldr	s6, [r1]
     544:	ee67 7a8a 	vmul.f32	s15, s15, s20
     548:	edd0 3a00 	vldr	s7, [r0]
     54c:	ee22 3a03 	vmul.f32	s6, s4, s6
     550:	ee62 3aa3 	vmul.f32	s7, s5, s7
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	ece3 7a01 	vstmia	r3!, {s15}
     558:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
     55c:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
     560:	ed93 5a35 	vldr	s10, [r3, #212]	; 0xd4
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	ee24 4a29 	vmul.f32	s8, s8, s19
     568:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
     56c:	ee64 4a89 	vmul.f32	s9, s9, s18
        __HAL_UNLOCK(hdma);
     570:	ed93 6a59 	vldr	s12, [r3, #356]	; 0x164
        hdma->State = HAL_DMA_STATE_READY;
     574:	ee25 5a28 	vmul.f32	s10, s10, s17
        return HAL_ERROR;
     578:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57c:	ee65 5a88 	vmul.f32	s11, s11, s16
     580:	ed93 7a7d 	vldr	s14, [r3, #500]	; 0x1f4
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     584:	ee26 6a00 	vmul.f32	s12, s12, s0
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     588:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
     58c:	ee66 6aa0 	vmul.f32	s13, s13, s1
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	ee27 7a01 	vmul.f32	s14, s14, s2
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     594:	eca1 3a01 	vstmia	r1!, {s6}
     598:	ee67 7aa1 	vmul.f32	s15, s15, s3
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59c:	428d      	cmp	r5, r1
     59e:	ece0 3a01 	vstmia	r0!, {s7}
     5a2:	ed83 4a11 	vstr	s8, [r3, #68]	; 0x44
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a6:	edc3 4a23 	vstr	s9, [r3, #140]	; 0x8c
     5aa:	ed83 5a35 	vstr	s10, [r3, #212]	; 0xd4
     5ae:	edc3 5a47 	vstr	s11, [r3, #284]	; 0x11c
     5b2:	ed83 6a59 	vstr	s12, [r3, #356]	; 0x164
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b6:	edc3 6a6b 	vstr	s13, [r3, #428]	; 0x1ac
     5ba:	ed83 7a7d 	vstr	s14, [r3, #500]	; 0x1f4
     5be:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
  return status;
     5c2:	d1bb      	bne.n	53c <audioInitAdditive+0x13c>
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	4b7b      	ldr	r3, [pc, #492]	; (7b4 <audioInitAdditive+0x3b4>)
     5c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     5ca:	4c7b      	ldr	r4, [pc, #492]	; (7b8 <audioInitAdditive+0x3b8>)
     5cc:	edd3 9a01 	vldr	s19, [r3, #4]

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5d0:	ed93 9a04 	vldr	s18, [r3, #16]
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
	if (i < 0) return;
     5d4:	f104 0840 	add.w	r8, r4, #64	; 0x40
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d8:	edd3 8a07 	vldr	s17, [r3, #28]
	if (i < 0) return;
     5dc:	ed93 ba00 	vldr	s22, [r3]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5e0:	ed93 6a02 	vldr	s12, [r3, #8]
	pb->buf[i++] = (BYTE)c;
     5e4:	edd3 aa03 	vldr	s21, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5e8:	ee79 4acb 	vsub.f32	s9, s19, s22
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ec:	edd3 6a05 	vldr	s13, [r3, #20]
	pb->idx = i;
     5f0:	ee36 6a69 	vsub.f32	s12, s12, s19
	pb->nchr++;
     5f4:	ed93 aa06 	vldr	s20, [r3, #24]
     5f8:	ee39 5a6a 	vsub.f32	s10, s18, s21
				while (j++ < w) putc_bfd(&pb, ' ');
     5fc:	ed93 7a08 	vldr	s14, [r3, #32]
			}
			while (*p) putc_bfd(&pb, *p++);
     600:	ee76 6ac9 	vsub.f32	s13, s13, s18
				while (j++ < w) putc_bfd(&pb, ' ');
     604:	ee78 5aca 	vsub.f32	s11, s17, s20
     608:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800 <audioInitAdditive+0x400>
     60c:	ee37 7a68 	vsub.f32	s14, s14, s17
			while (j++ < w) putc_bfd(&pb, ' ');
     610:	4f6a      	ldr	r7, [pc, #424]	; (7bc <audioInitAdditive+0x3bc>)
     612:	ee87 faa4 	vdiv.f32	s30, s15, s9
			while (*p) putc_bfd(&pb, *p++);
     616:	4e6a      	ldr	r6, [pc, #424]	; (7c0 <audioInitAdditive+0x3c0>)
     618:	ed9f ca6a 	vldr	s24, [pc, #424]	; 7c4 <audioInitAdditive+0x3c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61c:	eddf ba6a 	vldr	s23, [pc, #424]	; 7c8 <audioInitAdditive+0x3c8>
     620:	4b6a      	ldr	r3, [pc, #424]	; (7cc <audioInitAdditive+0x3cc>)
     622:	486b      	ldr	r0, [pc, #428]	; (7d0 <audioInitAdditive+0x3d0>)
     624:	eec7 ea86 	vdiv.f32	s29, s15, s12
		switch (d) {				/* Type is... */
     628:	496a      	ldr	r1, [pc, #424]	; (7d4 <audioInitAdditive+0x3d4>)
     62a:	4a6b      	ldr	r2, [pc, #428]	; (7d8 <audioInitAdditive+0x3d8>)
     62c:	4d6b      	ldr	r5, [pc, #428]	; (7dc <audioInitAdditive+0x3dc>)
     62e:	ee87 ea85 	vdiv.f32	s28, s15, s10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     632:	eec7 daa6 	vdiv.f32	s27, s15, s13
     636:	ee87 daa5 	vdiv.f32	s26, s15, s11
	if (i < 0) return;
     63a:	eec7 ca87 	vdiv.f32	s25, s15, s14
     63e:	edd3 4a12 	vldr	s9, [r3, #72]	; 0x48
	pb->buf[i++] = (BYTE)c;
     642:	3304      	adds	r3, #4
     644:	ecb4 6a01 	vldmia	r4!, {s12}
     648:	ed53 2a01 	vldr	s5, [r3, #-4]
     64c:	ed93 5a47 	vldr	s10, [r3, #284]	; 0x11c
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     650:	45a0      	cmp	r8, r4
	pb->nchr++;
     652:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
	pb->idx = i;
     656:	ee87 4aa4 	vdiv.f32	s8, s15, s9
	pb->nchr++;
     65a:	edd3 1a7d 	vldr	s3, [r3, #500]	; 0x1f4
     65e:	edd3 5a6b 	vldr	s11, [r3, #428]	; 0x1ac
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	ecb5 2a01 	vldmia	r5!, {s4}
     666:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
     66a:	eec7 4a85 	vdiv.f32	s9, s15, s10
		i = (bw == (UINT)i) ? 0 : -1;
     66e:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
     672:	ed93 3a8f 	vldr	s6, [r3, #572]	; 0x23c
     676:	ee87 5aa1 	vdiv.f32	s10, s15, s3
     67a:	ee87 1aa2 	vdiv.f32	s2, s15, s5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67e:	eec7 1a82 	vdiv.f32	s3, s15, s4
     682:	eec7 2aa3 	vdiv.f32	s5, s15, s7
	if (i < 0) return;
     686:	eec7 3aa5 	vdiv.f32	s7, s15, s11
	pb->buf[i++] = (BYTE)c;
     68a:	eec7 5a86 	vdiv.f32	s11, s15, s12
     68e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     692:	eec7 6a87 	vdiv.f32	s13, s15, s14
     696:	ee87 7a83 	vdiv.f32	s14, s15, s6
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	ee75 5ae1 	vsub.f32	s11, s11, s3
	pb->nchr++;
     69e:	ee74 fa41 	vsub.f32	s31, s8, s2
     6a2:	ee34 2ae2 	vsub.f32	s4, s9, s5
     6a6:	ee65 5a8c 	vmul.f32	s11, s11, s24
	return EOF;
     6aa:	ee35 3a63 	vsub.f32	s6, s10, s7
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ae:	ee36 6a44 	vsub.f32	s12, s12, s8
     6b2:	ee25 0aab 	vmul.f32	s0, s11, s23
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b6:	ecec 5a01 	vstmia	ip!, {s11}
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6ba:	ee76 6ae4 	vsub.f32	s13, s13, s9
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6be:	ee6f fa8f 	vmul.f32	s31, s31, s30
     6c2:	ee26 6a2e 	vmul.f32	s12, s12, s29
     6c6:	eca7 0a01 	vstmia	r7!, {s0}
		i = (bw == (UINT)i) ? 0 : -1;
     6ca:	ee22 2a0e 	vmul.f32	s4, s4, s28
     6ce:	ee37 7a45 	vsub.f32	s14, s14, s10
     6d2:	ece0 fa01 	vstmia	r0!, {s31}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	ee66 6aad 	vmul.f32	s13, s13, s27
     6da:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
     6de:	ee23 3a0d 	vmul.f32	s6, s6, s26
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	ed80 2a1f 	vstr	s4, [r0, #124]	; 0x7c
     6e6:	ee27 7a2c 	vmul.f32	s14, s14, s25
     6ea:	ee71 1ac0 	vsub.f32	s3, s3, s0
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	edc0 6a2f 	vstr	s13, [r0, #188]	; 0xbc
     6f2:	ee2b 8a2f 	vmul.f32	s16, s22, s31
     6f6:	ed80 3a3f 	vstr	s6, [r0, #252]	; 0xfc
     6fa:	ee69 0a86 	vmul.f32	s1, s19, s12
		  for (int j = 0; j < 3; j++)
		  {
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     6fe:	ed80 7a4f 	vstr	s14, [r0, #316]	; 0x13c

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     702:	ee6a fa82 	vmul.f32	s31, s21, s4
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     706:	ece6 1a01 	vstmia	r6!, {s3}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     70a:	ee69 5a26 	vmul.f32	s11, s18, s13
     70e:	eca1 8a01 	vstmia	r1!, {s16}
     712:	ee2a 6a03 	vmul.f32	s12, s20, s6
     716:	edc1 0a0f 	vstr	s1, [r1, #60]	; 0x3c
     71a:	ee68 1a87 	vmul.f32	s3, s17, s14
     71e:	edc1 fa1f 	vstr	s31, [r1, #124]	; 0x7c

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     722:	ee31 1a48 	vsub.f32	s2, s2, s16
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     726:	edc1 5a2f 	vstr	s11, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     72a:	ee34 4a60 	vsub.f32	s8, s8, s1
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     72e:	ed81 6a3f 	vstr	s12, [r1, #252]	; 0xfc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     732:	ee72 2aef 	vsub.f32	s5, s5, s31
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     736:	edc1 1a4f 	vstr	s3, [r1, #316]	; 0x13c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     73a:	ee74 4ae5 	vsub.f32	s9, s9, s11
     73e:	eca2 1a01 	vstmia	r2!, {s2}
     742:	ee73 3ac6 	vsub.f32	s7, s7, s12
     746:	ed82 4a0f 	vstr	s8, [r2, #60]	; 0x3c
     74a:	ee35 5a61 	vsub.f32	s10, s10, s3
     74e:	edc2 2a1f 	vstr	s5, [r2, #124]	; 0x7c
     752:	edc2 4a2f 	vstr	s9, [r2, #188]	; 0xbc
     756:	edc2 3a3f 	vstr	s7, [r2, #252]	; 0xfc
     75a:	ed82 5a4f 	vstr	s10, [r2, #316]	; 0x13c
	for (int i = 0; i < NUM_OVERTONES; i++)
     75e:	f47f af6e 	bne.w	63e <audioInitAdditive+0x23e>
     762:	4b1f      	ldr	r3, [pc, #124]	; (7e0 <audioInitAdditive+0x3e0>)
     764:	f04f 0b00 	mov.w	fp, #0
     768:	4f1e      	ldr	r7, [pc, #120]	; (7e4 <audioInitAdditive+0x3e4>)
     76a:	9300      	str	r3, [sp, #0]
     76c:	4b1e      	ldr	r3, [pc, #120]	; (7e8 <audioInitAdditive+0x3e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     76e:	eddf 9a1f 	vldr	s19, [pc, #124]	; 7ec <audioInitAdditive+0x3ec>
     772:	9301      	str	r3, [sp, #4]
     774:	4b19      	ldr	r3, [pc, #100]	; (7dc <audioInitAdditive+0x3dc>)
			tCycle_init(&additive[i][j], &leaf);
     776:	f8df a08c 	ldr.w	sl, [pc, #140]	; 804 <audioInitAdditive+0x404>
     77a:	f103 0940 	add.w	r9, r3, #64	; 0x40
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     77e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 808 <audioInitAdditive+0x408>
     782:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 7f0 <audioInitAdditive+0x3f0>
     786:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 7f4 <audioInitAdditive+0x3f4>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     78a:	eddf 8a1b 	vldr	s17, [pc, #108]	; 7f8 <audioInitAdditive+0x3f8>
     78e:	9e01      	ldr	r6, [sp, #4]
     790:	4d12      	ldr	r5, [pc, #72]	; (7dc <audioInitAdditive+0x3dc>)
     792:	9c00      	ldr	r4, [sp, #0]
     794:	e03a      	b.n	80c <audioInitAdditive+0x40c>
     796:	bf00      	nop
     798:	20001354 	.word	0x20001354
     79c:	200000c0 	.word	0x200000c0
     7a0:	200012c0 	.word	0x200012c0
     7a4:	20000108 	.word	0x20000108
     7a8:	200003fc 	.word	0x200003fc
     7ac:	2000128c 	.word	0x2000128c
     7b0:	20001284 	.word	0x20001284
     7b4:	200003d8 	.word	0x200003d8
     7b8:	20000078 	.word	0x20000078
     7bc:	20001144 	.word	0x20001144
     7c0:	200011c4 	.word	0x200011c4
     7c4:	3b84a9fa 	.word	0x3b84a9fa
     7c8:	42f60000 	.word	0x42f60000
     7cc:	20000150 	.word	0x20000150
     7d0:	20000e44 	.word	0x20000e44
     7d4:	20000cc4 	.word	0x20000cc4
     7d8:	20000fc4 	.word	0x20000fc4
     7dc:	20000030 	.word	0x20000030
     7e0:	20000bbc 	.word	0x20000bbc
     7e4:	20001344 	.word	0x20001344
     7e8:	20000c3c 	.word	0x20000c3c
     7ec:	447a0000 	.word	0x447a0000
     7f0:	43160000 	.word	0x43160000
     7f4:	00000000 	.word	0x00000000
     7f8:	3a83126f 	.word	0x3a83126f
     7fc:	2000134c 	.word	0x2000134c
     800:	20001184 	.word	0x20001184
     804:	20005484 	.word	0x20005484
     808:	200013a8 	.word	0x200013a8
			tCycle_init(&additive[i][j], &leaf);
     80c:	4620      	mov	r0, r4
     80e:	4651      	mov	r1, sl
     810:	f009 fd7e 	bl	a310 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     814:	ecf5 0a01 	vldmia	r5!, {s1}
     818:	eef0 1a49 	vmov.f32	s3, s18
     81c:	4653      	mov	r3, sl
     81e:	eeb0 1a48 	vmov.f32	s2, s16
     822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     826:	4630      	mov	r0, r6
     828:	ee60 0aa9 	vmul.f32	s1, s1, s19
     82c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     830:	4641      	mov	r1, r8
     832:	f009 fee9 	bl	a608 <__tADSRT_init_veneer>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     836:	eef0 0a68 	vmov.f32	s1, s17
     83a:	eeb0 0a48 	vmov.f32	s0, s16
     83e:	4651      	mov	r1, sl
     840:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     842:	3404      	adds	r4, #4
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     844:	f009 fc90 	bl	a168 <__tExpSmooth_init_veneer>
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     848:	eeb0 0a48 	vmov.f32	s0, s16
     84c:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     84e:	3604      	adds	r6, #4
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     850:	f009 fc4e 	bl	a0f0 <__tExpSmooth_setDest_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     854:	45a9      	cmp	r9, r5
     856:	d1d9      	bne.n	80c <audioInitAdditive+0x40c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     858:	9b00      	ldr	r3, [sp, #0]
     85a:	f10b 0b10 	add.w	fp, fp, #16
     85e:	3704      	adds	r7, #4
     860:	3340      	adds	r3, #64	; 0x40
     862:	f1bb 0f20 	cmp.w	fp, #32
     866:	9300      	str	r3, [sp, #0]
     868:	9b01      	ldr	r3, [sp, #4]
     86a:	f103 0340 	add.w	r3, r3, #64	; 0x40
     86e:	9301      	str	r3, [sp, #4]
     870:	d18d      	bne.n	78e <audioInitAdditive+0x38e>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     872:	b003      	add	sp, #12
     874:	ecbd 8b10 	vpop	{d8-d15}
     878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     87c:	f3af 8000 	nop.w

00000880 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     880:	4770      	bx	lr
     882:	bf00      	nop
     884:	f3af 8000 	nop.w
     888:	f3af 8000 	nop.w
     88c:	f3af 8000 	nop.w
     890:	f3af 8000 	nop.w
     894:	f3af 8000 	nop.w
     898:	f3af 8000 	nop.w
     89c:	f3af 8000 	nop.w

000008a0 <audioSwitchToAdditive>:

void __ATTR_ITCMRAM audioSwitchToAdditive()
{
     8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8a4:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8a8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 920 <audioSwitchToAdditive+0x80>
     8ac:	481d      	ldr	r0, [pc, #116]	; (924 <audioSwitchToAdditive+0x84>)
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
	for (int i = 0; i < 12; i++)
     8ae:	2400      	movs	r4, #0
     8b0:	4d1d      	ldr	r5, [pc, #116]	; (928 <audioSwitchToAdditive+0x88>)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
		knobFrozen[i] = 1;
     8b2:	2701      	movs	r7, #1
     8b4:	4e1d      	ldr	r6, [pc, #116]	; (92c <audioSwitchToAdditive+0x8c>)
     8b6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 948 <audioSwitchToAdditive+0xa8>
{
     8ba:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8be:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 930 <audioSwitchToAdditive+0x90>
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8c2:	f009 fc71 	bl	a1a8 <__tVZFilter_setFrequencyAndResonance_veneer>
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
     8c6:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8ca:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 934 <audioSwitchToAdditive+0x94>
     8ce:	481a      	ldr	r0, [pc, #104]	; (938 <audioSwitchToAdditive+0x98>)
     8d0:	f009 fc6a 	bl	a1a8 <__tVZFilter_setFrequencyAndResonance_veneer>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8d4:	4628      	mov	r0, r5
     8d6:	eeb0 0a48 	vmov.f32	s0, s16
     8da:	f009 fd7d 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     8de:	4628      	mov	r0, r5
     8e0:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
     8e4:	3504      	adds	r5, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     8e6:	f009 fcf3 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
     8ea:	f808 7004 	strb.w	r7, [r8, r4]
	for (int i = 0; i < 12; i++)
     8ee:	3401      	adds	r4, #1
     8f0:	2c0c      	cmp	r4, #12
     8f2:	d1ef      	bne.n	8d4 <audioSwitchToAdditive+0x34>
	}
	for (int i = 0; i < numStringsThisBoard; i++)
     8f4:	4e11      	ldr	r6, [pc, #68]	; (93c <audioSwitchToAdditive+0x9c>)
     8f6:	7833      	ldrb	r3, [r6, #0]
     8f8:	b16b      	cbz	r3, 916 <audioSwitchToAdditive+0x76>
     8fa:	4d11      	ldr	r5, [pc, #68]	; (940 <audioSwitchToAdditive+0xa0>)
     8fc:	2400      	movs	r4, #0
	{
		tADSRT_setSustain(&fenvelopes[i], 0.0f);
     8fe:	ed9f 8a11 	vldr	s16, [pc, #68]	; 944 <audioSwitchToAdditive+0xa4>
     902:	4628      	mov	r0, r5
     904:	eeb0 0a48 	vmov.f32	s0, s16
     908:	f009 fc02 	bl	a110 <__tADSRT_setSustain_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
     90c:	3401      	adds	r4, #1
     90e:	7833      	ldrb	r3, [r6, #0]
     910:	3504      	adds	r5, #4
     912:	42a3      	cmp	r3, r4
     914:	dcf5      	bgt.n	902 <audioSwitchToAdditive+0x62>
	}

}
     916:	ecbd 8b02 	vpop	{d8}
     91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     91e:	bf00      	nop
     920:	44dc0000 	.word	0x44dc0000
     924:	200054e4 	.word	0x200054e4
     928:	20005430 	.word	0x20005430
     92c:	20000000 	.word	0x20000000
     930:	3a83126f 	.word	0x3a83126f
     934:	42740000 	.word	0x42740000
     938:	200054e8 	.word	0x200054e8
     93c:	20000694 	.word	0x20000694
     940:	200053b4 	.word	0x200053b4
     944:	00000000 	.word	0x00000000
     948:	200053cc 	.word	0x200053cc
     94c:	f3af 8000 	nop.w
     950:	f3af 8000 	nop.w
     954:	f3af 8000 	nop.w
     958:	f3af 8000 	nop.w
     95c:	f3af 8000 	nop.w

00000960 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     964:	4ca9      	ldr	r4, [pc, #676]	; (c0c <audioTickAdditive+0x2ac>)
     966:	4daa      	ldr	r5, [pc, #680]	; (c10 <audioTickAdditive+0x2b0>)
     968:	f104 0630 	add.w	r6, r4, #48	; 0x30
     96c:	ed2d 8b10 	vpush	{d8-d15}
     970:	b087      	sub	sp, #28
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     972:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     974:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     976:	f009 fc87 	bl	a288 <__tExpSmooth_tick_veneer>
     97a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     97e:	42b4      	cmp	r4, r6
     980:	d1f7      	bne.n	972 <audioTickAdditive+0x12>
	}


	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     982:	48a4      	ldr	r0, [pc, #656]	; (c14 <audioTickAdditive+0x2b4>)
     984:	f009 fd9c 	bl	a4c0 <__tNoise_tick_veneer>
     988:	48a3      	ldr	r0, [pc, #652]	; (c18 <audioTickAdditive+0x2b8>)
     98a:	f009 fb89 	bl	a0a0 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     98e:	48a1      	ldr	r0, [pc, #644]	; (c14 <audioTickAdditive+0x2b4>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     990:	eeb0 da40 	vmov.f32	s26, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     994:	f009 fd94 	bl	a4c0 <__tNoise_tick_veneer>
     998:	48a0      	ldr	r0, [pc, #640]	; (c1c <audioTickAdditive+0x2bc>)
     99a:	f009 fb81 	bl	a0a0 <__tVZFilter_tickEfficient_veneer>
	filtNoise *= 2.0f;
	float stretch = knobScaled[0];
     99e:	4b9b      	ldr	r3, [pc, #620]	; (c0c <audioTickAdditive+0x2ac>)
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
	float oneMinusPickup = (1.0f - knobScaled[4]);
	float pickup = knobScaled[4];
	float freqWeightKnob = knobScaled[1];
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9a0:	489f      	ldr	r0, [pc, #636]	; (c20 <audioTickAdditive+0x2c0>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9a2:	eef0 8a40 	vmov.f32	s17, s0
	float stretch = knobScaled[0];
     9a6:	ed93 9a00 	vldr	s18, [r3]
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9aa:	edd3 aa04 	vldr	s21, [r3, #16]
	float freqWeightKnob = knobScaled[1];
     9ae:	ed93 aa01 	vldr	s20, [r3, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9b2:	f009 fc69 	bl	a288 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     9b6:	4b9b      	ldr	r3, [pc, #620]	; (c24 <audioTickAdditive+0x2c4>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9b8:	ed8d 0a05 	vstr	s0, [sp, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
     9bc:	781b      	ldrb	r3, [r3, #0]
     9be:	2b00      	cmp	r3, #0
     9c0:	f000 8120 	beq.w	c04 <audioTickAdditive+0x2a4>
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9c4:	ee29 9a09 	vmul.f32	s18, s18, s18
     9c8:	4b97      	ldr	r3, [pc, #604]	; (c28 <audioTickAdditive+0x2c8>)
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9ce:	eddf 7a97 	vldr	s15, [pc, #604]	; c2c <audioTickAdditive+0x2cc>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9d2:	ee3d da28 	vadd.f32	s26, s26, s17
     9d6:	9300      	str	r3, [sp, #0]
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9d8:	ee29 9a09 	vmul.f32	s18, s18, s18
     9dc:	4b94      	ldr	r3, [pc, #592]	; (c30 <audioTickAdditive+0x2d0>)
	float tempSamp = 0.0f;
     9de:	eddf 8a95 	vldr	s17, [pc, #596]	; c34 <audioTickAdditive+0x2d4>
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9e2:	ee78 ca6a 	vsub.f32	s25, s16, s21
     9e6:	9304      	str	r3, [sp, #16]
	filtNoise *= 2.0f;
     9e8:	ee3d da0d 	vadd.f32	s26, s26, s26
     9ec:	4b92      	ldr	r3, [pc, #584]	; (c38 <audioTickAdditive+0x2d8>)
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     9ee:	ee38 ca4a 	vsub.f32	s24, s16, s20
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9f2:	ee29 9a27 	vmul.f32	s18, s18, s15
	{
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
		thisTension = knobScaled[5] * thisTension;
		float tensionSpeed = (1.0f - knobScaled[6]);
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     9f6:	eddf da91 	vldr	s27, [pc, #580]	; c3c <audioTickAdditive+0x2dc>
		invGainSum[i] = 1.0f;
		if(gainSum[i] > 0.0001f)
		{
			invGainSum[i] = 1.0f / gainSum[i];
		}
		gainSum[i] = 0.0f;
     9fa:	eef0 9a68 	vmov.f32	s19, s17
     9fe:	9302      	str	r3, [sp, #8]


			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     a00:	eddf ba8f 	vldr	s23, [pc, #572]	; c40 <audioTickAdditive+0x2e0>
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a04:	2300      	movs	r3, #0
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     a06:	ed9f ba8f 	vldr	s22, [pc, #572]	; c44 <audioTickAdditive+0x2e4>
     a0a:	f8df a270 	ldr.w	sl, [pc, #624]	; c7c <audioTickAdditive+0x31c>
     a0e:	f8df b270 	ldr.w	fp, [pc, #624]	; c80 <audioTickAdditive+0x320>
     a12:	4f8d      	ldr	r7, [pc, #564]	; (c48 <audioTickAdditive+0x2e8>)
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a14:	9303      	str	r3, [sp, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
     a16:	9301      	str	r3, [sp, #4]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a18:	9d00      	ldr	r5, [sp, #0]
		float tensionSpeed = (1.0f - knobScaled[6]);
     a1a:	4c7c      	ldr	r4, [pc, #496]	; (c0c <audioTickAdditive+0x2ac>)
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a1c:	4628      	mov	r0, r5
     a1e:	f009 fc33 	bl	a288 <__tExpSmooth_tick_veneer>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a22:	edd4 7a06 	vldr	s15, [r4, #24]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a26:	eef0 fa40 	vmov.f32	s31, s0
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a2a:	ed9f 7a88 	vldr	s14, [pc, #544]	; c4c <audioTickAdditive+0x2ec>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a2e:	ee78 7a67 	vsub.f32	s15, s16, s15
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a32:	4628      	mov	r0, r5
     a34:	eeb0 0a6d 	vmov.f32	s0, s27
		thisTension = knobScaled[5] * thisTension;
     a38:	ed94 ea05 	vldr	s28, [r4, #20]
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a40:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a44:	eea7 0a87 	vfma.f32	s0, s15, s14
     a48:	f009 fcc6 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a4c:	9b04      	ldr	r3, [sp, #16]
     a4e:	9a01      	ldr	r2, [sp, #4]
     a50:	ecb3 fa01 	vldmia	r3!, {s30}
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a54:	9802      	ldr	r0, [sp, #8]
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a56:	9304      	str	r3, [sp, #16]
     a58:	4b7d      	ldr	r3, [pc, #500]	; (c50 <audioTickAdditive+0x2f0>)
     a5a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a5e:	edd2 7a00 	vldr	s15, [r2]
     a62:	eeee 7a2f 	vfma.f32	s15, s28, s31
     a66:	ee3f fa27 	vadd.f32	s30, s30, s15
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a6a:	f009 fd59 	bl	a520 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a6e:	edd4 7a02 	vldr	s15, [r4, #8]
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a72:	eeb0 7a40 	vmov.f32	s14, s0
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a76:	ee6d 7a27 	vmul.f32	s15, s26, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a7a:	eeb0 0a4f 	vmov.f32	s0, s30
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a7e:	eee7 8a27 	vfma.f32	s17, s14, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a82:	f009 fc05 	bl	a290 <__mtofTableLookup_veneer>
		if(gainSum[i] > 0.0001f)
     a86:	ecf7 7a01 	vldmia	r7!, {s15}
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a8a:	ecaa 0a01 	vstmia	sl!, {s0}
		if(gainSum[i] > 0.0001f)
     a8e:	eef4 7aed 	vcmpe.f32	s15, s27
		invGainSum[i] = 1.0f;
     a92:	ecab 8a01 	vstmia	fp!, {s16}
		if(gainSum[i] > 0.0001f)
     a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a9a:	dd03      	ble.n	aa4 <audioTickAdditive+0x144>
			invGainSum[i] = 1.0f / gainSum[i];
     a9c:	ee88 7a27 	vdiv.f32	s14, s16, s15
     aa0:	ed0b 7a01 	vstr	s14, [fp, #-4]
		gainSum[i] = 0.0f;
     aa4:	9b03      	ldr	r3, [sp, #12]
		for (int j = 0; j < NUM_OVERTONES; j++)
     aa6:	2400      	movs	r4, #0
     aa8:	4a6a      	ldr	r2, [pc, #424]	; (c54 <audioTickAdditive+0x2f4>)
		gainSum[i] = 0.0f;
     aaa:	ed47 9a01 	vstr	s19, [r7, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     aae:	18d6      	adds	r6, r2, r3
     ab0:	4a69      	ldr	r2, [pc, #420]	; (c58 <audioTickAdditive+0x2f8>)
     ab2:	18d5      	adds	r5, r2, r3
     ab4:	4a69      	ldr	r2, [pc, #420]	; (c5c <audioTickAdditive+0x2fc>)
     ab6:	eb02 0903 	add.w	r9, r2, r3
     aba:	4a69      	ldr	r2, [pc, #420]	; (c60 <audioTickAdditive+0x300>)
     abc:	eb02 0803 	add.w	r8, r2, r3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     ac0:	ee0f 4a10 	vmov	s30, r4
     ac4:	4630      	mov	r0, r6
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     ac6:	3401      	adds	r4, #1
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     ac8:	f009 fd2a 	bl	a520 <__tADSRT_tick_veneer>
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     acc:	eeb8 facf 	vcvt.f32.s32	s30, s30
     ad0:	ed5a 6a01 	vldr	s13, [sl, #-4]
     ad4:	eeb0 7a48 	vmov.f32	s14, s16
     ad8:	ee07 4a90 	vmov	s15, r4
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     adc:	eef0 0a48 	vmov.f32	s1, s16
		for (int j = 0; j < NUM_OVERTONES; j++)
     ae0:	3604      	adds	r6, #4
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     ae2:	eef8 fae7 	vcvt.f32.s32	s31, s15
     ae6:	eeaf 7a09 	vfma.f32	s14, s30, s18
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     aea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     aee:	ee6f faa6 	vmul.f32	s31, s31, s13
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     af2:	eef0 ea40 	vmov.f32	s29, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     af6:	eeb0 0a69 	vmov.f32	s0, s19
			tCycle_setFreq(&additive[i][j], tempFreq);
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     afa:	eeb0 ea6c 	vmov.f32	s28, s25
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     afe:	ee6f fa87 	vmul.f32	s31, s31, s14
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b02:	ee3b 7aef 	vsub.f32	s14, s23, s31
     b06:	eee7 0a0b 	vfma.f32	s1, s14, s22
     b0a:	f009 fb61 	bl	a1d0 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     b0e:	eeb0 0a6f 	vmov.f32	s0, s31
     b12:	4628      	mov	r0, r5
     b14:	f009 fae0 	bl	a0d8 <__tCycle_setFreq_veneer>
			float upRamp = (j * invNumOvertones);
     b18:	4b52      	ldr	r3, [pc, #328]	; (c64 <audioTickAdditive+0x304>)
			gainSum[i] += freqWeight * finalGains[i][j];
     b1a:	ed17 7a01 	vldr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b1e:	4628      	mov	r0, r5
			float upRamp = (j * invNumOvertones);
     b20:	edd3 6a00 	vldr	s13, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b24:	3504      	adds	r5, #4
			gainSum[i] += freqWeight * finalGains[i][j];
     b26:	ecb9 6a01 	vldmia	r9!, {s12}
			float upRamp = (j * invNumOvertones);
     b2a:	ee2f fa26 	vmul.f32	s30, s30, s13
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     b2e:	ecf8 5a01 	vldmia	r8!, {s11}
     b32:	eeaa eaa5 	vfma.f32	s28, s21, s11
			float downRamp = 1.0f - (j * invNumOvertones);
     b36:	ee78 fa4f 	vsub.f32	s31, s16, s30
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
     b3a:	ee6f fa8c 	vmul.f32	s31, s31, s24
     b3e:	eeea fa0f 	vfma.f32	s31, s20, s30
			gainSum[i] += freqWeight * finalGains[i][j];
     b42:	eea6 7a2f 	vfma.f32	s14, s12, s31
     b46:	ed07 7a01 	vstr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b4a:	f009 fb25 	bl	a198 <__tCycle_tick_veneer>
     b4e:	ee20 0a2e 	vmul.f32	s0, s0, s29
     b52:	ed5b 7a01 	vldr	s15, [fp, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b56:	2c10      	cmp	r4, #16
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b58:	ee60 7a27 	vmul.f32	s15, s0, s15
     b5c:	ee67 7a8e 	vmul.f32	s15, s15, s28
     b60:	eeef 8aa7 	vfma.f32	s17, s31, s15
		for (int j = 0; j < NUM_OVERTONES; j++)
     b64:	d1ac      	bne.n	ac0 <audioTickAdditive+0x160>
	for (int i = 0; i < numStringsThisBoard; i++)
     b66:	9a00      	ldr	r2, [sp, #0]
     b68:	9b01      	ldr	r3, [sp, #4]
     b6a:	3204      	adds	r2, #4
     b6c:	3301      	adds	r3, #1
     b6e:	9200      	str	r2, [sp, #0]
     b70:	9a02      	ldr	r2, [sp, #8]
     b72:	9301      	str	r3, [sp, #4]
     b74:	3204      	adds	r2, #4
     b76:	9202      	str	r2, [sp, #8]
     b78:	9a03      	ldr	r2, [sp, #12]
     b7a:	3240      	adds	r2, #64	; 0x40
     b7c:	9203      	str	r2, [sp, #12]
     b7e:	4a29      	ldr	r2, [pc, #164]	; (c24 <audioTickAdditive+0x2c4>)
     b80:	7812      	ldrb	r2, [r2, #0]
     b82:	429a      	cmp	r2, r3
     b84:	f73f af48 	bgt.w	a18 <audioTickAdditive+0xb8>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     b88:	ed9f 0a37 	vldr	s0, [pc, #220]	; c68 <audioTickAdditive+0x308>
     b8c:	ed9d 7a05 	vldr	s14, [sp, #20]
     b90:	eef0 0a40 	vmov.f32	s1, s0
     b94:	eddf 7a35 	vldr	s15, [pc, #212]	; c6c <audioTickAdditive+0x30c>
     b98:	ed9f 1a35 	vldr	s2, [pc, #212]	; c70 <audioTickAdditive+0x310>
     b9c:	eee7 0a27 	vfma.f32	s1, s14, s15
     ba0:	f009 fb16 	bl	a1d0 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     ba4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
     ba8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= 0.5f;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     bac:	4931      	ldr	r1, [pc, #196]	; (c74 <audioTickAdditive+0x314>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     bae:	4a32      	ldr	r2, [pc, #200]	; (c78 <audioTickAdditive+0x318>)
     bb0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	int volIdxInt = (int) volIdx;
     bb4:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
     bb8:	ee37 7ac0 	vsub.f32	s14, s15, s0
     bbc:	edd1 7a00 	vldr	s15, [r1]
	float alpha = volIdx-volIdxInt;
     bc0:	ee06 3a90 	vmov	s13, r3
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     bc4:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     bc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     bca:	ee67 7a86 	vmul.f32	s15, s15, s12
	float alpha = volIdx-volIdxInt;
     bce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     bd2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     bd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     bda:	ee67 7aa8 	vmul.f32	s15, s15, s17
	float alpha = volIdx-volIdxInt;
     bde:	ee30 0a66 	vsub.f32	s0, s0, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     be2:	ed92 6a00 	vldr	s12, [r2]
	float omAlpha = 1.0f - alpha;
     be6:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     bea:	edd3 6a00 	vldr	s13, [r3]
     bee:	ee20 0a06 	vmul.f32	s0, s0, s12
     bf2:	eea6 0a87 	vfma.f32	s0, s13, s14
	return tempSamp;
}
     bf6:	ee20 0a27 	vmul.f32	s0, s0, s15
     bfa:	b007      	add	sp, #28
     bfc:	ecbd 8b10 	vpop	{d8-d15}
     c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
     c04:	eddf 8a0b 	vldr	s17, [pc, #44]	; c34 <audioTickAdditive+0x2d4>
     c08:	e7be      	b.n	b88 <audioTickAdditive+0x228>
     c0a:	bf00      	nop
     c0c:	200053e0 	.word	0x200053e0
     c10:	20005430 	.word	0x20005430
     c14:	200054dc 	.word	0x200054dc
     c18:	200054e4 	.word	0x200054e4
     c1c:	200054e8 	.word	0x200054e8
     c20:	2001444c 	.word	0x2001444c
     c24:	20000694 	.word	0x20000694
     c28:	20001344 	.word	0x20001344
     c2c:	3e99999a 	.word	0x3e99999a
     c30:	2001441c 	.word	0x2001441c
     c34:	00000000 	.word	0x00000000
     c38:	200053b4 	.word	0x200053b4
     c3c:	38d1b717 	.word	0x38d1b717
     c40:	466a6000 	.word	0x466a6000
     c44:	3983126f 	.word	0x3983126f
     c48:	200012b0 	.word	0x200012b0
     c4c:	3c23d70a 	.word	0x3c23d70a
     c50:	20014414 	.word	0x20014414
     c54:	20000c3c 	.word	0x20000c3c
     c58:	20000bbc 	.word	0x20000bbc
     c5c:	20001204 	.word	0x20001204
     c60:	200012c4 	.word	0x200012c4
     c64:	200012c0 	.word	0x200012c0
     c68:	423c0000 	.word	0x423c0000
     c6c:	42a00000 	.word	0x42a00000
     c70:	42fe0000 	.word	0x42fe0000
     c74:	2000068c 	.word	0x2000068c
     c78:	200006a0 	.word	0x200006a0
     c7c:	200143cc 	.word	0x200143cc
     c80:	200012b8 	.word	0x200012b8
     c84:	f3af 8000 	nop.w
     c88:	f3af 8000 	nop.w
     c8c:	f3af 8000 	nop.w
     c90:	f3af 8000 	nop.w
     c94:	f3af 8000 	nop.w
     c98:	f3af 8000 	nop.w
     c9c:	f3af 8000 	nop.w

00000ca0 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     ca0:	4b89      	ldr	r3, [pc, #548]	; (ec8 <audioFrameAdditive+0x228>)
{
     ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     ca6:	4f89      	ldr	r7, [pc, #548]	; (ecc <audioFrameAdditive+0x22c>)
		for (int i = 0; i < numStringsThisBoard; i++)
     ca8:	f8df b27c 	ldr.w	fp, [pc, #636]	; f28 <audioFrameAdditive+0x288>
{
     cac:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     cb0:	685b      	ldr	r3, [r3, #4]
{
     cb2:	b091      	sub	sp, #68	; 0x44
	uint32_t tempCountFrame = DWT->CYCCNT;
     cb4:	930a      	str	r3, [sp, #40]	; 0x28
	if (resetStringInputs)
     cb6:	783b      	ldrb	r3, [r7, #0]
{
     cb8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (resetStringInputs)
     cba:	2b00      	cmp	r3, #0
     cbc:	f040 80b9 	bne.w	e32 <audioFrameAdditive+0x192>
	for (int i = 0; i < numStringsThisBoard; i++)
     cc0:	4b83      	ldr	r3, [pc, #524]	; (ed0 <audioFrameAdditive+0x230>)
     cc2:	9304      	str	r3, [sp, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
     cc4:	f89b 3000 	ldrb.w	r3, [fp]
	for (int i = 0; i < numStringsThisBoard; i++)
     cc8:	2b00      	cmp	r3, #0
     cca:	f000 80dc 	beq.w	e86 <audioFrameAdditive+0x1e6>
     cce:	4c81      	ldr	r4, [pc, #516]	; (ed4 <audioFrameAdditive+0x234>)
     cd0:	2500      	movs	r5, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     cd2:	ed9f 9a81 	vldr	s18, [pc, #516]	; ed8 <audioFrameAdditive+0x238>
     cd6:	eddf 8a81 	vldr	s17, [pc, #516]	; edc <audioFrameAdditive+0x23c>
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     cda:	ed9f 8a81 	vldr	s16, [pc, #516]	; ee0 <audioFrameAdditive+0x240>
     cde:	4e81      	ldr	r6, [pc, #516]	; (ee4 <audioFrameAdditive+0x244>)
     ce0:	f8df 9248 	ldr.w	r9, [pc, #584]	; f2c <audioFrameAdditive+0x28c>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     ce4:	eeb0 0a68 	vmov.f32	s0, s17
     ce8:	edd9 7a03 	vldr	s15, [r9, #12]
     cec:	46b0      	mov	r8, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     cee:	2700      	movs	r7, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     cf0:	eea7 0a89 	vfma.f32	s0, s15, s18
     cf4:	eca4 0a01 	vstmia	r4!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cf8:	e001      	b.n	cfe <audioFrameAdditive+0x5e>
			Lfloat x0 = additivePickupPos[i] * PI;
     cfa:	ed14 0a01 	vldr	s0, [r4, #-4]
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     cfe:	3701      	adds	r7, #1
     d00:	ee07 7a90 	vmov	s15, r7
     d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     d08:	ee67 7a88 	vmul.f32	s15, s15, s16
     d0c:	ee27 0a80 	vmul.f32	s0, s15, s0
     d10:	f009 fb36 	bl	a380 <__arm_sin_f32_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d14:	2f10      	cmp	r7, #16
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     d16:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     d1a:	d1ee      	bne.n	cfa <audioFrameAdditive+0x5a>
	for (int i = 0; i < numStringsThisBoard; i++)
     d1c:	3501      	adds	r5, #1
     d1e:	f89b 3000 	ldrb.w	r3, [fp]
     d22:	3640      	adds	r6, #64	; 0x40
     d24:	42ab      	cmp	r3, r5
     d26:	dcdd      	bgt.n	ce4 <audioFrameAdditive+0x44>
	if (newPluck)
     d28:	9a04      	ldr	r2, [sp, #16]
     d2a:	6812      	ldr	r2, [r2, #0]
     d2c:	2a00      	cmp	r2, #0
     d2e:	d04c      	beq.n	dca <audioFrameAdditive+0x12a>
		for (int i = 0; i < numStringsThisBoard; i++)
     d30:	2b00      	cmp	r3, #0
     d32:	d047      	beq.n	dc4 <audioFrameAdditive+0x124>
     d34:	4a6c      	ldr	r2, [pc, #432]	; (ee8 <audioFrameAdditive+0x248>)
     d36:	2600      	movs	r6, #0
     d38:	f8df a1f4 	ldr.w	sl, [pc, #500]	; f30 <audioFrameAdditive+0x290>
     d3c:	9203      	str	r2, [sp, #12]
     d3e:	4a6b      	ldr	r2, [pc, #428]	; (eec <audioFrameAdditive+0x24c>)
					thisDecay *= 2000.0f * knobScaled[10];
     d40:	ed9f ca6b 	vldr	s24, [pc, #428]	; ef0 <audioFrameAdditive+0x250>
     d44:	9209      	str	r2, [sp, #36]	; 0x24
     d46:	4a6b      	ldr	r2, [pc, #428]	; (ef4 <audioFrameAdditive+0x254>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d48:	ed9f fa6b 	vldr	s30, [pc, #428]	; ef8 <audioFrameAdditive+0x258>
     d4c:	9207      	str	r2, [sp, #28]
     d4e:	4a6b      	ldr	r2, [pc, #428]	; (efc <audioFrameAdditive+0x25c>)
     d50:	eddf fa6b 	vldr	s31, [pc, #428]	; f00 <audioFrameAdditive+0x260>
     d54:	9206      	str	r2, [sp, #24]
     d56:	4a6b      	ldr	r2, [pc, #428]	; (f04 <audioFrameAdditive+0x264>)
     d58:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
     d5c:	9205      	str	r2, [sp, #20]
     d5e:	f8cd a004 	str.w	sl, [sp, #4]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     d62:	9a01      	ldr	r2, [sp, #4]
     d64:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
     d68:	b292      	uxth	r2, r2
     d6a:	b932      	cbnz	r2, d7a <audioFrameAdditive+0xda>
     d6c:	4a66      	ldr	r2, [pc, #408]	; (f08 <audioFrameAdditive+0x268>)
     d6e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
     d72:	b292      	uxth	r2, r2
     d74:	2a00      	cmp	r2, #0
     d76:	f040 80dd 	bne.w	f34 <audioFrameAdditive+0x294>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     d7a:	9a01      	ldr	r2, [sp, #4]
     d7c:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
     d80:	b292      	uxth	r2, r2
     d82:	b132      	cbz	r2, d92 <audioFrameAdditive+0xf2>
     d84:	4a60      	ldr	r2, [pc, #384]	; (f08 <audioFrameAdditive+0x268>)
     d86:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
     d8a:	b292      	uxth	r2, r2
     d8c:	2a00      	cmp	r2, #0
     d8e:	f000 808c 	beq.w	eaa <audioFrameAdditive+0x20a>
     d92:	9c09      	ldr	r4, [sp, #36]	; 0x24
     d94:	3440      	adds	r4, #64	; 0x40
		for (int i = 0; i < numStringsThisBoard; i++)
     d96:	9a03      	ldr	r2, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
     d98:	9901      	ldr	r1, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
     d9a:	3204      	adds	r2, #4
     d9c:	9409      	str	r4, [sp, #36]	; 0x24
     d9e:	9203      	str	r2, [sp, #12]
     da0:	9a07      	ldr	r2, [sp, #28]
     da2:	3240      	adds	r2, #64	; 0x40
     da4:	9207      	str	r2, [sp, #28]
     da6:	9a06      	ldr	r2, [sp, #24]
     da8:	3204      	adds	r2, #4
     daa:	9206      	str	r2, [sp, #24]
     dac:	9a05      	ldr	r2, [sp, #20]
     dae:	3204      	adds	r2, #4
     db0:	9205      	str	r2, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
     db2:	4a55      	ldr	r2, [pc, #340]	; (f08 <audioFrameAdditive+0x268>)
     db4:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
     db8:	b292      	uxth	r2, r2
     dba:	f821 2016 	strh.w	r2, [r1, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     dbe:	3601      	adds	r6, #1
     dc0:	42b3      	cmp	r3, r6
     dc2:	dcce      	bgt.n	d62 <audioFrameAdditive+0xc2>
		newPluck = 0;
     dc4:	2300      	movs	r3, #0
     dc6:	9a04      	ldr	r2, [sp, #16]
     dc8:	6013      	str	r3, [r2, #0]
     dca:	4c50      	ldr	r4, [pc, #320]	; (f0c <audioFrameAdditive+0x26c>)
     dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     dce:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     dd2:	ed9f 8a4f 	vldr	s16, [pc, #316]	; f10 <audioFrameAdditive+0x270>
     dd6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     dda:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     dde:	f7ff fdbf 	bl	960 <audioTickAdditive>
     de2:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     de6:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     de8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     dec:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     dee:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     df2:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     df6:	d1f2      	bne.n	dde <audioFrameAdditive+0x13e>
	if (switchStrings)
     df8:	4c46      	ldr	r4, [pc, #280]	; (f14 <audioFrameAdditive+0x274>)
     dfa:	6823      	ldr	r3, [r4, #0]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d14a      	bne.n	e96 <audioFrameAdditive+0x1f6>
	switchStrings = 0;
     e00:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e02:	4845      	ldr	r0, [pc, #276]	; (f18 <audioFrameAdditive+0x278>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e04:	4b30      	ldr	r3, [pc, #192]	; (ec8 <audioFrameAdditive+0x228>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e06:	ed90 7a00 	vldr	s14, [r0]
	switchStrings = 0;
     e0a:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e0c:	980a      	ldr	r0, [sp, #40]	; 0x28
     e0e:	685b      	ldr	r3, [r3, #4]
     e10:	4942      	ldr	r1, [pc, #264]	; (f1c <audioFrameAdditive+0x27c>)
     e12:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e14:	4a42      	ldr	r2, [pc, #264]	; (f20 <audioFrameAdditive+0x280>)
     e16:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e1a:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     e20:	ee67 7a87 	vmul.f32	s15, s15, s14
     e24:	edc2 7a00 	vstr	s15, [r2]
}
     e28:	b011      	add	sp, #68	; 0x44
     e2a:	ecbd 8b10 	vpop	{d8-d15}
     e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     e32:	f89b 3000 	ldrb.w	r3, [fp]
     e36:	b393      	cbz	r3, e9e <audioFrameAdditive+0x1fe>
     e38:	2500      	movs	r5, #0
     e3a:	4e2b      	ldr	r6, [pc, #172]	; (ee8 <audioFrameAdditive+0x248>)
     e3c:	4c39      	ldr	r4, [pc, #228]	; (f24 <audioFrameAdditive+0x284>)
     e3e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; f30 <audioFrameAdditive+0x290>
			previousStringInputs[i] = 0;
     e42:	46a8      	mov	r8, r5
     e44:	f1a4 0940 	sub.w	r9, r4, #64	; 0x40
				tADSRT_clear(&additiveEnv[i][j]);
     e48:	4648      	mov	r0, r9
			for (int j = 0; j < NUM_OVERTONES; j++)
     e4a:	f109 0904 	add.w	r9, r9, #4
				tADSRT_clear(&additiveEnv[i][j]);
     e4e:	f009 fbd3 	bl	a5f8 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     e52:	45a1      	cmp	r9, r4
     e54:	d1f8      	bne.n	e48 <audioFrameAdditive+0x1a8>
			tADSRT_clear(&fenvelopes[i]);
     e56:	4630      	mov	r0, r6
		for (int i = 0; i < numStringsThisBoard; i++)
     e58:	f109 0440 	add.w	r4, r9, #64	; 0x40
			tADSRT_clear(&fenvelopes[i]);
     e5c:	f009 fbcc 	bl	a5f8 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     e60:	f89b 3000 	ldrb.w	r3, [fp]
			previousStringInputs[i] = 0;
     e64:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     e68:	3501      	adds	r5, #1
			previousStringInputs[i] = 0;
     e6a:	f04f 0200 	mov.w	r2, #0
		for (int i = 0; i < numStringsThisBoard; i++)
     e6e:	3604      	adds	r6, #4
     e70:	42ab      	cmp	r3, r5
     e72:	dce7      	bgt.n	e44 <audioFrameAdditive+0x1a4>
		resetStringInputs = 0;
     e74:	703a      	strb	r2, [r7, #0]
		newPluck = 1;
     e76:	4a16      	ldr	r2, [pc, #88]	; (ed0 <audioFrameAdditive+0x230>)
     e78:	4611      	mov	r1, r2
     e7a:	9204      	str	r2, [sp, #16]
     e7c:	2201      	movs	r2, #1
     e7e:	600a      	str	r2, [r1, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     e80:	2b00      	cmp	r3, #0
     e82:	f47f af24 	bne.w	cce <audioFrameAdditive+0x2e>
	if (newPluck)
     e86:	9b04      	ldr	r3, [sp, #16]
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d09d      	beq.n	dca <audioFrameAdditive+0x12a>
		newPluck = 0;
     e8e:	2300      	movs	r3, #0
     e90:	9a04      	ldr	r2, [sp, #16]
     e92:	6013      	str	r3, [r2, #0]
     e94:	e799      	b.n	dca <audioFrameAdditive+0x12a>
		switchStringModel(switchStrings);
     e96:	6820      	ldr	r0, [r4, #0]
     e98:	f000 fb02 	bl	14a0 <switchStringModel>
     e9c:	e7b0      	b.n	e00 <audioFrameAdditive+0x160>
		newPluck = 1;
     e9e:	4a0c      	ldr	r2, [pc, #48]	; (ed0 <audioFrameAdditive+0x230>)
		resetStringInputs = 0;
     ea0:	703b      	strb	r3, [r7, #0]
		newPluck = 1;
     ea2:	2301      	movs	r3, #1
     ea4:	9204      	str	r2, [sp, #16]
     ea6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     ea8:	e7ed      	b.n	e86 <audioFrameAdditive+0x1e6>
     eaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
     eac:	f105 0440 	add.w	r4, r5, #64	; 0x40
					tADSRT_off(&additiveEnv[i][j]);
     eb0:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     eb2:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     eb4:	f009 fb44 	bl	a540 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     eb8:	42ac      	cmp	r4, r5
     eba:	d1f9      	bne.n	eb0 <audioFrameAdditive+0x210>
				tADSRT_off(&fenvelopes[i]);
     ebc:	9803      	ldr	r0, [sp, #12]
     ebe:	f009 fb3f 	bl	a540 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	e766      	b.n	d96 <audioFrameAdditive+0xf6>
     ec8:	e0001000 	.word	0xe0001000
     ecc:	20005968 	.word	0x20005968
     ed0:	200054e0 	.word	0x200054e0
     ed4:	20000cbc 	.word	0x20000cbc
     ed8:	3ecccccd 	.word	0x3ecccccd
     edc:	3dcccccd 	.word	0x3dcccccd
     ee0:	40490fdb 	.word	0x40490fdb
     ee4:	200012c4 	.word	0x200012c4
     ee8:	200053b4 	.word	0x200053b4
     eec:	20000c3c 	.word	0x20000c3c
     ef0:	44fa0000 	.word	0x44fa0000
     ef4:	20001204 	.word	0x20001204
     ef8:	00000000 	.word	0x00000000
     efc:	2001441c 	.word	0x2001441c
     f00:	3ffeb852 	.word	0x3ffeb852
     f04:	200143cc 	.word	0x200143cc
     f08:	200143fc 	.word	0x200143fc
     f0c:	30000000 	.word	0x30000000
     f10:	4b000000 	.word	0x4b000000
     f14:	20014434 	.word	0x20014434
     f18:	20000684 	.word	0x20000684
     f1c:	20014438 	.word	0x20014438
     f20:	200053c4 	.word	0x200053c4
     f24:	20000c7c 	.word	0x20000c7c
     f28:	20000694 	.word	0x20000694
     f2c:	200053e0 	.word	0x200053e0
     f30:	20005550 	.word	0x20005550
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f34:	4be0      	ldr	r3, [pc, #896]	; (12b8 <audioFrameAdditive+0x618>)
     f36:	eddf 7ae1 	vldr	s15, [pc, #900]	; 12bc <audioFrameAdditive+0x61c>
     f3a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f3e:	48e0      	ldr	r0, [pc, #896]	; (12c0 <audioFrameAdditive+0x620>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f40:	b29b      	uxth	r3, r3
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f42:	eb00 0086 	add.w	r0, r0, r6, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f46:	ee0b 3a90 	vmov	s23, r3
     f4a:	eef8 baeb 	vcvt.f32.s32	s23, s23
     f4e:	ee6b baa7 	vmul.f32	s23, s23, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f52:	eeb0 0a6b 	vmov.f32	s0, s23
     f56:	f009 f9ff 	bl	a358 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     f5a:	4bda      	ldr	r3, [pc, #872]	; (12c4 <audioFrameAdditive+0x624>)
     f5c:	9c06      	ldr	r4, [sp, #24]
     f5e:	681b      	ldr	r3, [r3, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f60:	9d03      	ldr	r5, [sp, #12]
				stringOctave[i] = octave;
     f62:	6023      	str	r3, [r4, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f64:	ed9f 0ad8 	vldr	s0, [pc, #864]	; 12c8 <audioFrameAdditive+0x628>
     f68:	4628      	mov	r0, r5
     f6a:	f009 f8b1 	bl	a0d0 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     f6e:	eeb0 0a6b 	vmov.f32	s0, s23
     f72:	4628      	mov	r0, r5
     f74:	f009 fa2c 	bl	a3d0 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f78:	4bd4      	ldr	r3, [pc, #848]	; (12cc <audioFrameAdditive+0x62c>)
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f7a:	00b2      	lsls	r2, r6, #2
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f7c:	edd4 7a00 	vldr	s15, [r4]
     f80:	4413      	add	r3, r2
     f82:	ed93 0a00 	vldr	s0, [r3]
     f86:	ee30 0a27 	vadd.f32	s0, s0, s15
     f8a:	f009 f981 	bl	a290 <__mtofTableLookup_veneer>
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     f92:	ed99 6a0b 	vldr	s12, [r9, #44]	; 0x2c
     f96:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
     f9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f9e:	9b05      	ldr	r3, [sp, #20]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fa0:	ee37 7a46 	vsub.f32	s14, s14, s12
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     fa4:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     fa8:	4bc9      	ldr	r3, [pc, #804]	; (12d0 <audioFrameAdditive+0x630>)
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     faa:	eee7 7a26 	vfma.f32	s15, s14, s13
				int thisString = i + firstString;
     fae:	681b      	ldr	r3, [r3, #0]
     fb0:	4433      	add	r3, r6
				if (thisString < 6)
     fb2:	2b05      	cmp	r3, #5
				int thisString = i + firstString;
     fb4:	930c      	str	r3, [sp, #48]	; 0x30
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fb6:	ee60 9a27 	vmul.f32	s19, s0, s15
					stringFade = (float)thisString * 0.2f;
     fba:	ee07 3a90 	vmov	s15, r3
     fbe:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
     fc2:	f340 812e 	ble.w	1222 <audioFrameAdditive+0x582>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fc6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fca:	4dc2      	ldr	r5, [pc, #776]	; (12d4 <audioFrameAdditive+0x634>)
     fcc:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     fd0:	eef0 1a4f 	vmov.f32	s3, s30
     fd4:	ed95 1a05 	vldr	s2, [r5, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fd8:	ee39 9a67 	vsub.f32	s18, s18, s15
     fdc:	eddf 7abe 	vldr	s15, [pc, #760]	; 12d8 <audioFrameAdditive+0x638>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fe0:	edd5 0a03 	vldr	s1, [r5, #12]
     fe4:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fe8:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fec:	f009 fa94 	bl	a518 <__LEAF_map_veneer>
     ff0:	eeb0 1a6f 	vmov.f32	s2, s31
     ff4:	eef0 0a40 	vmov.f32	s1, s0
     ff8:	eeb0 0a4f 	vmov.f32	s0, s30
     ffc:	f009 f8e8 	bl	a1d0 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1000:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1004:	eef0 aa40 	vmov.f32	s21, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1008:	ed95 1a02 	vldr	s2, [r5, #8]
    100c:	eef0 1a4f 	vmov.f32	s3, s30
    1010:	edd5 0a00 	vldr	s1, [r5]
    1014:	eeb0 0a69 	vmov.f32	s0, s19
    1018:	4fb0      	ldr	r7, [pc, #704]	; (12dc <audioFrameAdditive+0x63c>)
    101a:	f009 fa7d 	bl	a518 <__LEAF_map_veneer>
    101e:	eeb0 1a6f 	vmov.f32	s2, s31
    1022:	eef0 0a40 	vmov.f32	s1, s0
    1026:	4cae      	ldr	r4, [pc, #696]	; (12e0 <audioFrameAdditive+0x640>)
    1028:	eeb0 0a4f 	vmov.f32	s0, s30
    102c:	f009 f8d0 	bl	a1d0 <__LEAF_clip_veneer>
				int height1Int = floor(height1);
    1030:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
				int height2Int = floor(height2);
    1034:	eeb7 7aea 	vcvt.f64.f32	d7, s21
    1038:	49aa      	ldr	r1, [pc, #680]	; (12e4 <audioFrameAdditive+0x644>)
				float oneMinusStringFade = 1.0f - stringFade;
    103a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    103e:	960f      	str	r6, [sp, #60]	; 0x3c
				int height1Int = floor(height1);
    1040:	febb 6b46 	vrintm.f64	d6, d6
    1044:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				int height2Int = floor(height2);
    1048:	febb 7b47 	vrintm.f64	d7, d7
    104c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1050:	ee38 eac0 	vsub.f32	s28, s17, s0
    1054:	9508      	str	r5, [sp, #32]
    1056:	ee16 3a10 	vmov	r3, s12
				float height1Float = height1 - height1Int;
    105a:	eef8 7ac6 	vcvt.f32.s32	s15, s12
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    105e:	ee78 daea 	vsub.f32	s27, s17, s21
    1062:	463d      	mov	r5, r7
    1064:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    1068:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    106c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1070:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    1074:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1078:	eeb0 ba40 	vmov.f32	s22, s0
				float oneMinusStringFade = 1.0f - stringFade;
    107c:	ee38 aac9 	vsub.f32	s20, s17, s18
				float height1Float = height1 - height1Int;
    1080:	00db      	lsls	r3, r3, #3
    1082:	ee30 da67 	vsub.f32	s26, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1086:	ee3e ea27 	vadd.f32	s28, s28, s15
    108a:	f103 0bd8 	add.w	fp, r3, #216	; 0xd8
    108e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
				float height2Float = height2 - height2Int;
    1092:	ee7a cac7 	vsub.f32	s25, s21, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    1096:	eb01 0a03 	add.w	sl, r1, r3
    109a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    109e:	448b      	add	fp, r1
				float height2Float = height2 - height2Int;
    10a0:	9907      	ldr	r1, [sp, #28]
    10a2:	461a      	mov	r2, r3
    10a4:	f503 7390 	add.w	r3, r3, #288	; 0x120
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10a8:	ee7d da87 	vadd.f32	s27, s27, s14
				float height2Float = height2 - height2Int;
    10ac:	9102      	str	r1, [sp, #8]
    10ae:	461e      	mov	r6, r3
    10b0:	4617      	mov	r7, r2
    10b2:	e071      	b.n	1198 <audioFrameAdditive+0x4f8>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10b4:	edd6 7a00 	vldr	s15, [r6]
						if (height2 < 1.0f)
    10b8:	eef4 aae8 	vcmpe.f32	s21, s17
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10bc:	ed9a 8a00 	vldr	s16, [sl]
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10c0:	ee6d 7a27 	vmul.f32	s15, s26, s15
    10c4:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10c8:	ee2c 8a88 	vmul.f32	s16, s25, s16
						if (height2 < 1.0f)
    10cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10d0:	eee7 7a0e 	vfma.f32	s15, s14, s28
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10d4:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
    10d8:	eea7 8a2d 	vfma.f32	s16, s14, s27
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    10dc:	ee2a 8a08 	vmul.f32	s16, s20, s16
    10e0:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    10e4:	f100 80d6 	bmi.w	1294 <audioFrameAdditive+0x5f4>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    10e8:	9b08      	ldr	r3, [sp, #32]
    10ea:	eef0 0a69 	vmov.f32	s1, s19
    10ee:	edd4 ea50 	vldr	s29, [r4, #320]	; 0x140
    10f2:	ed93 1a08 	vldr	s2, [r3, #32]
    10f6:	ed93 0a07 	vldr	s0, [r3, #28]
    10fa:	f009 f869 	bl	a1d0 <__LEAF_clip_veneer>
    10fe:	ed95 7a50 	vldr	s14, [r5, #320]	; 0x140
    1102:	eeae 7a80 	vfma.f32	s14, s29, s0
    1106:	eec8 ea87 	vdiv.f32	s29, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    110a:	9b08      	ldr	r3, [sp, #32]
						if (height1 < 1.0f)
    110c:	eeb4 bae8 	vcmpe.f32	s22, s17
    1110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1114:	f100 80a9 	bmi.w	126a <audioFrameAdditive+0x5ca>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1118:	edd4 6a30 	vldr	s13, [r4, #192]	; 0xc0
    111c:	eef0 0a69 	vmov.f32	s1, s19
    1120:	ed93 1a05 	vldr	s2, [r3, #20]
    1124:	ed93 0a04 	vldr	s0, [r3, #16]
    1128:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    112c:	f009 f850 	bl	a1d0 <__LEAF_clip_veneer>
    1130:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1134:	ed95 7a30 	vldr	s14, [r5, #192]	; 0xc0
    1138:	eea6 7a80 	vfma.f32	s14, s13, s0
    113c:	eec8 6a87 	vdiv.f32	s13, s17, s14
					thisDecay *= 2000.0f * knobScaled[10];
    1140:	ed99 0a0a 	vldr	s0, [r9, #40]	; 0x28
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1144:	4640      	mov	r0, r8
				for (int j = 0; j < NUM_OVERTONES; j++)
    1146:	3404      	adds	r4, #4
    1148:	3504      	adds	r5, #4
    114a:	3704      	adds	r7, #4
    114c:	3604      	adds	r6, #4
    114e:	f10b 0b04 	add.w	fp, fp, #4
    1152:	f10a 0a04 	add.w	sl, sl, #4
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    1156:	ee6e 7a8a 	vmul.f32	s15, s29, s20
					thisDecay *= 2000.0f * knobScaled[10];
    115a:	ee20 0a0c 	vmul.f32	s0, s0, s24
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    115e:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1162:	ee20 0a27 	vmul.f32	s0, s0, s15
    1166:	f008 ffb3 	bl	a0d0 <__tADSRT_setDecay_veneer>
					currentRandom++;
    116a:	4a5f      	ldr	r2, [pc, #380]	; (12e8 <audioFrameAdditive+0x648>)
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    116c:	4640      	mov	r0, r8
    116e:	ee28 0a2b 	vmul.f32	s0, s16, s23
					currentRandom++;
    1172:	7813      	ldrb	r3, [r2, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1174:	f108 0804 	add.w	r8, r8, #4
					currentRandom++;
    1178:	3301      	adds	r3, #1
    117a:	7013      	strb	r3, [r2, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    117c:	f009 f928 	bl	a3d0 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
    1180:	9b02      	ldr	r3, [sp, #8]
					currentRandom++;
    1182:	4a59      	ldr	r2, [pc, #356]	; (12e8 <audioFrameAdditive+0x648>)
					finalGains[i][j] = thisGain;
    1184:	eca3 8a01 	vstmia	r3!, {s16}
    1188:	9302      	str	r3, [sp, #8]
					currentRandom++;
    118a:	7813      	ldrb	r3, [r2, #0]
    118c:	3301      	adds	r3, #1
    118e:	7013      	strb	r3, [r2, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1190:	4b56      	ldr	r3, [pc, #344]	; (12ec <audioFrameAdditive+0x64c>)
    1192:	42a3      	cmp	r3, r4
    1194:	f000 80d3 	beq.w	133e <audioFrameAdditive+0x69e>
					if (thisString < 6)
    1198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    119a:	2b05      	cmp	r3, #5
    119c:	dd8a      	ble.n	10b4 <audioFrameAdditive+0x414>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    119e:	ed96 7a00 	vldr	s14, [r6]
						if (height2 < 1.0f)
    11a2:	eef4 aae8 	vcmpe.f32	s21, s17
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11a6:	edd7 7a00 	vldr	s15, [r7]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11aa:	ed9b 8a00 	vldr	s16, [fp]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11ae:	eee7 7a0d 	vfma.f32	s15, s14, s26
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11b2:	ed9a 7a00 	vldr	s14, [sl]
						if (height2 < 1.0f)
    11b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11ba:	eea7 8a2c 	vfma.f32	s16, s14, s25
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    11be:	ee2a 8a08 	vmul.f32	s16, s20, s16
    11c2:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    11c6:	f100 80a8 	bmi.w	131a <audioFrameAdditive+0x67a>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    11ca:	9b08      	ldr	r3, [sp, #32]
    11cc:	eef0 0a69 	vmov.f32	s1, s19
    11d0:	edd4 ea30 	vldr	s29, [r4, #192]	; 0xc0
    11d4:	ed93 1a05 	vldr	s2, [r3, #20]
    11d8:	ed93 0a04 	vldr	s0, [r3, #16]
    11dc:	f008 fff8 	bl	a1d0 <__LEAF_clip_veneer>
    11e0:	ed95 7a30 	vldr	s14, [r5, #192]	; 0xc0
    11e4:	eeae 7a80 	vfma.f32	s14, s29, s0
    11e8:	eec8 ea87 	vdiv.f32	s29, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    11ec:	9b08      	ldr	r3, [sp, #32]
						if (height1 < 1.0f)
    11ee:	eeb4 bae8 	vcmpe.f32	s22, s17
    11f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11f6:	d47b      	bmi.n	12f0 <audioFrameAdditive+0x650>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    11f8:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
    11fc:	eef0 0a69 	vmov.f32	s1, s19
    1200:	ed93 1a02 	vldr	s2, [r3, #8]
    1204:	ed93 0a01 	vldr	s0, [r3, #4]
    1208:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    120c:	f008 ffe0 	bl	a1d0 <__LEAF_clip_veneer>
    1210:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1214:	ed95 7a10 	vldr	s14, [r5, #64]	; 0x40
    1218:	eea6 7a80 	vfma.f32	s14, s13, s0
    121c:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1220:	e78e      	b.n	1140 <audioFrameAdditive+0x4a0>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1222:	4d2c      	ldr	r5, [pc, #176]	; (12d4 <audioFrameAdditive+0x634>)
    1224:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    1228:	eddf 7a2b 	vldr	s15, [pc, #172]	; 12d8 <audioFrameAdditive+0x638>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    122c:	eef0 1a4f 	vmov.f32	s3, s30
    1230:	ed95 1a08 	vldr	s2, [r5, #32]
    1234:	eeb0 0a69 	vmov.f32	s0, s19
    1238:	edd5 0a06 	vldr	s1, [r5, #24]
					stringFade = (float)thisString * 0.2f;
    123c:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1240:	f009 f96a 	bl	a518 <__LEAF_map_veneer>
    1244:	eeb0 1a6f 	vmov.f32	s2, s31
    1248:	eef0 0a40 	vmov.f32	s1, s0
    124c:	eeb0 0a4f 	vmov.f32	s0, s30
    1250:	f008 ffbe 	bl	a1d0 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1254:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1258:	eef0 aa40 	vmov.f32	s21, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    125c:	ed95 1a05 	vldr	s2, [r5, #20]
    1260:	eef0 1a4f 	vmov.f32	s3, s30
    1264:	edd5 0a03 	vldr	s1, [r5, #12]
    1268:	e6d4      	b.n	1014 <audioFrameAdditive+0x374>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    126a:	edd4 6a20 	vldr	s13, [r4, #128]	; 0x80
    126e:	eef0 0a69 	vmov.f32	s1, s19
    1272:	ed93 1a04 	vldr	s2, [r3, #16]
    1276:	ed93 0a03 	vldr	s0, [r3, #12]
    127a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    127e:	f008 ffa7 	bl	a1d0 <__LEAF_clip_veneer>
    1282:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1286:	ed95 7a20 	vldr	s14, [r5, #128]	; 0x80
    128a:	eea6 7a80 	vfma.f32	s14, s13, s0
    128e:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1292:	e755      	b.n	1140 <audioFrameAdditive+0x4a0>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1294:	9b08      	ldr	r3, [sp, #32]
    1296:	eef0 0a69 	vmov.f32	s1, s19
    129a:	edd4 ea40 	vldr	s29, [r4, #256]	; 0x100
    129e:	ed93 1a07 	vldr	s2, [r3, #28]
    12a2:	ed93 0a06 	vldr	s0, [r3, #24]
    12a6:	f008 ff93 	bl	a1d0 <__LEAF_clip_veneer>
    12aa:	ed95 7a40 	vldr	s14, [r5, #256]	; 0x100
    12ae:	eeae 7a80 	vfma.f32	s14, s29, s0
    12b2:	eec8 ea87 	vdiv.f32	s29, s17, s14
    12b6:	e728      	b.n	110a <audioFrameAdditive+0x46a>
    12b8:	200143fc 	.word	0x200143fc
    12bc:	37800080 	.word	0x37800080
    12c0:	20001344 	.word	0x20001344
    12c4:	200054ec 	.word	0x200054ec
    12c8:	42480000 	.word	0x42480000
    12cc:	20014414 	.word	0x20014414
    12d0:	200053bc 	.word	0x200053bc
    12d4:	200003d8 	.word	0x200003d8
    12d8:	3e4ccccd 	.word	0x3e4ccccd
    12dc:	20000fc4 	.word	0x20000fc4
    12e0:	20000e44 	.word	0x20000e44
    12e4:	200003fc 	.word	0x200003fc
    12e8:	200144fe 	.word	0x200144fe
    12ec:	20000e84 	.word	0x20000e84
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    12f0:	edd4 6a00 	vldr	s13, [r4]
    12f4:	eef0 0a69 	vmov.f32	s1, s19
    12f8:	ed93 1a01 	vldr	s2, [r3, #4]
    12fc:	ed93 0a00 	vldr	s0, [r3]
    1300:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    1304:	f008 ff64 	bl	a1d0 <__LEAF_clip_veneer>
    1308:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    130c:	ed95 7a00 	vldr	s14, [r5]
    1310:	eea6 7a80 	vfma.f32	s14, s13, s0
    1314:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1318:	e712      	b.n	1140 <audioFrameAdditive+0x4a0>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    131a:	9b08      	ldr	r3, [sp, #32]
    131c:	eef0 0a69 	vmov.f32	s1, s19
    1320:	edd4 ea20 	vldr	s29, [r4, #128]	; 0x80
    1324:	ed93 1a04 	vldr	s2, [r3, #16]
    1328:	ed93 0a03 	vldr	s0, [r3, #12]
    132c:	f008 ff50 	bl	a1d0 <__LEAF_clip_veneer>
    1330:	ed95 7a20 	vldr	s14, [r5, #128]	; 0x80
    1334:	eeae 7a80 	vfma.f32	s14, s29, s0
    1338:	eec8 ea87 	vdiv.f32	s29, s17, s14
    133c:	e756      	b.n	11ec <audioFrameAdditive+0x54c>
    133e:	9c09      	ldr	r4, [sp, #36]	; 0x24
		for (int i = 0; i < numStringsThisBoard; i++)
    1340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1342:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1344:	3440      	adds	r4, #64	; 0x40
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	e525      	b.n	d96 <audioFrameAdditive+0xf6>
    134a:	bf00      	nop
	...

00001360 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1360:	4a3a      	ldr	r2, [pc, #232]	; (144c <updateStateFromSPIMessage+0xec>)
	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS_RX[25 + offset];



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1362:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1366:	1813      	adds	r3, r2, r0
{
    1368:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    136a:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    136c:	7e5e      	ldrb	r6, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    136e:	f001 030f 	and.w	r3, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    1372:	4c37      	ldr	r4, [pc, #220]	; (1450 <updateStateFromSPIMessage+0xf0>)
	voice = SPI_LEVERS_RX[25 + offset];
    1374:	4d37      	ldr	r5, [pc, #220]	; (1454 <updateStateFromSPIMessage+0xf4>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1376:	3b05      	subs	r3, #5
    1378:	4f37      	ldr	r7, [pc, #220]	; (1458 <updateStateFromSPIMessage+0xf8>)
    137a:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    137e:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1386:	7023      	strb	r3, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1388:	602e      	str	r6, [r5, #0]
	dualSlider = (modeBit >> 5) & 1;
    138a:	f3c1 1540 	ubfx	r5, r1, #5, #1
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    138e:	7823      	ldrb	r3, [r4, #0]
	edit = (modeBit >> 4) & 1;
    1390:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1394:	4c31      	ldr	r4, [pc, #196]	; (145c <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1396:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    139a:	6025      	str	r5, [r4, #0]
	edit = (modeBit >> 4) & 1;
    139c:	4c30      	ldr	r4, [pc, #192]	; (1460 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    139e:	edc7 7a00 	vstr	s15, [r7]
	edit = (modeBit >> 4) & 1;
    13a2:	6021      	str	r1, [r4, #0]
	if (octaveAction)
    13a4:	b14b      	cbz	r3, 13ba <updateStateFromSPIMessage+0x5a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    13a6:	4b2f      	ldr	r3, [pc, #188]	; (1464 <updateStateFromSPIMessage+0x104>)
    13a8:	781b      	ldrb	r3, [r3, #0]
    13aa:	b133      	cbz	r3, 13ba <updateStateFromSPIMessage+0x5a>
		{
			stringOctave[i] = octave;
    13ac:	492e      	ldr	r1, [pc, #184]	; (1468 <updateStateFromSPIMessage+0x108>)
		for (int i = 0; i < numStringsThisBoard; i++)
    13ae:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    13b0:	edc1 7a00 	vstr	s15, [r1]
    13b4:	bf18      	it	ne
    13b6:	edc1 7a01 	vstrne	s15, [r1, #4]
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    13ba:	4410      	add	r0, r2
    13bc:	4c2b      	ldr	r4, [pc, #172]	; (146c <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13be:	4a2c      	ldr	r2, [pc, #176]	; (1470 <updateStateFromSPIMessage+0x110>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    13c0:	7e81      	ldrb	r1, [r0, #26]
    13c2:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    13c4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1474 <updateStateFromSPIMessage+0x114>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    13c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13cc:	7f01      	ldrb	r1, [r0, #28]
    13ce:	7f40      	ldrb	r0, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    13d0:	b29b      	uxth	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    13d2:	4d29      	ldr	r5, [pc, #164]	; (1478 <updateStateFromSPIMessage+0x118>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13d4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    13d8:	4928      	ldr	r1, [pc, #160]	; (147c <updateStateFromSPIMessage+0x11c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    13da:	8023      	strh	r3, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    13dc:	8823      	ldrh	r3, [r4, #0]
    13de:	b29b      	uxth	r3, r3
    13e0:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13e4:	7813      	ldrb	r3, [r2, #0]
    13e6:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    13e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13ec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    13f0:	7813      	ldrb	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    13f2:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    13f6:	4822      	ldr	r0, [pc, #136]	; (1480 <updateStateFromSPIMessage+0x120>)
    13f8:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    13fa:	ed85 0a00 	vstr	s0, [r5]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    13fe:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    1402:	7813      	ldrb	r3, [r2, #0]
    1404:	b2db      	uxtb	r3, r3
    1406:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    140a:	429c      	cmp	r4, r3
    140c:	d01a      	beq.n	1444 <updateStateFromSPIMessage+0xe4>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    140e:	7814      	ldrb	r4, [r2, #0]
    1410:	7813      	ldrb	r3, [r2, #0]
    1412:	b2e2      	uxtb	r2, r4
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1414:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1484 <updateStateFromSPIMessage+0x124>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1418:	b2db      	uxtb	r3, r3
    141a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    141e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1422:	ed91 7a00 	vldr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1426:	edd1 7a01 	vldr	s15, [r1, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    142a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    142e:	4b16      	ldr	r3, [pc, #88]	; (1488 <updateStateFromSPIMessage+0x128>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1434:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1438:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    143c:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1440:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1444:	4811      	ldr	r0, [pc, #68]	; (148c <updateStateFromSPIMessage+0x12c>)
}
    1446:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1448:	f008 be52 	b.w	a0f0 <__tExpSmooth_setDest_veneer>
    144c:	30000800 	.word	0x30000800
    1450:	200054f0 	.word	0x200054f0
    1454:	20014440 	.word	0x20014440
    1458:	200054ec 	.word	0x200054ec
    145c:	200053ac 	.word	0x200053ac
    1460:	200053b0 	.word	0x200053b0
    1464:	20000694 	.word	0x20000694
    1468:	2001441c 	.word	0x2001441c
    146c:	20014448 	.word	0x20014448
    1470:	20014450 	.word	0x20014450
    1474:	39800801 	.word	0x39800801
    1478:	20014444 	.word	0x20014444
    147c:	20014424 	.word	0x20014424
    1480:	2001442c 	.word	0x2001442c
    1484:	3b000000 	.word	0x3b000000
    1488:	20001384 	.word	0x20001384
    148c:	2001444c 	.word	0x2001444c
    1490:	f3af 8000 	nop.w
    1494:	f3af 8000 	nop.w
    1498:	f3af 8000 	nop.w
    149c:	f3af 8000 	nop.w

000014a0 <switchStringModel>:



void __ATTR_ITCMRAM switchStringModel(int which)
{
	if (which == 1)
    14a0:	2801      	cmp	r0, #1
{
    14a2:	b510      	push	{r4, lr}
	if (which == 1)
    14a4:	d018      	beq.n	14d8 <switchStringModel+0x38>
		audioFrameFunction = audioFrameString1;
		resetStringInputs = 1;
	}


	else if (which == 2)
    14a6:	2802      	cmp	r0, #2
    14a8:	d00b      	beq.n	14c2 <switchStringModel+0x22>
		audioFrameFunction = audioFrameString2;
		resetStringInputs = 1;
	}
	presetReady = 1;
	diskBusy = 0;
	currentActivePreset = voice;
    14aa:	4b15      	ldr	r3, [pc, #84]	; (1500 <switchStringModel+0x60>)
	diskBusy = 0;
    14ac:	2100      	movs	r1, #0
    14ae:	4a15      	ldr	r2, [pc, #84]	; (1504 <switchStringModel+0x64>)
	presetReady = 1;
    14b0:	2401      	movs	r4, #1
	currentActivePreset = voice;
    14b2:	681b      	ldr	r3, [r3, #0]
	diskBusy = 0;
    14b4:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    14b6:	4814      	ldr	r0, [pc, #80]	; (1508 <switchStringModel+0x68>)
	currentActivePreset = voice;
    14b8:	b2db      	uxtb	r3, r3
    14ba:	4a14      	ldr	r2, [pc, #80]	; (150c <switchStringModel+0x6c>)
	presetReady = 1;
    14bc:	6004      	str	r4, [r0, #0]
	currentActivePreset = voice;
    14be:	7013      	strb	r3, [r2, #0]

}
    14c0:	bd10      	pop	{r4, pc}
		if (whichStringModelLoaded != String2Loaded)
    14c2:	4b13      	ldr	r3, [pc, #76]	; (1510 <switchStringModel+0x70>)
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	2b01      	cmp	r3, #1
    14c8:	d110      	bne.n	14ec <switchStringModel+0x4c>
		audioFrameFunction = audioFrameString2;
    14ca:	4912      	ldr	r1, [pc, #72]	; (1514 <switchStringModel+0x74>)
		resetStringInputs = 1;
    14cc:	2201      	movs	r2, #1
		audioFrameFunction = audioFrameString2;
    14ce:	4812      	ldr	r0, [pc, #72]	; (1518 <switchStringModel+0x78>)
		resetStringInputs = 1;
    14d0:	4b12      	ldr	r3, [pc, #72]	; (151c <switchStringModel+0x7c>)
		audioFrameFunction = audioFrameString2;
    14d2:	6008      	str	r0, [r1, #0]
		resetStringInputs = 1;
    14d4:	701a      	strb	r2, [r3, #0]
    14d6:	e7e8      	b.n	14aa <switchStringModel+0xa>
		if (whichStringModelLoaded != String1Loaded)
    14d8:	4b0d      	ldr	r3, [pc, #52]	; (1510 <switchStringModel+0x70>)
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	b95b      	cbnz	r3, 14f6 <switchStringModel+0x56>
		audioFrameFunction = audioFrameString1;
    14de:	490d      	ldr	r1, [pc, #52]	; (1514 <switchStringModel+0x74>)
		resetStringInputs = 1;
    14e0:	2201      	movs	r2, #1
		audioFrameFunction = audioFrameString1;
    14e2:	480f      	ldr	r0, [pc, #60]	; (1520 <switchStringModel+0x80>)
		resetStringInputs = 1;
    14e4:	4b0d      	ldr	r3, [pc, #52]	; (151c <switchStringModel+0x7c>)
		audioFrameFunction = audioFrameString1;
    14e6:	6008      	str	r0, [r1, #0]
		resetStringInputs = 1;
    14e8:	701a      	strb	r2, [r3, #0]
    14ea:	e7de      	b.n	14aa <switchStringModel+0xa>
			audioFreeString1();
    14ec:	f003 fd98 	bl	5020 <audioFreeString1>
			audioInitString2();
    14f0:	f004 f866 	bl	55c0 <audioInitString2>
    14f4:	e7e9      	b.n	14ca <switchStringModel+0x2a>
			audioFreeString2();
    14f6:	f004 f8c3 	bl	5680 <audioFreeString2>
			audioInitString1();
    14fa:	f003 fce1 	bl	4ec0 <audioInitString1>
    14fe:	e7ee      	b.n	14de <switchStringModel+0x3e>
    1500:	20014440 	.word	0x20014440
    1504:	20014538 	.word	0x20014538
    1508:	20005544 	.word	0x20005544
    150c:	200008ac 	.word	0x200008ac
    1510:	20014451 	.word	0x20014451
    1514:	20001380 	.word	0x20001380
    1518:	00005ea1 	.word	0x00005ea1
    151c:	20005968 	.word	0x20005968
    1520:	00005381 	.word	0x00005381
    1524:	f3af 8000 	nop.w
    1528:	f3af 8000 	nop.w
    152c:	f3af 8000 	nop.w
    1530:	f3af 8000 	nop.w
    1534:	f3af 8000 	nop.w
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <HAL_SAI_TxCpltCallback>:
}



void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    1540:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1542:	4e46      	ldr	r6, [pc, #280]	; (165c <HAL_SAI_TxCpltCallback+0x11c>)
    1544:	7833      	ldrb	r3, [r6, #0]
    1546:	b91b      	cbnz	r3, 1550 <HAL_SAI_TxCpltCallback+0x10>
    1548:	4b45      	ldr	r3, [pc, #276]	; (1660 <HAL_SAI_TxCpltCallback+0x120>)
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	2b00      	cmp	r3, #0
    154e:	d158      	bne.n	1602 <HAL_SAI_TxCpltCallback+0xc2>
	if (voice != prevVoice)
    1550:	4c44      	ldr	r4, [pc, #272]	; (1664 <HAL_SAI_TxCpltCallback+0x124>)
    1552:	4d45      	ldr	r5, [pc, #276]	; (1668 <HAL_SAI_TxCpltCallback+0x128>)
    1554:	6822      	ldr	r2, [r4, #0]
    1556:	682b      	ldr	r3, [r5, #0]
    1558:	429a      	cmp	r2, r3
    155a:	d025      	beq.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
		if (voice == 63)
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	2b3f      	cmp	r3, #63	; 0x3f
    1560:	d054      	beq.n	160c <HAL_SAI_TxCpltCallback+0xcc>
		else if (voice == 62)
    1562:	6823      	ldr	r3, [r4, #0]
    1564:	2b3e      	cmp	r3, #62	; 0x3e
    1566:	d057      	beq.n	1618 <HAL_SAI_TxCpltCallback+0xd8>
		else if (voice == 61)
    1568:	6823      	ldr	r3, [r4, #0]
    156a:	2b3d      	cmp	r3, #61	; 0x3d
    156c:	d06a      	beq.n	1644 <HAL_SAI_TxCpltCallback+0x104>
		else if (voice == 60)
    156e:	6823      	ldr	r3, [r4, #0]
    1570:	2b3c      	cmp	r3, #60	; 0x3c
    1572:	d06d      	beq.n	1650 <HAL_SAI_TxCpltCallback+0x110>
		else if (voice == 59)
    1574:	6823      	ldr	r3, [r4, #0]
    1576:	2b3b      	cmp	r3, #59	; 0x3b
			audioFrameFunction = audioFrameString3;
    1578:	4b3c      	ldr	r3, [pc, #240]	; (166c <HAL_SAI_TxCpltCallback+0x12c>)
		else if (voice == 59)
    157a:	d053      	beq.n	1624 <HAL_SAI_TxCpltCallback+0xe4>
			audioFrameFunction = audioFrameSynth;
    157c:	4a3c      	ldr	r2, [pc, #240]	; (1670 <HAL_SAI_TxCpltCallback+0x130>)
    157e:	601a      	str	r2, [r3, #0]
			audioSwitchToSynth();
    1580:	f008 fdc2 	bl	a108 <__audioSwitchToSynth_veneer>
			presetWaitingToLoad = 1;
    1584:	4b3b      	ldr	r3, [pc, #236]	; (1674 <HAL_SAI_TxCpltCallback+0x134>)
    1586:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    1588:	493b      	ldr	r1, [pc, #236]	; (1678 <HAL_SAI_TxCpltCallback+0x138>)
			presetWaitingToLoad = 1;
    158a:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    158c:	6823      	ldr	r3, [r4, #0]
    158e:	b2db      	uxtb	r3, r3
    1590:	700b      	strb	r3, [r1, #0]
			presetReady = 0;
    1592:	2100      	movs	r1, #0
    1594:	4b32      	ldr	r3, [pc, #200]	; (1660 <HAL_SAI_TxCpltCallback+0x120>)
    1596:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    1598:	682b      	ldr	r3, [r5, #0]
    159a:	2b3b      	cmp	r3, #59	; 0x3b
    159c:	dd01      	ble.n	15a2 <HAL_SAI_TxCpltCallback+0x62>
				resetStringInputs = 1;
    159e:	4b37      	ldr	r3, [pc, #220]	; (167c <HAL_SAI_TxCpltCallback+0x13c>)
    15a0:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    15a2:	4b37      	ldr	r3, [pc, #220]	; (1680 <HAL_SAI_TxCpltCallback+0x140>)
    15a4:	2200      	movs	r2, #0
    15a6:	601a      	str	r2, [r3, #0]
	prevVoice = voice;
    15a8:	6822      	ldr	r2, [r4, #0]
	{
		audioFrameFunction(HALF_BUFFER_SIZE);
	}

	voiceChangeCheck();
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    15aa:	4b36      	ldr	r3, [pc, #216]	; (1684 <HAL_SAI_TxCpltCallback+0x144>)
	prevVoice = voice;
    15ac:	602a      	str	r2, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    15ae:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15b2:	4a35      	ldr	r2, [pc, #212]	; (1688 <HAL_SAI_TxCpltCallback+0x148>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    15b4:	f103 0420 	add.w	r4, r3, #32
    15b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    15bc:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15c0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    15c4:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    15c8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15cc:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    15d0:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15d4:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    15d8:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15dc:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    15e0:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    15e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15e8:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    15ec:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    15f0:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    15f4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    15f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15fc:	f3bf 8f6f 	isb	sy
}
    1600:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    1602:	4b1a      	ldr	r3, [pc, #104]	; (166c <HAL_SAI_TxCpltCallback+0x12c>)
    1604:	2080      	movs	r0, #128	; 0x80
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	4798      	blx	r3
    160a:	e7a1      	b.n	1550 <HAL_SAI_TxCpltCallback+0x10>
			switchStrings = 1;
    160c:	4b1f      	ldr	r3, [pc, #124]	; (168c <HAL_SAI_TxCpltCallback+0x14c>)
    160e:	2201      	movs	r2, #1
    1610:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    1612:	2300      	movs	r3, #0
    1614:	7033      	strb	r3, [r6, #0]
    1616:	e7c7      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			switchStrings = 2;
    1618:	4b1c      	ldr	r3, [pc, #112]	; (168c <HAL_SAI_TxCpltCallback+0x14c>)
    161a:	2202      	movs	r2, #2
    161c:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    161e:	2300      	movs	r3, #0
    1620:	7033      	strb	r3, [r6, #0]
    1622:	e7c1      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    1624:	4a1a      	ldr	r2, [pc, #104]	; (1690 <HAL_SAI_TxCpltCallback+0x150>)
    1626:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    1628:	f004 fd5a 	bl	60e0 <audioSwitchToString3>
			currentActivePreset = voice;
    162c:	6823      	ldr	r3, [r4, #0]
    162e:	4a19      	ldr	r2, [pc, #100]	; (1694 <HAL_SAI_TxCpltCallback+0x154>)
    1630:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1632:	490b      	ldr	r1, [pc, #44]	; (1660 <HAL_SAI_TxCpltCallback+0x120>)
			currentActivePreset = voice;
    1634:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1636:	2200      	movs	r2, #0
			presetReady = 1;
    1638:	2301      	movs	r3, #1
			diskBusy = 0;
    163a:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    163c:	4a0f      	ldr	r2, [pc, #60]	; (167c <HAL_SAI_TxCpltCallback+0x13c>)
			presetReady = 1;
    163e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1640:	7013      	strb	r3, [r2, #0]
    1642:	e7b1      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameAdditive;
    1644:	4b09      	ldr	r3, [pc, #36]	; (166c <HAL_SAI_TxCpltCallback+0x12c>)
    1646:	4a14      	ldr	r2, [pc, #80]	; (1698 <HAL_SAI_TxCpltCallback+0x158>)
    1648:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    164a:	f7ff f929 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    164e:	e7ed      	b.n	162c <HAL_SAI_TxCpltCallback+0xec>
			audioFrameFunction = audioFrameVocal;
    1650:	4b06      	ldr	r3, [pc, #24]	; (166c <HAL_SAI_TxCpltCallback+0x12c>)
    1652:	4a12      	ldr	r2, [pc, #72]	; (169c <HAL_SAI_TxCpltCallback+0x15c>)
    1654:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    1656:	f008 fa53 	bl	9b00 <audioSwitchToVocal>
    165a:	e7e7      	b.n	162c <HAL_SAI_TxCpltCallback+0xec>
    165c:	20014538 	.word	0x20014538
    1660:	20005544 	.word	0x20005544
    1664:	20014440 	.word	0x20014440
    1668:	2000069c 	.word	0x2000069c
    166c:	20001380 	.word	0x20001380
    1670:	00009761 	.word	0x00009761
    1674:	2001a1b8 	.word	0x2001a1b8
    1678:	2001a1b6 	.word	0x2001a1b6
    167c:	20005968 	.word	0x20005968
    1680:	200053c0 	.word	0x200053c0
    1684:	30000000 	.word	0x30000000
    1688:	e000ed00 	.word	0xe000ed00
    168c:	20014434 	.word	0x20014434
    1690:	00006341 	.word	0x00006341
    1694:	200008ac 	.word	0x200008ac
    1698:	00000ca1 	.word	0x00000ca1
    169c:	00009cc1 	.word	0x00009cc1

000016a0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    16a0:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    16a2:	4e46      	ldr	r6, [pc, #280]	; (17bc <HAL_SAI_TxHalfCpltCallback+0x11c>)
    16a4:	7830      	ldrb	r0, [r6, #0]
    16a6:	b918      	cbnz	r0, 16b0 <HAL_SAI_TxHalfCpltCallback+0x10>
    16a8:	4b45      	ldr	r3, [pc, #276]	; (17c0 <HAL_SAI_TxHalfCpltCallback+0x120>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	2b00      	cmp	r3, #0
    16ae:	d158      	bne.n	1762 <HAL_SAI_TxHalfCpltCallback+0xc2>
	if (voice != prevVoice)
    16b0:	4c44      	ldr	r4, [pc, #272]	; (17c4 <HAL_SAI_TxHalfCpltCallback+0x124>)
    16b2:	4d45      	ldr	r5, [pc, #276]	; (17c8 <HAL_SAI_TxHalfCpltCallback+0x128>)
    16b4:	6822      	ldr	r2, [r4, #0]
    16b6:	682b      	ldr	r3, [r5, #0]
    16b8:	429a      	cmp	r2, r3
    16ba:	d025      	beq.n	1708 <HAL_SAI_TxHalfCpltCallback+0x68>
		if (voice == 63)
    16bc:	6823      	ldr	r3, [r4, #0]
    16be:	2b3f      	cmp	r3, #63	; 0x3f
    16c0:	d053      	beq.n	176a <HAL_SAI_TxHalfCpltCallback+0xca>
		else if (voice == 62)
    16c2:	6823      	ldr	r3, [r4, #0]
    16c4:	2b3e      	cmp	r3, #62	; 0x3e
    16c6:	d056      	beq.n	1776 <HAL_SAI_TxHalfCpltCallback+0xd6>
		else if (voice == 61)
    16c8:	6823      	ldr	r3, [r4, #0]
    16ca:	2b3d      	cmp	r3, #61	; 0x3d
    16cc:	d069      	beq.n	17a2 <HAL_SAI_TxHalfCpltCallback+0x102>
		else if (voice == 60)
    16ce:	6823      	ldr	r3, [r4, #0]
    16d0:	2b3c      	cmp	r3, #60	; 0x3c
    16d2:	d06c      	beq.n	17ae <HAL_SAI_TxHalfCpltCallback+0x10e>
		else if (voice == 59)
    16d4:	6823      	ldr	r3, [r4, #0]
    16d6:	2b3b      	cmp	r3, #59	; 0x3b
			audioFrameFunction = audioFrameString3;
    16d8:	4b3c      	ldr	r3, [pc, #240]	; (17cc <HAL_SAI_TxHalfCpltCallback+0x12c>)
		else if (voice == 59)
    16da:	d052      	beq.n	1782 <HAL_SAI_TxHalfCpltCallback+0xe2>
			audioFrameFunction = audioFrameSynth;
    16dc:	4a3c      	ldr	r2, [pc, #240]	; (17d0 <HAL_SAI_TxHalfCpltCallback+0x130>)
    16de:	601a      	str	r2, [r3, #0]
			audioSwitchToSynth();
    16e0:	f008 fd12 	bl	a108 <__audioSwitchToSynth_veneer>
			presetWaitingToLoad = 1;
    16e4:	4b3b      	ldr	r3, [pc, #236]	; (17d4 <HAL_SAI_TxHalfCpltCallback+0x134>)
    16e6:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    16e8:	493b      	ldr	r1, [pc, #236]	; (17d8 <HAL_SAI_TxHalfCpltCallback+0x138>)
			presetWaitingToLoad = 1;
    16ea:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    16ec:	6823      	ldr	r3, [r4, #0]
    16ee:	b2db      	uxtb	r3, r3
    16f0:	700b      	strb	r3, [r1, #0]
			presetReady = 0;
    16f2:	2100      	movs	r1, #0
    16f4:	4b32      	ldr	r3, [pc, #200]	; (17c0 <HAL_SAI_TxHalfCpltCallback+0x120>)
    16f6:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    16f8:	682b      	ldr	r3, [r5, #0]
    16fa:	2b3b      	cmp	r3, #59	; 0x3b
    16fc:	dd01      	ble.n	1702 <HAL_SAI_TxHalfCpltCallback+0x62>
				resetStringInputs = 1;
    16fe:	4b37      	ldr	r3, [pc, #220]	; (17dc <HAL_SAI_TxHalfCpltCallback+0x13c>)
    1700:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    1702:	4b37      	ldr	r3, [pc, #220]	; (17e0 <HAL_SAI_TxHalfCpltCallback+0x140>)
    1704:	2200      	movs	r2, #0
    1706:	601a      	str	r2, [r3, #0]
	prevVoice = voice;
    1708:	6822      	ldr	r2, [r4, #0]
	{
		audioFrameFunction(0);
	}
	voiceChangeCheck();
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    170a:	4b36      	ldr	r3, [pc, #216]	; (17e4 <HAL_SAI_TxHalfCpltCallback+0x144>)
	prevVoice = voice;
    170c:	602a      	str	r2, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    170e:	f3bf 8f4f 	dsb	sy
    1712:	4a35      	ldr	r2, [pc, #212]	; (17e8 <HAL_SAI_TxHalfCpltCallback+0x148>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1714:	f103 0420 	add.w	r4, r3, #32
    1718:	f103 0140 	add.w	r1, r3, #64	; 0x40
    171c:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1720:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1724:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1728:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    172c:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1730:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1734:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1738:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    173c:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1740:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    1744:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1748:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    174c:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    1750:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    1754:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    175c:	f3bf 8f6f 	isb	sy
}
    1760:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(0);
    1762:	4b1a      	ldr	r3, [pc, #104]	; (17cc <HAL_SAI_TxHalfCpltCallback+0x12c>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	4798      	blx	r3
    1768:	e7a2      	b.n	16b0 <HAL_SAI_TxHalfCpltCallback+0x10>
			switchStrings = 1;
    176a:	4b20      	ldr	r3, [pc, #128]	; (17ec <HAL_SAI_TxHalfCpltCallback+0x14c>)
    176c:	2201      	movs	r2, #1
    176e:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    1770:	2300      	movs	r3, #0
    1772:	7033      	strb	r3, [r6, #0]
    1774:	e7c8      	b.n	1708 <HAL_SAI_TxHalfCpltCallback+0x68>
			switchStrings = 2;
    1776:	4b1d      	ldr	r3, [pc, #116]	; (17ec <HAL_SAI_TxHalfCpltCallback+0x14c>)
    1778:	2202      	movs	r2, #2
    177a:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    177c:	2300      	movs	r3, #0
    177e:	7033      	strb	r3, [r6, #0]
    1780:	e7c2      	b.n	1708 <HAL_SAI_TxHalfCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    1782:	4a1b      	ldr	r2, [pc, #108]	; (17f0 <HAL_SAI_TxHalfCpltCallback+0x150>)
    1784:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    1786:	f004 fcab 	bl	60e0 <audioSwitchToString3>
			currentActivePreset = voice;
    178a:	6823      	ldr	r3, [r4, #0]
    178c:	4a19      	ldr	r2, [pc, #100]	; (17f4 <HAL_SAI_TxHalfCpltCallback+0x154>)
    178e:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1790:	490b      	ldr	r1, [pc, #44]	; (17c0 <HAL_SAI_TxHalfCpltCallback+0x120>)
			currentActivePreset = voice;
    1792:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1794:	2200      	movs	r2, #0
			presetReady = 1;
    1796:	2301      	movs	r3, #1
			diskBusy = 0;
    1798:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    179a:	4a10      	ldr	r2, [pc, #64]	; (17dc <HAL_SAI_TxHalfCpltCallback+0x13c>)
			presetReady = 1;
    179c:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    179e:	7013      	strb	r3, [r2, #0]
    17a0:	e7b2      	b.n	1708 <HAL_SAI_TxHalfCpltCallback+0x68>
			audioFrameFunction = audioFrameAdditive;
    17a2:	4b0a      	ldr	r3, [pc, #40]	; (17cc <HAL_SAI_TxHalfCpltCallback+0x12c>)
    17a4:	4a14      	ldr	r2, [pc, #80]	; (17f8 <HAL_SAI_TxHalfCpltCallback+0x158>)
    17a6:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    17a8:	f7ff f87a 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    17ac:	e7ed      	b.n	178a <HAL_SAI_TxHalfCpltCallback+0xea>
			audioFrameFunction = audioFrameVocal;
    17ae:	4b07      	ldr	r3, [pc, #28]	; (17cc <HAL_SAI_TxHalfCpltCallback+0x12c>)
    17b0:	4a12      	ldr	r2, [pc, #72]	; (17fc <HAL_SAI_TxHalfCpltCallback+0x15c>)
    17b2:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    17b4:	f008 f9a4 	bl	9b00 <audioSwitchToVocal>
    17b8:	e7e7      	b.n	178a <HAL_SAI_TxHalfCpltCallback+0xea>
    17ba:	bf00      	nop
    17bc:	20014538 	.word	0x20014538
    17c0:	20005544 	.word	0x20005544
    17c4:	20014440 	.word	0x20014440
    17c8:	2000069c 	.word	0x2000069c
    17cc:	20001380 	.word	0x20001380
    17d0:	00009761 	.word	0x00009761
    17d4:	2001a1b8 	.word	0x2001a1b8
    17d8:	2001a1b6 	.word	0x2001a1b6
    17dc:	20005968 	.word	0x20005968
    17e0:	200053c0 	.word	0x200053c0
    17e4:	30000000 	.word	0x30000000
    17e8:	e000ed00 	.word	0xe000ed00
    17ec:	20014434 	.word	0x20014434
    17f0:	00006341 	.word	0x00006341
    17f4:	200008ac 	.word	0x200008ac
    17f8:	00000ca1 	.word	0x00000ca1
    17fc:	00009cc1 	.word	0x00009cc1

00001800 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    1800:	4770      	bx	lr
    1802:	bf00      	nop
	...

00001820 <scaleDefault>:
}
    1820:	4770      	bx	lr
    1822:	bf00      	nop
    1824:	f3af 8000 	nop.w
    1828:	f3af 8000 	nop.w
    182c:	f3af 8000 	nop.w
    1830:	f3af 8000 	nop.w
    1834:	f3af 8000 	nop.w
    1838:	f3af 8000 	nop.w
    183c:	f3af 8000 	nop.w

00001840 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1840:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1844:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    1848:	eee0 7a07 	vfma.f32	s15, s0, s14
    184c:	eeb0 0a67 	vmov.f32	s0, s15
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	f3af 8000 	nop.w
    1858:	f3af 8000 	nop.w
    185c:	f3af 8000 	nop.w

00001860 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1860:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1874 <scaleOscFine+0x14>
    1864:	eddf 7a04 	vldr	s15, [pc, #16]	; 1878 <scaleOscFine+0x18>
}
    1868:	eee0 7a07 	vfma.f32	s15, s0, s14
    186c:	eeb0 0a67 	vmov.f32	s0, s15
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	43480000 	.word	0x43480000
    1878:	c2c80000 	.word	0xc2c80000
    187c:	f3af 8000 	nop.w

00001880 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1880:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1894 <scaleOscFreq+0x14>
    1884:	eddf 7a04 	vldr	s15, [pc, #16]	; 1898 <scaleOscFreq+0x18>
}
    1888:	eee0 7a07 	vfma.f32	s15, s0, s14
    188c:	eeb0 0a67 	vmov.f32	s0, s15
    1890:	4770      	bx	lr
    1892:	bf00      	nop
    1894:	457a0000 	.word	0x457a0000
    1898:	c4fa0000 	.word	0xc4fa0000
    189c:	f3af 8000 	nop.w

000018a0 <scaleFilterCutoff>:
	return (input * 127.0f);
    18a0:	eddf 7a02 	vldr	s15, [pc, #8]	; 18ac <scaleFilterCutoff+0xc>
}
    18a4:	ee20 0a27 	vmul.f32	s0, s0, s15
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	42fe0000 	.word	0x42fe0000
    18b0:	f3af 8000 	nop.w
    18b4:	f3af 8000 	nop.w
    18b8:	f3af 8000 	nop.w
    18bc:	f3af 8000 	nop.w

000018c0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    18c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 18d4 <scaleFinalLowpass+0x14>
    18c4:	eddf 7a04 	vldr	s15, [pc, #16]	; 18d8 <scaleFinalLowpass+0x18>
}
    18c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    18cc:	eeb0 0a67 	vmov.f32	s0, s15
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	428c0000 	.word	0x428c0000
    18d8:	42680000 	.word	0x42680000
    18dc:	f3af 8000 	nop.w

000018e0 <blankFunction>:
}
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
    18e4:	f3af 8000 	nop.w
    18e8:	f3af 8000 	nop.w
    18ec:	f3af 8000 	nop.w
    18f0:	f3af 8000 	nop.w
    18f4:	f3af 8000 	nop.w
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <scaleTranspose>:
{
    1900:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1904:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1924 <scaleTranspose+0x24>
    1908:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    190c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    190e:	f008 fc5f 	bl	a1d0 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1912:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1928 <scaleTranspose+0x28>
    1916:	eddf 7a05 	vldr	s15, [pc, #20]	; 192c <scaleTranspose+0x2c>
}
    191a:	eee0 7a07 	vfma.f32	s15, s0, s14
    191e:	eeb0 0a67 	vmov.f32	s0, s15
    1922:	bd08      	pop	{r3, pc}
    1924:	00000000 	.word	0x00000000
    1928:	42c00000 	.word	0x42c00000
    192c:	c2400000 	.word	0xc2400000
    1930:	f3af 8000 	nop.w
    1934:	f3af 8000 	nop.w
    1938:	f3af 8000 	nop.w
    193c:	f3af 8000 	nop.w

00001940 <scalePitchBend>:
{
    1940:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1944:	ed9f 0a05 	vldr	s0, [pc, #20]	; 195c <scalePitchBend+0x1c>
    1948:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    194c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    194e:	f008 fc3f 	bl	a1d0 <__LEAF_clip_veneer>
	return (input * 48.0f);
    1952:	eddf 7a03 	vldr	s15, [pc, #12]	; 1960 <scalePitchBend+0x20>
}
    1956:	ee20 0a27 	vmul.f32	s0, s0, s15
    195a:	bd08      	pop	{r3, pc}
    195c:	00000000 	.word	0x00000000
    1960:	42400000 	.word	0x42400000
    1964:	f3af 8000 	nop.w
    1968:	f3af 8000 	nop.w
    196c:	f3af 8000 	nop.w
    1970:	f3af 8000 	nop.w
    1974:	f3af 8000 	nop.w
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <scaleFilterResonance>:
{
    1980:	b510      	push	{r4, lr}
    1982:	ed2d 8b02 	vpush	{d8}
    1986:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    198a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 19f8 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    198e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 19fc <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1992:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1996:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    199a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    199e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    19a2:	1c63      	adds	r3, r4, #1
    19a4:	ee00 3a90 	vmov	s1, r3
    19a8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    19ac:	f008 fc10 	bl	a1d0 <__LEAF_clip_veneer>
    19b0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    19b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    19b8:	4b11      	ldr	r3, [pc, #68]	; (1a00 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    19ba:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    19be:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1a04 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    19c2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    19c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    19ca:	ee38 8a27 	vadd.f32	s16, s16, s15
    19ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    19d2:	edd4 7a00 	vldr	s15, [r4]
    19d6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    19da:	ed93 7a00 	vldr	s14, [r3]
    19de:	ee38 8a68 	vsub.f32	s16, s16, s17
    19e2:	ee60 0a87 	vmul.f32	s1, s1, s14
    19e6:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    19ea:	ecbd 8b02 	vpop	{d8}
    19ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    19f2:	f008 bbed 	b.w	a1d0 <__LEAF_clip_veneer>
    19f6:	bf00      	nop
    19f8:	44ffe000 	.word	0x44ffe000
    19fc:	00000000 	.word	0x00000000
    1a00:	2001a618 	.word	0x2001a618
    1a04:	3dcccccd 	.word	0x3dcccccd
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleEnvTimes>:
{
    1a20:	b510      	push	{r4, lr}
    1a22:	ed2d 8b02 	vpush	{d8}
    1a26:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1a2a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1a88 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a2e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1a8c <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1a32:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1a36:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1a3a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1a3e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a42:	1c63      	adds	r3, r4, #1
    1a44:	ee00 3a90 	vmov	s1, r3
    1a48:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1a4c:	f008 fbc0 	bl	a1d0 <__LEAF_clip_veneer>
    1a50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1a58:	4b0d      	ldr	r3, [pc, #52]	; (1a90 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1a5a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1a5e:	ee10 2a10 	vmov	r2, s0
    1a62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a66:	ee38 8a07 	vadd.f32	s16, s16, s14
    1a6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a6e:	ed94 7a00 	vldr	s14, [r4]
    1a72:	edd3 6a00 	vldr	s13, [r3]
    1a76:	ee38 8a68 	vsub.f32	s16, s16, s17
    1a7a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1a7e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1a82:	ecbd 8b02 	vpop	{d8}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	44ffe000 	.word	0x44ffe000
    1a8c:	00000000 	.word	0x00000000
    1a90:	20014590 	.word	0x20014590
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <scaleLFORates>:
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	ed2d 8b02 	vpush	{d8}
    1aa6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aaa:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1b08 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1aae:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1b0c <scaleLFORates+0x6c>
	input *= 2047.0f;
    1ab2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1ab6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1aba:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1abe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ac2:	1c63      	adds	r3, r4, #1
    1ac4:	ee00 3a90 	vmov	s1, r3
    1ac8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1acc:	f008 fb80 	bl	a1d0 <__LEAF_clip_veneer>
    1ad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1ad8:	4b0d      	ldr	r3, [pc, #52]	; (1b10 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1ada:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1ade:	ee10 2a10 	vmov	r2, s0
    1ae2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ae6:	ee38 8a07 	vadd.f32	s16, s16, s14
    1aea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1aee:	ed94 7a00 	vldr	s14, [r4]
    1af2:	edd3 6a00 	vldr	s13, [r3]
    1af6:	ee38 8a68 	vsub.f32	s16, s16, s17
    1afa:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1afe:	eea7 0a08 	vfma.f32	s0, s14, s16
    1b02:	ecbd 8b02 	vpop	{d8}
    1b06:	bd10      	pop	{r4, pc}
    1b08:	44ffe000 	.word	0x44ffe000
    1b0c:	00000000 	.word	0x00000000
    1b10:	200166bc 	.word	0x200166bc
    1b14:	f3af 8000 	nop.w
    1b18:	f3af 8000 	nop.w
    1b1c:	f3af 8000 	nop.w

00001b20 <randomNumber>:
	float num = (random_values[currentRandom++] + 1.0f) * 0.5f;
    1b20:	4908      	ldr	r1, [pc, #32]	; (1b44 <randomNumber+0x24>)
    1b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b26:	4a08      	ldr	r2, [pc, #32]	; (1b48 <randomNumber+0x28>)
    1b28:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    1b2c:	780b      	ldrb	r3, [r1, #0]
    1b2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1b32:	3301      	adds	r3, #1
    1b34:	edd2 7a00 	vldr	s15, [r2]
    1b38:	700b      	strb	r3, [r1, #0]
    1b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
    1b3e:	ee27 0a80 	vmul.f32	s0, s15, s0
    1b42:	4770      	bx	lr
    1b44:	200144fe 	.word	0x200144fe
    1b48:	2001a214 	.word	0x2001a214
    1b4c:	f3af 8000 	nop.w
    1b50:	f3af 8000 	nop.w
    1b54:	f3af 8000 	nop.w
    1b58:	f3af 8000 	nop.w
    1b5c:	f3af 8000 	nop.w

00001b60 <scaleTwo>:
}
    1b60:	ee30 0a00 	vadd.f32	s0, s0, s0
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop
    1b68:	f3af 8000 	nop.w
    1b6c:	f3af 8000 	nop.w
    1b70:	f3af 8000 	nop.w
    1b74:	f3af 8000 	nop.w
    1b78:	f3af 8000 	nop.w
    1b7c:	f3af 8000 	nop.w

00001b80 <parsePreset>:
{
    1b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b84:	ed2d 8b02 	vpush	{d8}
    1b88:	b08d      	sub	sp, #52	; 0x34
    1b8a:	e9cd 0100 	strd	r0, r1, [sp]
  __ASM volatile ("cpsid i" : : : "memory");
    1b8e:	b672      	cpsid	i
	 presetReady = 0;
    1b90:	2400      	movs	r4, #0
    1b92:	4bf4      	ldr	r3, [pc, #976]	; (1f64 <parsePreset+0x3e4>)
	if (buffer[bufferIndex] == 17)
    1b94:	f8df b3e4 	ldr.w	fp, [pc, #996]	; 1f7c <parsePreset+0x3fc>
		 audioOutBuffer[i] = 0;
    1b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b9c:	4621      	mov	r1, r4
    1b9e:	48f2      	ldr	r0, [pc, #968]	; (1f68 <parsePreset+0x3e8>)
	 presetReady = 0;
    1ba0:	601c      	str	r4, [r3, #0]
		 audioOutBuffer[i] = 0;
    1ba2:	f008 fca1 	bl	a4e8 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    1ba6:	f89b 5000 	ldrb.w	r5, [fp]
	audioMasterLevel = 0.0f;
    1baa:	2300      	movs	r3, #0
    1bac:	4aef      	ldr	r2, [pc, #956]	; (1f6c <parsePreset+0x3ec>)
	if (buffer[bufferIndex] == 17)
    1bae:	2d11      	cmp	r5, #17
	audioMasterLevel = 0.0f;
    1bb0:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1bb2:	f000 843b 	beq.w	242c <parsePreset+0x8ac>
	uint16_t bufferIndex = 0;
    1bb6:	4623      	mov	r3, r4
	uint16_t presetVersionNumber = 0;
    1bb8:	46a2      	mov	sl, r4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1bba:	1c5a      	adds	r2, r3, #1
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1bbc:	9901      	ldr	r1, [sp, #4]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1bbe:	f81b 9002 	ldrb.w	r9, [fp, r2]
    1bc2:	1c9a      	adds	r2, r3, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1bc4:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1bc8:	f81b 8002 	ldrb.w	r8, [fp, r2]
    1bcc:	1cda      	adds	r2, r3, #3
    1bce:	f81b e002 	ldrb.w	lr, [fp, r2]
    1bd2:	1d1a      	adds	r2, r3, #4
    1bd4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1bd8:	9202      	str	r2, [sp, #8]
    1bda:	1d5a      	adds	r2, r3, #5
    1bdc:	f81b 4002 	ldrb.w	r4, [fp, r2]
    1be0:	1d9a      	adds	r2, r3, #6
    1be2:	f81b 6002 	ldrb.w	r6, [fp, r2]
    1be6:	1dda      	adds	r2, r3, #7
    1be8:	9403      	str	r4, [sp, #12]
    1bea:	24c8      	movs	r4, #200	; 0xc8
    1bec:	f81b 7002 	ldrb.w	r7, [fp, r2]
    1bf0:	f103 0208 	add.w	r2, r3, #8
    1bf4:	fb01 f104 	mul.w	r1, r1, r4
    1bf8:	f81b c002 	ldrb.w	ip, [fp, r2]
    1bfc:	f103 0209 	add.w	r2, r3, #9
    1c00:	9705      	str	r7, [sp, #20]
    1c02:	9106      	str	r1, [sp, #24]
    1c04:	f81b 7002 	ldrb.w	r7, [fp, r2]
    1c08:	f103 020a 	add.w	r2, r3, #10
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c0c:	49d8      	ldr	r1, [pc, #864]	; (1f70 <parsePreset+0x3f0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c0e:	9604      	str	r6, [sp, #16]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c10:	460c      	mov	r4, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c12:	f81b 6002 	ldrb.w	r6, [fp, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c16:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
    1c1a:	4ad6      	ldr	r2, [pc, #856]	; (1f74 <parsePreset+0x3f4>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c1c:	0040      	lsls	r0, r0, #1
		presetName[i] = buffer[bufferIndex];
    1c1e:	7015      	strb	r5, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c20:	5425      	strb	r5, [r4, r0]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c22:	f103 050b 	add.w	r5, r3, #11
		presetName[i] = buffer[bufferIndex];
    1c26:	9802      	ldr	r0, [sp, #8]
    1c28:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c2c:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1c30:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c34:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1c38:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c3c:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1c40:	7110      	strb	r0, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c42:	7108      	strb	r0, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1c44:	9803      	ldr	r0, [sp, #12]
    1c46:	7150      	strb	r0, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c48:	7148      	strb	r0, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1c4a:	9804      	ldr	r0, [sp, #16]
    1c4c:	7190      	strb	r0, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c4e:	7188      	strb	r0, [r1, #6]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c50:	f81b 5005 	ldrb.w	r5, [fp, r5]
		presetName[i] = buffer[bufferIndex];
    1c54:	9805      	ldr	r0, [sp, #20]
    1c56:	71d0      	strb	r0, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c58:	71c8      	strb	r0, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1c5a:	f882 c008 	strb.w	ip, [r2, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c5e:	f881 c008 	strb.w	ip, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1c62:	7257      	strb	r7, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c64:	724f      	strb	r7, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1c66:	7296      	strb	r6, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c68:	728e      	strb	r6, [r1, #10]
		presetName[i] = buffer[bufferIndex];
    1c6a:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c6c:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c6e:	f103 050c 	add.w	r5, r3, #12
    1c72:	48c1      	ldr	r0, [pc, #772]	; (1f78 <parsePreset+0x3f8>)
    1c74:	f81b 5005 	ldrb.w	r5, [fp, r5]
		presetName[i] = buffer[bufferIndex];
    1c78:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c7a:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c7c:	f103 050d 	add.w	r5, r3, #13
    1c80:	f81b 5005 	ldrb.w	r5, [fp, r5]
		presetName[i] = buffer[bufferIndex];
    1c84:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c86:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c8a:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c8c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1c90:	9906      	ldr	r1, [sp, #24]
    1c92:	5442      	strb	r2, [r0, r1]
    1c94:	f103 020f 	add.w	r2, r3, #15
    1c98:	4401      	add	r1, r0
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1c9a:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c9e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ca2:	704a      	strb	r2, [r1, #1]
    1ca4:	f103 0210 	add.w	r2, r3, #16
    1ca8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cac:	708a      	strb	r2, [r1, #2]
    1cae:	f103 0211 	add.w	r2, r3, #17
    1cb2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cb6:	70ca      	strb	r2, [r1, #3]
    1cb8:	f103 0212 	add.w	r2, r3, #18
    1cbc:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cc0:	710a      	strb	r2, [r1, #4]
    1cc2:	f103 0213 	add.w	r2, r3, #19
    1cc6:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cca:	714a      	strb	r2, [r1, #5]
    1ccc:	f103 0214 	add.w	r2, r3, #20
    1cd0:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cd4:	718a      	strb	r2, [r1, #6]
    1cd6:	f103 0215 	add.w	r2, r3, #21
    1cda:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cde:	71ca      	strb	r2, [r1, #7]
    1ce0:	f103 0216 	add.w	r2, r3, #22
    1ce4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ce8:	720a      	strb	r2, [r1, #8]
    1cea:	f103 0217 	add.w	r2, r3, #23
    1cee:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cf2:	728a      	strb	r2, [r1, #10]
    1cf4:	f103 0218 	add.w	r2, r3, #24
    1cf8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1cfc:	72ca      	strb	r2, [r1, #11]
    1cfe:	f103 0219 	add.w	r2, r3, #25
    1d02:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d06:	730a      	strb	r2, [r1, #12]
    1d08:	f103 021a 	add.w	r2, r3, #26
    1d0c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d10:	734a      	strb	r2, [r1, #13]
    1d12:	f103 021b 	add.w	r2, r3, #27
    1d16:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d1a:	738a      	strb	r2, [r1, #14]
    1d1c:	f103 021c 	add.w	r2, r3, #28
    1d20:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d24:	73ca      	strb	r2, [r1, #15]
    1d26:	f103 021d 	add.w	r2, r3, #29
    1d2a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d2e:	740a      	strb	r2, [r1, #16]
    1d30:	f103 021e 	add.w	r2, r3, #30
    1d34:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d38:	744a      	strb	r2, [r1, #17]
    1d3a:	f103 021f 	add.w	r2, r3, #31
    1d3e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d42:	748a      	strb	r2, [r1, #18]
    1d44:	f103 0220 	add.w	r2, r3, #32
    1d48:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d4c:	750a      	strb	r2, [r1, #20]
    1d4e:	f103 0221 	add.w	r2, r3, #33	; 0x21
    1d52:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d56:	754a      	strb	r2, [r1, #21]
    1d58:	f103 0222 	add.w	r2, r3, #34	; 0x22
    1d5c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d60:	758a      	strb	r2, [r1, #22]
    1d62:	f103 0223 	add.w	r2, r3, #35	; 0x23
    1d66:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d6a:	75ca      	strb	r2, [r1, #23]
    1d6c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    1d70:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d74:	760a      	strb	r2, [r1, #24]
    1d76:	f103 0225 	add.w	r2, r3, #37	; 0x25
    1d7a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d7e:	764a      	strb	r2, [r1, #25]
    1d80:	f103 0226 	add.w	r2, r3, #38	; 0x26
    1d84:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d88:	768a      	strb	r2, [r1, #26]
    1d8a:	f103 0227 	add.w	r2, r3, #39	; 0x27
    1d8e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d92:	76ca      	strb	r2, [r1, #27]
    1d94:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1d98:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1d9c:	770a      	strb	r2, [r1, #28]
    1d9e:	f103 0229 	add.w	r2, r3, #41	; 0x29
    1da2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1da6:	778a      	strb	r2, [r1, #30]
    1da8:	f103 022a 	add.w	r2, r3, #42	; 0x2a
    1dac:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1db0:	77ca      	strb	r2, [r1, #31]
    1db2:	f103 022b 	add.w	r2, r3, #43	; 0x2b
    1db6:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1dba:	f881 2020 	strb.w	r2, [r1, #32]
    1dbe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    1dc2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1dc6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1dca:	f103 022d 	add.w	r2, r3, #45	; 0x2d
    1dce:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1dd2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
    1dd6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
    1dda:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1dde:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
    1de2:	f103 022f 	add.w	r2, r3, #47	; 0x2f
    1de6:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1dea:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    1dee:	f103 0230 	add.w	r2, r3, #48	; 0x30
    1df2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1df6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
    1dfa:	f103 0231 	add.w	r2, r3, #49	; 0x31
    1dfe:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e02:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
    1e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1e0a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e0e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
    1e12:	f103 0233 	add.w	r2, r3, #51	; 0x33
    1e16:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e1a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    1e1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    1e22:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e26:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
    1e2a:	f103 0235 	add.w	r2, r3, #53	; 0x35
    1e2e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e32:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
    1e36:	f103 0236 	add.w	r2, r3, #54	; 0x36
    1e3a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e3e:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    1e42:	f103 0237 	add.w	r2, r3, #55	; 0x37
    1e46:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e4a:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
    1e4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
    1e52:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e56:	f881 202e 	strb.w	r2, [r1, #46]	; 0x2e
    1e5a:	f103 0239 	add.w	r2, r3, #57	; 0x39
    1e5e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e62:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    1e66:	f103 023a 	add.w	r2, r3, #58	; 0x3a
    1e6a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e6e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    1e72:	f103 023b 	add.w	r2, r3, #59	; 0x3b
    1e76:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e7a:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
    1e7e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    1e82:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e86:	f881 2033 	strb.w	r2, [r1, #51]	; 0x33
    1e8a:	f103 023d 	add.w	r2, r3, #61	; 0x3d
    1e8e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e92:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    1e96:	f103 023e 	add.w	r2, r3, #62	; 0x3e
    1e9a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1e9e:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
    1ea2:	f103 023f 	add.w	r2, r3, #63	; 0x3f
    1ea6:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1eaa:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    1eae:	f103 0240 	add.w	r2, r3, #64	; 0x40
    1eb2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1eb6:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
    1eba:	f103 0241 	add.w	r2, r3, #65	; 0x41
    1ebe:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ec2:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
    1ec6:	f103 0242 	add.w	r2, r3, #66	; 0x42
    1eca:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ece:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    1ed2:	f103 0243 	add.w	r2, r3, #67	; 0x43
    1ed6:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1eda:	f881 203a 	strb.w	r2, [r1, #58]	; 0x3a
    1ede:	f103 0244 	add.w	r2, r3, #68	; 0x44
    1ee2:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ee6:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
    1eea:	f103 0245 	add.w	r2, r3, #69	; 0x45
    1eee:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ef2:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    1ef6:	f103 0246 	add.w	r2, r3, #70	; 0x46
    1efa:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1efe:	f881 203e 	strb.w	r2, [r1, #62]	; 0x3e
    1f02:	f103 0247 	add.w	r2, r3, #71	; 0x47
    1f06:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f0a:	f881 203f 	strb.w	r2, [r1, #63]	; 0x3f
    1f0e:	f103 0248 	add.w	r2, r3, #72	; 0x48
    1f12:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f16:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
    1f1a:	f103 0249 	add.w	r2, r3, #73	; 0x49
    1f1e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f22:	f881 2041 	strb.w	r2, [r1, #65]	; 0x41
    1f26:	f103 024a 	add.w	r2, r3, #74	; 0x4a
    1f2a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f2e:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
    1f32:	f103 024b 	add.w	r2, r3, #75	; 0x4b
    1f36:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f3a:	f881 2043 	strb.w	r2, [r1, #67]	; 0x43
    1f3e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    1f42:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f46:	f881 2044 	strb.w	r2, [r1, #68]	; 0x44
    1f4a:	f103 024d 	add.w	r2, r3, #77	; 0x4d
    1f4e:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f52:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    1f56:	f103 024e 	add.w	r2, r3, #78	; 0x4e
    1f5a:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f5e:	f881 2047 	strb.w	r2, [r1, #71]	; 0x47
    1f62:	e00d      	b.n	1f80 <parsePreset+0x400>
    1f64:	20005544 	.word	0x20005544
    1f68:	30000000 	.word	0x30000000
    1f6c:	200008a8 	.word	0x200008a8
    1f70:	30042000 	.word	0x30042000
    1f74:	2001a1a8 	.word	0x2001a1a8
    1f78:	30043380 	.word	0x30043380
    1f7c:	30042380 	.word	0x30042380
    1f80:	f103 024f 	add.w	r2, r3, #79	; 0x4f
    1f84:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f88:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    1f8c:	f103 0250 	add.w	r2, r3, #80	; 0x50
    1f90:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1f94:	f881 2049 	strb.w	r2, [r1, #73]	; 0x49
    1f98:	f103 0251 	add.w	r2, r3, #81	; 0x51
    1f9c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fa0:	f881 204a 	strb.w	r2, [r1, #74]	; 0x4a
    1fa4:	f103 0252 	add.w	r2, r3, #82	; 0x52
    1fa8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fac:	f881 204b 	strb.w	r2, [r1, #75]	; 0x4b
    1fb0:	f103 0253 	add.w	r2, r3, #83	; 0x53
    1fb4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fb8:	f8df b570 	ldr.w	fp, [pc, #1392]	; 252c <parsePreset+0x9ac>
    1fbc:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
    1fc0:	f103 0254 	add.w	r2, r3, #84	; 0x54
    1fc4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fc8:	f881 204d 	strb.w	r2, [r1, #77]	; 0x4d
    1fcc:	f103 0255 	add.w	r2, r3, #85	; 0x55
    1fd0:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fd4:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1fd8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    1fdc:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fe0:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    1fe4:	f103 0257 	add.w	r2, r3, #87	; 0x57
    1fe8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1fec:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
    1ff0:	f103 0258 	add.w	r2, r3, #88	; 0x58
    1ff4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    1ff8:	f881 2052 	strb.w	r2, [r1, #82]	; 0x52
    1ffc:	f103 0259 	add.w	r2, r3, #89	; 0x59
    2000:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2004:	f881 2053 	strb.w	r2, [r1, #83]	; 0x53
    2008:	f103 025a 	add.w	r2, r3, #90	; 0x5a
    200c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2010:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
    2014:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    2018:	f81b 2002 	ldrb.w	r2, [fp, r2]
    201c:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
    2020:	f103 025c 	add.w	r2, r3, #92	; 0x5c
    2024:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2028:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
    202c:	f103 025d 	add.w	r2, r3, #93	; 0x5d
    2030:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2034:	f881 2057 	strb.w	r2, [r1, #87]	; 0x57
    2038:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    203c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2040:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    2044:	f103 025f 	add.w	r2, r3, #95	; 0x5f
    2048:	f81b 2002 	ldrb.w	r2, [fp, r2]
    204c:	f881 2059 	strb.w	r2, [r1, #89]	; 0x59
    2050:	f103 0260 	add.w	r2, r3, #96	; 0x60
    2054:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2058:	f881 205a 	strb.w	r2, [r1, #90]	; 0x5a
    205c:	f103 0261 	add.w	r2, r3, #97	; 0x61
    2060:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2064:	f881 205b 	strb.w	r2, [r1, #91]	; 0x5b
    2068:	f103 0262 	add.w	r2, r3, #98	; 0x62
    206c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2070:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
    2074:	f103 0263 	add.w	r2, r3, #99	; 0x63
    2078:	f81b 2002 	ldrb.w	r2, [fp, r2]
    207c:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    2080:	f103 0264 	add.w	r2, r3, #100	; 0x64
    2084:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2088:	f881 205e 	strb.w	r2, [r1, #94]	; 0x5e
    208c:	f103 0265 	add.w	r2, r3, #101	; 0x65
    2090:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2094:	f881 205f 	strb.w	r2, [r1, #95]	; 0x5f
    2098:	f103 0266 	add.w	r2, r3, #102	; 0x66
    209c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20a0:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    20a4:	f103 0267 	add.w	r2, r3, #103	; 0x67
    20a8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20ac:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
    20b0:	f103 0268 	add.w	r2, r3, #104	; 0x68
    20b4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20b8:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
    20bc:	f103 0269 	add.w	r2, r3, #105	; 0x69
    20c0:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20c4:	f881 2063 	strb.w	r2, [r1, #99]	; 0x63
    20c8:	f103 026a 	add.w	r2, r3, #106	; 0x6a
    20cc:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20d0:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    20d4:	f103 026b 	add.w	r2, r3, #107	; 0x6b
    20d8:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20dc:	f881 2065 	strb.w	r2, [r1, #101]	; 0x65
    20e0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
    20e4:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20e8:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    20ec:	f103 026d 	add.w	r2, r3, #109	; 0x6d
    20f0:	f81b 2002 	ldrb.w	r2, [fp, r2]
    20f4:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    20f8:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    20fc:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2100:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    2104:	f103 026f 	add.w	r2, r3, #111	; 0x6f
    2108:	f81b 2002 	ldrb.w	r2, [fp, r2]
    210c:	f881 2069 	strb.w	r2, [r1, #105]	; 0x69
    2110:	f103 0270 	add.w	r2, r3, #112	; 0x70
    2114:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2118:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
    211c:	f103 0271 	add.w	r2, r3, #113	; 0x71
    2120:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2124:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
    2128:	f103 0272 	add.w	r2, r3, #114	; 0x72
    212c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2130:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    2134:	f103 0273 	add.w	r2, r3, #115	; 0x73
    2138:	f81b 2002 	ldrb.w	r2, [fp, r2]
    213c:	f881 206d 	strb.w	r2, [r1, #109]	; 0x6d
    2140:	f103 0274 	add.w	r2, r3, #116	; 0x74
    2144:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2148:	f881 206e 	strb.w	r2, [r1, #110]	; 0x6e
    214c:	f103 0275 	add.w	r2, r3, #117	; 0x75
    2150:	f81b 2002 	ldrb.w	r2, [fp, r2]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2154:	f81b 4000 	ldrb.w	r4, [fp, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2158:	f881 206f 	strb.w	r2, [r1, #111]	; 0x6f
    215c:	f103 0276 	add.w	r2, r3, #118	; 0x76
    2160:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2164:	f881 2070 	strb.w	r2, [r1, #112]	; 0x70
    2168:	f103 0277 	add.w	r2, r3, #119	; 0x77
    216c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2170:	f881 2071 	strb.w	r2, [r1, #113]	; 0x71
    2174:	f103 0278 	add.w	r2, r3, #120	; 0x78
    2178:	f81b 2002 	ldrb.w	r2, [fp, r2]
    217c:	f881 2072 	strb.w	r2, [r1, #114]	; 0x72
    2180:	f103 0279 	add.w	r2, r3, #121	; 0x79
    2184:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2188:	f881 2073 	strb.w	r2, [r1, #115]	; 0x73
    218c:	f103 027a 	add.w	r2, r3, #122	; 0x7a
    2190:	f81b 2002 	ldrb.w	r2, [fp, r2]
    2194:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2198:	eb0b 0200 	add.w	r2, fp, r0
    219c:	7852      	ldrb	r2, [r2, #1]
    219e:	eb02 2204 	add.w	r2, r2, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    21a2:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    21a6:	f81b 4004 	ldrb.w	r4, [fp, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    21aa:	b292      	uxth	r2, r2
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    21ac:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    21b0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    21b4:	f81b 4004 	ldrb.w	r4, [fp, r4]
    21b8:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    21bc:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    21c0:	f81b 4004 	ldrb.w	r4, [fp, r4]
    21c4:	f881 4077 	strb.w	r4, [r1, #119]	; 0x77
	if (paramCount > size)
    21c8:	9900      	ldr	r1, [sp, #0]
    21ca:	428a      	cmp	r2, r1
    21cc:	dc0c      	bgt.n	21e8 <parsePreset+0x668>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    21ce:	eb00 0142 	add.w	r1, r0, r2, lsl #1
	if (paramEndCheck != 0xefef)
    21d2:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    21d6:	0054      	lsls	r4, r2, #1
    21d8:	4459      	add	r1, fp
    21da:	788e      	ldrb	r6, [r1, #2]
    21dc:	78c8      	ldrb	r0, [r1, #3]
    21de:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    21e2:	b280      	uxth	r0, r0
    21e4:	42a8      	cmp	r0, r5
    21e6:	d00c      	beq.n	2202 <parsePreset+0x682>
		audioMasterLevel = 1.0f;
    21e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    21ec:	4bb8      	ldr	r3, [pc, #736]	; (24d0 <parsePreset+0x950>)
    21ee:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    21f0:	48b8      	ldr	r0, [pc, #736]	; (24d4 <parsePreset+0x954>)
    21f2:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    21f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    21f6:	b662      	cpsie	i
}
    21f8:	b00d      	add	sp, #52	; 0x34
    21fa:	ecbd 8b02 	vpop	{d8}
    21fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2202:	7908      	ldrb	r0, [r1, #4]
    2204:	7949      	ldrb	r1, [r1, #5]
    2206:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    220a:	b288      	uxth	r0, r1
    220c:	9005      	str	r0, [sp, #20]
	if (presetVersionNumber == 0)
    220e:	f1ba 0f00 	cmp.w	sl, #0
    2212:	f000 8115 	beq.w	2440 <parsePreset+0x8c0>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    2216:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    221a:	f103 0184 	add.w	r1, r3, #132	; 0x84
    221e:	4410      	add	r0, r2
    2220:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2224:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    2226:	9800      	ldr	r0, [sp, #0]
    2228:	4281      	cmp	r1, r0
    222a:	dcdd      	bgt.n	21e8 <parsePreset+0x668>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    222c:	eb0b 0501 	add.w	r5, fp, r1
    2230:	f81b 0001 	ldrb.w	r0, [fp, r1]
    2234:	7869      	ldrb	r1, [r5, #1]
    2236:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    223a:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    223e:	b289      	uxth	r1, r1
    2240:	4281      	cmp	r1, r0
    2242:	d1d1      	bne.n	21e8 <parsePreset+0x668>
	bufferIndex = bufferIndex + 2;
    2244:	f103 0780 	add.w	r7, r3, #128	; 0x80
    2248:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    224a:	2a00      	cmp	r2, #0
    224c:	f000 86e4 	beq.w	3018 <_Min_Heap_Size+0x18>
    2250:	4427      	add	r7, r4
    2252:	48a1      	ldr	r0, [pc, #644]	; (24d8 <parsePreset+0x958>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2254:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 24dc <parsePreset+0x95c>
    2258:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    225a:	4681      	mov	r9, r0
    225c:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    225e:	eb0b 0105 	add.w	r1, fp, r5
    2262:	f81b 6005 	ldrb.w	r6, [fp, r5]
		bufferIndex += 2;
    2266:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    2268:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    226a:	7849      	ldrb	r1, [r1, #1]
		bufferIndex += 2;
    226c:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    226e:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    2272:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2274:	ee07 1a90 	vmov	s15, r1
    2278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    227c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2280:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    2284:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    2288:	d1e9      	bne.n	225e <parsePreset+0x6de>
    228a:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    228e:	4992      	ldr	r1, [pc, #584]	; (24d8 <parsePreset+0x958>)
    2290:	4e93      	ldr	r6, [pc, #588]	; (24e0 <parsePreset+0x960>)
    2292:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    2296:	614e      	str	r6, [r1, #20]
	for (int i = 0; i < paramCount; i++)
    2298:	311c      	adds	r1, #28
    229a:	428c      	cmp	r4, r1
    229c:	d1fb      	bne.n	2296 <parsePreset+0x716>
    229e:	4991      	ldr	r1, [pc, #580]	; (24e4 <parsePreset+0x964>)
		params[i].scaleFunc = &scaleDefault;
    22a0:	6101      	str	r1, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    22a2:	301c      	adds	r0, #28
    22a4:	42a0      	cmp	r0, r4
    22a6:	d1fb      	bne.n	22a0 <parsePreset+0x720>
		bufferIndex += 2;
    22a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    22ac:	3380      	adds	r3, #128	; 0x80
    22ae:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    22b0:	2a9c      	cmp	r2, #156	; 0x9c
    22b2:	f000 86ae 	beq.w	3012 <_Min_Heap_Size+0x12>
    22b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    22ba:	4c8b      	ldr	r4, [pc, #556]	; (24e8 <parsePreset+0x968>)
    22bc:	4e88      	ldr	r6, [pc, #544]	; (24e0 <parsePreset+0x960>)
    22be:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    22c2:	4988      	ldr	r1, [pc, #544]	; (24e4 <parsePreset+0x964>)
			params[i].zeroToOneVal[v] = 0.0f;
    22c4:	2200      	movs	r2, #0
    22c6:	601a      	str	r2, [r3, #0]
    22c8:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
    22ca:	e9c3 1604 	strd	r1, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    22ce:	331c      	adds	r3, #28
    22d0:	429c      	cmp	r4, r3
    22d2:	d1f8      	bne.n	22c6 <parsePreset+0x746>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    22d4:	4a85      	ldr	r2, [pc, #532]	; (24ec <parsePreset+0x96c>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    22d6:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    22da:	4b85      	ldr	r3, [pc, #532]	; (24f0 <parsePreset+0x970>)
	for (int i = 0; i < NUM_EFFECT; i++)
    22dc:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    22de:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    22e2:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    22e6:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    22ea:	4a82      	ldr	r2, [pc, #520]	; (24f4 <parsePreset+0x974>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    22ec:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    22f0:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    22f4:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    22f8:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    22fc:	4a7e      	ldr	r2, [pc, #504]	; (24f8 <parsePreset+0x978>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    22fe:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2302:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2306:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    230a:	4a7c      	ldr	r2, [pc, #496]	; (24fc <parsePreset+0x97c>)
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    230c:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    2310:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2314:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2318:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    231c:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    2320:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    2324:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2328:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    232c:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    2330:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Transpose].scaleFunc = &scaleTranspose;
    2334:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2338:	4b71      	ldr	r3, [pc, #452]	; (2500 <parsePreset+0x980>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    233a:	4a72      	ldr	r2, [pc, #456]	; (2504 <parsePreset+0x984>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    233c:	4e72      	ldr	r6, [pc, #456]	; (2508 <parsePreset+0x988>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    233e:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    2342:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2346:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    234a:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    234e:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    2352:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2356:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    235a:	4b6c      	ldr	r3, [pc, #432]	; (250c <parsePreset+0x98c>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    235c:	4a6c      	ldr	r2, [pc, #432]	; (2510 <parsePreset+0x990>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    235e:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    2362:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
    2366:	f6a2 181c 	subw	r8, r2, #2332	; 0x91c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    236a:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    236e:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    2372:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2376:	6253      	str	r3, [r2, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2378:	4b66      	ldr	r3, [pc, #408]	; (2514 <parsePreset+0x994>)
    237a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    237e:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    2382:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2384:	ee67 7a87 	vmul.f32	s15, s15, s14
    2388:	fef8 7a67 	vrinta.f32	s15, s15
    238c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2390:	edcd 7a00 	vstr	s15, [sp]
    2394:	f89d 0000 	ldrb.w	r0, [sp]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    2398:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    239a:	bf88      	it	hi
    239c:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    23a0:	f007 fef2 	bl	a188 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    23a4:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    23a8:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    23aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    23ae:	fef8 7a67 	vrinta.f32	s15, s15
    23b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    23b6:	edcd 7a00 	vstr	s15, [sp]
    23ba:	f89d 0000 	ldrb.w	r0, [sp]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    23be:	280d      	cmp	r0, #13
    23c0:	d946      	bls.n	2450 <parsePreset+0x8d0>
	for (int i = 0; i < NUM_EFFECT; i++)
    23c2:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    23c4:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    23c8:	f007 fede 	bl	a188 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    23cc:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    23d0:	2f04      	cmp	r7, #4
    23d2:	d1d4      	bne.n	237e <parsePreset+0x7fe>
    23d4:	4f40      	ldr	r7, [pc, #256]	; (24d8 <parsePreset+0x958>)
    23d6:	46b9      	mov	r9, r7
    23d8:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    23da:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    23dc:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    23de:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    23e2:	4798      	blx	r3
    23e4:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    23e8:	42a6      	cmp	r6, r4
    23ea:	d1f6      	bne.n	23da <parsePreset+0x85a>
    23ec:	4e3a      	ldr	r6, [pc, #232]	; (24d8 <parsePreset+0x958>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    23ee:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    23f0:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    23f2:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    23f6:	4798      	blx	r3
    23f8:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    23fc:	42a6      	cmp	r6, r4
    23fe:	d1f6      	bne.n	23ee <parsePreset+0x86e>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2400:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2404:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    2408:	ee67 7a87 	vmul.f32	s15, s15, s14
    240c:	fef8 7a67 	vrinta.f32	s15, s15
    2410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2414:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    2418:	2b05      	cmp	r3, #5
    241a:	d832      	bhi.n	2482 <parsePreset+0x902>
    241c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2420:	002e05f4 	.word	0x002e05f4
    2424:	05ea05ef 	.word	0x05ea05ef
    2428:	05e005e5 	.word	0x05e005e5
		if (buffer[bufferIndex + 1] == 18)
    242c:	f89b 3001 	ldrb.w	r3, [fp, #1]
    2430:	2b12      	cmp	r3, #18
    2432:	d016      	beq.n	2462 <parsePreset+0x8e2>
	uint16_t presetVersionNumber = 0;
    2434:	46a2      	mov	sl, r4
		presetName[i] = buffer[bufferIndex];
    2436:	f89b 5004 	ldrb.w	r5, [fp, #4]
		bufferIndex = 4;
    243a:	2304      	movs	r3, #4
    243c:	f7ff bbbd 	b.w	1bba <parsePreset+0x3a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2440:	f103 0184 	add.w	r1, r3, #132	; 0x84
    2444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2448:	4421      	add	r1, r4
    244a:	4401      	add	r1, r0
    244c:	b289      	uxth	r1, r1
    244e:	e6ea      	b.n	2226 <parsePreset+0x6a6>
			setEffectsFunctions(effectType, i);
    2450:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    2452:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2454:	f007 fe98 	bl	a188 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2458:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    245c:	2f04      	cmp	r7, #4
    245e:	d18e      	bne.n	237e <parsePreset+0x7fe>
    2460:	e7b8      	b.n	23d4 <parsePreset+0x854>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    2462:	f89b 2002 	ldrb.w	r2, [fp, #2]
    2466:	f89b 3003 	ldrb.w	r3, [fp, #3]
		presetName[i] = buffer[bufferIndex];
    246a:	f89b 5004 	ldrb.w	r5, [fp, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    246e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2472:	fa1f fa83 	uxth.w	sl, r3
		bufferIndex = 4;
    2476:	2304      	movs	r3, #4
    2478:	f7ff bb9f 	b.w	1bba <parsePreset+0x3a>
			  shapeTick[i] = &sineTriTick;
    247c:	4b26      	ldr	r3, [pc, #152]	; (2518 <parsePreset+0x998>)
    247e:	4a27      	ldr	r2, [pc, #156]	; (251c <parsePreset+0x99c>)
    2480:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2482:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2486:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    248a:	4a25      	ldr	r2, [pc, #148]	; (2520 <parsePreset+0x9a0>)
    248c:	4925      	ldr	r1, [pc, #148]	; (2524 <parsePreset+0x9a4>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    248e:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2492:	edd2 7a00 	vldr	s15, [r2]
    2496:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    249e:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    24a2:	bfd4      	ite	le
    24a4:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    24a6:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    24a8:	fef8 7a67 	vrinta.f32	s15, s15
    24ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    24b0:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    24b2:	4603      	mov	r3, r0
    24b4:	491c      	ldr	r1, [pc, #112]	; (2528 <parsePreset+0x9a8>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    24b6:	ee17 2a90 	vmov	r2, s15
    24ba:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    24bc:	2a05      	cmp	r2, #5
    24be:	d83a      	bhi.n	2536 <parsePreset+0x9b6>
    24c0:	e8df f012 	tbh	[pc, r2, lsl #1]
    24c4:	00360589 	.word	0x00360589
    24c8:	057f0584 	.word	0x057f0584
    24cc:	0575057a 	.word	0x0575057a
    24d0:	2001a1bc 	.word	0x2001a1bc
    24d4:	200008a8 	.word	0x200008a8
    24d8:	2001908c 	.word	0x2001908c
    24dc:	377ffff6 	.word	0x377ffff6
    24e0:	000018e1 	.word	0x000018e1
    24e4:	00001821 	.word	0x00001821
    24e8:	2001a19c 	.word	0x2001a19c
    24ec:	00001861 	.word	0x00001861
    24f0:	00001a21 	.word	0x00001a21
    24f4:	00001881 	.word	0x00001881
    24f8:	000018a1 	.word	0x000018a1
    24fc:	00001901 	.word	0x00001901
    2500:	00001841 	.word	0x00001841
    2504:	00001941 	.word	0x00001941
    2508:	00001981 	.word	0x00001981
    250c:	00001aa1 	.word	0x00001aa1
    2510:	2001a08c 	.word	0x2001a08c
    2514:	000018c1 	.word	0x000018c1
    2518:	2001d6b4 	.word	0x2001d6b4
    251c:	00006b21 	.word	0x00006b21
    2520:	200195d4 	.word	0x200195d4
    2524:	2001d510 	.word	0x2001d510
    2528:	20019080 	.word	0x20019080
    252c:	30042380 	.word	0x30042380
			  shapeTick[i] = &sineTriTick;
    2530:	4a15      	ldr	r2, [pc, #84]	; (2588 <parsePreset+0xa08>)
    2532:	4816      	ldr	r0, [pc, #88]	; (258c <parsePreset+0xa0c>)
    2534:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2536:	4a16      	ldr	r2, [pc, #88]	; (2590 <parsePreset+0xa10>)
    2538:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    253c:	ed92 7a00 	vldr	s14, [r2]
    2540:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2548:	f340 850b 	ble.w	2f62 <parsePreset+0x13e2>
			enabledCount++;
    254c:	3301      	adds	r3, #1
			oscOn[i] = 1;
    254e:	2201      	movs	r2, #1
			enabledCount++;
    2550:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2552:	4610      	mov	r0, r2
    2554:	4c0f      	ldr	r4, [pc, #60]	; (2594 <parsePreset+0xa14>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2556:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    255a:	6048      	str	r0, [r1, #4]
    255c:	7062      	strb	r2, [r4, #1]
    255e:	4a0e      	ldr	r2, [pc, #56]	; (2598 <parsePreset+0xa18>)
    2560:	edd2 7a00 	vldr	s15, [r2]
    2564:	ee67 7a87 	vmul.f32	s15, s15, s14
    2568:	fef8 7a67 	vrinta.f32	s15, s15
    256c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2570:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    2574:	2a05      	cmp	r2, #5
    2576:	d814      	bhi.n	25a2 <parsePreset+0xa22>
    2578:	e8df f012 	tbh	[pc, r2, lsl #1]
    257c:	050f0514 	.word	0x050f0514
    2580:	0505050a 	.word	0x0505050a
    2584:	05000010 	.word	0x05000010
    2588:	2001d6b4 	.word	0x2001d6b4
    258c:	00006b21 	.word	0x00006b21
    2590:	200194a0 	.word	0x200194a0
    2594:	2001d510 	.word	0x2001d510
    2598:	20019740 	.word	0x20019740
			  shapeTick[i] = &sineTick;
    259c:	4a99      	ldr	r2, [pc, #612]	; (2804 <parsePreset+0xc84>)
    259e:	489a      	ldr	r0, [pc, #616]	; (2808 <parsePreset+0xc88>)
    25a0:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    25a2:	4a9a      	ldr	r2, [pc, #616]	; (280c <parsePreset+0xc8c>)
    25a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    25a8:	ed92 7a00 	vldr	s14, [r2]
    25ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
    25b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25b4:	f340 84d1 	ble.w	2f5a <parsePreset+0x13da>
			enabledCount++;
    25b8:	3301      	adds	r3, #1
			oscOn[i] = 1;
    25ba:	2201      	movs	r2, #1
			enabledCount++;
    25bc:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    25be:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    25c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25c4:	4e92      	ldr	r6, [pc, #584]	; (2810 <parsePreset+0xc90>)
	if (params[Noise].realVal[0]  > 0.5f)
    25c6:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25ca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    25ce:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    25d0:	f206 4444 	addw	r4, r6, #1092	; 0x444
    25d4:	498f      	ldr	r1, [pc, #572]	; (2814 <parsePreset+0xc94>)
	if (params[Noise].realVal[0]  > 0.5f)
    25d6:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25da:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    25de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    25e2:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    25e4:	4a8c      	ldr	r2, [pc, #560]	; (2818 <parsePreset+0xc98>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    25ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    25ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25f2:	4a8a      	ldr	r2, [pc, #552]	; (281c <parsePreset+0xc9c>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25f4:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    25f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    25fc:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    25fe:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    2600:	bfcc      	ite	gt
    2602:	2301      	movgt	r3, #1
    2604:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    2606:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    2608:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    260c:	4a84      	ldr	r2, [pc, #528]	; (2820 <parsePreset+0xca0>)
		setFilterTypes(filterType, i);
    260e:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    2610:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    2612:	f007 feb9 	bl	a388 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2616:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    261a:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    261c:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    261e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2622:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    262a:	ee17 0a90 	vmov	r0, s15
    262e:	f007 feab 	bl	a388 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2632:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    2634:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    2636:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2638:	348c      	adds	r4, #140	; 0x8c
    263a:	edd3 7a00 	vldr	s15, [r3]
    263e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2642:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    2646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    264a:	ee17 0a90 	vmov	r0, s15
    264e:	f007 fe13 	bl	a278 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    2652:	2e04      	cmp	r6, #4
    2654:	d1ed      	bne.n	2632 <parsePreset+0xab2>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2656:	4873      	ldr	r0, [pc, #460]	; (2824 <parsePreset+0xca4>)
	for (int i = 0; i < NUM_PARAMS; i++)
    2658:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    265c:	4b72      	ldr	r3, [pc, #456]	; (2828 <parsePreset+0xca8>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    265e:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    2662:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    2666:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    266a:	4870      	ldr	r0, [pc, #448]	; (282c <parsePreset+0xcac>)
	params[OutputTone].setParam = &setFinalLowpass;
    266c:	4e70      	ldr	r6, [pc, #448]	; (2830 <parsePreset+0xcb0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    266e:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    2672:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2676:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    267a:	6818      	ldr	r0, [r3, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    267c:	496d      	ldr	r1, [pc, #436]	; (2834 <parsePreset+0xcb4>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    267e:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2682:	6858      	ldr	r0, [r3, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2684:	4c6c      	ldr	r4, [pc, #432]	; (2838 <parsePreset+0xcb8>)
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2686:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    268a:	6898      	ldr	r0, [r3, #8]
	params[Effect1Mix].setParam = &fxMixSet;
    268c:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2690:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2694:	68d8      	ldr	r0, [r3, #12]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2696:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    269a:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    269e:	6918      	ldr	r0, [r3, #16]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    26a0:	4a66      	ldr	r2, [pc, #408]	; (283c <parsePreset+0xcbc>)
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    26a2:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    26a6:	6958      	ldr	r0, [r3, #20]
    26a8:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    26ac:	6998      	ldr	r0, [r3, #24]
    26ae:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    26b2:	69d8      	ldr	r0, [r3, #28]
    26b4:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    26b8:	4861      	ldr	r0, [pc, #388]	; (2840 <parsePreset+0xcc0>)
    26ba:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    26be:	4861      	ldr	r0, [pc, #388]	; (2844 <parsePreset+0xcc4>)
    26c0:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    26c4:	4860      	ldr	r0, [pc, #384]	; (2848 <parsePreset+0xcc8>)
    26c6:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    26ca:	4860      	ldr	r0, [pc, #384]	; (284c <parsePreset+0xccc>)
    26cc:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    26d0:	485f      	ldr	r0, [pc, #380]	; (2850 <parsePreset+0xcd0>)
    26d2:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    26d6:	485f      	ldr	r0, [pc, #380]	; (2854 <parsePreset+0xcd4>)
    26d8:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    26dc:	485e      	ldr	r0, [pc, #376]	; (2858 <parsePreset+0xcd8>)
    26de:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    26e2:	6a18      	ldr	r0, [r3, #32]
    26e4:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    26e8:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    26ec:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    26f0:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    26f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    26f6:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    26fa:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    26fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2700:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2704:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    270a:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    270e:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2710:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2714:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2716:	4851      	ldr	r0, [pc, #324]	; (285c <parsePreset+0xcdc>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2718:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    271c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    271e:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    2722:	6b99      	ldr	r1, [r3, #56]	; 0x38
    2724:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2728:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    272a:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    272e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2730:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    2734:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2736:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    273a:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    273e:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2742:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2746:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2748:	4945      	ldr	r1, [pc, #276]	; (2860 <parsePreset+0xce0>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    274a:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    274e:	6853      	ldr	r3, [r2, #4]
    2750:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2754:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2756:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    275a:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    275e:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2760:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2764:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2768:	4b3e      	ldr	r3, [pc, #248]	; (2864 <parsePreset+0xce4>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    276a:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    276e:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    2772:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    2776:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    277a:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    277e:	4b3a      	ldr	r3, [pc, #232]	; (2868 <parsePreset+0xce8>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2780:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2784:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2788:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    278c:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    2790:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2794:	4b35      	ldr	r3, [pc, #212]	; (286c <parsePreset+0xcec>)
    2796:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    279a:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    279e:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    27a2:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    27a6:	4b32      	ldr	r3, [pc, #200]	; (2870 <parsePreset+0xcf0>)
    27a8:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    27ac:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    27b0:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    27b4:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    27b8:	6803      	ldr	r3, [r0, #0]
    27ba:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    27be:	68c3      	ldr	r3, [r0, #12]
    27c0:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    27c4:	6983      	ldr	r3, [r0, #24]
    27c6:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    27ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
    27cc:	62b3      	str	r3, [r6, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    27ce:	6843      	ldr	r3, [r0, #4]
    27d0:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    27d4:	6903      	ldr	r3, [r0, #16]
    27d6:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    27da:	69c3      	ldr	r3, [r0, #28]
    27dc:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    27e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    27e2:	6473      	str	r3, [r6, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    27e4:	6883      	ldr	r3, [r0, #8]
    27e6:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    27ea:	6943      	ldr	r3, [r0, #20]
    27ec:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    27f0:	6a03      	ldr	r3, [r0, #32]
    27f2:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    27f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    27f8:	6633      	str	r3, [r6, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    27fa:	4b1e      	ldr	r3, [pc, #120]	; (2874 <parsePreset+0xcf4>)
    27fc:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			params[i].objectNumber = 1;
    2800:	2601      	movs	r6, #1
    2802:	e039      	b.n	2878 <parsePreset+0xcf8>
    2804:	2001d6b4 	.word	0x2001d6b4
    2808:	00006c21 	.word	0x00006c21
    280c:	2001960c 	.word	0x2001960c
    2810:	20019b14 	.word	0x20019b14
    2814:	2001d510 	.word	0x2001d510
    2818:	20000ad8 	.word	0x20000ad8
    281c:	20000ad4 	.word	0x20000ad4
    2820:	2001d4bc 	.word	0x2001d4bc
    2824:	00007141 	.word	0x00007141
    2828:	2001453c 	.word	0x2001453c
    282c:	000071a1 	.word	0x000071a1
    2830:	2001a08c 	.word	0x2001a08c
    2834:	00008221 	.word	0x00008221
    2838:	00008241 	.word	0x00008241
    283c:	20016590 	.word	0x20016590
    2840:	00008f61 	.word	0x00008f61
    2844:	00009001 	.word	0x00009001
    2848:	00008fc1 	.word	0x00008fc1
    284c:	00007761 	.word	0x00007761
    2850:	00007781 	.word	0x00007781
    2854:	000077a1 	.word	0x000077a1
    2858:	000077c1 	.word	0x000077c1
    285c:	200186bc 	.word	0x200186bc
    2860:	00007681 	.word	0x00007681
    2864:	000076a1 	.word	0x000076a1
    2868:	000076c1 	.word	0x000076c1
    286c:	000076e1 	.word	0x000076e1
    2870:	00007701 	.word	0x00007701
    2874:	00007741 	.word	0x00007741
		if ((i >= Osc1) && (i < Osc2))
    2878:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    287c:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    287e:	2b0c      	cmp	r3, #12
    2880:	f240 827e 	bls.w	2d80 <parsePreset+0x1200>
		else if ((i >= Osc2) && (i < Osc3))
    2884:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2888:	2b72      	cmp	r3, #114	; 0x72
    288a:	f200 8279 	bhi.w	2d80 <parsePreset+0x1200>
    288e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2892:	0073      	.short	0x0073
    2894:	00730073 	.word	0x00730073
    2898:	00730073 	.word	0x00730073
    289c:	00730073 	.word	0x00730073
    28a0:	00730073 	.word	0x00730073
    28a4:	00730073 	.word	0x00730073
    28a8:	00730073 	.word	0x00730073
    28ac:	02710271 	.word	0x02710271
    28b0:	02710271 	.word	0x02710271
    28b4:	02710271 	.word	0x02710271
    28b8:	02710271 	.word	0x02710271
    28bc:	02710271 	.word	0x02710271
    28c0:	02710271 	.word	0x02710271
    28c4:	02770271 	.word	0x02770271
    28c8:	02770277 	.word	0x02770277
    28cc:	02770277 	.word	0x02770277
    28d0:	02770277 	.word	0x02770277
    28d4:	00730277 	.word	0x00730277
    28d8:	00730073 	.word	0x00730073
    28dc:	00730073 	.word	0x00730073
    28e0:	00730073 	.word	0x00730073
    28e4:	02710073 	.word	0x02710073
    28e8:	02710271 	.word	0x02710271
    28ec:	02710271 	.word	0x02710271
    28f0:	02710271 	.word	0x02710271
    28f4:	02740271 	.word	0x02740271
    28f8:	02740274 	.word	0x02740274
    28fc:	02740274 	.word	0x02740274
    2900:	02740274 	.word	0x02740274
    2904:	02770274 	.word	0x02770274
    2908:	02770277 	.word	0x02770277
    290c:	02770277 	.word	0x02770277
    2910:	00730277 	.word	0x00730277
    2914:	00730073 	.word	0x00730073
    2918:	00730073 	.word	0x00730073
    291c:	00730073 	.word	0x00730073
    2920:	02770277 	.word	0x02770277
    2924:	02770277 	.word	0x02770277
    2928:	02770277 	.word	0x02770277
    292c:	00730073 	.word	0x00730073
    2930:	00730073 	.word	0x00730073
    2934:	00730073 	.word	0x00730073
    2938:	02710271 	.word	0x02710271
    293c:	02710271 	.word	0x02710271
    2940:	02710271 	.word	0x02710271
    2944:	02740274 	.word	0x02740274
    2948:	02740274 	.word	0x02740274
    294c:	02740274 	.word	0x02740274
    2950:	02770277 	.word	0x02770277
    2954:	02770277 	.word	0x02770277
    2958:	00730277 	.word	0x00730277
    295c:	00730073 	.word	0x00730073
    2960:	00730073 	.word	0x00730073
    2964:	02710271 	.word	0x02710271
    2968:	02710271 	.word	0x02710271
    296c:	02740271 	.word	0x02740271
    2970:	02740274 	.word	0x02740274
    2974:	02740274 	.word	0x02740274
			params[i].objectNumber = 1;
    2978:	2001      	movs	r0, #1
    297a:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    297c:	ed97 0a02 	vldr	s0, [r7, #8]
    2980:	2100      	movs	r1, #0
    2982:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2984:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2988:	4798      	blx	r3
    298a:	ed97 0a03 	vldr	s0, [r7, #12]
    298e:	697b      	ldr	r3, [r7, #20]
    2990:	2101      	movs	r1, #1
    2992:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2994:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2996:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2998:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    299c:	f47f af6c 	bne.w	2878 <parsePreset+0xcf8>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    29a0:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    29a8:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29ac:	49af      	ldr	r1, [pc, #700]	; (2c6c <parsePreset+0x10ec>)
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    29ae:	ee37 7a67 	vsub.f32	s14, s14, s15
    29b2:	ed9f 5aaf 	vldr	s10, [pc, #700]	; 2c70 <parsePreset+0x10f0>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29b6:	ed91 6a38 	vldr	s12, [r1, #224]	; 0xe0
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    29ba:	eddf 5aae 	vldr	s11, [pc, #696]	; 2c74 <parsePreset+0x10f4>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29be:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    29c2:	4bad      	ldr	r3, [pc, #692]	; (2c78 <parsePreset+0x10f8>)
    29c4:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    29cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29d0:	bfcc      	ite	gt
    29d2:	2201      	movgt	r2, #1
    29d4:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    29d6:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    29da:	4ba8      	ldr	r3, [pc, #672]	; (2c7c <parsePreset+0x10fc>)
    29dc:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    29e0:	4ba7      	ldr	r3, [pc, #668]	; (2c80 <parsePreset+0x1100>)
    29e2:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    29e4:	f1ba 0f00 	cmp.w	sl, #0
    29e8:	f000 82bf 	beq.w	2f6a <parsePreset+0x13ea>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    29ec:	edd1 7a3f 	vldr	s15, [r1, #252]	; 0xfc
    29f0:	eef4 7ae6 	vcmpe.f32	s15, s13
    29f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29f8:	bfcc      	ite	gt
    29fa:	2301      	movgt	r3, #1
    29fc:	2300      	movle	r3, #0
	bufferIndex += 2;
    29fe:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2a00:	49a0      	ldr	r1, [pc, #640]	; (2c84 <parsePreset+0x1104>)
	bufferIndex += 2;
    2a02:	b2aa      	uxth	r2, r5
    2a04:	4614      	mov	r4, r2
	numMappings = 0;
    2a06:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    2a08:	700a      	strb	r2, [r1, #0]
    2a0a:	704a      	strb	r2, [r1, #1]
    2a0c:	708a      	strb	r2, [r1, #2]
    2a0e:	70ca      	strb	r2, [r1, #3]
    2a10:	710a      	strb	r2, [r1, #4]
    2a12:	714a      	strb	r2, [r1, #5]
    2a14:	718a      	strb	r2, [r1, #6]
    2a16:	71ca      	strb	r2, [r1, #7]
    2a18:	720a      	strb	r2, [r1, #8]
    2a1a:	724a      	strb	r2, [r1, #9]
    2a1c:	728a      	strb	r2, [r1, #10]
    2a1e:	72ca      	strb	r2, [r1, #11]
    2a20:	4999      	ldr	r1, [pc, #612]	; (2c88 <parsePreset+0x1108>)
    2a22:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    2a24:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    2a26:	4b99      	ldr	r3, [pc, #612]	; (2c8c <parsePreset+0x110c>)
    2a28:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    2a2a:	4b99      	ldr	r3, [pc, #612]	; (2c90 <parsePreset+0x1110>)
    2a2c:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    2a2e:	4b99      	ldr	r3, [pc, #612]	; (2c94 <parsePreset+0x1114>)
    2a30:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 12; i++)
    2a32:	4b99      	ldr	r3, [pc, #612]	; (2c98 <parsePreset+0x1118>)
    2a34:	f503 6018 	add.w	r0, r3, #2432	; 0x980
		mappings[i].destNumber = 255;
    2a38:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2a3a:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2a3c:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2a40:	4298      	cmp	r0, r3
    2a42:	d1f9      	bne.n	2a38 <parsePreset+0xeb8>
	for (int i = 0; i < mappingCount; i++)
    2a44:	9b05      	ldr	r3, [sp, #20]
    2a46:	2b00      	cmp	r3, #0
    2a48:	f000 8259 	beq.w	2efe <parsePreset+0x137e>
    2a4c:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2a4e:	4656      	mov	r6, sl
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2a50:	ed9f 8a92 	vldr	s16, [pc, #584]	; 2c9c <parsePreset+0x111c>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2a54:	46da      	mov	sl, fp
				foundOne = 1;
    2a56:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2a5a:	46a3      	mov	fp, r4
	for (int i = 0; i < mappingCount; i++)
    2a5c:	9300      	str	r3, [sp, #0]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2a5e:	f8cd 901c 	str.w	r9, [sp, #28]
		uint8_t destNumber = buffer[bufferIndex+1];
    2a62:	eb0a 030b 	add.w	r3, sl, fp
    2a66:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2a68:	2e00      	cmp	r6, #0
    2a6a:	f000 819a 	beq.w	2da2 <parsePreset+0x1222>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2a6e:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2a70:	2300      	movs	r3, #0
    2a72:	4a89      	ldr	r2, [pc, #548]	; (2c98 <parsePreset+0x1118>)
    2a74:	461f      	mov	r7, r3
    2a76:	461c      	mov	r4, r3
    2a78:	e003      	b.n	2a82 <parsePreset+0xf02>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2a7a:	3301      	adds	r3, #1
    2a7c:	324c      	adds	r2, #76	; 0x4c
    2a7e:	2b20      	cmp	r3, #32
    2a80:	d00c      	beq.n	2a9c <parsePreset+0xf1c>
			if (mappings[j].destNumber == destNumber)
    2a82:	7811      	ldrb	r1, [r2, #0]
    2a84:	4281      	cmp	r1, r0
    2a86:	d1f8      	bne.n	2a7a <parsePreset+0xefa>
				foundOne = 1;
    2a88:	2701      	movs	r7, #1
    2a8a:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2a8c:	2e00      	cmp	r6, #0
    2a8e:	d1f4      	bne.n	2a7a <parsePreset+0xefa>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2a90:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2a92:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2a96:	324c      	adds	r2, #76	; 0x4c
    2a98:	2b20      	cmp	r3, #32
    2a9a:	d1f2      	bne.n	2a82 <parsePreset+0xf02>
		if (foundOne == 0)
    2a9c:	b99f      	cbnz	r7, 2ac6 <parsePreset+0xf46>
			whichMapping = numMappings;
    2a9e:	497b      	ldr	r1, [pc, #492]	; (2c8c <parsePreset+0x110c>)
			mappings[whichMapping].dest = &params[destNumber];
    2aa0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2aa4:	9c07      	ldr	r4, [sp, #28]
			if (presetVersionNumber == 0)
    2aa6:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2aa8:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2aaa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2aae:	bf08      	it	eq
    2ab0:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2ab2:	461c      	mov	r4, r3
			numMappings++;
    2ab4:	3301      	adds	r3, #1
    2ab6:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2ab8:	234c      	movs	r3, #76	; 0x4c
    2aba:	4977      	ldr	r1, [pc, #476]	; (2c98 <parsePreset+0x1118>)
    2abc:	fb03 f304 	mul.w	r3, r3, r4
    2ac0:	54c8      	strb	r0, [r1, r3]
    2ac2:	440b      	add	r3, r1
			mappings[whichMapping].dest = &params[destNumber];
    2ac4:	605a      	str	r2, [r3, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ac6:	234c      	movs	r3, #76	; 0x4c
    2ac8:	4873      	ldr	r0, [pc, #460]	; (2c98 <parsePreset+0x1118>)
    2aca:	1c6a      	adds	r2, r5, #1
		int source = buffer[bufferIndex];
    2acc:	f81a 700b 	ldrb.w	r7, [sl, fp]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ad0:	fb03 f304 	mul.w	r3, r3, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2ad4:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ad6:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    2ada:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2ade:	4403      	add	r3, r0
    2ae0:	4401      	add	r1, r0
    2ae2:	486f      	ldr	r0, [pc, #444]	; (2ca0 <parsePreset+0x1120>)
    2ae4:	442b      	add	r3, r5
    2ae6:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    2aea:	f100 0004 	add.w	r0, r0, #4
    2aee:	60c8      	str	r0, [r1, #12]
    2af0:	496b      	ldr	r1, [pc, #428]	; (2ca0 <parsePreset+0x1120>)
    2af2:	4869      	ldr	r0, [pc, #420]	; (2c98 <parsePreset+0x1118>)
    2af4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    2af8:	5081      	str	r1, [r0, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2afa:	bfd4      	ite	le
    2afc:	2200      	movle	r2, #0
    2afe:	2201      	movgt	r2, #1
    2b00:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b04:	b23a      	sxth	r2, r7
    2b06:	f1a7 0318 	sub.w	r3, r7, #24
    2b0a:	9208      	str	r2, [sp, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2b0c:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b0e:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2b10:	9202      	str	r2, [sp, #8]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b12:	f200 813c 	bhi.w	2d8e <parsePreset+0x120e>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2b16:	4b5e      	ldr	r3, [pc, #376]	; (2c90 <parsePreset+0x1110>)
    2b18:	443b      	add	r3, r7
    2b1a:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2b1e:	2f02      	cmp	r7, #2
    2b20:	d802      	bhi.n	2b28 <parsePreset+0xfa8>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2b22:	4b60      	ldr	r3, [pc, #384]	; (2ca4 <parsePreset+0x1124>)
    2b24:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2b28:	2f03      	cmp	r7, #3
    2b2a:	f000 814b 	beq.w	2dc4 <parsePreset+0x1244>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2b2e:	3f04      	subs	r7, #4
    2b30:	2f0b      	cmp	r7, #11
    2b32:	f240 8163 	bls.w	2dfc <parsePreset+0x127c>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b36:	b2fb      	uxtb	r3, r7
    2b38:	4a5b      	ldr	r2, [pc, #364]	; (2ca8 <parsePreset+0x1128>)
    2b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b3e:	9309      	str	r3, [sp, #36]	; 0x24
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2b40:	b2fb      	uxtb	r3, r7
    2b42:	9302      	str	r3, [sp, #8]
		int scalar = buffer[bufferIndex+2];
    2b44:	eb0a 030b 	add.w	r3, sl, fp
    2b48:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2b4c:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b50:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    2b54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2b58:	fa0f f289 	sxth.w	r2, r9
    2b5c:	9304      	str	r3, [sp, #16]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2b5e:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b62:	9003      	str	r0, [sp, #12]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2b64:	9306      	str	r3, [sp, #24]
			if (scalar == 0xff)
    2b66:	f000 811e 	beq.w	2da6 <parsePreset+0x1226>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2b6a:	4b4d      	ldr	r3, [pc, #308]	; (2ca0 <parsePreset+0x1120>)
    2b6c:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b6e:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2b70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2b74:	f04f 034c 	mov.w	r3, #76	; 0x4c
    2b78:	fb03 f304 	mul.w	r3, r3, r4
    2b7c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2b80:	4945      	ldr	r1, [pc, #276]	; (2c98 <parsePreset+0x1118>)
    2b82:	440b      	add	r3, r1
    2b84:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2b86:	f200 8127 	bhi.w	2dd8 <parsePreset+0x1258>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2b8a:	4b41      	ldr	r3, [pc, #260]	; (2c90 <parsePreset+0x1110>)
    2b8c:	444b      	add	r3, r9
    2b8e:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2b92:	f1b9 0f02 	cmp.w	r9, #2
    2b96:	d802      	bhi.n	2b9e <parsePreset+0x101e>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2b98:	4b42      	ldr	r3, [pc, #264]	; (2ca4 <parsePreset+0x1124>)
    2b9a:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2b9e:	f1b9 0f03 	cmp.w	r9, #3
    2ba2:	d102      	bne.n	2baa <parsePreset+0x102a>
					noiseOn = 1;
    2ba4:	4b41      	ldr	r3, [pc, #260]	; (2cac <parsePreset+0x112c>)
    2ba6:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2baa:	2f0b      	cmp	r7, #11
    2bac:	f240 8157 	bls.w	2e5e <parsePreset+0x12de>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2bb0:	224c      	movs	r2, #76	; 0x4c
    2bb2:	00eb      	lsls	r3, r5, #3
    2bb4:	4938      	ldr	r1, [pc, #224]	; (2c98 <parsePreset+0x1118>)
    2bb6:	fb02 3304 	mla	r3, r2, r4, r3
    2bba:	9a04      	ldr	r2, [sp, #16]
    2bbc:	440b      	add	r3, r1
    2bbe:	3201      	adds	r2, #1
    2bc0:	4937      	ldr	r1, [pc, #220]	; (2ca0 <parsePreset+0x1120>)
    2bc2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2bc6:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	2b03      	cmp	r3, #3
    2bcc:	f200 810d 	bhi.w	2dea <parsePreset+0x126a>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2bd0:	4b2f      	ldr	r3, [pc, #188]	; (2c90 <parsePreset+0x1110>)
    2bd2:	444b      	add	r3, r9
    2bd4:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2bd8:	f1b9 0f02 	cmp.w	r9, #2
    2bdc:	d802      	bhi.n	2be4 <parsePreset+0x1064>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2bde:	4b31      	ldr	r3, [pc, #196]	; (2ca4 <parsePreset+0x1124>)
    2be0:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2be4:	f1b9 0f03 	cmp.w	r9, #3
    2be8:	d102      	bne.n	2bf0 <parsePreset+0x1070>
					noiseOn = 1;
    2bea:	4b30      	ldr	r3, [pc, #192]	; (2cac <parsePreset+0x112c>)
    2bec:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2bf0:	2f0b      	cmp	r7, #11
    2bf2:	f240 815f 	bls.w	2eb4 <parsePreset+0x1334>
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2bf6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    2bfa:	4927      	ldr	r1, [pc, #156]	; (2c98 <parsePreset+0x1118>)
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2bfc:	eb0a 020b 	add.w	r2, sl, fp
		mappings[whichMapping].hookActive[whichHook] = 1;
    2c00:	204c      	movs	r0, #76	; 0x4c
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2c02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2c06:	fb00 1404 	mla	r4, r0, r4, r1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2c0a:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2c0c:	4425      	add	r5, r4
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2c0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2c12:	78d1      	ldrb	r1, [r2, #3]
    2c14:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2c16:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2c1a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2c1e:	b212      	sxth	r2, r2
    2c20:	ee07 2a90 	vmov	s15, r2
    2c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c28:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2c2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2c30:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2c34:	3301      	adds	r3, #1
    2c36:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2c3a:	2e00      	cmp	r6, #0
    2c3c:	f000 80a2 	beq.w	2d84 <parsePreset+0x1204>
			bufferIndex += 6;
    2c40:	f10b 0306 	add.w	r3, fp, #6
    2c44:	fa1f fb83 	uxth.w	fp, r3
	for (int i = 0; i < mappingCount; i++)
    2c48:	9b00      	ldr	r3, [sp, #0]
    2c4a:	9a05      	ldr	r2, [sp, #20]
    2c4c:	3301      	adds	r3, #1
    2c4e:	4293      	cmp	r3, r2
    2c50:	9300      	str	r3, [sp, #0]
    2c52:	f47f af06 	bne.w	2a62 <parsePreset+0xee2>
	for (int i = 0; i < numMappings; i++)
    2c56:	4b0d      	ldr	r3, [pc, #52]	; (2c8c <parsePreset+0x110c>)
    2c58:	781a      	ldrb	r2, [r3, #0]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	f000 814f 	beq.w	2efe <parsePreset+0x137e>
    2c60:	4c13      	ldr	r4, [pc, #76]	; (2cb0 <parsePreset+0x1130>)
    2c62:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2c66:	4f13      	ldr	r7, [pc, #76]	; (2cb4 <parsePreset+0x1134>)
    2c68:	e02e      	b.n	2cc8 <parsePreset+0x1148>
    2c6a:	bf00      	nop
    2c6c:	2001a08c 	.word	0x2001a08c
    2c70:	3c010204 	.word	0x3c010204
    2c74:	42fe0000 	.word	0x42fe0000
    2c78:	20019070 	.word	0x20019070
    2c7c:	20019074 	.word	0x20019074
    2c80:	200166b9 	.word	0x200166b9
    2c84:	200053cc 	.word	0x200053cc
    2c88:	2001a19c 	.word	0x2001a19c
    2c8c:	2001907c 	.word	0x2001907c
    2c90:	2001d278 	.word	0x2001d278
    2c94:	2001d0f4 	.word	0x2001d0f4
    2c98:	200186f0 	.word	0x200186f0
    2c9c:	37fffffc 	.word	0x37fffffc
    2ca0:	2001d730 	.word	0x2001d730
    2ca4:	2001d510 	.word	0x2001d510
    2ca8:	20005430 	.word	0x20005430
    2cac:	2001d4bc 	.word	0x2001d4bc
    2cb0:	200186f8 	.word	0x200186f8
    2cb4:	20000694 	.word	0x20000694
    2cb8:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    2cbc:	f108 0801 	add.w	r8, r8, #1
    2cc0:	344c      	adds	r4, #76	; 0x4c
    2cc2:	4542      	cmp	r2, r8
    2cc4:	f340 811b 	ble.w	2efe <parsePreset+0x137e>
		if (mappings[i].destNumber != 255)
    2cc8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2ccc:	2bff      	cmp	r3, #255	; 0xff
    2cce:	d0f5      	beq.n	2cbc <parsePreset+0x113c>
			for (int v = 0; v < numStringsThisBoard; v++)
    2cd0:	783b      	ldrb	r3, [r7, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d0f2      	beq.n	2cbc <parsePreset+0x113c>
    2cd6:	4626      	mov	r6, r4
    2cd8:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2cda:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2cde:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 2cb8 <parsePreset+0x1138>
					if (mappings[i].hookActive[j])
    2ce2:	b15b      	cbz	r3, 2cfc <parsePreset+0x117c>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2ce4:	6832      	ldr	r2, [r6, #0]
    2ce6:	69f3      	ldr	r3, [r6, #28]
    2ce8:	edd2 7a00 	vldr	s15, [r2]
    2cec:	edd3 6a00 	vldr	s13, [r3]
    2cf0:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2cf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2cfc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2d00:	b15b      	cbz	r3, 2d1a <parsePreset+0x119a>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2d02:	68b2      	ldr	r2, [r6, #8]
    2d04:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2d06:	ed92 7a00 	vldr	s14, [r2]
    2d0a:	ed93 6a00 	vldr	s12, [r3]
    2d0e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2d12:	ee27 7a06 	vmul.f32	s14, s14, s12
    2d16:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    2d1a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2d1e:	b15b      	cbz	r3, 2d38 <parsePreset+0x11b8>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2d20:	6932      	ldr	r2, [r6, #16]
    2d22:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2d24:	ed92 7a00 	vldr	s14, [r2]
    2d28:	ed93 6a00 	vldr	s12, [r3]
    2d2c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2d30:	ee27 7a06 	vmul.f32	s14, s14, s12
    2d34:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2d38:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2d3c:	3604      	adds	r6, #4
    2d3e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2d42:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2d44:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2d48:	ee37 0a80 	vadd.f32	s0, s15, s0
    2d4c:	4798      	blx	r3
    2d4e:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2d52:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2d56:	4629      	mov	r1, r5
    2d58:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2d5c:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2d5e:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2d60:	ed92 0a02 	vldr	s0, [r2, #8]
    2d64:	695a      	ldr	r2, [r3, #20]
    2d66:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2d68:	783b      	ldrb	r3, [r7, #0]
    2d6a:	42ab      	cmp	r3, r5
    2d6c:	dcb5      	bgt.n	2cda <parsePreset+0x115a>
	for (int i = 0; i < numMappings; i++)
    2d6e:	4bac      	ldr	r3, [pc, #688]	; (3020 <_Min_Heap_Size+0x20>)
    2d70:	781a      	ldrb	r2, [r3, #0]
    2d72:	e7a3      	b.n	2cbc <parsePreset+0x113c>
			params[i].objectNumber = 2;
    2d74:	2002      	movs	r0, #2
    2d76:	7638      	strb	r0, [r7, #24]
    2d78:	e600      	b.n	297c <parsePreset+0xdfc>
			params[i].objectNumber = 3;
    2d7a:	2003      	movs	r0, #3
    2d7c:	7638      	strb	r0, [r7, #24]
    2d7e:	e5fd      	b.n	297c <parsePreset+0xdfc>
		if ((i >= Osc1) && (i < Osc2))
    2d80:	2000      	movs	r0, #0
    2d82:	e5fb      	b.n	297c <parsePreset+0xdfc>
			bufferIndex += 5;
    2d84:	f10b 0305 	add.w	r3, fp, #5
    2d88:	fa1f fb83 	uxth.w	fp, r3
    2d8c:	e75c      	b.n	2c48 <parsePreset+0x10c8>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2d8e:	f1a7 0314 	sub.w	r3, r7, #20
    2d92:	2b03      	cmp	r3, #3
    2d94:	f63f aec3 	bhi.w	2b1e <parsePreset+0xf9e>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    2d98:	4ba2      	ldr	r3, [pc, #648]	; (3024 <_Min_Heap_Size+0x24>)
    2d9a:	443b      	add	r3, r7
    2d9c:	f803 8c14 	strb.w	r8, [r3, #-20]
    2da0:	e6bd      	b.n	2b1e <parsePreset+0xf9e>
		uint8_t whichHook = 0;
    2da2:	4635      	mov	r5, r6
    2da4:	e664      	b.n	2a70 <parsePreset+0xef0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2da6:	234c      	movs	r3, #76	; 0x4c
    2da8:	1d29      	adds	r1, r5, #4
    2daa:	00ea      	lsls	r2, r5, #3
    2dac:	489e      	ldr	r0, [pc, #632]	; (3028 <_Min_Heap_Size+0x28>)
    2dae:	fb03 f304 	mul.w	r3, r3, r4
    2db2:	441a      	add	r2, r3
    2db4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2db8:	499c      	ldr	r1, [pc, #624]	; (302c <_Min_Heap_Size+0x2c>)
    2dba:	4402      	add	r2, r0
    2dbc:	4403      	add	r3, r0
    2dbe:	6291      	str	r1, [r2, #40]	; 0x28
    2dc0:	6059      	str	r1, [r3, #4]
    2dc2:	e718      	b.n	2bf6 <parsePreset+0x1076>
			noiseOn = 1;
    2dc4:	4b9a      	ldr	r3, [pc, #616]	; (3030 <_Min_Heap_Size+0x30>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2dc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    2dca:	f883 8000 	strb.w	r8, [r3]
    2dce:	4b99      	ldr	r3, [pc, #612]	; (3034 <_Min_Heap_Size+0x34>)
    2dd0:	9309      	str	r3, [sp, #36]	; 0x24
    2dd2:	23ff      	movs	r3, #255	; 0xff
    2dd4:	9302      	str	r3, [sp, #8]
    2dd6:	e6b5      	b.n	2b44 <parsePreset+0xfc4>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2dd8:	9b06      	ldr	r3, [sp, #24]
    2dda:	2b03      	cmp	r3, #3
    2ddc:	f63f aed9 	bhi.w	2b92 <parsePreset+0x1012>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2de0:	4b90      	ldr	r3, [pc, #576]	; (3024 <_Min_Heap_Size+0x24>)
    2de2:	444b      	add	r3, r9
    2de4:	f803 8c14 	strb.w	r8, [r3, #-20]
    2de8:	e6d3      	b.n	2b92 <parsePreset+0x1012>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2dea:	9b06      	ldr	r3, [sp, #24]
    2dec:	2b03      	cmp	r3, #3
    2dee:	f63f aef3 	bhi.w	2bd8 <parsePreset+0x1058>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2df2:	4b8c      	ldr	r3, [pc, #560]	; (3024 <_Min_Heap_Size+0x24>)
    2df4:	444b      	add	r3, r9
    2df6:	f803 8c14 	strb.w	r8, [r3, #-20]
    2dfa:	e6ed      	b.n	2bd8 <parsePreset+0x1058>
			for (int v = 0; v < numStringsThisBoard; v++)
    2dfc:	4b8e      	ldr	r3, [pc, #568]	; (3038 <_Min_Heap_Size+0x38>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2dfe:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2e02:	781a      	ldrb	r2, [r3, #0]
    2e04:	2a00      	cmp	r2, #0
    2e06:	f000 809a 	beq.w	2f3e <parsePreset+0x13be>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e0a:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2e0e:	498b      	ldr	r1, [pc, #556]	; (303c <_Min_Heap_Size+0x3c>)
    2e10:	9808      	ldr	r0, [sp, #32]
    2e12:	0092      	lsls	r2, r2, #2
    2e14:	9b07      	ldr	r3, [sp, #28]
    2e16:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e1a:	f8cd 9008 	str.w	r9, [sp, #8]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2e1e:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2e22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2e26:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2e2a:	3108      	adds	r1, #8
    2e2c:	e9cd 3c03 	strd	r3, ip, [sp, #12]
    2e30:	f007 f946 	bl	a0c0 <__memcpy_veneer>
    2e34:	f8dd c010 	ldr.w	ip, [sp, #16]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e38:	9a03      	ldr	r2, [sp, #12]
    2e3a:	eba2 030c 	sub.w	r3, r2, ip
    2e3e:	9a07      	ldr	r2, [sp, #28]
    2e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e44:	ed93 0a02 	vldr	s0, [r3, #8]
    2e48:	4b7d      	ldr	r3, [pc, #500]	; (3040 <_Min_Heap_Size+0x40>)
    2e4a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    2e4e:	4618      	mov	r0, r3
    2e50:	9309      	str	r3, [sp, #36]	; 0x24
    2e52:	f007 fa3d 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2e56:	4b7b      	ldr	r3, [pc, #492]	; (3044 <_Min_Heap_Size+0x44>)
    2e58:	f803 8009 	strb.w	r8, [r3, r9]
    2e5c:	e672      	b.n	2b44 <parsePreset+0xfc4>
					for (int v = 0; v < numStringsThisBoard; v++)
    2e5e:	4b76      	ldr	r3, [pc, #472]	; (3038 <_Min_Heap_Size+0x38>)
    2e60:	781a      	ldrb	r2, [r3, #0]
    2e62:	2a00      	cmp	r2, #0
    2e64:	f000 8083 	beq.w	2f6e <parsePreset+0x13ee>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e68:	9b02      	ldr	r3, [sp, #8]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2e6a:	0092      	lsls	r2, r2, #2
    2e6c:	4973      	ldr	r1, [pc, #460]	; (303c <_Min_Heap_Size+0x3c>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e6e:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2e72:	9808      	ldr	r0, [sp, #32]
    2e74:	9b07      	ldr	r3, [sp, #28]
    2e76:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2e7a:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2e7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2e82:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2e86:	3108      	adds	r1, #8
    2e88:	e9cd 3c0a 	strd	r3, ip, [sp, #40]	; 0x28
    2e8c:	f007 f918 	bl	a0c0 <__memcpy_veneer>
    2e90:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2e96:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e98:	eba2 030c 	sub.w	r3, r2, ip
    2e9c:	9a07      	ldr	r2, [sp, #28]
    2e9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ea2:	ed93 0a02 	vldr	s0, [r3, #8]
    2ea6:	f007 fa13 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2eaa:	4b66      	ldr	r3, [pc, #408]	; (3044 <_Min_Heap_Size+0x44>)
    2eac:	9a02      	ldr	r2, [sp, #8]
    2eae:	f803 8002 	strb.w	r8, [r3, r2]
    2eb2:	e67d      	b.n	2bb0 <parsePreset+0x1030>
					for (int v = 0; v < numStringsThisBoard; v++)
    2eb4:	4b60      	ldr	r3, [pc, #384]	; (3038 <_Min_Heap_Size+0x38>)
    2eb6:	781a      	ldrb	r2, [r3, #0]
    2eb8:	2a00      	cmp	r2, #0
    2eba:	d048      	beq.n	2f4e <parsePreset+0x13ce>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ebc:	4b5f      	ldr	r3, [pc, #380]	; (303c <_Min_Heap_Size+0x3c>)
    2ebe:	0092      	lsls	r2, r2, #2
    2ec0:	9908      	ldr	r1, [sp, #32]
    2ec2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ec6:	9b02      	ldr	r3, [sp, #8]
    2ec8:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ecc:	9b07      	ldr	r3, [sp, #28]
    2ece:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    2ed2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    2ed6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2eda:	3108      	adds	r1, #8
    2edc:	f007 f8f0 	bl	a0c0 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ee0:	9a07      	ldr	r2, [sp, #28]
    2ee2:	eba7 0309 	sub.w	r3, r7, r9
    2ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2eec:	ed93 0a02 	vldr	s0, [r3, #8]
    2ef0:	f007 f9ee 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2ef4:	4b53      	ldr	r3, [pc, #332]	; (3044 <_Min_Heap_Size+0x44>)
    2ef6:	9a02      	ldr	r2, [sp, #8]
    2ef8:	f803 8002 	strb.w	r8, [r3, r2]
    2efc:	e67b      	b.n	2bf6 <parsePreset+0x1076>
	presetWaitingToParse = 0;
    2efe:	4b52      	ldr	r3, [pc, #328]	; (3048 <_Min_Heap_Size+0x48>)
    2f00:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    2f02:	f89d 2004 	ldrb.w	r2, [sp, #4]
	overSampled = 1;
    2f06:	2501      	movs	r5, #1
	presetWaitingToParse = 0;
    2f08:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    2f0a:	4b50      	ldr	r3, [pc, #320]	; (304c <_Min_Heap_Size+0x4c>)
	changeOversampling(overSampled);
    2f0c:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    2f0e:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    2f10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    2f14:	4a4e      	ldr	r2, [pc, #312]	; (3050 <_Min_Heap_Size+0x50>)
    2f16:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    2f18:	2203      	movs	r2, #3
    2f1a:	4b4e      	ldr	r3, [pc, #312]	; (3054 <_Min_Heap_Size+0x54>)
    2f1c:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    2f1e:	4b4e      	ldr	r3, [pc, #312]	; (3058 <_Min_Heap_Size+0x58>)
    2f20:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    2f22:	f007 fa29 	bl	a378 <__changeOversampling_veneer>
    2f26:	b662      	cpsie	i
	diskBusy = 0;
    2f28:	4a4c      	ldr	r2, [pc, #304]	; (305c <_Min_Heap_Size+0x5c>)
	receivingI2C = 0;
    2f2a:	4b4d      	ldr	r3, [pc, #308]	; (3060 <_Min_Heap_Size+0x60>)
	presetReady = 1;
    2f2c:	494d      	ldr	r1, [pc, #308]	; (3064 <_Min_Heap_Size+0x64>)
	diskBusy = 0;
    2f2e:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    2f30:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    2f32:	701c      	strb	r4, [r3, #0]
}
    2f34:	b00d      	add	sp, #52	; 0x34
    2f36:	ecbd 8b02 	vpop	{d8}
    2f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f3e:	f109 0c03 	add.w	ip, r9, #3
    2f42:	f8cd 9008 	str.w	r9, [sp, #8]
    2f46:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2f4a:	9303      	str	r3, [sp, #12]
    2f4c:	e774      	b.n	2e38 <parsePreset+0x12b8>
    2f4e:	9b02      	ldr	r3, [sp, #8]
    2f50:	f103 0903 	add.w	r9, r3, #3
    2f54:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    2f58:	e7c2      	b.n	2ee0 <parsePreset+0x1360>
			oscOn[i] = 0;
    2f5a:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    2f5c:	4610      	mov	r0, r2
    2f5e:	f7ff bb2f 	b.w	25c0 <parsePreset+0xa40>
			oscOn[i] = 0;
    2f62:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    2f64:	4610      	mov	r0, r2
    2f66:	f7ff baf5 	b.w	2554 <parsePreset+0x9d4>
		pedalControlsMaster = 1;
    2f6a:	2301      	movs	r3, #1
    2f6c:	e547      	b.n	29fe <parsePreset+0xe7e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f6e:	9b02      	ldr	r3, [sp, #8]
    2f70:	f103 0c03 	add.w	ip, r3, #3
    2f74:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    2f78:	920a      	str	r2, [sp, #40]	; 0x28
    2f7a:	e78b      	b.n	2e94 <parsePreset+0x1314>
			  shapeTick[i] = &triTick;
    2f7c:	4a3a      	ldr	r2, [pc, #232]	; (3068 <_Min_Heap_Size+0x68>)
    2f7e:	483b      	ldr	r0, [pc, #236]	; (306c <_Min_Heap_Size+0x6c>)
    2f80:	6090      	str	r0, [r2, #8]
			  break;
    2f82:	f7ff bb0e 	b.w	25a2 <parsePreset+0xa22>
			  shapeTick[i] = &pulseTick;
    2f86:	4a38      	ldr	r2, [pc, #224]	; (3068 <_Min_Heap_Size+0x68>)
    2f88:	4839      	ldr	r0, [pc, #228]	; (3070 <_Min_Heap_Size+0x70>)
    2f8a:	6090      	str	r0, [r2, #8]
			  break;
    2f8c:	f7ff bb09 	b.w	25a2 <parsePreset+0xa22>
			  shapeTick[i] = &sawTick;
    2f90:	4a35      	ldr	r2, [pc, #212]	; (3068 <_Min_Heap_Size+0x68>)
    2f92:	4838      	ldr	r0, [pc, #224]	; (3074 <_Min_Heap_Size+0x74>)
    2f94:	6090      	str	r0, [r2, #8]
			  break;
    2f96:	f7ff bb04 	b.w	25a2 <parsePreset+0xa22>
			  shapeTick[i] = &sineTriTick;
    2f9a:	4a33      	ldr	r2, [pc, #204]	; (3068 <_Min_Heap_Size+0x68>)
    2f9c:	4836      	ldr	r0, [pc, #216]	; (3078 <_Min_Heap_Size+0x78>)
    2f9e:	6090      	str	r0, [r2, #8]
			  break;
    2fa0:	f7ff baff 	b.w	25a2 <parsePreset+0xa22>
			  shapeTick[i] = &sawSquareTick;
    2fa4:	4a30      	ldr	r2, [pc, #192]	; (3068 <_Min_Heap_Size+0x68>)
    2fa6:	4835      	ldr	r0, [pc, #212]	; (307c <_Min_Heap_Size+0x7c>)
    2fa8:	6090      	str	r0, [r2, #8]
			  break;
    2faa:	f7ff bafa 	b.w	25a2 <parsePreset+0xa22>
			  shapeTick[i] = &triTick;
    2fae:	4a2e      	ldr	r2, [pc, #184]	; (3068 <_Min_Heap_Size+0x68>)
    2fb0:	482e      	ldr	r0, [pc, #184]	; (306c <_Min_Heap_Size+0x6c>)
    2fb2:	6050      	str	r0, [r2, #4]
			  break;
    2fb4:	f7ff babf 	b.w	2536 <parsePreset+0x9b6>
			  shapeTick[i] = &sineTick;
    2fb8:	4a2b      	ldr	r2, [pc, #172]	; (3068 <_Min_Heap_Size+0x68>)
    2fba:	4831      	ldr	r0, [pc, #196]	; (3080 <_Min_Heap_Size+0x80>)
    2fbc:	6050      	str	r0, [r2, #4]
			  break;
    2fbe:	f7ff baba 	b.w	2536 <parsePreset+0x9b6>
			  shapeTick[i] = &pulseTick;
    2fc2:	4a29      	ldr	r2, [pc, #164]	; (3068 <_Min_Heap_Size+0x68>)
    2fc4:	482a      	ldr	r0, [pc, #168]	; (3070 <_Min_Heap_Size+0x70>)
    2fc6:	6050      	str	r0, [r2, #4]
			  break;
    2fc8:	f7ff bab5 	b.w	2536 <parsePreset+0x9b6>
			  shapeTick[i] = &sawTick;
    2fcc:	4a26      	ldr	r2, [pc, #152]	; (3068 <_Min_Heap_Size+0x68>)
    2fce:	4829      	ldr	r0, [pc, #164]	; (3074 <_Min_Heap_Size+0x74>)
    2fd0:	6050      	str	r0, [r2, #4]
			  break;
    2fd2:	f7ff bab0 	b.w	2536 <parsePreset+0x9b6>
			  shapeTick[i] = &sawSquareTick;
    2fd6:	4a24      	ldr	r2, [pc, #144]	; (3068 <_Min_Heap_Size+0x68>)
    2fd8:	4828      	ldr	r0, [pc, #160]	; (307c <_Min_Heap_Size+0x7c>)
    2fda:	6050      	str	r0, [r2, #4]
			  break;
    2fdc:	f7ff baab 	b.w	2536 <parsePreset+0x9b6>
			  shapeTick[i] = &triTick;
    2fe0:	4b21      	ldr	r3, [pc, #132]	; (3068 <_Min_Heap_Size+0x68>)
    2fe2:	4a22      	ldr	r2, [pc, #136]	; (306c <_Min_Heap_Size+0x6c>)
    2fe4:	601a      	str	r2, [r3, #0]
			  break;
    2fe6:	f7ff ba4c 	b.w	2482 <parsePreset+0x902>
			  shapeTick[i] = &sineTick;
    2fea:	4b1f      	ldr	r3, [pc, #124]	; (3068 <_Min_Heap_Size+0x68>)
    2fec:	4a24      	ldr	r2, [pc, #144]	; (3080 <_Min_Heap_Size+0x80>)
    2fee:	601a      	str	r2, [r3, #0]
			  break;
    2ff0:	f7ff ba47 	b.w	2482 <parsePreset+0x902>
			  shapeTick[i] = &pulseTick;
    2ff4:	4b1c      	ldr	r3, [pc, #112]	; (3068 <_Min_Heap_Size+0x68>)
    2ff6:	4a1e      	ldr	r2, [pc, #120]	; (3070 <_Min_Heap_Size+0x70>)
    2ff8:	601a      	str	r2, [r3, #0]
			  break;
    2ffa:	f7ff ba42 	b.w	2482 <parsePreset+0x902>
			  shapeTick[i] = &sawTick;
    2ffe:	4b1a      	ldr	r3, [pc, #104]	; (3068 <_Min_Heap_Size+0x68>)
    3000:	4a1c      	ldr	r2, [pc, #112]	; (3074 <_Min_Heap_Size+0x74>)
    3002:	601a      	str	r2, [r3, #0]
			  break;
    3004:	f7ff ba3d 	b.w	2482 <parsePreset+0x902>
			  shapeTick[i] = &sawSquareTick;
    3008:	4b17      	ldr	r3, [pc, #92]	; (3068 <_Min_Heap_Size+0x68>)
    300a:	4a1c      	ldr	r2, [pc, #112]	; (307c <_Min_Heap_Size+0x7c>)
    300c:	601a      	str	r2, [r3, #0]
			  break;
    300e:	f7ff ba38 	b.w	2482 <parsePreset+0x902>
    3012:	4c1c      	ldr	r4, [pc, #112]	; (3084 <_Min_Heap_Size+0x84>)
    3014:	f7ff b95e 	b.w	22d4 <parsePreset+0x754>
    3018:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3088 <_Min_Heap_Size+0x88>
    301c:	f7ff b948 	b.w	22b0 <parsePreset+0x730>
    3020:	2001907c 	.word	0x2001907c
    3024:	2001d0f4 	.word	0x2001d0f4
    3028:	200186f0 	.word	0x200186f0
    302c:	200008b0 	.word	0x200008b0
    3030:	2001d4bc 	.word	0x2001d4bc
    3034:	2000582c 	.word	0x2000582c
    3038:	20000694 	.word	0x20000694
    303c:	2001d730 	.word	0x2001d730
    3040:	20005430 	.word	0x20005430
    3044:	200053cc 	.word	0x200053cc
    3048:	2001a1bc 	.word	0x2001a1bc
    304c:	200008ac 	.word	0x200008ac
    3050:	200008a8 	.word	0x200008a8
    3054:	20000ae8 	.word	0x20000ae8
    3058:	20000aec 	.word	0x20000aec
    305c:	20014538 	.word	0x20014538
    3060:	2001a614 	.word	0x2001a614
    3064:	20005544 	.word	0x20005544
    3068:	2001d6b4 	.word	0x2001d6b4
    306c:	00006c61 	.word	0x00006c61
    3070:	00006bc1 	.word	0x00006bc1
    3074:	00006b81 	.word	0x00006b81
    3078:	00006b21 	.word	0x00006b21
    307c:	00006ac1 	.word	0x00006ac1
    3080:	00006c21 	.word	0x00006c21
    3084:	2001a19c 	.word	0x2001a19c
    3088:	2001908c 	.word	0x2001908c
    308c:	f3af 8000 	nop.w
    3090:	f3af 8000 	nop.w
    3094:	f3af 8000 	nop.w
    3098:	f3af 8000 	nop.w
    309c:	f3af 8000 	nop.w

000030a0 <handleSPI>:
	if (foundBrainFirmware)
    30a0:	4972      	ldr	r1, [pc, #456]	; (326c <handleSPI+0x1cc>)
	interruptChecker = 1;
    30a2:	4b73      	ldr	r3, [pc, #460]	; (3270 <handleSPI+0x1d0>)
{
    30a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    30a8:	2501      	movs	r5, #1
{
    30aa:	4604      	mov	r4, r0
    30ac:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    30b0:	780a      	ldrb	r2, [r1, #0]
{
    30b2:	b085      	sub	sp, #20
	interruptChecker = 1;
    30b4:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    30b6:	b34a      	cbz	r2, 310c <handleSPI+0x6c>
		if (brainFirmwareEndSignal)
    30b8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 3288 <handleSPI+0x1e8>
    30bc:	f8d9 0000 	ldr.w	r0, [r9]
    30c0:	2800      	cmp	r0, #0
    30c2:	d040      	beq.n	3146 <handleSPI+0xa6>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    30c4:	4b6b      	ldr	r3, [pc, #428]	; (3274 <handleSPI+0x1d4>)
    30c6:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    30c8:	4a6b      	ldr	r2, [pc, #428]	; (3278 <handleSPI+0x1d8>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    30ca:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    30cc:	4c6b      	ldr	r4, [pc, #428]	; (327c <handleSPI+0x1dc>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    30ce:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    30d0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    30d4:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    30d6:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    30d8:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    30da:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    30dc:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    30de:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    30e2:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    30e4:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    30e6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    30ea:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    30ee:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    30f2:	bf18      	it	ne
    30f4:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    30f6:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    30fa:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    30fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    3102:	b005      	add	sp, #20
    3104:	ecbd 8b02 	vpop	{d8}
    3108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    310c:	4f59      	ldr	r7, [pc, #356]	; (3274 <handleSPI+0x1d4>)
    310e:	5c3b      	ldrb	r3, [r7, r0]
    3110:	2b01      	cmp	r3, #1
    3112:	f000 80bd 	beq.w	3290 <handleSPI+0x1f0>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    3116:	2b0d      	cmp	r3, #13
    3118:	f200 8262 	bhi.w	35e0 <handleSPI+0x540>
    311c:	2b01      	cmp	r3, #1
    311e:	f240 8145 	bls.w	33ac <handleSPI+0x30c>
    3122:	3b02      	subs	r3, #2
    3124:	2b0b      	cmp	r3, #11
    3126:	f200 8141 	bhi.w	33ac <handleSPI+0x30c>
    312a:	e8df f013 	tbh	[pc, r3, lsl #1]
    312e:	065f      	.short	0x065f
    3130:	013f042f 	.word	0x013f042f
    3134:	05d0013f 	.word	0x05d0013f
    3138:	013f0543 	.word	0x013f0543
    313c:	0649013f 	.word	0x0649013f
    3140:	02ec063f 	.word	0x02ec063f
    3144:	0313      	.short	0x0313
		else if (brainFirmwareSendInProgress)
    3146:	4a4d      	ldr	r2, [pc, #308]	; (327c <handleSPI+0x1dc>)
    3148:	6813      	ldr	r3, [r2, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	f000 8260 	beq.w	3610 <handleSPI+0x570>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    3150:	4f48      	ldr	r7, [pc, #288]	; (3274 <handleSPI+0x1d4>)
    3152:	23fb      	movs	r3, #251	; 0xfb
    3154:	f8df b134 	ldr.w	fp, [pc, #308]	; 328c <handleSPI+0x1ec>
    3158:	eb07 0a04 	add.w	sl, r7, r4
    315c:	4d48      	ldr	r5, [pc, #288]	; (3280 <handleSPI+0x1e0>)
    315e:	f8db 2000 	ldr.w	r2, [fp]
    3162:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    3166:	4b47      	ldr	r3, [pc, #284]	; (3284 <handleSPI+0x1e4>)
    3168:	8819      	ldrh	r1, [r3, #0]
    316a:	e032      	b.n	31d2 <handleSPI+0x132>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    316c:	2e3a      	cmp	r6, #58	; 0x3a
    316e:	f000 8295 	beq.w	369c <handleSPI+0x5fc>
    3172:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3176:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    317a:	bf08      	it	eq
    317c:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    317e:	18ab      	adds	r3, r5, r2
    3180:	789b      	ldrb	r3, [r3, #2]
    3182:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3184:	bf08      	it	eq
    3186:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3188:	18ab      	adds	r3, r5, r2
    318a:	78db      	ldrb	r3, [r3, #3]
    318c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    318e:	bf08      	it	eq
    3190:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3192:	18ab      	adds	r3, r5, r2
    3194:	791b      	ldrb	r3, [r3, #4]
    3196:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3198:	bf08      	it	eq
    319a:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    319c:	18ab      	adds	r3, r5, r2
    319e:	795b      	ldrb	r3, [r3, #5]
    31a0:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    31a2:	bf08      	it	eq
    31a4:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    31a6:	18ab      	adds	r3, r5, r2
    31a8:	799b      	ldrb	r3, [r3, #6]
    31aa:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    31ac:	bf08      	it	eq
    31ae:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    31b0:	18ab      	adds	r3, r5, r2
    31b2:	79db      	ldrb	r3, [r3, #7]
    31b4:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    31b6:	bf08      	it	eq
    31b8:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    31ba:	18ab      	adds	r3, r5, r2
    31bc:	7a1b      	ldrb	r3, [r3, #8]
    31be:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    31c0:	bf08      	it	eq
    31c2:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    31c4:	18ab      	adds	r3, r5, r2
    31c6:	7a5b      	ldrb	r3, [r3, #9]
    31c8:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    31ca:	bf08      	it	eq
    31cc:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    31ce:	281e      	cmp	r0, #30
    31d0:	d03a      	beq.n	3248 <handleSPI+0x1a8>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    31d2:	5cae      	ldrb	r6, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    31d4:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    31d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    31dc:	f815 e00c 	ldrb.w	lr, [r5, ip]
	if (('0' <= value) && (value <= '9'))
    31e0:	b2db      	uxtb	r3, r3
    31e2:	2b09      	cmp	r3, #9
    31e4:	f240 823b 	bls.w	365e <handleSPI+0x5be>
	if (('a' <= value) && (value <= 'f'))
    31e8:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    31ec:	2b05      	cmp	r3, #5
    31ee:	f240 8249 	bls.w	3684 <handleSPI+0x5e4>
	if (('A' <= value) && (value <= 'F'))
    31f2:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    31f6:	2b05      	cmp	r3, #5
    31f8:	f240 824a 	bls.w	3690 <handleSPI+0x5f0>
    31fc:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    31fe:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    3202:	fa5f f888 	uxtb.w	r8, r8
    3206:	f1b8 0f09 	cmp.w	r8, #9
    320a:	f240 8232 	bls.w	3672 <handleSPI+0x5d2>
	if (('a' <= value) && (value <= 'f'))
    320e:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    3212:	f1b8 0f05 	cmp.w	r8, #5
    3216:	f240 822f 	bls.w	3678 <handleSPI+0x5d8>
	if (('A' <= value) && (value <= 'F'))
    321a:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    321e:	f1b8 0f05 	cmp.w	r8, #5
    3222:	d804      	bhi.n	322e <handleSPI+0x18e>
		return (uint8_t) (10 + value - 'A');
    3224:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3228:	ea43 0308 	orr.w	r3, r3, r8
    322c:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    322e:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    3232:	d29b      	bcs.n	316c <handleSPI+0xcc>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3234:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    3238:	3001      	adds	r0, #1
				positionInRowLine++;
    323a:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    323c:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    323e:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3240:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    3244:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    3246:	d1c4      	bne.n	31d2 <handleSPI+0x132>
    3248:	4b0e      	ldr	r3, [pc, #56]	; (3284 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+31] = 254;
    324a:	443c      	add	r4, r7
    324c:	f8cb 2000 	str.w	r2, [fp]
    3250:	8019      	strh	r1, [r3, #0]
    3252:	23fe      	movs	r3, #254	; 0xfe
    3254:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    3258:	4b07      	ldr	r3, [pc, #28]	; (3278 <handleSPI+0x1d8>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	4293      	cmp	r3, r2
    325e:	f63f af50 	bhi.w	3102 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    3262:	2301      	movs	r3, #1
    3264:	f8c9 3000 	str.w	r3, [r9]
    3268:	e74b      	b.n	3102 <handleSPI+0x62>
    326a:	bf00      	nop
    326c:	200166b8 	.word	0x200166b8
    3270:	200166bb 	.word	0x200166bb
    3274:	30000800 	.word	0x30000800
    3278:	200144f4 	.word	0x200144f4
    327c:	200144f0 	.word	0x200144f0
    3280:	61e00000 	.word	0x61e00000
    3284:	2001a1a4 	.word	0x2001a1a4
    3288:	200144ec 	.word	0x200144ec
    328c:	200144e8 	.word	0x200144e8
			 for (int i = 0; i < numStringsThisBoard; i++)
    3290:	4bc7      	ldr	r3, [pc, #796]	; (35b0 <handleSPI+0x510>)
    3292:	7818      	ldrb	r0, [r3, #0]
    3294:	2800      	cmp	r0, #0
    3296:	f000 8083 	beq.w	33a0 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    329a:	49c6      	ldr	r1, [pc, #792]	; (35b4 <handleSPI+0x514>)
			 uint8_t currentByte = offset+1;
    329c:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    329e:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 35b8 <handleSPI+0x518>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    32a2:	680a      	ldr	r2, [r1, #0]
    32a4:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    32a6:	eddf 6ac5 	vldr	s13, [pc, #788]	; 35bc <handleSPI+0x51c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    32aa:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    32ae:	5cd2      	ldrb	r2, [r2, r3]
    32b0:	0212      	lsls	r2, r2, #8
    32b2:	ee07 2a90 	vmov	s15, r2
    32b6:	680a      	ldr	r2, [r1, #0]
    32b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    32bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    32c0:	441a      	add	r2, r3
    32c2:	7852      	ldrb	r2, [r2, #1]
    32c4:	ee07 2a90 	vmov	s15, r2
    32c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    32cc:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    32d0:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    32d4:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    32d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    32dc:	d507      	bpl.n	32ee <handleSPI+0x24e>
    32de:	eeb5 7a40 	vcmp.f32	s14, #0.0
    32e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    32e6:	dd02      	ble.n	32ee <handleSPI+0x24e>
					stringMIDIPitches[i] = myPitch;
    32e8:	4ab5      	ldr	r2, [pc, #724]	; (35c0 <handleSPI+0x520>)
    32ea:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    32ee:	2801      	cmp	r0, #1
    32f0:	d056      	beq.n	33a0 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    32f2:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    32f4:	ed9f 6ab0 	vldr	s12, [pc, #704]	; 35b8 <handleSPI+0x518>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    32f8:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    32fa:	eddf 6ab0 	vldr	s13, [pc, #704]	; 35bc <handleSPI+0x51c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    32fe:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3302:	5cd2      	ldrb	r2, [r2, r3]
    3304:	0212      	lsls	r2, r2, #8
    3306:	ee07 2a90 	vmov	s15, r2
    330a:	680a      	ldr	r2, [r1, #0]
    330c:	3201      	adds	r2, #1
    330e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3312:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3316:	441a      	add	r2, r3
    3318:	7852      	ldrb	r2, [r2, #1]
    331a:	ee07 2a90 	vmov	s15, r2
    331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3322:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3326:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    332a:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3332:	d507      	bpl.n	3344 <handleSPI+0x2a4>
    3334:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    333c:	dd02      	ble.n	3344 <handleSPI+0x2a4>
					stringMIDIPitches[i] = myPitch;
    333e:	4aa0      	ldr	r2, [pc, #640]	; (35c0 <handleSPI+0x520>)
    3340:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3344:	2802      	cmp	r0, #2
    3346:	d02b      	beq.n	33a0 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3348:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    334a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 35bc <handleSPI+0x51c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    334e:	3202      	adds	r2, #2
    3350:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3354:	5cd2      	ldrb	r2, [r2, r3]
    3356:	0212      	lsls	r2, r2, #8
    3358:	ee07 2a90 	vmov	s15, r2
    335c:	680a      	ldr	r2, [r1, #0]
    335e:	3202      	adds	r2, #2
    3360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3364:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3368:	441a      	add	r2, r3
    336a:	7852      	ldrb	r2, [r2, #1]
    336c:	ee06 2a90 	vmov	s13, r2
    3370:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3374:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3378:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    337c:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3384:	dd09      	ble.n	339a <handleSPI+0x2fa>
    3386:	eddf 6a8c 	vldr	s13, [pc, #560]	; 35b8 <handleSPI+0x518>
    338a:	eef4 7a66 	vcmp.f32	s15, s13
    338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3392:	d502      	bpl.n	339a <handleSPI+0x2fa>
					stringMIDIPitches[i] = myPitch;
    3394:	4a8a      	ldr	r2, [pc, #552]	; (35c0 <handleSPI+0x520>)
    3396:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    339a:	2803      	cmp	r0, #3
    339c:	f040 8183 	bne.w	36a6 <handleSPI+0x606>
			 whichBar = 0;
    33a0:	4b88      	ldr	r3, [pc, #544]	; (35c4 <handleSPI+0x524>)
    33a2:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    33a4:	4620      	mov	r0, r4
			 whichBar = 0;
    33a6:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    33a8:	f7fd ffda 	bl	1360 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    33ac:	4b86      	ldr	r3, [pc, #536]	; (35c8 <handleSPI+0x528>)
    33ae:	781b      	ldrb	r3, [r3, #0]
    33b0:	2b00      	cmp	r3, #0
    33b2:	f47f aea6 	bne.w	3102 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    33b6:	4b85      	ldr	r3, [pc, #532]	; (35cc <handleSPI+0x52c>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    33b8:	443c      	add	r4, r7
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    33ba:	4a85      	ldr	r2, [pc, #532]	; (35d0 <handleSPI+0x530>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    33bc:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    33be:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    33c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    33c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    33c8:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    33ca:	4f82      	ldr	r7, [pc, #520]	; (35d4 <handleSPI+0x534>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    33cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    33d0:	0049      	lsls	r1, r1, #1
    33d2:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    33d4:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    33d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    33da:	20c8      	movs	r0, #200	; 0xc8
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    33dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    33e0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    33e4:	7849      	ldrb	r1, [r1, #1]
    33e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    33ea:	7819      	ldrb	r1, [r3, #0]
    33ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    33f0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    33f4:	7889      	ldrb	r1, [r1, #2]
    33f6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    33fa:	7819      	ldrb	r1, [r3, #0]
    33fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3400:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3404:	78c9      	ldrb	r1, [r1, #3]
    3406:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    340a:	7819      	ldrb	r1, [r3, #0]
    340c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3410:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3414:	7909      	ldrb	r1, [r1, #4]
    3416:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    341a:	7819      	ldrb	r1, [r3, #0]
    341c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3420:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3424:	7949      	ldrb	r1, [r1, #5]
    3426:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    342a:	7819      	ldrb	r1, [r3, #0]
    342c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3430:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3434:	7989      	ldrb	r1, [r1, #6]
    3436:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    343a:	7819      	ldrb	r1, [r3, #0]
    343c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3440:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3444:	79c9      	ldrb	r1, [r1, #7]
    3446:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    344a:	7819      	ldrb	r1, [r3, #0]
    344c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3450:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3454:	7a09      	ldrb	r1, [r1, #8]
    3456:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    345a:	7819      	ldrb	r1, [r3, #0]
    345c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3460:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3464:	7a49      	ldrb	r1, [r1, #9]
    3466:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    346a:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    346c:	783d      	ldrb	r5, [r7, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    346e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3472:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3476:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    347a:	7a89      	ldrb	r1, [r1, #10]
    347c:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    3480:	7819      	ldrb	r1, [r3, #0]
    3482:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3486:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    348a:	7ac9      	ldrb	r1, [r1, #11]
    348c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    3490:	7819      	ldrb	r1, [r3, #0]
    3492:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3496:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    349a:	7b09      	ldrb	r1, [r1, #12]
    349c:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    34a0:	7819      	ldrb	r1, [r3, #0]
    34a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34a6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    34aa:	eb05 0185 	add.w	r1, r5, r5, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    34ae:	3501      	adds	r5, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    34b0:	7b52      	ldrb	r2, [r2, #13]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    34b2:	781e      	ldrb	r6, [r3, #0]
				whichMacroToSendName = (whichMacroToSendName + 1);
    34b4:	b2ed      	uxtb	r5, r5
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    34b6:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    34ba:	fb00 f606 	mul.w	r6, r0, r6
    34be:	4a46      	ldr	r2, [pc, #280]	; (35d8 <handleSPI+0x538>)
    34c0:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    34c4:	5d96      	ldrb	r6, [r2, r6]
    34c6:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    34ca:	781e      	ldrb	r6, [r3, #0]
    34cc:	fb00 f606 	mul.w	r6, r0, r6
    34d0:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    34d4:	4416      	add	r6, r2
    34d6:	7876      	ldrb	r6, [r6, #1]
    34d8:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    34dc:	781e      	ldrb	r6, [r3, #0]
    34de:	fb00 f606 	mul.w	r6, r0, r6
    34e2:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    34e6:	4416      	add	r6, r2
    34e8:	78b6      	ldrb	r6, [r6, #2]
    34ea:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    34ee:	781e      	ldrb	r6, [r3, #0]
    34f0:	fb00 f606 	mul.w	r6, r0, r6
    34f4:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    34f8:	4416      	add	r6, r2
    34fa:	78f6      	ldrb	r6, [r6, #3]
    34fc:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    3500:	781e      	ldrb	r6, [r3, #0]
    3502:	fb00 f606 	mul.w	r6, r0, r6
    3506:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    350a:	4416      	add	r6, r2
    350c:	7936      	ldrb	r6, [r6, #4]
    350e:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    3512:	781e      	ldrb	r6, [r3, #0]
    3514:	fb00 f606 	mul.w	r6, r0, r6
    3518:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    351c:	4416      	add	r6, r2
    351e:	7976      	ldrb	r6, [r6, #5]
    3520:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    3524:	781e      	ldrb	r6, [r3, #0]
    3526:	fb00 f606 	mul.w	r6, r0, r6
    352a:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    352e:	4416      	add	r6, r2
    3530:	79b6      	ldrb	r6, [r6, #6]
    3532:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    3536:	781e      	ldrb	r6, [r3, #0]
    3538:	fb00 f606 	mul.w	r6, r0, r6
    353c:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    3540:	4416      	add	r6, r2
    3542:	79f6      	ldrb	r6, [r6, #7]
    3544:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3548:	781e      	ldrb	r6, [r3, #0]
    354a:	fb00 f606 	mul.w	r6, r0, r6
    354e:	eb06 0641 	add.w	r6, r6, r1, lsl #1
    3552:	4416      	add	r6, r2
    3554:	7a36      	ldrb	r6, [r6, #8]
    3556:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    355a:	781e      	ldrb	r6, [r3, #0]
    355c:	fb06 f000 	mul.w	r0, r6, r0
    3560:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    3564:	440a      	add	r2, r1
    3566:	7a52      	ldrb	r2, [r2, #9]
    3568:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    356c:	220d      	movs	r2, #13
    356e:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    3572:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    3576:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    357a:	4a18      	ldr	r2, [pc, #96]	; (35dc <handleSPI+0x53c>)
    357c:	8812      	ldrh	r2, [r2, #0]
    357e:	b292      	uxth	r2, r2
    3580:	3a00      	subs	r2, #0
    3582:	bf18      	it	ne
    3584:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 20)
    3586:	2d13      	cmp	r5, #19
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3588:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    358c:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    3590:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 20)
    3594:	d95d      	bls.n	3652 <handleSPI+0x5b2>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3596:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    3598:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    359a:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    359c:	7039      	strb	r1, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    359e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    35a2:	701a      	strb	r2, [r3, #0]
}
    35a4:	b005      	add	sp, #20
    35a6:	ecbd 8b02 	vpop	{d8}
    35aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35ae:	bf00      	nop
    35b0:	20000694 	.word	0x20000694
    35b4:	200053bc 	.word	0x200053bc
    35b8:	478bff74 	.word	0x478bff74
    35bc:	3b000080 	.word	0x3b000080
    35c0:	20014414 	.word	0x20014414
    35c4:	20014450 	.word	0x20014450
    35c8:	200144e5 	.word	0x200144e5
    35cc:	2001c7bd 	.word	0x2001c7bd
    35d0:	30042000 	.word	0x30042000
    35d4:	2001c7bc 	.word	0x2001c7bc
    35d8:	30043380 	.word	0x30043380
    35dc:	2000596a 	.word	0x2000596a
    35e0:	2bfd      	cmp	r3, #253	; 0xfd
    35e2:	f47f aee3 	bne.w	33ac <handleSPI+0x30c>
			if(writingState == ReceivingPreset)
    35e6:	4b4c      	ldr	r3, [pc, #304]	; (3718 <handleSPI+0x678>)
    35e8:	7819      	ldrb	r1, [r3, #0]
    35ea:	2902      	cmp	r1, #2
    35ec:	f47f aede 	bne.w	33ac <handleSPI+0x30c>
				 presetNumberToLoad = presetNumberToSave;
    35f0:	484a      	ldr	r0, [pc, #296]	; (371c <handleSPI+0x67c>)
				 writingState = 0;
    35f2:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    35f4:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    35f6:	4a4a      	ldr	r2, [pc, #296]	; (3720 <handleSPI+0x680>)
				 presetNumberToLoad = presetNumberToSave;
    35f8:	494a      	ldr	r1, [pc, #296]	; (3724 <handleSPI+0x684>)
    35fa:	b2db      	uxtb	r3, r3
    35fc:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    35fe:	8813      	ldrh	r3, [r2, #0]
    3600:	4949      	ldr	r1, [pc, #292]	; (3728 <handleSPI+0x688>)
    3602:	b29b      	uxth	r3, r3
    3604:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    3606:	8813      	ldrh	r3, [r2, #0]
    3608:	4a48      	ldr	r2, [pc, #288]	; (372c <handleSPI+0x68c>)
    360a:	b29b      	uxth	r3, r3
    360c:	6013      	str	r3, [r2, #0]
    360e:	e6cd      	b.n	33ac <handleSPI+0x30c>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    3610:	4b47      	ldr	r3, [pc, #284]	; (3730 <handleSPI+0x690>)
    3612:	20fc      	movs	r0, #252	; 0xfc
    3614:	4947      	ldr	r1, [pc, #284]	; (3734 <handleSPI+0x694>)
    3616:	f8df b138 	ldr.w	fp, [pc, #312]	; 3750 <handleSPI+0x6b0>
			brainFirmwareSendInProgress = 1;
    361a:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    361c:	190a      	adds	r2, r1, r4
    361e:	1c5d      	adds	r5, r3, #1
    3620:	f8db 1000 	ldr.w	r1, [fp]
    3624:	f103 0464 	add.w	r4, r3, #100	; 0x64
    3628:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    362c:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    362e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3632:	283a      	cmp	r0, #58	; 0x3a
    3634:	d101      	bne.n	363a <handleSPI+0x59a>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    3636:	3202      	adds	r2, #2
    3638:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    363a:	42a3      	cmp	r3, r4
    363c:	d1f6      	bne.n	362c <handleSPI+0x58c>
			positionInRowLine = 0;
    363e:	4b3e      	ldr	r3, [pc, #248]	; (3738 <handleSPI+0x698>)
    3640:	2200      	movs	r2, #0
    3642:	f8cb 1000 	str.w	r1, [fp]
    3646:	801a      	strh	r2, [r3, #0]
}
    3648:	b005      	add	sp, #20
    364a:	ecbd 8b02 	vpop	{d8}
    364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    3652:	703d      	strb	r5, [r7, #0]
}
    3654:	b005      	add	sp, #20
    3656:	ecbd 8b02 	vpop	{d8}
    365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (('0' <= value) && (value <= '9'))
    365e:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3662:	011b      	lsls	r3, r3, #4
	if (('0' <= value) && (value <= '9'))
    3664:	fa5f f888 	uxtb.w	r8, r8
    3668:	b2db      	uxtb	r3, r3
    366a:	f1b8 0f09 	cmp.w	r8, #9
    366e:	f63f adce 	bhi.w	320e <handleSPI+0x16e>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3672:	ea48 0303 	orr.w	r3, r8, r3
    3676:	e5da      	b.n	322e <handleSPI+0x18e>
		return (uint8_t) (10 + value - 'a');
    3678:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    367c:	ea43 0308 	orr.w	r3, r3, r8
    3680:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    3682:	e5d4      	b.n	322e <handleSPI+0x18e>
    3684:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3688:	011b      	lsls	r3, r3, #4
    368a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    368e:	e5b6      	b.n	31fe <handleSPI+0x15e>
		return (uint8_t) (10 + value - 'A');
    3690:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3694:	011b      	lsls	r3, r3, #4
    3696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    369a:	e5b0      	b.n	31fe <handleSPI+0x15e>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    369c:	18ab      	adds	r3, r5, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    369e:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    36a0:	f893 e002 	ldrb.w	lr, [r3, #2]
    36a4:	e565      	b.n	3172 <handleSPI+0xd2>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    36a6:	ed9f 6a25 	vldr	s12, [pc, #148]	; 373c <handleSPI+0x69c>
			 for (int i = 0; i < numStringsThisBoard; i++)
    36aa:	2503      	movs	r5, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    36ac:	eddf 6a24 	vldr	s13, [pc, #144]	; 3740 <handleSPI+0x6a0>
					stringMIDIPitches[i] = myPitch;
    36b0:	4e24      	ldr	r6, [pc, #144]	; (3744 <handleSPI+0x6a4>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    36b2:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    36b4:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    36b8:	442a      	add	r2, r5
    36ba:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    36be:	5cd2      	ldrb	r2, [r2, r3]
    36c0:	0212      	lsls	r2, r2, #8
    36c2:	ee07 2a90 	vmov	s15, r2
    36c6:	680a      	ldr	r2, [r1, #0]
    36c8:	442a      	add	r2, r5
    36ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    36ce:	3501      	adds	r5, #1
    36d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    36d4:	441a      	add	r2, r3
    36d6:	7852      	ldrb	r2, [r2, #1]
    36d8:	ee07 2a10 	vmov	s14, r2
    36dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    36e0:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    36e4:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    36e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
    36ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36f0:	dd06      	ble.n	3700 <handleSPI+0x660>
    36f2:	eef4 7a66 	vcmp.f32	s15, s13
    36f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36fa:	d501      	bpl.n	3700 <handleSPI+0x660>
					stringMIDIPitches[i] = myPitch;
    36fc:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3700:	4285      	cmp	r5, r0
    3702:	dbd6      	blt.n	36b2 <handleSPI+0x612>
    3704:	e64c      	b.n	33a0 <handleSPI+0x300>
			if (boardNumber == 0)
    3706:	4b10      	ldr	r3, [pc, #64]	; (3748 <handleSPI+0x6a8>)
    3708:	781b      	ldrb	r3, [r3, #0]
    370a:	2b00      	cmp	r3, #0
    370c:	f47f acf9 	bne.w	3102 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    3710:	4b0e      	ldr	r3, [pc, #56]	; (374c <handleSPI+0x6ac>)
    3712:	2201      	movs	r2, #1
    3714:	601a      	str	r2, [r3, #0]
    3716:	e64e      	b.n	33b6 <handleSPI+0x316>
    3718:	2001c7be 	.word	0x2001c7be
    371c:	2001a1b7 	.word	0x2001a1b7
    3720:	200144fc 	.word	0x200144fc
    3724:	2001a1b6 	.word	0x2001a1b6
    3728:	2001a1bc 	.word	0x2001a1bc
    372c:	2001a1c0 	.word	0x2001a1c0
    3730:	61dfffff 	.word	0x61dfffff
    3734:	30000800 	.word	0x30000800
    3738:	2001a1a4 	.word	0x2001a1a4
    373c:	3b000080 	.word	0x3b000080
    3740:	478bff74 	.word	0x478bff74
    3744:	20014414 	.word	0x20014414
    3748:	200144e5 	.word	0x200144e5
    374c:	2001a1a0 	.word	0x2001a1a0
    3750:	200144e8 	.word	0x200144e8
			 uint8_t currentByte = offset+1;
    3754:	f100 0801 	add.w	r8, r0, #1
					if (knobFrozen[whichKnob])
    3758:	4e87      	ldr	r6, [pc, #540]	; (3978 <handleSPI+0x8d8>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    375a:	fa5f f888 	uxtb.w	r8, r8
					if (knobFrozen[whichKnob])
    375e:	7b33      	ldrb	r3, [r6, #12]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3760:	f817 9008 	ldrb.w	r9, [r7, r8]
					if (knobFrozen[whichKnob])
    3764:	2b00      	cmp	r3, #0
    3766:	f000 84fe 	beq.w	4166 <handleSPI+0x10c6>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    376a:	4d84      	ldr	r5, [pc, #528]	; (397c <handleSPI+0x8dc>)
    376c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    376e:	3303      	adds	r3, #3
    3770:	4599      	cmp	r9, r3
    3772:	dc03      	bgt.n	377c <handleSPI+0x6dc>
    3774:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    3776:	3b03      	subs	r3, #3
    3778:	4599      	cmp	r9, r3
    377a:	da03      	bge.n	3784 <handleSPI+0x6e4>
							knobFrozen[whichKnob] = 0;
    377c:	2300      	movs	r3, #0
    377e:	7333      	strb	r3, [r6, #12]
							prevKnobByte[whichKnob] = newByte;
    3780:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3784:	eb07 0308 	add.w	r3, r7, r8
    3788:	f893 9001 	ldrb.w	r9, [r3, #1]
					if (knobFrozen[whichKnob])
    378c:	7b73      	ldrb	r3, [r6, #13]
    378e:	2b00      	cmp	r3, #0
    3790:	f000 84da 	beq.w	4148 <handleSPI+0x10a8>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3794:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    3796:	3303      	adds	r3, #3
    3798:	4599      	cmp	r9, r3
    379a:	dc03      	bgt.n	37a4 <handleSPI+0x704>
    379c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    379e:	3b03      	subs	r3, #3
    37a0:	4599      	cmp	r9, r3
    37a2:	da03      	bge.n	37ac <handleSPI+0x70c>
							knobFrozen[whichKnob] = 0;
    37a4:	2300      	movs	r3, #0
    37a6:	7373      	strb	r3, [r6, #13]
							prevKnobByte[whichKnob] = newByte;
    37a8:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    37ac:	eb07 0308 	add.w	r3, r7, r8
    37b0:	f893 9002 	ldrb.w	r9, [r3, #2]
					if (knobFrozen[whichKnob])
    37b4:	7bb3      	ldrb	r3, [r6, #14]
    37b6:	2b00      	cmp	r3, #0
    37b8:	f000 84b7 	beq.w	412a <handleSPI+0x108a>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    37bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    37be:	3303      	adds	r3, #3
    37c0:	4599      	cmp	r9, r3
    37c2:	dc03      	bgt.n	37cc <handleSPI+0x72c>
    37c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    37c6:	3b03      	subs	r3, #3
    37c8:	4599      	cmp	r9, r3
    37ca:	da03      	bge.n	37d4 <handleSPI+0x734>
							knobFrozen[whichKnob] = 0;
    37cc:	2300      	movs	r3, #0
    37ce:	73b3      	strb	r3, [r6, #14]
							prevKnobByte[whichKnob] = newByte;
    37d0:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    37d4:	eb07 0308 	add.w	r3, r7, r8
    37d8:	f893 9003 	ldrb.w	r9, [r3, #3]
					if (knobFrozen[whichKnob])
    37dc:	7bf3      	ldrb	r3, [r6, #15]
    37de:	2b00      	cmp	r3, #0
    37e0:	f000 8494 	beq.w	410c <handleSPI+0x106c>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    37e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    37e6:	3303      	adds	r3, #3
    37e8:	4599      	cmp	r9, r3
    37ea:	dc03      	bgt.n	37f4 <handleSPI+0x754>
    37ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    37ee:	3b03      	subs	r3, #3
    37f0:	4599      	cmp	r9, r3
    37f2:	da03      	bge.n	37fc <handleSPI+0x75c>
							knobFrozen[whichKnob] = 0;
    37f4:	2300      	movs	r3, #0
    37f6:	73f3      	strb	r3, [r6, #15]
							prevKnobByte[whichKnob] = newByte;
    37f8:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    37fc:	eb07 0308 	add.w	r3, r7, r8
    3800:	f893 9004 	ldrb.w	r9, [r3, #4]
					if (knobFrozen[whichKnob])
    3804:	7c33      	ldrb	r3, [r6, #16]
    3806:	2b00      	cmp	r3, #0
    3808:	f000 8471 	beq.w	40ee <handleSPI+0x104e>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    380c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    380e:	3303      	adds	r3, #3
    3810:	4599      	cmp	r9, r3
    3812:	dc03      	bgt.n	381c <handleSPI+0x77c>
    3814:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    3816:	3b03      	subs	r3, #3
    3818:	4599      	cmp	r9, r3
    381a:	da03      	bge.n	3824 <handleSPI+0x784>
							knobFrozen[whichKnob] = 0;
    381c:	2300      	movs	r3, #0
    381e:	7433      	strb	r3, [r6, #16]
							prevKnobByte[whichKnob] = newByte;
    3820:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3824:	eb07 0308 	add.w	r3, r7, r8
    3828:	f893 9005 	ldrb.w	r9, [r3, #5]
					if (knobFrozen[whichKnob])
    382c:	7c73      	ldrb	r3, [r6, #17]
    382e:	2b00      	cmp	r3, #0
    3830:	f000 844e 	beq.w	40d0 <handleSPI+0x1030>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3834:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3836:	3303      	adds	r3, #3
    3838:	4599      	cmp	r9, r3
    383a:	dc03      	bgt.n	3844 <handleSPI+0x7a4>
    383c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    383e:	3b03      	subs	r3, #3
    3840:	4599      	cmp	r9, r3
    3842:	da03      	bge.n	384c <handleSPI+0x7ac>
							knobFrozen[whichKnob] = 0;
    3844:	2300      	movs	r3, #0
    3846:	7473      	strb	r3, [r6, #17]
							prevKnobByte[whichKnob] = newByte;
    3848:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    384c:	eb07 0308 	add.w	r3, r7, r8
    3850:	f893 9006 	ldrb.w	r9, [r3, #6]
					if (knobFrozen[whichKnob])
    3854:	7cb3      	ldrb	r3, [r6, #18]
    3856:	2b00      	cmp	r3, #0
    3858:	f000 842b 	beq.w	40b2 <handleSPI+0x1012>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    385c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    385e:	3303      	adds	r3, #3
    3860:	4599      	cmp	r9, r3
    3862:	dc03      	bgt.n	386c <handleSPI+0x7cc>
    3864:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3866:	3b03      	subs	r3, #3
    3868:	4599      	cmp	r9, r3
    386a:	da03      	bge.n	3874 <handleSPI+0x7d4>
							knobFrozen[whichKnob] = 0;
    386c:	2300      	movs	r3, #0
    386e:	74b3      	strb	r3, [r6, #18]
							prevKnobByte[whichKnob] = newByte;
    3870:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3874:	eb07 0308 	add.w	r3, r7, r8
    3878:	f893 9007 	ldrb.w	r9, [r3, #7]
					if (knobFrozen[whichKnob])
    387c:	7cf3      	ldrb	r3, [r6, #19]
    387e:	2b00      	cmp	r3, #0
    3880:	f000 8408 	beq.w	4094 <handleSPI+0xff4>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3884:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    3886:	3303      	adds	r3, #3
    3888:	454b      	cmp	r3, r9
    388a:	db03      	blt.n	3894 <handleSPI+0x7f4>
    388c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    388e:	3b03      	subs	r3, #3
    3890:	454b      	cmp	r3, r9
    3892:	dd03      	ble.n	389c <handleSPI+0x7fc>
							knobFrozen[whichKnob] = 0;
    3894:	2300      	movs	r3, #0
    3896:	74f3      	strb	r3, [r6, #19]
							prevKnobByte[whichKnob] = newByte;
    3898:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    389c:	eb07 0308 	add.w	r3, r7, r8
    38a0:	f893 9008 	ldrb.w	r9, [r3, #8]
					if (knobFrozen[whichKnob])
    38a4:	7a33      	ldrb	r3, [r6, #8]
    38a6:	2b00      	cmp	r3, #0
    38a8:	f000 83e6 	beq.w	4078 <handleSPI+0xfd8>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    38ac:	6a2b      	ldr	r3, [r5, #32]
    38ae:	3303      	adds	r3, #3
    38b0:	4599      	cmp	r9, r3
    38b2:	dc03      	bgt.n	38bc <handleSPI+0x81c>
    38b4:	6a2b      	ldr	r3, [r5, #32]
    38b6:	3b03      	subs	r3, #3
    38b8:	4599      	cmp	r9, r3
    38ba:	da03      	bge.n	38c4 <handleSPI+0x824>
							knobFrozen[whichKnob] = 0;
    38bc:	2300      	movs	r3, #0
    38be:	7233      	strb	r3, [r6, #8]
							prevKnobByte[whichKnob] = newByte;
    38c0:	f8c5 9020 	str.w	r9, [r5, #32]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    38c4:	eb07 0308 	add.w	r3, r7, r8
    38c8:	f893 9009 	ldrb.w	r9, [r3, #9]
					if (knobFrozen[whichKnob])
    38cc:	7a73      	ldrb	r3, [r6, #9]
    38ce:	2b00      	cmp	r3, #0
    38d0:	f000 83c4 	beq.w	405c <handleSPI+0xfbc>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    38d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    38d6:	3303      	adds	r3, #3
    38d8:	4599      	cmp	r9, r3
    38da:	dc03      	bgt.n	38e4 <handleSPI+0x844>
    38dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    38de:	3b03      	subs	r3, #3
    38e0:	4599      	cmp	r9, r3
    38e2:	da03      	bge.n	38ec <handleSPI+0x84c>
							knobFrozen[whichKnob] = 0;
    38e4:	2300      	movs	r3, #0
    38e6:	7273      	strb	r3, [r6, #9]
							prevKnobByte[whichKnob] = newByte;
    38e8:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    38ec:	eb07 0308 	add.w	r3, r7, r8
    38f0:	f893 900a 	ldrb.w	r9, [r3, #10]
					if (knobFrozen[whichKnob])
    38f4:	7ab3      	ldrb	r3, [r6, #10]
    38f6:	2b00      	cmp	r3, #0
    38f8:	f000 83a2 	beq.w	4040 <handleSPI+0xfa0>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    38fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    38fe:	3303      	adds	r3, #3
    3900:	4599      	cmp	r9, r3
    3902:	dc03      	bgt.n	390c <handleSPI+0x86c>
    3904:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3906:	3b03      	subs	r3, #3
    3908:	4599      	cmp	r9, r3
    390a:	da03      	bge.n	3914 <handleSPI+0x874>
							knobFrozen[whichKnob] = 0;
    390c:	2300      	movs	r3, #0
    390e:	72b3      	strb	r3, [r6, #10]
							prevKnobByte[whichKnob] = newByte;
    3910:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3914:	44b8      	add	r8, r7
					if (knobFrozen[whichKnob])
    3916:	7af3      	ldrb	r3, [r6, #11]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3918:	f898 800b 	ldrb.w	r8, [r8, #11]
					if (knobFrozen[whichKnob])
    391c:	2b00      	cmp	r3, #0
    391e:	f000 8381 	beq.w	4024 <handleSPI+0xf84>
						if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3922:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3924:	3303      	adds	r3, #3
    3926:	4543      	cmp	r3, r8
    3928:	db03      	blt.n	3932 <handleSPI+0x892>
    392a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    392c:	3b03      	subs	r3, #3
    392e:	4543      	cmp	r3, r8
    3930:	dd03      	ble.n	393a <handleSPI+0x89a>
							knobFrozen[whichKnob] = 0;
    3932:	2300      	movs	r3, #0
    3934:	72f3      	strb	r3, [r6, #11]
							prevKnobByte[whichKnob] = newByte;
    3936:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
				currentByte += 12;
    393a:	f104 060d 	add.w	r6, r4, #13
    393e:	4d10      	ldr	r5, [pc, #64]	; (3980 <handleSPI+0x8e0>)
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3940:	ed9f 8a10 	vldr	s16, [pc, #64]	; 3984 <handleSPI+0x8e4>
    3944:	b2f6      	uxtb	r6, r6
    3946:	f105 0828 	add.w	r8, r5, #40	; 0x28
    394a:	3e01      	subs	r6, #1
    394c:	443e      	add	r6, r7
    394e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3952:	4628      	mov	r0, r5
				for (int i = 0; i < 10; i++)
    3954:	3504      	adds	r5, #4
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3956:	ee00 3a10 	vmov	s0, r3
    395a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    395e:	ee20 0a08 	vmul.f32	s0, s0, s16
    3962:	f006 fbc5 	bl	a0f0 <__tExpSmooth_setDest_veneer>
				for (int i = 0; i < 10; i++)
    3966:	45a8      	cmp	r8, r5
    3968:	d1f1      	bne.n	394e <handleSPI+0x8ae>
				whichBar = 1;
    396a:	4b07      	ldr	r3, [pc, #28]	; (3988 <handleSPI+0x8e8>)
    396c:	2201      	movs	r2, #1
				updateStateFromSPIMessage(offset);
    396e:	4620      	mov	r0, r4
				whichBar = 1;
    3970:	701a      	strb	r2, [r3, #0]
				updateStateFromSPIMessage(offset);
    3972:	f7fd fcf5 	bl	1360 <updateStateFromSPIMessage>
    3976:	e519      	b.n	33ac <handleSPI+0x30c>
    3978:	200053cc 	.word	0x200053cc
    397c:	2001a1c4 	.word	0x2001a1c4
    3980:	2000551c 	.word	0x2000551c
    3984:	3b808081 	.word	0x3b808081
    3988:	20014450 	.word	0x20014450
			 uint8_t currentByte = offset+1;
    398c:	f100 0801 	add.w	r8, r0, #1
					if (knobFrozen[i])
    3990:	4e84      	ldr	r6, [pc, #528]	; (3ba4 <handleSPI+0xb04>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3992:	fa5f f888 	uxtb.w	r8, r8
					if (knobFrozen[i])
    3996:	7833      	ldrb	r3, [r6, #0]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3998:	f817 9008 	ldrb.w	r9, [r7, r8]
					if (knobFrozen[i])
    399c:	2b00      	cmp	r3, #0
    399e:	f000 8285 	beq.w	3eac <handleSPI+0xe0c>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    39a2:	4d81      	ldr	r5, [pc, #516]	; (3ba8 <handleSPI+0xb08>)
    39a4:	682b      	ldr	r3, [r5, #0]
    39a6:	3303      	adds	r3, #3
    39a8:	454b      	cmp	r3, r9
    39aa:	db03      	blt.n	39b4 <handleSPI+0x914>
    39ac:	682b      	ldr	r3, [r5, #0]
    39ae:	3b03      	subs	r3, #3
    39b0:	454b      	cmp	r3, r9
    39b2:	dd03      	ble.n	39bc <handleSPI+0x91c>
							knobFrozen[i] = 0;
    39b4:	2300      	movs	r3, #0
    39b6:	7033      	strb	r3, [r6, #0]
							prevKnobByte[i] = newByte;
    39b8:	f8c5 9000 	str.w	r9, [r5]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    39bc:	eb07 0308 	add.w	r3, r7, r8
    39c0:	f893 9001 	ldrb.w	r9, [r3, #1]
					if (knobFrozen[i])
    39c4:	7873      	ldrb	r3, [r6, #1]
    39c6:	2b00      	cmp	r3, #0
    39c8:	f000 8262 	beq.w	3e90 <handleSPI+0xdf0>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    39cc:	686b      	ldr	r3, [r5, #4]
    39ce:	3303      	adds	r3, #3
    39d0:	4599      	cmp	r9, r3
    39d2:	dc03      	bgt.n	39dc <handleSPI+0x93c>
    39d4:	686b      	ldr	r3, [r5, #4]
    39d6:	3b03      	subs	r3, #3
    39d8:	4599      	cmp	r9, r3
    39da:	da03      	bge.n	39e4 <handleSPI+0x944>
							knobFrozen[i] = 0;
    39dc:	2300      	movs	r3, #0
    39de:	7073      	strb	r3, [r6, #1]
							prevKnobByte[i] = newByte;
    39e0:	f8c5 9004 	str.w	r9, [r5, #4]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    39e4:	eb07 0308 	add.w	r3, r7, r8
    39e8:	f893 9002 	ldrb.w	r9, [r3, #2]
					if (knobFrozen[i])
    39ec:	78b3      	ldrb	r3, [r6, #2]
    39ee:	2b00      	cmp	r3, #0
    39f0:	f000 8240 	beq.w	3e74 <handleSPI+0xdd4>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    39f4:	68ab      	ldr	r3, [r5, #8]
    39f6:	3303      	adds	r3, #3
    39f8:	454b      	cmp	r3, r9
    39fa:	db03      	blt.n	3a04 <handleSPI+0x964>
    39fc:	68ab      	ldr	r3, [r5, #8]
    39fe:	3b03      	subs	r3, #3
    3a00:	454b      	cmp	r3, r9
    3a02:	dd03      	ble.n	3a0c <handleSPI+0x96c>
							knobFrozen[i] = 0;
    3a04:	2300      	movs	r3, #0
    3a06:	70b3      	strb	r3, [r6, #2]
							prevKnobByte[i] = newByte;
    3a08:	f8c5 9008 	str.w	r9, [r5, #8]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a0c:	eb07 0308 	add.w	r3, r7, r8
    3a10:	f893 9003 	ldrb.w	r9, [r3, #3]
					if (knobFrozen[i])
    3a14:	78f3      	ldrb	r3, [r6, #3]
    3a16:	2b00      	cmp	r3, #0
    3a18:	f000 821e 	beq.w	3e58 <handleSPI+0xdb8>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3a1c:	68eb      	ldr	r3, [r5, #12]
    3a1e:	3303      	adds	r3, #3
    3a20:	4599      	cmp	r9, r3
    3a22:	dc03      	bgt.n	3a2c <handleSPI+0x98c>
    3a24:	68eb      	ldr	r3, [r5, #12]
    3a26:	3b03      	subs	r3, #3
    3a28:	4599      	cmp	r9, r3
    3a2a:	da03      	bge.n	3a34 <handleSPI+0x994>
							knobFrozen[i] = 0;
    3a2c:	2300      	movs	r3, #0
    3a2e:	70f3      	strb	r3, [r6, #3]
							prevKnobByte[i] = newByte;
    3a30:	f8c5 900c 	str.w	r9, [r5, #12]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a34:	eb07 0308 	add.w	r3, r7, r8
    3a38:	f893 9004 	ldrb.w	r9, [r3, #4]
					if (knobFrozen[i])
    3a3c:	7933      	ldrb	r3, [r6, #4]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	f000 82e0 	beq.w	4004 <handleSPI+0xf64>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3a44:	692b      	ldr	r3, [r5, #16]
    3a46:	3303      	adds	r3, #3
    3a48:	4599      	cmp	r9, r3
    3a4a:	dc03      	bgt.n	3a54 <handleSPI+0x9b4>
    3a4c:	692b      	ldr	r3, [r5, #16]
    3a4e:	3b03      	subs	r3, #3
    3a50:	4599      	cmp	r9, r3
    3a52:	da03      	bge.n	3a5c <handleSPI+0x9bc>
							knobFrozen[i] = 0;
    3a54:	2300      	movs	r3, #0
    3a56:	7133      	strb	r3, [r6, #4]
							prevKnobByte[i] = newByte;
    3a58:	f8c5 9010 	str.w	r9, [r5, #16]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a5c:	eb07 0308 	add.w	r3, r7, r8
    3a60:	f893 9005 	ldrb.w	r9, [r3, #5]
					if (knobFrozen[i])
    3a64:	7973      	ldrb	r3, [r6, #5]
    3a66:	2b00      	cmp	r3, #0
    3a68:	f000 82be 	beq.w	3fe8 <handleSPI+0xf48>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3a6c:	696b      	ldr	r3, [r5, #20]
    3a6e:	3303      	adds	r3, #3
    3a70:	4599      	cmp	r9, r3
    3a72:	dc03      	bgt.n	3a7c <handleSPI+0x9dc>
    3a74:	696b      	ldr	r3, [r5, #20]
    3a76:	3b03      	subs	r3, #3
    3a78:	4599      	cmp	r9, r3
    3a7a:	da03      	bge.n	3a84 <handleSPI+0x9e4>
							knobFrozen[i] = 0;
    3a7c:	2300      	movs	r3, #0
    3a7e:	7173      	strb	r3, [r6, #5]
							prevKnobByte[i] = newByte;
    3a80:	f8c5 9014 	str.w	r9, [r5, #20]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a84:	eb07 0308 	add.w	r3, r7, r8
    3a88:	f893 9006 	ldrb.w	r9, [r3, #6]
					if (knobFrozen[i])
    3a8c:	79b3      	ldrb	r3, [r6, #6]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	f000 829c 	beq.w	3fcc <handleSPI+0xf2c>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3a94:	69ab      	ldr	r3, [r5, #24]
    3a96:	3303      	adds	r3, #3
    3a98:	4599      	cmp	r9, r3
    3a9a:	dc03      	bgt.n	3aa4 <handleSPI+0xa04>
    3a9c:	69ab      	ldr	r3, [r5, #24]
    3a9e:	3b03      	subs	r3, #3
    3aa0:	4599      	cmp	r9, r3
    3aa2:	da03      	bge.n	3aac <handleSPI+0xa0c>
							knobFrozen[i] = 0;
    3aa4:	2300      	movs	r3, #0
    3aa6:	71b3      	strb	r3, [r6, #6]
							prevKnobByte[i] = newByte;
    3aa8:	f8c5 9018 	str.w	r9, [r5, #24]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3aac:	eb07 0308 	add.w	r3, r7, r8
    3ab0:	f893 9007 	ldrb.w	r9, [r3, #7]
					if (knobFrozen[i])
    3ab4:	79f3      	ldrb	r3, [r6, #7]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	f000 827a 	beq.w	3fb0 <handleSPI+0xf10>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3abc:	69eb      	ldr	r3, [r5, #28]
    3abe:	3303      	adds	r3, #3
    3ac0:	454b      	cmp	r3, r9
    3ac2:	db03      	blt.n	3acc <handleSPI+0xa2c>
    3ac4:	69eb      	ldr	r3, [r5, #28]
    3ac6:	3b03      	subs	r3, #3
    3ac8:	454b      	cmp	r3, r9
    3aca:	dd03      	ble.n	3ad4 <handleSPI+0xa34>
							knobFrozen[i] = 0;
    3acc:	2300      	movs	r3, #0
    3ace:	71f3      	strb	r3, [r6, #7]
							prevKnobByte[i] = newByte;
    3ad0:	f8c5 901c 	str.w	r9, [r5, #28]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3ad4:	eb07 0308 	add.w	r3, r7, r8
    3ad8:	f893 9008 	ldrb.w	r9, [r3, #8]
					if (knobFrozen[i])
    3adc:	7a33      	ldrb	r3, [r6, #8]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	f000 8258 	beq.w	3f94 <handleSPI+0xef4>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3ae4:	6a2b      	ldr	r3, [r5, #32]
    3ae6:	3303      	adds	r3, #3
    3ae8:	4599      	cmp	r9, r3
    3aea:	dc03      	bgt.n	3af4 <handleSPI+0xa54>
    3aec:	6a2b      	ldr	r3, [r5, #32]
    3aee:	3b03      	subs	r3, #3
    3af0:	4599      	cmp	r9, r3
    3af2:	da03      	bge.n	3afc <handleSPI+0xa5c>
							knobFrozen[i] = 0;
    3af4:	2300      	movs	r3, #0
    3af6:	7233      	strb	r3, [r6, #8]
							prevKnobByte[i] = newByte;
    3af8:	f8c5 9020 	str.w	r9, [r5, #32]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3afc:	eb07 0308 	add.w	r3, r7, r8
    3b00:	f893 9009 	ldrb.w	r9, [r3, #9]
					if (knobFrozen[i])
    3b04:	7a73      	ldrb	r3, [r6, #9]
    3b06:	2b00      	cmp	r3, #0
    3b08:	f000 8236 	beq.w	3f78 <handleSPI+0xed8>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b0e:	3303      	adds	r3, #3
    3b10:	4599      	cmp	r9, r3
    3b12:	dc03      	bgt.n	3b1c <handleSPI+0xa7c>
    3b14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b16:	3b03      	subs	r3, #3
    3b18:	454b      	cmp	r3, r9
    3b1a:	dd03      	ble.n	3b24 <handleSPI+0xa84>
							knobFrozen[i] = 0;
    3b1c:	2300      	movs	r3, #0
    3b1e:	7273      	strb	r3, [r6, #9]
							prevKnobByte[i] = newByte;
    3b20:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3b24:	eb07 0308 	add.w	r3, r7, r8
    3b28:	f893 900a 	ldrb.w	r9, [r3, #10]
					if (knobFrozen[i])
    3b2c:	7ab3      	ldrb	r3, [r6, #10]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	f000 8214 	beq.w	3f5c <handleSPI+0xebc>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3b34:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b36:	3303      	adds	r3, #3
    3b38:	454b      	cmp	r3, r9
    3b3a:	db03      	blt.n	3b44 <handleSPI+0xaa4>
    3b3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b3e:	3b03      	subs	r3, #3
    3b40:	454b      	cmp	r3, r9
    3b42:	dd03      	ble.n	3b4c <handleSPI+0xaac>
							knobFrozen[i] = 0;
    3b44:	2300      	movs	r3, #0
    3b46:	72b3      	strb	r3, [r6, #10]
							prevKnobByte[i] = newByte;
    3b48:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3b4c:	44b8      	add	r8, r7
					if (knobFrozen[i])
    3b4e:	7af3      	ldrb	r3, [r6, #11]
					int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3b50:	f898 800b 	ldrb.w	r8, [r8, #11]
					if (knobFrozen[i])
    3b54:	2b00      	cmp	r3, #0
    3b56:	f000 81f3 	beq.w	3f40 <handleSPI+0xea0>
						if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3b5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3b5c:	3303      	adds	r3, #3
    3b5e:	4543      	cmp	r3, r8
    3b60:	db03      	blt.n	3b6a <handleSPI+0xaca>
    3b62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3b64:	3b03      	subs	r3, #3
    3b66:	4543      	cmp	r3, r8
    3b68:	dd03      	ble.n	3b72 <handleSPI+0xad2>
							knobFrozen[i] = 0;
    3b6a:	2300      	movs	r3, #0
    3b6c:	72f3      	strb	r3, [r6, #11]
							prevKnobByte[i] = newByte;
    3b6e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
				currentByte += 12;
    3b72:	f104 060d 	add.w	r6, r4, #13
    3b76:	4d0d      	ldr	r5, [pc, #52]	; (3bac <handleSPI+0xb0c>)
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3b78:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 3bb0 <handleSPI+0xb10>
    3b7c:	b2f6      	uxtb	r6, r6
    3b7e:	f105 0828 	add.w	r8, r5, #40	; 0x28
    3b82:	3e01      	subs	r6, #1
    3b84:	443e      	add	r6, r7
    3b86:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3b8a:	4628      	mov	r0, r5
				for (int i = 0; i < 10; i++)
    3b8c:	3504      	adds	r5, #4
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3b8e:	ee00 3a10 	vmov	s0, r3
    3b92:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3b96:	ee20 0a08 	vmul.f32	s0, s0, s16
    3b9a:	f006 faa9 	bl	a0f0 <__tExpSmooth_setDest_veneer>
				for (int i = 0; i < 10; i++)
    3b9e:	4545      	cmp	r5, r8
    3ba0:	d1f1      	bne.n	3b86 <handleSPI+0xae6>
    3ba2:	e6e2      	b.n	396a <handleSPI+0x8ca>
    3ba4:	200053cc 	.word	0x200053cc
    3ba8:	2001a1c4 	.word	0x2001a1c4
    3bac:	2000551c 	.word	0x2000551c
    3bb0:	3b808081 	.word	0x3b808081
			if (presetReady)
    3bb4:	4bc5      	ldr	r3, [pc, #788]	; (3ecc <handleSPI+0xe2c>)
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	2b00      	cmp	r3, #0
    3bba:	f43f abf7 	beq.w	33ac <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    3bbe:	1c43      	adds	r3, r0, #1
    3bc0:	f8df 8370 	ldr.w	r8, [pc, #880]	; 3f34 <handleSPI+0xe94>
				uint8_t foundOne = 0;
    3bc4:	f04f 0c00 	mov.w	ip, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3bc8:	f04f 0a20 	mov.w	sl, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3bcc:	b2db      	uxtb	r3, r3
    3bce:	5cf9      	ldrb	r1, [r7, r3]
    3bd0:	443b      	add	r3, r7
    3bd2:	785d      	ldrb	r5, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bd4:	795e      	ldrb	r6, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3bd6:	eb05 2501 	add.w	r5, r5, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bda:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    3bdc:	f893 e002 	ldrb.w	lr, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3be0:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3be4:	f893 9003 	ldrb.w	r9, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3be8:	b2ad      	uxth	r5, r5
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bea:	4641      	mov	r1, r8
    3bec:	b236      	sxth	r6, r6
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bee:	4663      	mov	r3, ip
					if (mappings[j].destNumber == destNumber)
    3bf0:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bf2:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    3bf4:	4285      	cmp	r5, r0
    3bf6:	d102      	bne.n	3bfe <handleSPI+0xb5e>
						whichMapping = j;
    3bf8:	b2da      	uxtb	r2, r3
						foundOne = 1;
    3bfa:	f04f 0c01 	mov.w	ip, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    3bfe:	28ff      	cmp	r0, #255	; 0xff
    3c00:	d103      	bne.n	3c0a <handleSPI+0xb6a>
    3c02:	459a      	cmp	sl, r3
    3c04:	bfc8      	it	gt
    3c06:	fa5f fa83 	uxtbgt.w	sl, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3c0a:	3301      	adds	r3, #1
    3c0c:	2b20      	cmp	r3, #32
    3c0e:	d1ef      	bne.n	3bf0 <handleSPI+0xb50>
				if (foundOne == 0)
    3c10:	f1bc 0f00 	cmp.w	ip, #0
    3c14:	d110      	bne.n	3c38 <handleSPI+0xb98>
					numMappings++;
    3c16:	49ae      	ldr	r1, [pc, #696]	; (3ed0 <handleSPI+0xe30>)
					mappings[whichMapping].destNumber = destNumber;
    3c18:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    3c1a:	4652      	mov	r2, sl
					numMappings++;
    3c1c:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    3c1e:	fb03 f30a 	mul.w	r3, r3, sl
					numMappings++;
    3c22:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    3c24:	f808 5003 	strb.w	r5, [r8, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3c28:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    3c2c:	4443      	add	r3, r8
					numMappings++;
    3c2e:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    3c30:	49a8      	ldr	r1, [pc, #672]	; (3ed4 <handleSPI+0xe34>)
    3c32:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    3c36:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    3c38:	f1b9 0f00 	cmp.w	r9, #0
    3c3c:	f040 82a3 	bne.w	4186 <handleSPI+0x10e6>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3c40:	234c      	movs	r3, #76	; 0x4c
    3c42:	2001      	movs	r0, #1
					if (source == 255)
    3c44:	2eff      	cmp	r6, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3c46:	fb02 f303 	mul.w	r3, r2, r3
    3c4a:	eb08 0a03 	add.w	sl, r8, r3
    3c4e:	eb0a 050e 	add.w	r5, sl, lr
    3c52:	f885 0020 	strb.w	r0, [r5, #32]
					if (source == 255)
    3c56:	f000 84f5 	beq.w	4644 <handleSPI+0x15a4>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c5a:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 3f38 <handleSPI+0xe98>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c5e:	f10e 0104 	add.w	r1, lr, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c62:	f10e 0a01 	add.w	sl, lr, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3c66:	2e03      	cmp	r6, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c68:	eb0c 0bc6 	add.w	fp, ip, r6, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c6c:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 3f3c <handleSPI+0xe9c>
    3c70:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3c74:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c78:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    3c7c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c80:	4441      	add	r1, r8
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c82:	f848 b00a 	str.w	fp, [r8, sl]
    3c86:	f10b 0b04 	add.w	fp, fp, #4
    3c8a:	4443      	add	r3, r8
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c8c:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c90:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c94:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3c98:	f340 848b 	ble.w	45b2 <handleSPI+0x1512>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3c9c:	f1a6 0318 	sub.w	r3, r6, #24
    3ca0:	2b03      	cmp	r3, #3
    3ca2:	f200 8528 	bhi.w	46f6 <handleSPI+0x1656>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3ca6:	4b8c      	ldr	r3, [pc, #560]	; (3ed8 <handleSPI+0xe38>)
    3ca8:	4433      	add	r3, r6
    3caa:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3cae:	2e03      	cmp	r6, #3
    3cb0:	d102      	bne.n	3cb8 <handleSPI+0xc18>
							noiseOn = 1;
    3cb2:	4b8a      	ldr	r3, [pc, #552]	; (3edc <handleSPI+0xe3c>)
    3cb4:	2101      	movs	r1, #1
    3cb6:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3cb8:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3cbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3cc0:	2200      	movs	r2, #0
    3cc2:	4473      	add	r3, lr
    3cc4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    3cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    3cca:	f7ff bb6f 	b.w	33ac <handleSPI+0x30c>
			if (presetReady)
    3cce:	4b7f      	ldr	r3, [pc, #508]	; (3ecc <handleSPI+0xe2c>)
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	f43f ab6a 	beq.w	33ac <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    3cd8:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3cda:	ed9f 7a81 	vldr	s14, [pc, #516]	; 3ee0 <handleSPI+0xe40>
    3cde:	4e7d      	ldr	r6, [pc, #500]	; (3ed4 <handleSPI+0xe34>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3ce0:	b2db      	uxtb	r3, r3
    3ce2:	18fa      	adds	r2, r7, r3
    3ce4:	5cfb      	ldrb	r3, [r7, r3]
    3ce6:	7855      	ldrb	r5, [r2, #1]
    3ce8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
				currentByte = currentByte + 2;
    3cec:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3cee:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3cf0:	b2ad      	uxth	r5, r5
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3cf2:	18f9      	adds	r1, r7, r3
    3cf4:	5cfa      	ldrb	r2, [r7, r3]
    3cf6:	f1a5 083f 	sub.w	r8, r5, #63	; 0x3f
    3cfa:	784b      	ldrb	r3, [r1, #1]
    3cfc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    3d00:	fa1f f288 	uxth.w	r2, r8
    3d04:	ee07 3a90 	vmov	s15, r3
    3d08:	00eb      	lsls	r3, r5, #3
    3d0a:	2a18      	cmp	r2, #24
    3d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d10:	9301      	str	r3, [sp, #4]
    3d12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    3d16:	ee67 7a87 	vmul.f32	s15, s15, s14
    3d1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3d1e:	edc3 7a00 	vstr	s15, [r3]
    3d22:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    3d26:	d805      	bhi.n	3d34 <handleSPI+0xc94>
    3d28:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    3d2c:	40d3      	lsrs	r3, r2
    3d2e:	07d9      	lsls	r1, r3, #31
    3d30:	f100 8270 	bmi.w	4214 <handleSPI+0x1174>
    3d34:	00eb      	lsls	r3, r5, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d36:	f04f 0b00 	mov.w	fp, #0
    3d3a:	46a1      	mov	r9, r4
    3d3c:	eba3 0805 	sub.w	r8, r3, r5
    3d40:	465c      	mov	r4, fp
    3d42:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3d46:	46c2      	mov	sl, r8
    3d48:	ecb8 0a01 	vldmia	r8!, {s0}
    3d4c:	f8da 3010 	ldr.w	r3, [sl, #16]
    3d50:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3d52:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3d54:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3d58:	f8da 3014 	ldr.w	r3, [sl, #20]
    3d5c:	f89a 0018 	ldrb.w	r0, [sl, #24]
    3d60:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3d62:	2c00      	cmp	r4, #0
    3d64:	d076      	beq.n	3e54 <handleSPI+0xdb4>
    3d66:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    3d6a:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    3d6c:	b299      	uxth	r1, r3
    3d6e:	291a      	cmp	r1, #26
    3d70:	d804      	bhi.n	3d7c <handleSPI+0xcdc>
    3d72:	4a5c      	ldr	r2, [pc, #368]	; (3ee4 <handleSPI+0xe44>)
    3d74:	40ca      	lsrs	r2, r1
    3d76:	07d2      	lsls	r2, r2, #31
    3d78:	f100 838a 	bmi.w	4490 <handleSPI+0x13f0>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3d7c:	f1a5 0218 	sub.w	r2, r5, #24
    3d80:	b291      	uxth	r1, r2
    3d82:	291a      	cmp	r1, #26
    3d84:	f240 82ae 	bls.w	42e4 <handleSPI+0x1244>
				if ((whichParam == Noise))
    3d88:	2d12      	cmp	r5, #18
    3d8a:	f040 83b9 	bne.w	4500 <handleSPI+0x1460>
					if (params[whichParam].realVal[0]  > 0.5f)
    3d8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3d92:	ed96 7a80 	vldr	s14, [r6, #512]	; 0x200
    3d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d9e:	f77f ab05 	ble.w	33ac <handleSPI+0x30c>
						noiseOn = 1;
    3da2:	4b4e      	ldr	r3, [pc, #312]	; (3edc <handleSPI+0xe3c>)
    3da4:	2201      	movs	r2, #1
    3da6:	701a      	strb	r2, [r3, #0]
    3da8:	f7ff bb00 	b.w	33ac <handleSPI+0x30c>
			if (boardNumber == 0)
    3dac:	4b4e      	ldr	r3, [pc, #312]	; (3ee8 <handleSPI+0xe48>)
    3dae:	781b      	ldrb	r3, [r3, #0]
    3db0:	2b00      	cmp	r3, #0
    3db2:	f47f a9a6 	bne.w	3102 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    3db6:	4b4d      	ldr	r3, [pc, #308]	; (3eec <handleSPI+0xe4c>)
    3db8:	2201      	movs	r2, #1
    3dba:	601a      	str	r2, [r3, #0]
    3dbc:	f7ff bafb 	b.w	33b6 <handleSPI+0x316>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3dc0:	183b      	adds	r3, r7, r0
    3dc2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 3ef0 <handleSPI+0xe50>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3dc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3dca:	4a4a      	ldr	r2, [pc, #296]	; (3ef4 <handleSPI+0xe54>)
    3dcc:	785b      	ldrb	r3, [r3, #1]
    3dce:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3dd2:	4b49      	ldr	r3, [pc, #292]	; (3ef8 <handleSPI+0xe58>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3dd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3de0:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3de4:	ed83 7a00 	vstr	s14, [r3]
    3de8:	f7ff bae0 	b.w	33ac <handleSPI+0x30c>
			 if (writingState != ReceivingPreset)
    3dec:	4a43      	ldr	r2, [pc, #268]	; (3efc <handleSPI+0xe5c>)
    3dee:	7813      	ldrb	r3, [r2, #0]
    3df0:	2b02      	cmp	r3, #2
    3df2:	f000 8115 	beq.w	4020 <handleSPI+0xf80>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    3df6:	4b42      	ldr	r3, [pc, #264]	; (3f00 <handleSPI+0xe60>)
    3df8:	2102      	movs	r1, #2
    3dfa:	0758      	lsls	r0, r3, #29
    3dfc:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    3dfe:	f040 83e5 	bne.w	45cc <handleSPI+0x152c>
    3e02:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    3e06:	2000      	movs	r0, #0
    3e08:	2100      	movs	r1, #0
    3e0a:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    3e0e:	4293      	cmp	r3, r2
    3e10:	d1fb      	bne.n	3e0a <handleSPI+0xd6a>
				 diskBusy = 1;
    3e12:	4a3c      	ldr	r2, [pc, #240]	; (3f04 <handleSPI+0xe64>)
    3e14:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    3e16:	4b3c      	ldr	r3, [pc, #240]	; (3f08 <handleSPI+0xe68>)
				 diskBusy = 1;
    3e18:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    3e1a:	2200      	movs	r2, #0
				 bufferPos = 0;
    3e1c:	493b      	ldr	r1, [pc, #236]	; (3f0c <handleSPI+0xe6c>)
				 audioMasterLevel = 0.0f;
    3e1e:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    3e20:	2300      	movs	r3, #0
    3e22:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    3e24:	193b      	adds	r3, r7, r4
    3e26:	4a3a      	ldr	r2, [pc, #232]	; (3f10 <handleSPI+0xe70>)
    3e28:	4d3a      	ldr	r5, [pc, #232]	; (3f14 <handleSPI+0xe74>)
    3e2a:	785b      	ldrb	r3, [r3, #1]
    3e2c:	4e3a      	ldr	r6, [pc, #232]	; (3f18 <handleSPI+0xe78>)
    3e2e:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    3e30:	1ca3      	adds	r3, r4, #2
    3e32:	b2db      	uxtb	r3, r3
    3e34:	1e5a      	subs	r2, r3, #1
    3e36:	441d      	add	r5, r3
    3e38:	443a      	add	r2, r7
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3e3a:	880b      	ldrh	r3, [r1, #0]
    3e3c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3e40:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    3e42:	42aa      	cmp	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3e44:	54f0      	strb	r0, [r6, r3]
    3e46:	f103 0301 	add.w	r3, r3, #1
    3e4a:	b29b      	uxth	r3, r3
    3e4c:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    3e4e:	d1f4      	bne.n	3e3a <handleSPI+0xd9a>
    3e50:	f7ff baac 	b.w	33ac <handleSPI+0x30c>
    3e54:	2401      	movs	r4, #1
    3e56:	e777      	b.n	3d48 <handleSPI+0xca8>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e58:	ee07 9a90 	vmov	s15, r9
    3e5c:	482f      	ldr	r0, [pc, #188]	; (3f1c <handleSPI+0xe7c>)
    3e5e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e62:	eddf 7a2f 	vldr	s15, [pc, #188]	; 3f20 <handleSPI+0xe80>
    3e66:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e6a:	f006 f941 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3e6e:	f8c5 900c 	str.w	r9, [r5, #12]
    3e72:	e5df      	b.n	3a34 <handleSPI+0x994>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e74:	ee07 9a90 	vmov	s15, r9
    3e78:	482a      	ldr	r0, [pc, #168]	; (3f24 <handleSPI+0xe84>)
    3e7a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e7e:	eddf 7a28 	vldr	s15, [pc, #160]	; 3f20 <handleSPI+0xe80>
    3e82:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e86:	f006 f933 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3e8a:	f8c5 9008 	str.w	r9, [r5, #8]
    3e8e:	e5bd      	b.n	3a0c <handleSPI+0x96c>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e90:	ee07 9a90 	vmov	s15, r9
    3e94:	4824      	ldr	r0, [pc, #144]	; (3f28 <handleSPI+0xe88>)
    3e96:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e9a:	eddf 7a21 	vldr	s15, [pc, #132]	; 3f20 <handleSPI+0xe80>
    3e9e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ea2:	f006 f925 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3ea6:	f8c5 9004 	str.w	r9, [r5, #4]
    3eaa:	e59b      	b.n	39e4 <handleSPI+0x944>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3eac:	ee07 9a90 	vmov	s15, r9
						prevKnobByte[i] = newByte;
    3eb0:	4d1e      	ldr	r5, [pc, #120]	; (3f2c <handleSPI+0xe8c>)
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3eb2:	481f      	ldr	r0, [pc, #124]	; (3f30 <handleSPI+0xe90>)
    3eb4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3eb8:	eddf 7a19 	vldr	s15, [pc, #100]	; 3f20 <handleSPI+0xe80>
    3ebc:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ec0:	f006 f916 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3ec4:	f8c5 9000 	str.w	r9, [r5]
    3ec8:	e578      	b.n	39bc <handleSPI+0x91c>
    3eca:	bf00      	nop
    3ecc:	20005544 	.word	0x20005544
    3ed0:	2001907c 	.word	0x2001907c
    3ed4:	2001908c 	.word	0x2001908c
    3ed8:	2001d278 	.word	0x2001d278
    3edc:	2001d4bc 	.word	0x2001d4bc
    3ee0:	377ffff6 	.word	0x377ffff6
    3ee4:	04002001 	.word	0x04002001
    3ee8:	200144e5 	.word	0x200144e5
    3eec:	200144f8 	.word	0x200144f8
    3ef0:	3c23d70a 	.word	0x3c23d70a
    3ef4:	2000068c 	.word	0x2000068c
    3ef8:	20000690 	.word	0x20000690
    3efc:	2001c7be 	.word	0x2001c7be
    3f00:	30000000 	.word	0x30000000
    3f04:	20014538 	.word	0x20014538
    3f08:	200008a8 	.word	0x200008a8
    3f0c:	200144fc 	.word	0x200144fc
    3f10:	2001a1b7 	.word	0x2001a1b7
    3f14:	3000081b 	.word	0x3000081b
    3f18:	30042380 	.word	0x30042380
    3f1c:	2000543c 	.word	0x2000543c
    3f20:	3b808081 	.word	0x3b808081
    3f24:	20005438 	.word	0x20005438
    3f28:	20005434 	.word	0x20005434
    3f2c:	2001a1c4 	.word	0x2001a1c4
    3f30:	20005430 	.word	0x20005430
    3f34:	200186f0 	.word	0x200186f0
    3f38:	2001d730 	.word	0x2001d730
    3f3c:	200008b0 	.word	0x200008b0
						tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    3f40:	ee07 8a90 	vmov	s15, r8
    3f44:	48cf      	ldr	r0, [pc, #828]	; (4284 <handleSPI+0x11e4>)
    3f46:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3f4a:	eddf 7acf 	vldr	s15, [pc, #828]	; 4288 <handleSPI+0x11e8>
    3f4e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f52:	f006 f8cd 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3f56:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    3f5a:	e60a      	b.n	3b72 <handleSPI+0xad2>
						tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    3f5c:	ee07 9a90 	vmov	s15, r9
    3f60:	48ca      	ldr	r0, [pc, #808]	; (428c <handleSPI+0x11ec>)
    3f62:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3f66:	eddf 7ac8 	vldr	s15, [pc, #800]	; 4288 <handleSPI+0x11e8>
    3f6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f6e:	f006 f8bf 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3f72:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    3f76:	e5e9      	b.n	3b4c <handleSPI+0xaac>
						tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    3f78:	ee07 9a90 	vmov	s15, r9
    3f7c:	48c4      	ldr	r0, [pc, #784]	; (4290 <handleSPI+0x11f0>)
    3f7e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3f82:	eddf 7ac1 	vldr	s15, [pc, #772]	; 4288 <handleSPI+0x11e8>
    3f86:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f8a:	f006 f8b1 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3f8e:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    3f92:	e5c7      	b.n	3b24 <handleSPI+0xa84>
						tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    3f94:	ee07 9a90 	vmov	s15, r9
    3f98:	48be      	ldr	r0, [pc, #760]	; (4294 <handleSPI+0x11f4>)
    3f9a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3f9e:	eddf 7aba 	vldr	s15, [pc, #744]	; 4288 <handleSPI+0x11e8>
    3fa2:	ee20 0a27 	vmul.f32	s0, s0, s15
    3fa6:	f006 f8a3 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3faa:	f8c5 9020 	str.w	r9, [r5, #32]
    3fae:	e5a5      	b.n	3afc <handleSPI+0xa5c>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3fb0:	ee07 9a90 	vmov	s15, r9
    3fb4:	48b8      	ldr	r0, [pc, #736]	; (4298 <handleSPI+0x11f8>)
    3fb6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3fba:	eddf 7ab3 	vldr	s15, [pc, #716]	; 4288 <handleSPI+0x11e8>
    3fbe:	ee20 0a27 	vmul.f32	s0, s0, s15
    3fc2:	f006 f895 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3fc6:	f8c5 901c 	str.w	r9, [r5, #28]
    3fca:	e583      	b.n	3ad4 <handleSPI+0xa34>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3fcc:	ee07 9a90 	vmov	s15, r9
    3fd0:	48b2      	ldr	r0, [pc, #712]	; (429c <handleSPI+0x11fc>)
    3fd2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3fd6:	eddf 7aac 	vldr	s15, [pc, #688]	; 4288 <handleSPI+0x11e8>
    3fda:	ee20 0a27 	vmul.f32	s0, s0, s15
    3fde:	f006 f887 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3fe2:	f8c5 9018 	str.w	r9, [r5, #24]
    3fe6:	e561      	b.n	3aac <handleSPI+0xa0c>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3fe8:	ee07 9a90 	vmov	s15, r9
    3fec:	48ac      	ldr	r0, [pc, #688]	; (42a0 <handleSPI+0x1200>)
    3fee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3ff2:	eddf 7aa5 	vldr	s15, [pc, #660]	; 4288 <handleSPI+0x11e8>
    3ff6:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ffa:	f006 f879 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    3ffe:	f8c5 9014 	str.w	r9, [r5, #20]
    4002:	e53f      	b.n	3a84 <handleSPI+0x9e4>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4004:	ee07 9a90 	vmov	s15, r9
    4008:	48a6      	ldr	r0, [pc, #664]	; (42a4 <handleSPI+0x1204>)
    400a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    400e:	eddf 7a9e 	vldr	s15, [pc, #632]	; 4288 <handleSPI+0x11e8>
    4012:	ee20 0a27 	vmul.f32	s0, s0, s15
    4016:	f006 f86b 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[i] = newByte;
    401a:	f8c5 9010 	str.w	r9, [r5, #16]
    401e:	e51d      	b.n	3a5c <handleSPI+0x9bc>
    4020:	49a1      	ldr	r1, [pc, #644]	; (42a8 <handleSPI+0x1208>)
    4022:	e6ff      	b.n	3e24 <handleSPI+0xd84>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4024:	ee07 8a90 	vmov	s15, r8
    4028:	4896      	ldr	r0, [pc, #600]	; (4284 <handleSPI+0x11e4>)
    402a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    402e:	eddf 7a96 	vldr	s15, [pc, #600]	; 4288 <handleSPI+0x11e8>
    4032:	ee20 0a27 	vmul.f32	s0, s0, s15
    4036:	f006 f85b 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    403a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    403e:	e47c      	b.n	393a <handleSPI+0x89a>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4040:	ee07 9a90 	vmov	s15, r9
    4044:	4891      	ldr	r0, [pc, #580]	; (428c <handleSPI+0x11ec>)
    4046:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    404a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 4288 <handleSPI+0x11e8>
    404e:	ee20 0a27 	vmul.f32	s0, s0, s15
    4052:	f006 f84d 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    4056:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    405a:	e45b      	b.n	3914 <handleSPI+0x874>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    405c:	ee07 9a90 	vmov	s15, r9
    4060:	488b      	ldr	r0, [pc, #556]	; (4290 <handleSPI+0x11f0>)
    4062:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4066:	eddf 7a88 	vldr	s15, [pc, #544]	; 4288 <handleSPI+0x11e8>
    406a:	ee20 0a27 	vmul.f32	s0, s0, s15
    406e:	f006 f83f 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    4072:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    4076:	e439      	b.n	38ec <handleSPI+0x84c>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4078:	ee07 9a90 	vmov	s15, r9
    407c:	4885      	ldr	r0, [pc, #532]	; (4294 <handleSPI+0x11f4>)
    407e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4082:	eddf 7a81 	vldr	s15, [pc, #516]	; 4288 <handleSPI+0x11e8>
    4086:	ee20 0a27 	vmul.f32	s0, s0, s15
    408a:	f006 f831 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    408e:	f8c5 9020 	str.w	r9, [r5, #32]
    4092:	e417      	b.n	38c4 <handleSPI+0x824>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    4094:	ee07 9a90 	vmov	s15, r9
    4098:	4884      	ldr	r0, [pc, #528]	; (42ac <handleSPI+0x120c>)
    409a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    409e:	eddf 7a7a 	vldr	s15, [pc, #488]	; 4288 <handleSPI+0x11e8>
    40a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    40a6:	f006 f823 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    40aa:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
    40ae:	f7ff bbf5 	b.w	389c <handleSPI+0x7fc>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    40b2:	ee07 9a90 	vmov	s15, r9
    40b6:	487e      	ldr	r0, [pc, #504]	; (42b0 <handleSPI+0x1210>)
    40b8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    40bc:	eddf 7a72 	vldr	s15, [pc, #456]	; 4288 <handleSPI+0x11e8>
    40c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    40c4:	f006 f814 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    40c8:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
    40cc:	f7ff bbd2 	b.w	3874 <handleSPI+0x7d4>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    40d0:	ee07 9a90 	vmov	s15, r9
    40d4:	4877      	ldr	r0, [pc, #476]	; (42b4 <handleSPI+0x1214>)
    40d6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    40da:	eddf 7a6b 	vldr	s15, [pc, #428]	; 4288 <handleSPI+0x11e8>
    40de:	ee20 0a27 	vmul.f32	s0, s0, s15
    40e2:	f006 f805 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    40e6:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
    40ea:	f7ff bbaf 	b.w	384c <handleSPI+0x7ac>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    40ee:	ee07 9a90 	vmov	s15, r9
    40f2:	4871      	ldr	r0, [pc, #452]	; (42b8 <handleSPI+0x1218>)
    40f4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    40f8:	eddf 7a63 	vldr	s15, [pc, #396]	; 4288 <handleSPI+0x11e8>
    40fc:	ee20 0a27 	vmul.f32	s0, s0, s15
    4100:	f005 fff6 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    4104:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
    4108:	f7ff bb8c 	b.w	3824 <handleSPI+0x784>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    410c:	ee07 9a90 	vmov	s15, r9
    4110:	486a      	ldr	r0, [pc, #424]	; (42bc <handleSPI+0x121c>)
    4112:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4116:	eddf 7a5c 	vldr	s15, [pc, #368]	; 4288 <handleSPI+0x11e8>
    411a:	ee20 0a27 	vmul.f32	s0, s0, s15
    411e:	f005 ffe7 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    4122:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    4126:	f7ff bb69 	b.w	37fc <handleSPI+0x75c>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    412a:	ee07 9a90 	vmov	s15, r9
    412e:	4864      	ldr	r0, [pc, #400]	; (42c0 <handleSPI+0x1220>)
    4130:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4134:	eddf 7a54 	vldr	s15, [pc, #336]	; 4288 <handleSPI+0x11e8>
    4138:	ee20 0a27 	vmul.f32	s0, s0, s15
    413c:	f005 ffd8 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    4140:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    4144:	f7ff bb46 	b.w	37d4 <handleSPI+0x734>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    4148:	ee07 9a90 	vmov	s15, r9
    414c:	485d      	ldr	r0, [pc, #372]	; (42c4 <handleSPI+0x1224>)
    414e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4152:	eddf 7a4d 	vldr	s15, [pc, #308]	; 4288 <handleSPI+0x11e8>
    4156:	ee20 0a27 	vmul.f32	s0, s0, s15
    415a:	f005 ffc9 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    415e:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
    4162:	f7ff bb23 	b.w	37ac <handleSPI+0x70c>
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    4166:	ee07 9a90 	vmov	s15, r9
						prevKnobByte[whichKnob] = newByte;
    416a:	4d57      	ldr	r5, [pc, #348]	; (42c8 <handleSPI+0x1228>)
						tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    416c:	4857      	ldr	r0, [pc, #348]	; (42cc <handleSPI+0x122c>)
    416e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    4172:	eddf 7a45 	vldr	s15, [pc, #276]	; 4288 <handleSPI+0x11e8>
    4176:	ee20 0a27 	vmul.f32	s0, s0, s15
    417a:	f005 ffb9 	bl	a0f0 <__tExpSmooth_setDest_veneer>
						prevKnobByte[whichKnob] = newByte;
    417e:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    4182:	f7ff baff 	b.w	3784 <handleSPI+0x6e4>
				else if (mappingChangeType == Amount)
    4186:	f1b9 0f01 	cmp.w	r9, #1
    418a:	f000 8280 	beq.w	468e <handleSPI+0x15ee>
				else if (mappingChangeType == ScalarID)
    418e:	f1b9 0f02 	cmp.w	r9, #2
    4192:	f47f a90b 	bne.w	33ac <handleSPI+0x30c>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4196:	484e      	ldr	r0, [pc, #312]	; (42d0 <handleSPI+0x1230>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    4198:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    419a:	2eff      	cmp	r6, #255	; 0xff
    419c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    41a0:	f1a6 0918 	sub.w	r9, r6, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    41a4:	f1a6 0c14 	sub.w	ip, r6, #20
    41a8:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    41aa:	fb02 f303 	mul.w	r3, r2, r3
    41ae:	f10e 0504 	add.w	r5, lr, #4
						if (scalar == 0xff)
    41b2:	f000 827f 	beq.w	46b4 <handleSPI+0x1614>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    41ba:	4d46      	ldr	r5, [pc, #280]	; (42d4 <handleSPI+0x1234>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    41bc:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41c0:	4443      	add	r3, r8
    41c2:	eb05 0bc6 	add.w	fp, r5, r6, lsl #3
    41c6:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    41ca:	f200 8288 	bhi.w	46de <handleSPI+0x163e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    41ce:	4b42      	ldr	r3, [pc, #264]	; (42d8 <handleSPI+0x1238>)
    41d0:	f04f 0b01 	mov.w	fp, #1
    41d4:	4433      	add	r3, r6
    41d6:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41da:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    41dc:	2e03      	cmp	r6, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41de:	f10a 0a01 	add.w	sl, sl, #1
    41e2:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    41e6:	bf08      	it	eq
    41e8:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41ea:	eb05 058a 	add.w	r5, r5, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    41ee:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    41f2:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
    41f6:	4443      	add	r3, r8
    41f8:	629d      	str	r5, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    41fa:	f200 8267 	bhi.w	46cc <handleSPI+0x162c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    41fe:	4b36      	ldr	r3, [pc, #216]	; (42d8 <handleSPI+0x1238>)
    4200:	2201      	movs	r2, #1
    4202:	4433      	add	r3, r6
    4204:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    4208:	2e03      	cmp	r6, #3
    420a:	bf08      	it	eq
    420c:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    420e:	7001      	strb	r1, [r0, #0]
    4210:	f7ff b8cc 	b.w	33ac <handleSPI+0x30c>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4214:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    4218:	f105 0901 	add.w	r9, r5, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    421c:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    4220:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4224:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    4228:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    422c:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4230:	fef8 7a67 	vrinta.f32	s15, s15
    4234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4238:	edcd 7a02 	vstr	s15, [sp, #8]
    423c:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    4240:	280d      	cmp	r0, #13
    4242:	d902      	bls.n	424a <handleSPI+0x11aa>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    4244:	4a25      	ldr	r2, [pc, #148]	; (42dc <handleSPI+0x123c>)
    4246:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    424a:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    424c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    4250:	f005 ff9a 	bl	a188 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    4254:	4a22      	ldr	r2, [pc, #136]	; (42e0 <handleSPI+0x1240>)
    4256:	ebab 0309 	sub.w	r3, fp, r9
    425a:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    425e:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4262:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4266:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    4268:	684b      	ldr	r3, [r1, #4]
    426a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    426e:	688b      	ldr	r3, [r1, #8]
    4270:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    4274:	68cb      	ldr	r3, [r1, #12]
    4276:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    427a:	690b      	ldr	r3, [r1, #16]
    427c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    4280:	e558      	b.n	3d34 <handleSPI+0xc94>
    4282:	bf00      	nop
    4284:	2000545c 	.word	0x2000545c
    4288:	3b808081 	.word	0x3b808081
    428c:	20005458 	.word	0x20005458
    4290:	20005454 	.word	0x20005454
    4294:	20005450 	.word	0x20005450
    4298:	2000544c 	.word	0x2000544c
    429c:	20005448 	.word	0x20005448
    42a0:	20005444 	.word	0x20005444
    42a4:	20005440 	.word	0x20005440
    42a8:	200144fc 	.word	0x200144fc
    42ac:	2000547c 	.word	0x2000547c
    42b0:	20005478 	.word	0x20005478
    42b4:	20005474 	.word	0x20005474
    42b8:	20005470 	.word	0x20005470
    42bc:	2000546c 	.word	0x2000546c
    42c0:	20005468 	.word	0x20005468
    42c4:	20005464 	.word	0x20005464
    42c8:	2001a1c4 	.word	0x2001a1c4
    42cc:	20005460 	.word	0x20005460
    42d0:	2001d4bc 	.word	0x2001d4bc
    42d4:	2001d730 	.word	0x2001d730
    42d8:	2001d278 	.word	0x2001d278
    42dc:	00001981 	.word	0x00001981
    42e0:	2001453c 	.word	0x2001453c
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    42e4:	4bbe      	ldr	r3, [pc, #760]	; (45e0 <handleSPI+0x1540>)
    42e6:	410b      	asrs	r3, r1
    42e8:	f013 0301 	ands.w	r3, r3, #1
    42ec:	d123      	bne.n	4336 <handleSPI+0x1296>
					if (params[whichParam].realVal[0]  > 0.5f)
    42ee:	9901      	ldr	r1, [sp, #4]
    42f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    42f4:	1b49      	subs	r1, r1, r5
    42f6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    42fa:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    42fe:	49b9      	ldr	r1, [pc, #740]	; (45e4 <handleSPI+0x1544>)
					if (params[whichParam].realVal[0]  > 0.5f)
    4300:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    4304:	fb81 0102 	smull	r0, r1, r1, r2
    4308:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    430e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    4312:	dd02      	ble.n	431a <handleSPI+0x127a>
						oscOn[whichOsc] = 1;
    4314:	2301      	movs	r3, #1
    4316:	49b4      	ldr	r1, [pc, #720]	; (45e8 <handleSPI+0x1548>)
    4318:	548b      	strb	r3, [r1, r2]
    431a:	49b4      	ldr	r1, [pc, #720]	; (45ec <handleSPI+0x154c>)
    431c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    4320:	e9d1 3200 	ldrd	r3, r2, [r1]
    4324:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    4326:	688a      	ldr	r2, [r1, #8]
    4328:	4413      	add	r3, r2
    432a:	4ab1      	ldr	r2, [pc, #708]	; (45f0 <handleSPI+0x1550>)
    432c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4330:	681a      	ldr	r2, [r3, #0]
    4332:	4bb0      	ldr	r3, [pc, #704]	; (45f4 <handleSPI+0x1554>)
    4334:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    4336:	2d87      	cmp	r5, #135	; 0x87
    4338:	d005      	beq.n	4346 <handleSPI+0x12a6>
    433a:	2d8c      	cmp	r5, #140	; 0x8c
    433c:	d003      	beq.n	4346 <handleSPI+0x12a6>
    433e:	2d91      	cmp	r5, #145	; 0x91
    4340:	d001      	beq.n	4346 <handleSPI+0x12a6>
    4342:	2d96      	cmp	r5, #150	; 0x96
    4344:	d16e      	bne.n	4424 <handleSPI+0x1384>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4346:	9b01      	ldr	r3, [sp, #4]
    4348:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    434c:	4aaa      	ldr	r2, [pc, #680]	; (45f8 <handleSPI+0x1558>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    434e:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4352:	1b5b      	subs	r3, r3, r5
    4354:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4358:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    435c:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4360:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4364:	fb82 1203 	smull	r1, r2, r2, r3
    4368:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    436a:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    436e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4372:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    4376:	ee17 0a90 	vmov	r0, s15
    437a:	4641      	mov	r1, r8
    437c:	f005 ff7c 	bl	a278 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4380:	499e      	ldr	r1, [pc, #632]	; (45fc <handleSPI+0x155c>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    4382:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    4386:	9703      	str	r7, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4388:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    438c:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    4390:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    4394:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4396:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    439a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    439e:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    43a2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    43a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    43aa:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    43ae:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    43b2:	ea4f 0389 	mov.w	r3, r9, lsl #2
    43b6:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    43ba:	4617      	mov	r7, r2
    43bc:	f103 0840 	add.w	r8, r3, #64	; 0x40
    43c0:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    43c4:	6841      	ldr	r1, [r0, #4]
    43c6:	44b0      	add	r8, r6
    43c8:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    43cc:	6881      	ldr	r1, [r0, #8]
    43ce:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    43d0:	f103 0108 	add.w	r1, r3, #8
    43d4:	1871      	adds	r1, r6, r1
    43d6:	9102      	str	r1, [sp, #8]
    43d8:	f103 0124 	add.w	r1, r3, #36	; 0x24
    43dc:	1873      	adds	r3, r6, r1
    43de:	9301      	str	r3, [sp, #4]
    43e0:	4623      	mov	r3, r4
    43e2:	462c      	mov	r4, r5
    43e4:	4655      	mov	r5, sl
    43e6:	469a      	mov	sl, r3
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    43e8:	9b02      	ldr	r3, [sp, #8]
    43ea:	4629      	mov	r1, r5
    43ec:	f899 0018 	ldrb.w	r0, [r9, #24]
    43f0:	ecb3 0a01 	vldmia	r3!, {s0}
    43f4:	9302      	str	r3, [sp, #8]
    43f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
    43fa:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    43fc:	9b01      	ldr	r3, [sp, #4]
    43fe:	4629      	mov	r1, r5
    4400:	f89b 0018 	ldrb.w	r0, [fp, #24]
    4404:	ecb3 0a01 	vldmia	r3!, {s0}
    4408:	9301      	str	r3, [sp, #4]
    440a:	f8db 3014 	ldr.w	r3, [fp, #20]
    440e:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    4410:	ecb8 0a01 	vldmia	r8!, {s0}
    4414:	4629      	mov	r1, r5
    4416:	697b      	ldr	r3, [r7, #20]
    4418:	7e38      	ldrb	r0, [r7, #24]
    441a:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    441c:	b1b5      	cbz	r5, 444c <handleSPI+0x13ac>
    441e:	4625      	mov	r5, r4
    4420:	9f03      	ldr	r7, [sp, #12]
    4422:	4654      	mov	r4, sl
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    4424:	2d01      	cmp	r5, #1
    4426:	d913      	bls.n	4450 <handleSPI+0x13b0>
				if (whichParam == FXOrder)
    4428:	2d9a      	cmp	r5, #154	; 0x9a
    442a:	d127      	bne.n	447c <handleSPI+0x13dc>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    442c:	4a74      	ldr	r2, [pc, #464]	; (4600 <handleSPI+0x1560>)
    442e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4432:	4b74      	ldr	r3, [pc, #464]	; (4604 <handleSPI+0x1564>)
    4434:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    4438:	eeb4 7ae7 	vcmpe.f32	s14, s15
    443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4440:	bfcc      	ite	gt
    4442:	2201      	movgt	r2, #1
    4444:	2200      	movle	r2, #0
    4446:	701a      	strb	r2, [r3, #0]
    4448:	f7fe bfb0 	b.w	33ac <handleSPI+0x30c>
    444c:	2501      	movs	r5, #1
    444e:	e7cb      	b.n	43e8 <handleSPI+0x1348>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4450:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    4454:	ed96 7a02 	vldr	s14, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4458:	eddf 6a6b 	vldr	s13, [pc, #428]	; 4608 <handleSPI+0x1568>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    445c:	ee37 7a67 	vsub.f32	s14, s14, s15
    4460:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 460c <handleSPI+0x156c>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4464:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4468:	4b69      	ldr	r3, [pc, #420]	; (4610 <handleSPI+0x1570>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    446a:	4a6a      	ldr	r2, [pc, #424]	; (4614 <handleSPI+0x1574>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    446c:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4470:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4474:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    4478:	f7fe bf98 	b.w	33ac <handleSPI+0x30c>
    447c:	2d9b      	cmp	r5, #155	; 0x9b
    447e:	f47e af95 	bne.w	33ac <handleSPI+0x30c>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    4482:	4a5f      	ldr	r2, [pc, #380]	; (4600 <handleSPI+0x1560>)
    4484:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4488:	4b63      	ldr	r3, [pc, #396]	; (4618 <handleSPI+0x1578>)
    448a:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    448e:	e7d3      	b.n	4438 <handleSPI+0x1398>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    4490:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4494:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    4498:	4a52      	ldr	r2, [pc, #328]	; (45e4 <handleSPI+0x1544>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    449a:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    449e:	fb82 1203 	smull	r1, r2, r2, r3
    44a2:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    44a4:	fef8 7a67 	vrinta.f32	s15, s15
    44a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    44ac:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    44b0:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    44b4:	2a05      	cmp	r2, #5
    44b6:	f63f ac61 	bhi.w	3d7c <handleSPI+0xcdc>
    44ba:	e8df f002 	tbb	[pc, r2]
    44be:	171c      	.short	0x171c
    44c0:	03080d12 	.word	0x03080d12
			  shapeTick[i] = &triTick;
    44c4:	4a55      	ldr	r2, [pc, #340]	; (461c <handleSPI+0x157c>)
    44c6:	4956      	ldr	r1, [pc, #344]	; (4620 <handleSPI+0x1580>)
    44c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44cc:	e456      	b.n	3d7c <handleSPI+0xcdc>
			  shapeTick[i] = &sineTick;
    44ce:	4a53      	ldr	r2, [pc, #332]	; (461c <handleSPI+0x157c>)
    44d0:	4954      	ldr	r1, [pc, #336]	; (4624 <handleSPI+0x1584>)
    44d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44d6:	e451      	b.n	3d7c <handleSPI+0xcdc>
			  shapeTick[i] = &pulseTick;
    44d8:	4a50      	ldr	r2, [pc, #320]	; (461c <handleSPI+0x157c>)
    44da:	4953      	ldr	r1, [pc, #332]	; (4628 <handleSPI+0x1588>)
    44dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44e0:	e44c      	b.n	3d7c <handleSPI+0xcdc>
			  shapeTick[i] = &sawTick;
    44e2:	4a4e      	ldr	r2, [pc, #312]	; (461c <handleSPI+0x157c>)
    44e4:	4951      	ldr	r1, [pc, #324]	; (462c <handleSPI+0x158c>)
    44e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44ea:	e447      	b.n	3d7c <handleSPI+0xcdc>
			  shapeTick[i] = &sineTriTick;
    44ec:	4a4b      	ldr	r2, [pc, #300]	; (461c <handleSPI+0x157c>)
    44ee:	4950      	ldr	r1, [pc, #320]	; (4630 <handleSPI+0x1590>)
    44f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44f4:	e442      	b.n	3d7c <handleSPI+0xcdc>
			  shapeTick[i] = &sawSquareTick;
    44f6:	4a49      	ldr	r2, [pc, #292]	; (461c <handleSPI+0x157c>)
    44f8:	494e      	ldr	r1, [pc, #312]	; (4634 <handleSPI+0x1594>)
    44fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    44fe:	e43d      	b.n	3d7c <handleSPI+0xcdc>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    4500:	2d60      	cmp	r5, #96	; 0x60
    4502:	d002      	beq.n	450a <handleSPI+0x146a>
    4504:	2d66      	cmp	r5, #102	; 0x66
    4506:	f47f af16 	bne.w	4336 <handleSPI+0x1296>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    450a:	9b01      	ldr	r3, [sp, #4]
    450c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4510:	4949      	ldr	r1, [pc, #292]	; (4638 <handleSPI+0x1598>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4512:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4516:	1b5b      	subs	r3, r3, r5
    4518:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    451c:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4520:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4524:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4528:	fb81 2103 	smull	r2, r1, r1, r3
    452c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4530:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    4534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4538:	ee17 0a90 	vmov	r0, s15
    453c:	f005 ff24 	bl	a388 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4540:	483e      	ldr	r0, [pc, #248]	; (463c <handleSPI+0x159c>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    4542:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4546:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    454a:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    454e:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4550:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    4554:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    4558:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    455a:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    455e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4562:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    4566:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    456a:	f10a 0b08 	add.w	fp, sl, #8
    456e:	f1aa 0a14 	sub.w	sl, sl, #20
    4572:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4576:	eb06 0183 	add.w	r1, r6, r3, lsl #2
    457a:	44b3      	add	fp, r6
    457c:	009b      	lsls	r3, r3, #2
    457e:	44b2      	add	sl, r6
    4580:	6148      	str	r0, [r1, #20]
    4582:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    4584:	ecbb 0a01 	vldmia	fp!, {s0}
    4588:	4649      	mov	r1, r9
    458a:	f898 0018 	ldrb.w	r0, [r8, #24]
    458e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    4592:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    4594:	9b02      	ldr	r3, [sp, #8]
    4596:	ecba 0a01 	vldmia	sl!, {s0}
    459a:	4649      	mov	r1, r9
    459c:	18f3      	adds	r3, r6, r3
    459e:	695a      	ldr	r2, [r3, #20]
    45a0:	7e18      	ldrb	r0, [r3, #24]
    45a2:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    45a4:	f1b9 0f00 	cmp.w	r9, #0
    45a8:	f47f aec5 	bne.w	4336 <handleSPI+0x1296>
    45ac:	f04f 0901 	mov.w	r9, #1
    45b0:	e7e8      	b.n	4584 <handleSPI+0x14e4>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    45b2:	f1a6 0314 	sub.w	r3, r6, #20
    45b6:	f885 9020 	strb.w	r9, [r5, #32]
    45ba:	2b03      	cmp	r3, #3
    45bc:	d860      	bhi.n	4680 <handleSPI+0x15e0>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    45be:	4b20      	ldr	r3, [pc, #128]	; (4640 <handleSPI+0x15a0>)
    45c0:	2101      	movs	r1, #1
    45c2:	4433      	add	r3, r6
    45c4:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    45c8:	f7ff bb71 	b.w	3cae <handleSPI+0xc0e>
						audioOutBuffer[i] = 0;
    45cc:	2200      	movs	r2, #0
    45ce:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    45d2:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    45d6:	3308      	adds	r3, #8
    45d8:	4299      	cmp	r1, r3
    45da:	d1fa      	bne.n	45d2 <handleSPI+0x1532>
    45dc:	e419      	b.n	3e12 <handleSPI+0xd72>
    45de:	bf00      	nop
    45e0:	fbffdffe 	.word	0xfbffdffe
    45e4:	4ec4ec4f 	.word	0x4ec4ec4f
    45e8:	2001d510 	.word	0x2001d510
    45ec:	20019080 	.word	0x20019080
    45f0:	20000ad8 	.word	0x20000ad8
    45f4:	20000ad4 	.word	0x20000ad4
    45f8:	66666667 	.word	0x66666667
    45fc:	200186bc 	.word	0x200186bc
    4600:	2001a08c 	.word	0x2001a08c
    4604:	200166b9 	.word	0x200166b9
    4608:	42fe0000 	.word	0x42fe0000
    460c:	3c010204 	.word	0x3c010204
    4610:	20019070 	.word	0x20019070
    4614:	20019074 	.word	0x20019074
    4618:	2001a19c 	.word	0x2001a19c
    461c:	2001d6b4 	.word	0x2001d6b4
    4620:	00006c61 	.word	0x00006c61
    4624:	00006c21 	.word	0x00006c21
    4628:	00006bc1 	.word	0x00006bc1
    462c:	00006b81 	.word	0x00006b81
    4630:	00006b21 	.word	0x00006b21
    4634:	00006ac1 	.word	0x00006ac1
    4638:	2aaaaaab 	.word	0x2aaaaaab
    463c:	20016590 	.word	0x20016590
    4640:	2001d0f4 	.word	0x2001d0f4
						mappings[whichMapping].hookActive[whichSlot] = 0;
    4644:	f885 9048 	strb.w	r9, [r5, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4648:	464d      	mov	r5, r9
							mappings[whichMapping].destNumber = 255;
    464a:	f808 6003 	strb.w	r6, [r8, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    464e:	f8da 3004 	ldr.w	r3, [sl, #4]
    4652:	eb03 0685 	add.w	r6, r3, r5, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    4656:	691b      	ldr	r3, [r3, #16]
    4658:	ed96 0a00 	vldr	s0, [r6]
    465c:	4798      	blx	r3
    465e:	ed86 0a02 	vstr	s0, [r6, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    4662:	f8da 3004 	ldr.w	r3, [sl, #4]
    4666:	4629      	mov	r1, r5
    4668:	eb03 0685 	add.w	r6, r3, r5, lsl #2
    466c:	695a      	ldr	r2, [r3, #20]
    466e:	7e18      	ldrb	r0, [r3, #24]
    4670:	ed96 0a02 	vldr	s0, [r6, #8]
    4674:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4676:	2d00      	cmp	r5, #0
    4678:	f47e ae98 	bne.w	33ac <handleSPI+0x30c>
    467c:	2501      	movs	r5, #1
    467e:	e7e6      	b.n	464e <handleSPI+0x15ae>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    4680:	2e02      	cmp	r6, #2
    4682:	f63f ab14 	bhi.w	3cae <handleSPI+0xc0e>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    4686:	4b26      	ldr	r3, [pc, #152]	; (4720 <handleSPI+0x1680>)
    4688:	5598      	strb	r0, [r3, r6]
    468a:	f7ff bb10 	b.w	3cae <handleSPI+0xc0e>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    468e:	ee07 6a90 	vmov	s15, r6
    4692:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    4696:	ed9f 7a23 	vldr	s14, [pc, #140]	; 4724 <handleSPI+0x1684>
    469a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    469e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    46a2:	4473      	add	r3, lr
    46a4:	ee67 7a87 	vmul.f32	s15, s15, s14
    46a8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    46ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    46b0:	f7fe be7c 	b.w	33ac <handleSPI+0x30c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    46b4:	eb03 02ce 	add.w	r2, r3, lr, lsl #3
    46b8:	7001      	strb	r1, [r0, #0]
    46ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    46be:	4d1a      	ldr	r5, [pc, #104]	; (4728 <handleSPI+0x1688>)
    46c0:	4442      	add	r2, r8
    46c2:	4443      	add	r3, r8
    46c4:	6295      	str	r5, [r2, #40]	; 0x28
    46c6:	605d      	str	r5, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    46c8:	f7fe be70 	b.w	33ac <handleSPI+0x30c>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    46cc:	f1bc 0f03 	cmp.w	ip, #3
    46d0:	d818      	bhi.n	4704 <handleSPI+0x1664>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    46d2:	4b16      	ldr	r3, [pc, #88]	; (472c <handleSPI+0x168c>)
    46d4:	2201      	movs	r2, #1
    46d6:	4433      	add	r3, r6
    46d8:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    46dc:	e594      	b.n	4208 <handleSPI+0x1168>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    46de:	f1bc 0f03 	cmp.w	ip, #3
    46e2:	d916      	bls.n	4712 <handleSPI+0x1672>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    46e4:	2e02      	cmp	r6, #2
    46e6:	f63f ad78 	bhi.w	41da <handleSPI+0x113a>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    46ea:	4b0d      	ldr	r3, [pc, #52]	; (4720 <handleSPI+0x1680>)
    46ec:	f04f 0b01 	mov.w	fp, #1
    46f0:	f803 b006 	strb.w	fp, [r3, r6]
    46f4:	e571      	b.n	41da <handleSPI+0x113a>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    46f6:	f1a6 0314 	sub.w	r3, r6, #20
    46fa:	2b03      	cmp	r3, #3
    46fc:	f67f af5f 	bls.w	45be <handleSPI+0x151e>
    4700:	f7ff bad5 	b.w	3cae <handleSPI+0xc0e>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    4704:	2e02      	cmp	r6, #2
    4706:	f63f ad7f 	bhi.w	4208 <handleSPI+0x1168>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    470a:	4b05      	ldr	r3, [pc, #20]	; (4720 <handleSPI+0x1680>)
    470c:	2201      	movs	r2, #1
    470e:	559a      	strb	r2, [r3, r6]
    4710:	e57a      	b.n	4208 <handleSPI+0x1168>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    4712:	4b06      	ldr	r3, [pc, #24]	; (472c <handleSPI+0x168c>)
    4714:	f04f 0b01 	mov.w	fp, #1
    4718:	4433      	add	r3, r6
    471a:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    471e:	e55c      	b.n	41da <handleSPI+0x113a>
    4720:	2001d510 	.word	0x2001d510
    4724:	37fffffc 	.word	0x37fffffc
    4728:	200008b0 	.word	0x200008b0
    472c:	2001d0f4 	.word	0x2001d0f4
    4730:	f3af 8000 	nop.w
    4734:	f3af 8000 	nop.w
    4738:	f3af 8000 	nop.w
    473c:	f3af 8000 	nop.w

00004740 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    4740:	4b02      	ldr	r3, [pc, #8]	; (474c <HAL_I2C_SlaveRxCpltCallback+0xc>)
    4742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4746:	601a      	str	r2, [r3, #0]
}
    4748:	4770      	bx	lr
    474a:	bf00      	nop
    474c:	2001a1bc 	.word	0x2001a1bc
    4750:	f3af 8000 	nop.w
    4754:	f3af 8000 	nop.w
    4758:	f3af 8000 	nop.w
    475c:	f3af 8000 	nop.w

00004760 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    4760:	4b01      	ldr	r3, [pc, #4]	; (4768 <HAL_I2C_MasterTxCpltCallback+0x8>)
    4762:	2200      	movs	r2, #0
    4764:	701a      	strb	r2, [r3, #0]
}
    4766:	4770      	bx	lr
    4768:	200166ba 	.word	0x200166ba
    476c:	f3af 8000 	nop.w
    4770:	f3af 8000 	nop.w
    4774:	f3af 8000 	nop.w
    4778:	f3af 8000 	nop.w
    477c:	f3af 8000 	nop.w

00004780 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    4780:	2100      	movs	r1, #0
	I2CErrors++;
    4782:	4a05      	ldr	r2, [pc, #20]	; (4798 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    4784:	4b05      	ldr	r3, [pc, #20]	; (479c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    4786:	4806      	ldr	r0, [pc, #24]	; (47a0 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    4788:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    478a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    478c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    478e:	3301      	adds	r3, #1
    4790:	b2db      	uxtb	r3, r3
    4792:	7013      	strb	r3, [r2, #0]
}
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	200144e4 	.word	0x200144e4
    479c:	200166ba 	.word	0x200166ba
    47a0:	2001a614 	.word	0x2001a614
    47a4:	f3af 8000 	nop.w
    47a8:	f3af 8000 	nop.w
    47ac:	f3af 8000 	nop.w
    47b0:	f3af 8000 	nop.w
    47b4:	f3af 8000 	nop.w
    47b8:	f3af 8000 	nop.w
    47bc:	f3af 8000 	nop.w

000047c0 <HAL_SPI_TxRxCpltCallback>:
	interrupted = 1;
    47c0:	4a2a      	ldr	r2, [pc, #168]	; (486c <HAL_SPI_TxRxCpltCallback+0xac>)
    47c2:	2101      	movs	r1, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    47c4:	4b2a      	ldr	r3, [pc, #168]	; (4870 <HAL_SPI_TxRxCpltCallback+0xb0>)
{
    47c6:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    47c8:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    47ca:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    47ce:	4a29      	ldr	r2, [pc, #164]	; (4874 <HAL_SPI_TxRxCpltCallback+0xb4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    47d0:	f103 0120 	add.w	r1, r3, #32
    47d4:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    47d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    47dc:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    47e0:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    47e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47e8:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    47ec:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    47f0:	2afe      	cmp	r2, #254	; 0xfe
    47f2:	d103      	bne.n	47fc <HAL_SPI_TxRxCpltCallback+0x3c>
    47f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    47f8:	2bfd      	cmp	r3, #253	; 0xfd
    47fa:	d033      	beq.n	4864 <HAL_SPI_TxRxCpltCallback+0xa4>
		HAL_SPI_Abort(&hspi1);
    47fc:	4d1e      	ldr	r5, [pc, #120]	; (4878 <HAL_SPI_TxRxCpltCallback+0xb8>)
    47fe:	4628      	mov	r0, r5
    4800:	f005 fcba 	bl	a178 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    4804:	4b1d      	ldr	r3, [pc, #116]	; (487c <HAL_SPI_TxRxCpltCallback+0xbc>)
    4806:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    480a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    480e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    4812:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    481a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    481e:	f005 fd0f 	bl	a240 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    4822:	682e      	ldr	r6, [r5, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4824:	4a12      	ldr	r2, [pc, #72]	; (4870 <HAL_SPI_TxRxCpltCallback+0xb0>)
    4826:	2340      	movs	r3, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
    4828:	6831      	ldr	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    482a:	4628      	mov	r0, r5
		__HAL_SPI_ENABLE(&hspi1);
    482c:	f041 0101 	orr.w	r1, r1, #1
    4830:	6031      	str	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4832:	18d1      	adds	r1, r2, r3
    4834:	f005 fc20 	bl	a078 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    4838:	4a11      	ldr	r2, [pc, #68]	; (4880 <HAL_SPI_TxRxCpltCallback+0xc0>)
    483a:	7813      	ldrb	r3, [r2, #0]
    483c:	3301      	adds	r3, #1
    483e:	b2db      	uxtb	r3, r3
    4840:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4842:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4846:	4a0f      	ldr	r2, [pc, #60]	; (4884 <HAL_SPI_TxRxCpltCallback+0xc4>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4848:	4b0a      	ldr	r3, [pc, #40]	; (4874 <HAL_SPI_TxRxCpltCallback+0xb4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    484a:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    484e:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    4852:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    4856:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    485a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    485e:	f3bf 8f6f 	isb	sy
}
    4862:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(LEVER_BUFFER_SIZE);
    4864:	2020      	movs	r0, #32
    4866:	f7fe fc1b 	bl	30a0 <handleSPI>
    486a:	e7ea      	b.n	4842 <HAL_SPI_TxRxCpltCallback+0x82>
    486c:	200053c8 	.word	0x200053c8
    4870:	30000800 	.word	0x30000800
    4874:	e000ed00 	.word	0xe000ed00
    4878:	2001cbe0 	.word	0x2001cbe0
    487c:	58024400 	.word	0x58024400
    4880:	2001907d 	.word	0x2001907d
    4884:	30000860 	.word	0x30000860
    4888:	f3af 8000 	nop.w
    488c:	f3af 8000 	nop.w
    4890:	f3af 8000 	nop.w
    4894:	f3af 8000 	nop.w
    4898:	f3af 8000 	nop.w
    489c:	f3af 8000 	nop.w

000048a0 <HAL_SPI_TxRxHalfCpltCallback>:
	interrupted = 1;
    48a0:	4a29      	ldr	r2, [pc, #164]	; (4948 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
    48a2:	2101      	movs	r1, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    48a4:	4b29      	ldr	r3, [pc, #164]	; (494c <HAL_SPI_TxRxHalfCpltCallback+0xac>)
{
    48a6:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    48a8:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    48aa:	f3bf 8f4f 	dsb	sy
    48ae:	4a28      	ldr	r2, [pc, #160]	; (4950 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    48b0:	f103 0120 	add.w	r1, r3, #32
    48b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48b8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    48bc:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    48c0:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    48c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48c8:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    48cc:	7f9a      	ldrb	r2, [r3, #30]
    48ce:	2afe      	cmp	r2, #254	; 0xfe
    48d0:	d102      	bne.n	48d8 <HAL_SPI_TxRxHalfCpltCallback+0x38>
    48d2:	7fdb      	ldrb	r3, [r3, #31]
    48d4:	2bfd      	cmp	r3, #253	; 0xfd
    48d6:	d033      	beq.n	4940 <HAL_SPI_TxRxHalfCpltCallback+0xa0>
		HAL_SPI_Abort(&hspi1);
    48d8:	4d1e      	ldr	r5, [pc, #120]	; (4954 <HAL_SPI_TxRxHalfCpltCallback+0xb4>)
    48da:	4628      	mov	r0, r5
    48dc:	f005 fc4c 	bl	a178 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    48e0:	4b1d      	ldr	r3, [pc, #116]	; (4958 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    48e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    48e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    48ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    48ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    48f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    48f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    48fa:	f005 fca1 	bl	a240 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    48fe:	682e      	ldr	r6, [r5, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4900:	4a12      	ldr	r2, [pc, #72]	; (494c <HAL_SPI_TxRxHalfCpltCallback+0xac>)
    4902:	2340      	movs	r3, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
    4904:	6831      	ldr	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4906:	4628      	mov	r0, r5
		__HAL_SPI_ENABLE(&hspi1);
    4908:	f041 0101 	orr.w	r1, r1, #1
    490c:	6031      	str	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    490e:	18d1      	adds	r1, r2, r3
    4910:	f005 fbb2 	bl	a078 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    4914:	4a11      	ldr	r2, [pc, #68]	; (495c <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    4916:	7813      	ldrb	r3, [r2, #0]
    4918:	3301      	adds	r3, #1
    491a:	b2db      	uxtb	r3, r3
    491c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    491e:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4922:	4a0f      	ldr	r2, [pc, #60]	; (4960 <HAL_SPI_TxRxHalfCpltCallback+0xc0>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4924:	4b0a      	ldr	r3, [pc, #40]	; (4950 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4926:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    492a:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    492e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    4932:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    4936:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    493a:	f3bf 8f6f 	isb	sy
}
    493e:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(0);
    4940:	2000      	movs	r0, #0
    4942:	f7fe fbad 	bl	30a0 <handleSPI>
    4946:	e7ea      	b.n	491e <HAL_SPI_TxRxHalfCpltCallback+0x7e>
    4948:	200053c8 	.word	0x200053c8
    494c:	30000800 	.word	0x30000800
    4950:	e000ed00 	.word	0xe000ed00
    4954:	2001cbe0 	.word	0x2001cbe0
    4958:	58024400 	.word	0x58024400
    495c:	2001907d 	.word	0x2001907d
    4960:	30000860 	.word	0x30000860
    4964:	f3af 8000 	nop.w
    4968:	f3af 8000 	nop.w
    496c:	f3af 8000 	nop.w
    4970:	f3af 8000 	nop.w
    4974:	f3af 8000 	nop.w
    4978:	f3af 8000 	nop.w
    497c:	f3af 8000 	nop.w

00004980 <HAL_SPI_RxCpltCallback>:
{
    4980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi5)
    4982:	4c97      	ldr	r4, [pc, #604]	; (4be0 <HAL_SPI_RxCpltCallback+0x260>)
	interrupted = 1;
    4984:	2201      	movs	r2, #1
    4986:	4b97      	ldr	r3, [pc, #604]	; (4be4 <HAL_SPI_RxCpltCallback+0x264>)
	if (hspi == &hspi5)
    4988:	4284      	cmp	r4, r0
	interrupted = 1;
    498a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    498c:	d000      	beq.n	4990 <HAL_SPI_RxCpltCallback+0x10>
}
    498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4990:	4b95      	ldr	r3, [pc, #596]	; (4be8 <HAL_SPI_RxCpltCallback+0x268>)
    4992:	f103 0740 	add.w	r7, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4996:	f3bf 8f4f 	dsb	sy
    499a:	4a94      	ldr	r2, [pc, #592]	; (4bec <HAL_SPI_RxCpltCallback+0x26c>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    499c:	f103 0660 	add.w	r6, r3, #96	; 0x60
    49a0:	f103 0580 	add.w	r5, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    49a4:	f8c2 7270 	str.w	r7, [r2, #624]	; 0x270
    49a8:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
    49ac:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
    49b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49b4:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    49b8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    49bc:	2afe      	cmp	r2, #254	; 0xfe
    49be:	f040 80d6 	bne.w	4b6e <HAL_SPI_RxCpltCallback+0x1ee>
    49c2:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    49c6:	2afd      	cmp	r2, #253	; 0xfd
    49c8:	f040 80d1 	bne.w	4b6e <HAL_SPI_RxCpltCallback+0x1ee>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49cc:	4a88      	ldr	r2, [pc, #544]	; (4bf0 <HAL_SPI_RxCpltCallback+0x270>)
    49ce:	7811      	ldrb	r1, [r2, #0]
    49d0:	2900      	cmp	r1, #0
    49d2:	f000 80fb 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    49d6:	4a87      	ldr	r2, [pc, #540]	; (4bf4 <HAL_SPI_RxCpltCallback+0x274>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49d8:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    49da:	4887      	ldr	r0, [pc, #540]	; (4bf8 <HAL_SPI_RxCpltCallback+0x278>)
    49dc:	6814      	ldr	r4, [r2, #0]
    49de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49e2:	f894 c061 	ldrb.w	ip, [r4, #97]	; 0x61
    49e6:	6814      	ldr	r4, [r2, #0]
    49e8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49ec:	f894 4062 	ldrb.w	r4, [r4, #98]	; 0x62
    49f0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    49f4:	b2a4      	uxth	r4, r4
    49f6:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49f8:	f000 80e8 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    49fc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49fe:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a00:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a04:	f894 c063 	ldrb.w	ip, [r4, #99]	; 0x63
    4a08:	6814      	ldr	r4, [r2, #0]
    4a0a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a0e:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    4a12:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4a16:	b2a4      	uxth	r4, r4
    4a18:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a1a:	f000 80d7 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a1e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a20:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a22:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a26:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
    4a2a:	6814      	ldr	r4, [r2, #0]
    4a2c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a30:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    4a34:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4a38:	b2a4      	uxth	r4, r4
    4a3a:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a3c:	f000 80c6 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a40:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a42:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a44:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a48:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
    4a4c:	6814      	ldr	r4, [r2, #0]
    4a4e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a52:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    4a56:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4a5a:	b2a4      	uxth	r4, r4
    4a5c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a5e:	f000 80b5 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a62:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a64:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a66:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a6a:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
    4a6e:	6814      	ldr	r4, [r2, #0]
    4a70:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a74:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    4a78:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4a7c:	b2a4      	uxth	r4, r4
    4a7e:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a80:	f000 80a4 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a84:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a86:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4a88:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a8c:	f894 c06b 	ldrb.w	ip, [r4, #107]	; 0x6b
    4a90:	6814      	ldr	r4, [r2, #0]
    4a92:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a96:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    4a9a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4a9e:	b2a4      	uxth	r4, r4
    4aa0:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4aa2:	f000 8093 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4aa6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4aa8:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4aaa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4aae:	f894 c06d 	ldrb.w	ip, [r4, #109]	; 0x6d
    4ab2:	6814      	ldr	r4, [r2, #0]
    4ab4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ab8:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    4abc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ac0:	b2a4      	uxth	r4, r4
    4ac2:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ac4:	f000 8082 	beq.w	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ac8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4aca:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4acc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ad0:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
    4ad4:	6814      	ldr	r4, [r2, #0]
    4ad6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ada:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    4ade:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ae2:	b2a4      	uxth	r4, r4
    4ae4:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ae6:	d071      	beq.n	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ae8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4aea:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4aec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4af0:	f894 c071 	ldrb.w	ip, [r4, #113]	; 0x71
    4af4:	6814      	ldr	r4, [r2, #0]
    4af6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4afa:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    4afe:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b02:	b2a4      	uxth	r4, r4
    4b04:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b06:	d061      	beq.n	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b08:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b0a:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b0c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b10:	f894 c073 	ldrb.w	ip, [r4, #115]	; 0x73
    4b14:	6814      	ldr	r4, [r2, #0]
    4b16:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b1a:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    4b1e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b22:	b2a4      	uxth	r4, r4
    4b24:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b26:	d051      	beq.n	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b28:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b2a:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b2c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b30:	f894 c075 	ldrb.w	ip, [r4, #117]	; 0x75
    4b34:	6814      	ldr	r4, [r2, #0]
    4b36:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b3a:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    4b3e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b42:	b2a4      	uxth	r4, r4
    4b44:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b46:	d041      	beq.n	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b48:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b4a:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b4c:	f8d2 c000 	ldr.w	ip, [r2]
    4b50:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b54:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    4b58:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    4b5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4b60:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4b64:	b29b      	uxth	r3, r3
    4b66:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b68:	d030      	beq.n	4bcc <HAL_SPI_RxCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b6a:	6813      	ldr	r3, [r2, #0]
    4b6c:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4b6e:	481c      	ldr	r0, [pc, #112]	; (4be0 <HAL_SPI_RxCpltCallback+0x260>)
    4b70:	f005 fb02 	bl	a178 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4b74:	4b21      	ldr	r3, [pc, #132]	; (4bfc <HAL_SPI_RxCpltCallback+0x27c>)
    4b76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4b7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4b82:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b86:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4b8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4b8e:	f005 fcfb 	bl	a588 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4b92:	6822      	ldr	r2, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4b94:	491a      	ldr	r1, [pc, #104]	; (4c00 <HAL_SPI_RxCpltCallback+0x280>)
			__HAL_SPI_ENABLE(&hspi5);
    4b96:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4b98:	4811      	ldr	r0, [pc, #68]	; (4be0 <HAL_SPI_RxCpltCallback+0x260>)
			__HAL_SPI_ENABLE(&hspi5);
    4b9a:	f043 0301 	orr.w	r3, r3, #1
    4b9e:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ba0:	2240      	movs	r2, #64	; 0x40
    4ba2:	f005 fa5d 	bl	a060 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4ba6:	4a17      	ldr	r2, [pc, #92]	; (4c04 <HAL_SPI_RxCpltCallback+0x284>)
    4ba8:	7813      	ldrb	r3, [r2, #0]
    4baa:	3301      	adds	r3, #1
    4bac:	b2db      	uxtb	r3, r3
    4bae:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4bb0:	f3bf 8f4f 	dsb	sy
    4bb4:	4b0d      	ldr	r3, [pc, #52]	; (4bec <HAL_SPI_RxCpltCallback+0x26c>)
    4bb6:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    4bba:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    4bbe:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    4bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bc6:	f3bf 8f6f 	isb	sy
}
    4bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			newPluck = 1;
    4bcc:	4b0e      	ldr	r3, [pc, #56]	; (4c08 <HAL_SPI_RxCpltCallback+0x288>)
    4bce:	2201      	movs	r2, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4bd0:	490b      	ldr	r1, [pc, #44]	; (4c00 <HAL_SPI_RxCpltCallback+0x280>)
			newPluck = 1;
    4bd2:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4bd4:	2240      	movs	r2, #64	; 0x40
    4bd6:	4802      	ldr	r0, [pc, #8]	; (4be0 <HAL_SPI_RxCpltCallback+0x260>)
    4bd8:	f005 fa42 	bl	a060 <__HAL_SPI_Receive_DMA_veneer>
    4bdc:	e7e8      	b.n	4bb0 <HAL_SPI_RxCpltCallback+0x230>
    4bde:	bf00      	nop
    4be0:	2001cc68 	.word	0x2001cc68
    4be4:	200053c8 	.word	0x200053c8
    4be8:	38000000 	.word	0x38000000
    4bec:	e000ed00 	.word	0xe000ed00
    4bf0:	20000694 	.word	0x20000694
    4bf4:	200053bc 	.word	0x200053bc
    4bf8:	200143fc 	.word	0x200143fc
    4bfc:	58024400 	.word	0x58024400
    4c00:	38000040 	.word	0x38000040
    4c04:	2001907d 	.word	0x2001907d
    4c08:	200054e0 	.word	0x200054e0
    4c0c:	f3af 8000 	nop.w
    4c10:	f3af 8000 	nop.w
    4c14:	f3af 8000 	nop.w
    4c18:	f3af 8000 	nop.w
    4c1c:	f3af 8000 	nop.w

00004c20 <HAL_SPI_RxHalfCpltCallback>:
{
    4c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi5)
    4c22:	4c97      	ldr	r4, [pc, #604]	; (4e80 <HAL_SPI_RxHalfCpltCallback+0x260>)
	interrupted = 1;
    4c24:	2201      	movs	r2, #1
    4c26:	4b97      	ldr	r3, [pc, #604]	; (4e84 <HAL_SPI_RxHalfCpltCallback+0x264>)
	if (hspi == &hspi5)
    4c28:	4284      	cmp	r4, r0
	interrupted = 1;
    4c2a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4c2c:	d000      	beq.n	4c30 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    4c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4c30:	4b95      	ldr	r3, [pc, #596]	; (4e88 <HAL_SPI_RxHalfCpltCallback+0x268>)
    4c32:	f103 0740 	add.w	r7, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4c36:	f3bf 8f4f 	dsb	sy
    4c3a:	4a94      	ldr	r2, [pc, #592]	; (4e8c <HAL_SPI_RxHalfCpltCallback+0x26c>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4c3c:	f103 0660 	add.w	r6, r3, #96	; 0x60
    4c40:	f103 0580 	add.w	r5, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c44:	f8c2 7270 	str.w	r7, [r2, #624]	; 0x270
    4c48:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
    4c4c:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
    4c50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c54:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4c58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4c5c:	2afe      	cmp	r2, #254	; 0xfe
    4c5e:	f040 80d6 	bne.w	4e0e <HAL_SPI_RxHalfCpltCallback+0x1ee>
    4c62:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    4c66:	2afd      	cmp	r2, #253	; 0xfd
    4c68:	f040 80d1 	bne.w	4e0e <HAL_SPI_RxHalfCpltCallback+0x1ee>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c6c:	4a88      	ldr	r2, [pc, #544]	; (4e90 <HAL_SPI_RxHalfCpltCallback+0x270>)
    4c6e:	7811      	ldrb	r1, [r2, #0]
    4c70:	2900      	cmp	r1, #0
    4c72:	f000 80fb 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4c76:	4a87      	ldr	r2, [pc, #540]	; (4e94 <HAL_SPI_RxHalfCpltCallback+0x274>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c78:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4c7a:	4887      	ldr	r0, [pc, #540]	; (4e98 <HAL_SPI_RxHalfCpltCallback+0x278>)
    4c7c:	6814      	ldr	r4, [r2, #0]
    4c7e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c82:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
    4c86:	6814      	ldr	r4, [r2, #0]
    4c88:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c8c:	f894 4042 	ldrb.w	r4, [r4, #66]	; 0x42
    4c90:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c94:	b2a4      	uxth	r4, r4
    4c96:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c98:	f000 80e8 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4c9c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c9e:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ca0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ca4:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
    4ca8:	6814      	ldr	r4, [r2, #0]
    4caa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cae:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    4cb2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4cb6:	b2a4      	uxth	r4, r4
    4cb8:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cba:	f000 80d7 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4cbe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cc0:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4cc2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cc6:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
    4cca:	6814      	ldr	r4, [r2, #0]
    4ccc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cd0:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    4cd4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4cd8:	b2a4      	uxth	r4, r4
    4cda:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cdc:	f000 80c6 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ce0:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ce2:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ce4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ce8:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
    4cec:	6814      	ldr	r4, [r2, #0]
    4cee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cf2:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    4cf6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4cfa:	b2a4      	uxth	r4, r4
    4cfc:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cfe:	f000 80b5 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d02:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d04:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d06:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d0a:	f894 c049 	ldrb.w	ip, [r4, #73]	; 0x49
    4d0e:	6814      	ldr	r4, [r2, #0]
    4d10:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d14:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    4d18:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4d1c:	b2a4      	uxth	r4, r4
    4d1e:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d20:	f000 80a4 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d24:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d26:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d28:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d2c:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
    4d30:	6814      	ldr	r4, [r2, #0]
    4d32:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d36:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    4d3a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4d3e:	b2a4      	uxth	r4, r4
    4d40:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d42:	f000 8093 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d46:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d48:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d4a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d4e:	f894 c04d 	ldrb.w	ip, [r4, #77]	; 0x4d
    4d52:	6814      	ldr	r4, [r2, #0]
    4d54:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d58:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    4d5c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4d60:	b2a4      	uxth	r4, r4
    4d62:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d64:	f000 8082 	beq.w	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d68:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d6a:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d6c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d70:	f894 c04f 	ldrb.w	ip, [r4, #79]	; 0x4f
    4d74:	6814      	ldr	r4, [r2, #0]
    4d76:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d7a:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    4d7e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4d82:	b2a4      	uxth	r4, r4
    4d84:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d86:	d071      	beq.n	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d88:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d8a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d8c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d90:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
    4d94:	6814      	ldr	r4, [r2, #0]
    4d96:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d9a:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    4d9e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4da2:	b2a4      	uxth	r4, r4
    4da4:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4da6:	d061      	beq.n	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4da8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4daa:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4db0:	f894 c053 	ldrb.w	ip, [r4, #83]	; 0x53
    4db4:	6814      	ldr	r4, [r2, #0]
    4db6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4dba:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    4dbe:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4dc2:	b2a4      	uxth	r4, r4
    4dc4:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dc6:	d051      	beq.n	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dc8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dca:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dcc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4dd0:	f894 c055 	ldrb.w	ip, [r4, #85]	; 0x55
    4dd4:	6814      	ldr	r4, [r2, #0]
    4dd6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4dda:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    4dde:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4de2:	b2a4      	uxth	r4, r4
    4de4:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4de6:	d041      	beq.n	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4de8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dea:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dec:	f8d2 c000 	ldr.w	ip, [r2]
    4df0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4df4:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    4df8:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    4dfc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    4e00:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4e04:	b29b      	uxth	r3, r3
    4e06:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e08:	d030      	beq.n	4e6c <HAL_SPI_RxHalfCpltCallback+0x24c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e0a:	6813      	ldr	r3, [r2, #0]
    4e0c:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4e0e:	481c      	ldr	r0, [pc, #112]	; (4e80 <HAL_SPI_RxHalfCpltCallback+0x260>)
    4e10:	f005 f9b2 	bl	a178 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4e14:	4b21      	ldr	r3, [pc, #132]	; (4e9c <HAL_SPI_RxHalfCpltCallback+0x27c>)
    4e16:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4e1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4e1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4e22:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4e26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4e2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4e2e:	f005 fbab 	bl	a588 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4e32:	6822      	ldr	r2, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4e34:	491a      	ldr	r1, [pc, #104]	; (4ea0 <HAL_SPI_RxHalfCpltCallback+0x280>)
			__HAL_SPI_ENABLE(&hspi5);
    4e36:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4e38:	4811      	ldr	r0, [pc, #68]	; (4e80 <HAL_SPI_RxHalfCpltCallback+0x260>)
			__HAL_SPI_ENABLE(&hspi5);
    4e3a:	f043 0301 	orr.w	r3, r3, #1
    4e3e:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4e40:	2240      	movs	r2, #64	; 0x40
    4e42:	f005 f90d 	bl	a060 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4e46:	4a17      	ldr	r2, [pc, #92]	; (4ea4 <HAL_SPI_RxHalfCpltCallback+0x284>)
    4e48:	7813      	ldrb	r3, [r2, #0]
    4e4a:	3301      	adds	r3, #1
    4e4c:	b2db      	uxtb	r3, r3
    4e4e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4e50:	f3bf 8f4f 	dsb	sy
    4e54:	4b0d      	ldr	r3, [pc, #52]	; (4e8c <HAL_SPI_RxHalfCpltCallback+0x26c>)
    4e56:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    4e5a:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    4e5e:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    4e62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e66:	f3bf 8f6f 	isb	sy
}
    4e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			newPluck = 1;
    4e6c:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <HAL_SPI_RxHalfCpltCallback+0x288>)
    4e6e:	2201      	movs	r2, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4e70:	490b      	ldr	r1, [pc, #44]	; (4ea0 <HAL_SPI_RxHalfCpltCallback+0x280>)
			newPluck = 1;
    4e72:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4e74:	2240      	movs	r2, #64	; 0x40
    4e76:	4802      	ldr	r0, [pc, #8]	; (4e80 <HAL_SPI_RxHalfCpltCallback+0x260>)
    4e78:	f005 f8f2 	bl	a060 <__HAL_SPI_Receive_DMA_veneer>
    4e7c:	e7e8      	b.n	4e50 <HAL_SPI_RxHalfCpltCallback+0x230>
    4e7e:	bf00      	nop
    4e80:	2001cc68 	.word	0x2001cc68
    4e84:	200053c8 	.word	0x200053c8
    4e88:	38000000 	.word	0x38000000
    4e8c:	e000ed00 	.word	0xe000ed00
    4e90:	20000694 	.word	0x20000694
    4e94:	200053bc 	.word	0x200053bc
    4e98:	200143fc 	.word	0x200143fc
    4e9c:	58024400 	.word	0x58024400
    4ea0:	38000040 	.word	0x38000040
    4ea4:	2001907d 	.word	0x2001907d
    4ea8:	200054e0 	.word	0x200054e0
	...

00004ec0 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    4ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4ec4:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4ffc <audioInitString1+0x13c>
    4ec8:	f899 3000 	ldrb.w	r3, [r9]
{
    4ecc:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d048      	beq.n	4f66 <audioInitString1+0xa6>
    4ed4:	4c36      	ldr	r4, [pc, #216]	; (4fb0 <audioInitString1+0xf0>)
    4ed6:	2500      	movs	r5, #0
    4ed8:	4f36      	ldr	r7, [pc, #216]	; (4fb4 <audioInitString1+0xf4>)
    4eda:	4e37      	ldr	r6, [pc, #220]	; (4fb8 <audioInitString1+0xf8>)
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4edc:	ed9f aa37 	vldr	s20, [pc, #220]	; 4fbc <audioInitString1+0xfc>
    4ee0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 4fc0 <audioInitString1+0x100>
    4ee4:	eddf 9a37 	vldr	s19, [pc, #220]	; 4fc4 <audioInitString1+0x104>
    4ee8:	ed9f 9a37 	vldr	s18, [pc, #220]	; 4fc8 <audioInitString1+0x108>
    4eec:	eddf 8a37 	vldr	s17, [pc, #220]	; 4fcc <audioInitString1+0x10c>
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
		tPickupNonLinearity_init(&pu[v], &leaf);
    4ef0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5000 <audioInitString1+0x140>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4ef4:	4b36      	ldr	r3, [pc, #216]	; (4fd0 <audioInitString1+0x110>)
    4ef6:	eef0 2a4a 	vmov.f32	s5, s20
    4efa:	eef0 1a48 	vmov.f32	s3, s16
    4efe:	2200      	movs	r2, #0
    4f00:	eeb0 1a69 	vmov.f32	s2, s19
    4f04:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 4fbc <audioInitString1+0xfc>
    4f08:	eef0 0a49 	vmov.f32	s1, s18
    4f0c:	2104      	movs	r1, #4
    4f0e:	4620      	mov	r0, r4
    4f10:	eeb0 0a68 	vmov.f32	s0, s17
    4f14:	f005 f954 	bl	a1c0 <__tSimpleLivingString3_initToPool_veneer>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4f18:	4620      	mov	r0, r4
    4f1a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 4fd4 <audioInitString1+0x114>
	for (int v = 0; v < numStringsThisBoard; v++)
    4f1e:	3501      	adds	r5, #1
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4f20:	f005 fa9a 	bl	a458 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    4f24:	4620      	mov	r0, r4
    4f26:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 4fd8 <audioInitString1+0x118>
    4f2a:	f005 fa8d 	bl	a448 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    4f2e:	eeb0 0a48 	vmov.f32	s0, s16
    4f32:	4620      	mov	r0, r4
    4f34:	f005 f92c 	bl	a190 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    4f38:	4620      	mov	r0, r4
    4f3a:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
    4f3c:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    4f3e:	f005 fa57 	bl	a3f0 <__tSimpleLivingString3_setLevMode_veneer>
		tPickupNonLinearity_init(&pu[v], &leaf);
    4f42:	4638      	mov	r0, r7
    4f44:	4641      	mov	r1, r8
	for (int v = 0; v < numStringsThisBoard; v++)
    4f46:	3704      	adds	r7, #4
		tPickupNonLinearity_init(&pu[v], &leaf);
    4f48:	f005 fb5a 	bl	a600 <__tPickupNonLinearity_init_veneer>
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    4f4c:	4630      	mov	r0, r6
    4f4e:	4641      	mov	r1, r8
    4f50:	eddf 0a22 	vldr	s1, [pc, #136]	; 4fdc <audioInitString1+0x11c>
    4f54:	ed9f 0a22 	vldr	s0, [pc, #136]	; 4fe0 <audioInitString1+0x120>
	for (int v = 0; v < numStringsThisBoard; v++)
    4f58:	3604      	adds	r6, #4
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    4f5a:	f005 f905 	bl	a168 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4f5e:	f899 3000 	ldrb.w	r3, [r9]
    4f62:	42ab      	cmp	r3, r5
    4f64:	dcc6      	bgt.n	4ef4 <audioInitString1+0x34>
    4f66:	4d1f      	ldr	r5, [pc, #124]	; (4fe4 <audioInitString1+0x124>)
	}
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    4f68:	2400      	movs	r4, #0
    4f6a:	4e1f      	ldr	r6, [pc, #124]	; (4fe8 <audioInitString1+0x128>)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
		knobFrozen[i] = 1;
    4f6c:	2701      	movs	r7, #1
    4f6e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5004 <audioInitString1+0x144>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    4f72:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 4fec <audioInitString1+0x12c>
    4f76:	4628      	mov	r0, r5
    4f78:	eeb0 0a48 	vmov.f32	s0, s16
    4f7c:	f005 fa2c 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    4f80:	4628      	mov	r0, r5
    4f82:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    4f86:	3504      	adds	r5, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    4f88:	f005 f9a2 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    4f8c:	f808 7004 	strb.w	r7, [r8, r4]
	for (int i = 0; i < 12; i++)
    4f90:	3401      	adds	r4, #1
    4f92:	2c0c      	cmp	r4, #12
    4f94:	d1ef      	bne.n	4f76 <audioInitString1+0xb6>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    4f96:	ed9f 0a16 	vldr	s0, [pc, #88]	; 4ff0 <audioInitString1+0x130>
    4f9a:	4816      	ldr	r0, [pc, #88]	; (4ff4 <audioInitString1+0x134>)
    4f9c:	f005 f850 	bl	a040 <__tVZFilter_setFreq_veneer>

	whichStringModelLoaded = String1Loaded;
    4fa0:	4b15      	ldr	r3, [pc, #84]	; (4ff8 <audioInitString1+0x138>)
    4fa2:	2200      	movs	r2, #0
    4fa4:	701a      	strb	r2, [r3, #0]
}
    4fa6:	ecbd 8b06 	vpop	{d8-d10}
    4faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fae:	bf00      	nop
    4fb0:	2001ccf0 	.word	0x2001ccf0
    4fb4:	2001cd00 	.word	0x2001cd00
    4fb8:	2001ccf8 	.word	0x2001ccf8
    4fbc:	3c23d70a 	.word	0x3c23d70a
    4fc0:	00000000 	.word	0x00000000
    4fc4:	3f7fff58 	.word	0x3f7fff58
    4fc8:	4684d000 	.word	0x4684d000
    4fcc:	435c0000 	.word	0x435c0000
    4fd0:	200054d8 	.word	0x200054d8
    4fd4:	3d40c0f0 	.word	0x3d40c0f0
    4fd8:	3cf753bf 	.word	0x3cf753bf
    4fdc:	3f19999a 	.word	0x3f19999a
    4fe0:	42800000 	.word	0x42800000
    4fe4:	20005430 	.word	0x20005430
    4fe8:	200008b4 	.word	0x200008b4
    4fec:	3a83126f 	.word	0x3a83126f
    4ff0:	45504000 	.word	0x45504000
    4ff4:	200054e8 	.word	0x200054e8
    4ff8:	20014451 	.word	0x20014451
    4ffc:	20000694 	.word	0x20000694
    5000:	20005484 	.word	0x20005484
    5004:	200053cc 	.word	0x200053cc
    5008:	f3af 8000 	nop.w
    500c:	f3af 8000 	nop.w
    5010:	f3af 8000 	nop.w
    5014:	f3af 8000 	nop.w
    5018:	f3af 8000 	nop.w
    501c:	f3af 8000 	nop.w

00005020 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    5020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5024:	f8df 8044 	ldr.w	r8, [pc, #68]	; 506c <audioFreeString1+0x4c>
    5028:	f898 3000 	ldrb.w	r3, [r8]
    502c:	b1ab      	cbz	r3, 505a <audioFreeString1+0x3a>
    502e:	4f0c      	ldr	r7, [pc, #48]	; (5060 <audioFreeString1+0x40>)
    5030:	2400      	movs	r4, #0
    5032:	4e0c      	ldr	r6, [pc, #48]	; (5064 <audioFreeString1+0x44>)
    5034:	4d0c      	ldr	r5, [pc, #48]	; (5068 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    5036:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    5038:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    503a:	f005 f9e9 	bl	a410 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    503e:	4630      	mov	r0, r6
    5040:	f005 f9f2 	bl	a428 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    5044:	4628      	mov	r0, r5
    5046:	f005 fa37 	bl	a4b8 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    504a:	f898 3000 	ldrb.w	r3, [r8]
    504e:	3704      	adds	r7, #4
    5050:	3604      	adds	r6, #4
    5052:	42a3      	cmp	r3, r4
    5054:	f105 0504 	add.w	r5, r5, #4
    5058:	dced      	bgt.n	5036 <audioFreeString1+0x16>
	}
}
    505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    505e:	bf00      	nop
    5060:	2001ccf8 	.word	0x2001ccf8
    5064:	2001ccf0 	.word	0x2001ccf0
    5068:	2001cd00 	.word	0x2001cd00
    506c:	20000694 	.word	0x20000694
    5070:	f3af 8000 	nop.w
    5074:	f3af 8000 	nop.w
    5078:	f3af 8000 	nop.w
    507c:	f3af 8000 	nop.w

00005080 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    5080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    5084:	4b9b      	ldr	r3, [pc, #620]	; (52f4 <audioTickString1+0x274>)
    5086:	4c9c      	ldr	r4, [pc, #624]	; (52f8 <audioTickString1+0x278>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5088:	489c      	ldr	r0, [pc, #624]	; (52fc <audioTickString1+0x27c>)
    508a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 5354 <audioTickString1+0x2d4>
    508e:	4625      	mov	r5, r4
    5090:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    5094:	ed2d 8b0a 	vpush	{d8-d12}
    5098:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    509a:	781b      	ldrb	r3, [r3, #0]
{
    509c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    509e:	009b      	lsls	r3, r3, #2
    50a0:	3307      	adds	r3, #7
    50a2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    50a6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    50aa:	f005 f8ed 	bl	a288 <__tExpSmooth_tick_veneer>
    50ae:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
    50b2:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    50b4:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
    50b6:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    50ba:	f005 f8e5 	bl	a288 <__tExpSmooth_tick_veneer>
    50be:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    50c2:	454d      	cmp	r5, r9
    50c4:	d1f6      	bne.n	50b4 <audioTickString1+0x34>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    50c6:	4b8b      	ldr	r3, [pc, #556]	; (52f4 <audioTickString1+0x274>)
	pluckPos = knobScaled[9];
    50c8:	4a8d      	ldr	r2, [pc, #564]	; (5300 <audioTickString1+0x280>)
    50ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    50cc:	781b      	ldrb	r3, [r3, #0]
	float temp = 0.0f;
    50ce:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 5304 <audioTickString1+0x284>
	pluckPos = knobScaled[9];
    50d2:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    50d4:	2b00      	cmp	r3, #0
    50d6:	f000 80d2 	beq.w	527e <audioTickString1+0x1fe>
    50da:	4b8b      	ldr	r3, [pc, #556]	; (5308 <audioTickString1+0x288>)
    50dc:	2200      	movs	r2, #0
    50de:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5358 <audioTickString1+0x2d8>
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    50e2:	eef0 8a48 	vmov.f32	s17, s16
    50e6:	f8df a274 	ldr.w	sl, [pc, #628]	; 535c <audioTickString1+0x2dc>
    50ea:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5360 <audioTickString1+0x2e0>
    50ee:	613b      	str	r3, [r7, #16]
    50f0:	4b86      	ldr	r3, [pc, #536]	; (530c <audioTickString1+0x28c>)
    50f2:	ed9f ba87 	vldr	s22, [pc, #540]	; 5310 <audioTickString1+0x290>
    50f6:	617b      	str	r3, [r7, #20]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    50f8:	4633      	mov	r3, r6
		float decay = 0.1f;
    50fa:	eddf aa86 	vldr	s21, [pc, #536]	; 5314 <audioTickString1+0x294>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    50fe:	4616      	mov	r6, r2
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5100:	eddf ba85 	vldr	s23, [pc, #532]	; 5318 <audioTickString1+0x298>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    5104:	4652      	mov	r2, sl
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    5106:	ed9f aa85 	vldr	s20, [pc, #532]	; 531c <audioTickString1+0x29c>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    510a:	46ca      	mov	sl, r9
    510c:	4d84      	ldr	r5, [pc, #528]	; (5320 <audioTickString1+0x2a0>)
    510e:	46c1      	mov	r9, r8
    5110:	f8df b250 	ldr.w	fp, [pc, #592]	; 5364 <audioTickString1+0x2e4>
    5114:	eddf 9a83 	vldr	s19, [pc, #524]	; 5324 <audioTickString1+0x2a4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    5118:	4983      	ldr	r1, [pc, #524]	; (5328 <audioTickString1+0x2a8>)
			note[i] = 0.0f;
    511a:	eeb0 ca68 	vmov.f32	s24, s17
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    511e:	ea4f 0886 	mov.w	r8, r6, lsl #2
    5122:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5126:	edd1 7a00 	vldr	s15, [r1]
    512a:	6939      	ldr	r1, [r7, #16]
    512c:	ecb1 7a01 	vldmia	r1!, {s14}
    5130:	ee77 7a87 	vadd.f32	s15, s15, s14
    5134:	6139      	str	r1, [r7, #16]
		if (note[i] < 0.0f)
    5136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    513a:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5142:	f100 80d3 	bmi.w	52ec <audioTickString1+0x26c>
    5146:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    514a:	fe87 cacb 	vminnm.f32	s24, s15, s22
		if (lsDecay[i])
    514e:	6978      	ldr	r0, [r7, #20]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5150:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    5154:	eef0 ca6a 	vmov.f32	s25, s21
    5158:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    515c:	f810 1b01 	ldrb.w	r1, [r0], #1
    5160:	6178      	str	r0, [r7, #20]
    5162:	b129      	cbz	r1, 5170 <audioTickString1+0xf0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5164:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    5168:	eee7 7a2b 	vfma.f32	s15, s14, s23
    516c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    5170:	4628      	mov	r0, r5
    5172:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    5176:	3601      	adds	r6, #1
    5178:	e9c7 3201 	strd	r3, r2, [r7, #4]
    517c:	4b6b      	ldr	r3, [pc, #428]	; (532c <audioTickString1+0x2ac>)
    517e:	4498      	add	r8, r3
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    5180:	f004 ff86 	bl	a090 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    5184:	4628      	mov	r0, r5
    5186:	eeb0 0a6c 	vmov.f32	s0, s25
    518a:	f005 f815 	bl	a1b8 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    518e:	4628      	mov	r0, r5
    5190:	eeb0 0a69 	vmov.f32	s0, s19
    5194:	f005 f8e4 	bl	a360 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    5198:	ed94 0a00 	vldr	s0, [r4]
    519c:	4628      	mov	r0, r5
    519e:	ee20 0a0a 	vmul.f32	s0, s0, s20
    51a2:	f004 fff5 	bl	a190 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51a6:	edd4 7a05 	vldr	s15, [r4, #20]
    51aa:	eddf 6a61 	vldr	s13, [pc, #388]	; 5330 <audioTickString1+0x2b0>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    51ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    51b2:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    51b6:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    51be:	60fd      	str	r5, [r7, #12]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51c0:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    51c4:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleDelay = knobScaled[11];
    51c8:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51cc:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    51d0:	eec7 6a06 	vdiv.f32	s13, s14, s12
    51d4:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    51d8:	f005 f80e 	bl	a1f8 <__mtof_veneer>
    51dc:	4648      	mov	r0, r9
    51de:	f004 ff87 	bl	a0f0 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    51e2:	4648      	mov	r0, r9
    51e4:	f005 f850 	bl	a288 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    51e8:	68f9      	ldr	r1, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    51ea:	f109 0904 	add.w	r9, r9, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    51ee:	4608      	mov	r0, r1
    51f0:	f005 f906 	bl	a400 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    51f4:	4b4f      	ldr	r3, [pc, #316]	; (5334 <audioTickString1+0x2b4>)
    51f6:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    51fa:	4640      	mov	r0, r8
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    51fc:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    5200:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 5338 <audioTickString1+0x2b8>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    5204:	ee77 7ae6 	vsub.f32	s15, s15, s13
    5208:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    520c:	eeb4 0a47 	vcmp.f32	s0, s14
    5210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5214:	fe38 0a80 	vselgt.f32	s0, s17, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    5218:	f004 ff6a 	bl	a0f0 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    521c:	4640      	mov	r0, r8
    521e:	f005 f833 	bl	a288 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    5222:	4650      	mov	r0, sl
    5224:	f004 ff8c 	bl	a140 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    5228:	4b42      	ldr	r3, [pc, #264]	; (5334 <audioTickString1+0x2b4>)
    522a:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    522e:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5232:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    5236:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    5238:	4840      	ldr	r0, [pc, #256]	; (533c <audioTickString1+0x2bc>)
    523a:	f005 f941 	bl	a4c0 <__tNoise_tick_veneer>
    523e:	4840      	ldr	r0, [pc, #256]	; (5340 <audioTickString1+0x2c0>)
    5240:	f004 ff2e 	bl	a0a0 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5244:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    5248:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    524c:	68f9      	ldr	r1, [r7, #12]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    524e:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5252:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5254:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5258:	ee27 0a80 	vmul.f32	s0, s15, s0
    525c:	f004 ffc4 	bl	a1e8 <__tSimpleLivingString3_tick_veneer>
    5260:	68ba      	ldr	r2, [r7, #8]
    5262:	4610      	mov	r0, r2
    5264:	60fa      	str	r2, [r7, #12]
    5266:	f005 f8d7 	bl	a418 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    526a:	4b22      	ldr	r3, [pc, #136]	; (52f4 <audioTickString1+0x274>)
    526c:	68fa      	ldr	r2, [r7, #12]
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    526e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5272:	7819      	ldrb	r1, [r3, #0]
    5274:	3204      	adds	r2, #4
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	42b1      	cmp	r1, r6
    527a:	f73f af4d 	bgt.w	5118 <audioTickString1+0x98>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    527e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 5344 <audioTickString1+0x2c4>
    5282:	eddf 7a31 	vldr	s15, [pc, #196]	; 5348 <audioTickString1+0x2c8>
    5286:	eef0 0a40 	vmov.f32	s1, s0
    528a:	ed9f 1a21 	vldr	s2, [pc, #132]	; 5310 <audioTickString1+0x290>
    528e:	eee9 0a27 	vfma.f32	s1, s18, s15
    5292:	f004 ff9d 	bl	a1d0 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    5296:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    529a:	492c      	ldr	r1, [pc, #176]	; (534c <audioTickString1+0x2cc>)
	float omAlpha = 1.0f - alpha;
    529c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    52a0:	4a2b      	ldr	r2, [pc, #172]	; (5350 <audioTickString1+0x2d0>)

	return temp;
}
    52a2:	371c      	adds	r7, #28
	int volIdxInt = (int) volIdx;
    52a4:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    52a8:	edd1 6a00 	vldr	s13, [r1]
    52ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    52b0:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    52b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    52b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    52ba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    52be:	ee30 0a47 	vsub.f32	s0, s0, s14
    52c2:	ee28 8a26 	vmul.f32	s16, s16, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    52c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    52ca:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    52ce:	ed93 7a00 	vldr	s14, [r3]
    52d2:	edd2 6a00 	vldr	s13, [r2]
    52d6:	ee20 0a26 	vmul.f32	s0, s0, s13
    52da:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp *= outVol * masterVolFromBrain;
    52de:	ee28 0a00 	vmul.f32	s0, s16, s0
}
    52e2:	46bd      	mov	sp, r7
    52e4:	ecbd 8b0a 	vpop	{d8-d12}
    52e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52ec:	ed43 8a01 	vstr	s17, [r3, #-4]
		if (note[i] > 127.0f)
    52f0:	e72d      	b.n	514e <audioTickString1+0xce>
    52f2:	bf00      	nop
    52f4:	20000694 	.word	0x20000694
    52f8:	200053e0 	.word	0x200053e0
    52fc:	2001444c 	.word	0x2001444c
    5300:	20000698 	.word	0x20000698
    5304:	00000000 	.word	0x00000000
    5308:	2001441c 	.word	0x2001441c
    530c:	200054d4 	.word	0x200054d4
    5310:	42fe0000 	.word	0x42fe0000
    5314:	3dcccccd 	.word	0x3dcccccd
    5318:	44480000 	.word	0x44480000
    531c:	3d108950 	.word	0x3d108950
    5320:	2001ccf0 	.word	0x2001ccf0
    5324:	46768933 	.word	0x46768933
    5328:	20014414 	.word	0x20014414
    532c:	20001394 	.word	0x20001394
    5330:	bcf5c28f 	.word	0xbcf5c28f
    5334:	20005548 	.word	0x20005548
    5338:	3e4ccccd 	.word	0x3e4ccccd
    533c:	200054dc 	.word	0x200054dc
    5340:	200054e8 	.word	0x200054e8
    5344:	423c0000 	.word	0x423c0000
    5348:	42a00000 	.word	0x42a00000
    534c:	2000068c 	.word	0x2000068c
    5350:	200006a0 	.word	0x200006a0
    5354:	20005430 	.word	0x20005430
    5358:	2000138c 	.word	0x2000138c
    535c:	2001cd00 	.word	0x2001cd00
    5360:	2001ccf8 	.word	0x2001ccf8
    5364:	20001384 	.word	0x20001384
    5368:	f3af 8000 	nop.w
    536c:	f3af 8000 	nop.w
    5370:	f3af 8000 	nop.w
    5374:	f3af 8000 	nop.w
    5378:	f3af 8000 	nop.w
    537c:	f3af 8000 	nop.w

00005380 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    5380:	4a74      	ldr	r2, [pc, #464]	; (5554 <audioFrameString1+0x1d4>)
	if (resetStringInputs)
    5382:	4b75      	ldr	r3, [pc, #468]	; (5558 <audioFrameString1+0x1d8>)
{
    5384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5388:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    538c:	f8d2 b004 	ldr.w	fp, [r2, #4]
{
    5390:	b083      	sub	sp, #12
	if (resetStringInputs)
    5392:	781a      	ldrb	r2, [r3, #0]
{
    5394:	4605      	mov	r5, r0
	if (resetStringInputs)
    5396:	2a00      	cmp	r2, #0
    5398:	d175      	bne.n	5486 <audioFrameString1+0x106>
    539a:	4f70      	ldr	r7, [pc, #448]	; (555c <audioFrameString1+0x1dc>)
	if (newPluck)
    539c:	683b      	ldr	r3, [r7, #0]
    539e:	2b00      	cmp	r3, #0
    53a0:	d03f      	beq.n	5422 <audioFrameString1+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    53a2:	4b6f      	ldr	r3, [pc, #444]	; (5560 <audioFrameString1+0x1e0>)
    53a4:	7818      	ldrb	r0, [r3, #0]
    53a6:	2800      	cmp	r0, #0
    53a8:	d039      	beq.n	541e <audioFrameString1+0x9e>
    53aa:	4b6e      	ldr	r3, [pc, #440]	; (5564 <audioFrameString1+0x1e4>)
    53ac:	4639      	mov	r1, r7
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    53ae:	eddf 9a6e 	vldr	s19, [pc, #440]	; 5568 <audioFrameString1+0x1e8>
    53b2:	462f      	mov	r7, r5
    53b4:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 556c <audioFrameString1+0x1ec>
    53b8:	461d      	mov	r5, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    53ba:	eddf 8a6d 	vldr	s17, [pc, #436]	; 5570 <audioFrameString1+0x1f0>
		for (int i = 0; i < numStringsThisBoard; i++)
    53be:	2400      	movs	r4, #0
    53c0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 55b0 <audioFrameString1+0x230>
    53c4:	460b      	mov	r3, r1
    53c6:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 55b4 <audioFrameString1+0x234>
    53ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 5594 <audioFrameString1+0x214>
    53ce:	4e69      	ldr	r6, [pc, #420]	; (5574 <audioFrameString1+0x1f4>)
    53d0:	4a69      	ldr	r2, [pc, #420]	; (5578 <audioFrameString1+0x1f8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    53d2:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    53d6:	b289      	uxth	r1, r1
    53d8:	b921      	cbnz	r1, 53e4 <audioFrameString1+0x64>
    53da:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    53de:	b289      	uxth	r1, r1
    53e0:	2900      	cmp	r1, #0
    53e2:	d166      	bne.n	54b2 <audioFrameString1+0x132>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    53e4:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    53e8:	b289      	uxth	r1, r1
    53ea:	b139      	cbz	r1, 53fc <audioFrameString1+0x7c>
    53ec:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    53f0:	b289      	uxth	r1, r1
    53f2:	b919      	cbnz	r1, 53fc <audioFrameString1+0x7c>
				lsDecay[i] = 0;
    53f4:	f888 1000 	strb.w	r1, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
    53f8:	4959      	ldr	r1, [pc, #356]	; (5560 <audioFrameString1+0x1e0>)
    53fa:	7808      	ldrb	r0, [r1, #0]
			previousStringInputs[i] = stringInputs[i];
    53fc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5400:	3504      	adds	r5, #4
    5402:	f10a 0a04 	add.w	sl, sl, #4
    5406:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    540a:	b289      	uxth	r1, r1
		for (int i = 0; i < numStringsThisBoard; i++)
    540c:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    5410:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5414:	3401      	adds	r4, #1
    5416:	42a0      	cmp	r0, r4
    5418:	dcdb      	bgt.n	53d2 <audioFrameString1+0x52>
    541a:	463d      	mov	r5, r7
    541c:	461f      	mov	r7, r3
		newPluck = 0;
    541e:	2300      	movs	r3, #0
    5420:	603b      	str	r3, [r7, #0]
    5422:	4c56      	ldr	r4, [pc, #344]	; (557c <audioFrameString1+0x1fc>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5424:	ed9f 8a56 	vldr	s16, [pc, #344]	; 5580 <audioFrameString1+0x200>
    5428:	f504 7300 	add.w	r3, r4, #512	; 0x200
    542c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    5430:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5434:	f7ff fe24 	bl	5080 <audioTickString1>
    5438:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    543c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    543e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5442:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5444:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    5448:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    544c:	d1f2      	bne.n	5434 <audioFrameString1+0xb4>
	if (switchStrings)
    544e:	4c4d      	ldr	r4, [pc, #308]	; (5584 <audioFrameString1+0x204>)
    5450:	6823      	ldr	r3, [r4, #0]
    5452:	bb53      	cbnz	r3, 54aa <audioFrameString1+0x12a>
	switchStrings = 0;
    5454:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5456:	4b3f      	ldr	r3, [pc, #252]	; (5554 <audioFrameString1+0x1d4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5458:	484b      	ldr	r0, [pc, #300]	; (5588 <audioFrameString1+0x208>)
	switchStrings = 0;
    545a:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    545c:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    545e:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5462:	eba3 030b 	sub.w	r3, r3, fp
    5466:	4949      	ldr	r1, [pc, #292]	; (558c <audioFrameString1+0x20c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5468:	4a49      	ldr	r2, [pc, #292]	; (5590 <audioFrameString1+0x210>)
    546a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    546e:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5470:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5474:	ee67 7a87 	vmul.f32	s15, s15, s14
    5478:	edc2 7a00 	vstr	s15, [r2]
}
    547c:	b003      	add	sp, #12
    547e:	ecbd 8b04 	vpop	{d8-d9}
    5482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    5486:	4a36      	ldr	r2, [pc, #216]	; (5560 <audioFrameString1+0x1e0>)
    5488:	7811      	ldrb	r1, [r2, #0]
    548a:	b141      	cbz	r1, 549e <audioFrameString1+0x11e>
			lsDecay[i] = 0;
    548c:	2200      	movs	r2, #0
    548e:	4841      	ldr	r0, [pc, #260]	; (5594 <audioFrameString1+0x214>)
			previousStringInputs[i] = 0;
    5490:	4e38      	ldr	r6, [pc, #224]	; (5574 <audioFrameString1+0x1f4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    5492:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    5494:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    5496:	8032      	strh	r2, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    5498:	d001      	beq.n	549e <audioFrameString1+0x11e>
			lsDecay[i] = 0;
    549a:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    549c:	8072      	strh	r2, [r6, #2]
		resetStringInputs = 0;
    549e:	2200      	movs	r2, #0
		newPluck = 1;
    54a0:	4f2e      	ldr	r7, [pc, #184]	; (555c <audioFrameString1+0x1dc>)
		resetStringInputs = 0;
    54a2:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    54a4:	2301      	movs	r3, #1
    54a6:	603b      	str	r3, [r7, #0]
    54a8:	e778      	b.n	539c <audioFrameString1+0x1c>
		switchStringModel(switchStrings);
    54aa:	6820      	ldr	r0, [r4, #0]
    54ac:	f7fb fff8 	bl	14a0 <switchStringModel>
    54b0:	e7d0      	b.n	5454 <audioFrameString1+0xd4>
				float note = stringMIDIPitches[i] + stringOctave[i];
    54b2:	4939      	ldr	r1, [pc, #228]	; (5598 <audioFrameString1+0x218>)
    54b4:	9301      	str	r3, [sp, #4]
    54b6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    54ba:	ed91 0a00 	vldr	s0, [r1]
				stringOctave[i] = octave;
    54be:	4937      	ldr	r1, [pc, #220]	; (559c <audioFrameString1+0x21c>)
    54c0:	edd1 7a00 	vldr	s15, [r1]
				float note = stringMIDIPitches[i] + stringOctave[i];
    54c4:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    54c8:	edc5 7a00 	vstr	s15, [r5]
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    54cc:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    54d0:	fe80 0a49 	vminnm.f32	s0, s0, s18
    54d4:	f004 fe90 	bl	a1f8 <__mtof_veneer>
    54d8:	4650      	mov	r0, sl
    54da:	f004 fef9 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    54de:	4650      	mov	r0, sl
    54e0:	f004 fed2 	bl	a288 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    54e4:	4648      	mov	r0, r9
    54e6:	f004 ff8b 	bl	a400 <__tSimpleLivingString3_setFreq_veneer>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    54ea:	492d      	ldr	r1, [pc, #180]	; (55a0 <audioFrameString1+0x220>)
    54ec:	482d      	ldr	r0, [pc, #180]	; (55a4 <audioFrameString1+0x224>)
    54ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    54f2:	f891 c000 	ldrb.w	ip, [r1]
    54f6:	ed90 7a02 	vldr	s14, [r0, #8]
    54fa:	482b      	ldr	r0, [pc, #172]	; (55a8 <audioFrameString1+0x228>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    54fc:	4a1e      	ldr	r2, [pc, #120]	; (5578 <audioFrameString1+0x1f8>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    54fe:	ee71 7a47 	vsub.f32	s15, s2, s14
    5502:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    5506:	ed9f 0a18 	vldr	s0, [pc, #96]	; 5568 <audioFrameString1+0x1e8>
    550a:	edd0 6a00 	vldr	s13, [r0]
    550e:	4827      	ldr	r0, [pc, #156]	; (55ac <audioFrameString1+0x22c>)
    5510:	eee6 7a87 	vfma.f32	s15, s13, s14
    5514:	edd0 0a00 	vldr	s1, [r0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5518:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
    551c:	b283      	uxth	r3, r0
    551e:	ee08 3a10 	vmov	s16, r3
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5522:	ee60 0aa7 	vmul.f32	s1, s1, s15
    5526:	f004 fe53 	bl	a1d0 <__LEAF_clip_veneer>
    552a:	4648      	mov	r0, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    552c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5530:	eef0 0a40 	vmov.f32	s1, s0
    5534:	ee28 0a28 	vmul.f32	s0, s16, s17
    5538:	f004 fda2 	bl	a080 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    553c:	4918      	ldr	r1, [pc, #96]	; (55a0 <audioFrameString1+0x220>)
		for (int i = 0; i < numStringsThisBoard; i++)
    553e:	4b08      	ldr	r3, [pc, #32]	; (5560 <audioFrameString1+0x1e0>)
				currentRandom++;
    5540:	7808      	ldrb	r0, [r1, #0]
			{
    5542:	4a0d      	ldr	r2, [pc, #52]	; (5578 <audioFrameString1+0x1f8>)
				currentRandom++;
    5544:	3001      	adds	r0, #1
    5546:	7008      	strb	r0, [r1, #0]
				lsDecay[i] = 1;
    5548:	2101      	movs	r1, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    554a:	7818      	ldrb	r0, [r3, #0]
				lsDecay[i] = 1;
    554c:	f888 1000 	strb.w	r1, [r8]
			{
    5550:	9b01      	ldr	r3, [sp, #4]
    5552:	e753      	b.n	53fc <audioFrameString1+0x7c>
    5554:	e0001000 	.word	0xe0001000
    5558:	20005968 	.word	0x20005968
    555c:	200054e0 	.word	0x200054e0
    5560:	20000694 	.word	0x20000694
    5564:	2001441c 	.word	0x2001441c
    5568:	00000000 	.word	0x00000000
    556c:	42fe0000 	.word	0x42fe0000
    5570:	37800080 	.word	0x37800080
    5574:	20005550 	.word	0x20005550
    5578:	200143fc 	.word	0x200143fc
    557c:	30000000 	.word	0x30000000
    5580:	4b000000 	.word	0x4b000000
    5584:	20014434 	.word	0x20014434
    5588:	20000684 	.word	0x20000684
    558c:	20014438 	.word	0x20014438
    5590:	200053c4 	.word	0x200053c4
    5594:	200054d4 	.word	0x200054d4
    5598:	20014414 	.word	0x20014414
    559c:	200054ec 	.word	0x200054ec
    55a0:	200144fe 	.word	0x200144fe
    55a4:	200053e0 	.word	0x200053e0
    55a8:	20005568 	.word	0x20005568
    55ac:	20000698 	.word	0x20000698
    55b0:	2001ccf8 	.word	0x2001ccf8
    55b4:	2001ccf0 	.word	0x2001ccf0
	...

000055c0 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    55c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    55c4:	4e20      	ldr	r6, [pc, #128]	; (5648 <audioInitString2+0x88>)
{
    55c6:	ed2d 8b02 	vpush	{d8}
	for (int v = 0; v < numStringsThisBoard; v++)
    55ca:	7833      	ldrb	r3, [r6, #0]
    55cc:	b1d3      	cbz	r3, 5604 <audioInitString2+0x44>
    55ce:	4d1f      	ldr	r5, [pc, #124]	; (564c <audioInitString2+0x8c>)
    55d0:	2400      	movs	r4, #0
    55d2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5664 <audioInitString2+0xa4>
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    55d6:	4f1e      	ldr	r7, [pc, #120]	; (5650 <audioInitString2+0x90>)
    55d8:	4628      	mov	r0, r5
    55da:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    55de:	463a      	mov	r2, r7
    55e0:	2101      	movs	r1, #1
    55e2:	f004 fe0d 	bl	a200 <__tTString_initToPool_veneer>
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    55e6:	f8d8 1000 	ldr.w	r1, [r8]
    55ea:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    55ec:	3504      	adds	r5, #4
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    55ee:	4421      	add	r1, r4
	for (int v = 0; v < numStringsThisBoard; v++)
    55f0:	3401      	adds	r4, #1
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    55f2:	2903      	cmp	r1, #3
    55f4:	bfd4      	ite	le
    55f6:	2100      	movle	r1, #0
    55f8:	2101      	movgt	r1, #1
    55fa:	f004 fea9 	bl	a350 <__tTString_setWoundOrUnwound_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    55fe:	7833      	ldrb	r3, [r6, #0]
    5600:	42a3      	cmp	r3, r4
    5602:	dce9      	bgt.n	55d8 <audioInitString2+0x18>
    5604:	4c13      	ldr	r4, [pc, #76]	; (5654 <audioInitString2+0x94>)
	}
	//load string2 default params:
	for (int i = 0; i < 20; i++)
    5606:	2500      	movs	r5, #0
    5608:	4e13      	ldr	r6, [pc, #76]	; (5658 <audioInitString2+0x98>)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
    560a:	2701      	movs	r7, #1
    560c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5668 <audioInitString2+0xa8>
    5610:	f104 0850 	add.w	r8, r4, #80	; 0x50
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    5614:	ed9f 8a11 	vldr	s16, [pc, #68]	; 565c <audioInitString2+0x9c>
    5618:	4620      	mov	r0, r4
    561a:	eeb0 0a48 	vmov.f32	s0, s16
    561e:	f004 fedb 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    5622:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    5624:	3404      	adds	r4, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    5626:	ecb6 0a01 	vldmia	r6!, {s0}
    562a:	f004 fe51 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    562e:	f809 7005 	strb.w	r7, [r9, r5]
	for (int i = 0; i < 20; i++)
    5632:	45a0      	cmp	r8, r4
    5634:	f105 0501 	add.w	r5, r5, #1
    5638:	d1ee      	bne.n	5618 <audioInitString2+0x58>
	}
	whichStringModelLoaded = String2Loaded;
    563a:	4b09      	ldr	r3, [pc, #36]	; (5660 <audioInitString2+0xa0>)
    563c:	701f      	strb	r7, [r3, #0]
}
    563e:	ecbd 8b02 	vpop	{d8}
    5642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5646:	bf00      	nop
    5648:	20000694 	.word	0x20000694
    564c:	2001cd08 	.word	0x2001cd08
    5650:	200054d8 	.word	0x200054d8
    5654:	20005430 	.word	0x20005430
    5658:	200008e4 	.word	0x200008e4
    565c:	3a83126f 	.word	0x3a83126f
    5660:	20014451 	.word	0x20014451
    5664:	200053bc 	.word	0x200053bc
    5668:	200053cc 	.word	0x200053cc
    566c:	f3af 8000 	nop.w
    5670:	f3af 8000 	nop.w
    5674:	f3af 8000 	nop.w
    5678:	f3af 8000 	nop.w
    567c:	f3af 8000 	nop.w

00005680 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    5680:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5682:	4e07      	ldr	r6, [pc, #28]	; (56a0 <audioFreeString2+0x20>)
    5684:	7833      	ldrb	r3, [r6, #0]
    5686:	b14b      	cbz	r3, 569c <audioFreeString2+0x1c>
    5688:	4d06      	ldr	r5, [pc, #24]	; (56a4 <audioFreeString2+0x24>)
    568a:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    568c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    568e:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    5690:	f004 fdce 	bl	a230 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5694:	7833      	ldrb	r3, [r6, #0]
    5696:	3504      	adds	r5, #4
    5698:	42a3      	cmp	r3, r4
    569a:	dcf7      	bgt.n	568c <audioFreeString2+0xc>
	}
}
    569c:	bd70      	pop	{r4, r5, r6, pc}
    569e:	bf00      	nop
    56a0:	20000694 	.word	0x20000694
    56a4:	2001cd08 	.word	0x2001cd08
    56a8:	f3af 8000 	nop.w
    56ac:	f3af 8000 	nop.w
    56b0:	f3af 8000 	nop.w
    56b4:	f3af 8000 	nop.w
    56b8:	f3af 8000 	nop.w
    56bc:	f3af 8000 	nop.w

000056c0 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    56c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    56c4:	48e4      	ldr	r0, [pc, #912]	; (5a58 <audioTickString2+0x398>)
    56c6:	4ee5      	ldr	r6, [pc, #916]	; (5a5c <audioTickString2+0x39c>)
    56c8:	4de5      	ldr	r5, [pc, #916]	; (5a60 <audioTickString2+0x3a0>)
    56ca:	4634      	mov	r4, r6
    56cc:	f106 0750 	add.w	r7, r6, #80	; 0x50
{
    56d0:	ed2d 8b10 	vpush	{d8-d15}
    56d4:	b085      	sub	sp, #20
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    56d6:	f004 fdd7 	bl	a288 <__tExpSmooth_tick_veneer>
    56da:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 20; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    56de:	4628      	mov	r0, r5
	for (int i = 0; i < 20; i++)
    56e0:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    56e2:	f004 fdd1 	bl	a288 <__tExpSmooth_tick_veneer>
    56e6:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 20; i++)
    56ea:	42a7      	cmp	r7, r4
    56ec:	d1f7      	bne.n	56de <audioTickString2+0x1e>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    56ee:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 5a9c <audioTickString2+0x3dc>
    56f2:	f8d8 3000 	ldr.w	r3, [r8]
    56f6:	2b00      	cmp	r3, #0
    56f8:	f040 8289 	bne.w	5c0e <audioTickString2+0x54e>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    56fc:	4bd9      	ldr	r3, [pc, #868]	; (5a64 <audioTickString2+0x3a4>)
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    56fe:	ed9f 9ada 	vldr	s18, [pc, #872]	; 5a68 <audioTickString2+0x3a8>
		for (int i = 0; i < numStringsThisBoard; i++)
    5702:	781a      	ldrb	r2, [r3, #0]
    5704:	9302      	str	r3, [sp, #8]
	for (int i = 0; i < numStringsThisBoard; i++)
    5706:	2a00      	cmp	r2, #0
    5708:	f000 82d7 	beq.w	5cba <audioTickString2+0x5fa>
		{

			float thisString = (firstString + i);
			float thisStringProportion = thisString * invNumStrings;
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    570c:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
    5710:	4bd6      	ldr	r3, [pc, #856]	; (5a6c <audioTickString2+0x3ac>)
    5712:	eef0 9a49 	vmov.f32	s19, s18
    5716:	f8df 8388 	ldr.w	r8, [pc, #904]	; 5aa0 <audioTickString2+0x3e0>
    571a:	f8df 9388 	ldr.w	r9, [pc, #904]	; 5aa4 <audioTickString2+0x3e4>
	for (int i = 0; i < numStringsThisBoard; i++)
    571e:	2500      	movs	r5, #0
    5720:	4cd3      	ldr	r4, [pc, #844]	; (5a70 <audioTickString2+0x3b0>)
    5722:	ed9f cad4 	vldr	s24, [pc, #848]	; 5a74 <audioTickString2+0x3b4>
    5726:	4fd4      	ldr	r7, [pc, #848]	; (5a78 <audioTickString2+0x3b8>)
    5728:	f8df b37c 	ldr.w	fp, [pc, #892]	; 5aa8 <audioTickString2+0x3e8>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    572c:	eddf bad3 	vldr	s23, [pc, #844]	; 5a7c <audioTickString2+0x3bc>
    5730:	ed9f bad3 	vldr	s22, [pc, #844]	; 5a80 <audioTickString2+0x3c0>
    5734:	eddf aad3 	vldr	s21, [pc, #844]	; 5a84 <audioTickString2+0x3c4>
    5738:	9303      	str	r3, [sp, #12]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    573a:	9b03      	ldr	r3, [sp, #12]
    573c:	46a2      	mov	sl, r4
    573e:	ecf8 7a01 	vldmia	r8!, {s15}
    5742:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5746:	edd3 8a00 	vldr	s17, [r3]
    574a:	ee78 8aa7 	vadd.f32	s17, s17, s15
    574e:	fec8 8acc 	vminnm.f32	s17, s17, s24
    5752:	fec8 8aa9 	vmaxnm.f32	s17, s17, s19
		float finalFreq = mtofTableLookup(theNote[i]);
    5756:	eeb0 0a68 	vmov.f32	s0, s17
    575a:	f004 fd99 	bl	a290 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    575e:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    5762:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    5766:	ee38 0ae7 	vsub.f32	s0, s17, s15
    576a:	f004 fd91 	bl	a290 <__mtofTableLookup_veneer>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    576e:	eeb0 2a6b 	vmov.f32	s4, s23
    5772:	eef0 1a4b 	vmov.f32	s3, s22
    5776:	eddf 0ac4 	vldr	s1, [pc, #784]	; 5a88 <audioTickString2+0x3c8>
    577a:	eeb0 1a6a 	vmov.f32	s2, s21
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    577e:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    5782:	f004 fec9 	bl	a518 <__LEAF_map_veneer>
    5786:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    578a:	4648      	mov	r0, r9
    578c:	ee17 1a90 	vmov	r1, s15
    5790:	f004 fd5a 	bl	a248 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    5794:	6839      	ldr	r1, [r7, #0]
    5796:	2900      	cmp	r1, #0
    5798:	f000 81ed 	beq.w	5b76 <audioTickString2+0x4b6>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    579c:	ed94 0a00 	vldr	s0, [r4]
    57a0:	4648      	mov	r0, r9
    57a2:	f004 fd61 	bl	a268 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    57a6:	eeb0 0a48 	vmov.f32	s0, s16
    57aa:	4648      	mov	r0, r9

		tTString_setFreq(&strings[i], finalFreq);



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    57ac:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    57b0:	f004 fe4e 	bl	a450 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    57b4:	ed96 0a06 	vldr	s0, [r6, #24]
    57b8:	4648      	mov	r0, r9
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    57ba:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    57be:	f004 fd83 	bl	a2c8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    57c2:	ed96 0a07 	vldr	s0, [r6, #28]
    57c6:	4648      	mov	r0, r9
    57c8:	f004 fe86 	bl	a4d8 <__tTString_setFeedbackReactionSpeed_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    57cc:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    57d0:	4648      	mov	r0, r9
    57d2:	f004 fdb1 	bl	a338 <__tTString_setRippleDepth_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    57d6:	eeb0 0a4d 	vmov.f32	s0, s26
    57da:	4648      	mov	r0, r9
    57dc:	f004 fc3c 	bl	a058 <__tTString_setFreq_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    57e0:	eef0 0a68 	vmov.f32	s1, s17
    57e4:	edd6 7a00 	vldr	s15, [r6]
    57e8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    57ec:	eee7 0a8e 	vfma.f32	s1, s15, s28
    57f0:	f004 fc7a 	bl	a0e8 <__fastPowf_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    57f4:	eef0 0a68 	vmov.f32	s1, s17
    57f8:	edd6 7a01 	vldr	s15, [r6, #4]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    57fc:	eef0 da40 	vmov.f32	s27, s0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    5800:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    5804:	eee7 0a8e 	vfma.f32	s1, s15, s28
    5808:	f004 fc6e 	bl	a0e8 <__fastPowf_veneer>
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    580c:	eddb 0a00 	vldr	s1, [fp]
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    5810:	eeb0 da40 	vmov.f32	s26, s0
			if (stringParams[i][0][0] > openStringFreq)
    5814:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    581c:	f100 8182 	bmi.w	5b24 <audioTickString2+0x464>
		float oneMinusAlpha = 1.0f;
    5820:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    5824:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
		float alpha = 0.0f;
    5828:	eef0 8a69 	vmov.f32	s17, s19
			if (stringParams[i][0][0] > openStringFreq)
    582c:	eeb4 8ac7 	vcmpe.f32	s16, s14
    5830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5834:	f100 816a 	bmi.w	5b0c <audioTickString2+0x44c>
				if (stringParams[i+1][0][0] < openStringFreq)
    5838:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    583c:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    5840:	2300      	movs	r3, #0
			if (stringParams[i][0][0] > openStringFreq)
    5842:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    5846:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    584e:	d505      	bpl.n	585c <audioTickString2+0x19c>
				if (stringParams[i+1][0][0] < openStringFreq)
    5850:	eeb4 8ac7 	vcmpe.f32	s16, s14
    5854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5858:	f300 8260 	bgt.w	5d1c <audioTickString2+0x65c>
			if (stringParams[i][0][0] > openStringFreq)
    585c:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    5860:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    5864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5868:	d505      	bpl.n	5876 <audioTickString2+0x1b6>
				if (stringParams[i+1][0][0] < openStringFreq)
    586a:	eeb4 8ae0 	vcmpe.f32	s16, s1
    586e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5872:	f300 823f 	bgt.w	5cf4 <audioTickString2+0x634>
			if (stringParams[i][0][0] > openStringFreq)
    5876:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    587a:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5882:	d505      	bpl.n	5890 <audioTickString2+0x1d0>
				if (stringParams[i+1][0][0] < openStringFreq)
    5884:	eeb4 8ac7 	vcmpe.f32	s16, s14
    5888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    588c:	f300 82c3 	bgt.w	5e16 <audioTickString2+0x756>
			if (stringParams[i][0][0] > openStringFreq)
    5890:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    5894:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    5898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    589c:	d505      	bpl.n	58aa <audioTickString2+0x1ea>
				if (stringParams[i+1][0][0] < openStringFreq)
    589e:	eeb4 8ae0 	vcmpe.f32	s16, s1
    58a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58a6:	f300 82a2 	bgt.w	5dee <audioTickString2+0x72e>
			if (stringParams[i][0][0] > openStringFreq)
    58aa:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    58ae:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    58b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58b6:	d505      	bpl.n	58c4 <audioTickString2+0x204>
				if (stringParams[i+1][0][0] < openStringFreq)
    58b8:	eeb4 8ac7 	vcmpe.f32	s16, s14
    58bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58c0:	f300 8283 	bgt.w	5dca <audioTickString2+0x70a>
			if (stringParams[i][0][0] > openStringFreq)
    58c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    58c8:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    58cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58d0:	d505      	bpl.n	58de <audioTickString2+0x21e>
				if (stringParams[i+1][0][0] < openStringFreq)
    58d2:	eeb4 8ae0 	vcmpe.f32	s16, s1
    58d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58da:	f300 8262 	bgt.w	5da2 <audioTickString2+0x6e2>
			if (stringParams[i][0][0] > openStringFreq)
    58de:	eeb4 8ae0 	vcmpe.f32	s16, s1
    58e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58e6:	d50a      	bpl.n	58fe <audioTickString2+0x23e>
				if (stringParams[i+1][0][0] < openStringFreq)
    58e8:	ed9b 1a51 	vldr	s2, [fp, #324]	; 0x144
    58ec:	eeb4 8ac1 	vcmpe.f32	s16, s2
    58f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58f4:	f300 8247 	bgt.w	5d86 <audioTickString2+0x6c6>
    58f8:	eef2 ea04 	vmov.f32	s29, #36	; 0x41200000  10.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
				{
					which = 9;
    58fc:	2309      	movs	r3, #9
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    58fe:	edda 7a00 	vldr	s15, [sl]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5902:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
		float barHeight = barInMIDI[i] / 12.0f;
    5906:	ed9f 7a61 	vldr	s14, [pc, #388]	; 5a8c <audioTickString2+0x3cc>
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    590a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    590e:	9301      	str	r3, [sp, #4]
    5910:	eeb0 0a69 	vmov.f32	s0, s19
		float barHeight = barInMIDI[i] / 12.0f;
    5914:	ee67 7a87 	vmul.f32	s15, s15, s14
		uint32_t barHeightInt = (uint32_t)barHeight;
    5918:	3404      	adds	r4, #4
    591a:	eebc eae7 	vcvt.u32.f32	s28, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    591e:	ee7f fae7 	vsub.f32	s31, s31, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5922:	ee1e 3a10 	vmov	r3, s28
		float barHeightAlpha = barHeight - barHeightInt;
    5926:	eeb8 7a4e 	vcvt.f32.u32	s14, s28
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    592a:	3301      	adds	r3, #1
		float barHeightAlpha = barHeight - barHeightInt;
    592c:	ee37 8ac7 	vsub.f32	s16, s15, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5930:	ee00 3a90 	vmov	s1, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5934:	ee7f fa87 	vadd.f32	s31, s31, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5938:	eef8 0a60 	vcvt.f32.u32	s1, s1
    593c:	f004 fc48 	bl	a1d0 <__LEAF_clip_veneer>
    5940:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5944:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    5948:	eef0 0a6e 	vmov.f32	s1, s29
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    594c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5950:	eeb0 0a69 	vmov.f32	s0, s19
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5954:	ee17 aa90 	vmov	sl, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5958:	f004 fc3a 	bl	a1d0 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    595c:	9b01      	ldr	r3, [sp, #4]
    595e:	2b09      	cmp	r3, #9
    5960:	f000 80ed 	beq.w	5b3e <audioTickString2+0x47e>
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5964:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5968:	ee1e 2a10 	vmov	r2, s28
    596c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	for (int i = 0; i < numStringsThisBoard; i++)
    5970:	3501      	adds	r5, #1
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5972:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5976:	ee17 2a90 	vmov	r2, s15
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    597a:	eb0a 00ca 	add.w	r0, sl, sl, lsl #3
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    597e:	009b      	lsls	r3, r3, #2
    5980:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5984:	0080      	lsls	r0, r0, #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5986:	0092      	lsls	r2, r2, #2
    5988:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    598c:	445a      	add	r2, fp
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    598e:	ed92 7a02 	vldr	s14, [r2, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5992:	edd2 7a01 	vldr	s15, [r2, #4]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5996:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    599a:	ee28 7a87 	vmul.f32	s14, s17, s14
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    599e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    59a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
    59a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    59ae:	445a      	add	r2, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    59b0:	445b      	add	r3, fp
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59b2:	4459      	add	r1, fp
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    59b4:	ed92 6a02 	vldr	s12, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59b8:	edd2 6a01 	vldr	s13, [r2, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    59bc:	ed91 0a02 	vldr	s0, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59c0:	edd1 5a01 	vldr	s11, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    59c4:	ee28 0a80 	vmul.f32	s0, s17, s0
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    59c8:	edd3 4a02 	vldr	s9, [r3, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59cc:	ee68 8aa5 	vmul.f32	s17, s17, s11
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    59d0:	ed93 5a01 	vldr	s10, [r3, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    59d4:	eea4 7a8f 	vfma.f32	s14, s9, s30
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    59d8:	eea6 0a0f 	vfma.f32	s0, s12, s30
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    59dc:	eee6 8a8f 	vfma.f32	s17, s13, s30
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    59e0:	eee5 7a0f 	vfma.f32	s15, s10, s30
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    59e4:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    59e8:	ee28 8a28 	vmul.f32	s16, s16, s17
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    59ec:	eeaf 0a87 	vfma.f32	s0, s31, s14
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    59f0:	eeaf 8aa7 	vfma.f32	s16, s31, s15
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    59f4:	4648      	mov	r0, r9
    59f6:	ee2d 0a80 	vmul.f32	s0, s27, s0
    59fa:	f004 fc71 	bl	a2e0 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    59fe:	4648      	mov	r0, r9
    5a00:	ee2d 0a08 	vmul.f32	s0, s26, s16
    5a04:	f004 fc90 	bl	a328 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]);
    5a08:	4648      	mov	r0, r9
    5a0a:	f004 fc01 	bl	a210 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    5a0e:	9b02      	ldr	r3, [sp, #8]
		temp += tTString_tick(&strings[i]);
    5a10:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5a14:	f109 0904 	add.w	r9, r9, #4
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	42ab      	cmp	r3, r5
    5a1c:	f73f ae8d 	bgt.w	573a <audioTickString2+0x7a>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    5a20:	683b      	ldr	r3, [r7, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    5a22:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5a26:	eddf 0a1a 	vldr	s1, [pc, #104]	; 5a90 <audioTickString2+0x3d0>
	thisFrameCount = (thisFrameCount + 1) & 63;
    5a2a:	3301      	adds	r3, #1
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5a2c:	ed9f 1a11 	vldr	s2, [pc, #68]	; 5a74 <audioTickString2+0x3b4>
    5a30:	ee6a 0a20 	vmul.f32	s1, s20, s1
    5a34:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 5a68 <audioTickString2+0x3a8>
	thisFrameCount = (thisFrameCount + 1) & 63;
    5a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5a3c:	603b      	str	r3, [r7, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5a3e:	f004 fbc7 	bl	a1d0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    5a42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    5a46:	4b13      	ldr	r3, [pc, #76]	; (5a94 <audioTickString2+0x3d4>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5a48:	4a13      	ldr	r2, [pc, #76]	; (5a98 <audioTickString2+0x3d8>)
    5a4a:	ed93 7a00 	vldr	s14, [r3]
	int volIdxInt = (int) volIdx;
    5a4e:	ee17 3a90 	vmov	r3, s15
	float omAlpha = 1.0f - alpha;
    5a52:	ee78 7a40 	vsub.f32	s15, s16, s0
    5a56:	e02b      	b.n	5ab0 <audioTickString2+0x3f0>
    5a58:	2001444c 	.word	0x2001444c
    5a5c:	200053e0 	.word	0x200053e0
    5a60:	20005430 	.word	0x20005430
    5a64:	20000694 	.word	0x20000694
    5a68:	00000000 	.word	0x00000000
    5a6c:	20014414 	.word	0x20014414
    5a70:	20001384 	.word	0x20001384
    5a74:	42fe0000 	.word	0x42fe0000
    5a78:	2001cd10 	.word	0x2001cd10
    5a7c:	42f00000 	.word	0x42f00000
    5a80:	428c0000 	.word	0x428c0000
    5a84:	43770000 	.word	0x43770000
    5a88:	42f60000 	.word	0x42f60000
    5a8c:	3daaaaab 	.word	0x3daaaaab
    5a90:	42a00000 	.word	0x42a00000
    5a94:	2000068c 	.word	0x2000068c
    5a98:	200006a0 	.word	0x200006a0
    5a9c:	200054e0 	.word	0x200054e0
    5aa0:	2001441c 	.word	0x2001441c
    5aa4:	2001cd08 	.word	0x2001cd08
    5aa8:	20000934 	.word	0x20000934
    5aac:	3f7ae148 	.word	0x3f7ae148
    5ab0:	ee29 9a07 	vmul.f32	s18, s18, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5ab4:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    5ab6:	ee07 3a10 	vmov	s14, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    5abe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5ac2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5ac6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    5aca:	ee30 0a47 	vsub.f32	s0, s0, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5ace:	edd2 6a00 	vldr	s13, [r2]
	float omAlpha = 1.0f - alpha;
    5ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5ad6:	ed93 7a00 	vldr	s14, [r3]
    5ada:	ee20 0a26 	vmul.f32	s0, s0, s13
    5ade:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp = tanhf(temp);
    5ae2:	ee29 0a00 	vmul.f32	s0, s18, s0
    5ae6:	f004 fb1f 	bl	a128 <__tanhf_veneer>
    5aea:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5aee:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 5aac <audioTickString2+0x3ec>
    5af2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    5af6:	eeb0 1a48 	vmov.f32	s2, s16
    5afa:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    5afe:	b005      	add	sp, #20
    5b00:	ecbd 8b10 	vpop	{d8-d15}
    5b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5b08:	f004 bb62 	b.w	a1d0 <__LEAF_clip_veneer>
				if (stringParams[i+1][0][0] < openStringFreq)
    5b0c:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    5b10:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b18:	f300 8121 	bgt.w	5d5e <audioTickString2+0x69e>
    5b1c:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    5b20:	2300      	movs	r3, #0
    5b22:	e68e      	b.n	5842 <audioTickString2+0x182>
    5b24:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
    5b28:	eeb4 8ac7 	vcmpe.f32	s16, s14
    5b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b30:	f300 8106 	bgt.w	5d40 <audioTickString2+0x680>
		float oneMinusAlpha = 1.0f;
    5b34:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    5b38:	eef0 8a69 	vmov.f32	s17, s19
    5b3c:	e676      	b.n	582c <audioTickString2+0x16c>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    5b3e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    5b42:	ee1e 3a10 	vmov	r3, s28
	for (int i = 0; i < numStringsThisBoard; i++)
    5b46:	3501      	adds	r5, #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    5b48:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    5b4c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5b50:	ed9a 0a53 	vldr	s0, [sl, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5b54:	edda 7a52 	vldr	s15, [sl, #328]	; 0x148
			float freq1 = stringParams[9][barHeightInt][1];
    5b58:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5b5c:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5b60:	ee28 8a27 	vmul.f32	s16, s16, s15
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5b64:	edd1 6a53 	vldr	s13, [r1, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5b68:	ed91 7a52 	vldr	s14, [r1, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5b6c:	eeaf 0aa6 	vfma.f32	s0, s31, s13
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5b70:	eeaf 8a87 	vfma.f32	s16, s31, s14
		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    5b74:	e73e      	b.n	59f4 <audioTickString2+0x334>
			float thisString = (firstString + i);
    5b76:	4bb4      	ldr	r3, [pc, #720]	; (5e48 <audioTickString2+0x788>)
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    5b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5b7c:	edd6 5a0b 	vldr	s11, [r6, #44]	; 0x2c
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    5b80:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
			float thisString = (firstString + i);
    5b84:	681b      	ldr	r3, [r3, #0]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5b86:	eeb0 0a68 	vmov.f32	s0, s17
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    5b8a:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    5b8e:	eef0 8a6c 	vmov.f32	s17, s25
			float thisString = (firstString + i);
    5b92:	442b      	add	r3, r5
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5b94:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    5b98:	ed9f 2aac 	vldr	s4, [pc, #688]	; 5e4c <audioTickString2+0x78c>
			float thisString = (firstString + i);
    5b9c:	ee07 3a90 	vmov	s15, r3
			float thisStringProportion = thisString * invNumStrings;
    5ba0:	4bab      	ldr	r3, [pc, #684]	; (5e50 <audioTickString2+0x790>)
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5ba2:	eddf 1aac 	vldr	s3, [pc, #688]	; 5e54 <audioTickString2+0x794>
			float thisString = (firstString + i);
    5ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    5baa:	ed93 5a00 	vldr	s10, [r3]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5bae:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 5e58 <audioTickString2+0x798>
    5bb2:	9101      	str	r1, [sp, #4]
			float thisStringProportion = thisString * invNumStrings;
    5bb4:	ee67 7a85 	vmul.f32	s15, s15, s10
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    5bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
    5bbc:	ee67 7aa5 	vmul.f32	s15, s15, s11
    5bc0:	eee6 7a07 	vfma.f32	s15, s12, s14
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    5bc4:	eee7 8aa6 	vfma.f32	s17, s15, s13
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5bc8:	f004 fca6 	bl	a518 <__LEAF_map_veneer>
			if (knobScaled[5] > 0.05f)
    5bcc:	edd6 0a05 	vldr	s1, [r6, #20]
    5bd0:	eddf 7aa2 	vldr	s15, [pc, #648]	; 5e5c <audioTickString2+0x79c>
    5bd4:	9901      	ldr	r1, [sp, #4]
    5bd6:	eef4 0ae7 	vcmpe.f32	s1, s15
    5bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bde:	dd6e      	ble.n	5cbe <audioTickString2+0x5fe>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    5be0:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 5e60 <audioTickString2+0x7a0>
    5be4:	ee60 0a80 	vmul.f32	s1, s1, s0
    5be8:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 5e64 <audioTickString2+0x7a4>
    5bec:	f004 faf0 	bl	a1d0 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    5bf0:	eef0 0a4d 	vmov.f32	s1, s26
    5bf4:	4648      	mov	r0, r9
    5bf6:	f004 fc13 	bl	a420 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    5bfa:	4648      	mov	r0, r9
    5bfc:	2101      	movs	r1, #1
    5bfe:	f004 fc4f 	bl	a4a0 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    5c02:	eeb0 0a68 	vmov.f32	s0, s17
    5c06:	4648      	mov	r0, r9
    5c08:	f004 faf2 	bl	a1f0 <__tTString_setHarmonic_veneer>
    5c0c:	e5c6      	b.n	579c <audioTickString2+0xdc>
		for (int i = 0; i < numStringsThisBoard; i++)
    5c0e:	4b96      	ldr	r3, [pc, #600]	; (5e68 <audioTickString2+0x7a8>)
    5c10:	781a      	ldrb	r2, [r3, #0]
    5c12:	9302      	str	r3, [sp, #8]
    5c14:	2a00      	cmp	r2, #0
    5c16:	f000 8110 	beq.w	5e3a <audioTickString2+0x77a>
    5c1a:	f8df a274 	ldr.w	sl, [pc, #628]	; 5e90 <audioTickString2+0x7d0>
    5c1e:	2400      	movs	r4, #0
				float finalFreq = mtofTableLookup(theNote[i]);
    5c20:	ed9f 9a92 	vldr	s18, [pc, #584]	; 5e6c <audioTickString2+0x7ac>
    5c24:	eddf 8a92 	vldr	s17, [pc, #584]	; 5e70 <audioTickString2+0x7b0>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5c28:	ed9f 8a92 	vldr	s16, [pc, #584]	; 5e74 <audioTickString2+0x7b4>
    5c2c:	4d92      	ldr	r5, [pc, #584]	; (5e78 <audioTickString2+0x7b8>)
    5c2e:	4f93      	ldr	r7, [pc, #588]	; (5e7c <audioTickString2+0x7bc>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    5c30:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5c34:	b29b      	uxth	r3, r3
    5c36:	2b00      	cmp	r3, #0
    5c38:	d14c      	bne.n	5cd4 <audioTickString2+0x614>
    5c3a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    5c3e:	b29b      	uxth	r3, r3
    5c40:	2b00      	cmp	r3, #0
    5c42:	d047      	beq.n	5cd4 <audioTickString2+0x614>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5c44:	4a8e      	ldr	r2, [pc, #568]	; (5e80 <audioTickString2+0x7c0>)
				stringOctave[i] = octave;
    5c46:	4b8f      	ldr	r3, [pc, #572]	; (5e84 <audioTickString2+0x7c4>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5c48:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				stringOctave[i] = octave;
    5c4c:	edd3 7a00 	vldr	s15, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5c50:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5c54:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5c58:	fa1f f983 	uxth.w	r9, r3
				stringOctave[i] = octave;
    5c5c:	4b8a      	ldr	r3, [pc, #552]	; (5e88 <audioTickString2+0x7c8>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5c5e:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    5c62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    5c66:	fe80 0a49 	vminnm.f32	s0, s0, s18
				stringOctave[i] = octave;
    5c6a:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    5c6e:	fe80 0a28 	vmaxnm.f32	s0, s0, s17
    5c72:	f004 fb0d 	bl	a290 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    5c76:	4650      	mov	r0, sl
    5c78:	f004 f9ee 	bl	a058 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5c7c:	ee07 9a90 	vmov	s15, r9
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    5c80:	ed96 0a02 	vldr	s0, [r6, #8]
    5c84:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5c86:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    5c8a:	ee60 0a88 	vmul.f32	s1, s1, s16
    5c8e:	f004 f9bf 	bl	a010 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5c92:	9b02      	ldr	r3, [sp, #8]
    5c94:	781a      	ldrb	r2, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
    5c96:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5c9a:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    5c9e:	b29b      	uxth	r3, r3
    5ca0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5ca4:	3401      	adds	r4, #1
    5ca6:	42a2      	cmp	r2, r4
    5ca8:	dcc2      	bgt.n	5c30 <audioTickString2+0x570>
		newPluck = 0;
    5caa:	2300      	movs	r3, #0
	for (int i = 0; i < numStringsThisBoard; i++)
    5cac:	ed9f 9a70 	vldr	s18, [pc, #448]	; 5e70 <audioTickString2+0x7b0>
		newPluck = 0;
    5cb0:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    5cb4:	2a00      	cmp	r2, #0
    5cb6:	f47f ad29 	bne.w	570c <audioTickString2+0x4c>
    5cba:	4f74      	ldr	r7, [pc, #464]	; (5e8c <audioTickString2+0x7cc>)
    5cbc:	e6b0      	b.n	5a20 <audioTickString2+0x360>
				tTString_setInharmonic(&strings[i], 0);
    5cbe:	4648      	mov	r0, r9
    5cc0:	f004 fbee 	bl	a4a0 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    5cc4:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    5cc8:	4648      	mov	r0, r9
    5cca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    5cce:	f004 fa8f 	bl	a1f0 <__tTString_setHarmonic_veneer>
    5cd2:	e563      	b.n	579c <audioTickString2+0xdc>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5cd4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5cd8:	b29b      	uxth	r3, r3
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d0db      	beq.n	5c96 <audioTickString2+0x5d6>
    5cde:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    5ce2:	b29b      	uxth	r3, r3
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d1d6      	bne.n	5c96 <audioTickString2+0x5d6>
				tTString_mute(&strings[i]);
    5ce8:	4650      	mov	r0, sl
    5cea:	f004 fc7d 	bl	a5e8 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5cee:	9b02      	ldr	r3, [sp, #8]
    5cf0:	781a      	ldrb	r2, [r3, #0]
    5cf2:	e7d0      	b.n	5c96 <audioTickString2+0x5d6>
					oneMinusAlpha = 1.0f - alpha;
    5cf4:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5cf8:	eeb0 1a60 	vmov.f32	s2, s1
    5cfc:	eeb0 0a48 	vmov.f32	s0, s16
    5d00:	eef0 0a47 	vmov.f32	s1, s14
    5d04:	f004 fb20 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5d08:	eef1 ea00 	vmov.f32	s29, #16	; 0x40800000  4.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d0c:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5d10:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
					oneMinusAlpha = 1.0f - alpha;
    5d14:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5d18:	2303      	movs	r3, #3
    5d1a:	e5ac      	b.n	5876 <audioTickString2+0x1b6>
					oneMinusAlpha = 1.0f - alpha;
    5d1c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d20:	eeb0 1a47 	vmov.f32	s2, s14
    5d24:	eeb0 0a48 	vmov.f32	s0, s16
    5d28:	f004 fb0e 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5d2c:	eef0 ea08 	vmov.f32	s29, #8	; 0x40400000  3.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d30:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5d34:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
					oneMinusAlpha = 1.0f - alpha;
    5d38:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5d3c:	2302      	movs	r3, #2
    5d3e:	e58d      	b.n	585c <audioTickString2+0x19c>
					oneMinusAlpha = 1.0f - alpha;
    5d40:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d44:	eeb0 1a47 	vmov.f32	s2, s14
    5d48:	eeb0 0a48 	vmov.f32	s0, s16
    5d4c:	f004 fafc 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5d50:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d54:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    5d58:	ee3f fa40 	vsub.f32	s30, s30, s0
    5d5c:	e566      	b.n	582c <audioTickString2+0x16c>
    5d5e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d62:	eeb0 1a60 	vmov.f32	s2, s1
    5d66:	eeb0 0a48 	vmov.f32	s0, s16
    5d6a:	eef0 0a47 	vmov.f32	s1, s14
    5d6e:	f004 faeb 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5d72:	eef0 ea00 	vmov.f32	s29, #0	; 0x40000000  2.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d76:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5d7a:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
					oneMinusAlpha = 1.0f - alpha;
    5d7e:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5d82:	2301      	movs	r3, #1
    5d84:	e55d      	b.n	5842 <audioTickString2+0x182>
					oneMinusAlpha = 1.0f - alpha;
    5d86:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d8a:	eeb0 0a48 	vmov.f32	s0, s16
    5d8e:	f004 fadb 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5d92:	eef2 ea02 	vmov.f32	s29, #34	; 0x41100000  9.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d96:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5d9a:	2308      	movs	r3, #8
					oneMinusAlpha = 1.0f - alpha;
    5d9c:	ee3f fa40 	vsub.f32	s30, s30, s0
    5da0:	e5ad      	b.n	58fe <audioTickString2+0x23e>
    5da2:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5da6:	eeb0 1a60 	vmov.f32	s2, s1
    5daa:	eeb0 0a48 	vmov.f32	s0, s16
    5dae:	eef0 0a47 	vmov.f32	s1, s14
    5db2:	f004 fac9 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5db6:	eef2 ea00 	vmov.f32	s29, #32	; 0x41000000  8.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dba:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5dbe:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
					oneMinusAlpha = 1.0f - alpha;
    5dc2:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5dc6:	2307      	movs	r3, #7
    5dc8:	e589      	b.n	58de <audioTickString2+0x21e>
					oneMinusAlpha = 1.0f - alpha;
    5dca:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dce:	eeb0 1a47 	vmov.f32	s2, s14
    5dd2:	eeb0 0a48 	vmov.f32	s0, s16
    5dd6:	f004 fab7 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5dda:	eef1 ea0c 	vmov.f32	s29, #28	; 0x40e00000  7.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dde:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5de2:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
					oneMinusAlpha = 1.0f - alpha;
    5de6:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5dea:	2306      	movs	r3, #6
    5dec:	e56a      	b.n	58c4 <audioTickString2+0x204>
					oneMinusAlpha = 1.0f - alpha;
    5dee:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5df2:	eeb0 1a60 	vmov.f32	s2, s1
    5df6:	eeb0 0a48 	vmov.f32	s0, s16
    5dfa:	eef0 0a47 	vmov.f32	s1, s14
    5dfe:	f004 faa3 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5e02:	eef1 ea08 	vmov.f32	s29, #24	; 0x40c00000  6.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e06:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5e0a:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
					oneMinusAlpha = 1.0f - alpha;
    5e0e:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5e12:	2305      	movs	r3, #5
    5e14:	e549      	b.n	58aa <audioTickString2+0x1ea>
					oneMinusAlpha = 1.0f - alpha;
    5e16:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e1a:	eeb0 1a47 	vmov.f32	s2, s14
    5e1e:	eeb0 0a48 	vmov.f32	s0, s16
    5e22:	f004 fa91 	bl	a348 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    5e26:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e2a:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5e2e:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
					oneMinusAlpha = 1.0f - alpha;
    5e32:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    5e36:	2304      	movs	r3, #4
    5e38:	e52a      	b.n	5890 <audioTickString2+0x1d0>
		newPluck = 0;
    5e3a:	ed9f 9a0d 	vldr	s18, [pc, #52]	; 5e70 <audioTickString2+0x7b0>
    5e3e:	4f13      	ldr	r7, [pc, #76]	; (5e8c <audioTickString2+0x7cc>)
    5e40:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    5e44:	e5ec      	b.n	5a20 <audioTickString2+0x360>
    5e46:	bf00      	nop
    5e48:	200053bc 	.word	0x200053bc
    5e4c:	3727c5ac 	.word	0x3727c5ac
    5e50:	20000688 	.word	0x20000688
    5e54:	38d1b717 	.word	0x38d1b717
    5e58:	42980000 	.word	0x42980000
    5e5c:	3d4ccccd 	.word	0x3d4ccccd
    5e60:	3c23d70a 	.word	0x3c23d70a
    5e64:	322bcc77 	.word	0x322bcc77
    5e68:	20000694 	.word	0x20000694
    5e6c:	42fe0000 	.word	0x42fe0000
    5e70:	00000000 	.word	0x00000000
    5e74:	37800080 	.word	0x37800080
    5e78:	20005550 	.word	0x20005550
    5e7c:	200143fc 	.word	0x200143fc
    5e80:	20014414 	.word	0x20014414
    5e84:	200054ec 	.word	0x200054ec
    5e88:	2001441c 	.word	0x2001441c
    5e8c:	2001cd10 	.word	0x2001cd10
    5e90:	2001cd08 	.word	0x2001cd08
    5e94:	f3af 8000 	nop.w
    5e98:	f3af 8000 	nop.w
    5e9c:	f3af 8000 	nop.w

00005ea0 <audioFrameString2>:
{
    5ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5ea4:	4b5c      	ldr	r3, [pc, #368]	; (6018 <audioFrameString2+0x178>)
{
    5ea6:	4680      	mov	r8, r0
		if (resetStringInputs)
    5ea8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 604c <audioFrameString2+0x1ac>
			for (int i = 0; i < numStringsThisBoard; i++)
    5eac:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6050 <audioFrameString2+0x1b0>
{
    5eb0:	ed2d 8b04 	vpush	{d8-d9}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5eb4:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    5eb6:	f89b 3000 	ldrb.w	r3, [fp]
    5eba:	2b00      	cmp	r3, #0
    5ebc:	f040 8086 	bne.w	5fcc <audioFrameString2+0x12c>
			for (int i = 0; i < numStringsThisBoard; i++)
    5ec0:	f899 3000 	ldrb.w	r3, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d051      	beq.n	5f6c <audioFrameString2+0xcc>
    5ec8:	4c54      	ldr	r4, [pc, #336]	; (601c <audioFrameString2+0x17c>)
    5eca:	2700      	movs	r7, #0
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    5ecc:	ed9f 8a54 	vldr	s16, [pc, #336]	; 6020 <audioFrameString2+0x180>
    5ed0:	ed9f 9a54 	vldr	s18, [pc, #336]	; 6024 <audioFrameString2+0x184>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    5ed4:	eddf 8a54 	vldr	s17, [pc, #336]	; 6028 <audioFrameString2+0x188>
    5ed8:	4d54      	ldr	r5, [pc, #336]	; (602c <audioFrameString2+0x18c>)
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    5eda:	4620      	mov	r0, r4
    5edc:	ed95 0a03 	vldr	s0, [r5, #12]
    5ee0:	f004 fa26 	bl	a330 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    5ee4:	4620      	mov	r0, r4
    5ee6:	ed95 0a04 	vldr	s0, [r5, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    5eea:	3701      	adds	r7, #1
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    5eec:	f004 f974 	bl	a1d8 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    5ef0:	eeb0 0a49 	vmov.f32	s0, s18
    5ef4:	edd5 7a08 	vldr	s15, [r5, #32]
    5ef8:	4620      	mov	r0, r4
    5efa:	eea7 0a88 	vfma.f32	s0, s15, s16
    5efe:	f004 f99b 	bl	a238 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    5f02:	4620      	mov	r0, r4
    5f04:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    5f08:	f004 f89e 	bl	a048 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    5f0c:	4620      	mov	r0, r4
    5f0e:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    5f12:	f004 f9d5 	bl	a2c0 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    5f16:	4620      	mov	r0, r4
    5f18:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    5f1c:	f004 f928 	bl	a170 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    5f20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5f24:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    5f28:	4620      	mov	r0, r4
    5f2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    5f2e:	f004 f99f 	bl	a270 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    5f32:	eeb0 0a68 	vmov.f32	s0, s17
    5f36:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    5f3a:	4620      	mov	r0, r4
    5f3c:	eea7 0a88 	vfma.f32	s0, s15, s16
    5f40:	f004 f96e 	bl	a220 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    5f44:	4620      	mov	r0, r4
    5f46:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    5f4a:	f004 f9d1 	bl	a2f0 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    5f4e:	4620      	mov	r0, r4
    5f50:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    5f54:	f004 faf0 	bl	a538 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    5f58:	4620      	mov	r0, r4
    5f5a:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
		for (int i = 0; i < numStringsThisBoard; i++)
    5f5e:	3404      	adds	r4, #4
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    5f60:	f004 fb36 	bl	a5d0 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5f64:	f899 3000 	ldrb.w	r3, [r9]
    5f68:	42bb      	cmp	r3, r7
    5f6a:	dcb6      	bgt.n	5eda <audioFrameString2+0x3a>
    5f6c:	4c30      	ldr	r4, [pc, #192]	; (6030 <audioFrameString2+0x190>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f6e:	ed9f 8a31 	vldr	s16, [pc, #196]	; 6034 <audioFrameString2+0x194>
    5f72:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5f76:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    5f7a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    5f7e:	f7ff fb9f 	bl	56c0 <audioTickString2>
    5f82:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f86:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f8c:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f8e:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5f92:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f96:	d1f2      	bne.n	5f7e <audioFrameString2+0xde>
		if (switchStrings)
    5f98:	4c27      	ldr	r4, [pc, #156]	; (6038 <audioFrameString2+0x198>)
    5f9a:	6823      	ldr	r3, [r4, #0]
    5f9c:	bb8b      	cbnz	r3, 6002 <audioFrameString2+0x162>
		switchStrings = 0;
    5f9e:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5fa0:	4b1d      	ldr	r3, [pc, #116]	; (6018 <audioFrameString2+0x178>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5fa2:	4826      	ldr	r0, [pc, #152]	; (603c <audioFrameString2+0x19c>)
		switchStrings = 0;
    5fa4:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5fa6:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5fa8:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5fac:	1b9b      	subs	r3, r3, r6
    5fae:	4924      	ldr	r1, [pc, #144]	; (6040 <audioFrameString2+0x1a0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5fb0:	4a24      	ldr	r2, [pc, #144]	; (6044 <audioFrameString2+0x1a4>)
    5fb2:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5fb6:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
    5fc0:	edc2 7a00 	vstr	s15, [r2]
}
    5fc4:	ecbd 8b04 	vpop	{d8-d9}
    5fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int i = 0; i < numStringsThisBoard; i++)
    5fcc:	f899 3000 	ldrb.w	r3, [r9]
    5fd0:	b1db      	cbz	r3, 600a <audioFrameString2+0x16a>
    5fd2:	2400      	movs	r4, #0
    5fd4:	4d11      	ldr	r5, [pc, #68]	; (601c <audioFrameString2+0x17c>)
    5fd6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6054 <audioFrameString2+0x1b4>
				previousStringInputs[i] = 0;
    5fda:	4627      	mov	r7, r4
				tTString_mute(&strings[i]);
    5fdc:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    5fde:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    5fe0:	f004 fb02 	bl	a5e8 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    5fe4:	f899 3000 	ldrb.w	r3, [r9]
				previousStringInputs[i] = 0;
    5fe8:	f82a 7014 	strh.w	r7, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    5fec:	3401      	adds	r4, #1
				previousStringInputs[i] = 0;
    5fee:	f04f 0200 	mov.w	r2, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    5ff2:	42a3      	cmp	r3, r4
    5ff4:	dcf2      	bgt.n	5fdc <audioFrameString2+0x13c>
			resetStringInputs = 0;
    5ff6:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    5ffa:	2101      	movs	r1, #1
    5ffc:	4a12      	ldr	r2, [pc, #72]	; (6048 <audioFrameString2+0x1a8>)
    5ffe:	6011      	str	r1, [r2, #0]
    6000:	e760      	b.n	5ec4 <audioFrameString2+0x24>
			switchStringModel(switchStrings);
    6002:	6820      	ldr	r0, [r4, #0]
    6004:	f7fb fa4c 	bl	14a0 <switchStringModel>
    6008:	e7c9      	b.n	5f9e <audioFrameString2+0xfe>
			resetStringInputs = 0;
    600a:	f88b 3000 	strb.w	r3, [fp]
			newPluck = 1;
    600e:	2301      	movs	r3, #1
    6010:	4a0d      	ldr	r2, [pc, #52]	; (6048 <audioFrameString2+0x1a8>)
    6012:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    6014:	e7aa      	b.n	5f6c <audioFrameString2+0xcc>
    6016:	bf00      	nop
    6018:	e0001000 	.word	0xe0001000
    601c:	2001cd08 	.word	0x2001cd08
    6020:	45bb8000 	.word	0x45bb8000
    6024:	447a0000 	.word	0x447a0000
    6028:	42700000 	.word	0x42700000
    602c:	200053e0 	.word	0x200053e0
    6030:	30000000 	.word	0x30000000
    6034:	4b000000 	.word	0x4b000000
    6038:	20014434 	.word	0x20014434
    603c:	20000684 	.word	0x20000684
    6040:	20014438 	.word	0x20014438
    6044:	200053c4 	.word	0x200053c4
    6048:	200054e0 	.word	0x200054e0
    604c:	20005968 	.word	0x20005968
    6050:	20000694 	.word	0x20000694
    6054:	20005550 	.word	0x20005550
	...

00006060 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    6060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    6062:	4e08      	ldr	r6, [pc, #32]	; (6084 <audioInitString3+0x24>)
    6064:	7833      	ldrb	r3, [r6, #0]
    6066:	b163      	cbz	r3, 6082 <audioInitString3+0x22>
    6068:	4d07      	ldr	r5, [pc, #28]	; (6088 <audioInitString3+0x28>)
    606a:	2400      	movs	r4, #0
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    606c:	4f07      	ldr	r7, [pc, #28]	; (608c <audioInitString3+0x2c>)
    606e:	4628      	mov	r0, r5
    6070:	463a      	mov	r2, r7
    6072:	2146      	movs	r1, #70	; 0x46
	for (int v = 0; v < numStringsThisBoard; v++)
    6074:	3401      	adds	r4, #1
		tStiffString_init(&stringsC[v], 70, &leaf);
    6076:	f004 fa7b 	bl	a570 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    607a:	7833      	ldrb	r3, [r6, #0]
    607c:	3504      	adds	r5, #4
    607e:	42a3      	cmp	r3, r4
    6080:	dcf5      	bgt.n	606e <audioInitString3+0xe>
	}
}
    6082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6084:	20000694 	.word	0x20000694
    6088:	2001cd3c 	.word	0x2001cd3c
    608c:	20005484 	.word	0x20005484
    6090:	f3af 8000 	nop.w
    6094:	f3af 8000 	nop.w
    6098:	f3af 8000 	nop.w
    609c:	f3af 8000 	nop.w

000060a0 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    60a0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    60a2:	4e07      	ldr	r6, [pc, #28]	; (60c0 <audioFreeString3+0x20>)
    60a4:	7833      	ldrb	r3, [r6, #0]
    60a6:	b14b      	cbz	r3, 60bc <audioFreeString3+0x1c>
    60a8:	4d06      	ldr	r5, [pc, #24]	; (60c4 <audioFreeString3+0x24>)
    60aa:	2400      	movs	r4, #0
	{
		tStiffString_free(&stringsC[v]);
    60ac:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    60ae:	3401      	adds	r4, #1
		tStiffString_free(&stringsC[v]);
    60b0:	f004 fa4e 	bl	a550 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    60b4:	7833      	ldrb	r3, [r6, #0]
    60b6:	3504      	adds	r5, #4
    60b8:	42a3      	cmp	r3, r4
    60ba:	dcf7      	bgt.n	60ac <audioFreeString3+0xc>
	}
}
    60bc:	bd70      	pop	{r4, r5, r6, pc}
    60be:	bf00      	nop
    60c0:	20000694 	.word	0x20000694
    60c4:	2001cd3c 	.word	0x2001cd3c
    60c8:	f3af 8000 	nop.w
    60cc:	f3af 8000 	nop.w
    60d0:	f3af 8000 	nop.w
    60d4:	f3af 8000 	nop.w
    60d8:	f3af 8000 	nop.w
    60dc:	f3af 8000 	nop.w

000060e0 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    60e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60e4:	4d0e      	ldr	r5, [pc, #56]	; (6120 <audioSwitchToString3+0x40>)
	for (int i = 0; i < 12; i++)
    60e6:	2400      	movs	r4, #0
    60e8:	4e0e      	ldr	r6, [pc, #56]	; (6124 <audioSwitchToString3+0x44>)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
		knobFrozen[i] = 1;
    60ea:	2701      	movs	r7, #1
    60ec:	f8df 803c 	ldr.w	r8, [pc, #60]	; 612c <audioSwitchToString3+0x4c>
{
    60f0:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    60f4:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 6128 <audioSwitchToString3+0x48>
    60f8:	4628      	mov	r0, r5
    60fa:	eeb0 0a48 	vmov.f32	s0, s16
    60fe:	f004 f96b 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    6102:	4628      	mov	r0, r5
    6104:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    6108:	3504      	adds	r5, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    610a:	f004 f8e1 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    610e:	f808 7004 	strb.w	r7, [r8, r4]
	for (int i = 0; i < 12; i++)
    6112:	3401      	adds	r4, #1
    6114:	2c0c      	cmp	r4, #12
    6116:	d1ef      	bne.n	60f8 <audioSwitchToString3+0x18>
	}
}
    6118:	ecbd 8b02 	vpop	{d8}
    611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6120:	20005430 	.word	0x20005430
    6124:	20000a9c 	.word	0x20000a9c
    6128:	3a83126f 	.word	0x3a83126f
    612c:	200053cc 	.word	0x200053cc
    6130:	f3af 8000 	nop.w
    6134:	f3af 8000 	nop.w
    6138:	f3af 8000 	nop.w
    613c:	f3af 8000 	nop.w

00006140 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    6140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6144:	4866      	ldr	r0, [pc, #408]	; (62e0 <audioTickString3+0x1a0>)
    6146:	4c67      	ldr	r4, [pc, #412]	; (62e4 <audioTickString3+0x1a4>)
    6148:	4d67      	ldr	r5, [pc, #412]	; (62e8 <audioTickString3+0x1a8>)
    614a:	f104 0630 	add.w	r6, r4, #48	; 0x30
{
    614e:	ed2d 8b06 	vpush	{d8-d10}
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6152:	f004 f899 	bl	a288 <__tExpSmooth_tick_veneer>
    6156:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    615a:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    615c:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    615e:	f004 f893 	bl	a288 <__tExpSmooth_tick_veneer>
    6162:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    6166:	42a6      	cmp	r6, r4
    6168:	d1f7      	bne.n	615a <audioTickString3+0x1a>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    616a:	4f60      	ldr	r7, [pc, #384]	; (62ec <audioTickString3+0x1ac>)
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    616c:	4e60      	ldr	r6, [pc, #384]	; (62f0 <audioTickString3+0x1b0>)
	if (newPluck)
    616e:	683b      	ldr	r3, [r7, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    6170:	7832      	ldrb	r2, [r6, #0]
	if (newPluck)
    6172:	2b00      	cmp	r3, #0
    6174:	d04b      	beq.n	620e <audioTickString3+0xce>
		for (int i = 0; i < numStringsThisBoard; i++)
    6176:	2a00      	cmp	r2, #0
    6178:	f000 80ab 	beq.w	62d2 <audioTickString3+0x192>
    617c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 6310 <audioTickString3+0x1d0>
    6180:	2400      	movs	r4, #0
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    6182:	ed9f aa5c 	vldr	s20, [pc, #368]	; 62f4 <audioTickString3+0x1b4>
    6186:	eddf 9a5c 	vldr	s19, [pc, #368]	; 62f8 <audioTickString3+0x1b8>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    618a:	ed9f 9a5c 	vldr	s18, [pc, #368]	; 62fc <audioTickString3+0x1bc>
    618e:	4d5c      	ldr	r5, [pc, #368]	; (6300 <audioTickString3+0x1c0>)
    6190:	f8df 8190 	ldr.w	r8, [pc, #400]	; 6324 <audioTickString3+0x1e4>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    6194:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6198:	b29b      	uxth	r3, r3
    619a:	2b00      	cmp	r3, #0
    619c:	f040 808a 	bne.w	62b4 <audioTickString3+0x174>
    61a0:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    61a4:	b29b      	uxth	r3, r3
    61a6:	2b00      	cmp	r3, #0
    61a8:	f000 8084 	beq.w	62b4 <audioTickString3+0x174>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    61ac:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    61b0:	b29b      	uxth	r3, r3
    61b2:	ee08 3a10 	vmov	s16, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    61b6:	4b53      	ldr	r3, [pc, #332]	; (6304 <audioTickString3+0x1c4>)
    61b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    61bc:	ed93 0a00 	vldr	s0, [r3]
				stringOctave[i] = octave;
    61c0:	4b51      	ldr	r3, [pc, #324]	; (6308 <audioTickString3+0x1c8>)
    61c2:	edd3 7a00 	vldr	s15, [r3]
    61c6:	4b51      	ldr	r3, [pc, #324]	; (630c <audioTickString3+0x1cc>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    61c8:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    61cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    61d0:	fe80 0a4a 	vminnm.f32	s0, s0, s20
				stringOctave[i] = octave;
    61d4:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    61d8:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    61dc:	f004 f858 	bl	a290 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    61e0:	4648      	mov	r0, r9
    61e2:	f004 f9d9 	bl	a598 <__tStiffString_setFreq_veneer>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    61e6:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tStiffString_pluck(&stringsC[i], str3Amp);
    61ea:	4648      	mov	r0, r9
    61ec:	ee20 0a09 	vmul.f32	s0, s0, s18
    61f0:	f004 f8da 	bl	a3a8 <__tStiffString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    61f4:	7832      	ldrb	r2, [r6, #0]
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    61f6:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    61fa:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    61fe:	b29b      	uxth	r3, r3
    6200:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    6204:	3401      	adds	r4, #1
    6206:	42a2      	cmp	r2, r4
    6208:	dcc4      	bgt.n	6194 <audioTickString3+0x54>
		}
		newPluck = 0;
    620a:	2300      	movs	r3, #0
    620c:	603b      	str	r3, [r7, #0]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    620e:	2a00      	cmp	r2, #0
    6210:	d063      	beq.n	62da <audioTickString3+0x19a>
    6212:	4d3f      	ldr	r5, [pc, #252]	; (6310 <audioTickString3+0x1d0>)
    6214:	2400      	movs	r4, #0
    6216:	ed9f 8a38 	vldr	s16, [pc, #224]	; 62f8 <audioTickString3+0x1b8>
	{

		temp += tStiffString_tick(&stringsC[i]);
    621a:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    621c:	3401      	adds	r4, #1
		temp += tStiffString_tick(&stringsC[i]);
    621e:	f004 f977 	bl	a510 <__tStiffString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    6222:	7833      	ldrb	r3, [r6, #0]
		temp += tStiffString_tick(&stringsC[i]);
    6224:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    6228:	3504      	adds	r5, #4
    622a:	42a3      	cmp	r3, r4
    622c:	dcf5      	bgt.n	621a <audioTickString3+0xda>
	}
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    622e:	eddf 0a39 	vldr	s1, [pc, #228]	; 6314 <audioTickString3+0x1d4>
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    6232:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    6236:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 62f4 <audioTickString3+0x1b4>
    623a:	ee68 0aa0 	vmul.f32	s1, s17, s1
    623e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 62f8 <audioTickString3+0x1b8>
    6242:	f003 ffc5 	bl	a1d0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    6246:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    624a:	4b33      	ldr	r3, [pc, #204]	; (6318 <audioTickString3+0x1d8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    624c:	4a33      	ldr	r2, [pc, #204]	; (631c <audioTickString3+0x1dc>)
    624e:	ed93 7a00 	vldr	s14, [r3]
	int volIdxInt = (int) volIdx;
    6252:	ee17 3a90 	vmov	r3, s15
	float omAlpha = 1.0f - alpha;
    6256:	ee79 7a40 	vsub.f32	s15, s18, s0
    625a:	ee28 8a07 	vmul.f32	s16, s16, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    625e:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    6260:	ee07 3a10 	vmov	s14, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    6264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    6268:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    626c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    6270:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    6274:	ee30 0a47 	vsub.f32	s0, s0, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    6278:	edd2 6a00 	vldr	s13, [r2]
	float omAlpha = 1.0f - alpha;
    627c:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    6280:	ed93 7a00 	vldr	s14, [r3]
    6284:	ee20 0a26 	vmul.f32	s0, s0, s13
    6288:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp = tanhf(temp);
    628c:	ee28 0a00 	vmul.f32	s0, s16, s0
    6290:	f003 ff4a 	bl	a128 <__tanhf_veneer>
    6294:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    6298:	eeb0 1a49 	vmov.f32	s2, s18
    629c:	eddf 7a20 	vldr	s15, [pc, #128]	; 6320 <audioTickString3+0x1e0>
    62a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    62a4:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    62a8:	ecbd 8b06 	vpop	{d8-d10}
    62ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    62b0:	f003 bf8e 	b.w	a1d0 <__LEAF_clip_veneer>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    62b4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    62b8:	b29b      	uxth	r3, r3
    62ba:	2b00      	cmp	r3, #0
    62bc:	d09b      	beq.n	61f6 <audioTickString3+0xb6>
    62be:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    62c2:	b29b      	uxth	r3, r3
    62c4:	2b00      	cmp	r3, #0
    62c6:	d196      	bne.n	61f6 <audioTickString3+0xb6>
				tStiffString_mute(&stringsC[i]);
    62c8:	4648      	mov	r0, r9
    62ca:	f004 f975 	bl	a5b8 <__tStiffString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    62ce:	7832      	ldrb	r2, [r6, #0]
    62d0:	e791      	b.n	61f6 <audioTickString3+0xb6>
		newPluck = 0;
    62d2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 62f8 <audioTickString3+0x1b8>
    62d6:	603a      	str	r2, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    62d8:	e7a9      	b.n	622e <audioTickString3+0xee>
    62da:	ed9f 8a07 	vldr	s16, [pc, #28]	; 62f8 <audioTickString3+0x1b8>
    62de:	e7a6      	b.n	622e <audioTickString3+0xee>
    62e0:	2001444c 	.word	0x2001444c
    62e4:	200053e0 	.word	0x200053e0
    62e8:	20005430 	.word	0x20005430
    62ec:	200054e0 	.word	0x200054e0
    62f0:	20000694 	.word	0x20000694
    62f4:	42fe0000 	.word	0x42fe0000
    62f8:	00000000 	.word	0x00000000
    62fc:	37800080 	.word	0x37800080
    6300:	20005550 	.word	0x20005550
    6304:	20014414 	.word	0x20014414
    6308:	200054ec 	.word	0x200054ec
    630c:	2001441c 	.word	0x2001441c
    6310:	2001cd3c 	.word	0x2001cd3c
    6314:	42a00000 	.word	0x42a00000
    6318:	2000068c 	.word	0x2000068c
    631c:	200006a0 	.word	0x200006a0
    6320:	3f7ae148 	.word	0x3f7ae148
    6324:	200143fc 	.word	0x200143fc
    6328:	f3af 8000 	nop.w
    632c:	f3af 8000 	nop.w
    6330:	f3af 8000 	nop.w
    6334:	f3af 8000 	nop.w
    6338:	f3af 8000 	nop.w
    633c:	f3af 8000 	nop.w

00006340 <audioFrameString3>:
		uint32_t tempCountFrame = DWT->CYCCNT;
    6340:	4bb3      	ldr	r3, [pc, #716]	; (6610 <audioFrameString3+0x2d0>)
{
    6342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (resetStringInputs)
    6346:	4cb3      	ldr	r4, [pc, #716]	; (6614 <audioFrameString3+0x2d4>)
{
    6348:	ed2d 8b08 	vpush	{d8-d11}
		uint32_t tempCountFrame = DWT->CYCCNT;
    634c:	685b      	ldr	r3, [r3, #4]
{
    634e:	b08b      	sub	sp, #44	; 0x2c
		uint32_t tempCountFrame = DWT->CYCCNT;
    6350:	9304      	str	r3, [sp, #16]
		if (resetStringInputs)
    6352:	7823      	ldrb	r3, [r4, #0]
{
    6354:	9005      	str	r0, [sp, #20]
		if (resetStringInputs)
    6356:	2b00      	cmp	r3, #0
    6358:	f040 8198 	bne.w	668c <audioFrameString3+0x34c>
			for (int i = 0; i < numStringsThisBoard; i++)
    635c:	4bae      	ldr	r3, [pc, #696]	; (6618 <audioFrameString3+0x2d8>)
    635e:	9303      	str	r3, [sp, #12]
    6360:	781b      	ldrb	r3, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    6362:	2b00      	cmp	r3, #0
    6364:	f000 8118 	beq.w	6598 <audioFrameString3+0x258>
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    6368:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    636c:	4bab      	ldr	r3, [pc, #684]	; (661c <audioFrameString3+0x2dc>)
    636e:	f8df b30c 	ldr.w	fp, [pc, #780]	; 667c <audioFrameString3+0x33c>
		for (int i = 0; i < numStringsThisBoard; i++)
    6372:	2400      	movs	r4, #0
    6374:	4eaa      	ldr	r6, [pc, #680]	; (6620 <audioFrameString3+0x2e0>)
    6376:	eddf aaab 	vldr	s21, [pc, #684]	; 6624 <audioFrameString3+0x2e4>
    637a:	eddf 9aab 	vldr	s19, [pc, #684]	; 6628 <audioFrameString3+0x2e8>
			float newStiffness = (knobScaled[0] * 100.0f);
    637e:	ed9f aaab 	vldr	s20, [pc, #684]	; 662c <audioFrameString3+0x2ec>
				float squishedStiffness = (newStiffness*0.01f) ;
    6382:	ed9f baab 	vldr	s22, [pc, #684]	; 6630 <audioFrameString3+0x2f0>
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    6386:	ed9f 9aab 	vldr	s18, [pc, #684]	; 6634 <audioFrameString3+0x2f4>
    638a:	4fab      	ldr	r7, [pc, #684]	; (6638 <audioFrameString3+0x2f8>)
    638c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 6680 <audioFrameString3+0x340>
    6390:	4daa      	ldr	r5, [pc, #680]	; (663c <audioFrameString3+0x2fc>)
    6392:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 6684 <audioFrameString3+0x344>
    6396:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 6688 <audioFrameString3+0x348>
    639a:	9301      	str	r3, [sp, #4]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    639c:	4ba8      	ldr	r3, [pc, #672]	; (6640 <audioFrameString3+0x300>)
    639e:	ecfb 7a01 	vldmia	fp!, {s15}
    63a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    63a6:	ed93 8a00 	vldr	s16, [r3]
    63aa:	ee38 8a27 	vadd.f32	s16, s16, s15
    63ae:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    63b2:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
			float finalFreq = mtofTableLookup(theNote[i]);
    63b6:	eeb0 0a48 	vmov.f32	s0, s16
    63ba:	f003 ff69 	bl	a290 <__mtofTableLookup_veneer>
    63be:	4ba1      	ldr	r3, [pc, #644]	; (6644 <audioFrameString3+0x304>)
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    63c0:	00a0      	lsls	r0, r4, #2
			float finalFreq = mtofTableLookup(theNote[i]);
    63c2:	eef0 ba40 	vmov.f32	s23, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    63c6:	4418      	add	r0, r3
    63c8:	9002      	str	r0, [sp, #8]
    63ca:	f003 ff59 	bl	a280 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    63ce:	9b01      	ldr	r3, [sp, #4]
    63d0:	ecb3 0a01 	vldmia	r3!, {s0}
    63d4:	ee38 0a40 	vsub.f32	s0, s16, s0
    63d8:	9301      	str	r3, [sp, #4]
    63da:	f003 ff59 	bl	a290 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    63de:	ee8b 6a80 	vdiv.f32	s12, s23, s0
			float newStiffness = (knobScaled[0] * 100.0f);
    63e2:	ed9a 8a00 	vldr	s16, [sl]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    63e6:	edd5 7a00 	vldr	s15, [r5]
    63ea:	9802      	ldr	r0, [sp, #8]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    63ec:	eec0 6a2b 	vdiv.f32	s13, s0, s23
			float newStiffness = (knobScaled[0] * 100.0f);
    63f0:	ee28 8a0a 	vmul.f32	s16, s16, s20
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    63f4:	ee37 7aa8 	vadd.f32	s14, s15, s17
    63f8:	eeb4 7ac8 	vcmpe.f32	s14, s16
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    63fc:	ed8d 6a06 	vstr	s12, [sp, #24]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    6400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    6404:	edcd 6a07 	vstr	s13, [sp, #28]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    6408:	d406      	bmi.n	6418 <audioFrameString3+0xd8>
    640a:	ee77 7ae8 	vsub.f32	s15, s15, s17
    640e:	eef4 7ac8 	vcmpe.f32	s15, s16
    6412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6416:	dd0b      	ble.n	6430 <audioFrameString3+0xf0>
				float squishedStiffness = (newStiffness*0.01f) ;
    6418:	ee68 ba0b 	vmul.f32	s23, s16, s22
				if ( squishedStiffness != prevSquishedStiffness[i])
    641c:	edd8 7a00 	vldr	s15, [r8]
    6420:	eef4 7a6b 	vcmp.f32	s15, s23
    6424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6428:	f040 816b 	bne.w	6702 <audioFrameString3+0x3c2>
				prevStiffness[i] = newStiffness;
    642c:	ed85 8a00 	vstr	s16, [r5]
			float newpuPos = (knobScaled[10] * 200.0f);
    6430:	ed9f 7a85 	vldr	s14, [pc, #532]	; 6648 <audioFrameString3+0x308>
    6434:	ed9a 8a0a 	vldr	s16, [sl, #40]	; 0x28
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    6438:	edd6 7a00 	vldr	s15, [r6]
			float newpuPos = (knobScaled[10] * 200.0f);
    643c:	ee28 8a07 	vmul.f32	s16, s16, s14
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    6440:	ee37 7aa8 	vadd.f32	s14, s15, s17
    6444:	eeb4 7ac8 	vcmpe.f32	s14, s16
    6448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    644c:	d406      	bmi.n	645c <audioFrameString3+0x11c>
    644e:	ee77 7ae8 	vsub.f32	s15, s15, s17
    6452:	eef4 7ac8 	vcmpe.f32	s15, s16
    6456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    645a:	dd30      	ble.n	64be <audioFrameString3+0x17e>
				float squishedPuPos = (newpuPos*0.005f) ;
    645c:	eddf ba7b 	vldr	s23, [pc, #492]	; 664c <audioFrameString3+0x30c>
				if ( squishedPuPos != prevSquishedPuPos[i])
    6460:	edd7 7a00 	vldr	s15, [r7]
				float squishedPuPos = (newpuPos*0.005f) ;
    6464:	ee68 ba2b 	vmul.f32	s23, s16, s23
				if ( squishedPuPos != prevSquishedPuPos[i])
    6468:	eef4 7a6b 	vcmp.f32	s15, s23
    646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6470:	d023      	beq.n	64ba <audioFrameString3+0x17a>
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    6472:	ee78 7aeb 	vsub.f32	s15, s17, s23
					if (ratioOfNoteToOpenString < pickupKnobVal)
    6476:	ed9d 7a07 	vldr	s14, [sp, #28]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    647a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					finalPuPos[i] = squishedPuPos;
    647e:	edc9 ba00 	vstr	s23, [r9]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    6482:	ee67 7aa6 	vmul.f32	s15, s15, s13
					if (ratioOfNoteToOpenString < pickupKnobVal)
    6486:	eeb4 7ae7 	vcmpe.f32	s14, s15
    648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    648e:	f100 812b 	bmi.w	66e8 <audioFrameString3+0x3a8>
					float pickupKnobVal2 = pickupKnobVal;
    6492:	eef0 6a67 	vmov.f32	s13, s15
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    6496:	ed9a 7a01 	vldr	s14, [sl, #4]
    649a:	ed9d 6a06 	vldr	s12, [sp, #24]
    649e:	ee38 0ac7 	vsub.f32	s0, s17, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    64a2:	9002      	str	r0, [sp, #8]
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    64a4:	ee20 0a06 	vmul.f32	s0, s0, s12
    64a8:	ee20 0a26 	vmul.f32	s0, s0, s13
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    64ac:	eea7 0a27 	vfma.f32	s0, s14, s15
    64b0:	f003 fe8a 	bl	a1c8 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    64b4:	9802      	ldr	r0, [sp, #8]
    64b6:	edc7 ba00 	vstr	s23, [r7]
				prevPuPos[i] = newpuPos;
    64ba:	ed86 8a00 	vstr	s16, [r6]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    64be:	ed9a 7a0b 	vldr	s14, [sl, #44]	; 0x2c
    64c2:	eef0 7a49 	vmov.f32	s15, s18
    64c6:	ed9f 6a62 	vldr	s12, [pc, #392]	; 6650 <audioFrameString3+0x310>
    64ca:	ee38 7ac7 	vsub.f32	s14, s17, s14
			if (ratioOfNoteToOpenString < pluckKnobVal)
    64ce:	eddd 6a07 	vldr	s13, [sp, #28]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    64d2:	eee7 7a06 	vfma.f32	s15, s14, s12
			if (ratioOfNoteToOpenString < pluckKnobVal)
    64d6:	eef4 6ae7 	vcmpe.f32	s13, s15
    64da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    64de:	f140 8093 	bpl.w	6608 <audioFrameString3+0x2c8>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    64e2:	ed9d 7a07 	vldr	s14, [sp, #28]
    64e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
    64ea:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    64ee:	eddd 6a07 	vldr	s13, [sp, #28]
    64f2:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    64f6:	ee76 6ac7 	vsub.f32	s13, s13, s14
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    64fa:	ed9a 7a02 	vldr	s14, [sl, #8]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    64fe:	eeb0 0a49 	vmov.f32	s0, s18
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    6502:	ed9d 6a06 	vldr	s12, [sp, #24]
    6506:	ee78 0ac7 	vsub.f32	s1, s17, s14
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    650a:	ed9f 1a52 	vldr	s2, [pc, #328]	; 6654 <audioFrameString3+0x314>
    650e:	9002      	str	r0, [sp, #8]
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    6510:	ee60 0a86 	vmul.f32	s1, s1, s12
    6514:	ee60 0aa6 	vmul.f32	s1, s1, s13
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    6518:	eee7 0a27 	vfma.f32	s1, s14, s15
    651c:	f003 fe58 	bl	a1d0 <__LEAF_clip_veneer>
    6520:	9802      	ldr	r0, [sp, #8]
    6522:	f003 fe15 	bl	a150 <__tStiffString_setPluckPosNoUpdate_veneer>
			float mainDecay = (1.0f - knobScaled[8]);
    6526:	edda 7a08 	vldr	s15, [sl, #32]
			if (mainDecay < 0.01f)
    652a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 6658 <audioFrameString3+0x318>
			float dampKnob = (1.0f - knobScaled[9]);
    652e:	ed9a 8a09 	vldr	s16, [sl, #36]	; 0x24
			if (mainDecay < 0.01f)
    6532:	eef4 7ac7 	vcmpe.f32	s15, s14
    6536:	9802      	ldr	r0, [sp, #8]
			float dampKnob = (1.0f - knobScaled[9]);
    6538:	ee38 8ac8 	vsub.f32	s16, s17, s16
			if (mainDecay < 0.01f)
    653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6540:	dc5f      	bgt.n	6602 <audioFrameString3+0x2c2>
			float mainDecay = (1.0f - knobScaled[8]);
    6542:	ee78 7ae7 	vsub.f32	s15, s17, s15
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    6546:	ed9f 7a45 	vldr	s14, [pc, #276]	; 665c <audioFrameString3+0x31c>
    654a:	ee27 0aa7 	vmul.f32	s0, s15, s15
    654e:	ee20 0a07 	vmul.f32	s0, s0, s14
    6552:	ee20 0a27 	vmul.f32	s0, s0, s15
    6556:	9002      	str	r0, [sp, #8]
    6558:	f003 fd8a 	bl	a070 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    655c:	ee28 0a08 	vmul.f32	s0, s16, s16
    6560:	eddf 7a3f 	vldr	s15, [pc, #252]	; 6660 <audioFrameString3+0x320>
    6564:	9802      	ldr	r0, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    6566:	3401      	adds	r4, #1
    6568:	3604      	adds	r6, #4
    656a:	3704      	adds	r7, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    656c:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (int i = 0; i < numStringsThisBoard; i++)
    6570:	f109 0904 	add.w	r9, r9, #4
    6574:	3504      	adds	r5, #4
    6576:	f108 0804 	add.w	r8, r8, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    657a:	ee20 0a08 	vmul.f32	s0, s0, s16
    657e:	f003 fd4f 	bl	a020 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    6582:	9802      	ldr	r0, [sp, #8]
    6584:	f003 fef4 	bl	a370 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    6588:	9802      	ldr	r0, [sp, #8]
    658a:	f003 fdb9 	bl	a100 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    658e:	9b03      	ldr	r3, [sp, #12]
    6590:	781b      	ldrb	r3, [r3, #0]
    6592:	42a3      	cmp	r3, r4
    6594:	f73f af02 	bgt.w	639c <audioFrameString3+0x5c>
    6598:	4c32      	ldr	r4, [pc, #200]	; (6664 <audioFrameString3+0x324>)
    659a:	9b05      	ldr	r3, [sp, #20]
    659c:	f504 7500 	add.w	r5, r4, #512	; 0x200
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    65a0:	ed9f 8a31 	vldr	s16, [pc, #196]	; 6668 <audioFrameString3+0x328>
    65a4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    65a8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    65ac:	f7ff fdc8 	bl	6140 <audioTickString3>
    65b0:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    65b4:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    65b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    65ba:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    65bc:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    65c0:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    65c4:	d1f2      	bne.n	65ac <audioFrameString3+0x26c>
		if (switchStrings)
    65c6:	4c29      	ldr	r4, [pc, #164]	; (666c <audioFrameString3+0x32c>)
    65c8:	6823      	ldr	r3, [r4, #0]
    65ca:	2b00      	cmp	r3, #0
    65cc:	f040 80a2 	bne.w	6714 <audioFrameString3+0x3d4>
		switchStrings = 0;
    65d0:	2200      	movs	r2, #0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    65d2:	4827      	ldr	r0, [pc, #156]	; (6670 <audioFrameString3+0x330>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    65d4:	4b0e      	ldr	r3, [pc, #56]	; (6610 <audioFrameString3+0x2d0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    65d6:	ed90 7a00 	vldr	s14, [r0]
		switchStrings = 0;
    65da:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    65dc:	9804      	ldr	r0, [sp, #16]
    65de:	685b      	ldr	r3, [r3, #4]
    65e0:	4924      	ldr	r1, [pc, #144]	; (6674 <audioFrameString3+0x334>)
    65e2:	1a1b      	subs	r3, r3, r0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    65e4:	4a24      	ldr	r2, [pc, #144]	; (6678 <audioFrameString3+0x338>)
    65e6:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    65ea:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    65ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    65f0:	ee67 7a87 	vmul.f32	s15, s15, s14
    65f4:	edc2 7a00 	vstr	s15, [r2]
}
    65f8:	b00b      	add	sp, #44	; 0x2c
    65fa:	ecbd 8b08 	vpop	{d8-d11}
    65fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6602:	eeb0 0a69 	vmov.f32	s0, s19
    6606:	e7a6      	b.n	6556 <audioFrameString3+0x216>
			float pluckKnobVal2 = pluckKnobVal;
    6608:	eef0 6a67 	vmov.f32	s13, s15
    660c:	e775      	b.n	64fa <audioFrameString3+0x1ba>
    660e:	bf00      	nop
    6610:	e0001000 	.word	0xe0001000
    6614:	20005968 	.word	0x20005968
    6618:	20000694 	.word	0x20000694
    661c:	20001384 	.word	0x20001384
    6620:	2001cd1c 	.word	0x2001cd1c
    6624:	42fe0000 	.word	0x42fe0000
    6628:	00000000 	.word	0x00000000
    662c:	42c80000 	.word	0x42c80000
    6630:	3c23d70a 	.word	0x3c23d70a
    6634:	3dcccccd 	.word	0x3dcccccd
    6638:	2001cd24 	.word	0x2001cd24
    663c:	2001cd34 	.word	0x2001cd34
    6640:	20014414 	.word	0x20014414
    6644:	2001cd3c 	.word	0x2001cd3c
    6648:	43480000 	.word	0x43480000
    664c:	3ba3d70a 	.word	0x3ba3d70a
    6650:	3ecccccd 	.word	0x3ecccccd
    6654:	3f666666 	.word	0x3f666666
    6658:	3f7d70a4 	.word	0x3f7d70a4
    665c:	3a83126f 	.word	0x3a83126f
    6660:	3983126f 	.word	0x3983126f
    6664:	30000000 	.word	0x30000000
    6668:	4b000000 	.word	0x4b000000
    666c:	20014434 	.word	0x20014434
    6670:	20000684 	.word	0x20000684
    6674:	20014438 	.word	0x20014438
    6678:	200053c4 	.word	0x200053c4
    667c:	2001441c 	.word	0x2001441c
    6680:	2001cd14 	.word	0x2001cd14
    6684:	2001cd2c 	.word	0x2001cd2c
    6688:	200053e0 	.word	0x200053e0
			for (int i = 0; i < numStringsThisBoard; i++)
    668c:	4b23      	ldr	r3, [pc, #140]	; (671c <audioFrameString3+0x3dc>)
    668e:	9303      	str	r3, [sp, #12]
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	b31b      	cbz	r3, 66dc <audioFrameString3+0x39c>
				previousStringInputs[i] = 0;
    6694:	4a22      	ldr	r2, [pc, #136]	; (6720 <audioFrameString3+0x3e0>)
    6696:	2100      	movs	r1, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    6698:	2b01      	cmp	r3, #1
				previousStringInputs[i] = 0;
    669a:	8011      	strh	r1, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    669c:	d01e      	beq.n	66dc <audioFrameString3+0x39c>
    669e:	2b02      	cmp	r3, #2
				previousStringInputs[i] = 0;
    66a0:	8051      	strh	r1, [r2, #2]
			for (int i = 0; i < numStringsThisBoard; i++)
    66a2:	d01b      	beq.n	66dc <audioFrameString3+0x39c>
    66a4:	2b03      	cmp	r3, #3
				previousStringInputs[i] = 0;
    66a6:	8091      	strh	r1, [r2, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    66a8:	d018      	beq.n	66dc <audioFrameString3+0x39c>
    66aa:	2b04      	cmp	r3, #4
				previousStringInputs[i] = 0;
    66ac:	80d1      	strh	r1, [r2, #6]
			for (int i = 0; i < numStringsThisBoard; i++)
    66ae:	d015      	beq.n	66dc <audioFrameString3+0x39c>
    66b0:	2b05      	cmp	r3, #5
				previousStringInputs[i] = 0;
    66b2:	8111      	strh	r1, [r2, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    66b4:	d012      	beq.n	66dc <audioFrameString3+0x39c>
    66b6:	2b06      	cmp	r3, #6
				previousStringInputs[i] = 0;
    66b8:	8151      	strh	r1, [r2, #10]
			for (int i = 0; i < numStringsThisBoard; i++)
    66ba:	d00f      	beq.n	66dc <audioFrameString3+0x39c>
    66bc:	2b07      	cmp	r3, #7
				previousStringInputs[i] = 0;
    66be:	8191      	strh	r1, [r2, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    66c0:	d00c      	beq.n	66dc <audioFrameString3+0x39c>
    66c2:	2b08      	cmp	r3, #8
				previousStringInputs[i] = 0;
    66c4:	81d1      	strh	r1, [r2, #14]
			for (int i = 0; i < numStringsThisBoard; i++)
    66c6:	d009      	beq.n	66dc <audioFrameString3+0x39c>
    66c8:	2b09      	cmp	r3, #9
				previousStringInputs[i] = 0;
    66ca:	8211      	strh	r1, [r2, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    66cc:	d006      	beq.n	66dc <audioFrameString3+0x39c>
    66ce:	2b0a      	cmp	r3, #10
				previousStringInputs[i] = 0;
    66d0:	8251      	strh	r1, [r2, #18]
			for (int i = 0; i < numStringsThisBoard; i++)
    66d2:	d003      	beq.n	66dc <audioFrameString3+0x39c>
    66d4:	2b0b      	cmp	r3, #11
				previousStringInputs[i] = 0;
    66d6:	8291      	strh	r1, [r2, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    66d8:	d000      	beq.n	66dc <audioFrameString3+0x39c>
				previousStringInputs[i] = 0;
    66da:	82d1      	strh	r1, [r2, #22]
			resetStringInputs = 0;
    66dc:	2200      	movs	r2, #0
			newPluck = 1;
    66de:	2101      	movs	r1, #1
			resetStringInputs = 0;
    66e0:	7022      	strb	r2, [r4, #0]
			newPluck = 1;
    66e2:	4a10      	ldr	r2, [pc, #64]	; (6724 <audioFrameString3+0x3e4>)
    66e4:	6011      	str	r1, [r2, #0]
    66e6:	e63c      	b.n	6362 <audioFrameString3+0x22>
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    66e8:	ed9d 7a07 	vldr	s14, [sp, #28]
    66ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
    66f0:	ed8d 7a08 	vstr	s14, [sp, #32]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    66f4:	eddd 6a07 	vldr	s13, [sp, #28]
    66f8:	ed9d 7a08 	vldr	s14, [sp, #32]
    66fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
    6700:	e6c9      	b.n	6496 <audioFrameString3+0x156>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    6702:	eeb0 0a6b 	vmov.f32	s0, s23
    6706:	9002      	str	r0, [sp, #8]
    6708:	f003 fe9a 	bl	a440 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    670c:	9802      	ldr	r0, [sp, #8]
    670e:	edc8 ba00 	vstr	s23, [r8]
    6712:	e68b      	b.n	642c <audioFrameString3+0xec>
			switchStringModel(switchStrings);
    6714:	6820      	ldr	r0, [r4, #0]
    6716:	f7fa fec3 	bl	14a0 <switchStringModel>
    671a:	e759      	b.n	65d0 <audioFrameString3+0x290>
    671c:	20000694 	.word	0x20000694
    6720:	20005550 	.word	0x20005550
    6724:	200054e0 	.word	0x200054e0
	...

00006740 <oscillator_tick>:
{
    6740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    6744:	0082      	lsls	r2, r0, #2
    6746:	4cd1      	ldr	r4, [pc, #836]	; (6a8c <oscillator_tick+0x34c>)
    6748:	1c85      	adds	r5, r0, #2
    674a:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    674e:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    6752:	1d07      	adds	r7, r0, #4
    6754:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    6758:	1d86      	adds	r6, r0, #6
{
    675a:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    675c:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    675e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 6ab0 <oscillator_tick+0x370>
		oscOuts[1][i][string] = 0.0f;
    6762:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    6766:	ed2d 8b04 	vpush	{d8-d9}
    676a:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    676c:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    6770:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    6774:	9200      	str	r2, [sp, #0]
    6776:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    677a:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    677c:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    6780:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    6784:	9002      	str	r0, [sp, #8]
    6786:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    678a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    678e:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    6792:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    6796:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    679a:	f899 2000 	ldrb.w	r2, [r9]
    679e:	b19a      	cbz	r2, 67c8 <oscillator_tick+0x88>
		if (oscOn[osc])
    67a0:	f8df 8310 	ldr.w	r8, [pc, #784]	; 6ab4 <oscillator_tick+0x374>
    67a4:	eeb0 8a40 	vmov.f32	s16, s0
    67a8:	f898 0000 	ldrb.w	r0, [r8]
    67ac:	b988      	cbnz	r0, 67d2 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    67ae:	2a01      	cmp	r2, #1
    67b0:	d90a      	bls.n	67c8 <oscillator_tick+0x88>
		if (oscOn[osc])
    67b2:	f898 1001 	ldrb.w	r1, [r8, #1]
    67b6:	2900      	cmp	r1, #0
    67b8:	d16e      	bne.n	6898 <oscillator_tick+0x158>
	for (int osc = 0; osc < oscToTick; osc++)
    67ba:	2a02      	cmp	r2, #2
    67bc:	d904      	bls.n	67c8 <oscillator_tick+0x88>
		if (oscOn[osc])
    67be:	f898 2002 	ldrb.w	r2, [r8, #2]
    67c2:	2a00      	cmp	r2, #0
    67c4:	f040 80e6 	bne.w	6994 <oscillator_tick+0x254>
}
    67c8:	b009      	add	sp, #36	; 0x24
    67ca:	ecbd 8b04 	vpop	{d8-d9}
    67ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    67d2:	00a9      	lsls	r1, r5, #2
    67d4:	4aae      	ldr	r2, [pc, #696]	; (6a90 <oscillator_tick+0x350>)
    67d6:	9305      	str	r3, [sp, #20]
    67d8:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    67da:	9b00      	ldr	r3, [sp, #0]
    67dc:	48ad      	ldr	r0, [pc, #692]	; (6a94 <oscillator_tick+0x354>)
			float freqToSmooth = (note + (fine*0.01f));
    67de:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    67e2:	eddf 7aad 	vldr	s15, [pc, #692]	; 6a98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    67e6:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    67e8:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    67ec:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    67f0:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    67f4:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    67f8:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    67fc:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6800:	9003      	str	r0, [sp, #12]
    6802:	f003 fc75 	bl	a0f0 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    6806:	9803      	ldr	r0, [sp, #12]
    6808:	f003 fd3e 	bl	a288 <__tExpSmooth_tick_veneer>
    680c:	9b00      	ldr	r3, [sp, #0]
    680e:	4aa3      	ldr	r2, [pc, #652]	; (6a9c <oscillator_tick+0x35c>)
    6810:	441a      	add	r2, r3
    6812:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6816:	ee30 0a27 	vadd.f32	s0, s0, s15
    681a:	f003 fd39 	bl	a290 <__mtofTableLookup_veneer>
    681e:	9b00      	ldr	r3, [sp, #0]
    6820:	4a9f      	ldr	r2, [pc, #636]	; (6aa0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6822:	a807      	add	r0, sp, #28
    6824:	499f      	ldr	r1, [pc, #636]	; (6aa4 <oscillator_tick+0x364>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6826:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6828:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    682a:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    682e:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6832:	2200      	movs	r2, #0
    6834:	f8d1 b000 	ldr.w	fp, [r1]
    6838:	eee0 9a27 	vfma.f32	s19, s0, s15
    683c:	4611      	mov	r1, r2
    683e:	eddd 0a04 	vldr	s1, [sp, #16]
    6842:	9303      	str	r3, [sp, #12]
    6844:	eeb0 0a69 	vmov.f32	s0, s19
    6848:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    684a:	4a91      	ldr	r2, [pc, #580]	; (6a90 <oscillator_tick+0x350>)
    684c:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    684e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    6852:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6856:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    685a:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    685c:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6860:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6864:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6868:	4a8f      	ldr	r2, [pc, #572]	; (6aa8 <oscillator_tick+0x368>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    686a:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    686e:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    6872:	4a8e      	ldr	r2, [pc, #568]	; (6aac <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6874:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    6878:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    687a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    687e:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6882:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    6886:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    688a:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    688e:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6892:	edc6 7a00 	vstr	s15, [r6]
    6896:	e78a      	b.n	67ae <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    6898:	4e7d      	ldr	r6, [pc, #500]	; (6a90 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    689a:	eeb0 0a48 	vmov.f32	s0, s16
    689e:	487d      	ldr	r0, [pc, #500]	; (6a94 <oscillator_tick+0x354>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    68a0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    68a4:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    68a8:	eddf 7a7b 	vldr	s15, [pc, #492]	; 6a98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    68ac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    68b0:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    68b2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    68b6:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    68b8:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    68bc:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    68c0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    68c4:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    68c8:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    68cc:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    68d0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    68d4:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    68d8:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    68dc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    68e0:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    68e4:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    68e8:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    68ec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    68f0:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    68f4:	f003 fbfc 	bl	a0f0 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    68f8:	9800      	ldr	r0, [sp, #0]
    68fa:	f003 fcc5 	bl	a288 <__tExpSmooth_tick_veneer>
    68fe:	4a67      	ldr	r2, [pc, #412]	; (6a9c <oscillator_tick+0x35c>)
    6900:	4452      	add	r2, sl
    6902:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6906:	ee30 0a27 	vadd.f32	s0, s0, s15
    690a:	f003 fcc1 	bl	a290 <__mtofTableLookup_veneer>
    690e:	4a64      	ldr	r2, [pc, #400]	; (6aa0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6910:	9b04      	ldr	r3, [sp, #16]
    6912:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6914:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6916:	a807      	add	r0, sp, #28
    6918:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    691c:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    6920:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6922:	9300      	str	r3, [sp, #0]
    6924:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    6928:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    692a:	4a5e      	ldr	r2, [pc, #376]	; (6aa4 <oscillator_tick+0x364>)
    692c:	f8d2 b004 	ldr.w	fp, [r2, #4]
    6930:	2200      	movs	r2, #0
    6932:	eeb0 0a69 	vmov.f32	s0, s19
    6936:	47d8      	blx	fp
			sample *= amp;
    6938:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6942:	4859      	ldr	r0, [pc, #356]	; (6aa8 <oscillator_tick+0x368>)
			sample *= amp;
    6944:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6948:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    694c:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    694e:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6952:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6956:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    695a:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    695e:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6962:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    6966:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6968:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    696c:	ed96 6a00 	vldr	s12, [r6]
    6970:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6974:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6978:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    697c:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    6980:	494a      	ldr	r1, [pc, #296]	; (6aac <oscillator_tick+0x36c>)
    6982:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6984:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    6986:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    698a:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    698e:	f63f af16 	bhi.w	67be <oscillator_tick+0x7e>
    6992:	e719      	b.n	67c8 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    6994:	4e3e      	ldr	r6, [pc, #248]	; (6a90 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6996:	eeb0 0a48 	vmov.f32	s0, s16
    699a:	483e      	ldr	r0, [pc, #248]	; (6a94 <oscillator_tick+0x354>)
			float fine = oscParams[OscFine].realVal[string];
    699c:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    69a0:	eddf 7a3d 	vldr	s15, [pc, #244]	; 6a98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    69a4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    69a8:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    69aa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    69ae:	9000      	str	r0, [sp, #0]
    69b0:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    69b2:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    69b6:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    69ba:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    69be:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    69c2:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    69c6:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    69ca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    69ce:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    69d2:	f206 6204 	addw	r2, r6, #1540	; 0x604
    69d6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    69da:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    69de:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    69e2:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    69e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    69ea:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    69ee:	f003 fb7f 	bl	a0f0 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    69f2:	9800      	ldr	r0, [sp, #0]
    69f4:	f003 fc48 	bl	a288 <__tExpSmooth_tick_veneer>
    69f8:	4a28      	ldr	r2, [pc, #160]	; (6a9c <oscillator_tick+0x35c>)
    69fa:	443a      	add	r2, r7
    69fc:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6a00:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a04:	f003 fc44 	bl	a290 <__mtofTableLookup_veneer>
    6a08:	4a25      	ldr	r2, [pc, #148]	; (6aa0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6a0a:	9b03      	ldr	r3, [sp, #12]
    6a0c:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6a0e:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6a10:	eddd 0a01 	vldr	s1, [sp, #4]
    6a14:	2102      	movs	r1, #2
    6a16:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6a18:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    6a1c:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6a1e:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    6a22:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6a24:	4a1f      	ldr	r2, [pc, #124]	; (6aa4 <oscillator_tick+0x364>)
    6a26:	6895      	ldr	r5, [r2, #8]
    6a28:	2200      	movs	r2, #0
    6a2a:	eeb0 0a49 	vmov.f32	s0, s18
    6a2e:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a30:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    6a32:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6a3e:	491a      	ldr	r1, [pc, #104]	; (6aa8 <oscillator_tick+0x368>)
			sample *= amp;
    6a40:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a44:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a46:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    6a4a:	4b18      	ldr	r3, [pc, #96]	; (6aac <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6a4c:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a50:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    6a54:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a56:	edd6 6a00 	vldr	s13, [r6]
    6a5a:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a5c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    6a60:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    6a64:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a68:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a70:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a74:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6a78:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6a7c:	edc4 7a00 	vstr	s15, [r4]
}
    6a80:	b009      	add	sp, #36	; 0x24
    6a82:	ecbd 8b04 	vpop	{d8-d9}
    6a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a8a:	bf00      	nop
    6a8c:	2001d514 	.word	0x2001d514
    6a90:	2001908c 	.word	0x2001908c
    6a94:	2001d5ec 	.word	0x2001d5ec
    6a98:	3c23d70a 	.word	0x3c23d70a
    6a9c:	2001d45c 	.word	0x2001d45c
    6aa0:	2001d170 	.word	0x2001d170
    6aa4:	2001d6b4 	.word	0x2001d6b4
    6aa8:	20000ad4 	.word	0x20000ad4
    6aac:	2001d730 	.word	0x2001d730
    6ab0:	20000ae8 	.word	0x20000ae8
    6ab4:	2001d510 	.word	0x2001d510
    6ab8:	f3af 8000 	nop.w
    6abc:	f3af 8000 	nop.w

00006ac0 <sawSquareTick>:
{
    6ac0:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    6ac2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6ac6:	4c0e      	ldr	r4, [pc, #56]	; (6b00 <sawSquareTick+0x40>)
{
    6ac8:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    6aca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    6ace:	ed2d 8b02 	vpush	{d8}
    6ad2:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    6ad6:	4620      	mov	r0, r4
    6ad8:	f003 fcae 	bl	a438 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    6adc:	4620      	mov	r0, r4
    6ade:	eeb0 0a48 	vmov.f32	s0, s16
    6ae2:	f003 faa1 	bl	a028 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    6ae6:	4620      	mov	r0, r4
    6ae8:	f003 fd1e 	bl	a528 <__tPBSawSquare_tick_veneer>
    6aec:	edd5 7a00 	vldr	s15, [r5]
    6af0:	ee37 0a80 	vadd.f32	s0, s15, s0
    6af4:	ed85 0a00 	vstr	s0, [r5]
}
    6af8:	ecbd 8b02 	vpop	{d8}
    6afc:	bd38      	pop	{r3, r4, r5, pc}
    6afe:	bf00      	nop
    6b00:	2001d65c 	.word	0x2001d65c
    6b04:	f3af 8000 	nop.w
    6b08:	f3af 8000 	nop.w
    6b0c:	f3af 8000 	nop.w
    6b10:	f3af 8000 	nop.w
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <sineTriTick>:
{
    6b20:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    6b22:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6b26:	4c0e      	ldr	r4, [pc, #56]	; (6b60 <sineTriTick+0x40>)
{
    6b28:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    6b2a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    6b2e:	ed2d 8b02 	vpush	{d8}
    6b32:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    6b36:	4620      	mov	r0, r4
    6b38:	f003 fbb6 	bl	a2a8 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    6b3c:	4620      	mov	r0, r4
    6b3e:	eeb0 0a48 	vmov.f32	s0, s16
    6b42:	f003 fc39 	bl	a3b8 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    6b46:	4620      	mov	r0, r4
    6b48:	f003 fa82 	bl	a050 <__tPBSineTriangle_tick_veneer>
    6b4c:	edd5 7a00 	vldr	s15, [r5]
    6b50:	ee37 0a80 	vadd.f32	s0, s15, s0
    6b54:	ed85 0a00 	vstr	s0, [r5]
}
    6b58:	ecbd 8b02 	vpop	{d8}
    6b5c:	bd38      	pop	{r3, r4, r5, pc}
    6b5e:	bf00      	nop
    6b60:	2001d718 	.word	0x2001d718
    6b64:	f3af 8000 	nop.w
    6b68:	f3af 8000 	nop.w
    6b6c:	f3af 8000 	nop.w
    6b70:	f3af 8000 	nop.w
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    6b80:	4a0a      	ldr	r2, [pc, #40]	; (6bac <sawTick+0x2c>)
    6b82:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    6b86:	b510      	push	{r4, lr}
    6b88:	4604      	mov	r4, r0
    6b8a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    6b8c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    6b90:	9001      	str	r0, [sp, #4]
    6b92:	f003 fc6d 	bl	a470 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    6b96:	9801      	ldr	r0, [sp, #4]
    6b98:	f003 fc36 	bl	a408 <__tPBSaw_tick_veneer>
    6b9c:	edd4 7a00 	vldr	s15, [r4]
    6ba0:	ee37 0a80 	vadd.f32	s0, s15, s0
    6ba4:	ed84 0a00 	vstr	s0, [r4]
}
    6ba8:	b002      	add	sp, #8
    6baa:	bd10      	pop	{r4, pc}
    6bac:	2001d644 	.word	0x2001d644
    6bb0:	f3af 8000 	nop.w
    6bb4:	f3af 8000 	nop.w
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <pulseTick>:
{
    6bc0:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    6bc2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6bc6:	4c0e      	ldr	r4, [pc, #56]	; (6c00 <pulseTick+0x40>)
{
    6bc8:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    6bca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    6bce:	ed2d 8b02 	vpush	{d8}
    6bd2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    6bd6:	4620      	mov	r0, r4
    6bd8:	f003 fb7e 	bl	a2d8 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    6bdc:	4620      	mov	r0, r4
    6bde:	eeb0 0a48 	vmov.f32	s0, s16
    6be2:	f003 fb9d 	bl	a320 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    6be6:	4620      	mov	r0, r4
    6be8:	f003 fb8e 	bl	a308 <__tPBPulse_tick_veneer>
    6bec:	edd5 7a00 	vldr	s15, [r5]
    6bf0:	ee37 0a80 	vadd.f32	s0, s15, s0
    6bf4:	ed85 0a00 	vstr	s0, [r5]
}
    6bf8:	ecbd 8b02 	vpop	{d8}
    6bfc:	bd38      	pop	{r3, r4, r5, pc}
    6bfe:	bf00      	nop
    6c00:	2001d628 	.word	0x2001d628
    6c04:	f3af 8000 	nop.w
    6c08:	f3af 8000 	nop.w
    6c0c:	f3af 8000 	nop.w
    6c10:	f3af 8000 	nop.w
    6c14:	f3af 8000 	nop.w
    6c18:	f3af 8000 	nop.w
    6c1c:	f3af 8000 	nop.w

00006c20 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    6c20:	4a0a      	ldr	r2, [pc, #40]	; (6c4c <sineTick+0x2c>)
    6c22:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    6c26:	b510      	push	{r4, lr}
    6c28:	4604      	mov	r4, r0
    6c2a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    6c2c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    6c30:	9001      	str	r0, [sp, #4]
    6c32:	f003 fa51 	bl	a0d8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    6c36:	9801      	ldr	r0, [sp, #4]
    6c38:	f003 faae 	bl	a198 <__tCycle_tick_veneer>
    6c3c:	edd4 7a00 	vldr	s15, [r4]
    6c40:	ee37 0a80 	vadd.f32	s0, s15, s0
    6c44:	ed84 0a00 	vstr	s0, [r4]
}
    6c48:	b002      	add	sp, #8
    6c4a:	bd10      	pop	{r4, pc}
    6c4c:	2001d700 	.word	0x2001d700
    6c50:	f3af 8000 	nop.w
    6c54:	f3af 8000 	nop.w
    6c58:	f3af 8000 	nop.w
    6c5c:	f3af 8000 	nop.w

00006c60 <triTick>:
{
    6c60:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    6c62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6c66:	4c0e      	ldr	r4, [pc, #56]	; (6ca0 <triTick+0x40>)
{
    6c68:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    6c6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    6c6e:	ed2d 8b02 	vpush	{d8}
    6c72:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    6c76:	4620      	mov	r0, r4
    6c78:	f003 fbda 	bl	a430 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    6c7c:	4620      	mov	r0, r4
    6c7e:	eeb0 0a48 	vmov.f32	s0, s16
    6c82:	f003 fac9 	bl	a218 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    6c86:	4620      	mov	r0, r4
    6c88:	f003 fa66 	bl	a158 <__tPBTriangle_tick_veneer>
    6c8c:	edd5 7a00 	vldr	s15, [r5]
    6c90:	ee37 0a80 	vadd.f32	s0, s15, s0
    6c94:	ed85 0a00 	vstr	s0, [r5]
}
    6c98:	ecbd 8b02 	vpop	{d8}
    6c9c:	bd38      	pop	{r3, r4, r5, pc}
    6c9e:	bf00      	nop
    6ca0:	2001d8b0 	.word	0x2001d8b0
    6ca4:	f3af 8000 	nop.w
    6ca8:	f3af 8000 	nop.w
    6cac:	f3af 8000 	nop.w
    6cb0:	f3af 8000 	nop.w
    6cb4:	f3af 8000 	nop.w
    6cb8:	f3af 8000 	nop.w
    6cbc:	f3af 8000 	nop.w

00006cc0 <userTick>:
}
    6cc0:	4770      	bx	lr
    6cc2:	bf00      	nop
    6cc4:	f3af 8000 	nop.w
    6cc8:	f3af 8000 	nop.w
    6ccc:	f3af 8000 	nop.w
    6cd0:	f3af 8000 	nop.w
    6cd4:	f3af 8000 	nop.w
    6cd8:	f3af 8000 	nop.w
    6cdc:	f3af 8000 	nop.w

00006ce0 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    6ce0:	4b50      	ldr	r3, [pc, #320]	; (6e24 <filter_tick+0x144>)
    6ce2:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    6ce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    6cea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    6cee:	b570      	push	{r4, r5, r6, lr}
    6cf0:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    6cf4:	ed92 7a00 	vldr	s14, [r2]
{
    6cf8:	460c      	mov	r4, r1
    6cfa:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    6cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d04:	d910      	bls.n	6d28 <filter_tick+0x48>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6d06:	1c8a      	adds	r2, r1, #2
    6d08:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    6d0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6d10:	ed91 6a00 	vldr	s12, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    6d14:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    6d18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6d1c:	edd2 7a00 	vldr	s15, [r2]
    6d20:	eee0 7a06 	vfma.f32	s15, s0, s12
    6d24:	eef0 6a67 	vmov.f32	s13, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    6d28:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    6d2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    6d30:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6d34:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    6d38:	eeb4 9ae7 	vcmpe.f32	s18, s15
    6d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d40:	d953      	bls.n	6dea <filter_tick+0x10a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6d42:	1ca1      	adds	r1, r4, #2
    6d44:	4a38      	ldr	r2, [pc, #224]	; (6e28 <filter_tick+0x148>)
	if (enabledFilt[0])
    6d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6d4a:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6d4e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6d52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6d56:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    6d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6d5e:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6d62:	ed93 8a00 	vldr	s16, [r3]
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6d66:	eea0 6a25 	vfma.f32	s12, s0, s11
    6d6a:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    6d6e:	dd1f      	ble.n	6db0 <filter_tick+0xd0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    6d70:	4e2e      	ldr	r6, [pc, #184]	; (6e2c <filter_tick+0x14c>)
    6d72:	eeb0 0a66 	vmov.f32	s0, s13
    6d76:	4622      	mov	r2, r4
    6d78:	2100      	movs	r1, #0
    6d7a:	6833      	ldr	r3, [r6, #0]
    6d7c:	4628      	mov	r0, r5
    6d7e:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    6d84:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    6d88:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6d8c:	edd5 7a00 	vldr	s15, [r5]
    6d90:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    6d94:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    6d98:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    6d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    6da0:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    6da4:	dc11      	bgt.n	6dca <filter_tick+0xea>
	return samples[1] + (samples[0] * sp);
    6da6:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    6daa:	ecbd 8b04 	vpop	{d8-d9}
    6dae:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6db4:	edd5 7a01 	vldr	s15, [r5, #4]
    6db8:	edd5 6a00 	vldr	s13, [r5]
    6dbc:	4e1b      	ldr	r6, [pc, #108]	; (6e2c <filter_tick+0x14c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6dbe:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6dc2:	eee6 7a87 	vfma.f32	s15, s13, s14
    6dc6:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    6dca:	eeb0 0a68 	vmov.f32	s0, s17
    6dce:	6873      	ldr	r3, [r6, #4]
    6dd0:	4622      	mov	r2, r4
    6dd2:	2101      	movs	r1, #1
    6dd4:	1d28      	adds	r0, r5, #4
    6dd6:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    6dd8:	ed95 0a01 	vldr	s0, [r5, #4]
    6ddc:	edd5 7a00 	vldr	s15, [r5]
    6de0:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    6de4:	ecbd 8b04 	vpop	{d8-d9}
    6de8:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    6dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6dee:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    6df2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    6df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6dfa:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    6dfe:	dcb7      	bgt.n	6d70 <filter_tick+0x90>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6e04:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6e08:	edd5 7a00 	vldr	s15, [r5]
    6e0c:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6e10:	eea7 0a27 	vfma.f32	s0, s14, s15
    6e14:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    6e18:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    6e1c:	ecbd 8b04 	vpop	{d8-d9}
    6e20:	bd70      	pop	{r4, r5, r6, pc}
    6e22:	bf00      	nop
    6e24:	2001908c 	.word	0x2001908c
    6e28:	20019c24 	.word	0x20019c24
    6e2c:	2001d158 	.word	0x2001d158
    6e30:	f3af 8000 	nop.w
    6e34:	f3af 8000 	nop.w
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    6e40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6e44:	4b0d      	ldr	r3, [pc, #52]	; (6e7c <lowpassTick+0x3c>)
{
    6e46:	b530      	push	{r4, r5, lr}
    6e48:	4605      	mov	r5, r0
    6e4a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    6e4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6e50:	0094      	lsls	r4, r2, #2
    6e52:	9001      	str	r0, [sp, #4]
    6e54:	f003 f960 	bl	a118 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6e58:	ed95 0a00 	vldr	s0, [r5]
    6e5c:	9801      	ldr	r0, [sp, #4]
    6e5e:	f003 fa9b 	bl	a398 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6e62:	4b07      	ldr	r3, [pc, #28]	; (6e80 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6e64:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6e68:	4423      	add	r3, r4
    6e6a:	edd3 7a00 	vldr	s15, [r3]
    6e6e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6e72:	edc5 7a00 	vstr	s15, [r5]
}
    6e76:	b003      	add	sp, #12
    6e78:	bd30      	pop	{r4, r5, pc}
    6e7a:	bf00      	nop
    6e7c:	2001d34c 	.word	0x2001d34c
    6e80:	2001d148 	.word	0x2001d148
    6e84:	f3af 8000 	nop.w
    6e88:	f3af 8000 	nop.w
    6e8c:	f3af 8000 	nop.w
    6e90:	f3af 8000 	nop.w
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    6ea0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ea4:	4b0d      	ldr	r3, [pc, #52]	; (6edc <highpassTick+0x3c>)
{
    6ea6:	b530      	push	{r4, r5, lr}
    6ea8:	4605      	mov	r5, r0
    6eaa:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    6eac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6eb0:	0094      	lsls	r4, r2, #2
    6eb2:	9001      	str	r0, [sp, #4]
    6eb4:	f003 f930 	bl	a118 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6eb8:	ed95 0a00 	vldr	s0, [r5]
    6ebc:	9801      	ldr	r0, [sp, #4]
    6ebe:	f003 fa6b 	bl	a398 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6ec2:	4b07      	ldr	r3, [pc, #28]	; (6ee0 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6ec4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6ec8:	4423      	add	r3, r4
    6eca:	edd3 7a00 	vldr	s15, [r3]
    6ece:	ee67 7a80 	vmul.f32	s15, s15, s0
    6ed2:	edc5 7a00 	vstr	s15, [r5]
}
    6ed6:	b003      	add	sp, #12
    6ed8:	bd30      	pop	{r4, r5, pc}
    6eda:	bf00      	nop
    6edc:	2001d1c8 	.word	0x2001d1c8
    6ee0:	2001d148 	.word	0x2001d148
    6ee4:	f3af 8000 	nop.w
    6ee8:	f3af 8000 	nop.w
    6eec:	f3af 8000 	nop.w
    6ef0:	f3af 8000 	nop.w
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    6f00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6f04:	4b0d      	ldr	r3, [pc, #52]	; (6f3c <bandpassTick+0x3c>)
{
    6f06:	b530      	push	{r4, r5, lr}
    6f08:	4605      	mov	r5, r0
    6f0a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    6f0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6f10:	0094      	lsls	r4, r2, #2
    6f12:	9001      	str	r0, [sp, #4]
    6f14:	f003 f900 	bl	a118 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    6f18:	ed95 0a00 	vldr	s0, [r5]
    6f1c:	9801      	ldr	r0, [sp, #4]
    6f1e:	f003 fa3b 	bl	a398 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6f22:	4b07      	ldr	r3, [pc, #28]	; (6f40 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    6f24:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6f28:	4423      	add	r3, r4
    6f2a:	edd3 7a00 	vldr	s15, [r3]
    6f2e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6f32:	edc5 7a00 	vstr	s15, [r5]
}
    6f36:	b003      	add	sp, #12
    6f38:	bd30      	pop	{r4, r5, pc}
    6f3a:	bf00      	nop
    6f3c:	2001cebc 	.word	0x2001cebc
    6f40:	2001d148 	.word	0x2001d148
    6f44:	f3af 8000 	nop.w
    6f48:	f3af 8000 	nop.w
    6f4c:	f3af 8000 	nop.w
    6f50:	f3af 8000 	nop.w
    6f54:	f3af 8000 	nop.w
    6f58:	f3af 8000 	nop.w
    6f5c:	f3af 8000 	nop.w

00006f60 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    6f60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6f64:	4b0d      	ldr	r3, [pc, #52]	; (6f9c <diodeLowpassTick+0x3c>)
{
    6f66:	b530      	push	{r4, r5, lr}
    6f68:	4605      	mov	r5, r0
    6f6a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    6f6c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6f70:	0094      	lsls	r4, r2, #2
    6f72:	9001      	str	r0, [sp, #4]
    6f74:	f003 f888 	bl	a088 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6f78:	ed95 0a00 	vldr	s0, [r5]
    6f7c:	9801      	ldr	r0, [sp, #4]
    6f7e:	f003 fa3b 	bl	a3f8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6f82:	4b07      	ldr	r3, [pc, #28]	; (6fa0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6f84:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6f88:	4423      	add	r3, r4
    6f8a:	edd3 7a00 	vldr	s15, [r3]
    6f8e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6f92:	edc5 7a00 	vstr	s15, [r5]
}
    6f96:	b003      	add	sp, #12
    6f98:	bd30      	pop	{r4, r5, pc}
    6f9a:	bf00      	nop
    6f9c:	2001d0d4 	.word	0x2001d0d4
    6fa0:	2001d148 	.word	0x2001d148
    6fa4:	f3af 8000 	nop.w
    6fa8:	f3af 8000 	nop.w
    6fac:	f3af 8000 	nop.w
    6fb0:	f3af 8000 	nop.w
    6fb4:	f3af 8000 	nop.w
    6fb8:	f3af 8000 	nop.w
    6fbc:	f3af 8000 	nop.w

00006fc0 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    6fc0:	4b09      	ldr	r3, [pc, #36]	; (6fe8 <VZpeakTick+0x28>)
    6fc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6fc6:	b510      	push	{r4, lr}
    6fc8:	4604      	mov	r4, r0
    6fca:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    6fcc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6fd0:	9001      	str	r0, [sp, #4]
    6fd2:	f003 fae9 	bl	a5a8 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    6fd6:	9801      	ldr	r0, [sp, #4]
    6fd8:	ed94 0a00 	vldr	s0, [r4]
    6fdc:	f003 f8e0 	bl	a1a0 <__tVZFilterBell_tick_veneer>
    6fe0:	ed84 0a00 	vstr	s0, [r4]
}
    6fe4:	b002      	add	sp, #8
    6fe6:	bd10      	pop	{r4, pc}
    6fe8:	2001cea4 	.word	0x2001cea4
    6fec:	f3af 8000 	nop.w
    6ff0:	f3af 8000 	nop.w
    6ff4:	f3af 8000 	nop.w
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    7000:	4b09      	ldr	r3, [pc, #36]	; (7028 <VZlowshelfTick+0x28>)
    7002:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7006:	b510      	push	{r4, lr}
    7008:	4604      	mov	r4, r0
    700a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    700c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7010:	9001      	str	r0, [sp, #4]
    7012:	f003 fa5d 	bl	a4d0 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    7016:	9801      	ldr	r0, [sp, #4]
    7018:	ed94 0a00 	vldr	s0, [r4]
    701c:	f003 f920 	bl	a260 <__tVZFilterLS_tick_veneer>
    7020:	ed84 0a00 	vstr	s0, [r4]
}
    7024:	b002      	add	sp, #8
    7026:	bd10      	pop	{r4, pc}
    7028:	2001ce94 	.word	0x2001ce94
    702c:	f3af 8000 	nop.w
    7030:	f3af 8000 	nop.w
    7034:	f3af 8000 	nop.w
    7038:	f3af 8000 	nop.w
    703c:	f3af 8000 	nop.w

00007040 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    7040:	4b09      	ldr	r3, [pc, #36]	; (7068 <VZhighshelfTick+0x28>)
    7042:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7046:	b510      	push	{r4, lr}
    7048:	4604      	mov	r4, r0
    704a:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    704c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7050:	9001      	str	r0, [sp, #4]
    7052:	f003 fa21 	bl	a498 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    7056:	9801      	ldr	r0, [sp, #4]
    7058:	ed94 0a00 	vldr	s0, [r4]
    705c:	f003 f920 	bl	a2a0 <__tVZFilterHS_tick_veneer>
    7060:	ed84 0a00 	vstr	s0, [r4]
}
    7064:	b002      	add	sp, #8
    7066:	bd10      	pop	{r4, pc}
    7068:	2001ce84 	.word	0x2001ce84
    706c:	f3af 8000 	nop.w
    7070:	f3af 8000 	nop.w
    7074:	f3af 8000 	nop.w
    7078:	f3af 8000 	nop.w
    707c:	f3af 8000 	nop.w

00007080 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    7080:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    7084:	4b0d      	ldr	r3, [pc, #52]	; (70bc <VZbandrejectTick+0x3c>)
{
    7086:	b530      	push	{r4, r5, lr}
    7088:	4605      	mov	r5, r0
    708a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    708c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    7090:	0094      	lsls	r4, r2, #2
    7092:	9001      	str	r0, [sp, #4]
    7094:	f003 f930 	bl	a2f8 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    7098:	ed95 0a00 	vldr	s0, [r5]
    709c:	9801      	ldr	r0, [sp, #4]
    709e:	f002 ffff 	bl	a0a0 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    70a2:	4b07      	ldr	r3, [pc, #28]	; (70c0 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    70a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    70a8:	4423      	add	r3, r4
    70aa:	edd3 7a00 	vldr	s15, [r3]
    70ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    70b2:	edc5 7a00 	vstr	s15, [r5]
}
    70b6:	b003      	add	sp, #12
    70b8:	bd30      	pop	{r4, r5, pc}
    70ba:	bf00      	nop
    70bc:	2001ce74 	.word	0x2001ce74
    70c0:	2001d148 	.word	0x2001d148
    70c4:	f3af 8000 	nop.w
    70c8:	f3af 8000 	nop.w
    70cc:	f3af 8000 	nop.w
    70d0:	f3af 8000 	nop.w
    70d4:	f3af 8000 	nop.w
    70d8:	f3af 8000 	nop.w
    70dc:	f3af 8000 	nop.w

000070e0 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    70e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    70e4:	4b0d      	ldr	r3, [pc, #52]	; (711c <LadderLowpassTick+0x3c>)
{
    70e6:	b530      	push	{r4, r5, lr}
    70e8:	4605      	mov	r5, r0
    70ea:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    70ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    70f0:	0094      	lsls	r4, r2, #2
    70f2:	9001      	str	r0, [sp, #4]
    70f4:	f002 fff4 	bl	a0e0 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    70f8:	ed95 0a00 	vldr	s0, [r5]
    70fc:	9801      	ldr	r0, [sp, #4]
    70fe:	f003 f9f7 	bl	a4f0 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    7102:	4b07      	ldr	r3, [pc, #28]	; (7120 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    7104:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    7108:	4423      	add	r3, r4
    710a:	edd3 7a00 	vldr	s15, [r3]
    710e:	ee67 7a80 	vmul.f32	s15, s15, s0
    7112:	edc5 7a00 	vstr	s15, [r5]
}
    7116:	b003      	add	sp, #12
    7118:	bd30      	pop	{r4, r5, pc}
    711a:	bf00      	nop
    711c:	2001ce64 	.word	0x2001ce64
    7120:	2001d148 	.word	0x2001d148
    7124:	f3af 8000 	nop.w
    7128:	f3af 8000 	nop.w
    712c:	f3af 8000 	nop.w
    7130:	f3af 8000 	nop.w
    7134:	f3af 8000 	nop.w
    7138:	f3af 8000 	nop.w
    713c:	f3af 8000 	nop.w

00007140 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    7140:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    7144:	4b0f      	ldr	r3, [pc, #60]	; (7184 <setFreqMultPitch+0x44>)
    7146:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    7148:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    714c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    7150:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7154:	3020      	adds	r0, #32
	pitch *= 24.0f;
    7156:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    715a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    715e:	4408      	add	r0, r1
    7160:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7164:	ed93 7a02 	vldr	s14, [r3, #8]
    7168:	eeb4 7ae7 	vcmpe.f32	s14, s15
    716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7170:	dd01      	ble.n	7176 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    7172:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    7176:	4b04      	ldr	r3, [pc, #16]	; (7188 <setFreqMultPitch+0x48>)
    7178:	440a      	add	r2, r1
    717a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    717e:	ed83 0a00 	vstr	s0, [r3]
}
    7182:	4770      	bx	lr
    7184:	2001908c 	.word	0x2001908c
    7188:	2001d45c 	.word	0x2001d45c
    718c:	f3af 8000 	nop.w
    7190:	f3af 8000 	nop.w
    7194:	f3af 8000 	nop.w
    7198:	f3af 8000 	nop.w
    719c:	f3af 8000 	nop.w

000071a0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    71a0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    71a4:	4b17      	ldr	r3, [pc, #92]	; (7204 <setFreqMultHarm+0x64>)
    71a6:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    71a8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    71ac:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    71b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    71b4:	3020      	adds	r0, #32
	harm *= 15.0f;
    71b6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    71ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    71be:	4408      	add	r0, r1
    71c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    71c4:	ed93 7a02 	vldr	s14, [r3, #8]
    71c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    71cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71d0:	dd01      	ble.n	71d6 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    71d2:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    71d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    71da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    71de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71e2:	db08      	blt.n	71f6 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    71e4:	ee30 0a27 	vadd.f32	s0, s0, s15
    71e8:	4b07      	ldr	r3, [pc, #28]	; (7208 <setFreqMultHarm+0x68>)
    71ea:	440a      	add	r2, r1
    71ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    71f0:	ed83 0a00 	vstr	s0, [r3]
}
    71f4:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    71f6:	ee30 0a67 	vsub.f32	s0, s0, s15
    71fa:	eeb0 7ac0 	vabs.f32	s14, s0
    71fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
    7202:	e7f1      	b.n	71e8 <setFreqMultHarm+0x48>
    7204:	2001908c 	.word	0x2001908c
    7208:	2001d170 	.word	0x2001d170
    720c:	f3af 8000 	nop.w
    7210:	f3af 8000 	nop.w
    7214:	f3af 8000 	nop.w
    7218:	f3af 8000 	nop.w
    721c:	f3af 8000 	nop.w

00007220 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    7220:	4b03      	ldr	r3, [pc, #12]	; (7230 <lowpassSetQ+0x10>)
    7222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    722a:	f003 b85d 	b.w	a2e8 <__tSVF_setQ_veneer>
    722e:	bf00      	nop
    7230:	2001d34c 	.word	0x2001d34c
    7234:	f3af 8000 	nop.w
    7238:	f3af 8000 	nop.w
    723c:	f3af 8000 	nop.w

00007240 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    7240:	4b03      	ldr	r3, [pc, #12]	; (7250 <highpassSetQ+0x10>)
    7242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    724a:	f003 b84d 	b.w	a2e8 <__tSVF_setQ_veneer>
    724e:	bf00      	nop
    7250:	2001d1c8 	.word	0x2001d1c8
    7254:	f3af 8000 	nop.w
    7258:	f3af 8000 	nop.w
    725c:	f3af 8000 	nop.w

00007260 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    7260:	4b03      	ldr	r3, [pc, #12]	; (7270 <bandpassSetQ+0x10>)
    7262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    726a:	f003 b83d 	b.w	a2e8 <__tSVF_setQ_veneer>
    726e:	bf00      	nop
    7270:	2001cebc 	.word	0x2001cebc
    7274:	f3af 8000 	nop.w
    7278:	f3af 8000 	nop.w
    727c:	f3af 8000 	nop.w

00007280 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    7280:	4b03      	ldr	r3, [pc, #12]	; (7290 <diodeLowpassSetQ+0x10>)
    7282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    728a:	f002 bf91 	b.w	a1b0 <__tDiodeFilter_setQ_veneer>
    728e:	bf00      	nop
    7290:	2001d0d4 	.word	0x2001d0d4
    7294:	f3af 8000 	nop.w
    7298:	f3af 8000 	nop.w
    729c:	f3af 8000 	nop.w

000072a0 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    72a0:	4b03      	ldr	r3, [pc, #12]	; (72b0 <VZpeakSetQ+0x10>)
    72a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72aa:	f002 bedd 	b.w	a068 <__tVZFilterBell_setBandwidth_veneer>
    72ae:	bf00      	nop
    72b0:	2001cea4 	.word	0x2001cea4
    72b4:	f3af 8000 	nop.w
    72b8:	f3af 8000 	nop.w
    72bc:	f3af 8000 	nop.w

000072c0 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    72c0:	4b03      	ldr	r3, [pc, #12]	; (72d0 <VZlowshelfSetQ+0x10>)
    72c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72ca:	f002 bf31 	b.w	a130 <__tVZFilterLS_setResonance_veneer>
    72ce:	bf00      	nop
    72d0:	2001ce94 	.word	0x2001ce94
    72d4:	f3af 8000 	nop.w
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    72e0:	4b03      	ldr	r3, [pc, #12]	; (72f0 <VZhighshelfSetQ+0x10>)
    72e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72ea:	f003 b949 	b.w	a580 <__tVZFilterHS_setResonance_veneer>
    72ee:	bf00      	nop
    72f0:	2001ce84 	.word	0x2001ce84
    72f4:	f3af 8000 	nop.w
    72f8:	f3af 8000 	nop.w
    72fc:	f3af 8000 	nop.w

00007300 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    7300:	4b03      	ldr	r3, [pc, #12]	; (7310 <VZbandrejectSetQ+0x10>)
    7302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    730a:	f003 b911 	b.w	a530 <__tVZFilter_setResonance_veneer>
    730e:	bf00      	nop
    7310:	2001ce74 	.word	0x2001ce74
    7314:	f3af 8000 	nop.w
    7318:	f3af 8000 	nop.w
    731c:	f3af 8000 	nop.w

00007320 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    7320:	4b03      	ldr	r3, [pc, #12]	; (7330 <LadderLowpassSetQ+0x10>)
    7322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    732a:	f003 b8b1 	b.w	a490 <__tLadderFilter_setQ_veneer>
    732e:	bf00      	nop
    7330:	2001ce64 	.word	0x2001ce64
    7334:	f3af 8000 	nop.w
    7338:	f3af 8000 	nop.w
    733c:	f3af 8000 	nop.w

00007340 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    7340:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7344:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    7348:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    734a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    734e:	4605      	mov	r5, r0
    7350:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    7352:	eeb0 0a67 	vmov.f32	s0, s15
    7356:	f003 f847 	bl	a3e8 <__dbToATableLookup_veneer>
    735a:	4b04      	ldr	r3, [pc, #16]	; (736c <lowpassSetGain+0x2c>)
    735c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7360:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7364:	ed83 0a00 	vstr	s0, [r3]
}
    7368:	bd38      	pop	{r3, r4, r5, pc}
    736a:	bf00      	nop
    736c:	2001d148 	.word	0x2001d148
    7370:	f3af 8000 	nop.w
    7374:	f3af 8000 	nop.w
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <highpassSetGain>:
    7380:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7384:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    7388:	b538      	push	{r3, r4, r5, lr}
    738a:	eee0 7a07 	vfma.f32	s15, s0, s14
    738e:	4605      	mov	r5, r0
    7390:	460c      	mov	r4, r1
    7392:	eeb0 0a67 	vmov.f32	s0, s15
    7396:	f003 f827 	bl	a3e8 <__dbToATableLookup_veneer>
    739a:	4b04      	ldr	r3, [pc, #16]	; (73ac <highpassSetGain+0x2c>)
    739c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    73a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    73a4:	ed83 0a00 	vstr	s0, [r3]
    73a8:	bd38      	pop	{r3, r4, r5, pc}
    73aa:	bf00      	nop
    73ac:	2001d148 	.word	0x2001d148
    73b0:	f3af 8000 	nop.w
    73b4:	f3af 8000 	nop.w
    73b8:	f3af 8000 	nop.w
    73bc:	f3af 8000 	nop.w

000073c0 <bandpassSetGain>:
    73c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    73c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    73c8:	b538      	push	{r3, r4, r5, lr}
    73ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    73ce:	4605      	mov	r5, r0
    73d0:	460c      	mov	r4, r1
    73d2:	eeb0 0a67 	vmov.f32	s0, s15
    73d6:	f003 f807 	bl	a3e8 <__dbToATableLookup_veneer>
    73da:	4b04      	ldr	r3, [pc, #16]	; (73ec <bandpassSetGain+0x2c>)
    73dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    73e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    73e4:	ed83 0a00 	vstr	s0, [r3]
    73e8:	bd38      	pop	{r3, r4, r5, pc}
    73ea:	bf00      	nop
    73ec:	2001d148 	.word	0x2001d148
    73f0:	f3af 8000 	nop.w
    73f4:	f3af 8000 	nop.w
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <diodeLowpassSetGain>:
    7400:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7404:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    7408:	b538      	push	{r3, r4, r5, lr}
    740a:	eee0 7a07 	vfma.f32	s15, s0, s14
    740e:	4605      	mov	r5, r0
    7410:	460c      	mov	r4, r1
    7412:	eeb0 0a67 	vmov.f32	s0, s15
    7416:	f002 ffe7 	bl	a3e8 <__dbToATableLookup_veneer>
    741a:	4b04      	ldr	r3, [pc, #16]	; (742c <diodeLowpassSetGain+0x2c>)
    741c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7420:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7424:	ed83 0a00 	vstr	s0, [r3]
    7428:	bd38      	pop	{r3, r4, r5, pc}
    742a:	bf00      	nop
    742c:	2001d148 	.word	0x2001d148
    7430:	f3af 8000 	nop.w
    7434:	f3af 8000 	nop.w
    7438:	f3af 8000 	nop.w
    743c:	f3af 8000 	nop.w

00007440 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    7440:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7444:	ed9f 7a09 	vldr	s14, [pc, #36]	; 746c <VZpeakSetGain+0x2c>
{
    7448:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    744a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    744e:	4605      	mov	r5, r0
    7450:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    7452:	eeb0 0a67 	vmov.f32	s0, s15
    7456:	f002 ffc7 	bl	a3e8 <__dbToATableLookup_veneer>
    745a:	4b05      	ldr	r3, [pc, #20]	; (7470 <VZpeakSetGain+0x30>)
    745c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    7468:	f003 b86e 	b.w	a548 <__tVZFilterBell_setGain_veneer>
    746c:	42480000 	.word	0x42480000
    7470:	2001cea4 	.word	0x2001cea4
    7474:	f3af 8000 	nop.w
    7478:	f3af 8000 	nop.w
    747c:	f3af 8000 	nop.w

00007480 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    7480:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7484:	ed9f 7a09 	vldr	s14, [pc, #36]	; 74ac <VZlowshelfSetGain+0x2c>
{
    7488:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    748a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    748e:	4605      	mov	r5, r0
    7490:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    7492:	eeb0 0a67 	vmov.f32	s0, s15
    7496:	f002 ffa7 	bl	a3e8 <__dbToATableLookup_veneer>
    749a:	4b05      	ldr	r3, [pc, #20]	; (74b0 <VZlowshelfSetGain+0x30>)
    749c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    74a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    74a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    74a8:	f003 b826 	b.w	a4f8 <__tVZFilterLS_setGain_veneer>
    74ac:	42480000 	.word	0x42480000
    74b0:	2001ce94 	.word	0x2001ce94
    74b4:	f3af 8000 	nop.w
    74b8:	f3af 8000 	nop.w
    74bc:	f3af 8000 	nop.w

000074c0 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    74c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    74c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 74ec <VZhighshelfSetGain+0x2c>
{
    74c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    74ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    74ce:	4605      	mov	r5, r0
    74d0:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    74d2:	eeb0 0a67 	vmov.f32	s0, s15
    74d6:	f002 ff87 	bl	a3e8 <__dbToATableLookup_veneer>
    74da:	4b05      	ldr	r3, [pc, #20]	; (74f0 <VZhighshelfSetGain+0x30>)
    74dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    74e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    74e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    74e8:	f002 be26 	b.w	a138 <__tVZFilterHS_setGain_veneer>
    74ec:	42480000 	.word	0x42480000
    74f0:	2001ce84 	.word	0x2001ce84
    74f4:	f3af 8000 	nop.w
    74f8:	f3af 8000 	nop.w
    74fc:	f3af 8000 	nop.w

00007500 <VZbandrejectSetGain>:
    7500:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7504:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    7508:	b538      	push	{r3, r4, r5, lr}
    750a:	eee0 7a07 	vfma.f32	s15, s0, s14
    750e:	4605      	mov	r5, r0
    7510:	460c      	mov	r4, r1
    7512:	eeb0 0a67 	vmov.f32	s0, s15
    7516:	f002 ff67 	bl	a3e8 <__dbToATableLookup_veneer>
    751a:	4b04      	ldr	r3, [pc, #16]	; (752c <VZbandrejectSetGain+0x2c>)
    751c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7520:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7524:	ed83 0a00 	vstr	s0, [r3]
    7528:	bd38      	pop	{r3, r4, r5, pc}
    752a:	bf00      	nop
    752c:	2001d148 	.word	0x2001d148
    7530:	f3af 8000 	nop.w
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <LadderLowpassSetGain>:
    7540:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7544:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    7548:	b538      	push	{r3, r4, r5, lr}
    754a:	eee0 7a07 	vfma.f32	s15, s0, s14
    754e:	4605      	mov	r5, r0
    7550:	460c      	mov	r4, r1
    7552:	eeb0 0a67 	vmov.f32	s0, s15
    7556:	f002 ff47 	bl	a3e8 <__dbToATableLookup_veneer>
    755a:	4b04      	ldr	r3, [pc, #16]	; (756c <LadderLowpassSetGain+0x2c>)
    755c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7560:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7564:	ed83 0a00 	vstr	s0, [r3]
    7568:	bd38      	pop	{r3, r4, r5, pc}
    756a:	bf00      	nop
    756c:	2001d148 	.word	0x2001d148
    7570:	f3af 8000 	nop.w
    7574:	f3af 8000 	nop.w
    7578:	f3af 8000 	nop.w
    757c:	f3af 8000 	nop.w

00007580 <envelope_tick>:
{
    7580:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    7582:	4d1d      	ldr	r5, [pc, #116]	; (75f8 <envelope_tick+0x78>)
{
    7584:	4604      	mov	r4, r0
		if (envOn[v])
    7586:	782b      	ldrb	r3, [r5, #0]
    7588:	bb53      	cbnz	r3, 75e0 <envelope_tick+0x60>
    758a:	786b      	ldrb	r3, [r5, #1]
    758c:	b9e3      	cbnz	r3, 75c8 <envelope_tick+0x48>
    758e:	78ab      	ldrb	r3, [r5, #2]
    7590:	b973      	cbnz	r3, 75b0 <envelope_tick+0x30>
    7592:	78eb      	ldrb	r3, [r5, #3]
    7594:	b903      	cbnz	r3, 7598 <envelope_tick+0x18>
}
    7596:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    7598:	4b18      	ldr	r3, [pc, #96]	; (75fc <envelope_tick+0x7c>)
    759a:	1da0      	adds	r0, r4, #6
    759c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75a0:	f002 ff82 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    75a4:	4b16      	ldr	r3, [pc, #88]	; (7600 <envelope_tick+0x80>)
    75a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    75aa:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    75ae:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    75b0:	4b12      	ldr	r3, [pc, #72]	; (75fc <envelope_tick+0x7c>)
    75b2:	1d20      	adds	r0, r4, #4
    75b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75b8:	f002 ff76 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    75bc:	4b10      	ldr	r3, [pc, #64]	; (7600 <envelope_tick+0x80>)
    75be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    75c2:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    75c6:	e7e4      	b.n	7592 <envelope_tick+0x12>
    75c8:	4b0c      	ldr	r3, [pc, #48]	; (75fc <envelope_tick+0x7c>)
    75ca:	1ca0      	adds	r0, r4, #2
    75cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75d0:	f002 ff6a 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    75d4:	4b0a      	ldr	r3, [pc, #40]	; (7600 <envelope_tick+0x80>)
    75d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    75da:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    75de:	e7d6      	b.n	758e <envelope_tick+0xe>
    75e0:	4806      	ldr	r0, [pc, #24]	; (75fc <envelope_tick+0x7c>)
    75e2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    75e6:	f002 ff5f 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    75ea:	4b05      	ldr	r3, [pc, #20]	; (7600 <envelope_tick+0x80>)
    75ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    75f0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    75f4:	e7c9      	b.n	758a <envelope_tick+0xa>
    75f6:	bf00      	nop
    75f8:	2001d0f4 	.word	0x2001d0f4
    75fc:	2001d0f8 	.word	0x2001d0f8
    7600:	2001d730 	.word	0x2001d730
    7604:	f3af 8000 	nop.w
    7608:	f3af 8000 	nop.w
    760c:	f3af 8000 	nop.w
    7610:	f3af 8000 	nop.w
    7614:	f3af 8000 	nop.w
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <lfo_tick>:
{
    7620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7624:	f8df 804c 	ldr.w	r8, [pc, #76]	; 7674 <lfo_tick+0x54>
    7628:	b082      	sub	sp, #8
    762a:	4d10      	ldr	r5, [pc, #64]	; (766c <lfo_tick+0x4c>)
    762c:	4607      	mov	r7, r0
    762e:	4e10      	ldr	r6, [pc, #64]	; (7670 <lfo_tick+0x50>)
    7630:	f108 0904 	add.w	r9, r8, #4
    7634:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    7638:	4644      	mov	r4, r8
			float sample = 0.0f;
    763a:	f04f 0a00 	mov.w	sl, #0
    763e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    7642:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    7646:	463a      	mov	r2, r7
    7648:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    764a:	b133      	cbz	r3, 765a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    764c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    764e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    7652:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    7654:	9b01      	ldr	r3, [sp, #4]
    7656:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    765a:	454c      	cmp	r4, r9
    765c:	f106 0604 	add.w	r6, r6, #4
    7660:	f105 0508 	add.w	r5, r5, #8
    7664:	d1eb      	bne.n	763e <lfo_tick+0x1e>
}
    7666:	b002      	add	sp, #8
    7668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    766c:	2001d730 	.word	0x2001d730
    7670:	2001d2dc 	.word	0x2001d2dc
    7674:	2001d278 	.word	0x2001d278
    7678:	f3af 8000 	nop.w
    767c:	f3af 8000 	nop.w

00007680 <setEnvelopeAttack>:
	a = a + 0.001f;
    7680:	eddf 7a05 	vldr	s15, [pc, #20]	; 7698 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    7684:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7688:	4b04      	ldr	r3, [pc, #16]	; (769c <setEnvelopeAttack+0x1c>)
    768a:	ee30 0a27 	vadd.f32	s0, s0, s15
    768e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7692:	f002 bd75 	b.w	a180 <__tADSRT_setAttack_veneer>
    7696:	bf00      	nop
    7698:	3a83126f 	.word	0x3a83126f
    769c:	2001d0f8 	.word	0x2001d0f8

000076a0 <setEnvelopeDecay>:
	d = d + 0.001f;
    76a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 76b8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    76a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    76a8:	4b04      	ldr	r3, [pc, #16]	; (76bc <setEnvelopeDecay+0x1c>)
    76aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    76ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    76b2:	f002 bd0d 	b.w	a0d0 <__tADSRT_setDecay_veneer>
    76b6:	bf00      	nop
    76b8:	3a83126f 	.word	0x3a83126f
    76bc:	2001d0f8 	.word	0x2001d0f8

000076c0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    76c0:	4b03      	ldr	r3, [pc, #12]	; (76d0 <setEnvelopeSustain+0x10>)
    76c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    76c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    76ca:	f002 bd21 	b.w	a110 <__tADSRT_setSustain_veneer>
    76ce:	bf00      	nop
    76d0:	2001d0f8 	.word	0x2001d0f8
    76d4:	f3af 8000 	nop.w
    76d8:	f3af 8000 	nop.w
    76dc:	f3af 8000 	nop.w

000076e0 <setEnvelopeRelease>:
	r = r + 0.001f;
    76e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 76f8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    76e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    76e8:	4b04      	ldr	r3, [pc, #16]	; (76fc <setEnvelopeRelease+0x1c>)
    76ea:	ee30 0a27 	vadd.f32	s0, s0, s15
    76ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    76f2:	f002 bf35 	b.w	a560 <__tADSRT_setRelease_veneer>
    76f6:	bf00      	nop
    76f8:	3a83126f 	.word	0x3a83126f
    76fc:	2001d0f8 	.word	0x2001d0f8

00007700 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    7700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7704:	eddf 6a08 	vldr	s13, [pc, #32]	; 7728 <setEnvelopeLeak+0x28>
    7708:	ed9f 7a08 	vldr	s14, [pc, #32]	; 772c <setEnvelopeLeak+0x2c>
    770c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7710:	4b07      	ldr	r3, [pc, #28]	; (7730 <setEnvelopeLeak+0x30>)
    7712:	ee77 7ac0 	vsub.f32	s15, s15, s0
    7716:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    771a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    771e:	eeb0 0a47 	vmov.f32	s0, s14
    7722:	f002 bf19 	b.w	a558 <__tADSRT_setLeakFactor_veneer>
    7726:	bf00      	nop
    7728:	3851b717 	.word	0x3851b717
    772c:	3f7ffcb9 	.word	0x3f7ffcb9
    7730:	2001d0f8 	.word	0x2001d0f8
    7734:	f3af 8000 	nop.w
    7738:	f3af 8000 	nop.w
    773c:	f3af 8000 	nop.w

00007740 <setAmp>:
	amplitude[string] = amp;
    7740:	4b02      	ldr	r3, [pc, #8]	; (774c <setAmp+0xc>)
    7742:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7746:	ed81 0a00 	vstr	s0, [r1]
}
    774a:	4770      	bx	lr
    774c:	2001ceb4 	.word	0x2001ceb4
    7750:	f3af 8000 	nop.w
    7754:	f3af 8000 	nop.w
    7758:	f3af 8000 	nop.w
    775c:	f3af 8000 	nop.w

00007760 <setMaster>:
	finalMaster[string] = amp;
    7760:	4b02      	ldr	r3, [pc, #8]	; (776c <setMaster+0xc>)
    7762:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7766:	ed81 0a00 	vstr	s0, [r1]
}
    776a:	4770      	bx	lr
    776c:	2001d168 	.word	0x2001d168
    7770:	f3af 8000 	nop.w
    7774:	f3af 8000 	nop.w
    7778:	f3af 8000 	nop.w
    777c:	f3af 8000 	nop.w

00007780 <setTranspose>:
	transpose = in;
    7780:	4b01      	ldr	r3, [pc, #4]	; (7788 <setTranspose+0x8>)
    7782:	ed83 0a00 	vstr	s0, [r3]
}
    7786:	4770      	bx	lr
    7788:	2001d8ac 	.word	0x2001d8ac
    778c:	f3af 8000 	nop.w
    7790:	f3af 8000 	nop.w
    7794:	f3af 8000 	nop.w
    7798:	f3af 8000 	nop.w
    779c:	f3af 8000 	nop.w

000077a0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    77a0:	eddf 7a03 	vldr	s15, [pc, #12]	; 77b0 <setPitchBendRange+0x10>
    77a4:	4b03      	ldr	r3, [pc, #12]	; (77b4 <setPitchBendRange+0x14>)
    77a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    77aa:	ed83 0a00 	vstr	s0, [r3]
}
    77ae:	4770      	bx	lr
    77b0:	39000200 	.word	0x39000200
    77b4:	20000acc 	.word	0x20000acc
    77b8:	f3af 8000 	nop.w
    77bc:	f3af 8000 	nop.w

000077c0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    77c0:	4802      	ldr	r0, [pc, #8]	; (77cc <setFinalLowpass+0xc>)
    77c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    77c6:	f002 bca7 	b.w	a118 <__tSVF_setFreqFast_veneer>
    77ca:	bf00      	nop
    77cc:	2001d160 	.word	0x2001d160
    77d0:	f3af 8000 	nop.w
    77d4:	f3af 8000 	nop.w
    77d8:	f3af 8000 	nop.w
    77dc:	f3af 8000 	nop.w

000077e0 <tickMappings>:
{
    77e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    77e4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 7944 <tickMappings+0x164>
	interruptChecker = 0;
    77e8:	f04f 0b00 	mov.w	fp, #0
    77ec:	4b51      	ldr	r3, [pc, #324]	; (7934 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    77ee:	f899 2000 	ldrb.w	r2, [r9]
{
    77f2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    77f6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    77fa:	2a00      	cmp	r2, #0
    77fc:	f000 8087 	beq.w	790e <tickMappings+0x12e>
    7800:	4c4d      	ldr	r4, [pc, #308]	; (7938 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    7802:	f8df 8144 	ldr.w	r8, [pc, #324]	; 7948 <tickMappings+0x168>
    7806:	e004      	b.n	7812 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    7808:	f10b 0b01 	add.w	fp, fp, #1
    780c:	344c      	adds	r4, #76	; 0x4c
    780e:	455a      	cmp	r2, fp
    7810:	dd7d      	ble.n	790e <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    7812:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    7816:	2bff      	cmp	r3, #255	; 0xff
    7818:	d0f6      	beq.n	7808 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    781a:	f898 3000 	ldrb.w	r3, [r8]
    781e:	2b00      	cmp	r3, #0
    7820:	d0f2      	beq.n	7808 <tickMappings+0x28>
    7822:	4b46      	ldr	r3, [pc, #280]	; (793c <tickMappings+0x15c>)
    7824:	4626      	mov	r6, r4
    7826:	2500      	movs	r5, #0
    7828:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    782c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    7830:	2b00      	cmp	r3, #0
    7832:	d070      	beq.n	7916 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7834:	6832      	ldr	r2, [r6, #0]
    7836:	69f3      	ldr	r3, [r6, #28]
    7838:	ed92 8a00 	vldr	s16, [r2]
    783c:	ed93 7a00 	vldr	s14, [r3]
    7840:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    7844:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    7848:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    784a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    784e:	2900      	cmp	r1, #0
    7850:	d069      	beq.n	7926 <tickMappings+0x146>
							smoothedValue += sum;
    7852:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    7856:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 7940 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    785a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    785e:	b183      	cbz	r3, 7882 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7860:	68b2      	ldr	r2, [r6, #8]
    7862:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7864:	ed92 7a00 	vldr	s14, [r2]
    7868:	ed93 6a00 	vldr	s12, [r3]
    786c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    7870:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    7874:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7876:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    787a:	2900      	cmp	r1, #0
    787c:	d156      	bne.n	792c <tickMappings+0x14c>
							unsmoothedValue += sum;
    787e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    7882:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    7886:	b183      	cbz	r3, 78aa <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7888:	6932      	ldr	r2, [r6, #16]
    788a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    788c:	ed92 7a00 	vldr	s14, [r2]
    7890:	ed93 6a00 	vldr	s12, [r3]
    7894:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    7898:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    789c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    789e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    78a2:	2900      	cmp	r1, #0
    78a4:	d13c      	bne.n	7920 <tickMappings+0x140>
							unsmoothedValue += sum;
    78a6:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    78aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    78ae:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    78b0:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    78b2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    78b6:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    78ba:	ee37 0a80 	vadd.f32	s0, s15, s0
    78be:	f002 fc17 	bl	a0f0 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    78c2:	4638      	mov	r0, r7
    78c4:	f002 fce0 	bl	a288 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    78c8:	f854 ac04 	ldr.w	sl, [r4, #-4]
    78cc:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    78d0:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    78d2:	f8da 3010 	ldr.w	r3, [sl, #16]
    78d6:	4798      	blx	r3
    78d8:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    78da:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    78dc:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    78de:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    78e2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    78e6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    78ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    78ee:	6942      	ldr	r2, [r0, #20]
    78f0:	7e00      	ldrb	r0, [r0, #24]
    78f2:	ed93 0a00 	vldr	s0, [r3]
    78f6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    78f8:	f898 3000 	ldrb.w	r3, [r8]
    78fc:	42ab      	cmp	r3, r5
    78fe:	dc95      	bgt.n	782c <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    7900:	f899 2000 	ldrb.w	r2, [r9]
    7904:	f10b 0b01 	add.w	fp, fp, #1
    7908:	344c      	adds	r4, #76	; 0x4c
    790a:	455a      	cmp	r2, fp
    790c:	dc81      	bgt.n	7812 <tickMappings+0x32>
}
    790e:	ecbd 8b02 	vpop	{d8}
    7912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    7916:	eddf 7a0a 	vldr	s15, [pc, #40]	; 7940 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    791a:	eeb0 8a67 	vmov.f32	s16, s15
    791e:	e79c      	b.n	785a <tickMappings+0x7a>
							smoothedValue += sum;
    7920:	ee77 7a87 	vadd.f32	s15, s15, s14
    7924:	e7c1      	b.n	78aa <tickMappings+0xca>
				float smoothedValue = 0.0f;
    7926:	eddf 7a06 	vldr	s15, [pc, #24]	; 7940 <tickMappings+0x160>
    792a:	e796      	b.n	785a <tickMappings+0x7a>
							smoothedValue += sum;
    792c:	ee77 7a87 	vadd.f32	s15, s15, s14
    7930:	e7a7      	b.n	7882 <tickMappings+0xa2>
    7932:	bf00      	nop
    7934:	200166bb 	.word	0x200166bb
    7938:	200186f8 	.word	0x200186f8
    793c:	2001d35c 	.word	0x2001d35c
    7940:	00000000 	.word	0x00000000
    7944:	2001907c 	.word	0x2001907c
    7948:	20000694 	.word	0x20000694
    794c:	f3af 8000 	nop.w
    7950:	f3af 8000 	nop.w
    7954:	f3af 8000 	nop.w
    7958:	f3af 8000 	nop.w
    795c:	f3af 8000 	nop.w

00007960 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    7960:	4b05      	ldr	r3, [pc, #20]	; (7978 <lfoSawSquareTick+0x18>)
    7962:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7966:	b510      	push	{r4, lr}
    7968:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    796a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    796e:	f002 fc93 	bl	a298 <__tSawSquareLFO_tick_veneer>
    7972:	ed84 0a00 	vstr	s0, [r4]
}
    7976:	bd10      	pop	{r4, pc}
    7978:	2001d2bc 	.word	0x2001d2bc
    797c:	f3af 8000 	nop.w

00007980 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    7980:	4b05      	ldr	r3, [pc, #20]	; (7998 <lfoSineTriTick+0x18>)
    7982:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7986:	b510      	push	{r4, lr}
    7988:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    798a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    798e:	f002 fb3b 	bl	a008 <__tSineTriLFO_tick_veneer>
    7992:	ed84 0a00 	vstr	s0, [r4]
}
    7996:	bd10      	pop	{r4, pc}
    7998:	2001d30c 	.word	0x2001d30c
    799c:	f3af 8000 	nop.w

000079a0 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    79a0:	4b05      	ldr	r3, [pc, #20]	; (79b8 <lfoSineTick+0x18>)
    79a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    79a6:	b510      	push	{r4, lr}
    79a8:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    79aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    79ae:	f002 fbf3 	bl	a198 <__tCycle_tick_veneer>
    79b2:	ed84 0a00 	vstr	s0, [r4]
}
    79b6:	bd10      	pop	{r4, pc}
    79b8:	2001d2ec 	.word	0x2001d2ec
    79bc:	f3af 8000 	nop.w

000079c0 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    79c0:	4b05      	ldr	r3, [pc, #20]	; (79d8 <lfoTriTick+0x18>)
    79c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    79c6:	b510      	push	{r4, lr}
    79c8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    79ca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    79ce:	f002 fb33 	bl	a038 <__tTriLFO_tick_veneer>
    79d2:	ed84 0a00 	vstr	s0, [r4]
}
    79d6:	bd10      	pop	{r4, pc}
    79d8:	2001d32c 	.word	0x2001d32c
    79dc:	f3af 8000 	nop.w

000079e0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    79e0:	4b08      	ldr	r3, [pc, #32]	; (7a04 <lfoSawTick+0x24>)
    79e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    79e6:	b510      	push	{r4, lr}
    79e8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    79ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    79ee:	f002 fc87 	bl	a300 <__tIntPhasor_tick_veneer>
    79f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    79f6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    79fa:	eee0 7a07 	vfma.f32	s15, s0, s14
    79fe:	edc4 7a00 	vstr	s15, [r4]
}
    7a02:	bd10      	pop	{r4, pc}
    7a04:	2001d29c 	.word	0x2001d29c
    7a08:	f3af 8000 	nop.w
    7a0c:	f3af 8000 	nop.w
    7a10:	f3af 8000 	nop.w
    7a14:	f3af 8000 	nop.w
    7a18:	f3af 8000 	nop.w
    7a1c:	f3af 8000 	nop.w

00007a20 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    7a20:	4b05      	ldr	r3, [pc, #20]	; (7a38 <lfoPulseTick+0x18>)
    7a22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7a26:	b510      	push	{r4, lr}
    7a28:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    7a2a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a2e:	f002 fddf 	bl	a5f0 <__tSquareLFO_tick_veneer>
    7a32:	ed84 0a00 	vstr	s0, [r4]
}
    7a36:	bd10      	pop	{r4, pc}
    7a38:	2001d27c 	.word	0x2001d27c
    7a3c:	f3af 8000 	nop.w

00007a40 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    7a40:	4b03      	ldr	r3, [pc, #12]	; (7a50 <lfoSawSquareSetRate+0x10>)
    7a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a4a:	f002 bb69 	b.w	a120 <__tSawSquareLFO_setFreq_veneer>
    7a4e:	bf00      	nop
    7a50:	2001d2bc 	.word	0x2001d2bc
    7a54:	f3af 8000 	nop.w
    7a58:	f3af 8000 	nop.w
    7a5c:	f3af 8000 	nop.w

00007a60 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    7a60:	4b03      	ldr	r3, [pc, #12]	; (7a70 <lfoSineTriSetRate+0x10>)
    7a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a6a:	f002 bb15 	b.w	a098 <__tSineTriLFO_setFreq_veneer>
    7a6e:	bf00      	nop
    7a70:	2001d30c 	.word	0x2001d30c
    7a74:	f3af 8000 	nop.w
    7a78:	f3af 8000 	nop.w
    7a7c:	f3af 8000 	nop.w

00007a80 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    7a80:	4b03      	ldr	r3, [pc, #12]	; (7a90 <lfoSineSetRate+0x10>)
    7a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a8a:	f002 bb25 	b.w	a0d8 <__tCycle_setFreq_veneer>
    7a8e:	bf00      	nop
    7a90:	2001d2ec 	.word	0x2001d2ec
    7a94:	f3af 8000 	nop.w
    7a98:	f3af 8000 	nop.w
    7a9c:	f3af 8000 	nop.w

00007aa0 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    7aa0:	4b03      	ldr	r3, [pc, #12]	; (7ab0 <lfoTriSetRate+0x10>)
    7aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7aaa:	f002 bc79 	b.w	a3a0 <__tTriLFO_setFreq_veneer>
    7aae:	bf00      	nop
    7ab0:	2001d32c 	.word	0x2001d32c
    7ab4:	f3af 8000 	nop.w
    7ab8:	f3af 8000 	nop.w
    7abc:	f3af 8000 	nop.w

00007ac0 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    7ac0:	4b03      	ldr	r3, [pc, #12]	; (7ad0 <lfoSawSetRate+0x10>)
    7ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7aca:	f002 bcd9 	b.w	a480 <__tIntPhasor_setFreq_veneer>
    7ace:	bf00      	nop
    7ad0:	2001d29c 	.word	0x2001d29c
    7ad4:	f3af 8000 	nop.w
    7ad8:	f3af 8000 	nop.w
    7adc:	f3af 8000 	nop.w

00007ae0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    7ae0:	4b03      	ldr	r3, [pc, #12]	; (7af0 <lfoPulseSetRate+0x10>)
    7ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7aea:	f002 bb79 	b.w	a1e0 <__tSquareLFO_setFreq_veneer>
    7aee:	bf00      	nop
    7af0:	2001d27c 	.word	0x2001d27c
    7af4:	f3af 8000 	nop.w
    7af8:	f3af 8000 	nop.w
    7afc:	f3af 8000 	nop.w

00007b00 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    7b00:	4b03      	ldr	r3, [pc, #12]	; (7b10 <lfoSawSquareSetPhase+0x10>)
    7b02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b0a:	f002 bc59 	b.w	a3c0 <__tSawSquareLFO_setPhase_veneer>
    7b0e:	bf00      	nop
    7b10:	2001d2bc 	.word	0x2001d2bc
    7b14:	f3af 8000 	nop.w
    7b18:	f3af 8000 	nop.w
    7b1c:	f3af 8000 	nop.w

00007b20 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    7b20:	4b03      	ldr	r3, [pc, #12]	; (7b30 <lfoSineTriSetPhase+0x10>)
    7b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b2a:	f002 bbc1 	b.w	a2b0 <__tSineTriLFO_setPhase_veneer>
    7b2e:	bf00      	nop
    7b30:	2001d30c 	.word	0x2001d30c
    7b34:	f3af 8000 	nop.w
    7b38:	f3af 8000 	nop.w
    7b3c:	f3af 8000 	nop.w

00007b40 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    7b40:	4b03      	ldr	r3, [pc, #12]	; (7b50 <lfoSineSetPhase+0x10>)
    7b42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b4a:	f002 bc9d 	b.w	a488 <__tCycle_setPhase_veneer>
    7b4e:	bf00      	nop
    7b50:	2001d2ec 	.word	0x2001d2ec
    7b54:	f3af 8000 	nop.w
    7b58:	f3af 8000 	nop.w
    7b5c:	f3af 8000 	nop.w

00007b60 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    7b60:	4b03      	ldr	r3, [pc, #12]	; (7b70 <lfoTriSetPhase+0x10>)
    7b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b6a:	f002 baed 	b.w	a148 <__tTriLFO_setPhase_veneer>
    7b6e:	bf00      	nop
    7b70:	2001d32c 	.word	0x2001d32c
    7b74:	f3af 8000 	nop.w
    7b78:	f3af 8000 	nop.w
    7b7c:	f3af 8000 	nop.w

00007b80 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    7b80:	4b03      	ldr	r3, [pc, #12]	; (7b90 <lfoSawSetPhase+0x10>)
    7b82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b8a:	f002 bcbd 	b.w	a508 <__tIntPhasor_setPhase_veneer>
    7b8e:	bf00      	nop
    7b90:	2001d29c 	.word	0x2001d29c
    7b94:	f3af 8000 	nop.w
    7b98:	f3af 8000 	nop.w
    7b9c:	f3af 8000 	nop.w

00007ba0 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    7ba0:	4b03      	ldr	r3, [pc, #12]	; (7bb0 <lfoPulseSetPhase+0x10>)
    7ba2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7baa:	f002 bb51 	b.w	a250 <__tSquareLFO_setPhase_veneer>
    7bae:	bf00      	nop
    7bb0:	2001d27c 	.word	0x2001d27c
    7bb4:	f3af 8000 	nop.w
    7bb8:	f3af 8000 	nop.w
    7bbc:	f3af 8000 	nop.w

00007bc0 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    7bc0:	4b03      	ldr	r3, [pc, #12]	; (7bd0 <lfoSawSquareSetShape+0x10>)
    7bc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7bc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7bca:	f002 bce9 	b.w	a5a0 <__tSawSquareLFO_setShape_veneer>
    7bce:	bf00      	nop
    7bd0:	2001d2bc 	.word	0x2001d2bc
    7bd4:	f3af 8000 	nop.w
    7bd8:	f3af 8000 	nop.w
    7bdc:	f3af 8000 	nop.w

00007be0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    7be0:	4b03      	ldr	r3, [pc, #12]	; (7bf0 <lfoSineTriSetShape+0x10>)
    7be2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7be6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7bea:	f002 bce1 	b.w	a5b0 <__tSineTriLFO_setShape_veneer>
    7bee:	bf00      	nop
    7bf0:	2001d30c 	.word	0x2001d30c
    7bf4:	f3af 8000 	nop.w
    7bf8:	f3af 8000 	nop.w
    7bfc:	f3af 8000 	nop.w

00007c00 <lfoSineSetShape>:
}
    7c00:	4770      	bx	lr
    7c02:	bf00      	nop
    7c04:	f3af 8000 	nop.w
    7c08:	f3af 8000 	nop.w
    7c0c:	f3af 8000 	nop.w
    7c10:	f3af 8000 	nop.w
    7c14:	f3af 8000 	nop.w
    7c18:	f3af 8000 	nop.w
    7c1c:	f3af 8000 	nop.w

00007c20 <lfoTriSetShape>:
    7c20:	4770      	bx	lr
    7c22:	bf00      	nop
    7c24:	f3af 8000 	nop.w
    7c28:	f3af 8000 	nop.w
    7c2c:	f3af 8000 	nop.w
    7c30:	f3af 8000 	nop.w
    7c34:	f3af 8000 	nop.w
    7c38:	f3af 8000 	nop.w
    7c3c:	f3af 8000 	nop.w

00007c40 <lfoSawSetShape>:
    7c40:	4770      	bx	lr
    7c42:	bf00      	nop
    7c44:	f3af 8000 	nop.w
    7c48:	f3af 8000 	nop.w
    7c4c:	f3af 8000 	nop.w
    7c50:	f3af 8000 	nop.w
    7c54:	f3af 8000 	nop.w
    7c58:	f3af 8000 	nop.w
    7c5c:	f3af 8000 	nop.w

00007c60 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    7c60:	4b03      	ldr	r3, [pc, #12]	; (7c70 <lfoPulseSetShape+0x10>)
    7c62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7c66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c6a:	f002 bcb5 	b.w	a5d8 <__tSquareLFO_setPulseWidth_veneer>
    7c6e:	bf00      	nop
    7c70:	2001d27c 	.word	0x2001d27c
    7c74:	f3af 8000 	nop.w
    7c78:	f3af 8000 	nop.w
    7c7c:	f3af 8000 	nop.w

00007c80 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    7c80:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    7c84:	b538      	push	{r3, r4, r5, lr}
    7c86:	4605      	mov	r5, r0
    7c88:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    7c8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    7c8e:	f002 fbab 	bl	a3e8 <__dbToATableLookup_veneer>
    7c92:	4b04      	ldr	r3, [pc, #16]	; (7ca4 <clipperGainSet+0x24>)
    7c94:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7c98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7c9c:	ed83 0a00 	vstr	s0, [r3]
}
    7ca0:	bd38      	pop	{r3, r4, r5, pc}
    7ca2:	bf00      	nop
    7ca4:	2001d54c 	.word	0x2001d54c
    7ca8:	f3af 8000 	nop.w
    7cac:	f3af 8000 	nop.w
    7cb0:	f3af 8000 	nop.w
    7cb4:	f3af 8000 	nop.w
    7cb8:	f3af 8000 	nop.w
    7cbc:	f3af 8000 	nop.w

00007cc0 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    7cc0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    7cc4:	b538      	push	{r3, r4, r5, lr}
    7cc6:	4605      	mov	r5, r0
    7cc8:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    7cca:	ee20 0a27 	vmul.f32	s0, s0, s15
    7cce:	f002 fb8b 	bl	a3e8 <__dbToATableLookup_veneer>
    7cd2:	4b04      	ldr	r3, [pc, #16]	; (7ce4 <wavefolderParam1+0x24>)
    7cd4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7cd8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7cdc:	ed83 0a00 	vstr	s0, [r3]
}
    7ce0:	bd38      	pop	{r3, r4, r5, pc}
    7ce2:	bf00      	nop
    7ce4:	2001d54c 	.word	0x2001d54c
    7ce8:	f3af 8000 	nop.w
    7cec:	f3af 8000 	nop.w
    7cf0:	f3af 8000 	nop.w
    7cf4:	f3af 8000 	nop.w
    7cf8:	f3af 8000 	nop.w
    7cfc:	f3af 8000 	nop.w

00007d00 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7d00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7d04:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d08:	4b07      	ldr	r3, [pc, #28]	; (7d28 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    7d0a:	4a08      	ldr	r2, [pc, #32]	; (7d2c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7d0c:	ee70 6a27 	vadd.f32	s13, s0, s15
    7d10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    7d14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7d18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    7d1c:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7d20:	ed83 7a00 	vstr	s14, [r3]
}
    7d24:	4770      	bx	lr
    7d26:	bf00      	nop
    7d28:	2001d258 	.word	0x2001d258
    7d2c:	2001d58c 	.word	0x2001d58c
    7d30:	f3af 8000 	nop.w
    7d34:	f3af 8000 	nop.w
    7d38:	f3af 8000 	nop.w
    7d3c:	f3af 8000 	nop.w

00007d40 <tiltParam1>:
{
    7d40:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7d42:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    7d46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    7d4a:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7d4e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    7d52:	0084      	lsls	r4, r0, #2
{
    7d54:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7d58:	eee0 7a68 	vfms.f32	s15, s0, s17
    7d5c:	eeb0 0a67 	vmov.f32	s0, s15
    7d60:	f002 fb42 	bl	a3e8 <__dbToATableLookup_veneer>
    7d64:	4808      	ldr	r0, [pc, #32]	; (7d88 <tiltParam1+0x48>)
    7d66:	4420      	add	r0, r4
    7d68:	f002 fbc6 	bl	a4f8 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7d6c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    7d70:	eea8 0a28 	vfma.f32	s0, s16, s17
    7d74:	f002 fb38 	bl	a3e8 <__dbToATableLookup_veneer>
    7d78:	4804      	ldr	r0, [pc, #16]	; (7d8c <tiltParam1+0x4c>)
}
    7d7a:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7d7e:	4420      	add	r0, r4
}
    7d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7d84:	f002 b9d8 	b.w	a138 <__tVZFilterHS_setGain_veneer>
    7d88:	2001d6c0 	.word	0x2001d6c0
    7d8c:	2001d6e0 	.word	0x2001d6e0
    7d90:	f3af 8000 	nop.w
    7d94:	f3af 8000 	nop.w
    7d98:	f3af 8000 	nop.w
    7d9c:	f3af 8000 	nop.w

00007da0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    7da0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    7da4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 7dd8 <tiltParam2+0x38>
    7da8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 7ddc <tiltParam2+0x3c>
    7dac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 7de0 <tiltParam2+0x40>
    7db0:	eee0 0a07 	vfma.f32	s1, s0, s14
    7db4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 7de4 <tiltParam2+0x44>
{
    7db8:	b538      	push	{r3, r4, r5, lr}
    7dba:	4605      	mov	r5, r0
    7dbc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    7dbe:	ee60 0aa7 	vmul.f32	s1, s1, s15
    7dc2:	f002 fa05 	bl	a1d0 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7dc6:	4b08      	ldr	r3, [pc, #32]	; (7de8 <tiltParam2+0x48>)
    7dc8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7dcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7dd4:	f002 bbe8 	b.w	a5a8 <__tVZFilterBell_setFreq_veneer>
    7dd8:	429a0000 	.word	0x429a0000
    7ddc:	420fb824 	.word	0x420fb824
    7de0:	457ff000 	.word	0x457ff000
    7de4:	00000000 	.word	0x00000000
    7de8:	2001ceec 	.word	0x2001ceec
    7dec:	f3af 8000 	nop.w
    7df0:	f3af 8000 	nop.w
    7df4:	f3af 8000 	nop.w
    7df8:	f3af 8000 	nop.w
    7dfc:	f3af 8000 	nop.w

00007e00 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    7e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7e04:	4b06      	ldr	r3, [pc, #24]	; (7e20 <tiltParam3+0x20>)
    7e06:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    7e0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e0e:	ee30 0a07 	vadd.f32	s0, s0, s14
    7e12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e16:	ee20 0a27 	vmul.f32	s0, s0, s15
    7e1a:	f002 b925 	b.w	a068 <__tVZFilterBell_setBandwidth_veneer>
    7e1e:	bf00      	nop
    7e20:	2001ceec 	.word	0x2001ceec
    7e24:	f3af 8000 	nop.w
    7e28:	f3af 8000 	nop.w
    7e2c:	f3af 8000 	nop.w
    7e30:	f3af 8000 	nop.w
    7e34:	f3af 8000 	nop.w
    7e38:	f3af 8000 	nop.w
    7e3c:	f3af 8000 	nop.w

00007e40 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7e40:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    7e44:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7e6c <tiltParam4+0x2c>
{
    7e48:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7e4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7e4e:	4605      	mov	r5, r0
    7e50:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7e52:	eeb0 0a67 	vmov.f32	s0, s15
    7e56:	f002 fac7 	bl	a3e8 <__dbToATableLookup_veneer>
    7e5a:	4b05      	ldr	r3, [pc, #20]	; (7e70 <tiltParam4+0x30>)
    7e5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7e60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7e68:	f002 bb6e 	b.w	a548 <__tVZFilterBell_setGain_veneer>
    7e6c:	42080000 	.word	0x42080000
    7e70:	2001ceec 	.word	0x2001ceec
    7e74:	f3af 8000 	nop.w
    7e78:	f3af 8000 	nop.w
    7e7c:	f3af 8000 	nop.w

00007e80 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    7e80:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    7e84:	4b04      	ldr	r3, [pc, #16]	; (7e98 <compressorParam1+0x18>)
    7e86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    7e8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7e92:	ed83 0a03 	vstr	s0, [r3, #12]
}
    7e96:	4770      	bx	lr
    7e98:	2001cf0c 	.word	0x2001cf0c
    7e9c:	f3af 8000 	nop.w

00007ea0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    7ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7ea4:	4b0a      	ldr	r3, [pc, #40]	; (7ed0 <compressorParam2+0x30>)
    7ea6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    7eaa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7eae:	eeb0 7a67 	vmov.f32	s14, s15
    7eb2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7eb6:	eea0 7a26 	vfma.f32	s14, s0, s13
    7eba:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    7ebe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7ec2:	edd3 6a04 	vldr	s13, [r3, #16]
    7ec6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    7eca:	ed83 7a07 	vstr	s14, [r3, #28]
}
    7ece:	4770      	bx	lr
    7ed0:	2001cf0c 	.word	0x2001cf0c
    7ed4:	f3af 8000 	nop.w
    7ed8:	f3af 8000 	nop.w
    7edc:	f3af 8000 	nop.w

00007ee0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    7ee0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    7ee4:	4b04      	ldr	r3, [pc, #16]	; (7ef8 <compressorParam3+0x18>)
    7ee6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7eea:	ee20 0a27 	vmul.f32	s0, s0, s15
    7eee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7ef2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    7ef6:	4770      	bx	lr
    7ef8:	2001cf0c 	.word	0x2001cf0c
    7efc:	f3af 8000 	nop.w

00007f00 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f00:	4b0b      	ldr	r3, [pc, #44]	; (7f30 <compressorParam4+0x30>)
    7f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    7f06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7f34 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f0a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    7f0e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    7f14:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f18:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    7f1c:	ee20 0a07 	vmul.f32	s0, s0, s14
    7f20:	ee87 0a80 	vdiv.f32	s0, s15, s0
    7f24:	f002 f9f8 	bl	a318 <__fasterexpf_veneer>
    7f28:	ed84 0a01 	vstr	s0, [r4, #4]
}
    7f2c:	bd10      	pop	{r4, pc}
    7f2e:	bf00      	nop
    7f30:	2001cf0c 	.word	0x2001cf0c
    7f34:	3a83126f 	.word	0x3a83126f
    7f38:	f3af 8000 	nop.w
    7f3c:	f3af 8000 	nop.w

00007f40 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f40:	4b0b      	ldr	r3, [pc, #44]	; (7f70 <compressorParam5+0x30>)
    7f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    7f46:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7f74 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    7f4e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f50:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    7f54:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7f58:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    7f5c:	ee20 0a07 	vmul.f32	s0, s0, s14
    7f60:	ee87 0a80 	vdiv.f32	s0, s15, s0
    7f64:	f002 f9d8 	bl	a318 <__fasterexpf_veneer>
    7f68:	ed84 0a02 	vstr	s0, [r4, #8]
}
    7f6c:	bd10      	pop	{r4, pc}
    7f6e:	bf00      	nop
    7f70:	2001cf0c 	.word	0x2001cf0c
    7f74:	3a83126f 	.word	0x3a83126f
    7f78:	f3af 8000 	nop.w
    7f7c:	f3af 8000 	nop.w

00007f80 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    7f80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    7f84:	4b05      	ldr	r3, [pc, #20]	; (7f9c <offsetParam2+0x1c>)
    7f86:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    7f8a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7f8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7f92:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f96:	edc3 7a00 	vstr	s15, [r3]
}
    7f9a:	4770      	bx	lr
    7f9c:	2001d56c 	.word	0x2001d56c

00007fa0 <param2Linear>:
	param2[v][string] = value;
    7fa0:	4b03      	ldr	r3, [pc, #12]	; (7fb0 <param2Linear+0x10>)
    7fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7fa6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7faa:	ed83 0a00 	vstr	s0, [r3]
}
    7fae:	4770      	bx	lr
    7fb0:	2001d56c 	.word	0x2001d56c
    7fb4:	f3af 8000 	nop.w
    7fb8:	f3af 8000 	nop.w
    7fbc:	f3af 8000 	nop.w

00007fc0 <param3Linear>:
	param3[v][string] = value;
    7fc0:	4b03      	ldr	r3, [pc, #12]	; (7fd0 <param3Linear+0x10>)
    7fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7fc6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7fca:	ed83 0a00 	vstr	s0, [r3]
}
    7fce:	4770      	bx	lr
    7fd0:	2001d58c 	.word	0x2001d58c
    7fd4:	f3af 8000 	nop.w
    7fd8:	f3af 8000 	nop.w
    7fdc:	f3af 8000 	nop.w

00007fe0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    7fe0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8024 <param3Soft+0x44>
    7fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7fe8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8028 <param3Soft+0x48>
    7fec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ff0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 802c <param3Soft+0x4c>
    7ff4:	eee0 7a26 	vfma.f32	s15, s0, s13
    7ff8:	4a0d      	ldr	r2, [pc, #52]	; (8030 <param3Soft+0x50>)
    7ffa:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    7ffe:	4b0d      	ldr	r3, [pc, #52]	; (8034 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    8000:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    8004:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8008:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    800c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    8010:	eee5 6a86 	vfma.f32	s13, s11, s12
    8014:	ee67 7aa6 	vmul.f32	s15, s15, s13
    8018:	eec7 6a27 	vdiv.f32	s13, s14, s15
    801c:	edc3 6a00 	vstr	s13, [r3]
}
    8020:	4770      	bx	lr
    8022:	bf00      	nop
    8024:	3f7d70a4 	.word	0x3f7d70a4
    8028:	3c23d70a 	.word	0x3c23d70a
    802c:	3eaaaaaa 	.word	0x3eaaaaaa
    8030:	2001d58c 	.word	0x2001d58c
    8034:	2001d694 	.word	0x2001d694
    8038:	f3af 8000 	nop.w
    803c:	f3af 8000 	nop.w

00008040 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    8040:	eddf 6a17 	vldr	s13, [pc, #92]	; 80a0 <param3Hard+0x60>
    8044:	eddf 7a17 	vldr	s15, [pc, #92]	; 80a4 <param3Hard+0x64>
    8048:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80a8 <param3Hard+0x68>
    804c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    8050:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    8052:	4b16      	ldr	r3, [pc, #88]	; (80ac <param3Hard+0x6c>)
    8054:	0045      	lsls	r5, r0, #1
    8056:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    805a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    805c:	ee27 0a87 	vmul.f32	s0, s15, s14
    8060:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8064:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    8068:	f002 f98a 	bl	a380 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    806c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    8070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8074:	d00a      	beq.n	808c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    8076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    807a:	4b0d      	ldr	r3, [pc, #52]	; (80b0 <param3Hard+0x70>)
    807c:	4425      	add	r5, r4
    807e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    8082:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8086:	edc3 7a00 	vstr	s15, [r3]
}
    808a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    808c:	4b08      	ldr	r3, [pc, #32]	; (80b0 <param3Hard+0x70>)
    808e:	4425      	add	r5, r4
    8090:	eddf 7a08 	vldr	s15, [pc, #32]	; 80b4 <param3Hard+0x74>
    8094:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8098:	edc3 7a00 	vstr	s15, [r3]
}
    809c:	bd38      	pop	{r3, r4, r5, pc}
    809e:	bf00      	nop
    80a0:	3f7d70a4 	.word	0x3f7d70a4
    80a4:	3c23d70a 	.word	0x3c23d70a
    80a8:	3fc90fdb 	.word	0x3fc90fdb
    80ac:	2001d58c 	.word	0x2001d58c
    80b0:	2001d674 	.word	0x2001d674
    80b4:	4479ffff 	.word	0x4479ffff
    80b8:	f3af 8000 	nop.w
    80bc:	f3af 8000 	nop.w

000080c0 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    80c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8120 <param3Poly+0x60>
    80c4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8124 <param3Poly+0x64>
    80c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8128 <param3Poly+0x68>
    80cc:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    80d0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    80d2:	4b16      	ldr	r3, [pc, #88]	; (812c <param3Poly+0x6c>)
    80d4:	0045      	lsls	r5, r0, #1
    80d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    80da:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    80dc:	ee27 0a87 	vmul.f32	s0, s15, s14
    80e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    80e4:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    80e8:	f002 f952 	bl	a390 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    80ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
    80f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80f4:	d00a      	beq.n	810c <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    80f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    80fa:	4b0d      	ldr	r3, [pc, #52]	; (8130 <param3Poly+0x70>)
    80fc:	4425      	add	r5, r4
    80fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    8102:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8106:	edc3 7a00 	vstr	s15, [r3]
}
    810a:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    810c:	4b08      	ldr	r3, [pc, #32]	; (8130 <param3Poly+0x70>)
    810e:	4425      	add	r5, r4
    8110:	eddf 7a08 	vldr	s15, [pc, #32]	; 8134 <param3Poly+0x74>
    8114:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8118:	edc3 7a00 	vstr	s15, [r3]
}
    811c:	bd38      	pop	{r3, r4, r5, pc}
    811e:	bf00      	nop
    8120:	3f7d70a4 	.word	0x3f7d70a4
    8124:	3c23d70a 	.word	0x3c23d70a
    8128:	3fc90fdb 	.word	0x3fc90fdb
    812c:	2001d58c 	.word	0x2001d58c
    8130:	2001d604 	.word	0x2001d604
    8134:	4479ffff 	.word	0x4479ffff
    8138:	f3af 8000 	nop.w
    813c:	f3af 8000 	nop.w

00008140 <param4Linear>:
	param4[v][string] = value;
    8140:	4b03      	ldr	r3, [pc, #12]	; (8150 <param4Linear+0x10>)
    8142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8146:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    814a:	ed83 0a00 	vstr	s0, [r3]
}
    814e:	4770      	bx	lr
    8150:	2001d5ac 	.word	0x2001d5ac
    8154:	f3af 8000 	nop.w
    8158:	f3af 8000 	nop.w
    815c:	f3af 8000 	nop.w

00008160 <param5Linear>:
	param5[v][string] = value;
    8160:	4b03      	ldr	r3, [pc, #12]	; (8170 <param5Linear+0x10>)
    8162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8166:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    816a:	ed83 0a00 	vstr	s0, [r3]
}
    816e:	4770      	bx	lr
    8170:	2001d5cc 	.word	0x2001d5cc
    8174:	f3af 8000 	nop.w
    8178:	f3af 8000 	nop.w
    817c:	f3af 8000 	nop.w

00008180 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    8180:	4b03      	ldr	r3, [pc, #12]	; (8190 <param2BC+0x10>)
    8182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    818a:	f002 ba19 	b.w	a5c0 <__tCrusher_setQuality_veneer>
    818e:	bf00      	nop
    8190:	2001cecc 	.word	0x2001cecc
    8194:	f3af 8000 	nop.w
    8198:	f3af 8000 	nop.w
    819c:	f3af 8000 	nop.w

000081a0 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    81a0:	4a07      	ldr	r2, [pc, #28]	; (81c0 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    81a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    81a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 81c4 <param3BC+0x24>
    81aa:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    81ae:	4b06      	ldr	r3, [pc, #24]	; (81c8 <param3BC+0x28>)
    81b0:	eee7 7a00 	vfma.f32	s15, s14, s0
    81b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    81b8:	eeb0 0a67 	vmov.f32	s0, s15
    81bc:	f002 b8f8 	b.w	a3b0 <__tCrusher_setSamplingRatio_veneer>
    81c0:	20000ad0 	.word	0x20000ad0
    81c4:	3c23d70a 	.word	0x3c23d70a
    81c8:	2001cecc 	.word	0x2001cecc
    81cc:	f3af 8000 	nop.w
    81d0:	f3af 8000 	nop.w
    81d4:	f3af 8000 	nop.w
    81d8:	f3af 8000 	nop.w
    81dc:	f3af 8000 	nop.w

000081e0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    81e0:	4b03      	ldr	r3, [pc, #12]	; (81f0 <param4BC+0x10>)
    81e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    81e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    81ea:	f002 b979 	b.w	a4e0 <__tCrusher_setRound_veneer>
    81ee:	bf00      	nop
    81f0:	2001cecc 	.word	0x2001cecc
    81f4:	f3af 8000 	nop.w
    81f8:	f3af 8000 	nop.w
    81fc:	f3af 8000 	nop.w

00008200 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    8200:	4b03      	ldr	r3, [pc, #12]	; (8210 <param5BC+0x10>)
    8202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    820a:	f002 b8ad 	b.w	a368 <__tCrusher_setOperation_veneer>
    820e:	bf00      	nop
    8210:	2001cecc 	.word	0x2001cecc
    8214:	f3af 8000 	nop.w
    8218:	f3af 8000 	nop.w
    821c:	f3af 8000 	nop.w

00008220 <fxMixSet>:
	fxMix[v][string] = value;
    8220:	4b03      	ldr	r3, [pc, #12]	; (8230 <fxMixSet+0x10>)
    8222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8226:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    822a:	ed83 0a00 	vstr	s0, [r3]
}
    822e:	4770      	bx	lr
    8230:	2001d188 	.word	0x2001d188
    8234:	f3af 8000 	nop.w
    8238:	f3af 8000 	nop.w
    823c:	f3af 8000 	nop.w

00008240 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    8240:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8244:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    8248:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    824a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    824e:	4605      	mov	r5, r0
    8250:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    8252:	eeb0 0a67 	vmov.f32	s0, s15
    8256:	f002 f8c7 	bl	a3e8 <__dbToATableLookup_veneer>
    825a:	4b04      	ldr	r3, [pc, #16]	; (826c <fxPostGainSet+0x2c>)
    825c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8260:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8264:	ed83 0a00 	vstr	s0, [r3]
}
    8268:	bd38      	pop	{r3, r4, r5, pc}
    826a:	bf00      	nop
    826c:	2001d1a8 	.word	0x2001d1a8
    8270:	f3af 8000 	nop.w
    8274:	f3af 8000 	nop.w
    8278:	f3af 8000 	nop.w
    827c:	f3af 8000 	nop.w

00008280 <wavefolderTick>:
{
    8280:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    8282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    8286:	4d36      	ldr	r5, [pc, #216]	; (8360 <wavefolderTick+0xe0>)
    8288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    828c:	4b35      	ldr	r3, [pc, #212]	; (8364 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    828e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    8292:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    8296:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    829a:	4a33      	ldr	r2, [pc, #204]	; (8368 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    829c:	eddf 3a33 	vldr	s7, [pc, #204]	; 836c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    82a0:	0084      	lsls	r4, r0, #2
    82a2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    82a6:	ed9f 3a32 	vldr	s6, [pc, #200]	; 8370 <wavefolderTick+0xf0>
{
    82aa:	ed2d 8b02 	vpush	{d8}
    82ae:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    82b2:	edd3 7a00 	vldr	s15, [r3]
    82b6:	fe86 6a66 	vminnm.f32	s12, s12, s13
    82ba:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    82be:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    82c2:	4b2c      	ldr	r3, [pc, #176]	; (8374 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    82c4:	ee30 0a27 	vadd.f32	s0, s0, s15
    82c8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    82cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    82d0:	4a29      	ldr	r2, [pc, #164]	; (8378 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    82d2:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    82d6:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    82da:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    82de:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    82e2:	4b26      	ldr	r3, [pc, #152]	; (837c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    82e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    82e8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8380 <wavefolderTick+0x100>
    82ec:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    82f0:	ee24 4a03 	vmul.f32	s8, s8, s6
    82f4:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    82f8:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    82fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    8300:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    8304:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8308:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    830c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    8310:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    8314:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    8318:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    831c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    8320:	ee76 6ac6 	vsub.f32	s13, s13, s12
    8324:	eee2 7a87 	vfma.f32	s15, s5, s14
    8328:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    832c:	eee6 7a85 	vfma.f32	s15, s13, s10
    8330:	eeb0 8a67 	vmov.f32	s16, s15
    8334:	f002 f824 	bl	a380 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    8338:	4b12      	ldr	r3, [pc, #72]	; (8384 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    833a:	4813      	ldr	r0, [pc, #76]	; (8388 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    833c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    8340:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    8342:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    8344:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    8348:	eee8 7ac0 	vfms.f32	s15, s17, s0
    834c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    8350:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    8354:	ecbd 8b02 	vpop	{d8}
    8358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    835c:	f001 be68 	b.w	a030 <__tHighpass_tick_veneer>
    8360:	2001d8cc 	.word	0x2001d8cc
    8364:	2001d56c 	.word	0x2001d56c
    8368:	2001d54c 	.word	0x2001d54c
    836c:	3eaaaaaa 	.word	0x3eaaaaaa
    8370:	3fbffff8 	.word	0x3fbffff8
    8374:	2001d58c 	.word	0x2001d58c
    8378:	2001d5ac 	.word	0x2001d5ac
    837c:	2001d5cc 	.word	0x2001d5cc
    8380:	40c90fdb 	.word	0x40c90fdb
    8384:	2001d258 	.word	0x2001d258
    8388:	2001cf2c 	.word	0x2001cf2c
    838c:	f3af 8000 	nop.w
    8390:	f3af 8000 	nop.w
    8394:	f3af 8000 	nop.w
    8398:	f3af 8000 	nop.w
    839c:	f3af 8000 	nop.w

000083a0 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    83a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    83a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 83bc <chorusParam1+0x1c>
    83a8:	4b05      	ldr	r3, [pc, #20]	; (83c0 <chorusParam1+0x20>)
    83aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    83ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    83b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    83b6:	edc3 7a00 	vstr	s15, [r3]
}
    83ba:	4770      	bx	lr
    83bc:	45b4a000 	.word	0x45b4a000
    83c0:	2001d54c 	.word	0x2001d54c
    83c4:	f3af 8000 	nop.w
    83c8:	f3af 8000 	nop.w
    83cc:	f3af 8000 	nop.w
    83d0:	f3af 8000 	nop.w
    83d4:	f3af 8000 	nop.w
    83d8:	f3af 8000 	nop.w
    83dc:	f3af 8000 	nop.w

000083e0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    83e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 83f8 <chorusParam2+0x18>
    83e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    83e8:	4b04      	ldr	r3, [pc, #16]	; (83fc <chorusParam2+0x1c>)
    83ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    83ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    83f2:	ed83 0a00 	vstr	s0, [r3]
}
    83f6:	4770      	bx	lr
    83f8:	3dcccccd 	.word	0x3dcccccd
    83fc:	2001d56c 	.word	0x2001d56c

00008400 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    8400:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8420 <chorusParam3+0x20>
    8404:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8408:	eddf 7a06 	vldr	s15, [pc, #24]	; 8424 <chorusParam3+0x24>
    840c:	4b06      	ldr	r3, [pc, #24]	; (8428 <chorusParam3+0x28>)
    840e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8416:	eeb0 0a67 	vmov.f32	s0, s15
    841a:	f001 be5d 	b.w	a0d8 <__tCycle_setFreq_veneer>
    841e:	bf00      	nop
    8420:	3ecccccd 	.word	0x3ecccccd
    8424:	3c23d70a 	.word	0x3c23d70a
    8428:	2001d474 	.word	0x2001d474
    842c:	f3af 8000 	nop.w
    8430:	f3af 8000 	nop.w
    8434:	f3af 8000 	nop.w
    8438:	f3af 8000 	nop.w
    843c:	f3af 8000 	nop.w

00008440 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    8440:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8460 <chorusParam4+0x20>
    8444:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8448:	eddf 7a06 	vldr	s15, [pc, #24]	; 8464 <chorusParam4+0x24>
    844c:	4b06      	ldr	r3, [pc, #24]	; (8468 <chorusParam4+0x28>)
    844e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8452:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8456:	eeb0 0a67 	vmov.f32	s0, s15
    845a:	f001 be3d 	b.w	a0d8 <__tCycle_setFreq_veneer>
    845e:	bf00      	nop
    8460:	3ee38e37 	.word	0x3ee38e37
    8464:	3c343958 	.word	0x3c343958
    8468:	2001d494 	.word	0x2001d494
    846c:	f3af 8000 	nop.w
    8470:	f3af 8000 	nop.w
    8474:	f3af 8000 	nop.w
    8478:	f3af 8000 	nop.w
    847c:	f3af 8000 	nop.w

00008480 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    8480:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8484:	ed9f 7a06 	vldr	s14, [pc, #24]	; 84a0 <delayParam1+0x20>
    8488:	4b06      	ldr	r3, [pc, #24]	; (84a4 <delayParam1+0x24>)
    848a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    848e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8492:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8496:	eeb0 0a67 	vmov.f32	s0, s15
    849a:	f001 bf51 	b.w	a340 <__tTapeDelay_setDelay_veneer>
    849e:	bf00      	nop
    84a0:	46ea6000 	.word	0x46ea6000
    84a4:	2001d860 	.word	0x2001d860
    84a8:	f3af 8000 	nop.w
    84ac:	f3af 8000 	nop.w
    84b0:	f3af 8000 	nop.w
    84b4:	f3af 8000 	nop.w
    84b8:	f3af 8000 	nop.w
    84bc:	f3af 8000 	nop.w

000084c0 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    84c0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 84e8 <delayParam2+0x28>
{
    84c4:	b538      	push	{r3, r4, r5, lr}
    84c6:	4605      	mov	r5, r0
    84c8:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    84ca:	ee60 0a01 	vmul.f32	s1, s0, s2
    84ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; 84ec <delayParam2+0x2c>
    84d2:	f001 fe7d 	bl	a1d0 <__LEAF_clip_veneer>
    84d6:	4b06      	ldr	r3, [pc, #24]	; (84f0 <delayParam2+0x30>)
    84d8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    84dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    84e0:	ed83 0a00 	vstr	s0, [r3]
}
    84e4:	bd38      	pop	{r3, r4, r5, pc}
    84e6:	bf00      	nop
    84e8:	3f8ccccd 	.word	0x3f8ccccd
    84ec:	00000000 	.word	0x00000000
    84f0:	2001d56c 	.word	0x2001d56c
    84f4:	f3af 8000 	nop.w
    84f8:	f3af 8000 	nop.w
    84fc:	f3af 8000 	nop.w

00008500 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    8500:	eddf 7a05 	vldr	s15, [pc, #20]	; 8518 <delayParam3+0x18>
    8504:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8508:	4b04      	ldr	r3, [pc, #16]	; (851c <delayParam3+0x1c>)
    850a:	ee20 0a27 	vmul.f32	s0, s0, s15
    850e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8512:	f001 be01 	b.w	a118 <__tSVF_setFreqFast_veneer>
    8516:	bf00      	nop
    8518:	42fe0000 	.word	0x42fe0000
    851c:	2001ce44 	.word	0x2001ce44

00008520 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    8520:	eddf 7a05 	vldr	s15, [pc, #20]	; 8538 <delayParam4+0x18>
    8524:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8528:	4b04      	ldr	r3, [pc, #16]	; (853c <delayParam4+0x1c>)
    852a:	ee20 0a27 	vmul.f32	s0, s0, s15
    852e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8532:	f001 bdf1 	b.w	a118 <__tSVF_setFreqFast_veneer>
    8536:	bf00      	nop
    8538:	42fe0000 	.word	0x42fe0000
    853c:	2001ce24 	.word	0x2001ce24

00008540 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    8540:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    8544:	4b05      	ldr	r3, [pc, #20]	; (855c <delayParam5+0x1c>)
    8546:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    854a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    854e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8552:	eee0 7a07 	vfma.f32	s15, s0, s14
    8556:	edc3 7a00 	vstr	s15, [r3]
}
    855a:	4770      	bx	lr
    855c:	2001d5cc 	.word	0x2001d5cc

00008560 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    8560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8562:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    8566:	4f2b      	ldr	r7, [pc, #172]	; (8614 <chorusTick+0xb4>)
    8568:	4d2b      	ldr	r5, [pc, #172]	; (8618 <chorusTick+0xb8>)
    856a:	482c      	ldr	r0, [pc, #176]	; (861c <chorusTick+0xbc>)
    856c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    8570:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    8574:	4e2a      	ldr	r6, [pc, #168]	; (8620 <chorusTick+0xc0>)
    8576:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    857a:	008c      	lsls	r4, r1, #2
    857c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    8580:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    8584:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    8588:	edd5 9a00 	vldr	s19, [r5]
{
    858c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    8590:	ed97 9a00 	vldr	s18, [r7]
    8594:	f001 fe00 	bl	a198 <__tCycle_tick_veneer>
    8598:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8624 <chorusTick+0xc4>
    859c:	eef0 7a48 	vmov.f32	s15, s16
    85a0:	4630      	mov	r0, r6
    85a2:	ee29 9a07 	vmul.f32	s18, s18, s14
    85a6:	eee9 7a80 	vfma.f32	s15, s19, s0
    85aa:	ee29 0a27 	vmul.f32	s0, s18, s15
    85ae:	f002 f817 	bl	a5e0 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    85b2:	481d      	ldr	r0, [pc, #116]	; (8628 <chorusTick+0xc8>)
    85b4:	edd5 9a00 	vldr	s19, [r5]
    85b8:	4420      	add	r0, r4
    85ba:	ed97 9a00 	vldr	s18, [r7]
    85be:	f001 fdeb 	bl	a198 <__tCycle_tick_veneer>
    85c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    85c6:	eea9 8ac0 	vfms.f32	s16, s19, s0
    85ca:	4d18      	ldr	r5, [pc, #96]	; (862c <chorusTick+0xcc>)
    85cc:	ee29 0a27 	vmul.f32	s0, s18, s15
    85d0:	4425      	add	r5, r4
    85d2:	4628      	mov	r0, r5
    85d4:	ee20 0a08 	vmul.f32	s0, s0, s16
    85d8:	f002 f802 	bl	a5e0 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    85dc:	eeb0 0a68 	vmov.f32	s0, s17
    85e0:	4630      	mov	r0, r6
    85e2:	f001 fd61 	bl	a0a8 <__tLinearDelay_tick_veneer>
    85e6:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    85ea:	4628      	mov	r0, r5
    85ec:	eeb0 0a68 	vmov.f32	s0, s17
    85f0:	f001 fd5a 	bl	a0a8 <__tLinearDelay_tick_veneer>
    85f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    85f8:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    85fc:	480c      	ldr	r0, [pc, #48]	; (8630 <chorusTick+0xd0>)
    85fe:	4420      	add	r0, r4
    8600:	eea8 0ae7 	vfms.f32	s0, s17, s15
    8604:	f001 fd14 	bl	a030 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    8608:	eeb1 0a40 	vneg.f32	s0, s0
    860c:	ecbd 8b04 	vpop	{d8-d9}
    8610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8612:	bf00      	nop
    8614:	2001d54c 	.word	0x2001d54c
    8618:	2001d56c 	.word	0x2001d56c
    861c:	2001d474 	.word	0x2001d474
    8620:	2001d074 	.word	0x2001d074
    8624:	3f34fdf4 	.word	0x3f34fdf4
    8628:	2001d494 	.word	0x2001d494
    862c:	2001d094 	.word	0x2001d094
    8630:	2001cf2c 	.word	0x2001cf2c
    8634:	f3af 8000 	nop.w
    8638:	f3af 8000 	nop.w
    863c:	f3af 8000 	nop.w

00008640 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    8640:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8644:	4a0e      	ldr	r2, [pc, #56]	; (8680 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    8646:	4b0f      	ldr	r3, [pc, #60]	; (8684 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    8648:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    864c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    8650:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    8652:	edd2 7a00 	vldr	s15, [r2]
    8656:	008c      	lsls	r4, r1, #2
    8658:	ee30 0a27 	vadd.f32	s0, s0, s15
    865c:	edd3 7a00 	vldr	s15, [r3]
    8660:	4b09      	ldr	r3, [pc, #36]	; (8688 <shaperTick+0x48>)
    8662:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8666:	ee20 0a27 	vmul.f32	s0, s0, s15
    866a:	edd3 0a00 	vldr	s1, [r3]
    866e:	f001 ff7b 	bl	a568 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    8672:	4806      	ldr	r0, [pc, #24]	; (868c <shaperTick+0x4c>)
    8674:	4420      	add	r0, r4
    return temp;
}
    8676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    867a:	f001 bcd9 	b.w	a030 <__tHighpass_tick_veneer>
    867e:	bf00      	nop
    8680:	2001d56c 	.word	0x2001d56c
    8684:	2001d54c 	.word	0x2001d54c
    8688:	2001d58c 	.word	0x2001d58c
    868c:	2001cf2c 	.word	0x2001cf2c
    8690:	f3af 8000 	nop.w
    8694:	f3af 8000 	nop.w
    8698:	f3af 8000 	nop.w
    869c:	f3af 8000 	nop.w

000086a0 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    86a0:	4770      	bx	lr
    86a2:	bf00      	nop
    86a4:	f3af 8000 	nop.w
    86a8:	f3af 8000 	nop.w
    86ac:	f3af 8000 	nop.w
    86b0:	f3af 8000 	nop.w
    86b4:	f3af 8000 	nop.w
    86b8:	f3af 8000 	nop.w
    86bc:	f3af 8000 	nop.w

000086c0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    86c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    86c4:	4b08      	ldr	r3, [pc, #32]	; (86e8 <tiltFilterTick+0x28>)
{
    86c6:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    86c8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    86cc:	008c      	lsls	r4, r1, #2
    86ce:	f001 fdc7 	bl	a260 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    86d2:	4806      	ldr	r0, [pc, #24]	; (86ec <tiltFilterTick+0x2c>)
    86d4:	4420      	add	r0, r4
    86d6:	f001 fde3 	bl	a2a0 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    86da:	4805      	ldr	r0, [pc, #20]	; (86f0 <tiltFilterTick+0x30>)
    86dc:	4420      	add	r0, r4
    return sample;
}
    86de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    86e2:	f001 bd5d 	b.w	a1a0 <__tVZFilterBell_tick_veneer>
    86e6:	bf00      	nop
    86e8:	2001d6c0 	.word	0x2001d6c0
    86ec:	2001d6e0 	.word	0x2001d6e0
    86f0:	2001ceec 	.word	0x2001ceec
    86f4:	f3af 8000 	nop.w
    86f8:	f3af 8000 	nop.w
    86fc:	f3af 8000 	nop.w

00008700 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    8700:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    8704:	4a0d      	ldr	r2, [pc, #52]	; (873c <tanhTick+0x3c>)
    8706:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    870a:	4b0d      	ldr	r3, [pc, #52]	; (8740 <tanhTick+0x40>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    870c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    8710:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    8714:	b510      	push	{r4, lr}
    8716:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    871a:	008c      	lsls	r4, r1, #2
    871c:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    8720:	eea6 0a87 	vfma.f32	s0, s13, s14
    8724:	ee27 0a80 	vmul.f32	s0, s15, s0
    8728:	f001 fcfe 	bl	a128 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    872c:	4805      	ldr	r0, [pc, #20]	; (8744 <tanhTick+0x44>)
    872e:	4420      	add	r0, r4
    8730:	f001 fc7e 	bl	a030 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    8734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    8738:	f001 bcf6 	b.w	a128 <__tanhf_veneer>
    873c:	2001d56c 	.word	0x2001d56c
    8740:	2001d54c 	.word	0x2001d54c
    8744:	2001cf2c 	.word	0x2001cf2c
    8748:	f3af 8000 	nop.w
    874c:	f3af 8000 	nop.w
    8750:	f3af 8000 	nop.w
    8754:	f3af 8000 	nop.w
    8758:	f3af 8000 	nop.w
    875c:	f3af 8000 	nop.w

00008760 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    8760:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8764:	4a10      	ldr	r2, [pc, #64]	; (87a8 <softClipTick+0x48>)
    sample = sample + param2[v][string];
    8766:	4b11      	ldr	r3, [pc, #68]	; (87ac <softClipTick+0x4c>)
    8768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    876c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8770:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    8774:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8778:	eddf 6a0d 	vldr	s13, [pc, #52]	; 87b0 <softClipTick+0x50>
    877c:	edd2 5a00 	vldr	s11, [r2]
    8780:	edd3 7a00 	vldr	s15, [r3]
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    8784:	480b      	ldr	r0, [pc, #44]	; (87b4 <softClipTick+0x54>)
    sample = sample + param2[v][string];
    8786:	eee5 7a80 	vfma.f32	s15, s11, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    878a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    878e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    8792:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    8796:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    879a:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    879e:	ee27 0a27 	vmul.f32	s0, s14, s15
    87a2:	f001 bc45 	b.w	a030 <__tHighpass_tick_veneer>
    87a6:	bf00      	nop
    87a8:	2001d54c 	.word	0x2001d54c
    87ac:	2001d56c 	.word	0x2001d56c
    87b0:	3eaaaaaa 	.word	0x3eaaaaaa
    87b4:	2001cf2c 	.word	0x2001cf2c
    87b8:	f3af 8000 	nop.w
    87bc:	f3af 8000 	nop.w

000087c0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    87c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    87c4:	4a1a      	ldr	r2, [pc, #104]	; (8830 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    87c6:	4b1b      	ldr	r3, [pc, #108]	; (8834 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    87c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    87cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    87d0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    87d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    87d8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    87da:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    87de:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    87e0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    87e4:	4e14      	ldr	r6, [pc, #80]	; (8838 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    87e6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    87ea:	4d14      	ldr	r5, [pc, #80]	; (883c <hardClipTick+0x7c>)
    87ec:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    87f0:	4425      	add	r5, r4
    87f2:	ed96 7a00 	vldr	s14, [r6]
    87f6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    87fa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    87fe:	ee27 0a87 	vmul.f32	s0, s15, s14
    8802:	f001 fdbd 	bl	a380 <__arm_sin_f32_veneer>
    8806:	ed96 7a00 	vldr	s14, [r6]
    880a:	edd5 7a00 	vldr	s15, [r5]
    880e:	ee67 7a87 	vmul.f32	s15, s15, s14
    8812:	ee27 0a80 	vmul.f32	s0, s15, s0
    8816:	f001 fdb3 	bl	a380 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    881a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    881e:	4808      	ldr	r0, [pc, #32]	; (8840 <hardClipTick+0x80>)
    8820:	ee20 0a27 	vmul.f32	s0, s0, s15
    8824:	4420      	add	r0, r4
    return sample;
}
    8826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    882a:	f001 bc01 	b.w	a030 <__tHighpass_tick_veneer>
    882e:	bf00      	nop
    8830:	2001d54c 	.word	0x2001d54c
    8834:	2001d56c 	.word	0x2001d56c
    8838:	2001d58c 	.word	0x2001d58c
    883c:	2001d674 	.word	0x2001d674
    8840:	2001cf2c 	.word	0x2001cf2c
    8844:	f3af 8000 	nop.w
    8848:	f3af 8000 	nop.w
    884c:	f3af 8000 	nop.w
    8850:	f3af 8000 	nop.w
    8854:	f3af 8000 	nop.w
    8858:	f3af 8000 	nop.w
    885c:	f3af 8000 	nop.w

00008860 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    8860:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8864:	4a1a      	ldr	r2, [pc, #104]	; (88d0 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    8866:	4b1b      	ldr	r3, [pc, #108]	; (88d4 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    8868:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    886c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    8870:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    8874:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    8878:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    887a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    887e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    8880:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    8884:	4e14      	ldr	r6, [pc, #80]	; (88d8 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    8886:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    888a:	4d14      	ldr	r5, [pc, #80]	; (88dc <polynomialShaperTick+0x7c>)
    888c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    8890:	4425      	add	r5, r4
    8892:	ed96 7a00 	vldr	s14, [r6]
    8896:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    889a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    889e:	ee27 0a87 	vmul.f32	s0, s15, s14
    88a2:	f001 fd75 	bl	a390 <__fastSine_veneer>
    88a6:	ed96 7a00 	vldr	s14, [r6]
    88aa:	edd5 7a00 	vldr	s15, [r5]
    88ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    88b2:	ee27 0a80 	vmul.f32	s0, s15, s0
    88b6:	f001 fd6b 	bl	a390 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    88ba:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    88be:	4808      	ldr	r0, [pc, #32]	; (88e0 <polynomialShaperTick+0x80>)
    88c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    88c4:	4420      	add	r0, r4
    return sample;
}
    88c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    88ca:	f001 bbb1 	b.w	a030 <__tHighpass_tick_veneer>
    88ce:	bf00      	nop
    88d0:	2001d54c 	.word	0x2001d54c
    88d4:	2001d56c 	.word	0x2001d56c
    88d8:	2001d58c 	.word	0x2001d58c
    88dc:	2001d604 	.word	0x2001d604
    88e0:	2001cf2c 	.word	0x2001cf2c
    88e4:	f3af 8000 	nop.w
    88e8:	f3af 8000 	nop.w
    88ec:	f3af 8000 	nop.w
    88f0:	f3af 8000 	nop.w
    88f4:	f3af 8000 	nop.w
    88f8:	f3af 8000 	nop.w
    88fc:	f3af 8000 	nop.w

00008900 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    8900:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    8904:	4b17      	ldr	r3, [pc, #92]	; (8964 <satTick+0x64>)
    sample = sample * param1[v][string];
    8906:	4a18      	ldr	r2, [pc, #96]	; (8968 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    8908:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    890c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    8910:	4816      	ldr	r0, [pc, #88]	; (896c <satTick+0x6c>)
    sample = sample * param1[v][string];
    8912:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    8916:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    891a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    891c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    8920:	008c      	lsls	r4, r1, #2
    8922:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    8926:	eeb0 6a47 	vmov.f32	s12, s14
    892a:	ee27 7a87 	vmul.f32	s14, s15, s14
    892e:	eea7 6a80 	vfma.f32	s12, s15, s0
    8932:	eea7 7a80 	vfma.f32	s14, s15, s0
    8936:	eeb0 6ac6 	vabs.f32	s12, s12
    893a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    893e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    8942:	ee36 6b05 	vadd.f64	d6, d6, d5
    8946:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    894a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    894e:	f001 fb6f 	bl	a030 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    8952:	4807      	ldr	r0, [pc, #28]	; (8970 <satTick+0x70>)
    8954:	4420      	add	r0, r4
    8956:	f001 fb6b 	bl	a030 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    895e:	f001 be0b 	b.w	a578 <__LEAF_tanh_veneer>
    8962:	bf00      	nop
    8964:	2001d56c 	.word	0x2001d56c
    8968:	2001d54c 	.word	0x2001d54c
    896c:	2001cf2c 	.word	0x2001cf2c
    8970:	2001cf4c 	.word	0x2001cf4c
    8974:	f3af 8000 	nop.w
    8978:	f3af 8000 	nop.w
    897c:	f3af 8000 	nop.w

00008980 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    8980:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8984:	4b05      	ldr	r3, [pc, #20]	; (899c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    8986:	4806      	ldr	r0, [pc, #24]	; (89a0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    8988:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    898c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    8990:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    8994:	ee20 0a27 	vmul.f32	s0, s0, s15
    8998:	f001 bd62 	b.w	a460 <__tCrusher_tick_veneer>
    899c:	2001d54c 	.word	0x2001d54c
    89a0:	2001cecc 	.word	0x2001cecc
    89a4:	f3af 8000 	nop.w
    89a8:	f3af 8000 	nop.w
    89ac:	f3af 8000 	nop.w
    89b0:	f3af 8000 	nop.w
    89b4:	f3af 8000 	nop.w
    89b8:	f3af 8000 	nop.w
    89bc:	f3af 8000 	nop.w

000089c0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    89c0:	4b03      	ldr	r3, [pc, #12]	; (89d0 <compressorTick+0x10>)
    89c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    89c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    89ca:	f001 bc1d 	b.w	a208 <__tCompressor_tick_veneer>
    89ce:	bf00      	nop
    89d0:	2001cf0c 	.word	0x2001cf0c
    89d4:	f3af 8000 	nop.w
    89d8:	f3af 8000 	nop.w
    89dc:	f3af 8000 	nop.w

000089e0 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    89e0:	4b03      	ldr	r3, [pc, #12]	; (89f0 <FXlowpassTick+0x10>)
    89e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    89e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    89ea:	f001 bcd5 	b.w	a398 <__tSVF_tick_veneer>
    89ee:	bf00      	nop
    89f0:	2001ce44 	.word	0x2001ce44
    89f4:	f3af 8000 	nop.w
    89f8:	f3af 8000 	nop.w
    89fc:	f3af 8000 	nop.w

00008a00 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    8a00:	4b03      	ldr	r3, [pc, #12]	; (8a10 <FXhighpassTick+0x10>)
    8a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a0a:	f001 bcc5 	b.w	a398 <__tSVF_tick_veneer>
    8a0e:	bf00      	nop
    8a10:	2001ce24 	.word	0x2001ce24
    8a14:	f3af 8000 	nop.w
    8a18:	f3af 8000 	nop.w
    8a1c:	f3af 8000 	nop.w

00008a20 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <FXbandpassTick+0x10>)
    8a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a2a:	f001 bcb5 	b.w	a398 <__tSVF_tick_veneer>
    8a2e:	bf00      	nop
    8a30:	2001cde4 	.word	0x2001cde4
    8a34:	f3af 8000 	nop.w
    8a38:	f3af 8000 	nop.w
    8a3c:	f3af 8000 	nop.w

00008a40 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    8a40:	4b03      	ldr	r3, [pc, #12]	; (8a50 <FXdiodeLowpassTick+0x10>)
    8a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a4a:	f001 bcc9 	b.w	a3e0 <__tDiodeFilter_tick_veneer>
    8a4e:	bf00      	nop
    8a50:	2001ce04 	.word	0x2001ce04
    8a54:	f3af 8000 	nop.w
    8a58:	f3af 8000 	nop.w
    8a5c:	f3af 8000 	nop.w

00008a60 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    8a60:	4b03      	ldr	r3, [pc, #12]	; (8a70 <FXVZpeakTick+0x10>)
    8a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a6a:	f001 bb99 	b.w	a1a0 <__tVZFilterBell_tick_veneer>
    8a6e:	bf00      	nop
    8a70:	2001cdc4 	.word	0x2001cdc4
    8a74:	f3af 8000 	nop.w
    8a78:	f3af 8000 	nop.w
    8a7c:	f3af 8000 	nop.w

00008a80 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    8a80:	4b03      	ldr	r3, [pc, #12]	; (8a90 <FXVZlowshelfTick+0x10>)
    8a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a8a:	f001 bbe9 	b.w	a260 <__tVZFilterLS_tick_veneer>
    8a8e:	bf00      	nop
    8a90:	2001cda4 	.word	0x2001cda4
    8a94:	f3af 8000 	nop.w
    8a98:	f3af 8000 	nop.w
    8a9c:	f3af 8000 	nop.w

00008aa0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    8aa0:	4b03      	ldr	r3, [pc, #12]	; (8ab0 <FXVZhighshelfTick+0x10>)
    8aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aaa:	f001 bbf9 	b.w	a2a0 <__tVZFilterHS_tick_veneer>
    8aae:	bf00      	nop
    8ab0:	2001cd84 	.word	0x2001cd84
    8ab4:	f3af 8000 	nop.w
    8ab8:	f3af 8000 	nop.w
    8abc:	f3af 8000 	nop.w

00008ac0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    8ac0:	4b03      	ldr	r3, [pc, #12]	; (8ad0 <FXVZbandrejectTick+0x10>)
    8ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aca:	f001 bae9 	b.w	a0a0 <__tVZFilter_tickEfficient_veneer>
    8ace:	bf00      	nop
    8ad0:	2001cd64 	.word	0x2001cd64
    8ad4:	f3af 8000 	nop.w
    8ad8:	f3af 8000 	nop.w
    8adc:	f3af 8000 	nop.w

00008ae0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    8ae0:	4b03      	ldr	r3, [pc, #12]	; (8af0 <FXLadderLowpassTick+0x10>)
    8ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aea:	f001 bd01 	b.w	a4f0 <__tLadderFilter_tick_veneer>
    8aee:	bf00      	nop
    8af0:	2001cd44 	.word	0x2001cd44
    8af4:	f3af 8000 	nop.w
    8af8:	f3af 8000 	nop.w
    8afc:	f3af 8000 	nop.w

00008b00 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8b00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8b20 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    8b04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8b08:	eddf 7a06 	vldr	s15, [pc, #24]	; 8b24 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    8b0c:	4b06      	ldr	r3, [pc, #24]	; (8b28 <FXLowpassParam1+0x28>)
    8b0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8b12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b16:	eeb0 0a67 	vmov.f32	s0, s15
    8b1a:	f001 bafd 	b.w	a118 <__tSVF_setFreqFast_veneer>
    8b1e:	bf00      	nop
    8b20:	429a0000 	.word	0x429a0000
    8b24:	42280000 	.word	0x42280000
    8b28:	2001ce44 	.word	0x2001ce44
    8b2c:	f3af 8000 	nop.w
    8b30:	f3af 8000 	nop.w
    8b34:	f3af 8000 	nop.w
    8b38:	f3af 8000 	nop.w
    8b3c:	f3af 8000 	nop.w

00008b40 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8b40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8b60 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    8b44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8b48:	eddf 7a06 	vldr	s15, [pc, #24]	; 8b64 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    8b4c:	4b06      	ldr	r3, [pc, #24]	; (8b68 <FXHighpassParam1+0x28>)
    8b4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8b52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b56:	eeb0 0a67 	vmov.f32	s0, s15
    8b5a:	f001 badd 	b.w	a118 <__tSVF_setFreqFast_veneer>
    8b5e:	bf00      	nop
    8b60:	429a0000 	.word	0x429a0000
    8b64:	42280000 	.word	0x42280000
    8b68:	2001ce24 	.word	0x2001ce24
    8b6c:	f3af 8000 	nop.w
    8b70:	f3af 8000 	nop.w
    8b74:	f3af 8000 	nop.w
    8b78:	f3af 8000 	nop.w
    8b7c:	f3af 8000 	nop.w

00008b80 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8b80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8ba0 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    8b84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8b88:	eddf 7a06 	vldr	s15, [pc, #24]	; 8ba4 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    8b8c:	4b06      	ldr	r3, [pc, #24]	; (8ba8 <FXBandpassParam1+0x28>)
    8b8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8b92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b96:	eeb0 0a67 	vmov.f32	s0, s15
    8b9a:	f001 babd 	b.w	a118 <__tSVF_setFreqFast_veneer>
    8b9e:	bf00      	nop
    8ba0:	429a0000 	.word	0x429a0000
    8ba4:	42280000 	.word	0x42280000
    8ba8:	2001cde4 	.word	0x2001cde4
    8bac:	f3af 8000 	nop.w
    8bb0:	f3af 8000 	nop.w
    8bb4:	f3af 8000 	nop.w
    8bb8:	f3af 8000 	nop.w
    8bbc:	f3af 8000 	nop.w

00008bc0 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8bc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8be0 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    8bc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8bc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8be4 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    8bcc:	4b06      	ldr	r3, [pc, #24]	; (8be8 <FXDiodeParam1+0x28>)
    8bce:	eee0 7a07 	vfma.f32	s15, s0, s14
    8bd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8bd6:	eeb0 0a67 	vmov.f32	s0, s15
    8bda:	f001 ba55 	b.w	a088 <__tDiodeFilter_setFreqFast_veneer>
    8bde:	bf00      	nop
    8be0:	429a0000 	.word	0x429a0000
    8be4:	42280000 	.word	0x42280000
    8be8:	2001ce04 	.word	0x2001ce04
    8bec:	f3af 8000 	nop.w
    8bf0:	f3af 8000 	nop.w
    8bf4:	f3af 8000 	nop.w
    8bf8:	f3af 8000 	nop.w
    8bfc:	f3af 8000 	nop.w

00008c00 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8c00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8c20 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    8c04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8c08:	eddf 7a06 	vldr	s15, [pc, #24]	; 8c24 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    8c0c:	4b06      	ldr	r3, [pc, #24]	; (8c28 <FXPeakParam1+0x28>)
    8c0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8c12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8c16:	eeb0 0a67 	vmov.f32	s0, s15
    8c1a:	f001 bcc5 	b.w	a5a8 <__tVZFilterBell_setFreq_veneer>
    8c1e:	bf00      	nop
    8c20:	429a0000 	.word	0x429a0000
    8c24:	42280000 	.word	0x42280000
    8c28:	2001cdc4 	.word	0x2001cdc4
    8c2c:	f3af 8000 	nop.w
    8c30:	f3af 8000 	nop.w
    8c34:	f3af 8000 	nop.w
    8c38:	f3af 8000 	nop.w
    8c3c:	f3af 8000 	nop.w

00008c40 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8c40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8c60 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    8c44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8c48:	eddf 7a06 	vldr	s15, [pc, #24]	; 8c64 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    8c4c:	4b06      	ldr	r3, [pc, #24]	; (8c68 <FXLowShelfParam1+0x28>)
    8c4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8c52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8c56:	eeb0 0a67 	vmov.f32	s0, s15
    8c5a:	f001 bc39 	b.w	a4d0 <__tVZFilterLS_setFreqFast_veneer>
    8c5e:	bf00      	nop
    8c60:	429a0000 	.word	0x429a0000
    8c64:	42280000 	.word	0x42280000
    8c68:	2001cda4 	.word	0x2001cda4
    8c6c:	f3af 8000 	nop.w
    8c70:	f3af 8000 	nop.w
    8c74:	f3af 8000 	nop.w
    8c78:	f3af 8000 	nop.w
    8c7c:	f3af 8000 	nop.w

00008c80 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8c80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8ca0 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    8c84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8c88:	eddf 7a06 	vldr	s15, [pc, #24]	; 8ca4 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    8c8c:	4b06      	ldr	r3, [pc, #24]	; (8ca8 <FXHighShelfParam1+0x28>)
    8c8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8c92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8c96:	eeb0 0a67 	vmov.f32	s0, s15
    8c9a:	f001 bbfd 	b.w	a498 <__tVZFilterHS_setFreqFast_veneer>
    8c9e:	bf00      	nop
    8ca0:	429a0000 	.word	0x429a0000
    8ca4:	42280000 	.word	0x42280000
    8ca8:	2001cd84 	.word	0x2001cd84
    8cac:	f3af 8000 	nop.w
    8cb0:	f3af 8000 	nop.w
    8cb4:	f3af 8000 	nop.w
    8cb8:	f3af 8000 	nop.w
    8cbc:	f3af 8000 	nop.w

00008cc0 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8cc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8ce0 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    8cc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8cc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8ce4 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    8ccc:	4b06      	ldr	r3, [pc, #24]	; (8ce8 <FXNotchParam1+0x28>)
    8cce:	eee0 7a07 	vfma.f32	s15, s0, s14
    8cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8cd6:	eeb0 0a67 	vmov.f32	s0, s15
    8cda:	f001 bb0d 	b.w	a2f8 <__tVZFilter_setFreqFast_veneer>
    8cde:	bf00      	nop
    8ce0:	429a0000 	.word	0x429a0000
    8ce4:	42280000 	.word	0x42280000
    8ce8:	2001cd64 	.word	0x2001cd64
    8cec:	f3af 8000 	nop.w
    8cf0:	f3af 8000 	nop.w
    8cf4:	f3af 8000 	nop.w
    8cf8:	f3af 8000 	nop.w
    8cfc:	f3af 8000 	nop.w

00008d00 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8d00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8d20 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    8d04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8d08:	eddf 7a06 	vldr	s15, [pc, #24]	; 8d24 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    8d0c:	4b06      	ldr	r3, [pc, #24]	; (8d28 <FXLadderParam1+0x28>)
    8d0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8d12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d16:	eeb0 0a67 	vmov.f32	s0, s15
    8d1a:	f001 b9e1 	b.w	a0e0 <__tLadderFilter_setFreqFast_veneer>
    8d1e:	bf00      	nop
    8d20:	429a0000 	.word	0x429a0000
    8d24:	42280000 	.word	0x42280000
    8d28:	2001cd44 	.word	0x2001cd44
    8d2c:	f3af 8000 	nop.w
    8d30:	f3af 8000 	nop.w
    8d34:	f3af 8000 	nop.w
    8d38:	f3af 8000 	nop.w
    8d3c:	f3af 8000 	nop.w

00008d40 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8d44:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8d6c <FXPeakParam2+0x2c>
{
    8d48:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8d4e:	4605      	mov	r5, r0
    8d50:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d52:	eeb0 0a67 	vmov.f32	s0, s15
    8d56:	f001 fb47 	bl	a3e8 <__dbToATableLookup_veneer>
    8d5a:	4b05      	ldr	r3, [pc, #20]	; (8d70 <FXPeakParam2+0x30>)
    8d5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8d60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d68:	f001 bbee 	b.w	a548 <__tVZFilterBell_setGain_veneer>
    8d6c:	42480000 	.word	0x42480000
    8d70:	2001cdc4 	.word	0x2001cdc4
    8d74:	f3af 8000 	nop.w
    8d78:	f3af 8000 	nop.w
    8d7c:	f3af 8000 	nop.w

00008d80 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8d84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8dac <FXLowShelfParam2+0x2c>
{
    8d88:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8d8e:	4605      	mov	r5, r0
    8d90:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8d92:	eeb0 0a67 	vmov.f32	s0, s15
    8d96:	f001 fb27 	bl	a3e8 <__dbToATableLookup_veneer>
    8d9a:	4b05      	ldr	r3, [pc, #20]	; (8db0 <FXLowShelfParam2+0x30>)
    8d9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8da8:	f001 bba6 	b.w	a4f8 <__tVZFilterLS_setGain_veneer>
    8dac:	42480000 	.word	0x42480000
    8db0:	2001cda4 	.word	0x2001cda4
    8db4:	f3af 8000 	nop.w
    8db8:	f3af 8000 	nop.w
    8dbc:	f3af 8000 	nop.w

00008dc0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8dc0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8dc4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8dec <FXHighShelfParam2+0x2c>
{
    8dc8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8dca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8dce:	4605      	mov	r5, r0
    8dd0:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8dd2:	eeb0 0a67 	vmov.f32	s0, s15
    8dd6:	f001 fb07 	bl	a3e8 <__dbToATableLookup_veneer>
    8dda:	4b05      	ldr	r3, [pc, #20]	; (8df0 <FXHighShelfParam2+0x30>)
    8ddc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8de0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8de8:	f001 b9a6 	b.w	a138 <__tVZFilterHS_setGain_veneer>
    8dec:	42480000 	.word	0x42480000
    8df0:	2001cd84 	.word	0x2001cd84
    8df4:	f3af 8000 	nop.w
    8df8:	f3af 8000 	nop.w
    8dfc:	f3af 8000 	nop.w

00008e00 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8e00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8e04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8e2c <FXNotchParam2+0x2c>
{
    8e08:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8e0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8e0e:	4605      	mov	r5, r0
    8e10:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8e12:	eeb0 0a67 	vmov.f32	s0, s15
    8e16:	f001 fae7 	bl	a3e8 <__dbToATableLookup_veneer>
    8e1a:	4b05      	ldr	r3, [pc, #20]	; (8e30 <FXNotchParam2+0x30>)
    8e1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8e20:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    8e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8e28:	f001 bb4e 	b.w	a4c8 <__tVZFilter_setGain_veneer>
    8e2c:	42480000 	.word	0x42480000
    8e30:	2001cd64 	.word	0x2001cd64
    8e34:	f3af 8000 	nop.w
    8e38:	f3af 8000 	nop.w
    8e3c:	f3af 8000 	nop.w

00008e40 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    8e40:	4b03      	ldr	r3, [pc, #12]	; (8e50 <FXLowpassParam3+0x10>)
    8e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e4a:	f001 ba4d 	b.w	a2e8 <__tSVF_setQ_veneer>
    8e4e:	bf00      	nop
    8e50:	2001ce44 	.word	0x2001ce44
    8e54:	f3af 8000 	nop.w
    8e58:	f3af 8000 	nop.w
    8e5c:	f3af 8000 	nop.w

00008e60 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    8e60:	4b03      	ldr	r3, [pc, #12]	; (8e70 <FXHighpassParam3+0x10>)
    8e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e6a:	f001 ba3d 	b.w	a2e8 <__tSVF_setQ_veneer>
    8e6e:	bf00      	nop
    8e70:	2001ce24 	.word	0x2001ce24
    8e74:	f3af 8000 	nop.w
    8e78:	f3af 8000 	nop.w
    8e7c:	f3af 8000 	nop.w

00008e80 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    8e80:	4b03      	ldr	r3, [pc, #12]	; (8e90 <FXBandpassParam3+0x10>)
    8e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e8a:	f001 ba2d 	b.w	a2e8 <__tSVF_setQ_veneer>
    8e8e:	bf00      	nop
    8e90:	2001cde4 	.word	0x2001cde4
    8e94:	f3af 8000 	nop.w
    8e98:	f3af 8000 	nop.w
    8e9c:	f3af 8000 	nop.w

00008ea0 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    8ea0:	4b03      	ldr	r3, [pc, #12]	; (8eb0 <FXDiodeParam3+0x10>)
    8ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8eaa:	f001 b981 	b.w	a1b0 <__tDiodeFilter_setQ_veneer>
    8eae:	bf00      	nop
    8eb0:	2001ce04 	.word	0x2001ce04
    8eb4:	f3af 8000 	nop.w
    8eb8:	f3af 8000 	nop.w
    8ebc:	f3af 8000 	nop.w

00008ec0 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    8ec0:	4b03      	ldr	r3, [pc, #12]	; (8ed0 <FXPeakParam3+0x10>)
    8ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8eca:	f001 b8cd 	b.w	a068 <__tVZFilterBell_setBandwidth_veneer>
    8ece:	bf00      	nop
    8ed0:	2001cdc4 	.word	0x2001cdc4
    8ed4:	f3af 8000 	nop.w
    8ed8:	f3af 8000 	nop.w
    8edc:	f3af 8000 	nop.w

00008ee0 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    8ee0:	4b03      	ldr	r3, [pc, #12]	; (8ef0 <FXLowShelfParam3+0x10>)
    8ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8eea:	f001 b921 	b.w	a130 <__tVZFilterLS_setResonance_veneer>
    8eee:	bf00      	nop
    8ef0:	2001cda4 	.word	0x2001cda4
    8ef4:	f3af 8000 	nop.w
    8ef8:	f3af 8000 	nop.w
    8efc:	f3af 8000 	nop.w

00008f00 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    8f00:	4b03      	ldr	r3, [pc, #12]	; (8f10 <FXHighShelfParam3+0x10>)
    8f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f0a:	f001 bb39 	b.w	a580 <__tVZFilterHS_setResonance_veneer>
    8f0e:	bf00      	nop
    8f10:	2001cd84 	.word	0x2001cd84
    8f14:	f3af 8000 	nop.w
    8f18:	f3af 8000 	nop.w
    8f1c:	f3af 8000 	nop.w

00008f20 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    8f20:	4b03      	ldr	r3, [pc, #12]	; (8f30 <FXNotchParam3+0x10>)
    8f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f2a:	f001 bb01 	b.w	a530 <__tVZFilter_setResonance_veneer>
    8f2e:	bf00      	nop
    8f30:	2001cd64 	.word	0x2001cd64
    8f34:	f3af 8000 	nop.w
    8f38:	f3af 8000 	nop.w
    8f3c:	f3af 8000 	nop.w

00008f40 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    8f40:	4b03      	ldr	r3, [pc, #12]	; (8f50 <FXLadderParam3+0x10>)
    8f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f4a:	f001 baa1 	b.w	a490 <__tLadderFilter_setQ_veneer>
    8f4e:	bf00      	nop
    8f50:	2001cd44 	.word	0x2001cd44
    8f54:	f3af 8000 	nop.w
    8f58:	f3af 8000 	nop.w
    8f5c:	f3af 8000 	nop.w

00008f60 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    8f60:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8f62:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    8f66:	008c      	lsls	r4, r1, #2
{
    8f68:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8f6c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    8f70:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8f74:	eee0 7a68 	vfms.f32	s15, s0, s17
    8f78:	eeb0 0a67 	vmov.f32	s0, s15
    8f7c:	f001 fa34 	bl	a3e8 <__dbToATableLookup_veneer>
    8f80:	4808      	ldr	r0, [pc, #32]	; (8fa4 <noiseSetTilt+0x44>)
    8f82:	4420      	add	r0, r4
    8f84:	f001 fab8 	bl	a4f8 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8f88:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    8f8c:	eea8 0a28 	vfma.f32	s0, s16, s17
    8f90:	f001 fa2a 	bl	a3e8 <__dbToATableLookup_veneer>
    8f94:	4804      	ldr	r0, [pc, #16]	; (8fa8 <noiseSetTilt+0x48>)
}
    8f96:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8f9a:	4420      	add	r0, r4
}
    8f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8fa0:	f001 b8ca 	b.w	a138 <__tVZFilterHS_setGain_veneer>
    8fa4:	2001d4d0 	.word	0x2001d4d0
    8fa8:	2001d4d8 	.word	0x2001d4d8
    8fac:	f3af 8000 	nop.w
    8fb0:	f3af 8000 	nop.w
    8fb4:	f3af 8000 	nop.w
    8fb8:	f3af 8000 	nop.w
    8fbc:	f3af 8000 	nop.w

00008fc0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8fc0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    8fc4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8fe8 <noiseSetGain+0x28>
{
    8fc8:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8fca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8fce:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8fd0:	eeb0 0a67 	vmov.f32	s0, s15
    8fd4:	f001 fa08 	bl	a3e8 <__dbToATableLookup_veneer>
    8fd8:	4804      	ldr	r0, [pc, #16]	; (8fec <noiseSetGain+0x2c>)
    8fda:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    8fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8fe2:	f001 bab1 	b.w	a548 <__tVZFilterBell_setGain_veneer>
    8fe6:	bf00      	nop
    8fe8:	42080000 	.word	0x42080000
    8fec:	2001d4b4 	.word	0x2001d4b4
    8ff0:	f3af 8000 	nop.w
    8ff4:	f3af 8000 	nop.w
    8ff8:	f3af 8000 	nop.w
    8ffc:	f3af 8000 	nop.w

00009000 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    9000:	ed9f 7a09 	vldr	s14, [pc, #36]	; 9028 <noiseSetFreq+0x28>
    9004:	eddf 7a09 	vldr	s15, [pc, #36]	; 902c <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    9008:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    900c:	b510      	push	{r4, lr}
    900e:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    9010:	eeb0 0a67 	vmov.f32	s0, s15
    9014:	f001 f850 	bl	a0b8 <__faster_mtof_veneer>
    9018:	4805      	ldr	r0, [pc, #20]	; (9030 <noiseSetFreq+0x30>)
    901a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    901e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    9022:	f001 bac1 	b.w	a5a8 <__tVZFilterBell_setFreq_veneer>
    9026:	bf00      	nop
    9028:	429a0000 	.word	0x429a0000
    902c:	42280000 	.word	0x42280000
    9030:	2001d4b4 	.word	0x2001d4b4
    9034:	f3af 8000 	nop.w
    9038:	f3af 8000 	nop.w
    903c:	f3af 8000 	nop.w

00009040 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    9040:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    9042:	4b25      	ldr	r3, [pc, #148]	; (90d8 <noise_tick+0x98>)
{
    9044:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    9046:	4d25      	ldr	r5, [pc, #148]	; (90dc <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    9048:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    904c:	4924      	ldr	r1, [pc, #144]	; (90e0 <noise_tick+0xa0>)
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    904e:	4825      	ldr	r0, [pc, #148]	; (90e4 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    9050:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    9052:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    9056:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    905a:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    905e:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    9062:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    9064:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    9068:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    906c:	3201      	adds	r2, #1
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    906e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    9072:	702a      	strb	r2, [r5, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    9074:	f001 f8f4 	bl	a260 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    9078:	00a5      	lsls	r5, r4, #2
    907a:	481b      	ldr	r0, [pc, #108]	; (90e8 <noise_tick+0xa8>)
    907c:	4428      	add	r0, r5
    907e:	f001 f90f 	bl	a2a0 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    9082:	481a      	ldr	r0, [pc, #104]	; (90ec <noise_tick+0xac>)
    9084:	4428      	add	r0, r5
    9086:	f001 f88b 	bl	a1a0 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    908a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    908e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 90f0 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    9092:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    9096:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    909a:	4b16      	ldr	r3, [pc, #88]	; (90f4 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    909c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    90a0:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    90a4:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    90a8:	4a13      	ldr	r2, [pc, #76]	; (90f8 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    90aa:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    90ac:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    90b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    90b4:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    90b8:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    90bc:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    90c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    90c4:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    90c8:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    90cc:	edc2 7a06 	vstr	s15, [r2, #24]
}
    90d0:	ecbd 8b04 	vpop	{d8-d9}
    90d4:	bd38      	pop	{r3, r4, r5, pc}
    90d6:	bf00      	nop
    90d8:	2001908c 	.word	0x2001908c
    90dc:	2001d640 	.word	0x2001d640
    90e0:	2001a214 	.word	0x2001a214
    90e4:	2001d4d0 	.word	0x2001d4d0
    90e8:	2001d4d8 	.word	0x2001d4d8
    90ec:	2001d4b4 	.word	0x2001d4b4
    90f0:	00000000 	.word	0x00000000
    90f4:	2001d4c0 	.word	0x2001d4c0
    90f8:	2001d730 	.word	0x2001d730
    90fc:	f3af 8000 	nop.w

00009100 <audioTickSynth>:
{
    9100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    9104:	4cbe      	ldr	r4, [pc, #760]	; (9400 <audioTickSynth+0x300>)
    9106:	4dbf      	ldr	r5, [pc, #764]	; (9404 <audioTickSynth+0x304>)
    9108:	f8df a37c 	ldr.w	sl, [pc, #892]	; 9488 <audioTickSynth+0x388>
    910c:	f8df b37c 	ldr.w	fp, [pc, #892]	; 948c <audioTickSynth+0x38c>
    9110:	f10a 0830 	add.w	r8, sl, #48	; 0x30
    9114:	f8df 9378 	ldr.w	r9, [pc, #888]	; 9490 <audioTickSynth+0x390>
{
    9118:	ed2d 8b06 	vpush	{d8-d10}
    911c:	b091      	sub	sp, #68	; 0x44
    911e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    9120:	6863      	ldr	r3, [r4, #4]
    9122:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    9124:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    9126:	f7fe fb5b 	bl	77e0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    912a:	6863      	ldr	r3, [r4, #4]
    912c:	4ab6      	ldr	r2, [pc, #728]	; (9408 <audioTickSynth+0x308>)
    912e:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    9130:	48b6      	ldr	r0, [pc, #728]	; (940c <audioTickSynth+0x30c>)
    9132:	462e      	mov	r6, r5
	timeMap = DWT->CYCCNT - tempCountMap;
    9134:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    9136:	6863      	ldr	r3, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    9138:	462c      	mov	r4, r5
	uint32_t tempSmoothing = DWT->CYCCNT;
    913a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    913c:	f001 f8a4 	bl	a288 <__tExpSmooth_tick_veneer>
    9140:	eef0 8a40 	vmov.f32	s17, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    9144:	4658      	mov	r0, fp
    9146:	f001 f89f 	bl	a288 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    914a:	f899 3000 	ldrb.w	r3, [r9]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    914e:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    9152:	b12b      	cbz	r3, 9160 <audioTickSynth+0x60>
    9154:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    9156:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    915a:	d001      	beq.n	9160 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    915c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    9160:	45c2      	cmp	sl, r8
    9162:	f10b 0b04 	add.w	fp, fp, #4
    9166:	f104 0408 	add.w	r4, r4, #8
    916a:	d1eb      	bne.n	9144 <audioTickSynth+0x44>
    916c:	f8df 8324 	ldr.w	r8, [pc, #804]	; 9494 <audioTickSynth+0x394>
    9170:	f8df a324 	ldr.w	sl, [pc, #804]	; 9498 <audioTickSynth+0x398>
    9174:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    9178:	4650      	mov	r0, sl
    917a:	f001 f885 	bl	a288 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    917e:	f899 3000 	ldrb.w	r3, [r9]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    9182:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    9186:	b12b      	cbz	r3, 9194 <audioTickSynth+0x94>
    9188:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    918a:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    918e:	d001      	beq.n	9194 <audioTickSynth+0x94>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    9190:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    9194:	45a0      	cmp	r8, r4
    9196:	f10a 0a04 	add.w	sl, sl, #4
    919a:	f105 0508 	add.w	r5, r5, #8
    919e:	d1eb      	bne.n	9178 <audioTickSynth+0x78>
	for (int v = 0; v < numStringsThisBoard; v++)
    91a0:	2b00      	cmp	r3, #0
    91a2:	f000 828d 	beq.w	96c0 <audioTickSynth+0x5c0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    91a6:	4a9a      	ldr	r2, [pc, #616]	; (9410 <audioTickSynth+0x310>)
	for (int v = 0; v < numStringsThisBoard; v++)
    91a8:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    91aa:	6812      	ldr	r2, [r2, #0]
    91ac:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    91b0:	d001      	beq.n	91b6 <audioTickSynth+0xb6>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    91b2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	float note[numStringsThisBoard];
    91b6:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    91b8:	f8df b244 	ldr.w	fp, [pc, #580]	; 9400 <audioTickSynth+0x300>
    91bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	float note[numStringsThisBoard];
    91be:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    91c0:	f8db 2004 	ldr.w	r2, [fp, #4]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    91c4:	ed9f 9a93 	vldr	s18, [pc, #588]	; 9414 <audioTickSynth+0x314>
	float note[numStringsThisBoard];
    91c8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    91cc:	1a52      	subs	r2, r2, r1
		float sample = 0.0f;
    91ce:	eef0 9a49 	vmov.f32	s19, s18
    91d2:	ed9f aa91 	vldr	s20, [pc, #580]	; 9418 <audioTickSynth+0x318>
	float note[numStringsThisBoard];
    91d6:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    91da:	4b90      	ldr	r3, [pc, #576]	; (941c <audioTickSynth+0x31c>)
    91dc:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    91de:	4b90      	ldr	r3, [pc, #576]	; (9420 <audioTickSynth+0x320>)
    91e0:	4a90      	ldr	r2, [pc, #576]	; (9424 <audioTickSynth+0x324>)
    91e2:	62bb      	str	r3, [r7, #40]	; 0x28
    91e4:	f8db 3004 	ldr.w	r3, [fp, #4]
    91e8:	623a      	str	r2, [r7, #32]
    91ea:	4a8f      	ldr	r2, [pc, #572]	; (9428 <audioTickSynth+0x328>)
    91ec:	607b      	str	r3, [r7, #4]
    91ee:	2300      	movs	r3, #0
    91f0:	61ba      	str	r2, [r7, #24]
    91f2:	4a8e      	ldr	r2, [pc, #568]	; (942c <audioTickSynth+0x32c>)
    91f4:	469a      	mov	sl, r3
    91f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    91f8:	627a      	str	r2, [r7, #36]	; 0x24
    91fa:	4a8d      	ldr	r2, [pc, #564]	; (9430 <audioTickSynth+0x330>)
    91fc:	f8c7 d014 	str.w	sp, [r7, #20]
    9200:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    9202:	4b8c      	ldr	r3, [pc, #560]	; (9434 <audioTickSynth+0x334>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    9204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    9206:	edd3 7a00 	vldr	s15, [r3]
    920a:	4b8b      	ldr	r3, [pc, #556]	; (9438 <audioTickSynth+0x338>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    920c:	4a8b      	ldr	r2, [pc, #556]	; (943c <audioTickSynth+0x33c>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    920e:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    9212:	4b8b      	ldr	r3, [pc, #556]	; (9440 <audioTickSynth+0x340>)
    9214:	440a      	add	r2, r1
		float sample = 0.0f;
    9216:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    921a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    921e:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    9222:	f8db 2004 	ldr.w	r2, [fp, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    9226:	ed93 8a00 	vldr	s16, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    922a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    922c:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    9230:	697b      	ldr	r3, [r7, #20]
    9232:	460d      	mov	r5, r1
    9234:	ee78 7a67 	vsub.f32	s15, s16, s15
    9238:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    923c:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
    9240:	eca3 8a01 	vstmia	r3!, {s16}
    9244:	617b      	str	r3, [r7, #20]
    9246:	ee67 7a87 	vmul.f32	s15, s15, s14
    924a:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    924e:	f8db 3004 	ldr.w	r3, [fp, #4]
    9252:	1a9b      	subs	r3, r3, r2
    9254:	4a7b      	ldr	r2, [pc, #492]	; (9444 <audioTickSynth+0x344>)
    9256:	6013      	str	r3, [r2, #0]
    9258:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    925a:	4b7b      	ldr	r3, [pc, #492]	; (9448 <audioTickSynth+0x348>)
    925c:	62ba      	str	r2, [r7, #40]	; 0x28
    925e:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    9260:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (envOn[v])
    9264:	2b00      	cmp	r3, #0
    9266:	f040 8206 	bne.w	9676 <audioTickSynth+0x576>
    926a:	4b77      	ldr	r3, [pc, #476]	; (9448 <audioTickSynth+0x348>)
    926c:	785b      	ldrb	r3, [r3, #1]
    926e:	2b00      	cmp	r3, #0
    9270:	f040 81f8 	bne.w	9664 <audioTickSynth+0x564>
    9274:	4b74      	ldr	r3, [pc, #464]	; (9448 <audioTickSynth+0x348>)
    9276:	789b      	ldrb	r3, [r3, #2]
    9278:	2b00      	cmp	r3, #0
    927a:	f040 81ea 	bne.w	9652 <audioTickSynth+0x552>
    927e:	4b72      	ldr	r3, [pc, #456]	; (9448 <audioTickSynth+0x348>)
    9280:	78db      	ldrb	r3, [r3, #3]
    9282:	2b00      	cmp	r3, #0
    9284:	f040 81dc 	bne.w	9640 <audioTickSynth+0x540>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    9288:	f8db 3004 	ldr.w	r3, [fp, #4]
    928c:	3d88      	subs	r5, #136	; 0x88
    928e:	4a6f      	ldr	r2, [pc, #444]	; (944c <audioTickSynth+0x34c>)
    9290:	1b1b      	subs	r3, r3, r4
    9292:	f8df 8208 	ldr.w	r8, [pc, #520]	; 949c <audioTickSynth+0x39c>
		uint32_t tempCountLFO = DWT->CYCCNT;
    9296:	4c6e      	ldr	r4, [pc, #440]	; (9450 <audioTickSynth+0x350>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    9298:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    929a:	f8db 6004 	ldr.w	r6, [fp, #4]
			float sample = 0.0f;
    929e:	4b6c      	ldr	r3, [pc, #432]	; (9450 <audioTickSynth+0x350>)
			lfoShapeTick[i](&sample,i, string);
    92a0:	4652      	mov	r2, sl
    92a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    92a6:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    92a8:	f814 3b01 	ldrb.w	r3, [r4], #1
    92ac:	b13b      	cbz	r3, 92be <audioTickSynth+0x1be>
			lfoShapeTick[i](&sample,i, string);
    92ae:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    92b2:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    92b6:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    92b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    92ba:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    92be:	4b65      	ldr	r3, [pc, #404]	; (9454 <audioTickSynth+0x354>)
    92c0:	f108 0804 	add.w	r8, r8, #4
    92c4:	3508      	adds	r5, #8
    92c6:	429c      	cmp	r4, r3
    92c8:	d1e9      	bne.n	929e <audioTickSynth+0x19e>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    92ca:	f8db 3004 	ldr.w	r3, [fp, #4]
		oscillator_tick(note[v], v);
    92ce:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    92d2:	4a61      	ldr	r2, [pc, #388]	; (9458 <audioTickSynth+0x358>)
		oscillator_tick(note[v], v);
    92d4:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    92d6:	1b9b      	subs	r3, r3, r6
    92d8:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    92da:	f8db 4004 	ldr.w	r4, [fp, #4]
		oscillator_tick(note[v], v);
    92de:	f7fd fa2f 	bl	6740 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    92e2:	f8db 3004 	ldr.w	r3, [fp, #4]
    92e6:	4a5d      	ldr	r2, [pc, #372]	; (945c <audioTickSynth+0x35c>)
    92e8:	1b1b      	subs	r3, r3, r4
    92ea:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    92ec:	4b5c      	ldr	r3, [pc, #368]	; (9460 <audioTickSynth+0x360>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    92ee:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (noiseOn)
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	2b00      	cmp	r3, #0
    92f6:	f040 819f 	bne.w	9638 <audioTickSynth+0x538>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    92fa:	f8db 3004 	ldr.w	r3, [fp, #4]
    92fe:	4a59      	ldr	r2, [pc, #356]	; (9464 <audioTickSynth+0x364>)
    9300:	1b1b      	subs	r3, r3, r4
    9302:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    9304:	4b58      	ldr	r3, [pc, #352]	; (9468 <audioTickSynth+0x368>)
    9306:	781b      	ldrb	r3, [r3, #0]
    9308:	2b00      	cmp	r3, #0
    930a:	f000 81c9 	beq.w	96a0 <audioTickSynth+0x5a0>
			filterSamps[0] += oscOuts[0][i][v];
    930e:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    9310:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    9312:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    9316:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    931a:	d011      	beq.n	9340 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    931c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    9320:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    9322:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    9326:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    932a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    932e:	d007      	beq.n	9340 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    9330:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    9334:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    9338:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    933c:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    9340:	69bb      	ldr	r3, [r7, #24]
		sample = filter_tick(&filterSamps[0], note[v], v);
    9342:	eeb0 0a48 	vmov.f32	s0, s16
    9346:	4651      	mov	r1, sl
    9348:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    934c:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    9350:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    9354:	ee76 6a86 	vadd.f32	s13, s13, s12
    9358:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    935a:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    935e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    9362:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    9366:	f8db 4004 	ldr.w	r4, [fp, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    936a:	f7fd fcb9 	bl	6ce0 <filter_tick>
    936e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    9372:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    9376:	f8db 3004 	ldr.w	r3, [fp, #4]
    937a:	4a3c      	ldr	r2, [pc, #240]	; (946c <audioTickSynth+0x36c>)
    937c:	1b1b      	subs	r3, r3, r4
    937e:	6013      	str	r3, [r2, #0]
		if (fxPre)
    9380:	4b3b      	ldr	r3, [pc, #236]	; (9470 <audioTickSynth+0x370>)
    9382:	781b      	ldrb	r3, [r3, #0]
    9384:	b133      	cbz	r3, 9394 <audioTickSynth+0x294>
			sample *= amplitude[v];
    9386:	6a3b      	ldr	r3, [r7, #32]
    9388:	edd3 7a00 	vldr	s15, [r3]
    938c:	ee20 8a27 	vmul.f32	s16, s0, s15
    9390:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    9394:	4b37      	ldr	r3, [pc, #220]	; (9474 <audioTickSynth+0x374>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    9396:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    939a:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    939c:	f8db 3004 	ldr.w	r3, [fp, #4]
    93a0:	613b      	str	r3, [r7, #16]
		if (overSampled)
    93a2:	2c00      	cmp	r4, #0
    93a4:	f040 80fe 	bne.w	95a4 <audioTickSynth+0x4a4>
    93a8:	4a33      	ldr	r2, [pc, #204]	; (9478 <audioTickSynth+0x378>)
    93aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93ac:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 94a0 <audioTickSynth+0x3a0>
    93b0:	18d6      	adds	r6, r2, r3
    93b2:	4a32      	ldr	r2, [pc, #200]	; (947c <audioTickSynth+0x37c>)
    93b4:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    93b6:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    93ba:	eeb0 0a48 	vmov.f32	s0, s16
    93be:	4620      	mov	r0, r4
    93c0:	4651      	mov	r1, sl
				if (effectsActive[i])
    93c2:	b18b      	cbz	r3, 93e8 <audioTickSynth+0x2e8>
					sample = effectTick[i](sample, i, v); //run the effect
    93c4:	4b2e      	ldr	r3, [pc, #184]	; (9480 <audioTickSynth+0x380>)
    93c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    93ca:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    93cc:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    93d0:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    93d4:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    93d8:	ee60 7a27 	vmul.f32	s15, s0, s15
    93dc:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    93e0:	ee27 8a87 	vmul.f32	s16, s15, s14
    93e4:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    93e8:	3401      	adds	r4, #1
    93ea:	3608      	adds	r6, #8
    93ec:	3508      	adds	r5, #8
    93ee:	2c04      	cmp	r4, #4
    93f0:	d1e1      	bne.n	93b6 <audioTickSynth+0x2b6>
		timeOS = DWT->CYCCNT - tempCountOS;
    93f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    93f6:	693a      	ldr	r2, [r7, #16]
    93f8:	1a9b      	subs	r3, r3, r2
    93fa:	4a22      	ldr	r2, [pc, #136]	; (9484 <audioTickSynth+0x384>)
    93fc:	6013      	str	r3, [r2, #0]
    93fe:	e051      	b.n	94a4 <audioTickSynth+0x3a4>
    9400:	e0001000 	.word	0xe0001000
    9404:	2001d730 	.word	0x2001d730
    9408:	2001d890 	.word	0x2001d890
    940c:	2001444c 	.word	0x2001444c
    9410:	20014444 	.word	0x20014444
    9414:	00000000 	.word	0x00000000
    9418:	42fe0000 	.word	0x42fe0000
    941c:	2001d8a4 	.word	0x2001d8a4
    9420:	2001d7b8 	.word	0x2001d7b8
    9424:	2001ceb4 	.word	0x2001ceb4
    9428:	2001d4c0 	.word	0x2001d4c0
    942c:	2001d0f8 	.word	0x2001d0f8
    9430:	2001d514 	.word	0x2001d514
    9434:	20019074 	.word	0x20019074
    9438:	20019070 	.word	0x20019070
    943c:	2001441c 	.word	0x2001441c
    9440:	20014414 	.word	0x20014414
    9444:	2001d888 	.word	0x2001d888
    9448:	2001d0f4 	.word	0x2001d0f4
    944c:	2001d880 	.word	0x2001d880
    9450:	2001d278 	.word	0x2001d278
    9454:	2001d27c 	.word	0x2001d27c
    9458:	2001d88c 	.word	0x2001d88c
    945c:	2001d89c 	.word	0x2001d89c
    9460:	2001d4bc 	.word	0x2001d4bc
    9464:	2001d894 	.word	0x2001d894
    9468:	20000ae8 	.word	0x20000ae8
    946c:	2001d884 	.word	0x2001d884
    9470:	200166b9 	.word	0x200166b9
    9474:	20000aec 	.word	0x20000aec
    9478:	2001d188 	.word	0x2001d188
    947c:	2001d1a8 	.word	0x2001d1a8
    9480:	2001d0e4 	.word	0x2001d0e4
    9484:	2001d898 	.word	0x2001d898
    9488:	200053e0 	.word	0x200053e0
    948c:	20005430 	.word	0x20005430
    9490:	20000694 	.word	0x20000694
    9494:	200054f4 	.word	0x200054f4
    9498:	2000551c 	.word	0x2000551c
    949c:	2001d2dc 	.word	0x2001d2dc
    94a0:	2001458c 	.word	0x2001458c
		if (!fxPre)
    94a4:	4b8c      	ldr	r3, [pc, #560]	; (96d8 <audioTickSynth+0x5d8>)
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	b933      	cbnz	r3, 94b8 <audioTickSynth+0x3b8>
			sample *= amplitude[v];
    94aa:	6a3b      	ldr	r3, [r7, #32]
    94ac:	edd3 7a00 	vldr	s15, [r3]
    94b0:	ee28 8a27 	vmul.f32	s16, s16, s15
    94b4:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    94b8:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    94ba:	eeb0 0a48 	vmov.f32	s0, s16
    94be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    94c0:	f10a 0a01 	add.w	sl, sl, #1
    94c4:	3304      	adds	r3, #4
    94c6:	623b      	str	r3, [r7, #32]
    94c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94ca:	3304      	adds	r3, #4
    94cc:	627b      	str	r3, [r7, #36]	; 0x24
    94ce:	69fb      	ldr	r3, [r7, #28]
    94d0:	3304      	adds	r3, #4
    94d2:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    94d4:	4b81      	ldr	r3, [pc, #516]	; (96dc <audioTickSynth+0x5dc>)
    94d6:	1918      	adds	r0, r3, r4
    94d8:	f000 ff5e 	bl	a398 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    94dc:	4b80      	ldr	r3, [pc, #512]	; (96e0 <audioTickSynth+0x5e0>)
    94de:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    94e2:	1d23      	adds	r3, r4, #4
    94e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample;// * finalMaster[v];
    94e6:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    94ea:	f899 3000 	ldrb.w	r3, [r9]
    94ee:	4553      	cmp	r3, sl
    94f0:	f73f ae87 	bgt.w	9202 <audioTickSynth+0x102>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    94f4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 96e4 <audioTickSynth+0x5e4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    94f8:	4b7b      	ldr	r3, [pc, #492]	; (96e8 <audioTickSynth+0x5e8>)
    94fa:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    94fc:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    9500:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    9502:	eddf 7a7a 	vldr	s15, [pc, #488]	; 96ec <audioTickSynth+0x5ec>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    9506:	1a5b      	subs	r3, r3, r1
    9508:	4a79      	ldr	r2, [pc, #484]	; (96f0 <audioTickSynth+0x5f0>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    950a:	eee8 0aa7 	vfma.f32	s1, s17, s15
    950e:	ed9f 1a79 	vldr	s2, [pc, #484]	; 96f4 <audioTickSynth+0x5f4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    9512:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    9514:	f000 fe5c 	bl	a1d0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    9518:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    951c:	4a76      	ldr	r2, [pc, #472]	; (96f8 <audioTickSynth+0x5f8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    951e:	4b77      	ldr	r3, [pc, #476]	; (96fc <audioTickSynth+0x5fc>)
	if (pedalControlsMaster)
    9520:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    9522:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    9526:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9528:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    952c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9530:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    9534:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9538:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    953c:	b178      	cbz	r0, 955e <audioTickSynth+0x45e>
	float omAlpha = 1.0f - alpha;
    953e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    9542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    9546:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    954a:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    954e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9552:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    9556:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    955a:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    955e:	eddf 7a68 	vldr	s15, [pc, #416]	; 9700 <audioTickSynth+0x600>
    9562:	eeb4 9ae7 	vcmpe.f32	s18, s15
    9566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    956a:	f340 808b 	ble.w	9684 <audioTickSynth+0x584>
		masterSample  = .999999f;
    956e:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    9572:	4b64      	ldr	r3, [pc, #400]	; (9704 <audioTickSynth+0x604>)
    9574:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9578:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    957a:	4963      	ldr	r1, [pc, #396]	; (9708 <audioTickSynth+0x608>)
	timeTick = DWT->CYCCNT - tempCountTick;
    957c:	4b5a      	ldr	r3, [pc, #360]	; (96e8 <audioTickSynth+0x5e8>)
	return masterSample * audioMasterLevel * 0.98f;
    957e:	eddf 7a63 	vldr	s15, [pc, #396]	; 970c <audioTickSynth+0x60c>
	timeTick = DWT->CYCCNT - tempCountTick;
    9582:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    9584:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    9588:	68b9      	ldr	r1, [r7, #8]
}
    958a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    958c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    9590:	4a5f      	ldr	r2, [pc, #380]	; (9710 <audioTickSynth+0x610>)
    9592:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    9594:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    9598:	6013      	str	r3, [r2, #0]
}
    959a:	46bd      	mov	sp, r7
    959c:	ecbd 8b06 	vpop	{d8-d10}
    95a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    95a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
    95aa:	485a      	ldr	r0, [pc, #360]	; (9714 <audioTickSynth+0x614>)
			for (int i = 0; i < 4; i++)
    95ac:	2400      	movs	r4, #0
    95ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    95b2:	f8df 818c 	ldr.w	r8, [pc, #396]	; 9740 <audioTickSynth+0x640>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    95b6:	4410      	add	r0, r2
    95b8:	603a      	str	r2, [r7, #0]
    95ba:	4a57      	ldr	r2, [pc, #348]	; (9718 <audioTickSynth+0x618>)
    95bc:	18d6      	adds	r6, r2, r3
    95be:	4a57      	ldr	r2, [pc, #348]	; (971c <audioTickSynth+0x61c>)
    95c0:	18d5      	adds	r5, r2, r3
    95c2:	2301      	movs	r3, #1
    95c4:	4a56      	ldr	r2, [pc, #344]	; (9720 <audioTickSynth+0x620>)
    95c6:	f000 ff9b 	bl	a500 <__arm_fir_interpolate_f32_veneer>
    95ca:	4651      	mov	r1, sl
    95cc:	46b2      	mov	sl, r6
    95ce:	462e      	mov	r6, r5
				if (effectsActive[i])
    95d0:	f818 3b01 	ldrb.w	r3, [r8], #1
    95d4:	b993      	cbnz	r3, 95fc <audioTickSynth+0x4fc>
			for (int i = 0; i < 4; i++)
    95d6:	3401      	adds	r4, #1
    95d8:	f10a 0a08 	add.w	sl, sl, #8
    95dc:	3608      	adds	r6, #8
    95de:	2c04      	cmp	r4, #4
    95e0:	d1f6      	bne.n	95d0 <audioTickSynth+0x4d0>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    95e2:	683b      	ldr	r3, [r7, #0]
    95e4:	468a      	mov	sl, r1
    95e6:	484f      	ldr	r0, [pc, #316]	; (9724 <audioTickSynth+0x624>)
    95e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
    95ec:	494c      	ldr	r1, [pc, #304]	; (9720 <audioTickSynth+0x620>)
    95ee:	4418      	add	r0, r3
    95f0:	2302      	movs	r3, #2
    95f2:	f000 fe31 	bl	a258 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    95f6:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    95fa:	e6fa      	b.n	93f2 <audioTickSynth+0x2f2>
    95fc:	4d48      	ldr	r5, [pc, #288]	; (9720 <audioTickSynth+0x620>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    95fe:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    9602:	4620      	mov	r0, r4
    9604:	4b48      	ldr	r3, [pc, #288]	; (9728 <audioTickSynth+0x628>)
    9606:	eeb0 0a48 	vmov.f32	s0, s16
    960a:	60f9      	str	r1, [r7, #12]
    960c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    9610:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    9612:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    9616:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    961a:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    961e:	4b43      	ldr	r3, [pc, #268]	; (972c <audioTickSynth+0x62c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    9620:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    9624:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    9626:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    962a:	ee67 7a00 	vmul.f32	s15, s14, s0
    962e:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    9632:	42ab      	cmp	r3, r5
    9634:	d1e3      	bne.n	95fe <audioTickSynth+0x4fe>
    9636:	e7ce      	b.n	95d6 <audioTickSynth+0x4d6>
			noise_tick(v);
    9638:	4650      	mov	r0, sl
    963a:	f7ff fd01 	bl	9040 <noise_tick>
    963e:	e65c      	b.n	92fa <audioTickSynth+0x1fa>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    9640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9642:	f103 0018 	add.w	r0, r3, #24
    9646:	f000 ff2f 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    964c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    9650:	e61a      	b.n	9288 <audioTickSynth+0x188>
    9652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9654:	f103 0010 	add.w	r0, r3, #16
    9658:	f000 ff26 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    965e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    9662:	e60c      	b.n	927e <audioTickSynth+0x17e>
    9664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9666:	f103 0008 	add.w	r0, r3, #8
    966a:	f000 ff1d 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9670:	ed83 0a07 	vstr	s0, [r3, #28]
    9674:	e5fe      	b.n	9274 <audioTickSynth+0x174>
    9676:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9678:	f000 ff16 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
    967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    967e:	ed83 0a05 	vstr	s0, [r3, #20]
    9682:	e5f2      	b.n	926a <audioTickSynth+0x16a>
	else if (masterSample < -.999999f)
    9684:	eddf 7a2a 	vldr	s15, [pc, #168]	; 9730 <audioTickSynth+0x630>
    9688:	eeb4 9ae7 	vcmpe.f32	s18, s15
    968c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9690:	d50b      	bpl.n	96aa <audioTickSynth+0x5aa>
		sampleClippedCountdown = 65535;
    9692:	4b1c      	ldr	r3, [pc, #112]	; (9704 <audioTickSynth+0x604>)
    9694:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    9698:	ed9f 9a26 	vldr	s18, [pc, #152]	; 9734 <audioTickSynth+0x634>
		sampleClippedCountdown = 65535;
    969c:	801a      	strh	r2, [r3, #0]
    969e:	e76c      	b.n	957a <audioTickSynth+0x47a>
		for (int i = 0; i < oscToTick; i++)
    96a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 9738 <audioTickSynth+0x638>
    96a4:	eeb0 6a67 	vmov.f32	s12, s15
    96a8:	e64a      	b.n	9340 <audioTickSynth+0x240>
		if (sampleClippedCountdown > 0)
    96aa:	4a16      	ldr	r2, [pc, #88]	; (9704 <audioTickSynth+0x604>)
    96ac:	8813      	ldrh	r3, [r2, #0]
    96ae:	b29b      	uxth	r3, r3
    96b0:	2b00      	cmp	r3, #0
    96b2:	f43f af62 	beq.w	957a <audioTickSynth+0x47a>
			sampleClippedCountdown--;
    96b6:	8813      	ldrh	r3, [r2, #0]
    96b8:	3b01      	subs	r3, #1
    96ba:	b29b      	uxth	r3, r3
    96bc:	8013      	strh	r3, [r2, #0]
    96be:	e75c      	b.n	957a <audioTickSynth+0x47a>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    96c0:	4a09      	ldr	r2, [pc, #36]	; (96e8 <audioTickSynth+0x5e8>)
    96c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96c4:	6853      	ldr	r3, [r2, #4]
    96c6:	491d      	ldr	r1, [pc, #116]	; (973c <audioTickSynth+0x63c>)
    96c8:	1a1b      	subs	r3, r3, r0
	float masterSample = 0.0f;
    96ca:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 9738 <audioTickSynth+0x638>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    96ce:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    96d0:	6853      	ldr	r3, [r2, #4]
    96d2:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    96d4:	e70e      	b.n	94f4 <audioTickSynth+0x3f4>
    96d6:	bf00      	nop
    96d8:	200166b9 	.word	0x200166b9
    96dc:	2001d160 	.word	0x2001d160
    96e0:	20000690 	.word	0x20000690
    96e4:	423c0000 	.word	0x423c0000
    96e8:	e0001000 	.word	0xe0001000
    96ec:	42a00000 	.word	0x42a00000
    96f0:	2001d8a0 	.word	0x2001d8a0
    96f4:	42fe0000 	.word	0x42fe0000
    96f8:	2001a19c 	.word	0x2001a19c
    96fc:	200006a0 	.word	0x200006a0
    9700:	3f7fffef 	.word	0x3f7fffef
    9704:	2000596a 	.word	0x2000596a
    9708:	200008a8 	.word	0x200008a8
    970c:	3f7ae148 	.word	0x3f7ae148
    9710:	2001d8a8 	.word	0x2001d8a8
    9714:	2001d4f8 	.word	0x2001d4f8
    9718:	2001d188 	.word	0x2001d188
    971c:	2001d1a8 	.word	0x2001d1a8
    9720:	2001d544 	.word	0x2001d544
    9724:	2001d4e0 	.word	0x2001d4e0
    9728:	2001d0e4 	.word	0x2001d0e4
    972c:	2001d54c 	.word	0x2001d54c
    9730:	bf7fffef 	.word	0xbf7fffef
    9734:	bf7ffffe 	.word	0xbf7ffffe
    9738:	00000000 	.word	0x00000000
    973c:	2001d8a4 	.word	0x2001d8a4
    9740:	2001458c 	.word	0x2001458c
    9744:	f3af 8000 	nop.w
    9748:	f3af 8000 	nop.w
    974c:	f3af 8000 	nop.w
    9750:	f3af 8000 	nop.w
    9754:	f3af 8000 	nop.w
    9758:	f3af 8000 	nop.w
    975c:	f3af 8000 	nop.w

00009760 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    9760:	4bab      	ldr	r3, [pc, #684]	; (9a10 <audioFrameSynth+0x2b0>)
{
    9762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    9766:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9a74 <audioFrameSynth+0x314>
{
    976a:	4607      	mov	r7, r0
    976c:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9770:	685b      	ldr	r3, [r3, #4]
{
    9772:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    9774:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    9776:	f899 3000 	ldrb.w	r3, [r9]
    977a:	2b00      	cmp	r3, #0
    977c:	f040 808a 	bne.w	9894 <audioFrameSynth+0x134>
    9780:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 9a78 <audioFrameSynth+0x318>
	if (newPluck)
    9784:	f8d8 3000 	ldr.w	r3, [r8]
    9788:	2b00      	cmp	r3, #0
    978a:	d03a      	beq.n	9802 <audioFrameSynth+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    978c:	4ea1      	ldr	r6, [pc, #644]	; (9a14 <audioFrameSynth+0x2b4>)
    978e:	7833      	ldrb	r3, [r6, #0]
    9790:	2b00      	cmp	r3, #0
    9792:	d033      	beq.n	97fc <audioFrameSynth+0x9c>
    9794:	4aa0      	ldr	r2, [pc, #640]	; (9a18 <audioFrameSynth+0x2b8>)
    9796:	2500      	movs	r5, #0
    9798:	49a0      	ldr	r1, [pc, #640]	; (9a1c <audioFrameSynth+0x2bc>)
    979a:	9702      	str	r7, [sp, #8]
    979c:	9603      	str	r6, [sp, #12]
    979e:	460f      	mov	r7, r1
				float amplitz = stringInputs[i] * 0.000015259021897f;
    97a0:	eddf 8a9f 	vldr	s17, [pc, #636]	; 9a20 <audioFrameSynth+0x2c0>
    97a4:	4616      	mov	r6, r2
    97a6:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 9a7c <audioFrameSynth+0x31c>
    97aa:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 9a80 <audioFrameSynth+0x320>
    97ae:	4c9d      	ldr	r4, [pc, #628]	; (9a24 <audioFrameSynth+0x2c4>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    97b0:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    97b4:	b292      	uxth	r2, r2
    97b6:	b932      	cbnz	r2, 97c6 <audioFrameSynth+0x66>
    97b8:	4a9b      	ldr	r2, [pc, #620]	; (9a28 <audioFrameSynth+0x2c8>)
    97ba:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    97be:	b292      	uxth	r2, r2
    97c0:	2a00      	cmp	r2, #0
    97c2:	f040 8095 	bne.w	98f0 <audioFrameSynth+0x190>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    97c6:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    97ca:	b292      	uxth	r2, r2
    97cc:	b132      	cbz	r2, 97dc <audioFrameSynth+0x7c>
    97ce:	4a96      	ldr	r2, [pc, #600]	; (9a28 <audioFrameSynth+0x2c8>)
    97d0:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    97d4:	b292      	uxth	r2, r2
    97d6:	2a00      	cmp	r2, #0
    97d8:	f000 80f7 	beq.w	99ca <audioFrameSynth+0x26a>
			previousStringInputs[i] = stringInputs[i];
    97dc:	4a92      	ldr	r2, [pc, #584]	; (9a28 <audioFrameSynth+0x2c8>)
		for (int i = 0; i < numStringsThisBoard; i++)
    97de:	3604      	adds	r6, #4
    97e0:	f109 0904 	add.w	r9, r9, #4
    97e4:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    97e8:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    97ec:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    97ee:	b292      	uxth	r2, r2
    97f0:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    97f4:	3501      	adds	r5, #1
    97f6:	42ab      	cmp	r3, r5
    97f8:	dcda      	bgt.n	97b0 <audioFrameSynth+0x50>
    97fa:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    97fc:	2300      	movs	r3, #0
    97fe:	f8c8 3000 	str.w	r3, [r8]
    9802:	4c8a      	ldr	r4, [pc, #552]	; (9a2c <audioFrameSynth+0x2cc>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    9804:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 9a30 <audioFrameSynth+0x2d0>
    9808:	f504 7500 	add.w	r5, r4, #512	; 0x200
    980c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    9810:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    9814:	f7ff fc74 	bl	9100 <audioTickSynth>
    9818:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    981c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    981e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9822:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    9824:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9828:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    982c:	d1f2      	bne.n	9814 <audioFrameSynth+0xb4>
	if (switchStrings)
    982e:	4c81      	ldr	r4, [pc, #516]	; (9a34 <audioFrameSynth+0x2d4>)
    9830:	6823      	ldr	r3, [r4, #0]
    9832:	2b00      	cmp	r3, #0
    9834:	d150      	bne.n	98d8 <audioFrameSynth+0x178>
	switchStrings = 0;
    9836:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9838:	4b75      	ldr	r3, [pc, #468]	; (9a10 <audioFrameSynth+0x2b0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    983a:	4a7f      	ldr	r2, [pc, #508]	; (9a38 <audioFrameSynth+0x2d8>)
	switchStrings = 0;
    983c:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    983e:	9c01      	ldr	r4, [sp, #4]
    9840:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9842:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9846:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    9848:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 9a3c <audioFrameSynth+0x2dc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    984c:	497c      	ldr	r1, [pc, #496]	; (9a40 <audioFrameSynth+0x2e0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    984e:	ee07 3a90 	vmov	s15, r3
    9852:	4a7c      	ldr	r2, [pc, #496]	; (9a44 <audioFrameSynth+0x2e4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9854:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9856:	eef8 7a67 	vcvt.f32.u32	s15, s15
    985a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    985e:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9862:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    9866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    986a:	dd0e      	ble.n	988a <audioFrameSynth+0x12a>
		frameLoadOverCount++;
    986c:	4a76      	ldr	r2, [pc, #472]	; (9a48 <audioFrameSynth+0x2e8>)
    986e:	6813      	ldr	r3, [r2, #0]
    9870:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    9872:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    9874:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    9876:	d908      	bls.n	988a <audioFrameSynth+0x12a>
			if (overSampled == 1)
    9878:	4b74      	ldr	r3, [pc, #464]	; (9a4c <audioFrameSynth+0x2ec>)
    987a:	681a      	ldr	r2, [r3, #0]
    987c:	2a01      	cmp	r2, #1
    987e:	d02f      	beq.n	98e0 <audioFrameSynth+0x180>
			else if (oscToTick > 0)
    9880:	4a73      	ldr	r2, [pc, #460]	; (9a50 <audioFrameSynth+0x2f0>)
    9882:	7813      	ldrb	r3, [r2, #0]
    9884:	b10b      	cbz	r3, 988a <audioFrameSynth+0x12a>
				oscToTick--;
    9886:	3b01      	subs	r3, #1
    9888:	7013      	strb	r3, [r2, #0]
}
    988a:	b007      	add	sp, #28
    988c:	ecbd 8b04 	vpop	{d8-d9}
    9890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    9894:	4e5f      	ldr	r6, [pc, #380]	; (9a14 <audioFrameSynth+0x2b4>)
    9896:	7833      	ldrb	r3, [r6, #0]
    9898:	b1ab      	cbz	r3, 98c6 <audioFrameSynth+0x166>
    989a:	2500      	movs	r5, #0
    989c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 9a84 <audioFrameSynth+0x324>
    98a0:	4c60      	ldr	r4, [pc, #384]	; (9a24 <audioFrameSynth+0x2c4>)
				previousStringInputs[i] = 0;
    98a2:	46aa      	mov	sl, r5
    98a4:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    98a8:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    98aa:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    98ae:	f000 fea3 	bl	a5f8 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    98b2:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    98b6:	45c3      	cmp	fp, r8
    98b8:	d1f6      	bne.n	98a8 <audioFrameSynth+0x148>
		for (int i = 0; i < numStringsThisBoard; i++)
    98ba:	3501      	adds	r5, #1
    98bc:	7833      	ldrb	r3, [r6, #0]
    98be:	f108 0804 	add.w	r8, r8, #4
    98c2:	42ab      	cmp	r3, r5
    98c4:	dcee      	bgt.n	98a4 <audioFrameSynth+0x144>
		resetStringInputs = 0;
    98c6:	2300      	movs	r3, #0
		newPluck = 1;
    98c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 9a78 <audioFrameSynth+0x318>
		resetStringInputs = 0;
    98cc:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    98d0:	2301      	movs	r3, #1
    98d2:	f8c8 3000 	str.w	r3, [r8]
    98d6:	e755      	b.n	9784 <audioFrameSynth+0x24>
		switchStringModel(switchStrings);
    98d8:	6820      	ldr	r0, [r4, #0]
    98da:	f7f7 fde1 	bl	14a0 <switchStringModel>
    98de:	e7aa      	b.n	9836 <audioFrameSynth+0xd6>
				overSampled = 0;
    98e0:	6018      	str	r0, [r3, #0]
}
    98e2:	b007      	add	sp, #28
    98e4:	ecbd 8b04 	vpop	{d8-d9}
    98e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    98ec:	f000 bd44 	b.w	a378 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    98f0:	4b4d      	ldr	r3, [pc, #308]	; (9a28 <audioFrameSynth+0x2c8>)
    98f2:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    98f6:	f8df a178 	ldr.w	sl, [pc, #376]	; 9a70 <audioFrameSynth+0x310>
						if (useVelocity == 0) envVel = 1.f;
    98fa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    98fe:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    9902:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    9906:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9908:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    990a:	4655      	mov	r5, sl
    990c:	9405      	str	r4, [sp, #20]
    990e:	46ca      	mov	sl, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9910:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    9914:	4b4f      	ldr	r3, [pc, #316]	; (9a54 <audioFrameSynth+0x2f4>)
						voiceSounding = 1;
    9916:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9918:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	603b      	str	r3, [r7, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9920:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    9924:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    9928:	4650      	mov	r0, sl
					if (envOn[v])
    992a:	b16b      	cbz	r3, 9948 <audioFrameSynth+0x1e8>
						if (useVelocity == 0) envVel = 1.f;
    992c:	edd4 7a00 	vldr	s15, [r4]
    9930:	eef5 7a40 	vcmp.f32	s15, #0.0
    9934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    9938:	fe09 0a08 	vseleq.f32	s0, s18, s16
    993c:	f000 fd48 	bl	a3d0 <__tADSRT_on_veneer>
						voiceSounding = 1;
    9940:	2001      	movs	r0, #1
    9942:	4b45      	ldr	r3, [pc, #276]	; (9a58 <audioFrameSynth+0x2f8>)
    9944:	4945      	ldr	r1, [pc, #276]	; (9a5c <audioFrameSynth+0x2fc>)
    9946:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    9948:	42a9      	cmp	r1, r5
    994a:	f10a 0a08 	add.w	sl, sl, #8
    994e:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    9952:	d1e7      	bne.n	9924 <audioFrameSynth+0x1c4>
						if (noteOnSync > 0.5f)
    9954:	9d04      	ldr	r5, [sp, #16]
    9956:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    995a:	f8df a104 	ldr.w	sl, [pc, #260]	; 9a60 <audioFrameSynth+0x300>
    995e:	465c      	mov	r4, fp
    9960:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    9964:	009b      	lsls	r3, r3, #2
    9966:	330c      	adds	r3, #12
    9968:	9304      	str	r3, [sp, #16]
						if (noteOnSync > 0.5f)
    996a:	4b3d      	ldr	r3, [pc, #244]	; (9a60 <audioFrameSynth+0x300>)
    996c:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    9970:	f81a 3b01 	ldrb.w	r3, [sl], #1
    9974:	b163      	cbz	r3, 9990 <audioFrameSynth+0x230>
						if (noteOnSync > 0.5f)
    9976:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    997a:	eef4 7ac9 	vcmpe.f32	s15, s18
    997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9982:	dd05      	ble.n	9990 <audioFrameSynth+0x230>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    9984:	9b04      	ldr	r3, [sp, #16]
    9986:	4629      	mov	r1, r5
    9988:	ed94 0a00 	vldr	s0, [r4]
    998c:	58e3      	ldr	r3, [r4, r3]
    998e:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    9990:	4b34      	ldr	r3, [pc, #208]	; (9a64 <audioFrameSynth+0x304>)
    9992:	348c      	adds	r4, #140	; 0x8c
    9994:	4553      	cmp	r3, sl
    9996:	d1e8      	bne.n	996a <audioFrameSynth+0x20a>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    9998:	4833      	ldr	r0, [pc, #204]	; (9a68 <audioFrameSynth+0x308>)
    999a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    999e:	4933      	ldr	r1, [pc, #204]	; (9a6c <audioFrameSynth+0x30c>)
    99a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    99a4:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    99a6:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    99a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    99ac:	3201      	adds	r2, #1
    99ae:	9c05      	ldr	r4, [sp, #20]
    99b0:	edd1 7a00 	vldr	s15, [r1]
		for (int i = 0; i < numStringsThisBoard; i++)
    99b4:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    99b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    99ba:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    99be:	7002      	strb	r2, [r0, #0]
    99c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    99c4:	edc6 7a02 	vstr	s15, [r6, #8]
			{
    99c8:	e708      	b.n	97dc <audioFrameSynth+0x7c>
					if (envOn[v])
    99ca:	4b29      	ldr	r3, [pc, #164]	; (9a70 <audioFrameSynth+0x310>)
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	b95b      	cbnz	r3, 99e8 <audioFrameSynth+0x288>
    99d0:	4b27      	ldr	r3, [pc, #156]	; (9a70 <audioFrameSynth+0x310>)
    99d2:	785b      	ldrb	r3, [r3, #1]
    99d4:	b9b3      	cbnz	r3, 9a04 <audioFrameSynth+0x2a4>
    99d6:	4b26      	ldr	r3, [pc, #152]	; (9a70 <audioFrameSynth+0x310>)
    99d8:	789b      	ldrb	r3, [r3, #2]
    99da:	b973      	cbnz	r3, 99fa <audioFrameSynth+0x29a>
    99dc:	4b24      	ldr	r3, [pc, #144]	; (9a70 <audioFrameSynth+0x310>)
    99de:	78db      	ldrb	r3, [r3, #3]
    99e0:	b933      	cbnz	r3, 99f0 <audioFrameSynth+0x290>
		for (int i = 0; i < numStringsThisBoard; i++)
    99e2:	9b03      	ldr	r3, [sp, #12]
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	e6f9      	b.n	97dc <audioFrameSynth+0x7c>
						tADSRT_off(&envs[v][i]);
    99e8:	4648      	mov	r0, r9
    99ea:	f000 fda9 	bl	a540 <__tADSRT_off_veneer>
    99ee:	e7ef      	b.n	99d0 <audioFrameSynth+0x270>
    99f0:	f109 0018 	add.w	r0, r9, #24
    99f4:	f000 fda4 	bl	a540 <__tADSRT_off_veneer>
    99f8:	e7f3      	b.n	99e2 <audioFrameSynth+0x282>
    99fa:	f109 0010 	add.w	r0, r9, #16
    99fe:	f000 fd9f 	bl	a540 <__tADSRT_off_veneer>
    9a02:	e7eb      	b.n	99dc <audioFrameSynth+0x27c>
    9a04:	f109 0008 	add.w	r0, r9, #8
    9a08:	f000 fd9a 	bl	a540 <__tADSRT_off_veneer>
    9a0c:	e7e3      	b.n	99d6 <audioFrameSynth+0x276>
    9a0e:	bf00      	nop
    9a10:	e0001000 	.word	0xe0001000
    9a14:	20000694 	.word	0x20000694
    9a18:	2001d7c0 	.word	0x2001d7c0
    9a1c:	2001441c 	.word	0x2001441c
    9a20:	37800080 	.word	0x37800080
    9a24:	20005550 	.word	0x20005550
    9a28:	200143fc 	.word	0x200143fc
    9a2c:	30000000 	.word	0x30000000
    9a30:	4b000000 	.word	0x4b000000
    9a34:	20014434 	.word	0x20014434
    9a38:	20000684 	.word	0x20000684
    9a3c:	3f7d70a4 	.word	0x3f7d70a4
    9a40:	20014438 	.word	0x20014438
    9a44:	200053c4 	.word	0x200053c4
    9a48:	200053c0 	.word	0x200053c0
    9a4c:	20000aec 	.word	0x20000aec
    9a50:	20000ae8 	.word	0x20000ae8
    9a54:	200054ec 	.word	0x200054ec
    9a58:	2001d8c8 	.word	0x2001d8c8
    9a5c:	2001d0f8 	.word	0x2001d0f8
    9a60:	2001d278 	.word	0x2001d278
    9a64:	2001d27c 	.word	0x2001d27c
    9a68:	2001d640 	.word	0x2001d640
    9a6c:	2001a214 	.word	0x2001a214
    9a70:	2001d0f4 	.word	0x2001d0f4
    9a74:	20005968 	.word	0x20005968
    9a78:	200054e0 	.word	0x200054e0
    9a7c:	2001d0f8 	.word	0x2001d0f8
    9a80:	20019f3c 	.word	0x20019f3c
    9a84:	2001d118 	.word	0x2001d118
	...

00009aa0 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    9aa0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    9aa2:	4c07      	ldr	r4, [pc, #28]	; (9ac0 <audioInitVocal+0x20>)
    9aa4:	2241      	movs	r2, #65	; 0x41
    9aa6:	4b07      	ldr	r3, [pc, #28]	; (9ac4 <audioInitVocal+0x24>)
    9aa8:	2116      	movs	r1, #22
    9aaa:	4620      	mov	r0, r4
    9aac:	f000 fb0c 	bl	a0c8 <__tVoc_init_veneer>
    9ab0:	1d20      	adds	r0, r4, #4
    9ab2:	4b04      	ldr	r3, [pc, #16]	; (9ac4 <audioInitVocal+0x24>)
    9ab4:	2241      	movs	r2, #65	; 0x41
    9ab6:	2116      	movs	r1, #22
	}
}
    9ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    9abc:	f000 bb04 	b.w	a0c8 <__tVoc_init_veneer>
    9ac0:	2001d8ec 	.word	0x2001d8ec
    9ac4:	20005484 	.word	0x20005484
    9ac8:	f3af 8000 	nop.w
    9acc:	f3af 8000 	nop.w
    9ad0:	f3af 8000 	nop.w
    9ad4:	f3af 8000 	nop.w
    9ad8:	f3af 8000 	nop.w
    9adc:	f3af 8000 	nop.w

00009ae0 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    9ae0:	4770      	bx	lr
    9ae2:	bf00      	nop
    9ae4:	f3af 8000 	nop.w
    9ae8:	f3af 8000 	nop.w
    9aec:	f3af 8000 	nop.w
    9af0:	f3af 8000 	nop.w
    9af4:	f3af 8000 	nop.w
    9af8:	f3af 8000 	nop.w
    9afc:	f3af 8000 	nop.w

00009b00 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    9b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b04:	4d0e      	ldr	r5, [pc, #56]	; (9b40 <audioSwitchToVocal+0x40>)
	for (int i = 0; i < 12; i++)
    9b06:	2400      	movs	r4, #0
    9b08:	4e0e      	ldr	r6, [pc, #56]	; (9b44 <audioSwitchToVocal+0x44>)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
		knobFrozen[i] = 1;
    9b0a:	2701      	movs	r7, #1
    9b0c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 9b4c <audioSwitchToVocal+0x4c>
{
    9b10:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    9b14:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 9b48 <audioSwitchToVocal+0x48>
    9b18:	4628      	mov	r0, r5
    9b1a:	eeb0 0a48 	vmov.f32	s0, s16
    9b1e:	f000 fc5b 	bl	a3d8 <__tExpSmooth_setFactor_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    9b22:	4628      	mov	r0, r5
    9b24:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    9b28:	3504      	adds	r5, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    9b2a:	f000 fbd1 	bl	a2d0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    9b2e:	f808 7004 	strb.w	r7, [r8, r4]
	for (int i = 0; i < 12; i++)
    9b32:	3401      	adds	r4, #1
    9b34:	2c0c      	cmp	r4, #12
    9b36:	d1ef      	bne.n	9b18 <audioSwitchToVocal+0x18>
	}
}
    9b38:	ecbd 8b02 	vpop	{d8}
    9b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b40:	20005430 	.word	0x20005430
    9b44:	20000b08 	.word	0x20000b08
    9b48:	3c23d70a 	.word	0x3c23d70a
    9b4c:	200053cc 	.word	0x200053cc
    9b50:	f3af 8000 	nop.w
    9b54:	f3af 8000 	nop.w
    9b58:	f3af 8000 	nop.w
    9b5c:	f3af 8000 	nop.w

00009b60 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    9b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b64:	4c41      	ldr	r4, [pc, #260]	; (9c6c <audioTickVocal+0x10c>)
    9b66:	4d42      	ldr	r5, [pc, #264]	; (9c70 <audioTickVocal+0x110>)
    9b68:	f104 0630 	add.w	r6, r4, #48	; 0x30
    9b6c:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    9b70:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    9b72:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    9b74:	f000 fb88 	bl	a288 <__tExpSmooth_tick_veneer>
    9b78:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    9b7c:	42b4      	cmp	r4, r6
    9b7e:	d1f7      	bne.n	9b70 <audioTickVocal+0x10>

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);



	for (int i = 0; i < numStringsThisBoard; i++)
    9b80:	f8df 9114 	ldr.w	r9, [pc, #276]	; 9c98 <audioTickVocal+0x138>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    9b84:	483b      	ldr	r0, [pc, #236]	; (9c74 <audioTickVocal+0x114>)
    9b86:	f000 fb7f 	bl	a288 <__tExpSmooth_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9b8a:	f899 3000 	ldrb.w	r3, [r9]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    9b8e:	eeb0 9a40 	vmov.f32	s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    9b92:	2b00      	cmp	r3, #0
    9b94:	d066      	beq.n	9c64 <audioTickVocal+0x104>
    9b96:	4d38      	ldr	r5, [pc, #224]	; (9c78 <audioTickVocal+0x118>)
    9b98:	2400      	movs	r4, #0
    9b9a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9c9c <audioTickVocal+0x13c>
    9b9e:	4f37      	ldr	r7, [pc, #220]	; (9c7c <audioTickVocal+0x11c>)
	float tempSamp = 0.0f;
    9ba0:	eddf 8a37 	vldr	s17, [pc, #220]	; 9c80 <audioTickVocal+0x120>
    9ba4:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 9ca0 <audioTickVocal+0x140>
    9ba8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 9ca4 <audioTickVocal+0x144>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9bac:	4628      	mov	r0, r5
    9bae:	00a6      	lsls	r6, r4, #2
    9bb0:	f000 fc0a 	bl	a3c8 <__tVoc_tick_veneer>
    9bb4:	eeb0 8a40 	vmov.f32	s16, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    9bb8:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9bba:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    9bbe:	f000 fc73 	bl	a4a8 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    9bc2:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9bc6:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    9bca:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    9bce:	3401      	adds	r4, #1
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    9bd0:	ee30 0a27 	vadd.f32	s0, s0, s15
    9bd4:	f000 fb5c 	bl	a290 <__mtofTableLookup_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    9bd8:	4628      	mov	r0, r5
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    9bda:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    9bde:	f000 fcf3 	bl	a5c8 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    9be2:	4628      	mov	r0, r5
    9be4:	eeb0 0a49 	vmov.f32	s0, s18
    9be8:	f000 fb1e 	bl	a228 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9bec:	f899 3000 	ldrb.w	r3, [r9]
    9bf0:	3504      	adds	r5, #4
    9bf2:	42a3      	cmp	r3, r4
    9bf4:	dcda      	bgt.n	9bac <audioTickVocal+0x4c>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    9bf6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 9c84 <audioTickVocal+0x124>
    9bfa:	eddf 7a23 	vldr	s15, [pc, #140]	; 9c88 <audioTickVocal+0x128>
    9bfe:	eef0 0a40 	vmov.f32	s1, s0
    9c02:	ed9f 1a22 	vldr	s2, [pc, #136]	; 9c8c <audioTickVocal+0x12c>
    9c06:	eee9 0a27 	vfma.f32	s1, s18, s15
    9c0a:	f000 fae1 	bl	a1d0 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    9c0e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    9c12:	491f      	ldr	r1, [pc, #124]	; (9c90 <audioTickVocal+0x130>)
	float omAlpha = 1.0f - alpha;
    9c14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9c18:	4a1e      	ldr	r2, [pc, #120]	; (9c94 <audioTickVocal+0x134>)
	int volIdxInt = (int) volIdx;
    9c1a:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    9c1e:	edd1 6a00 	vldr	s13, [r1]
    9c22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    9c26:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9c28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    9c2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    9c30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    9c34:	ee30 0a47 	vsub.f32	s0, s0, s14
    9c38:	ee68 8aa6 	vmul.f32	s17, s17, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    9c3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    9c40:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    9c44:	ed93 7a00 	vldr	s14, [r3]
    9c48:	edd2 6a00 	vldr	s13, [r2]
    9c4c:	ee20 0a26 	vmul.f32	s0, s0, s13
    9c50:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tanhf(tempSamp);
    9c54:	ee28 0a80 	vmul.f32	s0, s17, s0
}
    9c58:	ecbd 8b04 	vpop	{d8-d9}
    9c5c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return tanhf(tempSamp);
    9c60:	f000 ba62 	b.w	a128 <__tanhf_veneer>
	float tempSamp = 0.0f;
    9c64:	eddf 8a06 	vldr	s17, [pc, #24]	; 9c80 <audioTickVocal+0x120>
    9c68:	e7c5      	b.n	9bf6 <audioTickVocal+0x96>
    9c6a:	bf00      	nop
    9c6c:	200053e0 	.word	0x200053e0
    9c70:	20005430 	.word	0x20005430
    9c74:	2001444c 	.word	0x2001444c
    9c78:	2001d8ec 	.word	0x2001d8ec
    9c7c:	200143cc 	.word	0x200143cc
    9c80:	00000000 	.word	0x00000000
    9c84:	423c0000 	.word	0x423c0000
    9c88:	42a00000 	.word	0x42a00000
    9c8c:	42fe0000 	.word	0x42fe0000
    9c90:	2000068c 	.word	0x2000068c
    9c94:	200006a0 	.word	0x200006a0
    9c98:	20000694 	.word	0x20000694
    9c9c:	2001441c 	.word	0x2001441c
    9ca0:	200053b4 	.word	0x200053b4
    9ca4:	20014414 	.word	0x20014414
    9ca8:	f3af 8000 	nop.w
    9cac:	f3af 8000 	nop.w
    9cb0:	f3af 8000 	nop.w
    9cb4:	f3af 8000 	nop.w
    9cb8:	f3af 8000 	nop.w
    9cbc:	f3af 8000 	nop.w

00009cc0 <audioFrameVocal>:
{
    9cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9cc4:	4bb5      	ldr	r3, [pc, #724]	; (9f9c <audioFrameVocal+0x2dc>)
{
    9cc6:	4680      	mov	r8, r0
	if (resetStringInputs)
    9cc8:	f8df b328 	ldr.w	fp, [pc, #808]	; 9ff4 <audioFrameVocal+0x334>
		for (int i = 0; i < numStringsThisBoard; i++)
    9ccc:	4fb4      	ldr	r7, [pc, #720]	; (9fa0 <audioFrameVocal+0x2e0>)
{
    9cce:	ed2d 8b08 	vpush	{d8-d11}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9cd2:	685e      	ldr	r6, [r3, #4]
{
    9cd4:	b083      	sub	sp, #12
	if (resetStringInputs)
    9cd6:	f89b 3000 	ldrb.w	r3, [fp]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	f040 80d5 	bne.w	9e8a <audioFrameVocal+0x1ca>
	if (newPluck)
    9ce0:	4db0      	ldr	r5, [pc, #704]	; (9fa4 <audioFrameVocal+0x2e4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    9ce2:	7839      	ldrb	r1, [r7, #0]
	if (newPluck)
    9ce4:	682b      	ldr	r3, [r5, #0]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	f040 80ec 	bne.w	9ec4 <audioFrameVocal+0x204>
	for (int i = 0; i < numStringsThisBoard; i++)
    9cec:	2900      	cmp	r1, #0
    9cee:	f000 809a 	beq.w	9e26 <audioFrameVocal+0x166>
		float doublecompute = knobScaled[1] > 0.5f;
    9cf2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    9cf6:	4dac      	ldr	r5, [pc, #688]	; (9fa8 <audioFrameVocal+0x2e8>)
    9cf8:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 9ff8 <audioFrameVocal+0x338>
	for (int i = 0; i < numStringsThisBoard; i++)
    9cfc:	f04f 0b00 	mov.w	fp, #0
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    9d00:	eddf aaaa 	vldr	s21, [pc, #680]	; 9fac <audioFrameVocal+0x2ec>
			int32_t squishedTract = (newTractLength*0.168f) ;
    9d04:	ed9f aaaa 	vldr	s20, [pc, #680]	; 9fb0 <audioFrameVocal+0x2f0>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    9d08:	eddf 9aaa 	vldr	s19, [pc, #680]	; 9fb4 <audioFrameVocal+0x2f4>
    9d0c:	ed9f 9aaa 	vldr	s18, [pc, #680]	; 9fb8 <audioFrameVocal+0x2f8>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    9d10:	eddf 8aaa 	vldr	s17, [pc, #680]	; 9fbc <audioFrameVocal+0x2fc>
    9d14:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 9ffc <audioFrameVocal+0x33c>
    9d18:	4ca9      	ldr	r4, [pc, #676]	; (9fc0 <audioFrameVocal+0x300>)
    9d1a:	9601      	str	r6, [sp, #4]
		float doublecompute = knobScaled[1] > 0.5f;
    9d1c:	edd4 7a01 	vldr	s15, [r4, #4]
    9d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d24:	f8d9 3000 	ldr.w	r3, [r9]
		float doublecompute = knobScaled[1] > 0.5f;
    9d28:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
    9d2c:	eef4 7acb 	vcmpe.f32	s15, s22
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    9d30:	ed94 8a00 	vldr	s16, [r4]
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d34:	f103 020a 	add.w	r2, r3, #10
    9d38:	3b0a      	subs	r3, #10
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    9d3a:	ee28 8a2a 	vmul.f32	s16, s16, s21
	for (int i = 0; i < numStringsThisBoard; i++)
    9d3e:	f10b 0b01 	add.w	fp, fp, #1
		float doublecompute = knobScaled[1] > 0.5f;
    9d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d46:	ee06 2a90 	vmov	s13, r2
    9d4a:	ee07 3a90 	vmov	s15, r3
    9d4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float doublecompute = knobScaled[1] > 0.5f;
    9d52:	fe37 7a06 	vselgt.f32	s14, s14, s12
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    9d56:	ee28 8a07 	vmul.f32	s16, s16, s14
		float doublecompute = knobScaled[1] > 0.5f;
    9d5a:	bfcc      	ite	gt
    9d5c:	2601      	movgt	r6, #1
    9d5e:	2600      	movle	r6, #0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			int32_t squishedTract = (newTractLength*0.168f) ;
    9d64:	ee28 7a0a 	vmul.f32	s14, s16, s20
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d68:	eef4 6ac8 	vcmpe.f32	s13, s16
			int32_t squishedTract = (newTractLength*0.168f) ;
    9d6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			int32_t squishedTract = (newTractLength*0.168f) ;
    9d74:	ee17 3a10 	vmov	r3, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9d78:	d404      	bmi.n	9d84 <audioFrameVocal+0xc4>
    9d7a:	eef4 7ac8 	vcmpe.f32	s15, s16
    9d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d82:	dd0f      	ble.n	9da4 <audioFrameVocal+0xe4>
			if ( squishedTract != prevActualTractLength[i])
    9d84:	f8da 2000 	ldr.w	r2, [sl]
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    9d88:	4628      	mov	r0, r5
    9d8a:	1c99      	adds	r1, r3, #2
			if ( squishedTract != prevActualTractLength[i])
    9d8c:	9300      	str	r3, [sp, #0]
    9d8e:	429a      	cmp	r2, r3
    9d90:	d004      	beq.n	9d9c <audioFrameVocal+0xdc>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    9d92:	f000 fb8d 	bl	a4b0 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    9d96:	9b00      	ldr	r3, [sp, #0]
    9d98:	f8ca 3000 	str.w	r3, [sl]
			prevTractLength[i] = newTractLength;
    9d9c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    9da0:	ed89 8a00 	vstr	s16, [r9]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    9da4:	4631      	mov	r1, r6
    9da6:	4628      	mov	r0, r5
    9da8:	f000 f9da 	bl	a160 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    9dac:	4628      	mov	r0, r5
    9dae:	ed94 0a04 	vldr	s0, [r4, #16]
	for (int i = 0; i < numStringsThisBoard; i++)
    9db2:	f109 0904 	add.w	r9, r9, #4
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    9db6:	f000 f99f 	bl	a0f8 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    9dba:	4628      	mov	r0, r5
    9dbc:	ed94 0a05 	vldr	s0, [r4, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    9dc0:	f10a 0a04 	add.w	sl, sl, #4
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    9dc4:	f000 fb50 	bl	a468 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    9dc8:	4628      	mov	r0, r5
    9dca:	ed94 0a06 	vldr	s0, [r4, #24]
    9dce:	f000 fbdf 	bl	a590 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    9dd2:	4628      	mov	r0, r5
    9dd4:	ed94 0a07 	vldr	s0, [r4, #28]
    9dd8:	f000 fa6e 	bl	a2b8 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    9ddc:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    9de0:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    9de4:	4628      	mov	r0, r5
    9de6:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    9dea:	ed94 0a08 	vldr	s0, [r4, #32]
    9dee:	f000 fb43 	bl	a478 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    9df2:	eeb0 0a49 	vmov.f32	s0, s18
    9df6:	edd4 7a03 	vldr	s15, [r4, #12]
    9dfa:	4628      	mov	r0, r5
    9dfc:	eea7 0aa9 	vfma.f32	s0, s15, s19
    9e00:	f000 f90a 	bl	a018 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    9e04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    9e08:	eeb0 0a68 	vmov.f32	s0, s17
    9e0c:	ed94 7a02 	vldr	s14, [r4, #8]
    9e10:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    9e12:	3504      	adds	r5, #4
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    9e14:	eea7 0a27 	vfma.f32	s0, s14, s15
    9e18:	f000 f94a 	bl	a0b0 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9e1c:	783b      	ldrb	r3, [r7, #0]
    9e1e:	455b      	cmp	r3, fp
    9e20:	f73f af7c 	bgt.w	9d1c <audioFrameVocal+0x5c>
    9e24:	9e01      	ldr	r6, [sp, #4]
    9e26:	4c67      	ldr	r4, [pc, #412]	; (9fc4 <audioFrameVocal+0x304>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9e28:	ed9f 8a67 	vldr	s16, [pc, #412]	; 9fc8 <audioFrameVocal+0x308>
    9e2c:	f504 7500 	add.w	r5, r4, #512	; 0x200
    9e30:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    9e34:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    9e38:	f7ff fe92 	bl	9b60 <audioTickVocal>
    9e3c:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9e40:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9e42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9e46:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9e48:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9e4c:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9e50:	d1f2      	bne.n	9e38 <audioFrameVocal+0x178>
	if (switchStrings)
    9e52:	4c5e      	ldr	r4, [pc, #376]	; (9fcc <audioFrameVocal+0x30c>)
    9e54:	6823      	ldr	r3, [r4, #0]
    9e56:	2b00      	cmp	r3, #0
    9e58:	d167      	bne.n	9f2a <audioFrameVocal+0x26a>
	switchStrings = 0;
    9e5a:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9e5c:	4b4f      	ldr	r3, [pc, #316]	; (9f9c <audioFrameVocal+0x2dc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9e5e:	485c      	ldr	r0, [pc, #368]	; (9fd0 <audioFrameVocal+0x310>)
	switchStrings = 0;
    9e60:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9e62:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9e64:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9e68:	1b9b      	subs	r3, r3, r6
    9e6a:	495a      	ldr	r1, [pc, #360]	; (9fd4 <audioFrameVocal+0x314>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9e6c:	4a5a      	ldr	r2, [pc, #360]	; (9fd8 <audioFrameVocal+0x318>)
    9e6e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9e72:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9e78:	ee67 7a87 	vmul.f32	s15, s15, s14
    9e7c:	edc2 7a00 	vstr	s15, [r2]
}
    9e80:	b003      	add	sp, #12
    9e82:	ecbd 8b08 	vpop	{d8-d11}
    9e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    9e8a:	7839      	ldrb	r1, [r7, #0]
    9e8c:	2900      	cmp	r1, #0
    9e8e:	d050      	beq.n	9f32 <audioFrameVocal+0x272>
    9e90:	2400      	movs	r4, #0
    9e92:	4d52      	ldr	r5, [pc, #328]	; (9fdc <audioFrameVocal+0x31c>)
    9e94:	f8df 9168 	ldr.w	r9, [pc, #360]	; a000 <audioFrameVocal+0x340>
			previousStringInputs[i] = 0;
    9e98:	46a2      	mov	sl, r4
			tADSRT_clear(&fenvelopes[i]);
    9e9a:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    9e9c:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    9e9e:	f000 fbab 	bl	a5f8 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    9ea2:	7839      	ldrb	r1, [r7, #0]
			previousStringInputs[i] = 0;
    9ea4:	f829 a014 	strh.w	sl, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    9ea8:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    9eaa:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    9eae:	42a1      	cmp	r1, r4
    9eb0:	dcf3      	bgt.n	9e9a <audioFrameVocal+0x1da>
		resetStringInputs = 0;
    9eb2:	f88b 3000 	strb.w	r3, [fp]
		newPluck = 1;
    9eb6:	2301      	movs	r3, #1
    9eb8:	4d3a      	ldr	r5, [pc, #232]	; (9fa4 <audioFrameVocal+0x2e4>)
    9eba:	602b      	str	r3, [r5, #0]
	if (newPluck)
    9ebc:	682b      	ldr	r3, [r5, #0]
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	f43f af14 	beq.w	9cec <audioFrameVocal+0x2c>
		for (int i = 0; i < numStringsThisBoard; i++)
    9ec4:	2900      	cmp	r1, #0
    9ec6:	d067      	beq.n	9f98 <audioFrameVocal+0x2d8>
    9ec8:	f8df b110 	ldr.w	fp, [pc, #272]	; 9fdc <audioFrameVocal+0x31c>
    9ecc:	2400      	movs	r4, #0
    9ece:	4b44      	ldr	r3, [pc, #272]	; (9fe0 <audioFrameVocal+0x320>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9ed0:	9500      	str	r5, [sp, #0]
    9ed2:	465d      	mov	r5, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9ed4:	eddf 8a43 	vldr	s17, [pc, #268]	; 9fe4 <audioFrameVocal+0x324>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9ed8:	469b      	mov	fp, r3
    9eda:	f8df a128 	ldr.w	sl, [pc, #296]	; a004 <audioFrameVocal+0x344>
    9ede:	f8df 9120 	ldr.w	r9, [pc, #288]	; a000 <audioFrameVocal+0x340>
    9ee2:	4a41      	ldr	r2, [pc, #260]	; (9fe8 <audioFrameVocal+0x328>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    9ee4:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    9ee8:	b29b      	uxth	r3, r3
    9eea:	b91b      	cbnz	r3, 9ef4 <audioFrameVocal+0x234>
    9eec:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    9ef0:	b29b      	uxth	r3, r3
    9ef2:	bb3b      	cbnz	r3, 9f44 <audioFrameVocal+0x284>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    9ef4:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    9ef8:	b29b      	uxth	r3, r3
    9efa:	b123      	cbz	r3, 9f06 <audioFrameVocal+0x246>
    9efc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    9f00:	b29b      	uxth	r3, r3
    9f02:	2b00      	cmp	r3, #0
    9f04:	d042      	beq.n	9f8c <audioFrameVocal+0x2cc>
			previousStringInputs[i] = stringInputs[i];
    9f06:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    9f0a:	f10b 0b04 	add.w	fp, fp, #4
    9f0e:	f10a 0a04 	add.w	sl, sl, #4
    9f12:	3504      	adds	r5, #4
			previousStringInputs[i] = stringInputs[i];
    9f14:	fa1f fc8c 	uxth.w	ip, ip
    9f18:	f829 c014 	strh.w	ip, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    9f1c:	3401      	adds	r4, #1
    9f1e:	42a1      	cmp	r1, r4
    9f20:	dce0      	bgt.n	9ee4 <audioFrameVocal+0x224>
    9f22:	9d00      	ldr	r5, [sp, #0]
		newPluck = 0;
    9f24:	2300      	movs	r3, #0
    9f26:	602b      	str	r3, [r5, #0]
    9f28:	e6e0      	b.n	9cec <audioFrameVocal+0x2c>
		switchStringModel(switchStrings);
    9f2a:	6820      	ldr	r0, [r4, #0]
    9f2c:	f7f7 fab8 	bl	14a0 <switchStringModel>
    9f30:	e793      	b.n	9e5a <audioFrameVocal+0x19a>
		newPluck = 1;
    9f32:	4d1c      	ldr	r5, [pc, #112]	; (9fa4 <audioFrameVocal+0x2e4>)
    9f34:	2301      	movs	r3, #1
		resetStringInputs = 0;
    9f36:	f88b 1000 	strb.w	r1, [fp]
		newPluck = 1;
    9f3a:	602b      	str	r3, [r5, #0]
	if (newPluck)
    9f3c:	682b      	ldr	r3, [r5, #0]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d1f0      	bne.n	9f24 <audioFrameVocal+0x264>
    9f42:	e770      	b.n	9e26 <audioFrameVocal+0x166>
				stringOctave[i] = octave;
    9f44:	4b29      	ldr	r3, [pc, #164]	; (9fec <audioFrameVocal+0x32c>)
    9f46:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f4a:	4b29      	ldr	r3, [pc, #164]	; (9ff0 <audioFrameVocal+0x330>)
				stringOctave[i] = octave;
    9f4c:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f50:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9f54:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f58:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9f5c:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f5e:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9f62:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f66:	f000 f947 	bl	a1f8 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    9f6a:	4628      	mov	r0, r5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9f6c:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    9f70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    9f74:	f000 f8cc 	bl	a110 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9f78:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    9f7c:	4628      	mov	r0, r5
    9f7e:	ee20 0a28 	vmul.f32	s0, s0, s17
    9f82:	f000 fa25 	bl	a3d0 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    9f86:	7839      	ldrb	r1, [r7, #0]
			{
    9f88:	4a17      	ldr	r2, [pc, #92]	; (9fe8 <audioFrameVocal+0x328>)
    9f8a:	e7bc      	b.n	9f06 <audioFrameVocal+0x246>
				tADSRT_off(&fenvelopes[i]);
    9f8c:	4628      	mov	r0, r5
    9f8e:	f000 fad7 	bl	a540 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    9f92:	7839      	ldrb	r1, [r7, #0]
    9f94:	4a14      	ldr	r2, [pc, #80]	; (9fe8 <audioFrameVocal+0x328>)
    9f96:	e7b6      	b.n	9f06 <audioFrameVocal+0x246>
		newPluck = 0;
    9f98:	6029      	str	r1, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    9f9a:	e744      	b.n	9e26 <audioFrameVocal+0x166>
    9f9c:	e0001000 	.word	0xe0001000
    9fa0:	20000694 	.word	0x20000694
    9fa4:	200054e0 	.word	0x200054e0
    9fa8:	2001d8ec 	.word	0x2001d8ec
    9fac:	42c80000 	.word	0x42c80000
    9fb0:	3e2c0831 	.word	0x3e2c0831
    9fb4:	3ecccccd 	.word	0x3ecccccd
    9fb8:	3c23d70a 	.word	0x3c23d70a
    9fbc:	3cc8b439 	.word	0x3cc8b439
    9fc0:	200053e0 	.word	0x200053e0
    9fc4:	30000000 	.word	0x30000000
    9fc8:	4b000000 	.word	0x4b000000
    9fcc:	20014434 	.word	0x20014434
    9fd0:	20000684 	.word	0x20000684
    9fd4:	20014438 	.word	0x20014438
    9fd8:	200053c4 	.word	0x200053c4
    9fdc:	200053b4 	.word	0x200053b4
    9fe0:	2001441c 	.word	0x2001441c
    9fe4:	37800080 	.word	0x37800080
    9fe8:	200143fc 	.word	0x200143fc
    9fec:	200054ec 	.word	0x200054ec
    9ff0:	20014414 	.word	0x20014414
    9ff4:	20005968 	.word	0x20005968
    9ff8:	20000b00 	.word	0x20000b00
    9ffc:	20000af8 	.word	0x20000af8
    a000:	20005550 	.word	0x20005550
    a004:	200143cc 	.word	0x200143cc

0000a008 <__tSineTriLFO_tick_veneer>:
    a008:	f85f f000 	ldr.w	pc, [pc]	; a00c <__tSineTriLFO_tick_veneer+0x4>
    a00c:	0801529d 	.word	0x0801529d

0000a010 <__tTString_pluck_veneer>:
    a010:	f85f f000 	ldr.w	pc, [pc]	; a014 <__tTString_pluck_veneer+0x4>
    a014:	08016e01 	.word	0x08016e01

0000a018 <__tVoc_set_velum_veneer>:
    a018:	f85f f000 	ldr.w	pc, [pc]	; a01c <__tVoc_set_velum_veneer+0x4>
    a01c:	08018791 	.word	0x08018791

0000a020 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    a020:	f85f f000 	ldr.w	pc, [pc]	; a024 <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    a024:	08017665 	.word	0x08017665

0000a028 <__tPBSawSquare_setShape_veneer>:
    a028:	f85f f000 	ldr.w	pc, [pc]	; a02c <__tPBSawSquare_setShape_veneer+0x4>
    a02c:	08014be1 	.word	0x08014be1

0000a030 <__tHighpass_tick_veneer>:
    a030:	f85f f000 	ldr.w	pc, [pc]	; a034 <__tHighpass_tick_veneer+0x4>
    a034:	080117ad 	.word	0x080117ad

0000a038 <__tTriLFO_tick_veneer>:
    a038:	f85f f000 	ldr.w	pc, [pc]	; a03c <__tTriLFO_tick_veneer+0x4>
    a03c:	080151a5 	.word	0x080151a5

0000a040 <__tVZFilter_setFreq_veneer>:
    a040:	f85f f000 	ldr.w	pc, [pc]	; a044 <__tVZFilter_setFreq_veneer+0x4>
    a044:	08011c31 	.word	0x08011c31

0000a048 <__tTString_setPickupModFreq_veneer>:
    a048:	f85f f000 	ldr.w	pc, [pc]	; a04c <__tTString_setPickupModFreq_veneer+0x4>
    a04c:	08016c11 	.word	0x08016c11

0000a050 <__tPBSineTriangle_tick_veneer>:
    a050:	f85f f000 	ldr.w	pc, [pc]	; a054 <__tPBSineTriangle_tick_veneer+0x4>
    a054:	0801479d 	.word	0x0801479d

0000a058 <__tTString_setFreq_veneer>:
    a058:	f85f f000 	ldr.w	pc, [pc]	; a05c <__tTString_setFreq_veneer+0x4>
    a05c:	08016b29 	.word	0x08016b29

0000a060 <__HAL_SPI_Receive_DMA_veneer>:
    a060:	f85f f000 	ldr.w	pc, [pc]	; a064 <__HAL_SPI_Receive_DMA_veneer+0x4>
    a064:	0800aa19 	.word	0x0800aa19

0000a068 <__tVZFilterBell_setBandwidth_veneer>:
    a068:	f85f f000 	ldr.w	pc, [pc]	; a06c <__tVZFilterBell_setBandwidth_veneer+0x4>
    a06c:	08012831 	.word	0x08012831

0000a070 <__tStiffString_setDecayNoUpdate_veneer>:
    a070:	f85f f000 	ldr.w	pc, [pc]	; a074 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    a074:	0801765d 	.word	0x0801765d

0000a078 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    a078:	f85f f000 	ldr.w	pc, [pc]	; a07c <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    a07c:	0800abd9 	.word	0x0800abd9

0000a080 <__tSimpleLivingString3_pluck_veneer>:
    a080:	f85f f000 	ldr.w	pc, [pc]	; a084 <__tSimpleLivingString3_pluck_veneer+0x4>
    a084:	08015801 	.word	0x08015801

0000a088 <__tDiodeFilter_setFreqFast_veneer>:
    a088:	f85f f000 	ldr.w	pc, [pc]	; a08c <__tDiodeFilter_setFreqFast_veneer+0x4>
    a08c:	080133ad 	.word	0x080133ad

0000a090 <__tSimpleLivingString3_setPickupPoint_veneer>:
    a090:	f85f f000 	ldr.w	pc, [pc]	; a094 <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    a094:	08015b0d 	.word	0x08015b0d

0000a098 <__tSineTriLFO_setFreq_veneer>:
    a098:	f85f f000 	ldr.w	pc, [pc]	; a09c <__tSineTriLFO_setFreq_veneer+0x4>
    a09c:	08015339 	.word	0x08015339

0000a0a0 <__tVZFilter_tickEfficient_veneer>:
    a0a0:	f85f f000 	ldr.w	pc, [pc]	; a0a4 <__tVZFilter_tickEfficient_veneer+0x4>
    a0a4:	080117f1 	.word	0x080117f1

0000a0a8 <__tLinearDelay_tick_veneer>:
    a0a8:	f85f f000 	ldr.w	pc, [pc]	; a0ac <__tLinearDelay_tick_veneer+0x4>
    a0ac:	0800fc5d 	.word	0x0800fc5d

0000a0b0 <__tVoc_rescaleDiameter_veneer>:
    a0b0:	f85f f000 	ldr.w	pc, [pc]	; a0b4 <__tVoc_rescaleDiameter_veneer+0x4>
    a0b4:	08018b11 	.word	0x08018b11

0000a0b8 <__faster_mtof_veneer>:
    a0b8:	f85f f000 	ldr.w	pc, [pc]	; a0bc <__faster_mtof_veneer+0x4>
    a0bc:	08014085 	.word	0x08014085

0000a0c0 <__memcpy_veneer>:
    a0c0:	f85f f000 	ldr.w	pc, [pc]	; a0c4 <__memcpy_veneer+0x4>
    a0c4:	08018c99 	.word	0x08018c99

0000a0c8 <__tVoc_init_veneer>:
    a0c8:	f85f f000 	ldr.w	pc, [pc]	; a0cc <__tVoc_init_veneer+0x4>
    a0cc:	08018659 	.word	0x08018659

0000a0d0 <__tADSRT_setDecay_veneer>:
    a0d0:	f85f f000 	ldr.w	pc, [pc]	; a0d4 <__tADSRT_setDecay_veneer+0x4>
    a0d4:	08010749 	.word	0x08010749

0000a0d8 <__tCycle_setFreq_veneer>:
    a0d8:	f85f f000 	ldr.w	pc, [pc]	; a0dc <__tCycle_setFreq_veneer+0x4>
    a0dc:	0801451d 	.word	0x0801451d

0000a0e0 <__tLadderFilter_setFreqFast_veneer>:
    a0e0:	f85f f000 	ldr.w	pc, [pc]	; a0e4 <__tLadderFilter_setFreqFast_veneer+0x4>
    a0e4:	08013771 	.word	0x08013771

0000a0e8 <__fastPowf_veneer>:
    a0e8:	f85f f000 	ldr.w	pc, [pc]	; a0ec <__fastPowf_veneer+0x4>
    a0ec:	08013aad 	.word	0x08013aad

0000a0f0 <__tExpSmooth_setDest_veneer>:
    a0f0:	f85f f000 	ldr.w	pc, [pc]	; a0f4 <__tExpSmooth_setDest_veneer+0x4>
    a0f4:	08010d45 	.word	0x08010d45

0000a0f8 <__tVoc_setTurbulenceNoiseGain_veneer>:
    a0f8:	f85f f000 	ldr.w	pc, [pc]	; a0fc <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    a0fc:	0801879d 	.word	0x0801879d

0000a100 <__tStiffString_updateOutputWeights_veneer>:
    a100:	f85f f000 	ldr.w	pc, [pc]	; a104 <__tStiffString_updateOutputWeights_veneer+0x4>
    a104:	08017315 	.word	0x08017315

0000a108 <__audioSwitchToSynth_veneer>:
    a108:	f85f f000 	ldr.w	pc, [pc]	; a10c <__audioSwitchToSynth_veneer+0x4>
    a10c:	08003b41 	.word	0x08003b41

0000a110 <__tADSRT_setSustain_veneer>:
    a110:	f85f f000 	ldr.w	pc, [pc]	; a114 <__tADSRT_setSustain_veneer+0x4>
    a114:	08010771 	.word	0x08010771

0000a118 <__tSVF_setFreqFast_veneer>:
    a118:	f85f f000 	ldr.w	pc, [pc]	; a11c <__tSVF_setFreqFast_veneer+0x4>
    a11c:	08011639 	.word	0x08011639

0000a120 <__tSawSquareLFO_setFreq_veneer>:
    a120:	f85f f000 	ldr.w	pc, [pc]	; a124 <__tSawSquareLFO_setFreq_veneer+0x4>
    a124:	0801509d 	.word	0x0801509d

0000a128 <__tanhf_veneer>:
    a128:	f85f f000 	ldr.w	pc, [pc]	; a12c <__tanhf_veneer+0x4>
    a12c:	0801960d 	.word	0x0801960d

0000a130 <__tVZFilterLS_setResonance_veneer>:
    a130:	f85f f000 	ldr.w	pc, [pc]	; a134 <__tVZFilterLS_setResonance_veneer+0x4>
    a134:	08012305 	.word	0x08012305

0000a138 <__tVZFilterHS_setGain_veneer>:
    a138:	f85f f000 	ldr.w	pc, [pc]	; a13c <__tVZFilterHS_setGain_veneer+0x4>
    a13c:	0801258d 	.word	0x0801258d

0000a140 <__tEnvelopeFollower_tick_veneer>:
    a140:	f85f f000 	ldr.w	pc, [pc]	; a144 <__tEnvelopeFollower_tick_veneer+0x4>
    a144:	0800fa95 	.word	0x0800fa95

0000a148 <__tTriLFO_setPhase_veneer>:
    a148:	f85f f000 	ldr.w	pc, [pc]	; a14c <__tTriLFO_setPhase_veneer+0x4>
    a14c:	080151f1 	.word	0x080151f1

0000a150 <__tStiffString_setPluckPosNoUpdate_veneer>:
    a150:	f85f f000 	ldr.w	pc, [pc]	; a154 <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    a154:	08017631 	.word	0x08017631

0000a158 <__tPBTriangle_tick_veneer>:
    a158:	f85f f000 	ldr.w	pc, [pc]	; a15c <__tPBTriangle_tick_veneer+0x4>
    a15c:	080145b9 	.word	0x080145b9

0000a160 <__tVoc_setDoubleComputeFlag_veneer>:
    a160:	f85f f000 	ldr.w	pc, [pc]	; a164 <__tVoc_setDoubleComputeFlag_veneer+0x4>
    a164:	08018769 	.word	0x08018769

0000a168 <__tExpSmooth_init_veneer>:
    a168:	f85f f000 	ldr.w	pc, [pc]	; a16c <__tExpSmooth_init_veneer+0x4>
    a16c:	08010c81 	.word	0x08010c81

0000a170 <__tTString_setPhantomHarmonicsGain_veneer>:
    a170:	f85f f000 	ldr.w	pc, [pc]	; a174 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    a174:	08016cd5 	.word	0x08016cd5

0000a178 <__HAL_SPI_Abort_veneer>:
    a178:	f85f f000 	ldr.w	pc, [pc]	; a17c <__HAL_SPI_Abort_veneer+0x4>
    a17c:	0800ae15 	.word	0x0800ae15

0000a180 <__tADSRT_setAttack_veneer>:
    a180:	f85f f000 	ldr.w	pc, [pc]	; a184 <__tADSRT_setAttack_veneer+0x4>
    a184:	08010721 	.word	0x08010721

0000a188 <__setEffectsFunctions_veneer>:
    a188:	f85f f000 	ldr.w	pc, [pc]	; a18c <__setEffectsFunctions_veneer+0x4>
    a18c:	08001bf5 	.word	0x08001bf5

0000a190 <__tSimpleLivingString3_setLevStrength_veneer>:
    a190:	f85f f000 	ldr.w	pc, [pc]	; a194 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    a194:	080157e5 	.word	0x080157e5

0000a198 <__tCycle_tick_veneer>:
    a198:	f85f f000 	ldr.w	pc, [pc]	; a19c <__tCycle_tick_veneer+0x4>
    a19c:	080144d1 	.word	0x080144d1

0000a1a0 <__tVZFilterBell_tick_veneer>:
    a1a0:	f85f f000 	ldr.w	pc, [pc]	; a1a4 <__tVZFilterBell_tick_veneer+0x4>
    a1a4:	080127d9 	.word	0x080127d9

0000a1a8 <__tVZFilter_setFrequencyAndResonance_veneer>:
    a1a8:	f85f f000 	ldr.w	pc, [pc]	; a1ac <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    a1ac:	08011fa5 	.word	0x08011fa5

0000a1b0 <__tDiodeFilter_setQ_veneer>:
    a1b0:	f85f f000 	ldr.w	pc, [pc]	; a1b4 <__tDiodeFilter_setQ_veneer+0x4>
    a1b4:	08013409 	.word	0x08013409

0000a1b8 <__tSimpleLivingString3_setDecay_veneer>:
    a1b8:	f85f f000 	ldr.w	pc, [pc]	; a1bc <__tSimpleLivingString3_setDecay_veneer+0x4>
    a1bc:	08015789 	.word	0x08015789

0000a1c0 <__tSimpleLivingString3_initToPool_veneer>:
    a1c0:	f85f f000 	ldr.w	pc, [pc]	; a1c4 <__tSimpleLivingString3_initToPool_veneer+0x4>
    a1c4:	08015421 	.word	0x08015421

0000a1c8 <__tStiffString_setPickupPosNoUpdate_veneer>:
    a1c8:	f85f f000 	ldr.w	pc, [pc]	; a1cc <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    a1cc:	0801760d 	.word	0x0801760d

0000a1d0 <__LEAF_clip_veneer>:
    a1d0:	f85f f000 	ldr.w	pc, [pc]	; a1d4 <__LEAF_clip_veneer+0x4>
    a1d4:	08013bc9 	.word	0x08013bc9

0000a1d8 <__tTString_setSlideGain_veneer>:
    a1d8:	f85f f000 	ldr.w	pc, [pc]	; a1dc <__tTString_setSlideGain_veneer+0x4>
    a1dc:	08016cdd 	.word	0x08016cdd

0000a1e0 <__tSquareLFO_setFreq_veneer>:
    a1e0:	f85f f000 	ldr.w	pc, [pc]	; a1e4 <__tSquareLFO_setFreq_veneer+0x4>
    a1e4:	08014efd 	.word	0x08014efd

0000a1e8 <__tSimpleLivingString3_tick_veneer>:
    a1e8:	f85f f000 	ldr.w	pc, [pc]	; a1ec <__tSimpleLivingString3_tick_veneer+0x4>
    a1ec:	08015959 	.word	0x08015959

0000a1f0 <__tTString_setHarmonic_veneer>:
    a1f0:	f85f f000 	ldr.w	pc, [pc]	; a1f4 <__tTString_setHarmonic_veneer+0x4>
    a1f4:	08016d69 	.word	0x08016d69

0000a1f8 <__mtof_veneer>:
    a1f8:	f85f f000 	ldr.w	pc, [pc]	; a1fc <__mtof_veneer+0x4>
    a1fc:	08014031 	.word	0x08014031

0000a200 <__tTString_initToPool_veneer>:
    a200:	f85f f000 	ldr.w	pc, [pc]	; a204 <__tTString_initToPool_veneer+0x4>
    a204:	08015b15 	.word	0x08015b15

0000a208 <__tCompressor_tick_veneer>:
    a208:	f85f f000 	ldr.w	pc, [pc]	; a20c <__tCompressor_tick_veneer+0x4>
    a20c:	08010419 	.word	0x08010419

0000a210 <__tTString_tick_veneer>:
    a210:	f85f f000 	ldr.w	pc, [pc]	; a214 <__tTString_tick_veneer+0x4>
    a214:	08016225 	.word	0x08016225

0000a218 <__tPBTriangle_setSkew_veneer>:
    a218:	f85f f000 	ldr.w	pc, [pc]	; a21c <__tPBTriangle_setSkew_veneer+0x4>
    a21c:	080146f9 	.word	0x080146f9

0000a220 <__tTString_setPeakFilterFreq_veneer>:
    a220:	f85f f000 	ldr.w	pc, [pc]	; a224 <__tTString_setPeakFilterFreq_veneer+0x4>
    a224:	080171bd 	.word	0x080171bd

0000a228 <__tVoc_set_tenseness_veneer>:
    a228:	f85f f000 	ldr.w	pc, [pc]	; a22c <__tVoc_set_tenseness_veneer+0x4>
    a22c:	08018785 	.word	0x08018785

0000a230 <__tTString_free_veneer>:
    a230:	f85f f000 	ldr.w	pc, [pc]	; a234 <__tTString_free_veneer+0x4>
    a234:	08016111 	.word	0x08016111

0000a238 <__tTString_setPickupFilterFreq_veneer>:
    a238:	f85f f000 	ldr.w	pc, [pc]	; a23c <__tTString_setPickupFilterFreq_veneer+0x4>
    a23c:	080171a5 	.word	0x080171a5

0000a240 <__MX_SPI1_Init_veneer>:
    a240:	f85f f000 	ldr.w	pc, [pc]	; a244 <__MX_SPI1_Init_veneer+0x4>
    a244:	08003089 	.word	0x08003089

0000a248 <__tTString_setWindingsPerInch_veneer>:
    a248:	f85f f000 	ldr.w	pc, [pc]	; a24c <__tTString_setWindingsPerInch_veneer+0x4>
    a24c:	08017195 	.word	0x08017195

0000a250 <__tSquareLFO_setPhase_veneer>:
    a250:	f85f f000 	ldr.w	pc, [pc]	; a254 <__tSquareLFO_setPhase_veneer+0x4>
    a254:	08014f6d 	.word	0x08014f6d

0000a258 <__arm_fir_decimate_f32_veneer>:
    a258:	f85f f000 	ldr.w	pc, [pc]	; a25c <__arm_fir_decimate_f32_veneer+0x4>
    a25c:	080006a1 	.word	0x080006a1

0000a260 <__tVZFilterLS_tick_veneer>:
    a260:	f85f f000 	ldr.w	pc, [pc]	; a264 <__tVZFilterLS_tick_veneer+0x4>
    a264:	080121c5 	.word	0x080121c5

0000a268 <__tTString_setBarPosition_veneer>:
    a268:	f85f f000 	ldr.w	pc, [pc]	; a26c <__tTString_setBarPosition_veneer+0x4>
    a26c:	08016cad 	.word	0x08016cad

0000a270 <__tTString_setPickupFilterQ_veneer>:
    a270:	f85f f000 	ldr.w	pc, [pc]	; a274 <__tTString_setPickupFilterQ_veneer+0x4>
    a274:	080171ad 	.word	0x080171ad

0000a278 <__setLFOShapes_veneer>:
    a278:	f85f f000 	ldr.w	pc, [pc]	; a27c <__setLFOShapes_veneer+0x4>
    a27c:	08002259 	.word	0x08002259

0000a280 <__tStiffString_setFreqNoUpdate_veneer>:
    a280:	f85f f000 	ldr.w	pc, [pc]	; a284 <__tStiffString_setFreqNoUpdate_veneer+0x4>
    a284:	08017655 	.word	0x08017655

0000a288 <__tExpSmooth_tick_veneer>:
    a288:	f85f f000 	ldr.w	pc, [pc]	; a28c <__tExpSmooth_tick_veneer+0x4>
    a28c:	08010d61 	.word	0x08010d61

0000a290 <__mtofTableLookup_veneer>:
    a290:	f85f f000 	ldr.w	pc, [pc]	; a294 <__mtofTableLookup_veneer+0x4>
    a294:	0800099d 	.word	0x0800099d

0000a298 <__tSawSquareLFO_tick_veneer>:
    a298:	f85f f000 	ldr.w	pc, [pc]	; a29c <__tSawSquareLFO_tick_veneer+0x4>
    a29c:	08015019 	.word	0x08015019

0000a2a0 <__tVZFilterHS_tick_veneer>:
    a2a0:	f85f f000 	ldr.w	pc, [pc]	; a2a4 <__tVZFilterHS_tick_veneer+0x4>
    a2a4:	080124ad 	.word	0x080124ad

0000a2a8 <__tPBSineTriangle_setFreq_veneer>:
    a2a8:	f85f f000 	ldr.w	pc, [pc]	; a2ac <__tPBSineTriangle_setFreq_veneer+0x4>
    a2ac:	080148f5 	.word	0x080148f5

0000a2b0 <__tSineTriLFO_setPhase_veneer>:
    a2b0:	f85f f000 	ldr.w	pc, [pc]	; a2b4 <__tSineTriLFO_setPhase_veneer+0x4>
    a2b4:	08015369 	.word	0x08015369

0000a2b8 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    a2b8:	f85f f000 	ldr.w	pc, [pc]	; a2bc <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    a2bc:	080187d5 	.word	0x080187d5

0000a2c0 <__tTString_setPickupModAmp_veneer>:
    a2c0:	f85f f000 	ldr.w	pc, [pc]	; a2c4 <__tTString_setPickupModAmp_veneer+0x4>
    a2c4:	08016c09 	.word	0x08016c09

0000a2c8 <__tTString_setFeedbackStrength_veneer>:
    a2c8:	f85f f000 	ldr.w	pc, [pc]	; a2cc <__tTString_setFeedbackStrength_veneer+0x4>
    a2cc:	08016d7d 	.word	0x08016d7d

0000a2d0 <__tExpSmooth_setValAndDest_veneer>:
    a2d0:	f85f f000 	ldr.w	pc, [pc]	; a2d4 <__tExpSmooth_setValAndDest_veneer+0x4>
    a2d4:	08010d55 	.word	0x08010d55

0000a2d8 <__tPBPulse_setFreq_veneer>:
    a2d8:	f85f f000 	ldr.w	pc, [pc]	; a2dc <__tPBPulse_setFreq_veneer+0x4>
    a2dc:	080149f9 	.word	0x080149f9

0000a2e0 <__tTString_setDecayInSeconds_veneer>:
    a2e0:	f85f f000 	ldr.w	pc, [pc]	; a2e4 <__tTString_setDecayInSeconds_veneer+0x4>
    a2e4:	08016ba9 	.word	0x08016ba9

0000a2e8 <__tSVF_setQ_veneer>:
    a2e8:	f85f f000 	ldr.w	pc, [pc]	; a2ec <__tSVF_setQ_veneer+0x4>
    a2ec:	080116bd 	.word	0x080116bd

0000a2f0 <__tTString_setPeakFilterQ_veneer>:
    a2f0:	f85f f000 	ldr.w	pc, [pc]	; a2f4 <__tTString_setPeakFilterQ_veneer+0x4>
    a2f4:	080171c9 	.word	0x080171c9

0000a2f8 <__tVZFilter_setFreqFast_veneer>:
    a2f8:	f85f f000 	ldr.w	pc, [pc]	; a2fc <__tVZFilter_setFreqFast_veneer+0x4>
    a2fc:	08011c61 	.word	0x08011c61

0000a300 <__tIntPhasor_tick_veneer>:
    a300:	f85f f000 	ldr.w	pc, [pc]	; a304 <__tIntPhasor_tick_veneer+0x4>
    a304:	08014d11 	.word	0x08014d11

0000a308 <__tPBPulse_tick_veneer>:
    a308:	f85f f000 	ldr.w	pc, [pc]	; a30c <__tPBPulse_tick_veneer+0x4>
    a30c:	08014979 	.word	0x08014979

0000a310 <__tCycle_init_veneer>:
    a310:	f85f f000 	ldr.w	pc, [pc]	; a314 <__tCycle_init_veneer+0x4>
    a314:	08014459 	.word	0x08014459

0000a318 <__fasterexpf_veneer>:
    a318:	f85f f000 	ldr.w	pc, [pc]	; a31c <__fasterexpf_veneer+0x4>
    a31c:	08013955 	.word	0x08013955

0000a320 <__tPBPulse_setWidth_veneer>:
    a320:	f85f f000 	ldr.w	pc, [pc]	; a324 <__tPBPulse_setWidth_veneer+0x4>
    a324:	08014a11 	.word	0x08014a11

0000a328 <__tTString_setFilterFreqDirectly_veneer>:
    a328:	f85f f000 	ldr.w	pc, [pc]	; a32c <__tTString_setFilterFreqDirectly_veneer+0x4>
    a32c:	08016c4d 	.word	0x08016c4d

0000a330 <__tTString_setPickupPos_veneer>:
    a330:	f85f f000 	ldr.w	pc, [pc]	; a334 <__tTString_setPickupPos_veneer+0x4>
    a334:	08016bf9 	.word	0x08016bf9

0000a338 <__tTString_setRippleDepth_veneer>:
    a338:	f85f f000 	ldr.w	pc, [pc]	; a33c <__tTString_setRippleDepth_veneer+0x4>
    a33c:	08016ce5 	.word	0x08016ce5

0000a340 <__tTapeDelay_setDelay_veneer>:
    a340:	f85f f000 	ldr.w	pc, [pc]	; a344 <__tTapeDelay_setDelay_veneer+0x4>
    a344:	080101fd 	.word	0x080101fd

0000a348 <__LEAF_mapToZeroToOneOutput_veneer>:
    a348:	f85f f000 	ldr.w	pc, [pc]	; a34c <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    a34c:	08013855 	.word	0x08013855

0000a350 <__tTString_setWoundOrUnwound_veneer>:
    a350:	f85f f000 	ldr.w	pc, [pc]	; a354 <__tTString_setWoundOrUnwound_veneer+0x4>
    a354:	08017141 	.word	0x08017141

0000a358 <__tExpSmooth_setVal_veneer>:
    a358:	f85f f000 	ldr.w	pc, [pc]	; a35c <__tExpSmooth_setVal_veneer+0x4>
    a35c:	08010d4d 	.word	0x08010d4d

0000a360 <__tSimpleLivingString3_setDampFreq_veneer>:
    a360:	f85f f000 	ldr.w	pc, [pc]	; a364 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    a364:	08015781 	.word	0x08015781

0000a368 <__tCrusher_setOperation_veneer>:
    a368:	f85f f000 	ldr.w	pc, [pc]	; a36c <__tCrusher_setOperation_veneer+0x4>
    a36c:	08010301 	.word	0x08010301

0000a370 <__tStiffString_updateOscillators_veneer>:
    a370:	f85f f000 	ldr.w	pc, [pc]	; a374 <__tStiffString_updateOscillators_veneer+0x4>
    a374:	08017231 	.word	0x08017231

0000a378 <__changeOversampling_veneer>:
    a378:	f85f f000 	ldr.w	pc, [pc]	; a37c <__changeOversampling_veneer+0x4>
    a37c:	08003b89 	.word	0x08003b89

0000a380 <__arm_sin_f32_veneer>:
    a380:	f85f f000 	ldr.w	pc, [pc]	; a384 <__arm_sin_f32_veneer+0x4>
    a384:	08000889 	.word	0x08000889

0000a388 <__setFilterTypes_veneer>:
    a388:	f85f f000 	ldr.w	pc, [pc]	; a38c <__setFilterTypes_veneer+0x4>
    a38c:	080020c1 	.word	0x080020c1

0000a390 <__fastSine_veneer>:
    a390:	f85f f000 	ldr.w	pc, [pc]	; a394 <__fastSine_veneer+0x4>
    a394:	08013cad 	.word	0x08013cad

0000a398 <__tSVF_tick_veneer>:
    a398:	f85f f000 	ldr.w	pc, [pc]	; a39c <__tSVF_tick_veneer+0x4>
    a39c:	0801155d 	.word	0x0801155d

0000a3a0 <__tTriLFO_setFreq_veneer>:
    a3a0:	f85f f000 	ldr.w	pc, [pc]	; a3a4 <__tTriLFO_setFreq_veneer+0x4>
    a3a4:	080151d9 	.word	0x080151d9

0000a3a8 <__tStiffString_pluck_veneer>:
    a3a8:	f85f f000 	ldr.w	pc, [pc]	; a3ac <__tStiffString_pluck_veneer+0x4>
    a3ac:	08017551 	.word	0x08017551

0000a3b0 <__tCrusher_setSamplingRatio_veneer>:
    a3b0:	f85f f000 	ldr.w	pc, [pc]	; a3b4 <__tCrusher_setSamplingRatio_veneer+0x4>
    a3b4:	08010369 	.word	0x08010369

0000a3b8 <__tPBSineTriangle_setShape_veneer>:
    a3b8:	f85f f000 	ldr.w	pc, [pc]	; a3bc <__tPBSineTriangle_setShape_veneer+0x4>
    a3bc:	08014921 	.word	0x08014921

0000a3c0 <__tSawSquareLFO_setPhase_veneer>:
    a3c0:	f85f f000 	ldr.w	pc, [pc]	; a3c4 <__tSawSquareLFO_setPhase_veneer+0x4>
    a3c4:	080150e5 	.word	0x080150e5

0000a3c8 <__tVoc_tick_veneer>:
    a3c8:	f85f f000 	ldr.w	pc, [pc]	; a3cc <__tVoc_tick_veneer+0x4>
    a3cc:	080186c9 	.word	0x080186c9

0000a3d0 <__tADSRT_on_veneer>:
    a3d0:	f85f f000 	ldr.w	pc, [pc]	; a3d4 <__tADSRT_on_veneer+0x4>
    a3d4:	080107d9 	.word	0x080107d9

0000a3d8 <__tExpSmooth_setFactor_veneer>:
    a3d8:	f85f f000 	ldr.w	pc, [pc]	; a3dc <__tExpSmooth_setFactor_veneer+0x4>
    a3dc:	08010d21 	.word	0x08010d21

0000a3e0 <__tDiodeFilter_tick_veneer>:
    a3e0:	f85f f000 	ldr.w	pc, [pc]	; a3e4 <__tDiodeFilter_tick_veneer+0x4>
    a3e4:	08012bed 	.word	0x08012bed

0000a3e8 <__dbToATableLookup_veneer>:
    a3e8:	f85f f000 	ldr.w	pc, [pc]	; a3ec <__dbToATableLookup_veneer+0x4>
    a3ec:	08000921 	.word	0x08000921

0000a3f0 <__tSimpleLivingString3_setLevMode_veneer>:
    a3f0:	f85f f000 	ldr.w	pc, [pc]	; a3f4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    a3f4:	080157ed 	.word	0x080157ed

0000a3f8 <__tDiodeFilter_tickEfficient_veneer>:
    a3f8:	f85f f000 	ldr.w	pc, [pc]	; a3fc <__tDiodeFilter_tickEfficient_veneer+0x4>
    a3fc:	08012fcd 	.word	0x08012fcd

0000a400 <__tSimpleLivingString3_setFreq_veneer>:
    a400:	f85f f000 	ldr.w	pc, [pc]	; a404 <__tSimpleLivingString3_setFreq_veneer+0x4>
    a404:	080156e1 	.word	0x080156e1

0000a408 <__tPBSaw_tick_veneer>:
    a408:	f85f f000 	ldr.w	pc, [pc]	; a40c <__tPBSaw_tick_veneer+0x4>
    a40c:	08014a8d 	.word	0x08014a8d

0000a410 <__tExpSmooth_free_veneer>:
    a410:	f85f f000 	ldr.w	pc, [pc]	; a414 <__tExpSmooth_free_veneer+0x4>
    a414:	08010d19 	.word	0x08010d19

0000a418 <__tPickupNonLinearity_tick_veneer>:
    a418:	f85f f000 	ldr.w	pc, [pc]	; a41c <__tPickupNonLinearity_tick_veneer+0x4>
    a41c:	080153c1 	.word	0x080153c1

0000a420 <__tTString_setHarmonicity_veneer>:
    a420:	f85f f000 	ldr.w	pc, [pc]	; a424 <__tTString_setHarmonicity_veneer+0x4>
    a424:	080170d5 	.word	0x080170d5

0000a428 <__tSimpleLivingString3_free_veneer>:
    a428:	f85f f000 	ldr.w	pc, [pc]	; a42c <__tSimpleLivingString3_free_veneer+0x4>
    a42c:	080156a1 	.word	0x080156a1

0000a430 <__tPBTriangle_setFreq_veneer>:
    a430:	f85f f000 	ldr.w	pc, [pc]	; a434 <__tPBTriangle_setFreq_veneer+0x4>
    a434:	080146e5 	.word	0x080146e5

0000a438 <__tPBSawSquare_setFreq_veneer>:
    a438:	f85f f000 	ldr.w	pc, [pc]	; a43c <__tPBSawSquare_setFreq_veneer+0x4>
    a43c:	08014bc9 	.word	0x08014bc9

0000a440 <__tStiffString_setStiffnessNoUpdate_veneer>:
    a440:	f85f f000 	ldr.w	pc, [pc]	; a444 <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    a444:	080175ed 	.word	0x080175ed

0000a448 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    a448:	f85f f000 	ldr.w	pc, [pc]	; a44c <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    a44c:	080157dd 	.word	0x080157dd

0000a450 <__tTString_setOpenStringFrequency_veneer>:
    a450:	f85f f000 	ldr.w	pc, [pc]	; a454 <__tTString_setOpenStringFrequency_veneer+0x4>
    a454:	08016cbd 	.word	0x08016cbd

0000a458 <__tSimpleLivingString3_setTargetLev_veneer>:
    a458:	f85f f000 	ldr.w	pc, [pc]	; a45c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    a45c:	080157d5 	.word	0x080157d5

0000a460 <__tCrusher_tick_veneer>:
    a460:	f85f f000 	ldr.w	pc, [pc]	; a464 <__tCrusher_tick_veneer+0x4>
    a464:	08010281 	.word	0x08010281

0000a468 <__tVoc_setAspirationNoiseGain_veneer>:
    a468:	f85f f000 	ldr.w	pc, [pc]	; a46c <__tVoc_setAspirationNoiseGain_veneer+0x4>
    a46c:	080187a9 	.word	0x080187a9

0000a470 <__tPBSaw_setFreq_veneer>:
    a470:	f85f f000 	ldr.w	pc, [pc]	; a474 <__tPBSaw_setFreq_veneer+0x4>
    a474:	08014add 	.word	0x08014add

0000a478 <__tVoc_set_tongue_shape_and_touch_veneer>:
    a478:	f85f f000 	ldr.w	pc, [pc]	; a47c <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    a47c:	08018a71 	.word	0x08018a71

0000a480 <__tIntPhasor_setFreq_veneer>:
    a480:	f85f f000 	ldr.w	pc, [pc]	; a484 <__tIntPhasor_setFreq_veneer+0x4>
    a484:	08014d31 	.word	0x08014d31

0000a488 <__tCycle_setPhase_veneer>:
    a488:	f85f f000 	ldr.w	pc, [pc]	; a48c <__tCycle_setPhase_veneer+0x4>
    a48c:	08014535 	.word	0x08014535

0000a490 <__tLadderFilter_setQ_veneer>:
    a490:	f85f f000 	ldr.w	pc, [pc]	; a494 <__tLadderFilter_setQ_veneer+0x4>
    a494:	080137d5 	.word	0x080137d5

0000a498 <__tVZFilterHS_setFreqFast_veneer>:
    a498:	f85f f000 	ldr.w	pc, [pc]	; a49c <__tVZFilterHS_setFreqFast_veneer+0x4>
    a49c:	08012501 	.word	0x08012501

0000a4a0 <__tTString_setInharmonic_veneer>:
    a4a0:	f85f f000 	ldr.w	pc, [pc]	; a4a4 <__tTString_setInharmonic_veneer+0x4>
    a4a4:	0801712d 	.word	0x0801712d

0000a4a8 <__tADSRT_tickNoInterp_veneer>:
    a4a8:	f85f f000 	ldr.w	pc, [pc]	; a4ac <__tADSRT_tickNoInterp_veneer+0x4>
    a4ac:	08010add 	.word	0x08010add

0000a4b0 <__tVoc_set_tractLength_veneer>:
    a4b0:	f85f f000 	ldr.w	pc, [pc]	; a4b4 <__tVoc_set_tractLength_veneer+0x4>
    a4b4:	0801877d 	.word	0x0801877d

0000a4b8 <__tPickupNonLinearity_free_veneer>:
    a4b8:	f85f f000 	ldr.w	pc, [pc]	; a4bc <__tPickupNonLinearity_free_veneer+0x4>
    a4bc:	080153b9 	.word	0x080153b9

0000a4c0 <__tNoise_tick_veneer>:
    a4c0:	f85f f000 	ldr.w	pc, [pc]	; a4c4 <__tNoise_tick_veneer+0x4>
    a4c4:	08014c3d 	.word	0x08014c3d

0000a4c8 <__tVZFilter_setGain_veneer>:
    a4c8:	f85f f000 	ldr.w	pc, [pc]	; a4cc <__tVZFilter_setGain_veneer+0x4>
    a4cc:	08011f35 	.word	0x08011f35

0000a4d0 <__tVZFilterLS_setFreqFast_veneer>:
    a4d0:	f85f f000 	ldr.w	pc, [pc]	; a4d4 <__tVZFilterLS_setFreqFast_veneer+0x4>
    a4d4:	08012219 	.word	0x08012219

0000a4d8 <__tTString_setFeedbackReactionSpeed_veneer>:
    a4d8:	f85f f000 	ldr.w	pc, [pc]	; a4dc <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    a4dc:	08016dc5 	.word	0x08016dc5

0000a4e0 <__tCrusher_setRound_veneer>:
    a4e0:	f85f f000 	ldr.w	pc, [pc]	; a4e4 <__tCrusher_setRound_veneer+0x4>
    a4e4:	08010361 	.word	0x08010361

0000a4e8 <__memset_veneer>:
    a4e8:	f85f f000 	ldr.w	pc, [pc]	; a4ec <__memset_veneer+0x4>
    a4ec:	08018c41 	.word	0x08018c41

0000a4f0 <__tLadderFilter_tick_veneer>:
    a4f0:	f85f f000 	ldr.w	pc, [pc]	; a4f4 <__tLadderFilter_tick_veneer+0x4>
    a4f4:	08013521 	.word	0x08013521

0000a4f8 <__tVZFilterLS_setGain_veneer>:
    a4f8:	f85f f000 	ldr.w	pc, [pc]	; a4fc <__tVZFilterLS_setGain_veneer+0x4>
    a4fc:	080122a5 	.word	0x080122a5

0000a500 <__arm_fir_interpolate_f32_veneer>:
    a500:	f85f f000 	ldr.w	pc, [pc]	; a504 <__arm_fir_interpolate_f32_veneer+0x4>
    a504:	08000771 	.word	0x08000771

0000a508 <__tIntPhasor_setPhase_veneer>:
    a508:	f85f f000 	ldr.w	pc, [pc]	; a50c <__tIntPhasor_setPhase_veneer+0x4>
    a50c:	08014d49 	.word	0x08014d49

0000a510 <__tStiffString_tick_veneer>:
    a510:	f85f f000 	ldr.w	pc, [pc]	; a514 <__tStiffString_tick_veneer+0x4>
    a514:	080174a9 	.word	0x080174a9

0000a518 <__LEAF_map_veneer>:
    a518:	f85f f000 	ldr.w	pc, [pc]	; a51c <__LEAF_map_veneer+0x4>
    a51c:	08013829 	.word	0x08013829

0000a520 <__tADSRT_tick_veneer>:
    a520:	f85f f000 	ldr.w	pc, [pc]	; a524 <__tADSRT_tick_veneer+0x4>
    a524:	08010819 	.word	0x08010819

0000a528 <__tPBSawSquare_tick_veneer>:
    a528:	f85f f000 	ldr.w	pc, [pc]	; a52c <__tPBSawSquare_tick_veneer+0x4>
    a52c:	08014b2d 	.word	0x08014b2d

0000a530 <__tVZFilter_setResonance_veneer>:
    a530:	f85f f000 	ldr.w	pc, [pc]	; a534 <__tVZFilter_setResonance_veneer+0x4>
    a534:	08011f6d 	.word	0x08011f6d

0000a538 <__tTString_setTensionGain_veneer>:
    a538:	f85f f000 	ldr.w	pc, [pc]	; a53c <__tTString_setTensionGain_veneer+0x4>
    a53c:	08016ca5 	.word	0x08016ca5

0000a540 <__tADSRT_off_veneer>:
    a540:	f85f f000 	ldr.w	pc, [pc]	; a544 <__tADSRT_off_veneer+0x4>
    a544:	080107fd 	.word	0x080107fd

0000a548 <__tVZFilterBell_setGain_veneer>:
    a548:	f85f f000 	ldr.w	pc, [pc]	; a54c <__tVZFilterBell_setGain_veneer+0x4>
    a54c:	08012a89 	.word	0x08012a89

0000a550 <__tStiffString_free_veneer>:
    a550:	f85f f000 	ldr.w	pc, [pc]	; a554 <__tStiffString_free_veneer+0x4>
    a554:	080171dd 	.word	0x080171dd

0000a558 <__tADSRT_setLeakFactor_veneer>:
    a558:	f85f f000 	ldr.w	pc, [pc]	; a55c <__tADSRT_setLeakFactor_veneer+0x4>
    a55c:	080107b5 	.word	0x080107b5

0000a560 <__tADSRT_setRelease_veneer>:
    a560:	f85f f000 	ldr.w	pc, [pc]	; a564 <__tADSRT_setRelease_veneer+0x4>
    a564:	0801078d 	.word	0x0801078d

0000a568 <__LEAF_shaper_veneer>:
    a568:	f85f f000 	ldr.w	pc, [pc]	; a56c <__LEAF_shaper_veneer+0x4>
    a56c:	08013b05 	.word	0x08013b05

0000a570 <__tStiffString_init_veneer>:
    a570:	f85f f000 	ldr.w	pc, [pc]	; a574 <__tStiffString_init_veneer+0x4>
    a574:	080174a1 	.word	0x080174a1

0000a578 <__LEAF_tanh_veneer>:
    a578:	f85f f000 	ldr.w	pc, [pc]	; a57c <__LEAF_tanh_veneer+0x4>
    a57c:	08013bd9 	.word	0x08013bd9

0000a580 <__tVZFilterHS_setResonance_veneer>:
    a580:	f85f f000 	ldr.w	pc, [pc]	; a584 <__tVZFilterHS_setResonance_veneer+0x4>
    a584:	080125e9 	.word	0x080125e9

0000a588 <__MX_SPI5_Init_veneer>:
    a588:	f85f f000 	ldr.w	pc, [pc]	; a58c <__MX_SPI5_Init_veneer+0x4>
    a58c:	080030e1 	.word	0x080030e1

0000a590 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    a590:	f85f f000 	ldr.w	pc, [pc]	; a594 <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    a594:	080187b5 	.word	0x080187b5

0000a598 <__tStiffString_setFreq_veneer>:
    a598:	f85f f000 	ldr.w	pc, [pc]	; a59c <__tStiffString_setFreq_veneer+0x4>
    a59c:	08017539 	.word	0x08017539

0000a5a0 <__tSawSquareLFO_setShape_veneer>:
    a5a0:	f85f f000 	ldr.w	pc, [pc]	; a5a4 <__tSawSquareLFO_setShape_veneer+0x4>
    a5a4:	08015149 	.word	0x08015149

0000a5a8 <__tVZFilterBell_setFreq_veneer>:
    a5a8:	f85f f000 	ldr.w	pc, [pc]	; a5ac <__tVZFilterBell_setFreq_veneer+0x4>
    a5ac:	080128bd 	.word	0x080128bd

0000a5b0 <__tSineTriLFO_setShape_veneer>:
    a5b0:	f85f f000 	ldr.w	pc, [pc]	; a5b4 <__tSineTriLFO_setShape_veneer+0x4>
    a5b4:	08015399 	.word	0x08015399

0000a5b8 <__tStiffString_mute_veneer>:
    a5b8:	f85f f000 	ldr.w	pc, [pc]	; a5bc <__tStiffString_mute_veneer+0x4>
    a5bc:	08017545 	.word	0x08017545

0000a5c0 <__tCrusher_setQuality_veneer>:
    a5c0:	f85f f000 	ldr.w	pc, [pc]	; a5c4 <__tCrusher_setQuality_veneer+0x4>
    a5c4:	08010315 	.word	0x08010315

0000a5c8 <__tVoc_setFreq_veneer>:
    a5c8:	f85f f000 	ldr.w	pc, [pc]	; a5cc <__tVoc_setFreq_veneer+0x4>
    a5cc:	08018771 	.word	0x08018771

0000a5d0 <__tTString_setPickupAmount_veneer>:
    a5d0:	f85f f000 	ldr.w	pc, [pc]	; a5d4 <__tTString_setPickupAmount_veneer+0x4>
    a5d4:	08016c01 	.word	0x08016c01

0000a5d8 <__tSquareLFO_setPulseWidth_veneer>:
    a5d8:	f85f f000 	ldr.w	pc, [pc]	; a5dc <__tSquareLFO_setPulseWidth_veneer+0x4>
    a5dc:	08014f2d 	.word	0x08014f2d

0000a5e0 <__tLinearDelay_setDelay_veneer>:
    a5e0:	f85f f000 	ldr.w	pc, [pc]	; a5e4 <__tLinearDelay_setDelay_veneer+0x4>
    a5e4:	0800fd55 	.word	0x0800fd55

0000a5e8 <__tTString_mute_veneer>:
    a5e8:	f85f f000 	ldr.w	pc, [pc]	; a5ec <__tTString_mute_veneer+0x4>
    a5ec:	08016c21 	.word	0x08016c21

0000a5f0 <__tSquareLFO_tick_veneer>:
    a5f0:	f85f f000 	ldr.w	pc, [pc]	; a5f4 <__tSquareLFO_tick_veneer+0x4>
    a5f4:	08014eb5 	.word	0x08014eb5

0000a5f8 <__tADSRT_clear_veneer>:
    a5f8:	f85f f000 	ldr.w	pc, [pc]	; a5fc <__tADSRT_clear_veneer+0x4>
    a5fc:	0801080d 	.word	0x0801080d

0000a600 <__tPickupNonLinearity_init_veneer>:
    a600:	f85f f000 	ldr.w	pc, [pc]	; a604 <__tPickupNonLinearity_init_veneer+0x4>
    a604:	080153a1 	.word	0x080153a1

0000a608 <__tADSRT_init_veneer>:
    a608:	f85f f000 	ldr.w	pc, [pc]	; a60c <__tADSRT_init_veneer+0x4>
    a60c:	08010659 	.word	0x08010659
