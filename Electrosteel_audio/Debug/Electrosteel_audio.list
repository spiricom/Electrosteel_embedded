
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001b548  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f918  0801b7e0  0801b7e0  0002b7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b0f8  0802b0f8  0005c280  2**0
                  CONTENTS
  4 .ARM          00000000  0802b0f8  0802b0f8  0005c280  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802b0f8  0802b0f8  0005c280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b0f8  0802b0f8  0003b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b0fc  0802b0fc  0003b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a24  20000000  0802b100  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d37c  20000a28  0802bb24  00060a28  2**3
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      0000be80  00000400  0802bb24  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001dda4  2001dda4  0005c280  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001dda4  2001dda4  0005c280  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  0005c280  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  0005c2ae  2**0
                  CONTENTS, READONLY
 21 .debug_info   0009aa73  00000000  00000000  0005c2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000b830  00000000  00000000  000f6d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0005ec1a  00000000  00000000  00102594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 000043b0  00000000  00000000  001611ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 0000a255  00000000  00000000  0016555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006b178  00000000  00000000  0016f7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    00015864  00000000  00000000  001da92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000f03c  00000000  00000000  001f0190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000a28 	.word	0x20000a28
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b748 	.word	0x0801b748

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000a2c 	.word	0x20000a2c
 80002d4:	0801b748 	.word	0x0801b748

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
 80002e8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
 80002ec:	4603      	mov	r3, r0
    if (x > 0.0f)
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dc12      	bgt.n	800031a <arm_atan2_f32+0x32>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 80002f4:	d450      	bmi.n	8000398 <arm_atan2_f32+0xb0>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 80002f6:	eef5 0a40 	vcmp.f32	s1, #0.0
 80002fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002fe:	f040 8135 	bne.w	800056c <arm_atan2_f32+0x284>
    {
        if (y > 0.0f)
 8000302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030a:	f300 808e 	bgt.w	800042a <arm_atan2_f32+0x142>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 800030e:	f140 812d 	bpl.w	800056c <arm_atan2_f32+0x284>
        {
            *result=-PIHALFF32;
 8000312:	4aac      	ldr	r2, [pc, #688]	; (80005c4 <arm_atan2_f32+0x2dc>)
            return(ARM_MATH_SUCCESS);
 8000314:	2000      	movs	r0, #0
            *result=-PIHALFF32;
 8000316:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8000318:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
 800031a:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 800031e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000326:	f100 80a9 	bmi.w	800047c <arm_atan2_f32+0x194>
   int sign=0;
 800032a:	2200      	movs	r2, #0
   if (x > 1.0f)
 800032c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000330:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000338:	dd7b      	ble.n	8000432 <arm_atan2_f32+0x14a>
      x = 1.0f / x;
 800033a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800033e:	eddf 2aa2 	vldr	s5, [pc, #648]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000342:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 80005cc <arm_atan2_f32+0x2e4>
 8000346:	eddf 3aa2 	vldr	s7, [pc, #648]	; 80005d0 <arm_atan2_f32+0x2e8>
 800034a:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 80005d4 <arm_atan2_f32+0x2ec>
 800034e:	eddf 4aa2 	vldr	s9, [pc, #648]	; 80005d8 <arm_atan2_f32+0x2f0>
 8000352:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 80005dc <arm_atan2_f32+0x2f4>
 8000356:	eddf 5aa2 	vldr	s11, [pc, #648]	; 80005e0 <arm_atan2_f32+0x2f8>
 800035a:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 80005e4 <arm_atan2_f32+0x2fc>
 800035e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000362:	eddf 7aa2 	vldr	s15, [pc, #648]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000366:	eea7 3a22 	vfma.f32	s6, s14, s5
 800036a:	eee7 3a03 	vfma.f32	s7, s14, s6
 800036e:	eea7 4a23 	vfma.f32	s8, s14, s7
 8000372:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000376:	eea7 5a24 	vfma.f32	s10, s14, s9
 800037a:	eee5 5a07 	vfma.f32	s11, s10, s14
 800037e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8000382:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000386:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 800038a:	b10a      	cbz	r2, 8000390 <arm_atan2_f32+0xa8>
     res = -res;
 800038c:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
 8000390:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
 8000392:	edc3 7a00 	vstr	s15, [r3]
        return(ARM_MATH_SUCCESS);
 8000396:	4770      	bx	lr
        if (y > 0.0f)
 8000398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800039c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a0:	dd70      	ble.n	8000484 <arm_atan2_f32+0x19c>
           *result=arm_atan_f32(y/x) + PI;
 80003a2:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 80003a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ae:	f100 80d9 	bmi.w	8000564 <arm_atan2_f32+0x27c>
   int sign=0;
 80003b2:	2200      	movs	r2, #0
   if (x > 1.0f)
 80003b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80003b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80003bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c0:	f340 80a8 	ble.w	8000514 <arm_atan2_f32+0x22c>
      x = 1.0f / x;
 80003c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003c8:	eddf 2a7f 	vldr	s5, [pc, #508]	; 80005c8 <arm_atan2_f32+0x2e0>
 80003cc:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 80005cc <arm_atan2_f32+0x2e4>
 80003d0:	eddf 3a7f 	vldr	s7, [pc, #508]	; 80005d0 <arm_atan2_f32+0x2e8>
 80003d4:	ed9f 4a7f 	vldr	s8, [pc, #508]	; 80005d4 <arm_atan2_f32+0x2ec>
 80003d8:	eddf 4a7f 	vldr	s9, [pc, #508]	; 80005d8 <arm_atan2_f32+0x2f0>
 80003dc:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 80005dc <arm_atan2_f32+0x2f4>
 80003e0:	eddf 5a7f 	vldr	s11, [pc, #508]	; 80005e0 <arm_atan2_f32+0x2f8>
 80003e4:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 80005e4 <arm_atan2_f32+0x2fc>
 80003e8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80003ec:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003f0:	eea7 3a22 	vfma.f32	s6, s14, s5
 80003f4:	eee7 3a03 	vfma.f32	s7, s14, s6
 80003f8:	eea7 4a23 	vfma.f32	s8, s14, s7
 80003fc:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000400:	eea7 5a24 	vfma.f32	s10, s14, s9
 8000404:	eee7 5a05 	vfma.f32	s11, s14, s10
 8000408:	eea7 6a25 	vfma.f32	s12, s14, s11
 800040c:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000410:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 8000414:	b10a      	cbz	r2, 800041a <arm_atan2_f32+0x132>
     res = -res;
 8000416:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 800041a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 800041e:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
 8000420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000424:	edc3 7a00 	vstr	s15, [r3]
 8000428:	4770      	bx	lr
            *result=PIHALFF32;
 800042a:	4a72      	ldr	r2, [pc, #456]	; (80005f4 <arm_atan2_f32+0x30c>)
            return(ARM_MATH_SUCCESS);
 800042c:	2000      	movs	r0, #0
            *result=PIHALFF32;
 800042e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8000430:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000432:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000436:	eddf 3a65 	vldr	s7, [pc, #404]	; 80005cc <arm_atan2_f32+0x2e4>
 800043a:	ed9f 4a65 	vldr	s8, [pc, #404]	; 80005d0 <arm_atan2_f32+0x2e8>
 800043e:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000442:	eddf 4a64 	vldr	s9, [pc, #400]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000446:	ed9f 5a64 	vldr	s10, [pc, #400]	; 80005d8 <arm_atan2_f32+0x2f0>
 800044a:	eddf 5a64 	vldr	s11, [pc, #400]	; 80005dc <arm_atan2_f32+0x2f4>
 800044e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000452:	eddf 6a64 	vldr	s13, [pc, #400]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000456:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80005e8 <arm_atan2_f32+0x300>
 800045a:	eea7 4aa3 	vfma.f32	s8, s15, s7
 800045e:	eee7 4a84 	vfma.f32	s9, s15, s8
 8000462:	eea7 5aa4 	vfma.f32	s10, s15, s9
 8000466:	eee7 5a85 	vfma.f32	s11, s15, s10
 800046a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800046e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8000472:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000476:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800047a:	e786      	b.n	800038a <arm_atan2_f32+0xa2>
      x=-x;
 800047c:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 8000480:	2201      	movs	r2, #1
 8000482:	e753      	b.n	800032c <arm_atan2_f32+0x44>
        else if (y < 0.0f)
 8000484:	d403      	bmi.n	800048e <arm_atan2_f32+0x1a6>
               *result= PI;
 8000486:	4a5c      	ldr	r2, [pc, #368]	; (80005f8 <arm_atan2_f32+0x310>)
        return(ARM_MATH_SUCCESS);
 8000488:	2000      	movs	r0, #0
               *result= PI;
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
 800048e:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 8000492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049a:	f100 808f 	bmi.w	80005bc <arm_atan2_f32+0x2d4>
   int sign=0;
 800049e:	2200      	movs	r2, #0
   if (x > 1.0f)
 80004a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80004a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80004a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ac:	dd61      	ble.n	8000572 <arm_atan2_f32+0x28a>
      x = 1.0f / x;
 80004ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004b2:	eddf 2a45 	vldr	s5, [pc, #276]	; 80005c8 <arm_atan2_f32+0x2e0>
 80004b6:	ed9f 3a45 	vldr	s6, [pc, #276]	; 80005cc <arm_atan2_f32+0x2e4>
 80004ba:	eddf 3a45 	vldr	s7, [pc, #276]	; 80005d0 <arm_atan2_f32+0x2e8>
 80004be:	ed9f 4a45 	vldr	s8, [pc, #276]	; 80005d4 <arm_atan2_f32+0x2ec>
 80004c2:	eddf 4a45 	vldr	s9, [pc, #276]	; 80005d8 <arm_atan2_f32+0x2f0>
 80004c6:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80005dc <arm_atan2_f32+0x2f4>
 80004ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80005e0 <arm_atan2_f32+0x2f8>
 80004ce:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80005e4 <arm_atan2_f32+0x2fc>
 80004d2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004d6:	eddf 7a45 	vldr	s15, [pc, #276]	; 80005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004da:	eea7 3a22 	vfma.f32	s6, s14, s5
 80004de:	eee7 3a03 	vfma.f32	s7, s14, s6
 80004e2:	eea7 4a23 	vfma.f32	s8, s14, s7
 80004e6:	eee7 4a04 	vfma.f32	s9, s14, s8
 80004ea:	eea7 5a24 	vfma.f32	s10, s14, s9
 80004ee:	eee7 5a05 	vfma.f32	s11, s14, s10
 80004f2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80004f6:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004fa:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 80004fe:	b10a      	cbz	r2, 8000504 <arm_atan2_f32+0x21c>
     res = -res;
 8000500:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 8000504:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 8000508:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
 800050a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800050e:	edc3 7a00 	vstr	s15, [r3]
 8000512:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000514:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000518:	eddf 3a2c 	vldr	s7, [pc, #176]	; 80005cc <arm_atan2_f32+0x2e4>
 800051c:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 80005d0 <arm_atan2_f32+0x2e8>
 8000520:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000524:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000528:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 80005d8 <arm_atan2_f32+0x2f0>
 800052c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80005dc <arm_atan2_f32+0x2f4>
 8000530:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000534:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000538:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80005e8 <arm_atan2_f32+0x300>
 800053c:	eea7 4aa3 	vfma.f32	s8, s15, s7
 8000540:	eee7 4a84 	vfma.f32	s9, s15, s8
 8000544:	eea7 5aa4 	vfma.f32	s10, s15, s9
 8000548:	eee7 5a85 	vfma.f32	s11, s15, s10
 800054c:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8000550:	eee7 6a86 	vfma.f32	s13, s15, s12
 8000554:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000558:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
 800055c:	2a00      	cmp	r2, #0
 800055e:	f43f af5c 	beq.w	800041a <arm_atan2_f32+0x132>
 8000562:	e758      	b.n	8000416 <arm_atan2_f32+0x12e>
      x=-x;
 8000564:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 8000568:	2201      	movs	r2, #1
 800056a:	e723      	b.n	80003b4 <arm_atan2_f32+0xcc>
        }
    }
    

    return(ARM_MATH_NANINF);
 800056c:	f06f 0003 	mvn.w	r0, #3

}
 8000570:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000572:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80005c8 <arm_atan2_f32+0x2e0>
 8000576:	eddf 3a15 	vldr	s7, [pc, #84]	; 80005cc <arm_atan2_f32+0x2e4>
 800057a:	ed9f 4a15 	vldr	s8, [pc, #84]	; 80005d0 <arm_atan2_f32+0x2e8>
 800057e:	eee7 3a87 	vfma.f32	s7, s15, s14
 8000582:	eddf 4a14 	vldr	s9, [pc, #80]	; 80005d4 <arm_atan2_f32+0x2ec>
 8000586:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80005d8 <arm_atan2_f32+0x2f0>
 800058a:	eddf 5a14 	vldr	s11, [pc, #80]	; 80005dc <arm_atan2_f32+0x2f4>
 800058e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80005e0 <arm_atan2_f32+0x2f8>
 8000592:	eddf 6a14 	vldr	s13, [pc, #80]	; 80005e4 <arm_atan2_f32+0x2fc>
 8000596:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80005e8 <arm_atan2_f32+0x300>
 800059a:	eea7 4aa3 	vfma.f32	s8, s15, s7
 800059e:	eee7 4a84 	vfma.f32	s9, s15, s8
 80005a2:	eea7 5aa4 	vfma.f32	s10, s15, s9
 80005a6:	eee7 5a85 	vfma.f32	s11, s15, s10
 80005aa:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80005ae:	eee7 6a86 	vfma.f32	s13, s15, s12
 80005b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80005b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80005ba:	e7a0      	b.n	80004fe <arm_atan2_f32+0x216>
      x=-x;
 80005bc:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 80005c0:	2201      	movs	r2, #1
 80005c2:	e76d      	b.n	80004a0 <arm_atan2_f32+0x1b8>
 80005c4:	bfc90fdb 	.word	0xbfc90fdb
 80005c8:	bd0492a5 	.word	0xbd0492a5
 80005cc:	3e0945e7 	.word	0x3e0945e7
 80005d0:	be32b708 	.word	0xbe32b708
 80005d4:	bca9fceb 	.word	0xbca9fceb
 80005d8:	3e5d693c 	.word	0x3e5d693c
 80005dc:	bb905643 	.word	0xbb905643
 80005e0:	beaa65e5 	.word	0xbeaa65e5
 80005e4:	b7c00cc9 	.word	0xb7c00cc9
 80005e8:	3f800001 	.word	0x3f800001
 80005ec:	3fc90fdb 	.word	0x3fc90fdb
 80005f0:	40490fdb 	.word	0x40490fdb
 80005f4:	3fc90fdb 	.word	0x3fc90fdb
 80005f8:	40490fdb 	.word	0x40490fdb

080005fc <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80005fc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8000600:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800068c <arm_cos_f32+0x90>

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000604:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000690 <arm_cos_f32+0x94>
  in = x * 0.159154943092f + 0.25f;
 8000608:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
 800060c:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8000610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
 8000614:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
 8000618:	d504      	bpl.n	8000624 <arm_cos_f32+0x28>
  {
    n--;
 800061a:	ee17 3a10 	vmov	r3, s14
 800061e:	3b01      	subs	r3, #1
 8000620:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000628:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000694 <arm_cos_f32+0x98>
  in = in - (float32_t) n;
 800062c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000630:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
 8000634:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000638:	ee17 3a10 	vmov	r3, s14
 800063c:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800063e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000642:	d21a      	bcs.n	800067a <arm_cos_f32+0x7e>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000644:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 8000648:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 800064a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800064e:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8000652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <arm_cos_f32+0x9c>)
  b = sinTable_f32[index+1];
 8000658:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 800065c:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 8000660:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 8000664:	ed91 6a00 	vldr	s12, [r1]
 8000668:	edd2 6a00 	vldr	s13, [r2]
 800066c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000670:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (cosVal);
}
 8000674:	eea7 0a26 	vfma.f32	s0, s14, s13
 8000678:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800067a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800067e:	2101      	movs	r1, #1
 8000680:	2300      	movs	r3, #0
 8000682:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800069c <arm_cos_f32+0xa0>
 8000686:	eeb0 0a67 	vmov.f32	s0, s15
 800068a:	e7e2      	b.n	8000652 <arm_cos_f32+0x56>
 800068c:	3e22f983 	.word	0x3e22f983
 8000690:	bfc90fdb 	.word	0xbfc90fdb
 8000694:	44000000 	.word	0x44000000
 8000698:	0801b7e0 	.word	0x0801b7e0
 800069c:	00000000 	.word	0x00000000

080006a0 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80006a0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000728 <arm_sin_f32+0x88>
 80006a4:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80006a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
 80006ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
 80006b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b4:	d504      	bpl.n	80006c0 <arm_sin_f32+0x20>
  {
    n--;
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	3b01      	subs	r3, #1
 80006bc:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80006c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80006c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800072c <arm_sin_f32+0x8c>
  in = in - (float32_t) n;
 80006c8:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80006cc:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
 80006d0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80006d4:	ee17 3a10 	vmov	r3, s14
 80006d8:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80006da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006de:	d21a      	bcs.n	8000716 <arm_sin_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80006e0:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 80006e4:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 80006e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006ea:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 80006ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <arm_sin_f32+0x90>)
  b = sinTable_f32[index+1];
 80006f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 80006f8:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 80006fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 8000700:	ed91 6a00 	vldr	s12, [r1]
 8000704:	edd2 6a00 	vldr	s13, [r2]
 8000708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800070c:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (sinVal);
}
 8000710:	eea7 0a26 	vfma.f32	s0, s14, s13
 8000714:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000716:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800071a:	2101      	movs	r1, #1
 800071c:	2300      	movs	r3, #0
 800071e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000734 <arm_sin_f32+0x94>
 8000722:	eeb0 0a67 	vmov.f32	s0, s15
 8000726:	e7e2      	b.n	80006ee <arm_sin_f32+0x4e>
 8000728:	3e22f983 	.word	0x3e22f983
 800072c:	44000000 	.word	0x44000000
 8000730:	0801b7e0 	.word	0x0801b7e0
 8000734:	00000000 	.word	0x00000000

08000738 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000738:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <dbToATableLookup+0x68>)
{
 800073c:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <dbToATableLookup+0x6c>)
 8000742:	edd2 0a00 	vldr	s1, [r2]
 8000746:	ed93 7a00 	vldr	s14, [r3]
 800074a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80007a8 <dbToATableLookup+0x70>
 800074e:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8000752:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80007ac <dbToATableLookup+0x74>
 8000756:	f013 fd07 	bl	8014168 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 800075a:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 800075e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <dbToATableLookup+0x78>)
 8000764:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000768:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
 800076c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 8000770:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000776:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800077a:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
 800077c:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000780:	bf28      	it	cs
 8000782:	4601      	movcs	r1, r0
 8000784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000788:	ed93 7a00 	vldr	s14, [r3]
 800078c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000790:	edd2 6a00 	vldr	s13, [r2]
 8000794:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000798:	eea7 0a27 	vfma.f32	s0, s14, s15
 800079c:	bd08      	pop	{r3, pc}
 800079e:	bf00      	nop
 80007a0:	200011b4 	.word	0x200011b4
 80007a4:	200011b8 	.word	0x200011b8
 80007a8:	467ffc00 	.word	0x467ffc00
 80007ac:	00000000 	.word	0x00000000
 80007b0:	30002000 	.word	0x30002000

080007b4 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 80007b4:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80007b8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000814 <mtofTableLookup+0x60>
 80007bc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000818 <mtofTableLookup+0x64>
{
 80007c0:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80007c2:	f013 fcd1 	bl	8014168 <LEAF_clip>
 80007c6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800081c <mtofTableLookup+0x68>
 80007ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000820 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80007ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80007d4:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
 80007d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80007dc:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
 80007e0:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
 80007e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80007e8:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80007ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
 80007ee:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80007f2:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80007f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80007fa:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80007fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000802:	edd3 7a00 	vldr	s15, [r3]
 8000806:	edd2 6a00 	vldr	s13, [r2]
 800080a:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 800080e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000812:	bd08      	pop	{r3, pc}
 8000814:	43230000 	.word	0x43230000
 8000818:	c3230000 	.word	0xc3230000
 800081c:	42c80000 	.word	0x42c80000
 8000820:	46800000 	.word	0x46800000
 8000824:	30022000 	.word	0x30022000

08000828 <audioInit>:


void audioInit()
{
 8000828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 800082c:	4d91      	ldr	r5, [pc, #580]	; (8000a74 <audioInit+0x24c>)
 800082e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000832:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8000a78 <audioInit+0x250>
 8000836:	4628      	mov	r0, r5
 8000838:	4990      	ldr	r1, [pc, #576]	; (8000a7c <audioInit+0x254>)
 800083a:	4b91      	ldr	r3, [pc, #580]	; (8000a80 <audioInit+0x258>)
 800083c:	4c91      	ldr	r4, [pc, #580]	; (8000a84 <audioInit+0x25c>)
{
 800083e:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000842:	f018 fcfd 	bl	8019240 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000846:	462b      	mov	r3, r5
 8000848:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800084c:	498e      	ldr	r1, [pc, #568]	; (8000a88 <audioInit+0x260>)
 800084e:	488f      	ldr	r0, [pc, #572]	; (8000a8c <audioInit+0x264>)
 8000850:	f014 f82c 	bl	80148ac <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000854:	462b      	mov	r3, r5
 8000856:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 800085a:	498d      	ldr	r1, [pc, #564]	; (8000a90 <audioInit+0x268>)
 800085c:	488d      	ldr	r0, [pc, #564]	; (8000a94 <audioInit+0x26c>)
 800085e:	f014 f825 	bl	80148ac <tMempool_init>

	leaf.clearOnAllocation = 1;
 8000862:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800086c:	eddf 1a8a 	vldr	s3, [pc, #552]	; 8000a98 <audioInit+0x270>
 8000870:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8000a9c <audioInit+0x274>
 8000874:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8000aa0 <audioInit+0x278>
 8000878:	488a      	ldr	r0, [pc, #552]	; (8000aa4 <audioInit+0x27c>)
	leaf.clearOnAllocation = 1;
 800087a:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800087c:	f013 fd00 	bl	8014280 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
 8000880:	4b89      	ldr	r3, [pc, #548]	; (8000aa8 <audioInit+0x280>)
 8000882:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000884:	4989      	ldr	r1, [pc, #548]	; (8000aac <audioInit+0x284>)
 8000886:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
 800088a:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 800088c:	eddf 8a88 	vldr	s17, [pc, #544]	; 8000ab0 <audioInit+0x288>
		previousStringInputs[i]	= 0;
 8000890:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000892:	ed9f 8a88 	vldr	s16, [pc, #544]	; 8000ab4 <audioInit+0x28c>
		previousStringInputs[i]	= 0;
 8000896:	809a      	strh	r2, [r3, #4]
 8000898:	80da      	strh	r2, [r3, #6]
 800089a:	811a      	strh	r2, [r3, #8]
 800089c:	815a      	strh	r2, [r3, #10]
 800089e:	819a      	strh	r2, [r3, #12]
 80008a0:	81da      	strh	r2, [r3, #14]
 80008a2:	821a      	strh	r2, [r3, #16]
 80008a4:	825a      	strh	r2, [r3, #18]
 80008a6:	829a      	strh	r2, [r3, #20]
 80008a8:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80008aa:	4b83      	ldr	r3, [pc, #524]	; (8000ab8 <audioInit+0x290>)
 80008ac:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 80008ae:	f01a ff6f 	bl	801b790 <__randomNumber_veneer>
 80008b2:	eef0 7a48 	vmov.f32	s15, s16
 80008b6:	eee0 7a28 	vfma.f32	s15, s0, s17
 80008ba:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 80008be:	42ac      	cmp	r4, r5
 80008c0:	d1f5      	bne.n	80008ae <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 80008c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8000abc <audioInit+0x294>
 80008ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ce:	487c      	ldr	r0, [pc, #496]	; (8000ac0 <audioInit+0x298>)
 80008d0:	f013 fd40 	bl	8014354 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 80008d4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8000ac4 <audioInit+0x29c>
 80008d8:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8000ac8 <audioInit+0x2a0>
 80008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e0:	487a      	ldr	r0, [pc, #488]	; (8000acc <audioInit+0x2a4>)
 80008e2:	f013 fd5b 	bl	801439c <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 80008e6:	4b7a      	ldr	r3, [pc, #488]	; (8000ad0 <audioInit+0x2a8>)
 80008e8:	4a7a      	ldr	r2, [pc, #488]	; (8000ad4 <audioInit+0x2ac>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80008ea:	497b      	ldr	r1, [pc, #492]	; (8000ad8 <audioInit+0x2b0>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 80008ec:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 80008ee:	4b7b      	ldr	r3, [pc, #492]	; (8000adc <audioInit+0x2b4>)
 80008f0:	4a7b      	ldr	r2, [pc, #492]	; (8000ae0 <audioInit+0x2b8>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80008f2:	487c      	ldr	r0, [pc, #496]	; (8000ae4 <audioInit+0x2bc>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 80008f4:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 80008f6:	4b7c      	ldr	r3, [pc, #496]	; (8000ae8 <audioInit+0x2c0>)
 80008f8:	4a7c      	ldr	r2, [pc, #496]	; (8000aec <audioInit+0x2c4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80008fa:	6008      	str	r0, [r1, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000900:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8000af0 <audioInit+0x2c8>
 8000904:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8000af4 <audioInit+0x2cc>
 8000908:	487b      	ldr	r0, [pc, #492]	; (8000af8 <audioInit+0x2d0>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 800090a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800090c:	f013 fd70 	bl	80143f0 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000910:	4b7a      	ldr	r3, [pc, #488]	; (8000afc <audioInit+0x2d4>)
		numStringsThisBoard = 2;
 8000912:	2002      	movs	r0, #2
 8000914:	4c7a      	ldr	r4, [pc, #488]	; (8000b00 <audioInit+0x2d8>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000916:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
 8000918:	497a      	ldr	r1, [pc, #488]	; (8000b04 <audioInit+0x2dc>)
 800091a:	f104 0650 	add.w	r6, r4, #80	; 0x50
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 800091e:	4a7a      	ldr	r2, [pc, #488]	; (8000b08 <audioInit+0x2e0>)
 8000920:	005b      	lsls	r3, r3, #1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000922:	4d54      	ldr	r5, [pc, #336]	; (8000a74 <audioInit+0x24c>)
 8000924:	eddf 8a79 	vldr	s17, [pc, #484]	; 8000b0c <audioInit+0x2e4>
 8000928:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8000a9c <audioInit+0x274>
		numStringsThisBoard = 2;
 800092c:	7008      	strb	r0, [r1, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800092e:	eddf 0a77 	vldr	s1, [pc, #476]	; 8000b0c <audioInit+0x2e4>
 8000932:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8000a9c <audioInit+0x274>
 8000936:	494f      	ldr	r1, [pc, #316]	; (8000a74 <audioInit+0x24c>)
 8000938:	4875      	ldr	r0, [pc, #468]	; (8000b10 <audioInit+0x2e8>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 800093a:	6013      	str	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800093c:	f010 fc70 	bl	8011220 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000940:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 8000942:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000944:	eef0 0a68 	vmov.f32	s1, s17
 8000948:	4629      	mov	r1, r5
 800094a:	eeb0 0a48 	vmov.f32	s0, s16
 800094e:	f010 fc67 	bl	8011220 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 8000952:	42b4      	cmp	r4, r6
 8000954:	d1f4      	bne.n	8000940 <audioInit+0x118>
 8000956:	4c6f      	ldr	r4, [pc, #444]	; (8000b14 <audioInit+0x2ec>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000958:	4e46      	ldr	r6, [pc, #280]	; (8000a74 <audioInit+0x24c>)
 800095a:	eddf 8a6c 	vldr	s17, [pc, #432]	; 8000b0c <audioInit+0x2e4>
 800095e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000962:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8000a9c <audioInit+0x274>
 8000966:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000968:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 800096a:	eef0 0a68 	vmov.f32	s1, s17
 800096e:	4631      	mov	r1, r6
 8000970:	eeb0 0a48 	vmov.f32	s0, s16
 8000974:	f010 fc54 	bl	8011220 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000978:	42ac      	cmp	r4, r5
 800097a:	d1f4      	bne.n	8000966 <audioInit+0x13e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 800097c:	493d      	ldr	r1, [pc, #244]	; (8000a74 <audioInit+0x24c>)
 800097e:	eddf 0a66 	vldr	s1, [pc, #408]	; 8000b18 <audioInit+0x2f0>
 8000982:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8000a9c <audioInit+0x274>
 8000986:	4865      	ldr	r0, [pc, #404]	; (8000b1c <audioInit+0x2f4>)
 8000988:	f010 fc4a 	bl	8011220 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 800098c:	4939      	ldr	r1, [pc, #228]	; (8000a74 <audioInit+0x24c>)
 800098e:	eddf 0a64 	vldr	s1, [pc, #400]	; 8000b20 <audioInit+0x2f8>
 8000992:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8000b24 <audioInit+0x2fc>
 8000996:	4864      	ldr	r0, [pc, #400]	; (8000b28 <audioInit+0x300>)
 8000998:	f00f f9ea 	bl	800fd70 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 800099c:	4935      	ldr	r1, [pc, #212]	; (8000a74 <audioInit+0x24c>)
 800099e:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <audioInit+0x304>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80009a0:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80009a2:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8000b18 <audioInit+0x2f0>
 80009a6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8000a9c <audioInit+0x274>
 80009aa:	f104 0808 	add.w	r8, r4, #8
 80009ae:	4860      	ldr	r0, [pc, #384]	; (8000b30 <audioInit+0x308>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80009b0:	ed9f 9a60 	vldr	s18, [pc, #384]	; 8000b34 <audioInit+0x30c>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80009b4:	f010 fc34 	bl	8011220 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80009b8:	eddf 8a38 	vldr	s17, [pc, #224]	; 8000a9c <audioInit+0x274>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80009bc:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80009be:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8000ac4 <audioInit+0x29c>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 80009c2:	4f5d      	ldr	r7, [pc, #372]	; (8000b38 <audioInit+0x310>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 80009c4:	4e5d      	ldr	r6, [pc, #372]	; (8000b3c <audioInit+0x314>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80009c6:	eddf 0a56 	vldr	s1, [pc, #344]	; 8000b20 <audioInit+0x2f8>
 80009ca:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8000b24 <audioInit+0x2fc>
 80009ce:	485c      	ldr	r0, [pc, #368]	; (8000b40 <audioInit+0x318>)
 80009d0:	f00f f9ce 	bl	800fd70 <tEnvelopeFollower_init>
	audioInitAdditive();
 80009d4:	f01a ff00 	bl	801b7d8 <__audioInitAdditive_veneer>
	audioInitVocal();
 80009d8:	f01a fec2 	bl	801b760 <__audioInitVocal_veneer>
	audioInitSynth();
 80009dc:	f002 fd6c 	bl	80034b8 <audioInitSynth>
	audioInitString3();
 80009e0:	f01a fec2 	bl	801b768 <__audioInitString3_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80009e4:	eef0 1a49 	vmov.f32	s3, s18
 80009e8:	462b      	mov	r3, r5
 80009ea:	eeb0 1a68 	vmov.f32	s2, s17
 80009ee:	4620      	mov	r0, r4
 80009f0:	eef0 0a48 	vmov.f32	s1, s16
 80009f4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000a9c <audioInit+0x274>
 80009f8:	492a      	ldr	r1, [pc, #168]	; (8000aa4 <audioInit+0x27c>)
 80009fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fe:	f010 f8fb 	bl	8010bf8 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000a02:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000a06:	462a      	mov	r2, r5
 8000a08:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000b44 <audioInit+0x31c>
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	4638      	mov	r0, r7
 8000a10:	f011 fbda 	bl	80121c8 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000a14:	462a      	mov	r2, r5
 8000a16:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8000b48 <audioInit+0x320>
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000b4c <audioInit+0x324>
 8000a22:	f011 fbd1 	bl	80121c8 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 8000a26:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000b50 <audioInit+0x328>
 8000a2a:	f013 fdbd 	bl	80145a8 <faster_mtof>
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f011 fbce 	bl	80121d0 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000a34:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000b54 <audioInit+0x32c>
 8000a38:	f013 fdb6 	bl	80145a8 <faster_mtof>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000a3c:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000a3e:	4630      	mov	r0, r6
 8000a40:	f011 fbc6 	bl	80121d0 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000a44:	462a      	mov	r2, r5
 8000a46:	2100      	movs	r1, #0
 8000a48:	4843      	ldr	r0, [pc, #268]	; (8000b58 <audioInit+0x330>)
 8000a4a:	f014 fbb1 	bl	80151b0 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000a4e:	45a0      	cmp	r8, r4
 8000a50:	d1c8      	bne.n	80009e4 <audioInit+0x1bc>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	2100      	movs	r1, #0
 8000a58:	4840      	ldr	r0, [pc, #256]	; (8000b5c <audioInit+0x334>)
 8000a5a:	f018 fc81 	bl	8019360 <memset>
	}

	audioFrameFunction = audioFrameWaiting;
 8000a5e:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <audioInit+0x338>)
 8000a60:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <audioInit+0x33c>)
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameWaiting;
 8000a64:	601a      	str	r2, [r3, #0]

}
 8000a66:	ecbd 8b04 	vpop	{d8-d9}
 8000a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 8000a6e:	f003 bb65 	b.w	800413c <HAL_Delay>
 8000a72:	bf00      	nop
 8000a74:	20005298 	.word	0x20005298
 8000a78:	473b8000 	.word	0x473b8000
 8000a7c:	20005780 	.word	0x20005780
 8000a80:	00001c41 	.word	0x00001c41
 8000a84:	2000537c 	.word	0x2000537c
 8000a88:	24040000 	.word	0x24040000
 8000a8c:	200052ec 	.word	0x200052ec
 8000a90:	60000000 	.word	0x60000000
 8000a94:	20005294 	.word	0x20005294
 8000a98:	ba51b717 	.word	0xba51b717
 8000a9c:	00000000 	.word	0x00000000
 8000aa0:	3a83126f 	.word	0x3a83126f
 8000aa4:	200011bc 	.word	0x200011bc
 8000aa8:	20005364 	.word	0x20005364
 8000aac:	200051bc 	.word	0x200051bc
 8000ab0:	3ecccccd 	.word	0x3ecccccd
 8000ab4:	3f4ccccd 	.word	0x3f4ccccd
 8000ab8:	457ff000 	.word	0x457ff000
 8000abc:	3727c5ac 	.word	0x3727c5ac
 8000ac0:	30012000 	.word	0x30012000
 8000ac4:	42480000 	.word	0x42480000
 8000ac8:	c2b40000 	.word	0xc2b40000
 8000acc:	30002000 	.word	0x30002000
 8000ad0:	20001190 	.word	0x20001190
 8000ad4:	467ffca8 	.word	0x467ffca8
 8000ad8:	2000118c 	.word	0x2000118c
 8000adc:	200011b8 	.word	0x200011b8
 8000ae0:	42ea0af9 	.word	0x42ea0af9
 8000ae4:	3e27c37b 	.word	0x3e27c37b
 8000ae8:	200011b4 	.word	0x200011b4
 8000aec:	c6248fb7 	.word	0xc6248fb7
 8000af0:	4323d666 	.word	0x4323d666
 8000af4:	c323d666 	.word	0xc323d666
 8000af8:	30022000 	.word	0x30022000
 8000afc:	20014301 	.word	0x20014301
 8000b00:	20005244 	.word	0x20005244
 8000b04:	20000694 	.word	0x20000694
 8000b08:	200051d0 	.word	0x200051d0
 8000b0c:	3a03126f 	.word	0x3a03126f
 8000b10:	20014268 	.word	0x20014268
 8000b14:	20005330 	.word	0x20005330
 8000b18:	3c23d70a 	.word	0x3c23d70a
 8000b1c:	200011a8 	.word	0x200011a8
 8000b20:	3f7fd220 	.word	0x3f7fd220
 8000b24:	38d1b717 	.word	0x38d1b717
 8000b28:	200011a0 	.word	0x200011a0
 8000b2c:	200051c8 	.word	0x200051c8
 8000b30:	200011ac 	.word	0x200011ac
 8000b34:	43480000 	.word	0x43480000
 8000b38:	200052f8 	.word	0x200052f8
 8000b3c:	200052fc 	.word	0x200052fc
 8000b40:	200011a4 	.word	0x200011a4
 8000b44:	44bb8000 	.word	0x44bb8000
 8000b48:	3f666666 	.word	0x3f666666
 8000b4c:	44480000 	.word	0x44480000
 8000b50:	42e66666 	.word	0x42e66666
 8000b54:	42cccccd 	.word	0x42cccccd
 8000b58:	200052f0 	.word	0x200052f0
 8000b5c:	30000000 	.word	0x30000000
 8000b60:	20001194 	.word	0x20001194
 8000b64:	00001361 	.word	0x00001361

08000b68 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f003 fae5 	bl	800413c <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b76:	4903      	ldr	r1, [pc, #12]	; (8000b84 <audioStart+0x1c>)
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f008 fd21 	bl	80095c0 <HAL_SAI_Transmit_DMA>
 8000b7e:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <audioStart+0x20>)
 8000b80:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	30000000 	.word	0x30000000
 8000b88:	20014258 	.word	0x20014258

08000b8c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000b92:	b082      	sub	sp, #8
 8000b94:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9a:	483b      	ldr	r0, [pc, #236]	; (8000c88 <AudioCodec_init+0xfc>)
 8000b9c:	f005 fa90 	bl	80060c0 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000ba0:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000ba2:	4c3a      	ldr	r4, [pc, #232]	; (8000c8c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8000ba4:	f003 faca 	bl	800413c <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ba8:	4f39      	ldr	r7, [pc, #228]	; (8000c90 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8000baa:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bae:	4e39      	ldr	r6, [pc, #228]	; (8000c94 <AudioCodec_init+0x108>)
 8000bb0:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000bb2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000c9c <AudioCodec_init+0x110>
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	8833      	ldrh	r3, [r6, #0]
 8000bc2:	f005 fb9d 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bca:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bce:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8000bd0:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8000bd8:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bda:	8833      	ldrh	r3, [r6, #0]
 8000bdc:	f005 fb90 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8000bea:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bec:	2120      	movs	r1, #32
 8000bee:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8000bf0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bf2:	8833      	ldrh	r3, [r6, #0]
 8000bf4:	f005 fb84 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bfc:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c00:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8000c02:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c06:	2120      	movs	r1, #32
 8000c08:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8000c0a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c0c:	8833      	ldrh	r3, [r6, #0]
 8000c0e:	f005 fb77 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c16:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c1a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8000c1c:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c20:	2120      	movs	r1, #32
 8000c22:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8000c24:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c26:	8833      	ldrh	r3, [r6, #0]
 8000c28:	f005 fb6a 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c30:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c34:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8000c36:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8000c3e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c40:	8833      	ldrh	r3, [r6, #0]
 8000c42:	f005 fb5d 	bl	8006300 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c4a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c4e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8000c50:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c54:	2120      	movs	r1, #32
 8000c56:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8000c58:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c5a:	8833      	ldrh	r3, [r6, #0]
 8000c5c:	f005 fb50 	bl	8006300 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c60:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8000c62:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c66:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c68:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000c72:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c74:	2120      	movs	r1, #32
 8000c76:	f005 fb43 	bl	8006300 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <AudioCodec_init+0x10c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

}
 8000c80:	b002      	add	sp, #8
 8000c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c86:	bf00      	nop
 8000c88:	58020800 	.word	0x58020800
 8000c8c:	20014270 	.word	0x20014270
 8000c90:	200006a0 	.word	0x200006a0
 8000c94:	200006a4 	.word	0x200006a4
 8000c98:	200011b0 	.word	0x200011b0
 8000c9c:	20014272 	.word	0x20014272

08000ca0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	200c      	movs	r0, #12
{
 8000ca8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000cae:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb0:	f044 0401 	orr.w	r4, r4, #1
 8000cb4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8000cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000cc4:	f003 fa6e 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cc8:	200c      	movs	r0, #12
 8000cca:	f003 faa9 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2109      	movs	r1, #9
 8000cd2:	200d      	movs	r0, #13
 8000cd4:	f003 fa66 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cd8:	200d      	movs	r0, #13
 8000cda:	f003 faa1 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	200e      	movs	r0, #14
 8000ce4:	f003 fa5e 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce8:	200e      	movs	r0, #14
 8000cea:	f003 fa99 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f003 fa56 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f003 fa91 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2010      	movs	r0, #16
 8000d02:	4611      	mov	r1, r2
 8000d04:	f003 fa4e 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d08:	2010      	movs	r0, #16

}
 8000d0a:	b002      	add	sp, #8
 8000d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d10:	f003 ba86 	b.w	8004220 <HAL_NVIC_EnableIRQ>
 8000d14:	58024400 	.word	0x58024400

08000d18 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d18:	481b      	ldr	r0, [pc, #108]	; (8000d88 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d1a:	2300      	movs	r3, #0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000d1c:	2206      	movs	r2, #6
  SdramTiming.LoadToActiveDelay = 2;
 8000d1e:	2102      	movs	r1, #2
{
 8000d20:	b510      	push	{r4, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d22:	6043      	str	r3, [r0, #4]
{
 8000d24:	b088      	sub	sp, #32
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d26:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d28:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000d2a:	2304      	movs	r3, #4
  SdramTiming.RowCycleDelay = 6;
 8000d2c:	9203      	str	r2, [sp, #12]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d2e:	4c17      	ldr	r4, [pc, #92]	; (8000d8c <MX_FMC_Init+0x74>)
  SdramTiming.LoadToActiveDelay = 2;
 8000d30:	9100      	str	r1, [sp, #0]
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8000d32:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d34:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d36:	6004      	str	r4, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 8000d38:	e9cd 2301 	strd	r2, r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000d44:	2201      	movs	r2, #1
 8000d46:	2308      	movs	r3, #8
 8000d48:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000d58:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000d5c:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000d62:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d64:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d66:	f009 fd0d 	bl	800a784 <HAL_SDRAM_Init>
 8000d6a:	b928      	cbnz	r0, 8000d78 <MX_FMC_Init+0x60>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000d6c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000d70:	f003 f9fc 	bl	800416c <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d74:	b008      	add	sp, #32
 8000d76:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8000d78:	f001 fffc 	bl	8002d74 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000d7c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000d80:	f003 f9f4 	bl	800416c <HAL_SetFMCMemorySwappingConfig>
}
 8000d84:	b008      	add	sp, #32
 8000d86:	bd10      	pop	{r4, pc}
 8000d88:	20014278 	.word	0x20014278
 8000d8c:	52004140 	.word	0x52004140

08000d90 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000d90:	4836      	ldr	r0, [pc, #216]	; (8000e6c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d94:	b5d0      	push	{r4, r6, r7, lr}
 8000d96:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8000d98:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000da2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8000da4:	b109      	cbz	r1, 8000daa <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000da6:	b038      	add	sp, #224	; 0xe0
 8000da8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8000daa:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8000dae:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	a80a      	add	r0, sp, #40	; 0x28
 8000db2:	f018 fad5 	bl	8019360 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dba:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000dbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f006 feff 	bl	8007bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d14c      	bne.n	8000e64 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dcc:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8000dd0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dd4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dd8:	2600      	movs	r6, #0
 8000dda:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000de0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000df2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000df4:	a902      	add	r1, sp, #8
 8000df6:	481f      	ldr	r0, [pc, #124]	; (8000e74 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000df8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfe:	f005 f80f 	bl	8005e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000e02:	2219      	movs	r2, #25
 8000e04:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	a902      	add	r1, sp, #8
 8000e08:	481b      	ldr	r0, [pc, #108]	; (8000e78 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e10:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f005 f804 	bl	8005e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000e18:	f248 1237 	movw	r2, #33079	; 0x8137
 8000e1c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1e:	a902      	add	r1, sp, #8
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e22:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e28:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2c:	f004 fff8 	bl	8005e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e30:	f64f 7283 	movw	r2, #65411	; 0xff83
 8000e34:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e36:	a902      	add	r1, sp, #8
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e3a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e40:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e44:	f004 ffec 	bl	8005e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e48:	f24c 7203 	movw	r2, #50947	; 0xc703
 8000e4c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4e:	a902      	add	r1, sp, #8
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e52:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e58:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f004 ffe0 	bl	8005e20 <HAL_GPIO_Init>
}
 8000e60:	b038      	add	sp, #224	; 0xe0
 8000e62:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8000e64:	f001 ff86 	bl	8002d74 <Error_Handler>
 8000e68:	e7af      	b.n	8000dca <HAL_SDRAM_MspInit+0x3a>
 8000e6a:	bf00      	nop
 8000e6c:	20014274 	.word	0x20014274
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58021400 	.word	0x58021400
 8000e78:	58020800 	.word	0x58020800
 8000e7c:	58021800 	.word	0x58021800
 8000e80:	58021000 	.word	0x58021000
 8000e84:	58020c00 	.word	0x58020c00

08000e88 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8c:	4b79      	ldr	r3, [pc, #484]	; (8001074 <MX_GPIO_Init+0x1ec>)
{
 8000e8e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e92:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800108c <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e96:	4f78      	ldr	r7, [pc, #480]	; (8001078 <MX_GPIO_Init+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e9e:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ea0:	4e76      	ldr	r6, [pc, #472]	; (800107c <MX_GPIO_Init+0x1f4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000ea8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb0:	f042 0210 	orr.w	r2, r2, #16
 8000eb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ebc:	f002 0210 	and.w	r2, r2, #16
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec8:	f042 0204 	orr.w	r2, r2, #4
 8000ecc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ed4:	f002 0204 	and.w	r2, r2, #4
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ee0:	f042 0220 	orr.w	r2, r2, #32
 8000ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eec:	f002 0220 	and.w	r2, r2, #32
 8000ef0:	9202      	str	r2, [sp, #8]
 8000ef2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000efc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f04:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f08:	9203      	str	r2, [sp, #12]
 8000f0a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f10:	f042 0201 	orr.w	r2, r2, #1
 8000f14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f1c:	f002 0201 	and.w	r2, r2, #1
 8000f20:	9204      	str	r2, [sp, #16]
 8000f22:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f34:	f002 0202 	and.w	r2, r2, #2
 8000f38:	9205      	str	r2, [sp, #20]
 8000f3a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f4c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000f50:	9206      	str	r2, [sp, #24]
 8000f52:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f58:	f042 0208 	orr.w	r2, r2, #8
 8000f5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f60:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	9307      	str	r3, [sp, #28]
 8000f6c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f6e:	f005 f8a7 	bl	80060c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f72:	4622      	mov	r2, r4
 8000f74:	4638      	mov	r0, r7
 8000f76:	2102      	movs	r1, #2
 8000f78:	f005 f8a2 	bl	80060c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	4630      	mov	r0, r6
 8000f80:	2110      	movs	r1, #16
 8000f82:	f005 f89d 	bl	80060c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000f86:	f242 0220 	movw	r2, #8224	; 0x2020
 8000f8a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	a908      	add	r1, sp, #32
 8000f8e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f004 ff43 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	a908      	add	r1, sp, #32
 8000fa0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fa2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f004 ff39 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000fae:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8000fb2:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000fba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f004 ff2f 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc8:	a908      	add	r1, sp, #32
 8000fca:	482d      	ldr	r0, [pc, #180]	; (8001080 <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd2:	f004 ff25 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	a908      	add	r1, sp, #32
 8000fdc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f004 ff1c 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fe8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	a908      	add	r1, sp, #32
 8000fec:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fee:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f004 ff13 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000ffa:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8000ffe:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	4638      	mov	r0, r7
 8001002:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8001006:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f004 ff09 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800100e:	f24f 32e5 	movw	r2, #62437	; 0xf3e5
 8001012:	2303      	movs	r3, #3
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	a908      	add	r1, sp, #32
 8001016:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f004 feff 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001022:	2202      	movs	r2, #2
 8001024:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	a908      	add	r1, sp, #32
 8001028:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800102c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f004 fef6 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001034:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8001038:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	a908      	add	r1, sp, #32
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001040:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f004 feec 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001048:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 800104c:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104e:	a908      	add	r1, sp, #32
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001054:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f004 fee2 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800105c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	a908      	add	r1, sp, #32
 8001060:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f004 fed9 	bl	8005e20 <HAL_GPIO_Init>

}
 800106e:	b00e      	add	sp, #56	; 0x38
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001074:	58024400 	.word	0x58024400
 8001078:	58020000 	.word	0x58020000
 800107c:	58020400 	.word	0x58020400
 8001080:	58021400 	.word	0x58021400
 8001084:	58020c00 	.word	0x58020c00
 8001088:	58021800 	.word	0x58021800
 800108c:	58020800 	.word	0x58020800

08001090 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001090:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	2300      	movs	r3, #0
 8001096:	4917      	ldr	r1, [pc, #92]	; (80010f4 <MX_I2C2_Init+0x64>)
 8001098:	2401      	movs	r4, #1
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 80010a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010aa:	f005 f8cb 	bl	8006244 <HAL_I2C_Init>
 80010ae:	b950      	cbnz	r0, 80010c6 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <MX_I2C2_Init+0x60>)
 80010b4:	f005 fe38 	bl	8006d28 <HAL_I2CEx_ConfigAnalogFilter>
 80010b8:	b968      	cbnz	r0, 80010d6 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_I2C2_Init+0x60>)
 80010be:	f005 fe67 	bl	8006d90 <HAL_I2CEx_ConfigDigitalFilter>
 80010c2:	b980      	cbnz	r0, 80010e6 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010c6:	f001 fe55 	bl	8002d74 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MX_I2C2_Init+0x60>)
 80010ce:	f005 fe2b 	bl	8006d28 <HAL_I2CEx_ConfigAnalogFilter>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d0f1      	beq.n	80010ba <MX_I2C2_Init+0x2a>
    Error_Handler();
 80010d6:	f001 fe4d 	bl	8002d74 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_I2C2_Init+0x60>)
 80010de:	f005 fe57 	bl	8006d90 <HAL_I2CEx_ConfigDigitalFilter>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d0ee      	beq.n	80010c4 <MX_I2C2_Init+0x34>
}
 80010e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80010ea:	f001 be43 	b.w	8002d74 <Error_Handler>
 80010ee:	bf00      	nop
 80010f0:	200142ac 	.word	0x200142ac
 80010f4:	40005800 	.word	0x40005800
 80010f8:	00b03fdb 	.word	0x00b03fdb
 80010fc:	00000000 	.word	0x00000000

08001100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001100:	b510      	push	{r4, lr}
 8001102:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	2100      	movs	r1, #0
{
 8001106:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	22c0      	movs	r2, #192	; 0xc0
 800110a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	9106      	str	r1, [sp, #24]
 800110e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001112:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001116:	f018 f923 	bl	8019360 <memset>
  if(i2cHandle->Instance==I2C2)
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_I2C_MspInit+0xb8>)
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d001      	beq.n	8001126 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001122:	b038      	add	sp, #224	; 0xe0
 8001124:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001126:	2208      	movs	r2, #8
 8001128:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800112c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	f006 fd48 	bl	8007bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	2800      	cmp	r0, #0
 8001136:	d138      	bne.n	80011aa <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4c20      	ldr	r4, [pc, #128]	; (80011bc <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800113a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	a902      	add	r1, sp, #8
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800114c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001150:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001152:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001158:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80011b0 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001160:	2303      	movs	r3, #3
 8001162:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001166:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f004 fe59 	bl	8005e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800116e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800117a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800117c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001180:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800118c:	f003 f80a 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001190:	2021      	movs	r0, #33	; 0x21
 8001192:	f003 f845 	bl	8004220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	2022      	movs	r0, #34	; 0x22
 800119c:	f003 f802 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80011a0:	2022      	movs	r0, #34	; 0x22
 80011a2:	f003 f83d 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 80011a6:	b038      	add	sp, #224	; 0xe0
 80011a8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80011aa:	f001 fde3 	bl	8002d74 <Error_Handler>
 80011ae:	e7c3      	b.n	8001138 <HAL_I2C_MspInit+0x38>
 80011b0:	00000c00 	.word	0x00000c00
 80011b4:	00000012 	.word	0x00000012
 80011b8:	40005800 	.word	0x40005800
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58020400 	.word	0x58020400

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b530      	push	{r4, r5, lr}
 80011c6:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c8:	224c      	movs	r2, #76	; 0x4c
 80011ca:	2100      	movs	r1, #0
 80011cc:	a80c      	add	r0, sp, #48	; 0x30
 80011ce:	f018 f8c7 	bl	8019360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d2:	2220      	movs	r2, #32
 80011d4:	2100      	movs	r1, #0
 80011d6:	a804      	add	r0, sp, #16
 80011d8:	f018 f8c2 	bl	8019360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011dc:	2002      	movs	r0, #2
 80011de:	f005 fe03 	bl	8006de8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <SystemClock_Config+0xf0>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4a34      	ldr	r2, [pc, #208]	; (80012b8 <SystemClock_Config+0xf4>)
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ec:	f021 0101 	bic.w	r1, r1, #1
 80011f0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	6993      	ldr	r3, [r2, #24]
 80011fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	6993      	ldr	r3, [r2, #24]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800120c:	6993      	ldr	r3, [r2, #24]
 800120e:	049c      	lsls	r4, r3, #18
 8001210:	d5fc      	bpl.n	800120c <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <SystemClock_Config+0xf8>)
 8001214:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8001218:	f041 0102 	orr.w	r1, r1, #2
 800121c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001220:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800122e:	9103      	str	r1, [sp, #12]
 8001230:	6991      	ldr	r1, [r2, #24]
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemClock_Config+0xf0>)
 8001234:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001238:	6191      	str	r1, [r2, #24]
 800123a:	6992      	ldr	r2, [r2, #24]
 800123c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001240:	9203      	str	r2, [sp, #12]
 8001242:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <SystemClock_Config+0xf4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001246:	f041 0101 	orr.w	r1, r1, #1
 800124a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	9303      	str	r3, [sp, #12]
 8001254:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001256:	6993      	ldr	r3, [r2, #24]
 8001258:	0498      	lsls	r0, r3, #18
 800125a:	d5fc      	bpl.n	8001256 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800125e:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001260:	2021      	movs	r0, #33	; 0x21
 8001262:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001266:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001268:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800126c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001270:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001274:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001276:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800127a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 800127c:	2105      	movs	r1, #5
 800127e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001282:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001286:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f005 fe57 	bl	8006f3c <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001290:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001292:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800129a:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012a2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012a4:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ac:	f006 f9da 	bl	8007664 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80012b0:	b021      	add	sp, #132	; 0x84
 80012b2:	bd30      	pop	{r4, r5, pc}
 80012b4:	58000400 	.word	0x58000400
 80012b8:	58024800 	.word	0x58024800
 80012bc:	58024400 	.word	0x58024400

080012c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012c0:	b500      	push	{lr}
 80012c2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	22a4      	movs	r2, #164	; 0xa4
 80012c6:	2100      	movs	r1, #0
 80012c8:	a807      	add	r0, sp, #28
 80012ca:	f018 f849 	bl	8019360 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80012ce:	2019      	movs	r0, #25
 80012d0:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d4:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80012d6:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d8:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80012de:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012e0:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80012e2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001308 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80012e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80012ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80012f0:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80012f4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001310 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80012f8:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80012fa:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f006 fc61 	bl	8007bc4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001302:	b031      	add	sp, #196	; 0xc4
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
 8001308:	00011100 	.word	0x00011100
 800130c:	00000000 	.word	0x00000000
 8001310:	00000007 	.word	0x00000007
 8001314:	00000002 	.word	0x00000002

08001318 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
 8001318:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800131a:	2301      	movs	r3, #1
 800131c:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
 8001320:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001324:	b002      	add	sp, #8
 8001326:	4770      	bx	lr

08001328 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 800132c:	2301      	movs	r3, #1
{
 800132e:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8001330:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 8001334:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8001338:	b93b      	cbnz	r3, 800134a <getPresetNamesFromSDCard+0x22>
 800133a:	f8df a078 	ldr.w	sl, [pc, #120]	; 80013b4 <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f88a 3000 	strb.w	r3, [sl]
	return;
}
 8001344:	b009      	add	sp, #36	; 0x24
 8001346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <getPresetNamesFromSDCard+0x74>)
 800134c:	075a      	lsls	r2, r3, #29
 800134e:	f040 830c 	bne.w	800196a <getPresetNamesFromSDCard+0x642>
			audioOutBuffer[i] = 0;
 8001352:	2000      	movs	r0, #0
 8001354:	2100      	movs	r1, #0
 8001356:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800135a:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800135e:	429a      	cmp	r2, r3
 8001360:	d1fb      	bne.n	800135a <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
 8001362:	2400      	movs	r4, #0
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
 8001366:	2501      	movs	r5, #1
 8001368:	f8df a048 	ldr.w	sl, [pc, #72]	; 80013b4 <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
 800136c:	4620      	mov	r0, r4
		loadFailed = 0;
 800136e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8001370:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 8001374:	f00b fc34 	bl	800cbe0 <disk_initialize>
	    disk_status(0);
 8001378:	4620      	mov	r0, r4
 800137a:	f00b fc27 	bl	800cbcc <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800137e:	462a      	mov	r2, r5
 8001380:	4908      	ldr	r1, [pc, #32]	; (80013a4 <getPresetNamesFromSDCard+0x7c>)
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <getPresetNamesFromSDCard+0x80>)
 8001384:	f00d fe6a 	bl	800f05c <f_mount>
 8001388:	2800      	cmp	r0, #0
 800138a:	d1d8      	bne.n	800133e <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800138c:	4605      	mov	r5, r0
 800138e:	4e07      	ldr	r6, [pc, #28]	; (80013ac <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001390:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80013a4 <getPresetNamesFromSDCard+0x7c>
 8001394:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80013b8 <getPresetNamesFromSDCard+0x90>
 8001398:	4f05      	ldr	r7, [pc, #20]	; (80013b0 <getPresetNamesFromSDCard+0x88>)
 800139a:	e027      	b.n	80013ec <getPresetNamesFromSDCard+0xc4>
 800139c:	30000000 	.word	0x30000000
 80013a0:	20018540 	.word	0x20018540
 80013a4:	2001da30 	.word	0x2001da30
 80013a8:	2001d5cc 	.word	0x2001d5cc
 80013ac:	0801bfe4 	.word	0x0801bfe4
 80013b0:	20014324 	.word	0x20014324
 80013b4:	2001435c 	.word	0x2001435c
 80013b8:	200163c4 	.word	0x200163c4
					strcat(charBuf, "*.ebp");
 80013bc:	aa02      	add	r2, sp, #8
 80013be:	6830      	ldr	r0, [r6, #0]
 80013c0:	88b1      	ldrh	r1, [r6, #4]
 80013c2:	f10d 0c08 	add.w	ip, sp, #8
 80013c6:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
 80013c8:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
 80013ca:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
 80013ce:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
 80013d0:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
 80013d2:	4661      	mov	r1, ip
 80013d4:	f017 fff0 	bl	80193b8 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80013d8:	ab05      	add	r3, sp, #20
 80013da:	464a      	mov	r2, r9
 80013dc:	4641      	mov	r1, r8
 80013de:	4638      	mov	r0, r7
 80013e0:	f00e fb84 	bl	800faec <f_findfirst>
				if(res == FR_OK)
 80013e4:	b358      	cbz	r0, 800143e <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 80013e6:	3501      	adds	r5, #1
 80013e8:	2d40      	cmp	r5, #64	; 0x40
 80013ea:	d0a8      	beq.n	800133e <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
 80013ec:	220a      	movs	r2, #10
 80013ee:	a902      	add	r1, sp, #8
 80013f0:	4628      	mov	r0, r5
 80013f2:	f017 ff71 	bl	80192d8 <itoa>
				int len = ((strlen(charBuf)));
 80013f6:	a802      	add	r0, sp, #8
 80013f8:	f7fe ff6e 	bl	80002d8 <strlen>
				if (len == 1)
 80013fc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80013fe:	4603      	mov	r3, r0
				if (len == 1)
 8001400:	d1dc      	bne.n	80013bc <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
 8001402:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 8001406:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8001408:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
 800140c:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 800140e:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
 8001412:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
 8001414:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8001418:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 800141c:	f7fe ff5c 	bl	80002d8 <strlen>
 8001420:	a905      	add	r1, sp, #20
 8001422:	4603      	mov	r3, r0
 8001424:	88b2      	ldrh	r2, [r6, #4]
 8001426:	4419      	add	r1, r3
 8001428:	6830      	ldr	r0, [r6, #0]
 800142a:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800142c:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
 800142e:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001430:	4638      	mov	r0, r7
 8001432:	464a      	mov	r2, r9
 8001434:	4641      	mov	r1, r8
 8001436:	f00e fb59 	bl	800faec <f_findfirst>
				if(res == FR_OK)
 800143a:	2800      	cmp	r0, #0
 800143c:	d1d3      	bne.n	80013e6 <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800143e:	f8df b374 	ldr.w	fp, [pc, #884]	; 80017b4 <getPresetNamesFromSDCard+0x48c>
 8001442:	2211      	movs	r2, #17
 8001444:	49d7      	ldr	r1, [pc, #860]	; (80017a4 <getPresetNamesFromSDCard+0x47c>)
 8001446:	4658      	mov	r0, fp
 8001448:	f00d fe54 	bl	800f0f4 <f_open>
 800144c:	2800      	cmp	r0, #0
 800144e:	d1ca      	bne.n	80013e6 <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001450:	4cd5      	ldr	r4, [pc, #852]	; (80017a8 <getPresetNamesFromSDCard+0x480>)
 8001452:	ab01      	add	r3, sp, #4
 8001454:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001458:	4658      	mov	r0, fp
 800145a:	4621      	mov	r1, r4
 800145c:	f00d ffae 	bl	800f3bc <f_read>
						f_close(&SDFile);
 8001460:	4658      	mov	r0, fp
 8001462:	f00e fa43 	bl	800f8ec <f_close>
						if (buffer[bufferIndex] == 17)
 8001466:	7822      	ldrb	r2, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001468:	49d0      	ldr	r1, [pc, #832]	; (80017ac <getPresetNamesFromSDCard+0x484>)
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800146a:	20c8      	movs	r0, #200	; 0xc8
						if (buffer[bufferIndex] == 17)
 800146c:	f1a2 0211 	sub.w	r2, r2, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001470:	fb05 f000 	mul.w	r0, r5, r0
						if (buffer[bufferIndex] == 17)
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	0952      	lsrs	r2, r2, #5
 800147a:	0093      	lsls	r3, r2, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
 800147c:	f814 c022 	ldrb.w	ip, [r4, r2, lsl #2]
 8001480:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001484:	f801 c012 	strb.w	ip, [r1, r2, lsl #1]
 8001488:	f103 0c01 	add.w	ip, r3, #1
 800148c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001490:	4ac7      	ldr	r2, [pc, #796]	; (80017b0 <getPresetNamesFromSDCard+0x488>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001492:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001496:	f881 c001 	strb.w	ip, [r1, #1]
 800149a:	f103 0c02 	add.w	ip, r3, #2
 800149e:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014a2:	f881 c002 	strb.w	ip, [r1, #2]
 80014a6:	f103 0c03 	add.w	ip, r3, #3
 80014aa:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014ae:	f881 c003 	strb.w	ip, [r1, #3]
 80014b2:	f103 0c04 	add.w	ip, r3, #4
 80014b6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014ba:	f881 c004 	strb.w	ip, [r1, #4]
 80014be:	f103 0c05 	add.w	ip, r3, #5
 80014c2:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014c6:	f881 c005 	strb.w	ip, [r1, #5]
 80014ca:	f103 0c06 	add.w	ip, r3, #6
 80014ce:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014d2:	f881 c006 	strb.w	ip, [r1, #6]
 80014d6:	f103 0c07 	add.w	ip, r3, #7
 80014da:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014de:	f881 c007 	strb.w	ip, [r1, #7]
 80014e2:	f103 0c08 	add.w	ip, r3, #8
 80014e6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014ea:	f881 c008 	strb.w	ip, [r1, #8]
 80014ee:	f103 0c09 	add.w	ip, r3, #9
 80014f2:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80014f6:	f881 c009 	strb.w	ip, [r1, #9]
 80014fa:	f103 0c0a 	add.w	ip, r3, #10
 80014fe:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001502:	f881 c00a 	strb.w	ip, [r1, #10]
 8001506:	f103 0c0b 	add.w	ip, r3, #11
 800150a:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800150e:	f881 c00b 	strb.w	ip, [r1, #11]
 8001512:	f103 0c0c 	add.w	ip, r3, #12
 8001516:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800151a:	f881 c00c 	strb.w	ip, [r1, #12]
 800151e:	f103 0c0d 	add.w	ip, r3, #13
 8001522:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001526:	f881 c00d 	strb.w	ip, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800152a:	f103 010e 	add.w	r1, r3, #14
 800152e:	5c61      	ldrb	r1, [r4, r1]
 8001530:	5411      	strb	r1, [r2, r0]
 8001532:	f103 010f 	add.w	r1, r3, #15
 8001536:	4402      	add	r2, r0
 8001538:	5c61      	ldrb	r1, [r4, r1]
 800153a:	7051      	strb	r1, [r2, #1]
 800153c:	f103 0110 	add.w	r1, r3, #16
 8001540:	5c61      	ldrb	r1, [r4, r1]
 8001542:	7091      	strb	r1, [r2, #2]
 8001544:	f103 0111 	add.w	r1, r3, #17
 8001548:	5c61      	ldrb	r1, [r4, r1]
 800154a:	70d1      	strb	r1, [r2, #3]
 800154c:	f103 0112 	add.w	r1, r3, #18
 8001550:	5c61      	ldrb	r1, [r4, r1]
 8001552:	7111      	strb	r1, [r2, #4]
 8001554:	f103 0113 	add.w	r1, r3, #19
 8001558:	5c61      	ldrb	r1, [r4, r1]
 800155a:	7151      	strb	r1, [r2, #5]
 800155c:	f103 0114 	add.w	r1, r3, #20
 8001560:	5c61      	ldrb	r1, [r4, r1]
 8001562:	7191      	strb	r1, [r2, #6]
 8001564:	f103 0115 	add.w	r1, r3, #21
 8001568:	5c61      	ldrb	r1, [r4, r1]
 800156a:	71d1      	strb	r1, [r2, #7]
 800156c:	f103 0116 	add.w	r1, r3, #22
 8001570:	5c61      	ldrb	r1, [r4, r1]
 8001572:	7211      	strb	r1, [r2, #8]
 8001574:	f103 0117 	add.w	r1, r3, #23
 8001578:	5c61      	ldrb	r1, [r4, r1]
 800157a:	7291      	strb	r1, [r2, #10]
 800157c:	f103 0118 	add.w	r1, r3, #24
 8001580:	5c61      	ldrb	r1, [r4, r1]
 8001582:	72d1      	strb	r1, [r2, #11]
 8001584:	f103 0119 	add.w	r1, r3, #25
 8001588:	5c61      	ldrb	r1, [r4, r1]
 800158a:	7311      	strb	r1, [r2, #12]
 800158c:	f103 011a 	add.w	r1, r3, #26
 8001590:	5c61      	ldrb	r1, [r4, r1]
 8001592:	7351      	strb	r1, [r2, #13]
 8001594:	f103 011b 	add.w	r1, r3, #27
 8001598:	5c61      	ldrb	r1, [r4, r1]
 800159a:	7391      	strb	r1, [r2, #14]
 800159c:	f103 011c 	add.w	r1, r3, #28
 80015a0:	5c61      	ldrb	r1, [r4, r1]
 80015a2:	73d1      	strb	r1, [r2, #15]
 80015a4:	f103 011d 	add.w	r1, r3, #29
 80015a8:	5c61      	ldrb	r1, [r4, r1]
 80015aa:	7411      	strb	r1, [r2, #16]
 80015ac:	f103 011e 	add.w	r1, r3, #30
 80015b0:	5c61      	ldrb	r1, [r4, r1]
 80015b2:	7451      	strb	r1, [r2, #17]
 80015b4:	f103 011f 	add.w	r1, r3, #31
 80015b8:	5c61      	ldrb	r1, [r4, r1]
 80015ba:	7491      	strb	r1, [r2, #18]
 80015bc:	f103 0120 	add.w	r1, r3, #32
 80015c0:	5c61      	ldrb	r1, [r4, r1]
 80015c2:	7511      	strb	r1, [r2, #20]
 80015c4:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80015c8:	5c61      	ldrb	r1, [r4, r1]
 80015ca:	7551      	strb	r1, [r2, #21]
 80015cc:	f103 0122 	add.w	r1, r3, #34	; 0x22
 80015d0:	5c61      	ldrb	r1, [r4, r1]
 80015d2:	7591      	strb	r1, [r2, #22]
 80015d4:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80015d8:	5c61      	ldrb	r1, [r4, r1]
 80015da:	75d1      	strb	r1, [r2, #23]
 80015dc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80015e0:	5c61      	ldrb	r1, [r4, r1]
 80015e2:	7611      	strb	r1, [r2, #24]
 80015e4:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80015e8:	5c61      	ldrb	r1, [r4, r1]
 80015ea:	7651      	strb	r1, [r2, #25]
 80015ec:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80015f0:	5c61      	ldrb	r1, [r4, r1]
 80015f2:	7691      	strb	r1, [r2, #26]
 80015f4:	f103 0127 	add.w	r1, r3, #39	; 0x27
 80015f8:	5c61      	ldrb	r1, [r4, r1]
 80015fa:	76d1      	strb	r1, [r2, #27]
 80015fc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001600:	5c61      	ldrb	r1, [r4, r1]
 8001602:	7711      	strb	r1, [r2, #28]
 8001604:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8001608:	5c61      	ldrb	r1, [r4, r1]
 800160a:	7791      	strb	r1, [r2, #30]
 800160c:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8001610:	5c61      	ldrb	r1, [r4, r1]
 8001612:	77d1      	strb	r1, [r2, #31]
 8001614:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8001618:	5c61      	ldrb	r1, [r4, r1]
 800161a:	f882 1020 	strb.w	r1, [r2, #32]
 800161e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001622:	5c61      	ldrb	r1, [r4, r1]
 8001624:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8001628:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 800162c:	5c61      	ldrb	r1, [r4, r1]
 800162e:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 8001632:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8001636:	5c61      	ldrb	r1, [r4, r1]
 8001638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 800163c:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8001640:	5c61      	ldrb	r1, [r4, r1]
 8001642:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8001646:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800164a:	5c61      	ldrb	r1, [r4, r1]
 800164c:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 8001650:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8001654:	5c61      	ldrb	r1, [r4, r1]
 8001656:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800165a:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800165e:	5c61      	ldrb	r1, [r4, r1]
 8001660:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 8001664:	f103 0133 	add.w	r1, r3, #51	; 0x33
 8001668:	5c61      	ldrb	r1, [r4, r1]
 800166a:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 800166e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001672:	5c61      	ldrb	r1, [r4, r1]
 8001674:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 8001678:	f103 0135 	add.w	r1, r3, #53	; 0x35
 800167c:	5c61      	ldrb	r1, [r4, r1]
 800167e:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 8001682:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8001686:	5c61      	ldrb	r1, [r4, r1]
 8001688:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 800168c:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8001690:	5c61      	ldrb	r1, [r4, r1]
 8001692:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
 8001696:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800169a:	5c61      	ldrb	r1, [r4, r1]
 800169c:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 80016a0:	f103 0139 	add.w	r1, r3, #57	; 0x39
 80016a4:	5c61      	ldrb	r1, [r4, r1]
 80016a6:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 80016aa:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80016ae:	5c61      	ldrb	r1, [r4, r1]
 80016b0:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 80016b4:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 80016b8:	5c61      	ldrb	r1, [r4, r1]
 80016ba:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 80016be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80016c2:	5c61      	ldrb	r1, [r4, r1]
 80016c4:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
 80016c8:	f103 013d 	add.w	r1, r3, #61	; 0x3d
 80016cc:	5c61      	ldrb	r1, [r4, r1]
 80016ce:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
 80016d2:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 80016d6:	5c61      	ldrb	r1, [r4, r1]
 80016d8:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
 80016dc:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 80016e0:	5c61      	ldrb	r1, [r4, r1]
 80016e2:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
 80016e6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80016ea:	5c61      	ldrb	r1, [r4, r1]
 80016ec:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
 80016f0:	f103 0141 	add.w	r1, r3, #65	; 0x41
 80016f4:	5c61      	ldrb	r1, [r4, r1]
 80016f6:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 80016fa:	f103 0142 	add.w	r1, r3, #66	; 0x42
 80016fe:	5c61      	ldrb	r1, [r4, r1]
 8001700:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
 8001704:	f103 0143 	add.w	r1, r3, #67	; 0x43
 8001708:	5c61      	ldrb	r1, [r4, r1]
 800170a:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
 800170e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001712:	5c61      	ldrb	r1, [r4, r1]
 8001714:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8001718:	f103 0145 	add.w	r1, r3, #69	; 0x45
 800171c:	5c61      	ldrb	r1, [r4, r1]
 800171e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
 8001722:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001726:	5c61      	ldrb	r1, [r4, r1]
 8001728:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 800172c:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8001730:	5c61      	ldrb	r1, [r4, r1]
 8001732:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
 8001736:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800173a:	5c61      	ldrb	r1, [r4, r1]
 800173c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8001740:	f103 0149 	add.w	r1, r3, #73	; 0x49
 8001744:	5c61      	ldrb	r1, [r4, r1]
 8001746:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 800174a:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 800174e:	5c61      	ldrb	r1, [r4, r1]
 8001750:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 8001754:	f103 014b 	add.w	r1, r3, #75	; 0x4b
 8001758:	5c61      	ldrb	r1, [r4, r1]
 800175a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800175e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001762:	5c61      	ldrb	r1, [r4, r1]
 8001764:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8001768:	f103 014d 	add.w	r1, r3, #77	; 0x4d
 800176c:	5c61      	ldrb	r1, [r4, r1]
 800176e:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8001772:	f103 014e 	add.w	r1, r3, #78	; 0x4e
 8001776:	5c61      	ldrb	r1, [r4, r1]
 8001778:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
 800177c:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 8001780:	5c61      	ldrb	r1, [r4, r1]
 8001782:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 8001786:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800178a:	5c61      	ldrb	r1, [r4, r1]
 800178c:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
 8001790:	f103 0151 	add.w	r1, r3, #81	; 0x51
 8001794:	5c61      	ldrb	r1, [r4, r1]
 8001796:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 800179a:	f103 0152 	add.w	r1, r3, #82	; 0x52
 800179e:	5c61      	ldrb	r1, [r4, r1]
 80017a0:	e00a      	b.n	80017b8 <getPresetNamesFromSDCard+0x490>
 80017a2:	bf00      	nop
 80017a4:	200163da 	.word	0x200163da
 80017a8:	30042380 	.word	0x30042380
 80017ac:	30042000 	.word	0x30042000
 80017b0:	30043380 	.word	0x30043380
 80017b4:	2001d800 	.word	0x2001d800
 80017b8:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
 80017bc:	f103 0153 	add.w	r1, r3, #83	; 0x53
 80017c0:	5c61      	ldrb	r1, [r4, r1]
 80017c2:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
 80017c6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80017ca:	5c61      	ldrb	r1, [r4, r1]
 80017cc:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
 80017d0:	f103 0155 	add.w	r1, r3, #85	; 0x55
 80017d4:	5c61      	ldrb	r1, [r4, r1]
 80017d6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 80017da:	f103 0156 	add.w	r1, r3, #86	; 0x56
 80017de:	5c61      	ldrb	r1, [r4, r1]
 80017e0:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
 80017e4:	f103 0157 	add.w	r1, r3, #87	; 0x57
 80017e8:	5c61      	ldrb	r1, [r4, r1]
 80017ea:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
 80017ee:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80017f2:	5c61      	ldrb	r1, [r4, r1]
 80017f4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 80017f8:	f103 0159 	add.w	r1, r3, #89	; 0x59
 80017fc:	5c61      	ldrb	r1, [r4, r1]
 80017fe:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8001802:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8001806:	5c61      	ldrb	r1, [r4, r1]
 8001808:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 800180c:	f103 015b 	add.w	r1, r3, #91	; 0x5b
 8001810:	5c61      	ldrb	r1, [r4, r1]
 8001812:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 8001816:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 800181a:	5c61      	ldrb	r1, [r4, r1]
 800181c:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8001820:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 8001824:	5c61      	ldrb	r1, [r4, r1]
 8001826:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 800182a:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800182e:	5c61      	ldrb	r1, [r4, r1]
 8001830:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8001834:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001838:	5c61      	ldrb	r1, [r4, r1]
 800183a:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 800183e:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8001842:	5c61      	ldrb	r1, [r4, r1]
 8001844:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8001848:	f103 0161 	add.w	r1, r3, #97	; 0x61
 800184c:	5c61      	ldrb	r1, [r4, r1]
 800184e:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
 8001852:	f103 0162 	add.w	r1, r3, #98	; 0x62
 8001856:	5c61      	ldrb	r1, [r4, r1]
 8001858:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 800185c:	f103 0163 	add.w	r1, r3, #99	; 0x63
 8001860:	5c61      	ldrb	r1, [r4, r1]
 8001862:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
 8001866:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800186a:	5c61      	ldrb	r1, [r4, r1]
 800186c:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
 8001870:	f103 0165 	add.w	r1, r3, #101	; 0x65
 8001874:	5c61      	ldrb	r1, [r4, r1]
 8001876:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
 800187a:	f103 0166 	add.w	r1, r3, #102	; 0x66
 800187e:	5c61      	ldrb	r1, [r4, r1]
 8001880:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
 8001884:	f103 0167 	add.w	r1, r3, #103	; 0x67
 8001888:	5c61      	ldrb	r1, [r4, r1]
 800188a:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
 800188e:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8001892:	5c61      	ldrb	r1, [r4, r1]
 8001894:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
 8001898:	f103 0169 	add.w	r1, r3, #105	; 0x69
 800189c:	5c61      	ldrb	r1, [r4, r1]
 800189e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
 80018a2:	f103 016a 	add.w	r1, r3, #106	; 0x6a
 80018a6:	5c61      	ldrb	r1, [r4, r1]
 80018a8:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 80018ac:	f103 016b 	add.w	r1, r3, #107	; 0x6b
 80018b0:	5c61      	ldrb	r1, [r4, r1]
 80018b2:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
 80018b6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80018ba:	5c61      	ldrb	r1, [r4, r1]
 80018bc:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
 80018c0:	f103 016d 	add.w	r1, r3, #109	; 0x6d
 80018c4:	5c61      	ldrb	r1, [r4, r1]
 80018c6:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
 80018ca:	f103 016e 	add.w	r1, r3, #110	; 0x6e
 80018ce:	5c61      	ldrb	r1, [r4, r1]
 80018d0:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
 80018d4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80018d8:	5c61      	ldrb	r1, [r4, r1]
 80018da:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
 80018de:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80018e2:	5c61      	ldrb	r1, [r4, r1]
 80018e4:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 80018e8:	f103 0171 	add.w	r1, r3, #113	; 0x71
 80018ec:	5c61      	ldrb	r1, [r4, r1]
 80018ee:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
 80018f2:	f103 0172 	add.w	r1, r3, #114	; 0x72
 80018f6:	5c61      	ldrb	r1, [r4, r1]
 80018f8:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 80018fc:	f103 0173 	add.w	r1, r3, #115	; 0x73
 8001900:	5c61      	ldrb	r1, [r4, r1]
 8001902:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
 8001906:	f103 0174 	add.w	r1, r3, #116	; 0x74
 800190a:	5c61      	ldrb	r1, [r4, r1]
 800190c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
 8001910:	f103 0175 	add.w	r1, r3, #117	; 0x75
 8001914:	5c61      	ldrb	r1, [r4, r1]
 8001916:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
 800191a:	f103 0176 	add.w	r1, r3, #118	; 0x76
 800191e:	5c61      	ldrb	r1, [r4, r1]
 8001920:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
 8001924:	f103 0177 	add.w	r1, r3, #119	; 0x77
 8001928:	5c61      	ldrb	r1, [r4, r1]
 800192a:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
 800192e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001932:	5c61      	ldrb	r1, [r4, r1]
 8001934:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
 8001938:	f103 0179 	add.w	r1, r3, #121	; 0x79
 800193c:	5c61      	ldrb	r1, [r4, r1]
 800193e:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
 8001942:	f103 017a 	add.w	r1, r3, #122	; 0x7a
 8001946:	5c61      	ldrb	r1, [r4, r1]
 8001948:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
 800194c:	f103 017b 	add.w	r1, r3, #123	; 0x7b
 8001950:	5c61      	ldrb	r1, [r4, r1]
 8001952:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8001956:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 800195a:	337d      	adds	r3, #125	; 0x7d
 800195c:	5c61      	ldrb	r1, [r4, r1]
 800195e:	5ce3      	ldrb	r3, [r4, r3]
 8001960:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 8001964:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
 8001968:	e53d      	b.n	80013e6 <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
 800196a:	2200      	movs	r2, #0
 800196c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
 8001970:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001974:	3308      	adds	r3, #8
 8001976:	4299      	cmp	r1, r3
 8001978:	d1fa      	bne.n	8001970 <getPresetNamesFromSDCard+0x648>
 800197a:	e4f2      	b.n	8001362 <getPresetNamesFromSDCard+0x3a>

0800197c <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
 800197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001980:	4c21      	ldr	r4, [pc, #132]	; (8001a08 <SDRAM_init+0x8c>)
{
 8001982:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001984:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
 8001986:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001988:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800198a:	a902      	add	r1, sp, #8
 800198c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001990:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001992:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
 8001996:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001998:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 800199c:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019a0:	f008 ff1a 	bl	800a7d8 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 80019a4:	4628      	mov	r0, r5
 80019a6:	f002 fbc9 	bl	800413c <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019aa:	a902      	add	r1, sp, #8
 80019ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b0:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 80019b2:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80019b4:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 80019b8:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019bc:	f008 ff0c 	bl	800a7d8 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019c0:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019c2:	a902      	add	r1, sp, #8
 80019c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c8:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 80019ca:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019cc:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80019ce:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
 80019d0:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019d4:	f008 ff00 	bl	800a7d8 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80019d8:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80019dc:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019de:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80019e0:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 80019e6:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019e8:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
 80019ea:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 80019ec:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80019ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80019f2:	f008 fef1 	bl	800a7d8 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 80019f6:	f240 21fa 	movw	r1, #762	; 0x2fa
 80019fa:	4620      	mov	r0, r4
 80019fc:	f008 ff0c 	bl	800a818 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
 8001a00:	b006      	add	sp, #24
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a06:	bf00      	nop
 8001a08:	20014278 	.word	0x20014278

08001a0c <setEffectsFunctions>:
volatile uint8_t chorusAssignment = 255;
volatile uint8_t delayAssignment = 255;

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
 8001a0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <setEffectsFunctions+0x294>)
 8001a0e:	2201      	movs	r2, #1
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
	effectsActive[i] = 1;
 8001a12:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001a14:	2815      	cmp	r0, #21
 8001a16:	d829      	bhi.n	8001a6c <setEffectsFunctions+0x60>
 8001a18:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001a1c:	0259026d 	.word	0x0259026d
 8001a20:	02310245 	.word	0x02310245
 8001a24:	0016022b 	.word	0x0016022b
 8001a28:	02020217 	.word	0x02020217
 8001a2c:	012d01b2 	.word	0x012d01b2
 8001a30:	011801f2 	.word	0x011801f2
 8001a34:	00c500d8 	.word	0x00c500d8
 8001a38:	009f00b2 	.word	0x009f00b2
 8001a3c:	0078008c 	.word	0x0078008c
 8001a40:	00500064 	.word	0x00500064
 8001a44:	0029003c 	.word	0x0029003c
			  effectSetters[i].setParam4 = &blankFunction;
			  effectSetters[i].setParam5 = &blankFunction;
			  break;
		  case Tanh:
			  effectTick[i] = &tanhTick;
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a48:	4896      	ldr	r0, [pc, #600]	; (8001ca4 <setEffectsFunctions+0x298>)
 8001a4a:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
 8001a4e:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <setEffectsFunctions+0x29c>)
 8001a50:	4a96      	ldr	r2, [pc, #600]	; (8001cac <setEffectsFunctions+0x2a0>)
 8001a52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a56:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001a5a:	4995      	ldr	r1, [pc, #596]	; (8001cb0 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam2 = &offsetParam2;
			  effectSetters[i].setParam3 = &blankFunction;
 8001a5c:	4a95      	ldr	r2, [pc, #596]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a5e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a62:	4995      	ldr	r1, [pc, #596]	; (8001cb8 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001a64:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a66:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam4 = &blankFunction;
			  effectSetters[i].setParam5 = &blankFunction;
 8001a68:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXLadderLowpassTick;
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001a70:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
 8001a74:	4a91      	ldr	r2, [pc, #580]	; (8001cbc <setEffectsFunctions+0x2b0>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001a76:	488b      	ldr	r0, [pc, #556]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXLadderLowpassTick;
 8001a78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001a7c:	4990      	ldr	r1, [pc, #576]	; (8001cc0 <setEffectsFunctions+0x2b4>)
 8001a7e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
 8001a82:	4a8c      	ldr	r2, [pc, #560]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001a84:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001a88:	498e      	ldr	r1, [pc, #568]	; (8001cc4 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
 8001a8a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001a8c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001a8e:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = FXVZbandrejectTick;
 8001a94:	4b84      	ldr	r3, [pc, #528]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001a96:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
 8001a9a:	4a8b      	ldr	r2, [pc, #556]	; (8001cc8 <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001a9c:	4881      	ldr	r0, [pc, #516]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = FXVZbandrejectTick;
 8001a9e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001aa2:	498a      	ldr	r1, [pc, #552]	; (8001ccc <setEffectsFunctions+0x2c0>)
 8001aa4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8001aa8:	4a82      	ldr	r2, [pc, #520]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001aaa:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 8001aae:	4888      	ldr	r0, [pc, #544]	; (8001cd0 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001ab0:	4988      	ldr	r1, [pc, #544]	; (8001cd4 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001ab2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001ab4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001ab6:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = FXVZhighshelfTick;
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001abe:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
 8001ac2:	4a85      	ldr	r2, [pc, #532]	; (8001cd8 <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001ac4:	4877      	ldr	r0, [pc, #476]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = FXVZhighshelfTick;
 8001ac6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001aca:	4984      	ldr	r1, [pc, #528]	; (8001cdc <setEffectsFunctions+0x2d0>)
 8001acc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8001ad0:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001ad2:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001ad6:	4882      	ldr	r0, [pc, #520]	; (8001ce0 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001ad8:	4982      	ldr	r1, [pc, #520]	; (8001ce4 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001ada:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001adc:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001ade:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXVZlowshelfTick;
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001ae6:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
 8001aea:	4a7f      	ldr	r2, [pc, #508]	; (8001ce8 <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001aec:	486d      	ldr	r0, [pc, #436]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXVZlowshelfTick;
 8001aee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001af2:	497e      	ldr	r1, [pc, #504]	; (8001cec <setEffectsFunctions+0x2e0>)
 8001af4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001afa:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001afe:	487c      	ldr	r0, [pc, #496]	; (8001cf0 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001b00:	497c      	ldr	r1, [pc, #496]	; (8001cf4 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001b02:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b04:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001b06:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXVZpeakTick;
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001b0e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
 8001b12:	4a79      	ldr	r2, [pc, #484]	; (8001cf8 <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001b14:	4863      	ldr	r0, [pc, #396]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXVZpeakTick;
 8001b16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001b1a:	4978      	ldr	r1, [pc, #480]	; (8001cfc <setEffectsFunctions+0x2f0>)
 8001b1c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001b20:	4a64      	ldr	r2, [pc, #400]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001b22:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001b26:	4876      	ldr	r0, [pc, #472]	; (8001d00 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001b28:	4976      	ldr	r1, [pc, #472]	; (8001d04 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001b2a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b2c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001b2e:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXdiodeLowpassTick;
 8001b34:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001b36:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
 8001b3a:	4a73      	ldr	r2, [pc, #460]	; (8001d08 <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001b3c:	4859      	ldr	r0, [pc, #356]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXdiodeLowpassTick;
 8001b3e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001b42:	4972      	ldr	r1, [pc, #456]	; (8001d0c <setEffectsFunctions+0x300>)
 8001b44:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001b4a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001b4e:	4970      	ldr	r1, [pc, #448]	; (8001d10 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001b50:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001b52:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b54:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXbandpassTick;
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001b5c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
 8001b60:	4a6c      	ldr	r2, [pc, #432]	; (8001d14 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001b62:	4850      	ldr	r0, [pc, #320]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXbandpassTick;
 8001b64:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001b68:	496b      	ldr	r1, [pc, #428]	; (8001d18 <setEffectsFunctions+0x30c>)
 8001b6a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001b6e:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001b70:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001b74:	4969      	ldr	r1, [pc, #420]	; (8001d1c <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001b76:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001b78:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b7a:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXhighpassTick;
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001b82:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
 8001b86:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001b88:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXhighpassTick;
 8001b8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001b8e:	4965      	ldr	r1, [pc, #404]	; (8001d24 <setEffectsFunctions+0x318>)
 8001b90:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001b94:	4a47      	ldr	r2, [pc, #284]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001b96:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001b9a:	4963      	ldr	r1, [pc, #396]	; (8001d28 <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001b9c:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001b9e:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001ba0:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXlowpassTick;
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001ba8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
 8001bac:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001bae:	483d      	ldr	r0, [pc, #244]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXlowpassTick;
 8001bb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001bb4:	495e      	ldr	r1, [pc, #376]	; (8001d30 <setEffectsFunctions+0x324>)
 8001bb6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001bba:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001bbc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001bc0:	495c      	ldr	r1, [pc, #368]	; (8001d34 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001bc2:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001bc4:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001bc6:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  if (delayAssignment != 255)
 8001bcc:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <setEffectsFunctions+0x32c>)
 8001bce:	7813      	ldrb	r3, [r2, #0]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	f000 81a3 	beq.w	8001f1c <setEffectsFunctions+0x510>
				  effectTick[delayAssignment] = &blankTick;
 8001bd6:	7813      	ldrb	r3, [r2, #0]
 8001bd8:	4c58      	ldr	r4, [pc, #352]	; (8001d3c <setEffectsFunctions+0x330>)
 8001bda:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <setEffectsFunctions+0x29c>)
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001bdc:	7816      	ldrb	r6, [r2, #0]
				  effectTick[delayAssignment] = &blankTick;
 8001bde:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
 8001be2:	7815      	ldrb	r5, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001be4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
 8001be8:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <setEffectsFunctions+0x298>)
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
 8001bec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
 8001bf0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001bf4:	4f2f      	ldr	r7, [pc, #188]	; (8001cb4 <setEffectsFunctions+0x2a8>)
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
 8001bf6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
 8001bfa:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
 8001bfe:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001c00:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
 8001c04:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
 8001c08:	606f      	str	r7, [r5, #4]
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
 8001c0a:	f8ce 7008 	str.w	r7, [lr, #8]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
 8001c0e:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
 8001c12:	7814      	ldrb	r4, [r2, #0]
 8001c14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
 8001c18:	f8cc 700c 	str.w	r7, [ip, #12]
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
 8001c1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c20:	6127      	str	r7, [r4, #16]
			  delayAssignment = i;
 8001c22:	b2cc      	uxtb	r4, r1
			  effectSetters[i].setParam2 = &delayParam2;
 8001c24:	4d46      	ldr	r5, [pc, #280]	; (8001d40 <setEffectsFunctions+0x334>)
			  delayAssignment = i;
 8001c26:	7014      	strb	r4, [r2, #0]
			  effectSetters[i].setParam1 = &delayParam1;
 8001c28:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
 8001c2c:	4a45      	ldr	r2, [pc, #276]	; (8001d44 <setEffectsFunctions+0x338>)
 8001c2e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001c32:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001c36:	4944      	ldr	r1, [pc, #272]	; (8001d48 <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam3 = &delayParam3;
 8001c38:	4844      	ldr	r0, [pc, #272]	; (8001d4c <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001c3a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
			  effectSetters[i].setParam4 = &delayParam4;
 8001c3e:	4944      	ldr	r1, [pc, #272]	; (8001d50 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam5 = &delayParam5;
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <setEffectsFunctions+0x348>)
			  effectSetters[i].setParam3 = &delayParam3;
 8001c42:	e9c2 5001 	strd	r5, r0, [r2, #4]
			  effectSetters[i].setParam5 = &delayParam5;
 8001c46:	e9c2 1303 	strd	r1, r3, [r2, #12]
}
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &wavefolderTick;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c4e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
 8001c52:	4c41      	ldr	r4, [pc, #260]	; (8001d58 <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &wavefolderTick;
 8001c56:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c5a:	4940      	ldr	r1, [pc, #256]	; (8001d5c <setEffectsFunctions+0x350>)
 8001c5c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c60:	4c15      	ldr	r4, [pc, #84]	; (8001cb8 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001c62:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001c66:	483e      	ldr	r0, [pc, #248]	; (8001d60 <setEffectsFunctions+0x354>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001c68:	493e      	ldr	r1, [pc, #248]	; (8001d64 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam5 = &param5Linear;
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <setEffectsFunctions+0x35c>)
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001c6c:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
 8001c70:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8001c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &bcTick;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c78:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
 8001c7c:	4c3b      	ldr	r4, [pc, #236]	; (8001d6c <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <setEffectsFunctions+0x298>)
			  effectTick[i] = &bcTick;
 8001c80:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c84:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <setEffectsFunctions+0x2a4>)
 8001c86:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2BC;
 8001c8a:	4c39      	ldr	r4, [pc, #228]	; (8001d70 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c8c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
 8001c90:	4838      	ldr	r0, [pc, #224]	; (8001d74 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam4 = &param4BC;
 8001c92:	4939      	ldr	r1, [pc, #228]	; (8001d78 <setEffectsFunctions+0x36c>)
			  effectSetters[i].setParam5 = &param5BC;
 8001c94:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam3 = &param3BC;
 8001c96:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5BC;
 8001c9a:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	200143b0 	.word	0x200143b0
 8001ca4:	20014360 	.word	0x20014360
 8001ca8:	2001ce74 	.word	0x2001ce74
 8001cac:	00009f61 	.word	0x00009f61
 8001cb0:	000094e1 	.word	0x000094e1
 8001cb4:	00001a01 	.word	0x00001a01
 8001cb8:	000097e1 	.word	0x000097e1
 8001cbc:	0000a341 	.word	0x0000a341
 8001cc0:	0000a561 	.word	0x0000a561
 8001cc4:	0000a7a1 	.word	0x0000a7a1
 8001cc8:	0000a321 	.word	0x0000a321
 8001ccc:	0000a521 	.word	0x0000a521
 8001cd0:	0000a661 	.word	0x0000a661
 8001cd4:	0000a781 	.word	0x0000a781
 8001cd8:	0000a301 	.word	0x0000a301
 8001cdc:	0000a4e1 	.word	0x0000a4e1
 8001ce0:	0000a621 	.word	0x0000a621
 8001ce4:	0000a761 	.word	0x0000a761
 8001ce8:	0000a2e1 	.word	0x0000a2e1
 8001cec:	0000a4a1 	.word	0x0000a4a1
 8001cf0:	0000a5e1 	.word	0x0000a5e1
 8001cf4:	0000a741 	.word	0x0000a741
 8001cf8:	0000a2c1 	.word	0x0000a2c1
 8001cfc:	0000a461 	.word	0x0000a461
 8001d00:	0000a5a1 	.word	0x0000a5a1
 8001d04:	0000a721 	.word	0x0000a721
 8001d08:	0000a2a1 	.word	0x0000a2a1
 8001d0c:	0000a421 	.word	0x0000a421
 8001d10:	0000a701 	.word	0x0000a701
 8001d14:	0000a281 	.word	0x0000a281
 8001d18:	0000a3e1 	.word	0x0000a3e1
 8001d1c:	0000a6e1 	.word	0x0000a6e1
 8001d20:	0000a261 	.word	0x0000a261
 8001d24:	0000a3a1 	.word	0x0000a3a1
 8001d28:	0000a6c1 	.word	0x0000a6c1
 8001d2c:	0000a241 	.word	0x0000a241
 8001d30:	0000a361 	.word	0x0000a361
 8001d34:	0000a6a1 	.word	0x0000a6a1
 8001d38:	200006b4 	.word	0x200006b4
 8001d3c:	00009f01 	.word	0x00009f01
 8001d40:	00009d21 	.word	0x00009d21
 8001d44:	08003f19 	.word	0x08003f19
 8001d48:	00009ce1 	.word	0x00009ce1
 8001d4c:	00009d61 	.word	0x00009d61
 8001d50:	00009d81 	.word	0x00009d81
 8001d54:	00009da1 	.word	0x00009da1
 8001d58:	00009ae1 	.word	0x00009ae1
 8001d5c:	00009521 	.word	0x00009521
 8001d60:	00009561 	.word	0x00009561
 8001d64:	000099a1 	.word	0x000099a1
 8001d68:	000099c1 	.word	0x000099c1
 8001d6c:	0000a1e1 	.word	0x0000a1e1
 8001d70:	000099e1 	.word	0x000099e1
 8001d74:	00009a01 	.word	0x00009a01
 8001d78:	00009a41 	.word	0x00009a41
 8001d7c:	00009a61 	.word	0x00009a61
			  if (chorusAssignment != 255)
 8001d80:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <setEffectsFunctions+0x520>)
 8001d82:	7813      	ldrb	r3, [r2, #0]
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	f000 80cc 	beq.w	8001f22 <setEffectsFunctions+0x516>
				  effectTick[chorusAssignment] = &blankTick;
 8001d8a:	7813      	ldrb	r3, [r2, #0]
 8001d8c:	4c68      	ldr	r4, [pc, #416]	; (8001f30 <setEffectsFunctions+0x524>)
 8001d8e:	4869      	ldr	r0, [pc, #420]	; (8001f34 <setEffectsFunctions+0x528>)
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
 8001d90:	f892 e000 	ldrb.w	lr, [r2]
				  effectTick[chorusAssignment] = &blankTick;
 8001d94:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
 8001d98:	f892 c000 	ldrb.w	ip, [r2]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
 8001d9c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
 8001da0:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <setEffectsFunctions+0x52c>)
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
 8001da4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
 8001da8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
 8001dac:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
 8001db0:	eb03 0784 	add.w	r7, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
 8001db4:	7814      	ldrb	r4, [r2, #0]
 8001db6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001dba:	eb03 0684 	add.w	r6, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
 8001dbe:	7814      	ldrb	r4, [r2, #0]
 8001dc0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001dc4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
 8001dc8:	4c5c      	ldr	r4, [pc, #368]	; (8001f3c <setEffectsFunctions+0x530>)
 8001dca:	f843 402e 	str.w	r4, [r3, lr, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
 8001dce:	f8cc 4004 	str.w	r4, [ip, #4]
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
 8001dd2:	60bc      	str	r4, [r7, #8]
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
 8001dd4:	60f4      	str	r4, [r6, #12]
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
 8001dd6:	612c      	str	r4, [r5, #16]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001dd8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  chorusAssignment = i;
 8001ddc:	b2ce      	uxtb	r6, r1
 8001dde:	7016      	strb	r6, [r2, #0]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001de0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
			  effectSetters[i].setParam5 = &blankFunction;
 8001de4:	6114      	str	r4, [r2, #16]
			  effectTick[i] = &chorusTick;
 8001de6:	4c56      	ldr	r4, [pc, #344]	; (8001f40 <setEffectsFunctions+0x534>)
 8001de8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001dec:	4955      	ldr	r1, [pc, #340]	; (8001f44 <setEffectsFunctions+0x538>)
			  effectSetters[i].setParam2 = &chorusParam2;
 8001dee:	4856      	ldr	r0, [pc, #344]	; (8001f48 <setEffectsFunctions+0x53c>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001df0:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
 8001df4:	4955      	ldr	r1, [pc, #340]	; (8001f4c <setEffectsFunctions+0x540>)
			  effectSetters[i].setParam4 = &chorusParam4;
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <setEffectsFunctions+0x544>)
			  effectSetters[i].setParam3 = &chorusParam3;
 8001df8:	e9c2 0101 	strd	r0, r1, [r2, #4]
			  effectSetters[i].setParam4 = &chorusParam4;
 8001dfc:	60d3      	str	r3, [r2, #12]
}
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &tiltFilterTick;
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001e02:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
 8001e06:	4c53      	ldr	r4, [pc, #332]	; (8001f54 <setEffectsFunctions+0x548>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &tiltFilterTick;
 8001e0a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001e0e:	4952      	ldr	r1, [pc, #328]	; (8001f58 <setEffectsFunctions+0x54c>)
 8001e10:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
 8001e14:	4c51      	ldr	r4, [pc, #324]	; (8001f5c <setEffectsFunctions+0x550>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001e16:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
 8001e1a:	4851      	ldr	r0, [pc, #324]	; (8001f60 <setEffectsFunctions+0x554>)
			  effectSetters[i].setParam4 = &tiltParam4;
 8001e1c:	4951      	ldr	r1, [pc, #324]	; (8001f64 <setEffectsFunctions+0x558>)
 8001e1e:	e724      	b.n	8001c6a <setEffectsFunctions+0x25e>
			  effectTick[i] = &compressorTick;
 8001e20:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e22:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
 8001e26:	4c50      	ldr	r4, [pc, #320]	; (8001f68 <setEffectsFunctions+0x55c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e28:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &compressorTick;
 8001e2a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e2e:	494f      	ldr	r1, [pc, #316]	; (8001f6c <setEffectsFunctions+0x560>)
 8001e30:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
 8001e34:	4c4e      	ldr	r4, [pc, #312]	; (8001f70 <setEffectsFunctions+0x564>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001e36:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001e3a:	484e      	ldr	r0, [pc, #312]	; (8001f74 <setEffectsFunctions+0x568>)
			  effectSetters[i].setParam4 = &compressorParam4;
 8001e3c:	494e      	ldr	r1, [pc, #312]	; (8001f78 <setEffectsFunctions+0x56c>)
			  effectSetters[i].setParam5 = &compressorParam5;
 8001e3e:	4a4f      	ldr	r2, [pc, #316]	; (8001f7c <setEffectsFunctions+0x570>)
			  effectSetters[i].setParam3 = &compressorParam3;
 8001e40:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001e44:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &shaperTick;
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &param1Linear;
 8001e4c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <setEffectsFunctions+0x574>)
			  effectSetters[i].setParam1 = &param1Linear;
 8001e52:	4839      	ldr	r0, [pc, #228]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &shaperTick;
 8001e54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &param1Linear;
 8001e58:	494a      	ldr	r1, [pc, #296]	; (8001f84 <setEffectsFunctions+0x578>)
 8001e5a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &param1Linear;
 8001e60:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001e64:	4848      	ldr	r0, [pc, #288]	; (8001f88 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Linear;
 8001e66:	4949      	ldr	r1, [pc, #292]	; (8001f8c <setEffectsFunctions+0x580>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001e68:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001e6a:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
 8001e6c:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e72:	4831      	ldr	r0, [pc, #196]	; (8001f38 <setEffectsFunctions+0x52c>)
 8001e74:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &satTick;
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <setEffectsFunctions+0x528>)
 8001e7a:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <setEffectsFunctions+0x584>)
 8001e7c:	e5e9      	b.n	8001a52 <setEffectsFunctions+0x46>
			  effectTick[i] = &polynomialShaperTick;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e80:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
 8001e84:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <setEffectsFunctions+0x588>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e86:	482c      	ldr	r0, [pc, #176]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &polynomialShaperTick;
 8001e88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e8c:	4942      	ldr	r1, [pc, #264]	; (8001f98 <setEffectsFunctions+0x58c>)
 8001e8e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001e94:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001e98:	483b      	ldr	r0, [pc, #236]	; (8001f88 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Poly;
 8001e9a:	4940      	ldr	r1, [pc, #256]	; (8001f9c <setEffectsFunctions+0x590>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001e9c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001e9e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
 8001ea0:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &hardClipTick;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ea8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
 8001eac:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <setEffectsFunctions+0x594>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001eae:	4822      	ldr	r0, [pc, #136]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &hardClipTick;
 8001eb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001eb4:	4938      	ldr	r1, [pc, #224]	; (8001f98 <setEffectsFunctions+0x58c>)
 8001eb6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001eba:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ebc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001ec0:	4831      	ldr	r0, [pc, #196]	; (8001f88 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Hard;
 8001ec2:	4938      	ldr	r1, [pc, #224]	; (8001fa4 <setEffectsFunctions+0x598>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001ec4:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001ec6:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
 8001ec8:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &softClipTick;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ed0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <setEffectsFunctions+0x59c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ed6:	4818      	ldr	r0, [pc, #96]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &softClipTick;
 8001ed8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001edc:	492e      	ldr	r1, [pc, #184]	; (8001f98 <setEffectsFunctions+0x58c>)
 8001ede:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ee4:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Soft;
 8001eea:	4930      	ldr	r1, [pc, #192]	; (8001fac <setEffectsFunctions+0x5a0>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001eec:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001eee:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
 8001ef0:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectSetters[i].setParam1 = &blankFunction;
 8001ef6:	4811      	ldr	r0, [pc, #68]	; (8001f3c <setEffectsFunctions+0x530>)
 8001ef8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &blankTick;
 8001efe:	4d0d      	ldr	r5, [pc, #52]	; (8001f34 <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &blankFunction;
 8001f00:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8001f04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
 8001f08:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001f0c:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
 8001f10:	2200      	movs	r2, #0
 8001f12:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <setEffectsFunctions+0x524>)
 8001f16:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
}
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <setEffectsFunctions+0x528>)
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <setEffectsFunctions+0x52c>)
 8001f20:	e67f      	b.n	8001c22 <setEffectsFunctions+0x216>
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <setEffectsFunctions+0x528>)
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <setEffectsFunctions+0x52c>)
 8001f26:	4c05      	ldr	r4, [pc, #20]	; (8001f3c <setEffectsFunctions+0x530>)
 8001f28:	e756      	b.n	8001dd8 <setEffectsFunctions+0x3cc>
 8001f2a:	bf00      	nop
 8001f2c:	200006ac 	.word	0x200006ac
 8001f30:	00009f01 	.word	0x00009f01
 8001f34:	2001ce74 	.word	0x2001ce74
 8001f38:	20014360 	.word	0x20014360
 8001f3c:	00001a01 	.word	0x00001a01
 8001f40:	00009dc1 	.word	0x00009dc1
 8001f44:	00009c01 	.word	0x00009c01
 8001f48:	00009c41 	.word	0x00009c41
 8001f4c:	00009c61 	.word	0x00009c61
 8001f50:	00009ca1 	.word	0x00009ca1
 8001f54:	00009f21 	.word	0x00009f21
 8001f58:	000095a1 	.word	0x000095a1
 8001f5c:	00009601 	.word	0x00009601
 8001f60:	00009661 	.word	0x00009661
 8001f64:	000096a1 	.word	0x000096a1
 8001f68:	0000a221 	.word	0x0000a221
 8001f6c:	000096e1 	.word	0x000096e1
 8001f70:	00009701 	.word	0x00009701
 8001f74:	00009741 	.word	0x00009741
 8001f78:	00009761 	.word	0x00009761
 8001f7c:	000097a1 	.word	0x000097a1
 8001f80:	00009ea1 	.word	0x00009ea1
 8001f84:	000094c1 	.word	0x000094c1
 8001f88:	000097e1 	.word	0x000097e1
 8001f8c:	00009821 	.word	0x00009821
 8001f90:	0000a161 	.word	0x0000a161
 8001f94:	0000a0c1 	.word	0x0000a0c1
 8001f98:	000094e1 	.word	0x000094e1
 8001f9c:	00009921 	.word	0x00009921
 8001fa0:	0000a021 	.word	0x0000a021
 8001fa4:	000098a1 	.word	0x000098a1
 8001fa8:	00009fc1 	.word	0x00009fc1
 8001fac:	00009841 	.word	0x00009841

08001fb0 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
 8001fb0:	b410      	push	{r4}
	switch (filterType)
 8001fb2:	2808      	cmp	r0, #8
 8001fb4:	d812      	bhi.n	8001fdc <setFilterTypes+0x2c>
 8001fb6:	e8df f000 	tbb	[pc, r0]
 8001fba:	3223      	.short	0x3223
 8001fbc:	6e5f5041 	.word	0x6e5f5041
 8001fc0:	057d      	.short	0x057d
 8001fc2:	14          	.byte	0x14
 8001fc3:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
 8001fc6:	4a44      	ldr	r2, [pc, #272]	; (80020d8 <setFilterTypes+0x128>)
 8001fc8:	4844      	ldr	r0, [pc, #272]	; (80020dc <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001fca:	4c45      	ldr	r4, [pc, #276]	; (80020e0 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
 8001fcc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001fd0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001fd4:	4843      	ldr	r0, [pc, #268]	; (80020e4 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001fd6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001fda:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
 8001fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe0:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
 8001fe4:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <setFilterTypes+0x128>)
 8001fe6:	4840      	ldr	r0, [pc, #256]	; (80020e8 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001fe8:	4c40      	ldr	r4, [pc, #256]	; (80020ec <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
 8001fea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001fee:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001ff2:	483f      	ldr	r0, [pc, #252]	; (80020f0 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001ff4:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001ff8:	6050      	str	r0, [r2, #4]
}
 8001ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ffe:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
 8002000:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
 8002002:	4a35      	ldr	r2, [pc, #212]	; (80020d8 <setFilterTypes+0x128>)
 8002004:	483b      	ldr	r0, [pc, #236]	; (80020f4 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8002006:	4c3c      	ldr	r4, [pc, #240]	; (80020f8 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
 8002008:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
 800200c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002010:	483a      	ldr	r0, [pc, #232]	; (80020fc <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8002012:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8002016:	6050      	str	r0, [r2, #4]
}
 8002018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800201c:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <setFilterTypes+0x128>)
 8002022:	4837      	ldr	r0, [pc, #220]	; (8002100 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
 8002024:	4c37      	ldr	r4, [pc, #220]	; (8002104 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
 8002026:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
 800202a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800202e:	4836      	ldr	r0, [pc, #216]	; (8002108 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
 8002030:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8002034:	6050      	str	r0, [r2, #4]
}
 8002036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800203a:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
 800203e:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <setFilterTypes+0x128>)
 8002040:	4832      	ldr	r0, [pc, #200]	; (800210c <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8002042:	4c33      	ldr	r4, [pc, #204]	; (8002110 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
 8002044:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
 8002048:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800204c:	4831      	ldr	r0, [pc, #196]	; (8002114 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
 800204e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8002052:	6050      	str	r0, [r2, #4]
}
 8002054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002058:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <setFilterTypes+0x128>)
 800205e:	482e      	ldr	r0, [pc, #184]	; (8002118 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8002060:	4c2e      	ldr	r4, [pc, #184]	; (800211c <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
 8002062:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8002066:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800206c:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8002070:	6050      	str	r0, [r2, #4]
}
 8002072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002076:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <setFilterTypes+0x128>)
 800207c:	4829      	ldr	r0, [pc, #164]	; (8002124 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 800207e:	4c2a      	ldr	r4, [pc, #168]	; (8002128 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
 8002080:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8002084:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002088:	4828      	ldr	r0, [pc, #160]	; (800212c <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 800208a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 800208e:	6050      	str	r0, [r2, #4]
}
 8002090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002094:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <setFilterTypes+0x128>)
 800209a:	4825      	ldr	r0, [pc, #148]	; (8002130 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 800209c:	4c25      	ldr	r4, [pc, #148]	; (8002134 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
 800209e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80020a2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80020a6:	4824      	ldr	r0, [pc, #144]	; (8002138 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80020a8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80020ac:	6050      	str	r0, [r2, #4]
}
 80020ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020b2:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <setFilterTypes+0x128>)
 80020b8:	4820      	ldr	r0, [pc, #128]	; (800213c <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80020ba:	4c21      	ldr	r4, [pc, #132]	; (8002140 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
 80020bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80020c0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80020c4:	481f      	ldr	r0, [pc, #124]	; (8002144 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80020c6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80020ca:	6050      	str	r0, [r2, #4]
}
 80020cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200163b4 	.word	0x200163b4
 80020d8:	2001cee8 	.word	0x2001cee8
 80020dc:	000088c1 	.word	0x000088c1
 80020e0:	00008b41 	.word	0x00008b41
 80020e4:	00008d41 	.word	0x00008d41
 80020e8:	00008921 	.word	0x00008921
 80020ec:	00008b61 	.word	0x00008b61
 80020f0:	00008d81 	.word	0x00008d81
 80020f4:	00008681 	.word	0x00008681
 80020f8:	00008a61 	.word	0x00008a61
 80020fc:	00008b81 	.word	0x00008b81
 8002100:	000086e1 	.word	0x000086e1
 8002104:	00008a81 	.word	0x00008a81
 8002108:	00008bc1 	.word	0x00008bc1
 800210c:	00008741 	.word	0x00008741
 8002110:	00008aa1 	.word	0x00008aa1
 8002114:	00008c01 	.word	0x00008c01
 8002118:	000087a1 	.word	0x000087a1
 800211c:	00008ac1 	.word	0x00008ac1
 8002120:	00008c41 	.word	0x00008c41
 8002124:	00008801 	.word	0x00008801
 8002128:	00008ae1 	.word	0x00008ae1
 800212c:	00008c81 	.word	0x00008c81
 8002130:	00008841 	.word	0x00008841
 8002134:	00008b01 	.word	0x00008b01
 8002138:	00008cc1 	.word	0x00008cc1
 800213c:	00008881 	.word	0x00008881
 8002140:	00008b21 	.word	0x00008b21
 8002144:	00008d01 	.word	0x00008d01

08002148 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
 8002148:	b410      	push	{r4}
	switch(LFOShape)
 800214a:	2805      	cmp	r0, #5
 800214c:	d814      	bhi.n	8002178 <setLFOShapes+0x30>
 800214e:	e8df f000 	tbb	[pc, r0]
 8002152:	3c29      	.short	0x3c29
 8002154:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 800215a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
 800215e:	4c38      	ldr	r4, [pc, #224]	; (8002240 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002160:	4a38      	ldr	r2, [pc, #224]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
 8002162:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002166:	4c38      	ldr	r4, [pc, #224]	; (8002248 <setLFOShapes+0x100>)
 8002168:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
 800216c:	4937      	ldr	r1, [pc, #220]	; (800224c <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 800216e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8002172:	4a37      	ldr	r2, [pc, #220]	; (8002250 <setLFOShapes+0x108>)
 8002174:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
 8002178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800217c:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002180:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
 8002184:	4c33      	ldr	r4, [pc, #204]	; (8002254 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002186:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
 8002188:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 800218c:	4c32      	ldr	r4, [pc, #200]	; (8002258 <setLFOShapes+0x110>)
 800218e:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
 8002192:	4932      	ldr	r1, [pc, #200]	; (800225c <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002194:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <setLFOShapes+0x118>)
 800219a:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 800219e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021a2:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80021a6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
 80021aa:	4c2e      	ldr	r4, [pc, #184]	; (8002264 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80021ac:	4a25      	ldr	r2, [pc, #148]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
 80021ae:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80021b2:	4c2d      	ldr	r4, [pc, #180]	; (8002268 <setLFOShapes+0x120>)
 80021b4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 80021b8:	492c      	ldr	r1, [pc, #176]	; (800226c <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80021ba:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80021be:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <setLFOShapes+0x128>)
 80021c0:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80021c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c8:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80021cc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
 80021d0:	4c28      	ldr	r4, [pc, #160]	; (8002274 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
 80021d4:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80021d8:	4c27      	ldr	r4, [pc, #156]	; (8002278 <setLFOShapes+0x130>)
 80021da:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80021e0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <setLFOShapes+0x138>)
 80021e6:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80021ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021ee:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 80021f2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
 80021f6:	4c23      	ldr	r4, [pc, #140]	; (8002284 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
 80021fa:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 80021fe:	4c22      	ldr	r4, [pc, #136]	; (8002288 <setLFOShapes+0x140>)
 8002200:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
 8002204:	4921      	ldr	r1, [pc, #132]	; (800228c <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002206:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <setLFOShapes+0x148>)
 800220c:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002214:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002218:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
 800221c:	4c1d      	ldr	r4, [pc, #116]	; (8002294 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
 8002220:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002224:	4c1c      	ldr	r4, [pc, #112]	; (8002298 <setLFOShapes+0x150>)
 8002226:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
 800222a:	491c      	ldr	r1, [pc, #112]	; (800229c <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 800222c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <setLFOShapes+0x158>)
 8002232:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	2001cfec 	.word	0x2001cfec
 8002240:	00009221 	.word	0x00009221
 8002244:	20018510 	.word	0x20018510
 8002248:	00009301 	.word	0x00009301
 800224c:	00009481 	.word	0x00009481
 8002250:	000093c1 	.word	0x000093c1
 8002254:	00009261 	.word	0x00009261
 8002258:	00009321 	.word	0x00009321
 800225c:	000094a1 	.word	0x000094a1
 8002260:	000093e1 	.word	0x000093e1
 8002264:	000091c1 	.word	0x000091c1
 8002268:	000092a1 	.word	0x000092a1
 800226c:	00009421 	.word	0x00009421
 8002270:	00009361 	.word	0x00009361
 8002274:	000091a1 	.word	0x000091a1
 8002278:	00009281 	.word	0x00009281
 800227c:	00009401 	.word	0x00009401
 8002280:	00009341 	.word	0x00009341
 8002284:	000091e1 	.word	0x000091e1
 8002288:	000092c1 	.word	0x000092c1
 800228c:	00009441 	.word	0x00009441
 8002290:	00009381 	.word	0x00009381
 8002294:	00009201 	.word	0x00009201
 8002298:	000092e1 	.word	0x000092e1
 800229c:	00009461 	.word	0x00009461
 80022a0:	000093a1 	.word	0x000093a1

080022a4 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80022a4:	4bd5      	ldr	r3, [pc, #852]	; (80025fc <main+0x358>)
{
 80022a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022aa:	ed2d 8b02 	vpush	{d8}
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	b09b      	sub	sp, #108	; 0x6c
 80022b2:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80022b6:	d111      	bne.n	80022dc <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022bc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80022c0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80022c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022d2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80022d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022d8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80022dc:	49c7      	ldr	r1, [pc, #796]	; (80025fc <main+0x358>)
 80022de:	694b      	ldr	r3, [r1, #20]
 80022e0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80022e4:	d124      	bne.n	8002330 <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80022e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80022ee:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022f2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022f6:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022fa:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80022fe:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002300:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002304:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002306:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800230a:	3b01      	subs	r3, #1
 800230c:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800230e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002312:	d1f8      	bne.n	8002306 <main+0x62>
    } while(sets-- != 0U);
 8002314:	3c20      	subs	r4, #32
 8002316:	f114 0f20 	cmn.w	r4, #32
 800231a:	d1f1      	bne.n	8002300 <main+0x5c>
 800231c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002320:	694b      	ldr	r3, [r1, #20]
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	614b      	str	r3, [r1, #20]
 8002328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800232c:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002330:	af14      	add	r7, sp, #80	; 0x50
 8002332:	2400      	movs	r4, #0
  HAL_Init();
 8002334:	f001 fec0 	bl	80040b8 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002338:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800233a:	9414      	str	r4, [sp, #80]	; 0x50
 800233c:	60fc      	str	r4, [r7, #12]
 800233e:	e9c7 4401 	strd	r4, r4, [r7, #4]
  HAL_MPU_Disable();
 8002342:	f001 ff91 	bl	8004268 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002346:	f248 721f 	movw	r2, #34591	; 0x871f
 800234a:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800234e:	4638      	mov	r0, r7
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002350:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002354:	9317      	str	r3, [sp, #92]	; 0x5c
 8002356:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800235a:	f001 ffa3 	bl	80042a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 800235e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002362:	4ba7      	ldr	r3, [pc, #668]	; (8002600 <main+0x35c>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002364:	4638      	mov	r0, r7
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002366:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800236a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800236e:	f001 ff99 	bl	80042a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8002372:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002376:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002378:	4638      	mov	r0, r7
  MPU_InitStruct.BaseAddress = 0xc0000000;
 800237a:	9315      	str	r3, [sp, #84]	; 0x54
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800237c:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800237e:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002382:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002386:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800238a:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800238e:	f001 ff89 	bl	80042a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002392:	2103      	movs	r1, #3
  MPU_InitStruct.BaseAddress = 0x60000000;
 8002394:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002398:	2318      	movs	r3, #24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800239a:	4638      	mov	r0, r7
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800239c:	f88d 1051 	strb.w	r1, [sp, #81]	; 0x51
  MPU_InitStruct.BaseAddress = 0x60000000;
 80023a0:	9215      	str	r2, [sp, #84]	; 0x54
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80023a2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023a6:	f88d 505d 	strb.w	r5, [sp, #93]	; 0x5d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023aa:	f001 ff7b 	bl	80042a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023ae:	2004      	movs	r0, #4
 80023b0:	f001 ff68 	bl	8004284 <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023b4:	b662      	cpsie	i
  SystemClock_Config();
 80023b6:	f7fe ff05 	bl	80011c4 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80023ba:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 800268c <main+0x3e8>
  PeriphCommonClock_Config();
 80023be:	f7fe ff7f 	bl	80012c0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80023c2:	f7fe fd61 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c6:	f7fe fc6b 	bl	8000ca0 <MX_DMA_Init>
  MX_FMC_Init();
 80023ca:	f7fe fca5 	bl	8000d18 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80023ce:	f000 fe0d 	bl	8002fec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80023d2:	f00a fb0f 	bl	800c9f4 <MX_FATFS_Init>
  MX_SAI1_Init();
 80023d6:	f000 fd0f 	bl	8002df8 <MX_SAI1_Init>
  MX_RNG_Init();
 80023da:	f000 fccd 	bl	8002d78 <MX_RNG_Init>
  MX_I2C2_Init();
 80023de:	f7fe fe57 	bl	8001090 <MX_I2C2_Init>
  MX_SPI1_Init();
 80023e2:	f000 fe79 	bl	80030d8 <MX_SPI1_Init>
  MX_SPI5_Init();
 80023e6:	f000 fea3 	bl	8003130 <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80023ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ee:	4885      	ldr	r0, [pc, #532]	; (8002604 <main+0x360>)
 80023f0:	f003 fe60 	bl	80060b4 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80023f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80023f8:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80023fa:	4882      	ldr	r0, [pc, #520]	; (8002604 <main+0x360>)
 80023fc:	f003 fe5a 	bl	80060b4 <HAL_GPIO_ReadPin>
 8002400:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002402:	2104      	movs	r1, #4
 8002404:	4880      	ldr	r0, [pc, #512]	; (8002608 <main+0x364>)
 8002406:	f003 fe55 	bl	80060b4 <HAL_GPIO_ReadPin>
 800240a:	4602      	mov	r2, r0
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800240c:	00a3      	lsls	r3, r4, #2
	HAL_Delay(500);
 800240e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002412:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002416:	4413      	add	r3, r2
 8002418:	f88b 3000 	strb.w	r3, [fp]
	HAL_Delay(500);
 800241c:	f001 fe8e 	bl	800413c <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 8002420:	4a7a      	ldr	r2, [pc, #488]	; (800260c <main+0x368>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	05d9      	lsls	r1, r3, #23
 800242e:	d5fc      	bpl.n	800242a <main+0x186>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 8002430:	4b77      	ldr	r3, [pc, #476]	; (8002610 <main+0x36c>)
 8002432:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800243a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	9306      	str	r3, [sp, #24]
 8002448:	9b06      	ldr	r3, [sp, #24]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 800244a:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8002452:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002456:	4969      	ldr	r1, [pc, #420]	; (80025fc <main+0x358>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002458:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <main+0x370>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800245a:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002466:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
 800246a:	07db      	lsls	r3, r3, #31
 800246c:	d502      	bpl.n	8002474 <main+0x1d0>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800246e:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <main+0x374>)
 8002470:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8002474:	4b67      	ldr	r3, [pc, #412]	; (8002614 <main+0x370>)
 8002476:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 8002478:	4a68      	ldr	r2, [pc, #416]	; (800261c <main+0x378>)
  DWT->CYCCNT = 0;
 800247a:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
 800247c:	4868      	ldr	r0, [pc, #416]	; (8002620 <main+0x37c>)
  DWT->CTRL = 0x40000001;
 800247e:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
 8002480:	2240      	movs	r2, #64	; 0x40
 8002482:	f016 ff6d 	bl	8019360 <memset>
	  buffer[i] = 0;
 8002486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800248a:	2100      	movs	r1, #0
 800248c:	4865      	ldr	r0, [pc, #404]	; (8002624 <main+0x380>)
 800248e:	f016 ff67 	bl	8019360 <memset>
  buffer[15+112] = NUM_PARAMS;
 8002492:	4964      	ldr	r1, [pc, #400]	; (8002624 <main+0x380>)
 8002494:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 8002496:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800249a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800249e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002628 <main+0x384>
  buffer[15+112] = NUM_PARAMS;
 80024a2:	f881 307f 	strb.w	r3, [r1, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
 80024a6:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80024a8:	f8a1 21b8 	strh.w	r2, [r1, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+19+112] = 1;
 80024ac:	460a      	mov	r2, r1
 80024ae:	f881 31bb 	strb.w	r3, [r1, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80024b2:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80024b6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80024ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80024be:	f8a2 31c1 	strh.w	r3, [r2, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80024c2:	485a      	ldr	r0, [pc, #360]	; (800262c <main+0x388>)
 80024c4:	f011 ff04 	bl	80142d0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 80024c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024cc:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8002630 <main+0x38c>
 80024d0:	eddf 0a58 	vldr	s1, [pc, #352]	; 8002634 <main+0x390>
 80024d4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002638 <main+0x394>
 80024d8:	4858      	ldr	r0, [pc, #352]	; (800263c <main+0x398>)
 80024da:	f011 fef9 	bl	80142d0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 80024de:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80024e2:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80024e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ea:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002638 <main+0x394>
 80024ee:	4854      	ldr	r0, [pc, #336]	; (8002640 <main+0x39c>)
 80024f0:	f011 feee 	bl	80142d0 <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
 80024f4:	f89b 3000 	ldrb.w	r3, [fp]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8410 	beq.w	8002d1e <main+0xa7a>
	  diskBusy = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	4a50      	ldr	r2, [pc, #320]	; (8002644 <main+0x3a0>)
  specialModeMacroNames[0][0] = "Feedback  ";
 8002502:	4d51      	ldr	r5, [pc, #324]	; (8002648 <main+0x3a4>)
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002504:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	  diskBusy = 1;
 8002508:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
 800250a:	f7ff fa37 	bl	800197c <SDRAM_init>
  audioInit();
 800250e:	f7fe f98b 	bl	8000828 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <main+0x3a8>)
 8002514:	f8df e178 	ldr.w	lr, [pc, #376]	; 8002690 <main+0x3ec>
  specialModeMacroNames[0][5] = "          ";
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <main+0x3ac>)
  specialModeNames[0] = "PHYS STR1     ";
 800251a:	f8c2 e000 	str.w	lr, [r2]
  specialModeMacroNames[0][0] = "Feedback  ";
 800251e:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002694 <main+0x3f0>
  specialModeMacroNames[0][1] = "SlideNois ";
 8002522:	494c      	ldr	r1, [pc, #304]	; (8002654 <main+0x3b0>)
  specialModeMacroNames[0][0] = "Feedback  ";
 8002524:	f8c5 e000 	str.w	lr, [r5]
  specialModeMacroNames[0][2] = "PluckWidt ";
 8002528:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8002698 <main+0x3f4>
  specialModeMacroNames[1][1] = "Tone      ";
 800252c:	4e4a      	ldr	r6, [pc, #296]	; (8002658 <main+0x3b4>)
  specialModeMacroNames[0][2] = "PluckWidt ";
 800252e:	f8c5 e008 	str.w	lr, [r5, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 8002532:	f8df e168 	ldr.w	lr, [pc, #360]	; 800269c <main+0x3f8>
  specialModeMacroNames[1][3] = "PickupPos ";
 8002536:	f8df c168 	ldr.w	ip, [pc, #360]	; 80026a0 <main+0x3fc>
  specialModeMacroNames[0][3] = "PickNoise ";
 800253a:	f8c5 e00c 	str.w	lr, [r5, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
 800253e:	f8df e164 	ldr.w	lr, [pc, #356]	; 80026a4 <main+0x400>
  specialModeMacroNames[1][5] = "Stiffness ";
 8002542:	4c46      	ldr	r4, [pc, #280]	; (800265c <main+0x3b8>)
  specialModeMacroNames[0][4] = "PickupSim ";
 8002544:	f8c5 e010 	str.w	lr, [r5, #16]
  specialModeNames[1] = "PHYS STR2     ";
 8002548:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80026a8 <main+0x404>
  specialModeMacroNames[1][8] = "PU Filter ";
 800254c:	4844      	ldr	r0, [pc, #272]	; (8002660 <main+0x3bc>)
  specialModeNames[1] = "PHYS STR2     ";
 800254e:	f8c2 e004 	str.w	lr, [r2, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 8002552:	f8df e158 	ldr.w	lr, [pc, #344]	; 80026ac <main+0x408>
  specialModeMacroNames[0][1] = "SlideNois ";
 8002556:	6069      	str	r1, [r5, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 8002558:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
  specialModeMacroNames[1][2] = "PluckPos  ";
 800255c:	f8df e150 	ldr.w	lr, [pc, #336]	; 80026b0 <main+0x40c>
  specialModeMacroNames[1][4] = "SlideNois ";
 8002560:	6629      	str	r1, [r5, #96]	; 0x60
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002562:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
  specialModeMacroNames[1][6] = "FB Amp    ";
 8002566:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80026b4 <main+0x410>
  specialModeMacroNames[1][1] = "Tone      ";
 800256a:	656e      	str	r6, [r5, #84]	; 0x54
  specialModeMacroNames[1][6] = "FB Amp    ";
 800256c:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
 8002570:	f8df e144 	ldr.w	lr, [pc, #324]	; 80026b8 <main+0x414>
  specialModeMacroNames[1][3] = "PickupPos ";
 8002574:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
  specialModeMacroNames[1][7] = "FB Speed  ";
 8002578:	f8c5 e06c 	str.w	lr, [r5, #108]	; 0x6c
  specialModeMacroNames[1][9] = "Harmonic  ";
 800257c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80026bc <main+0x418>
  specialModeMacroNames[1][5] = "Stiffness ";
 8002580:	666c      	str	r4, [r5, #100]	; 0x64
  specialModeMacroNames[1][9] = "Harmonic  ";
 8002582:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
 8002586:	f8df e138 	ldr.w	lr, [pc, #312]	; 80026c0 <main+0x41c>
  specialModeMacroNames[0][19] = "          ";
 800258a:	64eb      	str	r3, [r5, #76]	; 0x4c
  specialModeMacroNames[1][8] = "PU Filter ";
 800258c:	6728      	str	r0, [r5, #112]	; 0x70
  specialModeMacroNames[2][11] = "Decay     ";
 800258e:	4935      	ldr	r1, [pc, #212]	; (8002664 <main+0x3c0>)
  specialModeMacroNames[0][6] = "          ";
 8002590:	e9c5 3305 	strd	r3, r3, [r5, #20]
  specialModeMacroNames[0][8] = "          ";
 8002594:	e9c5 3307 	strd	r3, r3, [r5, #28]
  specialModeMacroNames[0][10] = "          ";
 8002598:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
  specialModeMacroNames[0][12] = "          ";
 800259c:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
  specialModeMacroNames[0][14] = "          ";
 80025a0:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
  specialModeMacroNames[0][16] = "          ";
 80025a4:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  specialModeMacroNames[0][18] = "          ";
 80025a8:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  specialModeMacroNames[1][10] = "HarmPosX  ";
 80025ac:	f8c5 e078 	str.w	lr, [r5, #120]	; 0x78
  specialModeMacroNames[2][10] = "Tone      ";
 80025b0:	f8c5 60c8 	str.w	r6, [r5, #200]	; 0xc8
  specialModeMacroNames[1][11] = "HarmPosY  ";
 80025b4:	4e2c      	ldr	r6, [pc, #176]	; (8002668 <main+0x3c4>)
  specialModeMacroNames[2][3] = "PickupPos ";
 80025b6:	f8c5 c0ac 	str.w	ip, [r5, #172]	; 0xac
 80025ba:	4694      	mov	ip, r2
  specialModeMacroNames[1][11] = "HarmPosY  ";
 80025bc:	67ee      	str	r6, [r5, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
 80025be:	4e2b      	ldr	r6, [pc, #172]	; (800266c <main+0x3c8>)
  specialModeMacroNames[2][9] = "          ";
 80025c0:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  specialModeMacroNames[1][12] = "PUModRate ";
 80025c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80025c8:	4e29      	ldr	r6, [pc, #164]	; (8002670 <main+0x3cc>)
  specialModeMacroNames[2][19] = "          ";
 80025ca:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80025ce:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
  specialModeMacroNames[1][14] = "PhantomH  ";
 80025d2:	4e28      	ldr	r6, [pc, #160]	; (8002674 <main+0x3d0>)
 80025d4:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 80026c4 <main+0x420>
 80025d8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
 80025dc:	4e26      	ldr	r6, [pc, #152]	; (8002678 <main+0x3d4>)
 80025de:	f8c5 608c 	str.w	r6, [r5, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Frq ";
 80025e2:	4e26      	ldr	r6, [pc, #152]	; (800267c <main+0x3d8>)
 80025e4:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Q   ";
 80025e8:	4e25      	ldr	r6, [pc, #148]	; (8002680 <main+0x3dc>)
 80025ea:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
 80025ee:	4e25      	ldr	r6, [pc, #148]	; (8002684 <main+0x3e0>)
 80025f0:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
 80025f4:	4e24      	ldr	r6, [pc, #144]	; (8002688 <main+0x3e4>)
 80025f6:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
 80025fa:	e065      	b.n	80026c8 <main+0x424>
 80025fc:	e000ed00 	.word	0xe000ed00
 8002600:	03010011 	.word	0x03010011
 8002604:	58020400 	.word	0x58020400
 8002608:	58020000 	.word	0x58020000
 800260c:	58024800 	.word	0x58024800
 8002610:	58024400 	.word	0x58024400
 8002614:	e0001000 	.word	0xe0001000
 8002618:	c5acce55 	.word	0xc5acce55
 800261c:	40000001 	.word	0x40000001
 8002620:	38000000 	.word	0x38000000
 8002624:	30042380 	.word	0x30042380
 8002628:	3c23d70a 	.word	0x3c23d70a
 800262c:	2001a4e4 	.word	0x2001a4e4
 8002630:	457a0000 	.word	0x457a0000
 8002634:	469c4000 	.word	0x469c4000
 8002638:	00000000 	.word	0x00000000
 800263c:	200143b4 	.word	0x200143b4
 8002640:	20016510 	.word	0x20016510
 8002644:	2001435c 	.word	0x2001435c
 8002648:	2001c4e4 	.word	0x2001c4e4
 800264c:	2001c674 	.word	0x2001c674
 8002650:	0801c038 	.word	0x0801c038
 8002654:	0801c008 	.word	0x0801c008
 8002658:	0801c060 	.word	0x0801c060
 800265c:	0801c084 	.word	0x0801c084
 8002660:	0801c0a8 	.word	0x0801c0a8
 8002664:	0801c190 	.word	0x0801c190
 8002668:	0801c0cc 	.word	0x0801c0cc
 800266c:	0801c0d8 	.word	0x0801c0d8
 8002670:	0801c0e4 	.word	0x0801c0e4
 8002674:	0801c0f0 	.word	0x0801c0f0
 8002678:	0801c0fc 	.word	0x0801c0fc
 800267c:	0801c108 	.word	0x0801c108
 8002680:	0801c114 	.word	0x0801c114
 8002684:	0801c120 	.word	0x0801c120
 8002688:	0801c12c 	.word	0x0801c12c
 800268c:	20014301 	.word	0x20014301
 8002690:	0801bfec 	.word	0x0801bfec
 8002694:	0801bffc 	.word	0x0801bffc
 8002698:	0801c014 	.word	0x0801c014
 800269c:	0801c020 	.word	0x0801c020
 80026a0:	0801c078 	.word	0x0801c078
 80026a4:	0801c02c 	.word	0x0801c02c
 80026a8:	0801c044 	.word	0x0801c044
 80026ac:	0801c054 	.word	0x0801c054
 80026b0:	0801c06c 	.word	0x0801c06c
 80026b4:	0801c090 	.word	0x0801c090
 80026b8:	0801c09c 	.word	0x0801c09c
 80026bc:	0801c0b4 	.word	0x0801c0b4
 80026c0:	0801c0c0 	.word	0x0801c0c0
 80026c4:	30042000 	.word	0x30042000
  specialModeNames[2] = "ADDITIVE      ";
 80026c8:	4eba      	ldr	r6, [pc, #744]	; (80029b4 <main+0x710>)
 80026ca:	6096      	str	r6, [r2, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
 80026cc:	4eba      	ldr	r6, [pc, #744]	; (80029b8 <main+0x714>)
 80026ce:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
 80026d2:	4eba      	ldr	r6, [pc, #744]	; (80029bc <main+0x718>)
 80026d4:	f8c5 60a4 	str.w	r6, [r5, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 80026d8:	4eb9      	ldr	r6, [pc, #740]	; (80029c0 <main+0x71c>)
 80026da:	f8c5 60a8 	str.w	r6, [r5, #168]	; 0xa8
  specialModeMacroNames[2][4] = "PickupAmp ";
 80026de:	4eb9      	ldr	r6, [pc, #740]	; (80029c4 <main+0x720>)
 80026e0:	f8c5 60b0 	str.w	r6, [r5, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
 80026e4:	4eb8      	ldr	r6, [pc, #736]	; (80029c8 <main+0x724>)
 80026e6:	f8c5 60b4 	str.w	r6, [r5, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
 80026ea:	4eb8      	ldr	r6, [pc, #736]	; (80029cc <main+0x728>)
 80026ec:	f8c5 60b8 	str.w	r6, [r5, #184]	; 0xb8
  specialModeNames[3] = "VOCAL        ";
 80026f0:	4eb7      	ldr	r6, [pc, #732]	; (80029d0 <main+0x72c>)
 80026f2:	60d6      	str	r6, [r2, #12]
  specialModeMacroNames[3][0] = "Size      ";
 80026f4:	4eb7      	ldr	r6, [pc, #732]	; (80029d4 <main+0x730>)
 80026f6:	f8c5 60f0 	str.w	r6, [r5, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
 80026fa:	4eb7      	ldr	r6, [pc, #732]	; (80029d8 <main+0x734>)
  specialModeMacroNames[2][12] = "          ";
 80026fc:	e9c5 1333 	strd	r1, r3, [r5, #204]	; 0xcc
  specialModeMacroNames[2][8] = "          ";
 8002700:	e9c5 332f 	strd	r3, r3, [r5, #188]	; 0xbc
  specialModeMacroNames[2][14] = "          ";
 8002704:	e9c5 3335 	strd	r3, r3, [r5, #212]	; 0xd4
  specialModeMacroNames[2][16] = "          ";
 8002708:	e9c5 3337 	strd	r3, r3, [r5, #220]	; 0xdc
  specialModeMacroNames[2][18] = "          ";
 800270c:	e9c5 3339 	strd	r3, r3, [r5, #228]	; 0xe4
  specialModeMacroNames[3][1] = "Chipmunk  ";
 8002710:	f8c5 60f4 	str.w	r6, [r5, #244]	; 0xf4
  specialModeMacroNames[4][19] = "          ";
 8002714:	263f      	movs	r6, #63	; 0x3f
  specialModeMacroNames[4][8] = "Decay     ";
 8002716:	f8c5 1160 	str.w	r1, [r5, #352]	; 0x160
  specialModeMacroNames[3][2] = "Diameter  ";
 800271a:	49b0      	ldr	r1, [pc, #704]	; (80029dc <main+0x738>)
  specialModeMacroNames[4][0] = "Stiffness ";
 800271c:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
  specialModeMacroNames[3][2] = "Diameter  ";
 8002720:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
 8002724:	49ae      	ldr	r1, [pc, #696]	; (80029e0 <main+0x73c>)
  specialModeMacroNames[4][3] = "PU Filter ";
 8002726:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
  specialModeMacroNames[3][3] = "Nasal     ";
 800272a:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
 800272e:	49ad      	ldr	r1, [pc, #692]	; (80029e4 <main+0x740>)
  specialModeMacroNames[4][12] = "          ";
 8002730:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
  specialModeMacroNames[3][4] = "Turb Nois ";
 8002734:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
 8002738:	49ab      	ldr	r1, [pc, #684]	; (80029e8 <main+0x744>)
 800273a:	4cac      	ldr	r4, [pc, #688]	; (80029ec <main+0x748>)
 800273c:	f8c5 1104 	str.w	r1, [r5, #260]	; 0x104
  specialModeMacroNames[3][8] = "BackPos   ";
 8002740:	49ab      	ldr	r1, [pc, #684]	; (80029f0 <main+0x74c>)
 8002742:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
 8002746:	49ab      	ldr	r1, [pc, #684]	; (80029f4 <main+0x750>)
 8002748:	f8c5 1114 	str.w	r1, [r5, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
 800274c:	49aa      	ldr	r1, [pc, #680]	; (80029f8 <main+0x754>)
 800274e:	f8c5 1118 	str.w	r1, [r5, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
 8002752:	49aa      	ldr	r1, [pc, #680]	; (80029fc <main+0x758>)
 8002754:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
 8002758:	49a9      	ldr	r1, [pc, #676]	; (8002a00 <main+0x75c>)
 800275a:	6111      	str	r1, [r2, #16]
  specialModeMacroNames[4][19] = "          ";
 800275c:	2150      	movs	r1, #80	; 0x50
  specialModeMacroNames[4][1] = "PU Prop   ";
 800275e:	4aa9      	ldr	r2, [pc, #676]	; (8002a04 <main+0x760>)
 8002760:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
 8002764:	4aa8      	ldr	r2, [pc, #672]	; (8002a08 <main+0x764>)
 8002766:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
  specialModeMacroNames[4][4] = "NoiseFilt ";
 800276a:	4aa8      	ldr	r2, [pc, #672]	; (8002a0c <main+0x768>)
 800276c:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
  specialModeMacroNames[4][5] = "NoiseGain ";
 8002770:	4aa7      	ldr	r2, [pc, #668]	; (8002a10 <main+0x76c>)
 8002772:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
  specialModeMacroNames[4][9] = "Damping   ";
 8002776:	4aa7      	ldr	r2, [pc, #668]	; (8002a14 <main+0x770>)
 8002778:	f8c5 2164 	str.w	r2, [r5, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
 800277c:	4aa6      	ldr	r2, [pc, #664]	; (8002a18 <main+0x774>)
 800277e:	f8c5 2168 	str.w	r2, [r5, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002782:	4aa6      	ldr	r2, [pc, #664]	; (8002a1c <main+0x778>)
  specialModeMacroNames[3][7] = "          ";
 8002784:	e9c5 3342 	strd	r3, r3, [r5, #264]	; 0x108
  specialModeMacroNames[3][13] = "          ";
 8002788:	e9c5 3348 	strd	r3, r3, [r5, #288]	; 0x120
  specialModeMacroNames[3][15] = "          ";
 800278c:	e9c5 334a 	strd	r3, r3, [r5, #296]	; 0x128
  specialModeMacroNames[3][17] = "          ";
 8002790:	e9c5 334c 	strd	r3, r3, [r5, #304]	; 0x130
  specialModeMacroNames[3][19] = "          ";
 8002794:	e9c5 334e 	strd	r3, r3, [r5, #312]	; 0x138
  specialModeMacroNames[4][7] = "          ";
 8002798:	e9c5 3356 	strd	r3, r3, [r5, #344]	; 0x158
  specialModeMacroNames[4][11] = "PU Pos   ";
 800279c:	f8c5 216c 	str.w	r2, [r5, #364]	; 0x16c
  specialModeMacroNames[4][14] = "          ";
 80027a0:	e9c5 335d 	strd	r3, r3, [r5, #372]	; 0x174
  specialModeMacroNames[4][16] = "          ";
 80027a4:	e9c5 335f 	strd	r3, r3, [r5, #380]	; 0x17c
  specialModeMacroNames[4][18] = "          ";
 80027a8:	e9c5 3361 	strd	r3, r3, [r5, #388]	; 0x184
  specialModeMacroNames[4][19] = "          ";
 80027ac:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
  for (int i = 0; i < 5; i++)
 80027b0:	3d04      	subs	r5, #4
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80027b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80027b6:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 80027ba:	4628      	mov	r0, r5
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80027bc:	fb08 f906 	mul.w	r9, r8, r6
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80027c0:	f80e 1013 	strb.w	r1, [lr, r3, lsl #1]
 80027c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80027c8:	7851      	ldrb	r1, [r2, #1]
 80027ca:	7059      	strb	r1, [r3, #1]
 80027cc:	7891      	ldrb	r1, [r2, #2]
 80027ce:	7099      	strb	r1, [r3, #2]
 80027d0:	78d1      	ldrb	r1, [r2, #3]
 80027d2:	70d9      	strb	r1, [r3, #3]
 80027d4:	7911      	ldrb	r1, [r2, #4]
 80027d6:	7119      	strb	r1, [r3, #4]
 80027d8:	7951      	ldrb	r1, [r2, #5]
 80027da:	7159      	strb	r1, [r3, #5]
 80027dc:	7991      	ldrb	r1, [r2, #6]
 80027de:	7199      	strb	r1, [r3, #6]
 80027e0:	79d1      	ldrb	r1, [r2, #7]
 80027e2:	71d9      	strb	r1, [r3, #7]
 80027e4:	7a11      	ldrb	r1, [r2, #8]
 80027e6:	7219      	strb	r1, [r3, #8]
 80027e8:	7a51      	ldrb	r1, [r2, #9]
 80027ea:	7259      	strb	r1, [r3, #9]
 80027ec:	7a91      	ldrb	r1, [r2, #10]
 80027ee:	7299      	strb	r1, [r3, #10]
 80027f0:	7ad1      	ldrb	r1, [r2, #11]
 80027f2:	72d9      	strb	r1, [r3, #11]
 80027f4:	7b11      	ldrb	r1, [r2, #12]
 80027f6:	7319      	strb	r1, [r3, #12]
	  for (int k = 0; k < 20; k++)
 80027f8:	2100      	movs	r1, #0
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80027fa:	7b52      	ldrb	r2, [r2, #13]
 80027fc:	735a      	strb	r2, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80027fe:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8002802:	eb01 0381 	add.w	r3, r1, r1, lsl #2
	  for (int k = 0; k < 20; k++)
 8002806:	3101      	adds	r1, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002808:	f892 a000 	ldrb.w	sl, [r2]
 800280c:	eb09 0343 	add.w	r3, r9, r3, lsl #1
	  for (int k = 0; k < 20; k++)
 8002810:	2914      	cmp	r1, #20
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002812:	f804 a003 	strb.w	sl, [r4, r3]
 8002816:	4423      	add	r3, r4
 8002818:	f892 a001 	ldrb.w	sl, [r2, #1]
 800281c:	f883 a001 	strb.w	sl, [r3, #1]
 8002820:	f892 a002 	ldrb.w	sl, [r2, #2]
 8002824:	f883 a002 	strb.w	sl, [r3, #2]
 8002828:	f892 a003 	ldrb.w	sl, [r2, #3]
 800282c:	f883 a003 	strb.w	sl, [r3, #3]
 8002830:	f892 a004 	ldrb.w	sl, [r2, #4]
 8002834:	f883 a004 	strb.w	sl, [r3, #4]
 8002838:	f892 a005 	ldrb.w	sl, [r2, #5]
 800283c:	f883 a005 	strb.w	sl, [r3, #5]
 8002840:	f892 a006 	ldrb.w	sl, [r2, #6]
 8002844:	f883 a006 	strb.w	sl, [r3, #6]
 8002848:	f892 a007 	ldrb.w	sl, [r2, #7]
 800284c:	f883 a007 	strb.w	sl, [r3, #7]
 8002850:	f892 a008 	ldrb.w	sl, [r2, #8]
 8002854:	f883 a008 	strb.w	sl, [r3, #8]
 8002858:	7a52      	ldrb	r2, [r2, #9]
 800285a:	725a      	strb	r2, [r3, #9]
	  for (int k = 0; k < 20; k++)
 800285c:	d1cf      	bne.n	80027fe <main+0x55a>
  for (int i = 0; i < 5; i++)
 800285e:	2e3b      	cmp	r6, #59	; 0x3b
 8002860:	f105 0550 	add.w	r5, r5, #80	; 0x50
 8002864:	d004      	beq.n	8002870 <main+0x5cc>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002866:	f8dc 3000 	ldr.w	r3, [ip]
 800286a:	3e01      	subs	r6, #1
 800286c:	7819      	ldrb	r1, [r3, #0]
 800286e:	e7a0      	b.n	80027b2 <main+0x50e>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	496b      	ldr	r1, [pc, #428]	; (8002a20 <main+0x77c>)
 8002874:	486b      	ldr	r0, [pc, #428]	; (8002a24 <main+0x780>)
 8002876:	f008 f951 	bl	800ab1c <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	4a6a      	ldr	r2, [pc, #424]	; (8002a28 <main+0x784>)
 800287e:	486b      	ldr	r0, [pc, #428]	; (8002a2c <main+0x788>)
 8002880:	18d1      	adds	r1, r2, r3
 8002882:	4c6b      	ldr	r4, [pc, #428]	; (8002a30 <main+0x78c>)
 8002884:	f008 fa2a 	bl	800acdc <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002888:	496a      	ldr	r1, [pc, #424]	; (8002a34 <main+0x790>)
 800288a:	486b      	ldr	r0, [pc, #428]	; (8002a38 <main+0x794>)
 800288c:	f7fe f96c 	bl	8000b68 <audioStart>
	AudioCodec_init(&hi2c2);
 8002890:	486a      	ldr	r0, [pc, #424]	; (8002a3c <main+0x798>)
 8002892:	f7fe f97b 	bl	8000b8c <AudioCodec_init>
 8002896:	f004 0307 	and.w	r3, r4, #7
	  if (rand > TWO_TO_31)
 800289a:	eddf 8a69 	vldr	s17, [pc, #420]	; 8002a40 <main+0x79c>
 800289e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
 80028a2:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8002a44 <main+0x7a0>
 80028a6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8002a74 <main+0x7d0>
 80028aa:	4e67      	ldr	r6, [pc, #412]	; (8002a48 <main+0x7a4>)
 80028ac:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8002a78 <main+0x7d4>
 80028b0:	4d66      	ldr	r5, [pc, #408]	; (8002a4c <main+0x7a8>)
 80028b2:	9303      	str	r3, [sp, #12]
 80028b4:	e01f      	b.n	80028f6 <main+0x652>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 80028b6:	8833      	ldrh	r3, [r6, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	b903      	cbnz	r3, 80028be <main+0x61a>
 80028bc:	8873      	ldrh	r3, [r6, #2]
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80028be:	4639      	mov	r1, r7
 80028c0:	4863      	ldr	r0, [pc, #396]	; (8002a50 <main+0x7ac>)
 80028c2:	f006 fbb5 	bl	8009030 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 80028c6:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eef4 7ae8 	vcmpe.f32	s15, s17
 80028d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d6:	dd04      	ble.n	80028e2 <main+0x63e>
		  myTestInt++;
 80028d8:	f8da 3000 	ldr.w	r3, [sl]
 80028dc:	3301      	adds	r3, #1
 80028de:	f8ca 3000 	str.w	r3, [sl]
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
 80028e2:	782b      	ldrb	r3, [r5, #0]
 80028e4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	702a      	strb	r2, [r5, #0]
 80028ec:	4a59      	ldr	r2, [pc, #356]	; (8002a54 <main+0x7b0>)
 80028ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80028f2:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
 80028f6:	f89b 3000 	ldrb.w	r3, [fp]
 80028fa:	b94b      	cbnz	r3, 8002910 <main+0x66c>
		  if (presetWaitingToLoad > 0)
 80028fc:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <main+0x7b4>)
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	b189      	cbz	r1, 8002926 <main+0x682>
			  if (!i2cSending)
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <main+0x7b8>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8148 	beq.w	8002ba0 <main+0x8fc>
	  if (presetWaitingToParse > 0)
 8002910:	f8d9 3000 	ldr.w	r3, [r9]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ce      	beq.n	80028b6 <main+0x612>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8002918:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <main+0x7bc>)
 800291a:	f8d9 0000 	ldr.w	r0, [r9]
 800291e:	7819      	ldrb	r1, [r3, #0]
 8002920:	f018 ff46 	bl	801b7b0 <__parsePreset_veneer>
 8002924:	e7c7      	b.n	80028b6 <main+0x612>
		  else if (presetWaitingToWrite > 0)
 8002926:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <main+0x7c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <main+0x66c>
				  writePresetToSDCard(presetWaitingToWrite);
 800292e:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <main+0x7c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	483d      	ldr	r0, [pc, #244]	; (8002a30 <main+0x78c>)
 800293c:	9101      	str	r1, [sp, #4]
 800293e:	f016 fd0f 	bl	8019360 <memset>
  __IO uint8_t status = SD_PRESENT;
 8002942:	2301      	movs	r3, #1
 8002944:	f88d 3017 	strb.w	r3, [sp, #23]
  return status;
 8002948:	f89d 3017 	ldrb.w	r3, [sp, #23]
	if(BSP_SD_IsDetected())
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8120 	beq.w	8002b92 <main+0x8ee>
 8002952:	9b03      	ldr	r3, [sp, #12]
 8002954:	9901      	ldr	r1, [sp, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 81bd 	bne.w	8002cd6 <main+0xa32>
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <main+0x78c>)
					audioOutBuffer[i] = 0;
 800295e:	2000      	movs	r0, #0
 8002960:	2100      	movs	r1, #0
 8002962:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002966:	429c      	cmp	r4, r3
 8002968:	d1fb      	bne.n	8002962 <main+0x6be>
				diskBusy = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	4a3e      	ldr	r2, [pc, #248]	; (8002a68 <main+0x7c4>)
 800296e:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8002970:	4a3e      	ldr	r2, [pc, #248]	; (8002a6c <main+0x7c8>)
 8002972:	7813      	ldrb	r3, [r2, #0]
 8002974:	2b63      	cmp	r3, #99	; 0x63
 8002976:	d901      	bls.n	800297c <main+0x6d8>
			        presetNumberToSave = 99;
 8002978:	2363      	movs	r3, #99	; 0x63
 800297a:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBufC, 10);
 800297c:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <main+0x7c8>)
 800297e:	220a      	movs	r2, #10
 8002980:	a908      	add	r1, sp, #32
 8002982:	7818      	ldrb	r0, [r3, #0]
 8002984:	f016 fca8 	bl	80192d8 <itoa>
				int len = ((strlen(charBufC)));
 8002988:	a808      	add	r0, sp, #32
 800298a:	f7fd fca5 	bl	80002d8 <strlen>
				if (len == 1)
 800298e:	2801      	cmp	r0, #1
				int len = ((strlen(charBufC)));
 8002990:	4602      	mov	r2, r0
				if (len == 1)
 8002992:	f000 813d 	beq.w	8002c10 <main+0x96c>
					strcat(charBufC, "*.ebp");
 8002996:	4936      	ldr	r1, [pc, #216]	; (8002a70 <main+0x7cc>)
 8002998:	ab08      	add	r3, sp, #32
 800299a:	6808      	ldr	r0, [r1, #0]
 800299c:	8889      	ldrh	r1, [r1, #4]
 800299e:	5098      	str	r0, [r3, r2]
 80029a0:	4413      	add	r3, r2
					strcpy(finalStringC, charBufC);
 80029a2:	a80b      	add	r0, sp, #44	; 0x2c
 80029a4:	3206      	adds	r2, #6
					strcat(charBufC, "*.ebp");
 80029a6:	8099      	strh	r1, [r3, #4]
					strcpy(finalStringC, charBufC);
 80029a8:	a908      	add	r1, sp, #32
 80029aa:	f016 fd05 	bl	80193b8 <memcpy>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
 80029ae:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002a7c <main+0x7d8>
 80029b2:	e06a      	b.n	8002a8a <main+0x7e6>
 80029b4:	0801c138 	.word	0x0801c138
 80029b8:	0801c148 	.word	0x0801c148
 80029bc:	0801c154 	.word	0x0801c154
 80029c0:	0801c160 	.word	0x0801c160
 80029c4:	0801c16c 	.word	0x0801c16c
 80029c8:	0801c178 	.word	0x0801c178
 80029cc:	0801c184 	.word	0x0801c184
 80029d0:	0801c19c 	.word	0x0801c19c
 80029d4:	0801c1ac 	.word	0x0801c1ac
 80029d8:	0801c1b8 	.word	0x0801c1b8
 80029dc:	0801c1c4 	.word	0x0801c1c4
 80029e0:	0801c1d0 	.word	0x0801c1d0
 80029e4:	0801c1dc 	.word	0x0801c1dc
 80029e8:	0801c1e8 	.word	0x0801c1e8
 80029ec:	30043380 	.word	0x30043380
 80029f0:	0801c1f4 	.word	0x0801c1f4
 80029f4:	0801c200 	.word	0x0801c200
 80029f8:	0801c20c 	.word	0x0801c20c
 80029fc:	0801c218 	.word	0x0801c218
 8002a00:	0801c224 	.word	0x0801c224
 8002a04:	0801c234 	.word	0x0801c234
 8002a08:	0801c240 	.word	0x0801c240
 8002a0c:	0801c24c 	.word	0x0801c24c
 8002a10:	0801c258 	.word	0x0801c258
 8002a14:	0801c264 	.word	0x0801c264
 8002a18:	0801c270 	.word	0x0801c270
 8002a1c:	0801c27c 	.word	0x0801c27c
 8002a20:	38000040 	.word	0x38000040
 8002a24:	2001cb30 	.word	0x2001cb30
 8002a28:	30000800 	.word	0x30000800
 8002a2c:	2001caa8 	.word	0x2001caa8
 8002a30:	30000000 	.word	0x30000000
 8002a34:	2001c82c 	.word	0x2001c82c
 8002a38:	2001c794 	.word	0x2001c794
 8002a3c:	200142ac 	.word	0x200142ac
 8002a40:	4f000000 	.word	0x4f000000
 8002a44:	2f80000d 	.word	0x2f80000d
 8002a48:	20014210 	.word	0x20014210
 8002a4c:	20014320 	.word	0x20014320
 8002a50:	2001c68c 	.word	0x2001c68c
 8002a54:	2001a0e0 	.word	0x2001a0e0
 8002a58:	2001a084 	.word	0x2001a084
 8002a5c:	200164de 	.word	0x200164de
 8002a60:	2001a082 	.word	0x2001a082
 8002a64:	2001a08c 	.word	0x2001a08c
 8002a68:	2001435c 	.word	0x2001435c
 8002a6c:	2001a083 	.word	0x2001a083
 8002a70:	0801bfe4 	.word	0x0801bfe4
 8002a74:	2001a088 	.word	0x2001a088
 8002a78:	20018f1c 	.word	0x20018f1c
 8002a7c:	20014324 	.word	0x20014324
					if((res == FR_OK) && (fno.fname[0]))
 8002a80:	4ba9      	ldr	r3, [pc, #676]	; (8002d28 <main+0xa84>)
 8002a82:	7d9b      	ldrb	r3, [r3, #22]
 8002a84:	b15b      	cbz	r3, 8002a9e <main+0x7fa>
						f_unlink (fno.fname);
 8002a86:	f00d f87b 	bl	800fb80 <f_unlink>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
 8002a8a:	ab0b      	add	r3, sp, #44	; 0x2c
 8002a8c:	4aa7      	ldr	r2, [pc, #668]	; (8002d2c <main+0xa88>)
 8002a8e:	49a6      	ldr	r1, [pc, #664]	; (8002d28 <main+0xa84>)
 8002a90:	4640      	mov	r0, r8
 8002a92:	f00d f82b 	bl	800faec <f_findfirst>
 8002a96:	4603      	mov	r3, r0
						f_unlink (fno.fname);
 8002a98:	48a5      	ldr	r0, [pc, #660]	; (8002d30 <main+0xa8c>)
					if((res == FR_OK) && (fno.fname[0]))
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <main+0x7dc>
				itoa(presetNumberToSave, charBuf, 10);
 8002a9e:	4ba5      	ldr	r3, [pc, #660]	; (8002d34 <main+0xa90>)
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	a90e      	add	r1, sp, #56	; 0x38
 8002aa4:	7818      	ldrb	r0, [r3, #0]
 8002aa6:	f016 fc17 	bl	80192d8 <itoa>
				len = ((strlen(charBuf)));
 8002aaa:	a80e      	add	r0, sp, #56	; 0x38
 8002aac:	f7fd fc14 	bl	80002d8 <strlen>
						finalString[i+3] = buffer[i+4];
 8002ab0:	4aa1      	ldr	r2, [pc, #644]	; (8002d38 <main+0xa94>)
					finalString[17] = '.';
 8002ab2:	4ba2      	ldr	r3, [pc, #648]	; (8002d3c <main+0xa98>)
 8002ab4:	f8cd 3061 	str.w	r3, [sp, #97]	; 0x61
						finalString[i+3] = buffer[i+4];
 8002ab8:	7913      	ldrb	r3, [r2, #4]
							finalString[i+3] = '_';
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	bf08      	it	eq
 8002abe:	235f      	moveq	r3, #95	; 0x5f
 8002ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
						finalString[i+3] = buffer[i+4];
 8002ac4:	7953      	ldrb	r3, [r2, #5]
							finalString[i+3] = '_';
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	bf08      	it	eq
 8002aca:	235f      	moveq	r3, #95	; 0x5f
 8002acc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
						finalString[i+3] = buffer[i+4];
 8002ad0:	7993      	ldrb	r3, [r2, #6]
							finalString[i+3] = '_';
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	bf08      	it	eq
 8002ad6:	235f      	moveq	r3, #95	; 0x5f
 8002ad8:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
						finalString[i+3] = buffer[i+4];
 8002adc:	79d3      	ldrb	r3, [r2, #7]
							finalString[i+3] = '_';
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	bf08      	it	eq
 8002ae2:	235f      	moveq	r3, #95	; 0x5f
 8002ae4:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
						finalString[i+3] = buffer[i+4];
 8002ae8:	7a13      	ldrb	r3, [r2, #8]
							finalString[i+3] = '_';
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	bf08      	it	eq
 8002aee:	235f      	moveq	r3, #95	; 0x5f
 8002af0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
						finalString[i+3] = buffer[i+4];
 8002af4:	7a53      	ldrb	r3, [r2, #9]
							finalString[i+3] = '_';
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	bf08      	it	eq
 8002afa:	235f      	moveq	r3, #95	; 0x5f
 8002afc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
						finalString[i+3] = buffer[i+4];
 8002b00:	7a93      	ldrb	r3, [r2, #10]
							finalString[i+3] = '_';
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	bf08      	it	eq
 8002b06:	235f      	moveq	r3, #95	; 0x5f
 8002b08:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
						finalString[i+3] = buffer[i+4];
 8002b0c:	7ad3      	ldrb	r3, [r2, #11]
							finalString[i+3] = '_';
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	bf08      	it	eq
 8002b12:	235f      	moveq	r3, #95	; 0x5f
 8002b14:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
						finalString[i+3] = buffer[i+4];
 8002b18:	7b13      	ldrb	r3, [r2, #12]
							finalString[i+3] = '_';
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	bf08      	it	eq
 8002b1e:	235f      	moveq	r3, #95	; 0x5f
 8002b20:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
						finalString[i+3] = buffer[i+4];
 8002b24:	7b53      	ldrb	r3, [r2, #13]
							finalString[i+3] = '_';
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	bf08      	it	eq
 8002b2a:	235f      	moveq	r3, #95	; 0x5f
 8002b2c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
						finalString[i+3] = buffer[i+4];
 8002b30:	7b93      	ldrb	r3, [r2, #14]
							finalString[i+3] = '_';
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	bf08      	it	eq
 8002b36:	235f      	moveq	r3, #95	; 0x5f
 8002b38:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
						finalString[i+3] = buffer[i+4];
 8002b3c:	7bd3      	ldrb	r3, [r2, #15]
							finalString[i+3] = '_';
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	bf08      	it	eq
 8002b42:	235f      	moveq	r3, #95	; 0x5f
 8002b44:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
						finalString[i+3] = buffer[i+4];
 8002b48:	7c13      	ldrb	r3, [r2, #16]
							finalString[i+3] = '_';
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	bf08      	it	eq
 8002b4e:	235f      	moveq	r3, #95	; 0x5f
 8002b50:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
						finalString[i+3] = buffer[i+4];
 8002b54:	7c53      	ldrb	r3, [r2, #17]
							finalString[i+3] = '_';
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	bf08      	it	eq
 8002b5a:	235f      	moveq	r3, #95	; 0x5f
				if (len == 1)
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
					finalString[21] = 0;
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
					finalString[2] = '_';
 8002b6a:	f04f 035f 	mov.w	r3, #95	; 0x5f
 8002b6e:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
				if (len == 1)
 8002b72:	d064      	beq.n	8002c3e <main+0x99a>
					finalString[1] = charBuf[1];
 8002b74:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002b78:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
					finalString[0] = charBuf[0];
 8002b7c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002b80:	220a      	movs	r2, #10
 8002b82:	4639      	mov	r1, r7
 8002b84:	486e      	ldr	r0, [pc, #440]	; (8002d40 <main+0xa9c>)
					finalString[0] = '0';
 8002b86:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002b8a:	f00c fab3 	bl	800f0f4 <f_open>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d05b      	beq.n	8002c4a <main+0x9a6>
	presetWaitingToWrite = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	4a6b      	ldr	r2, [pc, #428]	; (8002d44 <main+0xaa0>)
 8002b96:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8002b98:	4a6b      	ldr	r2, [pc, #428]	; (8002d48 <main+0xaa4>)
 8002b9a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9c:	b662      	cpsie	i
}
 8002b9e:	e6b7      	b.n	8002910 <main+0x66c>
				  checkForSDCardPreset(presetNumberToLoad);
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <main+0xaa8>)
 8002ba2:	f893 8000 	ldrb.w	r8, [r3]
	prevVoice = numberToLoad;
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <main+0xaac>)
				  checkForSDCardPreset(presetNumberToLoad);
 8002ba8:	fa5f f888 	uxtb.w	r8, r8
	prevVoice = numberToLoad;
 8002bac:	f8c3 8000 	str.w	r8, [r3]
	voice = numberToLoad;
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <main+0xab0>)
 8002bb2:	f8c3 8000 	str.w	r8, [r3]
  __IO uint8_t status = SD_PRESENT;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f88d 3016 	strb.w	r3, [sp, #22]
  return status;
 8002bbc:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if(BSP_SD_IsDetected())
 8002bc0:	b1fb      	cbz	r3, 8002c02 <main+0x95e>
 8002bc2:	9b03      	ldr	r3, [sp, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 808d 	bne.w	8002ce4 <main+0xa40>
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <main+0xab4>)
			audioOutBuffer[i] = 0;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	d1fb      	bne.n	8002bd0 <main+0x92c>
		loadFailed = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <main+0xab8>)
		diskBusy = 1;
 8002bdc:	495a      	ldr	r1, [pc, #360]	; (8002d48 <main+0xaa4>)
		loadFailed = 0;
 8002bde:	7013      	strb	r3, [r2, #0]
		disk_initialize(0);
 8002be0:	4618      	mov	r0, r3
		presetWaitingToLoad = 0;
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <main+0xabc>)
 8002be4:	6013      	str	r3, [r2, #0]
		diskBusy = 1;
 8002be6:	2201      	movs	r2, #1
 8002be8:	700a      	strb	r2, [r1, #0]
		disk_initialize(0);
 8002bea:	f009 fff9 	bl	800cbe0 <disk_initialize>
	    disk_status(0);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f009 ffeb 	bl	800cbcc <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	494c      	ldr	r1, [pc, #304]	; (8002d2c <main+0xa88>)
 8002bfa:	485a      	ldr	r0, [pc, #360]	; (8002d64 <main+0xac0>)
 8002bfc:	f00c fa2e 	bl	800f05c <f_mount>
 8002c00:	b368      	cbz	r0, 8002c5e <main+0x9ba>
		loadFailed = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <main+0xab8>)
 8002c06:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <main+0xaa4>)
 8002c0c:	7013      	strb	r3, [r2, #0]
	return found;
 8002c0e:	e67f      	b.n	8002910 <main+0x66c>
					finalStringC[2] = charBufC[1];
 8002c10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
					strcat(finalStringC, "*.ebp");
 8002c14:	a80b      	add	r0, sp, #44	; 0x2c
					finalStringC[2] = charBufC[1];
 8002c16:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
					finalStringC[1] = charBufC[0];
 8002c1a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002c1e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
					finalStringC[0] = '0';
 8002c22:	2330      	movs	r3, #48	; 0x30
 8002c24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					strcat(finalStringC, "*.ebp");
 8002c28:	f7fd fb56 	bl	80002d8 <strlen>
 8002c2c:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <main+0xac4>)
 8002c2e:	4603      	mov	r3, r0
 8002c30:	a90b      	add	r1, sp, #44	; 0x2c
 8002c32:	6810      	ldr	r0, [r2, #0]
 8002c34:	8892      	ldrh	r2, [r2, #4]
 8002c36:	50c8      	str	r0, [r1, r3]
 8002c38:	440b      	add	r3, r1
 8002c3a:	809a      	strh	r2, [r3, #4]
 8002c3c:	e6b7      	b.n	80029ae <main+0x70a>
					finalString[1] = charBuf[0];
 8002c3e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002c42:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
					finalString[0] = '0';
 8002c46:	2330      	movs	r3, #48	; 0x30
 8002c48:	e79a      	b.n	8002b80 <main+0x8dc>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8002c4a:	9a02      	ldr	r2, [sp, #8]
 8002c4c:	ab07      	add	r3, sp, #28
 8002c4e:	493a      	ldr	r1, [pc, #232]	; (8002d38 <main+0xa94>)
 8002c50:	483b      	ldr	r0, [pc, #236]	; (8002d40 <main+0xa9c>)
 8002c52:	f00c fcef 	bl	800f634 <f_write>
					f_close(&SDFile);
 8002c56:	483a      	ldr	r0, [pc, #232]	; (8002d40 <main+0xa9c>)
 8002c58:	f00c fe48 	bl	800f8ec <f_close>
 8002c5c:	e799      	b.n	8002b92 <main+0x8ee>
			itoa(numberToLoad, charBuf, 10);
 8002c5e:	220a      	movs	r2, #10
 8002c60:	a90e      	add	r1, sp, #56	; 0x38
 8002c62:	4640      	mov	r0, r8
 8002c64:	f016 fb38 	bl	80192d8 <itoa>
			int len = ((strlen(charBuf)));
 8002c68:	a80e      	add	r0, sp, #56	; 0x38
 8002c6a:	f7fd fb35 	bl	80002d8 <strlen>
			if (len == 1)
 8002c6e:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
 8002c70:	4602      	mov	r2, r0
			if (len == 1)
 8002c72:	d03e      	beq.n	8002cf2 <main+0xa4e>
				strcat(charBuf, "*.ebp");
 8002c74:	493c      	ldr	r1, [pc, #240]	; (8002d68 <main+0xac4>)
 8002c76:	ab0e      	add	r3, sp, #56	; 0x38
 8002c78:	6808      	ldr	r0, [r1, #0]
 8002c7a:	8889      	ldrh	r1, [r1, #4]
 8002c7c:	5098      	str	r0, [r3, r2]
 8002c7e:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
 8002c80:	4638      	mov	r0, r7
 8002c82:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
 8002c84:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
 8002c86:	a90e      	add	r1, sp, #56	; 0x38
 8002c88:	f016 fb96 	bl	80193b8 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <main+0xa88>)
 8002c90:	4925      	ldr	r1, [pc, #148]	; (8002d28 <main+0xa84>)
 8002c92:	4836      	ldr	r0, [pc, #216]	; (8002d6c <main+0xac8>)
 8002c94:	f00c ff2a 	bl	800faec <f_findfirst>
			if(res == FR_OK)
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d1b2      	bne.n	8002c02 <main+0x95e>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8002c9c:	2211      	movs	r2, #17
 8002c9e:	4924      	ldr	r1, [pc, #144]	; (8002d30 <main+0xa8c>)
 8002ca0:	4827      	ldr	r0, [pc, #156]	; (8002d40 <main+0xa9c>)
 8002ca2:	f00c fa27 	bl	800f0f4 <f_open>
 8002ca6:	4680      	mov	r8, r0
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d1aa      	bne.n	8002c02 <main+0x95e>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8002cac:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <main+0xa9c>)
 8002cae:	ab0b      	add	r3, sp, #44	; 0x2c
 8002cb0:	4921      	ldr	r1, [pc, #132]	; (8002d38 <main+0xa94>)
 8002cb2:	68d2      	ldr	r2, [r2, #12]
 8002cb4:	4822      	ldr	r0, [pc, #136]	; (8002d40 <main+0xa9c>)
 8002cb6:	f00c fb81 	bl	800f3bc <f_read>
					presetWaitingToParse = bytesRead;
 8002cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					f_close(&SDFile);
 8002cbc:	4820      	ldr	r0, [pc, #128]	; (8002d40 <main+0xa9c>)
					presetWaitingToParse = bytesRead;
 8002cbe:	f8c9 3000 	str.w	r3, [r9]
					f_close(&SDFile);
 8002cc2:	f00c fe13 	bl	800f8ec <f_close>
	  	  i2cSending = 1;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <main+0xacc>)
 8002cca:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ccc:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8002cce:	b662      	cpsie	i
	  	i2cSending = 0;
 8002cd0:	f882 8000 	strb.w	r8, [r2]
 8002cd4:	e798      	b.n	8002c08 <main+0x964>
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <main+0xab4>)
					audioOutBuffer[i + 1] = 0;
 8002cd8:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002cdc:	3308      	adds	r3, #8
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	d1fa      	bne.n	8002cd8 <main+0xa34>
 8002ce2:	e642      	b.n	800296a <main+0x6c6>
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <main+0xab4>)
			audioOutBuffer[i + 1] = 0;
 8002ce6:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002cea:	3308      	adds	r3, #8
 8002cec:	429c      	cmp	r4, r3
 8002cee:	d1fa      	bne.n	8002ce6 <main+0xa42>
 8002cf0:	e772      	b.n	8002bd8 <main+0x934>
				finalString[2] = charBuf[1];
 8002cf2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				strcat(finalString, "*.ebp");
 8002cf6:	4638      	mov	r0, r7
				finalString[2] = charBuf[1];
 8002cf8:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
				finalString[1] = charBuf[0];
 8002cfc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002d00:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
				finalString[0] = '0';
 8002d04:	2330      	movs	r3, #48	; 0x30
 8002d06:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
				strcat(finalString, "*.ebp");
 8002d0a:	f7fd fae5 	bl	80002d8 <strlen>
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <main+0xac4>)
 8002d10:	4603      	mov	r3, r0
 8002d12:	6810      	ldr	r0, [r2, #0]
 8002d14:	8892      	ldrh	r2, [r2, #4]
 8002d16:	50f8      	str	r0, [r7, r3]
 8002d18:	443b      	add	r3, r7
 8002d1a:	809a      	strh	r2, [r3, #4]
 8002d1c:	e7b6      	b.n	8002c8c <main+0x9e8>
	  getPresetNamesFromSDCard();
 8002d1e:	f7fe fb03 	bl	8001328 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 8002d22:	f7ff bbec 	b.w	80024fe <main+0x25a>
 8002d26:	bf00      	nop
 8002d28:	200163c4 	.word	0x200163c4
 8002d2c:	2001da30 	.word	0x2001da30
 8002d30:	200163da 	.word	0x200163da
 8002d34:	2001a083 	.word	0x2001a083
 8002d38:	30042380 	.word	0x30042380
 8002d3c:	7062652e 	.word	0x7062652e
 8002d40:	2001d800 	.word	0x2001d800
 8002d44:	2001a08c 	.word	0x2001a08c
 8002d48:	2001435c 	.word	0x2001435c
 8002d4c:	2001a082 	.word	0x2001a082
 8002d50:	2000069c 	.word	0x2000069c
 8002d54:	2001425c 	.word	0x2001425c
 8002d58:	30000000 	.word	0x30000000
 8002d5c:	20018540 	.word	0x20018540
 8002d60:	2001a084 	.word	0x2001a084
 8002d64:	2001d5cc 	.word	0x2001d5cc
 8002d68:	0801bfe4 	.word	0x0801bfe4
 8002d6c:	20014324 	.word	0x20014324
 8002d70:	200164de 	.word	0x200164de

08002d74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d78:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d7a:	4806      	ldr	r0, [pc, #24]	; (8002d94 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <MX_RNG_Init+0x20>)
 8002d80:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d84:	f006 f912 	bl	8008fac <HAL_RNG_Init>
 8002d88:	b900      	cbnz	r0, 8002d8c <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d8a:	bd08      	pop	{r3, pc}
 8002d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d90:	f7ff bff0 	b.w	8002d74 <Error_Handler>
 8002d94:	2001c68c 	.word	0x2001c68c
 8002d98:	48021800 	.word	0x48021800

08002d9c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	b0b2      	sub	sp, #200	; 0xc8
 8002da0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da2:	22c0      	movs	r2, #192	; 0xc0
 8002da4:	2100      	movs	r1, #0
 8002da6:	a802      	add	r0, sp, #8
 8002da8:	f016 fada 	bl	8019360 <memset>
  if(rngHandle->Instance==RNG)
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_RNG_MspInit+0x54>)
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002db4:	b032      	add	sp, #200	; 0xc8
 8002db6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dbc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dbe:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc4:	f004 fefe 	bl	8007bc4 <HAL_RCCEx_PeriphCLKConfig>
 8002dc8:	b970      	cbnz	r0, 8002de8 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RNG_MspInit+0x58>)
 8002dcc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	9b01      	ldr	r3, [sp, #4]
}
 8002de4:	b032      	add	sp, #200	; 0xc8
 8002de6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002de8:	f7ff ffc4 	bl	8002d74 <Error_Handler>
 8002dec:	e7ed      	b.n	8002dca <HAL_RNG_MspInit+0x2e>
 8002dee:	bf00      	nop
 8002df0:	48021800 	.word	0x48021800
 8002df4:	58024400 	.word	0x58024400

08002df8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002df8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002dfa:	4818      	ldr	r0, [pc, #96]	; (8002e5c <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002dfc:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002dfe:	4c18      	ldr	r4, [pc, #96]	; (8002e60 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e00:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e02:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e04:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e06:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e08:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e0a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e0c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002e0e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002e12:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002e16:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002e1a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e1c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e20:	f006 fb14 	bl	800944c <HAL_SAI_InitProtocol>
 8002e24:	b998      	cbnz	r0, 8002e4e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e26:	480f      	ldr	r0, [pc, #60]	; (8002e64 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002e28:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e2a:	4c0f      	ldr	r4, [pc, #60]	; (8002e68 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e2c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e2e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002e30:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e32:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002e34:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e36:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e38:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e3a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e3c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002e3e:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e40:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e42:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e46:	f006 fb01 	bl	800944c <HAL_SAI_InitProtocol>
 8002e4a:	b918      	cbnz	r0, 8002e54 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002e4c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e4e:	f7ff ff91 	bl	8002d74 <Error_Handler>
 8002e52:	e7e8      	b.n	8002e26 <MX_SAI1_Init+0x2e>
}
 8002e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002e58:	f7ff bf8c 	b.w	8002d74 <Error_Handler>
 8002e5c:	2001c794 	.word	0x2001c794
 8002e60:	40015804 	.word	0x40015804
 8002e64:	2001c82c 	.word	0x2001c82c
 8002e68:	40015824 	.word	0x40015824
 8002e6c:	00000000 	.word	0x00000000

08002e70 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002e70:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002e72:	4a55      	ldr	r2, [pc, #340]	; (8002fc8 <HAL_SAI_MspInit+0x158>)
{
 8002e74:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8002e76:	6803      	ldr	r3, [r0, #0]
{
 8002e78:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002e7e:	4a53      	ldr	r2, [pc, #332]	; (8002fcc <HAL_SAI_MspInit+0x15c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d03f      	beq.n	8002f04 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002e84:	b009      	add	sp, #36	; 0x24
 8002e86:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8002e88:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_SAI_MspInit+0x160>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2a00      	cmp	r2, #0
 8002e8e:	f000 8081 	beq.w	8002f94 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8002e92:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e94:	2074      	movs	r0, #116	; 0x74
 8002e96:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002e98:	4d4e      	ldr	r5, [pc, #312]	; (8002fd4 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8002e9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e9c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e9e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8002fc0 <HAL_SAI_MspInit+0x150>
 8002ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea6:	a902      	add	r1, sp, #8
 8002ea8:	484b      	ldr	r0, [pc, #300]	; (8002fd8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002eaa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002eac:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb0:	f002 ffb6 	bl	8005e20 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002eb4:	4949      	ldr	r1, [pc, #292]	; (8002fdc <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002eb6:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002eba:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002ebe:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002ec0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec8:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002eca:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002ece:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed8:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eda:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ede:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002eea:	2304      	movs	r3, #4
 8002eec:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002eee:	f001 faeb 	bl	80044c8 <HAL_DMA_Init>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d15c      	bne.n	8002fb0 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8002ef6:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002ef8:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002efe:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8002f02:	d1bf      	bne.n	8002e84 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_SAI_MspInit+0x160>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	b3b2      	cbz	r2, 8002f78 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8002f0a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f0c:	2008      	movs	r0, #8
 8002f0e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002f10:	4d33      	ldr	r5, [pc, #204]	; (8002fe0 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8002f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f14:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f16:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8002fc0 <HAL_SAI_MspInit+0x150>
 8002f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1e:	a902      	add	r1, sp, #8
 8002f20:	482d      	ldr	r0, [pc, #180]	; (8002fd8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f24:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f28:	f002 ff7a 	bl	8005e20 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002f2c:	492d      	ldr	r1, [pc, #180]	; (8002fe4 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002f2e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f30:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002f32:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f34:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002f36:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f42:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002f46:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f52:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002f56:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f60:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002f64:	f001 fab0 	bl	80044c8 <HAL_DMA_Init>
 8002f68:	bb28      	cbnz	r0, 8002fb6 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002f6a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8002f6e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002f70:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8002f74:	b009      	add	sp, #36	; 0x24
 8002f76:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f78:	491b      	ldr	r1, [pc, #108]	; (8002fe8 <HAL_SAI_MspInit+0x178>)
 8002f7a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002f7e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002f82:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002f86:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002f8a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f8e:	9101      	str	r1, [sp, #4]
 8002f90:	9901      	ldr	r1, [sp, #4]
 8002f92:	e7ba      	b.n	8002f0a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f94:	4914      	ldr	r1, [pc, #80]	; (8002fe8 <HAL_SAI_MspInit+0x178>)
 8002f96:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002f9a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002f9e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002fa2:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002fa6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002faa:	9100      	str	r1, [sp, #0]
 8002fac:	9900      	ldr	r1, [sp, #0]
 8002fae:	e770      	b.n	8002e92 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8002fb0:	f7ff fee0 	bl	8002d74 <Error_Handler>
 8002fb4:	e79f      	b.n	8002ef6 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8002fb6:	f7ff fedd 	bl	8002d74 <Error_Handler>
 8002fba:	e7d6      	b.n	8002f6a <HAL_SAI_MspInit+0xfa>
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	00000003 	.word	0x00000003
 8002fc8:	40015804 	.word	0x40015804
 8002fcc:	40015824 	.word	0x40015824
 8002fd0:	2001c6a0 	.word	0x2001c6a0
 8002fd4:	2001c6a4 	.word	0x2001c6a4
 8002fd8:	58021000 	.word	0x58021000
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	2001c71c 	.word	0x2001c71c
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	58024400 	.word	0x58024400

08002fec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002fec:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002ff0:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8002ff2:	4c07      	ldr	r4, [pc, #28]	; (8003010 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002ff4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8002ff8:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8002ffa:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002ffe:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8003002:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	2001c8c4 	.word	0x2001c8c4
 8003010:	52007000 	.word	0x52007000

08003014 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_SD_MspInit+0xb0>)
{
 8003018:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 800301a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 800301e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	9408      	str	r4, [sp, #32]
 8003022:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003026:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 800302a:	d001      	beq.n	8003030 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800302c:	b00b      	add	sp, #44	; 0x2c
 800302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003032:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003034:	2601      	movs	r6, #1
 8003036:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003038:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303c:	4823      	ldr	r0, [pc, #140]	; (80030cc <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800303e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003042:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003046:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800304a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800304e:	9201      	str	r2, [sp, #4]
 8003050:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003056:	f042 0204 	orr.w	r2, r2, #4
 800305a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800305e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003062:	f002 0204 	and.w	r2, r2, #4
 8003066:	9202      	str	r2, [sp, #8]
 8003068:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800306a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003076:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800307e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003086:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800308c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003090:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003094:	f002 fec4 	bl	8005e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003098:	2302      	movs	r3, #2
 800309a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309c:	a904      	add	r1, sp, #16
 800309e:	480c      	ldr	r0, [pc, #48]	; (80030d0 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80030a0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030aa:	f002 feb9 	bl	8005e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80030ae:	4622      	mov	r2, r4
 80030b0:	4621      	mov	r1, r4
 80030b2:	2031      	movs	r0, #49	; 0x31
 80030b4:	f001 f876 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80030b8:	2031      	movs	r0, #49	; 0x31
 80030ba:	f001 f8b1 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 80030be:	b00b      	add	sp, #44	; 0x2c
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	52007000 	.word	0x52007000
 80030c8:	58024400 	.word	0x58024400
 80030cc:	58020800 	.word	0x58020800
 80030d0:	58020c00 	.word	0x58020c00
 80030d4:	00000000 	.word	0x00000000

080030d8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030d8:	4813      	ldr	r0, [pc, #76]	; (8003128 <MX_SPI1_Init+0x50>)
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003120 <MX_SPI1_Init+0x48>
{
 80030e0:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80030e2:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 80030e4:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030e6:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80030e8:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ea:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ec:	ed80 7b08 	vstr	d7, [r0, #32]
 80030f0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80030fc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003100:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003104:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003108:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800310c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003110:	f007 fc38 	bl	800a984 <HAL_SPI_Init>
 8003114:	b900      	cbnz	r0, 8003118 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003116:	bd08      	pop	{r3, pc}
 8003118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800311c:	f7ff be2a 	b.w	8002d74 <Error_Handler>
	...
 8003128:	2001caa8 	.word	0x2001caa8
 800312c:	40013000 	.word	0x40013000

08003130 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003130:	4813      	ldr	r0, [pc, #76]	; (8003180 <MX_SPI5_Init+0x50>)
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003134:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003178 <MX_SPI5_Init+0x48>
{
 8003138:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800313a:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 800313c:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800313e:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8003140:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003142:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003144:	ed80 7b08 	vstr	d7, [r0, #32]
 8003148:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800314c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003150:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003154:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003158:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800315c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003160:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003164:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003168:	f007 fc0c 	bl	800a984 <HAL_SPI_Init>
 800316c:	b900      	cbnz	r0, 8003170 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800316e:	bd08      	pop	{r3, pc}
 8003170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003174:	f7ff bdfe 	b.w	8002d74 <Error_Handler>
	...
 8003180:	2001cb30 	.word	0x2001cb30
 8003184:	40015000 	.word	0x40015000

08003188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318a:	2400      	movs	r4, #0
{
 800318c:	b0bb      	sub	sp, #236	; 0xec
 800318e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003190:	22c0      	movs	r2, #192	; 0xc0
 8003192:	4621      	mov	r1, r4
 8003194:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003196:	9408      	str	r4, [sp, #32]
 8003198:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800319c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a0:	f016 f8de 	bl	8019360 <memset>
  if(spiHandle->Instance==SPI1)
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	4a70      	ldr	r2, [pc, #448]	; (8003368 <HAL_SPI_MspInit+0x1e0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 80031ac:	4a6f      	ldr	r2, [pc, #444]	; (800336c <HAL_SPI_MspInit+0x1e4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d071      	beq.n	8003296 <HAL_SPI_MspInit+0x10e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80031b2:	b03b      	add	sp, #236	; 0xec
 80031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <HAL_SPI_MspInit+0x1e8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	a904      	add	r1, sp, #16
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80031ba:	4e6e      	ldr	r6, [pc, #440]	; (8003374 <HAL_SPI_MspInit+0x1ec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80031c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031c4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80031c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80031cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031d0:	9200      	str	r2, [sp, #0]
 80031d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031e0:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031ec:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	4861      	ldr	r0, [pc, #388]	; (8003378 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031f6:	2203      	movs	r2, #3
 80031f8:	2305      	movs	r3, #5
 80031fa:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	f002 fe0f 	bl	8005e20 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003202:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003204:	4a5d      	ldr	r2, [pc, #372]	; (800337c <HAL_SPI_MspInit+0x1f4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003206:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003208:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800320a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800320e:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003210:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003214:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003216:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003218:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800321a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800321c:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003220:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003222:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003226:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003228:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800322c:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800322e:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003230:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003232:	f001 f949 	bl	80044c8 <HAL_DMA_Init>
 8003236:	2800      	cmp	r0, #0
 8003238:	f040 808d 	bne.w	8003356 <HAL_SPI_MspInit+0x1ce>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800323c:	4c50      	ldr	r4, [pc, #320]	; (8003380 <HAL_SPI_MspInit+0x1f8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800323e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8003240:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003242:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003244:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003246:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800324a:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800324e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003250:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003254:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003256:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003258:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800325c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003260:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003262:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003264:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003266:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003268:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800326a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800326c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800326e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003270:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003272:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003276:	f001 f927 	bl	80044c8 <HAL_DMA_Init>
 800327a:	2800      	cmp	r0, #0
 800327c:	d168      	bne.n	8003350 <HAL_SPI_MspInit+0x1c8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2102      	movs	r1, #2
 8003282:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003284:	67ac      	str	r4, [r5, #120]	; 0x78
 8003286:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8003288:	f000 ff8c 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800328c:	2023      	movs	r0, #35	; 0x23
 800328e:	f000 ffc7 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 8003292:	b03b      	add	sp, #236	; 0xec
 8003294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800329a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800329c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800329e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032a2:	f004 fc8f 	bl	8007bc4 <HAL_RCCEx_PeriphCLKConfig>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d158      	bne.n	800335c <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80032ae:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032b8:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ba:	4833      	ldr	r0, [pc, #204]	; (8003388 <HAL_SPI_MspInit+0x200>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80032c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80032c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032cc:	9202      	str	r2, [sp, #8]
 80032ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032e0:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032e2:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032e8:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ea:	9303      	str	r3, [sp, #12]
 80032ec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	e9cd 1404 	strd	r1, r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032f2:	a904      	add	r1, sp, #16
 80032f4:	f002 fd94 	bl	8005e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032fc:	4822      	ldr	r0, [pc, #136]	; (8003388 <HAL_SPI_MspInit+0x200>)
 80032fe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003302:	9304      	str	r3, [sp, #16]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8003304:	4c21      	ldr	r4, [pc, #132]	; (800338c <HAL_SPI_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003306:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800330c:	f002 fd88 	bl	8005e20 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_SPI_MspInit+0x208>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8003312:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8003314:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003316:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8003318:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800331c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003320:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003324:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003328:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800332c:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800332e:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8003332:	f001 f8c9 	bl	80044c8 <HAL_DMA_Init>
 8003336:	b9a0      	cbnz	r0, 8003362 <HAL_SPI_MspInit+0x1da>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8003338:	2200      	movs	r2, #0
 800333a:	2104      	movs	r1, #4
 800333c:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800333e:	67ec      	str	r4, [r5, #124]	; 0x7c
 8003340:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8003342:	f000 ff2f 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8003346:	2055      	movs	r0, #85	; 0x55
 8003348:	f000 ff6a 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 800334c:	b03b      	add	sp, #236	; 0xec
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003350:	f7ff fd10 	bl	8002d74 <Error_Handler>
 8003354:	e793      	b.n	800327e <HAL_SPI_MspInit+0xf6>
      Error_Handler();
 8003356:	f7ff fd0d 	bl	8002d74 <Error_Handler>
 800335a:	e76f      	b.n	800323c <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 800335c:	f7ff fd0a 	bl	8002d74 <Error_Handler>
 8003360:	e7a3      	b.n	80032aa <HAL_SPI_MspInit+0x122>
      Error_Handler();
 8003362:	f7ff fd07 	bl	8002d74 <Error_Handler>
 8003366:	e7e7      	b.n	8003338 <HAL_SPI_MspInit+0x1b0>
 8003368:	40013000 	.word	0x40013000
 800336c:	40015000 	.word	0x40015000
 8003370:	58024400 	.word	0x58024400
 8003374:	2001c940 	.word	0x2001c940
 8003378:	58020000 	.word	0x58020000
 800337c:	40020070 	.word	0x40020070
 8003380:	2001c9b8 	.word	0x2001c9b8
 8003384:	40020088 	.word	0x40020088
 8003388:	58021400 	.word	0x58021400
 800338c:	2001ca30 	.word	0x2001ca30
 8003390:	40020058 	.word	0x40020058

08003394 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8003394:	e7fe      	b.n	8003394 <Default_Handler>
 8003396:	bf00      	nop

08003398 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8003398:	480f      	ldr	r0, [pc, #60]	; (80033d8 <Reset_Handler+0x40>)
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <Reset_Handler+0x44>)
 800339c:	4290      	cmp	r0, r2
 800339e:	d003      	beq.n	80033a8 <Reset_Handler+0x10>
		*pDest = *pSource;
 80033a0:	1a12      	subs	r2, r2, r0
 80033a2:	490f      	ldr	r1, [pc, #60]	; (80033e0 <Reset_Handler+0x48>)
 80033a4:	f016 f808 	bl	80193b8 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 80033a8:	480e      	ldr	r0, [pc, #56]	; (80033e4 <Reset_Handler+0x4c>)
 80033aa:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <Reset_Handler+0x50>)
 80033ac:	4290      	cmp	r0, r2
 80033ae:	d003      	beq.n	80033b8 <Reset_Handler+0x20>
		*pDest = 0;
 80033b0:	1a12      	subs	r2, r2, r0
 80033b2:	2100      	movs	r1, #0
 80033b4:	f015 ffd4 	bl	8019360 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <Reset_Handler+0x54>)
 80033ba:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <Reset_Handler+0x58>)
 80033bc:	4290      	cmp	r0, r2
 80033be:	d003      	beq.n	80033c8 <Reset_Handler+0x30>
		*pDest = *pSource;
 80033c0:	1a12      	subs	r2, r2, r0
 80033c2:	490c      	ldr	r1, [pc, #48]	; (80033f4 <Reset_Handler+0x5c>)
 80033c4:	f015 fff8 	bl	80193b8 <memcpy>
	SystemInit();
 80033c8:	f000 fdea 	bl	8003fa0 <SystemInit>
	__libc_init_array();
 80033cc:	f015 ffd0 	bl	8019370 <__libc_init_array>
	(void)main();
 80033d0:	f7fe ff68 	bl	80022a4 <main>
	for (;;) ;
 80033d4:	e7fe      	b.n	80033d4 <Reset_Handler+0x3c>
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000a24 	.word	0x20000a24
 80033e0:	0802b100 	.word	0x0802b100
 80033e4:	20000a28 	.word	0x20000a28
 80033e8:	2001dda4 	.word	0x2001dda4
 80033ec:	00000400 	.word	0x00000400
 80033f0:	0000c280 	.word	0x0000c280
 80033f4:	0802bb24 	.word	0x0802bb24

080033f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_MspInit+0x20>)
{
 80033fa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003400:	f042 0202 	orr.w	r2, r2, #2
 8003404:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003414:	b002      	add	sp, #8
 8003416:	4770      	bx	lr
 8003418:	58024400 	.word	0x58024400

0800341c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800341c:	e7fe      	b.n	800341c <NMI_Handler>
 800341e:	bf00      	nop

08003420 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <HardFault_Handler>
 8003422:	bf00      	nop

08003424 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <MemManage_Handler>
 8003426:	bf00      	nop

08003428 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <BusFault_Handler>
 800342a:	bf00      	nop

0800342c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <UsageFault_Handler>
 800342e:	bf00      	nop

08003430 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <DebugMon_Handler>:
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop

08003438 <PendSV_Handler>:
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800343c:	f000 be6c 	b.w	8004118 <HAL_IncTick>

08003440 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <DMA1_Stream1_IRQHandler+0x8>)
 8003442:	f002 b8ad 	b.w	80055a0 <HAL_DMA_IRQHandler>
 8003446:	bf00      	nop
 8003448:	2001c6a4 	.word	0x2001c6a4

0800344c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <DMA1_Stream2_IRQHandler+0x8>)
 800344e:	f002 b8a7 	b.w	80055a0 <HAL_DMA_IRQHandler>
 8003452:	bf00      	nop
 8003454:	2001c71c 	.word	0x2001c71c

08003458 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <DMA1_Stream3_IRQHandler+0x8>)
 800345a:	f002 b8a1 	b.w	80055a0 <HAL_DMA_IRQHandler>
 800345e:	bf00      	nop
 8003460:	2001ca30 	.word	0x2001ca30

08003464 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <DMA1_Stream4_IRQHandler+0x8>)
 8003466:	f002 b89b 	b.w	80055a0 <HAL_DMA_IRQHandler>
 800346a:	bf00      	nop
 800346c:	2001c940 	.word	0x2001c940

08003470 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <DMA1_Stream5_IRQHandler+0x8>)
 8003472:	f002 b895 	b.w	80055a0 <HAL_DMA_IRQHandler>
 8003476:	bf00      	nop
 8003478:	2001c9b8 	.word	0x2001c9b8

0800347c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <I2C2_EV_IRQHandler+0x8>)
 800347e:	f003 b90b 	b.w	8006698 <HAL_I2C_EV_IRQHandler>
 8003482:	bf00      	nop
 8003484:	200142ac 	.word	0x200142ac

08003488 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003488:	4801      	ldr	r0, [pc, #4]	; (8003490 <I2C2_ER_IRQHandler+0x8>)
 800348a:	f003 ba7d 	b.w	8006988 <HAL_I2C_ER_IRQHandler>
 800348e:	bf00      	nop
 8003490:	200142ac 	.word	0x200142ac

08003494 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <SPI1_IRQHandler+0x8>)
 8003496:	f007 be9b 	b.w	800b1d0 <HAL_SPI_IRQHandler>
 800349a:	bf00      	nop
 800349c:	2001caa8 	.word	0x2001caa8

080034a0 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <SDMMC1_IRQHandler+0x8>)
 80034a2:	f007 b837 	b.w	800a514 <HAL_SD_IRQHandler>
 80034a6:	bf00      	nop
 80034a8:	2001c8c4 	.word	0x2001c8c4

080034ac <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80034ac:	4801      	ldr	r0, [pc, #4]	; (80034b4 <SPI5_IRQHandler+0x8>)
 80034ae:	f007 be8f 	b.w	800b1d0 <HAL_SPI_IRQHandler>
 80034b2:	bf00      	nop
 80034b4:	2001cb30 	.word	0x2001cb30

080034b8 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);

			freqMult[i][v] = 1.0f;
 80034c0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
 80034c4:	b087      	sub	sp, #28
        oversamplerArray[i] = 0.0f;
 80034c6:	4be0      	ldr	r3, [pc, #896]	; (8003848 <audioInitSynth+0x390>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	2600      	movs	r6, #0
 80034cc:	49df      	ldr	r1, [pc, #892]	; (800384c <audioInitSynth+0x394>)
 80034ce:	f8df b468 	ldr.w	fp, [pc, #1128]	; 8003938 <audioInitSynth+0x480>
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80034d2:	4cdf      	ldr	r4, [pc, #892]	; (8003850 <audioInitSynth+0x398>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 80034d4:	eddf badf 	vldr	s23, [pc, #892]	; 8003854 <audioInitSynth+0x39c>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 80034d8:	ed9f badf 	vldr	s22, [pc, #892]	; 8003858 <audioInitSynth+0x3a0>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80034dc:	eddf 8adf 	vldr	s17, [pc, #892]	; 800385c <audioInitSynth+0x3a4>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80034e0:	ed9f aadf 	vldr	s20, [pc, #892]	; 8003860 <audioInitSynth+0x3a8>
 80034e4:	9102      	str	r1, [sp, #8]
        oversamplerArray[i] = 0.0f;
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80034ea:	9603      	str	r6, [sp, #12]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80034ec:	4bdd      	ldr	r3, [pc, #884]	; (8003864 <audioInitSynth+0x3ac>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	48dd      	ldr	r0, [pc, #884]	; (8003868 <audioInitSynth+0x3b0>)
 80034f2:	2102      	movs	r1, #2
 80034f4:	eb03 0806 	add.w	r8, r3, r6
 80034f8:	4bdc      	ldr	r3, [pc, #880]	; (800386c <audioInitSynth+0x3b4>)
 80034fa:	4430      	add	r0, r6
 80034fc:	4635      	mov	r5, r6
 80034fe:	199f      	adds	r7, r3, r6
 8003500:	4623      	mov	r3, r4
 8003502:	f106 0918 	add.w	r9, r6, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 8003506:	ed9f 8ada 	vldr	s16, [pc, #872]	; 8003870 <audioInitSynth+0x3b8>
			midiAdd[i][v] = 0.0f;
 800350a:	f04f 0a00 	mov.w	sl, #0
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 800350e:	f00d f845 	bl	801059c <tOversampler_init>
			tPBSaw_init(&saw[i][v], &leaf);
 8003512:	4640      	mov	r0, r8
 8003514:	4621      	mov	r1, r4
 8003516:	f011 fd73 	bl	8015000 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
 800351a:	4638      	mov	r0, r7
 800351c:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 800351e:	f108 0808 	add.w	r8, r8, #8
			tPBPulse_init(&pulse[i][v], &leaf);
 8003522:	f011 fcd5 	bl	8014ed0 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8003526:	4bd3      	ldr	r3, [pc, #844]	; (8003874 <audioInitSynth+0x3bc>)
 8003528:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 800352a:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
 800352c:	1958      	adds	r0, r3, r5
 800352e:	f011 f9dd 	bl	80148ec <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
 8003532:	4bd1      	ldr	r3, [pc, #836]	; (8003878 <audioInitSynth+0x3c0>)
 8003534:	4621      	mov	r1, r4
 8003536:	1958      	adds	r0, r3, r5
 8003538:	f011 fa70 	bl	8014a1c <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 800353c:	4bcf      	ldr	r3, [pc, #828]	; (800387c <audioInitSynth+0x3c4>)
 800353e:	4621      	mov	r1, r4
 8003540:	1958      	adds	r0, r3, r5
 8003542:	f011 fdad 	bl	80150a0 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 8003546:	4bce      	ldr	r3, [pc, #824]	; (8003880 <audioInitSynth+0x3c8>)
 8003548:	4621      	mov	r1, r4
 800354a:	1958      	adds	r0, r3, r5
 800354c:	f011 fb82 	bl	8014c54 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 8003550:	4bcc      	ldr	r3, [pc, #816]	; (8003884 <audioInitSynth+0x3cc>)
 8003552:	eef0 0a48 	vmov.f32	s1, s16
 8003556:	4621      	mov	r1, r4
 8003558:	1958      	adds	r0, r3, r5
 800355a:	eeb0 0a6b 	vmov.f32	s0, s23
 800355e:	f00d fe5f 	bl	8011220 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
 8003562:	4bc9      	ldr	r3, [pc, #804]	; (8003888 <audioInitSynth+0x3d0>)
 8003564:	442b      	add	r3, r5
 8003566:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
 800356a:	4bc8      	ldr	r3, [pc, #800]	; (800388c <audioInitSynth+0x3d4>)
 800356c:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
 800356e:	3508      	adds	r5, #8
 8003570:	454d      	cmp	r5, r9
			midiAdd[i][v] = 0.0f;
 8003572:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
 8003576:	d1cc      	bne.n	8003512 <audioInitSynth+0x5a>
 8003578:	4635      	mov	r5, r6
 800357a:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800357e:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8003890 <audioInitSynth+0x3d8>
 8003582:	ed9f 8ac4 	vldr	s16, [pc, #784]	; 8003894 <audioInitSynth+0x3dc>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003586:	eddf 9ac4 	vldr	s19, [pc, #784]	; 8003898 <audioInitSynth+0x3e0>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800358a:	4bc4      	ldr	r3, [pc, #784]	; (800389c <audioInitSynth+0x3e4>)
 800358c:	eef0 0a49 	vmov.f32	s1, s18
 8003590:	eeb0 0a48 	vmov.f32	s0, s16
 8003594:	2101      	movs	r1, #1
 8003596:	1958      	adds	r0, r3, r5
 8003598:	4622      	mov	r2, r4
 800359a:	f00e f99b 	bl	80118d4 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 800359e:	4bc0      	ldr	r3, [pc, #768]	; (80038a0 <audioInitSynth+0x3e8>)
 80035a0:	eef0 0a49 	vmov.f32	s1, s18
 80035a4:	4622      	mov	r2, r4
 80035a6:	1958      	adds	r0, r3, r5
 80035a8:	eeb0 0a48 	vmov.f32	s0, s16
 80035ac:	2100      	movs	r1, #0
 80035ae:	f00e f991 	bl	80118d4 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80035b2:	4bbc      	ldr	r3, [pc, #752]	; (80038a4 <audioInitSynth+0x3ec>)
 80035b4:	4622      	mov	r2, r4
 80035b6:	eef0 0a49 	vmov.f32	s1, s18
 80035ba:	1958      	adds	r0, r3, r5
 80035bc:	eeb0 0a48 	vmov.f32	s0, s16
 80035c0:	2102      	movs	r1, #2
 80035c2:	f00e f987 	bl	80118d4 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 80035c6:	4bb8      	ldr	r3, [pc, #736]	; (80038a8 <audioInitSynth+0x3f0>)
 80035c8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80035cc:	4621      	mov	r1, r4
 80035ce:	1958      	adds	r0, r3, r5
 80035d0:	eeb0 0a48 	vmov.f32	s0, s16
 80035d4:	f00f fd66 	bl	80130a4 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 80035d8:	4bb4      	ldr	r3, [pc, #720]	; (80038ac <audioInitSynth+0x3f4>)
 80035da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035de:	4621      	mov	r1, r4
 80035e0:	1958      	adds	r0, r3, r5
 80035e2:	eef0 0a4b 	vmov.f32	s1, s22
 80035e6:	eeb0 0a48 	vmov.f32	s0, s16
 80035ea:	f00f fb9d 	bl	8012d28 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80035ee:	4bb0      	ldr	r3, [pc, #704]	; (80038b0 <audioInitSynth+0x3f8>)
 80035f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035f4:	4621      	mov	r1, r4
 80035f6:	1958      	adds	r0, r3, r5
 80035f8:	eef0 0a69 	vmov.f32	s1, s19
 80035fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003600:	f00f f888 	bl	8012714 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003604:	4bab      	ldr	r3, [pc, #684]	; (80038b4 <audioInitSynth+0x3fc>)
 8003606:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800360a:	4621      	mov	r1, r4
 800360c:	1958      	adds	r0, r3, r5
 800360e:	eef0 0a69 	vmov.f32	s1, s19
 8003612:	eeb0 0a48 	vmov.f32	s0, s16
 8003616:	f00f f9f1 	bl	80129fc <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800361a:	4ba7      	ldr	r3, [pc, #668]	; (80038b8 <audioInitSynth+0x400>)
 800361c:	4622      	mov	r2, r4
 800361e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003622:	1958      	adds	r0, r3, r5
 8003624:	eeb0 0a48 	vmov.f32	s0, s16
 8003628:	2104      	movs	r1, #4
 800362a:	f00e fdcd 	bl	80121c8 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 800362e:	4ba3      	ldr	r3, [pc, #652]	; (80038bc <audioInitSynth+0x404>)
 8003630:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003634:	4621      	mov	r1, r4
 8003636:	1958      	adds	r0, r3, r5
 8003638:	eeb0 0a48 	vmov.f32	s0, s16
 800363c:	f010 f9e2 	bl	8013a04 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003640:	4b9f      	ldr	r3, [pc, #636]	; (80038c0 <audioInitSynth+0x408>)
 8003642:	eef0 0a68 	vmov.f32	s1, s17
 8003646:	4621      	mov	r1, r4
 8003648:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 800364a:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 800364c:	eeb0 0a6b 	vmov.f32	s0, s23
 8003650:	f00d fde6 	bl	8011220 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8003654:	42bd      	cmp	r5, r7
 8003656:	d198      	bne.n	800358a <audioInitSynth+0xd2>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8003658:	4b9a      	ldr	r3, [pc, #616]	; (80038c4 <audioInitSynth+0x40c>)
 800365a:	2500      	movs	r5, #0
 800365c:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003660:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <audioInitSynth+0x410>)
 8003662:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8003664:	eb08 0005 	add.w	r0, r8, r5
 8003668:	4621      	mov	r1, r4
 800366a:	f011 fe17 	bl	801529c <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 800366e:	1978      	adds	r0, r7, r5
 8003670:	4621      	mov	r1, r4
 8003672:	f011 fe59 	bl	8015328 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8003676:	4b95      	ldr	r3, [pc, #596]	; (80038cc <audioInitSynth+0x414>)
 8003678:	4621      	mov	r1, r4
 800367a:	1998      	adds	r0, r3, r6
 800367c:	4428      	add	r0, r5
 800367e:	f011 f935 	bl	80148ec <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003682:	4b93      	ldr	r3, [pc, #588]	; (80038d0 <audioInitSynth+0x418>)
 8003684:	4621      	mov	r1, r4
 8003686:	1998      	adds	r0, r3, r6
 8003688:	4428      	add	r0, r5
 800368a:	f012 f83f 	bl	801570c <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 800368e:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <audioInitSynth+0x41c>)
 8003690:	4621      	mov	r1, r4
 8003692:	1998      	adds	r0, r3, r6
 8003694:	4428      	add	r0, r5
 8003696:	f012 f895 	bl	80157c4 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 800369a:	4b8f      	ldr	r3, [pc, #572]	; (80038d8 <audioInitSynth+0x420>)
 800369c:	4621      	mov	r1, r4
 800369e:	1998      	adds	r0, r3, r6
 80036a0:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 80036a2:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80036a4:	f011 ff6e 	bl	8015584 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 80036a8:	2d20      	cmp	r5, #32
 80036aa:	d1db      	bne.n	8003664 <audioInitSynth+0x1ac>
 80036ac:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80036ae:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 80038dc <audioInitSynth+0x424>
 80036b2:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80036b6:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 80038e0 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80036ba:	4628      	mov	r0, r5
 80036bc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80036c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80036c4:	4623      	mov	r3, r4
 80036c6:	eef0 0a4a 	vmov.f32	s1, s20
 80036ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ce:	eeb0 0a49 	vmov.f32	s0, s18
 80036d2:	4984      	ldr	r1, [pc, #528]	; (80038e4 <audioInitSynth+0x42c>)
 80036d4:	f00d fa90 	bl	8010bf8 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80036d8:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80036da:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80036dc:	eeb0 0a48 	vmov.f32	s0, s16
 80036e0:	f00d fb38 	bl	8010d54 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80036e4:	42bd      	cmp	r5, r7
 80036e6:	d1e8      	bne.n	80036ba <audioInitSynth+0x202>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <audioInitSynth+0x430>)
 80036ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80036ee:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80036f2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80038ec <audioInitSynth+0x434>
 80036f6:	1998      	adds	r0, r3, r6
 80036f8:	4621      	mov	r1, r4
 80036fa:	f00f f80b 	bl	8012714 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 80036fe:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <audioInitSynth+0x438>)
 8003700:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003704:	4621      	mov	r1, r4
 8003706:	1998      	adds	r0, r3, r6
 8003708:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800370c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80038f4 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003710:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003712:	f00f f973 	bl	80129fc <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003716:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <audioInitSynth+0x440>)
 8003718:	4a78      	ldr	r2, [pc, #480]	; (80038fc <audioInitSynth+0x444>)
 800371a:	eef0 0a4b 	vmov.f32	s1, s22
 800371e:	eb03 0a06 	add.w	sl, r3, r6
 8003722:	4b77      	ldr	r3, [pc, #476]	; (8003900 <audioInitSynth+0x448>)
 8003724:	1990      	adds	r0, r2, r6
 8003726:	eeb0 0a4a 	vmov.f32	s0, s20
 800372a:	199f      	adds	r7, r3, r6
 800372c:	f106 0320 	add.w	r3, r6, #32
 8003730:	4621      	mov	r1, r4
 8003732:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8003904 <audioInitSynth+0x44c>
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	f00f faf6 	bl	8012d28 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800373c:	ed9f 8a72 	vldr	s16, [pc, #456]	; 8003908 <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003740:	9605      	str	r6, [sp, #20]


	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003742:	eddf 9a53 	vldr	s19, [pc, #332]	; 8003890 <audioInitSynth+0x3d8>
 8003746:	ed9f 9a53 	vldr	s18, [pc, #332]	; 8003894 <audioInitSynth+0x3dc>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800374a:	eddf aa53 	vldr	s21, [pc, #332]	; 8003898 <audioInitSynth+0x3e0>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 800374e:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
 8003750:	4650      	mov	r0, sl
 8003752:	4621      	mov	r1, r4
 8003754:	f00d f826 	bl	80107a4 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8003758:	4b6c      	ldr	r3, [pc, #432]	; (800390c <audioInitSynth+0x454>)
 800375a:	4621      	mov	r1, r4
 800375c:	4638      	mov	r0, r7
 800375e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003762:	eb03 0905 	add.w	r9, r3, r5
 8003766:	f00e faa1 	bl	8011cac <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800376a:	4638      	mov	r0, r7
 800376c:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003770:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003774:	f00e fafa 	bl	8011d6c <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8003778:	4b65      	ldr	r3, [pc, #404]	; (8003910 <audioInitSynth+0x458>)
 800377a:	4621      	mov	r1, r4
 800377c:	4648      	mov	r0, r9
 800377e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003782:	eb03 0805 	add.w	r8, r3, r5
 8003786:	f00e fa91 	bl	8011cac <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800378a:	4648      	mov	r0, r9
 800378c:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003790:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003792:	f00e faeb 	bl	8011d6c <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <audioInitSynth+0x45c>)
 8003798:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800379c:	4621      	mov	r1, r4
 800379e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80037a2:	4640      	mov	r0, r8
 80037a4:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80038ec <audioInitSynth+0x434>
 80037a8:	eb03 0905 	add.w	r9, r3, r5
 80037ac:	f00e ffb2 	bl	8012714 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037b0:	4640      	mov	r0, r8
 80037b2:	eeb0 0a48 	vmov.f32	s0, s16
 80037b6:	f00e ffb1 	bl	801271c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <audioInitSynth+0x460>)
 80037bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80037c0:	4621      	mov	r1, r4
 80037c2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80037c6:	4648      	mov	r0, r9
 80037c8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80038f4 <audioInitSynth+0x43c>
 80037cc:	eb03 0805 	add.w	r8, r3, r5
 80037d0:	f00f f914 	bl	80129fc <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037d4:	4648      	mov	r0, r9
 80037d6:	eeb0 0a48 	vmov.f32	s0, s16
 80037da:	f00f f913 	bl	8012a04 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <audioInitSynth+0x464>)
 80037e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80037e4:	4621      	mov	r1, r4
 80037e6:	eb03 0905 	add.w	r9, r3, r5
 80037ea:	eef0 0a4b 	vmov.f32	s1, s22
 80037ee:	4640      	mov	r0, r8
 80037f0:	eeb0 0a4a 	vmov.f32	s0, s20
 80037f4:	f00f fa98 	bl	8012d28 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037f8:	eeb0 0a48 	vmov.f32	s0, s16
 80037fc:	4640      	mov	r0, r8
 80037fe:	f00f fa97 	bl	8012d30 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8003802:	4648      	mov	r0, r9
 8003804:	4621      	mov	r1, r4
 8003806:	f00d f889 	bl	801091c <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 800380a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800380e:	4944      	ldr	r1, [pc, #272]	; (8003920 <audioInitSynth+0x468>)
 8003810:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003814:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003818:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8003924 <audioInitSynth+0x46c>
 800381c:	4a42      	ldr	r2, [pc, #264]	; (8003928 <audioInitSynth+0x470>)
 800381e:	eb01 0805 	add.w	r8, r1, r5
 8003822:	4648      	mov	r0, r9
 8003824:	4941      	ldr	r1, [pc, #260]	; (800392c <audioInitSynth+0x474>)
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003930 <audioInitSynth+0x478>
 800382c:	f00d f92a 	bl	8010a84 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003830:	eeb0 0a48 	vmov.f32	s0, s16
 8003834:	4648      	mov	r0, r9
 8003836:	f00d f94b 	bl	8010ad0 <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <audioInitSynth+0x47c>)
 800383c:	4621      	mov	r1, r4
 800383e:	4640      	mov	r0, r8
 8003840:	eb03 0905 	add.w	r9, r3, r5
 8003844:	e07e      	b.n	8003944 <audioInitSynth+0x48c>
 8003846:	bf00      	nop
 8003848:	2001d22c 	.word	0x2001d22c
 800384c:	2001cea8 	.word	0x2001cea8
 8003850:	20005298 	.word	0x20005298
 8003854:	42800000 	.word	0x42800000
 8003858:	3ff33333 	.word	0x3ff33333
 800385c:	3c23d70a 	.word	0x3c23d70a
 8003860:	447a0000 	.word	0x447a0000
 8003864:	2001d32c 	.word	0x2001d32c
 8003868:	2001d1f0 	.word	0x2001d1f0
 800386c:	2001d310 	.word	0x2001d310
 8003870:	3d4ccccd 	.word	0x3d4ccccd
 8003874:	2001d3e8 	.word	0x2001d3e8
 8003878:	2001d584 	.word	0x2001d584
 800387c:	2001d344 	.word	0x2001d344
 8003880:	2001d400 	.word	0x2001d400
 8003884:	2001d2d4 	.word	0x2001d2d4
 8003888:	2001cf00 	.word	0x2001cf00
 800388c:	2001d16c 	.word	0x2001d16c
 8003890:	3f333333 	.word	0x3f333333
 8003894:	44fa0000 	.word	0x44fa0000
 8003898:	3f19999a 	.word	0x3f19999a
 800389c:	2001d05c 	.word	0x2001d05c
 80038a0:	2001cf58 	.word	0x2001cf58
 80038a4:	2001cd84 	.word	0x2001cd84
 80038a8:	2001ce64 	.word	0x2001ce64
 80038ac:	2001cd6c 	.word	0x2001cd6c
 80038b0:	2001cd5c 	.word	0x2001cd5c
 80038b4:	2001cd4c 	.word	0x2001cd4c
 80038b8:	2001cd3c 	.word	0x2001cd3c
 80038bc:	2001cd2c 	.word	0x2001cd2c
 80038c0:	2001cec8 	.word	0x2001cec8
 80038c4:	2001cfac 	.word	0x2001cfac
 80038c8:	2001cf8c 	.word	0x2001cf8c
 80038cc:	2001cffc 	.word	0x2001cffc
 80038d0:	2001d03c 	.word	0x2001d03c
 80038d4:	2001d01c 	.word	0x2001d01c
 80038d8:	2001cfcc 	.word	0x2001cfcc
 80038dc:	3dcccccd 	.word	0x3dcccccd
 80038e0:	3f7fffac 	.word	0x3f7fffac
 80038e4:	200011bc 	.word	0x200011bc
 80038e8:	2001d1e0 	.word	0x2001d1e0
 80038ec:	42a00000 	.word	0x42a00000
 80038f0:	2001d1e8 	.word	0x2001d1e8
 80038f4:	463b8000 	.word	0x463b8000
 80038f8:	2001cd94 	.word	0x2001cd94
 80038fc:	2001d1c4 	.word	0x2001d1c4
 8003900:	2001cdf4 	.word	0x2001cdf4
 8003904:	3f8b851f 	.word	0x3f8b851f
 8003908:	47bb8000 	.word	0x47bb8000
 800390c:	2001ce14 	.word	0x2001ce14
 8003910:	2001d3a8 	.word	0x2001d3a8
 8003914:	2001d3c8 	.word	0x2001d3c8
 8003918:	2001cdb4 	.word	0x2001cdb4
 800391c:	2001cdd4 	.word	0x2001cdd4
 8003920:	2001d184 	.word	0x2001d184
 8003924:	c2b40000 	.word	0xc2b40000
 8003928:	30002000 	.word	0x30002000
 800392c:	30012000 	.word	0x30012000
 8003930:	3727c5ac 	.word	0x3727c5ac
 8003934:	2001d1a4 	.word	0x2001d1a4
 8003938:	2001d16c 	.word	0x2001d16c
 800393c:	3e4ccccd 	.word	0x3e4ccccd
 8003940:	3e638e39 	.word	0x3e638e39
 8003944:	f010 ffd2 	bl	80148ec <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003948:	eeb0 0a48 	vmov.f32	s0, s16
 800394c:	4640      	mov	r0, r8
 800394e:	f011 f84d 	bl	80149ec <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 8003952:	4621      	mov	r1, r4
 8003954:	4648      	mov	r0, r9
 8003956:	f010 ffc9 	bl	80148ec <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800395a:	4648      	mov	r0, r9
 800395c:	eeb0 0a48 	vmov.f32	s0, s16
 8003960:	f011 f844 	bl	80149ec <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8003964:	4640      	mov	r0, r8
 8003966:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 800393c <audioInitSynth+0x484>
 800396a:	f011 f821 	bl	80149b0 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800396e:	4648      	mov	r0, r9
 8003970:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 8003940 <audioInitSynth+0x488>
 8003974:	f011 f81c 	bl	80149b0 <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003978:	4b69      	ldr	r3, [pc, #420]	; (8003b20 <audioInitSynth+0x668>)
 800397a:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 800397e:	4622      	mov	r2, r4
 8003980:	eb03 0805 	add.w	r8, r3, r5
 8003984:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <audioInitSynth+0x66c>)
 8003986:	eef0 0a68 	vmov.f32	s1, s17
 800398a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8003b28 <audioInitSynth+0x670>
 800398e:	1958      	adds	r0, r3, r5
 8003990:	2100      	movs	r1, #0
 8003992:	f00d f8a1 	bl	8010ad8 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <audioInitSynth+0x674>)
 8003998:	eef0 0a69 	vmov.f32	s1, s19
 800399c:	4622      	mov	r2, r4
 800399e:	2101      	movs	r1, #1
 80039a0:	4640      	mov	r0, r8
 80039a2:	eeb0 0a49 	vmov.f32	s0, s18
 80039a6:	eb03 0905 	add.w	r9, r3, r5
 80039aa:	f00d ff93 	bl	80118d4 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80039ae:	4640      	mov	r0, r8
 80039b0:	eeb0 0a48 	vmov.f32	s0, s16
 80039b4:	f00e f970 	bl	8011c98 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80039b8:	4b5d      	ldr	r3, [pc, #372]	; (8003b30 <audioInitSynth+0x678>)
 80039ba:	eef0 0a69 	vmov.f32	s1, s19
 80039be:	4622      	mov	r2, r4
 80039c0:	2100      	movs	r1, #0
 80039c2:	4648      	mov	r0, r9
 80039c4:	eeb0 0a49 	vmov.f32	s0, s18
 80039c8:	eb03 0805 	add.w	r8, r3, r5
 80039cc:	f00d ff82 	bl	80118d4 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80039d0:	4648      	mov	r0, r9
 80039d2:	eeb0 0a48 	vmov.f32	s0, s16
 80039d6:	f00e f95f 	bl	8011c98 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80039da:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <audioInitSynth+0x67c>)
 80039dc:	4622      	mov	r2, r4
 80039de:	eef0 0a69 	vmov.f32	s1, s19
 80039e2:	2102      	movs	r1, #2
 80039e4:	4640      	mov	r0, r8
 80039e6:	eeb0 0a49 	vmov.f32	s0, s18
 80039ea:	eb03 0905 	add.w	r9, r3, r5
 80039ee:	f00d ff71 	bl	80118d4 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80039f2:	4640      	mov	r0, r8
 80039f4:	eeb0 0a48 	vmov.f32	s0, s16
 80039f8:	f00e f94e 	bl	8011c98 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80039fc:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <audioInitSynth+0x680>)
 80039fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a02:	4621      	mov	r1, r4
 8003a04:	4648      	mov	r0, r9
 8003a06:	eeb0 0a49 	vmov.f32	s0, s18
 8003a0a:	eb03 0805 	add.w	r8, r3, r5
 8003a0e:	f00f fb49 	bl	80130a4 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a12:	4648      	mov	r0, r9
 8003a14:	eeb0 0a48 	vmov.f32	s0, s16
 8003a18:	f00f ffda 	bl	80139d0 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <audioInitSynth+0x684>)
 8003a1e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a22:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003b40 <audioInitSynth+0x688>
 8003a26:	4621      	mov	r1, r4
 8003a28:	4640      	mov	r0, r8
 8003a2a:	eeb0 0a49 	vmov.f32	s0, s18
 8003a2e:	eb03 0905 	add.w	r9, r3, r5
 8003a32:	f00f f979 	bl	8012d28 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a36:	4640      	mov	r0, r8
 8003a38:	eeb0 0a48 	vmov.f32	s0, s16
 8003a3c:	f00f f978 	bl	8012d30 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <audioInitSynth+0x68c>)
 8003a42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a46:	4621      	mov	r1, r4
 8003a48:	eef0 0a6a 	vmov.f32	s1, s21
 8003a4c:	4648      	mov	r0, r9
 8003a4e:	eeb0 0a49 	vmov.f32	s0, s18
 8003a52:	eb03 0805 	add.w	r8, r3, r5
 8003a56:	f00e fe5d 	bl	8012714 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a5a:	4648      	mov	r0, r9
 8003a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a60:	f00e fe5c 	bl	801271c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003a64:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <audioInitSynth+0x690>)
 8003a66:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	eef0 0a6a 	vmov.f32	s1, s21
 8003a70:	4640      	mov	r0, r8
 8003a72:	eeb0 0a49 	vmov.f32	s0, s18
 8003a76:	eb03 0905 	add.w	r9, r3, r5
 8003a7a:	f00e ffbf 	bl	80129fc <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003a7e:	4640      	mov	r0, r8
 8003a80:	eeb0 0a48 	vmov.f32	s0, s16
 8003a84:	f00e ffbe 	bl	8012a04 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003a88:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <audioInitSynth+0x694>)
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a90:	eb03 0805 	add.w	r8, r3, r5
 8003a94:	2104      	movs	r1, #4
 8003a96:	eeb0 0a49 	vmov.f32	s0, s18
 8003a9a:	4648      	mov	r0, r9
 8003a9c:	f00e fb94 	bl	80121c8 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8003aa4:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
 8003aa6:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003aa8:	f00e fd82 	bl	80125b0 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003aac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ab0:	eeb0 0a49 	vmov.f32	s0, s18
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	f00f ffa4 	bl	8013a04 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003abc:	eeb0 0a48 	vmov.f32	s0, s16
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	f010 f967 	bl	8013d94 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 8003ac6:	42ae      	cmp	r6, r5
 8003ac8:	f47f ae42 	bne.w	8003750 <audioInitSynth+0x298>
 8003acc:	9e05      	ldr	r6, [sp, #20]
 8003ace:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 8003ad2:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8003b50 <audioInitSynth+0x698>
 8003ad6:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003ad8:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 8003ada:	eef0 0a68 	vmov.f32	s1, s17
 8003ade:	4621      	mov	r1, r4
 8003ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ae4:	f00d fb9c 	bl	8011220 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003ae8:	45ab      	cmp	fp, r5
 8003aea:	d1f4      	bne.n	8003ad6 <audioInitSynth+0x61e>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003aec:	9b02      	ldr	r3, [sp, #8]
		}

		//arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
		//arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003aee:	4622      	mov	r2, r4
 8003af0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003b54 <audioInitSynth+0x69c>
 8003af4:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003af6:	3304      	adds	r3, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003af8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003b58 <audioInitSynth+0x6a0>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003afc:	f10b 0b04 	add.w	fp, fp, #4
 8003b00:	9302      	str	r3, [sp, #8]
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <audioInitSynth+0x6a4>)
 8003b04:	1998      	adds	r0, r3, r6
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003b06:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003b08:	f00d fee4 	bl	80118d4 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	b123      	cbz	r3, 8003b1a <audioInitSynth+0x662>
	}

}
 8003b10:	b007      	add	sp, #28
 8003b12:	ecbd 8b0a 	vpop	{d8-d12}
 8003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	e4e5      	b.n	80034ec <audioInitSynth+0x34>
 8003b20:	2001cd0c 	.word	0x2001cd0c
 8003b24:	2001cea8 	.word	0x2001cea8
 8003b28:	3f7d70a4 	.word	0x3f7d70a4
 8003b2c:	2001ccec 	.word	0x2001ccec
 8003b30:	2001ccac 	.word	0x2001ccac
 8003b34:	2001cccc 	.word	0x2001cccc
 8003b38:	2001cc8c 	.word	0x2001cc8c
 8003b3c:	2001cc6c 	.word	0x2001cc6c
 8003b40:	3fcccccd 	.word	0x3fcccccd
 8003b44:	2001cc4c 	.word	0x2001cc4c
 8003b48:	2001cc2c 	.word	0x2001cc2c
 8003b4c:	2001cc0c 	.word	0x2001cc0c
 8003b50:	00000000 	.word	0x00000000
 8003b54:	3e99999a 	.word	0x3e99999a
 8003b58:	46947000 	.word	0x46947000
 8003b5c:	2001cef0 	.word	0x2001cef0

08003b60 <audioFreeSynth>:

void  audioFreeSynth()
{
 8003b60:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		//for (int i = 0; i < NUM_EFFECT; i++)
		{
			tTapeDelay_free(&tapeDelay[v]);
 8003b62:	4e0b      	ldr	r6, [pc, #44]	; (8003b90 <audioFreeSynth+0x30>)
			tLinearDelay_free(&delay2[v]);
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <audioFreeSynth+0x34>)
			tLinearDelay_free(&delay1[v]);
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <audioFreeSynth+0x38>)
			tTapeDelay_free(&tapeDelay[v]);
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f00c fc7f 	bl	801046c <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f00c f9e0 	bl	800ff34 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
 8003b74:	4620      	mov	r0, r4
 8003b76:	f00c f9dd 	bl	800ff34 <tLinearDelay_free>
			tTapeDelay_free(&tapeDelay[v]);
 8003b7a:	1d30      	adds	r0, r6, #4
 8003b7c:	f00c fc76 	bl	801046c <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
 8003b80:	1d28      	adds	r0, r5, #4
 8003b82:	f00c f9d7 	bl	800ff34 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
 8003b86:	1d20      	adds	r0, r4, #4
		}
	}
}
 8003b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			tLinearDelay_free(&delay1[v]);
 8003b8c:	f00c b9d2 	b.w	800ff34 <tLinearDelay_free>
 8003b90:	2001d548 	.word	0x2001d548
 8003b94:	2001ce3c 	.word	0x2001ce3c
 8003b98:	2001ce34 	.word	0x2001ce34

08003b9c <audioSwitchToSynth>:

void  audioSwitchToSynth()
{
 8003b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != SynthLoaded)
 8003ba0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003c80 <audioSwitchToSynth+0xe4>
{
 8003ba4:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != SynthLoaded)
 8003ba8:	f898 3000 	ldrb.w	r3, [r8]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d02e      	beq.n	8003c0e <audioSwitchToSynth+0x72>
	{
		if (whichStringModelLoaded == String1Loaded)
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d048      	beq.n	8003c46 <audioSwitchToSynth+0xaa>
		{
			audioFreeString1();
		}
		if (whichStringModelLoaded == String2Loaded)
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d04c      	beq.n	8003c52 <audioSwitchToSynth+0xb6>
 8003bb8:	4c27      	ldr	r4, [pc, #156]	; (8003c58 <audioSwitchToSynth+0xbc>)
 8003bba:	4f28      	ldr	r7, [pc, #160]	; (8003c5c <audioSwitchToSynth+0xc0>)
 8003bbc:	4e28      	ldr	r6, [pc, #160]	; (8003c60 <audioSwitchToSynth+0xc4>)
 8003bbe:	f104 0908 	add.w	r9, r4, #8
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
		{
			//for (int i = 0; i < NUM_EFFECT; i++)
			{

				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
 8003bc2:	4d28      	ldr	r5, [pc, #160]	; (8003c64 <audioSwitchToSynth+0xc8>)
 8003bc4:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8003c68 <audioSwitchToSynth+0xcc>
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
 8003bc8:	eddf 8a28 	vldr	s17, [pc, #160]	; 8003c6c <audioSwitchToSynth+0xd0>
				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
 8003bcc:	4620      	mov	r0, r4
 8003bce:	eeb0 0a48 	vmov.f32	s0, s16
 8003bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd6:	462a      	mov	r2, r5
 8003bd8:	f00c f93e 	bl	800fe58 <tLinearDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003bdc:	3404      	adds	r4, #4
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
 8003bde:	4638      	mov	r0, r7
 8003be0:	eeb0 0a48 	vmov.f32	s0, s16
 8003be4:	462a      	mov	r2, r5
 8003be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bea:	f00c f935 	bl	800fe58 <tLinearDelay_initToPool>
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
 8003bee:	4630      	mov	r0, r6
 8003bf0:	eeb0 0a68 	vmov.f32	s0, s17
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	f644 6120 	movw	r1, #20000	; 0x4e20
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003bfa:	3704      	adds	r7, #4
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
 8003bfc:	f00c fc08 	bl	8010410 <tTapeDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003c00:	454c      	cmp	r4, r9
 8003c02:	f106 0604 	add.w	r6, r6, #4
 8003c06:	d1e1      	bne.n	8003bcc <audioSwitchToSynth+0x30>
			}
		}
		whichStringModelLoaded = SynthLoaded;
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f888 3000 	strb.w	r3, [r8]
 8003c0e:	4c18      	ldr	r4, [pc, #96]	; (8003c70 <audioSwitchToSynth+0xd4>)
{
 8003c10:	2500      	movs	r5, #0
 8003c12:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003c84 <audioSwitchToSynth+0xe8>
	}
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
 8003c16:	2601      	movs	r6, #1
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 8003c18:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8003c74 <audioSwitchToSynth+0xd8>
 8003c1c:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8003c20:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 8003c22:	3404      	adds	r4, #4
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 8003c24:	eeb0 0a48 	vmov.f32	s0, s16
 8003c28:	f00d fb4a 	bl	80112c0 <tExpSmooth_setFactor>
	for (int i = 0; i < 20; i++)
 8003c2c:	42a7      	cmp	r7, r4
		knobFrozen[i] = 1;
 8003c2e:	f808 6005 	strb.w	r6, [r8, r5]
	for (int i = 0; i < 20; i++)
 8003c32:	f105 0501 	add.w	r5, r5, #1
 8003c36:	d1f3      	bne.n	8003c20 <audioSwitchToSynth+0x84>
	}
	audioFrameFunction = audioFrameSynth;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <audioSwitchToSynth+0xdc>)
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <audioSwitchToSynth+0xe0>)
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	ecbd 8b02 	vpop	{d8}
 8003c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeString1();
 8003c46:	f017 fdbf 	bl	801b7c8 <__audioFreeString1_veneer>
		if (whichStringModelLoaded == String2Loaded)
 8003c4a:	f898 3000 	ldrb.w	r3, [r8]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d1b2      	bne.n	8003bb8 <audioSwitchToSynth+0x1c>
			audioFreeString2();
 8003c52:	f017 fd8d 	bl	801b770 <__audioFreeString2_veneer>
 8003c56:	e7af      	b.n	8003bb8 <audioSwitchToSynth+0x1c>
 8003c58:	2001ce34 	.word	0x2001ce34
 8003c5c:	2001ce3c 	.word	0x2001ce3c
 8003c60:	2001d548 	.word	0x2001d548
 8003c64:	200052ec 	.word	0x200052ec
 8003c68:	457a0000 	.word	0x457a0000
 8003c6c:	466a6000 	.word	0x466a6000
 8003c70:	20005244 	.word	0x20005244
 8003c74:	3a83126f 	.word	0x3a83126f
 8003c78:	20001194 	.word	0x20001194
 8003c7c:	0000b3c1 	.word	0x0000b3c1
 8003c80:	2001426d 	.word	0x2001426d
 8003c84:	200051e0 	.word	0x200051e0

08003c88 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
 8003c88:	4b8f      	ldr	r3, [pc, #572]	; (8003ec8 <changeOversampling+0x240>)
{
 8003c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8e:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
 8003c92:	681b      	ldr	r3, [r3, #0]
{
 8003c94:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
 8003c96:	4283      	cmp	r3, r0
{
 8003c98:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
 8003c9a:	f000 810c 	beq.w	8003eb6 <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <changeOversampling+0x244>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8107 	beq.w	8003eb6 <changeOversampling+0x22e>
 8003ca8:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003caa:	eddf 7a89 	vldr	s15, [pc, #548]	; 8003ed0 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003cae:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003cb0:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
 8003cb2:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003cb4:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003cb8:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003cba:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003cbe:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003cc0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003cc4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003cc8:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8003ccc:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
 8003cce:	4614      	mov	r4, r2
 8003cd0:	9904      	ldr	r1, [sp, #16]
 8003cd2:	9206      	str	r2, [sp, #24]
 8003cd4:	eb03 0a01 	add.w	sl, r3, r1
 8003cd8:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <changeOversampling+0x250>)
 8003cda:	eb03 0902 	add.w	r9, r3, r2
 8003cde:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <changeOversampling+0x254>)
 8003ce0:	eb03 0802 	add.w	r8, r3, r2
 8003ce4:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <changeOversampling+0x258>)
 8003ce6:	189f      	adds	r7, r3, r2
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <changeOversampling+0x25c>)
 8003cea:	189e      	adds	r6, r3, r2
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <changeOversampling+0x260>)
 8003cee:	189d      	adds	r5, r3, r2
 8003cf0:	4b7e      	ldr	r3, [pc, #504]	; (8003eec <changeOversampling+0x264>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003cf6:	4b7e      	ldr	r3, [pc, #504]	; (8003ef0 <changeOversampling+0x268>)
 8003cf8:	eeb0 0a48 	vmov.f32	s0, s16
 8003cfc:	1918      	adds	r0, r3, r4
 8003cfe:	f00e f835 	bl	8011d6c <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 8003d02:	4b7c      	ldr	r3, [pc, #496]	; (8003ef4 <changeOversampling+0x26c>)
 8003d04:	eeb0 0a48 	vmov.f32	s0, s16
 8003d08:	1918      	adds	r0, r3, r4
 8003d0a:	f00e f82f 	bl	8011d6c <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 8003d0e:	4650      	mov	r0, sl
 8003d10:	eeb0 0a48 	vmov.f32	s0, s16
 8003d14:	f00e fd02 	bl	801271c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003d18:	f8da 3000 	ldr.w	r3, [sl]
 8003d1c:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d1e:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003d22:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003d26:	f00e fd47 	bl	80127b8 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 8003d2a:	4648      	mov	r0, r9
 8003d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8003d30:	f00e fe68 	bl	8012a04 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003d34:	f8d9 3000 	ldr.w	r3, [r9]
 8003d38:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d3a:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003d3e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003d42:	f00e fead 	bl	8012aa0 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 8003d46:	4640      	mov	r0, r8
 8003d48:	eeb0 0a48 	vmov.f32	s0, s16
 8003d4c:	f00e fff0 	bl	8012d30 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003d50:	f8d8 3000 	ldr.w	r3, [r8]
 8003d54:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d56:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003d5a:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003d5e:	f00f f8d9 	bl	8012f14 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <changeOversampling+0x270>)
 8003d64:	eeb0 0a48 	vmov.f32	s0, s16
 8003d68:	1918      	adds	r0, r3, r4
 8003d6a:	f00c feb1 	bl	8010ad0 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <changeOversampling+0x274>)
 8003d70:	eeb0 0a48 	vmov.f32	s0, s16
 8003d74:	1918      	adds	r0, r3, r4
 8003d76:	f010 fe39 	bl	80149ec <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003d7a:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <changeOversampling+0x278>)
 8003d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8003d80:	1918      	adds	r0, r3, r4
 8003d82:	f010 fe33 	bl	80149ec <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 8003d86:	4638      	mov	r0, r7
 8003d88:	eeb0 0a48 	vmov.f32	s0, s16
 8003d8c:	f00d ff84 	bl	8011c98 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
 8003d94:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003d96:	ed93 0a04 	vldr	s0, [r3, #16]
 8003d9a:	f00d ff1d 	bl	8011bd8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 8003d9e:	4630      	mov	r0, r6
 8003da0:	eeb0 0a48 	vmov.f32	s0, s16
 8003da4:	f00d ff78 	bl	8011c98 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
 8003dac:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003dae:	ed93 0a04 	vldr	s0, [r3, #16]
 8003db2:	f00d ff11 	bl	8011bd8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 8003db6:	4628      	mov	r0, r5
 8003db8:	eeb0 0a48 	vmov.f32	s0, s16
 8003dbc:	f00d ff6c 	bl	8011c98 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
 8003dc4:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003dc6:	ed93 0a04 	vldr	s0, [r3, #16]
 8003dca:	f00d ff05 	bl	8011bd8 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 8003dce:	4658      	mov	r0, fp
 8003dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8003dd4:	f00f fdfc 	bl	80139d0 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003dd8:	f8db 3000 	ldr.w	r3, [fp]
 8003ddc:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
 8003dde:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003de2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <changeOversampling+0x27c>)
 8003de8:	4423      	add	r3, r4
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	f00f fdf0 	bl	80139d0 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 8003df0:	9b00      	ldr	r3, [sp, #0]
 8003df2:	eeb0 0a48 	vmov.f32	s0, s16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00e ff9a 	bl	8012d30 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 8003dfc:	9b00      	ldr	r3, [sp, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <changeOversampling+0x27c>)
 8003e02:	591b      	ldr	r3, [r3, r4]
 8003e04:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003e08:	f00f f884 	bl	8012f14 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 8003e0c:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <changeOversampling+0x280>)
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <changeOversampling+0x284>)
 8003e10:	eeb0 0a48 	vmov.f32	s0, s16
 8003e14:	1911      	adds	r1, r2, r4
 8003e16:	1918      	adds	r0, r3, r4
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <changeOversampling+0x288>)
 8003e1a:	9103      	str	r1, [sp, #12]
 8003e1c:	493d      	ldr	r1, [pc, #244]	; (8003f14 <changeOversampling+0x28c>)
 8003e1e:	4423      	add	r3, r4
 8003e20:	190a      	adds	r2, r1, r4
 8003e22:	e9cd 0300 	strd	r0, r3, [sp]
 8003e26:	9202      	str	r2, [sp, #8]
 8003e28:	f00e fc78 	bl	801271c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 8003e2c:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <changeOversampling+0x284>)
 8003e2e:	9800      	ldr	r0, [sp, #0]
 8003e30:	591b      	ldr	r3, [r3, r4]
 8003e32:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003e36:	f00e fcbf 	bl	80127b8 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 8003e3a:	9903      	ldr	r1, [sp, #12]
 8003e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8003e40:	4608      	mov	r0, r1
 8003e42:	9100      	str	r1, [sp, #0]
 8003e44:	f00e fdde 	bl	8012a04 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8003e48:	9900      	ldr	r1, [sp, #0]
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <changeOversampling+0x280>)
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	5911      	ldr	r1, [r2, r4]
 8003e50:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
 8003e54:	f00e fe24 	bl	8012aa0 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8003e58:	9a02      	ldr	r2, [sp, #8]
 8003e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e5e:	4610      	mov	r0, r2
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	f00e fba5 	bl	80125b0 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 8003e66:	492b      	ldr	r1, [pc, #172]	; (8003f14 <changeOversampling+0x28c>)
 8003e68:	9a00      	ldr	r2, [sp, #0]
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	590a      	ldr	r2, [r1, r4]
 8003e6e:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
 8003e72:	f00e f9ad 	bl	80121d0 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	eeb0 0a48 	vmov.f32	s0, s16
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f00f ff88 	bl	8013d94 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003e84:	9b00      	ldr	r3, [sp, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <changeOversampling+0x288>)
 8003e8a:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
 8003e8c:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003e8e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003e92:	f00f ff3d 	bl	8013d10 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003e96:	9b04      	ldr	r3, [sp, #16]
 8003e98:	429c      	cmp	r4, r3
 8003e9a:	f47f af2c 	bne.w	8003cf6 <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8003ea4:	9304      	str	r3, [sp, #16]
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <changeOversampling+0x244>)
 8003ea8:	3101      	adds	r1, #1
 8003eaa:	3204      	adds	r2, #4
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	9105      	str	r1, [sp, #20]
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	f73f af0b 	bgt.w	8003ccc <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <changeOversampling+0x240>)
 8003eb8:	9a07      	ldr	r2, [sp, #28]
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	b009      	add	sp, #36	; 0x24
 8003ebe:	ecbd 8b02 	vpop	{d8}
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2001d30c 	.word	0x2001d30c
 8003ecc:	20000694 	.word	0x20000694
 8003ed0:	473b8000 	.word	0x473b8000
 8003ed4:	2001d388 	.word	0x2001d388
 8003ed8:	2001d3c8 	.word	0x2001d3c8
 8003edc:	2001cdb4 	.word	0x2001cdb4
 8003ee0:	2001cd0c 	.word	0x2001cd0c
 8003ee4:	2001ccec 	.word	0x2001ccec
 8003ee8:	2001ccac 	.word	0x2001ccac
 8003eec:	2001cccc 	.word	0x2001cccc
 8003ef0:	2001cdf4 	.word	0x2001cdf4
 8003ef4:	2001ce14 	.word	0x2001ce14
 8003ef8:	2001cdd4 	.word	0x2001cdd4
 8003efc:	2001d184 	.word	0x2001d184
 8003f00:	2001d1a4 	.word	0x2001d1a4
 8003f04:	2001cc8c 	.word	0x2001cc8c
 8003f08:	2001cc4c 	.word	0x2001cc4c
 8003f0c:	2001cc6c 	.word	0x2001cc6c
 8003f10:	2001cc0c 	.word	0x2001cc0c
 8003f14:	2001cc2c 	.word	0x2001cc2c

08003f18 <delayTick>:
}



float delayTick(float sample, int v, int string)
{
 8003f18:	b570      	push	{r4, r5, r6, lr}
    sample *= param5[v][string];
 8003f1a:	eb01 0040 	add.w	r0, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003f1e:	4d19      	ldr	r5, [pc, #100]	; (8003f84 <delayTick+0x6c>)
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <delayTick+0x70>)
{
 8003f22:	460e      	mov	r6, r1
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003f24:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample *= param5[v][string];
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <delayTick+0x74>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003f2a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8003f2e:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
 8003f32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003f36:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
 8003f3a:	0084      	lsls	r4, r0, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f40:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
 8003f44:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003f48:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4c:	f010 f964 	bl	8014218 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 8003f50:	480f      	ldr	r0, [pc, #60]	; (8003f90 <delayTick+0x78>)
 8003f52:	4420      	add	r0, r4
 8003f54:	f00c fe28 	bl	8010ba8 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
 8003f58:	480e      	ldr	r0, [pc, #56]	; (8003f94 <delayTick+0x7c>)
 8003f5a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003f5e:	f00c fa91 	bl	8010484 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003f62:	480d      	ldr	r0, [pc, #52]	; (8003f98 <delayTick+0x80>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
 8003f64:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003f68:	4420      	add	r0, r4
 8003f6a:	f00d fdc7 	bl	8011afc <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003f6e:	480b      	ldr	r0, [pc, #44]	; (8003f9c <delayTick+0x84>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003f70:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003f74:	4420      	add	r0, r4
 8003f76:	f00d fdc1 	bl	8011afc <tSVF_tick>
    sample = fast_tanh5(sample);
 8003f7a:	f010 f94d 	bl	8014218 <fast_tanh5>
    delayFB[v][string] = sample;
 8003f7e:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	2001ce44 	.word	0x2001ce44
 8003f88:	2001d254 	.word	0x2001d254
 8003f8c:	2001d2b4 	.word	0x2001d2b4
 8003f90:	2001cea8 	.word	0x2001cea8
 8003f94:	2001d548 	.word	0x2001d548
 8003f98:	2001cd0c 	.word	0x2001cd0c
 8003f9c:	2001ccec 	.word	0x2001ccec

08003fa0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa0:	4927      	ldr	r1, [pc, #156]	; (8004040 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fa2:	4a28      	ldr	r2, [pc, #160]	; (8004044 <SystemInit+0xa4>)
{
 8003fa4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003faa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d805      	bhi.n	8003fc8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fbc:	6813      	ldr	r3, [r2, #0]
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	f043 0307 	orr.w	r3, r3, #7
 8003fc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fca:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003fce:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fd0:	481c      	ldr	r0, [pc, #112]	; (8004044 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8003fd2:	f041 0101 	orr.w	r1, r1, #1
 8003fd6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003fd8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fe0:	6803      	ldr	r3, [r0, #0]
 8003fe2:	071b      	lsls	r3, r3, #28
 8003fe4:	d505      	bpl.n	8003ff2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fe6:	6803      	ldr	r3, [r0, #0]
 8003fe8:	f023 030f 	bic.w	r3, r3, #15
 8003fec:	f043 0307 	orr.w	r3, r3, #7
 8003ff0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <SystemInit+0xa8>)
 8003ff4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ff6:	4916      	ldr	r1, [pc, #88]	; (8004050 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8003ff8:	4c16      	ldr	r4, [pc, #88]	; (8004054 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8003ffa:	4817      	ldr	r0, [pc, #92]	; (8004058 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8003ffc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003ffe:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004000:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8004002:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8004004:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8004006:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800400a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800400e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004010:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004012:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004014:	4c11      	ldr	r4, [pc, #68]	; (800405c <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8004016:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800401a:	4911      	ldr	r1, [pc, #68]	; (8004060 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 800401c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	4019      	ands	r1, r3
 8004024:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004028:	d203      	bcs.n	8004032 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <SystemInit+0xc4>)
 800402c:	2201      	movs	r2, #1
 800402e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <SystemInit+0xc8>)
 8004034:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004038:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800403a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	52002000 	.word	0x52002000
 8004048:	58024400 	.word	0x58024400
 800404c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004050:	01010280 	.word	0x01010280
 8004054:	02020200 	.word	0x02020200
 8004058:	01ff0000 	.word	0x01ff0000
 800405c:	5c001000 	.word	0x5c001000
 8004060:	ffff0000 	.word	0xffff0000
 8004064:	51008000 	.word	0x51008000
 8004068:	52004000 	.word	0x52004000

0800406c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_InitTick+0x40>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b90b      	cbnz	r3, 8004076 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8004072:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004074:	4770      	bx	lr
{
 8004076:	b510      	push	{r4, lr}
 8004078:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800407a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_InitTick+0x44>)
 8004080:	fbb0 f3f3 	udiv	r3, r0, r3
 8004084:	6810      	ldr	r0, [r2, #0]
 8004086:	fbb0 f0f3 	udiv	r0, r0, r3
 800408a:	f000 f8d7 	bl	800423c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800408e:	2c0f      	cmp	r4, #15
 8004090:	d800      	bhi.n	8004094 <HAL_InitTick+0x28>
 8004092:	b108      	cbz	r0, 8004098 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8004094:	2001      	movs	r0, #1
}
 8004096:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	4621      	mov	r1, r4
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	f000 f880 	bl	80041a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_InitTick+0x48>)
 80040a6:	2000      	movs	r0, #0
 80040a8:	601c      	str	r4, [r3, #0]
}
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	2000093c 	.word	0x2000093c
 80040b0:	200008f4 	.word	0x200008f4
 80040b4:	20000940 	.word	0x20000940

080040b8 <HAL_Init>:
{
 80040b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ba:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040bc:	4c12      	ldr	r4, [pc, #72]	; (8004108 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040be:	f000 f85f 	bl	8004180 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040c2:	f003 fa2d 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_Init+0x54>)
 80040c8:	4911      	ldr	r1, [pc, #68]	; (8004110 <HAL_Init+0x58>)
 80040ca:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040cc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040ce:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040d2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040d6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040da:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80040ea:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040ec:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040ee:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f0:	f7ff ffbc 	bl	800406c <HAL_InitTick>
 80040f4:	b110      	cbz	r0, 80040fc <HAL_Init+0x44>
    return HAL_ERROR;
 80040f6:	2401      	movs	r4, #1
}
 80040f8:	4620      	mov	r0, r4
 80040fa:	bd10      	pop	{r4, pc}
 80040fc:	4604      	mov	r4, r0
  HAL_MspInit();
 80040fe:	f7ff f97b 	bl	80033f8 <HAL_MspInit>
}
 8004102:	4620      	mov	r0, r4
 8004104:	bd10      	pop	{r4, pc}
 8004106:	bf00      	nop
 8004108:	200008f8 	.word	0x200008f8
 800410c:	58024400 	.word	0x58024400
 8004110:	0801c288 	.word	0x0801c288
 8004114:	200008f4 	.word	0x200008f4

08004118 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004118:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_IncTick+0x10>)
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_IncTick+0x14>)
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	440b      	add	r3, r1
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2001d5c8 	.word	0x2001d5c8
 800412c:	2000093c 	.word	0x2000093c

08004130 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004130:	4b01      	ldr	r3, [pc, #4]	; (8004138 <HAL_GetTick+0x8>)
 8004132:	6818      	ldr	r0, [r3, #0]
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2001d5c8 	.word	0x2001d5c8

0800413c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004140:	f7ff fff6 	bl	8004130 <HAL_GetTick>
 8004144:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004146:	1c63      	adds	r3, r4, #1
 8004148:	d002      	beq.n	8004150 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_Delay+0x20>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004150:	f7ff ffee 	bl	8004130 <HAL_GetTick>
 8004154:	1b43      	subs	r3, r0, r5
 8004156:	42a3      	cmp	r3, r4
 8004158:	d3fa      	bcc.n	8004150 <HAL_Delay+0x14>
  {
  }
}
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	2000093c 	.word	0x2000093c

08004160 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8004160:	4b01      	ldr	r3, [pc, #4]	; (8004168 <HAL_GetREVID+0x8>)
 8004162:	6818      	ldr	r0, [r3, #0]
}
 8004164:	0c00      	lsrs	r0, r0, #16
 8004166:	4770      	bx	lr
 8004168:	5c001000 	.word	0x5c001000

0800416c <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 800416c:	4a03      	ldr	r2, [pc, #12]	; (800417c <HAL_SetFMCMemorySwappingConfig+0x10>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004174:	4318      	orrs	r0, r3
 8004176:	6010      	str	r0, [r2, #0]
}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	52004000 	.word	0x52004000

08004180 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004180:	4906      	ldr	r1, [pc, #24]	; (800419c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004186:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004190:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004194:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8004196:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00
 80041a0:	05fa0000 	.word	0x05fa0000

080041a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a6:	b500      	push	{lr}
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ae:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b6:	f1be 0f04 	cmp.w	lr, #4
 80041ba:	bf28      	it	cs
 80041bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c0:	f1bc 0f06 	cmp.w	ip, #6
 80041c4:	d91a      	bls.n	80041fc <HAL_NVIC_SetPriority+0x58>
 80041c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80041cc:	fa0c fc03 	lsl.w	ip, ip, r3
 80041d0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80041d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041da:	fa0c fc0e 	lsl.w	ip, ip, lr
 80041de:	ea21 010c 	bic.w	r1, r1, ip
 80041e2:	fa01 f103 	lsl.w	r1, r1, r3
 80041e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80041ea:	db0a      	blt.n	8004202 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	0109      	lsls	r1, r1, #4
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_NVIC_SetPriority+0x74>)
 80041f0:	b2c9      	uxtb	r1, r1
 80041f2:	4403      	add	r3, r0
 80041f4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80041f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041fc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fe:	4613      	mov	r3, r2
 8004200:	e7e8      	b.n	80041d4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	f000 000f 	and.w	r0, r0, #15
 8004206:	0109      	lsls	r1, r1, #4
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_NVIC_SetPriority+0x78>)
 800420a:	b2c9      	uxtb	r1, r1
 800420c:	4403      	add	r3, r0
 800420e:	7619      	strb	r1, [r3, #24]
 8004210:	f85d fb04 	ldr.w	pc, [sp], #4
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	e000e100 	.word	0xe000e100
 800421c:	e000ecfc 	.word	0xe000ecfc

08004220 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004220:	2800      	cmp	r0, #0
 8004222:	db07      	blt.n	8004234 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004224:	2301      	movs	r3, #1
 8004226:	f000 011f 	and.w	r1, r0, #31
 800422a:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HAL_NVIC_EnableIRQ+0x18>)
 800422c:	0940      	lsrs	r0, r0, #5
 800422e:	408b      	lsls	r3, r1
 8004230:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	e000e100 	.word	0xe000e100

0800423c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800423c:	1e43      	subs	r3, r0, #1
 800423e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004242:	d20c      	bcs.n	800425e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004244:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424a:	4906      	ldr	r1, [pc, #24]	; (8004264 <HAL_SYSTICK_Config+0x28>)
 800424c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004250:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004258:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800425c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800425e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004268:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800426e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004276:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8004278:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_MPU_Enable+0x1c>)
 8004286:	f040 0001 	orr.w	r0, r0, #1
 800428a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800428e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004296:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800429a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80042a4:	7843      	ldrb	r3, [r0, #1]
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_MPU_ConfigRegion+0x5c>)
 80042a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80042ac:	7803      	ldrb	r3, [r0, #0]
 80042ae:	b313      	cbz	r3, 80042f6 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80042b0:	6843      	ldr	r3, [r0, #4]
 80042b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80042b6:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042b8:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80042bc:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80042be:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042c0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80042c4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042c8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042ca:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042cc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042d0:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042d4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042d8:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042da:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042de:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80042e6:	7a01      	ldrb	r1, [r0, #8]
 80042e8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80042ec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042f0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80042f4:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80042f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80042fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <DMA_CalcBaseAndBitshift+0xd0>)
{
 8004306:	4601      	mov	r1, r0
 8004308:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800430a:	4e33      	ldr	r6, [pc, #204]	; (80043d8 <DMA_CalcBaseAndBitshift+0xd4>)
 800430c:	6802      	ldr	r2, [r0, #0]
 800430e:	4d33      	ldr	r5, [pc, #204]	; (80043dc <DMA_CalcBaseAndBitshift+0xd8>)
 8004310:	42b2      	cmp	r2, r6
 8004312:	bf18      	it	ne
 8004314:	429a      	cmpne	r2, r3
 8004316:	4c32      	ldr	r4, [pc, #200]	; (80043e0 <DMA_CalcBaseAndBitshift+0xdc>)
 8004318:	4832      	ldr	r0, [pc, #200]	; (80043e4 <DMA_CalcBaseAndBitshift+0xe0>)
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	42aa      	cmp	r2, r5
 8004322:	bf08      	it	eq
 8004324:	f043 0301 	orreq.w	r3, r3, #1
 8004328:	42a2      	cmp	r2, r4
 800432a:	bf08      	it	eq
 800432c:	f043 0301 	orreq.w	r3, r3, #1
 8004330:	3430      	adds	r4, #48	; 0x30
 8004332:	4282      	cmp	r2, r0
 8004334:	bf08      	it	eq
 8004336:	f043 0301 	orreq.w	r3, r3, #1
 800433a:	3030      	adds	r0, #48	; 0x30
 800433c:	42a2      	cmp	r2, r4
 800433e:	bf08      	it	eq
 8004340:	f043 0301 	orreq.w	r3, r3, #1
 8004344:	3430      	adds	r4, #48	; 0x30
 8004346:	4282      	cmp	r2, r0
 8004348:	bf08      	it	eq
 800434a:	f043 0301 	orreq.w	r3, r3, #1
 800434e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004352:	42a2      	cmp	r2, r4
 8004354:	bf08      	it	eq
 8004356:	f043 0301 	orreq.w	r3, r3, #1
 800435a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800435e:	4282      	cmp	r2, r0
 8004360:	bf08      	it	eq
 8004362:	f043 0301 	orreq.w	r3, r3, #1
 8004366:	3030      	adds	r0, #48	; 0x30
 8004368:	42a2      	cmp	r2, r4
 800436a:	bf08      	it	eq
 800436c:	f043 0301 	orreq.w	r3, r3, #1
 8004370:	3430      	adds	r4, #48	; 0x30
 8004372:	4282      	cmp	r2, r0
 8004374:	bf08      	it	eq
 8004376:	f043 0301 	orreq.w	r3, r3, #1
 800437a:	3030      	adds	r0, #48	; 0x30
 800437c:	42a2      	cmp	r2, r4
 800437e:	bf08      	it	eq
 8004380:	f043 0301 	orreq.w	r3, r3, #1
 8004384:	3430      	adds	r4, #48	; 0x30
 8004386:	4282      	cmp	r2, r0
 8004388:	bf08      	it	eq
 800438a:	f043 0301 	orreq.w	r3, r3, #1
 800438e:	3030      	adds	r0, #48	; 0x30
 8004390:	42a2      	cmp	r2, r4
 8004392:	bf08      	it	eq
 8004394:	f043 0301 	orreq.w	r3, r3, #1
 8004398:	4282      	cmp	r2, r0
 800439a:	bf08      	it	eq
 800439c:	f043 0301 	orreq.w	r3, r3, #1
 80043a0:	b913      	cbnz	r3, 80043a8 <DMA_CalcBaseAndBitshift+0xa4>
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <DMA_CalcBaseAndBitshift+0xe4>)
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d112      	bne.n	80043ce <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043a8:	b2d3      	uxtb	r3, r2
 80043aa:	4810      	ldr	r0, [pc, #64]	; (80043ec <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043ac:	4c10      	ldr	r4, [pc, #64]	; (80043f0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043ae:	3b10      	subs	r3, #16
 80043b0:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80043b4:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043b6:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043ba:	5c20      	ldrb	r0, [r4, r0]
 80043bc:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043be:	480d      	ldr	r0, [pc, #52]	; (80043f4 <DMA_CalcBaseAndBitshift+0xf0>)
 80043c0:	ea00 0002 	and.w	r0, r0, r2
 80043c4:	bf88      	it	hi
 80043c6:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043c8:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80043ca:	bc70      	pop	{r4, r5, r6}
 80043cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043ce:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80043d2:	e7f9      	b.n	80043c8 <DMA_CalcBaseAndBitshift+0xc4>
 80043d4:	40020010 	.word	0x40020010
 80043d8:	40020028 	.word	0x40020028
 80043dc:	40020040 	.word	0x40020040
 80043e0:	40020058 	.word	0x40020058
 80043e4:	40020070 	.word	0x40020070
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	aaaaaaab 	.word	0xaaaaaaab
 80043f0:	0801c298 	.word	0x0801c298
 80043f4:	fffffc00 	.word	0xfffffc00

080043f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043f8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043fa:	4a27      	ldr	r2, [pc, #156]	; (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80043fc:	4927      	ldr	r1, [pc, #156]	; (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80043fe:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004400:	4d27      	ldr	r5, [pc, #156]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004402:	4c28      	ldr	r4, [pc, #160]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004404:	42ab      	cmp	r3, r5
 8004406:	bf18      	it	ne
 8004408:	4293      	cmpne	r3, r2
 800440a:	bf0c      	ite	eq
 800440c:	2201      	moveq	r2, #1
 800440e:	2200      	movne	r2, #0
 8004410:	428b      	cmp	r3, r1
 8004412:	bf08      	it	eq
 8004414:	f042 0201 	orreq.w	r2, r2, #1
 8004418:	3128      	adds	r1, #40	; 0x28
 800441a:	42a3      	cmp	r3, r4
 800441c:	bf08      	it	eq
 800441e:	f042 0201 	orreq.w	r2, r2, #1
 8004422:	3428      	adds	r4, #40	; 0x28
 8004424:	428b      	cmp	r3, r1
 8004426:	bf08      	it	eq
 8004428:	f042 0201 	orreq.w	r2, r2, #1
 800442c:	3128      	adds	r1, #40	; 0x28
 800442e:	42a3      	cmp	r3, r4
 8004430:	bf08      	it	eq
 8004432:	f042 0201 	orreq.w	r2, r2, #1
 8004436:	428b      	cmp	r3, r1
 8004438:	bf08      	it	eq
 800443a:	f042 0201 	orreq.w	r2, r2, #1
 800443e:	b912      	cbnz	r2, 8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d113      	bne.n	800446e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4918      	ldr	r1, [pc, #96]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800444c:	3b08      	subs	r3, #8
 800444e:	4c19      	ldr	r4, [pc, #100]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8004450:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004454:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004456:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800445a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800445e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004466:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800446a:	bc30      	pop	{r4, r5}
 800446c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800446e:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004472:	4c12      	ldr	r4, [pc, #72]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8004474:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004476:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004478:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800447c:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800447e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004482:	d800      	bhi.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8004484:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004488:	f001 041f 	and.w	r4, r1, #31
 800448c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800448e:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004490:	40a3      	lsls	r3, r4
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004494:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004496:	e7e5      	b.n	8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8004498:	58025408 	.word	0x58025408
 800449c:	58025430 	.word	0x58025430
 80044a0:	5802541c 	.word	0x5802541c
 80044a4:	58025444 	.word	0x58025444
 80044a8:	58025494 	.word	0x58025494
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	16009600 	.word	0x16009600
 80044b4:	58025880 	.word	0x58025880
 80044b8:	bffdfbf0 	.word	0xbffdfbf0
 80044bc:	aaaaaaab 	.word	0xaaaaaaab
 80044c0:	10008200 	.word	0x10008200
 80044c4:	40020880 	.word	0x40020880

080044c8 <HAL_DMA_Init>:
{
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff fe30 	bl	8004130 <HAL_GetTick>
  if(hdma == NULL)
 80044d0:	2c00      	cmp	r4, #0
 80044d2:	f000 816a 	beq.w	80047aa <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	4605      	mov	r5, r0
 80044da:	4ba3      	ldr	r3, [pc, #652]	; (8004768 <HAL_DMA_Init+0x2a0>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	d048      	beq.n	8004572 <HAL_DMA_Init+0xaa>
 80044e0:	3318      	adds	r3, #24
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d045      	beq.n	8004572 <HAL_DMA_Init+0xaa>
 80044e6:	3330      	adds	r3, #48	; 0x30
 80044e8:	49a0      	ldr	r1, [pc, #640]	; (800476c <HAL_DMA_Init+0x2a4>)
 80044ea:	428a      	cmp	r2, r1
 80044ec:	bf18      	it	ne
 80044ee:	429a      	cmpne	r2, r3
 80044f0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	428a      	cmp	r2, r1
 80044fc:	bf08      	it	eq
 80044fe:	f043 0301 	orreq.w	r3, r3, #1
 8004502:	3118      	adds	r1, #24
 8004504:	428a      	cmp	r2, r1
 8004506:	bf08      	it	eq
 8004508:	f043 0301 	orreq.w	r3, r3, #1
 800450c:	3118      	adds	r1, #24
 800450e:	428a      	cmp	r2, r1
 8004510:	bf08      	it	eq
 8004512:	f043 0301 	orreq.w	r3, r3, #1
 8004516:	3118      	adds	r1, #24
 8004518:	428a      	cmp	r2, r1
 800451a:	bf08      	it	eq
 800451c:	f043 0301 	orreq.w	r3, r3, #1
 8004520:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004524:	428a      	cmp	r2, r1
 8004526:	bf08      	it	eq
 8004528:	f043 0301 	orreq.w	r3, r3, #1
 800452c:	3118      	adds	r1, #24
 800452e:	428a      	cmp	r2, r1
 8004530:	bf08      	it	eq
 8004532:	f043 0301 	orreq.w	r3, r3, #1
 8004536:	3118      	adds	r1, #24
 8004538:	428a      	cmp	r2, r1
 800453a:	bf08      	it	eq
 800453c:	f043 0301 	orreq.w	r3, r3, #1
 8004540:	3118      	adds	r1, #24
 8004542:	428a      	cmp	r2, r1
 8004544:	bf08      	it	eq
 8004546:	f043 0301 	orreq.w	r3, r3, #1
 800454a:	3118      	adds	r1, #24
 800454c:	428a      	cmp	r2, r1
 800454e:	bf08      	it	eq
 8004550:	f043 0301 	orreq.w	r3, r3, #1
 8004554:	3118      	adds	r1, #24
 8004556:	428a      	cmp	r2, r1
 8004558:	bf08      	it	eq
 800455a:	f043 0301 	orreq.w	r3, r3, #1
 800455e:	3118      	adds	r1, #24
 8004560:	428a      	cmp	r2, r1
 8004562:	bf08      	it	eq
 8004564:	f043 0301 	orreq.w	r3, r3, #1
 8004568:	b91b      	cbnz	r3, 8004572 <HAL_DMA_Init+0xaa>
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_DMA_Init+0x2a8>)
 800456c:	429a      	cmp	r2, r3
 800456e:	f040 8184 	bne.w	800487a <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e005      	b.n	8004594 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004588:	f7ff fdd2 	bl	8004130 <HAL_GetTick>
 800458c:	1b43      	subs	r3, r0, r5
 800458e:	2b05      	cmp	r3, #5
 8004590:	f200 80fe 	bhi.w	8004790 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	07d0      	lsls	r0, r2, #31
 800459a:	d4f5      	bmi.n	8004588 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800459c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a0:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80045a2:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80045a4:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a8:	430a      	orrs	r2, r1
 80045aa:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ac:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ae:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b2:	69a1      	ldr	r1, [r4, #24]
 80045b4:	ea42 0201 	orr.w	r2, r2, r1
 80045b8:	69e1      	ldr	r1, [r4, #28]
 80045ba:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80045be:	6a21      	ldr	r1, [r4, #32]
 80045c0:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045c4:	496b      	ldr	r1, [pc, #428]	; (8004774 <HAL_DMA_Init+0x2ac>)
 80045c6:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 80045ca:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ce:	d103      	bne.n	80045d8 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045d0:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 80045d4:	4301      	orrs	r1, r0
 80045d6:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045d8:	4867      	ldr	r0, [pc, #412]	; (8004778 <HAL_DMA_Init+0x2b0>)
 80045da:	4968      	ldr	r1, [pc, #416]	; (800477c <HAL_DMA_Init+0x2b4>)
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	4001      	ands	r1, r0
 80045e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80045e4:	d30a      	bcc.n	80045fc <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045e6:	6861      	ldr	r1, [r4, #4]
 80045e8:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 80045ec:	281f      	cmp	r0, #31
 80045ee:	f240 80d6 	bls.w	800479e <HAL_DMA_Init+0x2d6>
 80045f2:	394f      	subs	r1, #79	; 0x4f
 80045f4:	2903      	cmp	r1, #3
 80045f6:	d801      	bhi.n	80045fc <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80045f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045fc:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045fe:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8004600:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004602:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004604:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004606:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800460a:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800460e:	d10e      	bne.n	800462e <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004610:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8004614:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004616:	b150      	cbz	r0, 800462e <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004618:	69a5      	ldr	r5, [r4, #24]
 800461a:	2d00      	cmp	r5, #0
 800461c:	f040 8107 	bne.w	800482e <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
 8004620:	2a01      	cmp	r2, #1
 8004622:	f000 8125 	beq.w	8004870 <HAL_DMA_Init+0x3a8>
 8004626:	f032 0202 	bics.w	r2, r2, #2
 800462a:	f000 8108 	beq.w	800483e <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800462e:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff fe67 	bl	8004304 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004636:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004638:	233f      	movs	r3, #63	; 0x3f
 800463a:	f002 021f 	and.w	r2, r2, #31
 800463e:	4093      	lsls	r3, r2
 8004640:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_DMA_Init+0x2a0>)
 8004646:	484e      	ldr	r0, [pc, #312]	; (8004780 <HAL_DMA_Init+0x2b8>)
 8004648:	4948      	ldr	r1, [pc, #288]	; (800476c <HAL_DMA_Init+0x2a4>)
 800464a:	4282      	cmp	r2, r0
 800464c:	bf18      	it	ne
 800464e:	429a      	cmpne	r2, r3
 8004650:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	428a      	cmp	r2, r1
 800465c:	bf08      	it	eq
 800465e:	f043 0301 	orreq.w	r3, r3, #1
 8004662:	3130      	adds	r1, #48	; 0x30
 8004664:	4282      	cmp	r2, r0
 8004666:	bf08      	it	eq
 8004668:	f043 0301 	orreq.w	r3, r3, #1
 800466c:	3030      	adds	r0, #48	; 0x30
 800466e:	428a      	cmp	r2, r1
 8004670:	bf08      	it	eq
 8004672:	f043 0301 	orreq.w	r3, r3, #1
 8004676:	3130      	adds	r1, #48	; 0x30
 8004678:	4282      	cmp	r2, r0
 800467a:	bf08      	it	eq
 800467c:	f043 0301 	orreq.w	r3, r3, #1
 8004680:	3030      	adds	r0, #48	; 0x30
 8004682:	428a      	cmp	r2, r1
 8004684:	bf08      	it	eq
 8004686:	f043 0301 	orreq.w	r3, r3, #1
 800468a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800468e:	4282      	cmp	r2, r0
 8004690:	bf08      	it	eq
 8004692:	f043 0301 	orreq.w	r3, r3, #1
 8004696:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800469a:	428a      	cmp	r2, r1
 800469c:	bf08      	it	eq
 800469e:	f043 0301 	orreq.w	r3, r3, #1
 80046a2:	3130      	adds	r1, #48	; 0x30
 80046a4:	4282      	cmp	r2, r0
 80046a6:	bf08      	it	eq
 80046a8:	f043 0301 	orreq.w	r3, r3, #1
 80046ac:	3030      	adds	r0, #48	; 0x30
 80046ae:	428a      	cmp	r2, r1
 80046b0:	bf08      	it	eq
 80046b2:	f043 0301 	orreq.w	r3, r3, #1
 80046b6:	3130      	adds	r1, #48	; 0x30
 80046b8:	4282      	cmp	r2, r0
 80046ba:	bf08      	it	eq
 80046bc:	f043 0301 	orreq.w	r3, r3, #1
 80046c0:	3030      	adds	r0, #48	; 0x30
 80046c2:	428a      	cmp	r2, r1
 80046c4:	bf08      	it	eq
 80046c6:	f043 0301 	orreq.w	r3, r3, #1
 80046ca:	3130      	adds	r1, #48	; 0x30
 80046cc:	4282      	cmp	r2, r0
 80046ce:	bf08      	it	eq
 80046d0:	f043 0301 	orreq.w	r3, r3, #1
 80046d4:	3030      	adds	r0, #48	; 0x30
 80046d6:	428a      	cmp	r2, r1
 80046d8:	bf08      	it	eq
 80046da:	f043 0301 	orreq.w	r3, r3, #1
 80046de:	4929      	ldr	r1, [pc, #164]	; (8004784 <HAL_DMA_Init+0x2bc>)
 80046e0:	4282      	cmp	r2, r0
 80046e2:	bf08      	it	eq
 80046e4:	f043 0301 	orreq.w	r3, r3, #1
 80046e8:	4827      	ldr	r0, [pc, #156]	; (8004788 <HAL_DMA_Init+0x2c0>)
 80046ea:	428a      	cmp	r2, r1
 80046ec:	bf08      	it	eq
 80046ee:	f043 0301 	orreq.w	r3, r3, #1
 80046f2:	3128      	adds	r1, #40	; 0x28
 80046f4:	4282      	cmp	r2, r0
 80046f6:	bf08      	it	eq
 80046f8:	f043 0301 	orreq.w	r3, r3, #1
 80046fc:	3028      	adds	r0, #40	; 0x28
 80046fe:	428a      	cmp	r2, r1
 8004700:	bf08      	it	eq
 8004702:	f043 0301 	orreq.w	r3, r3, #1
 8004706:	3128      	adds	r1, #40	; 0x28
 8004708:	4282      	cmp	r2, r0
 800470a:	bf08      	it	eq
 800470c:	f043 0301 	orreq.w	r3, r3, #1
 8004710:	3028      	adds	r0, #40	; 0x28
 8004712:	428a      	cmp	r2, r1
 8004714:	bf08      	it	eq
 8004716:	f043 0301 	orreq.w	r3, r3, #1
 800471a:	3128      	adds	r1, #40	; 0x28
 800471c:	4282      	cmp	r2, r0
 800471e:	bf08      	it	eq
 8004720:	f043 0301 	orreq.w	r3, r3, #1
 8004724:	428a      	cmp	r2, r1
 8004726:	bf08      	it	eq
 8004728:	f043 0301 	orreq.w	r3, r3, #1
 800472c:	b913      	cbnz	r3, 8004734 <HAL_DMA_Init+0x26c>
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <HAL_DMA_Init+0x2c4>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d113      	bne.n	800475c <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff fe5f 	bl	80043f8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	2b80      	cmp	r3, #128	; 0x80
 800473e:	d036      	beq.n	80047ae <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004740:	7922      	ldrb	r2, [r4, #4]
 8004742:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004744:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004746:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800474a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	1e4b      	subs	r3, r1, #1
 8004750:	2b07      	cmp	r3, #7
 8004752:	d930      	bls.n	80047b6 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
 8004754:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004756:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800475a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800475c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800475e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004760:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004762:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	40020010 	.word	0x40020010
 800476c:	40020040 	.word	0x40020040
 8004770:	400204b8 	.word	0x400204b8
 8004774:	fe10803f 	.word	0xfe10803f
 8004778:	5c001000 	.word	0x5c001000
 800477c:	ffff0000 	.word	0xffff0000
 8004780:	40020028 	.word	0x40020028
 8004784:	58025408 	.word	0x58025408
 8004788:	5802541c 	.word	0x5802541c
 800478c:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004790:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004792:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004796:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004798:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800479c:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800479e:	496b      	ldr	r1, [pc, #428]	; (800494c <HAL_DMA_Init+0x484>)
 80047a0:	40c1      	lsrs	r1, r0
 80047a2:	07c9      	lsls	r1, r1, #31
 80047a4:	f57f af2a 	bpl.w	80045fc <HAL_DMA_Init+0x134>
 80047a8:	e726      	b.n	80045f8 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 80047aa:	2001      	movs	r0, #1
}
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047ae:	2300      	movs	r3, #0
 80047b0:	461a      	mov	r2, r3
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	e7c5      	b.n	8004742 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	4a65      	ldr	r2, [pc, #404]	; (8004950 <HAL_DMA_Init+0x488>)
 80047ba:	4d66      	ldr	r5, [pc, #408]	; (8004954 <HAL_DMA_Init+0x48c>)
 80047bc:	42a8      	cmp	r0, r5
 80047be:	bf18      	it	ne
 80047c0:	4290      	cmpne	r0, r2
 80047c2:	f105 0514 	add.w	r5, r5, #20
 80047c6:	bf0c      	ite	eq
 80047c8:	2201      	moveq	r2, #1
 80047ca:	2200      	movne	r2, #0
 80047cc:	42a8      	cmp	r0, r5
 80047ce:	bf08      	it	eq
 80047d0:	f042 0201 	orreq.w	r2, r2, #1
 80047d4:	3514      	adds	r5, #20
 80047d6:	42a8      	cmp	r0, r5
 80047d8:	bf08      	it	eq
 80047da:	f042 0201 	orreq.w	r2, r2, #1
 80047de:	3514      	adds	r5, #20
 80047e0:	42a8      	cmp	r0, r5
 80047e2:	bf08      	it	eq
 80047e4:	f042 0201 	orreq.w	r2, r2, #1
 80047e8:	3514      	adds	r5, #20
 80047ea:	42a8      	cmp	r0, r5
 80047ec:	bf08      	it	eq
 80047ee:	f042 0201 	orreq.w	r2, r2, #1
 80047f2:	3514      	adds	r5, #20
 80047f4:	42a8      	cmp	r0, r5
 80047f6:	bf08      	it	eq
 80047f8:	f042 0201 	orreq.w	r2, r2, #1
 80047fc:	b93a      	cbnz	r2, 800480e <HAL_DMA_Init+0x346>
 80047fe:	4a56      	ldr	r2, [pc, #344]	; (8004958 <HAL_DMA_Init+0x490>)
 8004800:	4290      	cmp	r0, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004804:	4a55      	ldr	r2, [pc, #340]	; (800495c <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004806:	4856      	ldr	r0, [pc, #344]	; (8004960 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004808:	440a      	add	r2, r1
 800480a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800480c:	e003      	b.n	8004816 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800480e:	4a55      	ldr	r2, [pc, #340]	; (8004964 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004810:	4855      	ldr	r0, [pc, #340]	; (8004968 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004812:	440a      	add	r2, r1
 8004814:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800481c:	2100      	movs	r1, #0
 800481e:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004822:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004824:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004826:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	e796      	b.n	800475c <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800482e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
 8004834:	2a02      	cmp	r2, #2
 8004836:	d905      	bls.n	8004844 <HAL_DMA_Init+0x37c>
 8004838:	2a03      	cmp	r2, #3
 800483a:	f47f aef8 	bne.w	800462e <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483e:	01c2      	lsls	r2, r0, #7
 8004840:	f57f aef5 	bpl.w	800462e <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8004844:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004846:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004848:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800484a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800484c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004850:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8004852:	2a03      	cmp	r2, #3
 8004854:	f63f aeeb 	bhi.w	800462e <HAL_DMA_Init+0x166>
 8004858:	a501      	add	r5, pc, #4	; (adr r5, 8004860 <HAL_DMA_Init+0x398>)
 800485a:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004845 	.word	0x08004845
 8004864:	0800483f 	.word	0x0800483f
 8004868:	08004845 	.word	0x08004845
 800486c:	08004871 	.word	0x08004871
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004870:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004874:	f47f aedb 	bne.w	800462e <HAL_DMA_Init+0x166>
 8004878:	e7e4      	b.n	8004844 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800487a:	4b35      	ldr	r3, [pc, #212]	; (8004950 <HAL_DMA_Init+0x488>)
 800487c:	4835      	ldr	r0, [pc, #212]	; (8004954 <HAL_DMA_Init+0x48c>)
 800487e:	493b      	ldr	r1, [pc, #236]	; (800496c <HAL_DMA_Init+0x4a4>)
 8004880:	4282      	cmp	r2, r0
 8004882:	bf18      	it	ne
 8004884:	429a      	cmpne	r2, r3
 8004886:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	428a      	cmp	r2, r1
 8004892:	bf08      	it	eq
 8004894:	f043 0301 	orreq.w	r3, r3, #1
 8004898:	3128      	adds	r1, #40	; 0x28
 800489a:	4282      	cmp	r2, r0
 800489c:	bf08      	it	eq
 800489e:	f043 0301 	orreq.w	r3, r3, #1
 80048a2:	3028      	adds	r0, #40	; 0x28
 80048a4:	428a      	cmp	r2, r1
 80048a6:	bf08      	it	eq
 80048a8:	f043 0301 	orreq.w	r3, r3, #1
 80048ac:	3128      	adds	r1, #40	; 0x28
 80048ae:	4282      	cmp	r2, r0
 80048b0:	bf08      	it	eq
 80048b2:	f043 0301 	orreq.w	r3, r3, #1
 80048b6:	428a      	cmp	r2, r1
 80048b8:	bf08      	it	eq
 80048ba:	f043 0301 	orreq.w	r3, r3, #1
 80048be:	b913      	cbnz	r3, 80048c6 <HAL_DMA_Init+0x3fe>
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_DMA_Init+0x490>)
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d13a      	bne.n	800493c <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
 80048c6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c8:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048ca:	4929      	ldr	r1, [pc, #164]	; (8004970 <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80048cc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80048d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048d4:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048d6:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d02c      	beq.n	8004938 <HAL_DMA_Init+0x470>
 80048de:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048ea:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80048ee:	08db      	lsrs	r3, r3, #3
 80048f0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048f4:	6965      	ldr	r5, [r4, #20]
 80048f6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048fa:	69a5      	ldr	r5, [r4, #24]
 80048fc:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004900:	69e5      	ldr	r5, [r4, #28]
 8004902:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004906:	6a25      	ldr	r5, [r4, #32]
 8004908:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 800490c:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800490e:	4919      	ldr	r1, [pc, #100]	; (8004974 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004910:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004914:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004916:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	4411      	add	r1, r2
 800491c:	fba3 2301 	umull	r2, r3, r3, r1
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004926:	f7ff fced 	bl	8004304 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800492a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800492c:	2301      	movs	r3, #1
 800492e:	f002 021f 	and.w	r2, r2, #31
 8004932:	4093      	lsls	r3, r2
 8004934:	6043      	str	r3, [r0, #4]
 8004936:	e684      	b.n	8004642 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004938:	2010      	movs	r0, #16
 800493a:	e7d6      	b.n	80048ea <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800493c:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800493e:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004940:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004942:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004944:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	c3c0003f 	.word	0xc3c0003f
 8004950:	58025408 	.word	0x58025408
 8004954:	5802541c 	.word	0x5802541c
 8004958:	58025494 	.word	0x58025494
 800495c:	1000823f 	.word	0x1000823f
 8004960:	40020940 	.word	0x40020940
 8004964:	1600963f 	.word	0x1600963f
 8004968:	58025940 	.word	0x58025940
 800496c:	58025430 	.word	0x58025430
 8004970:	fffe000f 	.word	0xfffe000f
 8004974:	a7fdabf8 	.word	0xa7fdabf8
 8004978:	cccccccd 	.word	0xcccccccd

0800497c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800497c:	2800      	cmp	r0, #0
 800497e:	f000 8270 	beq.w	8004e62 <HAL_DMA_Start_IT+0x4e6>
 8004982:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8004984:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004988:	2801      	cmp	r0, #1
 800498a:	f000 826c 	beq.w	8004e66 <HAL_DMA_Start_IT+0x4ea>
 800498e:	2001      	movs	r0, #1
{
 8004990:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8004992:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004996:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800499a:	4284      	cmp	r4, r0
 800499c:	d008      	beq.n	80049b0 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800499e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80049a2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049a4:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80049a8:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80049ac:	bc70      	pop	{r4, r5, r6}
 80049ae:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b0:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80049b2:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049b6:	4ea2      	ldr	r6, [pc, #648]	; (8004c40 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b8:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049bc:	2000      	movs	r0, #0
 80049be:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	f020 0001 	bic.w	r0, r0, #1
 80049c8:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ca:	489e      	ldr	r0, [pc, #632]	; (8004c44 <HAL_DMA_Start_IT+0x2c8>)
 80049cc:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d0:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049d4:	42b4      	cmp	r4, r6
 80049d6:	bf18      	it	ne
 80049d8:	4284      	cmpne	r4, r0
 80049da:	f106 0618 	add.w	r6, r6, #24
 80049de:	bf0c      	ite	eq
 80049e0:	2001      	moveq	r0, #1
 80049e2:	2000      	movne	r0, #0
 80049e4:	42b4      	cmp	r4, r6
 80049e6:	bf08      	it	eq
 80049e8:	f040 0001 	orreq.w	r0, r0, #1
 80049ec:	3618      	adds	r6, #24
 80049ee:	42b4      	cmp	r4, r6
 80049f0:	bf08      	it	eq
 80049f2:	f040 0001 	orreq.w	r0, r0, #1
 80049f6:	3618      	adds	r6, #24
 80049f8:	42b4      	cmp	r4, r6
 80049fa:	bf08      	it	eq
 80049fc:	f040 0001 	orreq.w	r0, r0, #1
 8004a00:	3618      	adds	r6, #24
 8004a02:	42b4      	cmp	r4, r6
 8004a04:	bf08      	it	eq
 8004a06:	f040 0001 	orreq.w	r0, r0, #1
 8004a0a:	3618      	adds	r6, #24
 8004a0c:	42b4      	cmp	r4, r6
 8004a0e:	bf08      	it	eq
 8004a10:	f040 0001 	orreq.w	r0, r0, #1
 8004a14:	3618      	adds	r6, #24
 8004a16:	42b4      	cmp	r4, r6
 8004a18:	bf08      	it	eq
 8004a1a:	f040 0001 	orreq.w	r0, r0, #1
 8004a1e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004a22:	42b4      	cmp	r4, r6
 8004a24:	bf08      	it	eq
 8004a26:	f040 0001 	orreq.w	r0, r0, #1
 8004a2a:	3618      	adds	r6, #24
 8004a2c:	42b4      	cmp	r4, r6
 8004a2e:	bf08      	it	eq
 8004a30:	f040 0001 	orreq.w	r0, r0, #1
 8004a34:	3618      	adds	r6, #24
 8004a36:	42b4      	cmp	r4, r6
 8004a38:	bf08      	it	eq
 8004a3a:	f040 0001 	orreq.w	r0, r0, #1
 8004a3e:	3618      	adds	r6, #24
 8004a40:	42b4      	cmp	r4, r6
 8004a42:	bf08      	it	eq
 8004a44:	f040 0001 	orreq.w	r0, r0, #1
 8004a48:	3618      	adds	r6, #24
 8004a4a:	42b4      	cmp	r4, r6
 8004a4c:	bf08      	it	eq
 8004a4e:	f040 0001 	orreq.w	r0, r0, #1
 8004a52:	3618      	adds	r6, #24
 8004a54:	42b4      	cmp	r4, r6
 8004a56:	bf08      	it	eq
 8004a58:	f040 0001 	orreq.w	r0, r0, #1
 8004a5c:	3618      	adds	r6, #24
 8004a5e:	42b4      	cmp	r4, r6
 8004a60:	bf08      	it	eq
 8004a62:	f040 0001 	orreq.w	r0, r0, #1
 8004a66:	3618      	adds	r6, #24
 8004a68:	42b4      	cmp	r4, r6
 8004a6a:	bf08      	it	eq
 8004a6c:	f040 0001 	orreq.w	r0, r0, #1
 8004a70:	4e75      	ldr	r6, [pc, #468]	; (8004c48 <HAL_DMA_Start_IT+0x2cc>)
 8004a72:	42b4      	cmp	r4, r6
 8004a74:	bf08      	it	eq
 8004a76:	f040 0001 	orreq.w	r0, r0, #1
 8004a7a:	3614      	adds	r6, #20
 8004a7c:	42b4      	cmp	r4, r6
 8004a7e:	bf08      	it	eq
 8004a80:	f040 0001 	orreq.w	r0, r0, #1
 8004a84:	3614      	adds	r6, #20
 8004a86:	42b4      	cmp	r4, r6
 8004a88:	bf08      	it	eq
 8004a8a:	f040 0001 	orreq.w	r0, r0, #1
 8004a8e:	3614      	adds	r6, #20
 8004a90:	42b4      	cmp	r4, r6
 8004a92:	bf08      	it	eq
 8004a94:	f040 0001 	orreq.w	r0, r0, #1
 8004a98:	3614      	adds	r6, #20
 8004a9a:	42b4      	cmp	r4, r6
 8004a9c:	bf08      	it	eq
 8004a9e:	f040 0001 	orreq.w	r0, r0, #1
 8004aa2:	3614      	adds	r6, #20
 8004aa4:	42b4      	cmp	r4, r6
 8004aa6:	bf08      	it	eq
 8004aa8:	f040 0001 	orreq.w	r0, r0, #1
 8004aac:	3614      	adds	r6, #20
 8004aae:	42b4      	cmp	r4, r6
 8004ab0:	bf08      	it	eq
 8004ab2:	f040 0001 	orreq.w	r0, r0, #1
 8004ab6:	b910      	cbnz	r0, 8004abe <HAL_DMA_Start_IT+0x142>
 8004ab8:	4864      	ldr	r0, [pc, #400]	; (8004c4c <HAL_DMA_Start_IT+0x2d0>)
 8004aba:	4284      	cmp	r4, r0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004abe:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8004ac2:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004ac4:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8004ac8:	b110      	cbz	r0, 8004ad0 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aca:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8004ace:	6044      	str	r4, [r0, #4]
 8004ad0:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ad4:	485b      	ldr	r0, [pc, #364]	; (8004c44 <HAL_DMA_Start_IT+0x2c8>)
 8004ad6:	4e5a      	ldr	r6, [pc, #360]	; (8004c40 <HAL_DMA_Start_IT+0x2c4>)
 8004ad8:	42b4      	cmp	r4, r6
 8004ada:	bf18      	it	ne
 8004adc:	4284      	cmpne	r4, r0
 8004ade:	f106 0618 	add.w	r6, r6, #24
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2001      	moveq	r0, #1
 8004ae6:	2000      	movne	r0, #0
 8004ae8:	42b4      	cmp	r4, r6
 8004aea:	bf08      	it	eq
 8004aec:	f040 0001 	orreq.w	r0, r0, #1
 8004af0:	3618      	adds	r6, #24
 8004af2:	42b4      	cmp	r4, r6
 8004af4:	bf08      	it	eq
 8004af6:	f040 0001 	orreq.w	r0, r0, #1
 8004afa:	3618      	adds	r6, #24
 8004afc:	42b4      	cmp	r4, r6
 8004afe:	bf08      	it	eq
 8004b00:	f040 0001 	orreq.w	r0, r0, #1
 8004b04:	3618      	adds	r6, #24
 8004b06:	42b4      	cmp	r4, r6
 8004b08:	bf08      	it	eq
 8004b0a:	f040 0001 	orreq.w	r0, r0, #1
 8004b0e:	3618      	adds	r6, #24
 8004b10:	42b4      	cmp	r4, r6
 8004b12:	bf08      	it	eq
 8004b14:	f040 0001 	orreq.w	r0, r0, #1
 8004b18:	3618      	adds	r6, #24
 8004b1a:	42b4      	cmp	r4, r6
 8004b1c:	bf08      	it	eq
 8004b1e:	f040 0001 	orreq.w	r0, r0, #1
 8004b22:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004b26:	42b4      	cmp	r4, r6
 8004b28:	bf08      	it	eq
 8004b2a:	f040 0001 	orreq.w	r0, r0, #1
 8004b2e:	3618      	adds	r6, #24
 8004b30:	42b4      	cmp	r4, r6
 8004b32:	bf08      	it	eq
 8004b34:	f040 0001 	orreq.w	r0, r0, #1
 8004b38:	3618      	adds	r6, #24
 8004b3a:	42b4      	cmp	r4, r6
 8004b3c:	bf08      	it	eq
 8004b3e:	f040 0001 	orreq.w	r0, r0, #1
 8004b42:	3618      	adds	r6, #24
 8004b44:	42b4      	cmp	r4, r6
 8004b46:	bf08      	it	eq
 8004b48:	f040 0001 	orreq.w	r0, r0, #1
 8004b4c:	3618      	adds	r6, #24
 8004b4e:	42b4      	cmp	r4, r6
 8004b50:	bf08      	it	eq
 8004b52:	f040 0001 	orreq.w	r0, r0, #1
 8004b56:	3618      	adds	r6, #24
 8004b58:	42b4      	cmp	r4, r6
 8004b5a:	bf08      	it	eq
 8004b5c:	f040 0001 	orreq.w	r0, r0, #1
 8004b60:	3618      	adds	r6, #24
 8004b62:	42b4      	cmp	r4, r6
 8004b64:	bf08      	it	eq
 8004b66:	f040 0001 	orreq.w	r0, r0, #1
 8004b6a:	b918      	cbnz	r0, 8004b74 <HAL_DMA_Start_IT+0x1f8>
 8004b6c:	4838      	ldr	r0, [pc, #224]	; (8004c50 <HAL_DMA_Start_IT+0x2d4>)
 8004b6e:	4284      	cmp	r4, r0
 8004b70:	f040 817b 	bne.w	8004e6a <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b74:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004b78:	f000 041f 	and.w	r4, r0, #31
 8004b7c:	203f      	movs	r0, #63	; 0x3f
 8004b7e:	40a0      	lsls	r0, r4
 8004b80:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b82:	f8dc 4000 	ldr.w	r4, [ip]
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004b8c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b8e:	f8dc 0000 	ldr.w	r0, [ip]
 8004b92:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b94:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004b98:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b9a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b9e:	f000 815b 	beq.w	8004e58 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ba2:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ba4:	f8dc 3000 	ldr.w	r3, [ip]
 8004ba8:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004baa:	f8dc 4000 	ldr.w	r4, [ip]
 8004bae:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <HAL_DMA_Start_IT+0x2c8>)
 8004bb0:	4923      	ldr	r1, [pc, #140]	; (8004c40 <HAL_DMA_Start_IT+0x2c4>)
 8004bb2:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_DMA_Start_IT+0x2d8>)
 8004bb4:	428c      	cmp	r4, r1
 8004bb6:	bf18      	it	ne
 8004bb8:	429c      	cmpne	r4, r3
 8004bba:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	4294      	cmp	r4, r2
 8004bc6:	bf08      	it	eq
 8004bc8:	f043 0301 	orreq.w	r3, r3, #1
 8004bcc:	3230      	adds	r2, #48	; 0x30
 8004bce:	428c      	cmp	r4, r1
 8004bd0:	bf08      	it	eq
 8004bd2:	f043 0301 	orreq.w	r3, r3, #1
 8004bd6:	3130      	adds	r1, #48	; 0x30
 8004bd8:	4294      	cmp	r4, r2
 8004bda:	bf08      	it	eq
 8004bdc:	f043 0301 	orreq.w	r3, r3, #1
 8004be0:	3230      	adds	r2, #48	; 0x30
 8004be2:	428c      	cmp	r4, r1
 8004be4:	bf08      	it	eq
 8004be6:	f043 0301 	orreq.w	r3, r3, #1
 8004bea:	3130      	adds	r1, #48	; 0x30
 8004bec:	4294      	cmp	r4, r2
 8004bee:	bf08      	it	eq
 8004bf0:	f043 0301 	orreq.w	r3, r3, #1
 8004bf4:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004bf8:	428c      	cmp	r4, r1
 8004bfa:	bf08      	it	eq
 8004bfc:	f043 0301 	orreq.w	r3, r3, #1
 8004c00:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004c04:	4294      	cmp	r4, r2
 8004c06:	bf08      	it	eq
 8004c08:	f043 0301 	orreq.w	r3, r3, #1
 8004c0c:	3230      	adds	r2, #48	; 0x30
 8004c0e:	428c      	cmp	r4, r1
 8004c10:	bf08      	it	eq
 8004c12:	f043 0301 	orreq.w	r3, r3, #1
 8004c16:	3130      	adds	r1, #48	; 0x30
 8004c18:	4294      	cmp	r4, r2
 8004c1a:	bf08      	it	eq
 8004c1c:	f043 0301 	orreq.w	r3, r3, #1
 8004c20:	3230      	adds	r2, #48	; 0x30
 8004c22:	428c      	cmp	r4, r1
 8004c24:	bf08      	it	eq
 8004c26:	f043 0301 	orreq.w	r3, r3, #1
 8004c2a:	3130      	adds	r1, #48	; 0x30
 8004c2c:	4294      	cmp	r4, r2
 8004c2e:	bf08      	it	eq
 8004c30:	f043 0301 	orreq.w	r3, r3, #1
 8004c34:	3230      	adds	r2, #48	; 0x30
 8004c36:	428c      	cmp	r4, r1
 8004c38:	bf08      	it	eq
 8004c3a:	f043 0301 	orreq.w	r3, r3, #1
 8004c3e:	e00b      	b.n	8004c58 <HAL_DMA_Start_IT+0x2dc>
 8004c40:	40020028 	.word	0x40020028
 8004c44:	40020010 	.word	0x40020010
 8004c48:	58025408 	.word	0x58025408
 8004c4c:	58025494 	.word	0x58025494
 8004c50:	400204b8 	.word	0x400204b8
 8004c54:	40020040 	.word	0x40020040
 8004c58:	4294      	cmp	r4, r2
 8004c5a:	bf08      	it	eq
 8004c5c:	f043 0301 	orreq.w	r3, r3, #1
 8004c60:	b91b      	cbnz	r3, 8004c6a <HAL_DMA_Start_IT+0x2ee>
 8004c62:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <HAL_DMA_Start_IT+0x554>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	f040 8143 	bne.w	8004ef0 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f023 031e 	bic.w	r3, r3, #30
 8004c70:	f043 0316 	orr.w	r3, r3, #22
 8004c74:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004c76:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004c7a:	b12b      	cbz	r3, 8004c88 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c7c:	f8dc 2000 	ldr.w	r2, [ip]
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	f043 0308 	orr.w	r3, r3, #8
 8004c86:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c88:	f8dc 4000 	ldr.w	r4, [ip]
 8004c8c:	4b91      	ldr	r3, [pc, #580]	; (8004ed4 <HAL_DMA_Start_IT+0x558>)
 8004c8e:	4992      	ldr	r1, [pc, #584]	; (8004ed8 <HAL_DMA_Start_IT+0x55c>)
 8004c90:	4a92      	ldr	r2, [pc, #584]	; (8004edc <HAL_DMA_Start_IT+0x560>)
 8004c92:	428c      	cmp	r4, r1
 8004c94:	bf18      	it	ne
 8004c96:	429c      	cmpne	r4, r3
 8004c98:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	4294      	cmp	r4, r2
 8004ca4:	bf08      	it	eq
 8004ca6:	f043 0301 	orreq.w	r3, r3, #1
 8004caa:	3230      	adds	r2, #48	; 0x30
 8004cac:	428c      	cmp	r4, r1
 8004cae:	bf08      	it	eq
 8004cb0:	f043 0301 	orreq.w	r3, r3, #1
 8004cb4:	3130      	adds	r1, #48	; 0x30
 8004cb6:	4294      	cmp	r4, r2
 8004cb8:	bf08      	it	eq
 8004cba:	f043 0301 	orreq.w	r3, r3, #1
 8004cbe:	3230      	adds	r2, #48	; 0x30
 8004cc0:	428c      	cmp	r4, r1
 8004cc2:	bf08      	it	eq
 8004cc4:	f043 0301 	orreq.w	r3, r3, #1
 8004cc8:	3130      	adds	r1, #48	; 0x30
 8004cca:	4294      	cmp	r4, r2
 8004ccc:	bf08      	it	eq
 8004cce:	f043 0301 	orreq.w	r3, r3, #1
 8004cd2:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004cd6:	428c      	cmp	r4, r1
 8004cd8:	bf08      	it	eq
 8004cda:	f043 0301 	orreq.w	r3, r3, #1
 8004cde:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004ce2:	4294      	cmp	r4, r2
 8004ce4:	bf08      	it	eq
 8004ce6:	f043 0301 	orreq.w	r3, r3, #1
 8004cea:	3230      	adds	r2, #48	; 0x30
 8004cec:	428c      	cmp	r4, r1
 8004cee:	bf08      	it	eq
 8004cf0:	f043 0301 	orreq.w	r3, r3, #1
 8004cf4:	3130      	adds	r1, #48	; 0x30
 8004cf6:	4294      	cmp	r4, r2
 8004cf8:	bf08      	it	eq
 8004cfa:	f043 0301 	orreq.w	r3, r3, #1
 8004cfe:	3230      	adds	r2, #48	; 0x30
 8004d00:	428c      	cmp	r4, r1
 8004d02:	bf08      	it	eq
 8004d04:	f043 0301 	orreq.w	r3, r3, #1
 8004d08:	3130      	adds	r1, #48	; 0x30
 8004d0a:	4294      	cmp	r4, r2
 8004d0c:	bf08      	it	eq
 8004d0e:	f043 0301 	orreq.w	r3, r3, #1
 8004d12:	3230      	adds	r2, #48	; 0x30
 8004d14:	428c      	cmp	r4, r1
 8004d16:	bf08      	it	eq
 8004d18:	f043 0301 	orreq.w	r3, r3, #1
 8004d1c:	3130      	adds	r1, #48	; 0x30
 8004d1e:	4294      	cmp	r4, r2
 8004d20:	bf08      	it	eq
 8004d22:	f043 0301 	orreq.w	r3, r3, #1
 8004d26:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_DMA_Start_IT+0x564>)
 8004d28:	428c      	cmp	r4, r1
 8004d2a:	bf08      	it	eq
 8004d2c:	f043 0301 	orreq.w	r3, r3, #1
 8004d30:	496c      	ldr	r1, [pc, #432]	; (8004ee4 <HAL_DMA_Start_IT+0x568>)
 8004d32:	4294      	cmp	r4, r2
 8004d34:	bf08      	it	eq
 8004d36:	f043 0301 	orreq.w	r3, r3, #1
 8004d3a:	3228      	adds	r2, #40	; 0x28
 8004d3c:	428c      	cmp	r4, r1
 8004d3e:	bf08      	it	eq
 8004d40:	f043 0301 	orreq.w	r3, r3, #1
 8004d44:	3128      	adds	r1, #40	; 0x28
 8004d46:	4294      	cmp	r4, r2
 8004d48:	bf08      	it	eq
 8004d4a:	f043 0301 	orreq.w	r3, r3, #1
 8004d4e:	3228      	adds	r2, #40	; 0x28
 8004d50:	428c      	cmp	r4, r1
 8004d52:	bf08      	it	eq
 8004d54:	f043 0301 	orreq.w	r3, r3, #1
 8004d58:	3128      	adds	r1, #40	; 0x28
 8004d5a:	4294      	cmp	r4, r2
 8004d5c:	bf08      	it	eq
 8004d5e:	f043 0301 	orreq.w	r3, r3, #1
 8004d62:	3228      	adds	r2, #40	; 0x28
 8004d64:	428c      	cmp	r4, r1
 8004d66:	bf08      	it	eq
 8004d68:	f043 0301 	orreq.w	r3, r3, #1
 8004d6c:	4294      	cmp	r4, r2
 8004d6e:	bf08      	it	eq
 8004d70:	f043 0301 	orreq.w	r3, r3, #1
 8004d74:	b913      	cbnz	r3, 8004d7c <HAL_DMA_Start_IT+0x400>
 8004d76:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <HAL_DMA_Start_IT+0x56c>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	d111      	bne.n	8004da0 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d7c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	03d2      	lsls	r2, r2, #15
 8004d84:	d503      	bpl.n	8004d8e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004d8e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8004d92:	b11b      	cbz	r3, 8004d9c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <HAL_DMA_Start_IT+0x558>)
 8004da2:	494d      	ldr	r1, [pc, #308]	; (8004ed8 <HAL_DMA_Start_IT+0x55c>)
 8004da4:	4a4d      	ldr	r2, [pc, #308]	; (8004edc <HAL_DMA_Start_IT+0x560>)
 8004da6:	428c      	cmp	r4, r1
 8004da8:	bf18      	it	ne
 8004daa:	429c      	cmpne	r4, r3
 8004dac:	484f      	ldr	r0, [pc, #316]	; (8004eec <HAL_DMA_Start_IT+0x570>)
 8004dae:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	4294      	cmp	r4, r2
 8004dba:	bf08      	it	eq
 8004dbc:	f043 0301 	orreq.w	r3, r3, #1
 8004dc0:	3230      	adds	r2, #48	; 0x30
 8004dc2:	4284      	cmp	r4, r0
 8004dc4:	bf08      	it	eq
 8004dc6:	f043 0301 	orreq.w	r3, r3, #1
 8004dca:	3060      	adds	r0, #96	; 0x60
 8004dcc:	4294      	cmp	r4, r2
 8004dce:	bf08      	it	eq
 8004dd0:	f043 0301 	orreq.w	r3, r3, #1
 8004dd4:	3230      	adds	r2, #48	; 0x30
 8004dd6:	428c      	cmp	r4, r1
 8004dd8:	bf08      	it	eq
 8004dda:	f043 0301 	orreq.w	r3, r3, #1
 8004dde:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8004de2:	4294      	cmp	r4, r2
 8004de4:	bf08      	it	eq
 8004de6:	f043 0301 	orreq.w	r3, r3, #1
 8004dea:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004dee:	4284      	cmp	r4, r0
 8004df0:	bf08      	it	eq
 8004df2:	f043 0301 	orreq.w	r3, r3, #1
 8004df6:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8004dfa:	4294      	cmp	r4, r2
 8004dfc:	bf08      	it	eq
 8004dfe:	f043 0301 	orreq.w	r3, r3, #1
 8004e02:	3230      	adds	r2, #48	; 0x30
 8004e04:	428c      	cmp	r4, r1
 8004e06:	bf08      	it	eq
 8004e08:	f043 0301 	orreq.w	r3, r3, #1
 8004e0c:	3160      	adds	r1, #96	; 0x60
 8004e0e:	4294      	cmp	r4, r2
 8004e10:	bf08      	it	eq
 8004e12:	f043 0301 	orreq.w	r3, r3, #1
 8004e16:	3230      	adds	r2, #48	; 0x30
 8004e18:	4284      	cmp	r4, r0
 8004e1a:	bf08      	it	eq
 8004e1c:	f043 0301 	orreq.w	r3, r3, #1
 8004e20:	4294      	cmp	r4, r2
 8004e22:	bf08      	it	eq
 8004e24:	f043 0301 	orreq.w	r3, r3, #1
 8004e28:	3230      	adds	r2, #48	; 0x30
 8004e2a:	428c      	cmp	r4, r1
 8004e2c:	bf08      	it	eq
 8004e2e:	f043 0301 	orreq.w	r3, r3, #1
 8004e32:	4294      	cmp	r4, r2
 8004e34:	bf08      	it	eq
 8004e36:	f043 0301 	orreq.w	r3, r3, #1
 8004e3a:	b933      	cbnz	r3, 8004e4a <HAL_DMA_Start_IT+0x4ce>
 8004e3c:	3060      	adds	r0, #96	; 0x60
 8004e3e:	1a20      	subs	r0, r4, r0
 8004e40:	fab0 f080 	clz	r0, r0
 8004e44:	0940      	lsrs	r0, r0, #5
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d03d      	beq.n	8004ec6 <HAL_DMA_Start_IT+0x54a>
 8004e4a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6023      	str	r3, [r4, #0]
}
 8004e54:	bc70      	pop	{r4, r5, r6}
 8004e56:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8004e5e:	60d9      	str	r1, [r3, #12]
 8004e60:	e6a3      	b.n	8004baa <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
 8004e64:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004e66:	2002      	movs	r0, #2
}
 8004e68:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e6a:	481d      	ldr	r0, [pc, #116]	; (8004ee0 <HAL_DMA_Start_IT+0x564>)
 8004e6c:	4e1d      	ldr	r6, [pc, #116]	; (8004ee4 <HAL_DMA_Start_IT+0x568>)
 8004e6e:	42b4      	cmp	r4, r6
 8004e70:	bf18      	it	ne
 8004e72:	4284      	cmpne	r4, r0
 8004e74:	f106 0614 	add.w	r6, r6, #20
 8004e78:	bf0c      	ite	eq
 8004e7a:	2001      	moveq	r0, #1
 8004e7c:	2000      	movne	r0, #0
 8004e7e:	42b4      	cmp	r4, r6
 8004e80:	bf08      	it	eq
 8004e82:	f040 0001 	orreq.w	r0, r0, #1
 8004e86:	3614      	adds	r6, #20
 8004e88:	42b4      	cmp	r4, r6
 8004e8a:	bf08      	it	eq
 8004e8c:	f040 0001 	orreq.w	r0, r0, #1
 8004e90:	3614      	adds	r6, #20
 8004e92:	42b4      	cmp	r4, r6
 8004e94:	bf08      	it	eq
 8004e96:	f040 0001 	orreq.w	r0, r0, #1
 8004e9a:	3614      	adds	r6, #20
 8004e9c:	42b4      	cmp	r4, r6
 8004e9e:	bf08      	it	eq
 8004ea0:	f040 0001 	orreq.w	r0, r0, #1
 8004ea4:	3614      	adds	r6, #20
 8004ea6:	42b4      	cmp	r4, r6
 8004ea8:	bf08      	it	eq
 8004eaa:	f040 0001 	orreq.w	r0, r0, #1
 8004eae:	b910      	cbnz	r0, 8004eb6 <HAL_DMA_Start_IT+0x53a>
 8004eb0:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <HAL_DMA_Start_IT+0x56c>)
 8004eb2:	4284      	cmp	r4, r0
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eb6:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004eba:	f000 041f 	and.w	r4, r0, #31
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	40a0      	lsls	r0, r4
 8004ec2:	6068      	str	r0, [r5, #4]
 8004ec4:	e663      	b.n	8004b8e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	e56d      	b.n	80049ac <HAL_DMA_Start_IT+0x30>
 8004ed0:	400204b8 	.word	0x400204b8
 8004ed4:	40020010 	.word	0x40020010
 8004ed8:	40020028 	.word	0x40020028
 8004edc:	40020040 	.word	0x40020040
 8004ee0:	58025408 	.word	0x58025408
 8004ee4:	5802541c 	.word	0x5802541c
 8004ee8:	58025494 	.word	0x58025494
 8004eec:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f023 030e 	bic.w	r3, r3, #14
 8004ef6:	f043 030a 	orr.w	r3, r3, #10
 8004efa:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004efc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f43f aec1 	beq.w	8004c88 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f06:	f8dc 2000 	ldr.w	r2, [ip]
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e6b9      	b.n	8004c88 <HAL_DMA_Start_IT+0x30c>

08004f14 <HAL_DMA_Abort>:
{
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004f18:	f7ff f90a 	bl	8004130 <HAL_GetTick>
  if(hdma == NULL)
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	f000 81ef 	beq.w	8005300 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f22:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 81d9 	bne.w	80052de <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f2c:	6832      	ldr	r2, [r6, #0]
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4b6e      	ldr	r3, [pc, #440]	; (80050ec <HAL_DMA_Abort+0x1d8>)
 8004f32:	496f      	ldr	r1, [pc, #444]	; (80050f0 <HAL_DMA_Abort+0x1dc>)
 8004f34:	428a      	cmp	r2, r1
 8004f36:	bf18      	it	ne
 8004f38:	429a      	cmpne	r2, r3
 8004f3a:	f101 0118 	add.w	r1, r1, #24
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	428a      	cmp	r2, r1
 8004f46:	bf08      	it	eq
 8004f48:	f043 0301 	orreq.w	r3, r3, #1
 8004f4c:	3118      	adds	r1, #24
 8004f4e:	428a      	cmp	r2, r1
 8004f50:	bf08      	it	eq
 8004f52:	f043 0301 	orreq.w	r3, r3, #1
 8004f56:	3118      	adds	r1, #24
 8004f58:	428a      	cmp	r2, r1
 8004f5a:	bf08      	it	eq
 8004f5c:	f043 0301 	orreq.w	r3, r3, #1
 8004f60:	3118      	adds	r1, #24
 8004f62:	428a      	cmp	r2, r1
 8004f64:	bf08      	it	eq
 8004f66:	f043 0301 	orreq.w	r3, r3, #1
 8004f6a:	3118      	adds	r1, #24
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	bf08      	it	eq
 8004f70:	f043 0301 	orreq.w	r3, r3, #1
 8004f74:	3118      	adds	r1, #24
 8004f76:	428a      	cmp	r2, r1
 8004f78:	bf08      	it	eq
 8004f7a:	f043 0301 	orreq.w	r3, r3, #1
 8004f7e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004f82:	428a      	cmp	r2, r1
 8004f84:	bf08      	it	eq
 8004f86:	f043 0301 	orreq.w	r3, r3, #1
 8004f8a:	3118      	adds	r1, #24
 8004f8c:	428a      	cmp	r2, r1
 8004f8e:	bf08      	it	eq
 8004f90:	f043 0301 	orreq.w	r3, r3, #1
 8004f94:	3118      	adds	r1, #24
 8004f96:	428a      	cmp	r2, r1
 8004f98:	bf08      	it	eq
 8004f9a:	f043 0301 	orreq.w	r3, r3, #1
 8004f9e:	3118      	adds	r1, #24
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	bf08      	it	eq
 8004fa4:	f043 0301 	orreq.w	r3, r3, #1
 8004fa8:	3118      	adds	r1, #24
 8004faa:	428a      	cmp	r2, r1
 8004fac:	bf08      	it	eq
 8004fae:	f043 0301 	orreq.w	r3, r3, #1
 8004fb2:	3118      	adds	r1, #24
 8004fb4:	428a      	cmp	r2, r1
 8004fb6:	bf08      	it	eq
 8004fb8:	f043 0301 	orreq.w	r3, r3, #1
 8004fbc:	3118      	adds	r1, #24
 8004fbe:	428a      	cmp	r2, r1
 8004fc0:	bf08      	it	eq
 8004fc2:	f043 0301 	orreq.w	r3, r3, #1
 8004fc6:	b91b      	cbnz	r3, 8004fd0 <HAL_DMA_Abort+0xbc>
 8004fc8:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <HAL_DMA_Abort+0x1e0>)
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f040 81a2 	bne.w	8005314 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004fd0:	6813      	ldr	r3, [r2, #0]
 8004fd2:	f023 031e 	bic.w	r3, r3, #30
 8004fd6:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004fd8:	6832      	ldr	r2, [r6, #0]
 8004fda:	6953      	ldr	r3, [r2, #20]
 8004fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe0:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004fe2:	6832      	ldr	r2, [r6, #0]
 8004fe4:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fe6:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_DMA_Abort+0x1d8>)
 8004fe8:	4941      	ldr	r1, [pc, #260]	; (80050f0 <HAL_DMA_Abort+0x1dc>)
 8004fea:	428a      	cmp	r2, r1
 8004fec:	bf18      	it	ne
 8004fee:	429a      	cmpne	r2, r3
 8004ff0:	f101 0118 	add.w	r1, r1, #24
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	428a      	cmp	r2, r1
 8004ffc:	bf08      	it	eq
 8004ffe:	f043 0301 	orreq.w	r3, r3, #1
 8005002:	3118      	adds	r1, #24
 8005004:	428a      	cmp	r2, r1
 8005006:	bf08      	it	eq
 8005008:	f043 0301 	orreq.w	r3, r3, #1
 800500c:	3118      	adds	r1, #24
 800500e:	428a      	cmp	r2, r1
 8005010:	bf08      	it	eq
 8005012:	f043 0301 	orreq.w	r3, r3, #1
 8005016:	3118      	adds	r1, #24
 8005018:	428a      	cmp	r2, r1
 800501a:	bf08      	it	eq
 800501c:	f043 0301 	orreq.w	r3, r3, #1
 8005020:	3118      	adds	r1, #24
 8005022:	428a      	cmp	r2, r1
 8005024:	bf08      	it	eq
 8005026:	f043 0301 	orreq.w	r3, r3, #1
 800502a:	3118      	adds	r1, #24
 800502c:	428a      	cmp	r2, r1
 800502e:	bf08      	it	eq
 8005030:	f043 0301 	orreq.w	r3, r3, #1
 8005034:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005038:	428a      	cmp	r2, r1
 800503a:	bf08      	it	eq
 800503c:	f043 0301 	orreq.w	r3, r3, #1
 8005040:	3118      	adds	r1, #24
 8005042:	428a      	cmp	r2, r1
 8005044:	bf08      	it	eq
 8005046:	f043 0301 	orreq.w	r3, r3, #1
 800504a:	3118      	adds	r1, #24
 800504c:	428a      	cmp	r2, r1
 800504e:	bf08      	it	eq
 8005050:	f043 0301 	orreq.w	r3, r3, #1
 8005054:	3118      	adds	r1, #24
 8005056:	428a      	cmp	r2, r1
 8005058:	bf08      	it	eq
 800505a:	f043 0301 	orreq.w	r3, r3, #1
 800505e:	3118      	adds	r1, #24
 8005060:	428a      	cmp	r2, r1
 8005062:	bf08      	it	eq
 8005064:	f043 0301 	orreq.w	r3, r3, #1
 8005068:	3118      	adds	r1, #24
 800506a:	428a      	cmp	r2, r1
 800506c:	bf08      	it	eq
 800506e:	f043 0301 	orreq.w	r3, r3, #1
 8005072:	3118      	adds	r1, #24
 8005074:	428a      	cmp	r2, r1
 8005076:	bf08      	it	eq
 8005078:	f043 0301 	orreq.w	r3, r3, #1
 800507c:	3118      	adds	r1, #24
 800507e:	428a      	cmp	r2, r1
 8005080:	bf08      	it	eq
 8005082:	f043 0301 	orreq.w	r3, r3, #1
 8005086:	491c      	ldr	r1, [pc, #112]	; (80050f8 <HAL_DMA_Abort+0x1e4>)
 8005088:	428a      	cmp	r2, r1
 800508a:	bf08      	it	eq
 800508c:	f043 0301 	orreq.w	r3, r3, #1
 8005090:	3114      	adds	r1, #20
 8005092:	428a      	cmp	r2, r1
 8005094:	bf08      	it	eq
 8005096:	f043 0301 	orreq.w	r3, r3, #1
 800509a:	3114      	adds	r1, #20
 800509c:	428a      	cmp	r2, r1
 800509e:	bf08      	it	eq
 80050a0:	f043 0301 	orreq.w	r3, r3, #1
 80050a4:	3114      	adds	r1, #20
 80050a6:	428a      	cmp	r2, r1
 80050a8:	bf08      	it	eq
 80050aa:	f043 0301 	orreq.w	r3, r3, #1
 80050ae:	3114      	adds	r1, #20
 80050b0:	428a      	cmp	r2, r1
 80050b2:	bf08      	it	eq
 80050b4:	f043 0301 	orreq.w	r3, r3, #1
 80050b8:	3114      	adds	r1, #20
 80050ba:	428a      	cmp	r2, r1
 80050bc:	bf08      	it	eq
 80050be:	f043 0301 	orreq.w	r3, r3, #1
 80050c2:	3114      	adds	r1, #20
 80050c4:	428a      	cmp	r2, r1
 80050c6:	bf08      	it	eq
 80050c8:	f043 0301 	orreq.w	r3, r3, #1
 80050cc:	b913      	cbnz	r3, 80050d4 <HAL_DMA_Abort+0x1c0>
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_DMA_Abort+0x1e8>)
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d105      	bne.n	80050e0 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050d4:	6e32      	ldr	r2, [r6, #96]	; 0x60
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e010      	b.n	800510c <HAL_DMA_Abort+0x1f8>
 80050ea:	bf00      	nop
 80050ec:	40020010 	.word	0x40020010
 80050f0:	40020028 	.word	0x40020028
 80050f4:	400204b8 	.word	0x400204b8
 80050f8:	58025408 	.word	0x58025408
 80050fc:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005100:	f7ff f816 	bl	8004130 <HAL_GetTick>
 8005104:	1b00      	subs	r0, r0, r4
 8005106:	2805      	cmp	r0, #5
 8005108:	f200 80f0 	bhi.w	80052ec <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	07db      	lsls	r3, r3, #31
 8005110:	d4f6      	bmi.n	8005100 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005112:	6832      	ldr	r2, [r6, #0]
 8005114:	4b83      	ldr	r3, [pc, #524]	; (8005324 <HAL_DMA_Abort+0x410>)
 8005116:	4884      	ldr	r0, [pc, #528]	; (8005328 <HAL_DMA_Abort+0x414>)
 8005118:	4984      	ldr	r1, [pc, #528]	; (800532c <HAL_DMA_Abort+0x418>)
 800511a:	4282      	cmp	r2, r0
 800511c:	bf18      	it	ne
 800511e:	429a      	cmpne	r2, r3
 8005120:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	428a      	cmp	r2, r1
 800512c:	bf08      	it	eq
 800512e:	f043 0301 	orreq.w	r3, r3, #1
 8005132:	3130      	adds	r1, #48	; 0x30
 8005134:	4282      	cmp	r2, r0
 8005136:	bf08      	it	eq
 8005138:	f043 0301 	orreq.w	r3, r3, #1
 800513c:	3030      	adds	r0, #48	; 0x30
 800513e:	428a      	cmp	r2, r1
 8005140:	bf08      	it	eq
 8005142:	f043 0301 	orreq.w	r3, r3, #1
 8005146:	3130      	adds	r1, #48	; 0x30
 8005148:	4282      	cmp	r2, r0
 800514a:	bf08      	it	eq
 800514c:	f043 0301 	orreq.w	r3, r3, #1
 8005150:	3030      	adds	r0, #48	; 0x30
 8005152:	428a      	cmp	r2, r1
 8005154:	bf08      	it	eq
 8005156:	f043 0301 	orreq.w	r3, r3, #1
 800515a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800515e:	4282      	cmp	r2, r0
 8005160:	bf08      	it	eq
 8005162:	f043 0301 	orreq.w	r3, r3, #1
 8005166:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800516a:	428a      	cmp	r2, r1
 800516c:	bf08      	it	eq
 800516e:	f043 0301 	orreq.w	r3, r3, #1
 8005172:	3130      	adds	r1, #48	; 0x30
 8005174:	4282      	cmp	r2, r0
 8005176:	bf08      	it	eq
 8005178:	f043 0301 	orreq.w	r3, r3, #1
 800517c:	3030      	adds	r0, #48	; 0x30
 800517e:	428a      	cmp	r2, r1
 8005180:	bf08      	it	eq
 8005182:	f043 0301 	orreq.w	r3, r3, #1
 8005186:	3130      	adds	r1, #48	; 0x30
 8005188:	4282      	cmp	r2, r0
 800518a:	bf08      	it	eq
 800518c:	f043 0301 	orreq.w	r3, r3, #1
 8005190:	3030      	adds	r0, #48	; 0x30
 8005192:	428a      	cmp	r2, r1
 8005194:	bf08      	it	eq
 8005196:	f043 0301 	orreq.w	r3, r3, #1
 800519a:	3130      	adds	r1, #48	; 0x30
 800519c:	4282      	cmp	r2, r0
 800519e:	bf08      	it	eq
 80051a0:	f043 0301 	orreq.w	r3, r3, #1
 80051a4:	428a      	cmp	r2, r1
 80051a6:	bf08      	it	eq
 80051a8:	f043 0301 	orreq.w	r3, r3, #1
 80051ac:	b91b      	cbnz	r3, 80051b6 <HAL_DMA_Abort+0x2a2>
 80051ae:	4b60      	ldr	r3, [pc, #384]	; (8005330 <HAL_DMA_Abort+0x41c>)
 80051b0:	429a      	cmp	r2, r3
 80051b2:	f040 80a7 	bne.w	8005304 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051b6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80051b8:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ba:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051bc:	f002 021f 	and.w	r2, r2, #31
 80051c0:	4093      	lsls	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	4b57      	ldr	r3, [pc, #348]	; (8005324 <HAL_DMA_Abort+0x410>)
 80051c8:	4857      	ldr	r0, [pc, #348]	; (8005328 <HAL_DMA_Abort+0x414>)
 80051ca:	4958      	ldr	r1, [pc, #352]	; (800532c <HAL_DMA_Abort+0x418>)
 80051cc:	4282      	cmp	r2, r0
 80051ce:	bf18      	it	ne
 80051d0:	429a      	cmpne	r2, r3
 80051d2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	428a      	cmp	r2, r1
 80051de:	bf08      	it	eq
 80051e0:	f043 0301 	orreq.w	r3, r3, #1
 80051e4:	3130      	adds	r1, #48	; 0x30
 80051e6:	4282      	cmp	r2, r0
 80051e8:	bf08      	it	eq
 80051ea:	f043 0301 	orreq.w	r3, r3, #1
 80051ee:	3030      	adds	r0, #48	; 0x30
 80051f0:	428a      	cmp	r2, r1
 80051f2:	bf08      	it	eq
 80051f4:	f043 0301 	orreq.w	r3, r3, #1
 80051f8:	3130      	adds	r1, #48	; 0x30
 80051fa:	4282      	cmp	r2, r0
 80051fc:	bf08      	it	eq
 80051fe:	f043 0301 	orreq.w	r3, r3, #1
 8005202:	3030      	adds	r0, #48	; 0x30
 8005204:	428a      	cmp	r2, r1
 8005206:	bf08      	it	eq
 8005208:	f043 0301 	orreq.w	r3, r3, #1
 800520c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005210:	4282      	cmp	r2, r0
 8005212:	bf08      	it	eq
 8005214:	f043 0301 	orreq.w	r3, r3, #1
 8005218:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800521c:	428a      	cmp	r2, r1
 800521e:	bf08      	it	eq
 8005220:	f043 0301 	orreq.w	r3, r3, #1
 8005224:	3130      	adds	r1, #48	; 0x30
 8005226:	4282      	cmp	r2, r0
 8005228:	bf08      	it	eq
 800522a:	f043 0301 	orreq.w	r3, r3, #1
 800522e:	3030      	adds	r0, #48	; 0x30
 8005230:	428a      	cmp	r2, r1
 8005232:	bf08      	it	eq
 8005234:	f043 0301 	orreq.w	r3, r3, #1
 8005238:	3130      	adds	r1, #48	; 0x30
 800523a:	4282      	cmp	r2, r0
 800523c:	bf08      	it	eq
 800523e:	f043 0301 	orreq.w	r3, r3, #1
 8005242:	3030      	adds	r0, #48	; 0x30
 8005244:	428a      	cmp	r2, r1
 8005246:	bf08      	it	eq
 8005248:	f043 0301 	orreq.w	r3, r3, #1
 800524c:	3130      	adds	r1, #48	; 0x30
 800524e:	4282      	cmp	r2, r0
 8005250:	bf08      	it	eq
 8005252:	f043 0301 	orreq.w	r3, r3, #1
 8005256:	3030      	adds	r0, #48	; 0x30
 8005258:	428a      	cmp	r2, r1
 800525a:	bf08      	it	eq
 800525c:	f043 0301 	orreq.w	r3, r3, #1
 8005260:	4934      	ldr	r1, [pc, #208]	; (8005334 <HAL_DMA_Abort+0x420>)
 8005262:	4282      	cmp	r2, r0
 8005264:	bf08      	it	eq
 8005266:	f043 0301 	orreq.w	r3, r3, #1
 800526a:	4833      	ldr	r0, [pc, #204]	; (8005338 <HAL_DMA_Abort+0x424>)
 800526c:	428a      	cmp	r2, r1
 800526e:	bf08      	it	eq
 8005270:	f043 0301 	orreq.w	r3, r3, #1
 8005274:	3128      	adds	r1, #40	; 0x28
 8005276:	4282      	cmp	r2, r0
 8005278:	bf08      	it	eq
 800527a:	f043 0301 	orreq.w	r3, r3, #1
 800527e:	3028      	adds	r0, #40	; 0x28
 8005280:	428a      	cmp	r2, r1
 8005282:	bf08      	it	eq
 8005284:	f043 0301 	orreq.w	r3, r3, #1
 8005288:	3128      	adds	r1, #40	; 0x28
 800528a:	4282      	cmp	r2, r0
 800528c:	bf08      	it	eq
 800528e:	f043 0301 	orreq.w	r3, r3, #1
 8005292:	3028      	adds	r0, #40	; 0x28
 8005294:	428a      	cmp	r2, r1
 8005296:	bf08      	it	eq
 8005298:	f043 0301 	orreq.w	r3, r3, #1
 800529c:	3128      	adds	r1, #40	; 0x28
 800529e:	4282      	cmp	r2, r0
 80052a0:	bf08      	it	eq
 80052a2:	f043 0301 	orreq.w	r3, r3, #1
 80052a6:	428a      	cmp	r2, r1
 80052a8:	bf08      	it	eq
 80052aa:	f043 0301 	orreq.w	r3, r3, #1
 80052ae:	b913      	cbnz	r3, 80052b6 <HAL_DMA_Abort+0x3a2>
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_DMA_Abort+0x428>)
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d10b      	bne.n	80052ce <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b6:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 80052ba:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80052bc:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80052be:	b133      	cbz	r3, 80052ce <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c8:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 80052cc:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80052ce:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80052d0:	2201      	movs	r2, #1
  return HAL_OK;
 80052d2:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80052d4:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80052d8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052de:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80052e0:	2300      	movs	r3, #0
    return HAL_ERROR;
 80052e2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e4:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80052e6:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ec:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80052ee:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80052f0:	2300      	movs	r3, #0
        return HAL_ERROR;
 80052f2:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f4:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80052f6:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80052fa:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005300:	2001      	movs	r0, #1
}
 8005302:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005304:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8005306:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005308:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800530a:	f002 021f 	and.w	r2, r2, #31
 800530e:	4093      	lsls	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
 8005312:	e757      	b.n	80051c4 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	f023 030e 	bic.w	r3, r3, #14
 800531a:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800531c:	6832      	ldr	r2, [r6, #0]
 800531e:	4615      	mov	r5, r2
 8005320:	e661      	b.n	8004fe6 <HAL_DMA_Abort+0xd2>
 8005322:	bf00      	nop
 8005324:	40020010 	.word	0x40020010
 8005328:	40020028 	.word	0x40020028
 800532c:	40020040 	.word	0x40020040
 8005330:	400204b8 	.word	0x400204b8
 8005334:	58025408 	.word	0x58025408
 8005338:	5802541c 	.word	0x5802541c
 800533c:	58025494 	.word	0x58025494

08005340 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005340:	2800      	cmp	r0, #0
 8005342:	d065      	beq.n	8005410 <HAL_DMA_Abort_IT+0xd0>
{
 8005344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005348:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800534c:	4603      	mov	r3, r0
 800534e:	2a02      	cmp	r2, #2
 8005350:	d159      	bne.n	8005406 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005352:	6801      	ldr	r1, [r0, #0]
 8005354:	4883      	ldr	r0, [pc, #524]	; (8005564 <HAL_DMA_Abort_IT+0x224>)
 8005356:	4281      	cmp	r1, r0
 8005358:	d04b      	beq.n	80053f2 <HAL_DMA_Abort_IT+0xb2>
 800535a:	4c83      	ldr	r4, [pc, #524]	; (8005568 <HAL_DMA_Abort_IT+0x228>)
 800535c:	42a1      	cmp	r1, r4
 800535e:	d048      	beq.n	80053f2 <HAL_DMA_Abort_IT+0xb2>
 8005360:	f8df a228 	ldr.w	sl, [pc, #552]	; 800558c <HAL_DMA_Abort_IT+0x24c>
 8005364:	f8df b214 	ldr.w	fp, [pc, #532]	; 800557c <HAL_DMA_Abort_IT+0x23c>
 8005368:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8005590 <HAL_DMA_Abort_IT+0x250>
 800536c:	4559      	cmp	r1, fp
 800536e:	bf18      	it	ne
 8005370:	4551      	cmpne	r1, sl
 8005372:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8005594 <HAL_DMA_Abort_IT+0x254>
 8005376:	f8df e220 	ldr.w	lr, [pc, #544]	; 8005598 <HAL_DMA_Abort_IT+0x258>
 800537a:	bf0c      	ite	eq
 800537c:	2201      	moveq	r2, #1
 800537e:	2200      	movne	r2, #0
 8005380:	f8df c218 	ldr.w	ip, [pc, #536]	; 800559c <HAL_DMA_Abort_IT+0x25c>
 8005384:	4549      	cmp	r1, r9
 8005386:	bf08      	it	eq
 8005388:	f042 0201 	orreq.w	r2, r2, #1
 800538c:	4d77      	ldr	r5, [pc, #476]	; (800556c <HAL_DMA_Abort_IT+0x22c>)
 800538e:	4f78      	ldr	r7, [pc, #480]	; (8005570 <HAL_DMA_Abort_IT+0x230>)
 8005390:	4541      	cmp	r1, r8
 8005392:	bf08      	it	eq
 8005394:	f042 0201 	orreq.w	r2, r2, #1
 8005398:	4e76      	ldr	r6, [pc, #472]	; (8005574 <HAL_DMA_Abort_IT+0x234>)
 800539a:	4571      	cmp	r1, lr
 800539c:	bf08      	it	eq
 800539e:	f042 0201 	orreq.w	r2, r2, #1
 80053a2:	4561      	cmp	r1, ip
 80053a4:	bf08      	it	eq
 80053a6:	f042 0201 	orreq.w	r2, r2, #1
 80053aa:	42a9      	cmp	r1, r5
 80053ac:	bf08      	it	eq
 80053ae:	f042 0201 	orreq.w	r2, r2, #1
 80053b2:	3518      	adds	r5, #24
 80053b4:	42a9      	cmp	r1, r5
 80053b6:	bf08      	it	eq
 80053b8:	f042 0201 	orreq.w	r2, r2, #1
 80053bc:	3518      	adds	r5, #24
 80053be:	42a9      	cmp	r1, r5
 80053c0:	bf08      	it	eq
 80053c2:	f042 0201 	orreq.w	r2, r2, #1
 80053c6:	3518      	adds	r5, #24
 80053c8:	42a9      	cmp	r1, r5
 80053ca:	bf08      	it	eq
 80053cc:	f042 0201 	orreq.w	r2, r2, #1
 80053d0:	3548      	adds	r5, #72	; 0x48
 80053d2:	42b9      	cmp	r1, r7
 80053d4:	bf08      	it	eq
 80053d6:	f042 0201 	orreq.w	r2, r2, #1
 80053da:	42b1      	cmp	r1, r6
 80053dc:	bf08      	it	eq
 80053de:	f042 0201 	orreq.w	r2, r2, #1
 80053e2:	42a9      	cmp	r1, r5
 80053e4:	bf08      	it	eq
 80053e6:	f042 0201 	orreq.w	r2, r2, #1
 80053ea:	b912      	cbnz	r2, 80053f2 <HAL_DMA_Abort_IT+0xb2>
 80053ec:	4a62      	ldr	r2, [pc, #392]	; (8005578 <HAL_DMA_Abort_IT+0x238>)
 80053ee:	4291      	cmp	r1, r2
 80053f0:	d110      	bne.n	8005414 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80053f2:	2204      	movs	r2, #4
  return HAL_OK;
 80053f4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80053fa:	680b      	ldr	r3, [r1, #0]
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	600b      	str	r3, [r1, #0]
}
 8005402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005406:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005408:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800540c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8005410:	2001      	movs	r0, #1
}
 8005412:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005414:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005416:	4c54      	ldr	r4, [pc, #336]	; (8005568 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005418:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800541c:	4857      	ldr	r0, [pc, #348]	; (800557c <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800541e:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	680a      	ldr	r2, [r1, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800542a:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <HAL_DMA_Abort_IT+0x224>)
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	42a1      	cmp	r1, r4
 8005430:	bf18      	it	ne
 8005432:	4291      	cmpne	r1, r2
 8005434:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8005438:	bf0c      	ite	eq
 800543a:	2201      	moveq	r2, #1
 800543c:	2200      	movne	r2, #0
 800543e:	4281      	cmp	r1, r0
 8005440:	bf08      	it	eq
 8005442:	f042 0201 	orreq.w	r2, r2, #1
 8005446:	3030      	adds	r0, #48	; 0x30
 8005448:	42a1      	cmp	r1, r4
 800544a:	bf08      	it	eq
 800544c:	f042 0201 	orreq.w	r2, r2, #1
 8005450:	3430      	adds	r4, #48	; 0x30
 8005452:	4281      	cmp	r1, r0
 8005454:	bf08      	it	eq
 8005456:	f042 0201 	orreq.w	r2, r2, #1
 800545a:	3030      	adds	r0, #48	; 0x30
 800545c:	42a1      	cmp	r1, r4
 800545e:	bf08      	it	eq
 8005460:	f042 0201 	orreq.w	r2, r2, #1
 8005464:	3430      	adds	r4, #48	; 0x30
 8005466:	4281      	cmp	r1, r0
 8005468:	bf08      	it	eq
 800546a:	f042 0201 	orreq.w	r2, r2, #1
 800546e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005472:	42a1      	cmp	r1, r4
 8005474:	bf08      	it	eq
 8005476:	f042 0201 	orreq.w	r2, r2, #1
 800547a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800547e:	4281      	cmp	r1, r0
 8005480:	bf08      	it	eq
 8005482:	f042 0201 	orreq.w	r2, r2, #1
 8005486:	3030      	adds	r0, #48	; 0x30
 8005488:	42a1      	cmp	r1, r4
 800548a:	bf08      	it	eq
 800548c:	f042 0201 	orreq.w	r2, r2, #1
 8005490:	3430      	adds	r4, #48	; 0x30
 8005492:	4281      	cmp	r1, r0
 8005494:	bf08      	it	eq
 8005496:	f042 0201 	orreq.w	r2, r2, #1
 800549a:	3030      	adds	r0, #48	; 0x30
 800549c:	42a1      	cmp	r1, r4
 800549e:	bf08      	it	eq
 80054a0:	f042 0201 	orreq.w	r2, r2, #1
 80054a4:	3430      	adds	r4, #48	; 0x30
 80054a6:	4281      	cmp	r1, r0
 80054a8:	bf08      	it	eq
 80054aa:	f042 0201 	orreq.w	r2, r2, #1
 80054ae:	3030      	adds	r0, #48	; 0x30
 80054b0:	42a1      	cmp	r1, r4
 80054b2:	bf08      	it	eq
 80054b4:	f042 0201 	orreq.w	r2, r2, #1
 80054b8:	3430      	adds	r4, #48	; 0x30
 80054ba:	4281      	cmp	r1, r0
 80054bc:	bf08      	it	eq
 80054be:	f042 0201 	orreq.w	r2, r2, #1
 80054c2:	482f      	ldr	r0, [pc, #188]	; (8005580 <HAL_DMA_Abort_IT+0x240>)
 80054c4:	42a1      	cmp	r1, r4
 80054c6:	bf08      	it	eq
 80054c8:	f042 0201 	orreq.w	r2, r2, #1
 80054cc:	4c2d      	ldr	r4, [pc, #180]	; (8005584 <HAL_DMA_Abort_IT+0x244>)
 80054ce:	4281      	cmp	r1, r0
 80054d0:	bf08      	it	eq
 80054d2:	f042 0201 	orreq.w	r2, r2, #1
 80054d6:	3028      	adds	r0, #40	; 0x28
 80054d8:	42a1      	cmp	r1, r4
 80054da:	bf08      	it	eq
 80054dc:	f042 0201 	orreq.w	r2, r2, #1
 80054e0:	3428      	adds	r4, #40	; 0x28
 80054e2:	4281      	cmp	r1, r0
 80054e4:	bf08      	it	eq
 80054e6:	f042 0201 	orreq.w	r2, r2, #1
 80054ea:	3028      	adds	r0, #40	; 0x28
 80054ec:	42a1      	cmp	r1, r4
 80054ee:	bf08      	it	eq
 80054f0:	f042 0201 	orreq.w	r2, r2, #1
 80054f4:	3428      	adds	r4, #40	; 0x28
 80054f6:	4281      	cmp	r1, r0
 80054f8:	bf08      	it	eq
 80054fa:	f042 0201 	orreq.w	r2, r2, #1
 80054fe:	3028      	adds	r0, #40	; 0x28
 8005500:	42a1      	cmp	r1, r4
 8005502:	bf08      	it	eq
 8005504:	f042 0201 	orreq.w	r2, r2, #1
 8005508:	4281      	cmp	r1, r0
 800550a:	bf08      	it	eq
 800550c:	f042 0201 	orreq.w	r2, r2, #1
 8005510:	b912      	cbnz	r2, 8005518 <HAL_DMA_Abort_IT+0x1d8>
 8005512:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_DMA_Abort_IT+0x248>)
 8005514:	4291      	cmp	r1, r2
 8005516:	d117      	bne.n	8005548 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005518:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800551a:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800551c:	6801      	ldr	r1, [r0, #0]
 800551e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005522:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005524:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005528:	f001 011f 	and.w	r1, r1, #31
 800552c:	408a      	lsls	r2, r1
 800552e:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005530:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8005534:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005536:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005538:	b132      	cbz	r2, 8005548 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800553a:	6811      	ldr	r1, [r2, #0]
 800553c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005540:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005542:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8005546:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005548:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800554a:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 800554c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800554e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005552:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005556:	b11a      	cbz	r2, 8005560 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8005558:	4618      	mov	r0, r3
 800555a:	4790      	blx	r2
  return HAL_OK;
 800555c:	4620      	mov	r0, r4
 800555e:	e755      	b.n	800540c <HAL_DMA_Abort_IT+0xcc>
 8005560:	4610      	mov	r0, r2
 8005562:	e753      	b.n	800540c <HAL_DMA_Abort_IT+0xcc>
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020410 	.word	0x40020410
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204b8 	.word	0x400204b8
 800557c:	40020040 	.word	0x40020040
 8005580:	58025408 	.word	0x58025408
 8005584:	5802541c 	.word	0x5802541c
 8005588:	58025494 	.word	0x58025494
 800558c:	40020058 	.word	0x40020058
 8005590:	40020070 	.word	0x40020070
 8005594:	40020088 	.word	0x40020088
 8005598:	400200a0 	.word	0x400200a0
 800559c:	400200b8 	.word	0x400200b8

080055a0 <HAL_DMA_IRQHandler>:
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80055a2:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80055a4:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <HAL_DMA_IRQHandler+0x270>)
{
 80055a6:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80055aa:	681f      	ldr	r7, [r3, #0]
{
 80055ac:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80055ae:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	4a98      	ldr	r2, [pc, #608]	; (8005814 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 80055b4:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055b6:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80055b8:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055ba:	d048      	beq.n	800564e <HAL_DMA_IRQHandler+0xae>
 80055bc:	3218      	adds	r2, #24
 80055be:	4293      	cmp	r3, r2
 80055c0:	d045      	beq.n	800564e <HAL_DMA_IRQHandler+0xae>
 80055c2:	3218      	adds	r2, #24
 80055c4:	4894      	ldr	r0, [pc, #592]	; (8005818 <HAL_DMA_IRQHandler+0x278>)
 80055c6:	4283      	cmp	r3, r0
 80055c8:	bf18      	it	ne
 80055ca:	4293      	cmpne	r3, r2
 80055cc:	f100 0018 	add.w	r0, r0, #24
 80055d0:	bf0c      	ite	eq
 80055d2:	2201      	moveq	r2, #1
 80055d4:	2200      	movne	r2, #0
 80055d6:	4283      	cmp	r3, r0
 80055d8:	bf08      	it	eq
 80055da:	f042 0201 	orreq.w	r2, r2, #1
 80055de:	3018      	adds	r0, #24
 80055e0:	4283      	cmp	r3, r0
 80055e2:	bf08      	it	eq
 80055e4:	f042 0201 	orreq.w	r2, r2, #1
 80055e8:	3018      	adds	r0, #24
 80055ea:	4283      	cmp	r3, r0
 80055ec:	bf08      	it	eq
 80055ee:	f042 0201 	orreq.w	r2, r2, #1
 80055f2:	3018      	adds	r0, #24
 80055f4:	4283      	cmp	r3, r0
 80055f6:	bf08      	it	eq
 80055f8:	f042 0201 	orreq.w	r2, r2, #1
 80055fc:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005600:	4283      	cmp	r3, r0
 8005602:	bf08      	it	eq
 8005604:	f042 0201 	orreq.w	r2, r2, #1
 8005608:	3018      	adds	r0, #24
 800560a:	4283      	cmp	r3, r0
 800560c:	bf08      	it	eq
 800560e:	f042 0201 	orreq.w	r2, r2, #1
 8005612:	3018      	adds	r0, #24
 8005614:	4283      	cmp	r3, r0
 8005616:	bf08      	it	eq
 8005618:	f042 0201 	orreq.w	r2, r2, #1
 800561c:	3018      	adds	r0, #24
 800561e:	4283      	cmp	r3, r0
 8005620:	bf08      	it	eq
 8005622:	f042 0201 	orreq.w	r2, r2, #1
 8005626:	3018      	adds	r0, #24
 8005628:	4283      	cmp	r3, r0
 800562a:	bf08      	it	eq
 800562c:	f042 0201 	orreq.w	r2, r2, #1
 8005630:	3018      	adds	r0, #24
 8005632:	4283      	cmp	r3, r0
 8005634:	bf08      	it	eq
 8005636:	f042 0201 	orreq.w	r2, r2, #1
 800563a:	3018      	adds	r0, #24
 800563c:	4283      	cmp	r3, r0
 800563e:	bf08      	it	eq
 8005640:	f042 0201 	orreq.w	r2, r2, #1
 8005644:	b91a      	cbnz	r2, 800564e <HAL_DMA_IRQHandler+0xae>
 8005646:	4a75      	ldr	r2, [pc, #468]	; (800581c <HAL_DMA_IRQHandler+0x27c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	f040 8294 	bne.w	8005b76 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800564e:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 8005652:	2208      	movs	r2, #8
 8005654:	f00e 011f 	and.w	r1, lr, #31
 8005658:	408a      	lsls	r2, r1
 800565a:	422a      	tst	r2, r5
 800565c:	f040 8193 	bne.w	8005986 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005660:	fa25 f201 	lsr.w	r2, r5, r1
 8005664:	07d2      	lsls	r2, r2, #31
 8005666:	d50e      	bpl.n	8005686 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	0612      	lsls	r2, r2, #24
 800566c:	f140 824d 	bpl.w	8005b0a <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005670:	2301      	movs	r3, #1
 8005672:	408b      	lsls	r3, r1
 8005674:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005676:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005678:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800567c:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005680:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005684:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005686:	f04f 0c04 	mov.w	ip, #4
 800568a:	fa0c fc01 	lsl.w	ip, ip, r1
 800568e:	ea1c 0f05 	tst.w	ip, r5
 8005692:	d05f      	beq.n	8005754 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005694:	6822      	ldr	r2, [r4, #0]
 8005696:	485f      	ldr	r0, [pc, #380]	; (8005814 <HAL_DMA_IRQHandler+0x274>)
 8005698:	4b61      	ldr	r3, [pc, #388]	; (8005820 <HAL_DMA_IRQHandler+0x280>)
 800569a:	429a      	cmp	r2, r3
 800569c:	bf18      	it	ne
 800569e:	4282      	cmpne	r2, r0
 80056a0:	f103 0318 	add.w	r3, r3, #24
 80056a4:	bf0c      	ite	eq
 80056a6:	2001      	moveq	r0, #1
 80056a8:	2000      	movne	r0, #0
 80056aa:	429a      	cmp	r2, r3
 80056ac:	bf08      	it	eq
 80056ae:	f040 0001 	orreq.w	r0, r0, #1
 80056b2:	3318      	adds	r3, #24
 80056b4:	429a      	cmp	r2, r3
 80056b6:	bf08      	it	eq
 80056b8:	f040 0001 	orreq.w	r0, r0, #1
 80056bc:	3318      	adds	r3, #24
 80056be:	429a      	cmp	r2, r3
 80056c0:	bf08      	it	eq
 80056c2:	f040 0001 	orreq.w	r0, r0, #1
 80056c6:	3318      	adds	r3, #24
 80056c8:	429a      	cmp	r2, r3
 80056ca:	bf08      	it	eq
 80056cc:	f040 0001 	orreq.w	r0, r0, #1
 80056d0:	3318      	adds	r3, #24
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bf08      	it	eq
 80056d6:	f040 0001 	orreq.w	r0, r0, #1
 80056da:	3318      	adds	r3, #24
 80056dc:	429a      	cmp	r2, r3
 80056de:	bf08      	it	eq
 80056e0:	f040 0001 	orreq.w	r0, r0, #1
 80056e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf08      	it	eq
 80056ec:	f040 0001 	orreq.w	r0, r0, #1
 80056f0:	3318      	adds	r3, #24
 80056f2:	429a      	cmp	r2, r3
 80056f4:	bf08      	it	eq
 80056f6:	f040 0001 	orreq.w	r0, r0, #1
 80056fa:	3318      	adds	r3, #24
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf08      	it	eq
 8005700:	f040 0001 	orreq.w	r0, r0, #1
 8005704:	3318      	adds	r3, #24
 8005706:	429a      	cmp	r2, r3
 8005708:	bf08      	it	eq
 800570a:	f040 0001 	orreq.w	r0, r0, #1
 800570e:	3318      	adds	r3, #24
 8005710:	429a      	cmp	r2, r3
 8005712:	bf08      	it	eq
 8005714:	f040 0001 	orreq.w	r0, r0, #1
 8005718:	3318      	adds	r3, #24
 800571a:	429a      	cmp	r2, r3
 800571c:	bf08      	it	eq
 800571e:	f040 0001 	orreq.w	r0, r0, #1
 8005722:	3318      	adds	r3, #24
 8005724:	429a      	cmp	r2, r3
 8005726:	bf08      	it	eq
 8005728:	f040 0001 	orreq.w	r0, r0, #1
 800572c:	4613      	mov	r3, r2
 800572e:	b918      	cbnz	r0, 8005738 <HAL_DMA_IRQHandler+0x198>
 8005730:	483a      	ldr	r0, [pc, #232]	; (800581c <HAL_DMA_IRQHandler+0x27c>)
 8005732:	4282      	cmp	r2, r0
 8005734:	f040 825a 	bne.w	8005bec <HAL_DMA_IRQHandler+0x64c>
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	0790      	lsls	r0, r2, #30
 800573c:	f140 81f1 	bpl.w	8005b22 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005740:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005744:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005746:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800574a:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800574e:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005752:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005754:	f04f 0c10 	mov.w	ip, #16
 8005758:	fa0c fc01 	lsl.w	ip, ip, r1
 800575c:	ea1c 0f05 	tst.w	ip, r5
 8005760:	d075      	beq.n	800584e <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	482b      	ldr	r0, [pc, #172]	; (8005814 <HAL_DMA_IRQHandler+0x274>)
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <HAL_DMA_IRQHandler+0x280>)
 8005768:	429a      	cmp	r2, r3
 800576a:	bf18      	it	ne
 800576c:	4282      	cmpne	r2, r0
 800576e:	f103 0318 	add.w	r3, r3, #24
 8005772:	bf0c      	ite	eq
 8005774:	2001      	moveq	r0, #1
 8005776:	2000      	movne	r0, #0
 8005778:	429a      	cmp	r2, r3
 800577a:	bf08      	it	eq
 800577c:	f040 0001 	orreq.w	r0, r0, #1
 8005780:	3318      	adds	r3, #24
 8005782:	429a      	cmp	r2, r3
 8005784:	bf08      	it	eq
 8005786:	f040 0001 	orreq.w	r0, r0, #1
 800578a:	3318      	adds	r3, #24
 800578c:	429a      	cmp	r2, r3
 800578e:	bf08      	it	eq
 8005790:	f040 0001 	orreq.w	r0, r0, #1
 8005794:	3318      	adds	r3, #24
 8005796:	429a      	cmp	r2, r3
 8005798:	bf08      	it	eq
 800579a:	f040 0001 	orreq.w	r0, r0, #1
 800579e:	3318      	adds	r3, #24
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bf08      	it	eq
 80057a4:	f040 0001 	orreq.w	r0, r0, #1
 80057a8:	3318      	adds	r3, #24
 80057aa:	429a      	cmp	r2, r3
 80057ac:	bf08      	it	eq
 80057ae:	f040 0001 	orreq.w	r0, r0, #1
 80057b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf08      	it	eq
 80057ba:	f040 0001 	orreq.w	r0, r0, #1
 80057be:	3318      	adds	r3, #24
 80057c0:	429a      	cmp	r2, r3
 80057c2:	bf08      	it	eq
 80057c4:	f040 0001 	orreq.w	r0, r0, #1
 80057c8:	3318      	adds	r3, #24
 80057ca:	429a      	cmp	r2, r3
 80057cc:	bf08      	it	eq
 80057ce:	f040 0001 	orreq.w	r0, r0, #1
 80057d2:	3318      	adds	r3, #24
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bf08      	it	eq
 80057d8:	f040 0001 	orreq.w	r0, r0, #1
 80057dc:	3318      	adds	r3, #24
 80057de:	429a      	cmp	r2, r3
 80057e0:	bf08      	it	eq
 80057e2:	f040 0001 	orreq.w	r0, r0, #1
 80057e6:	3318      	adds	r3, #24
 80057e8:	429a      	cmp	r2, r3
 80057ea:	bf08      	it	eq
 80057ec:	f040 0001 	orreq.w	r0, r0, #1
 80057f0:	3318      	adds	r3, #24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf08      	it	eq
 80057f6:	f040 0001 	orreq.w	r0, r0, #1
 80057fa:	4613      	mov	r3, r2
 80057fc:	b918      	cbnz	r0, 8005806 <HAL_DMA_IRQHandler+0x266>
 80057fe:	4807      	ldr	r0, [pc, #28]	; (800581c <HAL_DMA_IRQHandler+0x27c>)
 8005800:	4282      	cmp	r2, r0
 8005802:	f040 813c 	bne.w	8005a7e <HAL_DMA_IRQHandler+0x4de>
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	0712      	lsls	r2, r2, #28
 800580a:	f140 8177 	bpl.w	8005afc <HAL_DMA_IRQHandler+0x55c>
 800580e:	e009      	b.n	8005824 <HAL_DMA_IRQHandler+0x284>
 8005810:	200008f4 	.word	0x200008f4
 8005814:	40020010 	.word	0x40020010
 8005818:	40020058 	.word	0x40020058
 800581c:	400204b8 	.word	0x400204b8
 8005820:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005824:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	0350      	lsls	r0, r2, #13
 800582e:	f100 8181 	bmi.w	8005b34 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	05d2      	lsls	r2, r2, #23
 8005836:	d403      	bmi.n	8005840 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f022 0208 	bic.w	r2, r2, #8
 800583e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005842:	b10b      	cbz	r3, 8005848 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 8005844:	4620      	mov	r0, r4
 8005846:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005848:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800584a:	f001 011f 	and.w	r1, r1, #31
 800584e:	2320      	movs	r3, #32
 8005850:	fa03 f101 	lsl.w	r1, r3, r1
 8005854:	4229      	tst	r1, r5
 8005856:	d066      	beq.n	8005926 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4a92      	ldr	r2, [pc, #584]	; (8005aa4 <HAL_DMA_IRQHandler+0x504>)
 800585c:	4892      	ldr	r0, [pc, #584]	; (8005aa8 <HAL_DMA_IRQHandler+0x508>)
 800585e:	4283      	cmp	r3, r0
 8005860:	bf18      	it	ne
 8005862:	4293      	cmpne	r3, r2
 8005864:	f100 0018 	add.w	r0, r0, #24
 8005868:	bf0c      	ite	eq
 800586a:	2201      	moveq	r2, #1
 800586c:	2200      	movne	r2, #0
 800586e:	4283      	cmp	r3, r0
 8005870:	bf08      	it	eq
 8005872:	f042 0201 	orreq.w	r2, r2, #1
 8005876:	3018      	adds	r0, #24
 8005878:	4283      	cmp	r3, r0
 800587a:	bf08      	it	eq
 800587c:	f042 0201 	orreq.w	r2, r2, #1
 8005880:	3018      	adds	r0, #24
 8005882:	4283      	cmp	r3, r0
 8005884:	bf08      	it	eq
 8005886:	f042 0201 	orreq.w	r2, r2, #1
 800588a:	3018      	adds	r0, #24
 800588c:	4283      	cmp	r3, r0
 800588e:	bf08      	it	eq
 8005890:	f042 0201 	orreq.w	r2, r2, #1
 8005894:	3018      	adds	r0, #24
 8005896:	4283      	cmp	r3, r0
 8005898:	bf08      	it	eq
 800589a:	f042 0201 	orreq.w	r2, r2, #1
 800589e:	3018      	adds	r0, #24
 80058a0:	4283      	cmp	r3, r0
 80058a2:	bf08      	it	eq
 80058a4:	f042 0201 	orreq.w	r2, r2, #1
 80058a8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80058ac:	4283      	cmp	r3, r0
 80058ae:	bf08      	it	eq
 80058b0:	f042 0201 	orreq.w	r2, r2, #1
 80058b4:	3018      	adds	r0, #24
 80058b6:	4283      	cmp	r3, r0
 80058b8:	bf08      	it	eq
 80058ba:	f042 0201 	orreq.w	r2, r2, #1
 80058be:	3018      	adds	r0, #24
 80058c0:	4283      	cmp	r3, r0
 80058c2:	bf08      	it	eq
 80058c4:	f042 0201 	orreq.w	r2, r2, #1
 80058c8:	3018      	adds	r0, #24
 80058ca:	4283      	cmp	r3, r0
 80058cc:	bf08      	it	eq
 80058ce:	f042 0201 	orreq.w	r2, r2, #1
 80058d2:	3018      	adds	r0, #24
 80058d4:	4283      	cmp	r3, r0
 80058d6:	bf08      	it	eq
 80058d8:	f042 0201 	orreq.w	r2, r2, #1
 80058dc:	3018      	adds	r0, #24
 80058de:	4283      	cmp	r3, r0
 80058e0:	bf08      	it	eq
 80058e2:	f042 0201 	orreq.w	r2, r2, #1
 80058e6:	3018      	adds	r0, #24
 80058e8:	4283      	cmp	r3, r0
 80058ea:	bf08      	it	eq
 80058ec:	f042 0201 	orreq.w	r2, r2, #1
 80058f0:	b91a      	cbnz	r2, 80058fa <HAL_DMA_IRQHandler+0x35a>
 80058f2:	4a6e      	ldr	r2, [pc, #440]	; (8005aac <HAL_DMA_IRQHandler+0x50c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f040 80cf 	bne.w	8005a98 <HAL_DMA_IRQHandler+0x4f8>
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	06dd      	lsls	r5, r3, #27
 80058fe:	d512      	bpl.n	8005926 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005900:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005902:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005906:	2b04      	cmp	r3, #4
 8005908:	f000 80d4 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	0352      	lsls	r2, r2, #13
 8005912:	f140 8118 	bpl.w	8005b46 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	031e      	lsls	r6, r3, #12
 800591a:	f140 8123 	bpl.w	8005b64 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 800591e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005920:	b10b      	cbz	r3, 8005926 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 8005922:	4620      	mov	r0, r4
 8005924:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005926:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80e5 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800592e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005930:	07dd      	lsls	r5, r3, #31
 8005932:	d51f      	bpl.n	8005974 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 8005934:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005936:	2104      	movs	r1, #4
 8005938:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005944:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005946:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005948:	fba2 7207 	umull	r7, r2, r2, r7
 800594c:	0a92      	lsrs	r2, r2, #10
 800594e:	e002      	b.n	8005956 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005950:	680b      	ldr	r3, [r1, #0]
 8005952:	07d8      	lsls	r0, r3, #31
 8005954:	d504      	bpl.n	8005960 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	3301      	adds	r3, #1
 800595a:	4293      	cmp	r3, r2
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	d9f7      	bls.n	8005950 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005964:	bf4c      	ite	mi
 8005966:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005968:	2301      	movpl	r3, #1
 800596a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800596e:	2300      	movs	r3, #0
 8005970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005974:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80be 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 800597c:	4620      	mov	r0, r4
}
 800597e:	b003      	add	sp, #12
 8005980:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005984:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	0752      	lsls	r2, r2, #29
 800598a:	d511      	bpl.n	80059b0 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	f022 0204 	bic.w	r2, r2, #4
 8005992:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005994:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005996:	f003 021f 	and.w	r2, r3, #31
 800599a:	2308      	movs	r3, #8
 800599c:	4093      	lsls	r3, r2
 800599e:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059a2:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059a6:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059aa:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059ae:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059b0:	fa25 f301 	lsr.w	r3, r5, r1
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	f57f ae66 	bpl.w	8005686 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	4839      	ldr	r0, [pc, #228]	; (8005aa4 <HAL_DMA_IRQHandler+0x504>)
 80059be:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <HAL_DMA_IRQHandler+0x508>)
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bf18      	it	ne
 80059c4:	4282      	cmpne	r2, r0
 80059c6:	f103 0318 	add.w	r3, r3, #24
 80059ca:	bf0c      	ite	eq
 80059cc:	2001      	moveq	r0, #1
 80059ce:	2000      	movne	r0, #0
 80059d0:	429a      	cmp	r2, r3
 80059d2:	bf08      	it	eq
 80059d4:	f040 0001 	orreq.w	r0, r0, #1
 80059d8:	3318      	adds	r3, #24
 80059da:	429a      	cmp	r2, r3
 80059dc:	bf08      	it	eq
 80059de:	f040 0001 	orreq.w	r0, r0, #1
 80059e2:	3318      	adds	r3, #24
 80059e4:	429a      	cmp	r2, r3
 80059e6:	bf08      	it	eq
 80059e8:	f040 0001 	orreq.w	r0, r0, #1
 80059ec:	3318      	adds	r3, #24
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf08      	it	eq
 80059f2:	f040 0001 	orreq.w	r0, r0, #1
 80059f6:	3318      	adds	r3, #24
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bf08      	it	eq
 80059fc:	f040 0001 	orreq.w	r0, r0, #1
 8005a00:	3318      	adds	r3, #24
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf08      	it	eq
 8005a06:	f040 0001 	orreq.w	r0, r0, #1
 8005a0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	bf08      	it	eq
 8005a12:	f040 0001 	orreq.w	r0, r0, #1
 8005a16:	3318      	adds	r3, #24
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bf08      	it	eq
 8005a1c:	f040 0001 	orreq.w	r0, r0, #1
 8005a20:	3318      	adds	r3, #24
 8005a22:	429a      	cmp	r2, r3
 8005a24:	bf08      	it	eq
 8005a26:	f040 0001 	orreq.w	r0, r0, #1
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bf08      	it	eq
 8005a30:	f040 0001 	orreq.w	r0, r0, #1
 8005a34:	3318      	adds	r3, #24
 8005a36:	429a      	cmp	r2, r3
 8005a38:	bf08      	it	eq
 8005a3a:	f040 0001 	orreq.w	r0, r0, #1
 8005a3e:	3318      	adds	r3, #24
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf08      	it	eq
 8005a44:	f040 0001 	orreq.w	r0, r0, #1
 8005a48:	3318      	adds	r3, #24
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf08      	it	eq
 8005a4e:	f040 0001 	orreq.w	r0, r0, #1
 8005a52:	4613      	mov	r3, r2
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f47f ae07 	bne.w	8005668 <HAL_DMA_IRQHandler+0xc8>
 8005a5a:	4814      	ldr	r0, [pc, #80]	; (8005aac <HAL_DMA_IRQHandler+0x50c>)
 8005a5c:	4282      	cmp	r2, r0
 8005a5e:	f43f ae03 	beq.w	8005668 <HAL_DMA_IRQHandler+0xc8>
 8005a62:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a64:	2304      	movs	r3, #4
 8005a66:	408b      	lsls	r3, r1
 8005a68:	422b      	tst	r3, r5
 8005a6a:	f040 80bf 	bne.w	8005bec <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a6e:	f04f 0c10 	mov.w	ip, #16
 8005a72:	fa0c fc01 	lsl.w	ip, ip, r1
 8005a76:	ea15 0f0c 	tst.w	r5, ip
 8005a7a:	f43f aee8 	beq.w	800584e <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	075b      	lsls	r3, r3, #29
 8005a82:	f53f aecf 	bmi.w	8005824 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a86:	f00e 0e1f 	and.w	lr, lr, #31
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	fa01 f10e 	lsl.w	r1, r1, lr
 8005a90:	420d      	tst	r5, r1
 8005a92:	f43f af48 	beq.w	8005926 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a96:	4613      	mov	r3, r2
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0798      	lsls	r0, r3, #30
 8005a9c:	f57f af43 	bpl.w	8005926 <HAL_DMA_IRQHandler+0x386>
 8005aa0:	e72e      	b.n	8005900 <HAL_DMA_IRQHandler+0x360>
 8005aa2:	bf00      	nop
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	400204b8 	.word	0x400204b8
 8005ab0:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	6813      	ldr	r3, [r2, #0]
 8005ab8:	f023 0316 	bic.w	r3, r3, #22
 8005abc:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	6953      	ldr	r3, [r2, #20]
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04f      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f023 0308 	bic.w	r3, r3, #8
 8005ad6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ad8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005ada:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005adc:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ade:	f002 021f 	and.w	r2, r2, #31
 8005ae2:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8005ae4:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ae6:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 8005ae8:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005aea:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005aee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f47f af42 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
}
 8005af8:	b003      	add	sp, #12
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005afc:	2220      	movs	r2, #32
 8005afe:	fa02 f101 	lsl.w	r1, r2, r1
 8005b02:	420d      	tst	r5, r1
 8005b04:	f47f aef9 	bne.w	80058fa <HAL_DMA_IRQHandler+0x35a>
 8005b08:	e70d      	b.n	8005926 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b0a:	f04f 0c04 	mov.w	ip, #4
 8005b0e:	fa0c fc01 	lsl.w	ip, ip, r1
 8005b12:	ea15 0f0c 	tst.w	r5, ip
 8005b16:	f43f ae1d 	beq.w	8005754 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	0790      	lsls	r0, r2, #30
 8005b1e:	f53f ae0f 	bmi.w	8005740 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b22:	f04f 0c10 	mov.w	ip, #16
 8005b26:	fa0c fc01 	lsl.w	ip, ip, r1
 8005b2a:	ea15 0f0c 	tst.w	r5, ip
 8005b2e:	f47f ae6a 	bne.w	8005806 <HAL_DMA_IRQHandler+0x266>
 8005b32:	e68c      	b.n	800584e <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	0319      	lsls	r1, r3, #12
 8005b38:	f57f ae82 	bpl.w	8005840 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f47f ae80 	bne.w	8005844 <HAL_DMA_IRQHandler+0x2a4>
 8005b44:	e680      	b.n	8005848 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005b4c:	f47f aee7 	bne.w	800591e <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	f021 0110 	bic.w	r1, r1, #16
 8005b56:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005b58:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8005b5a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005b5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8005b62:	e6dc      	b.n	800591e <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8005b64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f47f aedb 	bne.w	8005922 <HAL_DMA_IRQHandler+0x382>
 8005b6c:	e6db      	b.n	8005926 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ac      	bne.n	8005ace <HAL_DMA_IRQHandler+0x52e>
 8005b74:	e7b0      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b76:	4a9b      	ldr	r2, [pc, #620]	; (8005de4 <HAL_DMA_IRQHandler+0x844>)
 8005b78:	489b      	ldr	r0, [pc, #620]	; (8005de8 <HAL_DMA_IRQHandler+0x848>)
 8005b7a:	4283      	cmp	r3, r0
 8005b7c:	bf18      	it	ne
 8005b7e:	4293      	cmpne	r3, r2
 8005b80:	f100 0014 	add.w	r0, r0, #20
 8005b84:	bf0c      	ite	eq
 8005b86:	2201      	moveq	r2, #1
 8005b88:	2200      	movne	r2, #0
 8005b8a:	4283      	cmp	r3, r0
 8005b8c:	bf08      	it	eq
 8005b8e:	f042 0201 	orreq.w	r2, r2, #1
 8005b92:	3014      	adds	r0, #20
 8005b94:	4283      	cmp	r3, r0
 8005b96:	bf08      	it	eq
 8005b98:	f042 0201 	orreq.w	r2, r2, #1
 8005b9c:	3014      	adds	r0, #20
 8005b9e:	4283      	cmp	r3, r0
 8005ba0:	bf08      	it	eq
 8005ba2:	f042 0201 	orreq.w	r2, r2, #1
 8005ba6:	3014      	adds	r0, #20
 8005ba8:	4283      	cmp	r3, r0
 8005baa:	bf08      	it	eq
 8005bac:	f042 0201 	orreq.w	r2, r2, #1
 8005bb0:	3014      	adds	r0, #20
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	bf08      	it	eq
 8005bb6:	f042 0201 	orreq.w	r2, r2, #1
 8005bba:	b912      	cbnz	r2, 8005bc2 <HAL_DMA_IRQHandler+0x622>
 8005bbc:	4a8b      	ldr	r2, [pc, #556]	; (8005dec <HAL_DMA_IRQHandler+0x84c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d19a      	bne.n	8005af8 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bc2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005bc4:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bc6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bc8:	f000 001f 	and.w	r0, r0, #31
 8005bcc:	4085      	lsls	r5, r0
 8005bce:	420d      	tst	r5, r1
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x664>
 8005bd2:	0757      	lsls	r7, r2, #29
 8005bd4:	d516      	bpl.n	8005c04 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bd6:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005bd8:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bda:	d544      	bpl.n	8005c66 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bdc:	03d2      	lsls	r2, r2, #15
 8005bde:	f100 8099 	bmi.w	8005d14 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005be2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f aec9 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
 8005bea:	e785      	b.n	8005af8 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bec:	f00e 011f 	and.w	r1, lr, #31
 8005bf0:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005bf4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bf6:	fa0c fc01 	lsl.w	ip, ip, r1
 8005bfa:	ea15 0f0c 	tst.w	r5, ip
 8005bfe:	f47f af3e 	bne.w	8005a7e <HAL_DMA_IRQHandler+0x4de>
 8005c02:	e624      	b.n	800584e <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c04:	2502      	movs	r5, #2
 8005c06:	4085      	lsls	r5, r0
 8005c08:	420d      	tst	r5, r1
 8005c0a:	d00d      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x688>
 8005c0c:	0797      	lsls	r7, r2, #30
 8005c0e:	d50b      	bpl.n	8005c28 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c10:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c12:	0416      	lsls	r6, r2, #16
 8005c14:	f140 8083 	bpl.w	8005d1e <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c18:	03d5      	lsls	r5, r2, #15
 8005c1a:	f100 80dd 	bmi.w	8005dd8 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8005c1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f aeab 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
 8005c26:	e767      	b.n	8005af8 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c28:	2508      	movs	r5, #8
 8005c2a:	fa05 f000 	lsl.w	r0, r5, r0
 8005c2e:	4208      	tst	r0, r1
 8005c30:	f43f af62 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x558>
 8005c34:	0711      	lsls	r1, r2, #28
 8005c36:	f57f af5f 	bpl.w	8005af8 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c3a:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3c:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c3e:	f021 010e 	bic.w	r1, r1, #14
 8005c42:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005c44:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8005c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c54:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005c56:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005c5a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f47f ae8c 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
 8005c64:	e748      	b.n	8005af8 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c66:	0693      	lsls	r3, r2, #26
 8005c68:	d454      	bmi.n	8005d14 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	4b60      	ldr	r3, [pc, #384]	; (8005df0 <HAL_DMA_IRQHandler+0x850>)
 8005c6e:	4861      	ldr	r0, [pc, #388]	; (8005df4 <HAL_DMA_IRQHandler+0x854>)
 8005c70:	4961      	ldr	r1, [pc, #388]	; (8005df8 <HAL_DMA_IRQHandler+0x858>)
 8005c72:	4282      	cmp	r2, r0
 8005c74:	bf18      	it	ne
 8005c76:	429a      	cmpne	r2, r3
 8005c78:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	428a      	cmp	r2, r1
 8005c84:	bf08      	it	eq
 8005c86:	f043 0301 	orreq.w	r3, r3, #1
 8005c8a:	3130      	adds	r1, #48	; 0x30
 8005c8c:	4282      	cmp	r2, r0
 8005c8e:	bf08      	it	eq
 8005c90:	f043 0301 	orreq.w	r3, r3, #1
 8005c94:	3030      	adds	r0, #48	; 0x30
 8005c96:	428a      	cmp	r2, r1
 8005c98:	bf08      	it	eq
 8005c9a:	f043 0301 	orreq.w	r3, r3, #1
 8005c9e:	3130      	adds	r1, #48	; 0x30
 8005ca0:	4282      	cmp	r2, r0
 8005ca2:	bf08      	it	eq
 8005ca4:	f043 0301 	orreq.w	r3, r3, #1
 8005ca8:	3030      	adds	r0, #48	; 0x30
 8005caa:	428a      	cmp	r2, r1
 8005cac:	bf08      	it	eq
 8005cae:	f043 0301 	orreq.w	r3, r3, #1
 8005cb2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005cb6:	4282      	cmp	r2, r0
 8005cb8:	bf08      	it	eq
 8005cba:	f043 0301 	orreq.w	r3, r3, #1
 8005cbe:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005cc2:	428a      	cmp	r2, r1
 8005cc4:	bf08      	it	eq
 8005cc6:	f043 0301 	orreq.w	r3, r3, #1
 8005cca:	3130      	adds	r1, #48	; 0x30
 8005ccc:	4282      	cmp	r2, r0
 8005cce:	bf08      	it	eq
 8005cd0:	f043 0301 	orreq.w	r3, r3, #1
 8005cd4:	3030      	adds	r0, #48	; 0x30
 8005cd6:	428a      	cmp	r2, r1
 8005cd8:	bf08      	it	eq
 8005cda:	f043 0301 	orreq.w	r3, r3, #1
 8005cde:	3130      	adds	r1, #48	; 0x30
 8005ce0:	4282      	cmp	r2, r0
 8005ce2:	bf08      	it	eq
 8005ce4:	f043 0301 	orreq.w	r3, r3, #1
 8005ce8:	3030      	adds	r0, #48	; 0x30
 8005cea:	428a      	cmp	r2, r1
 8005cec:	bf08      	it	eq
 8005cee:	f043 0301 	orreq.w	r3, r3, #1
 8005cf2:	3130      	adds	r1, #48	; 0x30
 8005cf4:	4282      	cmp	r2, r0
 8005cf6:	bf08      	it	eq
 8005cf8:	f043 0301 	orreq.w	r3, r3, #1
 8005cfc:	428a      	cmp	r2, r1
 8005cfe:	bf08      	it	eq
 8005d00:	f043 0301 	orreq.w	r3, r3, #1
 8005d04:	b913      	cbnz	r3, 8005d0c <HAL_DMA_IRQHandler+0x76c>
 8005d06:	4b3d      	ldr	r3, [pc, #244]	; (8005dfc <HAL_DMA_IRQHandler+0x85c>)
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d179      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x860>
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	f023 0308 	bic.w	r3, r3, #8
 8005d12:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f ae30 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
 8005d1c:	e6ec      	b.n	8005af8 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d1e:	0690      	lsls	r0, r2, #26
 8005d20:	d45a      	bmi.n	8005dd8 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <HAL_DMA_IRQHandler+0x850>)
 8005d26:	4833      	ldr	r0, [pc, #204]	; (8005df4 <HAL_DMA_IRQHandler+0x854>)
 8005d28:	4933      	ldr	r1, [pc, #204]	; (8005df8 <HAL_DMA_IRQHandler+0x858>)
 8005d2a:	4282      	cmp	r2, r0
 8005d2c:	bf18      	it	ne
 8005d2e:	429a      	cmpne	r2, r3
 8005d30:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	428a      	cmp	r2, r1
 8005d3c:	bf08      	it	eq
 8005d3e:	f043 0301 	orreq.w	r3, r3, #1
 8005d42:	3130      	adds	r1, #48	; 0x30
 8005d44:	4282      	cmp	r2, r0
 8005d46:	bf08      	it	eq
 8005d48:	f043 0301 	orreq.w	r3, r3, #1
 8005d4c:	3030      	adds	r0, #48	; 0x30
 8005d4e:	428a      	cmp	r2, r1
 8005d50:	bf08      	it	eq
 8005d52:	f043 0301 	orreq.w	r3, r3, #1
 8005d56:	3130      	adds	r1, #48	; 0x30
 8005d58:	4282      	cmp	r2, r0
 8005d5a:	bf08      	it	eq
 8005d5c:	f043 0301 	orreq.w	r3, r3, #1
 8005d60:	3030      	adds	r0, #48	; 0x30
 8005d62:	428a      	cmp	r2, r1
 8005d64:	bf08      	it	eq
 8005d66:	f043 0301 	orreq.w	r3, r3, #1
 8005d6a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005d6e:	4282      	cmp	r2, r0
 8005d70:	bf08      	it	eq
 8005d72:	f043 0301 	orreq.w	r3, r3, #1
 8005d76:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005d7a:	428a      	cmp	r2, r1
 8005d7c:	bf08      	it	eq
 8005d7e:	f043 0301 	orreq.w	r3, r3, #1
 8005d82:	3130      	adds	r1, #48	; 0x30
 8005d84:	4282      	cmp	r2, r0
 8005d86:	bf08      	it	eq
 8005d88:	f043 0301 	orreq.w	r3, r3, #1
 8005d8c:	3030      	adds	r0, #48	; 0x30
 8005d8e:	428a      	cmp	r2, r1
 8005d90:	bf08      	it	eq
 8005d92:	f043 0301 	orreq.w	r3, r3, #1
 8005d96:	3130      	adds	r1, #48	; 0x30
 8005d98:	4282      	cmp	r2, r0
 8005d9a:	bf08      	it	eq
 8005d9c:	f043 0301 	orreq.w	r3, r3, #1
 8005da0:	3030      	adds	r0, #48	; 0x30
 8005da2:	428a      	cmp	r2, r1
 8005da4:	bf08      	it	eq
 8005da6:	f043 0301 	orreq.w	r3, r3, #1
 8005daa:	3130      	adds	r1, #48	; 0x30
 8005dac:	4282      	cmp	r2, r0
 8005dae:	bf08      	it	eq
 8005db0:	f043 0301 	orreq.w	r3, r3, #1
 8005db4:	428a      	cmp	r2, r1
 8005db6:	bf08      	it	eq
 8005db8:	f043 0301 	orreq.w	r3, r3, #1
 8005dbc:	b913      	cbnz	r3, 8005dc4 <HAL_DMA_IRQHandler+0x824>
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <HAL_DMA_IRQHandler+0x85c>)
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d122      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x86a>
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	f023 0314 	bic.w	r3, r3, #20
 8005dca:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8005dce:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8005dd0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005dd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005dd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f47f adce 	bne.w	800597c <HAL_DMA_IRQHandler+0x3dc>
 8005de0:	e68a      	b.n	8005af8 <HAL_DMA_IRQHandler+0x558>
 8005de2:	bf00      	nop
 8005de4:	58025408 	.word	0x58025408
 8005de8:	5802541c 	.word	0x5802541c
 8005dec:	58025494 	.word	0x58025494
 8005df0:	40020010 	.word	0x40020010
 8005df4:	40020028 	.word	0x40020028
 8005df8:	40020040 	.word	0x40020040
 8005dfc:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e00:	6813      	ldr	r3, [r2, #0]
 8005e02:	f023 0304 	bic.w	r3, r3, #4
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e784      	b.n	8005d14 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e0a:	6813      	ldr	r3, [r2, #0]
 8005e0c:	f023 030a 	bic.w	r3, r3, #10
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e7db      	b.n	8005dcc <HAL_DMA_IRQHandler+0x82c>

08005e14 <HAL_DMA_GetState>:
  return hdma->State;
 8005e14:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop

08005e1c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005e1c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005e1e:	4770      	bx	lr

08005e20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e20:	680b      	ldr	r3, [r1, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8119 	beq.w	800605a <HAL_GPIO_Init+0x23a>
 8005e28:	f04f 0c00 	mov.w	ip, #0
{
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005e30:	4662      	mov	r2, ip
{
 8005e32:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e34:	4d94      	ldr	r5, [pc, #592]	; (8006088 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e36:	4f95      	ldr	r7, [pc, #596]	; (800608c <HAL_GPIO_Init+0x26c>)
 8005e38:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80060a4 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e3c:	f04f 0901 	mov.w	r9, #1
 8005e40:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8005e44:	ea19 0e03 	ands.w	lr, r9, r3
 8005e48:	f000 80c1 	beq.w	8005fce <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e4c:	684b      	ldr	r3, [r1, #4]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	1e5c      	subs	r4, r3, #1
 8005e54:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e56:	f04f 0403 	mov.w	r4, #3
 8005e5a:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e5e:	f240 80c0 	bls.w	8005fe2 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e62:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d026      	beq.n	8005eb6 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8005e68:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e6a:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e6e:	688b      	ldr	r3, [r1, #8]
 8005e70:	fa03 f30c 	lsl.w	r3, r3, ip
 8005e74:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8005e78:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e7a:	684b      	ldr	r3, [r1, #4]
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d118      	bne.n	8005eb6 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8005e84:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e88:	f002 0b07 	and.w	fp, r2, #7
 8005e8c:	230f      	movs	r3, #15
 8005e8e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8005e92:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005e96:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e9a:	fa03 f30b 	lsl.w	r3, r3, fp
 8005e9e:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	fa03 f30b 	lsl.w	r3, r3, fp
 8005ea8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005eac:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eb0:	684b      	ldr	r3, [r1, #4]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8005eb6:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eba:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ebe:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ec2:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8005ec4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec6:	684b      	ldr	r3, [r1, #4]
 8005ec8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005ecc:	d07e      	beq.n	8005fcc <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ece:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005ed2:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ed6:	f002 0903 	and.w	r9, r2, #3
 8005eda:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ede:	f043 0302 	orr.w	r3, r3, #2
 8005ee2:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ee6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eea:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eec:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005ef0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005ef4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ef8:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005f04:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f06:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f0a:	d02b      	beq.n	8005f64 <HAL_GPIO_Init+0x144>
 8005f0c:	4540      	cmp	r0, r8
 8005f0e:	f000 8088 	beq.w	8006022 <HAL_GPIO_Init+0x202>
 8005f12:	4e5f      	ldr	r6, [pc, #380]	; (8006090 <HAL_GPIO_Init+0x270>)
 8005f14:	42b0      	cmp	r0, r6
 8005f16:	f000 808b 	beq.w	8006030 <HAL_GPIO_Init+0x210>
 8005f1a:	4e5e      	ldr	r6, [pc, #376]	; (8006094 <HAL_GPIO_Init+0x274>)
 8005f1c:	42b0      	cmp	r0, r6
 8005f1e:	d079      	beq.n	8006014 <HAL_GPIO_Init+0x1f4>
 8005f20:	4e5d      	ldr	r6, [pc, #372]	; (8006098 <HAL_GPIO_Init+0x278>)
 8005f22:	42b0      	cmp	r0, r6
 8005f24:	f000 8092 	beq.w	800604c <HAL_GPIO_Init+0x22c>
 8005f28:	4e5c      	ldr	r6, [pc, #368]	; (800609c <HAL_GPIO_Init+0x27c>)
 8005f2a:	42b0      	cmp	r0, r6
 8005f2c:	f000 8096 	beq.w	800605c <HAL_GPIO_Init+0x23c>
 8005f30:	4e5b      	ldr	r6, [pc, #364]	; (80060a0 <HAL_GPIO_Init+0x280>)
 8005f32:	42b0      	cmp	r0, r6
 8005f34:	f000 8083 	beq.w	800603e <HAL_GPIO_Init+0x21e>
 8005f38:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80060a8 <HAL_GPIO_Init+0x288>
 8005f3c:	4550      	cmp	r0, sl
 8005f3e:	f000 8094 	beq.w	800606a <HAL_GPIO_Init+0x24a>
 8005f42:	f8df a168 	ldr.w	sl, [pc, #360]	; 80060ac <HAL_GPIO_Init+0x28c>
 8005f46:	4550      	cmp	r0, sl
 8005f48:	f000 8096 	beq.w	8006078 <HAL_GPIO_Init+0x258>
 8005f4c:	f8df a160 	ldr.w	sl, [pc, #352]	; 80060b0 <HAL_GPIO_Init+0x290>
 8005f50:	4550      	cmp	r0, sl
 8005f52:	bf0c      	ite	eq
 8005f54:	f04f 0a09 	moveq.w	sl, #9
 8005f58:	f04f 0a0a 	movne.w	sl, #10
 8005f5c:	fa0a f909 	lsl.w	r9, sl, r9
 8005f60:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f64:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f6a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8005f6c:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8005f70:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005f72:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f76:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8005f78:	bf54      	ite	pl
 8005f7a:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005f7c:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8005f80:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f84:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8005f86:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005f8a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f8e:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8005f90:	bf54      	ite	pl
 8005f92:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005f94:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8005f98:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f9c:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005f9e:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fa2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fa6:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8005fa8:	bf54      	ite	pl
 8005faa:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005fac:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 8005fb0:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fb4:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005fb6:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fba:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005fbc:	bf54      	ite	pl
 8005fbe:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8005fc0:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005fc4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005fc8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fcc:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8005fce:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fd0:	f10c 0c02 	add.w	ip, ip, #2
 8005fd4:	fa33 f402 	lsrs.w	r4, r3, r2
 8005fd8:	f47f af30 	bne.w	8005e3c <HAL_GPIO_Init+0x1c>
  }
}
 8005fdc:	b003      	add	sp, #12
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005fe2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fe4:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fe8:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fea:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fec:	fa03 f30c 	lsl.w	r3, r3, ip
 8005ff0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8005ff4:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff6:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8005ff8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ffc:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006000:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006004:	4093      	lsls	r3, r2
 8006006:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 800600a:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800600c:	684b      	ldr	r3, [r1, #4]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	e727      	b.n	8005e64 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006014:	f04f 0a03 	mov.w	sl, #3
 8006018:	fa0a f909 	lsl.w	r9, sl, r9
 800601c:	ea43 0309 	orr.w	r3, r3, r9
 8006020:	e7a0      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 8006022:	f04f 0a01 	mov.w	sl, #1
 8006026:	fa0a f909 	lsl.w	r9, sl, r9
 800602a:	ea43 0309 	orr.w	r3, r3, r9
 800602e:	e799      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 8006030:	f04f 0a02 	mov.w	sl, #2
 8006034:	fa0a f909 	lsl.w	r9, sl, r9
 8006038:	ea43 0309 	orr.w	r3, r3, r9
 800603c:	e792      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 800603e:	f04f 0a06 	mov.w	sl, #6
 8006042:	fa0a f909 	lsl.w	r9, sl, r9
 8006046:	ea43 0309 	orr.w	r3, r3, r9
 800604a:	e78b      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 800604c:	f04f 0a04 	mov.w	sl, #4
 8006050:	fa0a f909 	lsl.w	r9, sl, r9
 8006054:	ea43 0309 	orr.w	r3, r3, r9
 8006058:	e784      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 800605a:	4770      	bx	lr
 800605c:	f04f 0a05 	mov.w	sl, #5
 8006060:	fa0a f909 	lsl.w	r9, sl, r9
 8006064:	ea43 0309 	orr.w	r3, r3, r9
 8006068:	e77c      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 800606a:	f04f 0a07 	mov.w	sl, #7
 800606e:	fa0a f909 	lsl.w	r9, sl, r9
 8006072:	ea43 0309 	orr.w	r3, r3, r9
 8006076:	e775      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 8006078:	f04f 0a08 	mov.w	sl, #8
 800607c:	fa0a f909 	lsl.w	r9, sl, r9
 8006080:	ea43 0309 	orr.w	r3, r3, r9
 8006084:	e76e      	b.n	8005f64 <HAL_GPIO_Init+0x144>
 8006086:	bf00      	nop
 8006088:	58024400 	.word	0x58024400
 800608c:	58020000 	.word	0x58020000
 8006090:	58020800 	.word	0x58020800
 8006094:	58020c00 	.word	0x58020c00
 8006098:	58021000 	.word	0x58021000
 800609c:	58021400 	.word	0x58021400
 80060a0:	58021800 	.word	0x58021800
 80060a4:	58020400 	.word	0x58020400
 80060a8:	58021c00 	.word	0x58021c00
 80060ac:	58022000 	.word	0x58022000
 80060b0:	58022400 	.word	0x58022400

080060b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060b4:	6903      	ldr	r3, [r0, #16]
 80060b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80060b8:	bf14      	ite	ne
 80060ba:	2001      	movne	r0, #1
 80060bc:	2000      	moveq	r0, #0
 80060be:	4770      	bx	lr

080060c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060c0:	b902      	cbnz	r2, 80060c4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060c2:	0409      	lsls	r1, r1, #16
 80060c4:	6181      	str	r1, [r0, #24]
  }
}
 80060c6:	4770      	bx	lr

080060c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060cc:	6803      	ldr	r3, [r0, #0]
{
 80060ce:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	0694      	lsls	r4, r2, #26
 80060d4:	d46d      	bmi.n	80061b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 80060d6:	4605      	mov	r5, r0
 80060d8:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060da:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80060de:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060e0:	f014 0410 	ands.w	r4, r4, #16
 80060e4:	d068      	beq.n	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 80060e6:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e8:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 80060ec:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060ee:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	46b2      	mov	sl, r6
 80060f2:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	d161      	bne.n	80061bc <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 80060f8:	0690      	lsls	r0, r2, #26
 80060fa:	f100 8085 	bmi.w	8006208 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80060fe:	f1ba 0f00 	cmp.w	sl, #0
 8006102:	d105      	bne.n	8006110 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8006104:	699c      	ldr	r4, [r3, #24]
 8006106:	06a1      	lsls	r1, r4, #26
 8006108:	d5fc      	bpl.n	8006104 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800610a:	2220      	movs	r2, #32
 800610c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800610e:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 8006110:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8006114:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006116:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006118:	05d0      	lsls	r0, r2, #23
 800611a:	d535      	bpl.n	8006188 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800611c:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006120:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8006122:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006126:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006128:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800612a:	d505      	bpl.n	8006138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800612c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006130:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006134:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006136:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006138:	0597      	lsls	r7, r2, #22
 800613a:	d505      	bpl.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800613c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006140:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006144:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	0790      	lsls	r0, r2, #30
 800614c:	d502      	bpl.n	8006154 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006152:	682b      	ldr	r3, [r5, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	07d1      	lsls	r1, r2, #31
 8006158:	d404      	bmi.n	8006164 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006162:	682b      	ldr	r3, [r5, #0]
 8006164:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006166:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006168:	4835      	ldr	r0, [pc, #212]	; (8006240 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 800616c:	4002      	ands	r2, r0
      return HAL_ERROR;
 800616e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006170:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8006172:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006178:	4323      	orrs	r3, r4
 800617a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800617c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8006184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006188:	0550      	lsls	r0, r2, #21
 800618a:	d4cf      	bmi.n	800612c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800618c:	0596      	lsls	r6, r2, #22
 800618e:	d4d5      	bmi.n	800613c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 8006190:	2900      	cmp	r1, #0
 8006192:	d1d9      	bne.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006194:	f7fd ffcc 	bl	8004130 <HAL_GetTick>
 8006198:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800619c:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	42b8      	cmp	r0, r7
 80061a0:	d800      	bhi.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 80061a2:	b91f      	cbnz	r7, 80061ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	f012 0220 	ands.w	r2, r2, #32
 80061aa:	d032      	beq.n	8006212 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	0692      	lsls	r2, r2, #26
 80061b0:	d595      	bpl.n	80060de <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80061b2:	2000      	movs	r0, #0
}
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80061b8:	4621      	mov	r1, r4
 80061ba:	e7ac      	b.n	8006116 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061bc:	0692      	lsls	r2, r2, #26
 80061be:	d423      	bmi.n	8006208 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80061c0:	f1ba 0f00 	cmp.w	sl, #0
 80061c4:	d1a4      	bne.n	8006110 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fd ffb3 	bl	8004130 <HAL_GetTick>
 80061ca:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061cc:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061ce:	4287      	cmp	r7, r0
 80061d0:	d301      	bcc.n	80061d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 80061d2:	2f00      	cmp	r7, #0
 80061d4:	d18d      	bne.n	80060f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061d6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80061d8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061dc:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80061de:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061e0:	0409      	lsls	r1, r1, #16
 80061e2:	d503      	bpl.n	80061ec <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 80061e4:	0441      	lsls	r1, r0, #17
 80061e6:	d401      	bmi.n	80061ec <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 80061e8:	2a20      	cmp	r2, #32
 80061ea:	d11f      	bne.n	800622c <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	0690      	lsls	r0, r2, #26
 80061f0:	f53f af7f 	bmi.w	80060f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061f4:	f7fd ff9c 	bl	8004130 <HAL_GetTick>
 80061f8:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061fa:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061fc:	2819      	cmp	r0, #25
 80061fe:	d9f5      	bls.n	80061ec <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	2620      	movs	r6, #32
              status = HAL_ERROR;
 8006202:	f04f 0a01 	mov.w	sl, #1
 8006206:	e774      	b.n	80060f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8006208:	f1ba 0f00 	cmp.w	sl, #0
 800620c:	f43f af7d 	beq.w	800610a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8006210:	e77e      	b.n	8006110 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006212:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006214:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8006216:	2001      	movs	r0, #1
 8006218:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800621c:	430b      	orrs	r3, r1
 800621e:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006220:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006224:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006232:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006234:	f7fd ff7c 	bl	8004130 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006238:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800623a:	4604      	mov	r4, r0
 800623c:	e7d6      	b.n	80061ec <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800623e:	bf00      	nop
 8006240:	fe00e800 	.word	0xfe00e800

08006244 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006244:	2800      	cmp	r0, #0
 8006246:	d056      	beq.n	80062f6 <HAL_I2C_Init+0xb2>
{
 8006248:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800624a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800624e:	4604      	mov	r4, r0
 8006250:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006254:	2b00      	cmp	r3, #0
 8006256:	d049      	beq.n	80062ec <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8006258:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800625a:	2324      	movs	r3, #36	; 0x24
 800625c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006268:	e9d4 2300 	ldrd	r2, r3, [r4]
 800626c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006270:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	6893      	ldr	r3, [r2, #8]
 8006276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800627a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800627c:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800627e:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006280:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	bf0c      	ite	eq
 8006286:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800628a:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800628e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006290:	68e3      	ldr	r3, [r4, #12]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d103      	bne.n	800629e <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800629c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800629e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062a4:	4b15      	ldr	r3, [pc, #84]	; (80062fc <HAL_I2C_Init+0xb8>)
 80062a6:	6851      	ldr	r1, [r2, #4]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	68d3      	ldr	r3, [r2, #12]
 80062b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b4:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062b6:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062b8:	6821      	ldr	r1, [r4, #0]
 80062ba:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80062be:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c0:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80062c6:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80062ce:	4303      	orrs	r3, r0
  return HAL_OK;
 80062d0:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062d2:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 80062d4:	6821      	ldr	r1, [r4, #0]
 80062d6:	680b      	ldr	r3, [r1, #0]
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062de:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062e4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80062ea:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80062ec:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80062f0:	f7fa ff06 	bl	8001100 <HAL_I2C_MspInit>
 80062f4:	e7b0      	b.n	8006258 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80062f6:	2001      	movs	r0, #1
}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	02008000 	.word	0x02008000

08006300 <HAL_I2C_Master_Transmit>:
{
 8006300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006306:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800630a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800630c:	2b20      	cmp	r3, #32
 800630e:	d12c      	bne.n	800636a <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 8006310:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006314:	4683      	mov	fp, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d027      	beq.n	800636a <HAL_I2C_Master_Transmit+0x6a>
 800631a:	2301      	movs	r3, #1
 800631c:	468a      	mov	sl, r1
 800631e:	4616      	mov	r6, r2
 8006320:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006324:	f7fd ff04 	bl	8004130 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006328:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 800632c:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	0417      	lsls	r7, r2, #16
 8006332:	d51d      	bpl.n	8006370 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006334:	f7fd fefc 	bl	8004130 <HAL_GetTick>
 8006338:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800633c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006340:	2819      	cmp	r0, #25
 8006342:	d9f4      	bls.n	800632e <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	0410      	lsls	r0, r2, #16
 8006348:	d5f1      	bpl.n	800632e <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800634e:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006350:	2200      	movs	r2, #0
      return HAL_ERROR;
 8006352:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8006356:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800635e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006362:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8006366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800636a:	2002      	movs	r0, #2
}
 800636c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006370:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006372:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8006374:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006378:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800637c:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800637e:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006382:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006386:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800638a:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8006392:	b292      	uxth	r2, r2
 8006394:	2aff      	cmp	r2, #255	; 0xff
 8006396:	d87e      	bhi.n	8006496 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8006398:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800639c:	49ad      	ldr	r1, [pc, #692]	; (8006654 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 800639e:	b292      	uxth	r2, r2
 80063a0:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063a4:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80063a6:	6858      	ldr	r0, [r3, #4]
 80063a8:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063aa:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80063ae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80063b2:	4301      	orrs	r1, r0
 80063b4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80063b8:	49a7      	ldr	r1, [pc, #668]	; (8006658 <HAL_I2C_Master_Transmit+0x358>)
 80063ba:	4311      	orrs	r1, r2
 80063bc:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80063be:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 80063c2:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8107 	beq.w	80065dc <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063ce:	f8db 3000 	ldr.w	r3, [fp]
 80063d2:	699c      	ldr	r4, [r3, #24]
 80063d4:	f014 0402 	ands.w	r4, r4, #2
 80063d8:	f040 80c5 	bne.w	8006566 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 80063dc:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063de:	f012 0210 	ands.w	r2, r2, #16
 80063e2:	f000 808d 	beq.w	8006500 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e6:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80063e8:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ec:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063ee:	f8db 3000 	ldr.w	r3, [fp]
 80063f2:	1c69      	adds	r1, r5, #1
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	f040 8085 	bne.w	8006504 <HAL_I2C_Master_Transmit+0x204>
 80063fa:	0690      	lsls	r0, r2, #26
 80063fc:	f100 8106 	bmi.w	800660c <HAL_I2C_Master_Transmit+0x30c>
 8006400:	b937      	cbnz	r7, 8006410 <HAL_I2C_Master_Transmit+0x110>
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	0691      	lsls	r1, r2, #26
 8006406:	d5fc      	bpl.n	8006402 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006408:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800640c:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 8006410:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8006414:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8006416:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006418:	05ce      	lsls	r6, r1, #23
 800641a:	d54b      	bpl.n	80064b4 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800641c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006420:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8006422:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006426:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006428:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800642c:	d506      	bpl.n	800643c <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800642e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006432:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006436:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006438:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800643c:	0589      	lsls	r1, r1, #22
 800643e:	d506      	bpl.n	800644e <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006440:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006444:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006448:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800644a:	f8db 3000 	ldr.w	r3, [fp]
 800644e:	6999      	ldr	r1, [r3, #24]
 8006450:	078e      	lsls	r6, r1, #30
 8006452:	d503      	bpl.n	800645c <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8006454:	2100      	movs	r1, #0
 8006456:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006458:	f8db 3000 	ldr.w	r3, [fp]
 800645c:	6999      	ldr	r1, [r3, #24]
 800645e:	07cd      	lsls	r5, r1, #31
 8006460:	d405      	bmi.n	800646e <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006462:	6999      	ldr	r1, [r3, #24]
 8006464:	f041 0101 	orr.w	r1, r1, #1
 8006468:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800646a:	f8db 3000 	ldr.w	r3, [fp]
 800646e:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 8006472:	487a      	ldr	r0, [pc, #488]	; (800665c <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006474:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8006476:	4001      	ands	r1, r0
        return HAL_ERROR;
 8006478:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800647a:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800647c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006480:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006484:	4313      	orrs	r3, r2
 8006486:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800648a:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800648e:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8006492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006496:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8006498:	496e      	ldr	r1, [pc, #440]	; (8006654 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800649a:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064a2:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80064a6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80064aa:	4311      	orrs	r1, r2
 80064ac:	4a6c      	ldr	r2, [pc, #432]	; (8006660 <HAL_I2C_Master_Transmit+0x360>)
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064b2:	e784      	b.n	80063be <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064b4:	054c      	lsls	r4, r1, #21
 80064b6:	d4ba      	bmi.n	800642e <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064b8:	058f      	lsls	r7, r1, #22
 80064ba:	d4c1      	bmi.n	8006440 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 80064bc:	2800      	cmp	r0, #0
 80064be:	d1c6      	bne.n	800644e <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	1c6c      	adds	r4, r5, #1
 80064c2:	d086      	beq.n	80063d2 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c4:	f7fd fe34 	bl	8004130 <HAL_GetTick>
 80064c8:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064cc:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d0:	4285      	cmp	r5, r0
 80064d2:	d302      	bcc.n	80064da <HAL_I2C_Master_Transmit+0x1da>
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	f47f af7c 	bne.w	80063d2 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	f012 0202 	ands.w	r2, r2, #2
 80064e0:	f47f af77 	bne.w	80063d2 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e4:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064e8:	2120      	movs	r1, #32
        return HAL_ERROR;
 80064ea:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80064ec:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f0:	430b      	orrs	r3, r1
 80064f2:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fa:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 80064fe:	e735      	b.n	800636c <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	4610      	mov	r0, r2
 8006502:	e788      	b.n	8006416 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006504:	0692      	lsls	r2, r2, #26
 8006506:	f100 8081 	bmi.w	800660c <HAL_I2C_Master_Transmit+0x30c>
 800650a:	2f00      	cmp	r7, #0
 800650c:	d180      	bne.n	8006410 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800650e:	f7fd fe0f 	bl	8004130 <HAL_GetTick>
 8006512:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006514:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006518:	4285      	cmp	r5, r0
 800651a:	d302      	bcc.n	8006522 <HAL_I2C_Master_Transmit+0x222>
 800651c:	2d00      	cmp	r5, #0
 800651e:	f47f af68 	bne.w	80063f2 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006522:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006524:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006528:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800652a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800652c:	0409      	lsls	r1, r1, #16
 800652e:	d50c      	bpl.n	800654a <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 8006530:	0441      	lsls	r1, r0, #17
 8006532:	d40a      	bmi.n	800654a <HAL_I2C_Master_Transmit+0x24a>
 8006534:	2a20      	cmp	r2, #32
 8006536:	d008      	beq.n	800654a <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006540:	f7fd fdf6 	bl	8004130 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006544:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8006548:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	0690      	lsls	r0, r2, #26
 800654e:	f53f af50 	bmi.w	80063f2 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006552:	f7fd fded 	bl	8004130 <HAL_GetTick>
 8006556:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006558:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800655c:	2819      	cmp	r0, #25
 800655e:	d9f4      	bls.n	800654a <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006560:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006562:	2701      	movs	r7, #1
 8006564:	e745      	b.n	80063f2 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006566:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800656e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 8006572:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8006576:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006578:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800657c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800657e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8006580:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006582:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8006584:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006588:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800658c:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006590:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8006592:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af13 	bne.w	80063c2 <HAL_I2C_Master_Transmit+0xc2>
 800659c:	2a00      	cmp	r2, #0
 800659e:	f43f af10 	beq.w	80063c2 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a2:	f8db 2000 	ldr.w	r2, [fp]
 80065a6:	1c68      	adds	r0, r5, #1
 80065a8:	d134      	bne.n	8006614 <HAL_I2C_Master_Transmit+0x314>
 80065aa:	6993      	ldr	r3, [r2, #24]
 80065ac:	0619      	lsls	r1, r3, #24
 80065ae:	d5fc      	bpl.n	80065aa <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2bff      	cmp	r3, #255	; 0xff
 80065b8:	d958      	bls.n	800666c <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ba:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80065bc:	4929      	ldr	r1, [pc, #164]	; (8006664 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065be:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80065c2:	6853      	ldr	r3, [r2, #4]
 80065c4:	400b      	ands	r3, r1
 80065c6:	4928      	ldr	r1, [pc, #160]	; (8006668 <HAL_I2C_Master_Transmit+0x368>)
 80065c8:	ea4a 0303 	orr.w	r3, sl, r3
 80065cc:	4319      	orrs	r1, r3
 80065ce:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 80065d0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f47f aef9 	bne.w	80063ce <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065dc:	4642      	mov	r2, r8
 80065de:	4629      	mov	r1, r5
 80065e0:	4658      	mov	r0, fp
 80065e2:	f7ff fd71 	bl	80060c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d151      	bne.n	800668e <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ea:	f8db 3000 	ldr.w	r3, [fp]
 80065ee:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 80065f0:	4c1a      	ldr	r4, [pc, #104]	; (800665c <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80065f4:	f8db 1000 	ldr.w	r1, [fp]
 80065f8:	684b      	ldr	r3, [r1, #4]
 80065fa:	4023      	ands	r3, r4
 80065fc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006602:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006606:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800660a:	e6af      	b.n	800636c <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 800660c:	2f00      	cmp	r7, #0
 800660e:	f43f aefb 	beq.w	8006408 <HAL_I2C_Master_Transmit+0x108>
 8006612:	e6fd      	b.n	8006410 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006614:	6993      	ldr	r3, [r2, #24]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	d4ca      	bmi.n	80065b0 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661a:	f7fd fd89 	bl	8004130 <HAL_GetTick>
 800661e:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006622:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	4285      	cmp	r5, r0
 8006628:	d301      	bcc.n	800662e <HAL_I2C_Master_Transmit+0x32e>
 800662a:	2d00      	cmp	r5, #0
 800662c:	d1bb      	bne.n	80065a6 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800662e:	6993      	ldr	r3, [r2, #24]
 8006630:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006634:	d1b7      	bne.n	80065a6 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800663a:	2120      	movs	r1, #32
          return HAL_ERROR;
 800663c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800663e:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	430a      	orrs	r2, r1
 8006644:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006648:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 8006650:	e68c      	b.n	800636c <HAL_I2C_Master_Transmit+0x6c>
 8006652:	bf00      	nop
 8006654:	fc009800 	.word	0xfc009800
 8006658:	02002000 	.word	0x02002000
 800665c:	fe00e800 	.word	0xfe00e800
 8006660:	01ff2000 	.word	0x01ff2000
 8006664:	fc009c00 	.word	0xfc009c00
 8006668:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 800666c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006670:	4808      	ldr	r0, [pc, #32]	; (8006694 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 8006672:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006674:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8006676:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800667a:	6853      	ldr	r3, [r2, #4]
 800667c:	4003      	ands	r3, r0
 800667e:	ea4a 0303 	orr.w	r3, sl, r3
 8006682:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800668a:	6053      	str	r3, [r2, #4]
}
 800668c:	e699      	b.n	80063c2 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800668e:	2001      	movs	r0, #1
 8006690:	e66c      	b.n	800636c <HAL_I2C_Master_Transmit+0x6c>
 8006692:	bf00      	nop
 8006694:	fc009c00 	.word	0xfc009c00

08006698 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006698:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800669a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800669c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800669e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80066a0:	b103      	cbz	r3, 80066a4 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80066a2:	4718      	bx	r3
}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <HAL_I2C_SlaveTxCpltCallback>:
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <I2C_ITSlaveSeqCplt>:
{
 80066ac:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066ae:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066b2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b4:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066b8:	0451      	lsls	r1, r2, #17
 80066ba:	d526      	bpl.n	800670a <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066c2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80066c8:	2b29      	cmp	r3, #41	; 0x29
 80066ca:	d028      	beq.n	800671e <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80066d0:	2b2a      	cmp	r3, #42	; 0x2a
 80066d2:	d000      	beq.n	80066d6 <I2C_ITSlaveSeqCplt+0x2a>
}
 80066d4:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066d6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066d8:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066da:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80066dc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066e4:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066e6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066ea:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066ec:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80066f0:	2a28      	cmp	r2, #40	; 0x28
 80066f2:	bf0c      	ite	eq
 80066f4:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 80066f8:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066fc:	4013      	ands	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006700:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006704:	f015 f84c 	bl	801b7a0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006708:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800670a:	0412      	lsls	r2, r2, #16
 800670c:	d5da      	bpl.n	80066c4 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006714:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006716:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800671a:	2b29      	cmp	r3, #41	; 0x29
 800671c:	d1d6      	bne.n	80066cc <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800671e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006720:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006722:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006724:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006728:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800672c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800672e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006732:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006734:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006738:	2a28      	cmp	r2, #40	; 0x28
 800673a:	bf0c      	ite	eq
 800673c:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8006740:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006744:	4013      	ands	r3, r2
 8006746:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006748:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800674c:	f7ff ffac 	bl	80066a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006750:	bd08      	pop	{r3, pc}
 8006752:	bf00      	nop

08006754 <HAL_I2C_AddrCallback>:
}
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006758:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800675a:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800675c:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800675e:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006760:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006762:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006764:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006766:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006768:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800676c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006770:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006772:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006776:	d10f      	bne.n	8006798 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006778:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800677c:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006780:	f013 0306 	ands.w	r3, r3, #6
 8006784:	d106      	bne.n	8006794 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8006786:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006788:	3501      	adds	r5, #1
 800678a:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800678c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800678e:	2d02      	cmp	r5, #2
 8006790:	d00c      	beq.n	80067ac <I2C_ITAddrCplt.part.0+0x54>
}
 8006792:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006794:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800679e:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80067a0:	2300      	movs	r3, #0
 80067a2:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067a6:	f7ff ffd5 	bl	8006754 <HAL_I2C_AddrCallback>
}
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067ac:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 80067ae:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067b0:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 80067b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067b6:	f7ff ffcd 	bl	8006754 <HAL_I2C_AddrCallback>
}
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <HAL_I2C_ListenCpltCallback>:
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <HAL_I2C_AbortCpltCallback>:
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <I2C_DMAAbort>:
{
 80067c4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 80067c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067ca:	b10b      	cbz	r3, 80067d0 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80067d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80067d2:	b10b      	cbz	r3, 80067d8 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067d4:	2200      	movs	r2, #0
 80067d6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067dc:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80067de:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067e2:	d005      	beq.n	80067f0 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80067e4:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80067e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80067ea:	f014 ffe5 	bl	801b7b8 <__HAL_I2C_ErrorCallback_veneer>
}
 80067ee:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80067f0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80067f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067fa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80067fc:	f7ff ffe0 	bl	80067c0 <HAL_I2C_AbortCpltCallback>
}
 8006800:	bd08      	pop	{r3, pc}
 8006802:	bf00      	nop

08006804 <I2C_ITError>:
{
 8006804:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006806:	4a5d      	ldr	r2, [pc, #372]	; (800697c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006808:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800680a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800680e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006810:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006814:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006816:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006818:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800681a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800681c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800681e:	ea41 0102 	orr.w	r1, r1, r2
 8006822:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006824:	d874      	bhi.n	8006910 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006826:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800682a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800682e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006832:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006834:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006838:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800683a:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800683c:	bf14      	ite	ne
 800683e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8006842:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006846:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006848:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800684c:	bf18      	it	ne
 800684e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006852:	4013      	ands	r3, r2
 8006854:	4a4a      	ldr	r2, [pc, #296]	; (8006980 <I2C_ITError+0x17c>)
 8006856:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006858:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800685c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800685e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006860:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006862:	b118      	cbz	r0, 800686c <I2C_ITError+0x68>
 8006864:	2b11      	cmp	r3, #17
 8006866:	d01e      	beq.n	80068a6 <I2C_ITError+0xa2>
 8006868:	2b21      	cmp	r3, #33	; 0x21
 800686a:	d01c      	beq.n	80068a6 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800686c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800686e:	b118      	cbz	r0, 8006878 <I2C_ITError+0x74>
 8006870:	2b12      	cmp	r3, #18
 8006872:	d030      	beq.n	80068d6 <I2C_ITError+0xd2>
 8006874:	2b22      	cmp	r3, #34	; 0x22
 8006876:	d02e      	beq.n	80068d6 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006878:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800687c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800687e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006882:	d006      	beq.n	8006892 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006884:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006886:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006888:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800688c:	f014 ff94 	bl	801b7b8 <__HAL_I2C_ErrorCallback_veneer>
}
 8006890:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006892:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006894:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006896:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800689e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80068a0:	f7ff ff8e 	bl	80067c0 <HAL_I2C_AbortCpltCallback>
}
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	0451      	lsls	r1, r2, #17
 80068ac:	d45f      	bmi.n	800696e <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068ae:	f7ff fab1 	bl	8005e14 <HAL_DMA_GetState>
 80068b2:	2801      	cmp	r0, #1
 80068b4:	d0e0      	beq.n	8006878 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80068b8:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068ba:	4932      	ldr	r1, [pc, #200]	; (8006984 <I2C_ITError+0x180>)
 80068bc:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80068be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80068c4:	f7fe fd3c 	bl	8005340 <HAL_DMA_Abort_IT>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d0e1      	beq.n	8006890 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80068ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80068d4:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	0412      	lsls	r2, r2, #16
 80068dc:	d504      	bpl.n	80068e8 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068e4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80068e8:	f7ff fa94 	bl	8005e14 <HAL_DMA_GetState>
 80068ec:	2801      	cmp	r0, #1
 80068ee:	d0c3      	beq.n	8006878 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 80068f2:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068f4:	4923      	ldr	r1, [pc, #140]	; (8006984 <I2C_ITError+0x180>)
 80068f6:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80068f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80068fe:	f7fe fd1f 	bl	8005340 <HAL_DMA_Abort_IT>
 8006902:	2800      	cmp	r0, #0
 8006904:	d0c4      	beq.n	8006890 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006906:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8006908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800690c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800690e:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006910:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006912:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006916:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006920:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006922:	6803      	ldr	r3, [r0, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	0792      	lsls	r2, r2, #30
 8006928:	d501      	bpl.n	800692e <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800692a:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800692c:	6803      	ldr	r3, [r0, #0]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	07d6      	lsls	r6, r2, #31
 8006932:	d403      	bmi.n	800693c <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800693c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006940:	2b60      	cmp	r3, #96	; 0x60
 8006942:	d012      	beq.n	800696a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006944:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006946:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8006948:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	0695      	lsls	r5, r2, #26
 8006950:	d50b      	bpl.n	800696a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	06d0      	lsls	r0, r2, #27
 8006956:	d506      	bpl.n	8006966 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006958:	2210      	movs	r2, #16
 800695a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800695c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800695e:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006960:	f042 0204 	orr.w	r2, r2, #4
 8006964:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006966:	2220      	movs	r2, #32
 8006968:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800696a:	2200      	movs	r2, #0
 800696c:	e776      	b.n	800685c <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006974:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006976:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006978:	e799      	b.n	80068ae <I2C_ITError+0xaa>
 800697a:	bf00      	nop
 800697c:	ffff0000 	.word	0xffff0000
 8006980:	08006b81 	.word	0x08006b81
 8006984:	080067c5 	.word	0x080067c5

08006988 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006988:	6803      	ldr	r3, [r0, #0]
{
 800698a:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006990:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006992:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006996:	d032      	beq.n	80069fe <HAL_I2C_ER_IRQHandler+0x76>
 8006998:	f011 0f80 	tst.w	r1, #128	; 0x80
 800699c:	d021      	beq.n	80069e2 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800699e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069a0:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80069a4:	f041 0101 	orr.w	r1, r1, #1
 80069a8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069aa:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80069ac:	0553      	lsls	r3, r2, #21
 80069ae:	d507      	bpl.n	80069c0 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069b0:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80069b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80069b8:	f041 0108 	orr.w	r1, r1, #8
 80069bc:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069be:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80069c0:	0592      	lsls	r2, r2, #22
 80069c2:	d507      	bpl.n	80069d4 <HAL_I2C_ER_IRQHandler+0x4c>
 80069c4:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80069c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80069cc:	f043 0302 	orr.w	r3, r3, #2
 80069d0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069d2:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 80069d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80069d6:	f011 0f0b 	tst.w	r1, #11
 80069da:	d10c      	bne.n	80069f6 <HAL_I2C_ER_IRQHandler+0x6e>
}
 80069dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e0:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80069e2:	0553      	lsls	r3, r2, #21
 80069e4:	d4f6      	bmi.n	80069d4 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80069e6:	0593      	lsls	r3, r2, #22
 80069e8:	d5f4      	bpl.n	80069d4 <HAL_I2C_ER_IRQHandler+0x4c>
 80069ea:	060a      	lsls	r2, r1, #24
 80069ec:	d4eb      	bmi.n	80069c6 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 80069ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80069f0:	f011 0f0b 	tst.w	r1, #11
 80069f4:	d0f2      	beq.n	80069dc <HAL_I2C_ER_IRQHandler+0x54>
}
 80069f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80069fa:	f7ff bf03 	b.w	8006804 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80069fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006a02:	d0f0      	beq.n	80069e6 <HAL_I2C_ER_IRQHandler+0x5e>
 8006a04:	0609      	lsls	r1, r1, #24
 8006a06:	d5e5      	bpl.n	80069d4 <HAL_I2C_ER_IRQHandler+0x4c>
 8006a08:	e7d3      	b.n	80069b2 <HAL_I2C_ER_IRQHandler+0x2a>
 8006a0a:	bf00      	nop

08006a0c <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a10:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a12:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a14:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a16:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a1a:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a1c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8006a20:	2b21      	cmp	r3, #33	; 0x21
 8006a22:	d16d      	bne.n	8006b00 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a24:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a26:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a2a:	682a      	ldr	r2, [r5, #0]
 8006a2c:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006a30:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a32:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a34:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 8006a36:	4d50      	ldr	r5, [pc, #320]	; (8006b78 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a38:	6853      	ldr	r3, [r2, #4]
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	6853      	ldr	r3, [r2, #4]
 8006a44:	402b      	ands	r3, r5
 8006a46:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	699a      	ldr	r2, [r3, #24]
 8006a4c:	0792      	lsls	r2, r2, #30
 8006a4e:	d502      	bpl.n	8006a56 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	07d6      	lsls	r6, r2, #31
 8006a5a:	d403      	bmi.n	8006a64 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a64:	0445      	lsls	r5, r0, #17
 8006a66:	d556      	bpl.n	8006b16 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a70:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a74:	b11b      	cbz	r3, 8006a7e <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	6853      	ldr	r3, [r2, #4]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006a7e:	074b      	lsls	r3, r1, #29
 8006a80:	d508      	bpl.n	8006a94 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006a8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006a92:	bb72      	cbnz	r2, 8006af2 <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
 8006a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	b11b      	cbz	r3, 8006aa2 <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a9c:	f043 0304 	orr.w	r3, r3, #4
 8006aa0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aa8:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006aaa:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	d13d      	bne.n	8006b2c <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ab2:	4e32      	ldr	r6, [pc, #200]	; (8006b7c <I2C_ITSlaveCplt.constprop.0+0x170>)
 8006ab4:	42b3      	cmp	r3, r6
 8006ab6:	d10e      	bne.n	8006ad6 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ab8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006abc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006abe:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ac2:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac4:	f04f 0320 	mov.w	r3, #32
 8006ac8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006acc:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ace:	d050      	beq.n	8006b72 <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad0:	f7ff fdea 	bl	80066a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7ff fde8 	bl	80066ac <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ade:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ae0:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006ae6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aea:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aec:	f7ff fe66 	bl	80067bc <HAL_I2C_ListenCpltCallback>
}
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8006af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006af4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006af6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006af8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006afe:	e7c9      	b.n	8006a94 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b00:	2b22      	cmp	r3, #34	; 0x22
 8006b02:	d197      	bne.n	8006a34 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b04:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b06:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b0a:	682a      	ldr	r2, [r5, #0]
 8006b0c:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006b10:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b12:	6323      	str	r3, [r4, #48]	; 0x30
 8006b14:	e78e      	b.n	8006a34 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b16:	0402      	lsls	r2, r0, #16
 8006b18:	d5b1      	bpl.n	8006a7e <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b22:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1a5      	bne.n	8006a76 <I2C_ITSlaveCplt.constprop.0+0x6a>
 8006b2a:	e7a8      	b.n	8006a7e <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7ff fe68 	bl	8006804 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b34:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006b38:	2b28      	cmp	r3, #40	; 0x28
 8006b3a:	d1cb      	bne.n	8006ad4 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b3c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006b3e:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b40:	490e      	ldr	r1, [pc, #56]	; (8006b7c <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
 8006b42:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
 8006b44:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b46:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b48:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b4a:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b58:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006b62:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006b68:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006b6c:	f7ff fe26 	bl	80067bc <HAL_I2C_ListenCpltCallback>
}
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b72:	f014 fe15 	bl	801b7a0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	fe00e800 	.word	0xfe00e800
 8006b7c:	ffff0000 	.word	0xffff0000

08006b80 <I2C_Slave_ISR_IT>:
{
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006b82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b86:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f000 8081 	beq.w	8006c90 <I2C_Slave_ISR_IT+0x110>
 8006b8e:	4617      	mov	r7, r2
 8006b90:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b92:	068a      	lsls	r2, r1, #26
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006b98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b9c:	d501      	bpl.n	8006ba2 <I2C_Slave_ISR_IT+0x22>
 8006b9e:	06bb      	lsls	r3, r7, #26
 8006ba0:	d462      	bmi.n	8006c68 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ba2:	06ea      	lsls	r2, r5, #27
 8006ba4:	d51c      	bpl.n	8006be0 <I2C_Slave_ISR_IT+0x60>
 8006ba6:	06fb      	lsls	r3, r7, #27
 8006ba8:	d51a      	bpl.n	8006be0 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
 8006baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d15f      	bne.n	8006c72 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006bb2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006bb6:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	d101      	bne.n	8006bc2 <I2C_Slave_ISR_IT+0x42>
 8006bbe:	2a28      	cmp	r2, #40	; 0x28
 8006bc0:	d07f      	beq.n	8006cc2 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bc2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc6:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bc8:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bce:	d102      	bne.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
 8006bd0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006bd4:	d162      	bne.n	8006c9c <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
 8006bd6:	2300      	movs	r3, #0
  return HAL_OK;
 8006bd8:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006bda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006be0:	076a      	lsls	r2, r5, #29
 8006be2:	d40d      	bmi.n	8006c00 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006be4:	0728      	lsls	r0, r5, #28
 8006be6:	d529      	bpl.n	8006c3c <I2C_Slave_ISR_IT+0xbc>
 8006be8:	0739      	lsls	r1, r7, #28
 8006bea:	d527      	bpl.n	8006c3c <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006bf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bf4:	2b28      	cmp	r3, #40	; 0x28
 8006bf6:	d060      	beq.n	8006cba <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006bfe:	e7ea      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c00:	077b      	lsls	r3, r7, #29
 8006c02:	d5ef      	bpl.n	8006be4 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8006c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	b16b      	cbz	r3, 8006c26 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c10:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006c16:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c18:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006c1a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006c1c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006c1e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006c20:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006c22:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c24:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006c26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d3      	bne.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
 8006c2e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006c32:	d0d0      	beq.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff fd39 	bl	80066ac <I2C_ITSlaveSeqCplt>
 8006c3a:	e7cc      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c3c:	07aa      	lsls	r2, r5, #30
 8006c3e:	d5ca      	bpl.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
 8006c40:	07bb      	lsls	r3, r7, #30
 8006c42:	d5c8      	bpl.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 8006c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	b323      	cbz	r3, 8006c94 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	7812      	ldrb	r2, [r2, #0]
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006c56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c58:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006c5a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006c5c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006c5e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006c60:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006c62:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c64:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006c66:	e7b6      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006c68:	f7ff fed0 	bl	8006a0c <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c6c:	06ea      	lsls	r2, r5, #27
 8006c6e:	d5b7      	bpl.n	8006be0 <I2C_Slave_ISR_IT+0x60>
 8006c70:	e799      	b.n	8006ba6 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	2210      	movs	r2, #16
 8006c76:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c7a:	f043 0304 	orr.w	r3, r3, #4
 8006c7e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c80:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006c84:	d1a7      	bne.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7ff fdbb 	bl	8006804 <I2C_ITError>
 8006c8e:	e7a2      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 8006c90:	2002      	movs	r0, #2
}
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c94:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006c98:	d19d      	bne.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
 8006c9a:	e7cb      	b.n	8006c34 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	0790      	lsls	r0, r2, #30
 8006ca2:	d502      	bpl.n	8006caa <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	07d1      	lsls	r1, r2, #31
 8006cae:	d4c1      	bmi.n	8006c34 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	619a      	str	r2, [r3, #24]
 8006cb8:	e7bc      	b.n	8006c34 <I2C_Slave_ISR_IT+0xb4>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fd4c 	bl	8006758 <I2C_ITAddrCplt.part.0>
 8006cc0:	e789      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cc2:	4918      	ldr	r1, [pc, #96]	; (8006d24 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006cc6:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8006cc8:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cca:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ccc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006cd6:	d512      	bpl.n	8006cfe <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006ce2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006ce8:	b14a      	cbz	r2, 8006cfe <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
 8006cea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006cec:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006cee:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006cf0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cf8:	f043 0304 	orr.w	r3, r3, #4
 8006cfc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cfe:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d00:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d02:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8006d06:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006d12:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8006d18:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8006d1a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006d1e:	f7ff fd4d 	bl	80067bc <HAL_I2C_ListenCpltCallback>
}
 8006d22:	e758      	b.n	8006bd6 <I2C_Slave_ISR_IT+0x56>
 8006d24:	ffff0000 	.word	0xffff0000

08006d28 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d28:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006d2c:	2a20      	cmp	r2, #32
 8006d2e:	d129      	bne.n	8006d84 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8006d30:	4603      	mov	r3, r0
{
 8006d32:	b500      	push	{lr}
 8006d34:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006d3c:	2a01      	cmp	r2, #1
 8006d3e:	d023      	beq.n	8006d88 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8006d40:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d42:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d44:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4c:	2224      	movs	r2, #36	; 0x24
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006d52:	6802      	ldr	r2, [r0, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	6802      	ldr	r2, [r0, #0]
 8006d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d62:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	6802      	ldr	r2, [r0, #0]
 8006d68:	4311      	orrs	r1, r2
 8006d6a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8006d6c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	680a      	ldr	r2, [r1, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d78:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006d7c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006d80:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8006d84:	2002      	movs	r0, #2
}
 8006d86:	4770      	bx	lr
    return HAL_BUSY;
 8006d88:	2002      	movs	r0, #2
}
 8006d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8e:	bf00      	nop

08006d90 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8006d94:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d96:	2a20      	cmp	r2, #32
 8006d98:	fa5f fc82 	uxtb.w	ip, r2
 8006d9c:	d121      	bne.n	8006de2 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d9e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006da2:	2a01      	cmp	r2, #1
 8006da4:	d01d      	beq.n	8006de2 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8006da6:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006da8:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dae:	2224      	movs	r2, #36	; 0x24
 8006db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006db4:	6802      	ldr	r2, [r0, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dc0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc8:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 8006dca:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	6802      	ldr	r2, [r0, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 8006dd6:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006ddc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 8006de0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006de2:	2002      	movs	r0, #2
  }
}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop

08006de8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006de8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006dea:	4c10      	ldr	r4, [pc, #64]	; (8006e2c <HAL_PWREx_ConfigSupply+0x44>)
 8006dec:	68e3      	ldr	r3, [r4, #12]
 8006dee:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006df2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006df4:	d105      	bne.n	8006e02 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006df6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dfa:	1a18      	subs	r0, r3, r0
 8006dfc:	bf18      	it	ne
 8006dfe:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	4303      	orrs	r3, r0
 8006e08:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8006e0a:	f7fd f991 	bl	8004130 <HAL_GetTick>
 8006e0e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e10:	e005      	b.n	8006e1e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e12:	f7fd f98d 	bl	8004130 <HAL_GetTick>
 8006e16:	1b40      	subs	r0, r0, r5
 8006e18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006e1c:	d804      	bhi.n	8006e28 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	049b      	lsls	r3, r3, #18
 8006e22:	d5f6      	bpl.n	8006e12 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8006e24:	2000      	movs	r0, #0
}
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006e28:	2001      	movs	r0, #1
}
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	58024800 	.word	0x58024800

08006e30 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e30:	4b3c      	ldr	r3, [pc, #240]	; (8006f24 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8006e32:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e36:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e38:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8006e3a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e40:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006e44:	d038      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e46:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e4a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e4e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e52:	fb05 f101 	mul.w	r1, r5, r1
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	ee07 1a90 	vmov	s15, r1
 8006e5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8006e60:	d002      	beq.n	8006e68 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8006e62:	2a02      	cmp	r2, #2
 8006e64:	d050      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8006e66:	b34a      	cbz	r2, 8006ebc <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e68:	ee07 0a90 	vmov	s15, r0
 8006e6c:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8006f28 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8006e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006e7a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006f2c <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e8e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006e92:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006e96:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e9a:	4b22      	ldr	r3, [pc, #136]	; (8006f24 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006ea2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb4:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006eb8:	bc30      	pop	{r4, r5}
 8006eba:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	0692      	lsls	r2, r2, #26
 8006ec0:	d529      	bpl.n	8006f16 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ec4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec8:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006f2c <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ee2:	ee06 3a10 	vmov	s12, r3
 8006ee6:	ee05 2a90 	vmov	s11, r2
 8006eea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006eee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006ef2:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006ef6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006efa:	eef0 7a46 	vmov.f32	s15, s12
 8006efe:	eee7 7a05 	vfma.f32	s15, s14, s10
 8006f02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006f06:	e7c8      	b.n	8006e9a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f08:	ee07 0a90 	vmov	s15, r0
 8006f0c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8006f34 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8006f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f14:	e7ae      	b.n	8006e74 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f16:	ee07 0a90 	vmov	s15, r0
 8006f1a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006f38 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8006f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f22:	e7a7      	b.n	8006e74 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8006f24:	58024400 	.word	0x58024400
 8006f28:	4a742400 	.word	0x4a742400
 8006f2c:	39000000 	.word	0x39000000
 8006f30:	03d09000 	.word	0x03d09000
 8006f34:	4bbebc20 	.word	0x4bbebc20
 8006f38:	4c742400 	.word	0x4c742400

08006f3c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f000 81ef 	beq.w	8007320 <HAL_RCC_OscConfig+0x3e4>
{
 8006f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f44:	6803      	ldr	r3, [r0, #0]
 8006f46:	4604      	mov	r4, r0
 8006f48:	07d9      	lsls	r1, r3, #31
 8006f4a:	d52e      	bpl.n	8006faa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f4c:	49a4      	ldr	r1, [pc, #656]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 8006f4e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f50:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f52:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f56:	2a10      	cmp	r2, #16
 8006f58:	f000 8107 	beq.w	800716a <HAL_RCC_OscConfig+0x22e>
 8006f5c:	2a18      	cmp	r2, #24
 8006f5e:	f000 80ff 	beq.w	8007160 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f68:	f000 812a 	beq.w	80071c0 <HAL_RCC_OscConfig+0x284>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 8188 	bne.w	8007282 <HAL_RCC_OscConfig+0x346>
 8006f72:	4b9b      	ldr	r3, [pc, #620]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f82:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 815c 	beq.w	8007244 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8006f8c:	f7fd f8d0 	bl	8004130 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f90:	4e93      	ldr	r6, [pc, #588]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8006f92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f94:	e005      	b.n	8006fa2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f96:	f7fd f8cb 	bl	8004130 <HAL_GetTick>
 8006f9a:	1b40      	subs	r0, r0, r5
 8006f9c:	2864      	cmp	r0, #100	; 0x64
 8006f9e:	f200 814f 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa2:	6833      	ldr	r3, [r6, #0]
 8006fa4:	039b      	lsls	r3, r3, #14
 8006fa6:	d5f6      	bpl.n	8006f96 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	079d      	lsls	r5, r3, #30
 8006fac:	f100 808a 	bmi.w	80070c4 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fb0:	06d9      	lsls	r1, r3, #27
 8006fb2:	d533      	bpl.n	800701c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fb4:	4a8a      	ldr	r2, [pc, #552]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 8006fb6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	f000 80e3 	beq.w	800718a <HAL_RCC_OscConfig+0x24e>
 8006fc4:	2b18      	cmp	r3, #24
 8006fc6:	f000 80db 	beq.w	8007180 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006fca:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8006fcc:	4d84      	ldr	r5, [pc, #528]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8176 	beq.w	80072c0 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006fdc:	f7fd f8a8 	bl	8004130 <HAL_GetTick>
 8006fe0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fe2:	e005      	b.n	8006ff0 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006fe4:	f7fd f8a4 	bl	8004130 <HAL_GetTick>
 8006fe8:	1b80      	subs	r0, r0, r6
 8006fea:	2802      	cmp	r0, #2
 8006fec:	f200 8128 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	05db      	lsls	r3, r3, #23
 8006ff4:	d5f6      	bpl.n	8006fe4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ff6:	f7fd f8b3 	bl	8004160 <HAL_GetREVID>
 8006ffa:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ffe:	4298      	cmp	r0, r3
 8007000:	f200 8266 	bhi.w	80074d0 <HAL_RCC_OscConfig+0x594>
 8007004:	6a22      	ldr	r2, [r4, #32]
 8007006:	686b      	ldr	r3, [r5, #4]
 8007008:	2a20      	cmp	r2, #32
 800700a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800700e:	bf0c      	ite	eq
 8007010:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007014:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8007018:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	071d      	lsls	r5, r3, #28
 800701e:	d516      	bpl.n	800704e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007020:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8007022:	4d6f      	ldr	r5, [pc, #444]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 811b 	beq.w	8007260 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800702a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007032:	f7fd f87d 	bl	8004130 <HAL_GetTick>
 8007036:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007038:	e005      	b.n	8007046 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800703a:	f7fd f879 	bl	8004130 <HAL_GetTick>
 800703e:	1b80      	subs	r0, r0, r6
 8007040:	2802      	cmp	r0, #2
 8007042:	f200 80fd 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007046:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007048:	0798      	lsls	r0, r3, #30
 800704a:	d5f6      	bpl.n	800703a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	069a      	lsls	r2, r3, #26
 8007050:	d516      	bpl.n	8007080 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007052:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8007054:	4d62      	ldr	r5, [pc, #392]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8121 	beq.w	800729e <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007062:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007064:	f7fd f864 	bl	8004130 <HAL_GetTick>
 8007068:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800706a:	e005      	b.n	8007078 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800706c:	f7fd f860 	bl	8004130 <HAL_GetTick>
 8007070:	1b80      	subs	r0, r0, r6
 8007072:	2802      	cmp	r0, #2
 8007074:	f200 80e4 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	049f      	lsls	r7, r3, #18
 800707c:	d5f6      	bpl.n	800706c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	0759      	lsls	r1, r3, #29
 8007082:	f100 80a3 	bmi.w	80071cc <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007086:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007088:	b1d0      	cbz	r0, 80070c0 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800708a:	4d55      	ldr	r5, [pc, #340]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 800708c:	692b      	ldr	r3, [r5, #16]
 800708e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007092:	2b18      	cmp	r3, #24
 8007094:	f000 81b6 	beq.w	8007404 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8007098:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800709c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070a0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a2:	f000 8149 	beq.w	8007338 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 80070a6:	f7fd f843 	bl	8004130 <HAL_GetTick>
 80070aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ac:	e005      	b.n	80070ba <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ae:	f7fd f83f 	bl	8004130 <HAL_GetTick>
 80070b2:	1b00      	subs	r0, r0, r4
 80070b4:	2802      	cmp	r0, #2
 80070b6:	f200 80c3 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	019b      	lsls	r3, r3, #6
 80070be:	d4f6      	bmi.n	80070ae <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80070c0:	2000      	movs	r0, #0
}
 80070c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c4:	4a46      	ldr	r2, [pc, #280]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 80070c6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070ca:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80070ce:	d12d      	bne.n	800712c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d0:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 80070d2:	68e2      	ldr	r2, [r4, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	0759      	lsls	r1, r3, #29
 80070d8:	d501      	bpl.n	80070de <HAL_RCC_OscConfig+0x1a2>
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d04e      	beq.n	800717c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070de:	4d40      	ldr	r5, [pc, #256]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	f023 0319 	bic.w	r3, r3, #25
 80070e6:	4313      	orrs	r3, r2
 80070e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80070ea:	f7fd f821 	bl	8004130 <HAL_GetTick>
 80070ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070f0:	e005      	b.n	80070fe <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f2:	f7fd f81d 	bl	8004130 <HAL_GetTick>
 80070f6:	1b80      	subs	r0, r0, r6
 80070f8:	2802      	cmp	r0, #2
 80070fa:	f200 80a1 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	075b      	lsls	r3, r3, #29
 8007102:	d5f6      	bpl.n	80070f2 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007104:	f7fd f82c 	bl	8004160 <HAL_GetREVID>
 8007108:	f241 0303 	movw	r3, #4099	; 0x1003
 800710c:	4298      	cmp	r0, r3
 800710e:	f200 80fe 	bhi.w	800730e <HAL_RCC_OscConfig+0x3d2>
 8007112:	6922      	ldr	r2, [r4, #16]
 8007114:	686b      	ldr	r3, [r5, #4]
 8007116:	2a40      	cmp	r2, #64	; 0x40
 8007118:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800711c:	bf0c      	ite	eq
 800711e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8007122:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8007126:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	e741      	b.n	8006fb0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800712c:	2b18      	cmp	r3, #24
 800712e:	f000 80ea 	beq.w	8007306 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007132:	4d2b      	ldr	r5, [pc, #172]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007134:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007136:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007138:	2a00      	cmp	r2, #0
 800713a:	f000 80d3 	beq.w	80072e4 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800713e:	f023 0319 	bic.w	r3, r3, #25
 8007142:	4313      	orrs	r3, r2
 8007144:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007146:	f7fc fff3 	bl	8004130 <HAL_GetTick>
 800714a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800714c:	e004      	b.n	8007158 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714e:	f7fc ffef 	bl	8004130 <HAL_GetTick>
 8007152:	1b80      	subs	r0, r0, r6
 8007154:	2802      	cmp	r0, #2
 8007156:	d873      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	075f      	lsls	r7, r3, #29
 800715c:	d5f7      	bpl.n	800714e <HAL_RCC_OscConfig+0x212>
 800715e:	e7d1      	b.n	8007104 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007160:	f001 0103 	and.w	r1, r1, #3
 8007164:	2902      	cmp	r1, #2
 8007166:	f47f aefc 	bne.w	8006f62 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716a:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	0392      	lsls	r2, r2, #14
 8007170:	f57f af1b 	bpl.w	8006faa <HAL_RCC_OscConfig+0x6e>
 8007174:	6862      	ldr	r2, [r4, #4]
 8007176:	2a00      	cmp	r2, #0
 8007178:	f47f af17 	bne.w	8006faa <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800717c:	2001      	movs	r0, #1
}
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007180:	f002 0203 	and.w	r2, r2, #3
 8007184:	2a01      	cmp	r2, #1
 8007186:	f47f af20 	bne.w	8006fca <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800718a:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	05da      	lsls	r2, r3, #23
 8007190:	d502      	bpl.n	8007198 <HAL_RCC_OscConfig+0x25c>
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d1f1      	bne.n	800717c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007198:	f7fc ffe2 	bl	8004160 <HAL_GetREVID>
 800719c:	f241 0303 	movw	r3, #4099	; 0x1003
 80071a0:	4298      	cmp	r0, r3
 80071a2:	f200 80bf 	bhi.w	8007324 <HAL_RCC_OscConfig+0x3e8>
 80071a6:	6a22      	ldr	r2, [r4, #32]
 80071a8:	2a20      	cmp	r2, #32
 80071aa:	f000 81ad 	beq.w	8007508 <HAL_RCC_OscConfig+0x5cc>
 80071ae:	490c      	ldr	r1, [pc, #48]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 80071b0:	684b      	ldr	r3, [r1, #4]
 80071b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071b6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80071ba:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	e72d      	b.n	800701c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c0:	4a07      	ldr	r2, [pc, #28]	; (80071e0 <HAL_RCC_OscConfig+0x2a4>)
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e6db      	b.n	8006f84 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 80071cc:	4d05      	ldr	r5, [pc, #20]	; (80071e4 <HAL_RCC_OscConfig+0x2a8>)
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80071d6:	f7fc ffab 	bl	8004130 <HAL_GetTick>
 80071da:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071dc:	e009      	b.n	80071f2 <HAL_RCC_OscConfig+0x2b6>
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
 80071e4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e8:	f7fc ffa2 	bl	8004130 <HAL_GetTick>
 80071ec:	1b80      	subs	r0, r0, r6
 80071ee:	2864      	cmp	r0, #100	; 0x64
 80071f0:	d826      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	05da      	lsls	r2, r3, #23
 80071f6:	d5f7      	bpl.n	80071e8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	f000 8171 	beq.w	80074e2 <HAL_RCC_OscConfig+0x5a6>
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8174 	bne.w	80074ee <HAL_RCC_OscConfig+0x5b2>
 8007206:	4baa      	ldr	r3, [pc, #680]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
 8007208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	671a      	str	r2, [r3, #112]	; 0x70
 8007210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007218:	68a3      	ldr	r3, [r4, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8140 	beq.w	80074a0 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 8007220:	f7fc ff86 	bl	8004130 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007224:	4ea2      	ldr	r6, [pc, #648]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800722a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800722c:	e004      	b.n	8007238 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7fc ff7f 	bl	8004130 <HAL_GetTick>
 8007232:	1b40      	subs	r0, r0, r5
 8007234:	42b8      	cmp	r0, r7
 8007236:	d803      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007238:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800723a:	079b      	lsls	r3, r3, #30
 800723c:	d5f7      	bpl.n	800722e <HAL_RCC_OscConfig+0x2f2>
 800723e:	e722      	b.n	8007086 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8007240:	2003      	movs	r0, #3
}
 8007242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8007244:	f7fc ff74 	bl	8004130 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007248:	4e99      	ldr	r6, [pc, #612]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800724a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800724c:	e004      	b.n	8007258 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800724e:	f7fc ff6f 	bl	8004130 <HAL_GetTick>
 8007252:	1b40      	subs	r0, r0, r5
 8007254:	2864      	cmp	r0, #100	; 0x64
 8007256:	d8f3      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007258:	6833      	ldr	r3, [r6, #0]
 800725a:	039f      	lsls	r7, r3, #14
 800725c:	d4f7      	bmi.n	800724e <HAL_RCC_OscConfig+0x312>
 800725e:	e6a3      	b.n	8006fa8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8007260:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007262:	f023 0301 	bic.w	r3, r3, #1
 8007266:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007268:	f7fc ff62 	bl	8004130 <HAL_GetTick>
 800726c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800726e:	e004      	b.n	800727a <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007270:	f7fc ff5e 	bl	8004130 <HAL_GetTick>
 8007274:	1b80      	subs	r0, r0, r6
 8007276:	2802      	cmp	r0, #2
 8007278:	d8e2      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800727a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800727c:	0799      	lsls	r1, r3, #30
 800727e:	d4f7      	bmi.n	8007270 <HAL_RCC_OscConfig+0x334>
 8007280:	e6e4      	b.n	800704c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007286:	4b8a      	ldr	r3, [pc, #552]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f47f ae74 	bne.w	8006f76 <HAL_RCC_OscConfig+0x3a>
 800728e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e672      	b.n	8006f84 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800729e:	682b      	ldr	r3, [r5, #0]
 80072a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80072a6:	f7fc ff43 	bl	8004130 <HAL_GetTick>
 80072aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072ac:	e004      	b.n	80072b8 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072ae:	f7fc ff3f 	bl	8004130 <HAL_GetTick>
 80072b2:	1b80      	subs	r0, r0, r6
 80072b4:	2802      	cmp	r0, #2
 80072b6:	d8c3      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	0498      	lsls	r0, r3, #18
 80072bc:	d4f7      	bmi.n	80072ae <HAL_RCC_OscConfig+0x372>
 80072be:	e6de      	b.n	800707e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80072c8:	f7fc ff32 	bl	8004130 <HAL_GetTick>
 80072cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072ce:	e004      	b.n	80072da <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072d0:	f7fc ff2e 	bl	8004130 <HAL_GetTick>
 80072d4:	1b80      	subs	r0, r0, r6
 80072d6:	2802      	cmp	r0, #2
 80072d8:	d8b2      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	05df      	lsls	r7, r3, #23
 80072de:	d4f7      	bmi.n	80072d0 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	e69b      	b.n	800701c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80072ea:	f7fc ff21 	bl	8004130 <HAL_GetTick>
 80072ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072f0:	e004      	b.n	80072fc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f2:	f7fc ff1d 	bl	8004130 <HAL_GetTick>
 80072f6:	1b80      	subs	r0, r0, r6
 80072f8:	2802      	cmp	r0, #2
 80072fa:	d8a1      	bhi.n	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	0758      	lsls	r0, r3, #29
 8007300:	d4f7      	bmi.n	80072f2 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	e654      	b.n	8006fb0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007306:	0790      	lsls	r0, r2, #30
 8007308:	f47f af13 	bne.w	8007132 <HAL_RCC_OscConfig+0x1f6>
 800730c:	e6e0      	b.n	80070d0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730e:	686b      	ldr	r3, [r5, #4]
 8007310:	6922      	ldr	r2, [r4, #16]
 8007312:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007316:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800731a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	e647      	b.n	8006fb0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8007320:	2001      	movs	r0, #1
}
 8007322:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007324:	4a62      	ldr	r2, [pc, #392]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
 8007326:	6a21      	ldr	r1, [r4, #32]
 8007328:	68d3      	ldr	r3, [r2, #12]
 800732a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800732e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007332:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	e671      	b.n	800701c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8007338:	f7fc fefa 	bl	8004130 <HAL_GetTick>
 800733c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800733e:	e005      	b.n	800734c <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007340:	f7fc fef6 	bl	8004130 <HAL_GetTick>
 8007344:	1b80      	subs	r0, r0, r6
 8007346:	2802      	cmp	r0, #2
 8007348:	f63f af7a 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	0199      	lsls	r1, r3, #6
 8007350:	d4f6      	bmi.n	8007340 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007352:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007354:	4b57      	ldr	r3, [pc, #348]	; (80074b4 <HAL_RCC_OscConfig+0x578>)
 8007356:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007358:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800735a:	4957      	ldr	r1, [pc, #348]	; (80074b8 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800735c:	4e54      	ldr	r6, [pc, #336]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800735e:	4313      	orrs	r3, r2
 8007360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007362:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007366:	62ab      	str	r3, [r5, #40]	; 0x28
 8007368:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800736c:	3b01      	subs	r3, #1
 800736e:	3a01      	subs	r2, #1
 8007370:	025b      	lsls	r3, r3, #9
 8007372:	0412      	lsls	r2, r2, #16
 8007374:	b29b      	uxth	r3, r3
 8007376:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800737a:	4313      	orrs	r3, r2
 800737c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800737e:	3a01      	subs	r2, #1
 8007380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007384:	4313      	orrs	r3, r2
 8007386:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007388:	3a01      	subs	r2, #1
 800738a:	0612      	lsls	r2, r2, #24
 800738c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007390:	4313      	orrs	r3, r2
 8007392:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8007394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800739c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800739e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80073a0:	4011      	ands	r1, r2
 80073a2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80073a6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80073ac:	f023 030c 	bic.w	r3, r3, #12
 80073b0:	4313      	orrs	r3, r2
 80073b2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80073b8:	f023 0302 	bic.w	r3, r3, #2
 80073bc:	4313      	orrs	r3, r2
 80073be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ce:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073d6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80073d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80073e8:	f7fc fea2 	bl	8004130 <HAL_GetTick>
 80073ec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ee:	e005      	b.n	80073fc <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f0:	f7fc fe9e 	bl	8004130 <HAL_GetTick>
 80073f4:	1b00      	subs	r0, r0, r4
 80073f6:	2802      	cmp	r0, #2
 80073f8:	f63f af22 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073fc:	6833      	ldr	r3, [r6, #0]
 80073fe:	019a      	lsls	r2, r3, #6
 8007400:	d5f6      	bpl.n	80073f0 <HAL_RCC_OscConfig+0x4b4>
 8007402:	e65d      	b.n	80070c0 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007404:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007406:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007408:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800740a:	f43f ae5a 	beq.w	80070c2 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800740e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007412:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007414:	428b      	cmp	r3, r1
 8007416:	f47f aeb1 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800741a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800741e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	f47f aeab 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007428:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800742c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800742e:	429a      	cmp	r2, r3
 8007430:	f47f aea4 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007436:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800743a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	f47f ae9d 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007444:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8007448:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800744a:	429a      	cmp	r2, r3
 800744c:	f47f ae96 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007452:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8007456:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007458:	429e      	cmp	r6, r3
 800745a:	f47f ae8f 	bne.w	800717c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800745e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007460:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007462:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007466:	429a      	cmp	r2, r3
 8007468:	f43f ae2a 	beq.w	80070c0 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800746c:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
 800746e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8007476:	f7fc fe5b 	bl	8004130 <HAL_GetTick>
 800747a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800747c:	f7fc fe58 	bl	8004130 <HAL_GetTick>
 8007480:	42a8      	cmp	r0, r5
 8007482:	d0fb      	beq.n	800747c <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 8007486:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_RCC_OscConfig+0x57c>)
 800748c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800748e:	4023      	ands	r3, r4
 8007490:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007494:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8007496:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 80074a0:	f7fc fe46 	bl	8004130 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074a4:	4e02      	ldr	r6, [pc, #8]	; (80074b0 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80074aa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ac:	e00c      	b.n	80074c8 <HAL_RCC_OscConfig+0x58c>
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
 80074b4:	fffffc0c 	.word	0xfffffc0c
 80074b8:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074bc:	f7fc fe38 	bl	8004130 <HAL_GetTick>
 80074c0:	1b40      	subs	r0, r0, r5
 80074c2:	42b8      	cmp	r0, r7
 80074c4:	f63f aebc 	bhi.w	8007240 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074c8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80074ca:	0798      	lsls	r0, r3, #30
 80074cc:	d4f6      	bmi.n	80074bc <HAL_RCC_OscConfig+0x580>
 80074ce:	e5da      	b.n	8007086 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074d0:	68eb      	ldr	r3, [r5, #12]
 80074d2:	6a22      	ldr	r2, [r4, #32]
 80074d4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80074d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80074dc:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	e59c      	b.n	800701c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e2:	4a0e      	ldr	r2, [pc, #56]	; (800751c <HAL_RCC_OscConfig+0x5e0>)
 80074e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	6713      	str	r3, [r2, #112]	; 0x70
 80074ec:	e694      	b.n	8007218 <HAL_RCC_OscConfig+0x2dc>
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_RCC_OscConfig+0x5e0>)
 80074f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074f4:	f47f ae89 	bne.w	800720a <HAL_RCC_OscConfig+0x2ce>
 80074f8:	f042 0204 	orr.w	r2, r2, #4
 80074fc:	671a      	str	r2, [r3, #112]	; 0x70
 80074fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	671a      	str	r2, [r3, #112]	; 0x70
 8007506:	e687      	b.n	8007218 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007508:	4a04      	ldr	r2, [pc, #16]	; (800751c <HAL_RCC_OscConfig+0x5e0>)
 800750a:	6853      	ldr	r3, [r2, #4]
 800750c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007514:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	e580      	b.n	800701c <HAL_RCC_OscConfig+0xe0>
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400

08007520 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007520:	4a48      	ldr	r2, [pc, #288]	; (8007644 <HAL_RCC_GetSysClockFreq+0x124>)
 8007522:	6913      	ldr	r3, [r2, #16]
 8007524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007528:	2b10      	cmp	r3, #16
 800752a:	d004      	beq.n	8007536 <HAL_RCC_GetSysClockFreq+0x16>
 800752c:	2b18      	cmp	r3, #24
 800752e:	d00d      	beq.n	800754c <HAL_RCC_GetSysClockFreq+0x2c>
 8007530:	b11b      	cbz	r3, 800753a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8007532:	4845      	ldr	r0, [pc, #276]	; (8007648 <HAL_RCC_GetSysClockFreq+0x128>)
 8007534:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007536:	4845      	ldr	r0, [pc, #276]	; (800764c <HAL_RCC_GetSysClockFreq+0x12c>)
 8007538:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800753a:	6813      	ldr	r3, [r2, #0]
 800753c:	0699      	lsls	r1, r3, #26
 800753e:	d54a      	bpl.n	80075d6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007540:	6813      	ldr	r3, [r2, #0]
 8007542:	4843      	ldr	r0, [pc, #268]	; (8007650 <HAL_RCC_GetSysClockFreq+0x130>)
 8007544:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007548:	40d8      	lsrs	r0, r3
 800754a:	4770      	bx	lr
{
 800754c:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800754e:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007550:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007552:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8007554:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007558:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800755a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800755e:	d038      	beq.n	80075d2 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007560:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007564:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007568:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800756c:	fb05 f101 	mul.w	r1, r5, r1
 8007570:	2b01      	cmp	r3, #1
 8007572:	ee07 1a90 	vmov	s15, r1
 8007576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800757a:	d002      	beq.n	8007582 <HAL_RCC_GetSysClockFreq+0x62>
 800757c:	2b02      	cmp	r3, #2
 800757e:	d02c      	beq.n	80075da <HAL_RCC_GetSysClockFreq+0xba>
 8007580:	b393      	cbz	r3, 80075e8 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007582:	ee07 0a90 	vmov	s15, r0
 8007586:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8007654 <HAL_RCC_GetSysClockFreq+0x134>
 800758a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800758e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007590:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007594:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007658 <HAL_RCC_GetSysClockFreq+0x138>
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80075a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075a8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80075ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80075b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80075b4:	4b23      	ldr	r3, [pc, #140]	; (8007644 <HAL_RCC_GetSysClockFreq+0x124>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80075bc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ce:	ee17 0a90 	vmov	r0, s15
}
 80075d2:	bc30      	pop	{r4, r5}
 80075d4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075d6:	481e      	ldr	r0, [pc, #120]	; (8007650 <HAL_RCC_GetSysClockFreq+0x130>)
}
 80075d8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075da:	ee07 0a90 	vmov	s15, r0
 80075de:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800765c <HAL_RCC_GetSysClockFreq+0x13c>
 80075e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075e6:	e7d2      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e8:	6813      	ldr	r3, [r2, #0]
 80075ea:	069b      	lsls	r3, r3, #26
 80075ec:	d522      	bpl.n	8007634 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ee:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075f4:	4916      	ldr	r1, [pc, #88]	; (8007650 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075fc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007604:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8007658 <HAL_RCC_GetSysClockFreq+0x138>
 8007608:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800760c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800760e:	ee06 3a10 	vmov	s12, r3
 8007612:	ee05 1a90 	vmov	s11, r1
 8007616:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800761a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800761e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8007622:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007626:	eef0 7a46 	vmov.f32	s15, s12
 800762a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800762e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007632:	e7bf      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007634:	ee07 0a90 	vmov	s15, r0
 8007638:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007660 <HAL_RCC_GetSysClockFreq+0x140>
 800763c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007640:	e7a5      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x6e>
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
 8007648:	003d0900 	.word	0x003d0900
 800764c:	017d7840 	.word	0x017d7840
 8007650:	03d09000 	.word	0x03d09000
 8007654:	4a742400 	.word	0x4a742400
 8007658:	39000000 	.word	0x39000000
 800765c:	4bbebc20 	.word	0x4bbebc20
 8007660:	4c742400 	.word	0x4c742400

08007664 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007664:	2800      	cmp	r0, #0
 8007666:	f000 811a 	beq.w	800789e <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800766a:	4a92      	ldr	r2, [pc, #584]	; (80078b4 <HAL_RCC_ClockConfig+0x250>)
{
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	4604      	mov	r4, r0
 8007674:	460d      	mov	r5, r1
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	428b      	cmp	r3, r1
 800767c:	d20c      	bcs.n	8007698 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	f023 030f 	bic.w	r3, r3, #15
 8007684:	430b      	orrs	r3, r1
 8007686:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007688:	6813      	ldr	r3, [r2, #0]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	428b      	cmp	r3, r1
 8007690:	d002      	beq.n	8007698 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007692:	2001      	movs	r0, #1
}
 8007694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	075f      	lsls	r7, r3, #29
 800769c:	d50c      	bpl.n	80076b8 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800769e:	4986      	ldr	r1, [pc, #536]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80076a0:	6920      	ldr	r0, [r4, #16]
 80076a2:	698a      	ldr	r2, [r1, #24]
 80076a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80076a8:	4290      	cmp	r0, r2
 80076aa:	d905      	bls.n	80076b8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076ac:	698b      	ldr	r3, [r1, #24]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	4303      	orrs	r3, r0
 80076b4:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	071e      	lsls	r6, r3, #28
 80076ba:	d50c      	bpl.n	80076d6 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076bc:	497e      	ldr	r1, [pc, #504]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80076be:	6960      	ldr	r0, [r4, #20]
 80076c0:	69ca      	ldr	r2, [r1, #28]
 80076c2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80076c6:	4290      	cmp	r0, r2
 80076c8:	d905      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076ca:	69cb      	ldr	r3, [r1, #28]
 80076cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d0:	4303      	orrs	r3, r0
 80076d2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	06d8      	lsls	r0, r3, #27
 80076d8:	d50c      	bpl.n	80076f4 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076da:	4977      	ldr	r1, [pc, #476]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80076dc:	69a0      	ldr	r0, [r4, #24]
 80076de:	69ca      	ldr	r2, [r1, #28]
 80076e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80076e4:	4290      	cmp	r0, r2
 80076e6:	d905      	bls.n	80076f4 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076e8:	69cb      	ldr	r3, [r1, #28]
 80076ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076ee:	4303      	orrs	r3, r0
 80076f0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	0699      	lsls	r1, r3, #26
 80076f6:	d50c      	bpl.n	8007712 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076f8:	496f      	ldr	r1, [pc, #444]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80076fa:	69e0      	ldr	r0, [r4, #28]
 80076fc:	6a0a      	ldr	r2, [r1, #32]
 80076fe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007702:	4290      	cmp	r0, r2
 8007704:	d905      	bls.n	8007712 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007706:	6a0b      	ldr	r3, [r1, #32]
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	4303      	orrs	r3, r0
 800770e:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	079a      	lsls	r2, r3, #30
 8007714:	f140 8083 	bpl.w	800781e <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007718:	4867      	ldr	r0, [pc, #412]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 800771a:	68e1      	ldr	r1, [r4, #12]
 800771c:	6982      	ldr	r2, [r0, #24]
 800771e:	f002 020f 	and.w	r2, r2, #15
 8007722:	4291      	cmp	r1, r2
 8007724:	f240 80a9 	bls.w	800787a <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007728:	6983      	ldr	r3, [r0, #24]
 800772a:	f023 030f 	bic.w	r3, r3, #15
 800772e:	430b      	orrs	r3, r1
 8007730:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	07df      	lsls	r7, r3, #31
 8007736:	d474      	bmi.n	8007822 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	079f      	lsls	r7, r3, #30
 800773a:	d507      	bpl.n	800774c <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800773c:	4a5e      	ldr	r2, [pc, #376]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 800773e:	68e1      	ldr	r1, [r4, #12]
 8007740:	6993      	ldr	r3, [r2, #24]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	428b      	cmp	r3, r1
 8007748:	f200 80a0 	bhi.w	800788c <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800774c:	4a59      	ldr	r2, [pc, #356]	; (80078b4 <HAL_RCC_ClockConfig+0x250>)
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	42ab      	cmp	r3, r5
 8007756:	d909      	bls.n	800776c <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007758:	6813      	ldr	r3, [r2, #0]
 800775a:	f023 030f 	bic.w	r3, r3, #15
 800775e:	432b      	orrs	r3, r5
 8007760:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007762:	6813      	ldr	r3, [r2, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	42ab      	cmp	r3, r5
 800776a:	d192      	bne.n	8007692 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	075e      	lsls	r6, r3, #29
 8007770:	d50c      	bpl.n	800778c <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007772:	4951      	ldr	r1, [pc, #324]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 8007774:	6920      	ldr	r0, [r4, #16]
 8007776:	698a      	ldr	r2, [r1, #24]
 8007778:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800777c:	4290      	cmp	r0, r2
 800777e:	d205      	bcs.n	800778c <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007780:	698b      	ldr	r3, [r1, #24]
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	4303      	orrs	r3, r0
 8007788:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	071d      	lsls	r5, r3, #28
 800778e:	d50c      	bpl.n	80077aa <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007790:	4949      	ldr	r1, [pc, #292]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 8007792:	6960      	ldr	r0, [r4, #20]
 8007794:	69ca      	ldr	r2, [r1, #28]
 8007796:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800779a:	4290      	cmp	r0, r2
 800779c:	d205      	bcs.n	80077aa <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800779e:	69cb      	ldr	r3, [r1, #28]
 80077a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a4:	4303      	orrs	r3, r0
 80077a6:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	06d8      	lsls	r0, r3, #27
 80077ac:	d50c      	bpl.n	80077c8 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077ae:	4942      	ldr	r1, [pc, #264]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80077b0:	69a0      	ldr	r0, [r4, #24]
 80077b2:	69ca      	ldr	r2, [r1, #28]
 80077b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80077b8:	4290      	cmp	r0, r2
 80077ba:	d205      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077bc:	69cb      	ldr	r3, [r1, #28]
 80077be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077c2:	4303      	orrs	r3, r0
 80077c4:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	0699      	lsls	r1, r3, #26
 80077ca:	d50b      	bpl.n	80077e4 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077cc:	4a3a      	ldr	r2, [pc, #232]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80077ce:	69e1      	ldr	r1, [r4, #28]
 80077d0:	6a13      	ldr	r3, [r2, #32]
 80077d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077d6:	4299      	cmp	r1, r3
 80077d8:	d204      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077da:	6a13      	ldr	r3, [r2, #32]
 80077dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077e4:	f7ff fe9c 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80077e8:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 80077ea:	4603      	mov	r3, r0
 80077ec:	4833      	ldr	r0, [pc, #204]	; (80078bc <HAL_RCC_ClockConfig+0x258>)
 80077ee:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077f2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80077f6:	4d32      	ldr	r5, [pc, #200]	; (80078c0 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f8:	f002 020f 	and.w	r2, r2, #15
 80077fc:	4c31      	ldr	r4, [pc, #196]	; (80078c4 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077fe:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007800:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007802:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8007806:	4830      	ldr	r0, [pc, #192]	; (80078c8 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007808:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800780c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800780e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8007810:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007812:	40d3      	lsrs	r3, r2
 8007814:	6023      	str	r3, [r4, #0]
}
 8007816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800781a:	f7fc bc27 	b.w	800406c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781e:	07db      	lsls	r3, r3, #31
 8007820:	d594      	bpl.n	800774c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007822:	4a25      	ldr	r2, [pc, #148]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 8007824:	68a1      	ldr	r1, [r4, #8]
 8007826:	6993      	ldr	r3, [r2, #24]
 8007828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800782c:	430b      	orrs	r3, r1
 800782e:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007830:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007832:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007834:	2902      	cmp	r1, #2
 8007836:	d034      	beq.n	80078a2 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007838:	2903      	cmp	r1, #3
 800783a:	d02d      	beq.n	8007898 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800783c:	2901      	cmp	r1, #1
 800783e:	d035      	beq.n	80078ac <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007840:	075b      	lsls	r3, r3, #29
 8007842:	f57f af26 	bpl.w	8007692 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007846:	4e1c      	ldr	r6, [pc, #112]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007848:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800784c:	6933      	ldr	r3, [r6, #16]
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	430b      	orrs	r3, r1
 8007854:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8007856:	f7fc fc6b 	bl	8004130 <HAL_GetTick>
 800785a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800785c:	e004      	b.n	8007868 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800785e:	f7fc fc67 	bl	8004130 <HAL_GetTick>
 8007862:	1bc0      	subs	r0, r0, r7
 8007864:	4540      	cmp	r0, r8
 8007866:	d81f      	bhi.n	80078a8 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007868:	6933      	ldr	r3, [r6, #16]
 800786a:	6862      	ldr	r2, [r4, #4]
 800786c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007870:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007874:	d1f3      	bne.n	800785e <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	e75e      	b.n	8007738 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d4d1      	bmi.n	8007822 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800787e:	4a0e      	ldr	r2, [pc, #56]	; (80078b8 <HAL_RCC_ClockConfig+0x254>)
 8007880:	6993      	ldr	r3, [r2, #24]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	428b      	cmp	r3, r1
 8007888:	f67f af60 	bls.w	800774c <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800788c:	6993      	ldr	r3, [r2, #24]
 800788e:	f023 030f 	bic.w	r3, r3, #15
 8007892:	430b      	orrs	r3, r1
 8007894:	6193      	str	r3, [r2, #24]
 8007896:	e759      	b.n	800774c <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007898:	0198      	lsls	r0, r3, #6
 800789a:	d4d4      	bmi.n	8007846 <HAL_RCC_ClockConfig+0x1e2>
 800789c:	e6f9      	b.n	8007692 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800789e:	2001      	movs	r0, #1
}
 80078a0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078a2:	039e      	lsls	r6, r3, #14
 80078a4:	d4cf      	bmi.n	8007846 <HAL_RCC_ClockConfig+0x1e2>
 80078a6:	e6f4      	b.n	8007692 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80078a8:	2003      	movs	r0, #3
 80078aa:	e6f3      	b.n	8007694 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ac:	05da      	lsls	r2, r3, #23
 80078ae:	d4ca      	bmi.n	8007846 <HAL_RCC_ClockConfig+0x1e2>
 80078b0:	e6ef      	b.n	8007692 <HAL_RCC_ClockConfig+0x2e>
 80078b2:	bf00      	nop
 80078b4:	52002000 	.word	0x52002000
 80078b8:	58024400 	.word	0x58024400
 80078bc:	0801c288 	.word	0x0801c288
 80078c0:	200008f4 	.word	0x200008f4
 80078c4:	200008f8 	.word	0x200008f8
 80078c8:	20000940 	.word	0x20000940

080078cc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078cc:	4a18      	ldr	r2, [pc, #96]	; (8007930 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ce:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078d0:	6913      	ldr	r3, [r2, #16]
 80078d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d01a      	beq.n	8007910 <HAL_RCC_GetHCLKFreq+0x44>
 80078da:	2b18      	cmp	r3, #24
 80078dc:	d023      	beq.n	8007926 <HAL_RCC_GetHCLKFreq+0x5a>
 80078de:	b1cb      	cbz	r3, 8007914 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80078e0:	4814      	ldr	r0, [pc, #80]	; (8007934 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078e2:	4b13      	ldr	r3, [pc, #76]	; (8007930 <HAL_RCC_GetHCLKFreq+0x64>)
 80078e4:	4914      	ldr	r1, [pc, #80]	; (8007938 <HAL_RCC_GetHCLKFreq+0x6c>)
 80078e6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078e8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078ee:	4c13      	ldr	r4, [pc, #76]	; (800793c <HAL_RCC_GetHCLKFreq+0x70>)
 80078f0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078f4:	4d12      	ldr	r5, [pc, #72]	; (8007940 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078f6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078f8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078fa:	f002 021f 	and.w	r2, r2, #31
 80078fe:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007902:	f003 001f 	and.w	r0, r3, #31
 8007906:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800790a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800790c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800790e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007910:	480c      	ldr	r0, [pc, #48]	; (8007944 <HAL_RCC_GetHCLKFreq+0x78>)
 8007912:	e7e6      	b.n	80078e2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007914:	6813      	ldr	r3, [r2, #0]
 8007916:	069b      	lsls	r3, r3, #26
 8007918:	d508      	bpl.n	800792c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	480a      	ldr	r0, [pc, #40]	; (8007948 <HAL_RCC_GetHCLKFreq+0x7c>)
 800791e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007922:	40d8      	lsrs	r0, r3
 8007924:	e7dd      	b.n	80078e2 <HAL_RCC_GetHCLKFreq+0x16>
 8007926:	f7ff fa83 	bl	8006e30 <HAL_RCC_GetSysClockFreq.part.0>
 800792a:	e7da      	b.n	80078e2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800792c:	4806      	ldr	r0, [pc, #24]	; (8007948 <HAL_RCC_GetHCLKFreq+0x7c>)
 800792e:	e7d8      	b.n	80078e2 <HAL_RCC_GetHCLKFreq+0x16>
 8007930:	58024400 	.word	0x58024400
 8007934:	003d0900 	.word	0x003d0900
 8007938:	0801c288 	.word	0x0801c288
 800793c:	200008f8 	.word	0x200008f8
 8007940:	200008f4 	.word	0x200008f4
 8007944:	017d7840 	.word	0x017d7840
 8007948:	03d09000 	.word	0x03d09000

0800794c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800794c:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800794e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007950:	6913      	ldr	r3, [r2, #16]
 8007952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007956:	2b10      	cmp	r3, #16
 8007958:	d021      	beq.n	800799e <HAL_RCC_GetPCLK1Freq+0x52>
 800795a:	2b18      	cmp	r3, #24
 800795c:	d02a      	beq.n	80079b4 <HAL_RCC_GetPCLK1Freq+0x68>
 800795e:	b303      	cbz	r3, 80079a2 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8007960:	4818      	ldr	r0, [pc, #96]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x74>)
 8007964:	4918      	ldr	r1, [pc, #96]	; (80079c8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8007966:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007968:	4c18      	ldr	r4, [pc, #96]	; (80079cc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800796a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800796e:	4d18      	ldr	r5, [pc, #96]	; (80079d0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007970:	5ccb      	ldrb	r3, [r1, r3]
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007978:	6993      	ldr	r3, [r2, #24]
 800797a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800797e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007980:	5ccb      	ldrb	r3, [r1, r3]
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	fa20 f303 	lsr.w	r3, r0, r3
 800798a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800798c:	69d2      	ldr	r2, [r2, #28]
 800798e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007992:	5c88      	ldrb	r0, [r1, r2]
 8007994:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007998:	fa23 f000 	lsr.w	r0, r3, r0
 800799c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800799e:	480d      	ldr	r0, [pc, #52]	; (80079d4 <HAL_RCC_GetPCLK1Freq+0x88>)
 80079a0:	e7df      	b.n	8007962 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	069b      	lsls	r3, r3, #26
 80079a6:	d508      	bpl.n	80079ba <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	480b      	ldr	r0, [pc, #44]	; (80079d8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80079ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80079b0:	40d8      	lsrs	r0, r3
 80079b2:	e7d6      	b.n	8007962 <HAL_RCC_GetPCLK1Freq+0x16>
 80079b4:	f7ff fa3c 	bl	8006e30 <HAL_RCC_GetSysClockFreq.part.0>
 80079b8:	e7d3      	b.n	8007962 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079ba:	4807      	ldr	r0, [pc, #28]	; (80079d8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80079bc:	e7d1      	b.n	8007962 <HAL_RCC_GetPCLK1Freq+0x16>
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
 80079c4:	003d0900 	.word	0x003d0900
 80079c8:	0801c288 	.word	0x0801c288
 80079cc:	200008f8 	.word	0x200008f8
 80079d0:	200008f4 	.word	0x200008f4
 80079d4:	017d7840 	.word	0x017d7840
 80079d8:	03d09000 	.word	0x03d09000

080079dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079de:	4c3a      	ldr	r4, [pc, #232]	; (8007ac8 <RCCEx_PLL2_Config+0xec>)
 80079e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d067      	beq.n	8007aba <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7fc fb9b 	bl	8004130 <HAL_GetTick>
 80079fa:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079fc:	e004      	b.n	8007a08 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079fe:	f7fc fb97 	bl	8004130 <HAL_GetTick>
 8007a02:	1b43      	subs	r3, r0, r5
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d856      	bhi.n	8007ab6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	011a      	lsls	r2, r3, #4
 8007a0c:	d4f7      	bmi.n	80079fe <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a10:	6832      	ldr	r2, [r6, #0]
 8007a12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a16:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007a1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a1c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	3a01      	subs	r2, #1
 8007a24:	025b      	lsls	r3, r3, #9
 8007a26:	0412      	lsls	r2, r2, #16
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	6872      	ldr	r2, [r6, #4]
 8007a32:	3a01      	subs	r2, #1
 8007a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	6932      	ldr	r2, [r6, #16]
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	0612      	lsls	r2, r2, #24
 8007a40:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007a44:	4313      	orrs	r3, r2
 8007a46:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a4a:	6972      	ldr	r2, [r6, #20]
 8007a4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a50:	4313      	orrs	r3, r2
 8007a52:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a56:	69b3      	ldr	r3, [r6, #24]
 8007a58:	f022 0220 	bic.w	r2, r2, #32
 8007a5c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a5e:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a60:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a64:	f022 0210 	bic.w	r2, r2, #16
 8007a68:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a6a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a6c:	69f2      	ldr	r2, [r6, #28]
 8007a6e:	400b      	ands	r3, r1
 8007a70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007a74:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a78:	f043 0310 	orr.w	r3, r3, #16
 8007a7c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007a80:	b1ef      	cbz	r7, 8007abe <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a82:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a84:	bf0c      	ite	eq
 8007a86:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a8a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a90:	4c0d      	ldr	r4, [pc, #52]	; (8007ac8 <RCCEx_PLL2_Config+0xec>)
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a9a:	f7fc fb49 	bl	8004130 <HAL_GetTick>
 8007a9e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aa0:	e004      	b.n	8007aac <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aa2:	f7fc fb45 	bl	8004130 <HAL_GetTick>
 8007aa6:	1b40      	subs	r0, r0, r5
 8007aa8:	2802      	cmp	r0, #2
 8007aaa:	d804      	bhi.n	8007ab6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	d5f7      	bpl.n	8007aa2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8007ab2:	2000      	movs	r0, #0
}
 8007ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007ab6:	2003      	movs	r0, #3
}
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007aba:	2001      	movs	r0, #1
}
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ac4:	e7e4      	b.n	8007a90 <RCCEx_PLL2_Config+0xb4>
 8007ac6:	bf00      	nop
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	ffff0007 	.word	0xffff0007

08007ad0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad2:	4c3a      	ldr	r4, [pc, #232]	; (8007bbc <RCCEx_PLL3_Config+0xec>)
 8007ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d067      	beq.n	8007bae <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aea:	f7fc fb21 	bl	8004130 <HAL_GetTick>
 8007aee:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007af0:	e004      	b.n	8007afc <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007af2:	f7fc fb1d 	bl	8004130 <HAL_GetTick>
 8007af6:	1b43      	subs	r3, r0, r5
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d856      	bhi.n	8007baa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	009a      	lsls	r2, r3, #2
 8007b00:	d4f7      	bmi.n	8007af2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007b0a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007b0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b10:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	3a01      	subs	r2, #1
 8007b18:	025b      	lsls	r3, r3, #9
 8007b1a:	0412      	lsls	r2, r2, #16
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007b22:	4313      	orrs	r3, r2
 8007b24:	6872      	ldr	r2, [r6, #4]
 8007b26:	3a01      	subs	r2, #1
 8007b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	6932      	ldr	r2, [r6, #16]
 8007b30:	3a01      	subs	r2, #1
 8007b32:	0612      	lsls	r2, r2, #24
 8007b34:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b3e:	6972      	ldr	r2, [r6, #20]
 8007b40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b44:	4313      	orrs	r3, r2
 8007b46:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007b4a:	69b3      	ldr	r3, [r6, #24]
 8007b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b50:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b52:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b54:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b5c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b60:	69f2      	ldr	r2, [r6, #28]
 8007b62:	400b      	ands	r3, r1
 8007b64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007b68:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b70:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007b74:	b1ef      	cbz	r7, 8007bb2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b76:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b78:	bf0c      	ite	eq
 8007b7a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b7e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007b82:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b84:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <RCCEx_PLL3_Config+0xec>)
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8e:	f7fc facf 	bl	8004130 <HAL_GetTick>
 8007b92:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b94:	e004      	b.n	8007ba0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b96:	f7fc facb 	bl	8004130 <HAL_GetTick>
 8007b9a:	1b40      	subs	r0, r0, r5
 8007b9c:	2802      	cmp	r0, #2
 8007b9e:	d804      	bhi.n	8007baa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	d5f7      	bpl.n	8007b96 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8007ba6:	2000      	movs	r0, #0
}
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007baa:	2003      	movs	r0, #3
}
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007bae:	2001      	movs	r0, #1
}
 8007bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bb8:	e7e4      	b.n	8007b84 <RCCEx_PLL3_Config+0xb4>
 8007bba:	bf00      	nop
 8007bbc:	58024400 	.word	0x58024400
 8007bc0:	ffff0007 	.word	0xffff0007

08007bc4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bc8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8007bcc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bce:	011d      	lsls	r5, r3, #4
 8007bd0:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8007bd4:	d521      	bpl.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007bd6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007bdc:	f000 8577 	beq.w	80086ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007be0:	d80e      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007be2:	2900      	cmp	r1, #0
 8007be4:	f000 85d2 	beq.w	800878c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8007be8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007bec:	f040 85cb 	bne.w	8008786 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bf0:	2102      	movs	r1, #2
 8007bf2:	3008      	adds	r0, #8
 8007bf4:	f7ff fef2 	bl	80079dc <RCCEx_PLL2_Config>
 8007bf8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007bfa:	b966      	cbnz	r6, 8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bfc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007bfe:	e003      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c00:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007c04:	f040 85bf 	bne.w	8008786 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007c08:	4aa3      	ldr	r2, [pc, #652]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007c0e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c12:	430b      	orrs	r3, r1
 8007c14:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c16:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c1a:	05d8      	lsls	r0, r3, #23
 8007c1c:	d50a      	bpl.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c20:	2904      	cmp	r1, #4
 8007c22:	d806      	bhi.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007c24:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007c28:	0564055d 	.word	0x0564055d
 8007c2c:	0310057b 	.word	0x0310057b
 8007c30:	0310      	.short	0x0310
 8007c32:	2601      	movs	r6, #1
 8007c34:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c36:	0599      	lsls	r1, r3, #22
 8007c38:	d517      	bpl.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007c3a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c3c:	2980      	cmp	r1, #128	; 0x80
 8007c3e:	f000 8575 	beq.w	800872c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8007c42:	f200 80e1 	bhi.w	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007c46:	2900      	cmp	r1, #0
 8007c48:	f000 8446 	beq.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007c4c:	2940      	cmp	r1, #64	; 0x40
 8007c4e:	f040 80e2 	bne.w	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c52:	2100      	movs	r1, #0
 8007c54:	f104 0008 	add.w	r0, r4, #8
 8007c58:	f7ff fec0 	bl	80079dc <RCCEx_PLL2_Config>
 8007c5c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	f000 83f6 	beq.w	8008450 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c64:	462e      	mov	r6, r5
 8007c66:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c6a:	055f      	lsls	r7, r3, #21
 8007c6c:	d51a      	bpl.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c6e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8007c72:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007c76:	f000 8522 	beq.w	80086be <HAL_RCCEx_PeriphCLKConfig+0xafa>
 8007c7a:	f200 80cf 	bhi.w	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	f000 8431 	beq.w	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8007c84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007c88:	f040 80d0 	bne.w	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f104 0008 	add.w	r0, r4, #8
 8007c92:	f7ff fea3 	bl	80079dc <RCCEx_PLL2_Config>
 8007c96:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	f000 83f8 	beq.w	800848e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c9e:	462e      	mov	r6, r5
 8007ca0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ca4:	0518      	lsls	r0, r3, #20
 8007ca6:	d51a      	bpl.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007ca8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007cac:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007cb0:	f000 852d 	beq.w	800870e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8007cb4:	f200 80bd 	bhi.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	f000 8406 	beq.w	80084ca <HAL_RCCEx_PeriphCLKConfig+0x906>
 8007cbe:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007cc2:	f040 80be 	bne.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	f104 0008 	add.w	r0, r4, #8
 8007ccc:	f7ff fe86 	bl	80079dc <RCCEx_PLL2_Config>
 8007cd0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007cd2:	2d00      	cmp	r5, #0
 8007cd4:	f000 83b1 	beq.w	800843a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cd8:	462e      	mov	r6, r5
 8007cda:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cde:	0199      	lsls	r1, r3, #6
 8007ce0:	d51a      	bpl.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 8007ce2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007ce4:	2920      	cmp	r1, #32
 8007ce6:	f000 84b4 	beq.w	8008652 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8007cea:	f200 80ad 	bhi.w	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8007cee:	b139      	cbz	r1, 8007d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007cf0:	2910      	cmp	r1, #16
 8007cf2:	f040 80ac 	bne.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf6:	4a68      	ldr	r2, [pc, #416]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cf8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	f040 8418 	bne.w	8008536 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d06:	4a64      	ldr	r2, [pc, #400]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007d0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007d0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007d10:	430b      	orrs	r3, r1
 8007d12:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d14:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d18:	04df      	lsls	r7, r3, #19
 8007d1a:	d519      	bpl.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d1c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007d1e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007d22:	f000 84ec 	beq.w	80086fe <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8007d26:	f200 8095 	bhi.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	f000 83c7 	beq.w	80084be <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8007d30:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007d34:	f040 8096 	bne.w	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f104 0008 	add.w	r0, r4, #8
 8007d3e:	f7ff fe4d 	bl	80079dc <RCCEx_PLL2_Config>
 8007d42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	f000 838d 	beq.w	8008464 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d4a:	462e      	mov	r6, r5
 8007d4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d50:	0498      	lsls	r0, r3, #18
 8007d52:	d51d      	bpl.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d54:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007d56:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007d5a:	f000 8466 	beq.w	800862a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007d5e:	f200 8084 	bhi.w	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d62:	b149      	cbz	r1, 8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007d64:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007d68:	f040 8088 	bne.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	f104 0008 	add.w	r0, r4, #8
 8007d72:	f7ff fe33 	bl	80079dc <RCCEx_PLL2_Config>
 8007d76:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	f040 83eb 	bne.w	8008554 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d7e:	4a46      	ldr	r2, [pc, #280]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d80:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007d82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007d84:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d8c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d90:	0459      	lsls	r1, r3, #17
 8007d92:	d51d      	bpl.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d94:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007d98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007d9c:	f000 844f 	beq.w	800863e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007da0:	d86f      	bhi.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007da2:	b141      	cbz	r1, 8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007da4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007da8:	d173      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007daa:	2101      	movs	r1, #1
 8007dac:	f104 0008 	add.w	r0, r4, #8
 8007db0:	f7ff fe14 	bl	80079dc <RCCEx_PLL2_Config>
 8007db4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	f040 83d4 	bne.w	8008564 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007dbc:	4a36      	ldr	r2, [pc, #216]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dbe:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007dc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007dc4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dcc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007dd0:	041f      	lsls	r7, r3, #16
 8007dd2:	d50d      	bpl.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 8007dd4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007dd6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007dda:	f000 841d 	beq.w	8008618 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007dde:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007de2:	f000 8239 	beq.w	8008258 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007de6:	2900      	cmp	r1, #0
 8007de8:	f000 823c 	beq.w	8008264 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8007dec:	2601      	movs	r6, #1
 8007dee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007df0:	01d8      	lsls	r0, r3, #7
 8007df2:	d55e      	bpl.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 8007df4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007df6:	2903      	cmp	r1, #3
 8007df8:	f200 84f3 	bhi.w	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007dfc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e00:	004e0053 	.word	0x004e0053
 8007e04:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 8007e08:	29c0      	cmp	r1, #192	; 0xc0
 8007e0a:	f43f af28 	beq.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007e0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007e12:	f43f af24 	beq.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007e16:	2601      	movs	r6, #1
 8007e18:	4635      	mov	r5, r6
 8007e1a:	e726      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e1c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8007e20:	f43f af3a 	beq.w	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007e28:	f43f af36 	beq.w	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e2c:	2601      	movs	r6, #1
 8007e2e:	4635      	mov	r5, r6
 8007e30:	e738      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e32:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007e36:	f43f af4c 	beq.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007e3a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007e3e:	f43f af48 	beq.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007e42:	2601      	movs	r6, #1
 8007e44:	4635      	mov	r5, r6
 8007e46:	e74a      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 8007e48:	2930      	cmp	r1, #48	; 0x30
 8007e4a:	f43f af59 	beq.w	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007e4e:	2601      	movs	r6, #1
 8007e50:	4635      	mov	r5, r6
 8007e52:	e761      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e54:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8007e58:	f43f af74 	beq.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007e5c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007e60:	f43f af70 	beq.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007e64:	2601      	movs	r6, #1
 8007e66:	4635      	mov	r5, r6
 8007e68:	e772      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e6a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8007e6e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8007e72:	d081      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e74:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007e78:	f43f af7e 	beq.w	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e7c:	2601      	movs	r6, #1
 8007e7e:	4635      	mov	r5, r6
 8007e80:	e786      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e82:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8007e86:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e8a:	d094      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007e8c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007e90:	d091      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007e92:	2601      	movs	r6, #1
 8007e94:	4635      	mov	r5, r6
 8007e96:	e79b      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8007e98:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9c:	4a34      	ldr	r2, [pc, #208]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007e9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	f000 834a 	beq.w	8008540 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eac:	462e      	mov	r6, r5
 8007eae:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007eb2:	0259      	lsls	r1, r3, #9
 8007eb4:	f100 826f 	bmi.w	8008396 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007eb8:	07d8      	lsls	r0, r3, #31
 8007eba:	d52f      	bpl.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ebc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007ebe:	2928      	cmp	r1, #40	; 0x28
 8007ec0:	d82a      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007ec2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007ec6:	020d      	.short	0x020d
 8007ec8:	00290029 	.word	0x00290029
 8007ecc:	00290029 	.word	0x00290029
 8007ed0:	00290029 	.word	0x00290029
 8007ed4:	02070029 	.word	0x02070029
 8007ed8:	00290029 	.word	0x00290029
 8007edc:	00290029 	.word	0x00290029
 8007ee0:	00290029 	.word	0x00290029
 8007ee4:	04500029 	.word	0x04500029
 8007ee8:	00290029 	.word	0x00290029
 8007eec:	00290029 	.word	0x00290029
 8007ef0:	00290029 	.word	0x00290029
 8007ef4:	020d0029 	.word	0x020d0029
 8007ef8:	00290029 	.word	0x00290029
 8007efc:	00290029 	.word	0x00290029
 8007f00:	00290029 	.word	0x00290029
 8007f04:	020d0029 	.word	0x020d0029
 8007f08:	00290029 	.word	0x00290029
 8007f0c:	00290029 	.word	0x00290029
 8007f10:	00290029 	.word	0x00290029
 8007f14:	020d0029 	.word	0x020d0029
 8007f18:	2601      	movs	r6, #1
 8007f1a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f1c:	0799      	lsls	r1, r3, #30
 8007f1e:	d517      	bpl.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f20:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007f22:	2905      	cmp	r1, #5
 8007f24:	f200 8465 	bhi.w	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8007f28:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f2c:	0006000c 	.word	0x0006000c
 8007f30:	000c0412 	.word	0x000c0412
 8007f34:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f38:	2101      	movs	r1, #1
 8007f3a:	f104 0008 	add.w	r0, r4, #8
 8007f3e:	f7ff fd4d 	bl	80079dc <RCCEx_PLL2_Config>
 8007f42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	f000 82dd 	beq.w	8008504 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f4a:	462e      	mov	r6, r5
 8007f4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f50:	075f      	lsls	r7, r3, #29
 8007f52:	d51b      	bpl.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f54:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007f58:	2905      	cmp	r1, #5
 8007f5a:	f200 8446 	bhi.w	80087ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007f5e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f62:	000f      	.short	0x000f
 8007f64:	03ed0009 	.word	0x03ed0009
 8007f68:	000f000f 	.word	0x000f000f
 8007f6c:	000f      	.short	0x000f
 8007f6e:	bf00      	nop
 8007f70:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f74:	2101      	movs	r1, #1
 8007f76:	f104 0008 	add.w	r0, r4, #8
 8007f7a:	f7ff fd2f 	bl	80079dc <RCCEx_PLL2_Config>
 8007f7e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	f000 82c9 	beq.w	8008518 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f86:	462e      	mov	r6, r5
 8007f88:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f8c:	0698      	lsls	r0, r3, #26
 8007f8e:	d51f      	bpl.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f90:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007f94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007f98:	f000 8365 	beq.w	8008666 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007f9c:	f200 811c 	bhi.w	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007fa0:	b149      	cbz	r1, 8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007fa2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007fa6:	f040 8121 	bne.w	80081ec <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007faa:	2100      	movs	r1, #0
 8007fac:	f104 0008 	add.w	r0, r4, #8
 8007fb0:	f7ff fd14 	bl	80079dc <RCCEx_PLL2_Config>
 8007fb4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	f040 82b9 	bne.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fbc:	4ab0      	ldr	r2, [pc, #704]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007fbe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007fc2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007fc4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fcc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fd0:	0659      	lsls	r1, r3, #25
 8007fd2:	d51f      	bpl.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fd4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007fd8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007fdc:	f000 8308 	beq.w	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007fe0:	f200 8107 	bhi.w	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007fe4:	b149      	cbz	r1, 8007ffa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007fe6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007fea:	f040 810c 	bne.w	8008206 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fee:	2100      	movs	r1, #0
 8007ff0:	f104 0008 	add.w	r0, r4, #8
 8007ff4:	f7ff fcf2 	bl	80079dc <RCCEx_PLL2_Config>
 8007ff8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	f040 82b6 	bne.w	800856c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008000:	4a9f      	ldr	r2, [pc, #636]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008002:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8008006:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008008:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800800c:	430b      	orrs	r3, r1
 800800e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008010:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008014:	061f      	lsls	r7, r3, #24
 8008016:	d51f      	bpl.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008018:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800801c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8008020:	f000 82f0 	beq.w	8008604 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008024:	f200 80f2 	bhi.w	800820c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8008028:	b149      	cbz	r1, 800803e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800802a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800802e:	f040 80f7 	bne.w	8008220 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008032:	2100      	movs	r1, #0
 8008034:	f104 0008 	add.w	r0, r4, #8
 8008038:	f7ff fcd0 	bl	80079dc <RCCEx_PLL2_Config>
 800803c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800803e:	2d00      	cmp	r5, #0
 8008040:	f040 828c 	bne.w	800855c <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008044:	4a8e      	ldr	r2, [pc, #568]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008046:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800804a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800804c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008050:	430b      	orrs	r3, r1
 8008052:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008054:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008058:	0718      	lsls	r0, r3, #28
 800805a:	d50d      	bpl.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800805c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008060:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008064:	f000 8313 	beq.w	800868e <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008068:	4985      	ldr	r1, [pc, #532]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800806a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800806c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008070:	4313      	orrs	r3, r2
 8008072:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008074:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008078:	06d9      	lsls	r1, r3, #27
 800807a:	d50d      	bpl.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800807c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008080:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008084:	f000 830f 	beq.w	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008088:	497d      	ldr	r1, [pc, #500]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800808a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800808c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008090:	4313      	orrs	r3, r2
 8008092:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008094:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008098:	031f      	lsls	r7, r3, #12
 800809a:	d50e      	bpl.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 800809c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80080a0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80080a4:	f000 8102 	beq.w	80082ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 80080a8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80080ac:	f000 8104 	beq.w	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80080b0:	2900      	cmp	r1, #0
 80080b2:	f000 8292 	beq.w	80085da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80080b6:	2601      	movs	r6, #1
 80080b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080ba:	0358      	lsls	r0, r3, #13
 80080bc:	d50f      	bpl.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 80080be:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80080c2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80080c6:	f000 80dd 	beq.w	8008284 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80080ca:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80080ce:	f000 80df 	beq.w	8008290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80080d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80080d6:	f000 8277 	beq.w	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80080da:	2601      	movs	r6, #1
 80080dc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080de:	03d9      	lsls	r1, r3, #15
 80080e0:	d509      	bpl.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 80080e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80080e4:	2900      	cmp	r1, #0
 80080e6:	f000 825a 	beq.w	800859e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80080ea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80080ee:	f000 81da 	beq.w	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80080f2:	2601      	movs	r6, #1
 80080f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080f6:	009f      	lsls	r7, r3, #2
 80080f8:	f100 80ff 	bmi.w	80082fa <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080fc:	0398      	lsls	r0, r3, #14
 80080fe:	d50e      	bpl.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 8008100:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008104:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008108:	f000 8240 	beq.w	800858c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800810c:	f240 808b 	bls.w	8008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008110:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008114:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008118:	f000 8088 	beq.w	800822c <HAL_RCCEx_PeriphCLKConfig+0x668>
 800811c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800811e:	02d9      	lsls	r1, r3, #11
 8008120:	d508      	bpl.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008122:	4a57      	ldr	r2, [pc, #348]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008124:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008126:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800812c:	430b      	orrs	r3, r1
 800812e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008130:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008134:	00df      	lsls	r7, r3, #3
 8008136:	d509      	bpl.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008138:	4a51      	ldr	r2, [pc, #324]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800813a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800813e:	6913      	ldr	r3, [r2, #16]
 8008140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008144:	430b      	orrs	r3, r1
 8008146:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008148:	e9d4 3200 	ldrd	r3, r2, [r4]
 800814c:	029d      	lsls	r5, r3, #10
 800814e:	d508      	bpl.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008150:	4a4b      	ldr	r2, [pc, #300]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008152:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008154:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800815a:	430b      	orrs	r3, r1
 800815c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800815e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008162:	0058      	lsls	r0, r3, #1
 8008164:	d50b      	bpl.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008166:	4b46      	ldr	r3, [pc, #280]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800816e:	611a      	str	r2, [r3, #16]
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8008176:	430a      	orrs	r2, r1
 8008178:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800817a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da08      	bge.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008182:	4a3f      	ldr	r2, [pc, #252]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008184:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008186:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008188:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800818c:	430b      	orrs	r3, r1
 800818e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008190:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008194:	0219      	lsls	r1, r3, #8
 8008196:	d508      	bpl.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008198:	4a39      	ldr	r2, [pc, #228]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800819a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800819e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081a8:	6862      	ldr	r2, [r4, #4]
 80081aa:	07d3      	lsls	r3, r2, #31
 80081ac:	f100 80b1 	bmi.w	8008312 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081b0:	0797      	lsls	r7, r2, #30
 80081b2:	f100 80bb 	bmi.w	800832c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081b6:	0755      	lsls	r5, r2, #29
 80081b8:	f100 80c5 	bmi.w	8008346 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80081bc:	0710      	lsls	r0, r2, #28
 80081be:	f100 80cf 	bmi.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081c2:	06d1      	lsls	r1, r2, #27
 80081c4:	f100 80d9 	bmi.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081c8:	0692      	lsls	r2, r2, #26
 80081ca:	f100 812a 	bmi.w	8008422 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 80081ce:	1e30      	subs	r0, r6, #0
 80081d0:	bf18      	it	ne
 80081d2:	2001      	movne	r0, #1
}
 80081d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081d8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80081dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081e0:	f43f aee9 	beq.w	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80081e4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80081e8:	f43f aee5 	beq.w	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80081ec:	2601      	movs	r6, #1
 80081ee:	4635      	mov	r5, r6
 80081f0:	e6ee      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081f2:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80081f6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80081fa:	f43f aefe 	beq.w	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80081fe:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8008202:	f43f aefa 	beq.w	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008206:	2601      	movs	r6, #1
 8008208:	4635      	mov	r5, r6
 800820a:	e703      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800820c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8008210:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008214:	f43f af13 	beq.w	800803e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008218:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800821c:	f43f af0f 	beq.w	800803e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008220:	2601      	movs	r6, #1
 8008222:	4635      	mov	r5, r6
 8008224:	e718      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 8008226:	2900      	cmp	r1, #0
 8008228:	f47f af78 	bne.w	800811c <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 800822c:	2d00      	cmp	r5, #0
 800822e:	f040 81c7 	bne.w	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008232:	4a13      	ldr	r2, [pc, #76]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008234:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008238:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800823a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823e:	430b      	orrs	r3, r1
 8008240:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008242:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008246:	e76a      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8008248:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800824a:	2d00      	cmp	r5, #0
 800824c:	f000 8114 	beq.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008250:	462e      	mov	r6, r5
 8008252:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008256:	e4ee      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008258:	2101      	movs	r1, #1
 800825a:	f104 0008 	add.w	r0, r4, #8
 800825e:	f7ff fbbd 	bl	80079dc <RCCEx_PLL2_Config>
 8008262:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008264:	2d00      	cmp	r5, #0
 8008266:	f040 8149 	bne.w	80084fc <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800826a:	4a05      	ldr	r2, [pc, #20]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800826c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800826e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008270:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008274:	430b      	orrs	r3, r1
 8008276:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008278:	e9d4 3200 	ldrd	r3, r2, [r4]
 800827c:	e5b8      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008284:	2101      	movs	r1, #1
 8008286:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800828a:	f7ff fc21 	bl	8007ad0 <RCCEx_PLL3_Config>
 800828e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008290:	2d00      	cmp	r5, #0
 8008292:	f040 8173 	bne.w	800857c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008296:	4abb      	ldr	r2, [pc, #748]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008298:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800829c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800829e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082a6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082aa:	e718      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ac:	2102      	movs	r1, #2
 80082ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80082b2:	f7ff fc0d 	bl	8007ad0 <RCCEx_PLL3_Config>
 80082b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	f040 815b 	bne.w	8008574 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082be:	4ab1      	ldr	r2, [pc, #708]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80082c0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80082c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80082c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80082ca:	430b      	orrs	r3, r1
 80082cc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082d2:	e6f2      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082d4:	2101      	movs	r1, #1
 80082d6:	f104 0008 	add.w	r0, r4, #8
 80082da:	f7ff fb7f 	bl	80079dc <RCCEx_PLL2_Config>
 80082de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	f040 8107 	bne.w	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082e6:	4aa7      	ldr	r2, [pc, #668]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80082e8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80082ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80082f0:	430b      	orrs	r3, r1
 80082f2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082f8:	e610      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082fa:	2102      	movs	r1, #2
 80082fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008300:	f7ff fbe6 	bl	8007ad0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008304:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f aef7 	beq.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 800830e:	2601      	movs	r6, #1
 8008310:	e6f4      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008312:	2100      	movs	r1, #0
 8008314:	f104 0008 	add.w	r0, r4, #8
 8008318:	f7ff fb60 	bl	80079dc <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800831c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800831e:	2800      	cmp	r0, #0
 8008320:	f43f af46 	beq.w	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008324:	0797      	lsls	r7, r2, #30
 8008326:	4606      	mov	r6, r0
 8008328:	f57f af45 	bpl.w	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800832c:	2101      	movs	r1, #1
 800832e:	f104 0008 	add.w	r0, r4, #8
 8008332:	f7ff fb53 	bl	80079dc <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008336:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008338:	2800      	cmp	r0, #0
 800833a:	f43f af3c 	beq.w	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800833e:	0755      	lsls	r5, r2, #29
 8008340:	4606      	mov	r6, r0
 8008342:	f57f af3b 	bpl.w	80081bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008346:	2102      	movs	r1, #2
 8008348:	f104 0008 	add.w	r0, r4, #8
 800834c:	f7ff fb46 	bl	80079dc <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008350:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008352:	2800      	cmp	r0, #0
 8008354:	f43f af32 	beq.w	80081bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008358:	4606      	mov	r6, r0
 800835a:	0710      	lsls	r0, r2, #28
 800835c:	f57f af31 	bpl.w	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008360:	2100      	movs	r1, #0
 8008362:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008366:	f7ff fbb3 	bl	8007ad0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800836a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800836c:	2800      	cmp	r0, #0
 800836e:	f43f af28 	beq.w	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008372:	06d1      	lsls	r1, r2, #27
 8008374:	4606      	mov	r6, r0
 8008376:	f57f af27 	bpl.w	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800837a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800837e:	2101      	movs	r1, #1
 8008380:	4628      	mov	r0, r5
 8008382:	f7ff fba5 	bl	8007ad0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8008386:	2800      	cmp	r0, #0
 8008388:	f000 8130 	beq.w	80085ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800838c:	6863      	ldr	r3, [r4, #4]
 800838e:	069b      	lsls	r3, r3, #26
 8008390:	d550      	bpl.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8008392:	4606      	mov	r6, r0
 8008394:	e047      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008396:	4f7c      	ldr	r7, [pc, #496]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80083a0:	f7fb fec6 	bl	8004130 <HAL_GetTick>
 80083a4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a6:	e006      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a8:	f7fb fec2 	bl	8004130 <HAL_GetTick>
 80083ac:	eba0 0008 	sub.w	r0, r0, r8
 80083b0:	2864      	cmp	r0, #100	; 0x64
 80083b2:	f200 81e2 	bhi.w	800877a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	05da      	lsls	r2, r3, #23
 80083ba:	d5f5      	bpl.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 80083bc:	2d00      	cmp	r5, #0
 80083be:	f040 820b 	bne.w	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083c2:	4b70      	ldr	r3, [pc, #448]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80083c4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80083c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083ca:	4051      	eors	r1, r2
 80083cc:	f411 7f40 	tst.w	r1, #768	; 0x300
 80083d0:	d00d      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80083d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80083da:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80083de:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083e2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80083e6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80083e8:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083ea:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80083ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80083f2:	f000 81d3 	beq.w	800879c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083f6:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80083fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083fe:	f000 81e1 	beq.w	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 8008402:	4a60      	ldr	r2, [pc, #384]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008404:	6913      	ldr	r3, [r2, #16]
 8008406:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800840a:	6113      	str	r3, [r2, #16]
 800840c:	4a5d      	ldr	r2, [pc, #372]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800840e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008412:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008418:	430b      	orrs	r3, r1
 800841a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800841c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008420:	e54a      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008422:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008426:	2102      	movs	r1, #2
 8008428:	4628      	mov	r0, r5
 800842a:	f7ff fb51 	bl	8007ad0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800842e:	2800      	cmp	r0, #0
 8008430:	f43f aecd 	beq.w	80081ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 8008434:	2001      	movs	r0, #1
}
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800843a:	4a52      	ldr	r2, [pc, #328]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800843c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8008440:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008446:	430b      	orrs	r3, r1
 8008448:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800844a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800844e:	e446      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008450:	4a4c      	ldr	r2, [pc, #304]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008452:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008454:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008456:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800845a:	430b      	orrs	r3, r1
 800845c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800845e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008462:	e402      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008464:	4a47      	ldr	r2, [pc, #284]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008466:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008468:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	430b      	orrs	r3, r1
 8008470:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008472:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008476:	e46b      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008478:	4a42      	ldr	r2, [pc, #264]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800847a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800847c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800847e:	f023 0307 	bic.w	r3, r3, #7
 8008482:	430b      	orrs	r3, r1
 8008484:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008486:	e9d4 3200 	ldrd	r3, r2, [r4]
 800848a:	f7ff bbd4 	b.w	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800848e:	4a3d      	ldr	r2, [pc, #244]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008490:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008494:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008496:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800849a:	430b      	orrs	r3, r1
 800849c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800849e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084a2:	f7ff bbff 	b.w	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084a6:	2102      	movs	r1, #2
 80084a8:	f104 0008 	add.w	r0, r4, #8
 80084ac:	f7ff fa96 	bl	80079dc <RCCEx_PLL2_Config>
 80084b0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	d07a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084b6:	462e      	mov	r6, r5
 80084b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084bc:	e61b      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084be:	4a31      	ldr	r2, [pc, #196]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80084c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80084c8:	e43c      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ca:	4a2e      	ldr	r2, [pc, #184]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80084cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80084d4:	f7ff bbfd 	b.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d8:	4a2a      	ldr	r2, [pc, #168]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80084da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80084e2:	f7ff bbbc 	b.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e6:	4a27      	ldr	r2, [pc, #156]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80084e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80084f0:	f7ff bbd2 	b.w	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084f8:	462e      	mov	r6, r5
 80084fa:	e50f      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008500:	462e      	mov	r6, r5
 8008502:	e475      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008504:	4a1f      	ldr	r2, [pc, #124]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008506:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008508:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	430b      	orrs	r3, r1
 8008510:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008512:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008516:	e51b      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008518:	4a1a      	ldr	r2, [pc, #104]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800851a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800851e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008520:	f023 0307 	bic.w	r3, r3, #7
 8008524:	430b      	orrs	r3, r1
 8008526:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008528:	e9d4 3200 	ldrd	r3, r2, [r4]
 800852c:	e52e      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800852e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008532:	462e      	mov	r6, r5
 8008534:	e54c      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008536:	e9d4 3200 	ldrd	r3, r2, [r4]
 800853a:	462e      	mov	r6, r5
 800853c:	f7ff bbec 	b.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008540:	4a10      	ldr	r2, [pc, #64]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008542:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008544:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	430b      	orrs	r3, r1
 800854c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800854e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008552:	e4ae      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008554:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008558:	462e      	mov	r6, r5
 800855a:	e419      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800855c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008560:	462e      	mov	r6, r5
 8008562:	e579      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008564:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008568:	462e      	mov	r6, r5
 800856a:	e431      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800856c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008570:	462e      	mov	r6, r5
 8008572:	e54f      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008574:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008578:	462e      	mov	r6, r5
 800857a:	e59e      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800857c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008580:	462e      	mov	r6, r5
 8008582:	e5ac      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008584:	58024400 	.word	0x58024400
 8008588:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858c:	4a9b      	ldr	r2, [pc, #620]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800858e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008594:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8008596:	2d00      	cmp	r5, #0
 8008598:	f43f ae4b 	beq.w	8008232 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800859c:	e010      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859e:	4a97      	ldr	r2, [pc, #604]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80085a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d184      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085ac:	4a93      	ldr	r2, [pc, #588]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80085ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80085b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80085b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b6:	430b      	orrs	r3, r1
 80085b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085be:	e59a      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085c4:	462e      	mov	r6, r5
 80085c6:	e5aa      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c8:	4a8c      	ldr	r2, [pc, #560]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80085ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	f43f ae5f 	beq.w	8008296 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 80085d8:	e7d0      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085da:	f104 0008 	add.w	r0, r4, #8
 80085de:	f7ff f9fd 	bl	80079dc <RCCEx_PLL2_Config>
 80085e2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	f43f ae6a 	beq.w	80082be <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80085ea:	e7c3      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085ec:	6862      	ldr	r2, [r4, #4]
 80085ee:	e5eb      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085f0:	2102      	movs	r1, #2
 80085f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085f6:	f7ff fa6b 	bl	8007ad0 <RCCEx_PLL3_Config>
 80085fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	f43f acff 	beq.w	8008000 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8008602:	e7b3      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008604:	2102      	movs	r1, #2
 8008606:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800860a:	f7ff fa61 	bl	8007ad0 <RCCEx_PLL3_Config>
 800860e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008610:	2d00      	cmp	r5, #0
 8008612:	f43f ad17 	beq.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008616:	e7a1      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008618:	4a78      	ldr	r2, [pc, #480]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800861a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800861c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008620:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8008622:	2d00      	cmp	r5, #0
 8008624:	f43f ae21 	beq.w	800826a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8008628:	e768      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800862a:	2101      	movs	r1, #1
 800862c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008630:	f7ff fa4e 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008634:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008636:	2d00      	cmp	r5, #0
 8008638:	f43f aba1 	beq.w	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800863c:	e78a      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800863e:	2101      	movs	r1, #1
 8008640:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008644:	f7ff fa44 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008648:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800864a:	2d00      	cmp	r5, #0
 800864c:	f43f abb6 	beq.w	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008650:	e788      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008652:	2102      	movs	r1, #2
 8008654:	f104 0008 	add.w	r0, r4, #8
 8008658:	f7ff f9c0 	bl	80079dc <RCCEx_PLL2_Config>
 800865c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800865e:	2d00      	cmp	r5, #0
 8008660:	f43f ab51 	beq.w	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008664:	e767      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008666:	2102      	movs	r1, #2
 8008668:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800866c:	f7ff fa30 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008670:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008672:	2d00      	cmp	r5, #0
 8008674:	f43f aca2 	beq.w	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008678:	e759      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800867a:	2102      	movs	r1, #2
 800867c:	f104 0008 	add.w	r0, r4, #8
 8008680:	f7ff f9ac 	bl	80079dc <RCCEx_PLL2_Config>
 8008684:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008686:	2d00      	cmp	r5, #0
 8008688:	f43f af5a 	beq.w	8008540 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800868c:	e40e      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800868e:	2102      	movs	r1, #2
 8008690:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008694:	f7ff fa1c 	bl	8007ad0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008698:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800869c:	2800      	cmp	r0, #0
 800869e:	f43f ace3 	beq.w	8008068 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 80086a2:	2601      	movs	r6, #1
 80086a4:	e4e0      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086a6:	2102      	movs	r1, #2
 80086a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80086ac:	f7ff fa10 	bl	8007ad0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086b0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f43f ace7 	beq.w	8008088 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 80086ba:	2601      	movs	r6, #1
 80086bc:	e4e4      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086be:	2100      	movs	r1, #0
 80086c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80086c4:	f7ff fa04 	bl	8007ad0 <RCCEx_PLL3_Config>
 80086c8:	4605      	mov	r5, r0
        break;
 80086ca:	f7ff bae5 	b.w	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ce:	2102      	movs	r1, #2
 80086d0:	3028      	adds	r0, #40	; 0x28
 80086d2:	f7ff f9fd 	bl	8007ad0 <RCCEx_PLL3_Config>
 80086d6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80086d8:	2e00      	cmp	r6, #0
 80086da:	f43f aa8f 	beq.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x38>
 80086de:	f7ff ba9a 	b.w	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e2:	4a46      	ldr	r2, [pc, #280]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 80086e4:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80086ee:	e5ac      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f0:	2100      	movs	r1, #0
 80086f2:	f104 0008 	add.w	r0, r4, #8
 80086f6:	f7ff f971 	bl	80079dc <RCCEx_PLL2_Config>
 80086fa:	4605      	mov	r5, r0
        break;
 80086fc:	e5a5      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086fe:	2100      	movs	r1, #0
 8008700:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008704:	f7ff f9e4 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008708:	4605      	mov	r5, r0
        break;
 800870a:	f7ff bb1b 	b.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800870e:	2100      	movs	r1, #0
 8008710:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008714:	f7ff f9dc 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008718:	4605      	mov	r5, r0
        break;
 800871a:	f7ff bada 	b.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800871e:	2100      	movs	r1, #0
 8008720:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008724:	f7ff f9d4 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008728:	4605      	mov	r5, r0
        break;
 800872a:	e58e      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800872c:	2100      	movs	r1, #0
 800872e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008732:	f7ff f9cd 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008736:	4605      	mov	r5, r0
        break;
 8008738:	f7ff ba91 	b.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800873c:	2101      	movs	r1, #1
 800873e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008742:	f7ff f9c5 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008746:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008748:	2d00      	cmp	r5, #0
 800874a:	f43f aee5 	beq.w	8008518 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800874e:	e41a      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008750:	2101      	movs	r1, #1
 8008752:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008756:	f7ff f9bb 	bl	8007ad0 <RCCEx_PLL3_Config>
 800875a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800875c:	2d00      	cmp	r5, #0
 800875e:	f43f aed1 	beq.w	8008504 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8008762:	f7ff bbf2 	b.w	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008766:	2101      	movs	r1, #1
 8008768:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800876c:	f7ff f9b0 	bl	8007ad0 <RCCEx_PLL3_Config>
 8008770:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008772:	2d00      	cmp	r5, #0
 8008774:	f43f adb7 	beq.w	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8008778:	e6bc      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 800877a:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800877c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008780:	4635      	mov	r5, r6
 8008782:	f7ff bb99 	b.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8008786:	2601      	movs	r6, #1
 8008788:	f7ff ba47 	b.w	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800878e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008796:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8008798:	f7ff ba36 	b.w	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800879c:	f7fb fcc8 	bl	8004130 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087a0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 80087a4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a6:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087aa:	e004      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ac:	f7fb fcc0 	bl	8004130 <HAL_GetTick>
 80087b0:	1bc0      	subs	r0, r0, r7
 80087b2:	4548      	cmp	r0, r9
 80087b4:	d8e1      	bhi.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80087ba:	079b      	lsls	r3, r3, #30
 80087bc:	d5f6      	bpl.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087be:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80087c2:	e618      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80087c4:	490d      	ldr	r1, [pc, #52]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80087c6:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 80087c8:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80087cc:	690a      	ldr	r2, [r1, #16]
 80087ce:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80087d2:	4313      	orrs	r3, r2
 80087d4:	610b      	str	r3, [r1, #16]
 80087d6:	e619      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087dc:	462e      	mov	r6, r5
 80087de:	f7ff bb6b 	b.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 80087e2:	2601      	movs	r6, #1
 80087e4:	4635      	mov	r5, r6
 80087e6:	f7ff bb64 	b.w	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80087ea:	2601      	movs	r6, #1
 80087ec:	4635      	mov	r5, r6
 80087ee:	f7ff bbcd 	b.w	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087f2:	2601      	movs	r6, #1
 80087f4:	4635      	mov	r5, r6
 80087f6:	f7ff bbab 	b.w	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80087fa:	bf00      	nop
 80087fc:	58024400 	.word	0x58024400
 8008800:	00ffffcf 	.word	0x00ffffcf

08008804 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008804:	4a50      	ldr	r2, [pc, #320]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8008806:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008808:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800880a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800880c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800880e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008812:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008816:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8008818:	d05d      	beq.n	80088d6 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800881a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800881e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008822:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008826:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800882a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800882c:	ee07 4a90 	vmov	s15, r4
 8008830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008834:	d003      	beq.n	800883e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008836:	2902      	cmp	r1, #2
 8008838:	d078      	beq.n	800892c <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 800883a:	2900      	cmp	r1, #0
 800883c:	d050      	beq.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800894c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800884a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800884c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008850:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008864:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008868:	eee7 7a06 	vfma.f32	s15, s14, s12
 800886c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008870:	4a35      	ldr	r2, [pc, #212]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8008872:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008876:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008878:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008884:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008886:	ee77 7a86 	vadd.f32	s15, s15, s12
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008892:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008896:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008898:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80088b0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088b4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80088b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80088ba:	ee07 3a10 	vmov	s14, r3
 80088be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80088c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ce:	ee17 3a90 	vmov	r3, s15
 80088d2:	6083      	str	r3, [r0, #8]
}
 80088d4:	4770      	bx	lr
 80088d6:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088d8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088dc:	6083      	str	r3, [r0, #8]
}
 80088de:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e0:	6811      	ldr	r1, [r2, #0]
 80088e2:	0689      	lsls	r1, r1, #26
 80088e4:	d529      	bpl.n	800893a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088e6:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ec:	4919      	ldr	r1, [pc, #100]	; (8008954 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088f4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088fc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008900:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008904:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008906:	ee06 3a10 	vmov	s12, r3
 800890a:	ee05 1a90 	vmov	s11, r1
 800890e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008912:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008916:	ee36 6a26 	vadd.f32	s12, s12, s13
 800891a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800891e:	eef0 7a46 	vmov.f32	s15, s12
 8008922:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008926:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800892a:	e7a1      	b.n	8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008938:	e787      	b.n	800884a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800895c <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8008942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008946:	e780      	b.n	800884a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008948:	58024400 	.word	0x58024400
 800894c:	4a742400 	.word	0x4a742400
 8008950:	39000000 	.word	0x39000000
 8008954:	03d09000 	.word	0x03d09000
 8008958:	4bbebc20 	.word	0x4bbebc20
 800895c:	4c742400 	.word	0x4c742400

08008960 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008960:	4a50      	ldr	r2, [pc, #320]	; (8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8008962:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008964:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008966:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008968:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800896a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800896e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008972:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8008974:	d05d      	beq.n	8008a32 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008976:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800897a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800897e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008982:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008986:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008988:	ee07 4a90 	vmov	s15, r4
 800898c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008990:	d003      	beq.n	800899a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008992:	2902      	cmp	r1, #2
 8008994:	d078      	beq.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8008996:	2900      	cmp	r1, #0
 8008998:	d050      	beq.n	8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80089a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80089a8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80089ac:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80089b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80089bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80089c4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80089c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80089cc:	4a35      	ldr	r2, [pc, #212]	; (8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80089ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80089d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80089d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80089e0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80089e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80089e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80089ee:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80089f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80089f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80089f8:	ee07 3a90 	vmov	s15, r3
 80089fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a00:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a08:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008a0c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a12:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008a16:	ee07 3a10 	vmov	s14, r3
 8008a1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008a1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2a:	ee17 3a90 	vmov	r3, s15
 8008a2e:	6083      	str	r3, [r0, #8]
}
 8008a30:	4770      	bx	lr
 8008a32:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a34:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a38:	6083      	str	r3, [r0, #8]
}
 8008a3a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3c:	6811      	ldr	r1, [r2, #0]
 8008a3e:	0689      	lsls	r1, r1, #26
 8008a40:	d529      	bpl.n	8008a96 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a42:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a44:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a48:	4919      	ldr	r1, [pc, #100]	; (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a50:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a58:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a60:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a62:	ee06 3a10 	vmov	s12, r3
 8008a66:	ee05 1a90 	vmov	s11, r1
 8008a6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008a6e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008a72:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008a76:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008a7a:	eef0 7a46 	vmov.f32	s15, s12
 8008a7e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008a82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008a86:	e7a1      	b.n	80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8008a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a94:	e787      	b.n	80089a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8008a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aa2:	e780      	b.n	80089a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	4a742400 	.word	0x4a742400
 8008aac:	39000000 	.word	0x39000000
 8008ab0:	03d09000 	.word	0x03d09000
 8008ab4:	4bbebc20 	.word	0x4bbebc20
 8008ab8:	4c742400 	.word	0x4c742400

08008abc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008abc:	4a51      	ldr	r2, [pc, #324]	; (8008c04 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 8008abe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ac2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ac4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8008ac6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008aca:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ace:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8008ad0:	d05e      	beq.n	8008b90 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ad2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ad6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ada:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ade:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008ae2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ae4:	ee07 4a90 	vmov	s15, r4
 8008ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008aec:	f000 8082 	beq.w	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8008af0:	2902      	cmp	r1, #2
 8008af2:	d078      	beq.n	8008be6 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d050      	beq.n	8008b9a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008b06:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008b0a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008c0c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008b22:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008b26:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008b2a:	4a36      	ldr	r2, [pc, #216]	; (8008c04 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8008b2c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008b30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008b32:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008b3e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008b40:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b48:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008b4c:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008b50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008b52:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b5e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008b6a:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008b6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008b70:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008b74:	ee07 3a10 	vmov	s14, r3
 8008b78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 3a90 	vmov	r3, s15
 8008b8c:	6083      	str	r3, [r0, #8]
}
 8008b8e:	4770      	bx	lr
 8008b90:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b92:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008b96:	6083      	str	r3, [r0, #8]
}
 8008b98:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b9a:	6811      	ldr	r1, [r2, #0]
 8008b9c:	0689      	lsls	r1, r1, #26
 8008b9e:	d5ab      	bpl.n	8008af8 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba0:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ba2:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba6:	491a      	ldr	r1, [pc, #104]	; (8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bac:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bae:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb6:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8008c0c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bbe:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc0:	ee06 3a10 	vmov	s12, r3
 8008bc4:	ee05 1a90 	vmov	s11, r1
 8008bc8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008bcc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008bd0:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008bd4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008bd8:	eef0 7a46 	vmov.f32	s15, s12
 8008bdc:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008be4:	e7a1      	b.n	8008b2a <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8008bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bf2:	e787      	b.n	8008b04 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008c18 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8008bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c00:	e780      	b.n	8008b04 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
 8008c08:	4c742400 	.word	0x4c742400
 8008c0c:	39000000 	.word	0x39000000
 8008c10:	03d09000 	.word	0x03d09000
 8008c14:	4bbebc20 	.word	0x4bbebc20
 8008c18:	4a742400 	.word	0x4a742400

08008c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c1c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8008c20:	430b      	orrs	r3, r1
{
 8008c22:	b500      	push	{lr}
 8008c24:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c26:	f000 8083 	beq.w	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c2a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	d038      	beq.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008c32:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8008c36:	430b      	orrs	r3, r1
 8008c38:	f000 80e6 	beq.w	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c3c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008c40:	430b      	orrs	r3, r1
 8008c42:	f000 8089 	beq.w	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c46:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	d060      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c4e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008c52:	430b      	orrs	r3, r1
 8008c54:	f000 8112 	beq.w	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c58:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	f000 80a3 	beq.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c62:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8008c66:	430b      	orrs	r3, r1
 8008c68:	f000 80fa 	beq.w	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008c6c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008c70:	430b      	orrs	r3, r1
 8008c72:	f000 8143 	beq.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c76:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8008c7a:	4308      	orrs	r0, r1
 8008c7c:	d137      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c7e:	4a9a      	ldr	r2, [pc, #616]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8008c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c8a:	f000 8084 	beq.w	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c92:	f000 8157 	beq.w	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008c96:	bb53      	cbnz	r3, 8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c98:	6810      	ldr	r0, [r2, #0]
 8008c9a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008c9e:	d044      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8008ca0:	4892      	ldr	r0, [pc, #584]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008ca2:	e042      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ca4:	4a90      	ldr	r2, [pc, #576]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ca6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ca8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8008cac:	2b80      	cmp	r3, #128	; 0x80
 8008cae:	f000 80a6 	beq.w	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008cb2:	d920      	bls.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8008cb6:	d037      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cbc:	d117      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cbe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc0:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc6:	0749      	lsls	r1, r1, #29
 8008cc8:	d502      	bpl.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 80c2 	beq.w	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cd0:	4a85      	ldr	r2, [pc, #532]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	05d0      	lsls	r0, r2, #23
 8008cd6:	d503      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8008cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cdc:	f000 8102 	beq.w	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ce0:	4a81      	ldr	r2, [pc, #516]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	0391      	lsls	r1, r2, #14
 8008ce6:	d502      	bpl.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cec:	d0d8      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8008cee:	2000      	movs	r0, #0
}
 8008cf0:	b005      	add	sp, #20
 8008cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d04d      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d1f7      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cfe:	6810      	ldr	r0, [r2, #0]
 8008d00:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008d04:	d011      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d06:	a801      	add	r0, sp, #4
 8008d08:	f7ff fd7c 	bl	8008804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	e00c      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008d10:	4a75      	ldr	r2, [pc, #468]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008d14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8008d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1c:	d06f      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d1e:	d938      	bls.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d24:	f040 8088 	bne.w	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d28:	4871      	ldr	r0, [pc, #452]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8008d2a:	b005      	add	sp, #20
 8008d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d30:	4b6d      	ldr	r3, [pc, #436]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d34:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d8d8      	bhi.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008de7 	.word	0x08008de7
 8008d48:	08008dc3 	.word	0x08008dc3
 8008d4c:	08008dd3 	.word	0x08008dd3
 8008d50:	08008d29 	.word	0x08008d29
 8008d54:	08008dcf 	.word	0x08008dcf
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008d58:	4a63      	ldr	r2, [pc, #396]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d5a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008d5c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008d60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d64:	d04b      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d66:	d944      	bls.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8008d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d6c:	d0dc      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d72:	d1bc      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d76:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d7c:	0752      	lsls	r2, r2, #29
 8008d7e:	d5a7      	bpl.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1a5      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d84:	4b58      	ldr	r3, [pc, #352]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d86:	485b      	ldr	r0, [pc, #364]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d8e:	40d8      	lsrs	r0, r3
 8008d90:	e7cb      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d154      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d96:	6810      	ldr	r0, [r2, #0]
 8008d98:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008d9c:	d0c5      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d9e:	a801      	add	r0, sp, #4
 8008da0:	f7ff fe8c 	bl	8008abc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008da4:	9802      	ldr	r0, [sp, #8]
 8008da6:	e7c0      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008da8:	4a4f      	ldr	r2, [pc, #316]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008daa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db4:	f000 80d0 	beq.w	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8008db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dbc:	d0da      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d195      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc2:	4b49      	ldr	r3, [pc, #292]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008dca:	d0ae      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008dcc:	e79b      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dce:	4a46      	ldr	r2, [pc, #280]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dd0:	e775      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd2:	4b45      	ldr	r3, [pc, #276]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008dda:	d0a6      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ddc:	a801      	add	r0, sp, #4
 8008dde:	f7ff fdbf 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008de2:	9801      	ldr	r0, [sp, #4]
 8008de4:	e7a1      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de6:	4b40      	ldr	r3, [pc, #256]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008dee:	d09c      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008df0:	e7d5      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0cf      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dfa:	d080      	beq.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008dfc:	e777      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dfe:	6810      	ldr	r0, [r2, #0]
 8008e00:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008e04:	d091      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008e06:	e7e9      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008e08:	4a37      	ldr	r2, [pc, #220]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e0a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008e0c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e14:	d0f3      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008e16:	d806      	bhi.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0bc      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e20:	f43f af6d 	beq.w	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008e24:	e763      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008e26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e2a:	f43f af7d 	beq.w	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e32:	f43f af44 	beq.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008e36:	e75a      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8008e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e3c:	d09a      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008e3e:	e756      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e44:	f43f af5b 	beq.w	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008e48:	e751      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e4a:	6810      	ldr	r0, [r2, #0]
 8008e4c:	f010 0004 	ands.w	r0, r0, #4
 8008e50:	f43f af6b 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e54:	6813      	ldr	r3, [r2, #0]
 8008e56:	4827      	ldr	r0, [pc, #156]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008e58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e5c:	40d8      	lsrs	r0, r3
 8008e5e:	e764      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e60:	4b21      	ldr	r3, [pc, #132]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8008e64:	03d2      	lsls	r2, r2, #15
 8008e66:	d5bf      	bpl.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008e6e:	f43f af5c 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e72:	a801      	add	r0, sp, #4
 8008e74:	f7ff fcc6 	bl	8008804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e78:	9803      	ldr	r0, [sp, #12]
 8008e7a:	e756      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008e7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e7e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e80:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8008e84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e88:	d0df      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008e8a:	d810      	bhi.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e90:	d058      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e96:	d118      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e98:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008ea0:	f43f af43 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ea4:	a801      	add	r0, sp, #4
 8008ea6:	f7ff fd5b 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eaa:	9802      	ldr	r0, [sp, #8]
 8008eac:	e73d      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eb2:	d012      	beq.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8008eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eb8:	f47f af19 	bne.w	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008ec4:	f43f af31 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008ec8:	e6ea      	b.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f af0f 	bne.w	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8008ed0:	b005      	add	sp, #20
 8008ed2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8008ed6:	f7fe bd39 	b.w	800794c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eda:	6810      	ldr	r0, [r2, #0]
 8008edc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008ee0:	f43f af23 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8008ee4:	4804      	ldr	r0, [pc, #16]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008ee6:	e720      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	017d7840 	.word	0x017d7840
 8008ef0:	00bb8000 	.word	0x00bb8000
 8008ef4:	03d09000 	.word	0x03d09000
 8008ef8:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8008f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f08:	d037      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8008f0a:	d814      	bhi.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8008f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f10:	d03f      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f16:	d0bf      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f aee8 	bne.w	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f1e:	f7fe fcd5 	bl	80078cc <HAL_RCC_GetHCLKFreq>
 8008f22:	4b1f      	ldr	r3, [pc, #124]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008f24:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008f2c:	5cd3      	ldrb	r3, [r2, r3]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	40d8      	lsrs	r0, r3
        break;
 8008f34:	e6f9      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3a:	d017      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8008f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f40:	d0bc      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008f42:	e6d4      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f44:	6810      	ldr	r0, [r2, #0]
 8008f46:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008f4a:	f43f aeee 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f4e:	a801      	add	r0, sp, #4
 8008f50:	f7ff fc58 	bl	8008804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f54:	9802      	ldr	r0, [sp, #8]
 8008f56:	e6e8      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f58:	6810      	ldr	r0, [r2, #0]
 8008f5a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008f5e:	f43f aee4 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f62:	a801      	add	r0, sp, #4
 8008f64:	f7ff fcfc 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f68:	9803      	ldr	r0, [sp, #12]
 8008f6a:	e6de      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008f74:	f43f aed9 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008f78:	e7b4      	b.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f010 0004 	ands.w	r0, r0, #4
 8008f82:	f43f aed2 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4807      	ldr	r0, [pc, #28]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8008f8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008f8e:	40d8      	lsrs	r0, r3
 8008f90:	e6cb      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f92:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008f9a:	f43f aec6 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008f9e:	e7d6      	b.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	0801c288 	.word	0x0801c288
 8008fa8:	03d09000 	.word	0x03d09000

08008fac <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d03c      	beq.n	800902a <HAL_RNG_Init+0x7e>
{
 8008fb0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008fb2:	7a43      	ldrb	r3, [r0, #9]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d031      	beq.n	8009022 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008fbe:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008fc0:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008fc2:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008fc4:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	f023 0320 	bic.w	r3, r3, #32
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	f043 0304 	orr.w	r3, r3, #4
 8008fd8:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	0658      	lsls	r0, r3, #25
 8008fe0:	d503      	bpl.n	8008fea <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008fe2:	2304      	movs	r3, #4
    return HAL_ERROR;
 8008fe4:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8008fe6:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8008fea:	f7fb f8a1 	bl	8004130 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008fee:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008ff0:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	0759      	lsls	r1, r3, #29
 8008ff6:	d50e      	bpl.n	8009016 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008ff8:	f7fb f89a 	bl	8004130 <HAL_GetTick>
 8008ffc:	1b43      	subs	r3, r0, r5
 8008ffe:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009000:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009002:	d9f6      	bls.n	8008ff2 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	0752      	lsls	r2, r2, #29
 8009008:	d5f3      	bpl.n	8008ff2 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800900a:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800900c:	2302      	movs	r3, #2
        return HAL_ERROR;
 800900e:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 8009010:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009012:	60e3      	str	r3, [r4, #12]
}
 8009014:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8009018:	2201      	movs	r2, #1
  return HAL_OK;
 800901a:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800901c:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800901e:	60e3      	str	r3, [r4, #12]
}
 8009020:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8009022:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8009024:	f7f9 feba 	bl	8002d9c <HAL_RNG_MspInit>
 8009028:	e7c9      	b.n	8008fbe <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800902a:	2001      	movs	r0, #1
}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop

08009030 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009032:	7a03      	ldrb	r3, [r0, #8]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d027      	beq.n	8009088 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009038:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800903a:	2201      	movs	r2, #1
 800903c:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800903e:	4293      	cmp	r3, r2
 8009040:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 8009042:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8009044:	d006      	beq.n	8009054 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009046:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8009048:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800904a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800904c:	2300      	movs	r3, #0
 800904e:	7223      	strb	r3, [r4, #8]

  return status;
}
 8009050:	4630      	mov	r0, r6
 8009052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8009054:	2302      	movs	r3, #2
 8009056:	460d      	mov	r5, r1
 8009058:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800905a:	f7fb f869 	bl	8004130 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800905e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009060:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	07d2      	lsls	r2, r2, #31
 8009066:	d412      	bmi.n	800908e <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009068:	f7fb f862 	bl	8004130 <HAL_GetTick>
 800906c:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800906e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009070:	2802      	cmp	r0, #2
 8009072:	d9f6      	bls.n	8009062 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	f012 0201 	ands.w	r2, r2, #1
 800907a:	d1f2      	bne.n	8009062 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800907c:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800907e:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 8009080:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 8009082:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009084:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8009086:	e7e3      	b.n	8009050 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8009088:	2602      	movs	r6, #2
}
 800908a:	4630      	mov	r0, r6
 800908c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800908e:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8009090:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8009092:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8009094:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8009096:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8009098:	7262      	strb	r2, [r4, #9]
 800909a:	e7d7      	b.n	800904c <HAL_RNG_GenerateRandomNumber+0x1c>

0800909c <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800909e:	4ba3      	ldr	r3, [pc, #652]	; (800932c <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 80090a0:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80090a2:	6802      	ldr	r2, [r0, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d01c      	beq.n	80090e2 <HAL_SAI_Init.part.0+0x46>
 80090a8:	3320      	adds	r3, #32
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d019      	beq.n	80090e2 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80090ae:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d04d      	beq.n	8009152 <HAL_SAI_Init.part.0+0xb6>
 80090b6:	3320      	adds	r3, #32
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d04a      	beq.n	8009152 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80090bc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80090c0:	429a      	cmp	r2, r3
 80090c2:	f000 812f 	beq.w	8009324 <HAL_SAI_Init.part.0+0x288>
 80090c6:	3320      	adds	r3, #32
 80090c8:	429a      	cmp	r2, r3
 80090ca:	f000 812b 	beq.w	8009324 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80090ce:	4b98      	ldr	r3, [pc, #608]	; (8009330 <HAL_SAI_Init.part.0+0x294>)
 80090d0:	429a      	cmp	r2, r3
 80090d2:	f000 8129 	beq.w	8009328 <HAL_SAI_Init.part.0+0x28c>
 80090d6:	3320      	adds	r3, #32
 80090d8:	429a      	cmp	r2, r3
 80090da:	f000 8125 	beq.w	8009328 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80090de:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 80090e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 80090e2:	4c94      	ldr	r4, [pc, #592]	; (8009334 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80090e4:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 80090e8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d037      	beq.n	8009160 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80090f0:	4b91      	ldr	r3, [pc, #580]	; (8009338 <HAL_SAI_Init.part.0+0x29c>)
 80090f2:	4992      	ldr	r1, [pc, #584]	; (800933c <HAL_SAI_Init.part.0+0x2a0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80090fa:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80090fc:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80090fe:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009102:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8009104:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009106:	2b00      	cmp	r3, #0
 8009108:	d031      	beq.n	800916e <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800910a:	682a      	ldr	r2, [r5, #0]
    count--;
 800910c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8009114:	d1f7      	bne.n	8009106 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 8009116:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8009118:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 800911a:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800911c:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8009120:	f000 8150 	beq.w	80093c4 <HAL_SAI_Init.part.0+0x328>
 8009124:	428b      	cmp	r3, r1
 8009126:	bf19      	ittee	ne
 8009128:	460e      	movne	r6, r1
 800912a:	2003      	movne	r0, #3
 800912c:	2023      	moveq	r0, #35	; 0x23
 800912e:	2622      	moveq	r6, #34	; 0x22
 8009130:	bf15      	itete	ne
 8009132:	2701      	movne	r7, #1
 8009134:	2721      	moveq	r7, #33	; 0x21
 8009136:	2100      	movne	r1, #0
 8009138:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 800913a:	68ab      	ldr	r3, [r5, #8]
 800913c:	3b01      	subs	r3, #1
 800913e:	2b04      	cmp	r3, #4
 8009140:	f200 8180 	bhi.w	8009444 <HAL_SAI_Init.part.0+0x3a8>
 8009144:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009148:	001c00e3 	.word	0x001c00e3
 800914c:	001b00ea 	.word	0x001b00ea
 8009150:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
 8009152:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8009156:	4c7a      	ldr	r4, [pc, #488]	; (8009340 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8009158:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1c7      	bne.n	80090f0 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 8009160:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 8009162:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8009166:	f7f9 fe83 	bl	8002e70 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800916a:	682a      	ldr	r2, [r5, #0]
 800916c:	e7c0      	b.n	80090f0 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800916e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 8009172:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009178:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 800917c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800917e:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009180:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009184:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009186:	6a2b      	ldr	r3, [r5, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d046      	beq.n	800921a <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	4967      	ldr	r1, [pc, #412]	; (800932c <HAL_SAI_Init.part.0+0x290>)
 8009190:	428b      	cmp	r3, r1
 8009192:	f000 812b 	beq.w	80093ec <HAL_SAI_Init.part.0+0x350>
 8009196:	3120      	adds	r1, #32
 8009198:	428b      	cmp	r3, r1
 800919a:	f000 8127 	beq.w	80093ec <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800919e:	4969      	ldr	r1, [pc, #420]	; (8009344 <HAL_SAI_Init.part.0+0x2a8>)
 80091a0:	428b      	cmp	r3, r1
 80091a2:	f000 8133 	beq.w	800940c <HAL_SAI_Init.part.0+0x370>
 80091a6:	3120      	adds	r1, #32
 80091a8:	428b      	cmp	r3, r1
 80091aa:	f000 812f 	beq.w	800940c <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80091ae:	4966      	ldr	r1, [pc, #408]	; (8009348 <HAL_SAI_Init.part.0+0x2ac>)
 80091b0:	428b      	cmp	r3, r1
 80091b2:	f000 8123 	beq.w	80093fc <HAL_SAI_Init.part.0+0x360>
 80091b6:	3120      	adds	r1, #32
 80091b8:	428b      	cmp	r3, r1
 80091ba:	f000 811f 	beq.w	80093fc <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 80091be:	495c      	ldr	r1, [pc, #368]	; (8009330 <HAL_SAI_Init.part.0+0x294>)
 80091c0:	428b      	cmp	r3, r1
 80091c2:	f000 8135 	beq.w	8009430 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
 80091c6:	4961      	ldr	r1, [pc, #388]	; (800934c <HAL_SAI_Init.part.0+0x2b0>)
 80091c8:	428b      	cmp	r3, r1
 80091ca:	f000 812a 	beq.w	8009422 <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80091ce:	69ab      	ldr	r3, [r5, #24]
 80091d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091d4:	f000 80fb 	beq.w	80093ce <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80091d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80091da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80091de:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80091e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80091e4:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80091e8:	bf0c      	ite	eq
 80091ea:	2202      	moveq	r2, #2
 80091ec:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80091ee:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80091f2:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80091f4:	0212      	lsls	r2, r2, #8
 80091f6:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 80091fa:	4a55      	ldr	r2, [pc, #340]	; (8009350 <HAL_SAI_Init.part.0+0x2b4>)
 80091fc:	fba2 0203 	umull	r0, r2, r2, r3
 8009200:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8009202:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8009206:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800920a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800920c:	bf08      	it	eq
 800920e:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009210:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8009212:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009214:	d101      	bne.n	800921a <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009216:	0852      	lsrs	r2, r2, #1
 8009218:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800921a:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800921c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800921e:	f033 0302 	bics.w	r3, r3, #2
 8009222:	f040 80c8 	bne.w	80093b6 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009226:	3f01      	subs	r7, #1
 8009228:	bf18      	it	ne
 800922a:	2701      	movne	r7, #1
 800922c:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800922e:	f7fa ff97 	bl	8004160 <HAL_GetREVID>
 8009232:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009236:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009238:	f0c0 80a9 	bcc.w	800938e <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800923c:	6811      	ldr	r1, [r2, #0]
 800923e:	4b45      	ldr	r3, [pc, #276]	; (8009354 <HAL_SAI_Init.part.0+0x2b8>)
 8009240:	400b      	ands	r3, r1
 8009242:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009244:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009246:	e9d5 2300 	ldrd	r2, r3, [r5]
 800924a:	430b      	orrs	r3, r1
 800924c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800924e:	430b      	orrs	r3, r1
 8009250:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8009252:	430b      	orrs	r3, r1
 8009254:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8009256:	430b      	orrs	r3, r1
 8009258:	6969      	ldr	r1, [r5, #20]
 800925a:	430b      	orrs	r3, r1
 800925c:	69a9      	ldr	r1, [r5, #24]
 800925e:	430b      	orrs	r3, r1
 8009260:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8009262:	430b      	orrs	r3, r1
 8009264:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009266:	430b      	orrs	r3, r1
 8009268:	6811      	ldr	r1, [r2, #0]
 800926a:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800926c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800926e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8009272:	4333      	orrs	r3, r6
 8009274:	433b      	orrs	r3, r7
 8009276:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009278:	682a      	ldr	r2, [r5, #0]
 800927a:	4b37      	ldr	r3, [pc, #220]	; (8009358 <HAL_SAI_Init.part.0+0x2bc>)
 800927c:	6851      	ldr	r1, [r2, #4]
 800927e:	400b      	ands	r3, r1
 8009280:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009282:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009284:	69eb      	ldr	r3, [r5, #28]
 8009286:	682a      	ldr	r2, [r5, #0]
 8009288:	430b      	orrs	r3, r1
 800928a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800928c:	430b      	orrs	r3, r1
 800928e:	6851      	ldr	r1, [r2, #4]
 8009290:	430b      	orrs	r3, r1
 8009292:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009294:	682a      	ldr	r2, [r5, #0]
 8009296:	4b31      	ldr	r3, [pc, #196]	; (800935c <HAL_SAI_Init.part.0+0x2c0>)
 8009298:	6891      	ldr	r1, [r2, #8]
 800929a:	400b      	ands	r3, r1
 800929c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800929e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80092a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a2:	6829      	ldr	r1, [r5, #0]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80092a8:	6888      	ldr	r0, [r1, #8]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80092ae:	4303      	orrs	r3, r0
 80092b0:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80092b2:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80092b6:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80092b8:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80092ba:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80092bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092c0:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80092c2:	682a      	ldr	r2, [r5, #0]
 80092c4:	68d3      	ldr	r3, [r2, #12]
 80092c6:	4003      	ands	r3, r0
 80092c8:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80092ca:	6829      	ldr	r1, [r5, #0]
 80092cc:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
 80092d0:	68ca      	ldr	r2, [r1, #12]
 80092d2:	4303      	orrs	r3, r0
 80092d4:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80092d6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80092d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80092dc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80092de:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80092e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80092e4:	4a11      	ldr	r2, [pc, #68]	; (800932c <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80092e6:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d03c      	beq.n	8009368 <HAL_SAI_Init.part.0+0x2cc>
 80092ee:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80092f2:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d036      	beq.n	8009368 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80092fc:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80092fe:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 8009302:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8009304:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8009308:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800930e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009312:	e737      	b.n	8009184 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009314:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009316:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800931a:	e733      	b.n	8009184 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800931c:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800931e:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8009322:	e72f      	b.n	8009184 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 8009324:	4c0e      	ldr	r4, [pc, #56]	; (8009360 <HAL_SAI_Init.part.0+0x2c4>)
 8009326:	e6dd      	b.n	80090e4 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 8009328:	4c0e      	ldr	r4, [pc, #56]	; (8009364 <HAL_SAI_Init.part.0+0x2c8>)
 800932a:	e6db      	b.n	80090e4 <HAL_SAI_Init.part.0+0x48>
 800932c:	40015804 	.word	0x40015804
 8009330:	58005404 	.word	0x58005404
 8009334:	40015800 	.word	0x40015800
 8009338:	200008f4 	.word	0x200008f4
 800933c:	95cbec1b 	.word	0x95cbec1b
 8009340:	40015c00 	.word	0x40015c00
 8009344:	40015c04 	.word	0x40015c04
 8009348:	40016004 	.word	0x40016004
 800934c:	58005424 	.word	0x58005424
 8009350:	cccccccd 	.word	0xcccccccd
 8009354:	f005c010 	.word	0xf005c010
 8009358:	ffff1ff0 	.word	0xffff1ff0
 800935c:	fff88000 	.word	0xfff88000
 8009360:	40016000 	.word	0x40016000
 8009364:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009370:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8009374:	2b01      	cmp	r3, #1
 8009376:	d1c0      	bne.n	80092fa <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009378:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800937c:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800937e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009382:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	6463      	str	r3, [r4, #68]	; 0x44
 800938c:	e7b5      	b.n	80092fa <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800938e:	6811      	ldr	r1, [r2, #0]
 8009390:	4b2d      	ldr	r3, [pc, #180]	; (8009448 <HAL_SAI_Init.part.0+0x3ac>)
 8009392:	400b      	ands	r3, r1
 8009394:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009396:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800939c:	430b      	orrs	r3, r1
 800939e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80093a8:	430b      	orrs	r3, r1
 80093aa:	6969      	ldr	r1, [r5, #20]
 80093ac:	430b      	orrs	r3, r1
 80093ae:	69a9      	ldr	r1, [r5, #24]
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80093b4:	e757      	b.n	8009266 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80093b6:	f1a7 0701 	sub.w	r7, r7, #1
 80093ba:	fab7 f787 	clz	r7, r7
 80093be:	097f      	lsrs	r7, r7, #5
 80093c0:	027f      	lsls	r7, r7, #9
 80093c2:	e734      	b.n	800922e <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
 80093c4:	2013      	movs	r0, #19
 80093c6:	2612      	movs	r6, #18
 80093c8:	2711      	movs	r7, #17
 80093ca:	2110      	movs	r1, #16
 80093cc:	e6b5      	b.n	800913a <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80093ce:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80093d0:	2904      	cmp	r1, #4
 80093d2:	d035      	beq.n	8009440 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80093d4:	2908      	cmp	r1, #8
 80093d6:	d021      	beq.n	800941c <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 80093d8:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80093da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80093de:	0053      	lsls	r3, r2, #1
 80093e0:	6a2a      	ldr	r2, [r5, #32]
 80093e2:	fb00 f202 	mul.w	r2, r0, r2
 80093e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ea:	e706      	b.n	80091fa <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80093ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80093f0:	2100      	movs	r1, #0
 80093f2:	f7ff fc13 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80093f6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80093f8:	4602      	mov	r2, r0
 80093fa:	e6d0      	b.n	800919e <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80093fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009400:	2100      	movs	r1, #0
 8009402:	f7ff fc0b 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8009406:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009408:	4602      	mov	r2, r0
 800940a:	e6d8      	b.n	80091be <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800940c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009410:	2100      	movs	r1, #0
 8009412:	f7ff fc03 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009416:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009418:	4602      	mov	r2, r0
 800941a:	e6c8      	b.n	80091ae <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800941c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009420:	e7db      	b.n	80093da <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009422:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009426:	2100      	movs	r1, #0
 8009428:	f7ff fbf8 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
 800942c:	4602      	mov	r2, r0
 800942e:	e6ce      	b.n	80091ce <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009430:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009434:	2100      	movs	r1, #0
 8009436:	f7ff fbf1 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800943a:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800943c:	4602      	mov	r2, r0
 800943e:	e6c2      	b.n	80091c6 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009440:	2040      	movs	r0, #64	; 0x40
 8009442:	e7ca      	b.n	80093da <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
 8009444:	2600      	movs	r6, #0
 8009446:	e69d      	b.n	8009184 <HAL_SAI_Init.part.0+0xe8>
 8009448:	f805c010 	.word	0xf805c010

0800944c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800944c:	2902      	cmp	r1, #2
{
 800944e:	b538      	push	{r3, r4, r5, lr}
 8009450:	4604      	mov	r4, r0
  switch (protocol)
 8009452:	d935      	bls.n	80094c0 <HAL_SAI_InitProtocol+0x74>
 8009454:	1ec8      	subs	r0, r1, #3
 8009456:	2801      	cmp	r0, #1
 8009458:	d830      	bhi.n	80094bc <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800945a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800945c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800945e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009460:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009462:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8009464:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009466:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800946a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800946c:	6860      	ldr	r0, [r4, #4]
 800946e:	f030 0002 	bics.w	r0, r0, #2
 8009472:	bf0c      	ite	eq
 8009474:	2501      	moveq	r5, #1
 8009476:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 8009478:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800947a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800947e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 8009480:	bf0c      	ite	eq
 8009482:	2001      	moveq	r0, #1
 8009484:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009486:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009488:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800948c:	65a0      	str	r0, [r4, #88]	; 0x58
 800948e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 8009490:	2a03      	cmp	r2, #3
 8009492:	d813      	bhi.n	80094bc <HAL_SAI_InitProtocol+0x70>
 8009494:	e8df f002 	tbb	[pc, r2]
 8009498:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	4a47      	ldr	r2, [pc, #284]	; (80095bc <HAL_SAI_InitProtocol+0x170>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d005      	beq.n	80094b0 <HAL_SAI_InitProtocol+0x64>
 80094a4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80094a8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d105      	bne.n	80094bc <HAL_SAI_InitProtocol+0x70>
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d102      	bne.n	80094bc <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80094b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d037      	beq.n	800952c <HAL_SAI_InitProtocol+0xe0>
}
 80094bc:	2001      	movs	r0, #1
 80094be:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80094c0:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80094c2:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80094c4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80094c6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 80094c8:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094ca:	6860      	ldr	r0, [r4, #4]
 80094cc:	f030 0002 	bics.w	r0, r0, #2
 80094d0:	bf14      	ite	ne
 80094d2:	2001      	movne	r0, #1
 80094d4:	2000      	moveq	r0, #0
 80094d6:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80094d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80094dc:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80094de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80094e2:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80094e4:	f013 0001 	ands.w	r0, r3, #1
 80094e8:	d1e8      	bne.n	80094bc <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 80094ea:	b949      	cbnz	r1, 8009500 <HAL_SAI_InitProtocol+0xb4>
 80094ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80094f0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 80094f4:	2a03      	cmp	r2, #3
 80094f6:	d8e1      	bhi.n	80094bc <HAL_SAI_InitProtocol+0x70>
 80094f8:	e8df f002 	tbb	[pc, r2]
 80094fc:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009500:	6660      	str	r0, [r4, #100]	; 0x64
 8009502:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009506:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 8009508:	2a03      	cmp	r2, #3
 800950a:	d8d7      	bhi.n	80094bc <HAL_SAI_InitProtocol+0x70>
 800950c:	e8df f002 	tbb	[pc, r2]
 8009510:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009514:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009516:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009518:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800951a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800951c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800951e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009520:	f7fa fe1e 	bl	8004160 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009524:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009528:	2b01      	cmp	r3, #1
 800952a:	d0b7      	beq.n	800949c <HAL_SAI_InitProtocol+0x50>
 800952c:	4620      	mov	r0, r4
}
 800952e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009532:	f7ff bdb3 	b.w	800909c <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009536:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009538:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800953a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800953c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800953e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 8009540:	e7ee      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009542:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009544:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009546:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009548:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800954a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800954c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800954e:	e7e7      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009550:	21e0      	movs	r1, #224	; 0xe0
 8009552:	e7f7      	b.n	8009544 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009554:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009556:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009558:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800955a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800955c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800955e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009560:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009562:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009566:	e7db      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009568:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800956a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800956c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800956e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009570:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009574:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009576:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800957a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800957c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800957e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009580:	d1ce      	bne.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 8009582:	2308      	movs	r3, #8
 8009584:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 8009586:	e7cb      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009588:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800958a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800958c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800958e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009592:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009594:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009598:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800959a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800959e:	d1bf      	bne.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 80095a0:	2310      	movs	r3, #16
 80095a2:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80095a4:	e7bc      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80095a6:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80095a8:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80095aa:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80095ac:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80095ae:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80095b0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80095b2:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80095b4:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80095b8:	e7b2      	b.n	8009520 <HAL_SAI_InitProtocol+0xd4>
 80095ba:	bf00      	nop
 80095bc:	40015804 	.word	0x40015804

080095c0 <HAL_SAI_Transmit_DMA>:
{
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	4615      	mov	r5, r2
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	460f      	mov	r7, r1
 80095cc:	4604      	mov	r4, r0
 80095ce:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 80095d2:	f7fa fdad 	bl	8004130 <HAL_GetTick>
 80095d6:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 80095da:	2f00      	cmp	r7, #0
 80095dc:	d066      	beq.n	80096ac <HAL_SAI_Transmit_DMA+0xec>
 80095de:	fab5 f985 	clz	r9, r5
 80095e2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	d060      	beq.n	80096ac <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
 80095ea:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	fa5f fa83 	uxtb.w	sl, r3
 80095f4:	d155      	bne.n	80096a2 <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
 80095f6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d051      	beq.n	80096a2 <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80095fe:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009600:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009604:	4a39      	ldr	r2, [pc, #228]	; (80096ec <HAL_SAI_Transmit_DMA+0x12c>)
 8009606:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009608:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800960c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
 8009610:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 8009614:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009618:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800961a:	4a35      	ldr	r2, [pc, #212]	; (80096f0 <HAL_SAI_Transmit_DMA+0x130>)
 800961c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009620:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009622:	4a34      	ldr	r2, [pc, #208]	; (80096f4 <HAL_SAI_Transmit_DMA+0x134>)
 8009624:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009628:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800962a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800962e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009632:	6822      	ldr	r2, [r4, #0]
 8009634:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009638:	321c      	adds	r2, #28
 800963a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800963c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009640:	f7fb f99c 	bl	800497c <HAL_DMA_Start_IT>
 8009644:	2800      	cmp	r0, #0
 8009646:	d13f      	bne.n	80096c8 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800964a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800964c:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800964e:	d032      	beq.n	80096b6 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009650:	2205      	movs	r2, #5
 8009652:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009654:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009656:	2b01      	cmp	r3, #1
 8009658:	bf98      	it	ls
 800965a:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800965c:	6821      	ldr	r1, [r4, #0]
 800965e:	690b      	ldr	r3, [r1, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009664:	6822      	ldr	r2, [r4, #0]
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800966e:	e005      	b.n	800967c <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009670:	f7fa fd5e 	bl	8004130 <HAL_GetTick>
 8009674:	1b83      	subs	r3, r0, r6
 8009676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800967a:	d82a      	bhi.n	80096d2 <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800967c:	6822      	ldr	r2, [r4, #0]
 800967e:	6955      	ldr	r5, [r2, #20]
 8009680:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8009684:	d0f4      	beq.n	8009670 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	03db      	lsls	r3, r3, #15
 800968a:	d403      	bmi.n	8009694 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 800968c:	6813      	ldr	r3, [r2, #0]
 800968e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009692:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8009694:	2300      	movs	r3, #0
    return HAL_OK;
 8009696:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 8009698:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800969c:	4650      	mov	r0, sl
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80096a2:	f04f 0a02 	mov.w	sl, #2
}
 80096a6:	4650      	mov	r0, sl
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 80096ac:	f04f 0a01 	mov.w	sl, #1
}
 80096b0:	4650      	mov	r0, sl
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80096b6:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80096ba:	2a01      	cmp	r2, #1
 80096bc:	bf0b      	itete	eq
 80096be:	2215      	moveq	r2, #21
 80096c0:	2205      	movne	r2, #5
 80096c2:	2171      	moveq	r1, #113	; 0x71
 80096c4:	2161      	movne	r1, #97	; 0x61
 80096c6:	e7c5      	b.n	8009654 <HAL_SAI_Transmit_DMA+0x94>
}
 80096c8:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 80096ca:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80096d6:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 80096da:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80096e2:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ec:	0800975d 	.word	0x0800975d
 80096f0:	080096f9 	.word	0x080096f9
 80096f4:	08009769 	.word	0x08009769

080096f8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80096f8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096fa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009702:	d01b      	beq.n	800973c <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009704:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009712:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009714:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009716:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009718:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800971a:	d012      	beq.n	8009742 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800971c:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8009720:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009724:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009726:	3b02      	subs	r3, #2
 8009728:	2b01      	cmp	r3, #1
 800972a:	bf98      	it	ls
 800972c:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800972e:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009730:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009734:	4013      	ands	r3, r2
 8009736:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8009738:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800973c:	f012 f820 	bl	801b780 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8009740:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009742:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009746:	2a01      	cmp	r2, #1
 8009748:	bf0b      	itete	eq
 800974a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800974e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8009752:	f06f 0215 	mvneq.w	r2, #21
 8009756:	f06f 0205 	mvnne.w	r2, #5
 800975a:	e7e3      	b.n	8009724 <SAI_DMATxCplt+0x2c>

0800975c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800975c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800975e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009760:	f012 f812 	bl	801b788 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8009764:	bd08      	pop	{r3, pc}
 8009766:	bf00      	nop

08009768 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009768:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800976a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800976c:	f7fc fb56 	bl	8005e1c <HAL_DMA_GetError>
 8009770:	2802      	cmp	r0, #2
 8009772:	d025      	beq.n	80097c0 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009774:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009778:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800977a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800977e:	4814      	ldr	r0, [pc, #80]	; (80097d0 <SAI_DMAError+0x68>)
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009782:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009786:	680b      	ldr	r3, [r1, #0]
 8009788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800978c:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800978e:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 8009790:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009792:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8009796:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009798:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800979a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800979e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80097a0:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 80097a2:	b173      	cbz	r3, 80097c2 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80097a4:	6822      	ldr	r2, [r4, #0]
    count--;
 80097a6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	03d2      	lsls	r2, r2, #15
 80097ac:	d4f9      	bmi.n	80097a2 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80097ae:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80097b0:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80097b2:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80097b4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80097b8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80097bc:	f011 ffec 	bl	801b798 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
 80097c0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80097c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80097c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 80097ce:	e7ee      	b.n	80097ae <SAI_DMAError+0x46>
 80097d0:	200008f4 	.word	0x200008f4
 80097d4:	95cbec1b 	.word	0x95cbec1b

080097d8 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 80097d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	4604      	mov	r4, r0
 80097de:	b096      	sub	sp, #88	; 0x58
 80097e0:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097e2:	f7fa fca5 	bl	8004130 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097e6:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80097e8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097ea:	6820      	ldr	r0, [r4, #0]
 80097ec:	f001 feec 	bl	800b5c8 <SDMMC_GetResponse>
 80097f0:	0181      	lsls	r1, r0, #6
 80097f2:	d45a      	bmi.n	80098aa <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80097f4:	2140      	movs	r1, #64	; 0x40
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	f001 ff00 	bl	800b5fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097fc:	b1e8      	cbz	r0, 800983a <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80097fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009800:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	4955      	ldr	r1, [pc, #340]	; (800995c <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 8009806:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009808:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800980a:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800980c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800980e:	4303      	orrs	r3, r0
 8009810:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009812:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800981a:	6820      	ldr	r0, [r4, #0]
 800981c:	f001 feee 	bl	800b5fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009820:	b138      	cbz	r0, 8009832 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8009822:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	494d      	ldr	r1, [pc, #308]	; (800995c <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 8009828:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800982c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800982e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009832:	4630      	mov	r0, r6
 8009834:	b016      	add	sp, #88	; 0x58
 8009836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800983a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	0409      	lsls	r1, r1, #16
 8009840:	f002 fc64 	bl	800c10c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009844:	2800      	cmp	r0, #0
 8009846:	d1da      	bne.n	80097fe <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
 8009848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800984c:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800984e:	4669      	mov	r1, sp
 8009850:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8009852:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009856:	2260      	movs	r2, #96	; 0x60
 8009858:	2302      	movs	r3, #2
 800985a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800985e:	2200      	movs	r2, #0
 8009860:	2301      	movs	r3, #1
 8009862:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009866:	f001 feb3 	bl	800b5d0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	f003 f81a 	bl	800c8a4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009870:	2800      	cmp	r0, #0
 8009872:	d1c4      	bne.n	80097fe <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 8009874:	ae06      	add	r6, sp, #24
 8009876:	e004      	b.n	8009882 <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009878:	f7fa fc5a 	bl	8004130 <HAL_GetTick>
 800987c:	1bc0      	subs	r0, r0, r7
 800987e:	3001      	adds	r0, #1
 8009880:	d017      	beq.n	80098b2 <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009886:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800988a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800988c:	d114      	bne.n	80098b8 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800988e:	0412      	lsls	r2, r2, #16
 8009890:	d5f2      	bpl.n	8009878 <HAL_SD_GetCardStatus.part.0+0xa0>
 8009892:	f106 0820 	add.w	r8, r6, #32
 8009896:	e000      	b.n	800989a <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fe7e 	bl	800b59c <SDMMC_ReadFIFO>
 80098a0:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80098a4:	4546      	cmp	r6, r8
 80098a6:	d1f7      	bne.n	8009898 <HAL_SD_GetCardStatus.part.0+0xc0>
 80098a8:	e7e6      	b.n	8009878 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80098aa:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80098b0:	e7a8      	b.n	8009804 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80098b6:	e7a4      	b.n	8009802 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098b8:	0710      	lsls	r0, r2, #28
 80098ba:	d449      	bmi.n	8009950 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80098bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098be:	0791      	lsls	r1, r2, #30
 80098c0:	d448      	bmi.n	8009954 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80098c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c4:	0692      	lsls	r2, r2, #26
 80098c6:	d50a      	bpl.n	80098de <HAL_SD_GetCardStatus.part.0+0x106>
 80098c8:	e046      	b.n	8009958 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80098ca:	f001 fe67 	bl	800b59c <SDMMC_ReadFIFO>
 80098ce:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098d2:	f7fa fc2d 	bl	8004130 <HAL_GetTick>
 80098d6:	1bc0      	subs	r0, r0, r7
 80098d8:	3001      	adds	r0, #1
 80098da:	d0ea      	beq.n	80098b2 <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098dc:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80098de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80098e0:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80098e2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098e6:	d1f0      	bne.n	80098ca <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098e8:	491d      	ldr	r1, [pc, #116]	; (8009960 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098ec:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80098ee:	9b06      	ldr	r3, [sp, #24]
 80098f0:	f3c3 1281 	ubfx	r2, r3, #6, #2
 80098f4:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80098f6:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80098fa:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80098fc:	0a1a      	lsrs	r2, r3, #8
 80098fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009902:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8009906:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800990a:	b292      	uxth	r2, r2
 800990c:	ba09      	rev	r1, r1
 800990e:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009910:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009912:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009914:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009916:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800991a:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800991e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009920:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009924:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009926:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800992a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800992e:	b2d0      	uxtb	r0, r2
 8009930:	4303      	orrs	r3, r0
 8009932:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009934:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009938:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800993a:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800993e:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009940:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009944:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009948:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800994a:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800994c:	74a9      	strb	r1, [r5, #18]
 800994e:	e762      	b.n	8009816 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009950:	2008      	movs	r0, #8
 8009952:	e757      	b.n	8009804 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009954:	2002      	movs	r0, #2
 8009956:	e755      	b.n	8009804 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009958:	2020      	movs	r0, #32
 800995a:	e753      	b.n	8009804 <HAL_SD_GetCardStatus.part.0+0x2c>
 800995c:	1fe00fff 	.word	0x1fe00fff
 8009960:	18000f3a 	.word	0x18000f3a

08009964 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4605      	mov	r5, r0
 800996a:	b086      	sub	sp, #24
 800996c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800996e:	f7fa fbdf 	bl	8004130 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009972:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009974:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009976:	6828      	ldr	r0, [r5, #0]
 8009978:	f001 fe40 	bl	800b5fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800997c:	4604      	mov	r4, r0
 800997e:	b118      	cbz	r0, 8009988 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009980:	4620      	mov	r0, r4
 8009982:	b006      	add	sp, #24
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009988:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800998a:	6828      	ldr	r0, [r5, #0]
 800998c:	0409      	lsls	r1, r1, #16
 800998e:	f002 fbbd 	bl	800c10c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009992:	4604      	mov	r4, r0
 8009994:	2800      	cmp	r0, #0
 8009996:	d1f3      	bne.n	8009980 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8009998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999c:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800999e:	4669      	mov	r1, sp
 80099a0:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80099a2:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099a6:	2230      	movs	r2, #48	; 0x30
 80099a8:	2302      	movs	r3, #2
 80099aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099ae:	2200      	movs	r2, #0
 80099b0:	2301      	movs	r3, #1
 80099b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099b6:	f001 fe0b 	bl	800b5d0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80099ba:	6828      	ldr	r0, [r5, #0]
 80099bc:	f002 fd3e 	bl	800c43c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80099c0:	4604      	mov	r4, r0
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1dc      	bne.n	8009980 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80099c6:	4682      	mov	sl, r0
 80099c8:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80099ca:	f240 582a 	movw	r8, #1322	; 0x52a
 80099ce:	e004      	b.n	80099da <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099d0:	f7fa fbae 	bl	8004130 <HAL_GetTick>
 80099d4:	1b83      	subs	r3, r0, r6
 80099d6:	3301      	adds	r3, #1
 80099d8:	d024      	beq.n	8009a24 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80099da:	6828      	ldr	r0, [r5, #0]
 80099dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099de:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80099e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80099e4:	d10c      	bne.n	8009a00 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80099e6:	0319      	lsls	r1, r3, #12
 80099e8:	d4f2      	bmi.n	80099d0 <SD_FindSCR.constprop.0+0x6c>
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d1f0      	bne.n	80099d0 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80099ee:	f001 fdd5 	bl	800b59c <SDMMC_ReadFIFO>
 80099f2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80099f4:	6828      	ldr	r0, [r5, #0]
      index++;
 80099f6:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80099f8:	f001 fdd0 	bl	800b59c <SDMMC_ReadFIFO>
 80099fc:	4682      	mov	sl, r0
      index++;
 80099fe:	e7e7      	b.n	80099d0 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a00:	071a      	lsls	r2, r3, #28
 8009a02:	d416      	bmi.n	8009a32 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a06:	079b      	lsls	r3, r3, #30
 8009a08:	d40f      	bmi.n	8009a2a <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009a0c:	f014 0420 	ands.w	r4, r4, #32
 8009a10:	d113      	bne.n	8009a3a <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a12:	fa9a f28a 	rev.w	r2, sl
 8009a16:	fa99 f389 	rev.w	r3, r9
 8009a1a:	490a      	ldr	r1, [pc, #40]	; (8009a44 <SD_FindSCR.constprop.0+0xe0>)
 8009a1c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009a1e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8009a22:	e7ad      	b.n	8009980 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009a24:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009a28:	e7aa      	b.n	8009980 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009a2a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a2c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009a2e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a30:	e7a6      	b.n	8009980 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009a32:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a34:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009a36:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a38:	e7a2      	b.n	8009980 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009a3a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a3c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009a3e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a40:	e79e      	b.n	8009980 <SD_FindSCR.constprop.0+0x1c>
 8009a42:	bf00      	nop
 8009a44:	18000f3a 	.word	0x18000f3a

08009a48 <HAL_SD_ReadBlocks>:
{
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	b087      	sub	sp, #28
 8009a50:	4604      	mov	r4, r0
 8009a52:	4692      	mov	sl, r2
 8009a54:	461f      	mov	r7, r3
 8009a56:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009a5a:	f7fa fb69 	bl	8004130 <HAL_GetTick>
  if (NULL == pData)
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	d069      	beq.n	8009b36 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 8009a62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	fa5f f983 	uxtb.w	r9, r3
 8009a6c:	d152      	bne.n	8009b14 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a6e:	eb0a 0307 	add.w	r3, sl, r7
 8009a72:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a74:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a76:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a78:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a7a:	d866      	bhi.n	8009b4a <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
 8009a7c:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a7e:	f04f 0b02 	mov.w	fp, #2
 8009a82:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8009a84:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a8c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a90:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a92:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a94:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009a98:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009aa0:	bf18      	it	ne
 8009aa2:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009aa6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009aa8:	027b      	lsls	r3, r7, #9
 8009aaa:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009aac:	2390      	movs	r3, #144	; 0x90
 8009aae:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ab2:	f001 fd8d 	bl	800b5d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009ab6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009ab8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009aba:	68d3      	ldr	r3, [r2, #12]
 8009abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac0:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009ac2:	d931      	bls.n	8009b28 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009ac4:	4651      	mov	r1, sl
 8009ac6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009ac8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009acc:	f001 fef2 	bl	800b8b4 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d142      	bne.n	8009b5a <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
 8009ad4:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ad8:	e004      	b.n	8009ae4 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009ada:	f7fa fb29 	bl	8004130 <HAL_GetTick>
 8009ade:	1b80      	subs	r0, r0, r6
 8009ae0:	4540      	cmp	r0, r8
 8009ae2:	d267      	bcs.n	8009bb4 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ae8:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8009aec:	d141      	bne.n	8009b72 <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009aee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009af0:	041a      	lsls	r2, r3, #16
 8009af2:	d5f2      	bpl.n	8009ada <HAL_SD_ReadBlocks+0x92>
 8009af4:	f1bb 0f1f 	cmp.w	fp, #31
 8009af8:	d9ef      	bls.n	8009ada <HAL_SD_ReadBlocks+0x92>
 8009afa:	f105 0a20 	add.w	sl, r5, #32
 8009afe:	e000      	b.n	8009b02 <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	f001 fd4b 	bl	800b59c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009b06:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8009b0a:	45aa      	cmp	sl, r5
 8009b0c:	d1f8      	bne.n	8009b00 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
 8009b0e:	f1ab 0b20 	sub.w	fp, fp, #32
 8009b12:	e7e2      	b.n	8009ada <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009b16:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b1e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009b20:	4648      	mov	r0, r9
 8009b22:	b007      	add	sp, #28
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009b28:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009b30:	f001 fe12 	bl	800b758 <SDMMC_CmdReadSingleBlock>
 8009b34:	e7cc      	b.n	8009ad0 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009b38:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009b40:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b42:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009b44:	b007      	add	sp, #28
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009b4c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b52:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009b54:	b007      	add	sp, #28
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4a30      	ldr	r2, [pc, #192]	; (8009c20 <HAL_SD_ReadBlocks+0x1d8>)
 8009b5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009b60:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b64:	4303      	orrs	r3, r0
 8009b66:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009b68:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009b6a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009b70:	e7d6      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009b72:	68c3      	ldr	r3, [r0, #12]
 8009b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b78:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b7a:	6820      	ldr	r0, [r4, #0]
 8009b7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b7e:	05db      	lsls	r3, r3, #23
 8009b80:	d501      	bpl.n	8009b86 <HAL_SD_ReadBlocks+0x13e>
 8009b82:	2f01      	cmp	r7, #1
 8009b84:	d825      	bhi.n	8009bd2 <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b88:	f013 0308 	ands.w	r3, r3, #8
 8009b8c:	d135      	bne.n	8009bfa <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b8e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009b90:	f012 0202 	ands.w	r2, r2, #2
 8009b94:	d126      	bne.n	8009be4 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b98:	f013 0320 	ands.w	r3, r3, #32
 8009b9c:	d039      	beq.n	8009c12 <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b9e:	4b20      	ldr	r3, [pc, #128]	; (8009c20 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009ba0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ba2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba6:	f043 0320 	orr.w	r3, r3, #32
 8009baa:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bb0:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009bb2:	e7b5      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb4:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009bb6:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb8:	4819      	ldr	r0, [pc, #100]	; (8009c20 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
 8009bba:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8009bbc:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc0:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bc8:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009bca:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009bce:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009bd0:	e7a6      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d0d6      	beq.n	8009b86 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bd8:	f002 f876 	bl	800bcc8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1bc      	bne.n	8009b5a <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	e7d0      	b.n	8009b86 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009be4:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009be6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009be8:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009bec:	f042 0202 	orr.w	r2, r2, #2
 8009bf0:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bf2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009bf8:	e792      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bfa:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009bfc:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bfe:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c02:	f043 0308 	orr.w	r3, r3, #8
 8009c06:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c08:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009c0a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009c10:	e786      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c12:	4904      	ldr	r1, [pc, #16]	; (8009c24 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8009c14:	2201      	movs	r2, #1
    return HAL_OK;
 8009c16:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c18:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c1a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009c1e:	e77f      	b.n	8009b20 <HAL_SD_ReadBlocks+0xd8>
 8009c20:	1fe00fff 	.word	0x1fe00fff
 8009c24:	18000f3a 	.word	0x18000f3a

08009c28 <HAL_SD_WriteBlocks>:
{
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	b089      	sub	sp, #36	; 0x24
 8009c30:	4604      	mov	r4, r0
 8009c32:	4692      	mov	sl, r2
 8009c34:	461f      	mov	r7, r3
 8009c36:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8009c3a:	f7fa fa79 	bl	8004130 <HAL_GetTick>
  if (NULL == pData)
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	d068      	beq.n	8009d14 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 8009c42:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	fa5f f983 	uxtb.w	r9, r3
 8009c4c:	d152      	bne.n	8009cf4 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c4e:	eb0a 0307 	add.w	r3, sl, r7
 8009c52:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c54:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c56:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c58:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c5a:	d865      	bhi.n	8009d28 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	4606      	mov	r6, r0
 8009c60:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c68:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c6c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c6e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009c70:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c74:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009c78:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009c7e:	bf18      	it	ne
 8009c80:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c84:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009c86:	027b      	lsls	r3, r7, #9
 8009c88:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c8a:	2390      	movs	r3, #144	; 0x90
 8009c8c:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c8e:	f001 fc9f 	bl	800b5d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009c92:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009c94:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009c96:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009c98:	68d3      	ldr	r3, [r2, #12]
 8009c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9e:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009ca0:	d932      	bls.n	8009d08 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009ca2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ca4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ca8:	f001 ff60 	bl	800bb6c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d143      	bne.n	8009d38 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8009cb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009cb4:	e004      	b.n	8009cc0 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009cb6:	f7fa fa3b 	bl	8004130 <HAL_GetTick>
 8009cba:	1b80      	subs	r0, r0, r6
 8009cbc:	4540      	cmp	r0, r8
 8009cbe:	d268      	bcs.n	8009d92 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cc4:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8009cc8:	d142      	bne.n	8009d50 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009cca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ccc:	045a      	lsls	r2, r3, #17
 8009cce:	d5f2      	bpl.n	8009cb6 <HAL_SD_WriteBlocks+0x8e>
 8009cd0:	f1bb 0f1f 	cmp.w	fp, #31
 8009cd4:	d9ef      	bls.n	8009cb6 <HAL_SD_WriteBlocks+0x8e>
 8009cd6:	f105 0a20 	add.w	sl, r5, #32
 8009cda:	e000      	b.n	8009cde <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009cdc:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009cde:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009ce2:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009ce4:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009ce6:	f001 fc5d 	bl	800b5a4 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009cea:	4555      	cmp	r5, sl
 8009cec:	d1f6      	bne.n	8009cdc <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 8009cee:	f1ab 0b20 	sub.w	fp, fp, #32
 8009cf2:	e7e0      	b.n	8009cb6 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009cf6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cfe:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009d00:	4648      	mov	r0, r9
 8009d02:	b009      	add	sp, #36	; 0x24
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009d08:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d0a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d0e:	f001 fe7f 	bl	800ba10 <SDMMC_CmdWriteSingleBlock>
 8009d12:	e7cb      	b.n	8009cac <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009d16:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009d1e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d20:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009d22:	b009      	add	sp, #36	; 0x24
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009d2a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d30:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009d32:	b009      	add	sp, #36	; 0x24
 8009d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	4a30      	ldr	r2, [pc, #192]	; (8009dfc <HAL_SD_WriteBlocks+0x1d4>)
 8009d3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009d3e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d42:	4303      	orrs	r3, r0
 8009d44:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009d46:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009d48:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009d4e:	e7d7      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d50:	68c3      	ldr	r3, [r0, #12]
 8009d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d56:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d5c:	05db      	lsls	r3, r3, #23
 8009d5e:	d501      	bpl.n	8009d64 <HAL_SD_WriteBlocks+0x13c>
 8009d60:	2f01      	cmp	r7, #1
 8009d62:	d823      	bhi.n	8009dac <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d66:	f013 0308 	ands.w	r3, r3, #8
 8009d6a:	d133      	bne.n	8009dd4 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d6e:	f012 0202 	ands.w	r2, r2, #2
 8009d72:	d124      	bne.n	8009dbe <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d76:	f013 0310 	ands.w	r3, r3, #16
 8009d7a:	d037      	beq.n	8009dec <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d7c:	4b1f      	ldr	r3, [pc, #124]	; (8009dfc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009d7e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d80:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d84:	f043 0310 	orr.w	r3, r3, #16
 8009d88:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d8a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d8e:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009d90:	e7b6      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d92:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009d94:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d96:	4819      	ldr	r0, [pc, #100]	; (8009dfc <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 8009d98:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8009d9a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d9e:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da2:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009da4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009da8:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009daa:	e7a9      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d0d8      	beq.n	8009d64 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009db2:	f001 ff89 	bl	800bcc8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d1be      	bne.n	8009d38 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	e7d2      	b.n	8009d64 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dbe:	4a0f      	ldr	r2, [pc, #60]	; (8009dfc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009dc0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dc2:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009dc6:	f042 0202 	orr.w	r2, r2, #2
 8009dca:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009dcc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009dd2:	e795      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dd4:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009dd6:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dd8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ddc:	f043 0308 	orr.w	r3, r3, #8
 8009de0:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009de2:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009de4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009de8:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009dea:	e789      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dec:	4904      	ldr	r1, [pc, #16]	; (8009e00 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 8009dee:	2201      	movs	r2, #1
    return HAL_OK;
 8009df0:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009df2:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009df4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009df8:	e782      	b.n	8009d00 <HAL_SD_WriteBlocks+0xd8>
 8009dfa:	bf00      	nop
 8009dfc:	1fe00fff 	.word	0x1fe00fff
 8009e00:	18000f3a 	.word	0x18000f3a

08009e04 <HAL_SD_ErrorCallback>:
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop

08009e08 <HAL_SD_GetCardCSD>:
{
 8009e08:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e0a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e0c:	f04f 0c00 	mov.w	ip, #0
{
 8009e10:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e12:	0f92      	lsrs	r2, r2, #30
 8009e14:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e16:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009e18:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009e1c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009e1e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 8009e22:	f002 0203 	and.w	r2, r2, #3
 8009e26:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009e28:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 8009e2c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009e2e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 8009e32:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009e34:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8009e38:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009e3a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e3c:	0d12      	lsrs	r2, r2, #20
 8009e3e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009e40:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8009e44:	f002 020f 	and.w	r2, r2, #15
 8009e48:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009e4a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e4c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009e50:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009e52:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e54:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009e58:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009e5a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e5c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009e60:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009e62:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009e64:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009e68:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e6a:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009e6e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	f040 808a 	bne.w	8009f8a <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009e76:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8009e78:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009e7c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009e7e:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 8009e82:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009e86:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e8a:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009e8e:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009e90:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009e94:	f002 0207 	and.w	r2, r2, #7
 8009e98:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009e9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e9c:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009ea0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ea2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ea4:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8009ea8:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009eaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009eac:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009eb0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009eb2:	690a      	ldr	r2, [r1, #16]
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009eb8:	7e08      	ldrb	r0, [r1, #24]
 8009eba:	f000 0007 	and.w	r0, r0, #7
 8009ebe:	3002      	adds	r0, #2
 8009ec0:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ec2:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009ec4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ec6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009eca:	f00c 0c0f 	and.w	ip, ip, #15
 8009ece:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ed2:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ed6:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ed8:	fb02 f20c 	mul.w	r2, r2, ip
 8009edc:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ede:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 8009ee0:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 8009ee4:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 8009ee6:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009eea:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8009eee:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ef0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ef4:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009ef8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f00:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009f02:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f04:	0fd2      	lsrs	r2, r2, #31
 8009f06:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009f08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f0a:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009f0e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009f10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f12:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009f16:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009f18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f1a:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009f1e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009f20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f22:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009f26:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009f2a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009f32:	ea02 020c 	and.w	r2, r2, ip
 8009f36:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009f3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f3c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009f40:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f46:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009f4a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f50:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009f54:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f5a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009f5e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f64:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009f68:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009f6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f6e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009f72:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f78:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009f7c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009f80:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 8009f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f88:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f8a:	2a01      	cmp	r2, #1
 8009f8c:	d110      	bne.n	8009fb0 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f8e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009f90:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 8009f94:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f98:	0412      	lsls	r2, r2, #16
 8009f9a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009f9e:	4322      	orrs	r2, r4
 8009fa0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009fa2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8009fa4:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	0292      	lsls	r2, r2, #10
 8009faa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009fac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009fae:	e796      	b.n	8009ede <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fb0:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009fb2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <HAL_SD_GetCardCSD+0x1c4>)
 8009fb6:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8009fb8:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009fc0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009fc2:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 8009fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	1fe00fff 	.word	0x1fe00fff

08009fd0 <HAL_SD_InitCard>:
{
 8009fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fd2:	2200      	movs	r2, #0
{
 8009fd4:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fd6:	2300      	movs	r3, #0
{
 8009fd8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009fe8:	f7fe fe18 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009fec:	b940      	cbnz	r0, 800a000 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 8009fee:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8009ff4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ff8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	b015      	add	sp, #84	; 0x54
 8009ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a000:	0a06      	lsrs	r6, r0, #8
 800a002:	4b8e      	ldr	r3, [pc, #568]	; (800a23c <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800a004:	aa07      	add	r2, sp, #28
 800a006:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a008:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800a00c:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a00e:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800a010:	9608      	str	r6, [sp, #32]
 800a012:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a016:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a01a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	f001 faa1 	bl	800b564 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a022:	6820      	ldr	r0, [r4, #0]
 800a024:	f001 fac4 	bl	800b5b0 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800a028:	4b85      	ldr	r3, [pc, #532]	; (800a240 <HAL_SD_InitCard+0x270>)
 800a02a:	429d      	cmp	r5, r3
 800a02c:	d902      	bls.n	800a034 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a02e:	0076      	lsls	r6, r6, #1
 800a030:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a034:	4883      	ldr	r0, [pc, #524]	; (800a244 <HAL_SD_InitCard+0x274>)
 800a036:	fbb0 f0f5 	udiv	r0, r0, r5
 800a03a:	3001      	adds	r0, #1
 800a03c:	f7fa f87e 	bl	800413c <HAL_Delay>
  __IO uint32_t count = 0U;
 800a040:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a042:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800a044:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a046:	f001 fff5 	bl	800c034 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a04a:	4605      	mov	r5, r0
 800a04c:	b140      	cbz	r0, 800a060 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800a04e:	2601      	movs	r6, #1
 800a050:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800a054:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a058:	432b      	orrs	r3, r5
 800a05a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a05c:	b015      	add	sp, #84	; 0x54
 800a05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a060:	6820      	ldr	r0, [r4, #0]
 800a062:	f002 f813 	bl	800c08c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a066:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800a06a:	f000 80ce 	beq.w	800a20a <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a06e:	2301      	movs	r3, #1
 800a070:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a072:	2100      	movs	r1, #0
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	f002 f849 	bl	800c10c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a07a:	bb08      	cbnz	r0, 800a0c0 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800a082:	42b3      	cmp	r3, r6
 800a084:	f200 80d3 	bhi.w	800a22e <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a088:	4f6f      	ldr	r7, [pc, #444]	; (800a248 <HAL_SD_InitCard+0x278>)
 800a08a:	e010      	b.n	800a0ae <HAL_SD_InitCard+0xde>
 800a08c:	6820      	ldr	r0, [r4, #0]
 800a08e:	f002 f8eb 	bl	800c268 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a092:	4601      	mov	r1, r0
 800a094:	b9a0      	cbnz	r0, 800a0c0 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a096:	6820      	ldr	r0, [r4, #0]
 800a098:	f001 fa96 	bl	800b5c8 <SDMMC_GetResponse>
    count++;
 800a09c:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a09e:	2800      	cmp	r0, #0
    count++;
 800a0a0:	f103 0301 	add.w	r3, r3, #1
 800a0a4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	db0d      	blt.n	800a0c6 <HAL_SD_InitCard+0xf6>
 800a0aa:	42b3      	cmp	r3, r6
 800a0ac:	d80b      	bhi.n	800a0c6 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	f002 f82b 	bl	800c10c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a0b6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0e7      	beq.n	800a08c <HAL_SD_InitCard+0xbc>
 800a0bc:	4605      	mov	r5, r0
 800a0be:	e7c6      	b.n	800a04e <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800a0c4:	e7c3      	b.n	800a04e <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a0c6:	9a03      	ldr	r2, [sp, #12]
 800a0c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	f200 80b2 	bhi.w	800a236 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a0d2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 800a0d6:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a0da:	bf18      	it	ne
 800a0dc:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 800a0de:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63a5      	str	r5, [r4, #56]	; 0x38
 800a0e4:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800a0e8:	f7fa f822 	bl	8004130 <HAL_GetTick>
 800a0ec:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a0ee:	6820      	ldr	r0, [r4, #0]
 800a0f0:	f001 fa66 	bl	800b5c0 <SDMMC_GetPowerState>
 800a0f4:	b350      	cbz	r0, 800a14c <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a0f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d132      	bne.n	800a162 <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0fc:	2104      	movs	r1, #4
 800a0fe:	6820      	ldr	r0, [r4, #0]
 800a100:	f001 fa62 	bl	800b5c8 <SDMMC_GetResponse>
 800a104:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a106:	a909      	add	r1, sp, #36	; 0x24
 800a108:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a10a:	0d1b      	lsrs	r3, r3, #20
 800a10c:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a10e:	f7ff fe7b 	bl	8009e08 <HAL_SD_GetCardCSD>
 800a112:	4606      	mov	r6, r0
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 8084 	bne.w	800a222 <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a11a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	0409      	lsls	r1, r1, #16
 800a120:	f001 feda 	bl	800bed8 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a124:	b9a0      	cbnz	r0, 800a150 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	f001 fa66 	bl	800b5fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a130:	2800      	cmp	r0, #0
 800a132:	f43f af62 	beq.w	8009ffa <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a136:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a138:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a13a:	4944      	ldr	r1, [pc, #272]	; (800a24c <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 800a13c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a13e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a140:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a142:	4310      	orrs	r0, r2
 800a144:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a146:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800a14a:	e756      	b.n	8009ffa <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a14c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a150:	2601      	movs	r6, #1
 800a152:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a158:	4303      	orrs	r3, r0
}
 800a15a:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a15c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a15e:	b015      	add	sp, #84	; 0x54
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a162:	6820      	ldr	r0, [r4, #0]
 800a164:	f002 fa12 	bl	800c58c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a168:	2800      	cmp	r0, #0
 800a16a:	d1f1      	bne.n	800a150 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a16c:	4601      	mov	r1, r0
 800a16e:	6820      	ldr	r0, [r4, #0]
 800a170:	f001 fa2a 	bl	800b5c8 <SDMMC_GetResponse>
 800a174:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a176:	2104      	movs	r1, #4
 800a178:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a17a:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a17c:	f001 fa24 	bl	800b5c8 <SDMMC_GetResponse>
 800a180:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a182:	2108      	movs	r1, #8
 800a184:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a186:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a188:	f001 fa1e 	bl	800b5c8 <SDMMC_GetResponse>
 800a18c:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a18e:	210c      	movs	r1, #12
 800a190:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a192:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a194:	f001 fa18 	bl	800b5c8 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a198:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a19a:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d0ad      	beq.n	800a0fc <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a1a0:	f241 3687 	movw	r6, #4999	; 0x1387
 800a1a4:	e009      	b.n	800a1ba <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	f002 fa6e 	bl	800c688 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d1cf      	bne.n	800a150 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a1b0:	f7f9 ffbe 	bl	8004130 <HAL_GetTick>
 800a1b4:	1b43      	subs	r3, r0, r5
 800a1b6:	42b3      	cmp	r3, r6
 800a1b8:	d836      	bhi.n	800a228 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
 800a1ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a1be:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0ef      	beq.n	800a1a6 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a1c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1c8:	2a03      	cmp	r2, #3
 800a1ca:	d097      	beq.n	800a0fc <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1cc:	0419      	lsls	r1, r3, #16
 800a1ce:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a1d0:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1d2:	f002 fa19 	bl	800c608 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d1ba      	bne.n	800a150 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6820      	ldr	r0, [r4, #0]
 800a1de:	f001 f9f3 	bl	800b5c8 <SDMMC_GetResponse>
 800a1e2:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1e8:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1ea:	f001 f9ed 	bl	800b5c8 <SDMMC_GetResponse>
 800a1ee:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1f0:	2108      	movs	r1, #8
 800a1f2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1f4:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1f6:	f001 f9e7 	bl	800b5c8 <SDMMC_GetResponse>
 800a1fa:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1fc:	210c      	movs	r1, #12
 800a1fe:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a200:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a202:	f001 f9e1 	bl	800b5c8 <SDMMC_GetResponse>
 800a206:	66a0      	str	r0, [r4, #104]	; 0x68
 800a208:	e778      	b.n	800a0fc <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a20a:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a20c:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a20e:	f001 ff11 	bl	800c034 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a212:	2800      	cmp	r0, #0
 800a214:	f47f af52 	bne.w	800a0bc <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	f47f af2e 	bne.w	800a07c <HAL_SD_InitCard+0xac>
 800a220:	e727      	b.n	800a072 <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a222:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a226:	e793      	b.n	800a150 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
 800a228:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800a22c:	e790      	b.n	800a150 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	42b3      	cmp	r3, r6
 800a232:	f67f af55 	bls.w	800a0e0 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a236:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800a23a:	e708      	b.n	800a04e <HAL_SD_InitCard+0x7e>
 800a23c:	014f8b59 	.word	0x014f8b59
 800a240:	000c34ff 	.word	0x000c34ff
 800a244:	00012110 	.word	0x00012110
 800a248:	c1100000 	.word	0xc1100000
 800a24c:	1fe00fff 	.word	0x1fe00fff

0800a250 <HAL_SD_GetCardInfo>:
{
 800a250:	4603      	mov	r3, r0
}
 800a252:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a256:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a25a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a25c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a25e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a262:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a266:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a26a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a26c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a26e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	61cb      	str	r3, [r1, #28]
}
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop

0800a278 <HAL_SD_ConfigWideBusOperation>:
{
 800a278:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a27a:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a27c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800a27e:	b089      	sub	sp, #36	; 0x24
 800a280:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a282:	4293      	cmp	r3, r2
{
 800a284:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800a286:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a28a:	d040      	beq.n	800a30e <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a28c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a290:	d03d      	beq.n	800a30e <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a292:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a296:	d07d      	beq.n	800a394 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a298:	2900      	cmp	r1, #0
 800a29a:	d05c      	beq.n	800a356 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a29c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a29e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2a2:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a2a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d138      	bne.n	800a31c <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a2aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	f7fe fcb4 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d048      	beq.n	800a34a <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a2b8:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2ba:	4b50      	ldr	r3, [pc, #320]	; (800a3fc <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a2bc:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800a2be:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a2c0:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2c2:	fba3 5300 	umull	r5, r3, r3, r0
 800a2c6:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a2c8:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2ca:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a2ce:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2d0:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a2d4:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2d6:	d20e      	bcs.n	800a2f6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a2d8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a2da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a2de:	d00a      	beq.n	800a2f6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a2e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a2e4:	d078      	beq.n	800a3d8 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
 800a2e6:	b112      	cbz	r2, 800a2ee <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a2e8:	0053      	lsls	r3, r2, #1
 800a2ea:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2ee:	4b44      	ldr	r3, [pc, #272]	; (800a400 <HAL_SD_ConfigWideBusOperation+0x188>)
 800a2f0:	4298      	cmp	r0, r3
 800a2f2:	bf88      	it	hi
 800a2f4:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800a2f6:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a2f8:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800a2fa:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a2fc:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800a2fe:	c903      	ldmia	r1, {r0, r1}
 800a300:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a304:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a306:	6820      	ldr	r0, [r4, #0]
 800a308:	f001 f92c 	bl	800b564 <SDMMC_Init>
 800a30c:	e00a      	b.n	800a324 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a314:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0c6      	beq.n	800a2aa <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a31c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a31e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a320:	4a38      	ldr	r2, [pc, #224]	; (800a404 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a322:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a324:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	f001 f967 	bl	800b5fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a32e:	b130      	cbz	r0, 800a33e <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a330:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a332:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a334:	4a33      	ldr	r2, [pc, #204]	; (800a404 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a33a:	4303      	orrs	r3, r0
 800a33c:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800a33e:	2301      	movs	r3, #1
}
 800a340:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a342:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800a346:	b009      	add	sp, #36	; 0x24
 800a348:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a34c:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a352:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a354:	e7e6      	b.n	800a324 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
 800a356:	2200      	movs	r2, #0
 800a358:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a35a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a35c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a360:	f001 f932 	bl	800b5c8 <SDMMC_GetResponse>
 800a364:	0182      	lsls	r2, r0, #6
 800a366:	d434      	bmi.n	800a3d2 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a368:	a902      	add	r1, sp, #8
 800a36a:	4620      	mov	r0, r4
 800a36c:	f7ff fafa 	bl	8009964 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a370:	b960      	cbnz	r0, 800a38c <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	03db      	lsls	r3, r3, #15
 800a376:	d535      	bpl.n	800a3e4 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a378:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a37a:	6820      	ldr	r0, [r4, #0]
 800a37c:	0409      	lsls	r1, r1, #16
 800a37e:	f001 fec5 	bl	800c10c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a382:	b918      	cbnz	r0, 800a38c <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a384:	4601      	mov	r1, r0
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	f001 ffaa 	bl	800c2e0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a38e:	4303      	orrs	r3, r0
 800a390:	6363      	str	r3, [r4, #52]	; 0x34
 800a392:	e7c0      	b.n	800a316 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a398:	2100      	movs	r1, #0
 800a39a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a39c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a3a0:	f001 f912 	bl	800b5c8 <SDMMC_GetResponse>
 800a3a4:	0180      	lsls	r0, r0, #6
 800a3a6:	d414      	bmi.n	800a3d2 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a3a8:	a902      	add	r1, sp, #8
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f7ff fada 	bl	8009964 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d1eb      	bne.n	800a38c <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	0359      	lsls	r1, r3, #13
 800a3b8:	d514      	bpl.n	800a3e4 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	0409      	lsls	r1, r1, #16
 800a3c0:	f001 fea4 	bl	800c10c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d1e1      	bne.n	800a38c <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	6820      	ldr	r0, [r4, #0]
 800a3cc:	f001 ff88 	bl	800c2e0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3d0:	e7dc      	b.n	800a38c <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a3d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a3d6:	e7d9      	b.n	800a38c <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
 800a3d8:	b93a      	cbnz	r2, 800a3ea <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a3da:	490b      	ldr	r1, [pc, #44]	; (800a408 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a3dc:	4288      	cmp	r0, r1
 800a3de:	d98a      	bls.n	800a2f6 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a3e0:	0e5a      	lsrs	r2, r3, #25
 800a3e2:	e788      	b.n	800a2f6 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3e4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a3e8:	e7d0      	b.n	800a38c <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a3ea:	0051      	lsls	r1, r2, #1
 800a3ec:	fbb0 f1f1 	udiv	r1, r0, r1
 800a3f0:	4805      	ldr	r0, [pc, #20]	; (800a408 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a3f2:	4281      	cmp	r1, r0
 800a3f4:	f67f af7f 	bls.w	800a2f6 <HAL_SD_ConfigWideBusOperation+0x7e>
 800a3f8:	e7f2      	b.n	800a3e0 <HAL_SD_ConfigWideBusOperation+0x168>
 800a3fa:	bf00      	nop
 800a3fc:	55e63b89 	.word	0x55e63b89
 800a400:	017d7840 	.word	0x017d7840
 800a404:	1fe00fff 	.word	0x1fe00fff
 800a408:	02faf080 	.word	0x02faf080

0800a40c <HAL_SD_Init>:
{
 800a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40e:	b087      	sub	sp, #28
  if (hsd == NULL)
 800a410:	2800      	cmp	r0, #0
 800a412:	d045      	beq.n	800a4a0 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
 800a414:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a418:	4604      	mov	r4, r0
 800a41a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d042      	beq.n	800a4a8 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a422:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a424:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a426:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a42a:	f7ff fdd1 	bl	8009fd0 <HAL_SD_InitCard>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d136      	bne.n	800a4a0 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a432:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a436:	2b03      	cmp	r3, #3
 800a438:	d032      	beq.n	800a4a0 <HAL_SD_Init+0x94>
 800a43a:	a901      	add	r1, sp, #4
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff f9cb 	bl	80097d8 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a442:	bb68      	cbnz	r0, 800a4a0 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a444:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a446:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a44a:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a44c:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a450:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a452:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a454:	d02c      	beq.n	800a4b0 <HAL_SD_Init+0xa4>
 800a456:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a458:	68e1      	ldr	r1, [r4, #12]
 800a45a:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a45c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a45e:	f7ff ff0b 	bl	800a278 <HAL_SD_ConfigWideBusOperation>
 800a462:	4606      	mov	r6, r0
 800a464:	b9e0      	cbnz	r0, 800a4a0 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
 800a466:	f7f9 fe63 	bl	8004130 <HAL_GetTick>
 800a46a:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a46c:	e00c      	b.n	800a488 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a46e:	6820      	ldr	r0, [r4, #0]
 800a470:	4629      	mov	r1, r5
 800a472:	f001 f8a9 	bl	800b5c8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a476:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a47a:	2804      	cmp	r0, #4
 800a47c:	d01f      	beq.n	800a4be <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a47e:	f7f9 fe57 	bl	8004130 <HAL_GetTick>
 800a482:	1bc3      	subs	r3, r0, r7
 800a484:	3301      	adds	r3, #1
 800a486:	d020      	beq.n	800a4ca <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a488:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	0409      	lsls	r1, r1, #16
 800a48e:	f002 f95b 	bl	800c748 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a492:	4605      	mov	r5, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	d0ea      	beq.n	800a46e <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
 800a498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a49a:	4303      	orrs	r3, r0
 800a49c:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800a49e:	e7ee      	b.n	800a47e <HAL_SD_Init+0x72>
    return HAL_ERROR;
 800a4a0:	2601      	movs	r6, #1
}
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	b007      	add	sp, #28
 800a4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800a4a8:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a4aa:	f7f8 fdb3 	bl	8003014 <HAL_SD_MspInit>
 800a4ae:	e7b8      	b.n	800a422 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	bf0c      	ite	eq
 800a4b4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800a4b8:	f44f 7300 	movne.w	r3, #512	; 0x200
 800a4bc:	e7cc      	b.n	800a458 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800a4be:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4c0:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a4c2:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a4c4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a4c8:	e7eb      	b.n	800a4a2 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a4ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800a4ce:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800a4d0:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a4d2:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a4d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a4d8:	e7e3      	b.n	800a4a2 <HAL_SD_Init+0x96>
 800a4da:	bf00      	nop

0800a4dc <HAL_SD_GetCardState>:
{
 800a4dc:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4de:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800a4e0:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4e2:	6800      	ldr	r0, [r0, #0]
 800a4e4:	0409      	lsls	r1, r1, #16
 800a4e6:	f002 f92f 	bl	800c748 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	b120      	cbz	r0, 800a4f8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800a4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a4f6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	f001 f865 	bl	800b5c8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4fe:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a502:	bd10      	pop	{r4, pc}

0800a504 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop

0800a508 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop

0800a50c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop

0800a510 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop

0800a514 <HAL_SD_IRQHandler>:
{
 800a514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a516:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a518:	6800      	ldr	r0, [r0, #0]
{
 800a51a:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800a51c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a51e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a520:	041b      	lsls	r3, r3, #16
 800a522:	d502      	bpl.n	800a52a <HAL_SD_IRQHandler+0x16>
 800a524:	072f      	lsls	r7, r5, #28
 800a526:	f100 80b4 	bmi.w	800a692 <HAL_SD_IRQHandler+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a52a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a52c:	05de      	lsls	r6, r3, #23
 800a52e:	d529      	bpl.n	800a584 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a530:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a534:	4b91      	ldr	r3, [pc, #580]	; (800a77c <HAL_SD_IRQHandler+0x268>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a536:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a53c:	400b      	ands	r3, r1
 800a53e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a548:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a54a:	6822      	ldr	r2, [r4, #0]
 800a54c:	68d3      	ldr	r3, [r2, #12]
 800a54e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a552:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a554:	f015 0308 	ands.w	r3, r5, #8
 800a558:	d076      	beq.n	800a648 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a55a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a55e:	f040 80d9 	bne.w	800a714 <HAL_SD_IRQHandler+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a562:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800a564:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a566:	4986      	ldr	r1, [pc, #536]	; (800a780 <HAL_SD_IRQHandler+0x26c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a568:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a56a:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800a56c:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a570:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a574:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a576:	f000 80a0 	beq.w	800a6ba <HAL_SD_IRQHandler+0x1a6>
        HAL_SD_RxCpltCallback(hsd);
 800a57a:	4620      	mov	r0, r4
 800a57c:	f002 fa86 	bl	800ca8c <HAL_SD_RxCpltCallback>
}
 800a580:	b003      	add	sp, #12
 800a582:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a584:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a586:	045b      	lsls	r3, r3, #17
 800a588:	d502      	bpl.n	800a590 <HAL_SD_IRQHandler+0x7c>
 800a58a:	072f      	lsls	r7, r5, #28
 800a58c:	f100 809a 	bmi.w	800a6c4 <HAL_SD_IRQHandler+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a590:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a592:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a596:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a598:	d06c      	beq.n	800a674 <HAL_SD_IRQHandler+0x160>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a59a:	079e      	lsls	r6, r3, #30
 800a59c:	d503      	bpl.n	800a5a6 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a59e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5a0:	f043 0302 	orr.w	r3, r3, #2
 800a5a4:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a5a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5a8:	0719      	lsls	r1, r3, #28
 800a5aa:	d503      	bpl.n	800a5b4 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a5ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ae:	f043 0308 	orr.w	r3, r3, #8
 800a5b2:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a5b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5b6:	069a      	lsls	r2, r3, #26
 800a5b8:	d503      	bpl.n	800a5c2 <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a5c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5c4:	06db      	lsls	r3, r3, #27
 800a5c6:	d503      	bpl.n	800a5d0 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ca:	f043 0310 	orr.w	r3, r3, #16
 800a5ce:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5d0:	4b6b      	ldr	r3, [pc, #428]	; (800a780 <HAL_SD_IRQHandler+0x26c>)
 800a5d2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a5d4:	6822      	ldr	r2, [r4, #0]
 800a5d6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a5d8:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a5dc:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a5de:	6822      	ldr	r2, [r4, #0]
 800a5e0:	68d3      	ldr	r3, [r2, #12]
 800a5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e6:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a5e8:	6822      	ldr	r2, [r4, #0]
 800a5ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a5ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a5f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	68d3      	ldr	r3, [r2, #12]
 800a5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5fa:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	f001 fb63 	bl	800bcc8 <SDMMC_CmdStopTransfer>
 800a602:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a604:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a606:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a60a:	4318      	orrs	r0, r3
 800a60c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a60e:	68d3      	ldr	r3, [r2, #12]
 800a610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a614:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a61a:	f015 0308 	ands.w	r3, r5, #8
 800a61e:	f040 8087 	bne.w	800a730 <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a622:	062f      	lsls	r7, r5, #24
 800a624:	d5ac      	bpl.n	800a580 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a626:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a628:	2a00      	cmp	r2, #0
 800a62a:	d0a9      	beq.n	800a580 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a62c:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a62e:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800a630:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a632:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a634:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a638:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a63e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a642:	f7ff fbdf 	bl	8009e04 <HAL_SD_ErrorCallback>
 800a646:	e79b      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a648:	0629      	lsls	r1, r5, #24
 800a64a:	d599      	bpl.n	800a580 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800a64c:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a64e:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a652:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a654:	6822      	ldr	r2, [r4, #0]
 800a656:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a658:	6822      	ldr	r2, [r4, #0]
 800a65a:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a65c:	d176      	bne.n	800a74c <HAL_SD_IRQHandler+0x238>
      hsd->State = HAL_SD_STATE_READY;
 800a65e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a660:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a662:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a666:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a66a:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a66c:	d17b      	bne.n	800a766 <HAL_SD_IRQHandler+0x252>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a66e:	07aa      	lsls	r2, r5, #30
 800a670:	d086      	beq.n	800a580 <HAL_SD_IRQHandler+0x6c>
 800a672:	e782      	b.n	800a57a <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a674:	00de      	lsls	r6, r3, #3
 800a676:	d583      	bpl.n	800a580 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a67c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a67e:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a684:	0759      	lsls	r1, r3, #29
 800a686:	d45c      	bmi.n	800a742 <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a688:	06aa      	lsls	r2, r5, #26
 800a68a:	d573      	bpl.n	800a774 <HAL_SD_IRQHandler+0x260>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a68c:	f7ff ff40 	bl	800a510 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a690:	e776      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800a692:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 800a696:	2b1f      	cmp	r3, #31
 800a698:	f67f af72 	bls.w	800a580 <HAL_SD_IRQHandler+0x6c>
 800a69c:	f105 0620 	add.w	r6, r5, #32
 800a6a0:	e000      	b.n	800a6a4 <HAL_SD_IRQHandler+0x190>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a6a2:	6820      	ldr	r0, [r4, #0]
 800a6a4:	f000 ff7a 	bl	800b59c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a6a8:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 800a6ac:	42ae      	cmp	r6, r5
 800a6ae:	d1f8      	bne.n	800a6a2 <HAL_SD_IRQHandler+0x18e>
    hsd->RxXferSize -= 32U;
 800a6b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hsd->pRxBuffPtr = tmp;
 800a6b2:	6266      	str	r6, [r4, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a6b4:	3b20      	subs	r3, #32
 800a6b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6b8:	e762      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f002 f9e0 	bl	800ca80 <HAL_SD_TxCpltCallback>
}
 800a6c0:	b003      	add	sp, #12
 800a6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800a6c4:	6a23      	ldr	r3, [r4, #32]
 800a6c6:	2b1f      	cmp	r3, #31
 800a6c8:	f67f af5a 	bls.w	800a580 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800a6cc:	69e6      	ldr	r6, [r4, #28]
 800a6ce:	1d37      	adds	r7, r6, #4
 800a6d0:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800a6d4:	e000      	b.n	800a6d8 <HAL_SD_IRQHandler+0x1c4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a6d6:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800a6d8:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800a6dc:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a6de:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800a6e0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800a6e2:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800a6e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a6ea:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800a6ec:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800a6f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800a6f6:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800a6fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a6fe:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a700:	f000 ff50 	bl	800b5a4 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a704:	42af      	cmp	r7, r5
 800a706:	d1e6      	bne.n	800a6d6 <HAL_SD_IRQHandler+0x1c2>
    hsd->TxXferSize -= 32U;
 800a708:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800a70a:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800a70c:	3b20      	subs	r3, #32
 800a70e:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800a712:	e735      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	f001 fad7 	bl	800bcc8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a71a:	4603      	mov	r3, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f43f af20 	beq.w	800a562 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a722:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a724:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a726:	4313      	orrs	r3, r2
 800a728:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a72a:	f7ff fb6b 	bl	8009e04 <HAL_SD_ErrorCallback>
 800a72e:	e718      	b.n	800a562 <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800a730:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a732:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800a734:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800a736:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a73a:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a73c:	f7ff fb62 	bl	8009e04 <HAL_SD_ErrorCallback>
 800a740:	e71e      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a742:	06ab      	lsls	r3, r5, #26
 800a744:	d513      	bpl.n	800a76e <HAL_SD_IRQHandler+0x25a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a746:	f7ff fee1 	bl	800a50c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a74a:	e719      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	f001 fabb 	bl	800bcc8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a752:	4603      	mov	r3, r0
 800a754:	2800      	cmp	r0, #0
 800a756:	d082      	beq.n	800a65e <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 800a758:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a75a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a75c:	4313      	orrs	r3, r2
 800a75e:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a760:	f7ff fb50 	bl	8009e04 <HAL_SD_ErrorCallback>
 800a764:	e77b      	b.n	800a65e <HAL_SD_IRQHandler+0x14a>
        HAL_SD_TxCpltCallback(hsd);
 800a766:	4620      	mov	r0, r4
 800a768:	f002 f98a 	bl	800ca80 <HAL_SD_TxCpltCallback>
 800a76c:	e77f      	b.n	800a66e <HAL_SD_IRQHandler+0x15a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a76e:	f7ff fec9 	bl	800a504 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a772:	e705      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a774:	f7ff fec8 	bl	800a508 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a778:	e702      	b.n	800a580 <HAL_SD_IRQHandler+0x6c>
 800a77a:	bf00      	nop
 800a77c:	ffff3ec5 	.word	0xffff3ec5
 800a780:	18000f3a 	.word	0x18000f3a

0800a784 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a784:	b318      	cbz	r0, 800a7ce <HAL_SDRAM_Init+0x4a>
{
 800a786:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a788:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a794:	b1b3      	cbz	r3, 800a7c4 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a796:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a798:	2302      	movs	r3, #2
 800a79a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a79e:	f851 0b04 	ldr.w	r0, [r1], #4
 800a7a2:	f000 fe2d 	bl	800b400 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a7a6:	6862      	ldr	r2, [r4, #4]
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	f000 fe66 	bl	800b47c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a7b0:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7b2:	2101      	movs	r1, #1

  return HAL_OK;
 800a7b4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7be:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a7c4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a7c8:	f7f6 fae2 	bl	8000d90 <HAL_SDRAM_MspInit>
 800a7cc:	e7e3      	b.n	800a796 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a7ce:	2001      	movs	r0, #1
}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	52004000 	.word	0x52004000

0800a7d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a7d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a7da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a7de:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a7e0:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a7e2:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a7e4:	d004      	beq.n	800a7f0 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a7e6:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800a7ea:	2e01      	cmp	r6, #1
 800a7ec:	d001      	beq.n	800a7f2 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a7ee:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7f6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7fc:	f000 fe8c 	bl	800b518 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d003      	beq.n	800a80e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a806:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a808:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a80e:	2305      	movs	r3, #5
  return HAL_OK;
 800a810:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a812:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a816:	bd70      	pop	{r4, r5, r6, pc}

0800a818 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a818:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a81a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a81e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a820:	2b02      	cmp	r3, #2
 800a822:	b2d8      	uxtb	r0, r3
 800a824:	d005      	beq.n	800a832 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a826:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	b2dd      	uxtb	r5, r3
 800a82e:	d001      	beq.n	800a834 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a830:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a832:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a834:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a836:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a838:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a83c:	f000 fe84 	bl	800b548 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a840:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a842:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a846:	bd38      	pop	{r3, r4, r5, pc}

0800a848 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a848:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a84a:	4b1b      	ldr	r3, [pc, #108]	; (800a8b8 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
 800a84c:	680a      	ldr	r2, [r1, #0]
 800a84e:	f022 0201 	bic.w	r2, r2, #1
 800a852:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a854:	6802      	ldr	r2, [r0, #0]
 800a856:	6911      	ldr	r1, [r2, #16]
 800a858:	400b      	ands	r3, r1
 800a85a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a85c:	6802      	ldr	r2, [r0, #0]
 800a85e:	6993      	ldr	r3, [r2, #24]
 800a860:	f043 0308 	orr.w	r3, r3, #8
 800a864:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a866:	6802      	ldr	r2, [r0, #0]
 800a868:	6993      	ldr	r3, [r2, #24]
 800a86a:	f043 0310 	orr.w	r3, r3, #16
 800a86e:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a870:	6802      	ldr	r2, [r0, #0]
 800a872:	6893      	ldr	r3, [r2, #8]
 800a874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a878:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a87a:	6802      	ldr	r2, [r0, #0]
 800a87c:	6993      	ldr	r3, [r2, #24]
 800a87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a882:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a884:	6802      	ldr	r2, [r0, #0]
 800a886:	6993      	ldr	r3, [r2, #24]
 800a888:	f043 0320 	orr.w	r3, r3, #32
 800a88c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a88e:	6802      	ldr	r2, [r0, #0]
 800a890:	6993      	ldr	r3, [r2, #24]
 800a892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a896:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a898:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a89a:	6801      	ldr	r1, [r0, #0]
 800a89c:	698b      	ldr	r3, [r1, #24]
 800a89e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8a2:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a8a4:	6801      	ldr	r1, [r0, #0]
 800a8a6:	698b      	ldr	r3, [r1, #24]
 800a8a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a8ac:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800a8ae:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a8b2:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
 800a8b6:	4770      	bx	lr
 800a8b8:	fffffc90 	.word	0xfffffc90

0800a8bc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a8bc:	6802      	ldr	r2, [r0, #0]
{
 800a8be:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a8c0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8c2:	6991      	ldr	r1, [r2, #24]
 800a8c4:	f041 0108 	orr.w	r1, r1, #8
 800a8c8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8ca:	6801      	ldr	r1, [r0, #0]
 800a8cc:	698a      	ldr	r2, [r1, #24]
 800a8ce:	f042 0210 	orr.w	r2, r2, #16
 800a8d2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8d4:	6801      	ldr	r1, [r0, #0]
 800a8d6:	680a      	ldr	r2, [r1, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a8de:	6801      	ldr	r1, [r0, #0]
 800a8e0:	4a27      	ldr	r2, [pc, #156]	; (800a980 <SPI_CloseTransfer+0xc4>)
 800a8e2:	690c      	ldr	r4, [r1, #16]
 800a8e4:	4022      	ands	r2, r4
 800a8e6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a8e8:	6801      	ldr	r1, [r0, #0]
 800a8ea:	688a      	ldr	r2, [r1, #8]
 800a8ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a8f0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8f2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a8f6:	2a04      	cmp	r2, #4
 800a8f8:	d001      	beq.n	800a8fe <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a8fa:	069c      	lsls	r4, r3, #26
 800a8fc:	d433      	bmi.n	800a966 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8fe:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a902:	2a03      	cmp	r2, #3
 800a904:	d001      	beq.n	800a90a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a906:	0659      	lsls	r1, r3, #25
 800a908:	d421      	bmi.n	800a94e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a90a:	059a      	lsls	r2, r3, #22
 800a90c:	d50a      	bpl.n	800a924 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a90e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a912:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a914:	f042 0201 	orr.w	r2, r2, #1
 800a918:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a91c:	698a      	ldr	r2, [r1, #24]
 800a91e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a922:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a924:	05db      	lsls	r3, r3, #23
 800a926:	d50a      	bpl.n	800a93e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a928:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a92c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a92e:	f043 0308 	orr.w	r3, r3, #8
 800a932:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a936:	6993      	ldr	r3, [r2, #24]
 800a938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a93c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a93e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800a940:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800a944:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a948:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a94c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a94e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a952:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a954:	f042 0204 	orr.w	r2, r2, #4
 800a958:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a95c:	698a      	ldr	r2, [r1, #24]
 800a95e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a962:	618a      	str	r2, [r1, #24]
 800a964:	e7d1      	b.n	800a90a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a966:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a96a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a96c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a970:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a974:	698a      	ldr	r2, [r1, #24]
 800a976:	f042 0220 	orr.w	r2, r2, #32
 800a97a:	618a      	str	r2, [r1, #24]
 800a97c:	e7bf      	b.n	800a8fe <SPI_CloseTransfer+0x42>
 800a97e:	bf00      	nop
 800a980:	fffffc90 	.word	0xfffffc90

0800a984 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a984:	2800      	cmp	r0, #0
 800a986:	f000 80be 	beq.w	800ab06 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a98a:	4a62      	ldr	r2, [pc, #392]	; (800ab14 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a98c:	2100      	movs	r1, #0
{
 800a98e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a990:	6803      	ldr	r3, [r0, #0]
 800a992:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a994:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a996:	4293      	cmp	r3, r2
 800a998:	d015      	beq.n	800a9c6 <HAL_SPI_Init+0x42>
 800a99a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d011      	beq.n	800a9c6 <HAL_SPI_Init+0x42>
 800a9a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	68c2      	ldr	r2, [r0, #12]
 800a9aa:	f000 80a5 	beq.w	800aaf8 <HAL_SPI_Init+0x174>
 800a9ae:	2a0f      	cmp	r2, #15
 800a9b0:	d807      	bhi.n	800a9c2 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9b4:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9b6:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a9b8:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800a9ba:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9be:	2a08      	cmp	r2, #8
 800a9c0:	d914      	bls.n	800a9ec <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800a9c2:	2001      	movs	r0, #1
}
 800a9c4:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800a9c6:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a9ca:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9cc:	4851      	ldr	r0, [pc, #324]	; (800ab14 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9ce:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a9d0:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a9d2:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9d6:	4950      	ldr	r1, [pc, #320]	; (800ab18 <HAL_SPI_Init+0x194>)
 800a9d8:	428b      	cmp	r3, r1
 800a9da:	bf18      	it	ne
 800a9dc:	4283      	cmpne	r3, r0
 800a9de:	d003      	beq.n	800a9e8 <HAL_SPI_Init+0x64>
 800a9e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a9e4:	428b      	cmp	r3, r1
 800a9e6:	d101      	bne.n	800a9ec <HAL_SPI_Init+0x68>
 800a9e8:	2a10      	cmp	r2, #16
 800a9ea:	d8ea      	bhi.n	800a9c2 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9ec:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800a9f0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d078      	beq.n	800aaea <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	f022 0201 	bic.w	r2, r2, #1
 800aa04:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa06:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa08:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa0a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aa0e:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa16:	d058      	beq.n	800aaca <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa18:	0249      	lsls	r1, r1, #9
 800aa1a:	d502      	bpl.n	800aa22 <HAL_SPI_Init+0x9e>
 800aa1c:	68e1      	ldr	r1, [r4, #12]
 800aa1e:	2906      	cmp	r1, #6
 800aa20:	d84c      	bhi.n	800aabc <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800aa28:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aa2a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800aa2c:	69e3      	ldr	r3, [r4, #28]
 800aa2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800aa30:	432b      	orrs	r3, r5
 800aa32:	6821      	ldr	r1, [r4, #0]
 800aa34:	4303      	orrs	r3, r0
 800aa36:	68e0      	ldr	r0, [r4, #12]
 800aa38:	4303      	orrs	r3, r0
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aa3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa40:	69a0      	ldr	r0, [r4, #24]
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800aa48:	432b      	orrs	r3, r5
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	6921      	ldr	r1, [r4, #16]
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	6960      	ldr	r0, [r4, #20]
 800aa52:	430b      	orrs	r3, r1
 800aa54:	6a21      	ldr	r1, [r4, #32]
 800aa56:	4303      	orrs	r3, r0
 800aa58:	6860      	ldr	r0, [r4, #4]
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aa5e:	4303      	orrs	r3, r0
 800aa60:	68a0      	ldr	r0, [r4, #8]
 800aa62:	430b      	orrs	r3, r1
 800aa64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa66:	4303      	orrs	r3, r0
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	b96b      	cbnz	r3, 800aa90 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	6893      	ldr	r3, [r2, #8]
 800aa78:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800aa7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa80:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	6893      	ldr	r3, [r2, #8]
 800aa86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa8e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800aa94:	f023 0301 	bic.w	r3, r3, #1
 800aa98:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	025b      	lsls	r3, r3, #9
 800aa9e:	d506      	bpl.n	800aaae <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aaa4:	68d3      	ldr	r3, [r2, #12]
 800aaa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aaae:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800aab0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aab2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aab6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aabc:	6819      	ldr	r1, [r3, #0]
 800aabe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aac0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800aac4:	4301      	orrs	r1, r0
 800aac6:	6019      	str	r1, [r3, #0]
 800aac8:	e7af      	b.n	800aa2a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aaca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800aace:	d01c      	beq.n	800ab0a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d1a1      	bne.n	800aa18 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aad4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aad6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800aada:	d1a2      	bne.n	800aa22 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aadc:	6819      	ldr	r1, [r3, #0]
 800aade:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800aae2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aae4:	e9d4 3100 	ldrd	r3, r1, [r4]
 800aae8:	e796      	b.n	800aa18 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800aaea:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800aaec:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800aaf0:	f7f8 fb4a 	bl	8003188 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	e77f      	b.n	800a9f8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aaf8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800aafa:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aafc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800aafe:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800ab00:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab04:	e770      	b.n	800a9e8 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800ab06:	2001      	movs	r0, #1
}
 800ab08:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d0e5      	beq.n	800aadc <HAL_SPI_Init+0x158>
 800ab10:	e784      	b.n	800aa1c <HAL_SPI_Init+0x98>
 800ab12:	bf00      	nop
 800ab14:	40013000 	.word	0x40013000
 800ab18:	40003800 	.word	0x40003800

0800ab1c <HAL_SPI_Receive_DMA>:
{
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800ab1e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	f000 80a9 	beq.w	800ac7a <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ab28:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ab2c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ab32:	b2de      	uxtb	r6, r3
 800ab34:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800ab36:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ab3a:	f040 8093 	bne.w	800ac64 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	f000 808b 	beq.w	800ac5a <HAL_SPI_Receive_DMA+0x13e>
 800ab44:	fab5 f385 	clz	r3, r5
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	f000 8085 	beq.w	800ac5a <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab50:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab52:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab54:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab56:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800ab5a:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab5e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800ab62:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab64:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ab68:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800ab6c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab70:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ab74:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab78:	d07a      	beq.n	800ac70 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800ab7a:	68d3      	ldr	r3, [r2, #12]
 800ab7c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ab80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab84:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ab86:	68e3      	ldr	r3, [r4, #12]
 800ab88:	2b0f      	cmp	r3, #15
 800ab8a:	d861      	bhi.n	800ac50 <HAL_SPI_Receive_DMA+0x134>
 800ab8c:	2b07      	cmp	r3, #7
 800ab8e:	f200 8092 	bhi.w	800acb6 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	6893      	ldr	r3, [r2, #8]
 800ab96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab9a:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ab9c:	68e3      	ldr	r3, [r4, #12]
 800ab9e:	2b07      	cmp	r3, #7
 800aba0:	d86e      	bhi.n	800ac80 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aba2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800abaa:	d107      	bne.n	800abbc <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800abac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800abb0:	b292      	uxth	r2, r2
 800abb2:	3201      	adds	r2, #1
 800abb4:	0852      	lsrs	r2, r2, #1
 800abb6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800abba:	699a      	ldr	r2, [r3, #24]
 800abbc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800abc0:	d106      	bne.n	800abd0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800abc2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800abc6:	b292      	uxth	r2, r2
 800abc8:	3203      	adds	r2, #3
 800abca:	0892      	lsrs	r2, r2, #2
 800abcc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800abd0:	4a3e      	ldr	r2, [pc, #248]	; (800accc <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800abd2:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800abd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800abd6:	4a3e      	ldr	r2, [pc, #248]	; (800acd0 <HAL_SPI_Receive_DMA+0x1b4>)
 800abd8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800abda:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800abdc:	4a3d      	ldr	r2, [pc, #244]	; (800acd4 <HAL_SPI_Receive_DMA+0x1b8>)
 800abde:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800abe0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800abe2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800abe4:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800abe6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800abea:	6821      	ldr	r1, [r4, #0]
 800abec:	b29b      	uxth	r3, r3
 800abee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abf0:	3130      	adds	r1, #48	; 0x30
 800abf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800abf4:	f7f9 fec2 	bl	800497c <HAL_DMA_Start_IT>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d150      	bne.n	800ac9e <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800abfc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800abfe:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ac00:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ac02:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ac04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ac08:	4b33      	ldr	r3, [pc, #204]	; (800acd8 <HAL_SPI_Receive_DMA+0x1bc>)
 800ac0a:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac0e:	bf18      	it	ne
 800ac10:	432b      	orrne	r3, r5
 800ac12:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ac14:	6822      	ldr	r2, [r4, #0]
 800ac16:	6893      	ldr	r3, [r2, #8]
 800ac18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac1c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	6913      	ldr	r3, [r2, #16]
 800ac22:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800ac26:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ac28:	6822      	ldr	r2, [r4, #0]
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac38:	d104      	bne.n	800ac44 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	6813      	ldr	r3, [r2, #0]
 800ac3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac42:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800ac44:	2300      	movs	r3, #0
  return errorcode;
 800ac46:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800ac48:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ac50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac58:	d09b      	beq.n	800ab92 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ac60:	4630      	mov	r0, r6
 800ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800ac64:	2300      	movs	r3, #0
    return errorcode;
 800ac66:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800ac68:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800ac70:	6813      	ldr	r3, [r2, #0]
 800ac72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	e785      	b.n	800ab86 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800ac7a:	2602      	movs	r6, #2
}
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ac80:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ac82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ac84:	d8a4      	bhi.n	800abd0 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ac8c:	d1a0      	bne.n	800abd0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ac8e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ac92:	b292      	uxth	r2, r2
 800ac94:	3201      	adds	r2, #1
 800ac96:	0852      	lsrs	r2, r2, #1
 800ac98:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ac9c:	e798      	b.n	800abd0 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aca2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800aca4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aca8:	f043 0310 	orr.w	r3, r3, #16
 800acac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800acb0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800acb4:	e7d4      	b.n	800ac60 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800acb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbe:	f43f af68 	beq.w	800ab92 <HAL_SPI_Receive_DMA+0x76>
 800acc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acc6:	d1c8      	bne.n	800ac5a <HAL_SPI_Receive_DMA+0x13e>
 800acc8:	e763      	b.n	800ab92 <HAL_SPI_Receive_DMA+0x76>
 800acca:	bf00      	nop
 800accc:	0800b0ad 	.word	0x0800b0ad
 800acd0:	0800b05d 	.word	0x0800b05d
 800acd4:	0800b0c9 	.word	0x0800b0c9
 800acd8:	ffff0000 	.word	0xffff0000

0800acdc <HAL_SPI_TransmitReceive_DMA>:
{
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800ace2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	f000 809a 	beq.w	800ae20 <HAL_SPI_TransmitReceive_DMA+0x144>
 800acec:	2301      	movs	r3, #1
 800acee:	4604      	mov	r4, r0
 800acf0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800acf4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	b2de      	uxtb	r6, r3
 800acfc:	d158      	bne.n	800adb0 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800acfe:	2d00      	cmp	r5, #0
 800ad00:	bf18      	it	ne
 800ad02:	2a00      	cmpne	r2, #0
 800ad04:	d04e      	beq.n	800ada4 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800ad06:	fab1 f381 	clz	r3, r1
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d049      	beq.n	800ada4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ad10:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ad12:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad14:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800ad16:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ad18:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800ad1c:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad20:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800ad24:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800ad28:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800ad2c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ad30:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800ad34:	68d3      	ldr	r3, [r2, #12]
 800ad36:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ad3a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ad3c:	6802      	ldr	r2, [r0, #0]
 800ad3e:	6893      	ldr	r3, [r2, #8]
 800ad40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ad44:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ad46:	68c3      	ldr	r3, [r0, #12]
 800ad48:	2b0f      	cmp	r3, #15
 800ad4a:	d938      	bls.n	800adbe <HAL_SPI_TransmitReceive_DMA+0xe2>
 800ad4c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ad54:	d126      	bne.n	800ada4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ad56:	4a6c      	ldr	r2, [pc, #432]	; (800af08 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800ad58:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ad5c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800af14 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ad62:	4a6a      	ldr	r2, [pc, #424]	; (800af0c <HAL_SPI_TransmitReceive_DMA+0x230>)
 800ad64:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ad66:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ad68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ad6a:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ad6e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ad70:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800ad74:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ad78:	6821      	ldr	r1, [r4, #0]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad7e:	3130      	adds	r1, #48	; 0x30
 800ad80:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ad82:	f7f9 fdfb 	bl	800497c <HAL_DMA_Start_IT>
 800ad86:	4607      	mov	r7, r0
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d04d      	beq.n	800ae28 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad8c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ad90:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800ad92:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad96:	f043 0310 	orr.w	r3, r3, #16
 800ad9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ad9e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800ada2:	e002      	b.n	800adaa <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800ada4:	2300      	movs	r3, #0
 800ada6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800adaa:	4630      	mov	r0, r6
 800adac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800adb0:	2300      	movs	r3, #0
    return errorcode;
 800adb2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800adb4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800adb8:	4630      	mov	r0, r6
 800adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	d87f      	bhi.n	800aec2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adc2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800adc4:	6993      	ldr	r3, [r2, #24]
 800adc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adca:	d107      	bne.n	800addc <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800adcc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800add0:	b29b      	uxth	r3, r3
 800add2:	3301      	adds	r3, #1
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800adda:	6993      	ldr	r3, [r2, #24]
 800addc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ade0:	d106      	bne.n	800adf0 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ade2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	3303      	adds	r3, #3
 800adea:	089b      	lsrs	r3, r3, #2
 800adec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adf0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800adf2:	699a      	ldr	r2, [r3, #24]
 800adf4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800adf8:	d107      	bne.n	800ae0a <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800adfa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800adfe:	b292      	uxth	r2, r2
 800ae00:	3201      	adds	r2, #1
 800ae02:	0852      	lsrs	r2, r2, #1
 800ae04:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae08:	699a      	ldr	r2, [r3, #24]
 800ae0a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ae0e:	d1a2      	bne.n	800ad56 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ae10:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ae14:	b292      	uxth	r2, r2
 800ae16:	3203      	adds	r2, #3
 800ae18:	0892      	lsrs	r2, r2, #2
 800ae1a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ae1e:	e79a      	b.n	800ad56 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800ae20:	2602      	movs	r6, #2
}
 800ae22:	4630      	mov	r0, r6
 800ae24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ae28:	6822      	ldr	r2, [r4, #0]
 800ae2a:	6893      	ldr	r3, [r2, #8]
 800ae2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae30:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ae32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae34:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ae36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae38:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ae3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae3c:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ae3e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae40:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800ae44:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae4e:	3220      	adds	r2, #32
 800ae50:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ae52:	f7f9 fd93 	bl	800497c <HAL_DMA_Start_IT>
 800ae56:	bb40      	cbnz	r0, 800aeaa <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ae58:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ae5a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ae5c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ae5e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ae60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ae64:	4b2a      	ldr	r3, [pc, #168]	; (800af10 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800ae66:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae6a:	bf18      	it	ne
 800ae6c:	432b      	orrne	r3, r5
 800ae6e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ae70:	6822      	ldr	r2, [r4, #0]
 800ae72:	6893      	ldr	r3, [r2, #8]
 800ae74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae78:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ae7a:	6822      	ldr	r2, [r4, #0]
 800ae7c:	6913      	ldr	r3, [r2, #16]
 800ae7e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800ae82:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	6813      	ldr	r3, [r2, #0]
 800ae88:	f043 0301 	orr.w	r3, r3, #1
 800ae8c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae8e:	6863      	ldr	r3, [r4, #4]
 800ae90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae94:	d104      	bne.n	800aea0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae96:	6822      	ldr	r2, [r4, #0]
 800ae98:	6813      	ldr	r3, [r2, #0]
 800ae9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae9e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800aea0:	2300      	movs	r3, #0
  return errorcode;
 800aea2:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800aea4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800aea8:	e77f      	b.n	800adaa <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aeaa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aeae:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800aeb0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aeb4:	f043 0310 	orr.w	r3, r3, #16
 800aeb8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aebc:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800aec0:	e773      	b.n	800adaa <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800aec2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aeca:	d003      	beq.n	800aed4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800aecc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aed0:	f47f af68 	bne.w	800ada4 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aed4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800aed6:	6989      	ldr	r1, [r1, #24]
 800aed8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800aedc:	d107      	bne.n	800aeee <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800aede:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800aee2:	b292      	uxth	r2, r2
 800aee4:	3201      	adds	r2, #1
 800aee6:	0852      	lsrs	r2, r2, #1
 800aee8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aeec:	699a      	ldr	r2, [r3, #24]
 800aeee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aef2:	f47f af30 	bne.w	800ad56 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800aef6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800aefa:	b292      	uxth	r2, r2
 800aefc:	3201      	adds	r2, #1
 800aefe:	0852      	lsrs	r2, r2, #1
 800af00:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800af04:	e727      	b.n	800ad56 <HAL_SPI_TransmitReceive_DMA+0x7a>
 800af06:	bf00      	nop
 800af08:	0800b0b9 	.word	0x0800b0b9
 800af0c:	0800b085 	.word	0x0800b085
 800af10:	ffff0000 	.word	0xffff0000
 800af14:	0800b0c9 	.word	0x0800b0c9

0800af18 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800af18:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	f000 8095 	beq.w	800b04c <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800af22:	4b4b      	ldr	r3, [pc, #300]	; (800b050 <HAL_SPI_Abort+0x138>)
 800af24:	2164      	movs	r1, #100	; 0x64
 800af26:	4a4b      	ldr	r2, [pc, #300]	; (800b054 <HAL_SPI_Abort+0x13c>)
{
 800af28:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800af2e:	2001      	movs	r0, #1
{
 800af30:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800af32:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800af36:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 800af38:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800af3c:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800af3e:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
 800af40:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800af44:	fb01 f303 	mul.w	r3, r1, r3
 800af48:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800af4a:	6813      	ldr	r3, [r2, #0]
 800af4c:	0598      	lsls	r0, r3, #22
 800af4e:	d53e      	bpl.n	800afce <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800af50:	6913      	ldr	r3, [r2, #16]
 800af52:	f023 0308 	bic.w	r3, r3, #8
 800af56:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800af58:	6822      	ldr	r2, [r4, #0]
 800af5a:	e002      	b.n	800af62 <HAL_SPI_Abort+0x4a>
 800af5c:	6913      	ldr	r3, [r2, #16]
 800af5e:	0719      	lsls	r1, r3, #28
 800af60:	d50b      	bpl.n	800af7a <HAL_SPI_Abort+0x62>
      count--;
 800af62:	9b01      	ldr	r3, [sp, #4]
 800af64:	3b01      	subs	r3, #1
 800af66:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1f6      	bne.n	800af5c <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af80:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800af82:	6822      	ldr	r2, [r4, #0]
 800af84:	e002      	b.n	800af8c <HAL_SPI_Abort+0x74>
 800af86:	6813      	ldr	r3, [r2, #0]
 800af88:	059b      	lsls	r3, r3, #22
 800af8a:	d50b      	bpl.n	800afa4 <HAL_SPI_Abort+0x8c>
      count--;
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	3b01      	subs	r3, #1
 800af90:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1f6      	bne.n	800af86 <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800afa4:	6993      	ldr	r3, [r2, #24]
 800afa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afaa:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	e002      	b.n	800afb6 <HAL_SPI_Abort+0x9e>
 800afb0:	6953      	ldr	r3, [r2, #20]
 800afb2:	0518      	lsls	r0, r3, #20
 800afb4:	d50b      	bpl.n	800afce <HAL_SPI_Abort+0xb6>
      count--;
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	3b01      	subs	r3, #1
 800afba:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800afbc:	9b01      	ldr	r3, [sp, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1f6      	bne.n	800afb0 <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afc2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800afce:	6893      	ldr	r3, [r2, #8]
 800afd0:	0419      	lsls	r1, r3, #16
 800afd2:	d508      	bpl.n	800afe6 <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
 800afd4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800afd6:	b133      	cbz	r3, 800afe6 <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
 800afd8:	2200      	movs	r2, #0
 800afda:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800afdc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800afde:	f7f9 ff99 	bl	8004f14 <HAL_DMA_Abort>
 800afe2:	bb00      	cbnz	r0, 800b026 <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	6893      	ldr	r3, [r2, #8]
 800afe8:	045b      	lsls	r3, r3, #17
 800afea:	d507      	bpl.n	800affc <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
 800afec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800afee:	b12b      	cbz	r3, 800affc <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
 800aff0:	2200      	movs	r2, #0
 800aff2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800aff4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aff6:	f7f9 ff8d 	bl	8004f14 <HAL_DMA_Abort>
 800affa:	b9f0      	cbnz	r0, 800b03a <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
 800affc:	4620      	mov	r0, r4
 800affe:	f7ff fc23 	bl	800a848 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800b002:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b006:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800b00a:	d10a      	bne.n	800b022 <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
 800b00c:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b00e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800b012:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b014:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800b016:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800b01a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800b01e:	b002      	add	sp, #8
 800b020:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
 800b022:	2001      	movs	r0, #1
 800b024:	e7f5      	b.n	800b012 <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b026:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b028:	f7fa fef8 	bl	8005e1c <HAL_DMA_GetError>
 800b02c:	2820      	cmp	r0, #32
 800b02e:	d1d9      	bne.n	800afe4 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b030:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800b032:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b034:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b038:	e7d5      	b.n	800afe6 <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b03a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b03c:	f7fa feee 	bl	8005e1c <HAL_DMA_GetError>
 800b040:	2820      	cmp	r0, #32
 800b042:	d1db      	bne.n	800affc <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b044:	2340      	movs	r3, #64	; 0x40
 800b046:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b04a:	e7d7      	b.n	800affc <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
 800b04c:	2002      	movs	r0, #2
}
 800b04e:	4770      	bx	lr
 800b050:	200008f4 	.word	0x200008f4
 800b054:	057619f1 	.word	0x057619f1

0800b058 <HAL_SPI_TxCpltCallback>:
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <SPI_DMAReceiveCplt>:
{
 800b05c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b05e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b060:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b064:	2b07      	cmp	r3, #7
 800b066:	d009      	beq.n	800b07c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b068:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b070:	d005      	beq.n	800b07e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b072:	6802      	ldr	r2, [r0, #0]
 800b074:	6913      	ldr	r3, [r2, #16]
 800b076:	f043 0308 	orr.w	r3, r3, #8
 800b07a:	6113      	str	r3, [r2, #16]
}
 800b07c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800b07e:	f010 fb7b 	bl	801b778 <__HAL_SPI_RxCpltCallback_veneer>
}
 800b082:	bd08      	pop	{r3, pc}

0800b084 <SPI_DMATransmitReceiveCplt>:
{
 800b084:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b086:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b088:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	d009      	beq.n	800b0a4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b090:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b098:	d005      	beq.n	800b0a6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b09a:	6802      	ldr	r2, [r0, #0]
 800b09c:	6913      	ldr	r3, [r2, #16]
 800b09e:	f043 0308 	orr.w	r3, r3, #8
 800b0a2:	6113      	str	r3, [r2, #16]
}
 800b0a4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800b0a6:	f010 fb8b 	bl	801b7c0 <__HAL_SPI_TxRxCpltCallback_veneer>
}
 800b0aa:	bd08      	pop	{r3, pc}

0800b0ac <SPI_DMAHalfReceiveCplt>:
{
 800b0ac:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b0ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b0b0:	f010 fb7a 	bl	801b7a8 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800b0b4:	bd08      	pop	{r3, pc}
 800b0b6:	bf00      	nop

0800b0b8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800b0b8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b0ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b0bc:	f010 fb88 	bl	801b7d0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800b0c0:	bd08      	pop	{r3, pc}
 800b0c2:	bf00      	nop

0800b0c4 <HAL_SPI_ErrorCallback>:
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop

0800b0c8 <SPI_DMAError>:
{
 800b0c8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ca:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b0cc:	f7fa fea6 	bl	8005e1c <HAL_DMA_GetError>
 800b0d0:	2802      	cmp	r0, #2
 800b0d2:	d100      	bne.n	800b0d6 <SPI_DMAError+0xe>
}
 800b0d4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b0da:	6991      	ldr	r1, [r2, #24]
 800b0dc:	f041 0108 	orr.w	r1, r1, #8
 800b0e0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b0e2:	6821      	ldr	r1, [r4, #0]
 800b0e4:	698a      	ldr	r2, [r1, #24]
 800b0e6:	f042 0210 	orr.w	r2, r2, #16
 800b0ea:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800b0ec:	6821      	ldr	r1, [r4, #0]
 800b0ee:	680a      	ldr	r2, [r1, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b0f6:	6821      	ldr	r1, [r4, #0]
 800b0f8:	4a2c      	ldr	r2, [pc, #176]	; (800b1ac <SPI_DMAError+0xe4>)
 800b0fa:	6908      	ldr	r0, [r1, #16]
 800b0fc:	4002      	ands	r2, r0
 800b0fe:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b100:	6821      	ldr	r1, [r4, #0]
 800b102:	688a      	ldr	r2, [r1, #8]
 800b104:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b108:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b10a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b10e:	2a04      	cmp	r2, #4
 800b110:	d001      	beq.n	800b116 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b112:	0698      	lsls	r0, r3, #26
 800b114:	d43d      	bmi.n	800b192 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b116:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b11a:	2a03      	cmp	r2, #3
 800b11c:	d001      	beq.n	800b122 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b11e:	0659      	lsls	r1, r3, #25
 800b120:	d42b      	bmi.n	800b17a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b122:	059a      	lsls	r2, r3, #22
 800b124:	d50a      	bpl.n	800b13c <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b126:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b12a:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b12c:	f042 0201 	orr.w	r2, r2, #1
 800b130:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b134:	698a      	ldr	r2, [r1, #24]
 800b136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b13a:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b13c:	05db      	lsls	r3, r3, #23
 800b13e:	d50a      	bpl.n	800b156 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b140:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b144:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b146:	f043 0308 	orr.w	r3, r3, #8
 800b14a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b14e:	6993      	ldr	r3, [r2, #24]
 800b150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b154:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800b156:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800b158:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800b15a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800b15c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b160:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b164:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b168:	f043 0310 	orr.w	r3, r3, #16
 800b16c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b170:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b174:	f7ff ffa6 	bl	800b0c4 <HAL_SPI_ErrorCallback>
}
 800b178:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b17a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b17e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b180:	f042 0204 	orr.w	r2, r2, #4
 800b184:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b188:	698a      	ldr	r2, [r1, #24]
 800b18a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b18e:	618a      	str	r2, [r1, #24]
 800b190:	e7c7      	b.n	800b122 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b192:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b196:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b19c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b1a0:	698a      	ldr	r2, [r1, #24]
 800b1a2:	f042 0220 	orr.w	r2, r2, #32
 800b1a6:	618a      	str	r2, [r1, #24]
 800b1a8:	e7b5      	b.n	800b116 <SPI_DMAError+0x4e>
 800b1aa:	bf00      	nop
 800b1ac:	fffffc90 	.word	0xfffffc90

0800b1b0 <SPI_DMAAbortOnError>:
{
 800b1b0:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800b1b2:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b1bc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b1c0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b1c4:	f7ff ff7e 	bl	800b0c4 <HAL_SPI_ErrorCallback>
}
 800b1c8:	bd08      	pop	{r3, pc}
 800b1ca:	bf00      	nop

0800b1cc <HAL_SPI_SuspendCallback>:
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop

0800b1d0 <HAL_SPI_IRQHandler>:
{
 800b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b1d4:	6802      	ldr	r2, [r0, #0]
{
 800b1d6:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b1d8:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b1da:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b1dc:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800b1de:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800b1e2:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b1e6:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800b1e8:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b1ea:	d502      	bpl.n	800b1f2 <HAL_SPI_IRQHandler+0x22>
 800b1ec:	0709      	lsls	r1, r1, #28
 800b1ee:	f100 80e1 	bmi.w	800b3b4 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b1f2:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d044      	beq.n	800b284 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b1fa:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d04a      	beq.n	800b298 <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b202:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800b206:	2b02      	cmp	r3, #2
 800b208:	f000 80ea 	beq.w	800b3e0 <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b20c:	072b      	lsls	r3, r5, #28
 800b20e:	d563      	bpl.n	800b2d8 <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b210:	6993      	ldr	r3, [r2, #24]
 800b212:	f043 0308 	orr.w	r3, r3, #8
 800b216:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b218:	6821      	ldr	r1, [r4, #0]
 800b21a:	698b      	ldr	r3, [r1, #24]
 800b21c:	f043 0310 	orr.w	r3, r3, #16
 800b220:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b222:	6821      	ldr	r1, [r4, #0]
 800b224:	698b      	ldr	r3, [r1, #24]
 800b226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b22a:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b22c:	6821      	ldr	r1, [r4, #0]
 800b22e:	690b      	ldr	r3, [r1, #16]
 800b230:	f023 0308 	bic.w	r3, r3, #8
 800b234:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b23e:	d135      	bne.n	800b2ac <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 800b240:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b244:	b29b      	uxth	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d030      	beq.n	800b2ac <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b24a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b24c:	e00f      	b.n	800b26e <HAL_SPI_IRQHandler+0x9e>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b252:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b254:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b256:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800b258:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b25c:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29b      	uxth	r3, r3
 800b262:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b266:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	b1f3      	cbz	r3, 800b2ac <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b26e:	68e3      	ldr	r3, [r4, #12]
 800b270:	2b0f      	cmp	r3, #15
 800b272:	d8ec      	bhi.n	800b24e <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b274:	2b07      	cmp	r3, #7
 800b276:	f240 80ac 	bls.w	800b3d2 <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b27a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800b27c:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b27e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b280:	3102      	adds	r1, #2
 800b282:	e7e9      	b.n	800b258 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b284:	4620      	mov	r0, r4
 800b286:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b288:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b28a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b28c:	4620      	mov	r0, r4
 800b28e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b290:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b294:	2b01      	cmp	r3, #1
 800b296:	d102      	bne.n	800b29e <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 800b298:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b29a:	4620      	mov	r0, r4
 800b29c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b29e:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800b2a2:	2d02      	cmp	r5, #2
 800b2a4:	f000 809c 	beq.w	800b3e0 <HAL_SPI_IRQHandler+0x210>
}
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7ff fb05 	bl	800a8bc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f040 8085 	bne.w	800b3cc <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b2c2:	2e05      	cmp	r6, #5
 800b2c4:	f000 8091 	beq.w	800b3ea <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b2c8:	2e04      	cmp	r6, #4
 800b2ca:	f000 8091 	beq.w	800b3f0 <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b2ce:	2e03      	cmp	r6, #3
 800b2d0:	d1ea      	bne.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 800b2d2:	f7ff fec1 	bl	800b058 <HAL_SPI_TxCpltCallback>
 800b2d6:	e7e7      	b.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b2d8:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b2dc:	d0e4      	beq.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b2de:	0668      	lsls	r0, r5, #25
 800b2e0:	d509      	bpl.n	800b2f6 <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b2e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2e6:	f043 0304 	orr.w	r3, r3, #4
 800b2ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2ee:	6993      	ldr	r3, [r2, #24]
 800b2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b2f6:	05a9      	lsls	r1, r5, #22
 800b2f8:	d50a      	bpl.n	800b310 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b2fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b2fe:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b300:	f043 0301 	orr.w	r3, r3, #1
 800b304:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b308:	6993      	ldr	r3, [r2, #24]
 800b30a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b30e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b310:	05ea      	lsls	r2, r5, #23
 800b312:	d50a      	bpl.n	800b32a <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b314:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b318:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b31a:	f043 0308 	orr.w	r3, r3, #8
 800b31e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b322:	6993      	ldr	r3, [r2, #24]
 800b324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b328:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b32a:	06ab      	lsls	r3, r5, #26
 800b32c:	d50a      	bpl.n	800b344 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b32e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b332:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b33c:	6993      	ldr	r3, [r2, #24]
 800b33e:	f043 0320 	orr.w	r3, r3, #32
 800b342:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b344:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0ad      	beq.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 800b34c:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b34e:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b352:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b354:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b35e:	6822      	ldr	r2, [r4, #0]
 800b360:	4b25      	ldr	r3, [pc, #148]	; (800b3f8 <HAL_SPI_IRQHandler+0x228>)
 800b362:	6911      	ldr	r1, [r2, #16]
 800b364:	ea03 0301 	and.w	r3, r3, r1
 800b368:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b36a:	d12b      	bne.n	800b3c4 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b36c:	6822      	ldr	r2, [r4, #0]
 800b36e:	6893      	ldr	r3, [r2, #8]
 800b370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b374:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b376:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b378:	b15b      	cbz	r3, 800b392 <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b37a:	4a20      	ldr	r2, [pc, #128]	; (800b3fc <HAL_SPI_IRQHandler+0x22c>)
 800b37c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b37e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b380:	f7f9 ffde 	bl	8005340 <HAL_DMA_Abort_IT>
 800b384:	b128      	cbz	r0, 800b392 <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b386:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b392:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b394:	2b00      	cmp	r3, #0
 800b396:	d087      	beq.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b398:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <HAL_SPI_IRQHandler+0x22c>)
 800b39a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b39c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b39e:	f7f9 ffcf 	bl	8005340 <HAL_DMA_Abort_IT>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d080      	beq.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b3a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b3b2:	e779      	b.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b3b4:	6993      	ldr	r3, [r2, #24]
 800b3b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3ba:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b3bc:	f7ff ff06 	bl	800b1cc <HAL_SPI_SuspendCallback>
}
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800b3c4:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800b3c6:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800b3c8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b3cc:	f7ff fe7a 	bl	800b0c4 <HAL_SPI_ErrorCallback>
 800b3d0:	e76a      	b.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3d8:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b3dc:	3101      	adds	r1, #1
 800b3de:	e73b      	b.n	800b258 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b3e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b3e2:	4620      	mov	r0, r4
}
 800b3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800b3e8:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3ea:	f010 f9e9 	bl	801b7c0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800b3ee:	e75b      	b.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 800b3f0:	f010 f9c2 	bl	801b778 <__HAL_SPI_RxCpltCallback_veneer>
 800b3f4:	e758      	b.n	800b2a8 <HAL_SPI_IRQHandler+0xd8>
 800b3f6:	bf00      	nop
 800b3f8:	fffffc94 	.word	0xfffffc94
 800b3fc:	0800b1b1 	.word	0x0800b1b1

0800b400 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b400:	680b      	ldr	r3, [r1, #0]
{
 800b402:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b404:	b9d3      	cbnz	r3, 800b43c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b406:	6804      	ldr	r4, [r0, #0]
 800b408:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b40c:	684a      	ldr	r2, [r1, #4]
 800b40e:	4023      	ands	r3, r4
 800b410:	4313      	orrs	r3, r2
 800b412:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b416:	4323      	orrs	r3, r4
 800b418:	4313      	orrs	r3, r2
 800b41a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800b41e:	4323      	orrs	r3, r4
 800b420:	4313      	orrs	r3, r2
 800b422:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800b426:	4323      	orrs	r3, r4
 800b428:	4313      	orrs	r3, r2
 800b42a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800b42e:	4323      	orrs	r3, r4
 800b430:	4313      	orrs	r3, r2
 800b432:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b434:	2000      	movs	r0, #0
 800b436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b43c:	6802      	ldr	r2, [r0, #0]
 800b43e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b442:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b446:	4322      	orrs	r2, r4
 800b448:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b44a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b44e:	4322      	orrs	r2, r4
 800b450:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b452:	6842      	ldr	r2, [r0, #4]
 800b454:	4013      	ands	r3, r2
 800b456:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800b45a:	4323      	orrs	r3, r4
 800b45c:	4313      	orrs	r3, r2
 800b45e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800b462:	4323      	orrs	r3, r4
 800b464:	4313      	orrs	r3, r2
 800b466:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800b46a:	4323      	orrs	r3, r4
 800b46c:	4313      	orrs	r3, r2
 800b46e:	6043      	str	r3, [r0, #4]
}
 800b470:	2000      	movs	r0, #0
 800b472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	ffff8000 	.word	0xffff8000

0800b47c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b47c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b47e:	bb0a      	cbnz	r2, 800b4c4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b480:	6883      	ldr	r3, [r0, #8]
 800b482:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b486:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b48a:	3c01      	subs	r4, #1
 800b48c:	3a01      	subs	r2, #1
 800b48e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b492:	4313      	orrs	r3, r2
 800b494:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b498:	3c01      	subs	r4, #1
 800b49a:	3a01      	subs	r2, #1
 800b49c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b4a0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800b4a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b4a8:	698a      	ldr	r2, [r1, #24]
 800b4aa:	3d01      	subs	r5, #1
 800b4ac:	1e61      	subs	r1, r4, #1
 800b4ae:	3a01      	subs	r2, #1
 800b4b0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b4b4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800b4b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b4bc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b4be:	2000      	movs	r0, #0
 800b4c0:	bc30      	pop	{r4, r5}
 800b4c2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b4c4:	6885      	ldr	r5, [r0, #8]
 800b4c6:	68ca      	ldr	r2, [r1, #12]
 800b4c8:	4b12      	ldr	r3, [pc, #72]	; (800b514 <FMC_SDRAM_Timing_Init+0x98>)
 800b4ca:	1e54      	subs	r4, r2, #1
 800b4cc:	694a      	ldr	r2, [r1, #20]
 800b4ce:	402b      	ands	r3, r5
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800b4d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b4da:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b4dc:	68c3      	ldr	r3, [r0, #12]
 800b4de:	688d      	ldr	r5, [r1, #8]
 800b4e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4e4:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800b4e8:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b4ec:	3c01      	subs	r4, #1
 800b4ee:	3a01      	subs	r2, #1
 800b4f0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b4f4:	690c      	ldr	r4, [r1, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	698a      	ldr	r2, [r1, #24]
 800b4fa:	1e61      	subs	r1, r4, #1
 800b4fc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b500:	3a01      	subs	r2, #1
 800b502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b506:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b50a:	60c3      	str	r3, [r0, #12]
}
 800b50c:	2000      	movs	r0, #0
 800b50e:	bc30      	pop	{r4, r5}
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	ff0f0fff 	.word	0xff0f0fff

0800b518 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b518:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b51a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800b51e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b520:	6900      	ldr	r0, [r0, #16]
 800b522:	4323      	orrs	r3, r4
 800b524:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800b528:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b52c:	4c05      	ldr	r4, [pc, #20]	; (800b544 <FMC_SDRAM_SendCommand+0x2c>)
 800b52e:	3901      	subs	r1, #1
 800b530:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b532:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b534:	4323      	orrs	r3, r4
 800b536:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800b53a:	6113      	str	r3, [r2, #16]
}
 800b53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	ffc00000 	.word	0xffc00000

0800b548 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b548:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800b54c:	2000      	movs	r0, #0
{
 800b54e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b550:	6954      	ldr	r4, [r2, #20]
 800b552:	4023      	ands	r3, r4
 800b554:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b558:	6151      	str	r1, [r2, #20]
}
 800b55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	ffffc001 	.word	0xffffc001

0800b564 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b564:	b084      	sub	sp, #16
 800b566:	b410      	push	{r4}
 800b568:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b56c:	4614      	mov	r4, r2
{
 800b56e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b572:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800b574:	9904      	ldr	r1, [sp, #16]
{
 800b576:	4602      	mov	r2, r0
             Init.BusWide             | \
 800b578:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800b57a:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b57c:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800b57e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800b580:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800b582:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800b584:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800b586:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b588:	4903      	ldr	r1, [pc, #12]	; (800b598 <SDMMC_Init+0x34>)
 800b58a:	4021      	ands	r1, r4
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6053      	str	r3, [r2, #4]
}
 800b590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b594:	b004      	add	sp, #16
 800b596:	4770      	bx	lr
 800b598:	ffc02c00 	.word	0xffc02c00

0800b59c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b59c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop

0800b5a4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b5a4:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b5a6:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b5a8:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b5aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b5ae:	4770      	bx	lr

0800b5b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b5b0:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800b5b2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	f042 0203 	orr.w	r2, r2, #3
 800b5ba:	601a      	str	r2, [r3, #0]
}
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b5c0:	6800      	ldr	r0, [r0, #0]
}
 800b5c2:	f000 0003 	and.w	r0, r0, #3
 800b5c6:	4770      	bx	lr

0800b5c8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5c8:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800b5ca:	5840      	ldr	r0, [r0, r1]
}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b5d0:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b5d2:	680b      	ldr	r3, [r1, #0]
{
 800b5d4:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b5d6:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b5d8:	684b      	ldr	r3, [r1, #4]
 800b5da:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800b5dc:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5e0:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800b5e4:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800b5e6:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5e8:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800b5ec:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800b5ee:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800b5f0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b5f6:	bc30      	pop	{r4, r5}
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop

0800b5fc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5fc:	4a50      	ldr	r2, [pc, #320]	; (800b740 <SDMMC_CmdBlockLength+0x144>)
{
 800b5fe:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b600:	4b50      	ldr	r3, [pc, #320]	; (800b744 <SDMMC_CmdBlockLength+0x148>)
 800b602:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b604:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b608:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b60c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b610:	484d      	ldr	r0, [pc, #308]	; (800b748 <SDMMC_CmdBlockLength+0x14c>)
 800b612:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b616:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b618:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b61a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b61e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b620:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b624:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800b628:	1e53      	subs	r3, r2, #1
 800b62a:	b14a      	cbz	r2, 800b640 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b62c:	4947      	ldr	r1, [pc, #284]	; (800b74c <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 800b62e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b632:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b634:	420a      	tst	r2, r1
 800b636:	d001      	beq.n	800b63c <SDMMC_CmdBlockLength+0x40>
 800b638:	0492      	lsls	r2, r2, #18
 800b63a:	d504      	bpl.n	800b646 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b63c:	1c58      	adds	r0, r3, #1
 800b63e:	d1f6      	bne.n	800b62e <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b640:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b644:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b646:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b64a:	0758      	lsls	r0, r3, #29
 800b64c:	d445      	bmi.n	800b6da <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b64e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b652:	f010 0001 	ands.w	r0, r0, #1
 800b656:	d137      	bne.n	800b6c8 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b658:	4b3d      	ldr	r3, [pc, #244]	; (800b750 <SDMMC_CmdBlockLength+0x154>)
 800b65a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b65e:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b10      	cmp	r3, #16
 800b666:	d136      	bne.n	800b6d6 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 800b668:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b66c:	4839      	ldr	r0, [pc, #228]	; (800b754 <SDMMC_CmdBlockLength+0x158>)
 800b66e:	4018      	ands	r0, r3
 800b670:	2800      	cmp	r0, #0
 800b672:	d02f      	beq.n	800b6d4 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b674:	2b00      	cmp	r3, #0
 800b676:	db35      	blt.n	800b6e4 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b678:	0059      	lsls	r1, r3, #1
 800b67a:	d436      	bmi.n	800b6ea <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b67c:	009a      	lsls	r2, r3, #2
 800b67e:	d436      	bmi.n	800b6ee <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b680:	00d9      	lsls	r1, r3, #3
 800b682:	d436      	bmi.n	800b6f2 <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b684:	011a      	lsls	r2, r3, #4
 800b686:	d437      	bmi.n	800b6f8 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b688:	0159      	lsls	r1, r3, #5
 800b68a:	d438      	bmi.n	800b6fe <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b68c:	01da      	lsls	r2, r3, #7
 800b68e:	d439      	bmi.n	800b704 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b690:	0219      	lsls	r1, r3, #8
 800b692:	d43a      	bmi.n	800b70a <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b694:	025a      	lsls	r2, r3, #9
 800b696:	d43b      	bmi.n	800b710 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b698:	0299      	lsls	r1, r3, #10
 800b69a:	d445      	bmi.n	800b728 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b69c:	02da      	lsls	r2, r3, #11
 800b69e:	d440      	bmi.n	800b722 <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6a0:	0359      	lsls	r1, r3, #13
 800b6a2:	d43b      	bmi.n	800b71c <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6a4:	039a      	lsls	r2, r3, #14
 800b6a6:	d436      	bmi.n	800b716 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6a8:	03d9      	lsls	r1, r3, #15
 800b6aa:	d446      	bmi.n	800b73a <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6ac:	041a      	lsls	r2, r3, #16
 800b6ae:	d441      	bmi.n	800b734 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6b0:	0459      	lsls	r1, r3, #17
 800b6b2:	d43c      	bmi.n	800b72e <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6b4:	049a      	lsls	r2, r3, #18
 800b6b6:	d40b      	bmi.n	800b6d0 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6b8:	f013 0f08 	tst.w	r3, #8
 800b6bc:	bf14      	ite	ne
 800b6be:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b6c2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b6c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6ce:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b6d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b6d4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6da:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6dc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6e2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b6e8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6ea:	2040      	movs	r0, #64	; 0x40
 800b6ec:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6ee:	2080      	movs	r0, #128	; 0x80
 800b6f0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b6f6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b6fc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b702:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b704:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b708:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b70a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b70e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b710:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b714:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b716:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b71a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b71c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b720:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b722:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b726:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b72c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b72e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b732:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b734:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b738:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b73a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b73e:	4770      	bx	lr
 800b740:	200008f4 	.word	0x200008f4
 800b744:	10624dd3 	.word	0x10624dd3
 800b748:	fffee0c0 	.word	0xfffee0c0
 800b74c:	00200045 	.word	0x00200045
 800b750:	002000c5 	.word	0x002000c5
 800b754:	fdffe008 	.word	0xfdffe008

0800b758 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b758:	4a50      	ldr	r2, [pc, #320]	; (800b89c <SDMMC_CmdReadSingleBlock+0x144>)
{
 800b75a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b75c:	4b50      	ldr	r3, [pc, #320]	; (800b8a0 <SDMMC_CmdReadSingleBlock+0x148>)
 800b75e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b760:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b764:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b768:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b76c:	484d      	ldr	r0, [pc, #308]	; (800b8a4 <SDMMC_CmdReadSingleBlock+0x14c>)
 800b76e:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b772:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b774:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b776:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b77a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b77c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b780:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b784:	1e53      	subs	r3, r2, #1
 800b786:	b14a      	cbz	r2, 800b79c <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b788:	4947      	ldr	r1, [pc, #284]	; (800b8a8 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b78a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b78e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b790:	420a      	tst	r2, r1
 800b792:	d001      	beq.n	800b798 <SDMMC_CmdReadSingleBlock+0x40>
 800b794:	0492      	lsls	r2, r2, #18
 800b796:	d504      	bpl.n	800b7a2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800b798:	1c58      	adds	r0, r3, #1
 800b79a:	d1f6      	bne.n	800b78a <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b79c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b7a0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7a2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b7a6:	0758      	lsls	r0, r3, #29
 800b7a8:	d445      	bmi.n	800b836 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7aa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b7ae:	f010 0001 	ands.w	r0, r0, #1
 800b7b2:	d137      	bne.n	800b824 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7b4:	4b3d      	ldr	r3, [pc, #244]	; (800b8ac <SDMMC_CmdReadSingleBlock+0x154>)
 800b7b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b7ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b11      	cmp	r3, #17
 800b7c2:	d136      	bne.n	800b832 <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b7c4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b7c8:	4839      	ldr	r0, [pc, #228]	; (800b8b0 <SDMMC_CmdReadSingleBlock+0x158>)
 800b7ca:	4018      	ands	r0, r3
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d02f      	beq.n	800b830 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	db35      	blt.n	800b840 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b7d4:	0059      	lsls	r1, r3, #1
 800b7d6:	d436      	bmi.n	800b846 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b7d8:	009a      	lsls	r2, r3, #2
 800b7da:	d436      	bmi.n	800b84a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b7dc:	00d9      	lsls	r1, r3, #3
 800b7de:	d436      	bmi.n	800b84e <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7e0:	011a      	lsls	r2, r3, #4
 800b7e2:	d437      	bmi.n	800b854 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7e4:	0159      	lsls	r1, r3, #5
 800b7e6:	d438      	bmi.n	800b85a <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7e8:	01da      	lsls	r2, r3, #7
 800b7ea:	d439      	bmi.n	800b860 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7ec:	0219      	lsls	r1, r3, #8
 800b7ee:	d43a      	bmi.n	800b866 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7f0:	025a      	lsls	r2, r3, #9
 800b7f2:	d43b      	bmi.n	800b86c <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7f4:	0299      	lsls	r1, r3, #10
 800b7f6:	d445      	bmi.n	800b884 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b7f8:	02da      	lsls	r2, r3, #11
 800b7fa:	d440      	bmi.n	800b87e <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b7fc:	0359      	lsls	r1, r3, #13
 800b7fe:	d43b      	bmi.n	800b878 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b800:	039a      	lsls	r2, r3, #14
 800b802:	d436      	bmi.n	800b872 <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b804:	03d9      	lsls	r1, r3, #15
 800b806:	d446      	bmi.n	800b896 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b808:	041a      	lsls	r2, r3, #16
 800b80a:	d441      	bmi.n	800b890 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b80c:	0459      	lsls	r1, r3, #17
 800b80e:	d43c      	bmi.n	800b88a <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b810:	049a      	lsls	r2, r3, #18
 800b812:	d40b      	bmi.n	800b82c <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b814:	f013 0f08 	tst.w	r3, #8
 800b818:	bf14      	ite	ne
 800b81a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b81e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b822:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b824:	2301      	movs	r3, #1
 800b826:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b82a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b82c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b830:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b832:	2001      	movs	r0, #1
 800b834:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b836:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b838:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b83a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b83e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b840:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b844:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b846:	2040      	movs	r0, #64	; 0x40
 800b848:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b84a:	2080      	movs	r0, #128	; 0x80
 800b84c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b84e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b852:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b854:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b858:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b85a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b85e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b860:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b864:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b866:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b86a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b86c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b870:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b872:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b876:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b878:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b87c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b87e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b882:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b884:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b888:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b88a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b88e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b890:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b894:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b896:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b89a:	4770      	bx	lr
 800b89c:	200008f4 	.word	0x200008f4
 800b8a0:	10624dd3 	.word	0x10624dd3
 800b8a4:	fffee0c0 	.word	0xfffee0c0
 800b8a8:	00200045 	.word	0x00200045
 800b8ac:	002000c5 	.word	0x002000c5
 800b8b0:	fdffe008 	.word	0xfdffe008

0800b8b4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8b4:	4a50      	ldr	r2, [pc, #320]	; (800b9f8 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800b8b6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8b8:	4b50      	ldr	r3, [pc, #320]	; (800b9fc <SDMMC_CmdReadMultiBlock+0x148>)
 800b8ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b8bc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b8c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b8c8:	484d      	ldr	r0, [pc, #308]	; (800ba00 <SDMMC_CmdReadMultiBlock+0x14c>)
 800b8ca:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b8d0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8d2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b8d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b8dc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b8e0:	1e53      	subs	r3, r2, #1
 800b8e2:	b14a      	cbz	r2, 800b8f8 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8e4:	4947      	ldr	r1, [pc, #284]	; (800ba04 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b8e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b8ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8ec:	420a      	tst	r2, r1
 800b8ee:	d001      	beq.n	800b8f4 <SDMMC_CmdReadMultiBlock+0x40>
 800b8f0:	0492      	lsls	r2, r2, #18
 800b8f2:	d504      	bpl.n	800b8fe <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800b8f4:	1c58      	adds	r0, r3, #1
 800b8f6:	d1f6      	bne.n	800b8e6 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b8f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b8fc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b902:	0758      	lsls	r0, r3, #29
 800b904:	d445      	bmi.n	800b992 <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b906:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b90a:	f010 0001 	ands.w	r0, r0, #1
 800b90e:	d137      	bne.n	800b980 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b910:	4b3d      	ldr	r3, [pc, #244]	; (800ba08 <SDMMC_CmdReadMultiBlock+0x154>)
 800b912:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b916:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b12      	cmp	r3, #18
 800b91e:	d136      	bne.n	800b98e <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b920:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b924:	4839      	ldr	r0, [pc, #228]	; (800ba0c <SDMMC_CmdReadMultiBlock+0x158>)
 800b926:	4018      	ands	r0, r3
 800b928:	2800      	cmp	r0, #0
 800b92a:	d02f      	beq.n	800b98c <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db35      	blt.n	800b99c <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b930:	0059      	lsls	r1, r3, #1
 800b932:	d436      	bmi.n	800b9a2 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b934:	009a      	lsls	r2, r3, #2
 800b936:	d436      	bmi.n	800b9a6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b938:	00d9      	lsls	r1, r3, #3
 800b93a:	d436      	bmi.n	800b9aa <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b93c:	011a      	lsls	r2, r3, #4
 800b93e:	d437      	bmi.n	800b9b0 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b940:	0159      	lsls	r1, r3, #5
 800b942:	d438      	bmi.n	800b9b6 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b944:	01da      	lsls	r2, r3, #7
 800b946:	d439      	bmi.n	800b9bc <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b948:	0219      	lsls	r1, r3, #8
 800b94a:	d43a      	bmi.n	800b9c2 <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b94c:	025a      	lsls	r2, r3, #9
 800b94e:	d43b      	bmi.n	800b9c8 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b950:	0299      	lsls	r1, r3, #10
 800b952:	d445      	bmi.n	800b9e0 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b954:	02da      	lsls	r2, r3, #11
 800b956:	d440      	bmi.n	800b9da <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b958:	0359      	lsls	r1, r3, #13
 800b95a:	d43b      	bmi.n	800b9d4 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b95c:	039a      	lsls	r2, r3, #14
 800b95e:	d436      	bmi.n	800b9ce <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b960:	03d9      	lsls	r1, r3, #15
 800b962:	d446      	bmi.n	800b9f2 <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b964:	041a      	lsls	r2, r3, #16
 800b966:	d441      	bmi.n	800b9ec <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b968:	0459      	lsls	r1, r3, #17
 800b96a:	d43c      	bmi.n	800b9e6 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b96c:	049a      	lsls	r2, r3, #18
 800b96e:	d40b      	bmi.n	800b988 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b970:	f013 0f08 	tst.w	r3, #8
 800b974:	bf14      	ite	ne
 800b976:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b97a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b97e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b980:	2301      	movs	r3, #1
 800b982:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b986:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b988:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b98c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b98e:	2001      	movs	r0, #1
 800b990:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b992:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b994:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b996:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b99c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b9a0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9a2:	2040      	movs	r0, #64	; 0x40
 800b9a4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9a6:	2080      	movs	r0, #128	; 0x80
 800b9a8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b9ae:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b9b4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b9ba:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b9bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b9c0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b9c6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b9cc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b9d2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b9d8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b9da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b9de:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b9e4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b9ea:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b9f0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b9f6:	4770      	bx	lr
 800b9f8:	200008f4 	.word	0x200008f4
 800b9fc:	10624dd3 	.word	0x10624dd3
 800ba00:	fffee0c0 	.word	0xfffee0c0
 800ba04:	00200045 	.word	0x00200045
 800ba08:	002000c5 	.word	0x002000c5
 800ba0c:	fdffe008 	.word	0xfdffe008

0800ba10 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba10:	4a50      	ldr	r2, [pc, #320]	; (800bb54 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800ba12:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba14:	4b50      	ldr	r3, [pc, #320]	; (800bb58 <SDMMC_CmdWriteSingleBlock+0x148>)
 800ba16:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ba18:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba1c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba20:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ba24:	484d      	ldr	r0, [pc, #308]	; (800bb5c <SDMMC_CmdWriteSingleBlock+0x14c>)
 800ba26:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba2a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba2c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba2e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba32:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba34:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba38:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800ba3c:	1e53      	subs	r3, r2, #1
 800ba3e:	b14a      	cbz	r2, 800ba54 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba40:	4947      	ldr	r1, [pc, #284]	; (800bb60 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800ba42:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800ba46:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba48:	420a      	tst	r2, r1
 800ba4a:	d001      	beq.n	800ba50 <SDMMC_CmdWriteSingleBlock+0x40>
 800ba4c:	0492      	lsls	r2, r2, #18
 800ba4e:	d504      	bpl.n	800ba5a <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800ba50:	1c58      	adds	r0, r3, #1
 800ba52:	d1f6      	bne.n	800ba42 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800ba54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ba58:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba5a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800ba5e:	0758      	lsls	r0, r3, #29
 800ba60:	d445      	bmi.n	800baee <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba62:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800ba66:	f010 0001 	ands.w	r0, r0, #1
 800ba6a:	d137      	bne.n	800badc <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba6c:	4b3d      	ldr	r3, [pc, #244]	; (800bb64 <SDMMC_CmdWriteSingleBlock+0x154>)
 800ba6e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba72:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b18      	cmp	r3, #24
 800ba7a:	d136      	bne.n	800baea <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800ba7c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba80:	4839      	ldr	r0, [pc, #228]	; (800bb68 <SDMMC_CmdWriteSingleBlock+0x158>)
 800ba82:	4018      	ands	r0, r3
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d02f      	beq.n	800bae8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	db35      	blt.n	800baf8 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba8c:	0059      	lsls	r1, r3, #1
 800ba8e:	d436      	bmi.n	800bafe <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba90:	009a      	lsls	r2, r3, #2
 800ba92:	d436      	bmi.n	800bb02 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba94:	00d9      	lsls	r1, r3, #3
 800ba96:	d436      	bmi.n	800bb06 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba98:	011a      	lsls	r2, r3, #4
 800ba9a:	d437      	bmi.n	800bb0c <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba9c:	0159      	lsls	r1, r3, #5
 800ba9e:	d438      	bmi.n	800bb12 <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800baa0:	01da      	lsls	r2, r3, #7
 800baa2:	d439      	bmi.n	800bb18 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800baa4:	0219      	lsls	r1, r3, #8
 800baa6:	d43a      	bmi.n	800bb1e <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800baa8:	025a      	lsls	r2, r3, #9
 800baaa:	d43b      	bmi.n	800bb24 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800baac:	0299      	lsls	r1, r3, #10
 800baae:	d445      	bmi.n	800bb3c <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bab0:	02da      	lsls	r2, r3, #11
 800bab2:	d440      	bmi.n	800bb36 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bab4:	0359      	lsls	r1, r3, #13
 800bab6:	d43b      	bmi.n	800bb30 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bab8:	039a      	lsls	r2, r3, #14
 800baba:	d436      	bmi.n	800bb2a <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800babc:	03d9      	lsls	r1, r3, #15
 800babe:	d446      	bmi.n	800bb4e <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bac0:	041a      	lsls	r2, r3, #16
 800bac2:	d441      	bmi.n	800bb48 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bac4:	0459      	lsls	r1, r3, #17
 800bac6:	d43c      	bmi.n	800bb42 <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bac8:	049a      	lsls	r2, r3, #18
 800baca:	d40b      	bmi.n	800bae4 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bacc:	f013 0f08 	tst.w	r3, #8
 800bad0:	bf14      	ite	ne
 800bad2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bad6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bada:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800badc:	2301      	movs	r3, #1
 800bade:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bae4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bae8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baea:	2001      	movs	r0, #1
 800baec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baf0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baf2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baf6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800baf8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bafc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bafe:	2040      	movs	r0, #64	; 0x40
 800bb00:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb02:	2080      	movs	r0, #128	; 0x80
 800bb04:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb06:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb0a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb10:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb16:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bb1c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bb22:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bb28:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb2a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bb2e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bb34:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bb36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bb3a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bb40:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bb46:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bb4c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bb52:	4770      	bx	lr
 800bb54:	200008f4 	.word	0x200008f4
 800bb58:	10624dd3 	.word	0x10624dd3
 800bb5c:	fffee0c0 	.word	0xfffee0c0
 800bb60:	00200045 	.word	0x00200045
 800bb64:	002000c5 	.word	0x002000c5
 800bb68:	fdffe008 	.word	0xfdffe008

0800bb6c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb6c:	4a50      	ldr	r2, [pc, #320]	; (800bcb0 <SDMMC_CmdWriteMultiBlock+0x144>)
{
 800bb6e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb70:	4b50      	ldr	r3, [pc, #320]	; (800bcb4 <SDMMC_CmdWriteMultiBlock+0x148>)
 800bb72:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bb74:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb78:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb7c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bb80:	484d      	ldr	r0, [pc, #308]	; (800bcb8 <SDMMC_CmdWriteMultiBlock+0x14c>)
 800bb82:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb88:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb8a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb8e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb90:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb94:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bb98:	1e53      	subs	r3, r2, #1
 800bb9a:	b14a      	cbz	r2, 800bbb0 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bb9c:	4947      	ldr	r1, [pc, #284]	; (800bcbc <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800bb9e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bba2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bba4:	420a      	tst	r2, r1
 800bba6:	d001      	beq.n	800bbac <SDMMC_CmdWriteMultiBlock+0x40>
 800bba8:	0492      	lsls	r2, r2, #18
 800bbaa:	d504      	bpl.n	800bbb6 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800bbac:	1c58      	adds	r0, r3, #1
 800bbae:	d1f6      	bne.n	800bb9e <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bbb0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bbb4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbb6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bbba:	0758      	lsls	r0, r3, #29
 800bbbc:	d445      	bmi.n	800bc4a <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbbe:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bbc2:	f010 0001 	ands.w	r0, r0, #1
 800bbc6:	d137      	bne.n	800bc38 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbc8:	4b3d      	ldr	r3, [pc, #244]	; (800bcc0 <SDMMC_CmdWriteMultiBlock+0x154>)
 800bbca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bbce:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b19      	cmp	r3, #25
 800bbd6:	d136      	bne.n	800bc46 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bbd8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bbdc:	4839      	ldr	r0, [pc, #228]	; (800bcc4 <SDMMC_CmdWriteMultiBlock+0x158>)
 800bbde:	4018      	ands	r0, r3
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d02f      	beq.n	800bc44 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	db35      	blt.n	800bc54 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bbe8:	0059      	lsls	r1, r3, #1
 800bbea:	d436      	bmi.n	800bc5a <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbec:	009a      	lsls	r2, r3, #2
 800bbee:	d436      	bmi.n	800bc5e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbf0:	00d9      	lsls	r1, r3, #3
 800bbf2:	d436      	bmi.n	800bc62 <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbf4:	011a      	lsls	r2, r3, #4
 800bbf6:	d437      	bmi.n	800bc68 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bbf8:	0159      	lsls	r1, r3, #5
 800bbfa:	d438      	bmi.n	800bc6e <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bbfc:	01da      	lsls	r2, r3, #7
 800bbfe:	d439      	bmi.n	800bc74 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc00:	0219      	lsls	r1, r3, #8
 800bc02:	d43a      	bmi.n	800bc7a <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc04:	025a      	lsls	r2, r3, #9
 800bc06:	d43b      	bmi.n	800bc80 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc08:	0299      	lsls	r1, r3, #10
 800bc0a:	d445      	bmi.n	800bc98 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc0c:	02da      	lsls	r2, r3, #11
 800bc0e:	d440      	bmi.n	800bc92 <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc10:	0359      	lsls	r1, r3, #13
 800bc12:	d43b      	bmi.n	800bc8c <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc14:	039a      	lsls	r2, r3, #14
 800bc16:	d436      	bmi.n	800bc86 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc18:	03d9      	lsls	r1, r3, #15
 800bc1a:	d446      	bmi.n	800bcaa <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc1c:	041a      	lsls	r2, r3, #16
 800bc1e:	d441      	bmi.n	800bca4 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc20:	0459      	lsls	r1, r3, #17
 800bc22:	d43c      	bmi.n	800bc9e <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc24:	049a      	lsls	r2, r3, #18
 800bc26:	d40b      	bmi.n	800bc40 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc28:	f013 0f08 	tst.w	r3, #8
 800bc2c:	bf14      	ite	ne
 800bc2e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bc32:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bc36:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc38:	2301      	movs	r3, #1
 800bc3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc3e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bc40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bc44:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc46:	2001      	movs	r0, #1
 800bc48:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc4a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc4c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc4e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc52:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bc54:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bc58:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bc5a:	2040      	movs	r0, #64	; 0x40
 800bc5c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bc5e:	2080      	movs	r0, #128	; 0x80
 800bc60:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bc62:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bc66:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc68:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bc6c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bc72:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bc78:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bc7e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bc84:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc86:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bc8a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc8c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bc90:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bc92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bc96:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc9c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bca2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bca4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bca8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bcaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bcae:	4770      	bx	lr
 800bcb0:	200008f4 	.word	0x200008f4
 800bcb4:	10624dd3 	.word	0x10624dd3
 800bcb8:	fffee0c0 	.word	0xfffee0c0
 800bcbc:	00200045 	.word	0x00200045
 800bcc0:	002000c5 	.word	0x002000c5
 800bcc4:	fdffe008 	.word	0xfdffe008

0800bcc8 <SDMMC_CmdStopTransfer>:
{
 800bcc8:	b430      	push	{r4, r5}
 800bcca:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bccc:	4b7b      	ldr	r3, [pc, #492]	; (800bebc <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bcce:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800bcd0:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bcd2:	4c7b      	ldr	r4, [pc, #492]	; (800bec0 <SDMMC_CmdStopTransfer+0x1f8>)
 800bcd4:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bcd6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcda:	4b7a      	ldr	r3, [pc, #488]	; (800bec4 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bcdc:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bcde:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bce2:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bce4:	4c78      	ldr	r4, [pc, #480]	; (800bec8 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bce6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bcea:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bcec:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcee:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800bcf2:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bcf4:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcf8:	68cc      	ldr	r4, [r1, #12]
 800bcfa:	4023      	ands	r3, r4
 800bcfc:	4318      	orrs	r0, r3
 800bcfe:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800bd00:	b14a      	cbz	r2, 800bd16 <SDMMC_CmdStopTransfer+0x4e>
 800bd02:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd04:	4871      	ldr	r0, [pc, #452]	; (800becc <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 800bd06:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bd08:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd0a:	4202      	tst	r2, r0
 800bd0c:	d001      	beq.n	800bd12 <SDMMC_CmdStopTransfer+0x4a>
 800bd0e:	0492      	lsls	r2, r2, #18
 800bd10:	d509      	bpl.n	800bd26 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800bd12:	1c5c      	adds	r4, r3, #1
 800bd14:	d1f7      	bne.n	800bd06 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd16:	68cb      	ldr	r3, [r1, #12]
 800bd18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bd1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd20:	60cb      	str	r3, [r1, #12]
}
 800bd22:	bc30      	pop	{r4, r5}
 800bd24:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd26:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bd28:	075b      	lsls	r3, r3, #29
 800bd2a:	d452      	bmi.n	800bdd2 <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bd2e:	f010 0001 	ands.w	r0, r0, #1
 800bd32:	d13b      	bne.n	800bdac <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd34:	4b66      	ldr	r3, [pc, #408]	; (800bed0 <SDMMC_CmdStopTransfer+0x208>)
 800bd36:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd38:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	d142      	bne.n	800bdc6 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 800bd40:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd42:	4a64      	ldr	r2, [pc, #400]	; (800bed4 <SDMMC_CmdStopTransfer+0x20c>)
 800bd44:	401a      	ands	r2, r3
 800bd46:	2a00      	cmp	r2, #0
 800bd48:	d037      	beq.n	800bdba <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	db35      	blt.n	800bdba <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd4e:	005d      	lsls	r5, r3, #1
 800bd50:	d446      	bmi.n	800bde0 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd52:	009c      	lsls	r4, r3, #2
 800bd54:	d44a      	bmi.n	800bdec <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd56:	00d8      	lsls	r0, r3, #3
 800bd58:	d44e      	bmi.n	800bdf8 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd5a:	011a      	lsls	r2, r3, #4
 800bd5c:	d453      	bmi.n	800be06 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd5e:	015d      	lsls	r5, r3, #5
 800bd60:	d458      	bmi.n	800be14 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd62:	01dc      	lsls	r4, r3, #7
 800bd64:	d464      	bmi.n	800be30 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd66:	0218      	lsls	r0, r3, #8
 800bd68:	d45b      	bmi.n	800be22 <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd6a:	025a      	lsls	r2, r3, #9
 800bd6c:	d46e      	bmi.n	800be4c <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd6e:	029d      	lsls	r5, r3, #10
 800bd70:	d465      	bmi.n	800be3e <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd72:	02dc      	lsls	r4, r3, #11
 800bd74:	d47f      	bmi.n	800be76 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd76:	0358      	lsls	r0, r3, #13
 800bd78:	d476      	bmi.n	800be68 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd7a:	039a      	lsls	r2, r3, #14
 800bd7c:	d46d      	bmi.n	800be5a <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bd7e:	03dd      	lsls	r5, r3, #15
 800bd80:	f100 8095 	bmi.w	800beae <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bd84:	041c      	lsls	r4, r3, #16
 800bd86:	f100 8084 	bmi.w	800be92 <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd8a:	0458      	lsls	r0, r3, #17
 800bd8c:	d47a      	bmi.n	800be84 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd8e:	049a      	lsls	r2, r3, #18
 800bd90:	f100 8086 	bmi.w	800bea0 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bd94:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd98:	68cb      	ldr	r3, [r1, #12]
 800bd9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bd9e:	bf14      	ite	ne
 800bda0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bda4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bda8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdaa:	e7ba      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdac:	2301      	movs	r3, #1
 800bdae:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdb0:	68cb      	ldr	r3, [r1, #12]
 800bdb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdb8:	e7b3      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdba:	68cb      	ldr	r3, [r1, #12]
 800bdbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdc0:	60cb      	str	r3, [r1, #12]
}
 800bdc2:	bc30      	pop	{r4, r5}
 800bdc4:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdc6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc8:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdce:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdd0:	e7a7      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdd2:	2004      	movs	r0, #4
 800bdd4:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdd6:	68cb      	ldr	r3, [r1, #12]
 800bdd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bddc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdde:	e7a0      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bde0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bde2:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bde4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bde8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdea:	e79a      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdec:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bdee:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bdf6:	e794      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdf8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bdfa:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be02:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be04:	e78d      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be06:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be08:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be10:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be12:	e786      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be14:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be16:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be1e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be20:	e77f      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be22:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be2c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be2e:	e778      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be30:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be32:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be3a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be3c:	e771      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be3e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be48:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be4a:	e76a      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be4c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be56:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be58:	e763      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be5a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be64:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be66:	e75c      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be68:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be6a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be72:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be74:	e755      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be76:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800be78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be80:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be82:	e74e      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be84:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be8e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be90:	e747      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be92:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be9c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be9e:	e740      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bea0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800bea2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beaa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800beac:	e739      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800beae:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800beb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800beb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beb8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800beba:	e732      	b.n	800bd22 <SDMMC_CmdStopTransfer+0x5a>
 800bebc:	200008f4 	.word	0x200008f4
 800bec0:	10624dd3 	.word	0x10624dd3
 800bec4:	fffee0c0 	.word	0xfffee0c0
 800bec8:	05f5e100 	.word	0x05f5e100
 800becc:	00200045 	.word	0x00200045
 800bed0:	002000c5 	.word	0x002000c5
 800bed4:	fdffe008 	.word	0xfdffe008

0800bed8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bed8:	4a50      	ldr	r2, [pc, #320]	; (800c01c <SDMMC_CmdSelDesel+0x144>)
{
 800beda:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bedc:	4b50      	ldr	r3, [pc, #320]	; (800c020 <SDMMC_CmdSelDesel+0x148>)
 800bede:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bee0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bee4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bee8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800beec:	484d      	ldr	r0, [pc, #308]	; (800c024 <SDMMC_CmdSelDesel+0x14c>)
 800beee:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bef2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bef4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bef6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800befa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800befc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf00:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bf04:	1e53      	subs	r3, r2, #1
 800bf06:	b14a      	cbz	r2, 800bf1c <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bf08:	4947      	ldr	r1, [pc, #284]	; (800c028 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 800bf0a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bf0e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf10:	420a      	tst	r2, r1
 800bf12:	d001      	beq.n	800bf18 <SDMMC_CmdSelDesel+0x40>
 800bf14:	0492      	lsls	r2, r2, #18
 800bf16:	d504      	bpl.n	800bf22 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800bf18:	1c58      	adds	r0, r3, #1
 800bf1a:	d1f6      	bne.n	800bf0a <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bf1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bf20:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf22:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bf26:	0758      	lsls	r0, r3, #29
 800bf28:	d445      	bmi.n	800bfb6 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf2a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bf2e:	f010 0001 	ands.w	r0, r0, #1
 800bf32:	d137      	bne.n	800bfa4 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf34:	4b3d      	ldr	r3, [pc, #244]	; (800c02c <SDMMC_CmdSelDesel+0x154>)
 800bf36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bf3a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b07      	cmp	r3, #7
 800bf42:	d136      	bne.n	800bfb2 <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 800bf44:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf48:	4839      	ldr	r0, [pc, #228]	; (800c030 <SDMMC_CmdSelDesel+0x158>)
 800bf4a:	4018      	ands	r0, r3
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d02f      	beq.n	800bfb0 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db35      	blt.n	800bfc0 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bf54:	0059      	lsls	r1, r3, #1
 800bf56:	d436      	bmi.n	800bfc6 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bf58:	009a      	lsls	r2, r3, #2
 800bf5a:	d436      	bmi.n	800bfca <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf5c:	00d9      	lsls	r1, r3, #3
 800bf5e:	d436      	bmi.n	800bfce <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf60:	011a      	lsls	r2, r3, #4
 800bf62:	d437      	bmi.n	800bfd4 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf64:	0159      	lsls	r1, r3, #5
 800bf66:	d438      	bmi.n	800bfda <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf68:	01da      	lsls	r2, r3, #7
 800bf6a:	d439      	bmi.n	800bfe0 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf6c:	0219      	lsls	r1, r3, #8
 800bf6e:	d43a      	bmi.n	800bfe6 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bf70:	025a      	lsls	r2, r3, #9
 800bf72:	d43b      	bmi.n	800bfec <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bf74:	0299      	lsls	r1, r3, #10
 800bf76:	d445      	bmi.n	800c004 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bf78:	02da      	lsls	r2, r3, #11
 800bf7a:	d440      	bmi.n	800bffe <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bf7c:	0359      	lsls	r1, r3, #13
 800bf7e:	d43b      	bmi.n	800bff8 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf80:	039a      	lsls	r2, r3, #14
 800bf82:	d436      	bmi.n	800bff2 <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bf84:	03d9      	lsls	r1, r3, #15
 800bf86:	d446      	bmi.n	800c016 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bf88:	041a      	lsls	r2, r3, #16
 800bf8a:	d441      	bmi.n	800c010 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf8c:	0459      	lsls	r1, r3, #17
 800bf8e:	d43c      	bmi.n	800c00a <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf90:	049a      	lsls	r2, r3, #18
 800bf92:	d40b      	bmi.n	800bfac <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf94:	f013 0f08 	tst.w	r3, #8
 800bf98:	bf14      	ite	ne
 800bf9a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bf9e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bfa2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfaa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bfac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bfb0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfb6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfb8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfbe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bfc0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bfc4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bfc6:	2040      	movs	r0, #64	; 0x40
 800bfc8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bfca:	2080      	movs	r0, #128	; 0x80
 800bfcc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bfce:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bfd2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bfd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bfd8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bfda:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bfde:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bfe0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bfe4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bfe6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bfea:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bff0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bff2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bff6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bff8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bffc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bffe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c002:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c008:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c00a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c00e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c010:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c014:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c016:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c01a:	4770      	bx	lr
 800c01c:	200008f4 	.word	0x200008f4
 800c020:	10624dd3 	.word	0x10624dd3
 800c024:	fffee0c0 	.word	0xfffee0c0
 800c028:	00200045 	.word	0x00200045
 800c02c:	002000c5 	.word	0x002000c5
 800c030:	fdffe008 	.word	0xfdffe008

0800c034 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c034:	4b11      	ldr	r3, [pc, #68]	; (800c07c <SDMMC_CmdGoIdleState+0x48>)
{
 800c036:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c038:	4a11      	ldr	r2, [pc, #68]	; (800c080 <SDMMC_CmdGoIdleState+0x4c>)
{
 800c03a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c03c:	4c11      	ldr	r4, [pc, #68]	; (800c084 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800c03e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c040:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800c042:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c044:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c048:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c04a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c04e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c050:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c052:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c056:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c05a:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c05c:	e002      	b.n	800c064 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c05e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c060:	0612      	lsls	r2, r2, #24
 800c062:	d405      	bmi.n	800c070 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800c064:	3b01      	subs	r3, #1
 800c066:	d2fa      	bcs.n	800c05e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c068:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c06c:	bc30      	pop	{r4, r5}
 800c06e:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800c072:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c074:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c076:	bc30      	pop	{r4, r5}
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	200008f4 	.word	0x200008f4
 800c080:	fffee0c0 	.word	0xfffee0c0
 800c084:	10624dd3 	.word	0x10624dd3
 800c088:	002000c5 	.word	0x002000c5

0800c08c <SDMMC_CmdOperCond>:
{
 800c08c:	b410      	push	{r4}
 800c08e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c090:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c094:	4a1a      	ldr	r2, [pc, #104]	; (800c100 <SDMMC_CmdOperCond+0x74>)
 800c096:	4b1b      	ldr	r3, [pc, #108]	; (800c104 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800c098:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c09a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c09c:	68cc      	ldr	r4, [r1, #12]
 800c09e:	481a      	ldr	r0, [pc, #104]	; (800c108 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c0a0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0a4:	f241 1308 	movw	r3, #4360	; 0x1108
 800c0a8:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c0aa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0ac:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c0ae:	f241 3088 	movw	r0, #5000	; 0x1388
 800c0b2:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0b6:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c0b8:	b14a      	cbz	r2, 800c0ce <SDMMC_CmdOperCond+0x42>
 800c0ba:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c0bc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c0be:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0c0:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c0c4:	d001      	beq.n	800c0ca <SDMMC_CmdOperCond+0x3e>
 800c0c6:	0490      	lsls	r0, r2, #18
 800c0c8:	d506      	bpl.n	800c0d8 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800c0ca:	1c5c      	adds	r4, r3, #1
 800c0cc:	d1f6      	bne.n	800c0bc <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c0ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0d6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0d8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c0da:	075a      	lsls	r2, r3, #29
 800c0dc:	d40c      	bmi.n	800c0f8 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c0e0:	f010 0001 	ands.w	r0, r0, #1
 800c0e4:	d105      	bne.n	800c0f2 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c0e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c0e8:	065b      	lsls	r3, r3, #25
 800c0ea:	d5f2      	bpl.n	800c0d2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c0ec:	2340      	movs	r3, #64	; 0x40
 800c0ee:	638b      	str	r3, [r1, #56]	; 0x38
 800c0f0:	e7ef      	b.n	800c0d2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0f6:	e7ec      	b.n	800c0d2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0f8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0fa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0fc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0fe:	e7e8      	b.n	800c0d2 <SDMMC_CmdOperCond+0x46>
 800c100:	200008f4 	.word	0x200008f4
 800c104:	10624dd3 	.word	0x10624dd3
 800c108:	fffee0c0 	.word	0xfffee0c0

0800c10c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c10c:	4a50      	ldr	r2, [pc, #320]	; (800c250 <SDMMC_CmdAppCommand+0x144>)
{
 800c10e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c110:	4b50      	ldr	r3, [pc, #320]	; (800c254 <SDMMC_CmdAppCommand+0x148>)
 800c112:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c114:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c118:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c11c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c120:	484d      	ldr	r0, [pc, #308]	; (800c258 <SDMMC_CmdAppCommand+0x14c>)
 800c122:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c126:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c128:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c12a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c12e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c130:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c134:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c138:	1e53      	subs	r3, r2, #1
 800c13a:	b14a      	cbz	r2, 800c150 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c13c:	4947      	ldr	r1, [pc, #284]	; (800c25c <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 800c13e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c142:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c144:	420a      	tst	r2, r1
 800c146:	d001      	beq.n	800c14c <SDMMC_CmdAppCommand+0x40>
 800c148:	0492      	lsls	r2, r2, #18
 800c14a:	d504      	bpl.n	800c156 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800c14c:	1c58      	adds	r0, r3, #1
 800c14e:	d1f6      	bne.n	800c13e <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c150:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c154:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c156:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c15a:	0758      	lsls	r0, r3, #29
 800c15c:	d445      	bmi.n	800c1ea <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c15e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c162:	f010 0001 	ands.w	r0, r0, #1
 800c166:	d137      	bne.n	800c1d8 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c168:	4b3d      	ldr	r3, [pc, #244]	; (800c260 <SDMMC_CmdAppCommand+0x154>)
 800c16a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c16e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b37      	cmp	r3, #55	; 0x37
 800c176:	d136      	bne.n	800c1e6 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800c178:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c17c:	4839      	ldr	r0, [pc, #228]	; (800c264 <SDMMC_CmdAppCommand+0x158>)
 800c17e:	4018      	ands	r0, r3
 800c180:	2800      	cmp	r0, #0
 800c182:	d02f      	beq.n	800c1e4 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c184:	2b00      	cmp	r3, #0
 800c186:	db35      	blt.n	800c1f4 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c188:	0059      	lsls	r1, r3, #1
 800c18a:	d436      	bmi.n	800c1fa <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c18c:	009a      	lsls	r2, r3, #2
 800c18e:	d436      	bmi.n	800c1fe <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c190:	00d9      	lsls	r1, r3, #3
 800c192:	d436      	bmi.n	800c202 <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c194:	011a      	lsls	r2, r3, #4
 800c196:	d437      	bmi.n	800c208 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c198:	0159      	lsls	r1, r3, #5
 800c19a:	d438      	bmi.n	800c20e <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c19c:	01da      	lsls	r2, r3, #7
 800c19e:	d439      	bmi.n	800c214 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c1a0:	0219      	lsls	r1, r3, #8
 800c1a2:	d43a      	bmi.n	800c21a <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c1a4:	025a      	lsls	r2, r3, #9
 800c1a6:	d43b      	bmi.n	800c220 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c1a8:	0299      	lsls	r1, r3, #10
 800c1aa:	d445      	bmi.n	800c238 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1ac:	02da      	lsls	r2, r3, #11
 800c1ae:	d440      	bmi.n	800c232 <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c1b0:	0359      	lsls	r1, r3, #13
 800c1b2:	d43b      	bmi.n	800c22c <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1b4:	039a      	lsls	r2, r3, #14
 800c1b6:	d436      	bmi.n	800c226 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1b8:	03d9      	lsls	r1, r3, #15
 800c1ba:	d446      	bmi.n	800c24a <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1bc:	041a      	lsls	r2, r3, #16
 800c1be:	d441      	bmi.n	800c244 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1c0:	0459      	lsls	r1, r3, #17
 800c1c2:	d43c      	bmi.n	800c23e <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1c4:	049a      	lsls	r2, r3, #18
 800c1c6:	d40b      	bmi.n	800c1e0 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1c8:	f013 0f08 	tst.w	r3, #8
 800c1cc:	bf14      	ite	ne
 800c1ce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c1d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c1d6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1d8:	2301      	movs	r3, #1
 800c1da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1de:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c1e0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c1e4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1ea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1ec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1ee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1f2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c1f4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c1f8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c1fa:	2040      	movs	r0, #64	; 0x40
 800c1fc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c1fe:	2080      	movs	r0, #128	; 0x80
 800c200:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c202:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c206:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c20c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c20e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c212:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c214:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c218:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c21a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c21e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c220:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c224:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c226:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c22a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c22c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c230:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c232:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c236:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c238:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c23c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c23e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c242:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c244:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c248:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c24a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c24e:	4770      	bx	lr
 800c250:	200008f4 	.word	0x200008f4
 800c254:	10624dd3 	.word	0x10624dd3
 800c258:	fffee0c0 	.word	0xfffee0c0
 800c25c:	00200045 	.word	0x00200045
 800c260:	002000c5 	.word	0x002000c5
 800c264:	fdffe008 	.word	0xfdffe008

0800c268 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c268:	4a19      	ldr	r2, [pc, #100]	; (800c2d0 <SDMMC_CmdAppOperCommand+0x68>)
{
 800c26a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c26c:	4b19      	ldr	r3, [pc, #100]	; (800c2d4 <SDMMC_CmdAppOperCommand+0x6c>)
 800c26e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c270:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c274:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c278:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c27c:	4816      	ldr	r0, [pc, #88]	; (800c2d8 <SDMMC_CmdAppOperCommand+0x70>)
 800c27e:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c282:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c284:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c286:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c28a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c28c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c290:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c294:	1e53      	subs	r3, r2, #1
 800c296:	b14a      	cbz	r2, 800c2ac <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800c298:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c29c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c29e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c2a2:	d001      	beq.n	800c2a8 <SDMMC_CmdAppOperCommand+0x40>
 800c2a4:	0492      	lsls	r2, r2, #18
 800c2a6:	d504      	bpl.n	800c2b2 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800c2a8:	1c59      	adds	r1, r3, #1
 800c2aa:	d1f5      	bne.n	800c298 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c2ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c2b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2b2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c2b6:	f010 0004 	ands.w	r0, r0, #4
 800c2ba:	d103      	bne.n	800c2c4 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2bc:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <SDMMC_CmdAppOperCommand+0x74>)
 800c2be:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c2c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2c4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2c6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2c8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	200008f4 	.word	0x200008f4
 800c2d4:	10624dd3 	.word	0x10624dd3
 800c2d8:	fffee0c0 	.word	0xfffee0c0
 800c2dc:	002000c5 	.word	0x002000c5

0800c2e0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c2e0:	4a50      	ldr	r2, [pc, #320]	; (800c424 <SDMMC_CmdBusWidth+0x144>)
{
 800c2e2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c2e4:	4b50      	ldr	r3, [pc, #320]	; (800c428 <SDMMC_CmdBusWidth+0x148>)
 800c2e6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c2e8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c2ec:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2f0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c2f4:	484d      	ldr	r0, [pc, #308]	; (800c42c <SDMMC_CmdBusWidth+0x14c>)
 800c2f6:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c2fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2fc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c2fe:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c302:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c304:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c308:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c30c:	1e53      	subs	r3, r2, #1
 800c30e:	b14a      	cbz	r2, 800c324 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c310:	4947      	ldr	r1, [pc, #284]	; (800c430 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800c312:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c316:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c318:	420a      	tst	r2, r1
 800c31a:	d001      	beq.n	800c320 <SDMMC_CmdBusWidth+0x40>
 800c31c:	0492      	lsls	r2, r2, #18
 800c31e:	d504      	bpl.n	800c32a <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800c320:	1c58      	adds	r0, r3, #1
 800c322:	d1f6      	bne.n	800c312 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c324:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c328:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c32a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c32e:	0758      	lsls	r0, r3, #29
 800c330:	d445      	bmi.n	800c3be <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c332:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c336:	f010 0001 	ands.w	r0, r0, #1
 800c33a:	d137      	bne.n	800c3ac <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c33c:	4b3d      	ldr	r3, [pc, #244]	; (800c434 <SDMMC_CmdBusWidth+0x154>)
 800c33e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c342:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b06      	cmp	r3, #6
 800c34a:	d136      	bne.n	800c3ba <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800c34c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c350:	4839      	ldr	r0, [pc, #228]	; (800c438 <SDMMC_CmdBusWidth+0x158>)
 800c352:	4018      	ands	r0, r3
 800c354:	2800      	cmp	r0, #0
 800c356:	d02f      	beq.n	800c3b8 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c358:	2b00      	cmp	r3, #0
 800c35a:	db35      	blt.n	800c3c8 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c35c:	0059      	lsls	r1, r3, #1
 800c35e:	d436      	bmi.n	800c3ce <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c360:	009a      	lsls	r2, r3, #2
 800c362:	d436      	bmi.n	800c3d2 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c364:	00d9      	lsls	r1, r3, #3
 800c366:	d436      	bmi.n	800c3d6 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c368:	011a      	lsls	r2, r3, #4
 800c36a:	d437      	bmi.n	800c3dc <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c36c:	0159      	lsls	r1, r3, #5
 800c36e:	d438      	bmi.n	800c3e2 <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c370:	01da      	lsls	r2, r3, #7
 800c372:	d439      	bmi.n	800c3e8 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c374:	0219      	lsls	r1, r3, #8
 800c376:	d43a      	bmi.n	800c3ee <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c378:	025a      	lsls	r2, r3, #9
 800c37a:	d43b      	bmi.n	800c3f4 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c37c:	0299      	lsls	r1, r3, #10
 800c37e:	d445      	bmi.n	800c40c <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c380:	02da      	lsls	r2, r3, #11
 800c382:	d440      	bmi.n	800c406 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c384:	0359      	lsls	r1, r3, #13
 800c386:	d43b      	bmi.n	800c400 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c388:	039a      	lsls	r2, r3, #14
 800c38a:	d436      	bmi.n	800c3fa <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c38c:	03d9      	lsls	r1, r3, #15
 800c38e:	d446      	bmi.n	800c41e <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c390:	041a      	lsls	r2, r3, #16
 800c392:	d441      	bmi.n	800c418 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c394:	0459      	lsls	r1, r3, #17
 800c396:	d43c      	bmi.n	800c412 <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c398:	049a      	lsls	r2, r3, #18
 800c39a:	d40b      	bmi.n	800c3b4 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c39c:	f013 0f08 	tst.w	r3, #8
 800c3a0:	bf14      	ite	ne
 800c3a2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c3a6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c3aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3b2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c3b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c3b8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3be:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3c0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3c2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3c6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c3cc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3ce:	2040      	movs	r0, #64	; 0x40
 800c3d0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3d2:	2080      	movs	r0, #128	; 0x80
 800c3d4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3da:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c3dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c3e0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c3e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c3e6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c3e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c3ec:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c3f2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c3f8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c3fe:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c400:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c404:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c406:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c40a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c40c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c410:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c412:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c416:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c418:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c41c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c41e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c422:	4770      	bx	lr
 800c424:	200008f4 	.word	0x200008f4
 800c428:	10624dd3 	.word	0x10624dd3
 800c42c:	fffee0c0 	.word	0xfffee0c0
 800c430:	00200045 	.word	0x00200045
 800c434:	002000c5 	.word	0x002000c5
 800c438:	fdffe008 	.word	0xfdffe008

0800c43c <SDMMC_CmdSendSCR>:
{
 800c43c:	b410      	push	{r4}
 800c43e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c440:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c442:	4a4c      	ldr	r2, [pc, #304]	; (800c574 <SDMMC_CmdSendSCR+0x138>)
 800c444:	4b4c      	ldr	r3, [pc, #304]	; (800c578 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c446:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c448:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c44a:	68cc      	ldr	r4, [r1, #12]
 800c44c:	484b      	ldr	r0, [pc, #300]	; (800c57c <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c44e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c452:	f241 1333 	movw	r3, #4403	; 0x1133
 800c456:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c458:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c45a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c45c:	f241 3088 	movw	r0, #5000	; 0x1388
 800c460:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c464:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c466:	b14a      	cbz	r2, 800c47c <SDMMC_CmdSendSCR+0x40>
 800c468:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c46a:	4845      	ldr	r0, [pc, #276]	; (800c580 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800c46c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c46e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c470:	4202      	tst	r2, r0
 800c472:	d001      	beq.n	800c478 <SDMMC_CmdSendSCR+0x3c>
 800c474:	0494      	lsls	r4, r2, #18
 800c476:	d506      	bpl.n	800c486 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	d1f7      	bne.n	800c46c <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c47c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c484:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c486:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c488:	0758      	lsls	r0, r3, #29
 800c48a:	d43d      	bmi.n	800c508 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c48c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c48e:	f010 0001 	ands.w	r0, r0, #1
 800c492:	d134      	bne.n	800c4fe <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c494:	4b3b      	ldr	r3, [pc, #236]	; (800c584 <SDMMC_CmdSendSCR+0x148>)
 800c496:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c498:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b33      	cmp	r3, #51	; 0x33
 800c49e:	d131      	bne.n	800c504 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c4a0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c4a2:	4839      	ldr	r0, [pc, #228]	; (800c588 <SDMMC_CmdSendSCR+0x14c>)
 800c4a4:	4018      	ands	r0, r3
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d0ea      	beq.n	800c480 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db30      	blt.n	800c510 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c4ae:	005a      	lsls	r2, r3, #1
 800c4b0:	d431      	bmi.n	800c516 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c4b2:	009c      	lsls	r4, r3, #2
 800c4b4:	d431      	bmi.n	800c51a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c4b6:	00d9      	lsls	r1, r3, #3
 800c4b8:	d431      	bmi.n	800c51e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c4ba:	011a      	lsls	r2, r3, #4
 800c4bc:	d432      	bmi.n	800c524 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c4be:	015c      	lsls	r4, r3, #5
 800c4c0:	d433      	bmi.n	800c52a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c4c2:	01d9      	lsls	r1, r3, #7
 800c4c4:	d434      	bmi.n	800c530 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c4c6:	021a      	lsls	r2, r3, #8
 800c4c8:	d435      	bmi.n	800c536 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c4ca:	025c      	lsls	r4, r3, #9
 800c4cc:	d436      	bmi.n	800c53c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4ce:	0299      	lsls	r1, r3, #10
 800c4d0:	d440      	bmi.n	800c554 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4d2:	02da      	lsls	r2, r3, #11
 800c4d4:	d43b      	bmi.n	800c54e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4d6:	035c      	lsls	r4, r3, #13
 800c4d8:	d436      	bmi.n	800c548 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4da:	0399      	lsls	r1, r3, #14
 800c4dc:	d431      	bmi.n	800c542 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4de:	03da      	lsls	r2, r3, #15
 800c4e0:	d444      	bmi.n	800c56c <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4e2:	041c      	lsls	r4, r3, #16
 800c4e4:	d43f      	bmi.n	800c566 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4e6:	0459      	lsls	r1, r3, #17
 800c4e8:	d43a      	bmi.n	800c560 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4ea:	049a      	lsls	r2, r3, #18
 800c4ec:	d435      	bmi.n	800c55a <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4ee:	f013 0f08 	tst.w	r3, #8
 800c4f2:	bf14      	ite	ne
 800c4f4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c4f8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c4fc:	e7c0      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4fe:	2301      	movs	r3, #1
 800c500:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c502:	e7bd      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c504:	2001      	movs	r0, #1
 800c506:	e7bb      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c508:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c50a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c50c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c50e:	e7b7      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c510:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c514:	e7b4      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c516:	2040      	movs	r0, #64	; 0x40
 800c518:	e7b2      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c51a:	2080      	movs	r0, #128	; 0x80
 800c51c:	e7b0      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c51e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c522:	e7ad      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c524:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c528:	e7aa      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c52a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c52e:	e7a7      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c530:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c534:	e7a4      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c536:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c53a:	e7a1      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c53c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c540:	e79e      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c542:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c546:	e79b      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c548:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c54c:	e798      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c54e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c552:	e795      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c554:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c558:	e792      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c55a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c55e:	e78f      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c560:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c564:	e78c      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c566:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c56a:	e789      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c56c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c570:	e786      	b.n	800c480 <SDMMC_CmdSendSCR+0x44>
 800c572:	bf00      	nop
 800c574:	200008f4 	.word	0x200008f4
 800c578:	10624dd3 	.word	0x10624dd3
 800c57c:	fffee0c0 	.word	0xfffee0c0
 800c580:	00200045 	.word	0x00200045
 800c584:	002000c5 	.word	0x002000c5
 800c588:	fdffe008 	.word	0xfdffe008

0800c58c <SDMMC_CmdSendCID>:
{
 800c58c:	b410      	push	{r4}
 800c58e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c590:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c592:	4a19      	ldr	r2, [pc, #100]	; (800c5f8 <SDMMC_CmdSendCID+0x6c>)
 800c594:	4b19      	ldr	r3, [pc, #100]	; (800c5fc <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
 800c596:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c598:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c59a:	68cc      	ldr	r4, [r1, #12]
 800c59c:	4818      	ldr	r0, [pc, #96]	; (800c600 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c59e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5a2:	f241 3302 	movw	r3, #4866	; 0x1302
 800c5a6:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5aa:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5ac:	f241 3088 	movw	r0, #5000	; 0x1388
 800c5b0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5b4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c5b6:	b14a      	cbz	r2, 800c5cc <SDMMC_CmdSendCID+0x40>
 800c5b8:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c5ba:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c5bc:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5be:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c5c2:	d001      	beq.n	800c5c8 <SDMMC_CmdSendCID+0x3c>
 800c5c4:	0492      	lsls	r2, r2, #18
 800c5c6:	d506      	bpl.n	800c5d6 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c5c8:	1c58      	adds	r0, r3, #1
 800c5ca:	d1f6      	bne.n	800c5ba <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c5cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c5d8:	075b      	lsls	r3, r3, #29
 800c5da:	d409      	bmi.n	800c5f0 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5dc:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c5de:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5e2:	bf14      	ite	ne
 800c5e4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5e6:	4b07      	ldreq	r3, [pc, #28]	; (800c604 <SDMMC_CmdSendCID+0x78>)
 800c5e8:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5f2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5f6:	e7eb      	b.n	800c5d0 <SDMMC_CmdSendCID+0x44>
 800c5f8:	200008f4 	.word	0x200008f4
 800c5fc:	10624dd3 	.word	0x10624dd3
 800c600:	fffee0c0 	.word	0xfffee0c0
 800c604:	002000c5 	.word	0x002000c5

0800c608 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c608:	4a1b      	ldr	r2, [pc, #108]	; (800c678 <SDMMC_CmdSendCSD+0x70>)
{
 800c60a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c60c:	4b1b      	ldr	r3, [pc, #108]	; (800c67c <SDMMC_CmdSendCSD+0x74>)
 800c60e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c610:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c614:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c618:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c61c:	4818      	ldr	r0, [pc, #96]	; (800c680 <SDMMC_CmdSendCSD+0x78>)
 800c61e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c622:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c624:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c626:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c62a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c62c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c630:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c634:	1e53      	subs	r3, r2, #1
 800c636:	b14a      	cbz	r2, 800c64c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c638:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c63c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c63e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c642:	d001      	beq.n	800c648 <SDMMC_CmdSendCSD+0x40>
 800c644:	0492      	lsls	r2, r2, #18
 800c646:	d504      	bpl.n	800c652 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c648:	1c59      	adds	r1, r3, #1
 800c64a:	d1f5      	bne.n	800c638 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c64c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c650:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c652:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c656:	075b      	lsls	r3, r3, #29
 800c658:	d409      	bmi.n	800c66e <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c65a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c65e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c662:	bf14      	ite	ne
 800c664:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c666:	4b07      	ldreq	r3, [pc, #28]	; (800c684 <SDMMC_CmdSendCSD+0x7c>)
 800c668:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c66c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c66e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c670:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c672:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c676:	4770      	bx	lr
 800c678:	200008f4 	.word	0x200008f4
 800c67c:	10624dd3 	.word	0x10624dd3
 800c680:	fffee0c0 	.word	0xfffee0c0
 800c684:	002000c5 	.word	0x002000c5

0800c688 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c688:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c68a:	4a2b      	ldr	r2, [pc, #172]	; (800c738 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c68c:	4684      	mov	ip, r0
 800c68e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c690:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c692:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c694:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c696:	4829      	ldr	r0, [pc, #164]	; (800c73c <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c698:	4c29      	ldr	r4, [pc, #164]	; (800c740 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c69a:	fba0 0202 	umull	r0, r2, r0, r2
 800c69e:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6a2:	401c      	ands	r4, r3
 800c6a4:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6aa:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6ac:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6b0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c6b4:	b152      	cbz	r2, 800c6cc <SDMMC_CmdSetRelAdd+0x44>
 800c6b6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c6b8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c6bc:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6be:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c6c2:	d001      	beq.n	800c6c8 <SDMMC_CmdSetRelAdd+0x40>
 800c6c4:	0494      	lsls	r4, r2, #18
 800c6c6:	d506      	bpl.n	800c6d6 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	d1f5      	bne.n	800c6b8 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c6cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6d6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c6da:	0758      	lsls	r0, r3, #29
 800c6dc:	d421      	bmi.n	800c722 <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6de:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c6e2:	f010 0001 	ands.w	r0, r0, #1
 800c6e6:	d116      	bne.n	800c716 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6e8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d115      	bne.n	800c71e <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6f2:	4b14      	ldr	r3, [pc, #80]	; (800c744 <SDMMC_CmdSetRelAdd+0xbc>)
 800c6f4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c6f8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c6fc:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c700:	d017      	beq.n	800c732 <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c702:	045a      	lsls	r2, r3, #17
 800c704:	d412      	bmi.n	800c72c <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c706:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c70a:	bf14      	ite	ne
 800c70c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c710:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c714:	e7dc      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c716:	2301      	movs	r3, #1
 800c718:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c71c:	e7d8      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c71e:	2001      	movs	r0, #1
 800c720:	e7d6      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c722:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c724:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c726:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c72a:	e7d1      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c72c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c730:	e7ce      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c732:	0c1b      	lsrs	r3, r3, #16
 800c734:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c736:	e7cb      	b.n	800c6d0 <SDMMC_CmdSetRelAdd+0x48>
 800c738:	200008f4 	.word	0x200008f4
 800c73c:	10624dd3 	.word	0x10624dd3
 800c740:	fffee0c0 	.word	0xfffee0c0
 800c744:	002000c5 	.word	0x002000c5

0800c748 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c748:	4a50      	ldr	r2, [pc, #320]	; (800c88c <SDMMC_CmdSendStatus+0x144>)
{
 800c74a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c74c:	4b50      	ldr	r3, [pc, #320]	; (800c890 <SDMMC_CmdSendStatus+0x148>)
 800c74e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c750:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c754:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c758:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c75c:	484d      	ldr	r0, [pc, #308]	; (800c894 <SDMMC_CmdSendStatus+0x14c>)
 800c75e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c762:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c764:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c766:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c76a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c76c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c770:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c774:	1e53      	subs	r3, r2, #1
 800c776:	b14a      	cbz	r2, 800c78c <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c778:	4947      	ldr	r1, [pc, #284]	; (800c898 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800c77a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c77e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c780:	420a      	tst	r2, r1
 800c782:	d001      	beq.n	800c788 <SDMMC_CmdSendStatus+0x40>
 800c784:	0492      	lsls	r2, r2, #18
 800c786:	d504      	bpl.n	800c792 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800c788:	1c58      	adds	r0, r3, #1
 800c78a:	d1f6      	bne.n	800c77a <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c78c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c790:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c792:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c796:	0758      	lsls	r0, r3, #29
 800c798:	d445      	bmi.n	800c826 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c79a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c79e:	f010 0001 	ands.w	r0, r0, #1
 800c7a2:	d137      	bne.n	800c814 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7a4:	4b3d      	ldr	r3, [pc, #244]	; (800c89c <SDMMC_CmdSendStatus+0x154>)
 800c7a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c7aa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b0d      	cmp	r3, #13
 800c7b2:	d136      	bne.n	800c822 <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800c7b4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c7b8:	4839      	ldr	r0, [pc, #228]	; (800c8a0 <SDMMC_CmdSendStatus+0x158>)
 800c7ba:	4018      	ands	r0, r3
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d02f      	beq.n	800c820 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	db35      	blt.n	800c830 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7c4:	0059      	lsls	r1, r3, #1
 800c7c6:	d436      	bmi.n	800c836 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7c8:	009a      	lsls	r2, r3, #2
 800c7ca:	d436      	bmi.n	800c83a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7cc:	00d9      	lsls	r1, r3, #3
 800c7ce:	d436      	bmi.n	800c83e <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7d0:	011a      	lsls	r2, r3, #4
 800c7d2:	d437      	bmi.n	800c844 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7d4:	0159      	lsls	r1, r3, #5
 800c7d6:	d438      	bmi.n	800c84a <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c7d8:	01da      	lsls	r2, r3, #7
 800c7da:	d439      	bmi.n	800c850 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c7dc:	0219      	lsls	r1, r3, #8
 800c7de:	d43a      	bmi.n	800c856 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c7e0:	025a      	lsls	r2, r3, #9
 800c7e2:	d43b      	bmi.n	800c85c <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c7e4:	0299      	lsls	r1, r3, #10
 800c7e6:	d445      	bmi.n	800c874 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c7e8:	02da      	lsls	r2, r3, #11
 800c7ea:	d440      	bmi.n	800c86e <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c7ec:	0359      	lsls	r1, r3, #13
 800c7ee:	d43b      	bmi.n	800c868 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c7f0:	039a      	lsls	r2, r3, #14
 800c7f2:	d436      	bmi.n	800c862 <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c7f4:	03d9      	lsls	r1, r3, #15
 800c7f6:	d446      	bmi.n	800c886 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c7f8:	041a      	lsls	r2, r3, #16
 800c7fa:	d441      	bmi.n	800c880 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c7fc:	0459      	lsls	r1, r3, #17
 800c7fe:	d43c      	bmi.n	800c87a <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c800:	049a      	lsls	r2, r3, #18
 800c802:	d40b      	bmi.n	800c81c <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c804:	f013 0f08 	tst.w	r3, #8
 800c808:	bf14      	ite	ne
 800c80a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c80e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c812:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c814:	2301      	movs	r3, #1
 800c816:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c81a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c81c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c820:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c822:	2001      	movs	r0, #1
 800c824:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c826:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c828:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c82a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c82e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c830:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c834:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c836:	2040      	movs	r0, #64	; 0x40
 800c838:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c83a:	2080      	movs	r0, #128	; 0x80
 800c83c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c83e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c842:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c844:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c848:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c84a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c84e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c854:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c856:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c85a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c85c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c860:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c862:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c866:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c868:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c86c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c86e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c872:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c874:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c878:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c87a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c87e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c880:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c884:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c886:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c88a:	4770      	bx	lr
 800c88c:	200008f4 	.word	0x200008f4
 800c890:	10624dd3 	.word	0x10624dd3
 800c894:	fffee0c0 	.word	0xfffee0c0
 800c898:	00200045 	.word	0x00200045
 800c89c:	002000c5 	.word	0x002000c5
 800c8a0:	fdffe008 	.word	0xfdffe008

0800c8a4 <SDMMC_CmdStatusRegister>:
{
 800c8a4:	b410      	push	{r4}
 800c8a6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c8a8:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c8aa:	4a4c      	ldr	r2, [pc, #304]	; (800c9dc <SDMMC_CmdStatusRegister+0x138>)
 800c8ac:	4b4c      	ldr	r3, [pc, #304]	; (800c9e0 <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c8ae:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c8b0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8b2:	68cc      	ldr	r4, [r1, #12]
 800c8b4:	484b      	ldr	r0, [pc, #300]	; (800c9e4 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c8b6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8ba:	f241 130d 	movw	r3, #4365	; 0x110d
 800c8be:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c8c0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8c2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c8c4:	f241 3088 	movw	r0, #5000	; 0x1388
 800c8c8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8cc:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c8ce:	b14a      	cbz	r2, 800c8e4 <SDMMC_CmdStatusRegister+0x40>
 800c8d0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c8d2:	4845      	ldr	r0, [pc, #276]	; (800c9e8 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800c8d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c8d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c8d8:	4202      	tst	r2, r0
 800c8da:	d001      	beq.n	800c8e0 <SDMMC_CmdStatusRegister+0x3c>
 800c8dc:	0494      	lsls	r4, r2, #18
 800c8de:	d506      	bpl.n	800c8ee <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	d1f7      	bne.n	800c8d4 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c8e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ec:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c8f0:	0758      	lsls	r0, r3, #29
 800c8f2:	d43d      	bmi.n	800c970 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8f4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c8f6:	f010 0001 	ands.w	r0, r0, #1
 800c8fa:	d134      	bne.n	800c966 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8fc:	4b3b      	ldr	r3, [pc, #236]	; (800c9ec <SDMMC_CmdStatusRegister+0x148>)
 800c8fe:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c900:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b0d      	cmp	r3, #13
 800c906:	d131      	bne.n	800c96c <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c908:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c90a:	4839      	ldr	r0, [pc, #228]	; (800c9f0 <SDMMC_CmdStatusRegister+0x14c>)
 800c90c:	4018      	ands	r0, r3
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0ea      	beq.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c912:	2b00      	cmp	r3, #0
 800c914:	db30      	blt.n	800c978 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c916:	005a      	lsls	r2, r3, #1
 800c918:	d431      	bmi.n	800c97e <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c91a:	009c      	lsls	r4, r3, #2
 800c91c:	d431      	bmi.n	800c982 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c91e:	00d9      	lsls	r1, r3, #3
 800c920:	d431      	bmi.n	800c986 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c922:	011a      	lsls	r2, r3, #4
 800c924:	d432      	bmi.n	800c98c <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c926:	015c      	lsls	r4, r3, #5
 800c928:	d433      	bmi.n	800c992 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c92a:	01d9      	lsls	r1, r3, #7
 800c92c:	d434      	bmi.n	800c998 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c92e:	021a      	lsls	r2, r3, #8
 800c930:	d435      	bmi.n	800c99e <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c932:	025c      	lsls	r4, r3, #9
 800c934:	d436      	bmi.n	800c9a4 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c936:	0299      	lsls	r1, r3, #10
 800c938:	d440      	bmi.n	800c9bc <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c93a:	02da      	lsls	r2, r3, #11
 800c93c:	d43b      	bmi.n	800c9b6 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c93e:	035c      	lsls	r4, r3, #13
 800c940:	d436      	bmi.n	800c9b0 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c942:	0399      	lsls	r1, r3, #14
 800c944:	d431      	bmi.n	800c9aa <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c946:	03da      	lsls	r2, r3, #15
 800c948:	d444      	bmi.n	800c9d4 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c94a:	041c      	lsls	r4, r3, #16
 800c94c:	d43f      	bmi.n	800c9ce <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c94e:	0459      	lsls	r1, r3, #17
 800c950:	d43a      	bmi.n	800c9c8 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c952:	049a      	lsls	r2, r3, #18
 800c954:	d435      	bmi.n	800c9c2 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c956:	f013 0f08 	tst.w	r3, #8
 800c95a:	bf14      	ite	ne
 800c95c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c960:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c964:	e7c0      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c966:	2301      	movs	r3, #1
 800c968:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c96a:	e7bd      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c96c:	2001      	movs	r0, #1
 800c96e:	e7bb      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c970:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c972:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c974:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c976:	e7b7      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c978:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c97c:	e7b4      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c97e:	2040      	movs	r0, #64	; 0x40
 800c980:	e7b2      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c982:	2080      	movs	r0, #128	; 0x80
 800c984:	e7b0      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c986:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c98a:	e7ad      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c98c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c990:	e7aa      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c992:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c996:	e7a7      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c998:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c99c:	e7a4      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c99e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c9a2:	e7a1      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c9a8:	e79e      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c9aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c9ae:	e79b      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c9b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c9b4:	e798      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c9b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c9ba:	e795      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c9bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c9c0:	e792      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c9c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c9c6:	e78f      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c9c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c9cc:	e78c      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c9ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c9d2:	e789      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c9d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c9d8:	e786      	b.n	800c8e8 <SDMMC_CmdStatusRegister+0x44>
 800c9da:	bf00      	nop
 800c9dc:	200008f4 	.word	0x200008f4
 800c9e0:	10624dd3 	.word	0x10624dd3
 800c9e4:	fffee0c0 	.word	0xfffee0c0
 800c9e8:	00200045 	.word	0x00200045
 800c9ec:	002000c5 	.word	0x002000c5
 800c9f0:	fdffe008 	.word	0xfdffe008

0800c9f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c9f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c9f6:	4903      	ldr	r1, [pc, #12]	; (800ca04 <MX_FATFS_Init+0x10>)
 800c9f8:	4803      	ldr	r0, [pc, #12]	; (800ca08 <MX_FATFS_Init+0x14>)
 800c9fa:	f003 f929 	bl	800fc50 <FATFS_LinkDriver>
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <MX_FATFS_Init+0x18>)
 800ca00:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca02:	bd08      	pop	{r3, pc}
 800ca04:	2001da30 	.word	0x2001da30
 800ca08:	0801c2a0 	.word	0x0801c2a0
 800ca0c:	2001da34 	.word	0x2001da34

0800ca10 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800ca10:	2000      	movs	r0, #0
 800ca12:	4770      	bx	lr

0800ca14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4694      	mov	ip, r2
 800ca18:	b082      	sub	sp, #8
 800ca1a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca1c:	460a      	mov	r2, r1
 800ca1e:	4663      	mov	r3, ip
 800ca20:	4601      	mov	r1, r0
 800ca22:	9400      	str	r4, [sp, #0]
 800ca24:	4803      	ldr	r0, [pc, #12]	; (800ca34 <BSP_SD_ReadBlocks+0x20>)
 800ca26:	f7fd f80f 	bl	8009a48 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ca2a:	3800      	subs	r0, #0
 800ca2c:	bf18      	it	ne
 800ca2e:	2001      	movne	r0, #1
 800ca30:	b002      	add	sp, #8
 800ca32:	bd10      	pop	{r4, pc}
 800ca34:	2001c8c4 	.word	0x2001c8c4

0800ca38 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca38:	b510      	push	{r4, lr}
 800ca3a:	4694      	mov	ip, r2
 800ca3c:	b082      	sub	sp, #8
 800ca3e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca40:	460a      	mov	r2, r1
 800ca42:	4663      	mov	r3, ip
 800ca44:	4601      	mov	r1, r0
 800ca46:	9400      	str	r4, [sp, #0]
 800ca48:	4803      	ldr	r0, [pc, #12]	; (800ca58 <BSP_SD_WriteBlocks+0x20>)
 800ca4a:	f7fd f8ed 	bl	8009c28 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ca4e:	3800      	subs	r0, #0
 800ca50:	bf18      	it	ne
 800ca52:	2001      	movne	r0, #1
 800ca54:	b002      	add	sp, #8
 800ca56:	bd10      	pop	{r4, pc}
 800ca58:	2001c8c4 	.word	0x2001c8c4

0800ca5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca5c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca5e:	4803      	ldr	r0, [pc, #12]	; (800ca6c <BSP_SD_GetCardState+0x10>)
 800ca60:	f7fd fd3c 	bl	800a4dc <HAL_SD_GetCardState>
}
 800ca64:	3804      	subs	r0, #4
 800ca66:	bf18      	it	ne
 800ca68:	2001      	movne	r0, #1
 800ca6a:	bd08      	pop	{r3, pc}
 800ca6c:	2001c8c4 	.word	0x2001c8c4

0800ca70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca70:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ca72:	4801      	ldr	r0, [pc, #4]	; (800ca78 <BSP_SD_GetCardInfo+0x8>)
 800ca74:	f7fd bbec 	b.w	800a250 <HAL_SD_GetCardInfo>
 800ca78:	2001c8c4 	.word	0x2001c8c4

0800ca7c <BSP_SD_WriteCpltCallback>:
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop

0800ca80 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ca80:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800ca82:	f7ff fffb 	bl	800ca7c <BSP_SD_WriteCpltCallback>
}
 800ca86:	bd08      	pop	{r3, pc}

0800ca88 <BSP_SD_ReadCpltCallback>:
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop

0800ca8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ca8c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800ca8e:	f7ff fffb 	bl	800ca88 <BSP_SD_ReadCpltCallback>
}
 800ca92:	bd08      	pop	{r3, pc}

0800ca94 <BSP_SD_Init>:
{
 800ca94:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca96:	f7f4 fc3f 	bl	8001318 <BSP_SD_IsDetected>
 800ca9a:	2801      	cmp	r0, #1
 800ca9c:	d001      	beq.n	800caa2 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ca9e:	2002      	movs	r0, #2
}
 800caa0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800caa2:	4807      	ldr	r0, [pc, #28]	; (800cac0 <BSP_SD_Init+0x2c>)
 800caa4:	f7fd fcb2 	bl	800a40c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d1f9      	bne.n	800caa0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800caac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cab0:	4803      	ldr	r0, [pc, #12]	; (800cac0 <BSP_SD_Init+0x2c>)
 800cab2:	f7fd fbe1 	bl	800a278 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800cab6:	3800      	subs	r0, #0
 800cab8:	bf18      	it	ne
 800caba:	2001      	movne	r0, #1
}
 800cabc:	bd08      	pop	{r3, pc}
 800cabe:	bf00      	nop
 800cac0:	2001c8c4 	.word	0x2001c8c4

0800cac4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cac4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800cac6:	4c0a      	ldr	r4, [pc, #40]	; (800caf0 <SD_initialize+0x2c>)
 800cac8:	2501      	movs	r5, #1
 800caca:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cacc:	f7ff ffe2 	bl	800ca94 <BSP_SD_Init>
 800cad0:	b108      	cbz	r0, 800cad6 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cad2:	7820      	ldrb	r0, [r4, #0]
}
 800cad4:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800cad6:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800cad8:	f7ff ffc0 	bl	800ca5c <BSP_SD_GetCardState>
 800cadc:	b918      	cbnz	r0, 800cae6 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800cade:	7823      	ldrb	r3, [r4, #0]
 800cae0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cae4:	7023      	strb	r3, [r4, #0]
  return Stat;
 800cae6:	7823      	ldrb	r3, [r4, #0]
 800cae8:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800caea:	7023      	strb	r3, [r4, #0]
  return Stat;
 800caec:	7820      	ldrb	r0, [r4, #0]
}
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	20000944 	.word	0x20000944

0800caf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800caf4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800caf6:	2301      	movs	r3, #1
 800caf8:	4c05      	ldr	r4, [pc, #20]	; (800cb10 <SD_status+0x1c>)
 800cafa:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800cafc:	f7ff ffae 	bl	800ca5c <BSP_SD_GetCardState>
 800cb00:	b918      	cbnz	r0, 800cb0a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800cb02:	7823      	ldrb	r3, [r4, #0]
 800cb04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cb08:	7023      	strb	r3, [r4, #0]
  return Stat;
 800cb0a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000944 	.word	0x20000944

0800cb14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb14:	b508      	push	{r3, lr}
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb20:	f7ff ff78 	bl	800ca14 <BSP_SD_ReadBlocks>
 800cb24:	b108      	cbz	r0, 800cb2a <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800cb26:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800cb28:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb2a:	f7ff ff97 	bl	800ca5c <BSP_SD_GetCardState>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d0fa      	beq.n	800cb28 <SD_read+0x14>
 800cb32:	f7ff ff93 	bl	800ca5c <BSP_SD_GetCardState>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d1f7      	bne.n	800cb2a <SD_read+0x16>
 800cb3a:	e7f5      	b.n	800cb28 <SD_read+0x14>

0800cb3c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb3c:	4b18      	ldr	r3, [pc, #96]	; (800cba0 <SD_ioctl+0x64>)
{
 800cb3e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb40:	7818      	ldrb	r0, [r3, #0]
{
 800cb42:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb44:	f010 0401 	ands.w	r4, r0, #1
 800cb48:	d106      	bne.n	800cb58 <SD_ioctl+0x1c>
 800cb4a:	4615      	mov	r5, r2

  switch (cmd)
 800cb4c:	2903      	cmp	r1, #3
 800cb4e:	d824      	bhi.n	800cb9a <SD_ioctl+0x5e>
 800cb50:	e8df f001 	tbb	[pc, r1]
 800cb54:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb58:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	b00b      	add	sp, #44	; 0x2c
 800cb5e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800cb60:	460c      	mov	r4, r1
}
 800cb62:	4620      	mov	r0, r4
 800cb64:	b00b      	add	sp, #44	; 0x2c
 800cb66:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb68:	a801      	add	r0, sp, #4
 800cb6a:	f7ff ff81 	bl	800ca70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb6e:	9b07      	ldr	r3, [sp, #28]
}
 800cb70:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb72:	602b      	str	r3, [r5, #0]
}
 800cb74:	b00b      	add	sp, #44	; 0x2c
 800cb76:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb78:	a801      	add	r0, sp, #4
 800cb7a:	f7ff ff79 	bl	800ca70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb7e:	9b08      	ldr	r3, [sp, #32]
}
 800cb80:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb82:	802b      	strh	r3, [r5, #0]
}
 800cb84:	b00b      	add	sp, #44	; 0x2c
 800cb86:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb88:	a801      	add	r0, sp, #4
 800cb8a:	f7ff ff71 	bl	800ca70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb8e:	9b08      	ldr	r3, [sp, #32]
}
 800cb90:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb92:	0a5b      	lsrs	r3, r3, #9
 800cb94:	602b      	str	r3, [r5, #0]
}
 800cb96:	b00b      	add	sp, #44	; 0x2c
 800cb98:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800cb9a:	2404      	movs	r4, #4
 800cb9c:	e7dd      	b.n	800cb5a <SD_ioctl+0x1e>
 800cb9e:	bf00      	nop
 800cba0:	20000944 	.word	0x20000944

0800cba4 <SD_write>:
{
 800cba4:	b508      	push	{r3, lr}
 800cba6:	4608      	mov	r0, r1
 800cba8:	4611      	mov	r1, r2
 800cbaa:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cbac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb0:	f7ff ff42 	bl	800ca38 <BSP_SD_WriteBlocks>
 800cbb4:	b108      	cbz	r0, 800cbba <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800cbb6:	2001      	movs	r0, #1
}
 800cbb8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cbba:	f7ff ff4f 	bl	800ca5c <BSP_SD_GetCardState>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d0fa      	beq.n	800cbb8 <SD_write+0x14>
 800cbc2:	f7ff ff4b 	bl	800ca5c <BSP_SD_GetCardState>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d1f7      	bne.n	800cbba <SD_write+0x16>
 800cbca:	e7f5      	b.n	800cbb8 <SD_write+0x14>

0800cbcc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cbcc:	4b03      	ldr	r3, [pc, #12]	; (800cbdc <disk_status+0x10>)
 800cbce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cbd2:	4418      	add	r0, r3
 800cbd4:	6853      	ldr	r3, [r2, #4]
 800cbd6:	7a00      	ldrb	r0, [r0, #8]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	4718      	bx	r3
 800cbdc:	2001dc60 	.word	0x2001dc60

0800cbe0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800cbe0:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <disk_initialize+0x20>)
 800cbe2:	5c1a      	ldrb	r2, [r3, r0]
 800cbe4:	b952      	cbnz	r2, 800cbfc <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbe6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cbea:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800cbec:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbf0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800cbf2:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbf6:	7a08      	ldrb	r0, [r1, #8]
 800cbf8:	6813      	ldr	r3, [r2, #0]
 800cbfa:	4718      	bx	r3
  }
  return stat;
}
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	4770      	bx	lr
 800cc00:	2001dc60 	.word	0x2001dc60

0800cc04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc04:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc06:	4c06      	ldr	r4, [pc, #24]	; (800cc20 <disk_read+0x1c>)
 800cc08:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cc0c:	4420      	add	r0, r4
 800cc0e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cc12:	7a00      	ldrb	r0, [r0, #8]
 800cc14:	68a4      	ldr	r4, [r4, #8]
 800cc16:	46a4      	mov	ip, r4
  return res;
}
 800cc18:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc1c:	4760      	bx	ip
 800cc1e:	bf00      	nop
 800cc20:	2001dc60 	.word	0x2001dc60

0800cc24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc24:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc26:	4c06      	ldr	r4, [pc, #24]	; (800cc40 <disk_write+0x1c>)
 800cc28:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cc2c:	4420      	add	r0, r4
 800cc2e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cc32:	7a00      	ldrb	r0, [r0, #8]
 800cc34:	68e4      	ldr	r4, [r4, #12]
 800cc36:	46a4      	mov	ip, r4
  return res;
}
 800cc38:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc3c:	4760      	bx	ip
 800cc3e:	bf00      	nop
 800cc40:	2001dc60 	.word	0x2001dc60

0800cc44 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc44:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <disk_ioctl+0x14>)
 800cc46:	eb03 0c00 	add.w	ip, r3, r0
 800cc4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc4e:	6843      	ldr	r3, [r0, #4]
 800cc50:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	4718      	bx	r3
 800cc58:	2001dc60 	.word	0x2001dc60

0800cc5c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800cc5c:	4b2a      	ldr	r3, [pc, #168]	; (800cd08 <inc_lock+0xac>)
{
 800cc5e:	4684      	mov	ip, r0
 800cc60:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	6804      	ldr	r4, [r0, #0]
 800cc66:	4294      	cmp	r4, r2
 800cc68:	d01c      	beq.n	800cca4 <inc_lock+0x48>
 800cc6a:	6918      	ldr	r0, [r3, #16]
 800cc6c:	42a0      	cmp	r0, r4
 800cc6e:	d005      	beq.n	800cc7c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc70:	b372      	cbz	r2, 800ccd0 <inc_lock+0x74>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d044      	beq.n	800cd00 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cc76:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800cc78:	bc70      	pop	{r4, r5, r6}
 800cc7a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800cc7c:	695d      	ldr	r5, [r3, #20]
 800cc7e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800cc82:	42b5      	cmp	r5, r6
 800cc84:	d1f4      	bne.n	800cc70 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800cc86:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800cc8a:	699e      	ldr	r6, [r3, #24]
 800cc8c:	42ae      	cmp	r6, r5
 800cc8e:	d1ef      	bne.n	800cc70 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc90:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc92:	b999      	cbnz	r1, 800ccbc <inc_lock+0x60>
 800cc94:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc98:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc9a:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc9c:	89a2      	ldrh	r2, [r4, #12]
 800cc9e:	3201      	adds	r2, #1
 800cca0:	b292      	uxth	r2, r2
 800cca2:	e029      	b.n	800ccf8 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
 800cca4:	6880      	ldr	r0, [r0, #8]
 800cca6:	685d      	ldr	r5, [r3, #4]
 800cca8:	4285      	cmp	r5, r0
 800ccaa:	d1de      	bne.n	800cc6a <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800ccac:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800ccb0:	6898      	ldr	r0, [r3, #8]
 800ccb2:	4285      	cmp	r5, r0
 800ccb4:	d1d9      	bne.n	800cc6a <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccb6:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	d0eb      	beq.n	800cc94 <inc_lock+0x38>
 800ccbc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ccc0:	0111      	lsls	r1, r2, #4
 800ccc2:	8980      	ldrh	r0, [r0, #12]
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d1d6      	bne.n	800cc76 <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccc8:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ccca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccce:	e013      	b.n	800ccf8 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ccd0:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ccd2:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800ccd4:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800ccd8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800ccdc:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800ccde:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800cce2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800cce6:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
 800ccea:	f04f 0400 	mov.w	r4, #0
 800ccee:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ccf0:	bf14      	ite	ne
 800ccf2:	f44f 7280 	movne.w	r2, #256	; 0x100
 800ccf6:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ccf8:	440b      	add	r3, r1
 800ccfa:	819a      	strh	r2, [r3, #12]
}
 800ccfc:	bc70      	pop	{r4, r5, r6}
 800ccfe:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cd00:	2002      	movs	r0, #2
 800cd02:	2201      	movs	r2, #1
 800cd04:	e7e5      	b.n	800ccd2 <inc_lock+0x76>
 800cd06:	bf00      	nop
 800cd08:	2001da3c 	.word	0x2001da3c

0800cd0c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800cd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd10:	440a      	add	r2, r1
 800cd12:	460d      	mov	r5, r1
 800cd14:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cd16:	4f37      	ldr	r7, [pc, #220]	; (800cdf4 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800cd18:	42aa      	cmp	r2, r5
 800cd1a:	d012      	beq.n	800cd42 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cd1c:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd20:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cd24:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cd28:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd2c:	2919      	cmp	r1, #25
 800cd2e:	d9f3      	bls.n	800cd18 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cd30:	2c7f      	cmp	r4, #127	; 0x7f
 800cd32:	bf88      	it	hi
 800cd34:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800cd38:	2c00      	cmp	r4, #0
 800cd3a:	d1ed      	bne.n	800cd18 <pattern_matching+0xc>
 800cd3c:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800cd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800cd42:	1e1f      	subs	r7, r3, #0
 800cd44:	f896 8000 	ldrb.w	r8, [r6]
 800cd48:	bf18      	it	ne
 800cd4a:	2701      	movne	r7, #1
 800cd4c:	f1b8 0f00 	cmp.w	r8, #0
 800cd50:	d100      	bne.n	800cd54 <pattern_matching+0x48>
 800cd52:	bb8f      	cbnz	r7, 800cdb8 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cd54:	4c27      	ldr	r4, [pc, #156]	; (800cdf4 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800cd56:	4630      	mov	r0, r6
{
 800cd58:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800cd5a:	46a9      	mov	r9, r5
 800cd5c:	e010      	b.n	800cd80 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd5e:	3a20      	subs	r2, #32
 800cd60:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cd62:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd66:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cd6a:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd6c:	f1bc 0f19 	cmp.w	ip, #25
 800cd70:	d815      	bhi.n	800cd9e <pattern_matching+0x92>
 800cd72:	3b20      	subs	r3, #32
 800cd74:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d118      	bne.n	800cdac <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800cd7a:	b1eb      	cbz	r3, 800cdb8 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800cd7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cd80:	2b3f      	cmp	r3, #63	; 0x3f
 800cd82:	d01c      	beq.n	800cdbe <pattern_matching+0xb2>
 800cd84:	2b2a      	cmp	r3, #42	; 0x2a
 800cd86:	d01a      	beq.n	800cdbe <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd88:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cd8c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800cd8e:	2919      	cmp	r1, #25
 800cd90:	d9e5      	bls.n	800cd5e <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800cd92:	2a7f      	cmp	r2, #127	; 0x7f
 800cd94:	d9e5      	bls.n	800cd62 <pattern_matching+0x56>
 800cd96:	4423      	add	r3, r4
 800cd98:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800cd9c:	e7e1      	b.n	800cd62 <pattern_matching+0x56>
 800cd9e:	2b7f      	cmp	r3, #127	; 0x7f
 800cda0:	d9e9      	bls.n	800cd76 <pattern_matching+0x6a>
 800cda2:	4421      	add	r1, r4
 800cda4:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d0e6      	beq.n	800cd7a <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cdac:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0c4      	beq.n	800cd3c <pattern_matching+0x30>
 800cdb2:	2f00      	cmp	r7, #0
 800cdb4:	d1cf      	bne.n	800cd56 <pattern_matching+0x4a>
 800cdb6:	e7c1      	b.n	800cd3c <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800cdb8:	2001      	movs	r0, #1
}
 800cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	4601      	mov	r1, r0
				nm = nx = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f811 cb01 	ldrb.w	ip, [r1], #1
 800cdc6:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800cdc8:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800cdcc:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800cdce:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800cdd2:	bf0c      	ite	eq
 800cdd4:	3201      	addeq	r2, #1
 800cdd6:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800cdd8:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800cddc:	d0f4      	beq.n	800cdc8 <pattern_matching+0xbc>
 800cdde:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800cde2:	d0f1      	beq.n	800cdc8 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800cde4:	4649      	mov	r1, r9
 800cde6:	f7ff ff91 	bl	800cd0c <pattern_matching>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1e4      	bne.n	800cdb8 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800cdee:	f899 3000 	ldrb.w	r3, [r9]
 800cdf2:	e7db      	b.n	800cdac <pattern_matching+0xa0>
 800cdf4:	0801c2c8 	.word	0x0801c2c8

0800cdf8 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800cdf8:	2300      	movs	r3, #0
{
 800cdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800cdfe:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800ce02:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce04:	69c2      	ldr	r2, [r0, #28]
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	d063      	beq.n	800ced2 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ce0a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	460d      	mov	r5, r1
 800ce10:	3201      	adds	r2, #1
 800ce12:	d01f      	beq.n	800ce54 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce18:	8818      	ldrh	r0, [r3, #0]
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d063      	beq.n	800cee6 <get_fileinfo+0xee>
 800ce1e:	f101 0715 	add.w	r7, r1, #21
 800ce22:	2601      	movs	r6, #1
 800ce24:	e000      	b.n	800ce28 <get_fileinfo+0x30>
 800ce26:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ce28:	2100      	movs	r1, #0
 800ce2a:	f002 ff37 	bl	800fc9c <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce2e:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d058      	beq.n	800cee6 <get_fileinfo+0xee>
 800ce34:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800ce38:	d055      	beq.n	800cee6 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800ce3a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce3e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800ce42:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d1ed      	bne.n	800ce26 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ce4a:	442e      	add	r6, r5
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ce50:	7da8      	ldrb	r0, [r5, #22]
 800ce52:	e000      	b.n	800ce56 <get_fileinfo+0x5e>
 800ce54:	4618      	mov	r0, r3
	i = j = 0;
 800ce56:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800ce5a:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800ce5c:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800ce5e:	6a21      	ldr	r1, [r4, #32]
 800ce60:	5c8b      	ldrb	r3, [r1, r2]
 800ce62:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800ce64:	2b20      	cmp	r3, #32
 800ce66:	d01b      	beq.n	800cea0 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ce68:	2b05      	cmp	r3, #5
 800ce6a:	bf08      	it	eq
 800ce6c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800ce6e:	2a09      	cmp	r2, #9
 800ce70:	d031      	beq.n	800ced6 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800ce72:	eb05 010c 	add.w	r1, r5, ip
 800ce76:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800ce78:	b980      	cbnz	r0, 800ce9c <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ce7a:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800ce7e:	2e19      	cmp	r6, #25
 800ce80:	d80b      	bhi.n	800ce9a <get_fileinfo+0xa2>
 800ce82:	6a26      	ldr	r6, [r4, #32]
 800ce84:	2a08      	cmp	r2, #8
 800ce86:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800ce8a:	bf8c      	ite	hi
 800ce8c:	2610      	movhi	r6, #16
 800ce8e:	2608      	movls	r6, #8
 800ce90:	ea1e 0f06 	tst.w	lr, r6
 800ce94:	d001      	beq.n	800ce9a <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800ce96:	3320      	adds	r3, #32
 800ce98:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800ce9a:	758b      	strb	r3, [r1, #22]
		j++;
 800ce9c:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800cea0:	2a0b      	cmp	r2, #11
 800cea2:	d1dc      	bne.n	800ce5e <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800cea4:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800cea8:	b928      	cbnz	r0, 800ceb6 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800ceaa:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ceac:	6a23      	ldr	r3, [r4, #32]
 800ceae:	7b1b      	ldrb	r3, [r3, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	bf08      	it	eq
 800ceb4:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ceba:	6a23      	ldr	r3, [r4, #32]
 800cebc:	7adb      	ldrb	r3, [r3, #11]
 800cebe:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800cec0:	6a23      	ldr	r3, [r4, #32]
 800cec2:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cec4:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800cec6:	6a23      	ldr	r3, [r4, #32]
 800cec8:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cecc:	0c1a      	lsrs	r2, r3, #16
 800cece:	80eb      	strh	r3, [r5, #6]
 800ced0:	80aa      	strh	r2, [r5, #4]
}
 800ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800ced6:	eb05 010c 	add.w	r1, r5, ip
 800ceda:	b900      	cbnz	r0, 800cede <get_fileinfo+0xe6>
 800cedc:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800cede:	f10c 0c01 	add.w	ip, ip, #1
 800cee2:	724f      	strb	r7, [r1, #9]
 800cee4:	e7c5      	b.n	800ce72 <get_fileinfo+0x7a>
			i = j = 0;
 800cee6:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cee8:	2300      	movs	r3, #0
 800ceea:	442e      	add	r6, r5
 800ceec:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ceee:	7da8      	ldrb	r0, [r5, #22]
 800cef0:	e7b1      	b.n	800ce56 <get_fileinfo+0x5e>
 800cef2:	bf00      	nop

0800cef4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cef4:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cef6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cefa:	2300      	movs	r3, #0
{
 800cefc:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cefe:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf00:	70c3      	strb	r3, [r0, #3]
 800cf02:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf04:	d00c      	beq.n	800cf20 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf06:	460d      	mov	r5, r1
 800cf08:	460a      	mov	r2, r1
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800cf10:	7840      	ldrb	r0, [r0, #1]
 800cf12:	f7ff fe77 	bl	800cc04 <disk_read>
 800cf16:	b110      	cbz	r0, 800cf1e <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf18:	2004      	movs	r0, #4
			fs->winsect = sector;
 800cf1a:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800cf1c:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800cf1e:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf24:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d11a      	bne.n	800cf62 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800cf30:	2be9      	cmp	r3, #233	; 0xe9
 800cf32:	d007      	beq.n	800cf44 <check_fs+0x50>
 800cf34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf36:	4a0d      	ldr	r2, [pc, #52]	; (800cf6c <check_fs+0x78>)
 800cf38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d001      	beq.n	800cf44 <check_fs+0x50>
	return 2;
 800cf40:	2002      	movs	r0, #2
}
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800cf44:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf48:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <check_fs+0x7c>)
 800cf4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d009      	beq.n	800cf66 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800cf52:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf56:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <check_fs+0x80>)
 800cf58:	1ac0      	subs	r0, r0, r3
 800cf5a:	bf18      	it	ne
 800cf5c:	2001      	movne	r0, #1
 800cf5e:	0040      	lsls	r0, r0, #1
}
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf62:	2003      	movs	r0, #3
}
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf66:	2000      	movs	r0, #0
}
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	bf00      	nop
 800cf6c:	009000eb 	.word	0x009000eb
 800cf70:	00544146 	.word	0x00544146
 800cf74:	33544146 	.word	0x33544146

0800cf78 <move_window>:
{
 800cf78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf7a:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 800cf7c:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf7e:	428e      	cmp	r6, r1
 800cf80:	d024      	beq.n	800cfcc <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cf82:	78c3      	ldrb	r3, [r0, #3]
 800cf84:	460d      	mov	r5, r1
 800cf86:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cf88:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cf8c:	b963      	cbnz	r3, 800cfa8 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf8e:	2301      	movs	r3, #1
 800cf90:	462a      	mov	r2, r5
 800cf92:	7860      	ldrb	r0, [r4, #1]
 800cf94:	f7ff fe36 	bl	800cc04 <disk_read>
 800cf98:	b910      	cbnz	r0, 800cfa0 <move_window+0x28>
			fs->winsect = sector;
 800cf9a:	6325      	str	r5, [r4, #48]	; 0x30
}
 800cf9c:	b003      	add	sp, #12
 800cf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800cfa0:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cfa2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cfa6:	e7f8      	b.n	800cf9a <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4632      	mov	r2, r6
 800cfac:	7840      	ldrb	r0, [r0, #1]
 800cfae:	9101      	str	r1, [sp, #4]
 800cfb0:	f7ff fe38 	bl	800cc24 <disk_write>
 800cfb4:	b9d0      	cbnz	r0, 800cfec <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cfb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cfb8:	69e3      	ldr	r3, [r4, #28]
 800cfba:	1ab2      	subs	r2, r6, r2
 800cfbc:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800cfbe:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d2e4      	bcs.n	800cf8e <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cfc4:	78a7      	ldrb	r7, [r4, #2]
 800cfc6:	2f01      	cmp	r7, #1
 800cfc8:	d804      	bhi.n	800cfd4 <move_window+0x5c>
 800cfca:	e7e0      	b.n	800cf8e <move_window+0x16>
	FRESULT res = FR_OK;
 800cfcc:	2000      	movs	r0, #0
}
 800cfce:	b003      	add	sp, #12
 800cfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 800cfd2:	69e3      	ldr	r3, [r4, #28]
 800cfd4:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cfd6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800cfd8:	2301      	movs	r3, #1
 800cfda:	7860      	ldrb	r0, [r4, #1]
 800cfdc:	4632      	mov	r2, r6
 800cfde:	9101      	str	r1, [sp, #4]
 800cfe0:	f7ff fe20 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cfe4:	2f01      	cmp	r7, #1
 800cfe6:	9901      	ldr	r1, [sp, #4]
 800cfe8:	d1f3      	bne.n	800cfd2 <move_window+0x5a>
 800cfea:	e7d0      	b.n	800cf8e <move_window+0x16>
			res = FR_DISK_ERR;
 800cfec:	2001      	movs	r0, #1
}
 800cfee:	b003      	add	sp, #12
 800cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff2:	bf00      	nop

0800cff4 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cff4:	2300      	movs	r3, #0
{
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800cffa:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800cffc:	6804      	ldr	r4, [r0, #0]
 800cffe:	b18c      	cbz	r4, 800d024 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d000:	7825      	ldrb	r5, [r4, #0]
 800d002:	2d1f      	cmp	r5, #31
 800d004:	d912      	bls.n	800d02c <find_volume+0x38>
 800d006:	2d3a      	cmp	r5, #58	; 0x3a
 800d008:	d010      	beq.n	800d02c <find_volume+0x38>
 800d00a:	46a4      	mov	ip, r4
 800d00c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d010:	2b1f      	cmp	r3, #31
 800d012:	d90d      	bls.n	800d030 <find_volume+0x3c>
 800d014:	2b3a      	cmp	r3, #58	; 0x3a
 800d016:	d1f9      	bne.n	800d00c <find_volume+0x18>
			i = *tp++ - '0';
 800d018:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d01a:	45a4      	cmp	ip, r4
 800d01c:	d102      	bne.n	800d024 <find_volume+0x30>
 800d01e:	2d30      	cmp	r5, #48	; 0x30
 800d020:	f000 80da 	beq.w	800d1d8 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800d024:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800d026:	4620      	mov	r0, r4
 800d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d02c:	462b      	mov	r3, r5
 800d02e:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d030:	2b3a      	cmp	r3, #58	; 0x3a
 800d032:	d0f1      	beq.n	800d018 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d034:	4ba3      	ldr	r3, [pc, #652]	; (800d2c4 <find_volume+0x2d0>)
 800d036:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d038:	2d00      	cmp	r5, #0
 800d03a:	f000 80c9 	beq.w	800d1d0 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800d03e:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d040:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d044:	782b      	ldrb	r3, [r5, #0]
 800d046:	b17b      	cbz	r3, 800d068 <find_volume+0x74>
		stat = disk_status(fs->drv);
 800d048:	7868      	ldrb	r0, [r5, #1]
 800d04a:	f7ff fdbf 	bl	800cbcc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d04e:	07c1      	lsls	r1, r0, #31
 800d050:	d40a      	bmi.n	800d068 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d052:	2c00      	cmp	r4, #0
 800d054:	f000 80ab 	beq.w	800d1ae <find_volume+0x1ba>
 800d058:	f010 0404 	ands.w	r4, r0, #4
 800d05c:	f000 80a7 	beq.w	800d1ae <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800d060:	240a      	movs	r4, #10
}
 800d062:	4620      	mov	r0, r4
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800d068:	2000      	movs	r0, #0
 800d06a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d06c:	f7ff fdb8 	bl	800cbe0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d070:	07c2      	lsls	r2, r0, #31
 800d072:	f100 809f 	bmi.w	800d1b4 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d076:	b10c      	cbz	r4, 800d07c <find_volume+0x88>
 800d078:	0743      	lsls	r3, r0, #29
 800d07a:	d4f1      	bmi.n	800d060 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d07c:	2100      	movs	r1, #0
 800d07e:	4628      	mov	r0, r5
 800d080:	f7ff ff38 	bl	800cef4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d084:	2802      	cmp	r0, #2
 800d086:	d077      	beq.n	800d178 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d088:	2804      	cmp	r0, #4
 800d08a:	f000 809f 	beq.w	800d1cc <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d08e:	2801      	cmp	r0, #1
 800d090:	f200 808c 	bhi.w	800d1ac <find_volume+0x1b8>
	bsect = 0;
 800d094:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d096:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800d09a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d09e:	f040 8085 	bne.w	800d1ac <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d0a2:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d0a6:	b902      	cbnz	r2, 800d0aa <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800d0a8:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d0aa:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800d0ae:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d0b0:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d0b2:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d0b4:	2901      	cmp	r1, #1
 800d0b6:	d879      	bhi.n	800d1ac <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d0b8:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800d0bc:	b288      	uxth	r0, r1
 800d0be:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d073      	beq.n	800d1ac <find_volume+0x1b8>
 800d0c4:	1e48      	subs	r0, r1, #1
 800d0c6:	4208      	tst	r0, r1
 800d0c8:	d170      	bne.n	800d1ac <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0ca:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0ce:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0d2:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0d6:	d169      	bne.n	800d1ac <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0d8:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d0dc:	b900      	cbnz	r0, 800d0e0 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800d0de:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0e0:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0e4:	2f00      	cmp	r7, #0
 800d0e6:	d061      	beq.n	800d1ac <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d0ec:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800d0f0:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0f2:	42b0      	cmp	r0, r6
 800d0f4:	d35a      	bcc.n	800d1ac <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0f6:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0fa:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0fc:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d100:	d354      	bcc.n	800d1ac <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d102:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800d106:	4288      	cmp	r0, r1
 800d108:	f200 8084 	bhi.w	800d214 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d10c:	f640 71f5 	movw	r1, #4085	; 0xff5
 800d110:	4288      	cmp	r0, r1
 800d112:	f200 80a3 	bhi.w	800d25c <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d116:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d118:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d11a:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d11c:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d11e:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d120:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d122:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d124:	f1bc 0f00 	cmp.w	ip, #0
 800d128:	d040      	beq.n	800d1ac <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d12a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800d12e:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d132:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d134:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800d138:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d13a:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d13e:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d140:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800d144:	d332      	bcc.n	800d1ac <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d14a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d14c:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800d150:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800d152:	495d      	ldr	r1, [pc, #372]	; (800d2c8 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800d154:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d156:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d158:	485c      	ldr	r0, [pc, #368]	; (800d2cc <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d15a:	4a5d      	ldr	r2, [pc, #372]	; (800d2d0 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800d15c:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d15e:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d160:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d162:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d164:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800d166:	800b      	strh	r3, [r1, #0]
 800d168:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d16a:	f000 8085 	beq.w	800d278 <find_volume+0x284>
 800d16e:	6913      	ldr	r3, [r2, #16]
 800d170:	429d      	cmp	r5, r3
 800d172:	d06f      	beq.n	800d254 <find_volume+0x260>
	return FR_OK;
 800d174:	2400      	movs	r4, #0
 800d176:	e01a      	b.n	800d1ae <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d178:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800d17c:	b10e      	cbz	r6, 800d182 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800d17e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d182:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800d186:	b10c      	cbz	r4, 800d18c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800d188:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d18c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800d190:	b303      	cbz	r3, 800d1d4 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800d192:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d196:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800d19a:	b10f      	cbz	r7, 800d1a0 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800d19c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1a0:	b9f6      	cbnz	r6, 800d1e0 <find_volume+0x1ec>
 800d1a2:	bb2c      	cbnz	r4, 800d1f0 <find_volume+0x1fc>
 800d1a4:	f1b8 0f00 	cmp.w	r8, #0
 800d1a8:	d12c      	bne.n	800d204 <find_volume+0x210>
 800d1aa:	b93f      	cbnz	r7, 800d1bc <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d1ac:	240d      	movs	r4, #13
}
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d1b4:	2403      	movs	r4, #3
}
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f7ff fe98 	bl	800cef4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d1c4:	2801      	cmp	r0, #1
 800d1c6:	d95a      	bls.n	800d27e <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d1c8:	2804      	cmp	r0, #4
 800d1ca:	d1ef      	bne.n	800d1ac <find_volume+0x1b8>
 800d1cc:	2401      	movs	r4, #1
 800d1ce:	e7ee      	b.n	800d1ae <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d1d0:	240c      	movs	r4, #12
 800d1d2:	e7ec      	b.n	800d1ae <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d1d4:	4698      	mov	r8, r3
 800d1d6:	e7de      	b.n	800d196 <find_volume+0x1a2>
					*path = ++tt;
 800d1d8:	f10c 0301 	add.w	r3, ip, #1
 800d1dc:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d1de:	e729      	b.n	800d034 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f7ff fe86 	bl	800cef4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d1e8:	2801      	cmp	r0, #1
 800d1ea:	d8da      	bhi.n	800d1a2 <find_volume+0x1ae>
 800d1ec:	4634      	mov	r4, r6
 800d1ee:	e752      	b.n	800d096 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f7ff fe7e 	bl	800cef4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d1f8:	2801      	cmp	r0, #1
 800d1fa:	f67f af4c 	bls.w	800d096 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1fe:	f1b8 0f00 	cmp.w	r8, #0
 800d202:	d0d2      	beq.n	800d1aa <find_volume+0x1b6>
 800d204:	4641      	mov	r1, r8
 800d206:	4628      	mov	r0, r5
 800d208:	f7ff fe74 	bl	800cef4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d20c:	2801      	cmp	r0, #1
 800d20e:	d8cc      	bhi.n	800d1aa <find_volume+0x1b6>
 800d210:	4644      	mov	r4, r8
 800d212:	e740      	b.n	800d096 <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d214:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d218:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d21a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d21c:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d21e:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d222:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d224:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d226:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d228:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d22a:	d1bf      	bne.n	800d1ac <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d22c:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800d22e:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d230:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d234:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d236:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800d23a:	d3b7      	bcc.n	800d1ac <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d23c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d244:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d246:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800d248:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d24a:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d24e:	d018      	beq.n	800d282 <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d250:	2003      	movs	r0, #3
 800d252:	e77e      	b.n	800d152 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d254:	2300      	movs	r3, #0
	return FR_OK;
 800d256:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d258:	6113      	str	r3, [r2, #16]
 800d25a:	e7a8      	b.n	800d1ae <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d25c:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d25e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d260:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d262:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d264:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d266:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d268:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d26a:	f1bc 0f00 	cmp.w	ip, #0
 800d26e:	d09d      	beq.n	800d1ac <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d270:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d272:	0049      	lsls	r1, r1, #1
 800d274:	2002      	movs	r0, #2
 800d276:	e760      	b.n	800d13a <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	e777      	b.n	800d16e <find_volume+0x17a>
 800d27e:	463c      	mov	r4, r7
 800d280:	e709      	b.n	800d096 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d282:	1c61      	adds	r1, r4, #1
 800d284:	4628      	mov	r0, r5
 800d286:	f7ff fe77 	bl	800cf78 <move_window>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d1e0      	bne.n	800d250 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d28e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d292:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800d296:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d298:	429a      	cmp	r2, r3
 800d29a:	d1d9      	bne.n	800d250 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800d29c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d29e:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <find_volume+0x2e0>)
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d1d5      	bne.n	800d250 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2a4:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800d2a8:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d2b0:	3320      	adds	r3, #32
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d1cc      	bne.n	800d250 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d2b6:	2003      	movs	r0, #3
 800d2b8:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
 800d2bc:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800d2c0:	e747      	b.n	800d152 <find_volume+0x15e>
 800d2c2:	bf00      	nop
 800d2c4:	2001da38 	.word	0x2001da38
 800d2c8:	2001da5c 	.word	0x2001da5c
 800d2cc:	2001da60 	.word	0x2001da60
 800d2d0:	2001da3c 	.word	0x2001da3c
 800d2d4:	41615252 	.word	0x41615252

0800d2d8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 800d2dc:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d2de:	4604      	mov	r4, r0
 800d2e0:	460d      	mov	r5, r1
 800d2e2:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 800d2e4:	2e02      	cmp	r6, #2
 800d2e6:	d007      	beq.n	800d2f8 <put_fat.part.0+0x20>
 800d2e8:	2e03      	cmp	r6, #3
 800d2ea:	d041      	beq.n	800d370 <put_fat.part.0+0x98>
 800d2ec:	2e01      	cmp	r6, #1
 800d2ee:	d01b      	beq.n	800d328 <put_fat.part.0+0x50>
 800d2f0:	2702      	movs	r7, #2
}
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d2f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d2fa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d2fe:	f7ff fe3b 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800d302:	4607      	mov	r7, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	d1f4      	bne.n	800d2f2 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d308:	006d      	lsls	r5, r5, #1
 800d30a:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800d30e:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 800d312:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d314:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 800d318:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d31a:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d31e:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800d320:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 800d322:	70e1      	strb	r1, [r4, #3]
}
 800d324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d328:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d32a:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d32e:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d332:	f7ff fe21 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800d336:	4607      	mov	r7, r0
 800d338:	2800      	cmp	r0, #0
 800d33a:	d1da      	bne.n	800d2f2 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d33c:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800d33e:	f109 0b01 	add.w	fp, r9, #1
 800d342:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 800d346:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d34a:	d52a      	bpl.n	800d3a2 <put_fat.part.0+0xca>
 800d34c:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d350:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 800d35a:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d35e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d360:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d362:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d366:	f7ff fe07 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800d36a:	b3a0      	cbz	r0, 800d3d6 <put_fat.part.0+0xfe>
 800d36c:	4607      	mov	r7, r0
	return res;
 800d36e:	e7c0      	b.n	800d2f2 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d370:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d372:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d376:	f7ff fdff 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800d37a:	4607      	mov	r7, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d1b8      	bne.n	800d2f2 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d380:	00ad      	lsls	r5, r5, #2
 800d382:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800d386:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 800d38a:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d38c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d390:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d392:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d396:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d398:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 800d39a:	70e0      	strb	r0, [r4, #3]
}
 800d39c:	4638      	mov	r0, r7
 800d39e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3a2:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d3aa:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3ac:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d3b0:	f7ff fde2 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1d9      	bne.n	800d36c <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 800d3b8:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d3bc:	f3c8 2203 	ubfx	r2, r8, #8, #4
 800d3c0:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 800d3c4:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d3c6:	f023 030f 	bic.w	r3, r3, #15
 800d3ca:	4313      	orrs	r3, r2
			fs->wflag = 1;
 800d3cc:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d3ce:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 800d3d2:	70e2      	strb	r2, [r4, #3]
			break;
 800d3d4:	e78d      	b.n	800d2f2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800d3d6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d3da:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 800d3de:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d3e0:	e7f4      	b.n	800d3cc <put_fat.part.0+0xf4>
 800d3e2:	bf00      	nop

0800d3e4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3e4:	2901      	cmp	r1, #1
 800d3e6:	d90e      	bls.n	800d406 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3ea:	6983      	ldr	r3, [r0, #24]
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	4299      	cmp	r1, r3
 800d3f2:	d206      	bcs.n	800d402 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800d3f4:	7803      	ldrb	r3, [r0, #0]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d021      	beq.n	800d43e <get_fat.isra.0+0x5a>
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d010      	beq.n	800d420 <get_fat.isra.0+0x3c>
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d003      	beq.n	800d40a <get_fat.isra.0+0x26>
 800d402:	2001      	movs	r0, #1
}
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d406:	2001      	movs	r0, #1
}
 800d408:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d40a:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d40c:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d410:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d414:	f7ff fdb0 	bl	800cf78 <move_window>
 800d418:	b1f0      	cbz	r0, 800d458 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d420:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d422:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d426:	f7ff fda7 	bl	800cf78 <move_window>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d1f5      	bne.n	800d41a <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d42e:	00a4      	lsls	r4, r4, #2
 800d430:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d434:	4425      	add	r5, r4
 800d436:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d438:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d43e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d440:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d444:	f7ff fd98 	bl	800cf78 <move_window>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d1e6      	bne.n	800d41a <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d44c:	0063      	lsls	r3, r4, #1
 800d44e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d452:	442b      	add	r3, r5
 800d454:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 800d456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800d458:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d45c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d45e:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d460:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d462:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d464:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d468:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d46c:	f7ff fd84 	bl	800cf78 <move_window>
 800d470:	2800      	cmp	r0, #0
 800d472:	d1d2      	bne.n	800d41a <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d474:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d478:	442f      	add	r7, r5
 800d47a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d47e:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d482:	07e3      	lsls	r3, r4, #31
 800d484:	bf4c      	ite	mi
 800d486:	0900      	lsrmi	r0, r0, #4
 800d488:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800d48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48e:	bf00      	nop

0800d490 <dir_read>:
{
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800d494:	69c6      	ldr	r6, [r0, #28]
{
 800d496:	b083      	sub	sp, #12
 800d498:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d49a:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800d49c:	2e00      	cmp	r6, #0
 800d49e:	d064      	beq.n	800d56a <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800d4a0:	23ff      	movs	r3, #255	; 0xff
 800d4a2:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4a4:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800d4a8:	4698      	mov	r8, r3
 800d4aa:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d4ac:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d4ae:	42b5      	cmp	r5, r6
 800d4b0:	d014      	beq.n	800d4dc <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f040 80d1 	bne.w	800d65c <dir_read+0x1cc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4632      	mov	r2, r6
 800d4be:	4649      	mov	r1, r9
 800d4c0:	7878      	ldrb	r0, [r7, #1]
 800d4c2:	f7ff fb9f 	bl	800cc04 <disk_read>
 800d4c6:	b140      	cbz	r0, 800d4da <dir_read+0x4a>
			fs->winsect = sector;
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800d4cc:	2001      	movs	r0, #1
			fs->winsect = sector;
 800d4ce:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	61e3      	str	r3, [r4, #28]
}
 800d4d4:	b003      	add	sp, #12
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d4da:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d4dc:	6a21      	ldr	r1, [r4, #32]
 800d4de:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	d042      	beq.n	800d56a <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4e4:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4e6:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4ec:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4ee:	d00a      	beq.n	800d506 <dir_read+0x76>
 800d4f0:	2a2e      	cmp	r2, #46	; 0x2e
 800d4f2:	d008      	beq.n	800d506 <dir_read+0x76>
 800d4f4:	f023 0020 	bic.w	r0, r3, #32
 800d4f8:	f1a0 0008 	sub.w	r0, r0, #8
 800d4fc:	fab0 f080 	clz	r0, r0
 800d500:	0940      	lsrs	r0, r0, #5
 800d502:	4550      	cmp	r0, sl
 800d504:	d038      	beq.n	800d578 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d506:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d50a:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d50c:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d50e:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d510:	69e6      	ldr	r6, [r4, #28]
 800d512:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800d516:	d228      	bcs.n	800d56a <dir_read+0xda>
 800d518:	b33e      	cbz	r6, 800d56a <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d51a:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d51e:	bb32      	cbnz	r2, 800d56e <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800d520:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800d522:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d524:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d526:	b961      	cbnz	r1, 800d542 <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d528:	891a      	ldrh	r2, [r3, #8]
 800d52a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800d52e:	d91c      	bls.n	800d56a <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d530:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d532:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d534:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d536:	2e00      	cmp	r6, #0
 800d538:	d1b8      	bne.n	800d4ac <dir_read+0x1c>
		res = move_window(fs, dp->sect);
 800d53a:	2000      	movs	r0, #0
}
 800d53c:	b003      	add	sp, #12
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d542:	895a      	ldrh	r2, [r3, #10]
 800d544:	3a01      	subs	r2, #1
 800d546:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800d54a:	d1f1      	bne.n	800d530 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d54c:	4618      	mov	r0, r3
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	f7ff ff48 	bl	800d3e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d554:	2801      	cmp	r0, #1
 800d556:	f240 80b5 	bls.w	800d6c4 <dir_read+0x234>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	f000 8085 	beq.w	800d66a <dir_read+0x1da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	699a      	ldr	r2, [r3, #24]
 800d564:	4290      	cmp	r0, r2
 800d566:	f0c0 80a1 	bcc.w	800d6ac <dir_read+0x21c>
	FRESULT res = FR_NO_FILE;
 800d56a:	2004      	movs	r0, #4
 800d56c:	e7b0      	b.n	800d4d0 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d56e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d570:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d572:	4413      	add	r3, r2
 800d574:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d576:	e799      	b.n	800d4ac <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d578:	2b0f      	cmp	r3, #15
 800d57a:	f040 80ab 	bne.w	800d6d4 <dir_read+0x244>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d57e:	0650      	lsls	r0, r2, #25
 800d580:	d575      	bpl.n	800d66e <dir_read+0x1de>
						sum = dp->dir[LDIR_Chksum];
 800d582:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800d584:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800d588:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800d58a:	6963      	ldr	r3, [r4, #20]
 800d58c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d58e:	7b4b      	ldrb	r3, [r1, #13]
 800d590:	9a00      	ldr	r2, [sp, #0]
 800d592:	4293      	cmp	r3, r2
 800d594:	d1b7      	bne.n	800d506 <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d596:	8b4b      	ldrh	r3, [r1, #26]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1b4      	bne.n	800d506 <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d59c:	780b      	ldrb	r3, [r1, #0]
 800d59e:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800d5a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d5ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d5b0:	2bfe      	cmp	r3, #254	; 0xfe
 800d5b2:	d8a8      	bhi.n	800d506 <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d5b4:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800d5bc:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	f040 8090 	bne.w	800d6e6 <dir_read+0x256>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5ca:	429e      	cmp	r6, r3
 800d5cc:	d19b      	bne.n	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d5ce:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5d6:	459e      	cmp	lr, r3
 800d5d8:	d195      	bne.n	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d5da:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5e2:	459c      	cmp	ip, r3
 800d5e4:	d18f      	bne.n	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d5e6:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5ee:	429e      	cmp	r6, r3
 800d5f0:	d189      	bne.n	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d5f2:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5fa:	459c      	cmp	ip, r3
 800d5fc:	d183      	bne.n	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d5fe:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d606:	459e      	cmp	lr, r3
 800d608:	f47f af7d 	bne.w	800d506 <dir_read+0x76>
	rv = rv << 8 | ptr[0];
 800d60c:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d612:	429e      	cmp	r6, r3
 800d614:	f47f af77 	bne.w	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d618:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d620:	459c      	cmp	ip, r3
 800d622:	f47f af70 	bne.w	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d626:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d62c:	429e      	cmp	r6, r3
 800d62e:	f47f af6a 	bne.w	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d632:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d63a:	459c      	cmp	ip, r3
 800d63c:	f47f af63 	bne.w	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d640:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d646:	429e      	cmp	r6, r3
 800d648:	f47f af5d 	bne.w	800d506 <dir_read+0x76>
	rv = ptr[1];
 800d64c:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d654:	459c      	cmp	ip, r3
 800d656:	f000 80ca 	beq.w	800d7ee <dir_read+0x35e>
 800d65a:	e754      	b.n	800d506 <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d65c:	2301      	movs	r3, #1
 800d65e:	462a      	mov	r2, r5
 800d660:	4649      	mov	r1, r9
 800d662:	7878      	ldrb	r0, [r7, #1]
 800d664:	f7ff fade 	bl	800cc24 <disk_write>
 800d668:	b128      	cbz	r0, 800d676 <dir_read+0x1e6>
	FRESULT res = FR_NO_FILE;
 800d66a:	2001      	movs	r0, #1
 800d66c:	e730      	b.n	800d4d0 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d66e:	4542      	cmp	r2, r8
 800d670:	f47f af49 	bne.w	800d506 <dir_read+0x76>
 800d674:	e78b      	b.n	800d58e <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800d678:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d67a:	1aea      	subs	r2, r5, r3
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	429a      	cmp	r2, r3
 800d680:	f4bf af1b 	bcs.w	800d4ba <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d684:	f897 b002 	ldrb.w	fp, [r7, #2]
 800d688:	f1bb 0f01 	cmp.w	fp, #1
 800d68c:	d801      	bhi.n	800d692 <dir_read+0x202>
 800d68e:	e714      	b.n	800d4ba <dir_read+0x2a>
					wsect += fs->fsize;
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d694:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800d698:	2301      	movs	r3, #1
 800d69a:	4649      	mov	r1, r9
 800d69c:	462a      	mov	r2, r5
 800d69e:	7878      	ldrb	r0, [r7, #1]
 800d6a0:	f7ff fac0 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6a4:	f1bb 0f01 	cmp.w	fp, #1
 800d6a8:	d1f2      	bne.n	800d690 <dir_read+0x200>
 800d6aa:	e706      	b.n	800d4ba <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800d6ac:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d6ae:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d6b0:	699a      	ldr	r2, [r3, #24]
 800d6b2:	3a02      	subs	r2, #2
 800d6b4:	4290      	cmp	r0, r2
 800d6b6:	d207      	bcs.n	800d6c8 <dir_read+0x238>
	return clst * fs->csize + fs->database;
 800d6b8:	895a      	ldrh	r2, [r3, #10]
 800d6ba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800d6bc:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800d6c0:	61e6      	str	r6, [r4, #28]
 800d6c2:	e735      	b.n	800d530 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6c4:	2002      	movs	r0, #2
 800d6c6:	e703      	b.n	800d4d0 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6c8:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d6ca:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800d6ce:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6d0:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d6d2:	e732      	b.n	800d53a <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d6d4:	f1b8 0f00 	cmp.w	r8, #0
 800d6d8:	f000 8096 	beq.w	800d808 <dir_read+0x378>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d6dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800d6e0:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d6e2:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d6e4:	e6f6      	b.n	800d4d4 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6e6:	2aff      	cmp	r2, #255	; 0xff
 800d6e8:	f000 80d9 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6ec:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 800d6f0:	0050      	lsls	r0, r2, #1
 800d6f2:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800d6f6:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800d6f8:	2e00      	cmp	r6, #0
 800d6fa:	f43f af6a 	beq.w	800d5d2 <dir_read+0x142>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6fe:	2aff      	cmp	r2, #255	; 0xff
 800d700:	f000 80cd 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d704:	4428      	add	r0, r5
 800d706:	1cda      	adds	r2, r3, #3
 800d708:	f8a0 e002 	strh.w	lr, [r0, #2]
 800d70c:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800d710:	f1be 0f00 	cmp.w	lr, #0
 800d714:	f43f af63 	beq.w	800d5de <dir_read+0x14e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d718:	2aff      	cmp	r2, #255	; 0xff
 800d71a:	f000 80c0 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d71e:	f8a0 c004 	strh.w	ip, [r0, #4]
 800d722:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 800d724:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800d728:	f1bc 0f00 	cmp.w	ip, #0
 800d72c:	f43f af5d 	beq.w	800d5ea <dir_read+0x15a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d730:	2aff      	cmp	r2, #255	; 0xff
 800d732:	f000 80b4 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d736:	80c6      	strh	r6, [r0, #6]
 800d738:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 800d73a:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800d73e:	2e00      	cmp	r6, #0
 800d740:	f43f af59 	beq.w	800d5f6 <dir_read+0x166>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d744:	2aff      	cmp	r2, #255	; 0xff
 800d746:	f000 80aa 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d74a:	f8a0 c008 	strh.w	ip, [r0, #8]
 800d74e:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 800d750:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800d754:	f1bc 0f00 	cmp.w	ip, #0
 800d758:	f43f af53 	beq.w	800d602 <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d75c:	2aff      	cmp	r2, #255	; 0xff
 800d75e:	f000 809e 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d762:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800d766:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 800d768:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800d76a:	f1be 0f00 	cmp.w	lr, #0
 800d76e:	f43f af4e 	beq.w	800d60e <dir_read+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d772:	2aff      	cmp	r2, #255	; 0xff
 800d774:	f000 8093 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d778:	8186      	strh	r6, [r0, #12]
 800d77a:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 800d77e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800d782:	2e00      	cmp	r6, #0
 800d784:	f43f af4a 	beq.w	800d61c <dir_read+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d788:	2aff      	cmp	r2, #255	; 0xff
 800d78a:	f000 8088 	beq.w	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d78e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800d792:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 800d796:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800d798:	f1bc 0f00 	cmp.w	ip, #0
 800d79c:	f43f af44 	beq.w	800d628 <dir_read+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d7a0:	2aff      	cmp	r2, #255	; 0xff
 800d7a2:	d07c      	beq.n	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d7a4:	8206      	strh	r6, [r0, #16]
 800d7a6:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 800d7aa:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	f43f af41 	beq.w	800d636 <dir_read+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d7b4:	2aff      	cmp	r2, #255	; 0xff
 800d7b6:	d072      	beq.n	800d89e <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d7b8:	f8a0 c012 	strh.w	ip, [r0, #18]
 800d7bc:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 800d7c0:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800d7c2:	f1bc 0f00 	cmp.w	ip, #0
 800d7c6:	f43f af3c 	beq.w	800d642 <dir_read+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d7ca:	2aff      	cmp	r2, #255	; 0xff
 800d7cc:	f43f ae9b 	beq.w	800d506 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d7d0:	8286      	strh	r6, [r0, #20]
 800d7d2:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 800d7d6:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800d7da:	2e00      	cmp	r6, #0
 800d7dc:	f43f af38 	beq.w	800d650 <dir_read+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d7e0:	2aff      	cmp	r2, #255	; 0xff
 800d7e2:	f43f ae90 	beq.w	800d506 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d7e6:	f103 020d 	add.w	r2, r3, #13
 800d7ea:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d7ee:	780b      	ldrb	r3, [r1, #0]
 800d7f0:	0659      	lsls	r1, r3, #25
 800d7f2:	d504      	bpl.n	800d7fe <dir_read+0x36e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d7f4:	2aff      	cmp	r2, #255	; 0xff
 800d7f6:	d052      	beq.n	800d89e <dir_read+0x40e>
		lfnbuf[i] = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d7fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d802:	fa5f f888 	uxtb.w	r8, r8
 800d806:	e680      	b.n	800d50a <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d808:	780b      	ldrb	r3, [r1, #0]
 800d80a:	01da      	lsls	r2, r3, #7
 800d80c:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800d810:	784b      	ldrb	r3, [r1, #1]
 800d812:	441a      	add	r2, r3
 800d814:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d818:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d81c:	788a      	ldrb	r2, [r1, #2]
 800d81e:	fa52 f383 	uxtab	r3, r2, r3
 800d822:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d826:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d82a:	78cb      	ldrb	r3, [r1, #3]
 800d82c:	fa53 f282 	uxtab	r2, r3, r2
 800d830:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d834:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d838:	790a      	ldrb	r2, [r1, #4]
 800d83a:	fa52 f383 	uxtab	r3, r2, r3
 800d83e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d842:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d846:	794b      	ldrb	r3, [r1, #5]
 800d848:	fa53 f282 	uxtab	r2, r3, r2
 800d84c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d850:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d854:	798a      	ldrb	r2, [r1, #6]
 800d856:	fa52 f383 	uxtab	r3, r2, r3
 800d85a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d85e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d862:	79cb      	ldrb	r3, [r1, #7]
 800d864:	fa53 f282 	uxtab	r2, r3, r2
 800d868:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d86c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d870:	7a0a      	ldrb	r2, [r1, #8]
 800d872:	fa52 f383 	uxtab	r3, r2, r3
 800d876:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d87a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d87e:	7a4b      	ldrb	r3, [r1, #9]
 800d880:	7a89      	ldrb	r1, [r1, #10]
 800d882:	fa53 f282 	uxtab	r2, r3, r2
 800d886:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d88a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d88e:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d890:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d894:	b2db      	uxtb	r3, r3
 800d896:	4293      	cmp	r3, r2
 800d898:	f47f af20 	bne.w	800d6dc <dir_read+0x24c>
 800d89c:	e64d      	b.n	800d53a <dir_read+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d89e:	4690      	mov	r8, r2
 800d8a0:	e633      	b.n	800d50a <dir_read+0x7a>
 800d8a2:	bf00      	nop

0800d8a4 <sync_fs>:
{
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d8a6:	78c3      	ldrb	r3, [r0, #3]
{
 800d8a8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d8aa:	b95b      	cbnz	r3, 800d8c4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8ac:	7823      	ldrb	r3, [r4, #0]
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d029      	beq.n	800d906 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	7860      	ldrb	r0, [r4, #1]
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	f7ff f9c4 	bl	800cc44 <disk_ioctl>
			res = FR_DISK_ERR;
 800d8bc:	3800      	subs	r0, #0
 800d8be:	bf18      	it	ne
 800d8c0:	2001      	movne	r0, #1
}
 800d8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800d8c4:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8c6:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	7840      	ldrb	r0, [r0, #1]
 800d8ce:	462a      	mov	r2, r5
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f7ff f9a7 	bl	800cc24 <disk_write>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d13e      	bne.n	800d958 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d8dc:	69e3      	ldr	r3, [r4, #28]
 800d8de:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800d8e0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d2e2      	bcs.n	800d8ac <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8e6:	78a6      	ldrb	r6, [r4, #2]
 800d8e8:	2e01      	cmp	r6, #1
 800d8ea:	d801      	bhi.n	800d8f0 <sync_fs+0x4c>
 800d8ec:	e7de      	b.n	800d8ac <sync_fs+0x8>
					wsect += fs->fsize;
 800d8ee:	69e3      	ldr	r3, [r4, #28]
 800d8f0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8f2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	462a      	mov	r2, r5
 800d8fa:	7860      	ldrb	r0, [r4, #1]
 800d8fc:	f7ff f992 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d900:	2e01      	cmp	r6, #1
 800d902:	d1f4      	bne.n	800d8ee <sync_fs+0x4a>
 800d904:	e7d2      	b.n	800d8ac <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d906:	7925      	ldrb	r5, [r4, #4]
 800d908:	2d01      	cmp	r5, #1
 800d90a:	d1d2      	bne.n	800d8b2 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800d90c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800d910:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d914:	2100      	movs	r1, #0
 800d916:	4630      	mov	r0, r6
 800d918:	f00b fd22 	bl	8019360 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800d91c:	480f      	ldr	r0, [pc, #60]	; (800d95c <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800d91e:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800d922:	6360      	str	r0, [r4, #52]	; 0x34
 800d924:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800d928:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d92c:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800d92e:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800d932:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d936:	3020      	adds	r0, #32
 800d938:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 800d93c:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800d93e:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d942:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800d944:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800d946:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d94a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800d94c:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d94e:	f7ff f969 	bl	800cc24 <disk_write>
			fs->fsi_flag = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	7123      	strb	r3, [r4, #4]
 800d956:	e7ac      	b.n	800d8b2 <sync_fs+0xe>
			res = FR_DISK_ERR;
 800d958:	2001      	movs	r0, #1
}
 800d95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d95c:	41615252 	.word	0x41615252

0800d960 <create_chain>:
{
 800d960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 800d966:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 800d968:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800d96c:	2900      	cmp	r1, #0
 800d96e:	f040 80a7 	bne.w	800dac0 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d972:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d976:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d97a:	b9c6      	cbnz	r6, 800d9ae <create_chain+0x4e>
 800d97c:	2601      	movs	r6, #1
 800d97e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800d980:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d982:	429c      	cmp	r4, r3
 800d984:	d317      	bcc.n	800d9b6 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 800d986:	2e01      	cmp	r6, #1
 800d988:	f000 8096 	beq.w	800dab8 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d98c:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 800d990:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d992:	69ab      	ldr	r3, [r5, #24]
 800d994:	42a3      	cmp	r3, r4
 800d996:	d906      	bls.n	800d9a6 <create_chain+0x46>
		switch (fs->fs_type) {
 800d998:	782b      	ldrb	r3, [r5, #0]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d07e      	beq.n	800da9c <create_chain+0x13c>
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d064      	beq.n	800da6c <create_chain+0x10c>
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d00c      	beq.n	800d9c0 <create_chain+0x60>
 800d9a6:	2401      	movs	r4, #1
}
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d9ae:	42b3      	cmp	r3, r6
 800d9b0:	bf98      	it	ls
 800d9b2:	2601      	movls	r6, #1
 800d9b4:	e7e3      	b.n	800d97e <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9b6:	2c01      	cmp	r4, #1
 800d9b8:	f8d9 5000 	ldr.w	r5, [r9]
 800d9bc:	d9f3      	bls.n	800d9a6 <create_chain+0x46>
 800d9be:	e7e8      	b.n	800d992 <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d9c2:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d9cc:	f7ff fad4 	bl	800cf78 <move_window>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d146      	bne.n	800da62 <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 800d9d4:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d9da:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9de:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d9e0:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9e2:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d9e6:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9ea:	f7ff fac5 	bl	800cf78 <move_window>
 800d9ee:	bbc0      	cbnz	r0, 800da62 <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d9f0:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d9f4:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800d9f6:	44ab      	add	fp, r5
 800d9f8:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800d9fc:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da00:	bf4c      	ite	mi
 800da02:	091b      	lsrmi	r3, r3, #4
 800da04:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d140      	bne.n	800da8e <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800da0c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800da10:	42a3      	cmp	r3, r4
 800da12:	d9c8      	bls.n	800d9a6 <create_chain+0x46>
 800da14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da18:	4621      	mov	r1, r4
 800da1a:	4640      	mov	r0, r8
 800da1c:	f7ff fc5c 	bl	800d2d8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800da20:	b958      	cbnz	r0, 800da3a <create_chain+0xda>
 800da22:	b157      	cbz	r7, 800da3a <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800da24:	2f01      	cmp	r7, #1
 800da26:	d0be      	beq.n	800d9a6 <create_chain+0x46>
 800da28:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800da2c:	429f      	cmp	r7, r3
 800da2e:	d2ba      	bcs.n	800d9a6 <create_chain+0x46>
 800da30:	4622      	mov	r2, r4
 800da32:	4639      	mov	r1, r7
 800da34:	4640      	mov	r0, r8
 800da36:	f7ff fc4f 	bl	800d2d8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800da3a:	b980      	cbnz	r0, 800da5e <create_chain+0xfe>
		fs->last_clst = ncl;
 800da3c:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800da40:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800da44:	3b02      	subs	r3, #2
 800da46:	429a      	cmp	r2, r3
 800da48:	d802      	bhi.n	800da50 <create_chain+0xf0>
 800da4a:	3a01      	subs	r2, #1
 800da4c:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800da50:	f898 3004 	ldrb.w	r3, [r8, #4]
 800da54:	f043 0301 	orr.w	r3, r3, #1
 800da58:	f888 3004 	strb.w	r3, [r8, #4]
 800da5c:	e7a4      	b.n	800d9a8 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800da5e:	2801      	cmp	r0, #1
 800da60:	d1a1      	bne.n	800d9a6 <create_chain+0x46>
 800da62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800da66:	4620      	mov	r0, r4
 800da68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da6c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800da6e:	4628      	mov	r0, r5
 800da70:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800da74:	f7ff fa80 	bl	800cf78 <move_window>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d1f2      	bne.n	800da62 <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800da7c:	00a3      	lsls	r3, r4, #2
 800da7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800da82:	441d      	add	r5, r3
 800da84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800da86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d0be      	beq.n	800da0c <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d089      	beq.n	800d9a6 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800da92:	42a6      	cmp	r6, r4
 800da94:	d010      	beq.n	800dab8 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800da96:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800da9a:	e771      	b.n	800d980 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800da9e:	4628      	mov	r0, r5
 800daa0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800daa4:	f7ff fa68 	bl	800cf78 <move_window>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d1da      	bne.n	800da62 <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800daac:	0063      	lsls	r3, r4, #1
 800daae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dab2:	442b      	add	r3, r5
 800dab4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 800dab6:	e7a7      	b.n	800da08 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 800dab8:	2400      	movs	r4, #0
}
 800daba:	4620      	mov	r0, r4
 800dabc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dac0:	4640      	mov	r0, r8
 800dac2:	f7ff fc8f 	bl	800d3e4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dac6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dac8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800daca:	f67f af6c 	bls.w	800d9a6 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dace:	1c41      	adds	r1, r0, #1
 800dad0:	d0c7      	beq.n	800da62 <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dad2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dad6:	4283      	cmp	r3, r0
 800dad8:	f63f af66 	bhi.w	800d9a8 <create_chain+0x48>
 800dadc:	463e      	mov	r6, r7
 800dade:	e74e      	b.n	800d97e <create_chain+0x1e>

0800dae0 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dae0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 800dae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800dae8:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800daec:	d24e      	bcs.n	800db8c <dir_sdi+0xac>
 800daee:	06ca      	lsls	r2, r1, #27
 800daf0:	460c      	mov	r4, r1
 800daf2:	d14b      	bne.n	800db8c <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800daf4:	6885      	ldr	r5, [r0, #8]
 800daf6:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800daf8:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dafa:	2d00      	cmp	r5, #0
 800dafc:	d049      	beq.n	800db92 <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dafe:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db02:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800db06:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800db0a:	f0c0 8084 	bcc.w	800dc16 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db0e:	2d01      	cmp	r5, #1
 800db10:	d03c      	beq.n	800db8c <dir_sdi+0xac>
 800db12:	4647      	mov	r7, r8
 800db14:	e037      	b.n	800db86 <dir_sdi+0xa6>
		switch (fs->fs_type) {
 800db16:	783b      	ldrb	r3, [r7, #0]
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d06e      	beq.n	800dbfa <dir_sdi+0x11a>
 800db1c:	2b03      	cmp	r3, #3
 800db1e:	d05c      	beq.n	800dbda <dir_sdi+0xfa>
 800db20:	2b01      	cmp	r3, #1
 800db22:	d133      	bne.n	800db8c <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db24:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800db26:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db2a:	4638      	mov	r0, r7
 800db2c:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800db30:	f7ff fa22 	bl	800cf78 <move_window>
 800db34:	2800      	cmp	r0, #0
 800db36:	d14d      	bne.n	800dbd4 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 800db38:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800db3e:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db42:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800db44:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db46:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800db4a:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db4e:	f7ff fa13 	bl	800cf78 <move_window>
 800db52:	2800      	cmp	r0, #0
 800db54:	d13e      	bne.n	800dbd4 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db56:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800db5a:	44ba      	add	sl, r7
 800db5c:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800db60:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db64:	07eb      	lsls	r3, r5, #31
 800db66:	bf4c      	ite	mi
 800db68:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800db6c:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800db70:	2d01      	cmp	r5, #1
 800db72:	d90b      	bls.n	800db8c <dir_sdi+0xac>
 800db74:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800db78:	42ab      	cmp	r3, r5
 800db7a:	d907      	bls.n	800db8c <dir_sdi+0xac>
			ofs -= csz;
 800db7c:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800db80:	45a1      	cmp	r9, r4
 800db82:	d84a      	bhi.n	800dc1a <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800db84:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	42ab      	cmp	r3, r5
 800db8a:	d8c4      	bhi.n	800db16 <dir_sdi+0x36>
		switch (fs->fs_type) {
 800db8c:	2002      	movs	r0, #2
}
 800db8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800db92:	f898 3000 	ldrb.w	r3, [r8]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d816      	bhi.n	800dbc8 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800db9a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800db9e:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800dba2:	d9f3      	bls.n	800db8c <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800dba4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 800dba8:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0ed      	beq.n	800db8c <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dbb0:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800dbb4:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dbb8:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 800dbbc:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dbbe:	4441      	add	r1, r8
 800dbc0:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 800dbc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800dbc8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0e4      	beq.n	800db9a <dir_sdi+0xba>
 800dbd0:	461d      	mov	r5, r3
 800dbd2:	e794      	b.n	800dafe <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dbd4:	2001      	movs	r0, #1
}
 800dbd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbdc:	4638      	mov	r0, r7
 800dbde:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800dbe2:	f7ff f9c9 	bl	800cf78 <move_window>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d1f4      	bne.n	800dbd4 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbea:	00ab      	lsls	r3, r5, #2
 800dbec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800dbf0:	443b      	add	r3, r7
 800dbf2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbf4:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 800dbf8:	e7ba      	b.n	800db70 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800dc02:	f7ff f9b9 	bl	800cf78 <move_window>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d1e4      	bne.n	800dbd4 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc0a:	006b      	lsls	r3, r5, #1
 800dc0c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dc10:	443b      	add	r3, r7
 800dc12:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 800dc14:	e7ac      	b.n	800db70 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc16:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dc1a:	3b02      	subs	r3, #2
	clst -= 2;
 800dc1c:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d206      	bcs.n	800dc30 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 800dc22:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 800dc26:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800dc2a:	fb02 3301 	mla	r3, r2, r1, r3
 800dc2e:	e7bb      	b.n	800dba8 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 800dc30:	2300      	movs	r3, #0
 800dc32:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc36:	e7a9      	b.n	800db8c <dir_sdi+0xac>

0800dc38 <dir_remove>:
{
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800dc3c:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
 800dc3e:	b083      	sub	sp, #12
 800dc40:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800dc42:	6806      	ldr	r6, [r0, #0]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800dc44:	1c4a      	adds	r2, r1, #1
	DWORD last = dp->dptr;
 800dc46:	f8d0 9014 	ldr.w	r9, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800dc4a:	f040 8086 	bne.w	800dd5a <dir_remove+0x122>
			res = move_window(fs, dp->sect);
 800dc4e:	69e7      	ldr	r7, [r4, #28]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dc50:	f04f 0b01 	mov.w	fp, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc54:	f106 0834 	add.w	r8, r6, #52	; 0x34
				dp->dir[DIR_Name] = DDEM;
 800dc58:	f04f 0ae5 	mov.w	sl, #229	; 0xe5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800dc5c:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800dc5e:	42ba      	cmp	r2, r7
 800dc60:	d011      	beq.n	800dc86 <dir_remove+0x4e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc62:	78f3      	ldrb	r3, [r6, #3]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d131      	bne.n	800dccc <dir_remove+0x94>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dc68:	2301      	movs	r3, #1
 800dc6a:	463a      	mov	r2, r7
 800dc6c:	4641      	mov	r1, r8
 800dc6e:	7870      	ldrb	r0, [r6, #1]
 800dc70:	f7fe ffc8 	bl	800cc04 <disk_read>
 800dc74:	b130      	cbz	r0, 800dc84 <dir_remove+0x4c>
			fs->winsect = sector;
 800dc76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800dc7a:	2001      	movs	r0, #1
			fs->winsect = sector;
 800dc7c:	6333      	str	r3, [r6, #48]	; 0x30
}
 800dc7e:	b003      	add	sp, #12
 800dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800dc84:	6337      	str	r7, [r6, #48]	; 0x30
				dp->dir[DIR_Name] = DDEM;
 800dc86:	6a23      	ldr	r3, [r4, #32]
 800dc88:	f883 a000 	strb.w	sl, [r3]
			fs->wflag = 1;
 800dc8c:	f886 b003 	strb.w	fp, [r6, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dc90:	6965      	ldr	r5, [r4, #20]
 800dc92:	454d      	cmp	r5, r9
 800dc94:	d267      	bcs.n	800dd66 <dir_remove+0x12e>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc96:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dc98:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
 800dc9a:	6823      	ldr	r3, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc9c:	b197      	cbz	r7, 800dcc4 <dir_remove+0x8c>
 800dc9e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800dca2:	d20f      	bcs.n	800dcc4 <dir_remove+0x8c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dca4:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800dca8:	b93a      	cbnz	r2, 800dcba <dir_remove+0x82>
		dp->sect++;				/* Next sector */
 800dcaa:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800dcac:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800dcae:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800dcb0:	b9b1      	cbnz	r1, 800dce0 <dir_remove+0xa8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dcb2:	8919      	ldrh	r1, [r3, #8]
 800dcb4:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800dcb8:	d94b      	bls.n	800dd52 <dir_remove+0x11a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dcba:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800dcbc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dcbe:	4413      	add	r3, r2
 800dcc0:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);
 800dcc2:	e7cb      	b.n	800dc5c <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800dcc4:	2002      	movs	r0, #2
}
 800dcc6:	b003      	add	sp, #12
 800dcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dccc:	2301      	movs	r3, #1
 800dcce:	4641      	mov	r1, r8
 800dcd0:	7870      	ldrb	r0, [r6, #1]
 800dcd2:	9200      	str	r2, [sp, #0]
 800dcd4:	f7fe ffa6 	bl	800cc24 <disk_write>
 800dcd8:	9a00      	ldr	r2, [sp, #0]
 800dcda:	b300      	cbz	r0, 800dd1e <dir_remove+0xe6>
				res = FR_DISK_ERR;
 800dcdc:	2001      	movs	r0, #1
 800dcde:	e7ce      	b.n	800dc7e <dir_remove+0x46>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dce0:	8958      	ldrh	r0, [r3, #10]
 800dce2:	3801      	subs	r0, #1
 800dce4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 800dce8:	d1e7      	bne.n	800dcba <dir_remove+0x82>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dcea:	4618      	mov	r0, r3
 800dcec:	9201      	str	r2, [sp, #4]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	f7ff fb78 	bl	800d3e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dcf4:	2801      	cmp	r0, #1
 800dcf6:	d9e5      	bls.n	800dcc4 <dir_remove+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d0ef      	beq.n	800dcdc <dir_remove+0xa4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dcfc:	9b00      	ldr	r3, [sp, #0]
 800dcfe:	6999      	ldr	r1, [r3, #24]
 800dd00:	4288      	cmp	r0, r1
 800dd02:	d226      	bcs.n	800dd52 <dir_remove+0x11a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800dd04:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800dd06:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd08:	6999      	ldr	r1, [r3, #24]
 800dd0a:	9a01      	ldr	r2, [sp, #4]
 800dd0c:	3902      	subs	r1, #2
 800dd0e:	4288      	cmp	r0, r1
 800dd10:	d22b      	bcs.n	800dd6a <dir_remove+0x132>
	return clst * fs->csize + fs->database;
 800dd12:	8959      	ldrh	r1, [r3, #10]
 800dd14:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800dd16:	fb00 7701 	mla	r7, r0, r1, r7
				dp->sect = clust2sect(fs, clst);
 800dd1a:	61e7      	str	r7, [r4, #28]
 800dd1c:	e7cd      	b.n	800dcba <dir_remove+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 800dd20:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd22:	1ad1      	subs	r1, r2, r3
 800dd24:	69f3      	ldr	r3, [r6, #28]
 800dd26:	4299      	cmp	r1, r3
 800dd28:	d29e      	bcs.n	800dc68 <dir_remove+0x30>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd2a:	78b5      	ldrb	r5, [r6, #2]
 800dd2c:	2d01      	cmp	r5, #1
 800dd2e:	d99b      	bls.n	800dc68 <dir_remove+0x30>
 800dd30:	9400      	str	r4, [sp, #0]
 800dd32:	462c      	mov	r4, r5
 800dd34:	4615      	mov	r5, r2
 800dd36:	e000      	b.n	800dd3a <dir_remove+0x102>
					wsect += fs->fsize;
 800dd38:	69f3      	ldr	r3, [r6, #28]
 800dd3a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd3c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800dd3e:	2301      	movs	r3, #1
 800dd40:	4641      	mov	r1, r8
 800dd42:	462a      	mov	r2, r5
 800dd44:	7870      	ldrb	r0, [r6, #1]
 800dd46:	f7fe ff6d 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd4a:	2c01      	cmp	r4, #1
 800dd4c:	d1f4      	bne.n	800dd38 <dir_remove+0x100>
 800dd4e:	9c00      	ldr	r4, [sp, #0]
 800dd50:	e78a      	b.n	800dc68 <dir_remove+0x30>
				dp->sect = 0; return FR_NO_FILE;
 800dd52:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800dd54:	2002      	movs	r0, #2
				dp->sect = 0; return FR_NO_FILE;
 800dd56:	61e3      	str	r3, [r4, #28]
		} while (res == FR_OK);
 800dd58:	e791      	b.n	800dc7e <dir_remove+0x46>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800dd5a:	f7ff fec1 	bl	800dae0 <dir_sdi>
	if (res == FR_OK) {
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f43f af75 	beq.w	800dc4e <dir_remove+0x16>
 800dd64:	e78b      	b.n	800dc7e <dir_remove+0x46>
			res = move_window(fs, dp->sect);
 800dd66:	2000      	movs	r0, #0
 800dd68:	e789      	b.n	800dc7e <dir_remove+0x46>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd6a:	2700      	movs	r7, #0
 800dd6c:	e7d5      	b.n	800dd1a <dir_remove+0xe2>
 800dd6e:	bf00      	nop

0800dd70 <dir_find>:
{
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd74:	2100      	movs	r1, #0
{
 800dd76:	b085      	sub	sp, #20
 800dd78:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800dd7a:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd7e:	f7ff feaf 	bl	800dae0 <dir_sdi>
	if (res != FR_OK) return res;
 800dd82:	4607      	mov	r7, r0
 800dd84:	b9e8      	cbnz	r0, 800ddc2 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dd86:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800dd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800dd8e:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dd90:	464f      	mov	r7, r9
 800dd92:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800dd94:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 800dd98:	42b5      	cmp	r5, r6
 800dd9a:	d018      	beq.n	800ddce <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dd9c:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dda0:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f040 8085 	bne.w	800deb4 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ddaa:	2301      	movs	r3, #1
 800ddac:	4632      	mov	r2, r6
 800ddae:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ddb2:	f7fe ff27 	bl	800cc04 <disk_read>
 800ddb6:	b140      	cbz	r0, 800ddca <dir_find+0x5a>
			fs->winsect = sector;
 800ddb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800ddbc:	2701      	movs	r7, #1
			fs->winsect = sector;
 800ddbe:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	b005      	add	sp, #20
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800ddca:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 800ddce:	6a25      	ldr	r5, [r4, #32]
 800ddd0:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ddd2:	b346      	cbz	r6, 800de26 <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ddd4:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ddd6:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ddd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dddc:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ddde:	d004      	beq.n	800ddea <dir_find+0x7a>
 800dde0:	071b      	lsls	r3, r3, #28
 800dde2:	d525      	bpl.n	800de30 <dir_find+0xc0>
 800dde4:	2a0f      	cmp	r2, #15
 800dde6:	f000 8093 	beq.w	800df10 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ddea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddee:	27ff      	movs	r7, #255	; 0xff
 800ddf0:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddf2:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800ddf4:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddf6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ddf8:	69e6      	ldr	r6, [r4, #28]
 800ddfa:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800ddfe:	d212      	bcs.n	800de26 <dir_find+0xb6>
 800de00:	b18e      	cbz	r6, 800de26 <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de02:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800de06:	b94a      	cbnz	r2, 800de1c <dir_find+0xac>
		dp->sect++;				/* Next sector */
 800de08:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800de0a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800de0c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800de0e:	2900      	cmp	r1, #0
 800de10:	d15c      	bne.n	800decc <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de12:	8919      	ldrh	r1, [r3, #8]
 800de14:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800de18:	f240 813a 	bls.w	800e090 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de1c:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800de1e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de20:	4413      	add	r3, r2
 800de22:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 800de24:	e7b6      	b.n	800dd94 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de26:	2704      	movs	r7, #4
}
 800de28:	4638      	mov	r0, r7
 800de2a:	b005      	add	sp, #20
 800de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800de30:	2a0f      	cmp	r2, #15
 800de32:	d06d      	beq.n	800df10 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800de34:	2f00      	cmp	r7, #0
 800de36:	f000 80d9 	beq.w	800dfec <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800de3a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 800de3e:	f017 0701 	ands.w	r7, r7, #1
 800de42:	d1d2      	bne.n	800ddea <dir_find+0x7a>
	} while (--cnt && r == 0);
 800de44:	782a      	ldrb	r2, [r5, #0]
 800de46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d1cd      	bne.n	800ddea <dir_find+0x7a>
 800de4e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800de52:	786b      	ldrb	r3, [r5, #1]
 800de54:	429a      	cmp	r2, r3
 800de56:	d1c8      	bne.n	800ddea <dir_find+0x7a>
 800de58:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800de5c:	78ab      	ldrb	r3, [r5, #2]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d1c3      	bne.n	800ddea <dir_find+0x7a>
 800de62:	78ea      	ldrb	r2, [r5, #3]
 800de64:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800de68:	429a      	cmp	r2, r3
 800de6a:	d1be      	bne.n	800ddea <dir_find+0x7a>
 800de6c:	792a      	ldrb	r2, [r5, #4]
 800de6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800de72:	429a      	cmp	r2, r3
 800de74:	d1b9      	bne.n	800ddea <dir_find+0x7a>
 800de76:	796a      	ldrb	r2, [r5, #5]
 800de78:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d1b4      	bne.n	800ddea <dir_find+0x7a>
 800de80:	79aa      	ldrb	r2, [r5, #6]
 800de82:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800de86:	429a      	cmp	r2, r3
 800de88:	d1af      	bne.n	800ddea <dir_find+0x7a>
 800de8a:	79ea      	ldrb	r2, [r5, #7]
 800de8c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800de90:	429a      	cmp	r2, r3
 800de92:	d1aa      	bne.n	800ddea <dir_find+0x7a>
 800de94:	7a2a      	ldrb	r2, [r5, #8]
 800de96:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d1a5      	bne.n	800ddea <dir_find+0x7a>
 800de9e:	7a6a      	ldrb	r2, [r5, #9]
 800dea0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d1a0      	bne.n	800ddea <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dea8:	7aaa      	ldrb	r2, [r5, #10]
 800deaa:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800deae:	429a      	cmp	r2, r3
 800deb0:	d19b      	bne.n	800ddea <dir_find+0x7a>
 800deb2:	e786      	b.n	800ddc2 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800deb4:	2301      	movs	r3, #1
 800deb6:	462a      	mov	r2, r5
 800deb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800debc:	9100      	str	r1, [sp, #0]
 800debe:	f7fe feb1 	bl	800cc24 <disk_write>
 800dec2:	9900      	ldr	r1, [sp, #0]
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d06e      	beq.n	800dfa6 <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dec8:	2701      	movs	r7, #1
 800deca:	e77a      	b.n	800ddc2 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800decc:	8958      	ldrh	r0, [r3, #10]
 800dece:	3801      	subs	r0, #1
 800ded0:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 800ded4:	d1a2      	bne.n	800de1c <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ded6:	4618      	mov	r0, r3
 800ded8:	9201      	str	r2, [sp, #4]
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	f7ff fa82 	bl	800d3e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dee0:	2801      	cmp	r0, #1
 800dee2:	f240 80d9 	bls.w	800e098 <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d0ee      	beq.n	800dec8 <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	6999      	ldr	r1, [r3, #24]
 800deee:	4288      	cmp	r0, r1
 800def0:	f080 80ce 	bcs.w	800e090 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
 800def4:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800def6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800def8:	6999      	ldr	r1, [r3, #24]
 800defa:	9a01      	ldr	r2, [sp, #4]
 800defc:	3902      	subs	r1, #2
 800defe:	4288      	cmp	r0, r1
 800df00:	f080 80cc 	bcs.w	800e09c <dir_find+0x32c>
	return clst * fs->csize + fs->database;
 800df04:	8959      	ldrh	r1, [r3, #10]
 800df06:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800df08:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 800df0c:	61e6      	str	r6, [r4, #28]
 800df0e:	e785      	b.n	800de1c <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800df10:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800df14:	0658      	lsls	r0, r3, #25
 800df16:	f53f af6c 	bmi.w	800ddf2 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800df1a:	0671      	lsls	r1, r6, #25
 800df1c:	f140 80b3 	bpl.w	800e086 <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800df20:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800df22:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800df26:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800df2a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df2c:	7b6b      	ldrb	r3, [r5, #13]
 800df2e:	454b      	cmp	r3, r9
 800df30:	f040 80ac 	bne.w	800e08c <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800df34:	8b6b      	ldrh	r3, [r5, #26]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f040 80a8 	bne.w	800e08c <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800df3c:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df3e:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df40:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800df44:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800df48:	f8df a178 	ldr.w	sl, [pc, #376]	; 800e0c4 <dir_find+0x354>
 800df4c:	9602      	str	r6, [sp, #8]
 800df4e:	462e      	mov	r6, r5
 800df50:	3f01      	subs	r7, #1
 800df52:	f10a 0b0d 	add.w	fp, sl, #13
 800df56:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df58:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800df5a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800df5e:	f8cd 8000 	str.w	r8, [sp]
 800df62:	9401      	str	r4, [sp, #4]
 800df64:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df68:	e010      	b.n	800df8c <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800df6a:	2ffe      	cmp	r7, #254	; 0xfe
 800df6c:	4620      	mov	r0, r4
 800df6e:	d816      	bhi.n	800df9e <dir_find+0x22e>
 800df70:	f001 feb2 	bl	800fcd8 <ff_wtoupper>
 800df74:	4680      	mov	r8, r0
 800df76:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 800df7a:	3701      	adds	r7, #1
 800df7c:	f001 feac 	bl	800fcd8 <ff_wtoupper>
 800df80:	4580      	cmp	r8, r0
 800df82:	4621      	mov	r1, r4
 800df84:	d10b      	bne.n	800df9e <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df86:	45d3      	cmp	fp, sl
 800df88:	f000 808a 	beq.w	800e0a0 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800df8c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800df90:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 800df92:	2900      	cmp	r1, #0
 800df94:	d1e9      	bne.n	800df6a <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800df96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df9a:	429c      	cmp	r4, r3
 800df9c:	d0f3      	beq.n	800df86 <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df9e:	e9dd 8400 	ldrd	r8, r4, [sp]
 800dfa2:	27ff      	movs	r7, #255	; 0xff
 800dfa4:	e725      	b.n	800ddf2 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dfa6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800dfaa:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dfae:	1aea      	subs	r2, r5, r3
 800dfb0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	f4bf aef8 	bcs.w	800ddaa <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dfba:	f898 a002 	ldrb.w	sl, [r8, #2]
 800dfbe:	f1ba 0f01 	cmp.w	sl, #1
 800dfc2:	f67f aef2 	bls.w	800ddaa <dir_find+0x3a>
 800dfc6:	468b      	mov	fp, r1
 800dfc8:	e001      	b.n	800dfce <dir_find+0x25e>
					wsect += fs->fsize;
 800dfca:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dfce:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dfd0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	4659      	mov	r1, fp
 800dfd8:	462a      	mov	r2, r5
 800dfda:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dfde:	f7fe fe21 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dfe2:	f1ba 0f01 	cmp.w	sl, #1
 800dfe6:	d1f0      	bne.n	800dfca <dir_find+0x25a>
 800dfe8:	4659      	mov	r1, fp
 800dfea:	e6de      	b.n	800ddaa <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dfec:	782a      	ldrb	r2, [r5, #0]
 800dfee:	7869      	ldrb	r1, [r5, #1]
 800dff0:	01d0      	lsls	r0, r2, #7
 800dff2:	78ae      	ldrb	r6, [r5, #2]
 800dff4:	78eb      	ldrb	r3, [r5, #3]
 800dff6:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800dffa:	792a      	ldrb	r2, [r5, #4]
 800dffc:	f895 a005 	ldrb.w	sl, [r5, #5]
 800e000:	4408      	add	r0, r1
 800e002:	f895 e006 	ldrb.w	lr, [r5, #6]
 800e006:	f895 c007 	ldrb.w	ip, [r5, #7]
 800e00a:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800e00e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800e012:	7a68      	ldrb	r0, [r5, #9]
 800e014:	fa56 f181 	uxtab	r1, r6, r1
 800e018:	7a2e      	ldrb	r6, [r5, #8]
 800e01a:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800e01e:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800e022:	7aa9      	ldrb	r1, [r5, #10]
 800e024:	fa53 fb8b 	uxtab	fp, r3, fp
 800e028:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800e02c:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800e030:	fa52 f383 	uxtab	r3, r2, r3
 800e034:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e038:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e03c:	fa5a f282 	uxtab	r2, sl, r2
 800e040:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e044:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e048:	fa5e f383 	uxtab	r3, lr, r3
 800e04c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e050:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e054:	fa5c f282 	uxtab	r2, ip, r2
 800e058:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e05c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e060:	fa56 f383 	uxtab	r3, r6, r3
 800e064:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e068:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e06c:	fa50 f282 	uxtab	r2, r0, r2
 800e070:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e074:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e078:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	4599      	cmp	r9, r3
 800e080:	f47f aedb 	bne.w	800de3a <dir_find+0xca>
 800e084:	e69d      	b.n	800ddc2 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e086:	42b7      	cmp	r7, r6
 800e088:	f43f af50 	beq.w	800df2c <dir_find+0x1bc>
 800e08c:	27ff      	movs	r7, #255	; 0xff
 800e08e:	e6b0      	b.n	800ddf2 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 800e090:	2300      	movs	r3, #0
 800e092:	2704      	movs	r7, #4
 800e094:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800e096:	e694      	b.n	800ddc2 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e098:	2702      	movs	r7, #2
 800e09a:	e692      	b.n	800ddc2 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e09c:	4616      	mov	r6, r2
 800e09e:	e735      	b.n	800df0c <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e0a0:	4635      	mov	r5, r6
 800e0a2:	f8dd 8000 	ldr.w	r8, [sp]
 800e0a6:	782b      	ldrb	r3, [r5, #0]
 800e0a8:	065a      	lsls	r2, r3, #25
 800e0aa:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 800e0ae:	d500      	bpl.n	800e0b2 <dir_find+0x342>
 800e0b0:	b911      	cbnz	r1, 800e0b8 <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e0b2:	3e01      	subs	r6, #1
 800e0b4:	b2f7      	uxtb	r7, r6
 800e0b6:	e69c      	b.n	800ddf2 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e0b8:	9b03      	ldr	r3, [sp, #12]
 800e0ba:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0f7      	beq.n	800e0b2 <dir_find+0x342>
 800e0c2:	e7e3      	b.n	800e08c <dir_find+0x31c>
 800e0c4:	0801c348 	.word	0x0801c348

0800e0c8 <follow_path>:
{
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e0cc:	780b      	ldrb	r3, [r1, #0]
{
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	4688      	mov	r8, r1
 800e0d2:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e0d4:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 800e0d6:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e0da:	d103      	bne.n	800e0e4 <follow_path+0x1c>
 800e0dc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800e0e0:	2b2f      	cmp	r3, #47	; 0x2f
 800e0e2:	d0fb      	beq.n	800e0dc <follow_path+0x14>
 800e0e4:	2b5c      	cmp	r3, #92	; 0x5c
 800e0e6:	d0f9      	beq.n	800e0dc <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e0ec:	f898 3000 	ldrb.w	r3, [r8]
 800e0f0:	2b1f      	cmp	r3, #31
 800e0f2:	f240 8147 	bls.w	800e384 <follow_path+0x2bc>
 800e0f6:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800e0f8:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e0fa:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800e0fc:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800e0fe:	d929      	bls.n	800e154 <follow_path+0x8c>
 800e100:	f1a5 0902 	sub.w	r9, r5, #2
 800e104:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800e106:	2401      	movs	r4, #1
 800e108:	e008      	b.n	800e11c <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 800e10a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800e10e:	1c63      	adds	r3, r4, #1
 800e110:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800e114:	281f      	cmp	r0, #31
 800e116:	f240 80f6 	bls.w	800e306 <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 800e11a:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e11c:	282f      	cmp	r0, #47	; 0x2f
 800e11e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800e122:	d01d      	beq.n	800e160 <follow_path+0x98>
 800e124:	285c      	cmp	r0, #92	; 0x5c
 800e126:	d01b      	beq.n	800e160 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e128:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800e12c:	d00e      	beq.n	800e14c <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e12e:	2101      	movs	r1, #1
 800e130:	f001 fdb4 	bl	800fc9c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e134:	b150      	cbz	r0, 800e14c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e136:	287f      	cmp	r0, #127	; 0x7f
 800e138:	d8e7      	bhi.n	800e10a <follow_path+0x42>
	while (*str && *str != chr) str++;
 800e13a:	2322      	movs	r3, #34	; 0x22
 800e13c:	4aa5      	ldr	r2, [pc, #660]	; (800e3d4 <follow_path+0x30c>)
 800e13e:	e003      	b.n	800e148 <follow_path+0x80>
 800e140:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e144:	2b00      	cmp	r3, #0
 800e146:	d0e0      	beq.n	800e10a <follow_path+0x42>
 800e148:	4298      	cmp	r0, r3
 800e14a:	d1f9      	bne.n	800e140 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e14c:	2006      	movs	r0, #6
}
 800e14e:	b003      	add	sp, #12
 800e150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800e154:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e156:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800e158:	802b      	strh	r3, [r5, #0]
}
 800e15a:	b003      	add	sp, #12
 800e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e160:	f818 3004 	ldrb.w	r3, [r8, r4]
 800e164:	eb08 0204 	add.w	r2, r8, r4
 800e168:	2b2f      	cmp	r3, #47	; 0x2f
 800e16a:	d002      	beq.n	800e172 <follow_path+0xaa>
 800e16c:	2b5c      	cmp	r3, #92	; 0x5c
 800e16e:	f040 811e 	bne.w	800e3ae <follow_path+0x2e6>
 800e172:	1c63      	adds	r3, r4, #1
 800e174:	4443      	add	r3, r8
 800e176:	4698      	mov	r8, r3
 800e178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e17c:	2a2f      	cmp	r2, #47	; 0x2f
 800e17e:	d0fa      	beq.n	800e176 <follow_path+0xae>
 800e180:	2a5c      	cmp	r2, #92	; 0x5c
 800e182:	d0f8      	beq.n	800e176 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e184:	f1ba 0f00 	cmp.w	sl, #0
 800e188:	d0e4      	beq.n	800e154 <follow_path+0x8c>
 800e18a:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e18c:	2400      	movs	r4, #0
 800e18e:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800e192:	e002      	b.n	800e19a <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e194:	f1ba 0a01 	subs.w	sl, sl, #1
 800e198:	d0dc      	beq.n	800e154 <follow_path+0x8c>
		w = lfn[di - 1];
 800e19a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800e19e:	2b20      	cmp	r3, #32
 800e1a0:	d0f8      	beq.n	800e194 <follow_path+0xcc>
 800e1a2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a4:	d0f6      	beq.n	800e194 <follow_path+0xcc>
		*d++ = (BYTE)val;
 800e1a6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800e1aa:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 800e1ac:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 800e1b0:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1b8:	2320      	movs	r3, #32
 800e1ba:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800e1bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e1c0:	8828      	ldrh	r0, [r5, #0]
 800e1c2:	282e      	cmp	r0, #46	; 0x2e
 800e1c4:	d002      	beq.n	800e1cc <follow_path+0x104>
 800e1c6:	4298      	cmp	r0, r3
 800e1c8:	f040 80e5 	bne.w	800e396 <follow_path+0x2ce>
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800e1d4:	461c      	mov	r4, r3
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	2820      	cmp	r0, #32
 800e1da:	d0f9      	beq.n	800e1d0 <follow_path+0x108>
 800e1dc:	282e      	cmp	r0, #46	; 0x2e
 800e1de:	d0f7      	beq.n	800e1d0 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 800e1e0:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e1e2:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800e1e6:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800e1ea:	2a2e      	cmp	r2, #46	; 0x2e
 800e1ec:	d002      	beq.n	800e1f4 <follow_path+0x12c>
 800e1ee:	f1ba 0a01 	subs.w	sl, sl, #1
 800e1f2:	d1f8      	bne.n	800e1e6 <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 800e1f4:	b3b0      	cbz	r0, 800e264 <follow_path+0x19c>
 800e1f6:	2208      	movs	r2, #8
 800e1f8:	4641      	mov	r1, r8
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	46b8      	mov	r8, r7
 800e1fe:	462f      	mov	r7, r5
 800e200:	4615      	mov	r5, r2
 800e202:	4699      	mov	r9, r3
 800e204:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e206:	2820      	cmp	r0, #32
 800e208:	d003      	beq.n	800e212 <follow_path+0x14a>
 800e20a:	282e      	cmp	r0, #46	; 0x2e
 800e20c:	d14d      	bne.n	800e2aa <follow_path+0x1e2>
 800e20e:	45a2      	cmp	sl, r4
 800e210:	d04b      	beq.n	800e2aa <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 800e212:	f046 0603 	orr.w	r6, r6, #3
 800e216:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 800e218:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e21c:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800e21e:	2800      	cmp	r0, #0
 800e220:	d1f1      	bne.n	800e206 <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e222:	4647      	mov	r7, r8
 800e224:	4690      	mov	r8, r2
 800e226:	462a      	mov	r2, r5
 800e228:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800e22c:	29e5      	cmp	r1, #229	; 0xe5
 800e22e:	d102      	bne.n	800e236 <follow_path+0x16e>
 800e230:	2105      	movs	r1, #5
 800e232:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800e236:	2a08      	cmp	r2, #8
 800e238:	f000 8093 	beq.w	800e362 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e23c:	f003 020c 	and.w	r2, r3, #12
 800e240:	2a0c      	cmp	r2, #12
 800e242:	d065      	beq.n	800e310 <follow_path+0x248>
 800e244:	f003 0303 	and.w	r3, r3, #3
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d061      	beq.n	800e310 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e24c:	07b1      	lsls	r1, r6, #30
 800e24e:	d409      	bmi.n	800e264 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e250:	2b01      	cmp	r3, #1
 800e252:	d102      	bne.n	800e25a <follow_path+0x192>
 800e254:	f046 0610 	orr.w	r6, r6, #16
 800e258:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e25a:	2a04      	cmp	r2, #4
 800e25c:	d102      	bne.n	800e264 <follow_path+0x19c>
 800e25e:	f046 0608 	orr.w	r6, r6, #8
 800e262:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800e264:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e266:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e26a:	f7ff fd81 	bl	800dd70 <dir_find>
			ns = dp->fn[NSFLAG];
 800e26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e272:	2800      	cmp	r0, #0
 800e274:	d158      	bne.n	800e328 <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e276:	075a      	lsls	r2, r3, #29
 800e278:	f53f af69 	bmi.w	800e14e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e27c:	79bb      	ldrb	r3, [r7, #6]
 800e27e:	06db      	lsls	r3, r3, #27
 800e280:	f140 8097 	bpl.w	800e3b2 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800e28a:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e28e:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800e292:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e294:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800e296:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800e298:	d102      	bne.n	800e2a0 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e29a:	8a9b      	ldrh	r3, [r3, #20]
 800e29c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e2a0:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e2a2:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 800e2a4:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2a8:	e726      	b.n	800e0f8 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e2aa:	454d      	cmp	r5, r9
 800e2ac:	d91c      	bls.n	800e2e8 <follow_path+0x220>
 800e2ae:	ebaa 0104 	sub.w	r1, sl, r4
 800e2b2:	fab1 f181 	clz	r1, r1
 800e2b6:	0949      	lsrs	r1, r1, #5
 800e2b8:	b9b1      	cbnz	r1, 800e2e8 <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 800e2ba:	287f      	cmp	r0, #127	; 0x7f
 800e2bc:	d83c      	bhi.n	800e338 <follow_path+0x270>
	while (*str && *str != chr) str++;
 800e2be:	212b      	movs	r1, #43	; 0x2b
 800e2c0:	f8df c118 	ldr.w	ip, [pc, #280]	; 800e3dc <follow_path+0x314>
 800e2c4:	e003      	b.n	800e2ce <follow_path+0x206>
 800e2c6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	d052      	beq.n	800e374 <follow_path+0x2ac>
 800e2ce:	4281      	cmp	r1, r0
 800e2d0:	d1f9      	bne.n	800e2c6 <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e2d2:	f046 0603 	orr.w	r6, r6, #3
 800e2d6:	205f      	movs	r0, #95	; 0x5f
 800e2d8:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 800e2da:	eb08 0109 	add.w	r1, r8, r9
 800e2de:	f109 0901 	add.w	r9, r9, #1
 800e2e2:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800e2e6:	e797      	b.n	800e218 <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 800e2e8:	2d0b      	cmp	r5, #11
 800e2ea:	d064      	beq.n	800e3b6 <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e2ec:	45a2      	cmp	sl, r4
 800e2ee:	d003      	beq.n	800e2f8 <follow_path+0x230>
 800e2f0:	f046 0603 	orr.w	r6, r6, #3
 800e2f4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 800e2f6:	d394      	bcc.n	800e222 <follow_path+0x15a>
			b <<= 2; continue;
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e2fc:	250b      	movs	r5, #11
 800e2fe:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800e302:	b2db      	uxtb	r3, r3
 800e304:	e788      	b.n	800e218 <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 800e306:	46a2      	mov	sl, r4
 800e308:	4498      	add	r8, r3
 800e30a:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e30c:	2404      	movs	r4, #4
 800e30e:	e73e      	b.n	800e18e <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e310:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800e314:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e316:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e318:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e31c:	f7ff fd28 	bl	800dd70 <dir_find>
			ns = dp->fn[NSFLAG];
 800e320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e324:	2800      	cmp	r0, #0
 800e326:	d0a6      	beq.n	800e276 <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e328:	2804      	cmp	r0, #4
 800e32a:	f47f af10 	bne.w	800e14e <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e32e:	f013 0f04 	tst.w	r3, #4
 800e332:	bf08      	it	eq
 800e334:	2005      	moveq	r0, #5
 800e336:	e70a      	b.n	800e14e <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e338:	e9cd 3200 	strd	r3, r2, [sp]
 800e33c:	f001 fcae 	bl	800fc9c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e340:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e344:	b918      	cbnz	r0, 800e34e <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 800e346:	f046 0602 	orr.w	r6, r6, #2
 800e34a:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e34c:	e7c1      	b.n	800e2d2 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e34e:	4922      	ldr	r1, [pc, #136]	; (800e3d8 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800e350:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e354:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 800e356:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e358:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d0b8      	beq.n	800e2d2 <follow_path+0x20a>
 800e360:	e7ad      	b.n	800e2be <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 800e362:	009a      	lsls	r2, r3, #2
 800e364:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e368:	2a0c      	cmp	r2, #12
 800e36a:	d0d1      	beq.n	800e310 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e36c:	07b0      	lsls	r0, r6, #30
 800e36e:	f57f af74 	bpl.w	800e25a <follow_path+0x192>
 800e372:	e777      	b.n	800e264 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 800e374:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800e378:	2919      	cmp	r1, #25
 800e37a:	d80f      	bhi.n	800e39c <follow_path+0x2d4>
					b |= 2;
 800e37c:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800e380:	b2c0      	uxtb	r0, r0
 800e382:	e7aa      	b.n	800e2da <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 800e384:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800e386:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800e388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800e38c:	b003      	add	sp, #12
 800e38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800e392:	f7ff bba5 	b.w	800dae0 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e396:	4626      	mov	r6, r4
 800e398:	2401      	movs	r4, #1
 800e39a:	e722      	b.n	800e1e2 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 800e39c:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800e3a0:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800e3a2:	bf9c      	itt	ls
 800e3a4:	3820      	subls	r0, #32
 800e3a6:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800e3aa:	b2c0      	uxtb	r0, r0
 800e3ac:	e795      	b.n	800e2da <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e3ae:	4690      	mov	r8, r2
 800e3b0:	e6e8      	b.n	800e184 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e3b2:	2005      	movs	r0, #5
 800e3b4:	e6cb      	b.n	800e14e <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 800e3b6:	4647      	mov	r7, r8
 800e3b8:	4690      	mov	r8, r2
 800e3ba:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e3be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800e3c2:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e3c4:	2ae5      	cmp	r2, #229	; 0xe5
 800e3c6:	f47f af39 	bne.w	800e23c <follow_path+0x174>
 800e3ca:	2205      	movs	r2, #5
 800e3cc:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800e3d0:	e734      	b.n	800e23c <follow_path+0x174>
 800e3d2:	bf00      	nop
 800e3d4:	0801c2b4 	.word	0x0801c2b4
 800e3d8:	0801c2c8 	.word	0x0801c2c8
 800e3dc:	0801c2c0 	.word	0x0801c2c0

0800e3e0 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e3e0:	2901      	cmp	r1, #1
{
 800e3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 800e3ea:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e3ec:	d914      	bls.n	800e418 <remove_chain+0x38>
 800e3ee:	69ab      	ldr	r3, [r5, #24]
 800e3f0:	428b      	cmp	r3, r1
 800e3f2:	d911      	bls.n	800e418 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	b992      	cbnz	r2, 800e420 <remove_chain+0x40>
 800e3fa:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e3fc:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 800e400:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e404:	429c      	cmp	r4, r3
 800e406:	d207      	bcs.n	800e418 <remove_chain+0x38>
		switch (fs->fs_type) {
 800e408:	783b      	ldrb	r3, [r7, #0]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	f000 80a3 	beq.w	800e556 <remove_chain+0x176>
 800e410:	2b03      	cmp	r3, #3
 800e412:	d022      	beq.n	800e45a <remove_chain+0x7a>
 800e414:	2b01      	cmp	r3, #1
 800e416:	d011      	beq.n	800e43c <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e418:	2002      	movs	r0, #2
}
 800e41a:	b003      	add	sp, #12
 800e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e420:	4293      	cmp	r3, r2
 800e422:	d9f9      	bls.n	800e418 <remove_chain+0x38>
 800e424:	2a01      	cmp	r2, #1
 800e426:	d0f7      	beq.n	800e418 <remove_chain+0x38>
 800e428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e42c:	4628      	mov	r0, r5
 800e42e:	f7fe ff53 	bl	800d2d8 <put_fat.part.0>
		if (res != FR_OK) return res;
 800e432:	2800      	cmp	r0, #0
 800e434:	d1f1      	bne.n	800e41a <remove_chain+0x3a>
 800e436:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	e7df      	b.n	800e3fc <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e43c:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e43e:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e442:	4638      	mov	r0, r7
 800e444:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e448:	f7fe fd96 	bl	800cf78 <move_window>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	f000 80a9 	beq.w	800e5a4 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e452:	2001      	movs	r0, #1
}
 800e454:	b003      	add	sp, #12
 800e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e45a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e45c:	4638      	mov	r0, r7
 800e45e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e462:	f7fe fd89 	bl	800cf78 <move_window>
 800e466:	2800      	cmp	r0, #0
 800e468:	d1f3      	bne.n	800e452 <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e46a:	00a3      	lsls	r3, r4, #2
 800e46c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e470:	443b      	add	r3, r7
 800e472:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e476:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 800e47a:	f1ba 0f00 	cmp.w	sl, #0
 800e47e:	f000 80af 	beq.w	800e5e0 <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e482:	f1ba 0f01 	cmp.w	sl, #1
 800e486:	d0c7      	beq.n	800e418 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e488:	69ab      	ldr	r3, [r5, #24]
 800e48a:	42a3      	cmp	r3, r4
 800e48c:	d9c4      	bls.n	800e418 <remove_chain+0x38>
		switch (fs->fs_type) {
 800e48e:	782f      	ldrb	r7, [r5, #0]
 800e490:	2f02      	cmp	r7, #2
 800e492:	d029      	beq.n	800e4e8 <remove_chain+0x108>
 800e494:	2f03      	cmp	r7, #3
 800e496:	d047      	beq.n	800e528 <remove_chain+0x148>
 800e498:	2f01      	cmp	r7, #1
 800e49a:	d1bd      	bne.n	800e418 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e49c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e49e:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e4a8:	f7fe fd66 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1b4      	bne.n	800e41a <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4b0:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 800e4b2:	f10b 0301 	add.w	r3, fp, #1
 800e4b6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4ba:	d55c      	bpl.n	800e576 <remove_chain+0x196>
 800e4bc:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4c4:	f002 020f 	and.w	r2, r2, #15
 800e4c8:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e4ce:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4d0:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e4d4:	f7fe fd50 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800e4d8:	9b01      	ldr	r3, [sp, #4]
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d19d      	bne.n	800e41a <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4e2:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4e4:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e4e6:	e00c      	b.n	800e502 <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e4e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e4f0:	f7fe fd42 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d190      	bne.n	800e41a <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e4f8:	0064      	lsls	r4, r4, #1
 800e4fa:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e4fe:	442c      	add	r4, r5
 800e500:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 800e502:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e506:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800e50a:	1e91      	subs	r1, r2, #2
 800e50c:	428b      	cmp	r3, r1
 800e50e:	d205      	bcs.n	800e51c <remove_chain+0x13c>
			fs->free_clst++;
 800e510:	3301      	adds	r3, #1
 800e512:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800e514:	792b      	ldrb	r3, [r5, #4]
 800e516:	f043 0301 	orr.w	r3, r3, #1
 800e51a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e51c:	4552      	cmp	r2, sl
 800e51e:	d95f      	bls.n	800e5e0 <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e520:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e522:	4654      	mov	r4, sl
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	e76d      	b.n	800e404 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e528:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e52a:	4628      	mov	r0, r5
 800e52c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e530:	f7fe fd22 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800e534:	2800      	cmp	r0, #0
 800e536:	f47f af70 	bne.w	800e41a <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e53a:	00a4      	lsls	r4, r4, #2
 800e53c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e540:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e544:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e548:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 800e54a:	0e13      	lsrs	r3, r2, #24
 800e54c:	70a0      	strb	r0, [r4, #2]
 800e54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 800e552:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 800e554:	e7d5      	b.n	800e502 <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e558:	4638      	mov	r0, r7
 800e55a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e55e:	f7fe fd0b 	bl	800cf78 <move_window>
 800e562:	2800      	cmp	r0, #0
 800e564:	f47f af75 	bne.w	800e452 <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e568:	0063      	lsls	r3, r4, #1
 800e56a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e56e:	443b      	add	r3, r7
 800e570:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 800e574:	e781      	b.n	800e47a <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e576:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e57a:	4628      	mov	r0, r5
 800e57c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e57e:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e580:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	f7fe fcf7 	bl	800cf78 <move_window>
			if (res != FR_OK) break;
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f47f af45 	bne.w	800e41a <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e590:	9b01      	ldr	r3, [sp, #4]
 800e592:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e596:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 800e59a:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e59c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800e5a0:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e5a2:	e7ae      	b.n	800e502 <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 800e5a4:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800e5aa:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ae:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e5b0:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5b2:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e5b6:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ba:	f7fe fcdd 	bl	800cf78 <move_window>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f47f af47 	bne.w	800e452 <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5c4:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5c8:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5ca:	44ba      	add	sl, r7
 800e5cc:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800e5d0:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5d4:	bf4c      	ite	mi
 800e5d6:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 800e5da:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 800e5de:	e74c      	b.n	800e47a <remove_chain+0x9a>
	return FR_OK;
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	e71a      	b.n	800e41a <remove_chain+0x3a>

0800e5e4 <dir_next>:
{
 800e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e5e8:	69c3      	ldr	r3, [r0, #28]
{
 800e5ea:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e5ec:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d03d      	beq.n	800e66e <dir_next+0x8a>
 800e5f2:	3520      	adds	r5, #32
 800e5f4:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800e5f8:	d239      	bcs.n	800e66e <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e5fa:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800e5fe:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e600:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e602:	f1b8 0f00 	cmp.w	r8, #0
 800e606:	d008      	beq.n	800e61a <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e608:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e60c:	4446      	add	r6, r8
	return FR_OK;
 800e60e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800e610:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e612:	6226      	str	r6, [r4, #32]
}
 800e614:	b005      	add	sp, #20
 800e616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800e61a:	460e      	mov	r6, r1
 800e61c:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800e61e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800e620:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800e622:	b341      	cbz	r1, 800e676 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e624:	897b      	ldrh	r3, [r7, #10]
 800e626:	3b01      	subs	r3, #1
 800e628:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	d1eb      	bne.n	800e608 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e630:	4638      	mov	r0, r7
 800e632:	f7fe fed7 	bl	800d3e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e636:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e638:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e63a:	d924      	bls.n	800e686 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e63c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e640:	d023      	beq.n	800e68a <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	4283      	cmp	r3, r0
 800e646:	d922      	bls.n	800e68e <dir_next+0xaa>
	clst -= 2;
 800e648:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e64a:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800e64e:	4619      	mov	r1, r3
	clst -= 2;
 800e650:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800e652:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	3b02      	subs	r3, #2
 800e65a:	428b      	cmp	r3, r1
 800e65c:	d904      	bls.n	800e668 <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800e65e:	897a      	ldrh	r2, [r7, #10]
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	fb01 3302 	mla	r3, r1, r2, r3
 800e666:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 800e668:	9b00      	ldr	r3, [sp, #0]
 800e66a:	61e3      	str	r3, [r4, #28]
 800e66c:	e7ce      	b.n	800e60c <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e66e:	2004      	movs	r0, #4
}
 800e670:	b005      	add	sp, #20
 800e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e676:	893b      	ldrh	r3, [r7, #8]
 800e678:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800e67c:	d8c4      	bhi.n	800e608 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 800e67e:	2300      	movs	r3, #0
 800e680:	2004      	movs	r0, #4
 800e682:	61e3      	str	r3, [r4, #28]
 800e684:	e7c6      	b.n	800e614 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e686:	2002      	movs	r0, #2
 800e688:	e7c4      	b.n	800e614 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e68a:	2001      	movs	r0, #1
 800e68c:	e7c2      	b.n	800e614 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 800e68e:	2e00      	cmp	r6, #0
 800e690:	d0f5      	beq.n	800e67e <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e692:	69a1      	ldr	r1, [r4, #24]
 800e694:	4620      	mov	r0, r4
 800e696:	f7ff f963 	bl	800d960 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e69a:	4681      	mov	r9, r0
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d05a      	beq.n	800e756 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e6a0:	2801      	cmp	r0, #1
 800e6a2:	d0f0      	beq.n	800e686 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e6a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e6a8:	d0ef      	beq.n	800e68a <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e6aa:	78fb      	ldrb	r3, [r7, #3]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d154      	bne.n	800e75a <dir_next+0x176>
 800e6b0:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 800e6b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e6bc:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 800e6be:	f00a fe4f 	bl	8019360 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6c2:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 800e6c4:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6c8:	3b02      	subs	r3, #2
	clst -= 2;
 800e6ca:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d267      	bcs.n	800e7a0 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	897b      	ldrh	r3, [r7, #10]
 800e6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6d6:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6da:	633a      	str	r2, [r7, #48]	; 0x30
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d036      	beq.n	800e74e <dir_next+0x16a>
 800e6e0:	2300      	movs	r3, #0
						fs->wflag = 1;
 800e6e2:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800e6e6:	465e      	mov	r6, fp
 800e6e8:	461c      	mov	r4, r3
 800e6ea:	46ab      	mov	fp, r5
 800e6ec:	4615      	mov	r5, r2
 800e6ee:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6f2:	462a      	mov	r2, r5
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800e6f8:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	f7fe fa92 	bl	800cc24 <disk_write>
 800e700:	2800      	cmp	r0, #0
 800e702:	d1c2      	bne.n	800e68a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e706:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e708:	1aea      	subs	r2, r5, r3
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d212      	bcs.n	800e736 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e710:	f897 a002 	ldrb.w	sl, [r7, #2]
 800e714:	f1ba 0f01 	cmp.w	sl, #1
 800e718:	d801      	bhi.n	800e71e <dir_next+0x13a>
 800e71a:	e00c      	b.n	800e736 <dir_next+0x152>
					wsect += fs->fsize;
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e720:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800e724:	2301      	movs	r3, #1
 800e726:	4631      	mov	r1, r6
 800e728:	462a      	mov	r2, r5
 800e72a:	7878      	ldrb	r0, [r7, #1]
 800e72c:	f7fe fa7a 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e730:	f1ba 0f01 	cmp.w	sl, #1
 800e734:	d1f2      	bne.n	800e71c <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	3401      	adds	r4, #1
 800e73a:	1c5d      	adds	r5, r3, #1
 800e73c:	897b      	ldrh	r3, [r7, #10]
 800e73e:	42a3      	cmp	r3, r4
 800e740:	633d      	str	r5, [r7, #48]	; 0x30
 800e742:	d8d4      	bhi.n	800e6ee <dir_next+0x10a>
 800e744:	462a      	mov	r2, r5
 800e746:	4623      	mov	r3, r4
 800e748:	465d      	mov	r5, fp
 800e74a:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	9901      	ldr	r1, [sp, #4]
 800e752:	633a      	str	r2, [r7, #48]	; 0x30
 800e754:	e77d      	b.n	800e652 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e756:	2007      	movs	r0, #7
 800e758:	e75c      	b.n	800e614 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 800e75a:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e75e:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 800e762:	2301      	movs	r3, #1
 800e764:	7878      	ldrb	r0, [r7, #1]
 800e766:	4652      	mov	r2, sl
 800e768:	4659      	mov	r1, fp
 800e76a:	f7fe fa5b 	bl	800cc24 <disk_write>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d18b      	bne.n	800e68a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e774:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e776:	ebaa 0203 	sub.w	r2, sl, r3
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d299      	bcs.n	800e6b4 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e780:	78be      	ldrb	r6, [r7, #2]
 800e782:	2e01      	cmp	r6, #1
 800e784:	d801      	bhi.n	800e78a <dir_next+0x1a6>
 800e786:	e795      	b.n	800e6b4 <dir_next+0xd0>
 800e788:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 800e78a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e78c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800e78e:	2301      	movs	r3, #1
 800e790:	4659      	mov	r1, fp
 800e792:	4652      	mov	r2, sl
 800e794:	7878      	ldrb	r0, [r7, #1]
 800e796:	f7fe fa45 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e79a:	2e01      	cmp	r6, #1
 800e79c:	d1f4      	bne.n	800e788 <dir_next+0x1a4>
 800e79e:	e789      	b.n	800e6b4 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
 800e7a0:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	e799      	b.n	800e6da <dir_next+0xf6>
 800e7a6:	bf00      	nop

0800e7a8 <dir_register>:
{
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e7ac:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800e7b0:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e7b2:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 800e7b6:	9302      	str	r3, [sp, #8]
 800e7b8:	f040 82ce 	bne.w	800ed58 <dir_register+0x5b0>
	FATFS *fs = dp->obj.fs;
 800e7bc:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e7c6:	8813      	ldrh	r3, [r2, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f000 82ca 	beq.w	800ed62 <dir_register+0x5ba>
 800e7ce:	468b      	mov	fp, r1
 800e7d0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800e7d4:	f10b 0b01 	add.w	fp, fp, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1f9      	bne.n	800e7d0 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 800e7dc:	f105 0724 	add.w	r7, r5, #36	; 0x24
			*d++ = *s++;
 800e7e0:	ab0a      	add	r3, sp, #40	; 0x28
 800e7e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e7e6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e7ea:	9b02      	ldr	r3, [sp, #8]
 800e7ec:	07dc      	lsls	r4, r3, #31
 800e7ee:	d462      	bmi.n	800e8b6 <dir_register+0x10e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e7f0:	f013 0402 	ands.w	r4, r3, #2
 800e7f4:	4657      	mov	r7, sl
 800e7f6:	f000 8239 	beq.w	800ec6c <dir_register+0x4c4>
 800e7fa:	4bc5      	ldr	r3, [pc, #788]	; (800eb10 <dir_register+0x368>)
 800e7fc:	f10b 040c 	add.w	r4, fp, #12
	res = dir_sdi(dp, 0);
 800e800:	2100      	movs	r1, #0
 800e802:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e804:	fba3 3404 	umull	r3, r4, r3, r4
	res = dir_sdi(dp, 0);
 800e808:	f7ff f96a 	bl	800dae0 <dir_sdi>
	if (res == FR_OK) {
 800e80c:	4606      	mov	r6, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e80e:	08a4      	lsrs	r4, r4, #2
 800e810:	f104 0901 	add.w	r9, r4, #1
	if (res == FR_OK) {
 800e814:	2800      	cmp	r0, #0
 800e816:	f040 8233 	bne.w	800ec80 <dir_register+0x4d8>
		n = 0;
 800e81a:	4680      	mov	r8, r0
 800e81c:	e008      	b.n	800e830 <dir_register+0x88>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e81e:	0952      	lsrs	r2, r2, #5
 800e820:	b1c3      	cbz	r3, 800e854 <dir_register+0xac>
				n = 0;					/* Not a blank entry. Restart to search */
 800e822:	4690      	mov	r8, r2
			res = dir_next(dp, 1);
 800e824:	f7ff fede 	bl	800e5e4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e828:	4606      	mov	r6, r0
 800e82a:	2800      	cmp	r0, #0
 800e82c:	f040 8228 	bne.w	800ec80 <dir_register+0x4d8>
			res = move_window(fs, dp->sect);
 800e830:	69e9      	ldr	r1, [r5, #28]
 800e832:	4638      	mov	r0, r7
 800e834:	f7fe fba0 	bl	800cf78 <move_window>
 800e838:	4606      	mov	r6, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e83a:	f108 0801 	add.w	r8, r8, #1
			res = dir_next(dp, 1);
 800e83e:	2101      	movs	r1, #1
 800e840:	4628      	mov	r0, r5
			if (res != FR_OK) break;
 800e842:	2e00      	cmp	r6, #0
 800e844:	f040 821c 	bne.w	800ec80 <dir_register+0x4d8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e848:	6a2b      	ldr	r3, [r5, #32]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2be5      	cmp	r3, #229	; 0xe5
 800e84e:	fab3 f283 	clz	r2, r3
 800e852:	d1e4      	bne.n	800e81e <dir_register+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e854:	45c1      	cmp	r9, r8
 800e856:	d1e5      	bne.n	800e824 <dir_register+0x7c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e858:	2c00      	cmp	r4, #0
 800e85a:	f040 8284 	bne.w	800ed66 <dir_register+0x5be>
		res = move_window(fs, dp->sect);
 800e85e:	69e9      	ldr	r1, [r5, #28]
 800e860:	4650      	mov	r0, sl
 800e862:	f7fe fb89 	bl	800cf78 <move_window>
		if (res == FR_OK) {
 800e866:	4606      	mov	r6, r0
 800e868:	bb08      	cbnz	r0, 800e8ae <dir_register+0x106>
		*d++ = (BYTE)val;
 800e86a:	2220      	movs	r2, #32
 800e86c:	4601      	mov	r1, r0
 800e86e:	6a28      	ldr	r0, [r5, #32]
 800e870:	f00a fd76 	bl	8019360 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e874:	6a2b      	ldr	r3, [r5, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e876:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800e87a:	1a9a      	subs	r2, r3, r2
 800e87c:	2a02      	cmp	r2, #2
 800e87e:	f240 83d3 	bls.w	800f028 <dir_register+0x880>
			*d++ = *s++;
 800e882:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e888:	605a      	str	r2, [r3, #4]
 800e88a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800e88e:	721a      	strb	r2, [r3, #8]
 800e890:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800e894:	725a      	strb	r2, [r3, #9]
 800e896:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800e89a:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800e89c:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e89e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e8a2:	6a29      	ldr	r1, [r5, #32]
 800e8a4:	f003 0318 	and.w	r3, r3, #24
 800e8a8:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800e8aa:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	b00b      	add	sp, #44	; 0x2c
 800e8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*d++ = *s++;
 800e8b6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		for (n = 1; n < 100; n++) {
 800e8ba:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8be:	2240      	movs	r2, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8c0:	f8cd b00c 	str.w	fp, [sp, #12]
			*d++ = *s++;
 800e8c4:	9300      	str	r3, [sp, #0]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8c6:	46c3      	mov	fp, r8
			*d++ = *s++;
 800e8c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e8cc:	460e      	mov	r6, r1
				if (sr & 0x10000) sr ^= 0x11021;
 800e8ce:	4c91      	ldr	r4, [pc, #580]	; (800eb14 <dir_register+0x36c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8d0:	f04f 0920 	mov.w	r9, #32
 800e8d4:	4698      	mov	r8, r3
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8d6:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
			*d++ = *s++;
 800e8da:	9001      	str	r0, [sp, #4]
 800e8dc:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e8de:	f1bb 0f05 	cmp.w	fp, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8e2:	f8da 100c 	ldr.w	r1, [sl, #12]
			*d++ = *s++;
 800e8e6:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 800e8ea:	e9c5 3609 	strd	r3, r6, [r5, #36]	; 0x24
 800e8ee:	9b00      	ldr	r3, [sp, #0]
 800e8f0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e8f4:	f240 8135 	bls.w	800eb62 <dir_register+0x3ba>
		while (*lfn) {	/* Create a CRC */
 800e8f8:	880a      	ldrh	r2, [r1, #0]
 800e8fa:	2a00      	cmp	r2, #0
 800e8fc:	f000 8131 	beq.w	800eb62 <dir_register+0x3ba>
				sr = (sr << 1) + (wc & 1);
 800e900:	468c      	mov	ip, r1
 800e902:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 800e906:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 800e908:	eb01 014b 	add.w	r1, r1, fp, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e90c:	e009      	b.n	800e922 <dir_register+0x17a>
				sr = (sr << 1) + (wc & 1);
 800e90e:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e912:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 800e916:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 800e91a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e91e:	bf18      	it	ne
 800e920:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e922:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 800e926:	0893      	lsrs	r3, r2, #2
 800e928:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 800e92a:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e92e:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e938:	bf48      	it	mi
 800e93a:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800e93e:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 800e940:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e944:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 800e948:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 800e94c:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800e950:	bf18      	it	ne
 800e952:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e954:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e958:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e95a:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800e95e:	bf48      	it	mi
 800e960:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e962:	f003 0301 	and.w	r3, r3, #1
 800e966:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e96a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e96c:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800e970:	bf48      	it	mi
 800e972:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e974:	f000 0001 	and.w	r0, r0, #1
 800e978:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e97c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e97e:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800e982:	bf48      	it	mi
 800e984:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e986:	f001 0101 	and.w	r1, r1, #1
 800e98a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e98e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e990:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800e994:	bf48      	it	mi
 800e996:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e998:	f003 0301 	and.w	r3, r3, #1
 800e99c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9a0:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e9a2:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800e9a6:	bf48      	it	mi
 800e9a8:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e9aa:	f000 0001 	and.w	r0, r0, #1
 800e9ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9b2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e9b4:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800e9b8:	bf48      	it	mi
 800e9ba:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e9bc:	f001 0101 	and.w	r1, r1, #1
 800e9c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9c4:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e9c6:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 800e9ca:	bf48      	it	mi
 800e9cc:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9d6:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e9d8:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800e9dc:	bf48      	it	mi
 800e9de:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e9e0:	f000 0001 	and.w	r0, r0, #1
 800e9e4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9e8:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e9ea:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800e9ee:	bf48      	it	mi
 800e9f0:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e9f2:	f001 0101 	and.w	r1, r1, #1
 800e9f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e9fa:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e9fc:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 800ea00:	bf48      	it	mi
 800ea02:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ea0c:	0400      	lsls	r0, r0, #16
 800ea0e:	bf48      	it	mi
 800ea10:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800ea12:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ea16:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 800ea18:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 800ea1c:	bf48      	it	mi
 800ea1e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ea20:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ea24:	041b      	lsls	r3, r3, #16
 800ea26:	bf48      	it	mi
 800ea28:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 800ea2c:	2a00      	cmp	r2, #0
 800ea2e:	f47f af6e 	bne.w	800e90e <dir_register+0x166>
		c = (BYTE)((seq % 16) + '0');
 800ea32:	f00e 010f 	and.w	r1, lr, #15
 800ea36:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ea3a:	2a39      	cmp	r2, #57	; 0x39
 800ea3c:	bf88      	it	hi
 800ea3e:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ea42:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 800ea46:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 800ea4a:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 800ea4e:	f240 8156 	bls.w	800ecfe <dir_register+0x556>
		c = (BYTE)((seq % 16) + '0');
 800ea52:	f001 000f 	and.w	r0, r1, #15
 800ea56:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ea5a:	2a39      	cmp	r2, #57	; 0x39
 800ea5c:	bf88      	it	hi
 800ea5e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800ea62:	290f      	cmp	r1, #15
		seq /= 16;
 800ea64:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 800ea68:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 800ea6c:	f240 814d 	bls.w	800ed0a <dir_register+0x562>
		c = (BYTE)((seq % 16) + '0');
 800ea70:	f000 010f 	and.w	r1, r0, #15
 800ea74:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ea78:	2a39      	cmp	r2, #57	; 0x39
 800ea7a:	bf88      	it	hi
 800ea7c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ea80:	280f      	cmp	r0, #15
		seq /= 16;
 800ea82:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 800ea86:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 800ea8a:	f240 814d 	bls.w	800ed28 <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 800ea8e:	f001 000f 	and.w	r0, r1, #15
 800ea92:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ea96:	2a39      	cmp	r2, #57	; 0x39
 800ea98:	bf88      	it	hi
 800ea9a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800ea9e:	290f      	cmp	r1, #15
		seq /= 16;
 800eaa0:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 800eaa4:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 800eaa8:	f240 8144 	bls.w	800ed34 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 800eaac:	f000 010f 	and.w	r1, r0, #15
 800eab0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800eab4:	2a39      	cmp	r2, #57	; 0x39
 800eab6:	bf88      	it	hi
 800eab8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800eabc:	280f      	cmp	r0, #15
		seq /= 16;
 800eabe:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 800eac2:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 800eac6:	f240 813b 	bls.w	800ed40 <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 800eaca:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 800eace:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 800ead2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ead6:	2a39      	cmp	r2, #57	; 0x39
 800ead8:	bf88      	it	hi
 800eada:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800eade:	290f      	cmp	r1, #15
		ns[i--] = c;
 800eae0:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 800eae4:	f240 8132 	bls.w	800ed4c <dir_register+0x5a4>
		c = (BYTE)((seq % 16) + '0');
 800eae8:	f00e 010f 	and.w	r1, lr, #15
 800eaec:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800eaf0:	2a39      	cmp	r2, #57	; 0x39
 800eaf2:	bf88      	it	hi
 800eaf4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800eaf8:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 800eafc:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 800eb00:	f240 8109 	bls.w	800ed16 <dir_register+0x56e>
		ns[i--] = c;
 800eb04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800eb08:	f105 0123 	add.w	r1, r5, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	e006      	b.n	800eb1e <dir_register+0x376>
 800eb10:	4ec4ec4f 	.word	0x4ec4ec4f
 800eb14:	00011021 	.word	0x00011021
 800eb18:	3201      	adds	r2, #1
 800eb1a:	4562      	cmp	r2, ip
 800eb1c:	d003      	beq.n	800eb26 <dir_register+0x37e>
 800eb1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	d1f8      	bne.n	800eb18 <dir_register+0x370>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb26:	f1bc 0f07 	cmp.w	ip, #7
 800eb2a:	d91c      	bls.n	800eb66 <dir_register+0x3be>
 800eb2c:	1c50      	adds	r0, r2, #1
 800eb2e:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800eb32:	2807      	cmp	r0, #7
 800eb34:	d809      	bhi.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb36:	1c42      	adds	r2, r0, #1
 800eb38:	2120      	movs	r1, #32
 800eb3a:	2a08      	cmp	r2, #8
 800eb3c:	f1c0 0208 	rsb	r2, r0, #8
 800eb40:	4438      	add	r0, r7
 800eb42:	bf88      	it	hi
 800eb44:	2201      	movhi	r2, #1
 800eb46:	f00a fc0b 	bl	8019360 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f7ff f910 	bl	800dd70 <dir_find>
			if (res != FR_OK) break;
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d17d      	bne.n	800ec50 <dir_register+0x4a8>
		for (n = 1; n < 100; n++) {
 800eb54:	f10b 0b01 	add.w	fp, fp, #1
 800eb58:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 800eb5c:	f47f aebe 	bne.w	800e8dc <dir_register+0x134>
 800eb60:	e091      	b.n	800ec86 <dir_register+0x4de>
 800eb62:	46de      	mov	lr, fp
 800eb64:	e765      	b.n	800ea32 <dir_register+0x28a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb66:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 800eb6a:	f10c 0c01 	add.w	ip, ip, #1
 800eb6e:	eb0d 0103 	add.w	r1, sp, r3
 800eb72:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800eb76:	54b9      	strb	r1, [r7, r2]
 800eb78:	3201      	adds	r2, #1
	} while (j < 8);
 800eb7a:	2a07      	cmp	r2, #7
 800eb7c:	d8e5      	bhi.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb7e:	f1bc 0f08 	cmp.w	ip, #8
 800eb82:	f000 8085 	beq.w	800ec90 <dir_register+0x4e8>
 800eb86:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 800eb8a:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb8c:	f102 0001 	add.w	r0, r2, #1
 800eb90:	eb0d 0103 	add.w	r1, sp, r3
 800eb94:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800eb98:	54b9      	strb	r1, [r7, r2]
 800eb9a:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 800eb9e:	d0d4      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eba0:	2908      	cmp	r1, #8
 800eba2:	d07d      	beq.n	800eca0 <dir_register+0x4f8>
 800eba4:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 800eba8:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebaa:	eb0d 0103 	add.w	r1, sp, r3
 800ebae:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ebb2:	5439      	strb	r1, [r7, r0]
 800ebb4:	f10c 0102 	add.w	r1, ip, #2
 800ebb8:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800ebbc:	d0c5      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebbe:	2908      	cmp	r1, #8
 800ebc0:	d076      	beq.n	800ecb0 <dir_register+0x508>
 800ebc2:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 800ebc6:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebc8:	eb0d 0103 	add.w	r1, sp, r3
 800ebcc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ebd0:	5439      	strb	r1, [r7, r0]
 800ebd2:	f10c 0103 	add.w	r1, ip, #3
 800ebd6:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800ebda:	d0b6      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebdc:	2908      	cmp	r1, #8
 800ebde:	d06f      	beq.n	800ecc0 <dir_register+0x518>
 800ebe0:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 800ebe4:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebe6:	eb0d 0103 	add.w	r1, sp, r3
 800ebea:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ebee:	5439      	strb	r1, [r7, r0]
 800ebf0:	f10c 0104 	add.w	r1, ip, #4
 800ebf4:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800ebf8:	d0a7      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ebfa:	2908      	cmp	r1, #8
 800ebfc:	d068      	beq.n	800ecd0 <dir_register+0x528>
 800ebfe:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 800ec02:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec04:	eb0d 0103 	add.w	r1, sp, r3
 800ec08:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ec0c:	5439      	strb	r1, [r7, r0]
 800ec0e:	f10c 0105 	add.w	r1, ip, #5
 800ec12:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800ec16:	d098      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec18:	2908      	cmp	r1, #8
 800ec1a:	d061      	beq.n	800ece0 <dir_register+0x538>
 800ec1c:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 800ec20:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec22:	eb0d 0103 	add.w	r1, sp, r3
 800ec26:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ec2a:	5439      	strb	r1, [r7, r0]
 800ec2c:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 800ec30:	d08b      	beq.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec32:	f1bc 0f01 	cmp.w	ip, #1
 800ec36:	d15b      	bne.n	800ecf0 <dir_register+0x548>
 800ec38:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 800ec3c:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec3e:	547a      	strb	r2, [r7, r1]
	} while (j < 8);
 800ec40:	d183      	bne.n	800eb4a <dir_register+0x3a2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ec42:	4628      	mov	r0, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec44:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ec48:	f7ff f892 	bl	800dd70 <dir_find>
			if (res != FR_OK) break;
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d081      	beq.n	800eb54 <dir_register+0x3ac>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ec50:	2804      	cmp	r0, #4
 800ec52:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ec56:	4606      	mov	r6, r0
 800ec58:	f47f ae29 	bne.w	800e8ae <dir_register+0x106>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ec5c:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 800ec5e:	682f      	ldr	r7, [r5, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ec60:	f013 0402 	ands.w	r4, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ec64:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ec68:	f47f adc7 	bne.w	800e7fa <dir_register+0x52>
	res = dir_sdi(dp, 0);
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f7fe ff36 	bl	800dae0 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ec74:	f04f 0901 	mov.w	r9, #1
	if (res == FR_OK) {
 800ec78:	4606      	mov	r6, r0
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	f43f adcd 	beq.w	800e81a <dir_register+0x72>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ec80:	2e04      	cmp	r6, #4
 800ec82:	f47f ae14 	bne.w	800e8ae <dir_register+0x106>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ec86:	2607      	movs	r6, #7
}
 800ec88:	4630      	mov	r0, r6
 800ec8a:	b00b      	add	sp, #44	; 0x2c
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 800ec90:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ec92:	f102 0001 	add.w	r0, r2, #1
 800ec96:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800ec9a:	f47f af4c 	bne.w	800eb36 <dir_register+0x38e>
 800ec9e:	e754      	b.n	800eb4a <dir_register+0x3a2>
 800eca0:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eca2:	f807 9000 	strb.w	r9, [r7, r0]
 800eca6:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800ecaa:	f47f af44 	bne.w	800eb36 <dir_register+0x38e>
 800ecae:	e74c      	b.n	800eb4a <dir_register+0x3a2>
 800ecb0:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ecb2:	f807 9000 	strb.w	r9, [r7, r0]
 800ecb6:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800ecba:	f47f af3c 	bne.w	800eb36 <dir_register+0x38e>
 800ecbe:	e744      	b.n	800eb4a <dir_register+0x3a2>
 800ecc0:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ecc2:	f807 9000 	strb.w	r9, [r7, r0]
 800ecc6:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800ecca:	f47f af34 	bne.w	800eb36 <dir_register+0x38e>
 800ecce:	e73c      	b.n	800eb4a <dir_register+0x3a2>
 800ecd0:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ecd2:	f807 9000 	strb.w	r9, [r7, r0]
 800ecd6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800ecda:	f47f af2c 	bne.w	800eb36 <dir_register+0x38e>
 800ecde:	e734      	b.n	800eb4a <dir_register+0x3a2>
 800ece0:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ece2:	f807 9000 	strb.w	r9, [r7, r0]
 800ece6:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 800ecea:	f47f af24 	bne.w	800eb36 <dir_register+0x38e>
 800ecee:	e72c      	b.n	800eb4a <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ecf0:	f807 9001 	strb.w	r9, [r7, r1]
	} while (j < 8);
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	f47f af28 	bne.w	800eb4a <dir_register+0x3a2>
 800ecfa:	2007      	movs	r0, #7
 800ecfc:	e71b      	b.n	800eb36 <dir_register+0x38e>
	ns[i] = '~';
 800ecfe:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed00:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 800ed04:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed08:	e6fe      	b.n	800eb08 <dir_register+0x360>
	ns[i] = '~';
 800ed0a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed0c:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 800ed10:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed14:	e6f8      	b.n	800eb08 <dir_register+0x360>
	ns[i] = '~';
 800ed16:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed18:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800ed1c:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed20:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800ed24:	4662      	mov	r2, ip
 800ed26:	e72e      	b.n	800eb86 <dir_register+0x3de>
	ns[i] = '~';
 800ed28:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed2a:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 800ed2e:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed32:	e6e9      	b.n	800eb08 <dir_register+0x360>
	ns[i] = '~';
 800ed34:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed36:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 800ed3a:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed3e:	e6e3      	b.n	800eb08 <dir_register+0x360>
	ns[i] = '~';
 800ed40:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed42:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 800ed46:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed4a:	e6dd      	b.n	800eb08 <dir_register+0x360>
	ns[i] = '~';
 800ed4c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ed4e:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800ed52:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed56:	e6d7      	b.n	800eb08 <dir_register+0x360>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ed58:	2606      	movs	r6, #6
}
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	b00b      	add	sp, #44	; 0x2c
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ed62:	469b      	mov	fp, r3
 800ed64:	e53a      	b.n	800e7dc <dir_register+0x34>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed66:	6969      	ldr	r1, [r5, #20]
 800ed68:	4628      	mov	r0, r5
 800ed6a:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800ed6e:	f7fe feb7 	bl	800dae0 <dir_sdi>
		if (res == FR_OK) {
 800ed72:	4606      	mov	r6, r0
 800ed74:	2800      	cmp	r0, #0
 800ed76:	f47f ad9a 	bne.w	800e8ae <dir_register+0x106>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ed7a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ed7e:	f04f 080f 	mov.w	r8, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed82:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 800ed86:	f64f 7bff 	movw	fp, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ed8a:	01d3      	lsls	r3, r2, #7
 800ed8c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800ed90:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800ed94:	4413      	add	r3, r2
 800ed96:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800ed9a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800ed9e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800eda2:	fa53 f282 	uxtab	r2, r3, r2
 800eda6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800edaa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800edae:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800edb2:	fa52 f383 	uxtab	r3, r2, r3
 800edb6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800edba:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800edbe:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800edc2:	fa53 f282 	uxtab	r2, r3, r2
 800edc6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800edca:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800edce:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800edd2:	fa52 f383 	uxtab	r3, r2, r3
 800edd6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800edda:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800edde:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800ede2:	fa53 f282 	uxtab	r2, r3, r2
 800ede6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800edea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800edee:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800edf2:	fa52 f383 	uxtab	r3, r2, r3
 800edf6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800edfa:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800edfe:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ee02:	fa53 f282 	uxtab	r2, r3, r2
 800ee06:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800ee0a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800ee0e:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800ee12:	fa52 f383 	uxtab	r3, r2, r3
 800ee16:	f3c3 0746 	ubfx	r7, r3, #1, #7
 800ee1a:	ea47 17c3 	orr.w	r7, r7, r3, lsl #7
 800ee1e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800ee22:	fa53 f787 	uxtab	r7, r3, r7
 800ee26:	b2ff      	uxtb	r7, r7
	} while (--n);
 800ee28:	e028      	b.n	800ee7c <dir_register+0x6d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800ee2a:	f8a3 b003 	strh.w	fp, [r3, #3]
 800ee2e:	f8a3 b005 	strh.w	fp, [r3, #5]
 800ee32:	f8a3 b007 	strh.w	fp, [r3, #7]
 800ee36:	f8a3 b009 	strh.w	fp, [r3, #9]
 800ee3a:	f8a3 b00e 	strh.w	fp, [r3, #14]
 800ee3e:	f8a3 b010 	strh.w	fp, [r3, #16]
 800ee42:	f8a3 b012 	strh.w	fp, [r3, #18]
 800ee46:	f8a3 b014 	strh.w	fp, [r3, #20]
 800ee4a:	f8a3 b016 	strh.w	fp, [r3, #22]
 800ee4e:	f8a3 b018 	strh.w	fp, [r3, #24]
 800ee52:	f8a3 b01c 	strh.w	fp, [r3, #28]
 800ee56:	f8a3 b01e 	strh.w	fp, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ee5a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ee5e:	701e      	strb	r6, [r3, #0]
				fs->wflag = 1;
 800ee60:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800ee62:	2100      	movs	r1, #0
 800ee64:	4628      	mov	r0, r5
				fs->wflag = 1;
 800ee66:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ee6a:	f7ff fbbb 	bl	800e5e4 <dir_next>
			} while (res == FR_OK && --nent);
 800ee6e:	4606      	mov	r6, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f47f ad1c 	bne.w	800e8ae <dir_register+0x106>
 800ee76:	3c01      	subs	r4, #1
 800ee78:	f43f acf1 	beq.w	800e85e <dir_register+0xb6>
				res = move_window(fs, dp->sect);
 800ee7c:	69e9      	ldr	r1, [r5, #28]
 800ee7e:	4650      	mov	r0, sl
 800ee80:	f7fe f87a 	bl	800cf78 <move_window>
 800ee84:	4606      	mov	r6, r0
				if (res != FR_OK) break;
 800ee86:	2800      	cmp	r0, #0
 800ee88:	f47f ad11 	bne.w	800e8ae <dir_register+0x106>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ee8c:	b2e6      	uxtb	r6, r4
 800ee8e:	6a2b      	ldr	r3, [r5, #32]
 800ee90:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee94:	1e72      	subs	r2, r6, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ee96:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee98:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee9a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee9e:	f8a3 800b 	strh.w	r8, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800eea2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eea6:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800eeaa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eeae:	7058      	strb	r0, [r3, #1]
 800eeb0:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eeb2:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
 800eeb6:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eeb8:	0050      	lsls	r0, r2, #1
 800eeba:	45cc      	cmp	ip, r9
 800eebc:	d8b5      	bhi.n	800ee2a <dir_register+0x682>
 800eebe:	3201      	adds	r2, #1
 800eec0:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800eec4:	0052      	lsls	r2, r2, #1
 800eec6:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eeca:	f883 c003 	strb.w	ip, [r3, #3]
 800eece:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eed2:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eed6:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eeda:	45ce      	cmp	lr, r9
 800eedc:	d8a7      	bhi.n	800ee2e <dir_register+0x686>
 800eede:	440a      	add	r2, r1
 800eee0:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800eee4:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eee8:	f883 c005 	strb.w	ip, [r3, #5]
 800eeec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eef0:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eef4:	f883 c006 	strb.w	ip, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eef8:	45ce      	cmp	lr, r9
 800eefa:	d89a      	bhi.n	800ee32 <dir_register+0x68a>
 800eefc:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 800ef00:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef04:	f883 c007 	strb.w	ip, [r3, #7]
 800ef08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef0c:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ef10:	f883 c008 	strb.w	ip, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef14:	45ce      	cmp	lr, r9
 800ef16:	d88e      	bhi.n	800ee36 <dir_register+0x68e>
 800ef18:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 800ef1c:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef20:	f883 c009 	strb.w	ip, [r3, #9]
 800ef24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef28:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ef2c:	f883 c00a 	strb.w	ip, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef30:	45ce      	cmp	lr, r9
 800ef32:	d882      	bhi.n	800ee3a <dir_register+0x692>
 800ef34:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800ef38:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef3c:	f883 c00e 	strb.w	ip, [r3, #14]
 800ef40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef44:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ef48:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef4c:	45ce      	cmp	lr, r9
 800ef4e:	f63f af76 	bhi.w	800ee3e <dir_register+0x696>
 800ef52:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 800ef56:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef5a:	f883 c010 	strb.w	ip, [r3, #16]
 800ef5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef62:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ef66:	f883 c011 	strb.w	ip, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef6a:	45ce      	cmp	lr, r9
 800ef6c:	f63f af69 	bhi.w	800ee42 <dir_register+0x69a>
 800ef70:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
 800ef74:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef78:	f883 c012 	strb.w	ip, [r3, #18]
 800ef7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef80:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ef84:	f883 c013 	strb.w	ip, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef88:	45ce      	cmp	lr, r9
 800ef8a:	f63f af5c 	bhi.w	800ee46 <dir_register+0x69e>
 800ef8e:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 800ef92:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ef96:	f883 c014 	strb.w	ip, [r3, #20]
 800ef9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef9e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800efa2:	f883 c015 	strb.w	ip, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efa6:	45ce      	cmp	lr, r9
 800efa8:	f63f af4f 	bhi.w	800ee4a <dir_register+0x6a2>
 800efac:	f8b2 c010 	ldrh.w	ip, [r2, #16]
 800efb0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800efb4:	f883 c016 	strb.w	ip, [r3, #22]
 800efb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efbc:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800efc0:	f883 c017 	strb.w	ip, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efc4:	45ce      	cmp	lr, r9
 800efc6:	f63f af42 	bhi.w	800ee4e <dir_register+0x6a6>
 800efca:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 800efce:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800efd2:	f883 c018 	strb.w	ip, [r3, #24]
 800efd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efda:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800efde:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efe2:	45ce      	cmp	lr, r9
 800efe4:	f63f af35 	bhi.w	800ee52 <dir_register+0x6aa>
 800efe8:	f8b2 c014 	ldrh.w	ip, [r2, #20]
 800efec:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eff0:	f883 c01c 	strb.w	ip, [r3, #28]
 800eff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eff8:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800effc:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f000:	45ce      	cmp	lr, r9
 800f002:	f63f af28 	bhi.w	800ee56 <dir_register+0x6ae>
 800f006:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f008:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f00c:	779a      	strb	r2, [r3, #30]
 800f00e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f010:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f012:	fa1f f28c 	uxth.w	r2, ip
 800f016:	454a      	cmp	r2, r9
 800f018:	f63f af1f 	bhi.w	800ee5a <dir_register+0x6b2>
 800f01c:	180a      	adds	r2, r1, r0
 800f01e:	8b52      	ldrh	r2, [r2, #26]
 800f020:	2a00      	cmp	r2, #0
 800f022:	f47f af1c 	bne.w	800ee5e <dir_register+0x6b6>
 800f026:	e718      	b.n	800ee5a <dir_register+0x6b2>
			*d++ = *s++;
 800f028:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800f032:	705a      	strb	r2, [r3, #1]
 800f034:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800f038:	709a      	strb	r2, [r3, #2]
 800f03a:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800f03e:	70da      	strb	r2, [r3, #3]
 800f040:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800f044:	711a      	strb	r2, [r3, #4]
 800f046:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f04a:	715a      	strb	r2, [r3, #5]
 800f04c:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800f050:	719a      	strb	r2, [r3, #6]
 800f052:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800f056:	71da      	strb	r2, [r3, #7]
 800f058:	e417      	b.n	800e88a <dir_register+0xe2>
 800f05a:	bf00      	nop

0800f05c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f05c:	b510      	push	{r4, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800f064:	b1a1      	cbz	r1, 800f090 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f066:	f891 c000 	ldrb.w	ip, [r1]
 800f06a:	f1bc 0f1f 	cmp.w	ip, #31
 800f06e:	d912      	bls.n	800f096 <f_mount+0x3a>
 800f070:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 800f074:	d00f      	beq.n	800f096 <f_mount+0x3a>
 800f076:	4608      	mov	r0, r1
 800f078:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f07c:	2b1f      	cmp	r3, #31
 800f07e:	d90c      	bls.n	800f09a <f_mount+0x3e>
 800f080:	2b3a      	cmp	r3, #58	; 0x3a
 800f082:	d1f9      	bne.n	800f078 <f_mount+0x1c>
			i = *tp++ - '0';
 800f084:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f086:	4288      	cmp	r0, r1
 800f088:	d102      	bne.n	800f090 <f_mount+0x34>
 800f08a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f08e:	d006      	beq.n	800f09e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f090:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f092:	b002      	add	sp, #8
 800f094:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f096:	4663      	mov	r3, ip
 800f098:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f09a:	2b3a      	cmp	r3, #58	; 0x3a
 800f09c:	d0f2      	beq.n	800f084 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f09e:	4913      	ldr	r1, [pc, #76]	; (800f0ec <f_mount+0x90>)
 800f0a0:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800f0a2:	b143      	cbz	r3, 800f0b6 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f0a4:	4812      	ldr	r0, [pc, #72]	; (800f0f0 <f_mount+0x94>)
 800f0a6:	6804      	ldr	r4, [r0, #0]
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d019      	beq.n	800f0e0 <f_mount+0x84>
 800f0ac:	6904      	ldr	r4, [r0, #16]
 800f0ae:	429c      	cmp	r4, r3
 800f0b0:	d013      	beq.n	800f0da <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	b15b      	cbz	r3, 800f0d2 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0ba:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0bc:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800f0be:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800f0c0:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0c2:	d1e6      	bne.n	800f092 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	a901      	add	r1, sp, #4
 800f0c8:	4668      	mov	r0, sp
 800f0ca:	f7fd ff93 	bl	800cff4 <find_volume>
}
 800f0ce:	b002      	add	sp, #8
 800f0d0:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0d2:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800f0d4:	600b      	str	r3, [r1, #0]
}
 800f0d6:	b002      	add	sp, #8
 800f0d8:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f0da:	2400      	movs	r4, #0
 800f0dc:	6104      	str	r4, [r0, #16]
 800f0de:	e7e8      	b.n	800f0b2 <f_mount+0x56>
 800f0e0:	2400      	movs	r4, #0
 800f0e2:	6004      	str	r4, [r0, #0]
 800f0e4:	6904      	ldr	r4, [r0, #16]
 800f0e6:	429c      	cmp	r4, r3
 800f0e8:	d1e3      	bne.n	800f0b2 <f_mount+0x56>
 800f0ea:	e7f6      	b.n	800f0da <f_mount+0x7e>
 800f0ec:	2001da38 	.word	0x2001da38
 800f0f0:	2001da3c 	.word	0x2001da3c

0800f0f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	b092      	sub	sp, #72	; 0x48
 800f0fa:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	f000 8096 	beq.w	800f22e <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f102:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800f106:	4616      	mov	r6, r2
 800f108:	4604      	mov	r4, r0
 800f10a:	a903      	add	r1, sp, #12
 800f10c:	a801      	add	r0, sp, #4
 800f10e:	463a      	mov	r2, r7
 800f110:	f7fd ff70 	bl	800cff4 <find_volume>
	if (res == FR_OK) {
 800f114:	4605      	mov	r5, r0
 800f116:	b128      	cbz	r0, 800f124 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f118:	2300      	movs	r3, #0
 800f11a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f11c:	4628      	mov	r0, r5
 800f11e:	b012      	add	sp, #72	; 0x48
 800f120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800f124:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f128:	a804      	add	r0, sp, #16
 800f12a:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f12c:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f130:	f7fe ffca 	bl	800e0c8 <follow_path>
		if (res == FR_OK) {
 800f134:	b9f0      	cbnz	r0, 800f174 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f136:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	db7e      	blt.n	800f23c <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
 800f13e:	4b9e      	ldr	r3, [pc, #632]	; (800f3b8 <f_open+0x2c4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f140:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f144:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800f146:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f14a:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
 800f14c:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800f150:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800f154:	f1b9 0f00 	cmp.w	r9, #0
 800f158:	f000 80d9 	beq.w	800f30e <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f15c:	4591      	cmp	r9, r2
 800f15e:	d06f      	beq.n	800f240 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
 800f160:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800f164:	f1b9 0f00 	cmp.w	r9, #0
 800f168:	d071      	beq.n	800f24e <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f16a:	454a      	cmp	r2, r9
 800f16c:	f000 80e8 	beq.w	800f340 <f_open+0x24c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f170:	2512      	movs	r5, #18
 800f172:	e7d1      	b.n	800f118 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f174:	f016 0f1c 	tst.w	r6, #28
 800f178:	d05e      	beq.n	800f238 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f17a:	2804      	cmp	r0, #4
 800f17c:	d15c      	bne.n	800f238 <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f17e:	4b8e      	ldr	r3, [pc, #568]	; (800f3b8 <f_open+0x2c4>)
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	b112      	cbz	r2, 800f18a <f_open+0x96>
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1f2      	bne.n	800f170 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f18a:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f18c:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f190:	f7ff fb0a 	bl	800e7a8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f194:	2800      	cmp	r0, #0
 800f196:	d14f      	bne.n	800f238 <f_open+0x144>
				dw = GET_FATTIME();
 800f198:	f7fd fc3a 	bl	800ca10 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f19c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f19e:	0a02      	lsrs	r2, r0, #8
 800f1a0:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f1a6:	75da      	strb	r2, [r3, #23]
 800f1a8:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f1aa:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1ac:	0e00      	lsrs	r0, r0, #24
 800f1ae:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f1b0:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 800f1b2:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1b6:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 800f1b8:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800f1be:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f1c0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f1c2:	d102      	bne.n	800f1ca <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f1c4:	8a9a      	ldrh	r2, [r3, #20]
 800f1c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f1ce:	f898 1000 	ldrb.w	r1, [r8]
 800f1d2:	2903      	cmp	r1, #3
 800f1d4:	d100      	bne.n	800f1d8 <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d6:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800f1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f1da:	2200      	movs	r2, #0
 800f1dc:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800f1e4:	b186      	cbz	r6, 800f208 <f_open+0x114>
						dw = fs->winsect;
 800f1e6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800f1ee:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800f1f0:	f7ff f8f6 	bl	800e3e0 <remove_chain>
						if (res == FR_OK) {
 800f1f4:	9b00      	ldr	r3, [sp, #0]
 800f1f6:	b9f8      	cbnz	r0, 800f238 <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f1f8:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	f7fd febb 	bl	800cf78 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f202:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800f206:	b9b8      	cbnz	r0, 800f238 <f_open+0x144>
				mode |= FA_MODIFIED;
 800f208:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f20c:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f210:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f214:	3900      	subs	r1, #0
 800f216:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f218:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f21a:	bf18      	it	ne
 800f21c:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 800f21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f220:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f222:	f7fd fd1b 	bl	800cc5c <inc_lock>
 800f226:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f228:	b9e8      	cbnz	r0, 800f266 <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f22a:	2502      	movs	r5, #2
 800f22c:	e774      	b.n	800f118 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800f22e:	2509      	movs	r5, #9
}
 800f230:	4628      	mov	r0, r5
 800f232:	b012      	add	sp, #72	; 0x48
 800f234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f238:	4605      	mov	r5, r0
 800f23a:	e76d      	b.n	800f118 <f_open+0x24>
				res = FR_INVALID_NAME;
 800f23c:	2506      	movs	r5, #6
 800f23e:	e76b      	b.n	800f118 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	4562      	cmp	r2, ip
 800f244:	f000 8085 	beq.w	800f352 <f_open+0x25e>
		if (Files[i].fs) {	/* Existing entry */
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	d18d      	bne.n	800f16a <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f24e:	f016 0f1c 	tst.w	r6, #28
 800f252:	d049      	beq.n	800f2e8 <f_open+0x1f4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f254:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f258:	f013 0f11 	tst.w	r3, #17
 800f25c:	d155      	bne.n	800f30a <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f25e:	0773      	lsls	r3, r6, #29
 800f260:	d550      	bpl.n	800f304 <f_open+0x210>
 800f262:	2508      	movs	r5, #8
 800f264:	e758      	b.n	800f118 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 800f266:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800f26c:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f26e:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f270:	d102      	bne.n	800f278 <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f272:	8a9a      	ldrh	r2, [r3, #20]
 800f274:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f278:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f27a:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800f27c:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f280:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f284:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 800f288:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f28c:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 800f290:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f292:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 800f294:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 800f298:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 800f29a:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 800f29c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f29e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f2a0:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800f2a2:	f00a f85d 	bl	8019360 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f2a6:	06bf      	lsls	r7, r7, #26
 800f2a8:	f57f af38 	bpl.w	800f11c <f_open+0x28>
 800f2ac:	f1b9 0f00 	cmp.w	r9, #0
 800f2b0:	f43f af34 	beq.w	800f11c <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f2b4:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f2b8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2bc:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f2c0:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2c4:	d804      	bhi.n	800f2d0 <f_open+0x1dc>
 800f2c6:	e04a      	b.n	800f35e <f_open+0x26a>
 800f2c8:	1c70      	adds	r0, r6, #1
 800f2ca:	d06c      	beq.n	800f3a6 <f_open+0x2b2>
 800f2cc:	454f      	cmp	r7, r9
 800f2ce:	d26a      	bcs.n	800f3a6 <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	6820      	ldr	r0, [r4, #0]
 800f2d4:	f7fe f886 	bl	800d3e4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800f2d8:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2da:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800f2de:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f2e0:	d8f2      	bhi.n	800f2c8 <f_open+0x1d4>
 800f2e2:	2502      	movs	r5, #2
				fp->clust = clst;
 800f2e4:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f2e6:	e717      	b.n	800f118 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f2e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f2ec:	06da      	lsls	r2, r3, #27
 800f2ee:	d425      	bmi.n	800f33c <f_open+0x248>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f2f0:	07b2      	lsls	r2, r6, #30
 800f2f2:	d501      	bpl.n	800f2f8 <f_open+0x204>
 800f2f4:	07db      	lsls	r3, r3, #31
 800f2f6:	d408      	bmi.n	800f30a <f_open+0x216>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f2f8:	f006 0608 	and.w	r6, r6, #8
 800f2fc:	2e00      	cmp	r6, #0
 800f2fe:	d183      	bne.n	800f208 <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f300:	4601      	mov	r1, r0
 800f302:	e785      	b.n	800f210 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f304:	0730      	lsls	r0, r6, #28
 800f306:	d583      	bpl.n	800f210 <f_open+0x11c>
 800f308:	e746      	b.n	800f198 <f_open+0xa4>
						res = FR_DENIED;
 800f30a:	2507      	movs	r5, #7
 800f30c:	e704      	b.n	800f118 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800f30e:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800f312:	f1b9 0f00 	cmp.w	r9, #0
 800f316:	d09a      	beq.n	800f24e <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f318:	4591      	cmp	r9, r2
 800f31a:	d198      	bne.n	800f24e <f_open+0x15a>
 800f31c:	695a      	ldr	r2, [r3, #20]
 800f31e:	4562      	cmp	r2, ip
 800f320:	d195      	bne.n	800f24e <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
 800f322:	699a      	ldr	r2, [r3, #24]
 800f324:	4572      	cmp	r2, lr
 800f326:	d192      	bne.n	800f24e <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f328:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f32a:	b928      	cbnz	r0, 800f338 <f_open+0x244>
 800f32c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f330:	899b      	ldrh	r3, [r3, #12]
 800f332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f336:	d18a      	bne.n	800f24e <f_open+0x15a>
 800f338:	2510      	movs	r5, #16
 800f33a:	e6ed      	b.n	800f118 <f_open+0x24>
					res = FR_NO_FILE;
 800f33c:	2504      	movs	r5, #4
 800f33e:	e6eb      	b.n	800f118 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f340:	695a      	ldr	r2, [r3, #20]
 800f342:	4562      	cmp	r2, ip
 800f344:	f47f af14 	bne.w	800f170 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800f348:	699a      	ldr	r2, [r3, #24]
 800f34a:	4572      	cmp	r2, lr
 800f34c:	f47f af10 	bne.w	800f170 <f_open+0x7c>
 800f350:	e7ea      	b.n	800f328 <f_open+0x234>
 800f352:	689a      	ldr	r2, [r3, #8]
 800f354:	4572      	cmp	r2, lr
 800f356:	f47f af77 	bne.w	800f248 <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f35a:	462a      	mov	r2, r5
 800f35c:	e7e5      	b.n	800f32a <f_open+0x236>
				fp->clust = clst;
 800f35e:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f360:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800f364:	2b00      	cmp	r3, #0
 800f366:	f43f aed9 	beq.w	800f11c <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f36a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800f36e:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f370:	3b02      	subs	r3, #2
 800f372:	429e      	cmp	r6, r3
 800f374:	f4bf af59 	bcs.w	800f22a <f_open+0x136>
	return clst * fs->csize + fs->database;
 800f378:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800f37c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800f380:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f384:	2a00      	cmp	r2, #0
 800f386:	f43f af50 	beq.w	800f22a <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f38a:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f38e:	4651      	mov	r1, sl
 800f390:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f392:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f394:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f398:	f7fd fc34 	bl	800cc04 <disk_read>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f43f aebd 	beq.w	800f11c <f_open+0x28>
 800f3a2:	2501      	movs	r5, #1
 800f3a4:	e6b8      	b.n	800f118 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3a6:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 800f3a8:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800f3aa:	bf0c      	ite	eq
 800f3ac:	2301      	moveq	r3, #1
 800f3ae:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3b0:	d1d6      	bne.n	800f360 <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3b2:	461d      	mov	r5, r3
 800f3b4:	e6b0      	b.n	800f118 <f_open+0x24>
 800f3b6:	bf00      	nop
 800f3b8:	2001da3c 	.word	0x2001da3c

0800f3bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800f3c2:	2300      	movs	r3, #0
{
 800f3c4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800f3c6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f3c8:	b150      	cbz	r0, 800f3e0 <f_read+0x24>
 800f3ca:	6803      	ldr	r3, [r0, #0]
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	b13b      	cbz	r3, 800f3e0 <f_read+0x24>
 800f3d0:	4691      	mov	r9, r2
 800f3d2:	781a      	ldrb	r2, [r3, #0]
 800f3d4:	b122      	cbz	r2, 800f3e0 <f_read+0x24>
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	88da      	ldrh	r2, [r3, #6]
 800f3da:	8881      	ldrh	r1, [r0, #4]
 800f3dc:	4291      	cmp	r1, r2
 800f3de:	d005      	beq.n	800f3ec <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f3e0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	b005      	add	sp, #20
 800f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f3ec:	7858      	ldrb	r0, [r3, #1]
 800f3ee:	f7fd fbed 	bl	800cbcc <disk_status>
 800f3f2:	07c2      	lsls	r2, r0, #31
 800f3f4:	d4f4      	bmi.n	800f3e0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f3f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f3fa:	f1b8 0f00 	cmp.w	r8, #0
 800f3fe:	d1f1      	bne.n	800f3e4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f400:	7d23      	ldrb	r3, [r4, #20]
 800f402:	f013 0301 	ands.w	r3, r3, #1
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	f000 80da 	beq.w	800f5c0 <f_read+0x204>
	remain = fp->obj.objsize - fp->fptr;
 800f40c:	69a3      	ldr	r3, [r4, #24]
 800f40e:	68e7      	ldr	r7, [r4, #12]
 800f410:	1aff      	subs	r7, r7, r3
 800f412:	454f      	cmp	r7, r9
 800f414:	bf28      	it	cs
 800f416:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f418:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	d0e1      	beq.n	800f3e4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f420:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f424:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f428:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f42c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f430:	2a00      	cmp	r2, #0
 800f432:	d142      	bne.n	800f4ba <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f434:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800f438:	0a59      	lsrs	r1, r3, #9
 800f43a:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f43c:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 800f440:	d06f      	beq.n	800f522 <f_read+0x166>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f442:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f444:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800f448:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f44a:	3b02      	subs	r3, #2
 800f44c:	4298      	cmp	r0, r3
 800f44e:	d275      	bcs.n	800f53c <f_read+0x180>
	return clst * fs->csize + fs->database;
 800f450:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f454:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800f458:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d06d      	beq.n	800f53c <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f460:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800f464:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f468:	d36f      	bcc.n	800f54a <f_read+0x18e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f46a:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f46e:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f472:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f474:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f478:	bf88      	it	hi
 800f47a:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f47e:	465a      	mov	r2, fp
 800f480:	4629      	mov	r1, r5
 800f482:	4643      	mov	r3, r8
 800f484:	f7fd fbbe 	bl	800cc04 <disk_read>
 800f488:	2800      	cmp	r0, #0
 800f48a:	f040 8087 	bne.w	800f59c <f_read+0x1e0>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f48e:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f492:	2a00      	cmp	r2, #0
 800f494:	f2c0 80ab 	blt.w	800f5ee <f_read+0x232>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f498:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f49c:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f49e:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f4a0:	440d      	add	r5, r1
 800f4a2:	440b      	add	r3, r1
 800f4a4:	61a3      	str	r3, [r4, #24]
 800f4a6:	6833      	ldr	r3, [r6, #0]
 800f4a8:	440b      	add	r3, r1
 800f4aa:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f4ac:	f000 80b5 	beq.w	800f61a <f_read+0x25e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f4b0:	69a3      	ldr	r3, [r4, #24]
 800f4b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	d0bc      	beq.n	800f434 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f4ba:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f4bc:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f4c0:	eb0a 0302 	add.w	r3, sl, r2
 800f4c4:	4450      	add	r0, sl
 800f4c6:	42b9      	cmp	r1, r7
 800f4c8:	eba5 0000 	sub.w	r0, r5, r0
 800f4cc:	bf28      	it	cs
 800f4ce:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4d0:	2802      	cmp	r0, #2
 800f4d2:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800f4d6:	d969      	bls.n	800f5ac <f_read+0x1f0>
 800f4d8:	f1bb 0f05 	cmp.w	fp, #5
 800f4dc:	d966      	bls.n	800f5ac <f_read+0x1f0>
 800f4de:	f021 0e03 	bic.w	lr, r1, #3
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	449e      	add	lr, r3
			*d++ = *s++;
 800f4e8:	f852 cb04 	ldr.w	ip, [r2], #4
 800f4ec:	4572      	cmp	r2, lr
 800f4ee:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 800f4f2:	d1f9      	bne.n	800f4e8 <f_read+0x12c>
 800f4f4:	f021 0203 	bic.w	r2, r1, #3
 800f4f8:	4291      	cmp	r1, r2
 800f4fa:	eb05 0002 	add.w	r0, r5, r2
 800f4fe:	eb03 0c02 	add.w	ip, r3, r2
 800f502:	d0cb      	beq.n	800f49c <f_read+0xe0>
			*d++ = *s++;
 800f504:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 800f506:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 800f50a:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 800f50c:	d0c6      	beq.n	800f49c <f_read+0xe0>
			*d++ = *s++;
 800f50e:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 800f512:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f516:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 800f518:	d0c0      	beq.n	800f49c <f_read+0xe0>
			*d++ = *s++;
 800f51a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800f51e:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 800f520:	e7bc      	b.n	800f49c <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f522:	bb3b      	cbnz	r3, 800f574 <f_read+0x1b8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f524:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f526:	2801      	cmp	r0, #1
 800f528:	d908      	bls.n	800f53c <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	d036      	beq.n	800f59c <f_read+0x1e0>
				fp->clust = clst;				/* Update current cluster */
 800f52e:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f530:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f532:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f536:	3b02      	subs	r3, #2
 800f538:	4298      	cmp	r0, r3
 800f53a:	d389      	bcc.n	800f450 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f53c:	2302      	movs	r3, #2
 800f53e:	4698      	mov	r8, r3
 800f540:	7563      	strb	r3, [r4, #21]
}
 800f542:	4640      	mov	r0, r8
 800f544:	b005      	add	sp, #20
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f54a:	6a22      	ldr	r2, [r4, #32]
 800f54c:	455a      	cmp	r2, fp
 800f54e:	d00b      	beq.n	800f568 <f_read+0x1ac>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f550:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f554:	2b00      	cmp	r3, #0
 800f556:	db3d      	blt.n	800f5d4 <f_read+0x218>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f558:	2301      	movs	r3, #1
 800f55a:	465a      	mov	r2, fp
 800f55c:	4651      	mov	r1, sl
 800f55e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f562:	f7fd fb4f 	bl	800cc04 <disk_read>
 800f566:	b9c8      	cbnz	r0, 800f59c <f_read+0x1e0>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f568:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f56a:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f56e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f572:	e7a2      	b.n	800f4ba <f_read+0xfe>
					if (fp->cltbl) {
 800f574:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f576:	b330      	cbz	r0, 800f5c6 <f_read+0x20a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f578:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f57a:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f57c:	895b      	ldrh	r3, [r3, #10]
 800f57e:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f582:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f584:	b929      	cbnz	r1, 800f592 <f_read+0x1d6>
 800f586:	e7d9      	b.n	800f53c <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 800f588:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f58a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f58e:	2900      	cmp	r1, #0
 800f590:	d0d4      	beq.n	800f53c <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 800f592:	4299      	cmp	r1, r3
 800f594:	d9f8      	bls.n	800f588 <f_read+0x1cc>
	return cl + *tbl;	/* Return the cluster number */
 800f596:	6840      	ldr	r0, [r0, #4]
 800f598:	4418      	add	r0, r3
 800f59a:	e7c4      	b.n	800f526 <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f59c:	f8dd 8000 	ldr.w	r8, [sp]
 800f5a0:	2301      	movs	r3, #1
}
 800f5a2:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5a4:	7563      	strb	r3, [r4, #21]
}
 800f5a6:	b005      	add	sp, #20
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	1e6a      	subs	r2, r5, #1
 800f5ae:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 800f5b2:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f5b6:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f5b8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f5bc:	d1f9      	bne.n	800f5b2 <f_read+0x1f6>
 800f5be:	e76d      	b.n	800f49c <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f5c0:	f04f 0807 	mov.w	r8, #7
 800f5c4:	e70e      	b.n	800f3e4 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f5c6:	69e1      	ldr	r1, [r4, #28]
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	9203      	str	r2, [sp, #12]
 800f5cc:	f7fd ff0a 	bl	800d3e4 <get_fat.isra.0>
 800f5d0:	9a03      	ldr	r2, [sp, #12]
 800f5d2:	e7a8      	b.n	800f526 <f_read+0x16a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	4651      	mov	r1, sl
 800f5d8:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f5dc:	f7fd fb22 	bl	800cc24 <disk_write>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d1db      	bne.n	800f59c <f_read+0x1e0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f5e4:	7d23      	ldrb	r3, [r4, #20]
 800f5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5ea:	7523      	strb	r3, [r4, #20]
 800f5ec:	e7b4      	b.n	800f558 <f_read+0x19c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f5ee:	6a22      	ldr	r2, [r4, #32]
 800f5f0:	eba2 020b 	sub.w	r2, r2, fp
 800f5f4:	4542      	cmp	r2, r8
 800f5f6:	f4bf af4f 	bcs.w	800f498 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f5fa:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 800f5fe:	9b01      	ldr	r3, [sp, #4]
 800f600:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f602:	1ad0      	subs	r0, r2, r3
 800f604:	2802      	cmp	r0, #2
 800f606:	d90b      	bls.n	800f620 <f_read+0x264>
 800f608:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 800f60c:	f851 3b04 	ldr.w	r3, [r1], #4
 800f610:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f614:	4562      	cmp	r2, ip
 800f616:	d1f9      	bne.n	800f60c <f_read+0x250>
 800f618:	e73e      	b.n	800f498 <f_read+0xdc>
 800f61a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f61e:	e6e1      	b.n	800f3e4 <f_read+0x28>
 800f620:	3a01      	subs	r2, #1
 800f622:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 800f626:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f62a:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f62c:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f630:	d1f9      	bne.n	800f626 <f_read+0x26a>
 800f632:	e731      	b.n	800f498 <f_read+0xdc>

0800f634 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f63a:	2300      	movs	r3, #0
{
 800f63c:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 800f63e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f640:	b150      	cbz	r0, 800f658 <f_write+0x24>
 800f642:	6803      	ldr	r3, [r0, #0]
 800f644:	4604      	mov	r4, r0
 800f646:	b13b      	cbz	r3, 800f658 <f_write+0x24>
 800f648:	4616      	mov	r6, r2
 800f64a:	781a      	ldrb	r2, [r3, #0]
 800f64c:	b122      	cbz	r2, 800f658 <f_write+0x24>
 800f64e:	460d      	mov	r5, r1
 800f650:	88da      	ldrh	r2, [r3, #6]
 800f652:	8881      	ldrh	r1, [r0, #4]
 800f654:	4291      	cmp	r1, r2
 800f656:	d005      	beq.n	800f664 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f658:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f65c:	4640      	mov	r0, r8
 800f65e:	b005      	add	sp, #20
 800f660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f664:	7858      	ldrb	r0, [r3, #1]
 800f666:	f7fd fab1 	bl	800cbcc <disk_status>
 800f66a:	07c1      	lsls	r1, r0, #31
 800f66c:	d4f4      	bmi.n	800f658 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f66e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f672:	f1b8 0f00 	cmp.w	r8, #0
 800f676:	d1f1      	bne.n	800f65c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f678:	7d23      	ldrb	r3, [r4, #20]
 800f67a:	079a      	lsls	r2, r3, #30
 800f67c:	f140 80f6 	bpl.w	800f86c <f_write+0x238>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f680:	69a2      	ldr	r2, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f682:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f686:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f688:	bf28      	it	cs
 800f68a:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	f000 80cb 	beq.w	800f828 <f_write+0x1f4>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f692:	f504 730c 	add.w	r3, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f696:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f69a:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f69c:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d160      	bne.n	800f766 <f_write+0x132>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f6a4:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 800f6a8:	0a53      	lsrs	r3, r2, #9
 800f6aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 800f6ae:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 800f6b2:	d110      	bne.n	800f6d6 <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f6b4:	2a00      	cmp	r2, #0
 800f6b6:	f040 80a0 	bne.w	800f7fa <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f6ba:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	f000 80e0 	beq.w	800f882 <f_write+0x24e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f6c2:	2801      	cmp	r0, #1
 800f6c4:	f000 8087 	beq.w	800f7d6 <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6c8:	1c43      	adds	r3, r0, #1
 800f6ca:	f000 80be 	beq.w	800f84a <f_write+0x216>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6ce:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f6d0:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6d2:	b903      	cbnz	r3, 800f6d6 <f_write+0xa2>
 800f6d4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6d6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f2c0 80a8 	blt.w	800f830 <f_write+0x1fc>
	clst -= 2;
 800f6e0:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f6e2:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 800f6e6:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f6e8:	3a02      	subs	r2, #2
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d273      	bcs.n	800f7d6 <f_write+0x1a2>
	return clst * fs->csize + fs->database;
 800f6ee:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f6f2:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800f6f6:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f6fa:	2a00      	cmp	r2, #0
 800f6fc:	d06b      	beq.n	800f7d6 <f_write+0x1a2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f6fe:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800f702:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f704:	d36e      	bcc.n	800f7e4 <f_write+0x1b0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f706:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f70a:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f70c:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f70e:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f712:	bf88      	it	hi
 800f714:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f718:	4629      	mov	r1, r5
 800f71a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f71e:	f7fd fa81 	bl	800cc24 <disk_write>
 800f722:	2800      	cmp	r0, #0
 800f724:	f040 8091 	bne.w	800f84a <f_write+0x216>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f728:	6a21      	ldr	r1, [r4, #32]
 800f72a:	9a02      	ldr	r2, [sp, #8]
 800f72c:	9b03      	ldr	r3, [sp, #12]
 800f72e:	1a8a      	subs	r2, r1, r2
 800f730:	429a      	cmp	r2, r3
 800f732:	f0c0 80ba 	bcc.w	800f8aa <f_write+0x276>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f736:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800f73a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f73e:	69a3      	ldr	r3, [r4, #24]
 800f740:	4615      	mov	r5, r2
 800f742:	68e2      	ldr	r2, [r4, #12]
 800f744:	4463      	add	r3, ip
 800f746:	429a      	cmp	r2, r3
 800f748:	61a3      	str	r3, [r4, #24]
 800f74a:	bf38      	it	cc
 800f74c:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800f74e:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f752:	60e2      	str	r2, [r4, #12]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	4463      	add	r3, ip
 800f758:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800f75a:	d064      	beq.n	800f826 <f_write+0x1f2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f75c:	69a2      	ldr	r2, [r4, #24]
 800f75e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f762:	2b00      	cmp	r3, #0
 800f764:	d09e      	beq.n	800f6a4 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f766:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
 800f76a:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f76c:	4453      	add	r3, sl
 800f76e:	45b4      	cmp	ip, r6
 800f770:	eba3 0202 	sub.w	r2, r3, r2
 800f774:	bf28      	it	cs
 800f776:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f778:	2a02      	cmp	r2, #2
 800f77a:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800f77e:	d96b      	bls.n	800f858 <f_write+0x224>
 800f780:	f1bb 0f05 	cmp.w	fp, #5
 800f784:	d968      	bls.n	800f858 <f_write+0x224>
 800f786:	f02c 0e03 	bic.w	lr, ip, #3
 800f78a:	461a      	mov	r2, r3
 800f78c:	4629      	mov	r1, r5
 800f78e:	449e      	add	lr, r3
			*d++ = *s++;
 800f790:	f851 0b04 	ldr.w	r0, [r1], #4
 800f794:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f798:	4596      	cmp	lr, r2
 800f79a:	d1f9      	bne.n	800f790 <f_write+0x15c>
 800f79c:	f02c 0103 	bic.w	r1, ip, #3
 800f7a0:	458c      	cmp	ip, r1
 800f7a2:	eb03 0001 	add.w	r0, r3, r1
 800f7a6:	eb05 0201 	add.w	r2, r5, r1
 800f7aa:	d00f      	beq.n	800f7cc <f_write+0x198>
			*d++ = *s++;
 800f7ac:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 800f7b0:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 800f7b4:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 800f7b8:	d006      	beq.n	800f7c8 <f_write+0x194>
			*d++ = *s++;
 800f7ba:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 800f7bc:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f7c0:	7043      	strb	r3, [r0, #1]
 800f7c2:	bf1c      	itt	ne
 800f7c4:	7893      	ldrbne	r3, [r2, #2]
 800f7c6:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 800f7c8:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 800f7cc:	7d23      	ldrb	r3, [r4, #20]
 800f7ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7d2:	7523      	strb	r3, [r4, #20]
 800f7d4:	e7b3      	b.n	800f73e <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	4698      	mov	r8, r3
 800f7da:	7563      	strb	r3, [r4, #21]
}
 800f7dc:	4640      	mov	r0, r8
 800f7de:	b005      	add	sp, #20
 800f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7e4:	6a23      	ldr	r3, [r4, #32]
 800f7e6:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 800f7e8:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7ea:	d002      	beq.n	800f7f2 <f_write+0x1be>
 800f7ec:	68e1      	ldr	r1, [r4, #12]
 800f7ee:	428b      	cmp	r3, r1
 800f7f0:	d34f      	bcc.n	800f892 <f_write+0x25e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 800f7f6:	6222      	str	r2, [r4, #32]
 800f7f8:	e7b5      	b.n	800f766 <f_write+0x132>
					if (fp->cltbl) {
 800f7fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	d038      	beq.n	800f872 <f_write+0x23e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f800:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f802:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f804:	8952      	ldrh	r2, [r2, #10]
 800f806:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f80a:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f80c:	b922      	cbnz	r2, 800f818 <f_write+0x1e4>
 800f80e:	e00a      	b.n	800f826 <f_write+0x1f2>
		cl -= ncl; tbl++;		/* Next fragment */
 800f810:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f812:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f816:	b132      	cbz	r2, 800f826 <f_write+0x1f2>
		if (cl < ncl) break;	/* In this fragment? */
 800f818:	4293      	cmp	r3, r2
 800f81a:	d2f9      	bcs.n	800f810 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 800f81c:	6848      	ldr	r0, [r1, #4]
 800f81e:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f820:	2800      	cmp	r0, #0
 800f822:	f47f af4e 	bne.w	800f6c2 <f_write+0x8e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f826:	7d23      	ldrb	r3, [r4, #20]
 800f828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f82c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f82e:	e715      	b.n	800f65c <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f830:	2301      	movs	r3, #1
 800f832:	6a22      	ldr	r2, [r4, #32]
 800f834:	4651      	mov	r1, sl
 800f836:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f83a:	f7fd f9f3 	bl	800cc24 <disk_write>
 800f83e:	b920      	cbnz	r0, 800f84a <f_write+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f840:	7d23      	ldrb	r3, [r4, #20]
 800f842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f846:	7523      	strb	r3, [r4, #20]
 800f848:	e74a      	b.n	800f6e0 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f84a:	2301      	movs	r3, #1
 800f84c:	4698      	mov	r8, r3
 800f84e:	7563      	strb	r3, [r4, #21]
}
 800f850:	4640      	mov	r0, r8
 800f852:	b005      	add	sp, #20
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	3b01      	subs	r3, #1
 800f85a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 800f85e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 800f862:	4295      	cmp	r5, r2
			*d++ = *s++;
 800f864:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800f868:	d1f9      	bne.n	800f85e <f_write+0x22a>
 800f86a:	e7af      	b.n	800f7cc <f_write+0x198>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f86c:	f04f 0807 	mov.w	r8, #7
 800f870:	e6f4      	b.n	800f65c <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f872:	69e1      	ldr	r1, [r4, #28]
 800f874:	4620      	mov	r0, r4
 800f876:	f7fe f873 	bl	800d960 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f87a:	2800      	cmp	r0, #0
 800f87c:	f47f af21 	bne.w	800f6c2 <f_write+0x8e>
 800f880:	e7d1      	b.n	800f826 <f_write+0x1f2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f882:	4659      	mov	r1, fp
 800f884:	4620      	mov	r0, r4
 800f886:	f7fe f86b 	bl	800d960 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f47f af19 	bne.w	800f6c2 <f_write+0x8e>
 800f890:	e7c9      	b.n	800f826 <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f892:	2301      	movs	r3, #1
 800f894:	4651      	mov	r1, sl
 800f896:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f89a:	9202      	str	r2, [sp, #8]
 800f89c:	f7fd f9b2 	bl	800cc04 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d1d2      	bne.n	800f84a <f_write+0x216>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f8a4:	69a3      	ldr	r3, [r4, #24]
 800f8a6:	9a02      	ldr	r2, [sp, #8]
 800f8a8:	e7a3      	b.n	800f7f2 <f_write+0x1be>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f8aa:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8b2:	ebaa 0202 	sub.w	r2, sl, r2
 800f8b6:	2a02      	cmp	r2, #2
 800f8b8:	d90d      	bls.n	800f8d6 <f_write+0x2a2>
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 800f8c0:	f851 0b04 	ldr.w	r0, [r1], #4
 800f8c4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f8c8:	4562      	cmp	r2, ip
 800f8ca:	d1f9      	bne.n	800f8c0 <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8cc:	7d22      	ldrb	r2, [r4, #20]
 800f8ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8d2:	7522      	strb	r2, [r4, #20]
 800f8d4:	e72f      	b.n	800f736 <f_write+0x102>
 800f8d6:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 800f8da:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 800f8de:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 800f8e2:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f8e4:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f8e8:	d1f9      	bne.n	800f8de <f_write+0x2aa>
 800f8ea:	e7ef      	b.n	800f8cc <f_write+0x298>

0800f8ec <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f8ec:	b158      	cbz	r0, 800f906 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f8ee:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f8f0:	6803      	ldr	r3, [r0, #0]
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	b12b      	cbz	r3, 800f902 <f_close+0x16>
 800f8f6:	781a      	ldrb	r2, [r3, #0]
 800f8f8:	b11a      	cbz	r2, 800f902 <f_close+0x16>
 800f8fa:	8881      	ldrh	r1, [r0, #4]
 800f8fc:	88da      	ldrh	r2, [r3, #6]
 800f8fe:	4291      	cmp	r1, r2
 800f900:	d003      	beq.n	800f90a <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800f902:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f904:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800f906:	2009      	movs	r0, #9
}
 800f908:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f90a:	7858      	ldrb	r0, [r3, #1]
 800f90c:	f7fd f95e 	bl	800cbcc <disk_status>
 800f910:	07c1      	lsls	r1, r0, #31
 800f912:	d4f6      	bmi.n	800f902 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f914:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f916:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f918:	065a      	lsls	r2, r3, #25
 800f91a:	d52e      	bpl.n	800f97a <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f91c:	061b      	lsls	r3, r3, #24
 800f91e:	d451      	bmi.n	800f9c4 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800f920:	f7fd f876 	bl	800ca10 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f924:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f926:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800f928:	4628      	mov	r0, r5
 800f92a:	f7fd fb25 	bl	800cf78 <move_window>
				if (res == FR_OK) {
 800f92e:	2800      	cmp	r0, #0
 800f930:	d1e8      	bne.n	800f904 <f_close+0x18>
					dir = fp->dir_ptr;
 800f932:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f934:	7ada      	ldrb	r2, [r3, #11]
 800f936:	f042 0220 	orr.w	r2, r2, #32
 800f93a:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f93c:	68a2      	ldr	r2, [r4, #8]
 800f93e:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f940:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f944:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800f946:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800f948:	7809      	ldrb	r1, [r1, #0]
 800f94a:	2903      	cmp	r1, #3
 800f94c:	d103      	bne.n	800f956 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f94e:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f950:	751a      	strb	r2, [r3, #20]
 800f952:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f954:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f956:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f958:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f95a:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f95e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f960:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f962:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800f964:	2301      	movs	r3, #1
 800f966:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f968:	f7fd ff9c 	bl	800d8a4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f96c:	7d23      	ldrb	r3, [r4, #20]
 800f96e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f972:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800f974:	2800      	cmp	r0, #0
 800f976:	d1c5      	bne.n	800f904 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f978:	6825      	ldr	r5, [r4, #0]
 800f97a:	2d00      	cmp	r5, #0
 800f97c:	d0c1      	beq.n	800f902 <f_close+0x16>
 800f97e:	782b      	ldrb	r3, [r5, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0be      	beq.n	800f902 <f_close+0x16>
 800f984:	88a2      	ldrh	r2, [r4, #4]
 800f986:	88eb      	ldrh	r3, [r5, #6]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d1ba      	bne.n	800f902 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f98c:	7868      	ldrb	r0, [r5, #1]
 800f98e:	f7fd f91d 	bl	800cbcc <disk_status>
 800f992:	f010 0001 	ands.w	r0, r0, #1
 800f996:	d1b4      	bne.n	800f902 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	3b01      	subs	r3, #1
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d81e      	bhi.n	800f9de <f_close+0xf2>
		n = Files[i].ctr;
 800f9a0:	4912      	ldr	r1, [pc, #72]	; (800f9ec <f_close+0x100>)
 800f9a2:	011d      	lsls	r5, r3, #4
 800f9a4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f9a8:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f9aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f9ae:	d01a      	beq.n	800f9e6 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800f9b0:	b11a      	cbz	r2, 800f9ba <f_close+0xce>
 800f9b2:	3a01      	subs	r2, #1
 800f9b4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800f9b6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f9b8:	b90a      	cbnz	r2, 800f9be <f_close+0xd2>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800f9be:	2300      	movs	r3, #0
 800f9c0:	6023      	str	r3, [r4, #0]
}
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	6a22      	ldr	r2, [r4, #32]
 800f9c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f9cc:	7868      	ldrb	r0, [r5, #1]
 800f9ce:	f7fd f929 	bl	800cc24 <disk_write>
 800f9d2:	b930      	cbnz	r0, 800f9e2 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9d4:	7d23      	ldrb	r3, [r4, #20]
 800f9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9da:	7523      	strb	r3, [r4, #20]
 800f9dc:	e7a0      	b.n	800f920 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f9de:	2002      	movs	r0, #2
}
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9e2:	2001      	movs	r0, #1
}
 800f9e4:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800f9e6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f9e8:	e7e7      	b.n	800f9ba <f_close+0xce>
 800f9ea:	bf00      	nop
 800f9ec:	2001da3c 	.word	0x2001da3c

0800f9f0 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f9f4:	b150      	cbz	r0, 800fa0c <f_findnext+0x1c>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f9fa:	4c3b      	ldr	r4, [pc, #236]	; (800fae8 <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b12b      	cbz	r3, 800fa0c <f_findnext+0x1c>
 800fa00:	781a      	ldrb	r2, [r3, #0]
 800fa02:	b11a      	cbz	r2, 800fa0c <f_findnext+0x1c>
 800fa04:	88a9      	ldrh	r1, [r5, #4]
 800fa06:	88da      	ldrh	r2, [r3, #6]
 800fa08:	4291      	cmp	r1, r2
 800fa0a:	d003      	beq.n	800fa14 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 800fa0c:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800fa0e:	4638      	mov	r0, r7
 800fa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa14:	7858      	ldrb	r0, [r3, #1]
 800fa16:	f7fd f8d9 	bl	800cbcc <disk_status>
 800fa1a:	f010 0101 	ands.w	r1, r0, #1
 800fa1e:	d1f5      	bne.n	800fa0c <f_findnext+0x1c>
		if (!fno) {
 800fa20:	2e00      	cmp	r6, #0
 800fa22:	d059      	beq.n	800fad8 <f_findnext+0xe8>
			res = dir_read(dp, 0);			/* Read an item */
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7fd fd33 	bl	800d490 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800fa2a:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800fa2e:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800fa30:	d1ed      	bne.n	800fa0e <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fa32:	4631      	mov	r1, r6
 800fa34:	4628      	mov	r0, r5
 800fa36:	f7fd f9df 	bl	800cdf8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fa3a:	4641      	mov	r1, r8
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f7fe fdd1 	bl	800e5e4 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fa42:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 800fa46:	d14d      	bne.n	800fae4 <f_findnext+0xf4>
 800fa48:	7db3      	ldrb	r3, [r6, #22]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d0df      	beq.n	800fa0e <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa4e:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 800fa52:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 800fa56:	e00f      	b.n	800fa78 <f_findnext+0x88>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fa58:	3a20      	subs	r2, #32
 800fa5a:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fa5c:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fa60:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fa64:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fa66:	f1be 0f19 	cmp.w	lr, #25
 800fa6a:	d817      	bhi.n	800fa9c <f_findnext+0xac>
 800fa6c:	3b20      	subs	r3, #32
 800fa6e:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d1c3      	bne.n	800f9fc <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0ca      	beq.n	800fa0e <f_findnext+0x1e>
 800fa78:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800fa7a:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800fa7e:	2b3f      	cmp	r3, #63	; 0x3f
 800fa80:	d012      	beq.n	800faa8 <f_findnext+0xb8>
 800fa82:	2b2a      	cmp	r3, #42	; 0x2a
 800fa84:	d010      	beq.n	800faa8 <f_findnext+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fa86:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fa8a:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fa8c:	2819      	cmp	r0, #25
 800fa8e:	d9e3      	bls.n	800fa58 <f_findnext+0x68>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fa90:	2a7f      	cmp	r2, #127	; 0x7f
 800fa92:	d9e3      	bls.n	800fa5c <f_findnext+0x6c>
 800fa94:	4423      	add	r3, r4
 800fa96:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800fa9a:	e7df      	b.n	800fa5c <f_findnext+0x6c>
 800fa9c:	2b7f      	cmp	r3, #127	; 0x7f
 800fa9e:	d9e7      	bls.n	800fa70 <f_findnext+0x80>
 800faa0:	4420      	add	r0, r4
 800faa2:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 800faa6:	e7e3      	b.n	800fa70 <f_findnext+0x80>
 800faa8:	4694      	mov	ip, r2
				nm = nx = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	f81c eb01 	ldrb.w	lr, [ip], #1
 800fab0:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800fab2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800fab6:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 800fab8:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800fabc:	bf0c      	ite	eq
 800fabe:	3201      	addeq	r2, #1
 800fac0:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800fac2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800fac6:	d0f4      	beq.n	800fab2 <f_findnext+0xc2>
 800fac8:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 800facc:	d0f1      	beq.n	800fab2 <f_findnext+0xc2>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800face:	f7fd f91d 	bl	800cd0c <pattern_matching>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d092      	beq.n	800f9fc <f_findnext+0xc>
 800fad6:	e79a      	b.n	800fa0e <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fad8:	4631      	mov	r1, r6
 800fada:	4628      	mov	r0, r5
}
 800fadc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fae0:	f7fd bffe 	b.w	800dae0 <dir_sdi>
 800fae4:	4607      	mov	r7, r0
 800fae6:	e792      	b.n	800fa0e <f_findnext+0x1e>
 800fae8:	0801c2c8 	.word	0x0801c2c8

0800faec <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	4615      	mov	r5, r2
 800faf2:	4604      	mov	r4, r0
 800faf4:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800faf6:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 800faf8:	2200      	movs	r2, #0
 800fafa:	a901      	add	r1, sp, #4
 800fafc:	4668      	mov	r0, sp
 800fafe:	9500      	str	r5, [sp, #0]
 800fb00:	f7fd fa78 	bl	800cff4 <find_volume>
	if (res == FR_OK) {
 800fb04:	b118      	cbz	r0, 800fb0e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fb06:	2300      	movs	r3, #0
 800fb08:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800fb0a:	b002      	add	sp, #8
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fb0e:	e9dd 1500 	ldrd	r1, r5, [sp]
 800fb12:	4620      	mov	r0, r4
		obj->fs = fs;
 800fb14:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fb16:	f7fe fad7 	bl	800e0c8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800fb1a:	bb00      	cbnz	r0, 800fb5e <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fb1c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	db0b      	blt.n	800fb3c <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fb24:	79a3      	ldrb	r3, [r4, #6]
 800fb26:	06db      	lsls	r3, r3, #27
 800fb28:	d51f      	bpl.n	800fb6a <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
 800fb2a:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fb2c:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800fb2e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800fb30:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800fb32:	d102      	bne.n	800fb3a <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fb34:	8a92      	ldrh	r2, [r2, #20]
 800fb36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fb3a:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 800fb3c:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fb3e:	2100      	movs	r1, #0
 800fb40:	4620      	mov	r0, r4
				obj->id = fs->id;
 800fb42:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fb44:	f7fd ffcc 	bl	800dae0 <dir_sdi>
				if (res == FR_OK) {
 800fb48:	b948      	cbnz	r0, 800fb5e <f_findfirst+0x72>
					if (obj->sclust) {
 800fb4a:	68a3      	ldr	r3, [r4, #8]
 800fb4c:	b97b      	cbnz	r3, 800fb6e <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fb4e:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 800fb50:	4631      	mov	r1, r6
 800fb52:	4620      	mov	r0, r4
}
 800fb54:	b002      	add	sp, #8
 800fb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800fb5a:	f7ff bf49 	b.w	800f9f0 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fb5e:	2804      	cmp	r0, #4
 800fb60:	d1d1      	bne.n	800fb06 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fb62:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
 800fb64:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fb66:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 800fb68:	e7cf      	b.n	800fb0a <f_findfirst+0x1e>
					res = FR_NO_PATH;
 800fb6a:	2005      	movs	r0, #5
 800fb6c:	e7cb      	b.n	800fb06 <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fb6e:	4601      	mov	r1, r0
 800fb70:	4620      	mov	r0, r4
 800fb72:	f7fd f873 	bl	800cc5c <inc_lock>
 800fb76:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d1e9      	bne.n	800fb50 <f_findfirst+0x64>
 800fb7c:	2012      	movs	r0, #18
 800fb7e:	e7c2      	b.n	800fb06 <f_findfirst+0x1a>

0800fb80 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800fb80:	b530      	push	{r4, r5, lr}
 800fb82:	b0a1      	sub	sp, #132	; 0x84
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fb84:	2202      	movs	r2, #2
{
 800fb86:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 800fb88:	a903      	add	r1, sp, #12
 800fb8a:	a801      	add	r0, sp, #4
 800fb8c:	f7fd fa32 	bl	800cff4 <find_volume>
	dj.obj.fs = fs;
 800fb90:	9c03      	ldr	r4, [sp, #12]
 800fb92:	9404      	str	r4, [sp, #16]
	if (res == FR_OK) {
 800fb94:	b108      	cbz	r0, 800fb9a <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800fb96:	b021      	add	sp, #132	; 0x84
 800fb98:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 800fb9a:	9901      	ldr	r1, [sp, #4]
 800fb9c:	a804      	add	r0, sp, #16
 800fb9e:	f7fe fa93 	bl	800e0c8 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d1f7      	bne.n	800fb96 <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
 800fba6:	4b29      	ldr	r3, [pc, #164]	; (800fc4c <f_unlink+0xcc>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fba8:	9904      	ldr	r1, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800fbaa:	681a      	ldr	r2, [r3, #0]
				Files[i].clu == dp->obj.sclust &&
 800fbac:	9806      	ldr	r0, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800fbae:	9d09      	ldr	r5, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800fbb0:	b10a      	cbz	r2, 800fbb6 <f_unlink+0x36>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fbb2:	428a      	cmp	r2, r1
 800fbb4:	d029      	beq.n	800fc0a <f_unlink+0x8a>
		if (Files[i].fs) {	/* Existing entry */
 800fbb6:	691a      	ldr	r2, [r3, #16]
 800fbb8:	b10a      	cbz	r2, 800fbbe <f_unlink+0x3e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fbba:	428a      	cmp	r2, r1
 800fbbc:	d02d      	beq.n	800fc1a <f_unlink+0x9a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800fbbe:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	db1f      	blt.n	800fc06 <f_unlink+0x86>
				if (dj.obj.attr & AM_RDO) {
 800fbc6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800fbca:	07da      	lsls	r2, r3, #31
 800fbcc:	d419      	bmi.n	800fc02 <f_unlink+0x82>
	if (fs->fs_type == FS_FAT32) {
 800fbce:	7821      	ldrb	r1, [r4, #0]
					dclst = ld_clust(fs, dj.dir);
 800fbd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800fbd2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800fbd4:	8b55      	ldrh	r5, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800fbd6:	d102      	bne.n	800fbde <f_unlink+0x5e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fbd8:	8a92      	ldrh	r2, [r2, #20]
 800fbda:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800fbde:	06db      	lsls	r3, r3, #27
 800fbe0:	d422      	bmi.n	800fc28 <f_unlink+0xa8>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800fbe2:	a804      	add	r0, sp, #16
 800fbe4:	f7fe f828 	bl	800dc38 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800fbe8:	b928      	cbnz	r0, 800fbf6 <f_unlink+0x76>
 800fbea:	b125      	cbz	r5, 800fbf6 <f_unlink+0x76>
					res = remove_chain(&dj.obj, dclst, 0);
 800fbec:	2200      	movs	r2, #0
 800fbee:	4629      	mov	r1, r5
 800fbf0:	a804      	add	r0, sp, #16
 800fbf2:	f7fe fbf5 	bl	800e3e0 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d1cd      	bne.n	800fb96 <f_unlink+0x16>
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f7fd fe52 	bl	800d8a4 <sync_fs>
 800fc00:	e7c9      	b.n	800fb96 <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800fc02:	2007      	movs	r0, #7
 800fc04:	e7c7      	b.n	800fb96 <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800fc06:	2006      	movs	r0, #6
 800fc08:	e7c5      	b.n	800fb96 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	4282      	cmp	r2, r0
 800fc0e:	d1d2      	bne.n	800fbb6 <f_unlink+0x36>
				Files[i].clu == dp->obj.sclust &&
 800fc10:	689a      	ldr	r2, [r3, #8]
 800fc12:	42aa      	cmp	r2, r5
 800fc14:	d1cf      	bne.n	800fbb6 <f_unlink+0x36>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc16:	2010      	movs	r0, #16
 800fc18:	e7bd      	b.n	800fb96 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc1a:	695a      	ldr	r2, [r3, #20]
 800fc1c:	4282      	cmp	r2, r0
 800fc1e:	d1ce      	bne.n	800fbbe <f_unlink+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	42ab      	cmp	r3, r5
 800fc24:	d1cb      	bne.n	800fbbe <f_unlink+0x3e>
 800fc26:	e7f6      	b.n	800fc16 <f_unlink+0x96>
						res = dir_sdi(&sdj, 0);
 800fc28:	2100      	movs	r1, #0
 800fc2a:	a812      	add	r0, sp, #72	; 0x48
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800fc2c:	9412      	str	r4, [sp, #72]	; 0x48
						sdj.obj.sclust = dclst;
 800fc2e:	9514      	str	r5, [sp, #80]	; 0x50
						res = dir_sdi(&sdj, 0);
 800fc30:	f7fd ff56 	bl	800dae0 <dir_sdi>
						if (res == FR_OK) {
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d1ae      	bne.n	800fb96 <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
 800fc38:	4601      	mov	r1, r0
 800fc3a:	a812      	add	r0, sp, #72	; 0x48
 800fc3c:	f7fd fc28 	bl	800d490 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d0de      	beq.n	800fc02 <f_unlink+0x82>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800fc44:	2804      	cmp	r0, #4
 800fc46:	d1a6      	bne.n	800fb96 <f_unlink+0x16>
 800fc48:	e7cb      	b.n	800fbe2 <f_unlink+0x62>
 800fc4a:	bf00      	nop
 800fc4c:	2001da3c 	.word	0x2001da3c

0800fc50 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fc52:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800fc54:	7a5c      	ldrb	r4, [r3, #9]
 800fc56:	b9cc      	cbnz	r4, 800fc8c <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800fc58:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800fc5c:	7a5c      	ldrb	r4, [r3, #9]
 800fc5e:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800fc60:	7a5c      	ldrb	r4, [r3, #9]
 800fc62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc66:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800fc68:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800fc6a:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800fc6c:	441c      	add	r4, r3
 800fc6e:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800fc70:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800fc72:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800fc74:	b2e4      	uxtb	r4, r4
 800fc76:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800fc78:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800fc7a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800fc7c:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800fc7e:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800fc80:	4610      	mov	r0, r2
 800fc82:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800fc86:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800fc88:	708b      	strb	r3, [r1, #2]
}
 800fc8a:	4770      	bx	lr
  uint8_t ret = 1;
 800fc8c:	2201      	movs	r2, #1
}
 800fc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc92:	4610      	mov	r0, r2
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	2001dc60 	.word	0x2001dc60

0800fc9c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fc9c:	287f      	cmp	r0, #127	; 0x7f
 800fc9e:	d913      	bls.n	800fcc8 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fca0:	b979      	cbnz	r1, 800fcc2 <ff_convert+0x26>
 800fca2:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <ff_convert+0x38>)
 800fca4:	e001      	b.n	800fcaa <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fca6:	2980      	cmp	r1, #128	; 0x80
 800fca8:	d00d      	beq.n	800fcc6 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800fcaa:	f833 2b02 	ldrh.w	r2, [r3], #2
 800fcae:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800fcb2:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 800fcb4:	4282      	cmp	r2, r0
 800fcb6:	d1f6      	bne.n	800fca6 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800fcb8:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800fcbc:	fa1f f08c 	uxth.w	r0, ip
 800fcc0:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fcc2:	28ff      	cmp	r0, #255	; 0xff
 800fcc4:	d901      	bls.n	800fcca <ff_convert+0x2e>
 800fcc6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800fcc8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fcca:	4b02      	ldr	r3, [pc, #8]	; (800fcd4 <ff_convert+0x38>)
 800fccc:	3880      	subs	r0, #128	; 0x80
 800fcce:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800fcd2:	4770      	bx	lr
 800fcd4:	0801c358 	.word	0x0801c358

0800fcd8 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fcd8:	4b23      	ldr	r3, [pc, #140]	; (800fd68 <ff_wtoupper+0x90>)
 800fcda:	4a24      	ldr	r2, [pc, #144]	; (800fd6c <ff_wtoupper+0x94>)
 800fcdc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800fce0:	bf28      	it	cs
 800fce2:	4613      	movcs	r3, r2
{
 800fce4:	b510      	push	{r4, lr}
 800fce6:	3304      	adds	r3, #4
 800fce8:	e00a      	b.n	800fd00 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fcea:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800fcee:	fa5f fc82 	uxtb.w	ip, r2
 800fcf2:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800fcf4:	eb0c 0e01 	add.w	lr, ip, r1
 800fcf8:	4570      	cmp	r0, lr
 800fcfa:	db09      	blt.n	800fd10 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800fcfc:	3304      	adds	r3, #4
 800fcfe:	b182      	cbz	r2, 800fd22 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800fd00:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800fd04:	461c      	mov	r4, r3
 800fd06:	1e4a      	subs	r2, r1, #1
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	4290      	cmp	r0, r2
 800fd0c:	d8ed      	bhi.n	800fcea <ff_wtoupper+0x12>
	}

	return chr;
}
 800fd0e:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800fd10:	2a08      	cmp	r2, #8
 800fd12:	d8fc      	bhi.n	800fd0e <ff_wtoupper+0x36>
 800fd14:	e8df f002 	tbb	[pc, r2]
 800fd18:	1916100c 	.word	0x1916100c
 800fd1c:	25221f1c 	.word	0x25221f1c
 800fd20:	08          	.byte	0x08
 800fd21:	00          	.byte	0x00
		if (!cmd) p += nc;
 800fd22:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800fd26:	e7de      	b.n	800fce6 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd28:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800fd2c:	b280      	uxth	r0, r0
}
 800fd2e:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fd30:	1a41      	subs	r1, r0, r1
 800fd32:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 800fd36:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fd38:	1a43      	subs	r3, r0, r1
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	1ac3      	subs	r3, r0, r3
 800fd40:	b298      	uxth	r0, r3
}
 800fd42:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd44:	3810      	subs	r0, #16
 800fd46:	b280      	uxth	r0, r0
}
 800fd48:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd4a:	3820      	subs	r0, #32
 800fd4c:	b280      	uxth	r0, r0
}
 800fd4e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd50:	3830      	subs	r0, #48	; 0x30
 800fd52:	b280      	uxth	r0, r0
}
 800fd54:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd56:	381a      	subs	r0, #26
 800fd58:	b280      	uxth	r0, r0
}
 800fd5a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd5c:	3008      	adds	r0, #8
 800fd5e:	b280      	uxth	r0, r0
}
 800fd60:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd62:	3850      	subs	r0, #80	; 0x50
 800fd64:	b280      	uxth	r0, r0
}
 800fd66:	bd10      	pop	{r4, pc}
 800fd68:	0801c458 	.word	0x0801c458
 800fd6c:	0801c64c 	.word	0x0801c64c

0800fd70 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
 800fd70:	b538      	push	{r3, r4, r5, lr}
 800fd72:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 800fd76:	698d      	ldr	r5, [r1, #24]
{
 800fd78:	eef0 8a40 	vmov.f32	s17, s0
 800fd7c:	eeb0 8a60 	vmov.f32	s16, s1
 800fd80:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800fd82:	4629      	mov	r1, r5
 800fd84:	2010      	movs	r0, #16
 800fd86:	f004 fc6b 	bl	8014660 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 800fd8a:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800fd8c:	6020      	str	r0, [r4, #0]
    e->mempool = m;
 800fd8e:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
 800fd90:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800fd92:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 800fd96:	ed80 8a03 	vstr	s16, [r0, #12]
}
 800fd9a:	ecbd 8b02 	vpop	{d8}
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}

0800fda0 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800fda0:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800fda2:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800fda6:	edd3 7a01 	vldr	s15, [r3, #4]
 800fdaa:	eef4 7ac0 	vcmpe.f32	s15, s0
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	d809      	bhi.n	800fdc8 <tEnvelopeFollower_tick+0x28>
 800fdb4:	ed93 7a02 	vldr	s14, [r3, #8]
 800fdb8:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800fdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc0:	d502      	bpl.n	800fdc8 <tEnvelopeFollower_tick+0x28>
 800fdc2:	ed83 0a01 	vstr	s0, [r3, #4]
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
}
 800fdc6:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800fdc8:	ed93 0a03 	vldr	s0, [r3, #12]
 800fdcc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fdd0:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop

0800fdd8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800fdd8:	b538      	push	{r3, r4, r5, lr}
 800fdda:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800fdde:	680d      	ldr	r5, [r1, #0]
{
 800fde0:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fde2:	2010      	movs	r0, #16
{
 800fde4:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fde8:	4629      	mov	r1, r5
 800fdea:	f004 fc39 	bl	8014660 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800fdee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800fdf2:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800fdf4:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800fdf6:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800fdf8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800fdfc:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800fdfe:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800fe02:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800fe06:	ecbd 8b02 	vpop	{d8}
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}

0800fe0c <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 800fe0c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800fe0e:	6801      	ldr	r1, [r0, #0]
 800fe10:	f004 bce8 	b.w	80147e4 <mpool_free>

0800fe14 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800fe14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe18:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800fe34 <tPowerFollower_setFactor+0x20>
 800fe1c:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
 800fe1e:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 800fe22:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800fe26:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 800fe2a:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800fe2e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800fe32:	4770      	bx	lr
 800fe34:	00000000 	.word	0x00000000

0800fe38 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800fe38:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800fe3a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800fe3e:	edd3 6a03 	vldr	s13, [r3, #12]
 800fe42:	ed93 0a02 	vldr	s0, [r3, #8]
 800fe46:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe4a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fe4e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fe52:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800fe56:	4770      	bx	lr

0800fe58 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	460d      	mov	r5, r1
 800fe5c:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fe5e:	202c      	movs	r0, #44	; 0x2c
{
 800fe60:	ed2d 8b02 	vpush	{d8}
 800fe64:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800fe66:	6811      	ldr	r1, [r2, #0]
{
 800fe68:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800fe6c:	eddf 8a30 	vldr	s17, [pc, #192]	; 800ff30 <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fe70:	9101      	str	r1, [sp, #4]
 800fe72:	f004 fbf5 	bl	8014660 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800fe76:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fe7a:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fe7c:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fe7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800fe82:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fe84:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
 800fe88:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800fe8a:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fe8c:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
 800fe8e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 800fe92:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fe96:	f004 fbe3 	bl	8014660 <mpool_alloc>

    d->gain = 1.0f;
 800fe9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 800fe9e:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fea0:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800fea2:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fea4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
 800fea8:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
 800feac:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
 800feb0:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800feb2:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
 800feb4:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800feb6:	edd4 0a08 	vldr	s1, [r4, #32]
 800feba:	edd5 7a07 	vldr	s15, [r5, #28]
 800febe:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800fec2:	f004 f951 	bl	8014168 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
 800fec6:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800feca:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800fecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fed0:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800fed4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800fed8:	eef4 7ae8 	vcmpe.f32	s15, s17
 800fedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee0:	d50a      	bpl.n	800fef8 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
 800fee2:	ee07 2a10 	vmov	s14, r2
 800fee6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800feea:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800feee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef6:	d4f8      	bmi.n	800feea <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800fef8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fefc:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 800ff00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800ff04:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	bf08      	it	eq
 800ff0c:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 800ff0e:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800ff12:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ff16:	61ab      	str	r3, [r5, #24]
 800ff18:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800ff1c:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 800ff20:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800ff24:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
 800ff28:	b002      	add	sp, #8
 800ff2a:	ecbd 8b02 	vpop	{d8}
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	00000000 	.word	0x00000000

0800ff34 <tLinearDelay_free>:
{
 800ff34:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800ff36:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 800ff38:	6821      	ldr	r1, [r4, #0]
 800ff3a:	68a0      	ldr	r0, [r4, #8]
 800ff3c:	f004 fc52 	bl	80147e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800ff40:	6821      	ldr	r1, [r4, #0]
 800ff42:	4620      	mov	r0, r4
}
 800ff44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800ff48:	f004 bc4c 	b.w	80147e4 <mpool_free>

0800ff4c <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 800ff4c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800ff4e:	69cb      	ldr	r3, [r1, #28]
 800ff50:	b14b      	cbz	r3, 800ff66 <tLinearDelay_clear+0x1a>
 800ff52:	2300      	movs	r3, #0
        d->buff[i] = 0;
 800ff54:	2000      	movs	r0, #0
 800ff56:	688a      	ldr	r2, [r1, #8]
 800ff58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800ff5c:	3301      	adds	r3, #1
        d->buff[i] = 0;
 800ff5e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800ff60:	69ca      	ldr	r2, [r1, #28]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d8f7      	bhi.n	800ff56 <tLinearDelay_clear+0xa>
}
 800ff66:	4770      	bx	lr

0800ff68 <tLinearDelay_tick>:
{
 800ff68:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800ff6a:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800ff6c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ff70:	6959      	ldr	r1, [r3, #20]
 800ff72:	689a      	ldr	r2, [r3, #8]
 800ff74:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ff78:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ff7c:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff80:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800ff82:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
 800ff86:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff8a:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
 800ff8c:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff8e:	42a2      	cmp	r2, r4
 800ff90:	bf08      	it	eq
 800ff92:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
 800ff94:	4284      	cmp	r4, r0
 800ff96:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800ff98:	689a      	ldr	r2, [r3, #8]
 800ff9a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ff9e:	ed91 0a00 	vldr	s0, [r1]
 800ffa2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffa6:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800ffaa:	d90b      	bls.n	800ffc4 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800ffac:	ed91 7a01 	vldr	s14, [r1, #4]
 800ffb0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800ffb4:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800ffb6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ffba:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800ffbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffc2:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800ffc4:	ed92 7a00 	vldr	s14, [r2]
 800ffc8:	2000      	movs	r0, #0
 800ffca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800ffce:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800ffd0:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800ffd4:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800ffd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop

0800ffe0 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 800ffe0:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800ffe2:	edd3 7a01 	vldr	s15, [r3, #4]
 800ffe6:	6959      	ldr	r1, [r3, #20]
 800ffe8:	689a      	ldr	r2, [r3, #8]
 800ffea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ffee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fff2:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fff6:	695a      	ldr	r2, [r3, #20]
 800fff8:	69d9      	ldr	r1, [r3, #28]
 800fffa:	3201      	adds	r2, #1
 800fffc:	428a      	cmp	r2, r1
 800fffe:	bf08      	it	eq
 8010000:	2200      	moveq	r2, #0
 8010002:	615a      	str	r2, [r3, #20]
}
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop

08010008 <tLinearDelay_tickOut>:
{
 8010008:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801000a:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 801000c:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 801000e:	6899      	ldr	r1, [r3, #8]
 8010010:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010014:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 8010018:	69dc      	ldr	r4, [r3, #28]
 801001a:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 801001c:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 8010020:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 8010022:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010026:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 801002a:	d20b      	bcs.n	8010044 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 801002c:	ed90 7a01 	vldr	s14, [r0, #4]
 8010030:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8010034:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 8010036:	eea7 0a27 	vfma.f32	s0, s14, s15
 801003a:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801003e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010042:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 8010044:	ed91 7a00 	vldr	s14, [r1]
 8010048:	2200      	movs	r2, #0
 801004a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801004e:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 8010050:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 8010054:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8010058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop

08010060 <tLinearDelay_setDelay>:
{
 8010060:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 8010062:	6804      	ldr	r4, [r0, #0]
{
 8010064:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 8010068:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801006c:	edd4 7a07 	vldr	s15, [r4, #28]
 8010070:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8010074:	f004 f878 	bl	8014168 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
 8010078:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
 801007c:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 801007e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 8010082:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 8010086:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 801008a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801008e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010092:	d50a      	bpl.n	80100aa <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 8010094:	ee07 2a10 	vmov	s14, r2
 8010098:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801009c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 80100a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80100a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a8:	d4f8      	bmi.n	801009c <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 80100aa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80100ae:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
 80100b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80100b6:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 80100ba:	4293      	cmp	r3, r2
 80100bc:	bf08      	it	eq
 80100be:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 80100c0:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 80100c4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80100c8:	61a3      	str	r3, [r4, #24]
 80100ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 80100ce:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 80100d2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 80100d6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 80100da:	bd10      	pop	{r4, pc}

080100dc <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 80100dc:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 80100de:	6953      	ldr	r3, [r2, #20]
 80100e0:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 80100e2:	3901      	subs	r1, #1
 80100e4:	d502      	bpl.n	80100ec <tLinearDelay_addTo+0x10>
 80100e6:	69d3      	ldr	r3, [r2, #28]
 80100e8:	18c9      	adds	r1, r1, r3
 80100ea:	d4fd      	bmi.n	80100e8 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
 80100ec:	6893      	ldr	r3, [r2, #8]
 80100ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80100f2:	edd3 7a00 	vldr	s15, [r3]
 80100f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100fa:	ed83 0a00 	vstr	s0, [r3]
}
 80100fe:	4770      	bx	lr

08010100 <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 8010100:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 8010102:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 8010104:	e9d4 1000 	ldrd	r1, r0, [r4]
 8010108:	f004 fb6c 	bl	80147e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
 801010c:	6821      	ldr	r1, [r4, #0]
 801010e:	4620      	mov	r0, r4
}
 8010110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 8010114:	f004 bb66 	b.w	80147e4 <mpool_free>

08010118 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 8010118:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 801011a:	69cb      	ldr	r3, [r1, #28]
 801011c:	b14b      	cbz	r3, 8010132 <tLagrangeDelay_clear+0x1a>
 801011e:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
 8010120:	2000      	movs	r0, #0
 8010122:	684a      	ldr	r2, [r1, #4]
 8010124:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8010128:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
 801012a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 801012c:	69ca      	ldr	r2, [r1, #28]
 801012e:	429a      	cmp	r2, r3
 8010130:	d8f7      	bhi.n	8010122 <tLagrangeDelay_clear+0xa>
    }
}
 8010132:	4770      	bx	lr

08010134 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 8010134:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 8010136:	6959      	ldr	r1, [r3, #20]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801013e:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 8010142:	695a      	ldr	r2, [r3, #20]
 8010144:	6899      	ldr	r1, [r3, #8]
 8010146:	3201      	adds	r2, #1
 8010148:	400a      	ands	r2, r1
 801014a:	615a      	str	r2, [r3, #20]
}
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop

08010150 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 8010150:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
 8010152:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 8010154:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 8010156:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 801015a:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 801015c:	1c44      	adds	r4, r0, #1
 801015e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8010162:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010166:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
 801016a:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 801016e:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 8010170:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 8010172:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010176:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 801017a:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 801017e:	ee20 0a06 	vmul.f32	s0, s0, s12
 8010182:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 8010186:	69da      	ldr	r2, [r3, #28]
 8010188:	eea6 0a26 	vfma.f32	s0, s12, s13
 801018c:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
 801018e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 8010192:	3a01      	subs	r2, #1
 8010194:	edd0 6a00 	vldr	s13, [r0]
 8010198:	402a      	ands	r2, r5
 801019a:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 801019e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80101a2:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 80101a6:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80101a8:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 80101ac:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 80101b0:	bc30      	pop	{r4, r5}
 80101b2:	4770      	bx	lr

080101b4 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 80101b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
 80101b8:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
 80101ba:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 80101be:	ee37 7ac0 	vsub.f32	s14, s15, s0
 80101c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80101c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ca:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 80101ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d6:	d50a      	bpl.n	80101ee <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
 80101d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80101dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80101e0:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 80101e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ec:	d4f8      	bmi.n	80101e0 <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 80101ee:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 80101f2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8010268 <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
 80101f6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 80101fa:	eddf 3a1c 	vldr	s7, [pc, #112]	; 801026c <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
 80101fe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
 8010202:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 8010204:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
 8010208:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 801020c:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
 8010210:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
 8010214:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 8010216:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 801021a:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
 801021c:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
 8010220:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
 8010224:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010228:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 801022c:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
 8010230:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010234:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
 8010238:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 801023c:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010240:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
 8010244:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 8010248:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 801024c:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010250:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
 8010254:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 8010258:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 801025c:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010260:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	be2aaaab 	.word	0xbe2aaaab
 801026c:	3e2aaaab 	.word	0x3e2aaaab

08010270 <tLagrangeDelay_initToPool>:
{
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	460d      	mov	r5, r1
 8010274:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 8010276:	2034      	movs	r0, #52	; 0x34
{
 8010278:	ed2d 8b02 	vpush	{d8}
 801027c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 801027e:	6811      	ldr	r1, [r2, #0]
{
 8010280:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 8010284:	9101      	str	r1, [sp, #4]
 8010286:	f004 f9eb 	bl	8014660 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 801028a:	ee07 5a90 	vmov	s15, r5
 801028e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010300 <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
 8010292:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 8010294:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8010296:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 801029a:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 801029c:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
 80102a0:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 80102a2:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 80102a4:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80102a8:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 80102ac:	bb1d      	cbnz	r5, 80102f6 <tLagrangeDelay_initToPool+0x86>
 80102ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
 80102b2:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 80102b6:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 80102ba:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 80102be:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 80102c2:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 80102c6:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 80102c8:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 80102ca:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 80102cc:	00a8      	lsls	r0, r5, #2
 80102ce:	f004 f9c7 	bl	8014660 <mpool_alloc>
    d->lastIn = 0.0f;
 80102d2:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 80102d4:	4601      	mov	r1, r0
    d->inPoint = 0;
 80102d6:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
 80102d8:	ed94 0a08 	vldr	s0, [r4, #32]
 80102dc:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 80102de:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 80102e0:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 80102e2:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 80102e4:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 80102e8:	b002      	add	sp, #8
 80102ea:	ecbd 8b02 	vpop	{d8}
 80102ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
 80102f2:	f7ff bf5f 	b.w	80101b4 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 80102f6:	1e6b      	subs	r3, r5, #1
 80102f8:	422b      	tst	r3, r5
 80102fa:	461a      	mov	r2, r3
 80102fc:	d1d9      	bne.n	80102b2 <tLagrangeDelay_initToPool+0x42>
 80102fe:	e7e4      	b.n	80102ca <tLagrangeDelay_initToPool+0x5a>
 8010300:	00000000 	.word	0x00000000

08010304 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 8010304:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8010306:	6953      	ldr	r3, [r2, #20]
 8010308:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
 801030a:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 801030e:	3b01      	subs	r3, #1
 8010310:	4003      	ands	r3, r0
    return d->buff[tap];
 8010312:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 8010316:	ed92 0a00 	vldr	s0, [r2]
 801031a:	4770      	bx	lr

0801031c <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 801031c:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 801031e:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
 8010322:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
 8010324:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010328:	eddf 4a27 	vldr	s9, [pc, #156]	; 80103c8 <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 801032c:	1a59      	subs	r1, r3, r1
 801032e:	6953      	ldr	r3, [r2, #20]
 8010330:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
 8010332:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010336:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
 8010338:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801033c:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
 801033e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010342:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
 8010344:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010348:	3b01      	subs	r3, #1
 801034a:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 801034c:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
 801034e:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010352:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010356:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
 8010358:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 801035c:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801035e:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010360:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010364:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010368:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 801036c:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010374:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010378:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 801037c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010380:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010384:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
 8010388:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 801038c:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 8010390:	3101      	adds	r1, #1
 8010392:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 8010396:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
 801039a:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 801039e:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 80103a0:	ee67 7a84 	vmul.f32	s15, s15, s8

}
 80103a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80103a8:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80103ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80103b0:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 80103b4:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80103b8:	edd2 7a00 	vldr	s15, [r2]
 80103bc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80103c0:	eea7 0a87 	vfma.f32	s0, s15, s14
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	be2aaaab 	.word	0xbe2aaaab

080103cc <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 80103cc:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80103ce:	6953      	ldr	r3, [r2, #20]
 80103d0:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
 80103d2:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80103d6:	3b01      	subs	r3, #1
 80103d8:	4003      	ands	r3, r0
    d->buff[tap] = value;
 80103da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80103de:	ed82 0a00 	vstr	s0, [r2]
}
 80103e2:	4770      	bx	lr

080103e4 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 80103e4:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80103e6:	6953      	ldr	r3, [r2, #20]
 80103e8:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
 80103ea:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80103ee:	3b01      	subs	r3, #1
 80103f0:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 80103f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103f6:	edd3 7a00 	vldr	s15, [r3]
 80103fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80103fe:	ed83 0a00 	vstr	s0, [r3]
}
 8010402:	4770      	bx	lr

08010404 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
 8010404:	6803      	ldr	r3, [r0, #0]
 8010406:	ed93 0a07 	vldr	s0, [r3, #28]
}
 801040a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801040e:	4770      	bx	lr

08010410 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	460e      	mov	r6, r1
 8010414:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8010416:	6811      	ldr	r1, [r2, #0]
{
 8010418:	4605      	mov	r5, r0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801041a:	202c      	movs	r0, #44	; 0x2c
{
 801041c:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 8010420:	9100      	str	r1, [sp, #0]
 8010422:	f004 f91d 	bl	8014660 <mpool_alloc>
    d->mempool = m;
 8010426:	9900      	ldr	r1, [sp, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 8010428:	4604      	mov	r4, r0
 801042a:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 801042c:	6001      	str	r1, [r0, #0]

    d->maxDelay = maxDelay;
 801042e:	6186      	str	r6, [r0, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8010430:	00b0      	lsls	r0, r6, #2
 8010432:	f004 f915 	bl	8014660 <mpool_alloc>

    d->gain = 1.0f;
 8010436:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
 801043a:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
 801043c:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 801043e:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 8010440:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 8010442:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 8010444:	6263      	str	r3, [r4, #36]	; 0x24
    d->inPoint = 0;
 8010446:	6162      	str	r2, [r4, #20]
    d->gain = 1.0f;
 8010448:	ed84 0a01 	vstr	s0, [r4, #4]
    d->inc = 1.0f;
 801044c:	ed84 0a08 	vstr	s0, [r4, #32]
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
 8010450:	682c      	ldr	r4, [r5, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 8010452:	eddd 0a01 	vldr	s1, [sp, #4]
 8010456:	edd4 7a06 	vldr	s15, [r4, #24]
 801045a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801045e:	f003 fe83 	bl	8014168 <LEAF_clip>
 8010462:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8010466:	b002      	add	sp, #8
 8010468:	bd70      	pop	{r4, r5, r6, pc}
 801046a:	bf00      	nop

0801046c <tTapeDelay_free>:
{
 801046c:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801046e:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 8010470:	6821      	ldr	r1, [r4, #0]
 8010472:	68a0      	ldr	r0, [r4, #8]
 8010474:	f004 f9b6 	bl	80147e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
 8010478:	6821      	ldr	r1, [r4, #0]
 801047a:	4620      	mov	r0, r4
}
 801047c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 8010480:	f004 b9b0 	b.w	80147e4 <mpool_free>

08010484 <tTapeDelay_tick>:
{
 8010484:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 8010486:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 8010488:	edd4 7a01 	vldr	s15, [r4, #4]
 801048c:	6962      	ldr	r2, [r4, #20]
 801048e:	68a3      	ldr	r3, [r4, #8]
 8010490:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010498:	ed83 0a00 	vstr	s0, [r3]
    int idx =  (int) d->idx;
 801049c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80104a0:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 80104a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80104a6:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
 80104aa:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
 80104ae:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80104b2:	3001      	adds	r0, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 80104b4:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
 80104b8:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80104bc:	4298      	cmp	r0, r3
 80104be:	bf08      	it	eq
 80104c0:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80104c2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80104c6:	6160      	str	r0, [r4, #20]
 80104c8:	1e58      	subs	r0, r3, #1
 80104ca:	4410      	add	r0, r2
 80104cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80104d0:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 80104d4:	fbbe f2f3 	udiv	r2, lr, r3
 80104d8:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
 80104dc:	fbbc f2f3 	udiv	r2, ip, r3
 80104e0:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80104e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80104e8:	fbb0 f2f3 	udiv	r2, r0, r3
 80104ec:	fb03 0012 	mls	r0, r3, r2, r0
 80104f0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80104f4:	edde 1a00 	vldr	s3, [lr]
 80104f8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80104fc:	ed9c 1a00 	vldr	s2, [ip]
 8010500:	ed91 0a00 	vldr	s0, [r1]
 8010504:	f003 fff0 	bl	80144e8 <LEAF_interpolate_hermite_x>
    Lfloat diff = (d->inPoint - d->idx);
 8010508:	edd4 7a05 	vldr	s15, [r4, #20]
 801050c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8010510:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 8010514:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010518:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 801051c:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
 8010520:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
 8010524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052c:	d506      	bpl.n	801053c <tTapeDelay_tick+0xb8>
 801052e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053a:	d4f8      	bmi.n	801052e <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 801053c:	edd4 5a07 	vldr	s11, [r4, #28]
 8010540:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010544:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010548:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801054c:	ee36 6a05 	vadd.f32	s12, s12, s10
    d->idx += d->inc;
 8010550:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 8010554:	ed84 6a08 	vstr	s12, [r4, #32]
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8010558:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
 801055c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8010560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010564:	db08      	blt.n	8010578 <tTapeDelay_tick+0xf4>
 8010566:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801056a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010572:	daf8      	bge.n	8010566 <tTapeDelay_tick+0xe2>
 8010574:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8010578:	bd10      	pop	{r4, pc}
 801057a:	bf00      	nop

0801057c <tTapeDelay_setDelay>:
{
 801057c:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801057e:	6804      	ldr	r4, [r0, #0]
{
 8010580:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 8010584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010588:	edd4 7a06 	vldr	s15, [r4, #24]
 801058c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8010590:	f003 fdea 	bl	8014168 <LEAF_clip>
 8010594:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop

0801059c <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 801059c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 80105a0:	1e16      	subs	r6, r2, #0
{
 80105a2:	b083      	sub	sp, #12
 80105a4:	460c      	mov	r4, r1
 80105a6:	4607      	mov	r7, r0
    if (extraQuality) offset = 6;
 80105a8:	bf0b      	itete	eq
 80105aa:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
 80105ae:	f04f 0805 	movne.w	r8, #5
 80105b2:	f04f 0900 	moveq.w	r9, #0
 80105b6:	f04f 0906 	movne.w	r9, #6
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 80105ba:	2902      	cmp	r1, #2
 80105bc:	d00d      	beq.n	80105da <tOversampler_init+0x3e>
 80105be:	2904      	cmp	r1, #4
 80105c0:	d00b      	beq.n	80105da <tOversampler_init+0x3e>
 80105c2:	2920      	cmp	r1, #32
 80105c4:	dc3b      	bgt.n	801063e <tOversampler_init+0xa2>
 80105c6:	2907      	cmp	r1, #7
 80105c8:	dc02      	bgt.n	80105d0 <tOversampler_init+0x34>
}
 80105ca:	b003      	add	sp, #12
 80105cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105d0:	3908      	subs	r1, #8
 80105d2:	4a1d      	ldr	r2, [pc, #116]	; (8010648 <tOversampler_init+0xac>)
 80105d4:	40ca      	lsrs	r2, r1
 80105d6:	07d2      	lsls	r2, r2, #31
 80105d8:	d5f7      	bpl.n	80105ca <tOversampler_init+0x2e>
    _tMempool* m = *mp;
 80105da:	6999      	ldr	r1, [r3, #24]
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 80105dc:	2028      	movs	r0, #40	; 0x28
 80105de:	9101      	str	r1, [sp, #4]
 80105e0:	f004 f83e 	bl	8014660 <mpool_alloc>
        os->mempool = m;
 80105e4:	9901      	ldr	r1, [sp, #4]
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
 80105e6:	ee07 4a90 	vmov	s15, r4
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 80105ea:	6038      	str	r0, [r7, #0]
 80105ec:	4605      	mov	r5, r0
        os->offset = offset;
 80105ee:	f8c0 9010 	str.w	r9, [r0, #16]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
 80105f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->allowHighQuality = extraQuality;
 80105f6:	7206      	strb	r6, [r0, #8]
        os->ratio = os->maxRatio;
 80105f8:	60c4      	str	r4, [r0, #12]
        os->maxRatio = maxRatio;
 80105fa:	e9c0 1400 	strd	r1, r4, [r0]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
 80105fe:	f008 ffc3 	bl	8019588 <log2f>
 8010602:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8010606:	4a11      	ldr	r2, [pc, #68]	; (801064c <tOversampler_init+0xb0>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 8010608:	9901      	ldr	r1, [sp, #4]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
 801060a:	ee17 3a90 	vmov	r3, s15
 801060e:	4443      	add	r3, r8
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8010610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
 8010614:	4a0e      	ldr	r2, [pc, #56]	; (8010650 <tOversampler_init+0xb4>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8010616:	6228      	str	r0, [r5, #32]
        os->phaseLength = os->numTaps / os->ratio;
 8010618:	fbb0 f4f4 	udiv	r4, r0, r4
 801061c:	626c      	str	r4, [r5, #36]	; 0x24
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 801061e:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
 8010620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010624:	616b      	str	r3, [r5, #20]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 8010626:	f004 f81b 	bl	8014660 <mpool_alloc>
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 801062a:	6a2b      	ldr	r3, [r5, #32]
 801062c:	9901      	ldr	r1, [sp, #4]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 801062e:	61a8      	str	r0, [r5, #24]
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 8010630:	00d8      	lsls	r0, r3, #3
 8010632:	f004 f815 	bl	8014660 <mpool_alloc>
 8010636:	61e8      	str	r0, [r5, #28]
}
 8010638:	b003      	add	sp, #12
 801063a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801063e:	2940      	cmp	r1, #64	; 0x40
 8010640:	d0cb      	beq.n	80105da <tOversampler_init+0x3e>
 8010642:	b003      	add	sp, #12
 8010644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010648:	01000101 	.word	0x01000101
 801064c:	08029d88 	.word	0x08029d88
 8010650:	20000948 	.word	0x20000948

08010654 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#else
void tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#endif
{
 8010654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 8010658:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d05d      	beq.n	801071c <tOversampler_upsample+0xc8>
    {
        output[0] = input;
        return;
    }
    
    Lfloat *pState = os->upState;                 /* State pointer */
 8010660:	69be      	ldr	r6, [r7, #24]
    Lfloat *pStateCur;
    Lfloat *ptr1;                               /* Temporary pointer for state buffer */
    Lfloat *ptr2;                               /* Temporary pointer for coefficient buffer */
    Lfloat sum0;                                /* Accumulators */
    uint_fast16_t i, tapCnt;                    /* Loop counters */
    uint_fast16_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 8010662:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8010664:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 8010668:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 801066c:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8010670:	f8d7 e00c 	ldr.w	lr, [r7, #12]
    
    while (i > 0U)
 8010674:	f1be 0f00 	cmp.w	lr, #0
 8010678:	d035      	beq.n	80106e6 <tOversampler_upsample+0x92>
 801067a:	4674      	mov	r4, lr
    j = 1U;
 801067c:	f04f 0c01 	mov.w	ip, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 8010680:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8010724 <tOversampler_upsample+0xd0>
        ptr2 = pCoeffs + (os->ratio - j);
 8010684:	eba4 030c 	sub.w	r3, r4, ip
 8010688:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 801068c:	b31d      	cbz	r5, 80106d6 <tOversampler_upsample+0x82>
 801068e:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 8010690:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8010694:	d134      	bne.n	8010700 <tOversampler_upsample+0xac>
 8010696:	462a      	mov	r2, r5
        ptr1 = pState;
 8010698:	4630      	mov	r0, r6
        sum0 = 0.0f;
 801069a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010724 <tOversampler_upsample+0xd0>
            sum0 += *ptr1++ * *ptr2;
 801069e:	ecf3 6a01 	vldmia	r3!, {s13}
        while (tapCnt > 0U)
 80106a2:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80106a4:	ecb0 7a01 	vldmia	r0!, {s14}
 80106a8:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80106ac:	d1f7      	bne.n	801069e <tOversampler_upsample+0x4a>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 80106ae:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 80106b2:	45e6      	cmp	lr, ip
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 80106b4:	f10c 0301 	add.w	r3, ip, #1
        *output++ = sum0 * os->ratio;
 80106b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80106bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106c0:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 80106c4:	d00f      	beq.n	80106e6 <tOversampler_upsample+0x92>
        ptr2 = pCoeffs + (os->ratio - j);
 80106c6:	68fc      	ldr	r4, [r7, #12]
 80106c8:	469c      	mov	ip, r3
 80106ca:	eba4 030c 	sub.w	r3, r4, ip
 80106ce:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 80106d2:	2d00      	cmp	r5, #0
 80106d4:	d1db      	bne.n	801068e <tOversampler_upsample+0x3a>
 80106d6:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 80106da:	45e6      	cmp	lr, ip
        j++;
 80106dc:	f10c 0301 	add.w	r3, ip, #1
        *output++ = sum0 * os->ratio;
 80106e0:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 80106e4:	d1ef      	bne.n	80106c6 <tOversampler_upsample+0x72>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80106e6:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 80106e8:	f106 0204 	add.w	r2, r6, #4
    pStateCur = os->upState;
 80106ec:	69b9      	ldr	r1, [r7, #24]
    while (tapCnt > 0U)
 80106ee:	d005      	beq.n	80106fc <tOversampler_upsample+0xa8>
    {
        *pStateCur++ = *pState++;
 80106f0:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 80106f4:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80106f6:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 80106fa:	d1f9      	bne.n	80106f0 <tOversampler_upsample+0x9c>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 80106fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 8010700:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010724 <tOversampler_upsample+0xd0>
            ptr2 += os->ratio;
 8010704:	462a      	mov	r2, r5
        ptr1 = pState;
 8010706:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 8010708:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 801070c:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801070e:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 8010712:	444b      	add	r3, r9
            sum0 += *ptr1++ * *ptr2;
 8010714:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8010718:	d1f6      	bne.n	8010708 <tOversampler_upsample+0xb4>
 801071a:	e7c8      	b.n	80106ae <tOversampler_upsample+0x5a>
        output[0] = input;
 801071c:	ed81 0a00 	vstr	s0, [r1]
}
 8010720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010724:	00000000 	.word	0x00000000

08010728 <tOversampler_downsample>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#else
Lfloat tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#endif
{
 8010728:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 801072a:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 801072c:	68f2      	ldr	r2, [r6, #12]
 801072e:	2a01      	cmp	r2, #1
 8010730:	d028      	beq.n	8010784 <tOversampler_downsample+0x5c>
    Lfloat *pStateCur;                          /* Points to the current sample of the state */
    Lfloat *px0;                                /* Temporary pointer for state buffer */
    Lfloat *pb;                                 /* Temporary pointer for coefficient buffer */
    Lfloat x0, c0;                              /* Temporary variables to hold state and coefficient values */
    Lfloat acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 8010732:	6a33      	ldr	r3, [r6, #32]
    uint32_t i, tapCnt;
    Lfloat output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8010734:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    Lfloat *pState = os->downState;                 /* State pointer */
 8010738:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 801073a:	4418      	add	r0, r3
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 801073c:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 801073e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 8010742:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 8010746:	3a01      	subs	r2, #1
        *pStateCur++ = *input++;
 8010748:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 801074c:	d1f9      	bne.n	8010742 <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801074e:	b1eb      	cbz	r3, 801078c <tOversampler_downsample+0x64>
 8010750:	461a      	mov	r2, r3
    acc0 = 0.0f;
 8010752:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80107a0 <tOversampler_downsample+0x78>
    px0 = pState;
 8010756:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8010758:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 801075c:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
 801075e:	ecf1 7a01 	vldmia	r1!, {s15}
 8010762:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8010766:	d1f7      	bne.n	8010758 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 8010768:	68f2      	ldr	r2, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801076a:	3b01      	subs	r3, #1
    pStateCur = os->downState;
 801076c:	69f1      	ldr	r1, [r6, #28]
    pState = pState + os->ratio;
 801076e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    while (tapCnt > 0U)
 8010772:	d005      	beq.n	8010780 <tOversampler_downsample+0x58>
    {
        *pStateCur++ = *pState++;
 8010774:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 8010778:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801077a:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 801077e:	d1f9      	bne.n	8010774 <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8010780:	bc70      	pop	{r4, r5, r6}
 8010782:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 8010784:	ed91 0a00 	vldr	s0, [r1]
}
 8010788:	bc70      	pop	{r4, r5, r6}
 801078a:	4770      	bx	lr
    pState = pState + os->ratio;
 801078c:	68f2      	ldr	r2, [r6, #12]
    tapCnt = (numTaps - 1U);
 801078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 8010792:	69f1      	ldr	r1, [r6, #28]
    acc0 = 0.0f;
 8010794:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80107a0 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 8010798:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    while (tapCnt > 0U)
 801079c:	e7ea      	b.n	8010774 <tOversampler_downsample+0x4c>
 801079e:	bf00      	nop
 80107a0:	00000000 	.word	0x00000000

080107a4 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 80107a6:	698f      	ldr	r7, [r1, #24]
{
 80107a8:	4606      	mov	r6, r0
 80107aa:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 80107ac:	2020      	movs	r0, #32
 80107ae:	4639      	mov	r1, r7
 80107b0:	f003 ff56 	bl	8014660 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 80107b4:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 80107b8:	4a10      	ldr	r2, [pc, #64]	; (80107fc <tCrusher_init+0x58>)
    c->op = 4;
 80107ba:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 80107bc:	6030      	str	r0, [r6, #0]
 80107be:	4604      	mov	r4, r0
    c->op = 4;
 80107c0:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 80107c2:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 80107c4:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 80107c6:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 80107c8:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80107ca:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 80107cc:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80107ce:	4629      	mov	r1, r5
 80107d0:	f003 ff46 	bl	8014660 <mpool_alloc>
    s->invRatio = 1.0f;
 80107d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 80107d8:	2200      	movs	r2, #0
    s->count = 0;
 80107da:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80107dc:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80107de:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010800 <tCrusher_init+0x5c>
    s->mempool = m;
 80107e2:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 80107e4:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 80107e6:	6082      	str	r2, [r0, #8]
    s->count = 0;
 80107e8:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80107ea:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010804 <tCrusher_init+0x60>
 80107ee:	edd4 6a03 	vldr	s13, [r4, #12]
 80107f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80107f6:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80107fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107fc:	3951b717 	.word	0x3951b717
 8010800:	3912ccf6 	.word	0x3912ccf6
 8010804:	3e99999a 	.word	0x3e99999a

08010808 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 8010808:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010884 <tCrusher_tick+0x7c>
 801080c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8010810:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 8010812:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 8010816:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 8010818:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 801081c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8010820:	6960      	ldr	r0, [r4, #20]
 8010822:	05c0      	lsls	r0, r0, #23
 8010824:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010828:	f003 fc98 	bl	801415c <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 801082c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8010830:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8010834:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010838:	f003 fc96 	bl	8014168 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 801083c:	edd4 0a04 	vldr	s1, [r4, #16]
 8010840:	f003 fc7a 	bl	8014138 <LEAF_round>
    _tSampleReducer* s = *sr;
 8010844:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 8010846:	68da      	ldr	r2, [r3, #12]
 8010848:	edd3 7a01 	vldr	s15, [r3, #4]
 801084c:	ee07 2a10 	vmov	s14, r2
 8010850:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	dc08      	bgt.n	8010870 <tCrusher_tick+0x68>
    s->count++;
 801085e:	3201      	adds	r2, #1
    return s->hold;
 8010860:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 8010864:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 8010866:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 801086a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801086e:	bd10      	pop	{r4, pc}
        s->hold = input;
 8010870:	2201      	movs	r2, #1
 8010872:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 8010876:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 8010878:	edd4 7a06 	vldr	s15, [r4, #24]
}
 801087c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010880:	bd10      	pop	{r4, pc}
 8010882:	bf00      	nop
 8010884:	459c4000 	.word	0x459c4000

08010888 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 8010888:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 801088c:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 801088e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010892:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010896:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801089a:	4770      	bx	lr

0801089c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 801089c:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 80108a0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80108d4 <tCrusher_setQuality+0x38>
 80108a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 80108a8:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 80108aa:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 80108ac:	f003 fc5c 	bl	8014168 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 80108b0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80108d8 <tCrusher_setQuality+0x3c>
 80108b4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80108dc <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 80108b8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80108e0 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 80108bc:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 80108c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80108e4 <tCrusher_setQuality+0x48>
 80108c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 80108c8:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 80108cc:	ed84 7a06 	vstr	s14, [r4, #24]
}
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	bf00      	nop
 80108d4:	00000000 	.word	0x00000000
 80108d8:	459c4000 	.word	0x459c4000
 80108dc:	3c23d70a 	.word	0x3c23d70a
 80108e0:	3912ccf6 	.word	0x3912ccf6
 80108e4:	3e99999a 	.word	0x3e99999a

080108e8 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 80108e8:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 80108ea:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80108ee:	4770      	bx	lr

080108f0 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80108f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
 80108f4:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 80108f6:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80108fa:	eeb4 0a67 	vcmp.f32	s0, s15
 80108fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010902:	d809      	bhi.n	8010918 <tCrusher_setSamplingRatio+0x28>
 8010904:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090c:	db04      	blt.n	8010918 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 801090e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 8010912:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8010914:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop

0801091c <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 801091c:	b570      	push	{r4, r5, r6, lr}
 801091e:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010922:	698d      	ldr	r5, [r1, #24]
{
 8010924:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 8010926:	206c      	movs	r0, #108	; 0x6c
 8010928:	4629      	mov	r1, r5
 801092a:	f003 fe99 	bl	8014660 <mpool_alloc>
 801092e:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8010930:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 8010932:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 8010936:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 8010938:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 801093a:	ed93 8a00 	vldr	s16, [r3]
 801093e:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 8010942:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8010946:	f008 fd45 	bl	80193d4 <expf>
 801094a:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 801094e:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8010952:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010956:	f008 fd3d 	bl	80193d4 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 801095a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
 801095e:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 8010960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 8010964:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 8010966:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
 8010968:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 801096a:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 801096c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
 8010970:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 8010972:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 8010974:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 8010976:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 8010978:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 801097a:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 801097c:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 801097e:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 8010980:	4905      	ldr	r1, [pc, #20]	; (8010998 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8010982:	4b06      	ldr	r3, [pc, #24]	; (801099c <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 8010984:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 8010988:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 801098a:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 801098c:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 801098e:	6223      	str	r3, [r4, #32]
}
 8010990:	ecbd 8b02 	vpop	{d8}
 8010994:	bd70      	pop	{r4, r5, r6, pc}
 8010996:	bf00      	nop
 8010998:	40400000 	.word	0x40400000
 801099c:	3e2aaaab 	.word	0x3e2aaaab

080109a0 <tCompressor_tickWithTableHardKnee>:
    return attenuation * in;
}

//requires tables to be set with set function
Lfloat tCompressor_tickWithTableHardKnee(tCompressor* const comp, Lfloat in)
{
 80109a0:	b510      	push	{r4, lr}
    _tCompressor* c = *comp;
 80109a2:	6804      	ldr	r4, [r0, #0]
{
 80109a4:	ed2d 8b02 	vpush	{d8}

    Lfloat slope, overshoot;

    in = fastabsf(in);
 80109a8:	f003 fa9c 	bl	8013ee4 <fastabsf>
 80109ac:	eeb0 8a40 	vmov.f32	s16, s0
    int inAmpIndex = LEAF_clip (0, (in * c->atodbScalar) - c->atodbOffset, c->atodbTableSizeMinus1);
 80109b0:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 80109b4:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 80109b8:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010a80 <tCompressor_tickWithTableHardKnee+0xe0>
 80109bc:	eed7 0a88 	vfnms.f32	s1, s15, s16
 80109c0:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80109c4:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 80109c8:	f003 fbce 	bl	8014168 <LEAF_clip>
 80109cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    Lfloat in_db = c->atodbTable[inAmpIndex];
 80109d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

    c->y_T[1] = c->y_T[0];

    slope = 1.0f - c->invR; // feed-forward topology;

    overshoot = in_db - c->T;
 80109d2:	ed94 7a03 	vldr	s14, [r4, #12]
    Lfloat in_db = c->atodbTable[inAmpIndex];
 80109d6:	ee10 2a10 	vmov	r2, s0
    c->y_T[1] = c->y_T[0];
 80109da:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    slope = 1.0f - c->invR; // feed-forward topology;
 80109de:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat in_db = c->atodbTable[inAmpIndex];
 80109e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80109e6:	edd3 7a00 	vldr	s15, [r3]
    c->y_T[1] = c->y_T[0];
 80109ea:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    overshoot = in_db - c->T;
 80109ee:	ee77 7ac7 	vsub.f32	s15, s15, s14

  // simpler hard-knee version (more efficient)
    if (overshoot <= 0.0f)
 80109f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80109f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fa:	d93c      	bls.n	8010a76 <tCompressor_tickWithTableHardKnee+0xd6>
    slope = 1.0f - c->invR; // feed-forward topology;
 80109fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        c->isActive = 0;
    }
    else
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
 8010a00:	2301      	movs	r3, #1
    slope = 1.0f - c->invR; // feed-forward topology;
 8010a02:	ee37 7a46 	vsub.f32	s14, s14, s12
        out_db = in_db + slope * overshoot;
 8010a06:	ee27 7a27 	vmul.f32	s14, s14, s15
    }

    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8010a0a:	eef4 6ac7 	vcmpe.f32	s13, s14
    c->x_T[0] = out_db - in_db;
 8010a0e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8010a12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuationDb = c->M - c->y_T[0];
   // tempdbToA = dbtoa(attenuationDb);
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 8010a16:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8010a1a:	6463      	str	r3, [r4, #68]	; 0x44
    if (c->x_T[0] > c->y_T[1])
 8010a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 8010a20:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8010a80 <tCompressor_tickWithTableHardKnee+0xe0>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8010a24:	bf4c      	ite	mi
 8010a26:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 8010a2a:	ed94 6a02 	vldrpl	s12, [r4, #8]
 8010a2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010a32:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat attenuationDb = c->M - c->y_T[0];
 8010a36:	ed94 7a06 	vldr	s14, [r4, #24]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 8010a3a:	eee6 7a86 	vfma.f32	s15, s13, s12
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 8010a3e:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 8010a42:	ed94 6a1a 	vldr	s12, [r4, #104]	; 0x68
 8010a46:	eeb8 1ac6 	vcvt.f32.s32	s2, s12
    Lfloat attenuationDb = c->M - c->y_T[0];
 8010a4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a4e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 8010a52:	eed6 0a87 	vfnms.f32	s1, s13, s14
 8010a56:	f003 fb87 	bl	8014168 <LEAF_clip>
 8010a5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    Lfloat attenuation = c->dbtoaTable[attenuationDbIndex];
 8010a5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010a60:	ee10 2a10 	vmov	r2, s0
 8010a64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    return attenuation * in;
 8010a68:	ed93 0a00 	vldr	s0, [r3]
}
 8010a6c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010a70:	ecbd 8b02 	vpop	{d8}
 8010a74:	bd10      	pop	{r4, pc}
 8010a76:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8010a80 <tCompressor_tickWithTableHardKnee+0xe0>
        c->isActive = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e7c5      	b.n	8010a0a <tCompressor_tickWithTableHardKnee+0x6a>
 8010a7e:	bf00      	nop
 8010a80:	00000000 	.word	0x00000000

08010a84 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 8010a84:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010a86:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
 8010a8a:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010a8c:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010a90:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
 8010a94:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
 8010a9a:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
 8010a9c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 8010a9e:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
 8010aa0:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010aa2:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 8010aa6:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010aa8:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010aac:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010ab0:	ee07 3a90 	vmov	s15, r3
 8010ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010ab8:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010abc:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010ac0:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010ac4:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010ac8:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop

08010ad0 <tCompressor_setSampleRate>:
    c->tauRelease = fastExp4(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 8010ad0:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 8010ad2:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 8010ad6:	4770      	bx	lr

08010ad8 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
 8010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010ada:	4614      	mov	r4, r2
{
 8010adc:	4606      	mov	r6, r0
 8010ade:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010ae0:	2018      	movs	r0, #24
{
 8010ae2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010ae6:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 8010aea:	b083      	sub	sp, #12
 8010aec:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010af0:	4639      	mov	r1, r7
{
 8010af2:	eeb0 8a41 	vmov.f32	s16, s2
 8010af6:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010afa:	f003 fdb1 	bl	8014660 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010afe:	4621      	mov	r1, r4
    p->curr=0.0f;
 8010b00:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010b02:	4604      	mov	r4, r0
 8010b04:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010b06:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010b0a:	3014      	adds	r0, #20
    p->mempool = m;
 8010b0c:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8010b10:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8010b14:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010b16:	f7ff f95f 	bl	800fdd8 <tPowerFollower_initToPool>
    p->mode=mode;
 8010b1a:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8010b1c:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8010b20:	b003      	add	sp, #12
 8010b22:	ecbd 8b02 	vpop	{d8}
 8010b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b28 <tFeedbackLeveler_initToPool>:
{
 8010b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8010b2a:	6817      	ldr	r7, [r2, #0]
{
 8010b2c:	4614      	mov	r4, r2
 8010b2e:	4606      	mov	r6, r0
 8010b30:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010b32:	2018      	movs	r0, #24
 8010b34:	4639      	mov	r1, r7
{
 8010b36:	ed2d 8b02 	vpush	{d8}
 8010b3a:	eef0 8a40 	vmov.f32	s17, s0
 8010b3e:	b083      	sub	sp, #12
 8010b40:	eeb0 8a41 	vmov.f32	s16, s2
 8010b44:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010b48:	f003 fd8a 	bl	8014660 <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010b4c:	4621      	mov	r1, r4
    p->curr=0.0f;
 8010b4e:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010b50:	4604      	mov	r4, r0
 8010b52:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010b54:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010b58:	3014      	adds	r0, #20
    p->mempool = m;
 8010b5a:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8010b5e:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8010b62:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010b64:	f7ff f938 	bl	800fdd8 <tPowerFollower_initToPool>
    p->mode=mode;
 8010b68:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8010b6a:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8010b6e:	b003      	add	sp, #12
 8010b70:	ecbd 8b02 	vpop	{d8}
 8010b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b76:	bf00      	nop

08010b78 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 8010b78:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 8010b7a:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 8010b7c:	f104 0014 	add.w	r0, r4, #20
 8010b80:	f7ff f944 	bl	800fe0c <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 8010b84:	6821      	ldr	r1, [r4, #0]
 8010b86:	4620      	mov	r0, r4
}
 8010b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8010b8c:	f003 be2a 	b.w	80147e4 <mpool_free>

08010b90 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 8010b90:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 8010b92:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8010b96:	4770      	bx	lr

08010b98 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8010b98:	6800      	ldr	r0, [r0, #0]
 8010b9a:	3014      	adds	r0, #20
 8010b9c:	f7ff b93a 	b.w	800fe14 <tPowerFollower_setFactor>

08010ba0 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8010ba0:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8010ba2:	60d9      	str	r1, [r3, #12]
}
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop

08010ba8 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 8010ba8:	b510      	push	{r4, lr}
 8010baa:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8010bae:	6804      	ldr	r4, [r0, #0]
{
 8010bb0:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010bb4:	f104 0014 	add.w	r0, r4, #20
 8010bb8:	f7ff f93e 	bl	800fe38 <tPowerFollower_tick>
 8010bbc:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010bc0:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010bc2:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010bc6:	b91b      	cbnz	r3, 8010bd0 <tFeedbackLeveler_tick+0x28>
 8010bc8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010bec <tFeedbackLeveler_tick+0x44>
 8010bcc:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8010bd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bd4:	edd4 6a02 	vldr	s13, [r4, #8]
 8010bd8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010bdc:	ee27 0a88 	vmul.f32	s0, s15, s16
 8010be0:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8010be4:	ecbd 8b02 	vpop	{d8}
 8010be8:	bd10      	pop	{r4, pc}
 8010bea:	bf00      	nop
 8010bec:	00000000 	.word	0x00000000

08010bf0 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8010bf0:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 8010bf2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8010bf6:	4770      	bx	lr

08010bf8 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010bfe:	699e      	ldr	r6, [r3, #24]
{
 8010c00:	4614      	mov	r4, r2
 8010c02:	4607      	mov	r7, r0
 8010c04:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010c06:	206c      	movs	r0, #108	; 0x6c
 8010c08:	4631      	mov	r1, r6
{
 8010c0a:	eef0 9a40 	vmov.f32	s19, s0
 8010c0e:	eeb0 9a60 	vmov.f32	s18, s1
 8010c12:	eef0 8a61 	vmov.f32	s17, s3
 8010c16:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010c1a:	f003 fd21 	bl	8014660 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c1e:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010c22:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010c24:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8010c26:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c28:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8010c2c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010cb8 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8010c30:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 8010c32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010c36:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010c38:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c3c:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
 8010c40:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 8010c42:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
 8010c44:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 8010c48:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8010cbc <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c52:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
 8010c56:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c5a:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 8010c5e:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 8010c62:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
 8010c66:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 8010c6a:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
 8010c6e:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 8010c72:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 8010c76:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
 8010c78:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
 8010c7c:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
 8010c80:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
 8010c84:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010c88:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010c8c:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010c90:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010c94:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010c98:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010c9c:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010ca0:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010ca4:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010ca8:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	6683      	str	r3, [r0, #104]	; 0x68
}
 8010cb0:	ecbd 8b04 	vpop	{d8-d9}
 8010cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	4479ffff 	.word	0x4479ffff
 8010cbc:	00000000 	.word	0x00000000

08010cc0 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8010cc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010cc4:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010cc6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 8010cce:	bf48      	it	mi
 8010cd0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010ce4 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010cd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8010cd8:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010cdc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	3c23d70a 	.word	0x3c23d70a

08010ce8 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8010ce8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010cec:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010cee:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 8010cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8010cf6:	bf48      	it	mi
 8010cf8:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010d0c <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010cfc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8010d00:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010d04:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	3c23d70a 	.word	0x3c23d70a

08010d10 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010d10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010d14:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010d28 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
 8010d18:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010d1a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8010d1e:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8010d22:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 8010d26:	4770      	bx	lr
 8010d28:	00000000 	.word	0x00000000

08010d2c <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8010d2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010d30:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010d32:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8010d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 8010d3a:	bf48      	it	mi
 8010d3c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010d50 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010d40:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8010d44:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010d48:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	3c23d70a 	.word	0x3c23d70a

08010d54 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 8010d54:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8010d56:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8010d58:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010d74 <tADSRT_setLeakFactor+0x20>
 8010d5c:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
 8010d60:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8010d64:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010d68:	f008 fdae 	bl	80198c8 <powf>
 8010d6c:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	bf00      	nop
 8010d74:	472c4400 	.word	0x472c4400

08010d78 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010d78:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8010d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d7c:	b162      	cbz	r2, 8010d98 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 8010d7e:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 8010d80:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 8010d82:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8010d84:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
 8010d86:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 8010d88:	2200      	movs	r2, #0
 8010d8a:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8010d8c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
 8010d90:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 8010d92:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 8010d94:	659a      	str	r2, [r3, #88]	; 0x58
}
 8010d96:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8010d98:	2101      	movs	r1, #1
 8010d9a:	e7f5      	b.n	8010d88 <tADSRT_on+0x10>

08010d9c <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010d9c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8010d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010da0:	b11a      	cbz	r2, 8010daa <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8010da2:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8010da4:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8010da6:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 8010da8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 8010daa:	4770      	bx	lr

08010dac <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010dac:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 8010dae:	2100      	movs	r1, #0
    adsr->next = 0.0f;
 8010db0:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
 8010db2:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 8010db4:	619a      	str	r2, [r3, #24]
}
 8010db6:	4770      	bx	lr

08010db8 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 8010db8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8010dba:	6804      	ldr	r4, [r0, #0]
{
 8010dbc:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8010dc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	2b04      	cmp	r3, #4
 8010dc6:	f200 8154 	bhi.w	8011072 <tADSRT_tick+0x2ba>
 8010dca:	e8df f003 	tbb	[pc, r3]
 8010dce:	4d1f      	.short	0x4d1f
 8010dd0:	6f3a      	.short	0x6f3a
 8010dd2:	03          	.byte	0x03
 8010dd3:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8010dd4:	edd4 7a03 	vldr	s15, [r4, #12]
 8010dd8:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 8010ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010de0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de8:	dd7d      	ble.n	8010ee6 <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8010dea:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8011078 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
 8010dee:	2301      	movs	r3, #1
 8010df0:	eeb0 0a67 	vmov.f32	s0, s15
 8010df4:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010df6:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8010dfa:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8010dfe:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010e02:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8010e06:	ecbd 8b02 	vpop	{d8}
 8010e0a:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8010e0c:	edd4 7a03 	vldr	s15, [r4, #12]
 8010e10:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8010e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e18:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e20:	f340 808b 	ble.w	8010f3a <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
 8010e24:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8010e26:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010e2a:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 8010e2c:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 8010e30:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010e34:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010e38:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 8010e3c:	ecbd 8b02 	vpop	{d8}
 8010e40:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 8010e42:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8010e46:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 8010e4a:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8010e4e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010e52:	edd4 7a07 	vldr	s15, [r4, #28]
 8010e56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010e5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e5e:	ed84 0a06 	vstr	s0, [r4, #24]
}
 8010e62:	ecbd 8b02 	vpop	{d8}
 8010e66:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8010e68:	edd4 7a03 	vldr	s15, [r4, #12]
 8010e6c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8010e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e74:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7c:	f340 808b 	ble.w	8010f96 <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
 8010e80:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 8010e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 8010e88:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8010e8c:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
 8010e8e:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
 8010e90:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 8010e94:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 8010e96:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 8010e9a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8010e9e:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010ea2:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8010ea6:	ecbd 8b02 	vpop	{d8}
 8010eaa:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8010eac:	edd4 7a03 	vldr	s15, [r4, #12]
 8010eb0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 8010eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb8:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	f340 809e 	ble.w	8011000 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
 8010ec4:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8011078 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	eeb0 0a67 	vmov.f32	s0, s15
 8010ece:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010ed0:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 8010ed4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010ed8:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010edc:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
 8010ee0:	ecbd 8b02 	vpop	{d8}
 8010ee4:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 8010eea:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010eee:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010ef2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010efa:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	f100 80b2 	bmi.w	801106a <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010f06:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010f0a:	6862      	ldr	r2, [r4, #4]
 8010f0c:	ee17 3a90 	vmov	r3, s15
 8010f10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f14:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010f18:	ee16 3a90 	vmov	r3, s13
 8010f1c:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8010f20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f24:	ed92 0a00 	vldr	s0, [r2]
 8010f28:	f003 fb00 	bl	801452c <LEAF_interpolation_linear>
 8010f2c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8010f30:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010f34:	ed84 0a06 	vstr	s0, [r4, #24]
 8010f38:	e75f      	b.n	8010dfa <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8010f3e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f42:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 8010f46:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 8010f4e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f56:	f100 8084 	bmi.w	8011062 <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8010f5a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010f5e:	6862      	ldr	r2, [r4, #4]
 8010f60:	ee17 3a90 	vmov	r3, s15
 8010f64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f68:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8010f6c:	ee16 3a90 	vmov	r3, s13
 8010f70:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 8010f74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f78:	ed92 0a00 	vldr	s0, [r2]
 8010f7c:	f003 fad6 	bl	801452c <LEAF_interpolation_linear>
 8010f80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 8010f84:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8010f88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010f8c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010f90:	ed84 0a06 	vstr	s0, [r4, #24]
 8010f94:	e74c      	b.n	8010e30 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8010f9a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010f9e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010fa2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010faa:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	d452      	bmi.n	801105a <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8010fb4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010fb8:	6862      	ldr	r2, [r4, #4]
 8010fba:	ee17 3a90 	vmov	r3, s15
 8010fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fc2:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 8010fc6:	ee16 3a90 	vmov	r3, s13
 8010fca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010fce:	ed92 0a00 	vldr	s0, [r2]
 8010fd2:	f003 faab 	bl	801452c <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fda:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8010fde:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010fe2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010fe6:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
 8010fea:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010fee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010ff2:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010ff6:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010ffa:	ed84 0a06 	vstr	s0, [r4, #24]
 8010ffe:	e74c      	b.n	8010e9a <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8011000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8011004:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8011008:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 801100c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8011010:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8011014:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8011018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101c:	d419      	bmi.n	8011052 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 801101e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011022:	6862      	ldr	r2, [r4, #4]
 8011024:	ee17 3a90 	vmov	r3, s15
 8011028:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801102c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8011030:	ee16 3a90 	vmov	r3, s13
 8011034:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8011038:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801103c:	ed92 0a00 	vldr	s0, [r2]
 8011040:	f003 fa74 	bl	801452c <LEAF_interpolation_linear>
 8011044:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 8011048:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 801104c:	ed84 0a06 	vstr	s0, [r4, #24]
 8011050:	e740      	b.n	8010ed4 <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8011052:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8011054:	eddf 0a08 	vldr	s1, [pc, #32]	; 8011078 <tADSRT_tick+0x2c0>
 8011058:	e7ea      	b.n	8011030 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801105a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 801105c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8011078 <tADSRT_tick+0x2c0>
 8011060:	e7b1      	b.n	8010fc6 <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8011062:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8011064:	eddf 0a04 	vldr	s1, [pc, #16]	; 8011078 <tADSRT_tick+0x2c0>
 8011068:	e780      	b.n	8010f6c <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801106a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 801106c:	eddf 0a02 	vldr	s1, [pc, #8]	; 8011078 <tADSRT_tick+0x2c0>
 8011070:	e752      	b.n	8010f18 <tADSRT_tick+0x160>
    return adsr->next;
 8011072:	ed94 0a06 	vldr	s0, [r4, #24]
 8011076:	e6c6      	b.n	8010e06 <tADSRT_tick+0x4e>
 8011078:	00000000 	.word	0x00000000

0801107c <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 801107c:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 801107e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011080:	3a01      	subs	r2, #1
 8011082:	2a04      	cmp	r2, #4
 8011084:	f200 80c7 	bhi.w	8011216 <tADSRT_tickNoInterp+0x19a>
 8011088:	e8df f002 	tbb	[pc, r2]
 801108c:	6533461b 	.word	0x6533461b
 8011090:	03          	.byte	0x03
 8011091:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8011092:	edd3 7a03 	vldr	s15, [r3, #12]
 8011096:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801109e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a6:	dd6e      	ble.n	8011186 <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
 80110a8:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 80110aa:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801121c <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
 80110ae:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 80110b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80110b4:	ed83 0a06 	vstr	s0, [r3, #24]
 80110b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110bc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
 80110c0:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 80110c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80110c6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80110ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	dd64      	ble.n	80111a2 <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
 80110d8:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 80110da:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
 80110de:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 80110e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80110e4:	ed83 0a06 	vstr	s0, [r3, #24]
 80110e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110ec:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 80110f0:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
 80110f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80110f6:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 80110fa:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 80110fe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
 8011102:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8011106:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
 801110a:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 801110e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011112:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8011116:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8011118:	edd3 7a03 	vldr	s15, [r3, #12]
 801111c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8011120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112c:	dd4b      	ble.n	80111c6 <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
 801112e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 8011132:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 8011136:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 801113a:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
 801113c:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
 801113e:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 8011142:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
 8011144:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8011148:	ed83 0a06 	vstr	s0, [r3, #24]
 801114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011150:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 8011154:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8011156:	edd3 7a03 	vldr	s15, [r3, #12]
 801115a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801115e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	dd46      	ble.n	80111fa <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
 801116c:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 801116e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801121c <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
 8011172:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8011174:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011178:	ed83 0a06 	vstr	s0, [r3, #24]
 801117c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011180:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
 8011184:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8011186:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 801118a:	685a      	ldr	r2, [r3, #4]
 801118c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8011190:	ee16 1a90 	vmov	r1, s13
 8011194:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011198:	ed92 0a00 	vldr	s0, [r2]
 801119c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80111a0:	e786      	b.n	80110b0 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 80111a2:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80111a6:	685a      	ldr	r2, [r3, #4]
 80111a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80111ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80111b0:	ee16 1a90 	vmov	r1, s13
 80111b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80111b8:	edd2 6a00 	vldr	s13, [r2]
 80111bc:	ee30 0a66 	vsub.f32	s0, s0, s13
 80111c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80111c4:	e78c      	b.n	80110e0 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 80111c6:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 80111ca:	685a      	ldr	r2, [r3, #4]
 80111cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111d0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80111d4:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 80111d8:	ee15 1a90 	vmov	r1, s11
 80111dc:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80111e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80111e8:	ee20 0a06 	vmul.f32	s0, s0, s12
 80111ec:	ed92 6a00 	vldr	s12, [r2]
 80111f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80111f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80111f8:	e7a4      	b.n	8011144 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 80111fa:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80111fe:	685a      	ldr	r2, [r3, #4]
 8011200:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8011204:	ee16 1a90 	vmov	r1, s13
 8011208:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801120c:	ed92 0a00 	vldr	s0, [r2]
 8011210:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011214:	e7ae      	b.n	8011174 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
 8011216:	ed93 0a06 	vldr	s0, [r3, #24]
 801121a:	4770      	bx	lr
 801121c:	00000000 	.word	0x00000000

08011220 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8011220:	b538      	push	{r3, r4, r5, lr}
 8011222:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8011226:	698d      	ldr	r5, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8011228:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801122a:	2014      	movs	r0, #20
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 801122c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011230:	4629      	mov	r1, r5
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8011232:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011236:	f003 fa13 	bl	8014660 <mpool_alloc>
 801123a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801123e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8011268 <tExpSmooth_init+0x48>
 8011242:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 8011244:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8011248:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 801124c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8011250:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
 8011252:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 8011256:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
 801125a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 801125e:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8011262:	ecbd 8b02 	vpop	{d8}
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	00000000 	.word	0x00000000

0801126c <tExpSmooth_initToPool>:
{
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011272:	680d      	ldr	r5, [r1, #0]
{
 8011274:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011276:	2014      	movs	r0, #20
{
 8011278:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801127c:	4629      	mov	r1, r5
{
 801127e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011282:	f003 f9ed 	bl	8014660 <mpool_alloc>
 8011286:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801128a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80112b4 <tExpSmooth_initToPool+0x48>
 801128e:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 8011290:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8011294:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8011298:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 801129c:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
 801129e:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 80112a2:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
 80112a6:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 80112aa:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
 80112ae:	ecbd 8b02 	vpop	{d8}
 80112b2:	bd38      	pop	{r3, r4, r5, pc}
 80112b4:	00000000 	.word	0x00000000

080112b8 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 80112b8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 80112ba:	6801      	ldr	r1, [r0, #0]
 80112bc:	f003 ba92 	b.w	80147e4 <mpool_free>

080112c0 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
 80112c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80112c4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80112e0 <tExpSmooth_setFactor+0x20>
 80112c8:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
 80112ca:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80112ce:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - smooth->factor;
 80112d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    smooth->factor = factor;
 80112d6:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 80112da:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80112de:	4770      	bx	lr
 80112e0:	00000000 	.word	0x00000000

080112e4 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 80112e4:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 80112e6:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80112ea:	4770      	bx	lr

080112ec <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 80112ec:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 80112ee:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80112f2:	4770      	bx	lr

080112f4 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 80112f4:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 80112f6:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
 80112fa:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80112fe:	4770      	bx	lr

08011300 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 8011300:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8011302:	edd3 6a03 	vldr	s13, [r3, #12]
 8011306:	ed93 0a02 	vldr	s0, [r3, #8]
 801130a:	ed93 7a01 	vldr	s14, [r3, #4]
 801130e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011312:	edd3 7a04 	vldr	s15, [r3, #16]
 8011316:	eea7 0a27 	vfma.f32	s0, s14, s15
 801131a:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 801131e:	4770      	bx	lr

08011320 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011326:	680d      	ldr	r5, [r1, #0]
{
 8011328:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 801132a:	201c      	movs	r0, #28
{
 801132c:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011330:	4629      	mov	r1, r5
{
 8011332:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011336:	f003 f993 	bl	8014660 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 801133a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 801133e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011340:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8011342:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8011344:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8011348:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 801134c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8011350:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8011352:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8011354:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8011356:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8011358:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 801135c:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8011360:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8011364:	ecbd 8b02 	vpop	{d8}
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	bf00      	nop

0801136c <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 801136c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 801136e:	6801      	ldr	r1, [r0, #0]
 8011370:	f003 ba38 	b.w	80147e4 <mpool_free>

08011374 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 8011374:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 8011376:	ed83 0a06 	vstr	s0, [r3, #24]
}
 801137a:	4770      	bx	lr

0801137c <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 801137c:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
 801137e:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
 8011382:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
 8011386:	eeb4 0ae7 	vcmpe.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 801138a:	edc3 7a03 	vstr	s15, [r3, #12]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 801138e:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
 8011392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8011396:	bf94      	ite	ls
 8011398:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 801139c:	ed93 7a05 	vldrhi	s14, [r3, #20]
 80113a0:	eea6 0a87 	vfma.f32	s0, s13, s14
 80113a4:	ed83 0a02 	vstr	s0, [r3, #8]
    s->prevOut = s->currentOut;
 80113a8:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 80113ac:	4770      	bx	lr
 80113ae:	bf00      	nop

080113b0 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 80113b0:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 80113b2:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 80113b6:	ed83 0a03 	vstr	s0, [r3, #12]
    if (in >= s->prevOut)
 80113ba:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 80113be:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 80113c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 80113c6:	bf94      	ite	ls
 80113c8:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 80113cc:	ed93 7a05 	vldrhi	s14, [r3, #20]
 80113d0:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 80113d4:	eeb0 0a67 	vmov.f32	s0, s15
 80113d8:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 80113dc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop

080113e4 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 80113e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e8:	460f      	mov	r7, r1
 80113ea:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 80113ec:	6811      	ldr	r1, [r2, #0]
{
 80113ee:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80113f0:	2058      	movs	r0, #88	; 0x58
{
 80113f2:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80113f4:	9101      	str	r1, [sp, #4]
 80113f6:	f003 f933 	bl	8014660 <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 80113fa:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80113fc:	4606      	mov	r6, r0
 80113fe:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
 8011400:	2400      	movs	r4, #0
    f->numFilts = numFilts;
 8011402:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8011406:	00b8      	lsls	r0, r7, #2
 8011408:	f003 f98e 	bl	8014728 <mpool_calloc>
    f->k1[0] = -0.00050469f;
 801140c:	4b1a      	ldr	r3, [pc, #104]	; (8011478 <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
 801140e:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8011410:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
 8011412:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
 8011414:	4b19      	ldr	r3, [pc, #100]	; (801147c <tThiranAllpassSOCascade_initToPool+0x98>)
 8011416:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
 8011418:	4b19      	ldr	r3, [pc, #100]	; (8011480 <tThiranAllpassSOCascade_initToPool+0x9c>)
 801141a:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 801141c:	4b19      	ldr	r3, [pc, #100]	; (8011484 <tThiranAllpassSOCascade_initToPool+0xa0>)
 801141e:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
 8011420:	4b19      	ldr	r3, [pc, #100]	; (8011488 <tThiranAllpassSOCascade_initToPool+0xa4>)
 8011422:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 8011424:	4b19      	ldr	r3, [pc, #100]	; (801148c <tThiranAllpassSOCascade_initToPool+0xa8>)
 8011426:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
 8011428:	4b19      	ldr	r3, [pc, #100]	; (8011490 <tThiranAllpassSOCascade_initToPool+0xac>)
 801142a:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
 801142c:	4b19      	ldr	r3, [pc, #100]	; (8011494 <tThiranAllpassSOCascade_initToPool+0xb0>)
 801142e:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
 8011430:	4b19      	ldr	r3, [pc, #100]	; (8011498 <tThiranAllpassSOCascade_initToPool+0xb4>)
 8011432:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
 8011434:	4b19      	ldr	r3, [pc, #100]	; (801149c <tThiranAllpassSOCascade_initToPool+0xb8>)
 8011436:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
 8011438:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
 801143c:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
 8011440:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
 8011444:	dd15      	ble.n	8011472 <tThiranAllpassSOCascade_initToPool+0x8e>
 8011446:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
 8011448:	2500      	movs	r5, #0
 801144a:	e001      	b.n	8011450 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 801144c:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
 8011450:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 8011454:	201c      	movs	r0, #28
 8011456:	4649      	mov	r1, r9
 8011458:	f003 f902 	bl	8014660 <mpool_alloc>
 801145c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
 8011460:	3401      	adds	r4, #1
    f->mempool = m;
 8011462:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
 8011466:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
 8011468:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
 801146a:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
 801146c:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
 801146e:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
 8011470:	d1ec      	bne.n	801144c <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
 8011472:	b002      	add	sp, #8
 8011474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011478:	ba044d2c 	.word	0xba044d2c
 801147c:	bbd2948d 	.word	0xbbd2948d
 8011480:	c037f488 	.word	0xc037f488
 8011484:	3d8e93e2 	.word	0x3d8e93e2
 8011488:	4002bb99 	.word	0x4002bb99
 801148c:	bb2e31d7 	.word	0xbb2e31d7
 8011490:	bc72a9d6 	.word	0xbc72a9d6
 8011494:	c039b717 	.word	0xc039b717
 8011498:	3d91971c 	.word	0x3d91971c
 801149c:	4006dfa4 	.word	0x4006dfa4

080114a0 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 80114a0:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 80114a2:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 80114a4:	686b      	ldr	r3, [r5, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	dd0a      	ble.n	80114c0 <tThiranAllpassSOCascade_free+0x20>
 80114aa:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
 80114ac:	68ab      	ldr	r3, [r5, #8]
 80114ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 80114b2:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
 80114b4:	6801      	ldr	r1, [r0, #0]
 80114b6:	f003 f995 	bl	80147e4 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
 80114ba:	686b      	ldr	r3, [r5, #4]
 80114bc:	42a3      	cmp	r3, r4
 80114be:	dcf5      	bgt.n	80114ac <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 80114c0:	6829      	ldr	r1, [r5, #0]
 80114c2:	68a8      	ldr	r0, [r5, #8]
 80114c4:	f003 f98e 	bl	80147e4 <mpool_free>
    mpool_free((char*)f, f->mempool);
 80114c8:	6829      	ldr	r1, [r5, #0]
 80114ca:	4628      	mov	r0, r5
}
 80114cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
 80114d0:	f003 b988 	b.w	80147e4 <mpool_free>

080114d4 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 80114d4:	eef0 7a40 	vmov.f32	s15, s0
 80114d8:	b510      	push	{r4, lr}
 80114da:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80114de:	eddf 9a68 	vldr	s19, [pc, #416]	; 8011680 <tThiranAllpassSOCascade_setCoeff+0x1ac>
 80114e2:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
 80114e6:	6804      	ldr	r4, [r0, #0]
{
 80114e8:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80114ec:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
 80114f0:	edc4 7a03 	vstr	s15, [r4, #12]
{
 80114f4:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80114f8:	f008 f846 	bl	8019588 <log2f>
 80114fc:	eddf 7a61 	vldr	s15, [pc, #388]	; 8011684 <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8011500:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8011504:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8011508:	ee28 8a29 	vmul.f32	s16, s16, s19
 801150c:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8011510:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8011514:	f008 f838 	bl	8019588 <log2f>
 8011518:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 801151c:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8011688 <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8011520:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8011524:	eddf 7a59 	vldr	s15, [pc, #356]	; 801168c <tThiranAllpassSOCascade_setCoeff+0x1b8>
 8011528:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 801152c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8011690 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 8011530:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011534:	f002 fe18 	bl	8014168 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8011538:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 801153c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8011540:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8011544:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8011548:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 801154c:	ee60 8a28 	vmul.f32	s17, s0, s17
 8011550:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011554:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011558:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 801155c:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8011560:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8011564:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011568:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 801156c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011570:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011574:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8011578:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 801157c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011580:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
 8011584:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011588:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 801158c:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
 8011590:	f007 ff94 	bl	80194bc <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 8011594:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
 8011598:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
 801159c:	eeb0 0a4a 	vmov.f32	s0, s20
 80115a0:	eea8 0a89 	vfma.f32	s0, s17, s18
 80115a4:	f002 fcc0 	bl	8013f28 <fastExp3>
 80115a8:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 80115ac:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
 80115b0:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 80115b4:	eea9 0a89 	vfma.f32	s0, s19, s18
 80115b8:	f002 fcb6 	bl	8013f28 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 80115bc:	edd4 7a04 	vldr	s15, [r4, #16]
 80115c0:	eea7 0ac8 	vfms.f32	s0, s15, s16
 80115c4:	f002 fcb0 	bl	8013f28 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 80115c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80115cc:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
 80115d0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8011694 <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
 80115d4:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
 80115d8:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
 80115dc:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
 80115e0:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
 80115e4:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
 80115e8:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
 80115ec:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
 80115f0:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
 80115f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
 80115f8:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
 80115fc:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
 8011600:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
 8011604:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
 8011608:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
 801160c:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 8011610:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
 8011614:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
 8011618:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
 801161c:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
 8011620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011624:	dd0b      	ble.n	801163e <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
 8011626:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011698 <tThiranAllpassSOCascade_setCoeff+0x1c4>
 801162a:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
 801162e:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
 8011632:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
 8011636:	eeb0 6a47 	vmov.f32	s12, s14
 801163a:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 801163e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011640:	2a00      	cmp	r2, #0
 8011642:	dd14      	ble.n	801166e <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
 8011644:	68a3      	ldr	r3, [r4, #8]
 8011646:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
 8011648:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
 801164c:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011650:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011652:	2a01      	cmp	r2, #1
 8011654:	dd0b      	ble.n	801166e <tThiranAllpassSOCascade_setCoeff+0x19a>
 8011656:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
 8011658:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 801165a:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
 801165c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011660:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 8011662:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
 8011664:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
 8011666:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011668:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801166a:	429a      	cmp	r2, r3
 801166c:	dcf4      	bgt.n	8011658 <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 801166e:	ee07 2a90 	vmov	s15, r2
 8011672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8011676:	ecbd 8b08 	vpop	{d8-d11}
 801167a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801167e:	bd10      	pop	{r4, pc}
 8011680:	3b14f209 	.word	0x3b14f209
 8011684:	42440000 	.word	0x42440000
 8011688:	42040000 	.word	0x42040000
 801168c:	3cf5c28f 	.word	0x3cf5c28f
 8011690:	00000000 	.word	0x00000000
 8011694:	3f7d70a4 	.word	0x3f7d70a4
 8011698:	3c23d70a 	.word	0x3c23d70a

0801169c <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
 801169c:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 801169e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	dd27      	ble.n	80116f4 <tThiranAllpassSOCascade_tick+0x58>
 80116a4:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
 80116a6:	688b      	ldr	r3, [r1, #8]
 80116a8:	eef0 4a40 	vmov.f32	s9, s0
 80116ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 80116b0:	3201      	adds	r2, #1
 80116b2:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 80116b6:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 80116ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80116be:	edd3 7a03 	vldr	s15, [r3, #12]
 80116c2:	ed93 5a06 	vldr	s10, [r3, #24]
 80116c6:	ee37 6a67 	vsub.f32	s12, s14, s15
 80116ca:	edd3 5a05 	vldr	s11, [r3, #20]
 80116ce:	ee20 0a05 	vmul.f32	s0, s0, s10
 80116d2:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
 80116d6:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
 80116da:	ed83 7a02 	vstr	s14, [r3, #8]
 80116de:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
 80116e2:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 80116e6:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
 80116ea:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
 80116ee:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80116f0:	4293      	cmp	r3, r2
 80116f2:	dcd8      	bgt.n	80116a6 <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 80116f8:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 80116fa:	6853      	ldr	r3, [r2, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	dd0d      	ble.n	801171c <tThiranAllpassSOCascade_clear+0x24>
 8011700:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 8011702:	2100      	movs	r1, #0
 8011704:	6890      	ldr	r0, [r2, #8]
 8011706:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801170a:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 801170c:	6890      	ldr	r0, [r2, #8]
 801170e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8011712:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
 8011714:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 8011716:	6850      	ldr	r0, [r2, #4]
 8011718:	4298      	cmp	r0, r3
 801171a:	dcf3      	bgt.n	8011704 <tThiranAllpassSOCascade_clear+0xc>

    }
}
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop

08011720 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011726:	680d      	ldr	r5, [r1, #0]
{
 8011728:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 801172a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801172e:	2028      	movs	r0, #40	; 0x28
 8011730:	4629      	mov	r1, r5
{
 8011732:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8011736:	f002 ff93 	bl	8014660 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 801173a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8011784 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801173e:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011740:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 8011744:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8011746:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 8011748:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 801174c:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 8011750:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 8011754:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011758:	68db      	ldr	r3, [r3, #12]
 801175a:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 801175c:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 801175e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8011762:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011766:	ee68 0a27 	vmul.f32	s1, s16, s15
 801176a:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 801176e:	f002 fcfb 	bl	8014168 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 8011772:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011776:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 801177a:	edc4 8a05 	vstr	s17, [r4, #20]
}
 801177e:	ecbd 8b02 	vpop	{d8}
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	00000000 	.word	0x00000000

08011788 <tOnePole_free>:
    _tOnePole* f = *ft;
 8011788:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 801178a:	6801      	ldr	r1, [r0, #0]
 801178c:	f003 b82a 	b.w	80147e4 <mpool_free>

08011790 <tOnePole_setFreq>:
{
 8011790:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8011792:	6804      	ldr	r4, [r0, #0]
{
 8011794:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011798:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801179c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80117c8 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 80117a0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 80117a4:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 80117a8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80117ac:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80117b0:	f002 fcda 	bl	8014168 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 80117b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 80117b8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 80117bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80117c0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80117c4:	bd10      	pop	{r4, pc}
 80117c6:	bf00      	nop
 80117c8:	00000000 	.word	0x00000000

080117cc <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 80117cc:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80117ce:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
 80117d2:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80117d6:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
 80117da:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80117de:	edd3 6a05 	vldr	s13, [r3, #20]
 80117e2:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 80117e6:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80117ea:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 80117ee:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 80117f2:	4770      	bx	lr

080117f4 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80117f4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8011830 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80117f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80117fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011800:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011834 <tOnePole_setSampleRate+0x40>
{
 8011804:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8011806:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8011808:	edd4 0a01 	vldr	s1, [r4, #4]
 801180c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011810:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8011814:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011818:	f002 fca6 	bl	8014168 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 801181c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011820:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8011824:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011828:	edc4 7a04 	vstr	s15, [r4, #16]
}
 801182c:	bd10      	pop	{r4, pc}
 801182e:	bf00      	nop
 8011830:	40c90fdb 	.word	0x40c90fdb
 8011834:	00000000 	.word	0x00000000

08011838 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 8011838:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801183a:	680c      	ldr	r4, [r1, #0]
{
 801183c:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 801183e:	2018      	movs	r0, #24
 8011840:	4621      	mov	r1, r4
 8011842:	f002 ff0d 	bl	8014660 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
 8011846:	4a06      	ldr	r2, [pc, #24]	; (8011860 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 8011848:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
 801184a:	4906      	ldr	r1, [pc, #24]	; (8011864 <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
 801184c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 801184e:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
 8011850:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
 8011852:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
 8011854:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
 8011856:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	6103      	str	r3, [r0, #16]
}
 801185c:	bd38      	pop	{r3, r4, r5, pc}
 801185e:	bf00      	nop
 8011860:	3f666666 	.word	0x3f666666
 8011864:	3dcccccd 	.word	0x3dcccccd

08011868 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
 8011868:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 801186a:	6801      	ldr	r1, [r0, #0]
 801186c:	f002 bfba 	b.w	80147e4 <mpool_free>

08011870 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 8011870:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
 8011874:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
 8011876:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
 801187a:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
 8011882:	bfcc      	ite	gt
 8011884:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
 8011888:	ee30 0a27 	vaddle.f32	s0, s0, s15
 801188c:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop

08011894 <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 8011894:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 8011896:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 801189a:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 801189e:	4770      	bx	lr

080118a0 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 80118a0:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 80118a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80118a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80118aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80118ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118b2:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
 80118b6:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 80118ba:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80118be:	4770      	bx	lr

080118c0 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80118c0:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80118d0 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
 80118c4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80118c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80118ca:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80118ce:	4770      	bx	lr
 80118d0:	40c90fdb 	.word	0x40c90fdb

080118d4 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
 80118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d6:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 80118da:	6995      	ldr	r5, [r2, #24]
{
 80118dc:	4606      	mov	r6, r0
 80118de:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80118e0:	2050      	movs	r0, #80	; 0x50
 80118e2:	4629      	mov	r1, r5
{
 80118e4:	eef0 8a40 	vmov.f32	s17, s0
 80118e8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80118ec:	f002 feb8 	bl	8014660 <mpool_alloc>
 80118f0:	6030      	str	r0, [r6, #0]
 80118f2:	4604      	mov	r4, r0
    svf->mempool = m;
 80118f4:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80118f6:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0.0f;
 80118f8:	2500      	movs	r5, #0
    svf->ic2eq = 0.0f;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80118fa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80119d0 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
 80118fe:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011900:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8011904:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 8011906:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 801190a:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801190c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8011910:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
 8011914:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0.0f;
 8011916:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 8011918:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 801191c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011920:	f008 f9b4 	bl	8019c8c <tanf>
    svf->k = 1.0f/Q;
 8011924:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011928:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 801192c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 801192e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 8011930:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 8011934:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 8011938:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 801193a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801193c:	eef0 6a67 	vmov.f32	s13, s15
 8011940:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 8011944:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011948:	eee0 6a06 	vfma.f32	s13, s0, s12
 801194c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8011950:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011954:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011958:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 801195c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011960:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 8011964:	d00d      	beq.n	8011982 <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8011966:	2f04      	cmp	r7, #4
 8011968:	d80b      	bhi.n	8011982 <tSVF_init+0xae>
 801196a:	e8df f007 	tbb	[pc, r7]
 801196e:	0a23      	.short	0x0a23
 8011970:	032a      	.short	0x032a
 8011972:	1a          	.byte	0x1a
 8011973:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
 8011974:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8011978:	4a16      	ldr	r2, [pc, #88]	; (80119d4 <tSVF_init+0x100>)
        svf->cL = 0.0f;
 801197a:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 801197c:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801197e:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 8011980:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 8011982:	ed96 7a00 	vldr	s14, [r6]
 8011986:	eddf 7a14 	vldr	s15, [pc, #80]	; 80119d8 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
 801198a:	4a14      	ldr	r2, [pc, #80]	; (80119dc <tSVF_init+0x108>)
 801198c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011990:	4b13      	ldr	r3, [pc, #76]	; (80119e0 <tSVF_init+0x10c>)
 8011992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011996:	bfd8      	it	le
 8011998:	4613      	movle	r3, r2
 801199a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801199c:	ecbd 8b02 	vpop	{d8}
 80119a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 80119a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 80119a6:	4a0b      	ldr	r2, [pc, #44]	; (80119d4 <tSVF_init+0x100>)
        svf->cL = -2.0f;
 80119a8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 80119ac:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 80119ae:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 80119b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80119b2:	e7e6      	b.n	8011982 <tSVF_init+0xae>
        svf->cBK = -1.0f;
 80119b4:	4b07      	ldr	r3, [pc, #28]	; (80119d4 <tSVF_init+0x100>)
        svf->cH = 1.0f;
 80119b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 80119ba:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 80119bc:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 80119be:	63a3      	str	r3, [r4, #56]	; 0x38
 80119c0:	e7df      	b.n	8011982 <tSVF_init+0xae>
        svf->cB = 1.0f;
 80119c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 80119c6:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 80119c8:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 80119ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80119cc:	e7d9      	b.n	8011982 <tSVF_init+0xae>
 80119ce:	bf00      	nop
 80119d0:	40490fdb 	.word	0x40490fdb
 80119d4:	bf800000 	.word	0xbf800000
 80119d8:	47afc800 	.word	0x47afc800
 80119dc:	0801c708 	.word	0x0801c708
 80119e0:	08020708 	.word	0x08020708

080119e4 <tSVF_initToPool>:
{
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80119ea:	6815      	ldr	r5, [r2, #0]
{
 80119ec:	4606      	mov	r6, r0
 80119ee:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80119f0:	2050      	movs	r0, #80	; 0x50
 80119f2:	4629      	mov	r1, r5
{
 80119f4:	eef0 8a40 	vmov.f32	s17, s0
 80119f8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80119fc:	f002 fe30 	bl	8014660 <mpool_alloc>
 8011a00:	6030      	str	r0, [r6, #0]
 8011a02:	4604      	mov	r4, r0
    svf->mempool = m;
 8011a04:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 8011a06:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0.0f;
 8011a08:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011a0a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8011ae0 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
 8011a0e:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011a10:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8011a14:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 8011a16:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 8011a1a:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011a1c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8011a20:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
 8011a24:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0.0f;
 8011a26:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 8011a28:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 8011a2c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011a30:	f008 f92c 	bl	8019c8c <tanf>
    svf->k = 1.0f/Q;
 8011a34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011a38:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
 8011a3c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 8011a3e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 8011a40:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 8011a44:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 8011a48:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 8011a4a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a4c:	eef0 6a67 	vmov.f32	s13, s15
 8011a50:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 8011a54:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a58:	eee0 6a06 	vfma.f32	s13, s0, s12
 8011a5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8011a60:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a64:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011a68:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 8011a6c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011a70:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 8011a74:	d00b      	beq.n	8011a8e <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
 8011a76:	2f04      	cmp	r7, #4
 8011a78:	d809      	bhi.n	8011a8e <tSVF_initToPool+0xaa>
 8011a7a:	e8df f007 	tbb	[pc, r7]
 8011a7e:	0821      	.short	0x0821
 8011a80:	2803      	.short	0x2803
 8011a82:	18          	.byte	0x18
 8011a83:	00          	.byte	0x00
        svf->cB = 1.0f;
 8011a84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 8011a88:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 8011a8a:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 8011a8c:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
 8011a8e:	ed96 7a00 	vldr	s14, [r6]
 8011a92:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011ae4 <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
 8011a96:	4a14      	ldr	r2, [pc, #80]	; (8011ae8 <tSVF_initToPool+0x104>)
 8011a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a9c:	4b13      	ldr	r3, [pc, #76]	; (8011aec <tSVF_initToPool+0x108>)
 8011a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa2:	bfd8      	it	le
 8011aa4:	4613      	movle	r3, r2
 8011aa6:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
 8011aa8:	ecbd 8b02 	vpop	{d8}
 8011aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 8011aae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011ab2:	4a0f      	ldr	r2, [pc, #60]	; (8011af0 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
 8011ab4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8011ab8:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011aba:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 8011abc:	63a3      	str	r3, [r4, #56]	; 0x38
 8011abe:	e7e6      	b.n	8011a8e <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
 8011ac0:	4b0b      	ldr	r3, [pc, #44]	; (8011af0 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
 8011ac2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011ac6:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 8011ac8:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 8011aca:	63a3      	str	r3, [r4, #56]	; 0x38
 8011acc:	e7df      	b.n	8011a8e <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 8011ace:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011ad2:	4a07      	ldr	r2, [pc, #28]	; (8011af0 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
 8011ad4:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 8011ad6:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011ad8:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 8011ada:	63a3      	str	r3, [r4, #56]	; 0x38
 8011adc:	e7d7      	b.n	8011a8e <tSVF_initToPool+0xaa>
 8011ade:	bf00      	nop
 8011ae0:	40490fdb 	.word	0x40490fdb
 8011ae4:	47afc800 	.word	0x47afc800
 8011ae8:	0801c708 	.word	0x0801c708
 8011aec:	08020708 	.word	0x08020708
 8011af0:	bf800000 	.word	0xbf800000

08011af4 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 8011af4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 8011af6:	6801      	ldr	r1, [r0, #0]
 8011af8:	f002 be74 	b.w	80147e4 <mpool_free>

08011afc <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 8011afc:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8011afe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8011b02:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011b06:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8011b0a:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011b0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
 8011b12:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8011b16:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
 8011b1a:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8011b1e:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011b22:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
 8011b26:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011b2a:	ed93 2a08 	vldr	s4, [r3, #32]
 8011b2e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8011b32:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011b36:	eea2 5a23 	vfma.f32	s10, s4, s7
 8011b3a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011b3e:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8011b42:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8011b46:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8011b4a:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8011b4e:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8011b52:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8011b56:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8011b5a:	edc3 6a06 	vstr	s13, [r3, #24]
}
 8011b5e:	eea3 7a80 	vfma.f32	s14, s7, s0
 8011b62:	eeb0 0a47 	vmov.f32	s0, s14
 8011b66:	4770      	bx	lr

08011b68 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 8011b68:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 8011b6a:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011b6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8011b70:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011b74:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8011bd0 <tSVF_setFreq+0x68>
 8011b78:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 8011b7c:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011b80:	f002 faf2 	bl	8014168 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011b84:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011bd4 <tSVF_setFreq+0x6c>
 8011b88:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011b8c:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011b98:	f008 f878 	bl	8019c8c <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ba0:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011ba4:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011ba8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011bac:	eeb0 6a66 	vmov.f32	s12, s13
 8011bb0:	eea0 6a27 	vfma.f32	s12, s0, s15
 8011bb4:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
 8011bb8:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011bbc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011bc0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8011bc4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011bc8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 8011bcc:	bd10      	pop	{r4, pc}
 8011bce:	bf00      	nop
 8011bd0:	00000000 	.word	0x00000000
 8011bd4:	40490fdb 	.word	0x40490fdb

08011bd8 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011bd8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011c58 <tSVF_setFreqFast+0x80>
 8011bdc:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
 8011be0:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011be6:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011bea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
 8011bec:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
 8011bf0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011bf4:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011bf8:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
 8011bfc:	ee17 2a90 	vmov	r2, s15
 8011c00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011c04:	4562      	cmp	r2, ip
 8011c06:	bfa8      	it	ge
 8011c08:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011c0a:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011c0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011c12:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011c16:	ed92 4a01 	vldr	s8, [r2, #4]
 8011c1a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011c1e:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011c22:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c26:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011c2a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011c2e:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c32:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011c36:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c3a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011c3e:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
 8011c42:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c46:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8011c4e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011c52:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8011c56:	4770      	bx	lr
 8011c58:	41f4898d 	.word	0x41f4898d

08011c5c <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8011c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011c60:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c62:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
 8011c66:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8011c6a:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c6e:	eeb0 6a47 	vmov.f32	s12, s14
 8011c72:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8011c76:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c7a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011c7e:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8011c82:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011c86:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8011c8e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011c92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8011c96:	4770      	bx	lr

08011c98 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011c9c:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 8011c9e:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011ca2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011ca6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8011caa:	4770      	bx	lr

08011cac <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8011cb2:	698c      	ldr	r4, [r1, #24]
{
 8011cb4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011cb6:	2018      	movs	r0, #24
{
 8011cb8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011cbc:	4621      	mov	r1, r4
 8011cbe:	f002 fd33 	bl	8014728 <mpool_calloc>
 8011cc2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011cc4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011cca:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8011ccc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011cce:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011cd2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011cd4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8011cd8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8011cda:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011cde:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011ce2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011ce6:	ecbd 8b02 	vpop	{d8}
 8011cea:	bd38      	pop	{r3, r4, r5, pc}

08011cec <tHighpass_initToPool>:
{
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011cf2:	680c      	ldr	r4, [r1, #0]
{
 8011cf4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011cf6:	2018      	movs	r0, #24
{
 8011cf8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	f002 fd13 	bl	8014728 <mpool_calloc>
 8011d02:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011d04:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011d06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011d0a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8011d0c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011d0e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011d12:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011d14:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8011d18:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 8011d1a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011d1e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011d22:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011d26:	ecbd 8b02 	vpop	{d8}
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}

08011d2c <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 8011d2c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8011d2e:	6801      	ldr	r1, [r0, #0]
 8011d30:	f002 bd58 	b.w	80147e4 <mpool_free>

08011d34 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 8011d34:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011d36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d3a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 8011d3e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011d42:	eee7 7a40 	vfms.f32	s15, s14, s0
 8011d46:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011d4a:	4770      	bx	lr

08011d4c <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
 8011d4c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8011d4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011d52:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d56:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8011d5a:	ed83 0a01 	vstr	s0, [r3, #4]
 8011d5e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8011d62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d66:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8011d6a:	4770      	bx	lr

08011d6c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011d6c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011d8c <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011d70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 8011d74:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011d76:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011d7a:	edd3 6a04 	vldr	s13, [r3, #16]
 8011d7e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011d82:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011d86:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011d8a:	4770      	bx	lr
 8011d8c:	40c90fdb 	.word	0x40c90fdb

08011d90 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 8011d90:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011d92:	edd3 6a03 	vldr	s13, [r3, #12]
 8011d96:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d9a:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011d9e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8011da2:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011da6:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011daa:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011dae:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8011db2:	edd3 4a08 	vldr	s9, [r3, #32]
 8011db6:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011dba:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8011dbe:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011dc2:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8011dc6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011dca:	eeb0 5a47 	vmov.f32	s10, s14
 8011dce:	eea4 0a87 	vfma.f32	s0, s9, s14
 8011dd2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011dd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8011dda:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011dde:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011de2:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011de6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011dea:	4770      	bx	lr

08011dec <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8011dec:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8011dee:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011df0:	eddf 7a98 	vldr	s15, [pc, #608]	; 8012054 <tVZFilter_calcCoeffs+0x268>
{
 8011df4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011df8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8011dfc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8011e00:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011e04:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011e08:	eeb0 0a68 	vmov.f32	s0, s17
 8011e0c:	f007 ff3e 	bl	8019c8c <tanf>
    
    switch( f->type )
 8011e10:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011e12:	eeb0 8a40 	vmov.f32	s16, s0
 8011e16:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8011e1a:	2b0a      	cmp	r3, #10
 8011e1c:	f200 8117 	bhi.w	801204e <tVZFilter_calcCoeffs+0x262>
 8011e20:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011e24:	002f0026 	.word	0x002f0026
 8011e28:	00410038 	.word	0x00410038
 8011e2c:	0056004d 	.word	0x0056004d
 8011e30:	00a1008b 	.word	0x00a1008b
 8011e34:	010a00b7 	.word	0x010a00b7
 8011e38:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8011e3a:	edd4 7a05 	vldr	s15, [r4, #20]
 8011e3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011e42:	eeb1 7a67 	vneg.f32	s14, s15
 8011e46:	61e3      	str	r3, [r4, #28]
 8011e48:	6263      	str	r3, [r4, #36]	; 0x24
 8011e4a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8011e52:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011e56:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8011e5a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011e5e:	eee7 6a88 	vfma.f32	s13, s15, s16
 8011e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e66:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8011e6a:	ecbd 8b02 	vpop	{d8}
 8011e6e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011e70:	2300      	movs	r3, #0
 8011e72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011e76:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011e7a:	61e3      	str	r3, [r4, #28]
 8011e7c:	6223      	str	r3, [r4, #32]
 8011e7e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8011e80:	e7e5      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011e82:	2300      	movs	r3, #0
 8011e84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011e88:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011e8c:	6223      	str	r3, [r4, #32]
 8011e8e:	6263      	str	r3, [r4, #36]	; 0x24
 8011e90:	61e2      	str	r2, [r4, #28]
            break;
 8011e92:	e7dc      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011e94:	2300      	movs	r3, #0
 8011e96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011e9a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011e9e:	61e3      	str	r3, [r4, #28]
 8011ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ea2:	6222      	str	r2, [r4, #32]
            break;
 8011ea4:	e7d3      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011ea6:	edd4 7a05 	vldr	s15, [r4, #20]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8011eb0:	61e3      	str	r3, [r4, #28]
 8011eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011eb6:	6263      	str	r3, [r4, #36]	; 0x24
 8011eb8:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8011ebc:	e7c7      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011ebe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011ec2:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011ec4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011ec8:	6222      	str	r2, [r4, #32]
 8011eca:	61e3      	str	r3, [r4, #28]
 8011ecc:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011ece:	e7be      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011ed0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011ed4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011ed8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011edc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011ee0:	f007 fcf2 	bl	80198c8 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011ee4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011ee8:	f007 fed0 	bl	8019c8c <tanf>
            Lfloat r  = f->g/wl;
 8011eec:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011ef0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8011ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ef8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8011efc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011f00:	ed84 7a07 	vstr	s14, [r4, #28]
 8011f04:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011f0c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011f10:	eef0 6a47 	vmov.f32	s13, s14
 8011f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f18:	ee77 7a45 	vsub.f32	s15, s14, s10
 8011f1c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011f20:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8011f24:	eef1 7ac7 	vsqrt.f32	s15, s14
 8011f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011f2c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011f30:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011f34:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8011f38:	e789      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 8011f3a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011f3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011f42:	edd4 7a05 	vldr	s15, [r4, #20]
 8011f46:	eef1 6ac7 	vsqrt.f32	s13, s14
 8011f4a:	ed84 7a07 	vstr	s14, [r4, #28]
 8011f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8011f50:	ee27 6a27 	vmul.f32	s12, s14, s15
 8011f54:	ed84 6a08 	vstr	s12, [r4, #32]
 8011f58:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011f5c:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8011f60:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8011f64:	e773      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 8011f66:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011f6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011f6e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011f72:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011f76:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8011f7a:	61e3      	str	r3, [r4, #28]
 8011f7c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8011f80:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011f84:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8011f88:	ee20 8a07 	vmul.f32	s16, s0, s14
 8011f8c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8011f90:	e75d      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
 8011f92:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011f96:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011f9a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011f9e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8012058 <tVZFilter_calcCoeffs+0x26c>
 8011fa2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 8011fa6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011faa:	eeb0 0a48 	vmov.f32	s0, s16
 8011fae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011fb2:	f002 fb33 	bl	801461c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011fb6:	eddf 0a28 	vldr	s1, [pc, #160]	; 8012058 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011fba:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011fbe:	eeb0 0a68 	vmov.f32	s0, s17
 8011fc2:	f002 fb2f 	bl	8014624 <minimum>
            f->cB = 1.0f-x*x;
 8011fc6:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011fca:	edd4 7a05 	vldr	s15, [r4, #20]
 8011fce:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8011fd2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011fd6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011fda:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011fde:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011fe2:	ee76 5a06 	vadd.f32	s11, s12, s12
 8011fe6:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011fea:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011fee:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011ff2:	eee0 7a00 	vfma.f32	s15, s0, s0
 8011ff6:	eee0 7a65 	vfms.f32	s15, s0, s11
 8011ffa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8011ffe:	f001 ff4f 	bl	8013ea0 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8012002:	edd4 5a07 	vldr	s11, [r4, #28]
 8012006:	ed94 6a08 	vldr	s12, [r4, #32]
 801200a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 801200e:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012012:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8012016:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801201a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 801201e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8012022:	ee26 6a00 	vmul.f32	s12, s12, s0
 8012026:	ee66 6a80 	vmul.f32	s13, s13, s0
 801202a:	edc4 5a07 	vstr	s11, [r4, #28]
 801202e:	ed84 6a08 	vstr	s12, [r4, #32]
 8012032:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8012036:	e70a      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8012038:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801203c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8012040:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8012042:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8012046:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 801204a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801204c:	e6ff      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801204e:	edd4 7a05 	vldr	s15, [r4, #20]
 8012052:	e6fc      	b.n	8011e4e <tVZFilter_calcCoeffs+0x62>
 8012054:	40490fdb 	.word	0x40490fdb
 8012058:	00000000 	.word	0x00000000

0801205c <tVZFilter_initToPool>:
{
 801205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012060:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8012064:	6816      	ldr	r6, [r2, #0]
{
 8012066:	b082      	sub	sp, #8
 8012068:	4605      	mov	r5, r0
 801206a:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 801206c:	2054      	movs	r0, #84	; 0x54
 801206e:	4631      	mov	r1, r6
{
 8012070:	eef0 8a60 	vmov.f32	s17, s1
 8012074:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8012078:	f002 faf2 	bl	8014660 <mpool_alloc>
 801207c:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 801207e:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012080:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012084:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8012086:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012088:	ed9f 8a47 	vldr	s16, [pc, #284]	; 80121a8 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
 801208c:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012090:	eddd 0a01 	vldr	s1, [sp, #4]
 8012094:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8012098:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801209c:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 80120a0:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80120a2:	ed9f 9a42 	vldr	s18, [pc, #264]	; 80121ac <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
 80120a6:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80120a8:	f002 f85e 	bl	8014168 <LEAF_clip>
 80120ac:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 80120b0:	f002 fa9a 	bl	80145e8 <ftom>
    f->invG = 1.414213562373095f;
 80120b4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80121b0 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80120b8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80120bc:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80120c0:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
 80120c4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80120c8:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
 80120cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
 80120d0:	4b38      	ldr	r3, [pc, #224]	; (80121b4 <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
 80120d2:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
 80120d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80120d8:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
 80120dc:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80120e0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
 80120e4:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
 80120e6:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80120ea:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 80120ee:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 80120f2:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 80120f6:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80120fa:	f007 fdc7 	bl	8019c8c <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80120fe:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80121b8 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012102:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012106:	eef0 0a68 	vmov.f32	s1, s17
 801210a:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 801210e:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012112:	f002 f829 	bl	8014168 <LEAF_clip>
 8012116:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 801211a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801211e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012122:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
 8012126:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8012128:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801212c:	f007 fbcc 	bl	80198c8 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012130:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8012134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012138:	ee67 7a87 	vmul.f32	s15, s15, s14
 801213c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012140:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012144:	f007 fda2 	bl	8019c8c <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8012148:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 801214c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8012150:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8012152:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8012156:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801215a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801215e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012162:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801216a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801216e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8012172:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012176:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
 801217a:	f7ff fe37 	bl	8011dec <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 801217e:	4628      	mov	r0, r5
 8012180:	f7ff fe34 	bl	8011dec <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 8012184:	ed96 7a00 	vldr	s14, [r6]
 8012188:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80121bc <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
 801218c:	4a0c      	ldr	r2, [pc, #48]	; (80121c0 <tVZFilter_initToPool+0x164>)
 801218e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012192:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <tVZFilter_initToPool+0x168>)
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	bfd8      	it	le
 801219a:	4613      	movle	r3, r2
 801219c:	6523      	str	r3, [r4, #80]	; 0x50
}
 801219e:	b002      	add	sp, #8
 80121a0:	ecbd 8b04 	vpop	{d8-d9}
 80121a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a8:	00000000 	.word	0x00000000
 80121ac:	40490fdb 	.word	0x40490fdb
 80121b0:	3fb504f3 	.word	0x3fb504f3
 80121b4:	3f3504f3 	.word	0x3f3504f3
 80121b8:	42c80000 	.word	0x42c80000
 80121bc:	47afc800 	.word	0x47afc800
 80121c0:	0801c708 	.word	0x0801c708
 80121c4:	08020708 	.word	0x08020708

080121c8 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 80121c8:	3218      	adds	r2, #24
 80121ca:	f7ff bf47 	b.w	801205c <tVZFilter_initToPool>
 80121ce:	bf00      	nop

080121d0 <tVZFilter_setFreq>:
{
 80121d0:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 80121d2:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80121d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80121d8:	4604      	mov	r4, r0
 80121da:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80121de:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 80121e2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80121fc <tVZFilter_setFreq+0x2c>
 80121e6:	ee21 1a27 	vmul.f32	s2, s2, s15
 80121ea:	f001 ffbd 	bl	8014168 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 80121ee:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80121f0:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 80121f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80121f8:	f7ff bdf8 	b.w	8011dec <tVZFilter_calcCoeffs>
 80121fc:	00000000 	.word	0x00000000

08012200 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
 8012200:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80124c8 <tVZFilter_setFreqFast+0x2c8>
 8012204:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
 801220c:	ee20 7a07 	vmul.f32	s14, s0, s14
{
 8012210:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
 8012212:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
 8012216:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012218:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
 801221c:	ee17 3a90 	vmov	r3, s15
 8012220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012224:	4563      	cmp	r3, ip
 8012226:	bfa8      	it	ge
 8012228:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801222a:	ee07 3a90 	vmov	s15, r3
{
 801222e:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012232:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012236:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
 8012238:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801223c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
 8012240:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012242:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012246:	ed93 5a01 	vldr	s10, [r3, #4]
 801224a:	ee36 7a86 	vadd.f32	s14, s13, s12
 801224e:	edd3 5a00 	vldr	s11, [r3]
 8012252:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012256:	eee5 7a87 	vfma.f32	s15, s11, s14
 801225a:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 801225e:	290a      	cmp	r1, #10
 8012260:	f200 812f 	bhi.w	80124c2 <tVZFilter_setFreqFast+0x2c2>
 8012264:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012268:	002f0026 	.word	0x002f0026
 801226c:	00410038 	.word	0x00410038
 8012270:	0056004d 	.word	0x0056004d
 8012274:	00b5009b 	.word	0x00b5009b
 8012278:	012200cf 	.word	0x012200cf
 801227c:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 801227e:	ed94 7a05 	vldr	s14, [r4, #20]
 8012282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012286:	eef1 6a47 	vneg.f32	s13, s14
 801228a:	61e3      	str	r3, [r4, #28]
 801228c:	6263      	str	r3, [r4, #36]	; 0x24
 801228e:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8012292:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 801229a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801229e:	eef0 6a47 	vmov.f32	s13, s14
 80122a2:	eee0 6a27 	vfma.f32	s13, s0, s15
 80122a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80122aa:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80122ae:	ecbd 8b02 	vpop	{d8}
 80122b2:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80122b4:	2300      	movs	r3, #0
 80122b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80122ba:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80122be:	61e3      	str	r3, [r4, #28]
 80122c0:	6223      	str	r3, [r4, #32]
 80122c2:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80122c4:	e7e5      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80122c6:	2300      	movs	r3, #0
 80122c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80122cc:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80122d0:	6223      	str	r3, [r4, #32]
 80122d2:	6263      	str	r3, [r4, #36]	; 0x24
 80122d4:	61e2      	str	r2, [r4, #28]
            break;
 80122d6:	e7dc      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80122d8:	2300      	movs	r3, #0
 80122da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80122de:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80122e2:	61e3      	str	r3, [r4, #28]
 80122e4:	6263      	str	r3, [r4, #36]	; 0x24
 80122e6:	6222      	str	r2, [r4, #32]
            break;
 80122e8:	e7d3      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80122ea:	ed94 7a05 	vldr	s14, [r4, #20]
 80122ee:	2300      	movs	r3, #0
 80122f0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80122f4:	61e3      	str	r3, [r4, #28]
 80122f6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80122fa:	6263      	str	r3, [r4, #36]	; 0x24
 80122fc:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8012300:	e7c7      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012302:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012306:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8012308:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 801230c:	6222      	str	r2, [r4, #32]
 801230e:	61e3      	str	r3, [r4, #28]
 8012310:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8012312:	e7be      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012314:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8012318:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 801231c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012320:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012324:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012328:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801232c:	f001 fe8e 	bl	801404c <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012330:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8012334:	eddf 7a65 	vldr	s15, [pc, #404]	; 80124cc <tVZFilter_setFreqFast+0x2cc>
 8012338:	ee28 8a07 	vmul.f32	s16, s16, s14
 801233c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012340:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012344:	f001 fd5e 	bl	8013e04 <fastertanf>
            Lfloat r  = f->g/wl;
 8012348:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801234c:	eeb0 5a68 	vmov.f32	s10, s17
 8012350:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
 8012354:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012358:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801235c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012360:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012364:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8012368:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801236c:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012370:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012374:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012378:	f001 fd92 	bl	8013ea0 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801237c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 8012380:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012384:	edc4 8a07 	vstr	s17, [r4, #28]
 8012388:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801238c:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012390:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012394:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012398:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801239c:	e779      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 801239e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80123a2:	f001 fd7d 	bl	8013ea0 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123a6:	f001 fd7b 	bl	8013ea0 <fastsqrtf>
 80123aa:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80123ae:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80123b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123b6:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80123ba:	ed94 7a05 	vldr	s14, [r4, #20]
 80123be:	edc4 6a07 	vstr	s13, [r4, #28]
 80123c2:	6263      	str	r3, [r4, #36]	; 0x24
 80123c4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80123c8:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123cc:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 80123d0:	e75f      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 80123d2:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80123d6:	f001 fd63 	bl	8013ea0 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123da:	f001 fd61 	bl	8013ea0 <fastsqrtf>
 80123de:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80123e2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80123e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80123ea:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123ee:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80123f2:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 80123f6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80123fa:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80123fc:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8012400:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8012404:	e745      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
 8012406:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801240a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801240e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8012412:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80124d0 <tVZFilter_setFreqFast+0x2d0>
 8012416:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 801241a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801241e:	eeb0 0a48 	vmov.f32	s0, s16
 8012422:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012426:	f002 f8f9 	bl	801461c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801242a:	eddf 0a29 	vldr	s1, [pc, #164]	; 80124d0 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801242e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012432:	eeb0 0a68 	vmov.f32	s0, s17
 8012436:	f002 f8f5 	bl	8014624 <minimum>
            f->cB = 1.0f-x*x;
 801243a:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801243e:	edd4 7a05 	vldr	s15, [r4, #20]
 8012442:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8012446:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801244a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 801244e:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012452:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012456:	ee76 5a06 	vadd.f32	s11, s12, s12
 801245a:	ee38 8a08 	vadd.f32	s16, s16, s16
 801245e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8012462:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012466:	eee6 7a06 	vfma.f32	s15, s12, s12
 801246a:	eee0 7a00 	vfma.f32	s15, s0, s0
 801246e:	eee0 7a65 	vfms.f32	s15, s0, s11
 8012472:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8012476:	f001 fd13 	bl	8013ea0 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 801247a:	edd4 5a07 	vldr	s11, [r4, #28]
 801247e:	ed94 6a08 	vldr	s12, [r4, #32]
 8012482:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8012486:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801248a:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 801248e:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8012492:	ee65 5a80 	vmul.f32	s11, s11, s0
 8012496:	ee26 6a00 	vmul.f32	s12, s12, s0
 801249a:	ee66 6a80 	vmul.f32	s13, s13, s0
 801249e:	edc4 5a07 	vstr	s11, [r4, #28]
 80124a2:	ed84 6a08 	vstr	s12, [r4, #32]
 80124a6:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 80124aa:	e6f2      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
 80124ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80124b0:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 80124b4:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 80124b6:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 80124ba:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 80124be:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80124c0:	e6e7      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80124c2:	ed94 7a05 	vldr	s14, [r4, #20]
 80124c6:	e6e4      	b.n	8012292 <tVZFilter_setFreqFast+0x92>
 80124c8:	41f4898d 	.word	0x41f4898d
 80124cc:	40490fdb 	.word	0x40490fdb
 80124d0:	00000000 	.word	0x00000000

080124d4 <tVZFilter_setGain>:
{
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80124da:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8012504 <tVZFilter_setGain+0x30>
 80124de:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012508 <tVZFilter_setGain+0x34>
{
 80124e2:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80124e4:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80124e6:	f001 fe3f 	bl	8014168 <LEAF_clip>
    f->invG = 1.0f/f->G;
 80124ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80124ee:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80124f0:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 80124f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124f8:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 80124fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8012500:	f7ff bc74 	b.w	8011dec <tVZFilter_calcCoeffs>
 8012504:	457a0000 	.word	0x457a0000
 8012508:	358637bd 	.word	0x358637bd

0801250c <tVZFilter_setResonance>:
{
 801250c:	b538      	push	{r3, r4, r5, lr}
 801250e:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8012512:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801253c <tVZFilter_setResonance+0x30>
 8012516:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012540 <tVZFilter_setResonance+0x34>
{
 801251a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 801251c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801251e:	f001 fe23 	bl	8014168 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8012522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8012526:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8012528:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 801252c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012530:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8012534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8012538:	f7ff bc58 	b.w	8011dec <tVZFilter_calcCoeffs>
 801253c:	42c80000 	.word	0x42c80000
 8012540:	3c23d70a 	.word	0x3c23d70a

08012544 <tVZFilter_setFrequencyAndResonance>:
{
 8012544:	b538      	push	{r3, r4, r5, lr}
 8012546:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 801254a:	6804      	ldr	r4, [r0, #0]
{
 801254c:	eeb0 8a60 	vmov.f32	s16, s1
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 8012550:	eddf 7a13 	vldr	s15, [pc, #76]	; 80125a0 <tVZFilter_setFrequencyAndResonance+0x5c>
 8012554:	eef0 0a40 	vmov.f32	s1, s0
 8012558:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
{
 801255c:	4605      	mov	r5, r0
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 801255e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80125a4 <tVZFilter_setFrequencyAndResonance+0x60>
 8012562:	ee21 1a27 	vmul.f32	s2, s2, s15
 8012566:	f001 fdff 	bl	8014168 <LEAF_clip>
 801256a:	eef0 7a40 	vmov.f32	s15, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801256e:	eef0 0a48 	vmov.f32	s1, s16
 8012572:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80125a8 <tVZFilter_setFrequencyAndResonance+0x64>
 8012576:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80125ac <tVZFilter_setFrequencyAndResonance+0x68>
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 801257a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801257e:	f001 fdf3 	bl	8014168 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8012582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8012586:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    tVZFilter_calcCoeffs(vf);
 801258a:	4628      	mov	r0, r5
    f->R2 = 1.0f / f->Q;
 801258c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012590:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012594:	ecbd 8b02 	vpop	{d8}
 8012598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 801259c:	f7ff bc26 	b.w	8011dec <tVZFilter_calcCoeffs>
 80125a0:	3ecccccd 	.word	0x3ecccccd
 80125a4:	3dcccccd 	.word	0x3dcccccd
 80125a8:	42c80000 	.word	0x42c80000
 80125ac:	3c23d70a 	.word	0x3c23d70a

080125b0 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 80125b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 80125b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80125dc <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80125b8:	4909      	ldr	r1, [pc, #36]	; (80125e0 <tVZFilter_setSampleRate+0x30>)
 80125ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
 80125be:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
 80125c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
 80125c4:	4a07      	ldr	r2, [pc, #28]	; (80125e4 <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
 80125c6:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	bfd8      	it	le
 80125d0:	460a      	movle	r2, r1
 80125d2:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
 80125d4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop
 80125dc:	47afc800 	.word	0x47afc800
 80125e0:	0801c708 	.word	0x0801c708
 80125e4:	08020708 	.word	0x08020708

080125e8 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 80125ee:	680d      	ldr	r5, [r1, #0]
{
 80125f0:	b082      	sub	sp, #8
 80125f2:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 80125f4:	2048      	movs	r0, #72	; 0x48
 80125f6:	4629      	mov	r1, r5
{
 80125f8:	eef0 8a60 	vmov.f32	s17, s1
 80125fc:	eeb0 9a41 	vmov.f32	s18, s2
 8012600:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012604:	f002 f82c 	bl	8014660 <mpool_alloc>
 8012608:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801260a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801260c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012610:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012612:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012614:	eddf 6a37 	vldr	s13, [pc, #220]	; 80126f4 <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012618:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 801261c:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012620:	eddf 9a35 	vldr	s19, [pc, #212]	; 80126f8 <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012628:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801262c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012630:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012634:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8012638:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 801263c:	686b      	ldr	r3, [r5, #4]
 801263e:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012640:	f001 fd92 	bl	8014168 <LEAF_clip>
 8012644:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012648:	f001 ffce 	bl	80145e8 <ftom>
    f->R2 =    1.0f/Q;
 801264c:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012650:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8012654:	edd4 7a06 	vldr	s15, [r4, #24]
 8012658:	eddf 6a28 	vldr	s13, [pc, #160]	; 80126fc <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
 801265c:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012660:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 8012664:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
 8012668:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 801266c:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012670:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 8012674:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012678:	f007 fb08 	bl	8019c8c <tanf>
 801267c:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012680:	eef0 0a49 	vmov.f32	s1, s18
 8012684:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8012700 <tVZFilterLS_initToPool+0x118>
 8012688:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8012704 <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801268c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012690:	f001 fd6a 	bl	8014168 <LEAF_clip>
 8012694:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8012698:	f001 fc02 	bl	8013ea0 <fastsqrtf>
 801269c:	f001 fc00 	bl	8013ea0 <fastsqrtf>
 80126a0:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126a4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80126a8:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 80126ac:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012708 <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80126b0:	4a16      	ldr	r2, [pc, #88]	; (801270c <tVZFilterLS_initToPool+0x124>)
 80126b2:	4b17      	ldr	r3, [pc, #92]	; (8012710 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80126b8:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126bc:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 80126c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126c4:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126c8:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 80126cc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126d0:	eec8 7a26 	vdiv.f32	s15, s16, s13
 80126d4:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 80126d8:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 80126dc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80126e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e4:	bfd8      	it	le
 80126e6:	4613      	movle	r3, r2
 80126e8:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 80126ea:	b002      	add	sp, #8
 80126ec:	ecbd 8b04 	vpop	{d8-d9}
 80126f0:	bd70      	pop	{r4, r5, r6, pc}
 80126f2:	bf00      	nop
 80126f4:	473b8000 	.word	0x473b8000
 80126f8:	00000000 	.word	0x00000000
 80126fc:	40490fdb 	.word	0x40490fdb
 8012700:	457a0000 	.word	0x457a0000
 8012704:	358637bd 	.word	0x358637bd
 8012708:	47afc800 	.word	0x47afc800
 801270c:	0801c708 	.word	0x0801c708
 8012710:	08020708 	.word	0x08020708

08012714 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8012714:	3118      	adds	r1, #24
 8012716:	f7ff bf67 	b.w	80125e8 <tVZFilterLS_initToPool>
 801271a:	bf00      	nop

0801271c <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 801271c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012720:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012754 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012724:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8012758 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 8012728:	490c      	ldr	r1, [pc, #48]	; (801275c <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801272a:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
 801272e:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
 8012730:	4a0b      	ldr	r2, [pc, #44]	; (8012760 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012732:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012736:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
 801273a:	eeb4 0ae6 	vcmpe.f32	s0, s13
 801273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012742:	bfd8      	it	le
 8012744:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8012746:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 801274a:	641a      	str	r2, [r3, #64]	; 0x40
 801274c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	473b8000 	.word	0x473b8000
 8012758:	47afc800 	.word	0x47afc800
 801275c:	0801c708 	.word	0x0801c708
 8012760:	08020708 	.word	0x08020708

08012764 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 8012764:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012766:	edd3 7a02 	vldr	s15, [r3, #8]
 801276a:	ed93 7a01 	vldr	s14, [r3, #4]
 801276e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012772:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 8012776:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801277a:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801277e:	eea5 0a47 	vfms.f32	s0, s10, s14
 8012782:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
 8012786:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801278a:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
 801278e:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
 8012792:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012796:	eeb0 5a47 	vmov.f32	s10, s14
 801279a:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 801279e:	eef0 5a67 	vmov.f32	s11, s15
 80127a2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80127a6:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80127aa:	ed83 5a01 	vstr	s10, [r3, #4]
}
 80127ae:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 80127b2:	edc3 5a02 	vstr	s11, [r3, #8]
}
 80127b6:	4770      	bx	lr

080127b8 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 80127b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012840 <tVZFilterLS_setFreqFast+0x88>
 80127bc:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 80127c4:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 80127c6:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80127cc:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 80127d0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 80127d4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127d8:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80127dc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 80127e0:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
 80127e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80127e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80127ec:	4562      	cmp	r2, ip
 80127ee:	bfa8      	it	ge
 80127f0:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80127f2:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80127fa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127fe:	ed92 4a01 	vldr	s8, [r2, #4]
 8012802:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012806:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801280a:	ee75 5a85 	vadd.f32	s11, s11, s10
 801280e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012812:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012816:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801281a:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801281e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012822:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012826:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801282a:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 801282e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012832:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012836:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801283a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 801283e:	4770      	bx	lr
 8012840:	41f4898d 	.word	0x41f4898d

08012844 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 8012844:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
 8012846:	6804      	ldr	r4, [r0, #0]
{
 8012848:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801284c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 801289c <tVZFilterLS_setGain+0x58>
 8012850:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80128a0 <tVZFilterLS_setGain+0x5c>
 8012854:	f001 fc88 	bl	8014168 <LEAF_clip>
 8012858:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 801285c:	f001 fb20 	bl	8013ea0 <fastsqrtf>
 8012860:	f001 fb1e 	bl	8013ea0 <fastsqrtf>
 8012864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012868:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 801286c:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8012870:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012874:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8012878:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801287c:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 8012880:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012884:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012888:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 801288c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012890:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012894:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012898:	bd10      	pop	{r4, pc}
 801289a:	bf00      	nop
 801289c:	457a0000 	.word	0x457a0000
 80128a0:	358637bd 	.word	0x358637bd

080128a4 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 80128a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 80128a8:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 80128aa:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 80128ae:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 80128b2:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 80128b6:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 80128ba:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80128be:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 80128c2:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80128c6:	eea6 6a87 	vfma.f32	s12, s13, s14
 80128ca:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80128ce:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80128d2:	4770      	bx	lr

080128d4 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 80128da:	680d      	ldr	r5, [r1, #0]
{
 80128dc:	b082      	sub	sp, #8
 80128de:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 80128e0:	2048      	movs	r0, #72	; 0x48
 80128e2:	4629      	mov	r1, r5
{
 80128e4:	eeb0 8a60 	vmov.f32	s16, s1
 80128e8:	eeb0 9a41 	vmov.f32	s18, s2
 80128ec:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 80128f0:	f001 feb6 	bl	8014660 <mpool_alloc>
 80128f4:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 80128f6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80128f8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 80128fc:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 80128fe:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012900:	eddf 6a36 	vldr	s13, [pc, #216]	; 80129dc <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012904:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012908:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801290c:	eddf 9a34 	vldr	s19, [pc, #208]	; 80129e0 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012914:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 8012918:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801291a:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
 801291e:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012920:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012924:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8012928:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801292c:	f001 fc1c 	bl	8014168 <LEAF_clip>
 8012930:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012934:	f001 fe58 	bl	80145e8 <ftom>
    f->R2 =    1.0f/Q;
 8012938:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801293c:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8012940:	edd4 7a06 	vldr	s15, [r4, #24]
 8012944:	eddf 6a27 	vldr	s13, [pc, #156]	; 80129e4 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
 8012948:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801294c:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 8012950:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 8012954:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 8012958:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801295c:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 8012960:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012964:	f007 f992 	bl	8019c8c <tanf>
 8012968:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801296c:	eef0 0a49 	vmov.f32	s1, s18
 8012970:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80129e8 <tVZFilterHS_initToPool+0x114>
 8012974:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80129ec <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012978:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801297c:	f001 fbf4 	bl	8014168 <LEAF_clip>
 8012980:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8012984:	f001 fa8c 	bl	8013ea0 <fastsqrtf>
 8012988:	f001 fa8a 	bl	8013ea0 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801298c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012990:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012994:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012998:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
 801299c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80129f0 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 80129a0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80129a4:	4a13      	ldr	r2, [pc, #76]	; (80129f4 <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
 80129a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80129aa:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
 80129ae:	4b12      	ldr	r3, [pc, #72]	; (80129f8 <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129b0:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80129b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129b8:	eec8 7a86 	vdiv.f32	s15, s17, s12
 80129bc:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 80129c0:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 80129c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80129c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129cc:	bfd8      	it	le
 80129ce:	4613      	movle	r3, r2
 80129d0:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 80129d2:	b002      	add	sp, #8
 80129d4:	ecbd 8b04 	vpop	{d8-d9}
 80129d8:	bd70      	pop	{r4, r5, r6, pc}
 80129da:	bf00      	nop
 80129dc:	473b8000 	.word	0x473b8000
 80129e0:	00000000 	.word	0x00000000
 80129e4:	40490fdb 	.word	0x40490fdb
 80129e8:	457a0000 	.word	0x457a0000
 80129ec:	358637bd 	.word	0x358637bd
 80129f0:	47afc800 	.word	0x47afc800
 80129f4:	0801c708 	.word	0x0801c708
 80129f8:	08020708 	.word	0x08020708

080129fc <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 80129fc:	3118      	adds	r1, #24
 80129fe:	f7ff bf69 	b.w	80128d4 <tVZFilterHS_initToPool>
 8012a02:	bf00      	nop

08012a04 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012a04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a08:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012a3c <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012a0c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8012a40 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012a10:	490c      	ldr	r1, [pc, #48]	; (8012a44 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8012a12:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
 8012a16:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012a18:	4a0b      	ldr	r2, [pc, #44]	; (8012a48 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012a1a:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a1e:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 8012a22:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8012a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2a:	bfd8      	it	le
 8012a2c:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8012a2e:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a32:	641a      	str	r2, [r3, #64]	; 0x40
 8012a34:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop
 8012a3c:	473b8000 	.word	0x473b8000
 8012a40:	47afc800 	.word	0x47afc800
 8012a44:	0801c708 	.word	0x0801c708
 8012a48:	08020708 	.word	0x08020708

08012a4c <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 8012a4c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012a4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8012a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8012a56:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012a5a:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 8012a5e:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8012a62:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012a66:	eee4 7a47 	vfms.f32	s15, s8, s14
 8012a6a:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
 8012a6e:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012a72:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012a76:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 8012a7a:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012a7e:	eeb0 5a47 	vmov.f32	s10, s14
 8012a82:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012a86:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
 8012a8a:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012a8e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012a92:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012a96:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012a9a:	edc3 6a02 	vstr	s13, [r3, #8]
}
 8012a9e:	4770      	bx	lr

08012aa0 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8012aa0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012b28 <tVZFilterHS_setFreqFast+0x88>
 8012aa4:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012aa8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 8012aac:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 8012aae:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012ab2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012ab4:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 8012ab8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 8012abc:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012ac0:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012ac4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 8012ac8:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
 8012acc:	edd3 6a04 	vldr	s13, [r3, #16]
 8012ad0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012ad4:	4562      	cmp	r2, ip
 8012ad6:	bfa8      	it	ge
 8012ad8:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012ada:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012ade:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012ae2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012ae6:	ed92 4a01 	vldr	s8, [r2, #4]
 8012aea:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012aee:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012af2:	ee75 5a85 	vadd.f32	s11, s11, s10
 8012af6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012afa:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012afe:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012b02:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012b06:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012b0a:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012b0e:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b12:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 8012b16:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b1a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012b1e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012b22:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8012b26:	4770      	bx	lr
 8012b28:	41f4898d 	.word	0x41f4898d

08012b2c <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 8012b2c:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
 8012b2e:	6804      	ldr	r4, [r0, #0]
{
 8012b30:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012b34:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8012b80 <tVZFilterHS_setGain+0x54>
 8012b38:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8012b84 <tVZFilterHS_setGain+0x58>
 8012b3c:	f001 fb14 	bl	8014168 <LEAF_clip>
 8012b40:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8012b44:	f001 f9ac 	bl	8013ea0 <fastsqrtf>
 8012b48:	f001 f9aa 	bl	8013ea0 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012b4c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8012b54:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012b58:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8012b5c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b60:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 8012b64:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012b68:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b6c:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 8012b70:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012b78:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	bf00      	nop
 8012b80:	457a0000 	.word	0x457a0000
 8012b84:	358637bd 	.word	0x358637bd

08012b88 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 8012b88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 8012b8c:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 8012b8e:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 8012b92:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 8012b96:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 8012b9a:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 8012b9e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ba2:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 8012ba6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012baa:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012bae:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012bb2:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8012bb6:	4770      	bx	lr

08012bb8 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 8012bbe:	680d      	ldr	r5, [r1, #0]
{
 8012bc0:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012bc2:	2040      	movs	r0, #64	; 0x40
{
 8012bc4:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012bc8:	4629      	mov	r1, r5
{
 8012bca:	eef0 9a60 	vmov.f32	s19, s1
 8012bce:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012bd2:	f001 fd45 	bl	8014660 <mpool_alloc>
 8012bd6:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012bd8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 8012bdc:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012bde:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 8012be0:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012be2:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
 8012be6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012d08 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012bea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012bee:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012bf2:	ed9f 9a46 	vldr	s18, [pc, #280]	; 8012d0c <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012bfa:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 8012bfe:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c00:	eddf aa43 	vldr	s21, [pc, #268]	; 8012d10 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
 8012c04:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012c06:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012c0a:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c0e:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
 8012c12:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012c16:	f001 faa7 	bl	8014168 <LEAF_clip>
 8012c1a:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012c1e:	f001 fce3 	bl	80145e8 <ftom>
 8012c22:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012c26:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8012d14 <tVZFilterBell_initToPool+0x15c>
 8012c2a:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
 8012c2e:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
 8012c32:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
 8012c36:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 8012c3a:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012c3e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8012d18 <tVZFilterBell_initToPool+0x160>
 8012c42:	f001 fa91 	bl	8014168 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c46:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012c4a:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c4e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012c52:	f007 f81b 	bl	8019c8c <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c56:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c5a:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c5e:	edd4 0a08 	vldr	s1, [r4, #32]
 8012c62:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012c66:	ed94 8a06 	vldr	s16, [r4, #24]
 8012c6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 8012c6e:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c72:	f001 f9eb 	bl	801404c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012c76:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8012c7a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012c7e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012c82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c86:	f001 f8bd 	bl	8013e04 <fastertanf>
    Lfloat r  = f->g/wl;
 8012c8a:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012c8e:	eeb0 5a68 	vmov.f32	s10, s17
 8012c92:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 8012c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012c9a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012c9e:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012ca2:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ca6:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 8012caa:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012cae:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012cb2:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012cb6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cba:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012cbe:	f001 f8ef 	bl	8013ea0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012cc2:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8012cc6:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012d1c <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012cca:	4a15      	ldr	r2, [pc, #84]	; (8012d20 <tVZFilterBell_initToPool+0x168>)
 8012ccc:	4b15      	ldr	r3, [pc, #84]	; (8012d24 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012cce:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012cd2:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
 8012cd6:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012cda:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012cde:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012ce2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ce6:	eec8 7a86 	vdiv.f32	s15, s17, s12
 8012cea:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8012cee:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012cf2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfa:	bfd8      	it	le
 8012cfc:	4613      	movle	r3, r2
 8012cfe:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 8012d00:	ecbd 8b06 	vpop	{d8-d10}
 8012d04:	bd70      	pop	{r4, r5, r6, pc}
 8012d06:	bf00      	nop
 8012d08:	473b8000 	.word	0x473b8000
 8012d0c:	00000000 	.word	0x00000000
 8012d10:	40490fdb 	.word	0x40490fdb
 8012d14:	457a0000 	.word	0x457a0000
 8012d18:	358637bd 	.word	0x358637bd
 8012d1c:	47afc800 	.word	0x47afc800
 8012d20:	0801c708 	.word	0x0801c708
 8012d24:	08020708 	.word	0x08020708

08012d28 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8012d28:	3118      	adds	r1, #24
 8012d2a:	f7ff bf45 	b.w	8012bb8 <tVZFilterBell_initToPool>
 8012d2e:	bf00      	nop

08012d30 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012d30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012d34:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012d68 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012d38:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8012d6c <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012d3c:	490c      	ldr	r1, [pc, #48]	; (8012d70 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8012d3e:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
 8012d42:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012d44:	4a0b      	ldr	r2, [pc, #44]	; (8012d74 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012d46:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 8012d4a:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 8012d4e:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8012d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d56:	bfd8      	it	le
 8012d58:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8012d5a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8012d60:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
 8012d64:	4770      	bx	lr
 8012d66:	bf00      	nop
 8012d68:	473b8000 	.word	0x473b8000
 8012d6c:	47afc800 	.word	0x47afc800
 8012d70:	0801c708 	.word	0x0801c708
 8012d74:	08020708 	.word	0x08020708

08012d78 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 8012d78:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012d7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8012d7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012d82:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012d86:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
 8012d8a:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8012d8e:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012d92:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
 8012d96:	edd3 5a04 	vldr	s11, [r3, #16]
 8012d9a:	edd3 4a07 	vldr	s9, [r3, #28]
 8012d9e:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012da2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012da6:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 8012daa:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012dae:	eeb0 5a47 	vmov.f32	s10, s14
 8012db2:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012db6:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012dba:	eef0 5a66 	vmov.f32	s11, s13
 8012dbe:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012dc2:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012dc6:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012dca:	edc3 5a02 	vstr	s11, [r3, #8]
}
 8012dce:	4770      	bx	lr

08012dd0 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 8012dd0:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012dd4:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8012dd8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 8012ddc:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
 8012dde:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012de0:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8012de4:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
 8012de8:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012dec:	ed94 8a06 	vldr	s16, [r4, #24]
 8012df0:	f001 f92c 	bl	801404c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012df4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012df8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012e58 <tVZFilterBell_setBandwidth+0x88>
 8012dfc:	ee28 8a07 	vmul.f32	s16, s16, s14
 8012e00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012e04:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012e08:	f000 fffc 	bl	8013e04 <fastertanf>
    Lfloat r  = f->g/wl;
 8012e0c:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
 8012e14:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e18:	ed94 0a07 	vldr	s0, [r4, #28]
 8012e1c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012e20:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012e24:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e28:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
 8012e2c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e30:	eef0 6a47 	vmov.f32	s13, s14
 8012e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012e38:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012e3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012e40:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012e44:	f001 f82c 	bl	8013ea0 <fastsqrtf>
 8012e48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012e4c:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8012e50:	ecbd 8b02 	vpop	{d8}
 8012e54:	bd10      	pop	{r4, pc}
 8012e56:	bf00      	nop
 8012e58:	40490fdb 	.word	0x40490fdb

08012e5c <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	ed2d 8b02 	vpush	{d8}
 8012e62:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8012f10 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e66:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 8012e6a:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 8012e6c:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
 8012e70:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
 8012e74:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012e78:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012e7c:	f006 ff06 	bl	8019c8c <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012e80:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8012e84:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012e88:	edd4 0a08 	vldr	s1, [r4, #32]
 8012e8c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012e90:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 8012e94:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012e98:	f001 f8d8 	bl	801404c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012e9c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012ea0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012ea4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012ea8:	f000 ffac 	bl	8013e04 <fastertanf>
    Lfloat r  = f->g/wl;
 8012eac:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012eb0:	eeb0 5a68 	vmov.f32	s10, s17
 8012eb4:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 8012eb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ebc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012ec0:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012ec4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ec8:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 8012ecc:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ed0:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012ed4:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012ed8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012edc:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012ee0:	f000 ffde 	bl	8013ea0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012ee4:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ee8:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012eec:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
 8012ef0:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ef4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ef8:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012efc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012f00:	eec8 7aa6 	vdiv.f32	s15, s17, s13
 8012f04:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012f08:	ecbd 8b02 	vpop	{d8}
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	bf00      	nop
 8012f10:	40490fdb 	.word	0x40490fdb

08012f14 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8012f14:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013024 <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012f18:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8012f1c:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012f20:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
 8012f24:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012f28:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
 8012f2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
 8012f30:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
 8012f32:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
 8012f34:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012f38:	eeb0 7a67 	vmov.f32	s14, s15
 8012f3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
 8012f40:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012f44:	ed94 6a08 	vldr	s12, [r4, #32]
 8012f48:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f4a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012f4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012f50:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012f54:	bfa8      	it	ge
 8012f56:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f58:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012f5c:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f60:	ee38 6a67 	vsub.f32	s12, s16, s15
 8012f64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
 8012f68:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012f6c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012f70:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f74:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
 8012f78:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f7c:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012f80:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f84:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
 8012f88:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f8c:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012f90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012f94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012f98:	4562      	cmp	r2, ip
 8012f9a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012f9e:	bfa8      	it	ge
 8012fa0:	4662      	movge	r2, ip
 8012fa2:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
 8012fa6:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012faa:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
 8012fae:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012fb2:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012fb6:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012fba:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012fbe:	ed93 6a00 	vldr	s12, [r3]
 8012fc2:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012fc6:	edd3 5a01 	vldr	s11, [r3, #4]
 8012fca:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012fce:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
 8012fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012fd6:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012fda:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
 8012fde:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012fe2:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8012fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012fea:	ee77 7a44 	vsub.f32	s15, s14, s8
 8012fee:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012ff2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012ff6:	f000 ff53 	bl	8013ea0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012ffa:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ffe:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8013002:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8013006:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801300a:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801300e:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8013012:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8013016:	eec8 7a26 	vdiv.f32	s15, s16, s13
 801301a:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801301e:	ecbd 8b02 	vpop	{d8}
 8013022:	bd10      	pop	{r4, pc}
 8013024:	41f4898d 	.word	0x41f4898d

08013028 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 8013028:	b510      	push	{r4, lr}
 801302a:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 801302e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 8013032:	6804      	ldr	r4, [r0, #0]
{
 8013034:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013038:	ed9f 1a18 	vldr	s2, [pc, #96]	; 801309c <tVZFilterBell_setGain+0x74>
 801303c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80130a0 <tVZFilterBell_setGain+0x78>
 8013040:	f001 f892 	bl	8014168 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8013044:	eef0 5a48 	vmov.f32	s11, s16
 8013048:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801304c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013050:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013054:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8013058:	eee7 5a07 	vfma.f32	s11, s14, s14
 801305c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8013060:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013068:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801306c:	f000 ff18 	bl	8013ea0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8013070:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8013074:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8013078:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 801307c:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8013080:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8013084:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8013088:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801308c:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8013090:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8013094:	ecbd 8b02 	vpop	{d8}
 8013098:	bd10      	pop	{r4, pc}
 801309a:	bf00      	nop
 801309c:	457a0000 	.word	0x457a0000
 80130a0:	358637bd 	.word	0x358637bd

080130a4 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80130aa:	698d      	ldr	r5, [r1, #24]
{
 80130ac:	eeb0 8a40 	vmov.f32	s16, s0
 80130b0:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80130b2:	2048      	movs	r0, #72	; 0x48
 80130b4:	4629      	mov	r1, r5
{
 80130b6:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80130ba:	f001 fad1 	bl	8014660 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80130be:	ed9f 0a27 	vldr	s0, [pc, #156]	; 801315c <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80130c2:	6030      	str	r0, [r6, #0]
 80130c4:	4604      	mov	r4, r0
    f->mempool = m;
 80130c6:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80130c8:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
 80130cc:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
 80130ce:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
 80130d2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80130d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
 80130da:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80130de:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80130e2:	f006 fe69 	bl	8019db8 <tan>
 80130e6:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
 80130ea:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80130ee:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 80130f2:	f001 fa79 	bl	80145e8 <ftom>
    f->r = (7.f * resonance + 0.5f);
 80130f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80130fa:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 80130fe:	4b18      	ldr	r3, [pc, #96]	; (8013160 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8013100:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
 8013104:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
 8013106:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
 801310a:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
 801310c:	4b15      	ldr	r3, [pc, #84]	; (8013164 <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
 801310e:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
 8013110:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
 8013114:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
 8013116:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
 8013118:	4913      	ldr	r1, [pc, #76]	; (8013168 <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
 801311a:	4a14      	ldr	r2, [pc, #80]	; (801316c <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
 801311c:	4b14      	ldr	r3, [pc, #80]	; (8013170 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
 801311e:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8013120:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
 8013122:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 8013124:	4a13      	ldr	r2, [pc, #76]	; (8013174 <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
 8013126:	4b14      	ldr	r3, [pc, #80]	; (8013178 <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
 8013128:	4914      	ldr	r1, [pc, #80]	; (801317c <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
 801312a:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 801312c:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
 801312e:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
 8013132:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8013136:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
 801313a:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
 801313c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013180 <tDiodeFilter_init+0xdc>
 8013140:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013144:	4a0f      	ldr	r2, [pc, #60]	; (8013184 <tDiodeFilter_init+0xe0>)
 8013146:	eef4 7ac7 	vcmpe.f32	s15, s14
 801314a:	4b0f      	ldr	r3, [pc, #60]	; (8013188 <tDiodeFilter_init+0xe4>)
 801314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013150:	bfd8      	it	le
 8013152:	4613      	movle	r3, r2
 8013154:	6423      	str	r3, [r4, #64]	; 0x40
}
 8013156:	ecbd 8b02 	vpop	{d8}
 801315a:	bd70      	pop	{r4, r5, r6, pc}
 801315c:	40490fdb 	.word	0x40490fdb
 8013160:	3feb020c 	.word	0x3feb020c
 8013164:	3f6b020c 	.word	0x3f6b020c
 8013168:	3f0b6efd 	.word	0x3f0b6efd
 801316c:	3e39e952 	.word	0x3e39e952
 8013170:	3c23d70a 	.word	0x3c23d70a
 8013174:	3cf5c28f 	.word	0x3cf5c28f
 8013178:	3d23d70a 	.word	0x3d23d70a
 801317c:	3ca3d70a 	.word	0x3ca3d70a
 8013180:	47afc800 	.word	0x47afc800
 8013184:	0801c708 	.word	0x0801c708
 8013188:	08020708 	.word	0x08020708

0801318c <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 801318c:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 801318e:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013190:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013194:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
 8013198:	eddf 6aee 	vldr	s13, [pc, #952]	; 8013554 <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
 801319c:	eddf 5aee 	vldr	s11, [pc, #952]	; 8013558 <tDiodeFilter_tick+0x3cc>
{
 80131a0:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80131a4:	ed94 4a03 	vldr	s8, [r4, #12]
{
 80131a8:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80131ac:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 80131b0:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80131b4:	ee67 7a44 	vnmul.f32	s15, s14, s8
 80131b8:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 80131bc:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80131c0:	ed94 2a02 	vldr	s4, [r4, #8]
 80131c4:	eee6 7a23 	vfma.f32	s15, s12, s7
 80131c8:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
 80131cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131d0:	eee7 6aa4 	vfma.f32	s13, s15, s9
 80131d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
 80131d8:	eef4 6a65 	vcmp.f32	s13, s11
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	f000 81aa 	beq.w	8013538 <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131e4:	ed9f 6add 	vldr	s12, [pc, #884]	; 801355c <tDiodeFilter_tick+0x3d0>
 80131e8:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80131ec:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131f0:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80131f4:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80131f8:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80131fc:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013200:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013204:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
 8013208:	eddf 1ad4 	vldr	s3, [pc, #848]	; 801355c <tDiodeFilter_tick+0x3d0>
 801320c:	eddf 4ad4 	vldr	s9, [pc, #848]	; 8013560 <tDiodeFilter_tick+0x3d4>
    if (!isfinite(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013210:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8013214:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013218:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8013554 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 801321c:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013220:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013224:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 8013228:	eddf 4acb 	vldr	s9, [pc, #812]	; 8013558 <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
 801322c:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013230:	eef0 7a46 	vmov.f32	s15, s12
 8013234:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8013554 <tDiodeFilter_tick+0x3c8>
 8013238:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801323c:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 801355c <tDiodeFilter_tick+0x3d0>
 8013240:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013248:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801324c:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
 8013250:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013254:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8013258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801325c:	bf18      	it	ne
 801325e:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013262:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013266:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 801326a:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8013560 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 801326e:	bf08      	it	eq
 8013270:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013274:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013278:	ee36 5a85 	vadd.f32	s10, s13, s10
 801327c:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 8013280:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 8013284:	eea6 8a85 	vfma.f32	s16, s13, s10
 8013288:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 8013560 <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801328c:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013290:	ee37 5a85 	vadd.f32	s10, s15, s10
 8013294:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
 8013298:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8013558 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801329c:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 80132a0:	eeb4 6a65 	vcmp.f32	s12, s11
 80132a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80132a8:	bf18      	it	ne
 80132aa:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 80132ae:	ed9f 1aab 	vldr	s2, [pc, #684]	; 801355c <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80132b2:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 80132b6:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 80132ba:	bf08      	it	eq
 80132bc:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80132c0:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80132c4:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
 80132c8:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 8013558 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80132cc:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 80132d0:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80132d4:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 80132d8:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80132dc:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8013554 <tDiodeFilter_tick+0x3c8>
 80132e0:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80132e4:	eddf 2a9d 	vldr	s5, [pc, #628]	; 801355c <tDiodeFilter_tick+0x3d0>
 80132e8:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80132ec:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 80132f0:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80132f4:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 80132f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80132fc:	bf18      	it	ne
 80132fe:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013302:	eddf 5a97 	vldr	s11, [pc, #604]	; 8013560 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 8013306:	bf08      	it	eq
 8013308:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801330c:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8013310:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013314:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013318:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801331c:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8013554 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013320:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013324:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013328:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801332c:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
 8013330:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013334:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013338:	eddf 0a88 	vldr	s1, [pc, #544]	; 801355c <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801333c:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8013340:	eddf 1a85 	vldr	s3, [pc, #532]	; 8013558 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013344:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
 8013348:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 801334c:	eddf 1a84 	vldr	s3, [pc, #528]	; 8013560 <tDiodeFilter_tick+0x3d4>
 8013350:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
 8013354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8013358:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801335c:	bf14      	ite	ne
 801335e:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 8013362:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013366:	ee37 6a24 	vadd.f32	s12, s14, s9
 801336a:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801336e:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013372:	ee73 2aa4 	vadd.f32	s5, s7, s9
 8013376:	ee74 0a81 	vadd.f32	s1, s9, s2
 801337a:	ee72 2a81 	vadd.f32	s5, s5, s2
 801337e:	eeb0 1a60 	vmov.f32	s2, s1
 8013382:	eef0 0a61 	vmov.f32	s1, s3
 8013386:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801338a:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801338e:	eea2 1aa6 	vfma.f32	s2, s5, s13
 8013392:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013396:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 801339a:	ee35 8a28 	vadd.f32	s16, s10, s17
 801339e:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80133a2:	ee67 2a26 	vmul.f32	s5, s14, s13
 80133a6:	eee5 0a21 	vfma.f32	s1, s10, s3
 80133aa:	eea1 6a27 	vfma.f32	s12, s2, s15
 80133ae:	eeb0 1a47 	vmov.f32	s2, s14
 80133b2:	eea2 1aa1 	vfma.f32	s2, s5, s3
 80133b6:	ee62 2aa8 	vmul.f32	s5, s5, s17
 80133ba:	eee7 2a21 	vfma.f32	s5, s14, s3
 80133be:	eea2 1aa7 	vfma.f32	s2, s5, s15
 80133c2:	eef0 2a41 	vmov.f32	s5, s2
 80133c6:	eeb0 1a42 	vmov.f32	s2, s4
 80133ca:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80133ce:	eea4 1a03 	vfma.f32	s2, s8, s6
 80133d2:	eeb0 6a42 	vmov.f32	s12, s4
 80133d6:	eea5 6a21 	vfma.f32	s12, s10, s3
 80133da:	ee35 2a01 	vadd.f32	s4, s10, s2
 80133de:	ee35 1a29 	vadd.f32	s2, s10, s19
 80133e2:	eea2 8a26 	vfma.f32	s16, s4, s13
 80133e6:	ee35 2a21 	vadd.f32	s4, s10, s3
 80133ea:	eea6 2a26 	vfma.f32	s4, s12, s13
 80133ee:	eeb0 6a45 	vmov.f32	s12, s10
 80133f2:	eea8 2a27 	vfma.f32	s4, s16, s15
 80133f6:	ee21 8a26 	vmul.f32	s16, s2, s13
 80133fa:	eee8 0a28 	vfma.f32	s1, s16, s17
 80133fe:	eea8 6a21 	vfma.f32	s12, s16, s3
 8013402:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8013406:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (!isfinite(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 801340a:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 801340e:	eeb4 6a42 	vcmp.f32	s12, s4
 8013412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (!isfinite(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013416:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801341a:	bf14      	ite	ne
 801341c:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8013420:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 8013564 <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
 8013424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013428:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
 801342c:	f000 808c 	beq.w	8013548 <tDiodeFilter_tick+0x3bc>
 8013430:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8013434:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013438:	eef5 7a40 	vcmp.f32	s15, #0.0
 801343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013440:	d07d      	beq.n	801353e <tDiodeFilter_tick+0x3b2>
 8013442:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8013446:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 801344a:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 801344e:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013452:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
 8013456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345a:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801345e:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
 8013462:	bf08      	it	eq
 8013464:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 8013564 <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013468:	ee31 1a25 	vadd.f32	s2, s2, s11
 801346c:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013470:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013474:	ee91 4a02 	vfnms.f32	s8, s2, s4
 8013478:	eeb0 1a40 	vmov.f32	s2, s0
 801347c:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013480:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
 8013484:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013488:	ee92 4a86 	vfnms.f32	s8, s5, s12
 801348c:	eea7 1a86 	vfma.f32	s2, s15, s12
 8013490:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013494:	ee91 1aa2 	vfnms.f32	s2, s3, s5
 8013498:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801349c:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80134a0:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80134a4:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80134a8:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80134ac:	ee26 6a25 	vmul.f32	s12, s12, s11
 80134b0:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80134b4:	eee3 6a20 	vfma.f32	s13, s6, s1
 80134b8:	eeb0 4a46 	vmov.f32	s8, s12
 80134bc:	eed2 1aa7 	vfnms.f32	s3, s5, s15
 80134c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80134c4:	eea2 4ae7 	vfms.f32	s8, s5, s15
 80134c8:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
 80134cc:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80134d0:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80134d4:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80134d8:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80134dc:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
 80134e0:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80134e4:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80134e8:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
 80134ec:	f006 fbfa 	bl	8019ce4 <tanhf>
 80134f0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 80134f4:	eeb0 0a69 	vmov.f32	s0, s19
 80134f8:	f006 fbf4 	bl	8019ce4 <tanhf>
 80134fc:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
 8013500:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
 8013504:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8013508:	f006 fbec 	bl	8019ce4 <tanhf>
 801350c:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
 8013510:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
 8013514:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8013518:	f006 fbe4 	bl	8019ce4 <tanhf>
 801351c:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
 8013520:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
 8013524:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
 8013528:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
 801352c:	ecbd 8b06 	vpop	{d8-d10}
 8013530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
 8013534:	f006 bbd6 	b.w	8019ce4 <tanhf>
    Lfloat output = 1.0f;
 8013538:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801353c:	e656      	b.n	80131ec <tDiodeFilter_tick+0x60>
 801353e:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8013568 <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
 8013542:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013564 <tDiodeFilter_tick+0x3d8>
 8013546:	e780      	b.n	801344a <tDiodeFilter_tick+0x2be>
 8013548:	eddf 1a07 	vldr	s3, [pc, #28]	; 8013568 <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
 801354c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8013564 <tDiodeFilter_tick+0x3d8>
 8013550:	e772      	b.n	8013438 <tDiodeFilter_tick+0x2ac>
 8013552:	bf00      	nop
 8013554:	43d20000 	.word	0x43d20000
 8013558:	c46c4000 	.word	0xc46c4000
 801355c:	446c4000 	.word	0x446c4000
 8013560:	42d20000 	.word	0x42d20000
 8013564:	358637bd 	.word	0x358637bd
 8013568:	3f800008 	.word	0x3f800008

0801356c <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 801356c:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 801356e:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013570:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013574:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
 8013578:	ed9f 7aee 	vldr	s14, [pc, #952]	; 8013934 <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
 801357c:	eddf 5aee 	vldr	s11, [pc, #952]	; 8013938 <tDiodeFilter_tickEfficient+0x3cc>
{
 8013580:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013584:	ed94 5a03 	vldr	s10, [r4, #12]
{
 8013588:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801358c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8013590:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013594:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 8013598:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 801359c:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80135a0:	ed94 2a02 	vldr	s4, [r4, #8]
 80135a4:	eee6 7a23 	vfma.f32	s15, s12, s7
 80135a8:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
 80135ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80135b0:	eea7 7a84 	vfma.f32	s14, s15, s8
 80135b4:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
 80135b8:	eeb4 7a65 	vcmp.f32	s14, s11
 80135bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c0:	f000 81aa 	beq.w	8013918 <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80135c4:	ed9f 6add 	vldr	s12, [pc, #884]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
 80135c8:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80135cc:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80135d0:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80135d4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80135d8:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80135dc:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80135e0:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80135e4:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
 80135e8:	eddf 1ad4 	vldr	s3, [pc, #848]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
 80135ec:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 8013940 <tDiodeFilter_tickEfficient+0x3d4>
    if (!isfinite(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80135f0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80135f4:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80135f8:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8013934 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 80135fc:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013600:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013604:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
 8013608:	ed9f 4acb 	vldr	s8, [pc, #812]	; 8013938 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
 801360c:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013610:	eef0 7a46 	vmov.f32	s15, s12
 8013614:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8013934 <tDiodeFilter_tickEfficient+0x3c8>
 8013618:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801361c:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
 8013620:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013628:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801362c:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
 8013630:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013634:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801363c:	bf18      	it	ne
 801363e:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013642:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013646:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 801364a:	eddf 4abd 	vldr	s9, [pc, #756]	; 8013940 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 801364e:	bf08      	it	eq
 8013650:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013654:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013658:	ee77 4a24 	vadd.f32	s9, s14, s9
 801365c:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 8013660:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 8013664:	eee7 8a24 	vfma.f32	s17, s14, s9
 8013668:	eddf 4ab5 	vldr	s9, [pc, #724]	; 8013940 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801366c:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013670:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8013674:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
 8013678:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8013938 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801367c:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 8013680:	eeb4 6a65 	vcmp.f32	s12, s11
 8013684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013688:	bf18      	it	ne
 801368a:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801368e:	ed9f 1aab 	vldr	s2, [pc, #684]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013692:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
 8013696:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 801369a:	bf08      	it	eq
 801369c:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80136a0:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80136a4:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 80136a8:	eddf 4aa3 	vldr	s9, [pc, #652]	; 8013938 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136ac:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 80136b0:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80136b4:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 80136b8:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136bc:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8013934 <tDiodeFilter_tickEfficient+0x3c8>
 80136c0:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80136c4:	eddf 2a9d 	vldr	s5, [pc, #628]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
 80136c8:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136cc:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 80136d0:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80136d4:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 80136d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136dc:	bf18      	it	ne
 80136de:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 80136e2:	eddf 5a97 	vldr	s11, [pc, #604]	; 8013940 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 80136e6:	bf08      	it	eq
 80136e8:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80136ec:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 80136f0:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80136f4:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 80136f8:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136fc:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8013934 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013700:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013704:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013708:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801370c:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
 8013710:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013714:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013718:	eddf 0a88 	vldr	s1, [pc, #544]	; 801393c <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801371c:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8013720:	eddf 1a85 	vldr	s3, [pc, #532]	; 8013938 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013724:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
 8013728:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 801372c:	eddf 1a84 	vldr	s3, [pc, #528]	; 8013940 <tDiodeFilter_tickEfficient+0x3d4>
 8013730:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
 8013734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8013738:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801373c:	bf14      	ite	ne
 801373e:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 8013742:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013746:	ee36 6a84 	vadd.f32	s12, s13, s8
 801374a:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801374e:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013752:	ee70 2a04 	vadd.f32	s5, s0, s8
 8013756:	ee74 0a01 	vadd.f32	s1, s8, s2
 801375a:	ee72 2a81 	vadd.f32	s5, s5, s2
 801375e:	eeb0 1a60 	vmov.f32	s2, s1
 8013762:	eef0 0a61 	vmov.f32	s1, s3
 8013766:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801376a:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801376e:	eea2 1a87 	vfma.f32	s2, s5, s14
 8013772:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013776:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 801377a:	ee74 8a89 	vadd.f32	s17, s9, s18
 801377e:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013782:	ee66 2a87 	vmul.f32	s5, s13, s14
 8013786:	eee4 0aa1 	vfma.f32	s1, s9, s3
 801378a:	eea1 6a27 	vfma.f32	s12, s2, s15
 801378e:	eeb0 1a66 	vmov.f32	s2, s13
 8013792:	eea2 1aa1 	vfma.f32	s2, s5, s3
 8013796:	ee62 2a89 	vmul.f32	s5, s5, s18
 801379a:	eee6 2aa1 	vfma.f32	s5, s13, s3
 801379e:	eea2 1aa7 	vfma.f32	s2, s5, s15
 80137a2:	eef0 2a41 	vmov.f32	s5, s2
 80137a6:	eeb0 1a42 	vmov.f32	s2, s4
 80137aa:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80137ae:	eea5 1a03 	vfma.f32	s2, s10, s6
 80137b2:	eeb0 6a42 	vmov.f32	s12, s4
 80137b6:	eea4 6aa1 	vfma.f32	s12, s9, s3
 80137ba:	ee34 2a81 	vadd.f32	s4, s9, s2
 80137be:	ee34 1aa9 	vadd.f32	s2, s9, s19
 80137c2:	eee2 8a07 	vfma.f32	s17, s4, s14
 80137c6:	ee34 2aa1 	vadd.f32	s4, s9, s3
 80137ca:	eea6 2a07 	vfma.f32	s4, s12, s14
 80137ce:	eeb0 6a64 	vmov.f32	s12, s9
 80137d2:	eea8 2aa7 	vfma.f32	s4, s17, s15
 80137d6:	ee61 8a07 	vmul.f32	s17, s2, s14
 80137da:	eee8 0a89 	vfma.f32	s1, s17, s18
 80137de:	eea8 6aa1 	vfma.f32	s12, s17, s3
 80137e2:	eea0 6aa7 	vfma.f32	s12, s1, s15
 80137e6:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 80137ea:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 80137ee:	eeb4 6a42 	vcmp.f32	s12, s4
 80137f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (!isfinite(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 80137f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80137fa:	bf14      	ite	ne
 80137fc:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8013800:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 8013944 <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
 8013804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013808:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
 801380c:	f000 808c 	beq.w	8013928 <tDiodeFilter_tickEfficient+0x3bc>
 8013810:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8013814:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013818:	eef5 7a40 	vcmp.f32	s15, #0.0
 801381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013820:	d07d      	beq.n	801391e <tDiodeFilter_tickEfficient+0x3b2>
 8013822:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013826:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 801382a:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 801382e:	eef0 0a48 	vmov.f32	s1, s16
 8013832:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
 8013836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
 801383a:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801383e:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
 8013842:	bf08      	it	eq
 8013844:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 8013944 <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013848:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801384c:	ee31 1a25 	vadd.f32	s2, s2, s11
 8013850:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013854:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013858:	ee91 5a28 	vfnms.f32	s10, s2, s17
 801385c:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013860:	eed2 1a06 	vfnms.f32	s3, s4, s12
 8013864:	eeb0 2a63 	vmov.f32	s4, s7
 8013868:	eea7 2a86 	vfma.f32	s4, s15, s12
 801386c:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013870:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013874:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013878:	ee38 6ac6 	vsub.f32	s12, s17, s12
 801387c:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013880:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013884:	eeb0 2a46 	vmov.f32	s4, s12
 8013888:	eea4 6aa8 	vfma.f32	s12, s9, s17
 801388c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013890:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013894:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013898:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801389c:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80138a0:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80138a4:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80138a8:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80138ac:	eeb0 7a45 	vmov.f32	s14, s10
 80138b0:	ee92 5aa7 	vfnms.f32	s10, s5, s15
 80138b4:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80138b8:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80138bc:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80138c0:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80138c4:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
 80138c8:	f000 fc7a 	bl	80141c0 <fast_tanh4>
 80138cc:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
 80138d0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
 80138d4:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 80138d8:	f000 fc72 	bl	80141c0 <fast_tanh4>
 80138dc:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
 80138e0:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
 80138e4:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 80138e8:	f000 fc6a 	bl	80141c0 <fast_tanh4>
 80138ec:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
 80138f0:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
 80138f4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 80138f8:	f000 fc62 	bl	80141c0 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
 80138fc:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
 8013900:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8013904:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
 8013908:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
 801390c:	ecbd 8b04 	vpop	{d8-d9}
 8013910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
 8013914:	f000 bc54 	b.w	80141c0 <fast_tanh4>
    Lfloat output = 1.0f;
 8013918:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801391c:	e656      	b.n	80135cc <tDiodeFilter_tickEfficient+0x60>
 801391e:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8013948 <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
 8013922:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013944 <tDiodeFilter_tickEfficient+0x3d8>
 8013926:	e780      	b.n	801382a <tDiodeFilter_tickEfficient+0x2be>
 8013928:	eddf 2a07 	vldr	s5, [pc, #28]	; 8013948 <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
 801392c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013944 <tDiodeFilter_tickEfficient+0x3d8>
 8013930:	e772      	b.n	8013818 <tDiodeFilter_tickEfficient+0x2ac>
 8013932:	bf00      	nop
 8013934:	43d20000 	.word	0x43d20000
 8013938:	c46c4000 	.word	0xc46c4000
 801393c:	446c4000 	.word	0x446c4000
 8013940:	42d20000 	.word	0x42d20000
 8013944:	358637bd 	.word	0x358637bd
 8013948:	3f800008 	.word	0x3f800008

0801394c <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 801394c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80139a4 <tDiodeFilter_setFreqFast+0x58>
 8013950:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
 8013954:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 801395a:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801395e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
 8013960:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
 8013964:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013968:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
 801396c:	ee16 3a90 	vmov	r3, s13
 8013970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013974:	4563      	cmp	r3, ip
 8013976:	bfa8      	it	ge
 8013978:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801397a:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801397e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013982:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013986:	edd3 5a01 	vldr	s11, [r3, #4]
 801398a:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801398e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013992:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013996:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801399a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801399e:	edc1 7a02 	vstr	s15, [r1, #8]
}
 80139a2:	4770      	bx	lr
 80139a4:	41f4898d 	.word	0x41f4898d

080139a8 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80139a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139ac:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80139b0:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80139b4:	eef0 0a67 	vmov.f32	s1, s15
{
 80139b8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80139ba:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80139bc:	eee0 0a07 	vfma.f32	s1, s0, s14
 80139c0:	eeb0 0a67 	vmov.f32	s0, s15
 80139c4:	f000 fbd0 	bl	8014168 <LEAF_clip>
 80139c8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80139cc:	bd10      	pop	{r4, pc}
 80139ce:	bf00      	nop

080139d0 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 80139d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 80139d4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80139f8 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80139d8:	4908      	ldr	r1, [pc, #32]	; (80139fc <tDiodeFilter_setSampleRate+0x2c>)
 80139da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80139de:	4b08      	ldr	r3, [pc, #32]	; (8013a00 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 80139e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
 80139e4:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 80139e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ea:	bfd8      	it	le
 80139ec:	460b      	movle	r3, r1
 80139ee:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
 80139f0:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop
 80139f8:	47afc800 	.word	0x47afc800
 80139fc:	0801c708 	.word	0x0801c708
 8013a00:	08020708 	.word	0x08020708

08013a04 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013a0a:	698d      	ldr	r5, [r1, #24]
{
 8013a0c:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013a0e:	2040      	movs	r0, #64	; 0x40
{
 8013a10:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013a14:	4629      	mov	r1, r5
{
 8013a16:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013a1a:	f000 fe21 	bl	8014660 <mpool_alloc>
 8013a1e:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8013a20:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
 8013a22:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8013a26:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013a28:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8013a2a:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
 8013a2c:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
 8013a30:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
 8013a32:	f000 fdd9 	bl	80145e8 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013a36:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013aa8 <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
 8013a3a:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 8013a3e:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013a40:	ee28 0a07 	vmul.f32	s0, s16, s14
 8013a44:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
 8013a48:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013a4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a4e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013a52:	f006 f9b1 	bl	8019db8 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8013a56:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013a5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 8013a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8013a62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8013a66:	4911      	ldr	r1, [pc, #68]	; (8013aac <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
 8013a68:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
 8013a6c:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
 8013a6e:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8013a72:	4b0f      	ldr	r3, [pc, #60]	; (8013ab0 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
 8013a74:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
 8013a76:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013a78:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
 8013a7c:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
 8013a7e:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
 8013a82:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
 8013a86:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013ab4 <tLadderFilter_init+0xb0>
 8013a8a:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013a8e:	4a0a      	ldr	r2, [pc, #40]	; (8013ab8 <tLadderFilter_init+0xb4>)
 8013a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a94:	4b09      	ldr	r3, [pc, #36]	; (8013abc <tLadderFilter_init+0xb8>)
 8013a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a9a:	bfd8      	it	le
 8013a9c:	4613      	movle	r3, r2
 8013a9e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8013aa0:	ecbd 8b02 	vpop	{d8}
 8013aa4:	bd70      	pop	{r4, r5, r6, pc}
 8013aa6:	bf00      	nop
 8013aa8:	40490fdb 	.word	0x40490fdb
 8013aac:	3dcccccd 	.word	0x3dcccccd
 8013ab0:	3d23d70a 	.word	0x3d23d70a
 8013ab4:	47afc800 	.word	0x47afc800
 8013ab8:	0801c708 	.word	0x0801c708
 8013abc:	08020708 	.word	0x08020708

08013ac0 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
 8013ac0:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8013ac2:	eddf 7a90 	vldr	s15, [pc, #576]	; 8013d04 <tLadderFilter_tick+0x244>
{
 8013ac6:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8013aca:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8013acc:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8013ad0:	2900      	cmp	r1, #0
 8013ad2:	f340 8112 	ble.w	8013cfa <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013ad6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013ada:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013ade:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013ae2:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8013ae6:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013aea:	ed92 7a08 	vldr	s14, [r2, #32]
 8013aee:	ee72 2a27 	vadd.f32	s5, s4, s15
 8013af2:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8013af6:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013afa:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013afe:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013b02:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8013b06:	ee25 9a28 	vmul.f32	s18, s10, s17
 8013b0a:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013b0e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8013b12:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013b16:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8013b1a:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8013b1c:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013b20:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8013d08 <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013b24:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8013b28:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8013b2a:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8013b2e:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 8013b32:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013b34:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013b38:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013b3c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8013b40:	ee22 baa5 	vmul.f32	s22, s5, s11
 8013b44:	ee26 ca22 	vmul.f32	s24, s12, s5
 8013b48:	ee72 5a25 	vadd.f32	s11, s4, s11
 8013b4c:	ee32 6a06 	vadd.f32	s12, s4, s12
 8013b50:	ee66 baa2 	vmul.f32	s23, s13, s5
 8013b54:	eecb ea25 	vdiv.f32	s29, s22, s11
 8013b58:	eecc 5a06 	vdiv.f32	s11, s24, s12
 8013b5c:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8013b60:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013b64:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 8013b68:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013b6c:	ee77 eaee 	vsub.f32	s29, s15, s29
 8013b70:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8013b74:	ee22 ba87 	vmul.f32	s22, s5, s14
 8013b78:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013b7c:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8013b80:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013b84:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8013b88:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013b8c:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013b90:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013b94:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 8013b98:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 8013b9c:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013ba0:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013ba4:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013ba8:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 8013bac:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013bb0:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013bb4:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8013bb8:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013bbc:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013bc0:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013bc4:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013bc8:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013bcc:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 8013bd0:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
 8013bd4:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8013bd8:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013bdc:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013be0:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013be4:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013be8:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8013bec:	ee65 5aae 	vmul.f32	s11, s11, s29
 8013bf0:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013bf4:	ee2c ca2c 	vmul.f32	s24, s24, s25
 8013bf8:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013bfc:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013c00:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8013c04:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013c08:	eeeb ca8e 	vfma.f32	s25, s23, s28
 8013c0c:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013c10:	eec9 baac 	vdiv.f32	s23, s19, s25
 8013c14:	eeed 5a04 	vfma.f32	s11, s26, s8
 8013c18:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013c1c:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013c20:	eeb0 da48 	vmov.f32	s26, s16
 8013c24:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013c28:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013c2c:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013c30:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013c34:	eef0 ca48 	vmov.f32	s25, s16
 8013c38:	eeab da0b 	vfma.f32	s26, s22, s22
 8013c3c:	eee5 caa5 	vfma.f32	s25, s11, s11
 8013c40:	eef1 5acd 	vsqrt.f32	s11, s26
 8013c44:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013c48:	ee3b ba65 	vsub.f32	s22, s22, s11
 8013c4c:	eef0 5a40 	vmov.f32	s11, s0
 8013c50:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013c54:	eeb0 ba43 	vmov.f32	s22, s6
 8013c58:	eea5 ba25 	vfma.f32	s22, s10, s11
 8013c5c:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013c60:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8013c64:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013c68:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8013c6c:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013c70:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013c74:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013c78:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8013c7c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8013c80:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013c84:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013c88:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013c8c:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8013c90:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013c94:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013c98:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8013c9c:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8013ca0:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8013ca4:	f47f af3e 	bne.w	8013b24 <tLadderFilter_tick+0x64>
 8013ca8:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8013cac:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8013cb0:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8013cb4:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013cb8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013d08 <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013cbc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013cc0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013cc4:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013cc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013ccc:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013cd0:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013cd4:	eee0 7aa0 	vfma.f32	s15, s1, s1
 8013cd8:	eeb0 7a67 	vmov.f32	s14, s15
 8013cdc:	eef1 7ac5 	vsqrt.f32	s15, s10
 8013ce0:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
 8013ce4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013ce8:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013cec:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
 8013cf0:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013cf4:	ecbd 8b10 	vpop	{d8-d15}
 8013cf8:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013cfa:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
 8013cfe:	ed9f ca03 	vldr	s24, [pc, #12]	; 8013d0c <tLadderFilter_tick+0x24c>
 8013d02:	e7d9      	b.n	8013cb8 <tLadderFilter_tick+0x1f8>
 8013d04:	3c75c28f 	.word	0x3c75c28f
 8013d08:	3c23d70a 	.word	0x3c23d70a
 8013d0c:	00000000 	.word	0x00000000

08013d10 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8013d10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8013d70 <tLadderFilter_setFreqFast+0x60>
 8013d14:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
 8013d18:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
 8013d1e:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d22:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
 8013d24:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
 8013d28:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d2c:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
 8013d30:	ee17 3a90 	vmov	r3, s15
 8013d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d38:	4563      	cmp	r3, ip
 8013d3a:	bfa8      	it	ge
 8013d3c:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013d3e:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013d46:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d4a:	ed93 5a01 	vldr	s10, [r3, #4]
 8013d4e:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013d52:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d56:	ee36 7a86 	vadd.f32	s14, s13, s12
 8013d5a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013d5e:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
 8013d62:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013d66:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 8013d6a:	ed82 7a06 	vstr	s14, [r2, #24]
}
 8013d6e:	4770      	bx	lr
 8013d70:	41f4898d 	.word	0x41f4898d

08013d74 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 8013d74:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8013d76:	6804      	ldr	r4, [r0, #0]
{
 8013d78:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8013d7c:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8013d80:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013d90 <tLadderFilter_setQ+0x1c>
 8013d84:	f000 f9f0 	bl	8014168 <LEAF_clip>
 8013d88:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8013d8c:	bd10      	pop	{r4, pc}
 8013d8e:	bf00      	nop
 8013d90:	3e4ccccd 	.word	0x3e4ccccd

08013d94 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 8013d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8013d98:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013dbc <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013d9c:	4908      	ldr	r1, [pc, #32]	; (8013dc0 <tLadderFilter_setSampleRate+0x2c>)
 8013d9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013da2:	4b08      	ldr	r3, [pc, #32]	; (8013dc4 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8013da4:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
 8013da8:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 8013daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dae:	bfd8      	it	le
 8013db0:	460b      	movle	r3, r1
 8013db2:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
 8013db4:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
 8013db8:	4770      	bx	lr
 8013dba:	bf00      	nop
 8013dbc:	47afc800 	.word	0x47afc800
 8013dc0:	0801c708 	.word	0x0801c708
 8013dc4:	08020708 	.word	0x08020708

08013dc8 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8013dc8:	ee70 7a60 	vsub.f32	s15, s0, s1
 8013dcc:	ee31 1a60 	vsub.f32	s2, s2, s1
 8013dd0:	ee32 2a61 	vsub.f32	s4, s4, s3
 8013dd4:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
 8013dd8:	eee2 1a07 	vfma.f32	s3, s4, s14
 8013ddc:	eeb0 0a61 	vmov.f32	s0, s3
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop

08013de4 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 8013de4:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013de8:	eee1 0a00 	vfma.f32	s1, s2, s0
 8013dec:	eeb0 0a60 	vmov.f32	s0, s1
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop

08013df4 <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
 8013df4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013df8:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013dfc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop

08013e04 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 8013e04:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8013e08:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8013e24 <fastertanf+0x20>
 8013e0c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013e28 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8013e10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8013e14:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8013e18:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8013e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop
 8013e24:	3e502de0 	.word	0x3e502de0
 8013e28:	3ea295ea 	.word	0x3ea295ea

08013e2c <my_faster_logf>:
/* natural log on [0x1.f7a5ecp-127, 0x1.fffffep127]. Maximum relative error 9.4529e-5 */
inline Lfloat my_faster_logf (Lfloat a)
{
 8013e2c:	b082      	sub	sp, #8
	Lfloat m, r, s, t, i, f;
    int32_t e;
    union unholy_t unholy;
    unholy.f = a;
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 8013e2e:	4915      	ldr	r1, [pc, #84]	; (8013e84 <my_faster_logf+0x58>)
 8013e30:	4a15      	ldr	r2, [pc, #84]	; (8013e88 <my_faster_logf+0x5c>)
    union unholy_t unholy2;
    unholy2.i = (unholy.i - e);
    m = unholy2.f;
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
    /* m in [2/3, 4/3] */
    f = m - 1.0f;
 8013e32:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
{
 8013e36:	ed8d 0a01 	vstr	s0, [sp, #4]
    unholy.f = a;
 8013e3a:	9b01      	ldr	r3, [sp, #4]
    s = f * f;
    /* Compute log1p(f) for f in [-1/3, 1/3] */
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8013e3c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8013e8c <my_faster_logf+0x60>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 8013e40:	4419      	add	r1, r3
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8013e42:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013e90 <my_faster_logf+0x64>
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8013e46:	eddf 6a13 	vldr	s13, [pc, #76]	; 8013e94 <my_faster_logf+0x68>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 8013e4a:	400a      	ands	r2, r1
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8013e4c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8013e98 <my_faster_logf+0x6c>
    r = fmaf (r, s, t);
    r = fmaf (r, s, f);
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8013e50:	eddf 5a12 	vldr	s11, [pc, #72]	; 8013e9c <my_faster_logf+0x70>
    unholy2.i = (unholy.i - e);
 8013e54:	1a9b      	subs	r3, r3, r2
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 8013e56:	ee07 2a90 	vmov	s15, r2
    unholy2.i = (unholy.i - e);
 8013e5a:	ee00 3a10 	vmov	s0, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 8013e5e:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
    f = m - 1.0f;
 8013e62:	ee30 0a64 	vsub.f32	s0, s0, s9
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8013e66:	eee5 6a00 	vfma.f32	s13, s10, s0
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8013e6a:	eea6 7a00 	vfma.f32	s14, s12, s0
    s = f * f;
 8013e6e:	ee20 6a00 	vmul.f32	s12, s0, s0
    r = fmaf (r, s, t);
 8013e72:	eea6 7a86 	vfma.f32	s14, s13, s12
    r = fmaf (r, s, f);
 8013e76:	eea7 0a06 	vfma.f32	s0, s14, s12
    return r;
}
 8013e7a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8013e7e:	b002      	add	sp, #8
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	c0d55555 	.word	0xc0d55555
 8013e88:	ff800000 	.word	0xff800000
 8013e8c:	3e6c6078 	.word	0x3e6c6078
 8013e90:	3ea9e51a 	.word	0x3ea9e51a
 8013e94:	be8ef46d 	.word	0xbe8ef46d
 8013e98:	beff712d 	.word	0xbeff712d
 8013e9c:	3f317218 	.word	0x3f317218

08013ea0 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013ea0:	ee10 2a10 	vmov	r2, s0
 8013ea4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8013ea8:	4b0d      	ldr	r3, [pc, #52]	; (8013ee0 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013eaa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013eae:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8013eb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013eb6:	ee00 3a10 	vmov	s0, r3
 8013eba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013ebe:	eea0 7a67 	vfms.f32	s14, s0, s15
 8013ec2:	ee60 7a07 	vmul.f32	s15, s0, s14
 8013ec6:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8013eca:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8013ece:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8013ed2:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8013ed6:	336e      	adds	r3, #110	; 0x6e
}
 8013ed8:	ee00 3a10 	vmov	s0, r3
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	5f3759df 	.word	0x5f3759df

08013ee4 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8013ee4:	ee10 3a10 	vmov	r3, s0
 8013ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013eec:	ee00 3a10 	vmov	s0, r3
}
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop

08013ef4 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 8013ef4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ef8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013f24 <fasterexpf+0x30>
 8013efc:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8013f00:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8013f04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f08:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f0c:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8013f10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f18:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8013f1c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop
 8013f24:	3b800000 	.word	0x3b800000

08013f28 <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f28:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013f6c <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8013f2c:	f240 4cfd 	movw	ip, #1277	; 0x4fd
 8013f30:	f643 11e9 	movw	r1, #14825	; 0x39e9
 8013f34:	4b0e      	ldr	r3, [pc, #56]	; (8013f70 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013f3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013f3e:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8013f42:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f46:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8013f4a:	fb0c fc00 	mul.w	ip, ip, r0
 8013f4e:	eb01 31ac 	add.w	r1, r1, ip, asr #14
 8013f52:	fb00 f101 	mul.w	r1, r0, r1
 8013f56:	eb03 33a1 	add.w	r3, r3, r1, asr #14
 8013f5a:	fb00 f303 	mul.w	r3, r0, r3
 8013f5e:	12db      	asrs	r3, r3, #11
 8013f60:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 8013f64:	4413      	add	r3, r2
 8013f66:	ee00 3a10 	vmov	s0, r3
}
 8013f6a:	4770      	bx	lr
 8013f6c:	4b38aa3b 	.word	0x4b38aa3b
 8013f70:	fffec87b 	.word	0xfffec87b

08013f74 <fastExp4>:

inline Lfloat fastExp4(Lfloat x)  // quartic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f74:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013fc0 <fastExp4+0x4c>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (1.21e-5):
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8013f78:	f640 5cd1 	movw	ip, #3537	; 0xdd1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 8013f7c:	f243 5264 	movw	r2, #13668	; 0x3564
 8013f80:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013f88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013f8c:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8013f90:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013f94:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8013f98:	fb0c fc00 	mul.w	ip, ip, r0
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 8013f9c:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8013fa0:	fb00 f202 	mul.w	r2, r0, r2
 8013fa4:	eb01 41a2 	add.w	r1, r1, r2, asr #18
 8013fa8:	4a06      	ldr	r2, [pc, #24]	; (8013fc4 <fastExp4+0x50>)
 8013faa:	fb00 f101 	mul.w	r1, r0, r1
 8013fae:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 8013fb2:	fb00 f202 	mul.w	r2, r0, r2
    return reinterpreter.f;
 8013fb6:	eb03 23e2 	add.w	r3, r3, r2, asr #11
 8013fba:	ee00 3a10 	vmov	s0, r3
}
 8013fbe:	4770      	bx	lr
 8013fc0:	4b38aa3b 	.word	0x4b38aa3b
 8013fc4:	fffec5aa 	.word	0xfffec5aa

08013fc8 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8013fc8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8014040 <fast_sinf2+0x78>
 8013fcc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013fd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013fd4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8013fd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe0:	d426      	bmi.n	8014030 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 8013fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 8013fe6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013fea:	4a17      	ldr	r2, [pc, #92]	; (8014048 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
 8013fec:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
 8013ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013ff8:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
 8013ffc:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
 8013ffe:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8014002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
 8014006:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
 801400a:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 801400e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
 8014012:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8014016:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 801401a:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 801401e:	ed93 7a00 	vldr	s14, [r3]
 8014022:	ee20 0a06 	vmul.f32	s0, s0, s12
 8014026:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
 801402a:	ee26 0a80 	vmul.f32	s0, s13, s0
 801402e:	4770      	bx	lr
		x *= -1.0f;
 8014030:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 8014034:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8014038:	e7d5      	b.n	8013fe6 <fast_sinf2+0x1e>
 801403a:	bf00      	nop
 801403c:	f3af 8000 	nop.w
 8014040:	6dc9c883 	.word	0x6dc9c883
 8014044:	40745f30 	.word	0x40745f30
 8014048:	08027d88 	.word	0x08027d88

0801404c <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 801404c:	ee10 3a10 	vmov	r3, s0
 8014050:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014074 <fastPowf+0x28>
 8014054:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8014058:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 801405c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014060:	330b      	adds	r3, #11
 8014062:	ee07 3a90 	vmov	s15, r3
 8014066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801406a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 801406e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8014072:	4770      	bx	lr
 8014074:	4e7de250 	.word	0x4e7de250

08014078 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8014078:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801407c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014080:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8014084:	ee37 0ac0 	vsub.f32	s0, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8014088:	ee67 7a26 	vmul.f32	s15, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 801408c:	ee20 0a26 	vmul.f32	s0, s0, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8014090:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8014094:	eef1 7ac0 	vsqrt.f32	s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8014098:	ed80 7a00 	vstr	s14, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 801409c:	edc0 7a01 	vstr	s15, [r0, #4]
}
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop

080140a4 <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 80140a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014120 <LEAF_shaper+0x7c>
 80140a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b0:	d406      	bmi.n	80140c0 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
 80140b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8014124 <LEAF_shaper+0x80>
 80140b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80140ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140be:	dd02      	ble.n	80140c6 <LEAF_shaper+0x22>
 80140c0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014128 <LEAF_shaper+0x84>
}
 80140c4:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
 80140c6:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80140ca:	eddf 4a18 	vldr	s9, [pc, #96]	; 801412c <LEAF_shaper+0x88>
 80140ce:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80140d2:	eddf 3a17 	vldr	s7, [pc, #92]	; 8014130 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 80140d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
 80140da:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 80140de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80140e2:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80140e6:	ee26 4a06 	vmul.f32	s8, s12, s12
 80140ea:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
 80140ee:	ee37 7a46 	vsub.f32	s14, s14, s12
 80140f2:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80140f6:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80140fa:	ee70 0a85 	vadd.f32	s1, s1, s10
 80140fe:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8014134 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8014102:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8014106:	ee67 7a27 	vmul.f32	s15, s14, s15
 801410a:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801410e:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8014112:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8014116:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
 801411a:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
 801411e:	4770      	bx	lr
 8014120:	bfb504f3 	.word	0xbfb504f3
 8014124:	3fb504f3 	.word	0x3fb504f3
 8014128:	00000000 	.word	0x00000000
 801412c:	3c800000 	.word	0x3c800000
 8014130:	3f272f05 	.word	0x3f272f05
 8014134:	3d4ccccd 	.word	0x3d4ccccd

08014138 <LEAF_round>:
    rnd = fabsf(rnd);
 8014138:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 801413c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014158 <LEAF_round+0x20>
 8014140:	eef4 0ae7 	vcmpe.f32	s1, s15
 8014144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014148:	d905      	bls.n	8014156 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 801414a:	eec0 7a20 	vdiv.f32	s15, s0, s1
 801414e:	fef8 7a67 	vrinta.f32	s15, s15
 8014152:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8014156:	4770      	bx	lr
 8014158:	33d6bf95 	.word	0x33d6bf95

0801415c <LEAF_bitwise_xor>:
    return unholy.f;
 801415c:	ee10 3a10 	vmov	r3, s0
 8014160:	4043      	eors	r3, r0
 8014162:	ee00 3a10 	vmov	s0, r3
}
 8014166:	4770      	bx	lr

08014168 <LEAF_clip>:
    if (val < min)
 8014168:	eef4 0ac0 	vcmpe.f32	s1, s0
 801416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014170:	d401      	bmi.n	8014176 <LEAF_clip+0xe>
    else if (val > max)
 8014172:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
 8014176:	4770      	bx	lr

08014178 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 8014178:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 801417c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	d418      	bmi.n	80141b8 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8014186:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801418a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	dd02      	ble.n	801419a <LEAF_tanh+0x22>
        return 1.0f;
 8014194:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8014198:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 801419a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801419e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 80141a2:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 80141a6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80141aa:	eee6 7a86 	vfma.f32	s15, s13, s12
 80141ae:	ee27 7a00 	vmul.f32	s14, s14, s0
 80141b2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80141b6:	4770      	bx	lr
        return -1.0f;
 80141b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop

080141c0 <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
 80141c0:	ee60 6a00 	vmul.f32	s13, s0, s0
 80141c4:	ed9f 4a11 	vldr	s8, [pc, #68]	; 801420c <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
 80141c8:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
 80141cc:	eddf 4a10 	vldr	s9, [pc, #64]	; 8014210 <fast_tanh4+0x50>
 80141d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80141d4:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8014214 <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
 80141d8:	ee26 5aa6 	vmul.f32	s10, s13, s13
 80141dc:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
 80141e0:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80141e4:	eee5 5a04 	vfma.f32	s11, s10, s8
 80141e8:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
 80141ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141f0:	eee5 7a24 	vfma.f32	s15, s10, s9
 80141f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80141f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80141fc:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8014200:	bf54      	ite	pl
 8014202:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
 8014206:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
 801420a:	4770      	bx	lr
 801420c:	3d6b71bb 	.word	0x3d6b71bb
 8014210:	3f0dee8b 	.word	0x3f0dee8b
 8014214:	3f15f4d3 	.word	0x3f15f4d3

08014218 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8014218:	ee60 7a00 	vmul.f32	s15, s0, s0
 801421c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8014244 <fast_tanh5+0x2c>
 8014220:	eddf 6a09 	vldr	s13, [pc, #36]	; 8014248 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
 8014224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014228:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 801422c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014230:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
 8014234:	eea0 7a00 	vfma.f32	s14, s0, s0
 8014238:	eef1 7ac7 	vsqrt.f32	s15, s14
}
 801423c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014240:	4770      	bx	lr
 8014242:	bf00      	nop
 8014244:	3c217586 	.word	0x3c217586
 8014248:	3e28d927 	.word	0x3e28d927

0801424c <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
 801424c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014250:	eddf 6a08 	vldr	s13, [pc, #32]	; 8014274 <fastSine+0x28>
 8014254:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014278 <fastSine+0x2c>
 8014258:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
 801425c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 801427c <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
 8014260:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8014264:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
 8014268:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 801426c:	eea7 0a86 	vfma.f32	s0, s15, s12
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop
 8014274:	3d947433 	.word	0x3d947433
 8014278:	3fc8f6e3 	.word	0x3fc8f6e3
 801427c:	bf247c4c 	.word	0xbf247c4c

08014280 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8014280:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8014282:	1e4b      	subs	r3, r1, #1
 8014284:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8014288:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 801428a:	ee07 3a90 	vmov	s15, r3
 801428e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014292:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8014296:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 801429a:	dd16      	ble.n	80142ca <LEAF_generate_exp+0x4a>
 801429c:	4604      	mov	r4, r0
 801429e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80142a2:	eeb0 8a60 	vmov.f32	s16, s1
 80142a6:	eef0 8a40 	vmov.f32	s17, s0
 80142aa:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 80142ae:	eef0 0a48 	vmov.f32	s1, s16
 80142b2:	eeb0 0a68 	vmov.f32	s0, s17
 80142b6:	f005 fb07 	bl	80198c8 <powf>
 80142ba:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 80142be:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 80142c2:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80142c6:	42a5      	cmp	r5, r4
 80142c8:	d1f1      	bne.n	80142ae <LEAF_generate_exp+0x2e>
    }
}
 80142ca:	ecbd 8b04 	vpop	{d8-d9}
 80142ce:	bd38      	pop	{r3, r4, r5, pc}

080142d0 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 80142d0:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 80142d2:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 80142d6:	460d      	mov	r5, r1
 80142d8:	4604      	mov	r4, r0
 80142da:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 80142de:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 80142e2:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 80142e6:	ee81 0a29 	vdiv.f32	s0, s2, s19
 80142ea:	f005 f8e7 	bl	80194bc <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80142ee:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 80142f0:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80142f2:	ee07 3a90 	vmov	s15, r3
 80142f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142fe:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8014302:	dd1e      	ble.n	8014342 <LEAF_generate_table_skew_non_sym+0x72>
 8014304:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014348 <LEAF_generate_table_skew_non_sym+0x78>
 8014308:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
 801430c:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 801434c <LEAF_generate_table_skew_non_sym+0x7c>
 8014310:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
 8014314:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014350 <LEAF_generate_table_skew_non_sym+0x80>
 8014318:	ee29 9a27 	vmul.f32	s18, s18, s15
 801431c:	e001      	b.n	8014322 <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
 801431e:	f005 f8cd 	bl	80194bc <logf>
 8014322:	ee29 0a00 	vmul.f32	s0, s18, s0
 8014326:	f005 f855 	bl	80193d4 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 801432a:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 801432e:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8014332:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
 8014336:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 801433a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 801433e:	42a5      	cmp	r5, r4
 8014340:	d1ed      	bne.n	801431e <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
 8014342:	ecbd 8b06 	vpop	{d8-d10}
 8014346:	bd38      	pop	{r3, r4, r5, pc}
 8014348:	bfb8aa3b 	.word	0xbfb8aa3b
 801434c:	2edbe6ff 	.word	0x2edbe6ff
 8014350:	c1b834f1 	.word	0xc1b834f1

08014354 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8014354:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8014356:	1e4b      	subs	r3, r1, #1
 8014358:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 801435c:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 801435e:	ee07 3a90 	vmov	s15, r3
 8014362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014366:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 801436a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 801436e:	dd12      	ble.n	8014396 <LEAF_generate_atodb+0x42>
 8014370:	4604      	mov	r4, r0
 8014372:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014376:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
 801437a:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 801437e:	eeb0 0a48 	vmov.f32	s0, s16
 8014382:	f005 fc47 	bl	8019c14 <log10f>
 8014386:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 801438a:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 801438e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8014392:	42a5      	cmp	r5, r4
 8014394:	d1f3      	bne.n	801437e <LEAF_generate_atodb+0x2a>
}
 8014396:	ecbd 8b04 	vpop	{d8-d9}
 801439a:	bd38      	pop	{r3, r4, r5, pc}

0801439c <LEAF_generate_dbtoa>:
{
 801439c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 801439e:	1e4b      	subs	r3, r1, #1
 80143a0:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
 80143a4:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 80143a6:	ee07 3a90 	vmov	s15, r3
 80143aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80143ae:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 80143b2:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 80143b6:	dd14      	ble.n	80143e2 <LEAF_generate_dbtoa+0x46>
 80143b8:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 80143ba:	eddf 9a0b 	vldr	s19, [pc, #44]	; 80143e8 <LEAF_generate_dbtoa+0x4c>
 80143be:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 80143ec <LEAF_generate_dbtoa+0x50>
 80143c2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80143c6:	eeb0 8a40 	vmov.f32	s16, s0
 80143ca:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
 80143ce:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
 80143d2:	ee20 0a09 	vmul.f32	s0, s0, s18
 80143d6:	f004 fffd 	bl	80193d4 <expf>
        buffer[i] = dbtoa(x);
 80143da:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 80143de:	42a5      	cmp	r5, r4
 80143e0:	d1f3      	bne.n	80143ca <LEAF_generate_dbtoa+0x2e>
}
 80143e2:	ecbd 8b04 	vpop	{d8-d9}
 80143e6:	bd38      	pop	{r3, r4, r5, pc}
 80143e8:	3d4ccccd 	.word	0x3d4ccccd
 80143ec:	40135d8e 	.word	0x40135d8e

080143f0 <LEAF_generate_mtof>:
{
 80143f0:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80143f2:	1e4b      	subs	r3, r1, #1
 80143f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
 80143f8:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80143fa:	ee07 3a90 	vmov	s15, r3
 80143fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014402:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8014406:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 801440a:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 801440e:	dd29      	ble.n	8014464 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
 8014410:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8014478 <LEAF_generate_mtof+0x88>
 8014414:	eef0 9a40 	vmov.f32	s19, s0
 8014418:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
 801441a:	eddf 8a18 	vldr	s17, [pc, #96]	; 801447c <LEAF_generate_mtof+0x8c>
 801441e:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8014422:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8014480 <LEAF_generate_mtof+0x90>
 8014426:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 801442a:	ed9f ca16 	vldr	s24, [pc, #88]	; 8014484 <LEAF_generate_mtof+0x94>
 801442e:	eddf ba16 	vldr	s23, [pc, #88]	; 8014488 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8014432:	eeb0 0a69 	vmov.f32	s0, s19
 8014436:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
 801443a:	e006      	b.n	801444a <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 801443c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8014440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014444:	dd11      	ble.n	801446a <LEAF_generate_mtof+0x7a>
 8014446:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 801444a:	eeb4 0ae8 	vcmpe.f32	s0, s17
 801444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014452:	d8f3      	bhi.n	801443c <LEAF_generate_mtof+0x4c>
 8014454:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8014458:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 801445c:	42ac      	cmp	r4, r5
        x += increment;
 801445e:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8014462:	d1e6      	bne.n	8014432 <LEAF_generate_mtof+0x42>
}
 8014464:	ecbd 8b0a 	vpop	{d8-d12}
 8014468:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 801446a:	ee20 0a0c 	vmul.f32	s0, s0, s24
 801446e:	f004 ffb1 	bl	80193d4 <expf>
 8014472:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8014476:	e7ef      	b.n	8014458 <LEAF_generate_mtof+0x68>
 8014478:	00000000 	.word	0x00000000
 801447c:	c4bb8000 	.word	0xc4bb8000
 8014480:	44bb6000 	.word	0x44bb6000
 8014484:	3d6c9820 	.word	0x3d6c9820
 8014488:	4102d013 	.word	0x4102d013

0801448c <LEAF_poly_blep>:
    dt = fabsf(dt);
 801448c:	eef0 0ae0 	vabs.f32	s1, s1
        if (t < dt)
 8014490:	eef4 0ac0 	vcmpe.f32	s1, s0
 8014494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014498:	dc18      	bgt.n	80144cc <LEAF_poly_blep+0x40>
        else if (t > 1.0f - dt)
 801449a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801449e:	ee77 7a60 	vsub.f32	s15, s14, s1
 80144a2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80144a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144aa:	d50c      	bpl.n	80144c6 <LEAF_poly_blep+0x3a>
            t = (t - 1.0f) / dt;
 80144ac:	ee70 7a47 	vsub.f32	s15, s0, s14
            return t*t + t+t + 1.0f;
 80144b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
            t = (t - 1.0f) / dt;
 80144b4:	ee87 6aa0 	vdiv.f32	s12, s15, s1
            return t*t + t+t + 1.0f;
 80144b8:	ee76 7a26 	vadd.f32	s15, s12, s13
 80144bc:	eea7 7a86 	vfma.f32	s14, s15, s12
 80144c0:	eeb0 0a47 	vmov.f32	s0, s14
 80144c4:	4770      	bx	lr
        else return 0.0f;
 80144c6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80144e4 <LEAF_poly_blep+0x58>
}
 80144ca:	4770      	bx	lr
            t /= dt;
 80144cc:	ee80 7a20 	vdiv.f32	s14, s0, s1
            return t+t - t*t - 1.0f;
 80144d0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80144d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80144d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144dc:	eea7 0a87 	vfma.f32	s0, s15, s14
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	00000000 	.word	0x00000000

080144e8 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 80144e8:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
 80144ec:	ee31 6a40 	vsub.f32	s12, s2, s0
 80144f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 80144f4:	ee71 1aa0 	vadd.f32	s3, s3, s1
 80144f8:	eef0 5a60 	vmov.f32	s11, s1
 80144fc:	ee30 7ac1 	vsub.f32	s14, s1, s2
 8014500:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8014504:	eed6 5a26 	vfnms.f32	s11, s12, s13
 8014508:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
 801450c:	ee70 7a25 	vadd.f32	s15, s0, s11
 8014510:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8014514:	eee7 7a02 	vfma.f32	s15, s14, s4
 8014518:	ee67 7a82 	vmul.f32	s15, s15, s4
 801451c:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 8014520:	eee7 0a82 	vfma.f32	s1, s15, s4
 8014524:	eeb0 0a60 	vmov.f32	s0, s1
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop

0801452c <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 801452c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014530:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014550 <LEAF_interpolation_linear+0x24>
 8014534:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8014538:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
 801453c:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8014540:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8014544:	eee7 0a80 	vfma.f32	s1, s15, s0
 8014548:	eeb0 0a60 	vmov.f32	s0, s1
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	00000000 	.word	0x00000000

08014554 <mtof>:
    if (f <= -1500.0f) return(0);
 8014554:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014594 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8014558:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014598 <mtof+0x44>
 801455c:	e006      	b.n	801456c <mtof+0x18>
 801455e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014566:	dd09      	ble.n	801457c <mtof+0x28>
 8014568:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 801456c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014574:	d8f3      	bhi.n	801455e <mtof+0xa>
 8014576:	ed9f 0a09 	vldr	s0, [pc, #36]	; 801459c <mtof+0x48>
}
 801457a:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 801457c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80145a0 <mtof+0x4c>
{
 8014580:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8014582:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014586:	f004 ff25 	bl	80193d4 <expf>
 801458a:	eddf 7a06 	vldr	s15, [pc, #24]	; 80145a4 <mtof+0x50>
 801458e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8014592:	bd08      	pop	{r3, pc}
 8014594:	c4bb8000 	.word	0xc4bb8000
 8014598:	44bb6000 	.word	0x44bb6000
 801459c:	00000000 	.word	0x00000000
 80145a0:	3d6c9820 	.word	0x3d6c9820
 80145a4:	4102d013 	.word	0x4102d013

080145a8 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 80145a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145ac:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80145e0 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 80145b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80145e4 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 80145b4:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 80145b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 80145c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 80145d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 80145d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop
 80145e0:	396c9820 	.word	0x396c9820
 80145e4:	4102d013 	.word	0x4102d013

080145e8 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80145e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f0:	dd0b      	ble.n	801460a <ftom+0x22>
 80145f2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014610 <ftom+0x28>
{
 80145f6:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80145f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80145fc:	f004 ff5e 	bl	80194bc <logf>
 8014600:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014614 <ftom+0x2c>
 8014604:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8014608:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 801460a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014618 <ftom+0x30>
}
 801460e:	4770      	bx	lr
 8014610:	3dfa7ed2 	.word	0x3dfa7ed2
 8014614:	418a7fac 	.word	0x418a7fac
 8014618:	c4bb8000 	.word	0xc4bb8000

0801461c <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 801461c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop

08014624 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8014624:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop

0801462c <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 801462c:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801462e:	6a03      	ldr	r3, [r0, #32]
 8014630:	2510      	movs	r5, #16
    pool->usize  = 0;
 8014632:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014634:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8014636:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
 8014638:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
 801463c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 801463e:	42aa      	cmp	r2, r5
 8014640:	bf38      	it	cc
 8014642:	462a      	movcc	r2, r5
    pool->msize  = size;
 8014644:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014648:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 801464a:	440b      	add	r3, r1
 801464c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 801464e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8014652:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8014654:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8014658:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801465a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 801465c:	6183      	str	r3, [r0, #24]
}
 801465e:	4770      	bx	lr

08014660 <mpool_alloc>:
{
 8014660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8014662:	684a      	ldr	r2, [r1, #4]
{
 8014664:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8014666:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014668:	3301      	adds	r3, #1
 801466a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 801466c:	694b      	ldr	r3, [r1, #20]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d04a      	beq.n	8014708 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8014672:	1dc4      	adds	r4, r0, #7
 8014674:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014678:	e002      	b.n	8014680 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 801467a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 801467c:	2b00      	cmp	r3, #0
 801467e:	d043      	beq.n	8014708 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8014680:	68da      	ldr	r2, [r3, #12]
 8014682:	42a2      	cmp	r2, r4
 8014684:	d3f9      	bcc.n	801467a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8014686:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014688:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801468a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801468e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014690:	4281      	cmp	r1, r0
 8014692:	d246      	bcs.n	8014722 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014694:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014698:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801469a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801469c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801469e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80146a0:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 80146a2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80146a6:	4429      	add	r1, r5
 80146a8:	5111      	str	r1, [r2, r4]
    node->size = size;
 80146aa:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 80146ac:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80146b0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80146b4:	429a      	cmp	r2, r3
        pool->head = new_node;
 80146b6:	bf08      	it	eq
 80146b8:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	b10a      	cbz	r2, 80146c4 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80146c0:	6899      	ldr	r1, [r3, #8]
 80146c2:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80146c4:	689a      	ldr	r2, [r3, #8]
 80146c6:	b10a      	cbz	r2, 80146cc <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80146c8:	6859      	ldr	r1, [r3, #4]
 80146ca:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80146cc:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80146ce:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80146d0:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80146d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80146d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80146dc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80146de:	4422      	add	r2, r4
 80146e0:	4402      	add	r2, r0
 80146e2:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80146e6:	694a      	ldr	r2, [r1, #20]
 80146e8:	42aa      	cmp	r2, r5
 80146ea:	dd0b      	ble.n	8014704 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80146ec:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80146ee:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80146f0:	b14a      	cbz	r2, 8014706 <mpool_alloc+0xa6>
 80146f2:	1e41      	subs	r1, r0, #1
 80146f4:	460a      	mov	r2, r1
 80146f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80146fa:	68dc      	ldr	r4, [r3, #12]
 80146fc:	3202      	adds	r2, #2
 80146fe:	1a12      	subs	r2, r2, r0
 8014700:	42a2      	cmp	r2, r4
 8014702:	d3f7      	bcc.n	80146f4 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 8014704:	6818      	ldr	r0, [r3, #0]
}
 8014706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8014708:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 801470c:	1a9b      	subs	r3, r3, r2
 801470e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014710:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8014714:	bf8c      	ite	hi
 8014716:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014718:	2100      	movls	r1, #0
 801471a:	f004 fdbb 	bl	8019294 <LEAF_internalErrorCallback>
        return NULL;
 801471e:	2000      	movs	r0, #0
}
 8014720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8014722:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8014724:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8014726:	e7c3      	b.n	80146b0 <mpool_alloc+0x50>

08014728 <mpool_calloc>:
{
 8014728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 801472a:	684a      	ldr	r2, [r1, #4]
{
 801472c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801472e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014730:	3301      	adds	r3, #1
 8014732:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8014734:	694b      	ldr	r3, [r1, #20]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d044      	beq.n	80147c4 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801473a:	1dc4      	adds	r4, r0, #7
 801473c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014740:	e002      	b.n	8014748 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8014742:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8014744:	2b00      	cmp	r3, #0
 8014746:	d03d      	beq.n	80147c4 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8014748:	68da      	ldr	r2, [r3, #12]
 801474a:	42a2      	cmp	r2, r4
 801474c:	d3f9      	bcc.n	8014742 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801474e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014750:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8014752:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014756:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014758:	4281      	cmp	r1, r0
 801475a:	d240      	bcs.n	80147de <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801475c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014760:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8014762:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014764:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014766:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014768:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 801476a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801476e:	4429      	add	r1, r5
 8014770:	5111      	str	r1, [r2, r4]
    node->size = size;
 8014772:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8014774:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8014778:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801477c:	429a      	cmp	r2, r3
        pool->head = new_node;
 801477e:	bf08      	it	eq
 8014780:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8014784:	685a      	ldr	r2, [r3, #4]
 8014786:	b10a      	cbz	r2, 801478c <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8014788:	6899      	ldr	r1, [r3, #8]
 801478a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 801478c:	689a      	ldr	r2, [r3, #8]
 801478e:	b10a      	cbz	r2, 8014794 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8014790:	6859      	ldr	r1, [r3, #4]
 8014792:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8014794:	2200      	movs	r2, #0
    node->prev = NULL;
 8014796:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801479a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801479e:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80147a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80147a4:	4401      	add	r1, r0
 80147a6:	68d8      	ldr	r0, [r3, #12]
 80147a8:	4401      	add	r1, r0
 80147aa:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80147ae:	68d9      	ldr	r1, [r3, #12]
 80147b0:	b131      	cbz	r1, 80147c0 <mpool_calloc+0x98>
 80147b2:	4610      	mov	r0, r2
 80147b4:	6819      	ldr	r1, [r3, #0]
 80147b6:	5488      	strb	r0, [r1, r2]
 80147b8:	3201      	adds	r2, #1
 80147ba:	68d9      	ldr	r1, [r3, #12]
 80147bc:	4291      	cmp	r1, r2
 80147be:	d8f9      	bhi.n	80147b4 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80147c0:	6818      	ldr	r0, [r3, #0]
}
 80147c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80147c4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80147c8:	1a9b      	subs	r3, r3, r2
 80147ca:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80147d0:	bf8c      	ite	hi
 80147d2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147d4:	2100      	movls	r1, #0
 80147d6:	f004 fd5d 	bl	8019294 <LEAF_internalErrorCallback>
        return NULL;
 80147da:	2000      	movs	r0, #0
}
 80147dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80147de:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80147e0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80147e2:	e7c9      	b.n	8014778 <mpool_calloc+0x50>

080147e4 <mpool_free>:
{
 80147e4:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
 80147e6:	684a      	ldr	r2, [r1, #4]
 80147e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80147ea:	3301      	adds	r3, #1
 80147ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 80147ee:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80147f0:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 80147f2:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80147f4:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80147f6:	1a9b      	subs	r3, r3, r2
 80147f8:	68e2      	ldr	r2, [r4, #12]
 80147fa:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
 80147fc:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80147fe:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
 8014800:	2b00      	cmp	r3, #0
 8014802:	d051      	beq.n	80148a8 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
 8014804:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
 8014806:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
 8014808:	429a      	cmp	r2, r3
 801480a:	dc17      	bgt.n	801483c <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 801480c:	690d      	ldr	r5, [r1, #16]
 801480e:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
 8014810:	429a      	cmp	r2, r3
 8014812:	d913      	bls.n	801483c <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014814:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8014816:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
 8014818:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 801481a:	eb02 0c06 	add.w	ip, r2, r6
 801481e:	eb0c 0604 	add.w	r6, ip, r4
 8014822:	42b3      	cmp	r3, r6
 8014824:	d029      	beq.n	801487a <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 8014826:	68de      	ldr	r6, [r3, #12]
 8014828:	441a      	add	r2, r3
 801482a:	4432      	add	r2, r6
 801482c:	4294      	cmp	r4, r2
 801482e:	d00a      	beq.n	8014846 <mpool_free+0x62>
    while (other_node != NULL)
 8014830:	b1e5      	cbz	r5, 801486c <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014832:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
 8014834:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014836:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
 8014838:	429a      	cmp	r2, r3
 801483a:	dde7      	ble.n	801480c <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 801483c:	4630      	mov	r0, r6
 801483e:	2102      	movs	r1, #2
}
 8014840:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 8014842:	f004 bd27 	b.w	8019294 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
 8014846:	4466      	add	r6, ip
 8014848:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
 801484a:	694a      	ldr	r2, [r1, #20]
 801484c:	429a      	cmp	r2, r3
 801484e:	d028      	beq.n	80148a2 <mpool_free+0xbe>
    if (node->next != NULL)
 8014850:	b10d      	cbz	r5, 8014856 <mpool_free+0x72>
        node->next->prev = node->prev;
 8014852:	689a      	ldr	r2, [r3, #8]
 8014854:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
 8014856:	689a      	ldr	r2, [r3, #8]
 8014858:	b10a      	cbz	r2, 801485e <mpool_free+0x7a>
        node->prev->next = node->next;
 801485a:	685c      	ldr	r4, [r3, #4]
 801485c:	6054      	str	r4, [r2, #4]
    node->next = NULL;
 801485e:	461c      	mov	r4, r3
    node->prev = NULL;
 8014860:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
 8014864:	694a      	ldr	r2, [r1, #20]
 8014866:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 8014868:	2d00      	cmp	r5, #0
 801486a:	d1e2      	bne.n	8014832 <mpool_free+0x4e>
    freed_node->next = pool->head;
 801486c:	694b      	ldr	r3, [r1, #20]
 801486e:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8014870:	b103      	cbz	r3, 8014874 <mpool_free+0x90>
 8014872:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
 8014874:	614c      	str	r4, [r1, #20]
}
 8014876:	bc70      	pop	{r4, r5, r6}
 8014878:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
 801487a:	68da      	ldr	r2, [r3, #12]
 801487c:	4462      	add	r2, ip
 801487e:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 8014880:	694a      	ldr	r2, [r1, #20]
 8014882:	429a      	cmp	r2, r3
 8014884:	d00a      	beq.n	801489c <mpool_free+0xb8>
    if (node->next != NULL)
 8014886:	685a      	ldr	r2, [r3, #4]
 8014888:	b10a      	cbz	r2, 801488e <mpool_free+0xaa>
        node->next->prev = node->prev;
 801488a:	689e      	ldr	r6, [r3, #8]
 801488c:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
 801488e:	689a      	ldr	r2, [r3, #8]
 8014890:	b10a      	cbz	r2, 8014896 <mpool_free+0xb2>
        node->prev->next = node->next;
 8014892:	685e      	ldr	r6, [r3, #4]
 8014894:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
 8014896:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 801489a:	e7c9      	b.n	8014830 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 801489c:	685a      	ldr	r2, [r3, #4]
 801489e:	614a      	str	r2, [r1, #20]
 80148a0:	e7f1      	b.n	8014886 <mpool_free+0xa2>
                pool->head = pool->head->next;
 80148a2:	461c      	mov	r4, r3
 80148a4:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
 80148a6:	e7c3      	b.n	8014830 <mpool_free+0x4c>
    freed_node->next = pool->head;
 80148a8:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 80148aa:	e7e3      	b.n	8014874 <mpool_free+0x90>

080148ac <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80148ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80148ae:	699f      	ldr	r7, [r3, #24]
{
 80148b0:	4606      	mov	r6, r0
 80148b2:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80148b4:	2018      	movs	r0, #24
 80148b6:	4639      	mov	r1, r7
{
 80148b8:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80148ba:	f7ff fed1 	bl	8014660 <mpool_alloc>
 80148be:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 80148c0:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80148c2:	2210      	movs	r2, #16
    pool->usize  = 0;
 80148c4:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
 80148c6:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80148c8:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 80148ca:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 80148cc:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
 80148d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80148d2:	42aa      	cmp	r2, r5
 80148d4:	bf38      	it	cc
 80148d6:	462a      	movcc	r2, r5
    pool->msize  = size;
 80148d8:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80148da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148dc:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 80148de:	4423      	add	r3, r4
    node->prev = prev;
 80148e0:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
 80148e4:	6023      	str	r3, [r4, #0]
    node->size = size;
 80148e6:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80148e8:	6144      	str	r4, [r0, #20]
}
 80148ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148ec <tCycle_init>:
}

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80148ec:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80148ee:	698c      	ldr	r4, [r1, #24]
{
 80148f0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80148f2:	2018      	movs	r0, #24
 80148f4:	4621      	mov	r1, r4
 80148f6:	f7ff feb3 	bl	8014660 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80148fa:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80148fc:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80148fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8014902:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014904:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014906:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014920 <tCycle_init+0x34>
    c->phase    =  0;
 801490a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801490e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8014912:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014918:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801491c:	bd38      	pop	{r3, r4, r5, pc}
 801491e:	bf00      	nop
 8014920:	4f800000 	.word	0x4f800000

08014924 <tCycle_initToPool>:
{
 8014924:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8014926:	680c      	ldr	r4, [r1, #0]
{
 8014928:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801492a:	2018      	movs	r0, #24
 801492c:	4621      	mov	r1, r4
 801492e:	f7ff fe97 	bl	8014660 <mpool_alloc>
    c->inc      =  0;
 8014932:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014934:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8014936:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 801493a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801493c:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801493e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014958 <tCycle_initToPool+0x34>
    c->phase    =  0;
 8014942:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014946:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801494a:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801494c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014950:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014954:	bd38      	pop	{r3, r4, r5, pc}
 8014956:	bf00      	nop
 8014958:	4f800000 	.word	0x4f800000

0801495c <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 801495c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 801495e:	6801      	ldr	r1, [r0, #0]
 8014960:	f7ff bf40 	b.w	80147e4 <mpool_free>

08014964 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8014964:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
    
    samp0 = __leaf_table_sinewave[idx];
 8014966:	4910      	ldr	r1, [pc, #64]	; (80149a8 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014968:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80149ac <tCycle_tick+0x48>
    c->phase += c->inc;
 801496c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014970:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 8014972:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8014974:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8014976:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 801497a:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 801497c:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8014980:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8014984:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 801498a:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 801498e:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8014990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014998:	ed91 7a00 	vldr	s14, [r1]
 801499c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 80149a0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	08027d88 	.word	0x08027d88
 80149ac:	35000004 	.word	0x35000004

080149b0 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 80149b0:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80149b2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80149b6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80149ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80149c2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80149c6:	4770      	bx	lr

080149c8 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 80149c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 80149cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80149e8 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 80149d0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80149d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149d6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80149da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80149de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80149e2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80149e6:	4770      	bx	lr
 80149e8:	4f800000 	.word	0x4f800000

080149ec <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80149ec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014a18 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
 80149f0:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80149f2:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
 80149f6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80149fa:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
 80149fe:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a00:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
 8014a04:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a10:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8014a14:	4770      	bx	lr
 8014a16:	bf00      	nop
 8014a18:	4f800000 	.word	0x4f800000

08014a1c <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
 8014a1c:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014a1e:	698c      	ldr	r4, [r1, #24]
{
 8014a20:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 8014a22:	2024      	movs	r0, #36	; 0x24
 8014a24:	4621      	mov	r1, r4
 8014a26:	f7ff fe1b 	bl	8014660 <mpool_alloc>
 8014a2a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014a2c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014a2e:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 8014a30:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 8014a32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a36:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014a58 <tPBTriangle_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 8014a3a:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 8014a3e:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a40:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014a44:	ed80 7a07 	vstr	s14, [r0, #28]
    c->freq = 0.0f;
 8014a48:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 8014a4a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 8014a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014a52:	edc0 7a08 	vstr	s15, [r0, #32]
}
 8014a56:	bd38      	pop	{r3, r4, r5, pc}
 8014a58:	4f800000 	.word	0x4f800000

08014a5c <tPBTriangle_tick>:
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
    _tPBTriangle* c = *osc;
 8014a5c:	6802      	ldr	r2, [r0, #0]
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 2.0f;

    if (y >= 2.0f - floatWidth) {
 8014a5e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
 8014a62:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8014bcc <tPBTriangle_tick+0x170>
    uint32_t halfWidth =(c->width >> 1);
 8014a66:	6913      	ldr	r3, [r2, #16]
    float y = t * 2.0f;
 8014a68:	eddf 4a59 	vldr	s9, [pc, #356]	; 8014bd0 <tPBTriangle_tick+0x174>
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
 8014a6c:	ee07 3a90 	vmov	s15, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014a70:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
 8014a74:	eeb8 4a67 	vcvt.f32.u32	s8, s15
    Lfloat t = c->phase * INV_TWO_TO_32;
 8014a78:	ee07 0a90 	vmov	s15, r0
    uint32_t t1 = c->phase + halfWidth;
 8014a7c:	eb00 0c53 	add.w	ip, r0, r3, lsr #1
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
 8014a80:	eba0 0353 	sub.w	r3, r0, r3, lsr #1
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014a84:	ee07 1a10 	vmov	s14, r1
    Lfloat t = c->phase * INV_TWO_TO_32;
 8014a88:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    uint32_t t1 = c->phase + halfWidth;
 8014a8c:	ee06 ca90 	vmov	s13, ip
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
 8014a90:	ee24 4a25 	vmul.f32	s8, s8, s11
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
 8014a94:	ee07 3a90 	vmov	s15, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014a98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float y = t * 2.0f;
 8014a9c:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (y >= 2.0f - floatWidth) {
 8014aa0:	ee75 4a44 	vsub.f32	s9, s10, s8
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8014aa4:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat t2F = t2 * INV_TWO_TO_32;
 8014aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (y >= 2.0f - floatWidth) {
 8014aac:	eef4 4ac6 	vcmpe.f32	s9, s12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014ab0:	ee27 7a25 	vmul.f32	s14, s14, s11
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8014ab4:	ee66 6aa5 	vmul.f32	s13, s13, s11
    if (y >= 2.0f - floatWidth) {
 8014ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2F = t2 * INV_TWO_TO_32;
 8014abc:	ee67 7aa5 	vmul.f32	s15, s15, s11
    if (y >= 2.0f - floatWidth) {
 8014ac0:	d83c      	bhi.n	8014b3c <tPBTriangle_tick+0xe0>
        y = (y - 2.0f) / floatWidth;
 8014ac2:	ee36 6a45 	vsub.f32	s12, s12, s10
 8014ac6:	ee86 0a04 	vdiv.f32	s0, s12, s8
    if (t < dt) {
 8014aca:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad2:	d447      	bmi.n	8014b64 <tPBTriangle_tick+0x108>
    } else if (t > (1.0f - dt)) {
 8014ad4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014ad8:	ee35 6ac7 	vsub.f32	s12, s11, s14
 8014adc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae4:	dc60      	bgt.n	8014ba8 <tPBTriangle_tick+0x14c>
        return 0.0f;
 8014ae6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8014bd4 <tPBTriangle_tick+0x178>
    if (t < dt) {
 8014aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af2:	d44a      	bmi.n	8014b8a <tPBTriangle_tick+0x12e>
    } else if (t > (1.0f - dt)) {
 8014af4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014af8:	ee35 6ac7 	vsub.f32	s12, s11, s14
 8014afc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b04:	dd0d      	ble.n	8014b22 <tPBTriangle_tick+0xc6>
        t = (t - 1.0f) / dt + 1.0f;
 8014b06:	ee77 7ae5 	vsub.f32	s15, s15, s11
        y /= floatWidth;
    }
    Lfloat blampOne = blamp(t1F, incFloat);
    Lfloat blampTwo = blamp(t2F, incFloat);
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
    y += scaling * (blampOne - blampTwo);
 8014b0a:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8014bd8 <tPBTriangle_tick+0x17c>
        t = (t - 1.0f) / dt + 1.0f;
 8014b0e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8014b12:	ee76 7a25 	vadd.f32	s15, s12, s11
        return 1.0f / 3.0f * t * t * t;
 8014b16:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
 8014b1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8014b1e:	eee7 6ac6 	vfms.f32	s13, s15, s12
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
 8014b22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 8014b26:	4401      	add	r1, r0
 8014b28:	6051      	str	r1, [r2, #4]
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
 8014b2a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8014b2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014b32:	ee87 6a27 	vdiv.f32	s12, s14, s15
    return y;
}
 8014b36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014b3a:	4770      	bx	lr
    } else if (y >= floatWidth) {
 8014b3c:	eeb4 4ac6 	vcmpe.f32	s8, s12
 8014b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b44:	d83f      	bhi.n	8014bc6 <tPBTriangle_tick+0x16a>
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
 8014b46:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014b4a:	ee36 6a44 	vsub.f32	s12, s12, s8
    if (t < dt) {
 8014b4e:	eef4 6ac7 	vcmpe.f32	s13, s14
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
 8014b52:	ee34 5a65 	vsub.f32	s10, s8, s11
    if (t < dt) {
 8014b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
 8014b5a:	ee86 0a05 	vdiv.f32	s0, s12, s10
 8014b5e:	ee30 0a25 	vadd.f32	s0, s0, s11
    if (t < dt) {
 8014b62:	d5b7      	bpl.n	8014ad4 <tPBTriangle_tick+0x78>
        t = (t / dt) - 1.0f;
 8014b64:	ee86 6a87 	vdiv.f32	s12, s13, s14
        return -1.0f / 3.0f * t * t * t;
 8014b68:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8014bdc <tPBTriangle_tick+0x180>
        t = (t / dt) - 1.0f;
 8014b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (t < dt) {
 8014b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
 8014b78:	ee36 6a66 	vsub.f32	s12, s12, s13
        return -1.0f / 3.0f * t * t * t;
 8014b7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014b80:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014b84:	ee66 6a86 	vmul.f32	s13, s13, s12
    if (t < dt) {
 8014b88:	d5b4      	bpl.n	8014af4 <tPBTriangle_tick+0x98>
        t = (t / dt) - 1.0f;
 8014b8a:	ee87 6a87 	vdiv.f32	s12, s15, s14
    y += scaling * (blampOne - blampTwo);
 8014b8e:	eddf 5a13 	vldr	s11, [pc, #76]	; 8014bdc <tPBTriangle_tick+0x180>
        t = (t / dt) - 1.0f;
 8014b92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b96:	ee76 7a67 	vsub.f32	s15, s12, s15
        return -1.0f / 3.0f * t * t * t;
 8014b9a:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
 8014b9e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8014ba2:	eee7 6ac6 	vfms.f32	s13, s15, s12
        return -1.0f / 3.0f * t * t * t;
 8014ba6:	e7bc      	b.n	8014b22 <tPBTriangle_tick+0xc6>
        t = (t - 1.0f) / dt + 1.0f;
 8014ba8:	ee76 6ae5 	vsub.f32	s13, s13, s11
        return 1.0f / 3.0f * t * t * t;
 8014bac:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8014bd8 <tPBTriangle_tick+0x17c>
        t = (t - 1.0f) / dt + 1.0f;
 8014bb0:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8014bb4:	ee36 6a25 	vadd.f32	s12, s12, s11
        return 1.0f / 3.0f * t * t * t;
 8014bb8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014bbc:	ee66 6a85 	vmul.f32	s13, s13, s10
 8014bc0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014bc4:	e791      	b.n	8014aea <tPBTriangle_tick+0x8e>
        y /= floatWidth;
 8014bc6:	ee86 0a04 	vdiv.f32	s0, s12, s8
 8014bca:	e77e      	b.n	8014aca <tPBTriangle_tick+0x6e>
 8014bcc:	2f80000d 	.word	0x2f80000d
 8014bd0:	3000000d 	.word	0x3000000d
 8014bd4:	00000000 	.word	0x00000000
 8014bd8:	3eaaaaab 	.word	0x3eaaaaab
 8014bdc:	beaaaaab 	.word	0xbeaaaaab

08014be0 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 8014be0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014be2:	edd3 7a08 	vldr	s15, [r3, #32]
    c->freq  = freq;
 8014be6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014bea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014bf2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014bf6:	4770      	bx	lr

08014bf8 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat width)
{
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;
    width = width*0.5f + 0.5f;
    width = LEAF_clip(0.01f, width, 0.99f);
 8014bfe:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8014c48 <tPBTriangle_setSkew+0x50>
    width = width*0.5f + 0.5f;
 8014c02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    width = LEAF_clip(0.01f, width, 0.99f);
 8014c06:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8014c4c <tPBTriangle_setSkew+0x54>
    _tPBTriangle* c = *osc;
 8014c0a:	6804      	ldr	r4, [r0, #0]
{
 8014c0c:	ed2d 8b02 	vpush	{d8}
    width = width*0.5f + 0.5f;
 8014c10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014c14:	ee70 0a88 	vadd.f32	s1, s1, s16
    width = LEAF_clip(0.01f, width, 0.99f);
 8014c18:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014c1c:	f7ff faa4 	bl	8014168 <LEAF_clip>
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014c20:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014c24:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014c50 <tPBTriangle_setSkew+0x58>
    c->width = width * TWO_TO_32;
 8014c28:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014c2c:	ee28 8a27 	vmul.f32	s16, s16, s15
    c->width = width * TWO_TO_32;
 8014c30:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014c34:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    c->width = width * TWO_TO_32;
 8014c38:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014c3c:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8014c40:	ecbd 8b02 	vpop	{d8}
 8014c44:	bd10      	pop	{r4, pc}
 8014c46:	bf00      	nop
 8014c48:	3f7d70a4 	.word	0x3f7d70a4
 8014c4c:	3c23d70a 	.word	0x3c23d70a
 8014c50:	4f800000 	.word	0x4f800000

08014c54 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
 8014c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014c56:	698e      	ldr	r6, [r1, #24]
{
 8014c58:	4607      	mov	r7, r0
 8014c5a:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014c5c:	2024      	movs	r0, #36	; 0x24
 8014c5e:	4631      	mov	r1, r6
 8014c60:	f7ff fcfe 	bl	8014660 <mpool_alloc>
 8014c64:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8014c66:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014c68:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014c6a:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014c6c:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
 8014c6e:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014c70:	4629      	mov	r1, r5
 8014c72:	f7ff fcf5 	bl	8014660 <mpool_alloc>
    c->inc      =  0;
 8014c76:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014c78:	60a0      	str	r0, [r4, #8]
    c->mask = SINE_TABLE_SIZE - 1;
 8014c7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8014c7e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014c80:	6869      	ldr	r1, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014c82:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014cbc <tPBSineTriangle_init+0x68>
    c->phase    =  0;
 8014c86:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014c8a:	ed91 7a01 	vldr	s14, [r1, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
    c->phase    =  0;
    c->freq = 0.0f;
    c->shape     =  0.0f;
    c->oneMinusShape = 1.0f;
 8014c8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->mask = SINE_TABLE_SIZE - 1;
 8014c92:	6142      	str	r2, [r0, #20]
    c->freq = 0.0f;
 8014c94:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c9a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 8014c9e:	ed96 7a01 	vldr	s14, [r6, #4]
    c->inc      =  0;
 8014ca2:	60e3      	str	r3, [r4, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->phase    =  0;
 8014ca8:	6063      	str	r3, [r4, #4]
    c->invSampleRate = leaf->invSampleRate;
 8014caa:	ed84 7a07 	vstr	s14, [r4, #28]
    c->freq = 0.0f;
 8014cae:	6122      	str	r2, [r4, #16]
    c->shape     =  0.0f;
 8014cb0:	6162      	str	r2, [r4, #20]
    c->oneMinusShape = 1.0f;
 8014cb2:	61a1      	str	r1, [r4, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014cb4:	edc4 7a08 	vstr	s15, [r4, #32]
}
 8014cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	4f800000 	.word	0x4f800000

08014cc0 <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
 8014cc0:	b410      	push	{r4}
    _tPBSineTriangle* c = *osc;
 8014cc2:	6802      	ldr	r2, [r0, #0]
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 4.0f;

    if (y >= 3.0f) {
 8014cc4:	eddf 4a67 	vldr	s9, [pc, #412]	; 8014e64 <tPBSineTriangle_tick+0x1a4>
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
 8014cc8:	6853      	ldr	r3, [r2, #4]
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8014cca:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8014e68 <tPBSineTriangle_tick+0x1a8>
    Lfloat t = c->phase * INV_TWO_TO_32;
 8014cce:	ee07 3a90 	vmov	s15, r3
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
 8014cd2:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    float y = t * 4.0f;
 8014cd6:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8014e6c <tPBSineTriangle_tick+0x1ac>
    Lfloat t = c->phase * INV_TWO_TO_32;
 8014cda:	eef8 5a67 	vcvt.f32.u32	s11, s15
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
 8014cde:	ee06 1a90 	vmov	s13, r1
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
 8014ce2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014ce6:	edd2 7a03 	vldr	s15, [r2, #12]
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8014cea:	eef8 6a66 	vcvt.f32.u32	s13, s13
    if (y >= 3.0f) {
 8014cee:	eef4 5ae4 	vcmpe.f32	s11, s9
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
 8014cf2:	ee07 1a10 	vmov	s14, r1
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Lfloat t2F = t2 * INV_TWO_TO_32;
 8014cfa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (y >= 3.0f) {
 8014cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014d02:	ee67 7a85 	vmul.f32	s15, s15, s10
    float y = t * 4.0f;
 8014d06:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8014d0a:	ee66 6a85 	vmul.f32	s13, s13, s10
    Lfloat t2F = t2 * INV_TWO_TO_32;
 8014d0e:	ee27 7a05 	vmul.f32	s14, s14, s10
    if (y >= 3.0f) {
 8014d12:	db65      	blt.n	8014de0 <tPBSineTriangle_tick+0x120>
        y -= 4.0f;
 8014d14:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8014d18:	ee36 6a65 	vsub.f32	s12, s12, s11
    if (t < dt) {
 8014d1c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d24:	d46c      	bmi.n	8014e00 <tPBSineTriangle_tick+0x140>
    } else if (t > (1.0f - dt)) {
 8014d26:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014d2a:	ee75 5a67 	vsub.f32	s11, s10, s15
 8014d2e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d36:	f300 8085 	bgt.w	8014e44 <tPBSineTriangle_tick+0x184>
        return 0.0f;
 8014d3a:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8014e70 <tPBSineTriangle_tick+0x1b0>
    if (t < dt) {
 8014d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d46:	d46e      	bmi.n	8014e26 <tPBSineTriangle_tick+0x166>
    } else if (t > (1.0f - dt)) {
 8014d48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014d4c:	ee75 5a67 	vsub.f32	s11, s10, s15
 8014d50:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d58:	dd0d      	ble.n	8014d76 <tPBSineTriangle_tick+0xb6>
        t = (t - 1.0f) / dt + 1.0f;
 8014d5a:	ee37 7a45 	vsub.f32	s14, s14, s10
    } else if (y > 1.0f) {
        y = 2.0f - y;
    }
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014d5e:	eddf 4a45 	vldr	s9, [pc, #276]	; 8014e74 <tPBSineTriangle_tick+0x1b4>
        t = (t - 1.0f) / dt + 1.0f;
 8014d62:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8014d66:	ee35 7a85 	vadd.f32	s14, s11, s10
        return 1.0f / 3.0f * t * t * t;
 8014d6a:	ee67 5a07 	vmul.f32	s11, s14, s14
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014d6e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8014d72:	eee7 6a65 	vfms.f32	s13, s14, s11
    _tCycle* c = *cy;
 8014d76:	6890      	ldr	r0, [r2, #8]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014d78:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
    y = y * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8014d7c:	edd2 5a05 	vldr	s11, [r2, #20]
    samp0 = __leaf_table_sinewave[idx];
 8014d80:	493d      	ldr	r1, [pc, #244]	; (8014e78 <tPBSineTriangle_tick+0x1b8>)
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014d82:	ee67 7a85 	vmul.f32	s15, s15, s10
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014d86:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8014e7c <tPBSineTriangle_tick+0x1bc>
    c->phase += c->inc;
 8014d8a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014d8e:	eea7 6aa6 	vfma.f32	s12, s15, s13
    c->phase += c->inc;
 8014d92:	4423      	add	r3, r4
    idx = (idx + 1) & c->mask;
 8014d94:	6944      	ldr	r4, [r0, #20]
    c->phase += c->inc;
 8014d96:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 8014d98:	0d58      	lsrs	r0, r3, #21
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8014d9a:	f3c3 0314 	ubfx	r3, r3, #0, #21

    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8014d9e:	edd2 6a06 	vldr	s13, [r2, #24]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8014da2:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
 8014da6:	1c43      	adds	r3, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 8014da8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    idx = (idx + 1) & c->mask;
 8014dac:	4023      	ands	r3, r4
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8014db2:	ed90 0a00 	vldr	s0, [r0]
    samp1 = __leaf_table_sinewave[idx];
 8014db6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    
    c->phase += c->inc;
 8014dba:	68d3      	ldr	r3, [r2, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dc0:	ed91 7a00 	vldr	s14, [r1]
    c->phase += c->inc;
 8014dc4:	6851      	ldr	r1, [r2, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014dc6:	ee37 7a40 	vsub.f32	s14, s14, s0
    c->phase += c->inc;
 8014dca:	440b      	add	r3, r1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014dcc:	eea7 0a27 	vfma.f32	s0, s14, s15
    c->phase += c->inc;
 8014dd0:	6053      	str	r3, [r2, #4]
    
    return y;
}
 8014dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8014dd6:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8014dda:	eea5 0a86 	vfma.f32	s0, s11, s12
 8014dde:	4770      	bx	lr
    } else if (y > 1.0f) {
 8014de0:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8014e80 <tPBSineTriangle_tick+0x1c0>
 8014de4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dec:	dd96      	ble.n	8014d1c <tPBSineTriangle_tick+0x5c>
    if (t < dt) {
 8014dee:	eef4 6ae7 	vcmpe.f32	s13, s15
        y = 2.0f - y;
 8014df2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    if (t < dt) {
 8014df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 2.0f - y;
 8014dfa:	ee35 6ac6 	vsub.f32	s12, s11, s12
    if (t < dt) {
 8014dfe:	d592      	bpl.n	8014d26 <tPBSineTriangle_tick+0x66>
        t = (t / dt) - 1.0f;
 8014e00:	eec6 5aa7 	vdiv.f32	s11, s13, s15
        return -1.0f / 3.0f * t * t * t;
 8014e04:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8014e84 <tPBSineTriangle_tick+0x1c4>
        t = (t / dt) - 1.0f;
 8014e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (t < dt) {
 8014e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
 8014e14:	ee75 5ae6 	vsub.f32	s11, s11, s13
        return -1.0f / 3.0f * t * t * t;
 8014e18:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8014e1c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8014e20:	ee66 6aa5 	vmul.f32	s13, s13, s11
    if (t < dt) {
 8014e24:	d590      	bpl.n	8014d48 <tPBSineTriangle_tick+0x88>
        t = (t / dt) - 1.0f;
 8014e26:	eec7 5a27 	vdiv.f32	s11, s14, s15
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014e2a:	ed9f 5a16 	vldr	s10, [pc, #88]	; 8014e84 <tPBSineTriangle_tick+0x1c4>
        t = (t / dt) - 1.0f;
 8014e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014e32:	ee35 7ac7 	vsub.f32	s14, s11, s14
        return -1.0f / 3.0f * t * t * t;
 8014e36:	ee67 5a07 	vmul.f32	s11, s14, s14
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 8014e3a:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014e3e:	eee7 6a65 	vfms.f32	s13, s14, s11
        return -1.0f / 3.0f * t * t * t;
 8014e42:	e798      	b.n	8014d76 <tPBSineTriangle_tick+0xb6>
        t = (t - 1.0f) / dt + 1.0f;
 8014e44:	ee76 6ac5 	vsub.f32	s13, s13, s10
        return 1.0f / 3.0f * t * t * t;
 8014e48:	eddf 4a0a 	vldr	s9, [pc, #40]	; 8014e74 <tPBSineTriangle_tick+0x1b4>
        t = (t - 1.0f) / dt + 1.0f;
 8014e4c:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 8014e50:	ee75 5a85 	vadd.f32	s11, s11, s10
        return 1.0f / 3.0f * t * t * t;
 8014e54:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8014e58:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014e5c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014e60:	e76d      	b.n	8014d3e <tPBSineTriangle_tick+0x7e>
 8014e62:	bf00      	nop
 8014e64:	4f3fffed 	.word	0x4f3fffed
 8014e68:	2f80000d 	.word	0x2f80000d
 8014e6c:	3080000d 	.word	0x3080000d
 8014e70:	00000000 	.word	0x00000000
 8014e74:	3eaaaaab 	.word	0x3eaaaaab
 8014e78:	08027d88 	.word	0x08027d88
 8014e7c:	35000004 	.word	0x35000004
 8014e80:	4e7fffe6 	.word	0x4e7fffe6
 8014e84:	beaaaaab 	.word	0xbeaaaaab

08014e88 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
 8014e88:	6803      	ldr	r3, [r0, #0]
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e8a:	edd3 7a08 	vldr	s15, [r3, #32]
    _tCycle* c = *cy;
 8014e8e:	689a      	ldr	r2, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e90:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->freq  = freq;
 8014e94:	ed83 0a04 	vstr	s0, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e9c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ea0:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
 8014ea4:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ea8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014eac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014eb0:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop

08014eb8 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
 8014eb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
 8014ebc:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014ebe:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
 8014ec2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014ec6:	ed83 7a05 	vstr	s14, [r3, #20]
    c->oneMinusShape = 1.0f - shape;
 8014eca:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8014ece:	4770      	bx	lr

08014ed0 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 8014ed0:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014ed2:	698c      	ldr	r4, [r1, #24]
{
 8014ed4:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 8014ed6:	2020      	movs	r0, #32
 8014ed8:	4621      	mov	r1, r4
 8014eda:	f7ff fbc1 	bl	8014660 <mpool_alloc>
 8014ede:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014ee0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014ee2:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 8014ee4:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 8014ee6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014eea:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014f0c <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 8014eee:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 8014ef2:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014ef8:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
 8014efc:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 8014efe:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 8014f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014f06:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8014f0a:	bd38      	pop	{r3, r4, r5, pc}
 8014f0c:	4f800000 	.word	0x4f800000

08014f10 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 8014f10:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 8014f12:	6804      	ldr	r4, [r0, #0]
    
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014f14:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8014fa0 <tPBPulse_tick+0x90>
{
 8014f18:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014f1c:	edd4 7a01 	vldr	s15, [r4, #4]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
    Lfloat out = -2.0f * widthFloat;
 8014f20:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014f24:	6963      	ldr	r3, [r4, #20]
{
 8014f26:	b082      	sub	sp, #8
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014f28:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
 8014f2c:	edd4 7a04 	vldr	s15, [r4, #16]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014f30:	6862      	ldr	r2, [r4, #4]
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
 8014f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014f36:	edd4 6a02 	vldr	s13, [r4, #8]
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014f3a:	ee20 0a07 	vmul.f32	s0, s0, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014f3e:	18d3      	adds	r3, r2, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014f40:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
 8014f44:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014f48:	ee08 3a10 	vmov	s16, r3
 8014f4c:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    if (phaseFloat < widthFloat) {
 8014f50:	eeb4 0ae7 	vcmpe.f32	s0, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014f54:	ee60 0a87 	vmul.f32	s1, s1, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014f58:	ee28 8a07 	vmul.f32	s16, s16, s14
    if (phaseFloat < widthFloat) {
 8014f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat out = -2.0f * widthFloat;
 8014f60:	ee67 8aa8 	vmul.f32	s17, s15, s17
    if (phaseFloat < widthFloat) {
 8014f64:	d503      	bpl.n	8014f6e <tPBPulse_tick+0x5e>
        out += 2.0f;
 8014f66:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014f6a:	ee78 8aa7 	vadd.f32	s17, s17, s15
    }
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014f6e:	edcd 0a01 	vstr	s1, [sp, #4]
 8014f72:	f7ff fa8b 	bl	801448c <LEAF_poly_blep>
 8014f76:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014f7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014f7e:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014f82:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014f86:	f7ff fa81 	bl	801448c <LEAF_poly_blep>
    c->phase += c->inc;
 8014f8a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
    
}
 8014f8e:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
 8014f92:	4413      	add	r3, r2
 8014f94:	6063      	str	r3, [r4, #4]
}
 8014f96:	b002      	add	sp, #8
 8014f98:	ecbd 8b02 	vpop	{d8}
 8014f9c:	bd10      	pop	{r4, pc}
 8014f9e:	bf00      	nop
 8014fa0:	2f80000d 	.word	0x2f80000d

08014fa4 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 8014fa4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014fa6:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 8014faa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014fae:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014fb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014fb6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014fba:	4770      	bx	lr

08014fbc <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014fbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014fc0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8014ff4 <tPBPulse_setWidth+0x38>
 8014fc4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8014ff8 <tPBPulse_setWidth+0x3c>
 8014fc8:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 8014fcc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8014ffc <tPBPulse_setWidth+0x40>
 8014fd0:	fe80 0a66 	vminnm.f32	s0, s0, s13
 8014fd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
 8014fd8:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
 8014fdc:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014fde:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
 8014fe2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
 8014fea:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014fee:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8014ff2:	4770      	bx	lr
 8014ff4:	3d4ccccd 	.word	0x3d4ccccd
 8014ff8:	3f733333 	.word	0x3f733333
 8014ffc:	4f800000 	.word	0x4f800000

08015000 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
 8015000:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015002:	698c      	ldr	r4, [r1, #24]
{
 8015004:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 8015006:	2020      	movs	r0, #32
 8015008:	4621      	mov	r1, r4
 801500a:	f7ff fb29 	bl	8014660 <mpool_alloc>
 801500e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8015010:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8015012:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8015014:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8015016:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8015018:	eddf 7a06 	vldr	s15, [pc, #24]	; 8015034 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 801501c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8015020:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8015022:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8015026:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 801502a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801502e:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	4f800000 	.word	0x4f800000

08015038 <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 8015038:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
 801503a:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801503c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8015080 <tPBSaw_tick+0x48>
{
 8015040:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8015044:	edd4 7a01 	vldr	s15, [r4, #4]
 8015048:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801504c:	edd4 7a02 	vldr	s15, [r4, #8]
 8015050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8015054:	ee28 0a20 	vmul.f32	s0, s16, s1
 8015058:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801505c:	f7ff fa16 	bl	801448c <LEAF_poly_blep>
    c->phase += c->inc;
 8015060:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015064:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8015084 <tPBSaw_tick+0x4c>
 8015068:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 801506c:	eee8 7a47 	vfms.f32	s15, s16, s14
 8015070:	4413      	add	r3, r2
 8015072:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 8015074:	ecbd 8b02 	vpop	{d8}
 8015078:	ee30 0a27 	vadd.f32	s0, s0, s15
 801507c:	bd10      	pop	{r4, pc}
 801507e:	bf00      	nop
 8015080:	2f80000d 	.word	0x2f80000d
 8015084:	2ffffff6 	.word	0x2ffffff6

08015088 <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8015088:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801508a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801508e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015092:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015096:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801509a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801509e:	4770      	bx	lr

080150a0 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
 80150a0:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 80150a2:	698c      	ldr	r4, [r1, #24]
{
 80150a4:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 80150a6:	2028      	movs	r0, #40	; 0x28
 80150a8:	4621      	mov	r1, r4
 80150aa:	f7ff fad9 	bl	8014660 <mpool_alloc>
 80150ae:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80150b0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 80150b2:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80150b4:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 80150b6:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80150b8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80150d4 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 80150bc:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 80150c0:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80150c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 80150c6:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 80150ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80150ce:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80150d2:	bd38      	pop	{r3, r4, r5, pc}
 80150d4:	4f800000 	.word	0x4f800000

080150d8 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 80150d8:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
 80150da:	6804      	ldr	r4, [r0, #0]
{
 80150dc:	ed2d 8b04 	vpush	{d8-d9}

    //Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 80150e0:	6865      	ldr	r5, [r4, #4]
{
 80150e2:	b083      	sub	sp, #12
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 80150e4:	edd4 7a02 	vldr	s15, [r4, #8]
 80150e8:	eddf 9a23 	vldr	s19, [pc, #140]	; 8015178 <tPBSawSquare_tick+0xa0>
 80150ec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 80150f0:	ee07 5a90 	vmov	s15, r5
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 80150f4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 80150f8:	ed9f 8a20 	vldr	s16, [pc, #128]	; 801517c <tPBSawSquare_tick+0xa4>
 80150fc:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8015100:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8015104:	ee29 0a29 	vmul.f32	s0, s18, s19
 8015108:	edcd 0a01 	vstr	s1, [sp, #4]
 801510c:	f7ff f9be 	bl	801448c <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8015110:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8015114:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8015118:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 801511c:	ee29 8a08 	vmul.f32	s16, s18, s16
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8015120:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8015124:	ee20 0a29 	vmul.f32	s0, s0, s19
 8015128:	f7ff f9b0 	bl	801448c <LEAF_poly_blep>
    
    Lfloat squareOut = -1.0f;
    if (phaseFloat < 0.5f) {
 801512c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8015180 <tPBSawSquare_tick+0xa8>
    Lfloat squareOut = -1.0f;
 8015130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    squareOut += resetBlep;
    squareOut -= midBlep;

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8015134:	ed94 6a08 	vldr	s12, [r4, #32]
    Lfloat squareOut = -1.0f;
 8015138:	eeb4 9ae6 	vcmpe.f32	s18, s13
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801513c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    Lfloat squareOut = -1.0f;
 8015140:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
    squareOut -= midBlep;
 8015144:	ee78 7ac0 	vsub.f32	s15, s17, s0
    Lfloat squareOut = -1.0f;
 8015148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801514c:	ee37 8a48 	vsub.f32	s16, s14, s16
    Lfloat squareOut = -1.0f;
 8015150:	bf58      	it	pl
 8015152:	eeb0 7a65 	vmovpl.f32	s14, s11
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8015156:	ee38 8a28 	vadd.f32	s16, s16, s17
    squareOut -= midBlep;
 801515a:	ee77 7a87 	vadd.f32	s15, s15, s14
    c->phase += c->inc;
 801515e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8015162:	ee27 0a86 	vmul.f32	s0, s15, s12
    c->phase += c->inc;
 8015166:	4413      	add	r3, r2
}
 8015168:	eea8 0a26 	vfma.f32	s0, s16, s13
    c->phase += c->inc;
 801516c:	6063      	str	r3, [r4, #4]
}
 801516e:	b003      	add	sp, #12
 8015170:	ecbd 8b04 	vpop	{d8-d9}
 8015174:	bd30      	pop	{r4, r5, pc}
 8015176:	bf00      	nop
 8015178:	2f80000d 	.word	0x2f80000d
 801517c:	3000000d 	.word	0x3000000d
 8015180:	4effffe6 	.word	0x4effffe6

08015184 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 8015184:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
 8015186:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801518a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
 801518e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015192:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015196:	ed83 0a02 	vstr	s0, [r3, #8]

}
 801519a:	4770      	bx	lr

0801519c <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
 801519c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
 80151a0:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
 80151a2:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 80151a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80151aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80151ae:	4770      	bx	lr

080151b0 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 80151b0:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 80151b2:	6995      	ldr	r5, [r2, #24]
{
 80151b4:	4606      	mov	r6, r0
 80151b6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80151b8:	2018      	movs	r0, #24
 80151ba:	4629      	mov	r1, r5
 80151bc:	f7ff fa50 	bl	8014660 <mpool_alloc>
 80151c0:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 80151c2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 80151c4:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 80151c6:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80151c8:	691b      	ldr	r3, [r3, #16]
 80151ca:	6143      	str	r3, [r0, #20]
}
 80151cc:	bd70      	pop	{r4, r5, r6, pc}
 80151ce:	bf00      	nop

080151d0 <tNoise_initToPool>:
{
 80151d0:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 80151d2:	6815      	ldr	r5, [r2, #0]
{
 80151d4:	4606      	mov	r6, r0
 80151d6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80151d8:	2018      	movs	r0, #24
 80151da:	4629      	mov	r1, r5
 80151dc:	f7ff fa40 	bl	8014660 <mpool_alloc>
 80151e0:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 80151e2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 80151e4:	686b      	ldr	r3, [r5, #4]
    n->type = type;
 80151e6:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80151e8:	691b      	ldr	r3, [r3, #16]
 80151ea:	6143      	str	r3, [r0, #20]
}
 80151ec:	bd70      	pop	{r4, r5, r6, pc}
 80151ee:	bf00      	nop

080151f0 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 80151f0:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 80151f2:	6801      	ldr	r1, [r0, #0]
 80151f4:	f7ff baf6 	b.w	80147e4 <mpool_free>

080151f8 <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
 80151f8:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 80151fa:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 80151fc:	6963      	ldr	r3, [r4, #20]
 80151fe:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8015200:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8015202:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015206:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 801520a:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 801520c:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8015210:	d131      	bne.n	8015276 <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8015212:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801527c <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8015216:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015280 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 801521a:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801521e:	ed94 5a03 	vldr	s10, [r4, #12]
 8015222:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8015226:	edd4 3a02 	vldr	s7, [r4, #8]
 801522a:	eddf 4a16 	vldr	s9, [pc, #88]	; 8015284 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801522e:	eddf 5a16 	vldr	s11, [pc, #88]	; 8015288 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8015232:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8015236:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801528c <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801523a:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 801523e:	ed94 4a04 	vldr	s8, [r4, #16]
 8015242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015246:	eddf 5a12 	vldr	s11, [pc, #72]	; 8015290 <tNoise_tick+0x98>
 801524a:	eddf 4a12 	vldr	s9, [pc, #72]	; 8015294 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 801524e:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8015298 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8015252:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8015256:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801525a:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801525e:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8015262:	eef0 6a65 	vmov.f32	s13, s11
 8015266:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801526a:	eee7 6aa4 	vfma.f32	s13, s15, s9
 801526e:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
 8015272:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8015276:	eeb0 0a67 	vmov.f32	s0, s15
 801527a:	bd10      	pop	{r4, pc}
 801527c:	3dcad8a1 	.word	0x3dcad8a1
 8015280:	3e97d0ff 	.word	0x3e97d0ff
 8015284:	3f7f65fe 	.word	0x3f7f65fe
 8015288:	3f76872b 	.word	0x3f76872b
 801528c:	3f86be97 	.word	0x3f86be97
 8015290:	3f11eb85 	.word	0x3f11eb85
 8015294:	3e3d3c36 	.word	0x3e3d3c36
 8015298:	3d4ccccd 	.word	0x3d4ccccd

0801529c <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 801529c:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801529e:	698c      	ldr	r4, [r1, #24]
{
 80152a0:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80152a2:	201c      	movs	r0, #28
 80152a4:	4621      	mov	r1, r4
 80152a6:	f7ff f9db 	bl	8014660 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 80152aa:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80152ac:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80152ae:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80152b0:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80152b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80152c8 <tIntPhasor_init+0x2c>
    c->inc  = 0;
 80152b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80152ba:	edd2 7a01 	vldr	s15, [r2, #4]
 80152be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80152c2:	edc0 7a06 	vstr	s15, [r0, #24]
}
 80152c6:	bd38      	pop	{r3, r4, r5, pc}
 80152c8:	4f800000 	.word	0x4f800000

080152cc <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 80152cc:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 80152ce:	eddf 7a06 	vldr	s15, [pc, #24]	; 80152e8 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 80152d2:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 80152d6:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 80152d8:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 80152dc:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 80152de:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 80152e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152e6:	4770      	bx	lr
 80152e8:	2f80000d 	.word	0x2f80000d

080152ec <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 80152ec:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80152ee:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80152f2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80152f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152fa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80152fe:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8015302:	4770      	bx	lr

08015304 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8015304:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8015308:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015324 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 801530c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801530e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015312:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8015316:	ee20 0a07 	vmul.f32	s0, s0, s14
 801531a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801531e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8015322:	4770      	bx	lr
 8015324:	4f800000 	.word	0x4f800000

08015328 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8015328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801532a:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801532e:	698f      	ldr	r7, [r1, #24]
{
 8015330:	4606      	mov	r6, r0
 8015332:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8015334:	2010      	movs	r0, #16
 8015336:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015338:	ed9f 8a22 	vldr	s16, [pc, #136]	; 80153c4 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801533c:	f7ff f990 	bl	8014660 <mpool_alloc>
 8015340:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8015342:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8015344:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8015346:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015348:	201c      	movs	r0, #28
 801534a:	4639      	mov	r1, r7
 801534c:	f7ff f988 	bl	8014660 <mpool_alloc>
 8015350:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8015352:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015354:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8015356:	2700      	movs	r7, #0
    c->inc  = 0;
 8015358:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801535c:	edd2 7a01 	vldr	s15, [r2, #4]
 8015360:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015364:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015368:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801536a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801536c:	4629      	mov	r1, r5
 801536e:	f7ff f977 	bl	8014660 <mpool_alloc>
 8015372:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8015374:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8015376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801537a:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801537c:	eddf 6a12 	vldr	s13, [pc, #72]	; 80153c8 <tSquareLFO_init+0xa0>
    c->inc  = 0;
 8015380:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015384:	ed92 7a01 	vldr	s14, [r2, #4]
 8015388:	ee27 7a08 	vmul.f32	s14, s14, s16
 801538c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8015390:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015392:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8015394:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015398:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801539c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801539e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80153a2:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 80153a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 80153aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 80153b2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80153b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80153ba:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80153be:	ecbd 8b02 	vpop	{d8}
 80153c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153c4:	4f800000 	.word	0x4f800000
 80153c8:	2f80000d 	.word	0x2f80000d

080153cc <tSquareLFO_initToPool>:
{
 80153cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ce:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80153d2:	680f      	ldr	r7, [r1, #0]
{
 80153d4:	4606      	mov	r6, r0
 80153d6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80153d8:	2010      	movs	r0, #16
 80153da:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80153dc:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8015468 <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80153e0:	f7ff f93e 	bl	8014660 <mpool_alloc>
 80153e4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80153e6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80153e8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 80153ea:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80153ec:	201c      	movs	r0, #28
 80153ee:	4639      	mov	r1, r7
 80153f0:	f7ff f936 	bl	8014660 <mpool_alloc>
 80153f4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80153f6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80153f8:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 80153fa:	2700      	movs	r7, #0
    c->inc  = 0;
 80153fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015400:	edd2 7a01 	vldr	s15, [r2, #4]
 8015404:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015408:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801540c:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801540e:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015410:	4629      	mov	r1, r5
 8015412:	f7ff f925 	bl	8014660 <mpool_alloc>
 8015416:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8015418:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 801541a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801541e:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015420:	eddf 6a12 	vldr	s13, [pc, #72]	; 801546c <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
 8015424:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015428:	ed92 7a01 	vldr	s14, [r2, #4]
 801542c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015430:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8015434:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015436:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8015438:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801543c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8015440:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015442:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015446:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801544a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801544e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015452:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8015456:	ee67 7a88 	vmul.f32	s15, s15, s16
 801545a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801545e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8015462:	ecbd 8b02 	vpop	{d8}
 8015466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015468:	4f800000 	.word	0x4f800000
 801546c:	2f80000d 	.word	0x2f80000d

08015470 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8015470:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015472:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015476:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80154b4 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 801547a:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 801547c:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015480:	4403      	add	r3, r0
 8015482:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8015484:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8015488:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801548e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015492:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8015494:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8015498:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801549a:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801549e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80154a2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80154a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80154aa:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 80154ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80154b2:	4770      	bx	lr
 80154b4:	2f80000d 	.word	0x2f80000d

080154b8 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 80154b8:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 80154ba:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154bc:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80154c0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80154c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80154cc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 80154d0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154d2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80154d6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80154e2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80154e6:	4770      	bx	lr

080154e8 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 80154e8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80154ea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8015520 <tSquareLFO_setPulseWidth+0x38>
 80154ee:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 80154f0:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80154f4:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 80154f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8015524 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80154fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8015500:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015502:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8015506:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801550a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801550e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8015512:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015516:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801551a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801551e:	4770      	bx	lr
 8015520:	2f80000d 	.word	0x2f80000d
 8015524:	4f800000 	.word	0x4f800000

08015528 <tSquareLFO_setPhase>:
    int i = phase;
 8015528:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801552c:	eddf 6a13 	vldr	s13, [pc, #76]	; 801557c <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
 8015530:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015532:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015580 <tSquareLFO_setPhase+0x58>
    phase -= i;
 8015536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 801553a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801553c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8015540:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015544:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015548:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801554c:	689a      	ldr	r2, [r3, #8]
 801554e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015552:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8015556:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015558:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801555c:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8015560:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8015564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015568:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801556c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015574:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8015578:	4770      	bx	lr
 801557a:	bf00      	nop
 801557c:	4f800000 	.word	0x4f800000
 8015580:	2f80000d 	.word	0x2f80000d

08015584 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8015584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015586:	460c      	mov	r4, r1
{
 8015588:	4606      	mov	r6, r0
 801558a:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801558c:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801558e:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8015592:	4639      	mov	r1, r7
 8015594:	f7ff f864 	bl	8014660 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8015598:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801559a:	6030      	str	r0, [r6, #0]
 801559c:	4604      	mov	r4, r0
    c->mempool = m;
 801559e:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 80155a2:	f7ff ff13 	bl	80153cc <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 80155a6:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80155a8:	201c      	movs	r0, #28
 80155aa:	4629      	mov	r1, r5
 80155ac:	f7ff f858 	bl	8014660 <mpool_alloc>
    c->phase    =  0;
 80155b0:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80155b2:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80155b4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80155b6:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80155b8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80155d0 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
 80155bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80155c0:	edd2 7a01 	vldr	s15, [r2, #4]
 80155c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155c8:	edc0 7a06 	vstr	s15, [r0, #24]
}
 80155cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ce:	bf00      	nop
 80155d0:	4f800000 	.word	0x4f800000

080155d4 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 80155d4:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 80155d6:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 80155d8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80155dc:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8015654 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80155e0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 80155e4:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 80155e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 80155ea:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 80155ee:	4403      	add	r3, r0
 80155f0:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 80155f2:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 80155f6:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 80155f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 80155fc:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 80155fe:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8015600:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8015604:	6884      	ldr	r4, [r0, #8]
 8015606:	4423      	add	r3, r4
 8015608:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801560a:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801560e:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 8015610:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8015614:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015618:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 801561a:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 801561e:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8015620:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8015624:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015628:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801562c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8015630:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015634:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8015638:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 801563c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015640:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015644:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8015648:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 801564c:	eea6 0a07 	vfma.f32	s0, s12, s14
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	2f80000d 	.word	0x2f80000d

08015658 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
 8015658:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 801565a:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 801565c:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801565e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8015662:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015666:	ee60 7a27 	vmul.f32	s15, s0, s15
 801566a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801566e:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8015672:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015674:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8015678:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801567c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015684:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8015688:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801568a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801568e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015692:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015696:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801569a:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 801569e:	4770      	bx	lr

080156a0 <tSawSquareLFO_setPhase>:
    int i = phase;
 80156a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 80156a4:	eddf 6a15 	vldr	s13, [pc, #84]	; 80156fc <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
 80156a8:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80156aa:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8015700 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 80156ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 80156b2:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 80156b4:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 80156b6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80156ba:	ee20 0a26 	vmul.f32	s0, s0, s13
 80156be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80156c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80156c6:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80156ca:	6890      	ldr	r0, [r2, #8]
 80156cc:	edd2 7a01 	vldr	s15, [r2, #4]
 80156d0:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 80156d4:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80156d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80156da:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 80156de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 80156e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80156e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 80156ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80156ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156f2:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 80156f6:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 80156f8:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 80156fa:	4770      	bx	lr
 80156fc:	4f800000 	.word	0x4f800000
 8015700:	2f80000d 	.word	0x2f80000d

08015704 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8015704:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8015706:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801570a:	4770      	bx	lr

0801570c <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 801570c:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801570e:	698d      	ldr	r5, [r1, #24]
{
 8015710:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8015712:	2018      	movs	r0, #24
 8015714:	4629      	mov	r1, r5
 8015716:	f7fe ffa3 	bl	8014660 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801571a:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801571c:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 801571e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015720:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015722:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015758 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8015726:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801575c <tTriLFO_init+0x50>
    c->phase    =  0;
 801572a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801572e:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015732:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 8015736:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801573a:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 801573e:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015740:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015744:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015748:	ee67 7a87 	vmul.f32	s15, s15, s14
 801574c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015750:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8015754:	bd38      	pop	{r3, r4, r5, pc}
 8015756:	bf00      	nop
 8015758:	4f800000 	.word	0x4f800000
 801575c:	435c0000 	.word	0x435c0000

08015760 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8015760:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015762:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015766:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8015790 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 801576a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 801576e:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8015770:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 8015774:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8015776:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801577a:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801577e:	ee07 3a90 	vmov	s15, r3
 8015782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015786:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801578a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801578e:	4770      	bx	lr
 8015790:	2ffffff6 	.word	0x2ffffff6

08015794 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8015794:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015796:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801579a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801579e:	ee20 0a27 	vmul.f32	s0, s0, s15
 80157a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80157a6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80157aa:	4770      	bx	lr

080157ac <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 80157ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 80157b0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80157b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157b6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80157ba:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 80157be:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80157c2:	4770      	bx	lr

080157c4 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 80157c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c6:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80157ca:	698f      	ldr	r7, [r1, #24]
{
 80157cc:	4606      	mov	r6, r0
 80157ce:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80157d0:	2010      	movs	r0, #16
 80157d2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80157d4:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8015850 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80157d8:	f7fe ff42 	bl	8014660 <mpool_alloc>
 80157dc:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80157de:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80157e0:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 80157e2:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 80157e4:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80157e6:	4631      	mov	r1, r6
 80157e8:	f7fe ff3a 	bl	8014660 <mpool_alloc>
 80157ec:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80157ee:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80157f0:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 80157f2:	2600      	movs	r6, #0
    c->freq  = freq;
 80157f4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015854 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 80157f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80157fc:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015800:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 8015804:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015808:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801580c:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 801580e:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015810:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015814:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015818:	ee67 7a87 	vmul.f32	s15, s15, s14
 801581c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015820:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 8015824:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8015826:	4629      	mov	r1, r5
 8015828:	f7fe ff1a 	bl	8014660 <mpool_alloc>
 801582c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801582e:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8015830:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 8015834:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8015836:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801583a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801583e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015840:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015844:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8015848:	ecbd 8b02 	vpop	{d8}
 801584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801584e:	bf00      	nop
 8015850:	4f800000 	.word	0x4f800000
 8015854:	435c0000 	.word	0x435c0000

08015858 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8015858:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801585a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 801585c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8015860:	4a21      	ldr	r2, [pc, #132]	; (80158e8 <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015862:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 8015866:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015868:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80158ec <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
 801586c:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801586e:	eddf 4a20 	vldr	s9, [pc, #128]	; 80158f0 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
 8015872:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015876:	440b      	add	r3, r1
 8015878:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 801587a:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
 801587c:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 801587e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8015882:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 8015886:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 801588e:	4433      	add	r3, r6
 8015890:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
 8015892:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 8015894:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8015898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
 801589c:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801589e:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
 80158a2:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
 80158a6:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 80158aa:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 80158ae:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80158b2:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
 80158b6:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 80158ba:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 80158be:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80158c2:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80158c6:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80158ca:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80158ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80158d2:	eef0 7a65 	vmov.f32	s15, s11
}
 80158d6:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80158d8:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
 80158dc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80158e0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	08027d88 	.word	0x08027d88
 80158ec:	35000004 	.word	0x35000004
 80158f0:	2ffffff6 	.word	0x2ffffff6

080158f4 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
 80158f4:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 80158f6:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80158f8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80158fc:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015900:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015908:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801590c:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801590e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8015912:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015916:	ee20 0a27 	vmul.f32	s0, s0, s15
 801591a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801591e:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8015922:	4770      	bx	lr

08015924 <tSineTriLFO_setPhase>:
    int i = phase;
 8015924:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 8015928:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015950 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
 801592c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801592e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 8015932:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8015934:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8015938:	ee20 0a07 	vmul.f32	s0, s0, s14
 801593c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8015940:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8015944:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 8015948:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801594a:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801594e:	4770      	bx	lr
 8015950:	4f800000 	.word	0x4f800000

08015954 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8015954:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8015956:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801595a:	4770      	bx	lr

0801595c <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
 801595c:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
 801595e:	698d      	ldr	r5, [r1, #24]
{
 8015960:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8015962:	2008      	movs	r0, #8
 8015964:	4629      	mov	r1, r5
 8015966:	f7fe fe7b 	bl	8014660 <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
 801596a:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 801596c:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 801596e:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 8015970:	6043      	str	r3, [r0, #4]
}
 8015972:	bd38      	pop	{r3, r4, r5, pc}

08015974 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
 8015974:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 8015976:	6801      	ldr	r1, [r0, #0]
 8015978:	f7fe bf34 	b.w	80147e4 <mpool_free>

0801597c <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
 801597c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015980:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 80159c0 <tPickupNonLinearity_tick+0x44>
 8015984:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80159c4 <tPickupNonLinearity_tick+0x48>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8015988:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80159c8 <tPickupNonLinearity_tick+0x4c>
 801598c:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8015990:	ed9f 4a0e 	vldr	s8, [pc, #56]	; 80159cc <tPickupNonLinearity_tick+0x50>
 8015994:	eea7 6a85 	vfma.f32	s12, s15, s10
 8015998:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80159d0 <tPickupNonLinearity_tick+0x54>
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
 801599c:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801599e:	ee25 5aa7 	vmul.f32	s10, s11, s15
	Lfloat y = out - p->prev;
 80159a2:	eddf 4a0c 	vldr	s9, [pc, #48]	; 80159d4 <tPickupNonLinearity_tick+0x58>
 80159a6:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80159aa:	ee25 7a07 	vmul.f32	s14, s10, s14
 80159ae:	eee5 6a06 	vfma.f32	s13, s10, s12
 80159b2:	eea5 7a84 	vfma.f32	s14, s11, s8
 80159b6:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return y;
}
 80159ba:	ee97 0a24 	vfnms.f32	s0, s14, s9
 80159be:	4770      	bx	lr
 80159c0:	3a59d777 	.word	0x3a59d777
 80159c4:	39f9096c 	.word	0x39f9096c
 80159c8:	3b0a47ed 	.word	0x3b0a47ed
 80159cc:	3bdd2f1b 	.word	0x3bdd2f1b
 80159d0:	3d99999a 	.word	0x3d99999a
 80159d4:	408bbced 	.word	0x408bbced

080159d8 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 80159e0:	f8d3 9000 	ldr.w	r9, [r3]
{
 80159e4:	b083      	sub	sp, #12
 80159e6:	460e      	mov	r6, r1
 80159e8:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80159ea:	4649      	mov	r1, r9
 80159ec:	2070      	movs	r0, #112	; 0x70
{
 80159ee:	461d      	mov	r5, r3
 80159f0:	eeb0 8a40 	vmov.f32	s16, s0
 80159f4:	eeb0 9a41 	vmov.f32	s18, s2
 80159f8:	4617      	mov	r7, r2
 80159fa:	eef0 9a61 	vmov.f32	s19, s3
 80159fe:	eeb0 aa42 	vmov.f32	s20, s4
 8015a02:	eeb0 ba62 	vmov.f32	s22, s5
 8015a06:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015a0a:	f7fe fe29 	bl	8014660 <mpool_alloc>
 8015a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 8015a12:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015a16:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015a1a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
 8015a1e:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 8015a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a26:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
 8015a2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 8015a2e:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015a30:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
 8015a32:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 8015a36:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015a3a:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8015a3e:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
 8015a42:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
 8015a46:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
 8015a48:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015a4c:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8015c48 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
 8015a50:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015a52:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 8015a54:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8015a56:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 8015a5a:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015a5e:	4650      	mov	r0, sl
 8015a60:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 8015a64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015a68:	f7fb fc00 	bl	801126c <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8015a6c:	ed94 0a02 	vldr	s0, [r4, #8]
 8015a70:	462a      	mov	r2, r5
 8015a72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015a74:	4658      	mov	r0, fp
 8015a76:	f7fa f9ef 	bl	800fe58 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8015a7a:	ed94 0a02 	vldr	s0, [r4, #8]
 8015a7e:	462a      	mov	r2, r5
 8015a80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015a82:	4648      	mov	r0, r9
 8015a84:	f7fa f9e8 	bl	800fe58 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
 8015a88:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
 8015a8c:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
 8015a90:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8015a94:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
 8015a98:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8015c38 <tSimpleLivingString3_initToPool+0x260>
 8015a9c:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 8015aa0:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8015aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aa8:	f100 80bf 	bmi.w	8015c2a <tSimpleLivingString3_initToPool+0x252>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015aac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8015aae:	005b      	lsls	r3, r3, #1
 8015ab0:	ee07 3a90 	vmov	s15, r3
 8015ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015ab8:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8015abc:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015ac0:	f106 0058 	add.w	r0, r6, #88	; 0x58
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015ac4:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015ac8:	ed86 0a02 	vstr	s0, [r6, #8]
    p->rippleDelay = 0.5f;
 8015acc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015ad0:	f7fb fc08 	bl	80112e4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015ad4:	ed96 7a05 	vldr	s14, [r6, #20]
 8015ad8:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015c4c <tSimpleLivingString3_initToPool+0x274>
 8015adc:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015ae0:	ed96 6a01 	vldr	s12, [r6, #4]
 8015ae4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015aec:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8015c40 <tSimpleLivingString3_initToPool+0x268>
 8015af0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015af4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015af8:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015afc:	f003 fdac 	bl	8019658 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8015b00:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015b02:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015b06:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015b0a:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8015b0e:	ed94 0a02 	vldr	s0, [r4, #8]
 8015b12:	f7fa faa5 	bl	8010060 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 8015b16:	ed94 0a02 	vldr	s0, [r4, #8]
 8015b1a:	4648      	mov	r0, r9
 8015b1c:	f7fa faa0 	bl	8010060 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 8015b20:	4658      	mov	r0, fp
 8015b22:	f7fa fa13 	bl	800ff4c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 8015b26:	4648      	mov	r0, r9
 8015b28:	f7fa fa10 	bl	800ff4c <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8015b2c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015b30:	4629      	mov	r1, r5
 8015b32:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
 8015b36:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8015b3a:	9001      	str	r0, [sp, #4]
 8015b3c:	f7fb fdf0 	bl	8011720 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 8015b40:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8015b44:	9801      	ldr	r0, [sp, #4]
 8015b46:	f7fb fe55 	bl	80117f4 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8015b4a:	eeb0 0a68 	vmov.f32	s0, s17
 8015b4e:	9801      	ldr	r0, [sp, #4]
 8015b50:	f7fb fe1e 	bl	8011790 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 8015b54:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015b56:	4629      	mov	r1, r5
 8015b58:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
 8015b5c:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015b5e:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
 8015b60:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 8015b64:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015b68:	9601      	str	r6, [sp, #4]
 8015b6a:	f7fc f8bf 	bl	8011cec <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 8015b6e:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8015b72:	9801      	ldr	r0, [sp, #4]
 8015b74:	f7fc f8fa 	bl	8011d6c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 8015b78:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8015b7c:	9801      	ldr	r0, [sp, #4]
 8015b7e:	f7fc f8d9 	bl	8011d34 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8015b82:	eeb0 1a4b 	vmov.f32	s2, s22
 8015b86:	eef0 0a4a 	vmov.f32	s1, s20
 8015b8a:	462a      	mov	r2, r5
 8015b8c:	eeb0 0a69 	vmov.f32	s0, s19
 8015b90:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015b94:	4639      	mov	r1, r7
    p->userDecay = decay;
 8015b96:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8015b9a:	f7fa ffc5 	bl	8010b28 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
 8015b9e:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
 8015ba2:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
 8015ba4:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
 8015ba8:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 8015bac:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 8015bb0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015c38 <tSimpleLivingString3_initToPool+0x260>
 8015bb4:	eeb7 6acc 	vcvt.f64.f32	d6, s24
 8015bb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc0:	d436      	bmi.n	8015c30 <tSimpleLivingString3_initToPool+0x258>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015bc4:	005b      	lsls	r3, r3, #1
 8015bc6:	ee00 3a10 	vmov	s0, r3
 8015bca:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015bce:	fe80 0a4c 	vminnm.f32	s0, s0, s24
 8015bd2:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015bd6:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015bd8:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015bdc:	f7fb fb82 	bl	80112e4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015be4:	ed94 7a05 	vldr	s14, [r4, #20]
 8015be8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015c4c <tSimpleLivingString3_initToPool+0x274>
 8015bec:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015bf0:	ed94 6a01 	vldr	s12, [r4, #4]
 8015bf4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015bfc:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8015c40 <tSimpleLivingString3_initToPool+0x268>
 8015c00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015c04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c08:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015c0c:	f003 fd24 	bl	8019658 <exp>
    p->pickupPoint = 0.9f;
 8015c10:	4a0f      	ldr	r2, [pc, #60]	; (8015c50 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
 8015c12:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 8015c14:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015c16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 8015c1a:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015c1c:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8015c20:	b003      	add	sp, #12
 8015c22:	ecbd 8b0a 	vpop	{d8-d12}
 8015c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015c54 <tSimpleLivingString3_initToPool+0x27c>
 8015c2e:	e747      	b.n	8015ac0 <tSimpleLivingString3_initToPool+0xe8>
 8015c30:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015c54 <tSimpleLivingString3_initToPool+0x27c>
 8015c34:	e7cf      	b.n	8015bd6 <tSimpleLivingString3_initToPool+0x1fe>
 8015c36:	bf00      	nop
 8015c38:	33333333 	.word	0x33333333
 8015c3c:	40133333 	.word	0x40133333
 8015c40:	0a3d70a4 	.word	0x0a3d70a4
 8015c44:	c01ba3d7 	.word	0xc01ba3d7
 8015c48:	3c23d70a 	.word	0x3c23d70a
 8015c4c:	3d8d78c4 	.word	0x3d8d78c4
 8015c50:	3f666666 	.word	0x3f666666
 8015c54:	4019999a 	.word	0x4019999a

08015c58 <tSimpleLivingString3_free>:
{
 8015c58:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8015c5a:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 8015c5c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015c60:	f7fa ff8a 	bl	8010b78 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 8015c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c68:	f7fc f860 	bl	8011d2c <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 8015c6c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015c70:	f7fb fd8a 	bl	8011788 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 8015c74:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015c78:	f7fa f95c 	bl	800ff34 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 8015c7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015c80:	f7fa f958 	bl	800ff34 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
 8015c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015c88:	f7fb fb16 	bl	80112b8 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
 8015c8c:	6821      	ldr	r1, [r4, #0]
 8015c8e:	4620      	mov	r0, r4
}
 8015c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8015c94:	f7fe bda6 	b.w	80147e4 <mpool_free>

08015c98 <tSimpleLivingString3_setFreq>:
{
 8015c98:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8015c9a:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
 8015c9c:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 8015ca0:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8015ca4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8015ca8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8015d20 <tSimpleLivingString3_setFreq+0x88>
 8015cac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8015cb0:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8015cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb8:	d42e      	bmi.n	8015d18 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015cba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	ee00 3a10 	vmov	s0, r3
 8015cc6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015cca:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8015cce:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015cd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015cd6:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015cda:	f7fb fb03 	bl	80112e4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ce2:	ed94 7a05 	vldr	s14, [r4, #20]
 8015ce6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015d30 <tSimpleLivingString3_setFreq+0x98>
 8015cea:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015cee:	ed94 6a01 	vldr	s12, [r4, #4]
 8015cf2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015cfa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8015d28 <tSimpleLivingString3_setFreq+0x90>
 8015cfe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015d0a:	f003 fca5 	bl	8019658 <exp>
 8015d0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015d12:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 8015d16:	bd10      	pop	{r4, pc}
 8015d18:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015d34 <tSimpleLivingString3_setFreq+0x9c>
 8015d1c:	e7d9      	b.n	8015cd2 <tSimpleLivingString3_setFreq+0x3a>
 8015d1e:	bf00      	nop
 8015d20:	33333333 	.word	0x33333333
 8015d24:	40133333 	.word	0x40133333
 8015d28:	0a3d70a4 	.word	0x0a3d70a4
 8015d2c:	c01ba3d7 	.word	0xc01ba3d7
 8015d30:	3d8d78c4 	.word	0x3d8d78c4
 8015d34:	4019999a 	.word	0x4019999a

08015d38 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8015d38:	6800      	ldr	r0, [r0, #0]
 8015d3a:	303c      	adds	r0, #60	; 0x3c
 8015d3c:	f7fb bd28 	b.w	8011790 <tOnePole_setFreq>

08015d40 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d44:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015d88 <tSimpleLivingString3_setDecay+0x48>
{
 8015d48:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015d4a:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
 8015d4e:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015d50:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015d54:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
 8015d58:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015d5c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8015d60:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015d64:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8015d80 <tSimpleLivingString3_setDecay+0x40>
 8015d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d6c:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8015d70:	f003 fc72 	bl	8019658 <exp>
 8015d74:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015d78:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8015d7c:	bd10      	pop	{r4, pc}
 8015d7e:	bf00      	nop
 8015d80:	52bd3c36 	.word	0x52bd3c36
 8015d84:	c01ba196 	.word	0xc01ba196
 8015d88:	3d8d78c4 	.word	0x3d8d78c4

08015d8c <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8015d8c:	6800      	ldr	r0, [r0, #0]
 8015d8e:	3054      	adds	r0, #84	; 0x54
 8015d90:	f7fa bf2e 	b.w	8010bf0 <tFeedbackLeveler_setTargetLevel>

08015d94 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8015d94:	6800      	ldr	r0, [r0, #0]
 8015d96:	3054      	adds	r0, #84	; 0x54
 8015d98:	f7fa befe 	b.w	8010b98 <tFeedbackLeveler_setFactor>

08015d9c <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8015d9c:	6800      	ldr	r0, [r0, #0]
 8015d9e:	3054      	adds	r0, #84	; 0x54
 8015da0:	f7fa bef6 	b.w	8010b90 <tFeedbackLeveler_setStrength>

08015da4 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 8015da4:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 8015da6:	6805      	ldr	r5, [r0, #0]
{
 8015da8:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8015daa:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8015dae:	f7fa fef7 	bl	8010ba0 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 8015db2:	622c      	str	r4, [r5, #32]
}
 8015db4:	bd38      	pop	{r3, r4, r5, pc}
 8015db6:	bf00      	nop

08015db8 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8015db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
 8015dbc:	6801      	ldr	r1, [r0, #0]
{
 8015dbe:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
 8015dc0:	edd1 7a02 	vldr	s15, [r1, #8]
 8015dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015dc8:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 8015dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dd0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015dd4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8015dd8:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
 8015ddc:	2e00      	cmp	r6, #0
 8015dde:	f340 8085 	ble.w	8015eec <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 8015de2:	42b0      	cmp	r0, r6
 8015de4:	dc11      	bgt.n	8015e0a <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
 8015de6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 8015dea:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 8015dec:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
 8015dee:	dd7a      	ble.n	8015ee6 <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015df0:	ee07 ca90 	vmov	s15, ip
 8015df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015df8:	f1bc 0f00 	cmp.w	ip, #0
 8015dfc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015e00:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8015e04:	da10      	bge.n	8015e28 <tSimpleLivingString3_pluck+0x70>
 8015e06:	2300      	movs	r3, #0
 8015e08:	e02d      	b.n	8015e66 <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
 8015e0a:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015e0c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015e10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015e14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e18:	ee07 3a90 	vmov	s15, r3
 8015e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e20:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8015e24:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8015e28:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
 8015e2a:	f04f 0300 	mov.w	r3, #0
 8015e2e:	bfa8      	it	ge
 8015e30:	4666      	movge	r6, ip
 8015e32:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e36:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015e38:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e3c:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 8015e44:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e46:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 8015e48:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e4a:	fbb2 f7f5 	udiv	r7, r2, r5
 8015e4e:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015e52:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 8015e56:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
 8015e58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015e5c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015e60:	dde9      	ble.n	8015e36 <tSimpleLivingString3_pluck+0x7e>
 8015e62:	4298      	cmp	r0, r3
 8015e64:	dd1d      	ble.n	8015ea2 <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e66:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015e6a:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e6e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015e74:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e78:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e7c:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 8015e80:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e82:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 8015e84:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e86:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 8015e8a:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015e8c:	fbb2 f6f5 	udiv	r6, r2, r5
 8015e90:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015e94:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 8015e98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015e9c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015ea0:	dce3      	bgt.n	8015e6a <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015ea2:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015ea6:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015eaa:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 8015eae:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015eb0:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015eb2:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015eb4:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015eb6:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015eb8:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015eba:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015ebc:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015ebe:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015ec0:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 8015ec2:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015ec6:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015eca:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015ece:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
 8015ed2:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015ed4:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015ed8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8015edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ee0:	6812      	ldr	r2, [r2, #0]
 8015ee2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8015ee4:	d1df      	bne.n	8015ea6 <tSimpleLivingString3_pluck+0xee>
    }
}
 8015ee6:	b003      	add	sp, #12
 8015ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
 8015eec:	2800      	cmp	r0, #0
 8015eee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8015ef2:	ddf8      	ble.n	8015ee6 <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015ef4:	ee07 ca10 	vmov	s14, ip
 8015ef8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 8015efc:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015efe:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8015f02:	eeb0 7a67 	vmov.f32	s14, s15
 8015f06:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015f0a:	eeb0 6a67 	vmov.f32	s12, s15
 8015f0e:	e78b      	b.n	8015e28 <tSimpleLivingString3_pluck+0x70>

08015f10 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 8015f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f14:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 8015f18:	6804      	ldr	r4, [r0, #0]
{
 8015f1a:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8015f1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8015f22:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8015f26:	f7fb f9eb 	bl	8011300 <tExpSmooth_tick>
 8015f2a:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015f2e:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8015f32:	4628      	mov	r0, r5
 8015f34:	f7fa f894 	bl	8010060 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015f38:	eeb0 0a48 	vmov.f32	s0, s16
 8015f3c:	4638      	mov	r0, r7
 8015f3e:	f7fa f88f 	bl	8010060 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 8015f42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	dd56      	ble.n	8015ff6 <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015f48:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8015f4c:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015f50:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 8015f54:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015f56:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
 8015f58:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015f5a:	f7fa f855 	bl	8010008 <tLinearDelay_tickOut>
 8015f5e:	4648      	mov	r0, r9
 8015f60:	f7fb fc34 	bl	80117cc <tOnePole_tick>
 8015f64:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 8015f68:	edd4 7a04 	vldr	s15, [r4, #16]
 8015f6c:	4650      	mov	r0, sl
 8015f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015f76:	f7fb fee9 	bl	8011d4c <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015f7a:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015f7c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015f80:	f7fa fe12 	bl	8010ba8 <tFeedbackLeveler_tick>
 8015f84:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015f88:	eef0 0a40 	vmov.f32	s1, s0
 8015f8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015f90:	f7fe f8ea 	bl	8014168 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015f94:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015f96:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015f9a:	f7fa f835 	bl	8010008 <tLinearDelay_tickOut>
 8015f9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015fa2:	eef0 0a40 	vmov.f32	s1, s0
 8015fa6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015faa:	f7fe f8dd 	bl	8014168 <LEAF_clip>
 8015fae:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015fb8:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015fbc:	f7fa f810 	bl	800ffe0 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 8015fc0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8015fc4:	4638      	mov	r0, r7
 8015fc6:	eeb1 0a40 	vneg.f32	s0, s0
 8015fca:	f7fa f809 	bl	800ffe0 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8015fce:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8015fd2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015fdc:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8015fe0:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015fe8:	ee17 1a90 	vmov	r1, s15
 8015fec:	f7fa f876 	bl	80100dc <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8015ff0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015ff2:	42b3      	cmp	r3, r6
 8015ff4:	dcaf      	bgt.n	8015f56 <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015ff6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
 8015ffa:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8016000:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
 8016004:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8016008:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 801600a:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801600e:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 8016010:	feb8 6a65 	vrinta.f32	s12, s11
 8016014:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8016018:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801601c:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 8016020:	feb8 7a66 	vrinta.f32	s14, s13
 8016024:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8016028:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801602c:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8016030:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8016034:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
 8016038:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801603c:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801603e:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8016040:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8016044:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8016046:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801604a:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801604e:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8016050:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8016052:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
 8016054:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
 8016058:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801605c:	fb93 f6f0 	sdiv	r6, r3, r0
 8016060:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8016064:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8016066:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801606a:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
 801606e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8016072:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8016076:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801607a:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801607c:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8016080:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8016084:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8016088:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 801608c:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801608e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8016092:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016096:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801609a:	fb93 f5f0 	sdiv	r5, r3, r0
 801609e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80160a2:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80160a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 80160aa:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 80160ae:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 80160b0:	eea7 0aa6 	vfma.f32	s0, s15, s13
 80160b4:	ee20 0a24 	vmul.f32	s0, s0, s9
 80160b8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 80160bc:	ecbd 8b02 	vpop	{d8}
 80160c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080160c4 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 80160c4:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 80160c6:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 80160ca:	4770      	bx	lr

080160cc <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
 80160cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d0:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 80160d4:	6817      	ldr	r7, [r2, #0]
{
 80160d6:	460e      	mov	r6, r1
 80160d8:	b085      	sub	sp, #20
 80160da:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80160dc:	4639      	mov	r1, r7
 80160de:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
 80160e2:	4615      	mov	r5, r2
 80160e4:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80160e8:	f7fe faba 	bl	8014660 <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
 80160ec:	ee07 6a90 	vmov	s15, r6
 80160f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80160f4:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
 80160f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
 80160fc:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 80160fe:	687a      	ldr	r2, [r7, #4]

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
    x->barPulsePhasor = 0;
 8016100:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
 8016104:	6046      	str	r6, [r0, #4]
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8016106:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
 801610a:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 801610e:	eddf baf7 	vldr	s23, [pc, #988]	; 80164ec <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
 8016112:	4bf7      	ldr	r3, [pc, #988]	; (80164f0 <tTString_initToPool+0x424>)
    x->wound = 1;
 8016114:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
 8016116:	ed9f 8af7 	vldr	s16, [pc, #988]	; 80164f4 <tTString_initToPool+0x428>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 801611a:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
 801611c:	eddf 9af6 	vldr	s19, [pc, #984]	; 80164f8 <tTString_initToPool+0x42c>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer

    tLagrangeDelay_clear(&x->delay);
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8016120:	f104 0918 	add.w	r9, r4, #24
 8016124:	eddf aaf5 	vldr	s21, [pc, #980]	; 80164fc <tTString_initToPool+0x430>
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8016128:	eeb0 0a69 	vmov.f32	s0, s19
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 801612c:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
 8016130:	ed9f baf3 	vldr	s22, [pc, #972]	; 8016500 <tTString_initToPool+0x434>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8016134:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8016138:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
 801613c:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8016140:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 8016144:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8016148:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
 801614a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
 801614e:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
 8016152:	4bec      	ldr	r3, [pc, #944]	; (8016504 <tTString_initToPool+0x438>)
    x->wound = 1;
 8016154:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
 8016158:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 801615c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
 8016160:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
 8016164:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
 8016168:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
 801616c:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
 8016170:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8016174:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8016178:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
 801617c:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 8016180:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 8016184:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8016188:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 801618c:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 8016190:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 8016194:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
 8016198:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 801619c:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 80161a0:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 80161a4:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 80161a8:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
 80161ac:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 80161b0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80161b4:	4638      	mov	r0, r7
 80161b6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80161ba:	ee17 1a90 	vmov	r1, s15
 80161be:	edcd 7a01 	vstr	s15, [sp, #4]
 80161c2:	f7fa f855 	bl	8010270 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 80161c6:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
 80161ca:	4638      	mov	r0, r7
 80161cc:	f7fa f91a 	bl	8010404 <tLagrangeDelay_getMaxDelay>
 80161d0:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
 80161d4:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 80161d6:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 80161da:	f7f9 ff9d 	bl	8010118 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 80161de:	462a      	mov	r2, r5
 80161e0:	9901      	ldr	r1, [sp, #4]
 80161e2:	eeb0 0a69 	vmov.f32	s0, s19
 80161e6:	4648      	mov	r0, r9
 80161e8:	f7fa f842 	bl	8010270 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 80161ec:	4648      	mov	r0, r9
 80161ee:	f7f9 ff93 	bl	8010118 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 80161f2:	4638      	mov	r0, r7
 80161f4:	f7fa f906 	bl	8010404 <tLagrangeDelay_getMaxDelay>
 80161f8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80161fc:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8016200:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8016204:	4629      	mov	r1, r5
 8016206:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8016208:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 801620c:	f7fb fb14 	bl	8011838 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 8016210:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016214:	4648      	mov	r0, r9
 8016216:	f7fb fb53 	bl	80118c0 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 801621a:	4629      	mov	r1, r5
 801621c:	4638      	mov	r0, r7
 801621e:	f7fb fb0b 	bl	8011838 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 8016222:	4638      	mov	r0, r7
 8016224:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016228:	f7fb fb4a 	bl	80118c0 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 801622c:	4648      	mov	r0, r9
 801622e:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016508 <tTString_initToPool+0x43c>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8016232:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8016236:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 801650c <tTString_initToPool+0x440>
 801623a:	f7fb fb2b 	bl	8011894 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 801623e:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8016508 <tTString_initToPool+0x43c>
 8016242:	4638      	mov	r0, r7
 8016244:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 801650c <tTString_initToPool+0x440>
 8016248:	f7fb fb24 	bl	8011894 <tCookOnePole_setGainAndPole>
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 801624c:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8016250:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8016254:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016258:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 801625c:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8016260:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 8016264:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8016268:	4638      	mov	r0, r7
    x->freq = freq;
 801626a:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 801626e:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016272:	ee30 0a66 	vsub.f32	s0, s0, s13
 8016276:	f7fb f835 	bl	80112e4 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 801627a:	eeb0 0a49 	vmov.f32	s0, s18
 801627e:	ed94 aa50 	vldr	s20, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8016282:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016286:	f7ea fa0b 	bl	80006a0 <arm_sin_f32>
 801628a:	eef0 7a40 	vmov.f32	s15, s0
 801628e:	ed94 ca50 	vldr	s24, [r4, #320]	; 0x140
 8016292:	eeb0 0a49 	vmov.f32	s0, s18
 8016296:	ee2a aa27 	vmul.f32	s20, s20, s15
 801629a:	f7ea f9af 	bl	80005fc <arm_cos_f32>
 801629e:	eef0 0a68 	vmov.f32	s1, s17
 80162a2:	a803      	add	r0, sp, #12
 80162a4:	eef0 7a40 	vmov.f32	s15, s0
 80162a8:	eeb0 0a4a 	vmov.f32	s0, s20
 80162ac:	eeec 0a67 	vfms.f32	s1, s24, s15
 80162b0:	f7ea f81a 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 80162b4:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80162b6:	edd4 0a02 	vldr	s1, [r4, #8]
 80162ba:	4629      	mov	r1, r5
     x->phaseComp = result;
 80162bc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80162c0:	eeb0 0a48 	vmov.f32	s0, s16
 80162c4:	ee60 0a8b 	vmul.f32	s1, s1, s22
 80162c8:	4658      	mov	r0, fp
 80162ca:	f7fa ffcf 	bl	801126c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 80162ce:	eeb0 0a48 	vmov.f32	s0, s16
 80162d2:	4658      	mov	r0, fp
 80162d4:	f7fb f806 	bl	80112e4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 80162d8:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8016554 <tTString_initToPool+0x488>
 80162dc:	edd4 0a02 	vldr	s1, [r4, #8]
 80162e0:	4629      	mov	r1, r5
 80162e2:	4638      	mov	r0, r7
 80162e4:	eeb0 0a69 	vmov.f32	s0, s19
 80162e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80162ec:	f7fa ffbe 	bl	801126c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 80162f0:	4638      	mov	r0, r7
 80162f2:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80162f6:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 80162fa:	f7fa fff3 	bl	80112e4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 80162fe:	eddf 7a84 	vldr	s15, [pc, #528]	; 8016510 <tTString_initToPool+0x444>
 8016302:	edd4 0a02 	vldr	s1, [r4, #8]
 8016306:	4629      	mov	r1, r5
 8016308:	eeb0 0a48 	vmov.f32	s0, s16
 801630c:	4650      	mov	r0, sl
 801630e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016312:	f7fa ffab 	bl	801126c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 8016316:	eeb0 0a48 	vmov.f32	s0, s16
 801631a:	4650      	mov	r0, sl
 801631c:	f7fa ffe2 	bl	80112e4 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8016320:	462a      	mov	r2, r5
 8016322:	2104      	movs	r1, #4
 8016324:	4648      	mov	r0, r9
 8016326:	f7fb f85d 	bl	80113e4 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 801632a:	462a      	mov	r2, r5
 801632c:	2104      	movs	r1, #4
 801632e:	4638      	mov	r0, r7
 8016330:	f7fb f858 	bl	80113e4 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8016334:	eef0 0a69 	vmov.f32	s1, s19
 8016338:	ed94 1a02 	vldr	s2, [r4, #8]
 801633c:	4648      	mov	r0, r9
 801633e:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8016514 <tTString_initToPool+0x448>
 8016342:	f7fb f8c7 	bl	80114d4 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8016346:	ed94 1a02 	vldr	s2, [r4, #8]
 801634a:	4638      	mov	r0, r7
 801634c:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8016350:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8016354:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8016358:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8016518 <tTString_initToPool+0x44c>
 801635c:	f7fb f8ba 	bl	80114d4 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8016360:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016364:	4631      	mov	r1, r6
 8016366:	eddf 0a6d 	vldr	s1, [pc, #436]	; 801651c <tTString_initToPool+0x450>
 801636a:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 801636c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8016370:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016520 <tTString_initToPool+0x454>
 8016374:	9001      	str	r0, [sp, #4]
 8016376:	f7fb fb35 	bl	80119e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 801637a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801637e:	9801      	ldr	r0, [sp, #4]
 8016380:	f7fb fc8a 	bl	8011c98 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 8016384:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8016524 <tTString_initToPool+0x458>
 8016388:	9801      	ldr	r0, [sp, #4]
 801638a:	f7fb fbed 	bl	8011b68 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 801638e:	eddf 0a63 	vldr	s1, [pc, #396]	; 801651c <tTString_initToPool+0x450>
 8016392:	462a      	mov	r2, r5
 8016394:	4641      	mov	r1, r8
 8016396:	4638      	mov	r0, r7
 8016398:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8016528 <tTString_initToPool+0x45c>
 801639c:	f7fb fb22 	bl	80119e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 80163a0:	4638      	mov	r0, r7
 80163a2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 80163a6:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 80163aa:	f7fb fc75 	bl	8011c98 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 80163ae:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016528 <tTString_initToPool+0x45c>
 80163b2:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 80163b4:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
 80163b8:	f7fb fbd6 	bl	8011b68 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80163bc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
 80163c0:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80163c4:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80163c6:	ee67 7aab 	vmul.f32	s15, s15, s23
    tCycle_initToPool(&x->tensionModOsc, mp);
 80163ca:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80163cc:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 80163d0:	f7fe faa8 	bl	8014924 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 80163d4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80163d8:	9801      	ldr	r0, [sp, #4]
 80163da:	f7fe fb07 	bl	80149ec <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 80163de:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80163e2:	4629      	mov	r1, r5
 80163e4:	9001      	str	r0, [sp, #4]
 80163e6:	f7fe fa9d 	bl	8014924 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 80163ea:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80163ee:	9801      	ldr	r0, [sp, #4]
 80163f0:	f7fe fafc 	bl	80149ec <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 80163f4:	4631      	mov	r1, r6
 80163f6:	eef0 0a68 	vmov.f32	s1, s17
 80163fa:	462a      	mov	r2, r5
 80163fc:	4638      	mov	r0, r7
 80163fe:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801652c <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
 8016402:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 8016406:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 801640a:	f7fb faeb 	bl	80119e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 801640e:	4638      	mov	r0, r7
 8016410:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016414:	f7fb fc40 	bl	8011c98 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8016418:	4638      	mov	r0, r7
 801641a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8016530 <tTString_initToPool+0x464>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 801641e:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8016422:	f7fb fba1 	bl	8011b68 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 8016426:	4631      	mov	r1, r6
 8016428:	eddf 0a42 	vldr	s1, [pc, #264]	; 8016534 <tTString_initToPool+0x468>
 801642c:	462a      	mov	r2, r5
 801642e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016538 <tTString_initToPool+0x46c>
 8016432:	4640      	mov	r0, r8
 8016434:	f7fb fad6 	bl	80119e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 8016438:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801643c:	4640      	mov	r0, r8
 801643e:	f7fb fc2b 	bl	8011c98 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 8016442:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 801653c <tTString_initToPool+0x470>
 8016446:	4640      	mov	r0, r8
 8016448:	f7fb fb8e 	bl	8011b68 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 801644c:	eddf 0a43 	vldr	s1, [pc, #268]	; 801655c <tTString_initToPool+0x490>
 8016450:	462a      	mov	r2, r5
 8016452:	2104      	movs	r1, #4
 8016454:	4638      	mov	r0, r7
 8016456:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801654c <tTString_initToPool+0x480>
 801645a:	f7fb fac3 	bl	80119e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 801645e:	4638      	mov	r0, r7
 8016460:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016464:	f7fb fc18 	bl	8011c98 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8016468:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801654c <tTString_initToPool+0x480>
 801646c:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 801646e:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8016472:	f7fb fb79 	bl	8011b68 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 8016476:	462a      	mov	r2, r5
 8016478:	4631      	mov	r1, r6
 801647a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801647e:	f7fe fea7 	bl	80151d0 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8016482:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8016486:	4629      	mov	r1, r5
 8016488:	eeb0 0a68 	vmov.f32	s0, s17
 801648c:	4638      	mov	r0, r7
 801648e:	f7fb fc2d 	bl	8011cec <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8016492:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016496:	4638      	mov	r0, r7
 8016498:	f7fb fc68 	bl	8011d6c <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 801649c:	4629      	mov	r1, r5
 801649e:	eeb0 0a68 	vmov.f32	s0, s17
 80164a2:	4630      	mov	r0, r6
 80164a4:	f7fb fc22 	bl	8011cec <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 80164a8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80164ac:	4630      	mov	r0, r6
 80164ae:	f7fb fc5d 	bl	8011d6c <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 80164b2:	4629      	mov	r1, r5
 80164b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80164b8:	eeb0 0a48 	vmov.f32	s0, s16
 80164bc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8016540 <tTString_initToPool+0x474>
 80164c0:	f7fa ff2e 	bl	8011320 <tSlide_initToPool>
    if (x->wound)
 80164c4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 80164c8:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80164cc:	4629      	mov	r1, r5
    if (x->wound)
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f000 80e4 	beq.w	801669c <tTString_initToPool+0x5d0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 80164d4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8016544 <tTString_initToPool+0x478>
 80164d8:	eeb0 0a48 	vmov.f32	s0, s16
 80164dc:	9001      	str	r0, [sp, #4]
 80164de:	f7fa fec5 	bl	801126c <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 80164e2:	eeb0 0a48 	vmov.f32	s0, s16
 80164e6:	9801      	ldr	r0, [sp, #4]
 80164e8:	e040      	b.n	801656c <tTString_initToPool+0x4a0>
 80164ea:	bf00      	nop
 80164ec:	40c90fdb 	.word	0x40c90fdb
 80164f0:	41200000 	.word	0x41200000
 80164f4:	00000000 	.word	0x00000000
 80164f8:	42c80000 	.word	0x42c80000
 80164fc:	43dc0000 	.word	0x43dc0000
 8016500:	3b83126f 	.word	0x3b83126f
 8016504:	3ecccccd 	.word	0x3ecccccd
 8016508:	bab78034 	.word	0xbab78034
 801650c:	3f7fbe77 	.word	0x3f7fbe77
 8016510:	3db851ec 	.word	0x3db851ec
 8016514:	38d1b717 	.word	0x38d1b717
 8016518:	37d1b717 	.word	0x37d1b717
 801651c:	3f4ccccd 	.word	0x3f4ccccd
 8016520:	459c4000 	.word	0x459c4000
 8016524:	45bb8000 	.word	0x45bb8000
 8016528:	44e10000 	.word	0x44e10000
 801652c:	45354000 	.word	0x45354000
 8016530:	4573c000 	.word	0x4573c000
 8016534:	3f8ccccd 	.word	0x3f8ccccd
 8016538:	456d8000 	.word	0x456d8000
 801653c:	45802000 	.word	0x45802000
 8016540:	453b8000 	.word	0x453b8000
 8016544:	3a03126f 	.word	0x3a03126f
 8016548:	3a51b717 	.word	0x3a51b717
 801654c:	447a0000 	.word	0x447a0000
 8016550:	00000000 	.word	0x00000000
 8016554:	3d23d70a 	.word	0x3d23d70a
 8016558:	3d4ccccd 	.word	0x3d4ccccd
 801655c:	3f666666 	.word	0x3f666666
 8016560:	45dac000 	.word	0x45dac000
 8016564:	3dcccccd 	.word	0x3dcccccd
 8016568:	3e7ae148 	.word	0x3e7ae148
 801656c:	f7fa feba 	bl	80112e4 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 8016570:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 8016574:	4629      	mov	r1, r5
 8016576:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8016548 <tTString_initToPool+0x47c>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 801657a:	eeb0 0a48 	vmov.f32	s0, s16
 801657e:	4630      	mov	r0, r6
 8016580:	9601      	str	r6, [sp, #4]
 8016582:	f7fa fe73 	bl	801126c <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8016586:	eeb0 0a48 	vmov.f32	s0, s16
 801658a:	9801      	ldr	r0, [sp, #4]
 801658c:	f7fa feaa 	bl	80112e4 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8016590:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 801654c <tTString_initToPool+0x480>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8016594:	ed1f 8a12 	vldr	s16, [pc, #-72]	; 8016550 <tTString_initToPool+0x484>
 8016598:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 801659c:	eeb0 0a60 	vmov.f32	s0, s1
 80165a0:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80165a4:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80165a6:	ed5f 8a15 	vldr	s17, [pc, #-84]	; 8016554 <tTString_initToPool+0x488>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 80165aa:	f7fa feb9 	bl	8011320 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 80165ae:	4629      	mov	r1, r5
 80165b0:	f504 708a 	add.w	r0, r4, #276	; 0x114
 80165b4:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80165b8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80165bc:	f7fa feb0 	bl	8011320 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 80165c0:	4629      	mov	r1, r5
 80165c2:	eeb0 0a48 	vmov.f32	s0, s16
 80165c6:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 8016558 <tTString_initToPool+0x48c>
 80165ca:	4630      	mov	r0, r6
 80165cc:	f7fa fe4e 	bl	801126c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 80165d0:	eeb0 0a48 	vmov.f32	s0, s16
 80165d4:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
 80165d6:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 80165da:	f7fa fe83 	bl	80112e4 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 80165de:	462a      	mov	r2, r5
 80165e0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80165e4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80165e8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80165ec:	2102      	movs	r1, #2
 80165ee:	f7fb f9f9 	bl	80119e4 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 80165f2:	4629      	mov	r1, r5
 80165f4:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80165f8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
 80165fc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 8016600:	f7fb fb74 	bl	8011cec <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 8016604:	462a      	mov	r2, r5
 8016606:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801660a:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 801655c <tTString_initToPool+0x490>
 801660e:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 8016560 <tTString_initToPool+0x494>
 8016612:	2101      	movs	r1, #1
 8016614:	f7fb f9e6 	bl	80119e4 <tSVF_initToPool>
    x->inharmonic = 1;
 8016618:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 801661a:	edd4 0a02 	vldr	s1, [r4, #8]
 801661e:	462a      	mov	r2, r5
 8016620:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
 8016624:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016628:	ee60 0aa8 	vmul.f32	s1, s1, s17
 801662c:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 8016564 <tTString_initToPool+0x498>
 8016630:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
 8016634:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8016638:	f7fa fa76 	bl	8010b28 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 801663c:	edd4 0a02 	vldr	s1, [r4, #8]
 8016640:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8016644:	ed1f 1a39 	vldr	s2, [pc, #-228]	; 8016564 <tTString_initToPool+0x498>
 8016648:	ee60 0aa8 	vmul.f32	s1, s1, s17
 801664c:	462a      	mov	r2, r5
 801664e:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8016652:	2101      	movs	r1, #1
 8016654:	f7fa fa68 	bl	8010b28 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8016658:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8016568 <tTString_initToPool+0x49c>
 801665c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8016660:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
 8016662:	4b17      	ldr	r3, [pc, #92]	; (80166c0 <tTString_initToPool+0x5f4>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8016664:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8016668:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 801666c:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
 801666e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8016672:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8016676:	f7fe fdab 	bl	80151d0 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 801667a:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
 801667e:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8016680:	2008      	movs	r0, #8
 8016682:	4629      	mov	r1, r5
 8016684:	f7fd ffec 	bl	8014660 <mpool_alloc>
 8016688:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
 801668c:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 801668e:	ed80 8a01 	vstr	s16, [r0, #4]
}
 8016692:	b005      	add	sp, #20
 8016694:	ecbd 8b0a 	vpop	{d8-d12}
 8016698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 801669c:	eddf 0a09 	vldr	s1, [pc, #36]	; 80166c4 <tTString_initToPool+0x5f8>
 80166a0:	eeb0 0a48 	vmov.f32	s0, s16
 80166a4:	9001      	str	r0, [sp, #4]
 80166a6:	f7fa fde1 	bl	801126c <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 80166aa:	eeb0 0a48 	vmov.f32	s0, s16
 80166ae:	9801      	ldr	r0, [sp, #4]
 80166b0:	f7fa fe18 	bl	80112e4 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 80166b4:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 80166b8:	eef0 0a4b 	vmov.f32	s1, s22
 80166bc:	4629      	mov	r1, r5
 80166be:	e75c      	b.n	801657a <tTString_initToPool+0x4ae>
 80166c0:	428c0000 	.word	0x428c0000
 80166c4:	3ba3d70a 	.word	0x3ba3d70a

080166c8 <tTString_free>:
{
 80166c8:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 80166ca:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
 80166cc:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
 80166d0:	6801      	ldr	r1, [r0, #0]
 80166d2:	f7fe f887 	bl	80147e4 <mpool_free>
    tNoise_free(&x->pickNoiseSource);
 80166d6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80166da:	f7fe fd89 	bl	80151f0 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 80166de:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80166e2:	f7fa fa49 	bl	8010b78 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 80166e6:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80166ea:	f7fa fa45 	bl	8010b78 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 80166ee:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80166f2:	f7fb f9ff 	bl	8011af4 <tSVF_free>
    tHighpass_free(&x->barHP);
 80166f6:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80166fa:	f7fb fb17 	bl	8011d2c <tHighpass_free>
    tSVF_free(&x->barResonator);
 80166fe:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8016702:	f7fb f9f7 	bl	8011af4 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 8016706:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 801670a:	f7fa fdd5 	bl	80112b8 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 801670e:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8016712:	f7fa fe2b 	bl	801136c <tSlide_free>
    tSlide_free(&x->barSmooth);
 8016716:	f504 7084 	add.w	r0, r4, #264	; 0x108
 801671a:	f7fa fe27 	bl	801136c <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 801671e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8016722:	f7fa fdc9 	bl	80112b8 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 8016726:	f504 708c 	add.w	r0, r4, #280	; 0x118
 801672a:	f7fa fdc5 	bl	80112b8 <tExpSmooth_free>
	tSlide_free(&x->slide);
 801672e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016732:	f7fa fe1b 	bl	801136c <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 8016736:	f104 0020 	add.w	r0, r4, #32
 801673a:	f7fb faf7 	bl	8011d2c <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 801673e:	f104 001c 	add.w	r0, r4, #28
 8016742:	f7fb faf3 	bl	8011d2c <tHighpass_free>
    tNoise_free(&x->noise);
 8016746:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801674a:	f7fe fd51 	bl	80151f0 <tNoise_free>
    tSVF_free(&x->peakFilt);
 801674e:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8016752:	f7fb f9cf 	bl	8011af4 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 8016756:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801675a:	f7fb f9cb 	bl	8011af4 <tSVF_free>
    tSVF_free(&x->pickupFilter);
 801675e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8016762:	f7fb f9c7 	bl	8011af4 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 8016766:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801676a:	f7fe f8f7 	bl	801495c <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 801676e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8016772:	f7fe f8f3 	bl	801495c <tCycle_free>
    tSVF_free(&x->highpassP);
 8016776:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 801677a:	f7fb f9bb 	bl	8011af4 <tSVF_free>
    tSVF_free(&x->lowpassP),
 801677e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016782:	f7fb f9b7 	bl	8011af4 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 8016786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801678a:	f7fa fe89 	bl	80114a0 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 801678e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016792:	f7fa fe85 	bl	80114a0 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 8016796:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 801679a:	f7fa fd8d 	bl	80112b8 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 801679e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80167a2:	f7fa fd89 	bl	80112b8 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 80167a6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80167aa:	f7fa fd85 	bl	80112b8 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 80167ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80167b2:	f7fb f859 	bl	8011868 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 80167b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80167ba:	f7fb f855 	bl	8011868 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 80167be:	f104 0018 	add.w	r0, r4, #24
 80167c2:	f7f9 fc9d 	bl	8010100 <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 80167c6:	f104 0014 	add.w	r0, r4, #20
 80167ca:	f7f9 fc99 	bl	8010100 <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 80167ce:	6821      	ldr	r1, [r4, #0]
 80167d0:	4620      	mov	r0, r4
}
 80167d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
 80167d6:	f7fe b805 	b.w	80147e4 <mpool_free>
 80167da:	bf00      	nop

080167dc <tTString_tick>:
{
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
 80167e4:	6804      	ldr	r4, [r0, #0]
{
 80167e6:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
 80167e8:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80167ec:	f7fe fd04 	bl	80151f8 <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 80167f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80167f4:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 80167f8:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
 80167fc:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016800:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
 8016804:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016808:	9000      	str	r0, [sp, #0]
 801680a:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 801680e:	eef4 6ac8 	vcmpe.f32	s13, s16
 8016812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016816:	d407      	bmi.n	8016828 <tTString_tick+0x4c>
 8016818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801681c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016824:	f340 83d5 	ble.w	8016fd2 <tTString_tick+0x7f6>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016828:	f7fa fd64 	bl	80112f4 <tExpSmooth_setValAndDest>
 801682c:	9800      	ldr	r0, [sp, #0]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 801682e:	f7fa fd67 	bl	8011300 <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8016832:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8016836:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 801683a:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 801683e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016842:	f7fd fb4f 	bl	8013ee4 <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8016846:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8016848:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 801684c:	9500      	str	r5, [sp, #0]
 801684e:	eeb0 0a48 	vmov.f32	s0, s16
 8016852:	f7fa fd47 	bl	80112e4 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 8016856:	9800      	ldr	r0, [sp, #0]
 8016858:	f7fa fd52 	bl	8011300 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 801685c:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 8016860:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 8016864:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016868:	f7fd fb3c 	bl	8013ee4 <fastabsf>
        if (differenceFastSmooth < 0.0001f)
 801686c:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8016bbc <tTString_tick+0x3e0>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 8016870:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
 8016874:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687c:	f140 8359 	bpl.w	8016f32 <tTString_tick+0x756>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 8016880:	eddf 6acf 	vldr	s13, [pc, #828]	; 8016bc0 <tTString_tick+0x3e4>
 8016884:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8016bc4 <tTString_tick+0x3e8>
 8016888:	ee30 8a66 	vsub.f32	s16, s0, s13
 801688c:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016bc8 <tTString_tick+0x3ec>
 8016890:	ee28 8a07 	vmul.f32	s16, s16, s14
 8016894:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8016898:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 801689c:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 80168a0:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 80168a4:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80168a8:	f7fd fb1c 	bl	8013ee4 <fastabsf>
 80168ac:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 80168b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
 80168b4:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 80168b8:	ee79 0a09 	vadd.f32	s1, s18, s18
 80168bc:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8016bc8 <tTString_tick+0x3ec>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 80168c0:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 80168c4:	f7fd fc50 	bl	8014168 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 80168c8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80168cc:	f7fa fd70 	bl	80113b0 <tSlide_tick>
    if (x->wound)
 80168d0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 80168d4:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 83a9 	beq.w	8017030 <tTString_tick+0x854>
		if (bumpDifference > 1.0f)
 80168de:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80168e2:	eef4 8ac9 	vcmpe.f32	s17, s18
 80168e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ea:	f300 8325 	bgt.w	8016f38 <tTString_tick+0x75c>
			x->bumpOsc = 0;
 80168ee:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 80168f0:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 80168f4:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80168f8:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
 80168fc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
 8016900:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8016904:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016908:	4293      	cmp	r3, r2
 801690a:	f240 835e 	bls.w	8016fca <tTString_tick+0x7ee>
			tSlide_setDest(&x->barSmooth, 5.0f);
 801690e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8016912:	4628      	mov	r0, r5
 8016914:	f7fa fd2e 	bl	8011374 <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8016918:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
 801691a:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 801691e:	f7fa fd2d 	bl	801137c <tSlide_tickNoInput>
 8016922:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 8016926:	4628      	mov	r0, r5
 8016928:	f7fb f91e 	bl	8011b68 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
 801692c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8016930:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
 8016932:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8016936:	f7fa fd21 	bl	801137c <tSlide_tickNoInput>
		if (pulseVal > .99f)
 801693a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8016bcc <tTString_tick+0x3f0>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 801693e:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
 8016942:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801694a:	f300 83ad 	bgt.w	80170a8 <tTString_tick+0x8cc>
		x->slideNoise *= pulseVal;
 801694e:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8016952:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
 8016954:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016958:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 801695c:	f7fa fcd0 	bl	8011300 <tExpSmooth_tick>
 8016960:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8016964:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8016966:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 801696a:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 801696e:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8016972:	f7fb f8c3 	bl	8011afc <tSVF_tick>
 8016976:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 801697a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801697e:	f7fd fc4b 	bl	8014218 <fast_tanh5>
		if (barFreq < 300.0f)
 8016982:	eddf 7a93 	vldr	s15, [pc, #588]	; 8016bd0 <tTString_tick+0x3f4>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8016986:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
 801698a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801698e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016992:	f100 837a 	bmi.w	801708a <tTString_tick+0x8ae>
		Lfloat filterFade = 1.0f;
 8016996:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 801699a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
 801699e:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80169a2:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 80169a6:	ee29 9a07 	vmul.f32	s18, s18, s14
 80169aa:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
 80169ae:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80169b2:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80169b6:	f7fb f9c9 	bl	8011d4c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 80169ba:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80169be:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 80169c2:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80169c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80169ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80169ce:	f7fb f895 	bl	8011afc <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 80169d2:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 80169d6:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 80169d8:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 80169dc:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 80169de:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 80169e2:	f340 834b 	ble.w	801707c <tTString_tick+0x8a0>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80169e6:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80169ea:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 80169ee:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 80169f2:	f104 0518 	add.w	r5, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80169f6:	9304      	str	r3, [sp, #16]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 80169f8:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 80169fc:	ed9f 9a75 	vldr	s18, [pc, #468]	; 8016bd4 <tTString_tick+0x3f8>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8016a00:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016a04:	9305      	str	r3, [sp, #20]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8016a06:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 8016a0a:	9306      	str	r3, [sp, #24]
 8016a0c:	f504 73be 	add.w	r3, r4, #380	; 0x17c
 8016a10:	9307      	str	r3, [sp, #28]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8016a12:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8016a16:	9300      	str	r3, [sp, #0]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016a18:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016a1c:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8016a1e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8016a22:	9301      	str	r3, [sp, #4]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016a24:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 8016a28:	9302      	str	r3, [sp, #8]
 8016a2a:	f104 031c 	add.w	r3, r4, #28
 8016a2e:	9308      	str	r3, [sp, #32]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016a30:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 8016a34:	9309      	str	r3, [sp, #36]	; 0x24
 8016a36:	f104 0320 	add.w	r3, r4, #32
 8016a3a:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016a3c:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016a40:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016a42:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8016a46:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016a48:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8016a4c:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016a4e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8016a52:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8016a54:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8016a58:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016a5a:	9804      	ldr	r0, [sp, #16]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8016a5c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016a60:	f7fa fc4e 	bl	8011300 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016a64:	9805      	ldr	r0, [sp, #20]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016a66:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016a6a:	f7fa fc49 	bl	8011300 <tExpSmooth_tick>
 8016a6e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8016a72:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016a76:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
 8016a78:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
 8016a7c:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
 8016a80:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
 8016a84:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016a88:	ed9f 5a53 	vldr	s10, [pc, #332]	; 8016bd8 <tTString_tick+0x3fc>
 8016a8c:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
 8016a90:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
 8016a94:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
 8016a98:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
 8016a9c:	ee27 7a09 	vmul.f32	s14, s14, s18
 8016aa0:	eeb8 da45 	vcvt.f32.u32	s26, s10
    	x->tensionAmount = tension * 0.01f;
 8016aa4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016aa8:	fe8d da66 	vminnm.f32	s26, s26, s13
 8016aac:	eeb0 0a4d 	vmov.f32	s0, s26
 8016ab0:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8016ab4:	eef1 8a4d 	vneg.f32	s17, s26
 8016ab8:	ee2d 8a08 	vmul.f32	s16, s26, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016abc:	eea5 0ac6 	vfms.f32	s0, s11, s12
 8016ac0:	eead 0a47 	vfms.f32	s0, s26, s14
 8016ac4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016ac8:	f7f9 fb74 	bl	80101b4 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016acc:	eeb0 0a4d 	vmov.f32	s0, s26
 8016ad0:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
 8016ada:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 8016ade:	eea6 0a66 	vfms.f32	s0, s12, s13
 8016ae2:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 8016ae6:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016aea:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016aee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016af2:	f7f9 fb5f 	bl	80101b4 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8016af6:	9806      	ldr	r0, [sp, #24]
 8016af8:	f7fe fb7e 	bl	80151f8 <tNoise_tick>
 8016afc:	eef0 8a40 	vmov.f32	s17, s0
 8016b00:	9807      	ldr	r0, [sp, #28]
 8016b02:	f7fa fbfd 	bl	8011300 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8016b06:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8016b0a:	ee68 8a80 	vmul.f32	s17, s17, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8016b0e:	4630      	mov	r0, r6
 8016b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b14:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8016b18:	ee17 1a90 	vmov	r1, s15
 8016b1c:	eeb0 0a68 	vmov.f32	s0, s17
 8016b20:	f7f9 fc60 	bl	80103e4 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8016b24:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 8016b28:	eeb0 0a68 	vmov.f32	s0, s17
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b32:	ee17 1a90 	vmov	r1, s15
 8016b36:	f7f9 fc55 	bl	80103e4 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8016b3a:	9800      	ldr	r0, [sp, #0]
 8016b3c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8016b40:	f7fa feae 	bl	80118a0 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016b44:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8016b46:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016b4a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8016b4e:	f7fa fea7 	bl	80118a0 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8016b52:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016b56:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8016b58:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8016b5c:	ee2d ca0c 	vmul.f32	s24, s26, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 8016b60:	eebc aacc 	vcvt.u32.f32	s20, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 8016b64:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8016b68:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016b6c:	f7f9 faf0 	bl	8010150 <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016b70:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016b72:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016b76:	f7f9 faeb 	bl	8010150 <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016b7a:	ee1a 1a10 	vmov	r1, s20
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016b7e:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016b82:	4630      	mov	r0, r6
 8016b84:	eeb0 0a4c 	vmov.f32	s0, s24
 8016b88:	f7f9 fbc8 	bl	801031c <tLagrangeDelay_tapOutInterpolated>
 8016b8c:	eef0 7a40 	vmov.f32	s15, s0
 8016b90:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016b94:	eeb0 0a4c 	vmov.f32	s0, s24
 8016b98:	ee1a 1a10 	vmov	r1, s20
 8016b9c:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
 8016b9e:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016ba2:	f7f9 fbbb 	bl	801031c <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8016ba6:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
 8016baa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8016bae:	eee0 da27 	vfma.f32	s27, s0, s15
        if (x->inharmonic)
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f040 8224 	bne.w	8017000 <tTString_tick+0x824>
 8016bb8:	e024      	b.n	8016c04 <tTString_tick+0x428>
 8016bba:	bf00      	nop
 8016bbc:	38d1b717 	.word	0x38d1b717
 8016bc0:	3727c5ac 	.word	0x3727c5ac
 8016bc4:	448ae38e 	.word	0x448ae38e
 8016bc8:	00000000 	.word	0x00000000
 8016bcc:	3f7d70a4 	.word	0x3f7d70a4
 8016bd0:	43960000 	.word	0x43960000
 8016bd4:	3e22f983 	.word	0x3e22f983
 8016bd8:	3c23d70a 	.word	0x3c23d70a
 8016bdc:	3cb17e4b 	.word	0x3cb17e4b
 8016be0:	3dd55555 	.word	0x3dd55555
 8016be4:	3b0a47ed 	.word	0x3b0a47ed
 8016be8:	3bdd2f1b 	.word	0x3bdd2f1b
 8016bec:	39f9096c 	.word	0x39f9096c
 8016bf0:	3d99999a 	.word	0x3d99999a
 8016bf4:	3a59d777 	.word	0x3a59d777
 8016bf8:	408bbced 	.word	0x408bbced
 8016bfc:	3fa66666 	.word	0x3fa66666
 8016c00:	42c80000 	.word	0x42c80000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016c04:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8016c08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8016c0c:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 8016c10:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016c14:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 8016c18:	ee60 0a87 	vmul.f32	s1, s1, s14
 8016c1c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016c20:	ee60 0a8e 	vmul.f32	s1, s1, s28
 8016c24:	f7fd faa0 	bl	8014168 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016c28:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8016c2c:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 8016c30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8016c34:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 8016c38:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016c3c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016c40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016c44:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016c48:	ee60 0aad 	vmul.f32	s1, s1, s27
 8016c4c:	f7fd fa8c 	bl	8014168 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8016c50:	9801      	ldr	r0, [sp, #4]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016c52:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 8016c56:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8016c5a:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
 8016c5e:	f7fd fe81 	bl	8014964 <tCycle_tick>
 8016c62:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8016c66:	eee0 da27 	vfma.f32	s27, s0, s15
 8016c6a:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8016bdc <tTString_tick+0x400>
 8016c6e:	ee2c 1a27 	vmul.f32	s2, s24, s15
 8016c72:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 8016be0 <tTString_tick+0x404>
 8016c76:	ee6c 0a27 	vmul.f32	s1, s24, s15
 8016c7a:	eeb0 0a6d 	vmov.f32	s0, s27
 8016c7e:	f7fd f8b1 	bl	8013de4 <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
 8016c82:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8016c86:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
 8016c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8e:	f140 81c8 	bpl.w	8017022 <tTString_tick+0x846>
        uint32_t backwards = 0;
 8016c92:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
 8016c94:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 8016c98:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 8016c9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca4:	d4f6      	bmi.n	8016c94 <tTString_tick+0x4b8>
        while (pickupPos < 0.0f)
 8016ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cae:	d508      	bpl.n	8016cc2 <tTString_tick+0x4e6>
        	pickupPos = pickupPos + halfCurrentDelay;
 8016cb0:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 8016cb4:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8016cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc0:	d4f6      	bmi.n	8016cb0 <tTString_tick+0x4d4>
        if (backwards)
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f000 8189 	beq.w	8016fda <tTString_tick+0x7fe>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8016cc8:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016ccc:	ee79 dac8 	vsub.f32	s27, s19, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8016cd0:	ee38 da27 	vadd.f32	s26, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016cd4:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016cd8:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016cdc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8016ce0:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016ce8:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016cec:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016cf0:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016cf4:	eefc 7acd 	vcvt.u32.f32	s15, s26
 8016cf8:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016cfc:	ee39 eacd 	vsub.f32	s28, s19, s26
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016d00:	4639      	mov	r1, r7
 8016d02:	4630      	mov	r0, r6
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016d04:	ed1f fa49 	vldr	s30, [pc, #-292]	; 8016be4 <tTString_tick+0x408>
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016d08:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d10:	ed5f fa4b 	vldr	s31, [pc, #-300]	; 8016be8 <tTString_tick+0x40c>
    for (int i = 0; i < x->oversampling; i++)
 8016d14:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8016d18:	f108 0b01 	add.w	fp, r8, #1
 8016d1c:	ed5f ea4d 	vldr	s29, [pc, #-308]	; 8016bec <tTString_tick+0x410>
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016d20:	ee3d da67 	vsub.f32	s26, s26, s15
 8016d24:	ed1f aa4e 	vldr	s20, [pc, #-312]	; 8016bf0 <tTString_tick+0x414>
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016d28:	ee3e ea27 	vadd.f32	s28, s28, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016d2c:	f7f9 faea 	bl	8010304 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016d30:	4651      	mov	r1, sl
 8016d32:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016d34:	eeb0 ba40 	vmov.f32	s22, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016d38:	f7f9 fae4 	bl	8010304 <tLagrangeDelay_tapOut>
 8016d3c:	ee60 5a08 	vmul.f32	s11, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016d40:	4641      	mov	r1, r8
 8016d42:	4630      	mov	r0, r6
 8016d44:	ed5f aa55 	vldr	s21, [pc, #-340]	; 8016bf4 <tTString_tick+0x418>
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016d48:	ed1f ca55 	vldr	s24, [pc, #-340]	; 8016bf8 <tTString_tick+0x41c>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016d4c:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 8016d50:	eef0 ba65 	vmov.f32	s23, s11
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016d54:	f7f9 fad6 	bl	8010304 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016d58:	4659      	mov	r1, fp
 8016d5a:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016d5c:	eeb0 ba40 	vmov.f32	s22, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016d60:	f7f9 fad0 	bl	8010304 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 8016d64:	ee7b 5aab 	vadd.f32	s11, s23, s23
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016d68:	4639      	mov	r1, r7
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016d6a:	ee20 6a0d 	vmul.f32	s12, s0, s26
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016d6e:	4628      	mov	r0, r5
 8016d70:	eeb0 3a4a 	vmov.f32	s6, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016d74:	ee65 4aa5 	vmul.f32	s9, s11, s11
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016d78:	eeab 6a0e 	vfma.f32	s12, s22, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016d7c:	ee25 5aa4 	vmul.f32	s10, s11, s9
 8016d80:	ee65 7a0f 	vmul.f32	s15, s10, s30
 8016d84:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 8016d88:	ee36 6a06 	vadd.f32	s12, s12, s12
 8016d8c:	eee4 7aaf 	vfma.f32	s15, s9, s31
 8016d90:	eea5 3a2a 	vfma.f32	s6, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016d94:	ee66 3a06 	vmul.f32	s7, s12, s12
 8016d98:	ee26 4a2a 	vmul.f32	s8, s12, s21
 8016d9c:	ee66 4a23 	vmul.f32	s9, s12, s7
 8016da0:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 8016da4:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 8016da8:	eee6 7a4a 	vfms.f32	s15, s12, s20
 8016dac:	eee5 7a83 	vfma.f32	s15, s11, s6
 8016db0:	eee3 7aef 	vfms.f32	s15, s7, s31
 8016db4:	eee4 7acf 	vfms.f32	s15, s9, s30
 8016db8:	eee5 7a2e 	vfma.f32	s15, s10, s29
 8016dbc:	eee5 7a04 	vfma.f32	s15, s10, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016dc0:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8016dc4:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016dc8:	f7f9 fa9c 	bl	8010304 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016dcc:	4651      	mov	r1, sl
 8016dce:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016dd0:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016dd4:	f7f9 fa96 	bl	8010304 <tLagrangeDelay_tapOut>
 8016dd8:	ee60 5a08 	vmul.f32	s11, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016ddc:	4641      	mov	r1, r8
 8016dde:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016de0:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 8016de4:	eeb0 8a65 	vmov.f32	s16, s11
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016de8:	f7f9 fa8c 	bl	8010304 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016dec:	4659      	mov	r1, fp
 8016dee:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016df0:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016df4:	f7f9 fa86 	bl	8010304 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 8016df8:	ee78 5a08 	vadd.f32	s11, s16, s16
 8016dfc:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
 8016e00:	ed94 5a59 	vldr	s10, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016e04:	ee20 6a0d 	vmul.f32	s12, s0, s26
 8016e08:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8016e0c:	eef0 3a4a 	vmov.f32	s7, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016e10:	ee65 4aa5 	vmul.f32	s9, s11, s11
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016e14:	9808      	ldr	r0, [sp, #32]
 8016e16:	eee4 7a05 	vfma.f32	s15, s8, s10
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016e1a:	eead 6a8e 	vfma.f32	s12, s27, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016e1e:	ee25 5aa4 	vmul.f32	s10, s11, s9
 8016e22:	eeb0 0a67 	vmov.f32	s0, s15
 8016e26:	ee65 7a0f 	vmul.f32	s15, s10, s30
 8016e2a:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 8016e2e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8016e32:	eee4 7aaf 	vfma.f32	s15, s9, s31
 8016e36:	eee5 3a2a 	vfma.f32	s7, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016e3a:	ee26 4a06 	vmul.f32	s8, s12, s12
 8016e3e:	ee66 6a2a 	vmul.f32	s13, s12, s21
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016e42:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016e46:	ee64 4a06 	vmul.f32	s9, s8, s12
 8016e4a:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 8016e4e:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 8016e52:	eee6 7a4a 	vfms.f32	s15, s12, s20
 8016e56:	eee5 7aa3 	vfma.f32	s15, s11, s7
 8016e5a:	eee4 7a6f 	vfms.f32	s15, s8, s31
 8016e5e:	eee4 7acf 	vfms.f32	s15, s9, s30
 8016e62:	eee5 7a2e 	vfma.f32	s15, s10, s29
 8016e66:	eee5 7a26 	vfma.f32	s15, s10, s13
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016e6a:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8016e6e:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016e72:	f7fa ff6b 	bl	8011d4c <tHighpass_tick>
 8016e76:	9802      	ldr	r0, [sp, #8]
 8016e78:	f7f9 fe96 	bl	8010ba8 <tFeedbackLeveler_tick>
 8016e7c:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
 8016e80:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8016e84:	eeb0 aa40 	vmov.f32	s20, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016e88:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8016e8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016e92:	ee38 0aa7 	vadd.f32	s0, s17, s15
 8016e96:	f7fa ff59 	bl	8011d4c <tHighpass_tick>
 8016e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e9c:	f7f9 fe84 	bl	8010ba8 <tFeedbackLeveler_tick>
 8016ea0:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8016ea4:	4630      	mov	r0, r6
 8016ea6:	eeb0 0a4a 	vmov.f32	s0, s20
 8016eaa:	f7f9 f943 	bl	8010134 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 8016eae:	4628      	mov	r0, r5
 8016eb0:	eeb0 0a48 	vmov.f32	s0, s16
 8016eb4:	f7f9 f93e 	bl	8010134 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016eb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016eba:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8016ebe:	f7fa fe1d 	bl	8011afc <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016ec2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016ec4:	f7fa fe1a 	bl	8011afc <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016ec8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016ecc:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016ed0:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
 8016ed4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016ed8:	a810      	add	r0, sp, #64	; 0x40
 8016eda:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016ede:	f7fd f8cb 	bl	8014078 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016ee2:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
 8016ee6:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016eea:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016eec:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016ef0:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8016ef8:	f7fa fe00 	bl	8011afc <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016efc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016efe:	f7fa fdfd 	bl	8011afc <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8016f02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016f04:	f7fa fdfa 	bl	8011afc <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 8016f08:	6863      	ldr	r3, [r4, #4]
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016f0a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
 8016f0e:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016f10:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
 8016f14:	f73f ada1 	bgt.w	8016a5a <tTString_tick+0x27e>
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8016f18:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016f1c:	ed5f 6ac9 	vldr	s13, [pc, #-804]	; 8016bfc <tTString_tick+0x420>
 8016f20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016f24:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
 8016f28:	b013      	add	sp, #76	; 0x4c
 8016f2a:	ecbd 8b10 	vpop	{d8-d15}
 8016f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
 8016f32:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016f36:	e4af      	b.n	8016898 <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016f38:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016f3c:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016f40:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f44:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016f48:	4638      	mov	r0, r7
 8016f4a:	f7fa f9cf 	bl	80112ec <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016f4e:	eeb0 0a49 	vmov.f32	s0, s18
 8016f52:	4630      	mov	r0, r6
 8016f54:	f7fa fa0e 	bl	8011374 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016f58:	eec9 6a28 	vdiv.f32	s13, s18, s17
 8016f5c:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f60:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
 8016f62:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8016c00 <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f66:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016f6a:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
 8016f72:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f76:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
 8016f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016f82:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f86:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
 8016f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f8e:	bf4c      	ite	mi
 8016f90:	2301      	movmi	r3, #1
 8016f92:	2300      	movpl	r3, #0
 8016f94:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016f98:	f7fa f9ec 	bl	8011374 <tSlide_setDest>
			x->sampleCount = 0;
 8016f9c:	2200      	movs	r2, #0
		if (x->bumpOsc)
 8016f9e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
 8016fa2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
 8016fa6:	b183      	cbz	r3, 8016fca <tTString_tick+0x7ee>
			if (x->bumpCount > x->timeSinceLastBump)
 8016fa8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8016fac:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
 8016fb0:	ee07 3a10 	vmov	s14, r3
 8016fb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc0:	dc78      	bgt.n	80170b4 <tTString_tick+0x8d8>
			x->bumpCount++;
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8016fc8:	4613      	mov	r3, r2
			x->sampleCount++;
 8016fca:	3301      	adds	r3, #1
 8016fcc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8016fd0:	e4a2      	b.n	8016918 <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 8016fd2:	f7fa f987 	bl	80112e4 <tExpSmooth_setDest>
 8016fd6:	9800      	ldr	r0, [sp, #0]
 8016fd8:	e429      	b.n	801682e <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016fda:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016fde:	ee79 dae7 	vsub.f32	s27, s19, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016fe2:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016fe6:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016fea:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016fee:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
 8016ff2:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016ff6:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016ffa:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
 8016ffe:	e679      	b.n	8016cf4 <tTString_tick+0x518>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8017000:	eeb0 0a4e 	vmov.f32	s0, s28
 8017004:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8017008:	f7fa fb48 	bl	801169c <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 801700c:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8017010:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8017014:	eeb0 0a6d 	vmov.f32	s0, s27
 8017018:	f7fa fb40 	bl	801169c <tThiranAllpassSOCascade_tick>
 801701c:	eef0 da40 	vmov.f32	s27, s0
 8017020:	e5f0      	b.n	8016c04 <tTString_tick+0x428>
        while (pickupPos < 0.0f)
 8017022:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801702a:	d5d6      	bpl.n	8016fda <tTString_tick+0x7fe>
        uint32_t backwards = 0;
 801702c:	2300      	movs	r3, #0
 801702e:	e63f      	b.n	8016cb0 <tTString_tick+0x4d4>
		x->slideNoise *= x->muted;
 8017030:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8017034:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
 8017038:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 801703c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017040:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8017044:	f7fa fe82 	bl	8011d4c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8017048:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801704c:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8017050:	f504 7088 	add.w	r0, r4, #272	; 0x110
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8017054:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8017058:	ee67 7a87 	vmul.f32	s15, s15, s14
 801705c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017060:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017064:	f7fa fd4a 	bl	8011afc <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 8017068:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 801706c:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 801706e:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8017072:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8017074:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 8017078:	f73f acb5 	bgt.w	80169e6 <tTString_tick+0x20a>
 801707c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80170d4 <tTString_tick+0x8f8>
}
 8017080:	b013      	add	sp, #76	; 0x4c
 8017082:	ecbd 8b10 	vpop	{d8-d15}
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
 801708a:	eddf 7a13 	vldr	s15, [pc, #76]	; 80170d8 <tTString_tick+0x8fc>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 801708e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
 8017092:	eddf 0a12 	vldr	s1, [pc, #72]	; 80170dc <tTString_tick+0x900>
 8017096:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 801709a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80170d4 <tTString_tick+0x8f8>
 801709e:	ee69 0aa0 	vmul.f32	s1, s19, s1
 80170a2:	f7fd f861 	bl	8014168 <LEAF_clip>
 80170a6:	e478      	b.n	801699a <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 80170a8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80170d4 <tTString_tick+0x8f8>
 80170ac:	4630      	mov	r0, r6
 80170ae:	f7fa f961 	bl	8011374 <tSlide_setDest>
 80170b2:	e44c      	b.n	801694e <tTString_tick+0x172>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 80170b4:	eeb0 0a49 	vmov.f32	s0, s18
 80170b8:	4638      	mov	r0, r7
 80170ba:	f7fa f917 	bl	80112ec <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 80170be:	eeb0 0a49 	vmov.f32	s0, s18
 80170c2:	4630      	mov	r0, r6
 80170c4:	f7fa f956 	bl	8011374 <tSlide_setDest>
			x->bumpCount++;
 80170c8:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
 80170ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
 80170ce:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 80170d2:	e417      	b.n	8016904 <tTString_tick+0x128>
 80170d4:	00000000 	.word	0x00000000
 80170d8:	42c80000 	.word	0x42c80000
 80170dc:	3ba3d70a 	.word	0x3ba3d70a

080170e0 <tTString_setFreq>:
{
 80170e0:	b510      	push	{r4, lr}
 80170e2:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
 80170e6:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80170e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
 80170ec:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80170ee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80170f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80170f6:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 80170fa:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 80170fe:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8017102:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
 8017106:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 801710a:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 801710e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017112:	f7fa f8e7 	bl	80112e4 <tExpSmooth_setDest>
    Lfloat result = 0.0f;
 8017116:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8017118:	eeb0 0a48 	vmov.f32	s0, s16
 801711c:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8017120:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8017122:	f7e9 fabd 	bl	80006a0 <arm_sin_f32>
 8017126:	eef0 7a40 	vmov.f32	s15, s0
 801712a:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 801712e:	eeb0 0a48 	vmov.f32	s0, s16
 8017132:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017136:	f7e9 fa61 	bl	80005fc <arm_cos_f32>
 801713a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801713e:	a801      	add	r0, sp, #4
 8017140:	eef0 7a40 	vmov.f32	s15, s0
 8017144:	eeb0 0a68 	vmov.f32	s0, s17
 8017148:	eee9 0a67 	vfms.f32	s1, s18, s15
 801714c:	f7e9 f8cc 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 8017150:	9b01      	ldr	r3, [sp, #4]
 8017152:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 8017156:	b002      	add	sp, #8
 8017158:	ecbd 8b04 	vpop	{d8-d9}
 801715c:	bd10      	pop	{r4, pc}
 801715e:	bf00      	nop

08017160 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
 8017160:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
 8017164:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
 8017166:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
 801716a:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
 801716c:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 8017170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017174:	dd04      	ble.n	8017180 <tTString_setDecayInSeconds+0x20>
 8017176:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
 801717a:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 801717e:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8017180:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8017184:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017188:	ee20 0a07 	vmul.f32	s0, s0, s14
 801718c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017190:	f7fc feca 	bl	8013f28 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8017194:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8017198:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 801719c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80171ac <tTString_setDecayInSeconds+0x4c>
 80171a0:	f7fc ffe2 	bl	8014168 <LEAF_clip>
		 x->decayCoeff = 1.0f;
 80171a4:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 80171a8:	bd10      	pop	{r4, pc}
 80171aa:	bf00      	nop
 80171ac:	3dcccccd 	.word	0x3dcccccd

080171b0 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 80171b0:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 80171b2:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 80171b6:	4770      	bx	lr

080171b8 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
 80171b8:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
 80171ba:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
 80171be:	4770      	bx	lr

080171c0 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 80171c0:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 80171c2:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 80171c6:	4770      	bx	lr

080171c8 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
 80171c8:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
 80171ca:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
 80171ce:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 80171d2:	f7fd bbed 	b.w	80149b0 <tCycle_setFreq>
 80171d6:	bf00      	nop

080171d8 <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
 80171d8:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 80171da:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 80171dc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017200 <tTString_mute+0x28>
 80171e0:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80171e4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80171e8:	f7fc fe9e 	bl	8013f28 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
 80171ec:	2300      	movs	r3, #0
 80171ee:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 80171f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80171f6:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 80171fa:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
 80171fe:	bd10      	pop	{r4, pc}
 8017200:	c30edb6d 	.word	0xc30edb6d

08017204 <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 8017204:	b510      	push	{r4, lr}
 8017206:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 801720a:	6804      	ldr	r4, [r0, #0]
{
 801720c:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8017210:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8017214:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8017218:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 801721c:	f7fc ffa4 	bl	8014168 <LEAF_clip>
 8017220:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8017224:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
 8017228:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 801722c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017230:	f7e9 fa36 	bl	80006a0 <arm_sin_f32>
 8017234:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 8017238:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801723c:	eeb0 0a48 	vmov.f32	s0, s16
 8017240:	f7fa fb16 	bl	8011870 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 8017244:	eeb0 0a48 	vmov.f32	s0, s16
 8017248:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801724c:	f7fa fb10 	bl	8011870 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 8017250:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 8017254:	ecbd 8b02 	vpop	{d8}
 8017258:	bd10      	pop	{r4, pc}
 801725a:	bf00      	nop

0801725c <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 801725c:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 801725e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8017262:	4770      	bx	lr

08017264 <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 8017264:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 8017266:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
 801726a:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
 801726e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8017272:	4770      	bx	lr

08017274 <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 8017274:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 8017276:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801727a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 801727e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017286:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 801728a:	4770      	bx	lr

0801728c <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 801728c:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 801728e:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 8017292:	4770      	bx	lr

08017294 <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8017294:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 8017296:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
 801729a:	4770      	bx	lr

0801729c <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 801729c:	b510      	push	{r4, lr}
 801729e:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 80172a2:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80172a8:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8017318 <tTString_setRippleDepth+0x7c>
{
 80172ac:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172b0:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
 80172b4:	eddf 7a19 	vldr	s15, [pc, #100]	; 801731c <tTString_setRippleDepth+0x80>
 80172b8:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 80172bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80172c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172c4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80172c8:	f7fc fe2e 	bl	8013f28 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 80172cc:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80172d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80172d8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172dc:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80172e0:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172e4:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80172e8:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80172ec:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80172f0:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80172f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 80172f8:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80172fc:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8017300:	f7fa fd18 	bl	8011d34 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8017304:	eeb0 0a68 	vmov.f32	s0, s17
 8017308:	f104 0020 	add.w	r0, r4, #32
}
 801730c:	ecbd 8b02 	vpop	{d8}
 8017310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8017314:	f7fa bd0e 	b.w	8011d34 <tHighpass_setFreq>
 8017318:	3ba3d70a 	.word	0x3ba3d70a
 801731c:	38d1b717 	.word	0x38d1b717

08017320 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
 8017320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
 8017324:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 8017326:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 801732a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801732e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8017332:	4770      	bx	lr

08017334 <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
 8017334:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8017338:	b510      	push	{r4, lr}
 801733a:	ed2d 8b02 	vpush	{d8}
 801733e:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8017342:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 8017344:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8017348:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 801734a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 801734e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017352:	f7f9 fc1d 	bl	8010b90 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 8017356:	ed9d 0a01 	vldr	s0, [sp, #4]
 801735a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801735e:	f7f9 fc17 	bl	8010b90 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 8017362:	eddf 7a05 	vldr	s15, [pc, #20]	; 8017378 <tTString_setFeedbackStrength+0x44>
 8017366:	ee28 8a27 	vmul.f32	s16, s16, s15
 801736a:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 801736e:	b002      	add	sp, #8
 8017370:	ecbd 8b02 	vpop	{d8}
 8017374:	bd10      	pop	{r4, pc}
 8017376:	bf00      	nop
 8017378:	3ba3d70a 	.word	0x3ba3d70a

0801737c <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 801737c:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 801737e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80173b0 <tTString_setFeedbackReactionSpeed+0x34>
{
 8017382:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8017386:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 80173b4 <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
 801738a:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 801738c:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8017390:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8017394:	eeb0 0a48 	vmov.f32	s0, s16
 8017398:	f7f9 fbfe 	bl	8010b98 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 801739c:	eeb0 0a48 	vmov.f32	s0, s16
 80173a0:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
 80173a4:	ecbd 8b02 	vpop	{d8}
 80173a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 80173ac:	f7f9 bbf4 	b.w	8010b98 <tFeedbackLeveler_setFactor>
 80173b0:	3dcccccd 	.word	0x3dcccccd
 80173b4:	3727c5ac 	.word	0x3727c5ac

080173b8 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 80173b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173bc:	ed2d 8b06 	vpush	{d8-d10}
    _tTString* x = *bw;

    x->muted = 1.0f;
 80173c0:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
 80173c4:	f8d0 8000 	ldr.w	r8, [r0]
{
 80173c8:	b085      	sub	sp, #20
 80173ca:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 80173ce:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 80173d2:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
 80173d6:	ed88 aa51 	vstr	s20, [r8, #324]	; 0x144
{
 80173da:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 80173de:	f7f9 ff85 	bl	80112ec <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 80173e2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80173e6:	f508 70ac 	add.w	r0, r8, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
 80173ea:	ed9f 9aa4 	vldr	s18, [pc, #656]	; 801767c <tTString_pluck+0x2c4>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
 80173ee:	f108 0514 	add.w	r5, r8, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 80173f2:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80173f6:	ed8d 0a00 	vstr	s0, [sp]
 80173fa:	f7f9 fbf9 	bl	8010bf0 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 80173fe:	ed9d 0a00 	vldr	s0, [sp]
 8017402:	f508 70ae 	add.w	r0, r8, #348	; 0x15c
 8017406:	f7f9 fbf3 	bl	8010bf0 <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
 801740a:	4640      	mov	r0, r8
 801740c:	f850 3f50 	ldr.w	r3, [r0, #80]!
 8017410:	ed93 0a04 	vldr	s0, [r3, #16]
 8017414:	f7f9 ff6e 	bl	80112f4 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
 8017418:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 801741c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8017420:	edd8 6a3d 	vldr	s13, [r8, #244]	; 0xf4
    x->baseDelay = x->pitchSmoother->dest;
 8017424:	ed93 7a04 	vldr	s14, [r3, #16]
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8017428:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 801742c:	eddf 0a94 	vldr	s1, [pc, #592]	; 8017680 <tTString_pluck+0x2c8>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8017430:	ee26 1a89 	vmul.f32	s2, s13, s18
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8017434:	ee67 7a27 	vmul.f32	s15, s14, s15
    x->baseDelay = x->pitchSmoother->dest;
 8017438:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 801743c:	ee66 0aa0 	vmul.f32	s1, s13, s1
    x->muteCoeff = 1.0f;
 8017440:	ed88 aa1e 	vstr	s20, [r8, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8017444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8017448:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 801744c:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8017450:	ee78 7a08 	vadd.f32	s15, s16, s16
 8017454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017458:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 801745c:	f7fc fcc2 	bl	8013de4 <LEAF_mapFromZeroToOneInput>
 8017460:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8017464:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8017684 <tTString_pluck+0x2cc>
 8017468:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 801746c:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8017470:	eddd 0a02 	vldr	s1, [sp, #8]
 8017474:	f7fc fe78 	bl	8014168 <LEAF_clip>
 8017478:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 801747c:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 8017480:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017482:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8017486:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 801748a:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 801748e:	eef8 9a47 	vcvt.f32.u32	s19, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8017492:	ee17 4a10 	vmov	r4, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017496:	ee77 7a88 	vadd.f32	s15, s15, s16
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 801749a:	ee39 9a89 	vadd.f32	s18, s19, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 801749e:	ee8a 7a27 	vdiv.f32	s14, s20, s15
 80174a2:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
 80174a6:	f7f8 fe37 	bl	8010118 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 80174aa:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
 80174ae:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 80174b0:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
 80174b4:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80174b8:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 80174ba:	edc8 7a5d 	vstr	s15, [r8, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f000 80c7 	beq.w	8017652 <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80174c4:	f108 0618 	add.w	r6, r8, #24
 80174c8:	2c00      	cmp	r4, #0
 80174ca:	f000 80d5 	beq.w	8017678 <tTString_pluck+0x2c0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80174ce:	eddf aa6e 	vldr	s21, [pc, #440]	; 8017688 <tTString_pluck+0x2d0>
 80174d2:	42a3      	cmp	r3, r4
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80174d4:	f04f 0900 	mov.w	r9, #0
 80174d8:	eba7 0a04 	sub.w	sl, r7, r4
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80174dc:	ee8a aa89 	vdiv.f32	s20, s21, s18
 80174e0:	bf28      	it	cs
 80174e2:	4623      	movcs	r3, r4
 80174e4:	9301      	str	r3, [sp, #4]
 80174e6:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
 80174ea:	454c      	cmp	r4, r9
 80174ec:	eba7 0b09 	sub.w	fp, r7, r9
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80174f0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80174f4:	ee20 0a0a 	vmul.f32	s0, s0, s20
        if (i == pluckPointInt)
 80174f8:	f000 8081 	beq.w	80175fe <tTString_pluck+0x246>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80174fc:	f7fc fe3c 	bl	8014178 <LEAF_tanh>
 8017500:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017504:	4649      	mov	r1, r9
 8017506:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017508:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801750c:	eeb0 0a48 	vmov.f32	s0, s16
 8017510:	f7f8 ff5c 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017514:	4659      	mov	r1, fp
 8017516:	eeb0 0a49 	vmov.f32	s0, s18
 801751a:	4628      	mov	r0, r5
 801751c:	f7f8 ff56 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017520:	4649      	mov	r1, r9
 8017522:	eeb0 0a48 	vmov.f32	s0, s16
 8017526:	4630      	mov	r0, r6
 8017528:	f7f8 ff50 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 801752c:	eeb0 0a49 	vmov.f32	s0, s18
 8017530:	4659      	mov	r1, fp
 8017532:	4630      	mov	r0, r6
 8017534:	f7f8 ff4a 	bl	80103cc <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017538:	f109 0901 	add.w	r9, r9, #1
 801753c:	9b01      	ldr	r3, [sp, #4]
 801753e:	454b      	cmp	r3, r9
 8017540:	d8d1      	bhi.n	80174e6 <tTString_pluck+0x12e>
 8017542:	9b00      	ldr	r3, [sp, #0]
 8017544:	454b      	cmp	r3, r9
 8017546:	f240 8084 	bls.w	8017652 <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 801754a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
        val = LEAF_tanh(val* 1.2f) * amplitude;
 801754e:	ed9f aa4e 	vldr	s20, [pc, #312]	; 8017688 <tTString_pluck+0x2d0>
 8017552:	eba7 0a04 	sub.w	sl, r7, r4
 8017556:	e02a      	b.n	80175ae <tTString_pluck+0x1f6>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8017558:	eeb0 0a6a 	vmov.f32	s0, s21
 801755c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8017560:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8017564:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8017568:	f7fc fe06 	bl	8014178 <LEAF_tanh>
 801756c:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017570:	4649      	mov	r1, r9
 8017572:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017574:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017578:	eeb0 0a48 	vmov.f32	s0, s16
 801757c:	f7f8 ff26 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017580:	4659      	mov	r1, fp
 8017582:	eeb0 0a49 	vmov.f32	s0, s18
 8017586:	4628      	mov	r0, r5
 8017588:	f7f8 ff20 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 801758c:	4649      	mov	r1, r9
 801758e:	eeb0 0a48 	vmov.f32	s0, s16
 8017592:	4630      	mov	r0, r6
 8017594:	f7f8 ff1a 	bl	80103cc <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017598:	f109 0901 	add.w	r9, r9, #1
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 801759c:	4659      	mov	r1, fp
 801759e:	eeb0 0a49 	vmov.f32	s0, s18
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7f8 ff12 	bl	80103cc <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80175a8:	9b00      	ldr	r3, [sp, #0]
 80175aa:	454b      	cmp	r3, r9
 80175ac:	d951      	bls.n	8017652 <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 80175ae:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
 80175b2:	454c      	cmp	r4, r9
 80175b4:	eba7 0b09 	sub.w	fp, r7, r9
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 80175b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80175bc:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
 80175c0:	d1ca      	bne.n	8017558 <tTString_pluck+0x1a0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80175c2:	eeb0 0a4a 	vmov.f32	s0, s20
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80175c6:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80175ca:	f7fc fdd5 	bl	8014178 <LEAF_tanh>
 80175ce:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80175d2:	4621      	mov	r1, r4
 80175d4:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80175d6:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80175da:	eeb0 0a48 	vmov.f32	s0, s16
 80175de:	f7f8 fef5 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80175e2:	4651      	mov	r1, sl
 80175e4:	eeb0 0a49 	vmov.f32	s0, s18
 80175e8:	4628      	mov	r0, r5
 80175ea:	f7f8 feef 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80175ee:	4621      	mov	r1, r4
 80175f0:	eeb0 0a48 	vmov.f32	s0, s16
 80175f4:	4630      	mov	r0, r6
 80175f6:	f7f8 fee9 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 80175fa:	4651      	mov	r1, sl
 80175fc:	e7cf      	b.n	801759e <tTString_pluck+0x1e6>
        val = LEAF_tanh(val* 1.2f) * amplitude;
 80175fe:	eeb0 0a6a 	vmov.f32	s0, s21
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017602:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8017606:	f7fc fdb7 	bl	8014178 <LEAF_tanh>
 801760a:	ee20 8a28 	vmul.f32	s16, s0, s17
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801760e:	4621      	mov	r1, r4
 8017610:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017612:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017616:	eeb0 0a48 	vmov.f32	s0, s16
 801761a:	f7f8 fed7 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801761e:	4651      	mov	r1, sl
 8017620:	eeb0 0a49 	vmov.f32	s0, s18
 8017624:	4628      	mov	r0, r5
 8017626:	f7f8 fed1 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 801762a:	eeb0 0a48 	vmov.f32	s0, s16
 801762e:	4621      	mov	r1, r4
 8017630:	4630      	mov	r0, r6
 8017632:	f7f8 fecb 	bl	80103cc <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8017636:	eeb0 0a49 	vmov.f32	s0, s18
 801763a:	4651      	mov	r1, sl
 801763c:	4630      	mov	r0, r6
 801763e:	f7f8 fec5 	bl	80103cc <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017642:	9b01      	ldr	r3, [sp, #4]
 8017644:	4599      	cmp	r9, r3
 8017646:	f4ff af4e 	bcc.w	80174e6 <tTString_pluck+0x12e>
 801764a:	9b00      	ldr	r3, [sp, #0]
 801764c:	454b      	cmp	r3, r9
 801764e:	f63f af7c 	bhi.w	801754a <tTString_pluck+0x192>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8017652:	f108 0054 	add.w	r0, r8, #84	; 0x54
 8017656:	f7fa f84f 	bl	80116f8 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 801765a:	f108 0058 	add.w	r0, r8, #88	; 0x58
 801765e:	f7fa f84b 	bl	80116f8 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8017662:	eeb0 0a68 	vmov.f32	s0, s17
 8017666:	f508 70be 	add.w	r0, r8, #380	; 0x17c
}
 801766a:	b005      	add	sp, #20
 801766c:	ecbd 8b06 	vpop	{d8-d10}
 8017670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8017674:	f7f9 be3a 	b.w	80112ec <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017678:	46a1      	mov	r9, r4
 801767a:	e766      	b.n	801754a <tTString_pluck+0x192>
 801767c:	3a83126f 	.word	0x3a83126f
 8017680:	3e511111 	.word	0x3e511111
 8017684:	00000000 	.word	0x00000000
 8017688:	3f99999a 	.word	0x3f99999a

0801768c <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 801768c:	b510      	push	{r4, lr}
 801768e:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 8017692:	6804      	ldr	r4, [r0, #0]
{
 8017694:	eeb0 8a60 	vmov.f32	s16, s1
 8017698:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 801769c:	edd4 7a01 	vldr	s15, [r4, #4]
 80176a0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80176a4:	edd4 0a02 	vldr	s1, [r4, #8]
 80176a8:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 80176ac:	ee68 0a20 	vmul.f32	s1, s16, s1
 80176b0:	f7f9 ff10 	bl	80114d4 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 80176b4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80176b8:	edd4 0a02 	vldr	s1, [r4, #8]
 80176bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80176c0:	ed94 7a01 	vldr	s14, [r4, #4]
 80176c4:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 80176c8:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 80176cc:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 80176d0:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80176d4:	f7f9 fefe 	bl	80114d4 <tThiranAllpassSOCascade_setCoeff>
 80176d8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 80176dc:	ecbd 8b02 	vpop	{d8}
 80176e0:	bd10      	pop	{r4, pc}
 80176e2:	bf00      	nop

080176e4 <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
 80176e4:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 80176e8:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
 80176ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
 80176ee:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 80176f2:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 80176f6:	4770      	bx	lr

080176f8 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
 80176f8:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 80176fa:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
 80176fc:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
 8017700:	b169      	cbz	r1, 801771e <tTString_setWoundOrUnwound+0x26>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
 8017702:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8017706:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801773c <tTString_setWoundOrUnwound+0x44>
 801770a:	f7f9 fdd9 	bl	80112c0 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 801770e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8017712:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8017740 <tTString_setWoundOrUnwound+0x48>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
 8017716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 801771a:	f7f9 bdd1 	b.w	80112c0 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
 801771e:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8017722:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017744 <tTString_setWoundOrUnwound+0x4c>
 8017726:	f7f9 fdcb 	bl	80112c0 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 801772a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 801772e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8017748 <tTString_setWoundOrUnwound+0x50>
}
 8017732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8017736:	f7f9 bdc3 	b.w	80112c0 <tExpSmooth_setFactor>
 801773a:	bf00      	nop
 801773c:	3a03126f 	.word	0x3a03126f
 8017740:	3a51b717 	.word	0x3a51b717
 8017744:	3ba3d70a 	.word	0x3ba3d70a
 8017748:	3b83126f 	.word	0x3b83126f

0801774c <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
    _tTString* x = *bw;
    x->windingsPerInch = windings;
 801774c:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8017750:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
 8017752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017756:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
 801775a:	4770      	bx	lr

0801775c <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->pickupFilter,cutoff);
 801775c:	6800      	ldr	r0, [r0, #0]
 801775e:	30b8      	adds	r0, #184	; 0xb8
 8017760:	f7fa ba02 	b.w	8011b68 <tSVF_setFreq>

08017764 <tTString_setPickupFilterQ>:

}
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
 8017764:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017768:	6800      	ldr	r0, [r0, #0]
 801776a:	30b8      	adds	r0, #184	; 0xb8
 801776c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017770:	f7fa ba74 	b.w	8011c5c <tSVF_setQ>

08017774 <tTString_setPeakFilterFreq>:
}

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->peakFilt,cutoff);
 8017774:	6800      	ldr	r0, [r0, #0]
 8017776:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 801777a:	f7fa b9f5 	b.w	8011b68 <tSVF_setFreq>
 801777e:	bf00      	nop

08017780 <tTString_setPeakFilterQ>:

}
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->peakFilt,Q+0.5f);
 8017780:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017784:	6800      	ldr	r0, [r0, #0]
 8017786:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 801778a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801778e:	f7fa ba65 	b.w	8011c5c <tSVF_setQ>
 8017792:	bf00      	nop

08017794 <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
 8017794:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
 8017796:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
 8017798:	686b      	ldr	r3, [r5, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	dd09      	ble.n	80177b2 <tStiffString_free+0x1e>
 801779e:	2400      	movs	r4, #0
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
 80177a0:	68a8      	ldr	r0, [r5, #8]
 80177a2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 80177a6:	3401      	adds	r4, #1
    	tCycle_free(&p->osc[i]);
 80177a8:	f7fd f8d8 	bl	801495c <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
 80177ac:	686b      	ldr	r3, [r5, #4]
 80177ae:	42a3      	cmp	r3, r4
 80177b0:	dcf6      	bgt.n	80177a0 <tStiffString_free+0xc>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
 80177b2:	6829      	ldr	r1, [r5, #0]
 80177b4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80177b6:	f7fd f815 	bl	80147e4 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
 80177ba:	6829      	ldr	r1, [r5, #0]
 80177bc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80177be:	f7fd f811 	bl	80147e4 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
 80177c2:	6829      	ldr	r1, [r5, #0]
 80177c4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80177c6:	f7fd f80d 	bl	80147e4 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
 80177ca:	6829      	ldr	r1, [r5, #0]
 80177cc:	68e8      	ldr	r0, [r5, #12]
 80177ce:	f7fd f809 	bl	80147e4 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
 80177d2:	6829      	ldr	r1, [r5, #0]
 80177d4:	6928      	ldr	r0, [r5, #16]
 80177d6:	f7fd f805 	bl	80147e4 <mpool_free>
    mpool_free((char *) p, p->mempool);
 80177da:	6829      	ldr	r1, [r5, #0]
 80177dc:	4628      	mov	r0, r5
}
 80177de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char *) p, p->mempool);
 80177e2:	f7fc bfff 	b.w	80147e4 <mpool_free>
 80177e6:	bf00      	nop

080177e8 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
 80177e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ea:	ed2d 8b08 	vpush	{d8-d11}
	_tStiffString *p = *pm;
 80177ee:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 80177f0:	6863      	ldr	r3, [r4, #4]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 80177f2:	edd4 9a06 	vldr	s19, [r4, #24]
    for (int i = 0; i < p->numModes; ++i) {
 80177f6:	2b00      	cmp	r3, #0
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 80177f8:	ee69 9aa9 	vmul.f32	s19, s19, s19
    for (int i = 0; i < p->numModes; ++i) {
 80177fc:	dd60      	ble.n	80178c0 <tStiffString_updateOscillators+0xd8>
 80177fe:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
	Lfloat compensation = 0.0f;
 8017802:	ed9f 9a31 	vldr	s18, [pc, #196]	; 80178c8 <tStiffString_updateOscillators+0xe0>
      int n = i + 1;
      int n_sq = n * n;
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
      //Lfloat w0 = n * sqrtf(1.0f + kappa_sq * n_sq);
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017806:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    for (int i = 0; i < p->numModes; ++i) {
 801780a:	2500      	movs	r5, #0
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 801780c:	eef0 aa49 	vmov.f32	s21, s18
 8017810:	ee69 9a8a 	vmul.f32	s19, s19, s20
    	  compensation = 1.0f / w;
 8017814:	462e      	mov	r6, r5
 8017816:	3501      	adds	r5, #1
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017818:	eef0 6a4b 	vmov.f32	s13, s22
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 801781c:	ed94 6a0a 	vldr	s12, [r4, #40]	; 0x28
      int n_sq = n * n;
 8017820:	fb05 f305 	mul.w	r3, r5, r5
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8017824:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017828:	ee07 5a90 	vmov	s15, r5
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 801782c:	eeb0 8a4b 	vmov.f32	s16, s22
      int n_sq = n * n;
 8017830:	ee07 3a10 	vmov	s14, r3
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8017834:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801783c:	00b7      	lsls	r7, r6, #2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 801783e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8017842:	eeb0 0a6a 	vmov.f32	s0, s21
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8017846:	eee7 6a29 	vfma.f32	s13, s14, s19
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 801784a:	eee6 8a07 	vfma.f32	s17, s12, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 801784e:	ee67 7aa6 	vmul.f32	s15, s15, s13
      Lfloat zeta = sig / w0;
 8017852:	ee88 7aa7 	vdiv.f32	s14, s17, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8017856:	ee27 7a47 	vnmul.f32	s14, s14, s14
 801785a:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801785e:	ee28 8a27 	vmul.f32	s16, s16, s15
      if (i == 0)
 8017862:	b90e      	cbnz	r6, 8017868 <tStiffString_updateOscillators+0x80>
    	  compensation = 1.0f / w;
 8017864:	ee8b 9a08 	vdiv.f32	s18, s22, s16
      Lfloat	testFreq = (p->freqHz * w);
 8017868:	ed94 7a05 	vldr	s14, [r4, #20]
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 801786c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8017870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8017872:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
      Lfloat	testFreq = (p->freqHz * w);
 8017876:	ee28 8a07 	vmul.f32	s16, s16, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 801787a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 801787e:	ee78 7a67 	vsub.f32	s15, s16, s15
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8017882:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017886:	f7fc fc6f 	bl	8014168 <LEAF_clip>
 801788a:	ed86 0a00 	vstr	s0, [r6]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
 801788e:	68a0      	ldr	r0, [r4, #8]
 8017890:	ee29 0a08 	vmul.f32	s0, s18, s16
 8017894:	4438      	add	r0, r7
 8017896:	f7fd f88b 	bl	80149b0 <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
 801789a:	ed94 0a05 	vldr	s0, [r4, #20]
 801789e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80178a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80178a6:	ee28 0ac0 	vnmul.f32	s0, s17, s0
 80178aa:	f7fc fb63 	bl	8013f74 <fastExp4>
	  p->decayScalar[i] = r * r;
 80178ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80178b4:	443b      	add	r3, r7
 80178b6:	ed83 0a00 	vstr	s0, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 80178ba:	6863      	ldr	r3, [r4, #4]
 80178bc:	42ab      	cmp	r3, r5
 80178be:	dca9      	bgt.n	8017814 <tStiffString_updateOscillators+0x2c>
    }
}
 80178c0:	ecbd 8b08 	vpop	{d8-d11}
 80178c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	00000000 	.word	0x00000000

080178cc <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
 80178cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ce:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
 80178d2:	6807      	ldr	r7, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
 80178d4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8017958 <tStiffString_updateOutputWeights+0x8c>
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
 80178d8:	687b      	ldr	r3, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
 80178da:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
 80178de:	2b00      	cmp	r3, #0
		Lfloat x0 = p->pickupPos * PI;
 80178e0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
 80178e4:	dd34      	ble.n	8017950 <tStiffString_updateOutputWeights+0x84>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 80178e6:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
 80178e8:	2500      	movs	r5, #0
		Lfloat totalGain = 0.0f;
 80178ea:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 801795c <tStiffString_updateOutputWeights+0x90>
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 80178ee:	3501      	adds	r5, #1
 80178f0:	ee07 5a90 	vmov	s15, r5
 80178f4:	00ac      	lsls	r4, r5, #2
 80178f6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80178fa:	3c04      	subs	r4, #4
 80178fc:	4426      	add	r6, r4
 80178fe:	ee20 0a28 	vmul.f32	s0, s0, s17
 8017902:	f7e8 fecd 	bl	80006a0 <arm_sin_f32>
 8017906:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
 801790a:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 801790c:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
 8017910:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8017912:	eb06 0004 	add.w	r0, r6, r4
 8017916:	4422      	add	r2, r4
 8017918:	edd0 7a00 	vldr	s15, [r0]
 801791c:	ed92 7a00 	vldr	s14, [r2]
 8017920:	eef0 7ae7 	vabs.f32	s15, s15
 8017924:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
 8017928:	dbe1      	blt.n	80178ee <tStiffString_updateOutputWeights+0x22>
 801792a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017960 <tStiffString_updateOutputWeights+0x94>
 801792e:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
	  }
	  if (totalGain < 0.01f)
	  {
		  totalGain = 0.01f;
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
 8017932:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8017936:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8017960 <tStiffString_updateOutputWeights+0x94>
 801793a:	f7fc fc15 	bl	8014168 <LEAF_clip>
	  p->gainComp = 1.0f / totalGain;
 801793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017942:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017946:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
 801794a:	ecbd 8b02 	vpop	{d8}
 801794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  for (int i = 0; i < p->numModes; ++i)
 8017950:	eddf 0a03 	vldr	s1, [pc, #12]	; 8017960 <tStiffString_updateOutputWeights+0x94>
 8017954:	e7ed      	b.n	8017932 <tStiffString_updateOutputWeights+0x66>
 8017956:	bf00      	nop
 8017958:	40490fdb 	.word	0x40490fdb
 801795c:	00000000 	.word	0x00000000
 8017960:	3c23d70a 	.word	0x3c23d70a

08017964 <tStiffString_initToPool>:
{
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 8017968:	6813      	ldr	r3, [r2, #0]
{
 801796a:	b082      	sub	sp, #8
 801796c:	460e      	mov	r6, r1
 801796e:	4680      	mov	r8, r0
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8017970:	4619      	mov	r1, r3
 8017972:	2054      	movs	r0, #84	; 0x54
    _tMempool* m = *mp;
 8017974:	9301      	str	r3, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8017976:	f7fc fe73 	bl	8014660 <mpool_alloc>
    p->freqHz = 440.0f;
 801797a:	4b2f      	ldr	r3, [pc, #188]	; (8017a38 <tStiffString_initToPool+0xd4>)
    p->nyquist = p->sampleRate * 0.5f;
 801797c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8017980:	f8c8 0000 	str.w	r0, [r8]
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8017984:	00b7      	lsls	r7, r6, #2
    p->freqHz = 440.0f;
 8017986:	6143      	str	r3, [r0, #20]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8017988:	4605      	mov	r5, r0
    p->pluckPos = 0.2f;
 801798a:	4b2c      	ldr	r3, [pc, #176]	; (8017a3c <tStiffString_initToPool+0xd8>)
    p->mempool = m;
 801798c:	9a01      	ldr	r2, [sp, #4]
    p->pluckPos = 0.2f;
 801798e:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
 8017990:	4b2b      	ldr	r3, [pc, #172]	; (8017a40 <tStiffString_initToPool+0xdc>)
    p->mempool = m;
 8017992:	6002      	str	r2, [r0, #0]
    p->pickupPos = 0.3f;
 8017994:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
 8017996:	4b2b      	ldr	r3, [pc, #172]	; (8017a44 <tStiffString_initToPool+0xe0>)
    p->sampleRate = m->leaf->sampleRate;
 8017998:	9901      	ldr	r1, [sp, #4]
    p->decay = 0.0001f;
 801799a:	6243      	str	r3, [r0, #36]	; 0x24
    p->decayHighFreq = 0.0003f;
 801799c:	4b2a      	ldr	r3, [pc, #168]	; (8017a48 <tStiffString_initToPool+0xe4>)
    p->stiffness = 0.001f;
 801799e:	4a2b      	ldr	r2, [pc, #172]	; (8017a4c <tStiffString_initToPool+0xe8>)
    p->decayHighFreq = 0.0003f;
 80179a0:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
 80179a2:	4b2b      	ldr	r3, [pc, #172]	; (8017a50 <tStiffString_initToPool+0xec>)
    p->stiffness = 0.001f;
 80179a4:	6182      	str	r2, [r0, #24]
    p->numModes = numModes;
 80179a6:	6046      	str	r6, [r0, #4]
    p->muteDecay = 0.4f;
 80179a8:	6483      	str	r3, [r0, #72]	; 0x48
    p->sampleRate = m->leaf->sampleRate;
 80179aa:	684b      	ldr	r3, [r1, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 80179ac:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8017a54 <tStiffString_initToPool+0xf0>
    p->sampleRate = m->leaf->sampleRate;
 80179b0:	edd3 7a00 	vldr	s15, [r3]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 80179b4:	ee86 7a27 	vdiv.f32	s14, s12, s15
    p->sampleRate = m->leaf->sampleRate;
 80179b8:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 80179bc:	684b      	ldr	r3, [r1, #4]
 80179be:	68db      	ldr	r3, [r3, #12]
    p->nyquist = p->sampleRate * 0.5f;
 80179c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 80179c4:	6303      	str	r3, [r0, #48]	; 0x30
    p->amp = 0.0f;
 80179c6:	2300      	movs	r3, #0
    p->nyquist = p->sampleRate * 0.5f;
 80179c8:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    p->amp = 0.0f;
 80179cc:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
 80179ce:	6503      	str	r3, [r0, #80]	; 0x50
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 80179d0:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 80179d4:	4638      	mov	r0, r7
 80179d6:	f7fc fe43 	bl	8014660 <mpool_alloc>
    for (int i = 0; i < numModes; ++i) {
 80179da:	2e00      	cmp	r6, #0
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 80179dc:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
 80179de:	dd0a      	ble.n	80179f6 <tStiffString_initToPool+0x92>
 80179e0:	2400      	movs	r4, #0
 80179e2:	e000      	b.n	80179e6 <tStiffString_initToPool+0x82>
    	tCycle_initToPool(&p->osc[i], &m);
 80179e4:	68a8      	ldr	r0, [r5, #8]
 80179e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < numModes; ++i) {
 80179ea:	3401      	adds	r4, #1
    	tCycle_initToPool(&p->osc[i], &m);
 80179ec:	a901      	add	r1, sp, #4
 80179ee:	f7fc ff99 	bl	8014924 <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
 80179f2:	42a6      	cmp	r6, r4
 80179f4:	d1f6      	bne.n	80179e4 <tStiffString_initToPool+0x80>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 80179f6:	9901      	ldr	r1, [sp, #4]
 80179f8:	4638      	mov	r0, r7
 80179fa:	f7fc fe31 	bl	8014660 <mpool_alloc>
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 80179fe:	9901      	ldr	r1, [sp, #4]
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a00:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a02:	4638      	mov	r0, r7
 8017a04:	f7fc fe2c 	bl	8014660 <mpool_alloc>
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a08:	9901      	ldr	r1, [sp, #4]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a0a:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a0c:	4638      	mov	r0, r7
 8017a0e:	f7fc fe27 	bl	8014660 <mpool_alloc>
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a12:	9901      	ldr	r1, [sp, #4]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a14:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a16:	4638      	mov	r0, r7
 8017a18:	f7fc fe22 	bl	8014660 <mpool_alloc>
 8017a1c:	4603      	mov	r3, r0
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a1e:	9901      	ldr	r1, [sp, #4]
 8017a20:	4638      	mov	r0, r7
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a22:	63ab      	str	r3, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a24:	f7fc fe1c 	bl	8014660 <mpool_alloc>
 8017a28:	4603      	mov	r3, r0
    tStiffString_updateOutputWeights(pm);
 8017a2a:	4640      	mov	r0, r8
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8017a2c:	63eb      	str	r3, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
 8017a2e:	f7ff ff4d 	bl	80178cc <tStiffString_updateOutputWeights>
}
 8017a32:	b002      	add	sp, #8
 8017a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a38:	43dc0000 	.word	0x43dc0000
 8017a3c:	3e4ccccd 	.word	0x3e4ccccd
 8017a40:	3e99999a 	.word	0x3e99999a
 8017a44:	38d1b717 	.word	0x38d1b717
 8017a48:	399d4952 	.word	0x399d4952
 8017a4c:	3a83126f 	.word	0x3a83126f
 8017a50:	3ecccccd 	.word	0x3ecccccd
 8017a54:	c1200001 	.word	0xc1200001

08017a58 <tStiffString_init>:
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
 8017a58:	3218      	adds	r2, #24
 8017a5a:	f7ff bf83 	b.w	8017964 <tStiffString_initToPool>
 8017a5e:	bf00      	nop

08017a60 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
 8017a60:	b570      	push	{r4, r5, r6, lr}
 8017a62:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
 8017a66:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8017a68:	6863      	ldr	r3, [r4, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	dd3b      	ble.n	8017ae6 <tStiffString_tick+0x86>
 8017a6e:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
 8017a70:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8017aec <tStiffString_tick+0x8c>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017a74:	68a0      	ldr	r0, [r4, #8]
 8017a76:	00b5      	lsls	r5, r6, #2
 8017a78:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 8017a7c:	3601      	adds	r6, #1
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017a7e:	f7fc ff71 	bl	8014964 <tCycle_tick>
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017a82:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017a86:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8017a8a:	442b      	add	r3, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017a8c:	442a      	add	r2, r5
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017a8e:	4428      	add	r0, r5
 8017a90:	4429      	add	r1, r5
 8017a92:	edd3 6a00 	vldr	s13, [r3]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017a96:	ed92 7a00 	vldr	s14, [r2]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017a9a:	ed91 6a00 	vldr	s12, [r1]
 8017a9e:	edd0 7a00 	vldr	s15, [r0]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017aa2:	ee26 7a87 	vmul.f32	s14, s13, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017aa6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017aa8:	ee67 7a86 	vmul.f32	s15, s15, s12
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017aac:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017ab0:	442a      	add	r2, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017ab2:	ee27 7a06 	vmul.f32	s14, s14, s12
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017ab6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017aba:	edd2 7a00 	vldr	s15, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8017abe:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8017ac2:	6863      	ldr	r3, [r4, #4]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017ac4:	ee20 0a26 	vmul.f32	s0, s0, s13
    for (int i = 0; i < p->numModes; ++i) {
 8017ac8:	42b3      	cmp	r3, r6
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8017aca:	eea0 8a27 	vfma.f32	s16, s0, s15
    for (int i = 0; i < p->numModes; ++i) {
 8017ace:	dcd1      	bgt.n	8017a74 <tStiffString_tick+0x14>
    }
    return sample * p->amp * p->gainComp;
 8017ad0:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 8017ad4:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8017ad8:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8017adc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017ae0:	ecbd 8b02 	vpop	{d8}
 8017ae4:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat sample = 0.0f;
 8017ae6:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8017aec <tStiffString_tick+0x8c>
 8017aea:	e7f1      	b.n	8017ad0 <tStiffString_tick+0x70>
 8017aec:	00000000 	.word	0x00000000

08017af0 <tStiffString_setFreq>:
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8017af0:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8017af2:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
 8017af6:	f7ff be77 	b.w	80177e8 <tStiffString_updateOscillators>
 8017afa:	bf00      	nop

08017afc <tStiffString_mute>:
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
    p->muteDecay = 0.99f;
 8017afc:	4a01      	ldr	r2, [pc, #4]	; (8017b04 <tStiffString_mute+0x8>)
    _tStiffString *p = *pm;
 8017afe:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
 8017b00:	649a      	str	r2, [r3, #72]	; 0x48
}
 8017b02:	4770      	bx	lr
 8017b04:	3f7d70a4 	.word	0x3f7d70a4

08017b08 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
 8017b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0c:	ed2d 8b04 	vpush	{d8-d9}
    _tStiffString* p = *mp;
 8017b10:	6807      	ldr	r7, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
    p->muteDecay = 1.0f;
 8017b12:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
    Lfloat x0 = p->pluckPos * PI;
 8017b16:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8017b9c <tStiffString_pluck+0x94>
{
 8017b1a:	eef0 9a40 	vmov.f32	s19, s0
    for (int i = 0; i < p->numModes; ++i) {
 8017b1e:	687b      	ldr	r3, [r7, #4]
{
 8017b20:	4606      	mov	r6, r0
    Lfloat x0 = p->pluckPos * PI;
 8017b22:	edd7 8a07 	vldr	s17, [r7, #28]
    for (int i = 0; i < p->numModes; ++i) {
 8017b26:	2b00      	cmp	r3, #0
    p->muteDecay = 1.0f;
 8017b28:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
    Lfloat x0 = p->pluckPos * PI;
 8017b2c:	ee68 8a88 	vmul.f32	s17, s17, s16
    for (int i = 0; i < p->numModes; ++i) {
 8017b30:	dd2a      	ble.n	8017b88 <tStiffString_pluck+0x80>
        int n = i + 1;
        float denom = n * n * x0 * (PI - x0);
 8017b32:	ee38 8a68 	vsub.f32	s16, s16, s17
 8017b36:	2500      	movs	r5, #0
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b38:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8017ba0 <tStiffString_pluck+0x98>
    for (int i = 0; i < p->numModes; ++i) {
 8017b3c:	462c      	mov	r4, r5
 8017b3e:	ee28 8a28 	vmul.f32	s16, s16, s17
        int n = i + 1;
 8017b42:	3401      	adds	r4, #1
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b44:	ee07 4a90 	vmov	s15, r4
 8017b48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017b4c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8017b50:	f7e8 fda6 	bl	80006a0 <arm_sin_f32>
        float denom = n * n * x0 * (PI - x0);
 8017b54:	fb04 f304 	mul.w	r3, r4, r4
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b58:	ee30 0a00 	vadd.f32	s0, s0, s0
        float denom = n * n * x0 * (PI - x0);
 8017b5c:	ee07 3a90 	vmov	s15, r3
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b60:	68fb      	ldr	r3, [r7, #12]
        float denom = n * n * x0 * (PI - x0);
 8017b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b66:	442b      	add	r3, r5
        float denom = n * n * x0 * (PI - x0);
 8017b68:	ee67 7a88 	vmul.f32	s15, s15, s16
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8017b6c:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
 8017b70:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8017b74:	ed83 7a00 	vstr	s14, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
 8017b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7a:	442b      	add	r3, r5
 8017b7c:	3504      	adds	r5, #4
 8017b7e:	f8c3 8000 	str.w	r8, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	42a3      	cmp	r3, r4
 8017b86:	dcdc      	bgt.n	8017b42 <tStiffString_pluck+0x3a>
    }
    p->amp = amp;
 8017b88:	edc7 9a13 	vstr	s19, [r7, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
 8017b8c:	4630      	mov	r0, r6
}
 8017b8e:	ecbd 8b04 	vpop	{d8-d9}
 8017b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tStiffString_updateOutputWeights(mp);
 8017b96:	f7ff be99 	b.w	80178cc <tStiffString_updateOutputWeights>
 8017b9a:	bf00      	nop
 8017b9c:	40490fdb 	.word	0x40490fdb
 8017ba0:	3a83126f 	.word	0x3a83126f

08017ba4 <tStiffString_setStiffnessNoUpdate>:
 8017ba4:	b510      	push	{r4, lr}
 8017ba6:	6804      	ldr	r4, [r0, #0]
 8017ba8:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017bbc <tStiffString_setStiffnessNoUpdate+0x18>
 8017bac:	eddf 0a04 	vldr	s1, [pc, #16]	; 8017bc0 <tStiffString_setStiffnessNoUpdate+0x1c>
 8017bb0:	f7fc f918 	bl	8013de4 <LEAF_mapFromZeroToOneInput>
 8017bb4:	ed84 0a06 	vstr	s0, [r4, #24]
 8017bb8:	bd10      	pop	{r4, pc}
 8017bba:	bf00      	nop
 8017bbc:	3e4ccccd 	.word	0x3e4ccccd
 8017bc0:	00000000 	.word	0x00000000

08017bc4 <tStiffString_setPickupPosNoUpdate>:

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
}

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8017bc4:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 8017bc6:	6804      	ldr	r4, [r0, #0]
{
 8017bc8:	eef0 0a40 	vmov.f32	s1, s0

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
 8017bcc:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017be0 <tStiffString_setPickupPosNoUpdate+0x1c>
 8017bd0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8017be4 <tStiffString_setPickupPosNoUpdate+0x20>
 8017bd4:	f7fc fac8 	bl	8014168 <LEAF_clip>
 8017bd8:	ed84 0a08 	vstr	s0, [r4, #32]
}
 8017bdc:	bd10      	pop	{r4, pc}
 8017bde:	bf00      	nop
 8017be0:	3f7d70a4 	.word	0x3f7d70a4
 8017be4:	3c23d70a 	.word	0x3c23d70a

08017be8 <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8017be8:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 8017bea:	6804      	ldr	r4, [r0, #0]
{
 8017bec:	eef0 0a40 	vmov.f32	s1, s0

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
 8017bf0:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017c04 <tStiffString_setPluckPosNoUpdate+0x1c>
 8017bf4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8017c08 <tStiffString_setPluckPosNoUpdate+0x20>
 8017bf8:	f7fc fab6 	bl	8014168 <LEAF_clip>
 8017bfc:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8017c00:	bd10      	pop	{r4, pc}
 8017c02:	bf00      	nop
 8017c04:	3f7d70a4 	.word	0x3f7d70a4
 8017c08:	3c23d70a 	.word	0x3c23d70a

08017c0c <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8017c0c:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8017c0e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8017c12:	4770      	bx	lr

08017c14 <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
 8017c14:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
 8017c16:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
 8017c1a:	4770      	bx	lr

08017c1c <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
 8017c1c:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
 8017c1e:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8017c22:	4770      	bx	lr
 8017c24:	0000      	movs	r0, r0
	...

08017c28 <glottis_setup_waveform>:
    union { float f; uint32_t x; } u = { f };
    return (u.x << 1) > 0xff000000u;
}

void glottis_setup_waveform(glottis* const glo)
{
 8017c28:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
 8017c2a:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017c2c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8017c30:	eddf 3a53 	vldr	s7, [pc, #332]	; 8017d80 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
 8017c34:	eddf 6a53 	vldr	s13, [pc, #332]	; 8017d84 <glottis_setup_waveform+0x15c>
 8017c38:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8017d88 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
 8017c3c:	ed9f 4a53 	vldr	s8, [pc, #332]	; 8017d8c <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017c40:	eddf 4a53 	vldr	s9, [pc, #332]	; 8017d90 <glottis_setup_waveform+0x168>
 8017c44:	eddf 5a53 	vldr	s11, [pc, #332]	; 8017d94 <glottis_setup_waveform+0x16c>
{
 8017c48:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017c4c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8017c50:	edd4 7a02 	vldr	s15, [r4, #8]
 8017c54:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
 8017c58:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
 8017c5c:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8017d98 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017c60:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
 8017c64:	eddf aa4d 	vldr	s21, [pc, #308]	; 8017d9c <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017c68:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
 8017c6c:	ee89 5a07 	vdiv.f32	s10, s18, s14
 8017c70:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
 8017c74:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017c78:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
 8017c7c:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
 8017c80:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017c84:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
 8017c88:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017c8c:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
 8017c90:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
 8017c94:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017c98:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
 8017c9c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017ca0:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8017ca4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017ca8:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
 8017cac:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8017cb0:	ee38 0a49 	vsub.f32	s0, s16, s18
 8017cb4:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8017cb8:	f7fc f91c 	bl	8013ef4 <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
 8017cbc:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017cc0:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8017cc4:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8017cc8:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017ccc:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
 8017cd0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8017d70 <glottis_setup_waveform+0x148>
 8017cd4:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017cd8:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
 8017cdc:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017ce0:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
 8017ce4:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8017ce8:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
 8017cec:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
 8017cf0:	ee28 0a2a 	vmul.f32	s0, s16, s21
 8017cf4:	f7fc f968 	bl	8013fc8 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017cf8:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
 8017cfc:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017d00:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
 8017d04:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017d08:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8017d0c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8017d10:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8017d78 <glottis_setup_waveform+0x150>
 8017d14:	ee25 5b04 	vmul.f64	d5, d5, d4
 8017d18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017d1c:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = my_faster_logf(y);
 8017d20:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017d24:	f7fc f882 	bl	8013e2c <my_faster_logf>
    alpha = z / (Tp/2.0f - Te);
 8017d28:	eef0 7a48 	vmov.f32	s15, s16
 8017d2c:	eeda 7a0b 	vfnms.f32	s15, s20, s22
 8017d30:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 8017d34:	ee28 0a0a 	vmul.f32	s0, s16, s20
 8017d38:	f7fc f91c 	bl	8013f74 <fastExp4>
 8017d3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017d40:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
 8017d44:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
 8017d48:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
 8017d4c:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 8017d50:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
 8017d54:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
 8017d58:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 8017d5c:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
 8017d60:	edc4 7a07 	vstr	s15, [r4, #28]
}
 8017d64:	ecbd 8b08 	vpop	{d8-d11}
 8017d68:	bd10      	pop	{r4, pc}
 8017d6a:	bf00      	nop
 8017d6c:	f3af 8000 	nop.w
 8017d70:	54442d18 	.word	0x54442d18
 8017d74:	400921fb 	.word	0x400921fb
 8017d78:	54442d18 	.word	0x54442d18
 8017d7c:	c00921fb 	.word	0xc00921fb
 8017d80:	402ccccd 	.word	0x402ccccd
 8017d84:	3df1a9fc 	.word	0x3df1a9fc
 8017d88:	3e656042 	.word	0x3e656042
 8017d8c:	3d449ba6 	.word	0x3d449ba6
 8017d90:	3f99999a 	.word	0x3f99999a
 8017d94:	3de147ae 	.word	0x3de147ae
 8017d98:	3f9cac08 	.word	0x3f9cac08
 8017d9c:	bc23d70a 	.word	0xbc23d70a

08017da0 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 8017da0:	b530      	push	{r4, r5, lr}
 8017da2:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
 8017da6:	6804      	ldr	r4, [r0, #0]
{
 8017da8:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 8017daa:	edd4 7a05 	vldr	s15, [r4, #20]
 8017dae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38

    if(glot->time_in_waveform > glot->waveform_length) {
 8017db2:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
 8017db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
 8017dba:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
 8017dbc:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 8017dbe:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
 8017dc4:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dcc:	dc50      	bgt.n	8017e70 <glottis_compute+0xd0>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 8017dce:	ed94 7a01 	vldr	s14, [r4, #4]

    if(t > glot->Te) {
 8017dd2:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 8017dd6:	ee27 8a87 	vmul.f32	s16, s15, s14
    if(t > glot->Te) {
 8017dda:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8017dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de2:	d530      	bpl.n	8017e46 <glottis_compute+0xa6>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 8017de4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8017de8:	edd4 7a08 	vldr	s15, [r4, #32]
 8017dec:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8017df0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017df4:	f7fc f8be 	bl	8013f74 <fastExp4>
 8017df8:	ee38 0a40 	vsub.f32	s0, s16, s0
 8017dfc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8017e00:	ee80 9a27 	vdiv.f32	s18, s0, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8017e04:	692b      	ldr	r3, [r5, #16]
 8017e06:	4798      	blx	r3

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
 8017e08:	ed94 7a02 	vldr	s14, [r4, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8017e0c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    noise = (2.0f * leaf->random()) - 1.0f;
 8017e10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017e14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8017e20:	db31      	blt.n	8017e86 <glottis_compute+0xe6>
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
 8017e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8017e26:	eeb1 7ac7 	vsqrt.f32	s14, s14
 8017e2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;

    out += aspiration;
 8017e2e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8017e8c <glottis_compute+0xec>

    return out;
}
 8017e32:	eeb0 0a49 	vmov.f32	s0, s18
    out += aspiration;
 8017e36:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8017e3a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017e3e:	b003      	add	sp, #12
 8017e40:	ecbd 8b04 	vpop	{d8-d9}
 8017e44:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
 8017e46:	ed94 0a06 	vldr	s0, [r4, #24]
 8017e4a:	ed94 9a07 	vldr	s18, [r4, #28]
 8017e4e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017e52:	f7fc f88f 	bl	8013f74 <fastExp4>
 8017e56:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8017e5a:	eef0 8a40 	vmov.f32	s17, s0
 8017e5e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8017e62:	f7e8 fc1d 	bl	80006a0 <arm_sin_f32>
 8017e66:	ee28 0a80 	vmul.f32	s0, s17, s0
 8017e6a:	ee20 9a09 	vmul.f32	s18, s0, s18
 8017e6e:	e7c9      	b.n	8017e04 <glottis_compute+0x64>
        glot->time_in_waveform -= glot->waveform_length;
 8017e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
 8017e74:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
 8017e76:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
 8017e7a:	f7ff fed5 	bl	8017c28 <glottis_setup_waveform>
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 8017e7e:	9c01      	ldr	r4, [sp, #4]
 8017e80:	edd4 7a05 	vldr	s15, [r4, #20]
 8017e84:	e7a3      	b.n	8017dce <glottis_compute+0x2e>
 8017e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e8a:	e7d0      	b.n	8017e2e <glottis_compute+0x8e>
 8017e8c:	3d75c290 	.word	0x3d75c290

08017e90 <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
 8017e90:	b500      	push	{lr}
	_tract* tr = *t;
 8017e92:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++)
 8017e94:	685a      	ldr	r2, [r3, #4]
 8017e96:	2a00      	cmp	r2, #0
 8017e98:	dd55      	ble.n	8017f46 <tract_calculate_reflections+0xb6>
 8017e9a:	2200      	movs	r2, #0
    {
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 8017e9c:	6958      	ldr	r0, [r3, #20]
 8017e9e:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8017ea2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        tr->A[i] = scaledDiameter * scaledDiameter;
 8017ea6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 8017ea8:	edd0 7a00 	vldr	s15, [r0]
        tr->A[i] = scaledDiameter * scaledDiameter;
 8017eac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++)
 8017eb0:	3201      	adds	r2, #1
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 8017eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
 8017eb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017eba:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++)
 8017ebe:	6859      	ldr	r1, [r3, #4]
 8017ec0:	4291      	cmp	r1, r2
 8017ec2:	dceb      	bgt.n	8017e9c <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++)
 8017ec4:	2901      	cmp	r1, #1
 8017ec6:	dd3e      	ble.n	8017f46 <tract_calculate_reflections+0xb6>
 8017ec8:	2204      	movs	r2, #4
 8017eca:	f04f 0c01 	mov.w	ip, #1
    {
        tr->reflection[i] = tr->new_reflection[i];

        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);

        if(tr->A[i] <= 0.0000001f)
 8017ece:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8017fec <tract_calculate_reflections+0x15c>
        {
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
        }
        else
        {
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
 8017ed2:	eddf 5a47 	vldr	s11, [pc, #284]	; 8017ff0 <tract_calculate_reflections+0x160>
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
 8017ed6:	f8df e128 	ldr.w	lr, [pc, #296]	; 8018000 <tract_calculate_reflections+0x170>
 8017eda:	e009      	b.n	8017ef0 <tract_calculate_reflections+0x60>
 8017edc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017ede:	4411      	add	r1, r2
 8017ee0:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++)
 8017ee4:	f10c 0c01 	add.w	ip, ip, #1
 8017ee8:	6859      	ldr	r1, [r3, #4]
 8017eea:	3204      	adds	r2, #4
 8017eec:	4561      	cmp	r1, ip
 8017eee:	dd2a      	ble.n	8017f46 <tract_calculate_reflections+0xb6>
        tr->reflection[i] = tr->new_reflection[i];
 8017ef0:	e9d3 100b 	ldrd	r1, r0, [r3, #44]	; 0x2c
 8017ef4:	4410      	add	r0, r2
 8017ef6:	4411      	add	r1, r2
 8017ef8:	6800      	ldr	r0, [r0, #0]
 8017efa:	6008      	str	r0, [r1, #0]
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
 8017efc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017efe:	4411      	add	r1, r2
 8017f00:	edd1 7a00 	vldr	s15, [r1]
 8017f04:	ed11 7a01 	vldr	s14, [r1, #-4]
        if(tr->A[i] <= 0.0000001f)
 8017f08:	eef4 7ac6 	vcmpe.f32	s15, s12
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
 8017f0c:	ee77 6a27 	vadd.f32	s13, s14, s15
        if(tr->A[i] <= 0.0000001f)
 8017f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f14:	d9e2      	bls.n	8017edc <tract_calculate_reflections+0x4c>
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
 8017f16:	eef4 6ac6 	vcmpe.f32	s13, s12
        	{
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
 8017f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
 8017f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f22:	da04      	bge.n	8017f2e <tract_calculate_reflections+0x9e>
 8017f24:	eef4 6a65 	vcmp.f32	s13, s11
 8017f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f2c:	d8da      	bhi.n	8017ee4 <tract_calculate_reflections+0x54>
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
 8017f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
    for(i = 1; i < tr->n; i++)
 8017f34:	f10c 0c01 	add.w	ip, ip, #1
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
 8017f38:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++)
 8017f3a:	3204      	adds	r2, #4
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
 8017f3c:	edc1 7a00 	vstr	s15, [r1]
    for(i = 1; i < tr->n; i++)
 8017f40:	6859      	ldr	r1, [r3, #4]
 8017f42:	4561      	cmp	r1, ip
 8017f44:	dcd4      	bgt.n	8017ef0 <tract_calculate_reflections+0x60>
        	}
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 8017f46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    tr->reflection_left = tr->new_reflection_left;
 8017f4c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->reflection_right = tr->new_reflection_right;
 8017f50:	f8d3 c090 	ldr.w	ip, [r3, #144]	; 0x90
    tr->reflection_nose = tr->new_reflection_nose;
 8017f54:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017f58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    tr->reflection_right = tr->new_reflection_right;
 8017f5a:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
 8017f5e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017f62:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8017f66:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8017f68:	eddc 5a00 	vldr	s11, [ip]
 8017f6c:	4662      	mov	r2, ip
 8017f6e:	edd1 7a00 	vldr	s15, [r1]
 8017f72:	ed9c 7a01 	vldr	s14, [ip, #4]
 8017f76:	3204      	adds	r2, #4
 8017f78:	ee75 7aa7 	vadd.f32	s15, s11, s15
    if ((sum  <= 0.001f) && (sum >= -0.001f))
 8017f7c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8017ff4 <tract_calculate_reflections+0x164>
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017f80:	ee77 7a87 	vadd.f32	s15, s15, s14
    if ((sum  <= 0.001f) && (sum >= -0.001f))
 8017f84:	eef4 7a66 	vcmp.f32	s15, s13
 8017f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f8c:	d828      	bhi.n	8017fe0 <tract_calculate_reflections+0x150>
 8017f8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017ff8 <tract_calculate_reflections+0x168>
 8017f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	db21      	blt.n	8017fe0 <tract_calculate_reflections+0x150>
    {
    	sum = 0.001f;
 8017f9c:	eef0 7a66 	vmov.f32	s15, s13
 8017fa0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8017ffc <tract_calculate_reflections+0x16c>
    }
    Lfloat invSum = 1.0f / sum;
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8017fa4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017fa8:	eeb0 6a67 	vmov.f32	s12, s15
 8017fac:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8017fb0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017fb4:	ed83 6a23 	vstr	s12, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 8017fb8:	eeb0 6a67 	vmov.f32	s12, s15
 8017fbc:	edd2 5a00 	vldr	s11, [r2]
 8017fc0:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8017fc4:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017fc8:	ed83 6a24 	vstr	s12, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 8017fcc:	ed91 6a00 	vldr	s12, [r1]
 8017fd0:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8017fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017fd8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
 8017fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    Lfloat invSum = 1.0f / sum;
 8017fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017fe8:	e7dc      	b.n	8017fa4 <tract_calculate_reflections+0x114>
 8017fea:	bf00      	nop
 8017fec:	33d6bf95 	.word	0x33d6bf95
 8017ff0:	b3d6bf95 	.word	0xb3d6bf95
 8017ff4:	3a83126f 	.word	0x3a83126f
 8017ff8:	ba83126f 	.word	0xba83126f
 8017ffc:	4479ffff 	.word	0x4479ffff
 8018000:	3f7d70a4 	.word	0x3f7d70a4

08018004 <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
 8018004:	b410      	push	{r4}
	_tract* tr = *t;
 8018006:	6803      	ldr	r3, [r0, #0]
    }

    tr->n = n; //44
    tr->invN = 1.0f / n;
    tr->nose_length = n*0.636363636363636f; //28
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8018008:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    tr->nose_length = n*0.636363636363636f; //28
 801800c:	ed9f 6aa5 	vldr	s12, [pc, #660]	; 80182a4 <tract_newLength+0x2a0>

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));

	tr->turbuluencePointPosition[0] = n* 0.45f;
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8018010:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    if (numTractSections < tr->maxNumTractSections)
 8018014:	691a      	ldr	r2, [r3, #16]
    tr->last_obstruction = -1;
 8018016:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    tr->tip_start = n*0.727272727272727f;
 801801a:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 80182a8 <tract_newLength+0x2a4>
    if (numTractSections < tr->maxNumTractSections)
 801801e:	428a      	cmp	r2, r1
    tr->blade_start = n*0.227272727272727f;
 8018020:	eddf 5aa2 	vldr	s11, [pc, #648]	; 80182ac <tract_newLength+0x2a8>
    tr->lip_start = n*0.886363636363636f;
 8018024:	eddf 4aa2 	vldr	s9, [pc, #648]	; 80182b0 <tract_newLength+0x2ac>
    	n = numTractSections;
 8018028:	bfcc      	ite	gt
 801802a:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
 801802e:	ee07 2a90 	vmovle	s15, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8018032:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80182b4 <tract_newLength+0x2b0>
    tr->glottal_reflection = 0.75f;
 8018036:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
    	n = tr->maxNumTractSections;
 801803a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801803e:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80182b8 <tract_newLength+0x2b4>
    tr->glottal_reflection = 0.75f;
 8018042:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    tr->reflection_left = 0.0f;
 8018046:	2100      	movs	r1, #0
    tr->lip_reflection = -0.85f;
 8018048:	4a9c      	ldr	r2, [pc, #624]	; (80182bc <tract_newLength+0x2b8>)
    tr->n = n; //44
 801804a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
	tr->turbuluencePointPosition[0] = n* 0.45f;
 801804e:	eddf 2a9c 	vldr	s5, [pc, #624]	; 80182c0 <tract_newLength+0x2bc>
    tr->nose_length = n*0.636363636363636f; //28
 8018052:	ee26 6a86 	vmul.f32	s12, s13, s12
    tr->lip_reflection = -0.85f;
 8018056:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    tr->tip_start = n*0.727272727272727f;
 801805a:	ee26 5a85 	vmul.f32	s10, s13, s10
    tr->velum_target = 0.01f;
 801805e:	4a99      	ldr	r2, [pc, #612]	; (80182c4 <tract_newLength+0x2c0>)
	tr->turbuluencePointDiameter[0] = 1.5f;
	tr->turbuluencePointDiameter[1] = 1.5f;

    tr->invN = 1.0f / tr->n;
 8018060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    tr->n = n; //44
 8018064:	ee17 0a90 	vmov	r0, s15
    tr->blade_start = n*0.227272727272727f;
 8018068:	ee66 5aa5 	vmul.f32	s11, s13, s11
    tr->velum_target = 0.01f;
 801806c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    tr->tip_start = n*0.727272727272727f;
 8018070:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->movement_speed = 200.0f;
 8018074:	4a94      	ldr	r2, [pc, #592]	; (80182c8 <tract_newLength+0x2c4>)
    tr->invN = 1.0f / tr->n;
 8018076:	eec4 7a07 	vdiv.f32	s15, s8, s14

    for(i = 0; i < tr->n; i++) {
 801807a:	2800      	cmp	r0, #0
    tr->n = n; //44
 801807c:	6058      	str	r0, [r3, #4]
    tr->tip_start = n*0.727272727272727f;
 801807e:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
    tr->reflection_left = 0.0f;
 8018082:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->reflection_right = 0.0f;
 8018086:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
 801808a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->reflection_nose = 0.0f;
 801808e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->blade_start = n*0.227272727272727f;
 8018092:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->new_reflection_left = 0.0f;
 8018096:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801809a:	ee76 3a84 	vadd.f32	s7, s13, s8
    tr->new_reflection_right= 0.0f;
 801809e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80180a2:	eef8 1ac5 	vcvt.f32.s32	s3, s10
    tr->nose_length = n*0.636363636363636f; //28
 80180a6:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80180aa:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
    tr->blade_start = n*0.227272727272727f;
 80180ae:	edc3 5a15 	vstr	s11, [r3, #84]	; 0x54
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80180b2:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
    tr->new_reflection_nose = 0.0f;
 80180b6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80180ba:	eee6 1ac0 	vfms.f32	s3, s13, s0
    tr->lip_output = 0.0f;
 80180be:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tr->lip_start = n*0.886363636363636f;
 80180c2:	ee66 4aa4 	vmul.f32	s9, s13, s9
    tr->nose_output = 0.0f;
 80180c6:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80180ca:	eea6 2aa0 	vfma.f32	s4, s13, s1
    tr->last_obstruction = -1;
 80180ce:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80180d2:	ee73 3ac3 	vsub.f32	s7, s7, s6
    tr->movement_speed = 200.0f;
 80180d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	tr->turbuluencePointDiameter[0] = 1.5f;
 80180da:	eeb7 4a08 	vmov.f32	s8, #120	; 0x3fc00000  1.5
	tr->turbuluencePointPosition[0] = n* 0.45f;
 80180de:	ee26 5aa2 	vmul.f32	s10, s13, s5
    tr->invN = 1.0f / tr->n;
 80180e2:	edc3 7a02 	vstr	s15, [r3, #8]
    tr->lip_start = n*0.886363636363636f;
 80180e6:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80180ea:	edc3 1a17 	vstr	s3, [r3, #92]	; 0x5c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80180ee:	eefd 3ae3 	vcvt.s32.f32	s7, s7
	tr->turbuluencePointDiameter[0] = 1.5f;
 80180f2:	ed83 4a36 	vstr	s8, [r3, #216]	; 0xd8
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80180f6:	ee66 6a81 	vmul.f32	s13, s13, s2
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80180fa:	ed83 2a18 	vstr	s4, [r3, #96]	; 0x60
    tr->lip_start = n*0.886363636363636f;
 80180fe:	edc3 4a16 	vstr	s9, [r3, #88]	; 0x58
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8018102:	edc3 3a13 	vstr	s7, [r3, #76]	; 0x4c
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8018106:	ed83 5a34 	vstr	s10, [r3, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 801810a:	edc3 6a35 	vstr	s13, [r3, #212]	; 0xd4
	tr->turbuluencePointDiameter[1] = 1.5f;
 801810e:	ed83 4a37 	vstr	s8, [r3, #220]	; 0xdc
    for(i = 0; i < tr->n; i++) {
 8018112:	dd5c      	ble.n	80181ce <tract_newLength+0x1ca>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018114:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 8018118:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 801811a:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 801811e:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 80182cc <tract_newLength+0x2c8>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8018122:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.1f;
        } else {
            diameter = 1.5f;
 8018126:	eddf 3a6a 	vldr	s7, [pc, #424]	; 80182d0 <tract_newLength+0x2cc>
 801812a:	e001      	b.n	8018130 <tract_newLength+0x12c>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 801812c:	edd3 7a02 	vldr	s15, [r3, #8]
 8018130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018134:	eef0 6a45 	vmov.f32	s13, s10
            diameter = 0.6f;
 8018138:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 801813c:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8018140:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018148:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801814c:	ee16 0a90 	vmov	r0, s13
 8018150:	4290      	cmp	r0, r2
 8018152:	dc04      	bgt.n	801815e <tract_newLength+0x15a>
            diameter = 1.5f;
 8018154:	ee17 0a90 	vmov	r0, s15
 8018158:	4290      	cmp	r0, r2
 801815a:	fe33 7a84 	vselgt.f32	s14, s7, s8
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
 801815e:	6a18      	ldr	r0, [r3, #32]
 8018160:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018164:	ed80 7a00 	vstr	s14, [r0]
            tr->target_diameter[i] =
 8018168:	69d8      	ldr	r0, [r3, #28]
 801816a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801816e:	ed80 7a00 	vstr	s14, [r0]
            tr->rest_diameter[i] =
 8018172:	6998      	ldr	r0, [r3, #24]
 8018174:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018178:	ed80 7a00 	vstr	s14, [r0]
        tr->diameter[i] =
 801817c:	6958      	ldr	r0, [r3, #20]
 801817e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018182:	ed80 7a00 	vstr	s14, [r0]
        tr->reflection[i] = 0.0f;
 8018186:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018188:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801818c:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
 801818e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018190:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018194:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
 8018196:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018198:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801819c:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
 801819e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80181a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80181a4:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
 80181a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80181a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80181ac:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
 80181ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80181b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 80181b4:	3201      	adds	r2, #1
        tr->junction_outL[i] = 0.0f;
 80181b6:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 80181b8:	6858      	ldr	r0, [r3, #4]
 80181ba:	ee07 0a90 	vmov	s15, r0
 80181be:	4290      	cmp	r0, r2
 80181c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80181c4:	dcb2      	bgt.n	801812c <tract_newLength+0x128>
    }

    if (tr->nose_length < 0.01f)
 80181c6:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80181ca:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
 80181ce:	eddf 7a41 	vldr	s15, [pc, #260]	; 80182d4 <tract_newLength+0x2d0>
 80181d2:	eeb4 3ae7 	vcmpe.f32	s6, s15
 80181d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181da:	d515      	bpl.n	8018208 <tract_newLength+0x204>
    {
    	tr->nose_length = 0.01f;
 80181dc:	2200      	movs	r2, #0
 80181de:	649a      	str	r2, [r3, #72]	; 0x48
        tr->noseL[i] = 0.0f;
        tr->nose_junc_outR[i] = 0.0f;
        tr->nose_junc_outL[i] = 0.0f;
	}

    tr->new_reflection_left = 0.0f;
 80181e0:	2200      	movs	r2, #0
 80181e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
 80181e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
 80181ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
 80181ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
 80181f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
 80181f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
 80181fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 80181fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
 8018202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018206:	4770      	bx	lr
	for(i = 0; i < tr->nose_length; i++) {
 8018208:	ee16 2a10 	vmov	r2, s12
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 801820c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 8018210:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8018212:	eec7 3a83 	vdiv.f32	s7, s15, s6
	for(i = 0; i < tr->nose_length; i++) {
 8018216:	dde3      	ble.n	80181e0 <tract_newLength+0x1dc>
 8018218:	2200      	movs	r2, #0
			diameter = 0.4f + 1.6f * d;
 801821a:	eddf 4a2f 	vldr	s9, [pc, #188]	; 80182d8 <tract_newLength+0x2d4>
 801821e:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 80182dc <tract_newLength+0x2d8>
        tr->nose_reflection[i] = 0.0f;
 8018222:	2100      	movs	r1, #0
		diameter = MIN(diameter, 1.9f);
 8018224:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80182e0 <tract_newLength+0x2dc>
		if(d < 1.0f) {
 8018228:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
 801822c:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
 8018230:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8018234:	ee07 2a90 	vmov	s15, r2
 8018238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801823c:	ee67 7aa3 	vmul.f32	s15, s15, s7
		if(d < 1.0f) {
 8018240:	eef4 7ae6 	vcmpe.f32	s15, s13
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8018244:	ee37 7aa7 	vadd.f32	s14, s15, s15
			diameter = 0.4f + 1.6f * d;
 8018248:	eef0 7a45 	vmov.f32	s15, s10
		if(d < 1.0f) {
 801824c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018250:	ee34 6a47 	vsub.f32	s12, s8, s14
			diameter = 0.4f + 1.6f * d;
 8018254:	eee7 7a24 	vfma.f32	s15, s14, s9
		if(d < 1.0f) {
 8018258:	d403      	bmi.n	8018262 <tract_newLength+0x25e>
			diameter = 0.5f + 1.5f*(2.0f-d);
 801825a:	eef0 7a66 	vmov.f32	s15, s13
 801825e:	eee6 7a03 	vfma.f32	s15, s12, s6
		tr->nose_diameter[i] = diameter;
 8018262:	6f98      	ldr	r0, [r3, #120]	; 0x78
		diameter = MIN(diameter, 1.9f);
 8018264:	fec7 7ae5 	vminnm.f32	s15, s15, s11
		tr->nose_diameter[i] = diameter;
 8018268:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801826c:	edc0 7a00 	vstr	s15, [r0]
        tr->nose_reflection[i] = 0.0f;
 8018270:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8018272:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018276:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
 8018278:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801827a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801827e:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
 8018280:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8018282:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018286:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
 8018288:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801828a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801828e:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
 8018290:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8018292:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
 8018296:	3201      	adds	r2, #1
        tr->nose_junc_outL[i] = 0.0f;
 8018298:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
 801829a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801829c:	4290      	cmp	r0, r2
 801829e:	dcc9      	bgt.n	8018234 <tract_newLength+0x230>
 80182a0:	e79e      	b.n	80181e0 <tract_newLength+0x1dc>
 80182a2:	bf00      	nop
 80182a4:	3f22e8ba 	.word	0x3f22e8ba
 80182a8:	3f3a2e8c 	.word	0x3f3a2e8c
 80182ac:	3e68ba2f 	.word	0x3e68ba2f
 80182b0:	3f62e8ba 	.word	0x3f62e8ba
 80182b4:	3d8ba2e9 	.word	0x3d8ba2e9
 80182b8:	3d3a2e8c 	.word	0x3d3a2e8c
 80182bc:	bf59999a 	.word	0xbf59999a
 80182c0:	3ee66666 	.word	0x3ee66666
 80182c4:	3c23d70a 	.word	0x3c23d70a
 80182c8:	43480000 	.word	0x43480000
 80182cc:	3f19999a 	.word	0x3f19999a
 80182d0:	3f8ccccd 	.word	0x3f8ccccd
 80182d4:	3c23d70a 	.word	0x3c23d70a
 80182d8:	3fcccccd 	.word	0x3fcccccd
 80182dc:	3ecccccd 	.word	0x3ecccccd
 80182e0:	3ff33333 	.word	0x3ff33333

080182e4 <tract_reshape>:

void tract_reshape(tract* const t)
{
 80182e4:	b410      	push	{r4}
	_tract* tr = *t;
 80182e6:	6802      	ldr	r2, [r0, #0]

            slow_return =
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
        }

        tr->diameter[i] = move_towards(diameter, target_diameter,
 80182e8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80183dc <tract_reshape+0xf8>
    for(i = 0; i < tr->n; i++) {
 80182ec:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
 80182ee:	edd2 4a2e 	vldr	s9, [r2, #184]	; 0xb8
 80182f2:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
 80182f6:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
 80182f8:	ee64 4aa7 	vmul.f32	s9, s9, s15
    for(i = 0; i < tr->n; i++) {
 80182fc:	dd6a      	ble.n	80183d4 <tract_reshape+0xf0>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80182fe:	ed9f 3a38 	vldr	s6, [pc, #224]	; 80183e0 <tract_reshape+0xfc>
 8018302:	ee24 5a85 	vmul.f32	s10, s9, s10
    for(i = 0; i < tr->n; i++) {
 8018306:	2300      	movs	r3, #0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 8018308:	eddf 3a36 	vldr	s7, [pc, #216]	; 80183e4 <tract_reshape+0x100>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 801830c:	ee24 4a83 	vmul.f32	s8, s9, s6
        diameter = tr->diameter[i];
 8018310:	6951      	ldr	r1, [r2, #20]
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018312:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
 8018316:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
        target_diameter = tr->target_diameter[i];
 8018318:	69d4      	ldr	r4, [r2, #28]
        diameter = tr->diameter[i];
 801831a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(i < tr->nose_start) slow_return = 0.6f;
 801831e:	4298      	cmp	r0, r3
        target_diameter = tr->target_diameter[i];
 8018320:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        diameter = tr->diameter[i];
 8018324:	ed91 6a00 	vldr	s12, [r1]
        target_diameter = tr->target_diameter[i];
 8018328:	eddc 6a00 	vldr	s13, [ip]
        if(i < tr->nose_start) slow_return = 0.6f;
 801832c:	dc16      	bgt.n	801835c <tract_reshape+0x78>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 801832e:	1a1c      	subs	r4, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8018330:	eef0 7a64 	vmov.f32	s15, s9
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 8018334:	ee05 4a90 	vmov	s11, r4
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8018338:	6d14      	ldr	r4, [r2, #80]	; 0x50
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
 801833a:	1a20      	subs	r0, r4, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 801833c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8018340:	429c      	cmp	r4, r3
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
 8018342:	ee07 0a10 	vmov	s14, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 8018346:	ee65 5aa3 	vmul.f32	s11, s11, s7
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
 801834a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801834e:	dd05      	ble.n	801835c <tract_reshape+0x78>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 8018350:	eec5 7a87 	vdiv.f32	s15, s11, s14
            slow_return =
 8018354:	ee77 7a83 	vadd.f32	s15, s15, s6
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018358:	ee67 7aa4 	vmul.f32	s15, s15, s9

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 801835c:	eef4 6ac6 	vcmpe.f32	s13, s12
        tmp = current + amt_up;
 8018360:	ee76 7a27 	vadd.f32	s15, s12, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
 8018364:	ee36 7a45 	vsub.f32	s14, s12, s10
    if(current < target) {
 8018368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
 801836c:	fec7 7ae6 	vminnm.f32	s15, s15, s13
        return MAX(tmp, target);
 8018370:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
    if(current < target) {
 8018374:	dd22      	ble.n	80183bc <tract_reshape+0xd8>
    for(i = 0; i < tr->n; i++) {
 8018376:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8018378:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 801837c:	6851      	ldr	r1, [r2, #4]
 801837e:	428b      	cmp	r3, r1
 8018380:	dbc6      	blt.n	8018310 <tract_reshape+0x2c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8018382:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8018384:	edd2 7a26 	vldr	s15, [r2, #152]	; 0x98
 8018388:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
 801838c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018394:	d519      	bpl.n	80183ca <tract_reshape+0xe6>
        tmp = current + amt_up;
 8018396:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801839a:	eea4 7aa6 	vfma.f32	s14, s9, s13
        return MIN(tmp, target);
 801839e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80183a2:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 80183a6:	e9d2 131e 	ldrd	r1, r3, [r2, #120]	; 0x78
 80183aa:	edd1 7a00 	vldr	s15, [r1]
 80183ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80183b2:	edc3 7a00 	vstr	s15, [r3]
}
 80183b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183ba:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
 80183bc:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80183be:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
 80183c2:	6851      	ldr	r1, [r2, #4]
 80183c4:	428b      	cmp	r3, r1
 80183c6:	dba3      	blt.n	8018310 <tract_reshape+0x2c>
 80183c8:	e7db      	b.n	8018382 <tract_reshape+0x9e>
        tmp = current - amt_down;
 80183ca:	ee37 7a45 	vsub.f32	s14, s14, s10
        return MAX(tmp, target);
 80183ce:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80183d2:	e7e6      	b.n	80183a2 <tract_reshape+0xbe>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80183d4:	ee24 5a85 	vmul.f32	s10, s9, s10
 80183d8:	e7d3      	b.n	8018382 <tract_reshape+0x9e>
 80183da:	bf00      	nop
 80183dc:	3dcccccd 	.word	0x3dcccccd
 80183e0:	3f19999a 	.word	0x3f19999a
 80183e4:	3ecccccd 	.word	0x3ecccccd

080183e8 <tract_addTurbulenceNoiseAtPosition>:
{
 80183e8:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80183ea:	eddf 7a36 	vldr	s15, [pc, #216]	; 80184c4 <tract_addTurbulenceNoiseAtPosition+0xdc>
 80183ee:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
 80183f2:	6805      	ldr	r5, [r0, #0]
{
 80183f4:	ed2d 8b06 	vpush	{d8-d10}
 80183f8:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80183fc:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
 8018400:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
 8018404:	fefb 7a68 	vrintm.f32	s15, s17
 8018408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801840c:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 8018410:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8018414:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80184c8 <tract_addTurbulenceNoiseAtPosition+0xe0>
 8018418:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
 801841c:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8018420:	f7fb fea2 	bl	8014168 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8018424:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
 8018428:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801842c:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8018430:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8018434:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80184c8 <tract_addTurbulenceNoiseAtPosition+0xe0>
 8018438:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
 801843c:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8018440:	f7fb fe92 	bl	8014168 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8018444:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
 8018448:	686b      	ldr	r3, [r5, #4]
 801844a:	1c62      	adds	r2, r4, #1
 801844c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018450:	429a      	cmp	r2, r3
 8018452:	ee28 8a29 	vmul.f32	s16, s16, s19
 8018456:	ee28 0a00 	vmul.f32	s0, s16, s0
 801845a:	da18      	bge.n	801848e <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801845c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
 8018460:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018462:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8018466:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
 801846a:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801846e:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
 8018472:	eea7 7a80 	vfma.f32	s14, s15, s0
 8018476:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 801847a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801847c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018480:	ed93 7a00 	vldr	s14, [r3]
 8018484:	eea7 7a80 	vfma.f32	s14, s15, s0
 8018488:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
 801848c:	686b      	ldr	r3, [r5, #4]
 801848e:	3402      	adds	r4, #2
 8018490:	429c      	cmp	r4, r3
 8018492:	da13      	bge.n	80184bc <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
 8018494:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	Lfloat delta = position - i;
 8018496:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
 801849a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801849e:	edd3 7a00 	vldr	s15, [r3]
 80184a2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80184a6:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 80184aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80184ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80184b0:	edd3 7a00 	vldr	s15, [r3]
 80184b4:	eee8 7a80 	vfma.f32	s15, s17, s0
 80184b8:	edc3 7a00 	vstr	s15, [r3]
 }
 80184bc:	ecbd 8b06 	vpop	{d8-d10}
 80184c0:	bd38      	pop	{r3, r4, r5, pc}
 80184c2:	bf00      	nop
 80184c4:	3db851ec 	.word	0x3db851ec
 80184c8:	00000000 	.word	0x00000000

080184cc <tract_compute>:
{
 80184cc:	b570      	push	{r4, r5, r6, lr}
 80184ce:	ed2d 8b06 	vpush	{d8-d10}
	_tract* tr = *t;
 80184d2:	6804      	ldr	r4, [r0, #0]
    Lfloat oneMinusLambda = 1.0f - lambda;
 80184d4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
{
 80184d8:	b082      	sub	sp, #8
 80184da:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 80184de:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
{
 80184e2:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat oneMinusLambda = 1.0f - lambda;
 80184e6:	ee79 8a60 	vsub.f32	s17, s18, s1
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 80184ea:	ed9f aacc 	vldr	s20, [pc, #816]	; 801881c <tract_compute+0x350>
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 80184ee:	4628      	mov	r0, r5
 80184f0:	f7fc fe82 	bl	80151f8 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
 80184f4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80184f8:	f7f9 fb00 	bl	8011afc <tSVF_tick>
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 80184fc:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8018500:	ee39 9a67 	vsub.f32	s18, s18, s15
 8018504:	ee29 9a29 	vmul.f32	s18, s18, s19
 8018508:	eea7 9a80 	vfma.f32	s18, s15, s0
 801850c:	eeb0 0a49 	vmov.f32	s0, s18
 8018510:	f7fb fe82 	bl	8014218 <fast_tanh5>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8018514:	4628      	mov	r0, r5
 8018516:	edd4 9a10 	vldr	s19, [r4, #64]	; 0x40
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 801851a:	eeb0 9a40 	vmov.f32	s18, s0
	_tract* tr = *t;
 801851e:	9401      	str	r4, [sp, #4]
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8018520:	f7fc fe6a 	bl	80151f8 <tNoise_tick>
 8018524:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8018528:	ee20 0a0a 	vmul.f32	s0, s0, s20
 801852c:	f7f9 fae6 	bl	8011afc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8018530:	ed94 1a36 	vldr	s2, [r4, #216]	; 0xd8
 8018534:	edd4 0a34 	vldr	s1, [r4, #208]	; 0xd0
 8018538:	ee20 0a29 	vmul.f32	s0, s0, s19
 801853c:	a801      	add	r0, sp, #4
 801853e:	f7ff ff53 	bl	80183e8 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8018542:	9d01      	ldr	r5, [sp, #4]
 8018544:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 8018548:	edd5 9a10 	vldr	s19, [r5, #64]	; 0x40
 801854c:	f7fc fe54 	bl	80151f8 <tNoise_tick>
 8018550:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
 8018554:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8018558:	f7f9 fad0 	bl	8011afc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 801855c:	ed95 1a37 	vldr	s2, [r5, #220]	; 0xdc
 8018560:	ee29 0a80 	vmul.f32	s0, s19, s0
 8018564:	edd5 0a35 	vldr	s1, [r5, #212]	; 0xd4
 8018568:	a801      	add	r0, sp, #4
 801856a:	f7ff ff3d 	bl	80183e8 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 801856e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018570:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8018574:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8018578:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 801857c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801857e:	eea7 9a27 	vfma.f32	s18, s14, s15
 8018582:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8018586:	6862      	ldr	r2, [r4, #4]
 8018588:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801858a:	4413      	add	r3, r2
 801858c:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 8018590:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018592:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018596:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801859a:	edd1 7a00 	vldr	s15, [r1]
 801859e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80185a2:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
 80185a6:	6863      	ldr	r3, [r4, #4]
 80185a8:	2b01      	cmp	r3, #1
 80185aa:	dd2f      	ble.n	801860c <tract_compute+0x140>
 80185ac:	2304      	movs	r3, #4
 80185ae:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 80185b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
 80185b4:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 80185b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80185ba:	eb05 0e03 	add.w	lr, r5, r3
 80185be:	4418      	add	r0, r3
 80185c0:	edde 7a00 	vldr	s15, [lr]
 80185c4:	ed90 6a00 	vldr	s12, [r0]
 80185c8:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 80185cc:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 80185d0:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
 80185d4:	4419      	add	r1, r3
 80185d6:	441a      	add	r2, r3
 80185d8:	ed51 6a01 	vldr	s13, [r1, #-4]
 80185dc:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
 80185e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        w = r * (tr->R[i - 1] + tr->L[i]);
 80185e2:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 80185e6:	441a      	add	r2, r3
 80185e8:	eee7 6a67 	vfms.f32	s13, s14, s15
 80185ec:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 80185f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80185f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80185f4:	4419      	add	r1, r3
 80185f6:	441a      	add	r2, r3
 80185f8:	3304      	adds	r3, #4
 80185fa:	edd1 6a00 	vldr	s13, [r1]
 80185fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018602:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	4562      	cmp	r2, ip
 801860a:	dcd2      	bgt.n	80185b2 <tract_compute+0xe6>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 801860c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801860e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8018612:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801861a:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 801861c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8018620:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018624:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801862a:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 801862e:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018632:	1d1a      	adds	r2, r3, #4
 8018634:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018636:	4410      	add	r0, r2
 8018638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801863a:	441d      	add	r5, r3
 801863c:	edd0 7a00 	vldr	s15, [r0]
 8018640:	4411      	add	r1, r2
 8018642:	ed95 6a00 	vldr	s12, [r5]
 8018646:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801864a:	ee77 5a26 	vadd.f32	s11, s14, s13
 801864e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018652:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018656:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 801865a:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 801865e:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8018662:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8018666:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018668:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801866a:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 801866c:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8018670:	4419      	add	r1, r3
 8018672:	ed90 6a00 	vldr	s12, [r0]
 8018676:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8018678:	edd1 7a00 	vldr	s15, [r1]
 801867c:	ed90 5a00 	vldr	s10, [r0]
 8018680:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018682:	ee77 5a26 	vadd.f32	s11, s14, s13
 8018686:	ee77 7a85 	vadd.f32	s15, s15, s10
 801868a:	4411      	add	r1, r2
 801868c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018690:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018694:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8018698:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 801869c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 801869e:	ee28 7a07 	vmul.f32	s14, s16, s14
 80186a2:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 80186a6:	ed91 6a00 	vldr	s12, [r1]
 80186aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 80186ac:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 80186b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80186b2:	4411      	add	r1, r2
 80186b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80186b6:	441a      	add	r2, r3
 80186b8:	edd1 7a00 	vldr	s15, [r1]
 80186bc:	edd2 5a00 	vldr	s11, [r2]
 80186c0:	ee77 6a26 	vadd.f32	s13, s14, s13
 80186c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80186c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80186cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80186d0:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
 80186d4:	6863      	ldr	r3, [r4, #4]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	dd1d      	ble.n	8018716 <tract_compute+0x24a>
 80186da:	2300      	movs	r3, #0
        tr->R[i] = (tr->junction_outR[i]*0.999f);
 80186dc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8018820 <tract_compute+0x354>
    for(i = 0; i < tr->n; i++) {
 80186e0:	4618      	mov	r0, r3
        tr->R[i] = (tr->junction_outR[i]*0.999f);
 80186e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186e4:	469c      	mov	ip, r3
 80186e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(i = 0; i < tr->n; i++) {
 80186e8:	3001      	adds	r0, #1
        tr->R[i] = (tr->junction_outR[i]*0.999f);
 80186ea:	4419      	add	r1, r3
 80186ec:	441a      	add	r2, r3
 80186ee:	3304      	adds	r3, #4
 80186f0:	edd1 7a00 	vldr	s15, [r1]
 80186f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80186f8:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = (tr->junction_outL[i + 1]*0.999f);
 80186fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018700:	4419      	add	r1, r3
 8018702:	4462      	add	r2, ip
 8018704:	edd1 7a00 	vldr	s15, [r1]
 8018708:	ee67 7a87 	vmul.f32	s15, s15, s14
 801870c:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
 8018710:	6862      	ldr	r2, [r4, #4]
 8018712:	4282      	cmp	r2, r0
 8018714:	dce5      	bgt.n	80186e2 <tract_compute+0x216>
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
 8018716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018718:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 801871c:	eebf 0a08 	vmov.f32	s0, #248	; 0xbfc00000 -1.5
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
 8018720:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
 8018724:	edd6 0a00 	vldr	s1, [r6]
 8018728:	f7fb fd1e 	bl	8014168 <LEAF_clip>
 801872c:	eef0 7a40 	vmov.f32	s15, s0
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
 8018730:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8018734:	eebf 0a08 	vmov.f32	s0, #248	; 0xbfc00000 -1.5
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
 8018738:	edc6 7a00 	vstr	s15, [r6]
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
 801873c:	6863      	ldr	r3, [r4, #4]
 801873e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018740:	442b      	add	r3, r5
 8018742:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8018746:	edd6 0a00 	vldr	s1, [r6]
 801874a:	f7fb fd0d 	bl	8014168 <LEAF_clip>
 801874e:	ed86 0a00 	vstr	s0, [r6]
    tr->lip_output = tr->R[tr->n - 1];
 8018752:	6863      	ldr	r3, [r4, #4]
 8018754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018756:	18e9      	adds	r1, r5, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018758:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801875a:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
    tr->lip_output = tr->R[tr->n - 1];
 801875e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018762:	4405      	add	r5, r0
    tr->nose_junc_outL[tr->nose_length] =
 8018764:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    tr->lip_output = tr->R[tr->n - 1];
 8018766:	6812      	ldr	r2, [r2, #0]
    tr->nose_junc_outL[tr->nose_length] =
 8018768:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
 801876c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018770:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8018772:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8018776:	edd2 7a00 	vldr	s15, [r2]
 801877a:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 801877e:	edc3 7a01 	vstr	s15, [r3, #4]
    for(i = 1; i < tr->nose_length; i++) {
 8018782:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8018784:	2a01      	cmp	r2, #1
 8018786:	dd27      	ble.n	80187d8 <tract_compute+0x30c>
 8018788:	2304      	movs	r3, #4
 801878a:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 801878e:	6e60      	ldr	r0, [r4, #100]	; 0x64
    for(i = 1; i < tr->nose_length; i++) {
 8018790:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8018794:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8018796:	4418      	add	r0, r3
 8018798:	eb05 0e03 	add.w	lr, r5, r3
 801879c:	edd0 7a00 	vldr	s15, [r0]
 80187a0:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80187a4:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80187a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187ac:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80187ae:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80187b0:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80187b4:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80187b8:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 80187bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80187be:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80187c0:	4419      	add	r1, r3
 80187c2:	441a      	add	r2, r3
 80187c4:	3304      	adds	r3, #4
 80187c6:	ed91 7a00 	vldr	s14, [r1]
 80187ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80187ce:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 80187d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80187d4:	4562      	cmp	r2, ip
 80187d6:	dcda      	bgt.n	801878e <tract_compute+0x2c2>
    for(i = 0; i < tr->nose_length; i++) {
 80187d8:	2a00      	cmp	r2, #0
 80187da:	dd13      	ble.n	8018804 <tract_compute+0x338>
 80187dc:	2300      	movs	r3, #0
 80187de:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
 80187e0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80187e2:	469c      	mov	ip, r3
 80187e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    for(i = 0; i < tr->nose_length; i++) {
 80187e6:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
 80187e8:	4419      	add	r1, r3
 80187ea:	441a      	add	r2, r3
 80187ec:	3304      	adds	r3, #4
 80187ee:	6809      	ldr	r1, [r1, #0]
 80187f0:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 80187f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80187f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80187f6:	4419      	add	r1, r3
 80187f8:	4462      	add	r2, ip
 80187fa:	6809      	ldr	r1, [r1, #0]
 80187fc:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 80187fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8018800:	4282      	cmp	r2, r0
 8018802:	dced      	bgt.n	80187e0 <tract_compute+0x314>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 8018804:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018806:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801880a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801880e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
}
 8018812:	b002      	add	sp, #8
 8018814:	ecbd 8b06 	vpop	{d8-d10}
 8018818:	bd70      	pop	{r4, r5, r6, pc}
 801881a:	bf00      	nop
 801881c:	3e4ccccd 	.word	0x3e4ccccd
 8018820:	3f7fbe77 	.word	0x3f7fbe77

08018824 <tract_calculate_nose_reflections>:
	_tract* tr = *t;
 8018824:	6803      	ldr	r3, [r0, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8018826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018828:	2a00      	cmp	r2, #0
 801882a:	dd4e      	ble.n	80188ca <tract_calculate_nose_reflections+0xa6>
 801882c:	2200      	movs	r2, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 801882e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8018832:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018836:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
 801883a:	3201      	adds	r2, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 801883c:	edd0 7a00 	vldr	s15, [r0]
 8018840:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018844:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
 8018848:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801884a:	4291      	cmp	r1, r2
 801884c:	dcef      	bgt.n	801882e <tract_calculate_nose_reflections+0xa>
    for(i = 1; i < tr->nose_length; i++) {
 801884e:	2901      	cmp	r1, #1
 8018850:	dd3b      	ble.n	80188ca <tract_calculate_nose_reflections+0xa6>
 8018852:	2000      	movs	r0, #0
 8018854:	2201      	movs	r2, #1
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
 8018856:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80188cc <tract_calculate_nose_reflections+0xa8>
 801885a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80188d0 <tract_calculate_nose_reflections+0xac>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 801885e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80188d4 <tract_calculate_nose_reflections+0xb0>
{
 8018862:	b500      	push	{lr}
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
 8018864:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8018866:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801886a:	eb01 0e00 	add.w	lr, r1, r0
 801886e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018872:	ed9e 7a00 	vldr	s14, [lr]
 8018876:	edd1 7a00 	vldr	s15, [r1]
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 801887a:	ee37 6a67 	vsub.f32	s12, s14, s15
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
 801887e:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 8018882:	ee66 6a25 	vmul.f32	s13, s12, s11
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
 8018886:	eef4 7a45 	vcmp.f32	s15, s10
 801888a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801888e:	db0f      	blt.n	80188b0 <tract_calculate_nose_reflections+0x8c>
 8018890:	eef4 7a64 	vcmp.f32	s15, s9
 8018894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018898:	d80a      	bhi.n	80188b0 <tract_calculate_nose_reflections+0x8c>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 801889a:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
 801889c:	3201      	adds	r2, #1
 801889e:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 80188a0:	4461      	add	r1, ip
 80188a2:	edc1 6a00 	vstr	s13, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 80188a6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80188a8:	428a      	cmp	r2, r1
 80188aa:	dbdb      	blt.n	8018864 <tract_calculate_nose_reflections+0x40>
}
 80188ac:	f85d fb04 	ldr.w	pc, [sp], #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 80188b0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80188b4:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
 80188b6:	3201      	adds	r2, #1
 80188b8:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 80188ba:	4461      	add	r1, ip
 80188bc:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 80188c0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80188c2:	4291      	cmp	r1, r2
 80188c4:	dcce      	bgt.n	8018864 <tract_calculate_nose_reflections+0x40>
}
 80188c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80188ca:	4770      	bx	lr
 80188cc:	ba83126f 	.word	0xba83126f
 80188d0:	3a83126f 	.word	0x3a83126f
 80188d4:	42c80000 	.word	0x42c80000

080188d8 <tract_initToPool>:
{
 80188d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188dc:	ed2d 8b02 	vpush	{d8}
	_tMempool* m = *mp;
 80188e0:	681b      	ldr	r3, [r3, #0]
{
 80188e2:	b082      	sub	sp, #8
 80188e4:	ee08 1a10 	vmov	s16, r1
 80188e8:	4605      	mov	r5, r0
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 80188ea:	4619      	mov	r1, r3
 80188ec:	20e8      	movs	r0, #232	; 0xe8
{
 80188ee:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 80188f0:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 80188f2:	f7fb ff19 	bl	8014728 <mpool_calloc>
    tr->invN = 1.0f / n;
 80188f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat n = numTractSections;
 80188fa:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->nose_length = n*0.636363636363636f; //28
 80188fe:	eddf 5ad4 	vldr	s11, [pc, #848]	; 8018c50 <tract_initToPool+0x378>
    tr->tip_start = n*0.727272727272727f;
 8018902:	ed9f 6ad4 	vldr	s12, [pc, #848]	; 8018c54 <tract_initToPool+0x37c>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8018906:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
 801890a:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8018c58 <tract_initToPool+0x380>
	tr->turbuluencePointDiameter[0] = 1.5f;
 801890e:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
    tr->invN = 1.0f / n;
 8018912:	ee87 2a27 	vdiv.f32	s4, s14, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8018916:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8018c5c <tract_initToPool+0x384>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801891a:	eddf 1ad1 	vldr	s3, [pc, #836]	; 8018c60 <tract_initToPool+0x388>
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 801891e:	4604      	mov	r4, r0
    tr->lip_start = n*0.886363636363636f;
 8018920:	ed9f 5ad0 	vldr	s10, [pc, #832]	; 8018c64 <tract_initToPool+0x38c>
    tr->glottal_reflection = 0.75f;
 8018924:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
	tr->mempool = m;
 8018928:	9b00      	ldr	r3, [sp, #0]
	tr->turbuluencePointPosition[0] = n* 0.45f;
 801892a:	ed9f 4acf 	vldr	s8, [pc, #828]	; 8018c68 <tract_initToPool+0x390>
    tr->nose_length = n*0.636363636363636f; //28
 801892e:	ee67 5aa5 	vmul.f32	s11, s15, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8018932:	6028      	str	r0, [r5, #0]
    tr->tip_start = n*0.727272727272727f;
 8018934:	ee27 6a86 	vmul.f32	s12, s15, s12
	tr->mempool = m;
 8018938:	6003      	str	r3, [r0, #0]
    tr->blade_start = n*0.227272727272727f;
 801893a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    tr->reflection_left = 0.0f;
 801893e:	2300      	movs	r3, #0
    tr->nose_length = n*0.636363636363636f; //28
 8018940:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->lip_reflection = -0.85f;
 8018944:	f8df c350 	ldr.w	ip, [pc, #848]	; 8018c98 <tract_initToPool+0x3c0>
    tr->tip_start = n*0.727272727272727f;
 8018948:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->movement_speed = 200.0f;
 801894c:	4ac7      	ldr	r2, [pc, #796]	; (8018c6c <tract_initToPool+0x394>)
    tr->blade_start = n*0.227272727272727f;
 801894e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018952:	00bd      	lsls	r5, r7, #2
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8018954:	ee77 4a87 	vadd.f32	s9, s15, s14
	LEAF* leaf = m->leaf;
 8018958:	9900      	ldr	r1, [sp, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801895a:	eef8 2ae5 	vcvt.f32.s32	s5, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 801895e:	9001      	str	r0, [sp, #4]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8018960:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
    tr->last_obstruction = -1;
 8018964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8018968:	eef8 3ae6 	vcvt.f32.s32	s7, s13
    tr->velum_target = 0.01f;
 801896c:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8018c9c <tract_initToPool+0x3c4>
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8018970:	ee74 4ae2 	vsub.f32	s9, s9, s5
	LEAF* leaf = m->leaf;
 8018974:	684e      	ldr	r6, [r1, #4]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8018976:	eea7 3ae0 	vfms.f32	s6, s15, s1
    tr->glottal_reflection = 0.75f;
 801897a:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801897e:	eee7 3aa1 	vfma.f32	s7, s15, s3
    tr->lip_reflection = -0.85f;
 8018982:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
    tr->lip_start = n*0.886363636363636f;
 8018986:	ee27 5a85 	vmul.f32	s10, s15, s10
    tr->movement_speed = 200.0f;
 801898a:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    tr->n = n; //44
 801898e:	eefd 1ae7 	vcvt.s32.f32	s3, s15
    tr->invN = 1.0f / n;
 8018992:	ed84 2a02 	vstr	s4, [r4, #8]
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8018996:	ee27 4a84 	vmul.f32	s8, s15, s8
    tr->nose_length = n*0.636363636363636f; //28
 801899a:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801899e:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    tr->tip_start = n*0.727272727272727f;
 80189a2:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80189a6:	ee67 7a81 	vmul.f32	s15, s15, s2
    tr->n = n; //44
 80189aa:	edc4 1a01 	vstr	s3, [r4, #4]
    tr->lip_start = n*0.886363636363636f;
 80189ae:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->blade_start = n*0.227272727272727f;
 80189b2:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80189b6:	edc4 4a13 	vstr	s9, [r4, #76]	; 0x4c
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 80189ba:	ee87 8a22 	vdiv.f32	s16, s14, s5
    tr->TnoiseGain = 1.0f;
 80189be:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    tr->lip_start = n*0.886363636363636f;
 80189c2:	ed84 5a16 	vstr	s10, [r4, #88]	; 0x58
    tr->AnoiseGain = 1.0f;
 80189c6:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
    tr->diameterScale = 1.0f;
 80189ca:	ed84 7a2f 	vstr	s14, [r4, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80189ce:	ed84 3a17 	vstr	s6, [r4, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80189d2:	edc4 3a18 	vstr	s7, [r4, #96]	; 0x60
    tr->reflection_left = 0.0f;
 80189d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->reflection_right = 0.0f;
 80189da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 80189de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 80189e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 80189e6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 80189ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    tr->lip_output = 0.0f;
 80189ee:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    tr->nose_output = 0.0f;
 80189f2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    tr->last_obstruction = -1;
 80189f6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80189fa:	4628      	mov	r0, r5
    tr->maxNumTractSections = maxNumTractSections;
 80189fc:	6127      	str	r7, [r4, #16]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80189fe:	1d2f      	adds	r7, r5, #4
    tr->velum_target = 0.01f;
 8018a00:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8018a04:	ed84 4a34 	vstr	s8, [r4, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8018a08:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8018a0c:	edc4 8a36 	vstr	s17, [r4, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 8018a10:	edc4 8a37 	vstr	s17, [r4, #220]	; 0xdc
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a14:	f7fb fe88 	bl	8014728 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a18:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a1a:	6160      	str	r0, [r4, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	f7fb fe83 	bl	8014728 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a22:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a24:	61a0      	str	r0, [r4, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a26:	4628      	mov	r0, r5
 8018a28:	f7fb fe7e 	bl	8014728 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a2c:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a2e:	61e0      	str	r0, [r4, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a30:	4628      	mov	r0, r5
 8018a32:	f7fb fe79 	bl	8014728 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a36:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a38:	6220      	str	r0, [r4, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a3a:	4628      	mov	r0, r5
 8018a3c:	f7fb fe74 	bl	8014728 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a40:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a42:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a44:	4628      	mov	r0, r5
 8018a46:	f7fb fe6f 	bl	8014728 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a4a:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a4c:	6260      	str	r0, [r4, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a4e:	4638      	mov	r0, r7
 8018a50:	f7fb fe6a 	bl	8014728 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a54:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a56:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a58:	4638      	mov	r0, r7
 8018a5a:	f7fb fe65 	bl	8014728 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a5e:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a60:	6320      	str	r0, [r4, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a62:	4638      	mov	r0, r7
 8018a64:	f7fb fe60 	bl	8014728 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a68:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a6a:	6360      	str	r0, [r4, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	f7fb fe5b 	bl	8014728 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a72:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a74:	63a0      	str	r0, [r4, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a76:	4628      	mov	r0, r5
 8018a78:	f7fb fe56 	bl	8014728 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a7c:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a7e:	63e0      	str	r0, [r4, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a80:	4628      	mov	r0, r5
 8018a82:	f7fb fe51 	bl	8014728 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a86:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a88:	6660      	str	r0, [r4, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	f7fb fe4c 	bl	8014728 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a90:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018a92:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a94:	4638      	mov	r0, r7
 8018a96:	f7fb fe47 	bl	8014728 <mpool_calloc>
 8018a9a:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018a9c:	9900      	ldr	r1, [sp, #0]
 8018a9e:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018aa0:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018aa2:	f7fb fe41 	bl	8014728 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018aa6:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8018aa8:	6720      	str	r0, [r4, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018aaa:	4628      	mov	r0, r5
 8018aac:	f7fb fe3c 	bl	8014728 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ab0:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ab2:	67a0      	str	r0, [r4, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	f7fb fe37 	bl	8014728 <mpool_calloc>
 8018aba:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018abc:	9900      	ldr	r1, [sp, #0]
 8018abe:	4628      	mov	r0, r5
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ac0:	6763      	str	r3, [r4, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ac2:	f7fb fe31 	bl	8014728 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
 8018ac6:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8018ac8:	67e0      	str	r0, [r4, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	dd3f      	ble.n	8018b4e <tract_initToPool+0x276>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018ace:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 8018ad2:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018ad4:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 8018ad8:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8018c70 <tract_initToPool+0x398>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8018adc:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.5f;
 8018ae0:	ed9f 4a64 	vldr	s8, [pc, #400]	; 8018c74 <tract_initToPool+0x39c>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018ae4:	ee07 3a90 	vmov	s15, r3
 8018ae8:	edd4 6a02 	vldr	s13, [r4, #8]
            diameter = 0.6f;
 8018aec:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018af4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018af8:	eef0 6a45 	vmov.f32	s13, s10
 8018afc:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8018b00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8018b08:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018b0c:	ee16 3a90 	vmov	r3, s13
 8018b10:	429a      	cmp	r2, r3
 8018b12:	db04      	blt.n	8018b1e <tract_initToPool+0x246>
            diameter = 1.5f;
 8018b14:	ee17 3a90 	vmov	r3, s15
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	fe28 7a84 	vselge.f32	s14, s17, s8
            tr->new_diameter[i] = diameter;
 8018b1e:	6a23      	ldr	r3, [r4, #32]
 8018b20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018b24:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
 8018b28:	69e3      	ldr	r3, [r4, #28]
 8018b2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018b2e:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
 8018b32:	69a3      	ldr	r3, [r4, #24]
 8018b34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018b38:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
 8018b3c:	6963      	ldr	r3, [r4, #20]
 8018b3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8018b42:	3201      	adds	r2, #1
        tr->diameter[i] =
 8018b44:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
 8018b48:	6863      	ldr	r3, [r4, #4]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	dbca      	blt.n	8018ae4 <tract_initToPool+0x20c>
	for(i = 0; i < tr->nose_length; i++) {
 8018b4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dd2f      	ble.n	8018bb4 <tract_initToPool+0x2dc>
		if(d < 1.0f) {
 8018b54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
 8018b58:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018b5a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
 8018b5e:	ed9f 4a46 	vldr	s8, [pc, #280]	; 8018c78 <tract_initToPool+0x3a0>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018b62:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
 8018b66:	eddf 4a45 	vldr	s9, [pc, #276]	; 8018c7c <tract_initToPool+0x3a4>
 8018b6a:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8018c80 <tract_initToPool+0x3a8>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8018b6e:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
 8018b72:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
 8018b76:	6fa2      	ldr	r2, [r4, #120]	; 0x78
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8018b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b7c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018b80:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 8018b84:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018b88:	eef0 7a46 	vmov.f32	s15, s12
 8018b8c:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
 8018b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 8018b94:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
 8018b98:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
 8018b9c:	f140 80af 	bpl.w	8018cfe <tract_initToPool+0x426>
		tr->nose_diameter[i] = diameter;
 8018ba0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8018ba4:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
 8018ba8:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8018baa:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8018bae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	dcdc      	bgt.n	8018b6e <tract_initToPool+0x296>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 8018bb4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8018bb8:	eddf 0a32 	vldr	s1, [pc, #200]	; 8018c84 <tract_initToPool+0x3ac>
 8018bbc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8018c88 <tract_initToPool+0x3b0>
 8018bc0:	2102      	movs	r1, #2
 8018bc2:	466a      	mov	r2, sp
        tr->tpool->pool[i]->is_free = 1;
 8018bc4:	2701      	movs	r7, #1
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 8018bc6:	f7f8 ff0d 	bl	80119e4 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
 8018bca:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8018bce:	466a      	mov	r2, sp
 8018bd0:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8018c84 <tract_initToPool+0x3ac>
 8018bd4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8018c8c <tract_initToPool+0x3b4>
 8018bd8:	2102      	movs	r1, #2
 8018bda:	f7f8 ff03 	bl	80119e4 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
 8018bde:	eddf 0a29 	vldr	s1, [pc, #164]	; 8018c84 <tract_initToPool+0x3ac>
 8018be2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8018c90 <tract_initToPool+0x3b8>
 8018be6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8018bea:	466a      	mov	r2, sp
 8018bec:	2102      	movs	r1, #2
 8018bee:	f7f8 fef9 	bl	80119e4 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8018bf2:	466a      	mov	r2, sp
 8018bf4:	2100      	movs	r1, #0
 8018bf6:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8018bfa:	f7fc fae9 	bl	80151d0 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8018bfe:	a801      	add	r0, sp, #4
 8018c00:	f7ff f946 	bl	8017e90 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
 8018c04:	a801      	add	r0, sp, #4
 8018c06:	f7ff fe0d 	bl	8018824 <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
 8018c0a:	9d01      	ldr	r5, [sp, #4]
    tr->block_time = 64.0f / leaf->sampleRate;
 8018c0c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8018c94 <tract_initToPool+0x3bc>
    tr->T = 1.0f / leaf->sampleRate;
 8018c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
 8018c14:	6fab      	ldr	r3, [r5, #120]	; 0x78
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8018c16:	201c      	movs	r0, #28
    tr->nose_diameter[0] = tr->velum_target;
 8018c18:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8018c1c:	601a      	str	r2, [r3, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8018c1e:	ed96 7a00 	vldr	s14, [r6]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8018c22:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8018c24:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8018c28:	edc5 7a2e 	vstr	s15, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
 8018c2c:	ed96 7a00 	vldr	s14, [r6]
        tr->tpool->pool[i]->time_alive = 0;
 8018c30:	2600      	movs	r6, #0
    tr->T = 1.0f / leaf->sampleRate;
 8018c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c36:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8018c3a:	f7fb fd11 	bl	8014660 <mpool_alloc>
    tr->tpool->size = 0;
 8018c3e:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8018c40:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8018c44:	461c      	mov	r4, r3
    tr->tpool->size = 0;
 8018c46:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
 8018c48:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8018c4c:	6193      	str	r3, [r2, #24]
 8018c4e:	e027      	b.n	8018ca0 <tract_initToPool+0x3c8>
 8018c50:	3f22e8ba 	.word	0x3f22e8ba
 8018c54:	3f3a2e8c 	.word	0x3f3a2e8c
 8018c58:	3e68ba2f 	.word	0x3e68ba2f
 8018c5c:	3d8ba2e9 	.word	0x3d8ba2e9
 8018c60:	3d3a2e8c 	.word	0x3d3a2e8c
 8018c64:	3f62e8ba 	.word	0x3f62e8ba
 8018c68:	3ee66666 	.word	0x3ee66666
 8018c6c:	43480000 	.word	0x43480000
 8018c70:	3f19999a 	.word	0x3f19999a
 8018c74:	3f8ccccd 	.word	0x3f8ccccd
 8018c78:	3ff33333 	.word	0x3ff33333
 8018c7c:	3fcccccd 	.word	0x3fcccccd
 8018c80:	3ecccccd 	.word	0x3ecccccd
 8018c84:	3f333333 	.word	0x3f333333
 8018c88:	447c8000 	.word	0x447c8000
 8018c8c:	44778000 	.word	0x44778000
 8018c90:	43fa0000 	.word	0x43fa0000
 8018c94:	42800000 	.word	0x42800000
 8018c98:	bf59999a 	.word	0xbf59999a
 8018c9c:	3c23d70a 	.word	0x3c23d70a
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8018ca0:	f8d5 80e0 	ldr.w	r8, [r5, #224]	; 0xe0
 8018ca4:	2020      	movs	r0, #32
 8018ca6:	9900      	ldr	r1, [sp, #0]
 8018ca8:	f7fb fcda 	bl	8014660 <mpool_alloc>
 8018cac:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8018cb0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        tr->tpool->pool[i]->position = 0;
 8018cb4:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
 8018cb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cba:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
 8018cbc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8018cc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cc4:	619c      	str	r4, [r3, #24]
        tr->tpool->pool[i]->position = 0;
 8018cc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8018cca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cce:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8018cd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8018cd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cd8:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
 8018cda:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8018cde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018ce2:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
 8018ce4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8018ce8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8018cec:	3401      	adds	r4, #1
 8018cee:	2c04      	cmp	r4, #4
        tr->tpool->pool[i]->exponent = 0;
 8018cf0:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8018cf2:	d1d5      	bne.n	8018ca0 <tract_initToPool+0x3c8>
}
 8018cf4:	b002      	add	sp, #8
 8018cf6:	ecbd 8b02 	vpop	{d8}
 8018cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
 8018cfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8018d02:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
 8018d06:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8018d08:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8018d0c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	f73f af2d 	bgt.w	8018b6e <tract_initToPool+0x296>
 8018d14:	e74e      	b.n	8018bb4 <tract_initToPool+0x2dc>
 8018d16:	bf00      	nop

08018d18 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
 8018d18:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
 8018d1a:	699d      	ldr	r5, [r3, #24]
{
 8018d1c:	b085      	sub	sp, #20
 8018d1e:	4607      	mov	r7, r0
 8018d20:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8018d22:	2018      	movs	r0, #24
 8018d24:	4629      	mov	r1, r5
{
 8018d26:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
 8018d28:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8018d2a:	f7fb fc99 	bl	8014660 <mpool_alloc>
 8018d2e:	4604      	mov	r4, r0
 8018d30:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018d32:	4629      	mov	r1, r5
	v->mempool = m;
 8018d34:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018d36:	203c      	movs	r0, #60	; 0x3c
 8018d38:	f7fb fcf6 	bl	8014728 <mpool_calloc>
 8018d3c:	6060      	str	r0, [r4, #4]
 8018d3e:	4603      	mov	r3, r0
	glot->mempool = m;
 8018d40:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018d42:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8018d48:	480d      	ldr	r0, [pc, #52]	; (8018d80 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
 8018d4a:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8018d4c:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8018d4e:	480d      	ldr	r0, [pc, #52]	; (8018d84 <tVoc_init+0x6c>)
 8018d50:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
 8018d52:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018d54:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
 8018d58:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
 8018d5e:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018d60:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glottis_setup_waveform(&glot);
 8018d64:	f7fe ff60 	bl	8017c28 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 8018d68:	ab02      	add	r3, sp, #8
 8018d6a:	9a01      	ldr	r2, [sp, #4]
 8018d6c:	4631      	mov	r1, r6
 8018d6e:	f104 0008 	add.w	r0, r4, #8
 8018d72:	f7ff fdb1 	bl	80188d8 <tract_initToPool>
	v->counter = 0;
 8018d76:	2300      	movs	r3, #0
 8018d78:	6123      	str	r3, [r4, #16]
}
 8018d7a:	b005      	add	sp, #20
 8018d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	430c0000 	.word	0x430c0000
 8018d84:	3f19999a 	.word	0x3f19999a

08018d88 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8018d88:	b538      	push	{r3, r4, r5, lr}
 8018d8a:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 8018d8e:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8018d90:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
 8018d92:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
 8018d96:	b323      	cbz	r3, 8018de2 <tVoc_tick+0x5a>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8018d98:	ee07 3a90 	vmov	s15, r3
 8018d9c:	eddf 9a21 	vldr	s19, [pc, #132]	; 8018e24 <tVoc_tick+0x9c>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
 8018da0:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8018da2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
 8018da6:	f7fe fffb 	bl	8017da0 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
 8018daa:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
 8018dac:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
 8018db0:	ee68 0a29 	vmul.f32	s1, s16, s19
 8018db4:	f7ff fb8a 	bl	80184cc <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
 8018db8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018dbc:	edd3 8a2c 	vldr	s17, [r3, #176]	; 0xb0
 8018dc0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8018dc4:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (v->doubleCompute)
 8018dc8:	b99a      	cbnz	r2, 8018df2 <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
 8018dca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018dce:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}

	v->counter = (v->counter + 1) & 63;
 8018dd2:	6923      	ldr	r3, [r4, #16]
 8018dd4:	3301      	adds	r3, #1
 8018dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dda:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8018ddc:	ecbd 8b04 	vpop	{d8-d9}
 8018de0:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8018de2:	4628      	mov	r0, r5
 8018de4:	f7ff fa7e 	bl	80182e4 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8018de8:	4628      	mov	r0, r5
 8018dea:	f7ff f851 	bl	8017e90 <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8018dee:	6923      	ldr	r3, [r4, #16]
 8018df0:	e7d2      	b.n	8018d98 <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8018df2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		tract_compute(&v->tr, glot, lambda2);
 8018df6:	4628      	mov	r0, r5
 8018df8:	eeb0 0a49 	vmov.f32	s0, s18
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8018dfc:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
 8018e00:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8018e04:	f7ff fb62 	bl	80184cc <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018e08:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.125f;
 8018e0a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018e0e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018e12:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8018e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e1a:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.125f;
 8018e1e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018e22:	e7d6      	b.n	8018dd2 <tVoc_tick+0x4a>
 8018e24:	3c800000 	.word	0x3c800000

08018e28 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 8018e28:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 8018e2a:	60d9      	str	r1, [r3, #12]
}
 8018e2c:	4770      	bx	lr
 8018e2e:	bf00      	nop

08018e30 <tVoc_setFreq>:
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
 8018e30:	6803      	ldr	r3, [r0, #0]
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018e38:	4770      	bx	lr
 8018e3a:	bf00      	nop

08018e3c <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
 8018e3c:	6800      	ldr	r0, [r0, #0]
 8018e3e:	3008      	adds	r0, #8
 8018e40:	f7ff b8e0 	b.w	8018004 <tract_newLength>

08018e44 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
 8018e44:	6803      	ldr	r3, [r0, #0]
 8018e46:	685b      	ldr	r3, [r3, #4]
 8018e48:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8018e4c:	4770      	bx	lr
 8018e4e:	bf00      	nop

08018e50 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
 8018e50:	6803      	ldr	r3, [r0, #0]
 8018e52:	689b      	ldr	r3, [r3, #8]
 8018e54:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 8018e58:	4770      	bx	lr
 8018e5a:	bf00      	nop

08018e5c <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->TnoiseGain = gain;
 8018e5c:	6803      	ldr	r3, [r0, #0]
 8018e5e:	689b      	ldr	r3, [r3, #8]
 8018e60:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 8018e64:	4770      	bx	lr
 8018e66:	bf00      	nop

08018e68 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->AnoiseGain = gain;
 8018e68:	6803      	ldr	r3, [r0, #0]
 8018e6a:	689b      	ldr	r3, [r3, #8]
 8018e6c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8018e70:	4770      	bx	lr
 8018e72:	bf00      	nop

08018e74 <tVoc_setAspirationNoiseFilterFreq>:

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
 8018e74:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8018e78:	eddf 7a05 	vldr	s15, [pc, #20]	; 8018e90 <tVoc_setAspirationNoiseFilterFreq+0x1c>
 8018e7c:	6803      	ldr	r3, [r0, #0]
 8018e7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018e82:	6898      	ldr	r0, [r3, #8]
 8018e84:	30c8      	adds	r0, #200	; 0xc8
 8018e86:	eeb0 0a67 	vmov.f32	s0, s15
 8018e8a:	f7f8 bea5 	b.w	8011bd8 <tSVF_setFreqFast>
 8018e8e:	bf00      	nop
 8018e90:	42700000 	.word	0x42700000

08018e94 <tVoc_setAspirationNoiseFilterQ>:
}

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
	_tVoc* v = *voc;
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
 8018e94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018e98:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018eb0 <tVoc_setAspirationNoiseFilterQ+0x1c>
 8018e9c:	6803      	ldr	r3, [r0, #0]
 8018e9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018ea2:	6898      	ldr	r0, [r3, #8]
 8018ea4:	30c8      	adds	r0, #200	; 0xc8
 8018ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8018eaa:	f7f8 bed7 	b.w	8011c5c <tSVF_setQ>
 8018eae:	bf00      	nop
 8018eb0:	3efae148 	.word	0x3efae148
 8018eb4:	00000000 	.word	0x00000000

08018eb8 <tVoc_set_tongue_and_touch_diameters>:
}


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8018eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eba:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
 8018ebe:	6805      	ldr	r5, [r0, #0]
{
 8018ec0:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018ec6:	68ab      	ldr	r3, [r5, #8]
{
 8018ec8:	eeb0 9a40 	vmov.f32	s18, s0
 8018ecc:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018ed0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
{
 8018ed2:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	for (i = 0; i < v->tr->n; i++)
 8018ed8:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018eda:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
 8018edc:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8018ede:	ee07 2a90 	vmov	s15, r2
 8018ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ee6:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
 8018eea:	dd0d      	ble.n	8018f08 <tVoc_set_tongue_and_touch_diameters+0x50>
 8018eec:	4630      	mov	r0, r6
 8018eee:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 8018ef0:	699b      	ldr	r3, [r3, #24]
 8018ef2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
 8018ef6:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
 8018efe:	68ab      	ldr	r3, [r5, #8]
 8018f00:	6859      	ldr	r1, [r3, #4]
 8018f02:	4291      	cmp	r1, r2
 8018f04:	dcf4      	bgt.n	8018ef0 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018f06:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8018f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018f0a:	42a2      	cmp	r2, r4
 8018f0c:	dd47      	ble.n	8018f9e <tVoc_set_tongue_and_touch_diameters+0xe6>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 8018f0e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
#ifdef ARM_MATH_CM7
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f12:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8019168 <tVoc_set_tongue_and_touch_diameters+0x2b0>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8018f16:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f1a:	eddf 9a94 	vldr	s19, [pc, #592]	; 801916c <tVoc_set_tongue_and_touch_diameters+0x2b4>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
 8018f1e:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 8018f22:	eb06 0784 	add.w	r7, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f26:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
 8018f2a:	ed9f ca91 	vldr	s24, [pc, #580]	; 8019170 <tVoc_set_tongue_and_touch_diameters+0x2b8>
			curve *= 0.94f;
 8018f2e:	eddf ba91 	vldr	s23, [pc, #580]	; 8019174 <tVoc_set_tongue_and_touch_diameters+0x2bc>
 8018f32:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8019158 <tVoc_set_tongue_and_touch_diameters+0x2a0>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f36:	eee7 9a87 	vfma.f32	s19, s15, s14
 8018f3a:	ee28 8b06 	vmul.f64	d8, d8, d6
 8018f3e:	e00c      	b.n	8018f5a <tVoc_set_tongue_and_touch_diameters+0xa2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8018f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f42:	3b02      	subs	r3, #2
 8018f44:	42a3      	cmp	r3, r4
 8018f46:	d023      	beq.n	8018f90 <tVoc_set_tongue_and_touch_diameters+0xd8>
		theDiameters[i] = 1.5f - curve;
 8018f48:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018f4c:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
 8018f4e:	ece7 7a01 	vstmia	r7!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018f52:	68ab      	ldr	r3, [r5, #8]
 8018f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018f56:	42a2      	cmp	r2, r4
 8018f58:	dd20      	ble.n	8018f9c <tVoc_set_tongue_and_touch_diameters+0xe4>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8018f5a:	ee07 4a90 	vmov	s15, r4
 8018f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018f62:	ee39 7a47 	vsub.f32	s14, s18, s14
 8018f66:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8018f6a:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f6e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8018f72:	f7e7 fb43 	bl	80005fc <arm_cos_f32>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8018f76:	68ab      	ldr	r3, [r5, #8]
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8018f78:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8018f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018f7e:	1e91      	subs	r1, r2, #2
 8018f80:	42a1      	cmp	r1, r4
 8018f82:	d008      	beq.n	8018f96 <tVoc_set_tongue_and_touch_diameters+0xde>
 8018f84:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8018f86:	3901      	subs	r1, #1
 8018f88:	42a1      	cmp	r1, r4
 8018f8a:	d004      	beq.n	8018f96 <tVoc_set_tongue_and_touch_diameters+0xde>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8018f8c:	42a2      	cmp	r2, r4
 8018f8e:	d1d7      	bne.n	8018f40 <tVoc_set_tongue_and_touch_diameters+0x88>
			curve *= 0.94f;
 8018f90:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8018f94:	e7d8      	b.n	8018f48 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
 8018f96:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8018f9a:	e7f7      	b.n	8018f8c <tVoc_set_tongue_and_touch_diameters+0xd4>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8018f9c:	6859      	ldr	r1, [r3, #4]
 8018f9e:	ee07 1a90 	vmov	s15, r1
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 8018fa2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8019178 <tVoc_set_tongue_and_touch_diameters+0x2c0>
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8018fa6:	ed9f 8a75 	vldr	s16, [pc, #468]	; 801917c <tVoc_set_tongue_and_touch_diameters+0x2c4>
 8018faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 8018fae:	ee27 7a87 	vmul.f32	s14, s15, s14
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8018fb2:	ee27 8a88 	vmul.f32	s16, s15, s16
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 8018fb6:	eeb4 7aea 	vcmpe.f32	s14, s21
 8018fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbe:	dc0e      	bgt.n	8018fde <tVoc_set_tongue_and_touch_diameters+0x126>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018fc0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8018fc4:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 8019180 <tVoc_set_tongue_and_touch_diameters+0x2c8>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018fc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8018fcc:	ee27 6a86 	vmul.f32	s12, s15, s12
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8018fd0:	eef4 6aea 	vcmpe.f32	s13, s21
 8018fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd8:	d84e      	bhi.n	8019078 <tVoc_set_tongue_and_touch_diameters+0x1c0>
 8018fda:	eeb0 8a46 	vmov.f32	s16, s12
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
		if ((width <= 0.01f) && (width >= -0.01f))
 8018fde:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019184 <tVoc_set_tongue_and_touch_diameters+0x2cc>
 8018fe2:	eeb4 8a47 	vcmp.f32	s16, s14
 8018fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fea:	d815      	bhi.n	8019018 <tVoc_set_tongue_and_touch_diameters+0x160>
 8018fec:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8019188 <tVoc_set_tongue_and_touch_diameters+0x2d0>
 8018ff0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	db0e      	blt.n	8019018 <tVoc_set_tongue_and_touch_diameters+0x160>
		{
			width = 1.0f;
		}
		Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 8018ffa:	eef4 7a6a 	vcmp.f32	s15, s21
 8018ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019002:	dd06      	ble.n	8019012 <tVoc_set_tongue_and_touch_diameters+0x15a>
 8019004:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8019008:	eeb4 bae7 	vcmpe.f32	s22, s15
 801900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019010:	d43d      	bmi.n	801908e <tVoc_set_tongue_and_touch_diameters+0x1d6>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
 8019012:	ecbd 8b0a 	vpop	{d8-d12}
 8019016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 8019018:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801901c:	eeb4 ba47 	vcmp.f32	s22, s14
 8019020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019024:	d5f5      	bpl.n	8019012 <tVoc_set_tongue_and_touch_diameters+0x15a>
 8019026:	eef4 7aea 	vcmpe.f32	s15, s21
 801902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801902e:	ddf0      	ble.n	8019012 <tVoc_set_tongue_and_touch_diameters+0x15a>
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8019030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019034:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
 8019038:	feb8 7a6a 	vrinta.f32	s14, s21
 801903c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8019040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019044:	ee38 aa26 	vadd.f32	s20, s16, s13
		int intIndex = roundf(touch_index);
 8019048:	ee17 7a10 	vmov	r7, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 801904c:	eef1 7a67 	vneg.f32	s15, s15
 8019050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019054:	ee17 4a90 	vmov	r4, s15
 8019058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801905c:	eef4 7aca 	vcmpe.f32	s15, s20
 8019060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019064:	d5d5      	bpl.n	8019012 <tVoc_set_tongue_and_touch_diameters+0x15a>
		Lfloat invWidth = 1.0f / width;
 8019066:	ee86 9a88 	vdiv.f32	s18, s13, s16
 801906a:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8019160 <tVoc_set_tongue_and_touch_diameters+0x2a8>
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 801906e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8019072:	ee29 9b07 	vmul.f64	d9, d9, d7
 8019076:	e018      	b.n	80190aa <tVoc_set_tongue_and_touch_diameters+0x1f2>
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8019078:	ee7a 5ac7 	vsub.f32	s11, s21, s14
 801907c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019080:	ee65 6a86 	vmul.f32	s13, s11, s12
 8019084:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019088:	ee38 8a06 	vadd.f32	s16, s16, s12
 801908c:	e7a7      	b.n	8018fde <tVoc_set_tongue_and_touch_diameters+0x126>
		int intIndex = roundf(touch_index);
 801908e:	fef8 7a6a 	vrinta.f32	s15, s21
 8019092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8019096:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
 801909a:	f06f 0401 	mvn.w	r4, #1
			width = 1.0f;
 801909e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int intIndex = roundf(touch_index);
 80190a2:	ee17 7a90 	vmov	r7, s15
 80190a6:	ed9f 9b2e 	vldr	d9, [pc, #184]	; 8019160 <tVoc_set_tongue_and_touch_diameters+0x2a8>
 80190aa:	443c      	add	r4, r7
			if (relpos <= 0.0f) shrink = 0.0f;
 80190ac:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
			else if (relpos > width) shrink = 1.0f;
 80190b0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80190b4:	f1c7 0701 	rsb	r7, r7, #1
 80190b8:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			if (relpos <= 0.0f) shrink = 0.0f;
 80190bc:	eddf ba33 	vldr	s23, [pc, #204]	; 801918c <tVoc_set_tongue_and_touch_diameters+0x2d4>
			Lfloat relpos = (intIndex+i) - touch_index;
 80190c0:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80190c4:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
 80190c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80190ca:	db26      	blt.n	801911a <tVoc_set_tongue_and_touch_diameters+0x262>
 80190cc:	68ab      	ldr	r3, [r5, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
 80190ce:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80190d2:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
 80190d4:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80190d8:	429c      	cmp	r4, r3
 80190da:	da1e      	bge.n	801911a <tVoc_set_tongue_and_touch_diameters+0x262>
			if (relpos <= 0.0f) shrink = 0.0f;
 80190dc:	eef4 7ae8 	vcmpe.f32	s15, s17
			relpos = fabsf(relpos)-0.5f;
 80190e0:	ee37 0ae8 	vsub.f32	s0, s15, s17
			if (relpos <= 0.0f) shrink = 0.0f;
 80190e4:	eef0 7a6b 	vmov.f32	s15, s23
 80190e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ec:	d906      	bls.n	80190fc <tVoc_set_tongue_and_touch_diameters+0x244>
			else if (relpos > width) shrink = 1.0f;
 80190ee:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80190f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80190f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190fa:	dd1d      	ble.n	8019138 <tVoc_set_tongue_and_touch_diameters+0x280>
			if (touch_diameter < theDiameters[intIndex+i])
 80190fc:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8019100:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 8019104:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8019108:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 801910c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8019110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019114:	bfc8      	it	gt
 8019116:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 801911a:	193b      	adds	r3, r7, r4
 801911c:	3604      	adds	r6, #4
 801911e:	3401      	adds	r4, #1
 8019120:	ee07 3a90 	vmov	s15, r3
 8019124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019128:	eef4 7aca 	vcmpe.f32	s15, s20
 801912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019130:	d4c6      	bmi.n	80190c0 <tVoc_set_tongue_and_touch_diameters+0x208>
}
 8019132:	ecbd 8b0a 	vpop	{d8-d12}
 8019136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 8019138:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801913c:	ee20 0b09 	vmul.f64	d0, d0, d9
 8019140:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019144:	f7e7 fa5a 	bl	80005fc <arm_cos_f32>
 8019148:	ee3c 0a40 	vsub.f32	s0, s24, s0
 801914c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019150:	e7d4      	b.n	80190fc <tVoc_set_tongue_and_touch_diameters+0x244>
 8019152:	bf00      	nop
 8019154:	f3af 8000 	nop.w
 8019158:	4d2562ef 	.word	0x4d2562ef
 801915c:	400ba561 	.word	0x400ba561
 8019160:	54442d18 	.word	0x54442d18
 8019164:	400921fb 	.word	0x400921fb
 8019168:	3f2aaaab 	.word	0x3f2aaaab
 801916c:	3f99999a 	.word	0x3f99999a
 8019170:	3f4ccccd 	.word	0x3f4ccccd
 8019174:	3f70a3d7 	.word	0x3f70a3d7
 8019178:	3f11745d 	.word	0x3f11745d
 801917c:	3e68ba2f 	.word	0x3e68ba2f
 8019180:	3de8ba2f 	.word	0x3de8ba2f
 8019184:	3c23d70a 	.word	0x3c23d70a
 8019188:	bc23d70a 	.word	0xbc23d70a
 801918c:	00000000 	.word	0x00000000

08019190 <tVoc_set_tongue_shape_and_touch>:
{
 8019190:	b500      	push	{lr}
	tongue_diameter += 2.05f;
 8019192:	eddf 7a23 	vldr	s15, [pc, #140]	; 8019220 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8019196:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801919a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8019224 <tVoc_set_tongue_shape_and_touch+0x94>
{
 801919e:	ed2d 8b04 	vpush	{d8-d9}
 80191a2:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
 80191a6:	b083      	sub	sp, #12
	_tVoc* v = *voc;
 80191a8:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
 80191aa:	eddf 9a1f 	vldr	s19, [pc, #124]	; 8019228 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80191ae:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
 80191b2:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80191b4:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
 80191b6:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
 80191b8:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
 80191bc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801922c <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80191c0:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
	touch_diameter *= 1.6f;
 80191c4:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80191c8:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80191cc:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80191d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80191d4:	69d9      	ldr	r1, [r3, #28]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80191d6:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80191da:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80191de:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80191e2:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80191e6:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80191ea:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80191ee:	eeb0 0a68 	vmov.f32	s0, s17
 80191f2:	eeb0 1a49 	vmov.f32	s2, s18
 80191f6:	f7ff fe5f 	bl	8018eb8 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 80191fa:	9b01      	ldr	r3, [sp, #4]
 80191fc:	689a      	ldr	r2, [r3, #8]
 80191fe:	edc2 8a34 	vstr	s17, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 8019202:	689a      	ldr	r2, [r3, #8]
 8019204:	edc2 9a36 	vstr	s19, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
 8019208:	689a      	ldr	r2, [r3, #8]
 801920a:	ed82 9a35 	vstr	s18, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 801920e:	689b      	ldr	r3, [r3, #8]
 8019210:	ed83 8a37 	vstr	s16, [r3, #220]	; 0xdc
}
 8019214:	b003      	add	sp, #12
 8019216:	ecbd 8b04 	vpop	{d8-d9}
 801921a:	f85d fb04 	ldr.w	pc, [sp], #4
 801921e:	bf00      	nop
 8019220:	3fb9999a 	.word	0x3fb9999a
 8019224:	00000000 	.word	0x00000000
 8019228:	40033333 	.word	0x40033333
 801922c:	3fcccccd 	.word	0x3fcccccd

08019230 <tVoc_rescaleDiameter>:
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
	v->tr->diameterScale = scale;
 8019230:	6803      	ldr	r3, [r0, #0]
 8019232:	689b      	ldr	r3, [r3, #8]
 8019234:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
 8019238:	4770      	bx	lr
 801923a:	bf00      	nop

0801923c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop

08019240 <LEAF_init>:
{
 8019240:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8019242:	6200      	str	r0, [r0, #32]
{
 8019244:	4604      	mov	r4, r0
 8019246:	461d      	mov	r5, r3
 8019248:	ed2d 8b02 	vpush	{d8}
 801924c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8019250:	f7fb f9ec 	bl	801462c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8019254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019258:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801928c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 801925c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801925e:	4b0c      	ldr	r3, [pc, #48]	; (8019290 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8019260:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8019264:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8019268:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801926a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 801926c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8019270:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8019274:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019278:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 801927c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019280:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8019284:	ecbd 8b02 	vpop	{d8}
 8019288:	bd38      	pop	{r3, r4, r5, pc}
 801928a:	bf00      	nop
 801928c:	40c90fdb 	.word	0x40c90fdb
 8019290:	0801923d 	.word	0x0801923d

08019294 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8019294:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8019296:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801929a:	2401      	movs	r4, #1
 801929c:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 801929e:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 80192a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80192a4:	4718      	bx	r3
 80192a6:	bf00      	nop

080192a8 <__itoa>:
 80192a8:	1e93      	subs	r3, r2, #2
 80192aa:	2b22      	cmp	r3, #34	; 0x22
 80192ac:	b510      	push	{r4, lr}
 80192ae:	460c      	mov	r4, r1
 80192b0:	d904      	bls.n	80192bc <__itoa+0x14>
 80192b2:	2300      	movs	r3, #0
 80192b4:	700b      	strb	r3, [r1, #0]
 80192b6:	461c      	mov	r4, r3
 80192b8:	4620      	mov	r0, r4
 80192ba:	bd10      	pop	{r4, pc}
 80192bc:	2a0a      	cmp	r2, #10
 80192be:	d109      	bne.n	80192d4 <__itoa+0x2c>
 80192c0:	2800      	cmp	r0, #0
 80192c2:	da07      	bge.n	80192d4 <__itoa+0x2c>
 80192c4:	232d      	movs	r3, #45	; 0x2d
 80192c6:	700b      	strb	r3, [r1, #0]
 80192c8:	4240      	negs	r0, r0
 80192ca:	2101      	movs	r1, #1
 80192cc:	4421      	add	r1, r4
 80192ce:	f000 f805 	bl	80192dc <__utoa>
 80192d2:	e7f1      	b.n	80192b8 <__itoa+0x10>
 80192d4:	2100      	movs	r1, #0
 80192d6:	e7f9      	b.n	80192cc <__itoa+0x24>

080192d8 <itoa>:
 80192d8:	f7ff bfe6 	b.w	80192a8 <__itoa>

080192dc <__utoa>:
 80192dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192de:	4c1f      	ldr	r4, [pc, #124]	; (801935c <__utoa+0x80>)
 80192e0:	b08b      	sub	sp, #44	; 0x2c
 80192e2:	4605      	mov	r5, r0
 80192e4:	460b      	mov	r3, r1
 80192e6:	466e      	mov	r6, sp
 80192e8:	f104 0c20 	add.w	ip, r4, #32
 80192ec:	6820      	ldr	r0, [r4, #0]
 80192ee:	6861      	ldr	r1, [r4, #4]
 80192f0:	4637      	mov	r7, r6
 80192f2:	c703      	stmia	r7!, {r0, r1}
 80192f4:	3408      	adds	r4, #8
 80192f6:	4564      	cmp	r4, ip
 80192f8:	463e      	mov	r6, r7
 80192fa:	d1f7      	bne.n	80192ec <__utoa+0x10>
 80192fc:	7921      	ldrb	r1, [r4, #4]
 80192fe:	7139      	strb	r1, [r7, #4]
 8019300:	1e91      	subs	r1, r2, #2
 8019302:	6820      	ldr	r0, [r4, #0]
 8019304:	6038      	str	r0, [r7, #0]
 8019306:	2922      	cmp	r1, #34	; 0x22
 8019308:	f04f 0100 	mov.w	r1, #0
 801930c:	d904      	bls.n	8019318 <__utoa+0x3c>
 801930e:	7019      	strb	r1, [r3, #0]
 8019310:	460b      	mov	r3, r1
 8019312:	4618      	mov	r0, r3
 8019314:	b00b      	add	sp, #44	; 0x2c
 8019316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019318:	1e58      	subs	r0, r3, #1
 801931a:	4684      	mov	ip, r0
 801931c:	fbb5 f7f2 	udiv	r7, r5, r2
 8019320:	fb02 5617 	mls	r6, r2, r7, r5
 8019324:	3628      	adds	r6, #40	; 0x28
 8019326:	446e      	add	r6, sp
 8019328:	460c      	mov	r4, r1
 801932a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801932e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8019332:	462e      	mov	r6, r5
 8019334:	42b2      	cmp	r2, r6
 8019336:	f101 0101 	add.w	r1, r1, #1
 801933a:	463d      	mov	r5, r7
 801933c:	d9ee      	bls.n	801931c <__utoa+0x40>
 801933e:	2200      	movs	r2, #0
 8019340:	545a      	strb	r2, [r3, r1]
 8019342:	1919      	adds	r1, r3, r4
 8019344:	1aa5      	subs	r5, r4, r2
 8019346:	42aa      	cmp	r2, r5
 8019348:	dae3      	bge.n	8019312 <__utoa+0x36>
 801934a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801934e:	780e      	ldrb	r6, [r1, #0]
 8019350:	7006      	strb	r6, [r0, #0]
 8019352:	3201      	adds	r2, #1
 8019354:	f801 5901 	strb.w	r5, [r1], #-1
 8019358:	e7f4      	b.n	8019344 <__utoa+0x68>
 801935a:	bf00      	nop
 801935c:	08029e08 	.word	0x08029e08

08019360 <memset>:
 8019360:	4402      	add	r2, r0
 8019362:	4603      	mov	r3, r0
 8019364:	4293      	cmp	r3, r2
 8019366:	d100      	bne.n	801936a <memset+0xa>
 8019368:	4770      	bx	lr
 801936a:	f803 1b01 	strb.w	r1, [r3], #1
 801936e:	e7f9      	b.n	8019364 <memset+0x4>

08019370 <__libc_init_array>:
 8019370:	b570      	push	{r4, r5, r6, lr}
 8019372:	4d0d      	ldr	r5, [pc, #52]	; (80193a8 <__libc_init_array+0x38>)
 8019374:	4c0d      	ldr	r4, [pc, #52]	; (80193ac <__libc_init_array+0x3c>)
 8019376:	1b64      	subs	r4, r4, r5
 8019378:	10a4      	asrs	r4, r4, #2
 801937a:	2600      	movs	r6, #0
 801937c:	42a6      	cmp	r6, r4
 801937e:	d109      	bne.n	8019394 <__libc_init_array+0x24>
 8019380:	4d0b      	ldr	r5, [pc, #44]	; (80193b0 <__libc_init_array+0x40>)
 8019382:	4c0c      	ldr	r4, [pc, #48]	; (80193b4 <__libc_init_array+0x44>)
 8019384:	f002 f9e0 	bl	801b748 <_init>
 8019388:	1b64      	subs	r4, r4, r5
 801938a:	10a4      	asrs	r4, r4, #2
 801938c:	2600      	movs	r6, #0
 801938e:	42a6      	cmp	r6, r4
 8019390:	d105      	bne.n	801939e <__libc_init_array+0x2e>
 8019392:	bd70      	pop	{r4, r5, r6, pc}
 8019394:	f855 3b04 	ldr.w	r3, [r5], #4
 8019398:	4798      	blx	r3
 801939a:	3601      	adds	r6, #1
 801939c:	e7ee      	b.n	801937c <__libc_init_array+0xc>
 801939e:	f855 3b04 	ldr.w	r3, [r5], #4
 80193a2:	4798      	blx	r3
 80193a4:	3601      	adds	r6, #1
 80193a6:	e7f2      	b.n	801938e <__libc_init_array+0x1e>
 80193a8:	0802b0f8 	.word	0x0802b0f8
 80193ac:	0802b0f8 	.word	0x0802b0f8
 80193b0:	0802b0f8 	.word	0x0802b0f8
 80193b4:	0802b0fc 	.word	0x0802b0fc

080193b8 <memcpy>:
 80193b8:	440a      	add	r2, r1
 80193ba:	4291      	cmp	r1, r2
 80193bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80193c0:	d100      	bne.n	80193c4 <memcpy+0xc>
 80193c2:	4770      	bx	lr
 80193c4:	b510      	push	{r4, lr}
 80193c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193ce:	4291      	cmp	r1, r2
 80193d0:	d1f9      	bne.n	80193c6 <memcpy+0xe>
 80193d2:	bd10      	pop	{r4, pc}

080193d4 <expf>:
 80193d4:	ee10 2a10 	vmov	r2, s0
 80193d8:	f240 412a 	movw	r1, #1066	; 0x42a
 80193dc:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80193e0:	428b      	cmp	r3, r1
 80193e2:	b430      	push	{r4, r5}
 80193e4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80193e8:	d92a      	bls.n	8019440 <expf+0x6c>
 80193ea:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80193ee:	d058      	beq.n	80194a2 <expf+0xce>
 80193f0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80193f4:	d303      	bcc.n	80193fe <expf+0x2a>
 80193f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80193fa:	bc30      	pop	{r4, r5}
 80193fc:	4770      	bx	lr
 80193fe:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80194a8 <expf+0xd4>
 8019402:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801940a:	dd03      	ble.n	8019414 <expf+0x40>
 801940c:	bc30      	pop	{r4, r5}
 801940e:	2000      	movs	r0, #0
 8019410:	f000 bbd8 	b.w	8019bc4 <__math_oflowf>
 8019414:	eddf 7a25 	vldr	s15, [pc, #148]	; 80194ac <expf+0xd8>
 8019418:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801941c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019420:	d503      	bpl.n	801942a <expf+0x56>
 8019422:	bc30      	pop	{r4, r5}
 8019424:	2000      	movs	r0, #0
 8019426:	f000 bbc1 	b.w	8019bac <__math_uflowf>
 801942a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80194b0 <expf+0xdc>
 801942e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019436:	d503      	bpl.n	8019440 <expf+0x6c>
 8019438:	bc30      	pop	{r4, r5}
 801943a:	2000      	movs	r0, #0
 801943c:	f000 bbbc 	b.w	8019bb8 <__math_may_uflowf>
 8019440:	4b1c      	ldr	r3, [pc, #112]	; (80194b4 <expf+0xe0>)
 8019442:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019446:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801944a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801944e:	eeb0 7b44 	vmov.f64	d7, d4
 8019452:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019456:	ee17 0a10 	vmov	r0, s14
 801945a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801945e:	f000 021f 	and.w	r2, r0, #31
 8019462:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8019466:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801946a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801946e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8019472:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8019476:	eea5 6b07 	vfma.f64	d6, d5, d7
 801947a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801947e:	684d      	ldr	r5, [r1, #4]
 8019480:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8019484:	2100      	movs	r1, #0
 8019486:	190a      	adds	r2, r1, r4
 8019488:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801948c:	eea5 0b07 	vfma.f64	d0, d5, d7
 8019490:	ec43 2b17 	vmov	d7, r2, r3
 8019494:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019498:	ee20 0b07 	vmul.f64	d0, d0, d7
 801949c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80194a0:	e7ab      	b.n	80193fa <expf+0x26>
 80194a2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80194b8 <expf+0xe4>
 80194a6:	e7a8      	b.n	80193fa <expf+0x26>
 80194a8:	42b17217 	.word	0x42b17217
 80194ac:	c2cff1b4 	.word	0xc2cff1b4
 80194b0:	c2ce8ecf 	.word	0xc2ce8ecf
 80194b4:	08029e30 	.word	0x08029e30
 80194b8:	00000000 	.word	0x00000000

080194bc <logf>:
 80194bc:	ee10 3a10 	vmov	r3, s0
 80194c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80194c4:	b410      	push	{r4}
 80194c6:	d055      	beq.n	8019574 <logf+0xb8>
 80194c8:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80194cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80194d0:	d31a      	bcc.n	8019508 <logf+0x4c>
 80194d2:	005a      	lsls	r2, r3, #1
 80194d4:	d104      	bne.n	80194e0 <logf+0x24>
 80194d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194da:	2001      	movs	r0, #1
 80194dc:	f000 bb78 	b.w	8019bd0 <__math_divzerof>
 80194e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80194e4:	d043      	beq.n	801956e <logf+0xb2>
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	db02      	blt.n	80194f0 <logf+0x34>
 80194ea:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80194ee:	d303      	bcc.n	80194f8 <logf+0x3c>
 80194f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194f4:	f000 bb7e 	b.w	8019bf4 <__math_invalidf>
 80194f8:	eddf 7a20 	vldr	s15, [pc, #128]	; 801957c <logf+0xc0>
 80194fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019500:	ee10 3a10 	vmov	r3, s0
 8019504:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8019508:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801950c:	491c      	ldr	r1, [pc, #112]	; (8019580 <logf+0xc4>)
 801950e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8019512:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8019516:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801951a:	0dd4      	lsrs	r4, r2, #23
 801951c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8019520:	05e4      	lsls	r4, r4, #23
 8019522:	ed90 6b00 	vldr	d6, [r0]
 8019526:	1b1b      	subs	r3, r3, r4
 8019528:	ee07 3a90 	vmov	s15, r3
 801952c:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8019530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019534:	15d2      	asrs	r2, r2, #23
 8019536:	eea6 0b07 	vfma.f64	d0, d6, d7
 801953a:	ed90 6b02 	vldr	d6, [r0, #8]
 801953e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8019542:	ee07 2a90 	vmov	s15, r2
 8019546:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801954a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801954e:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8019552:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8019556:	eea5 7b00 	vfma.f64	d7, d5, d0
 801955a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801955e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019562:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019566:	eea4 0b07 	vfma.f64	d0, d4, d7
 801956a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801956e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019572:	4770      	bx	lr
 8019574:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019584 <logf+0xc8>
 8019578:	e7f9      	b.n	801956e <logf+0xb2>
 801957a:	bf00      	nop
 801957c:	4b000000 	.word	0x4b000000
 8019580:	08029f78 	.word	0x08029f78
 8019584:	00000000 	.word	0x00000000

08019588 <log2f>:
 8019588:	ee10 2a10 	vmov	r2, s0
 801958c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019590:	b410      	push	{r4}
 8019592:	d055      	beq.n	8019640 <log2f+0xb8>
 8019594:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8019598:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801959c:	d31a      	bcc.n	80195d4 <log2f+0x4c>
 801959e:	0053      	lsls	r3, r2, #1
 80195a0:	d104      	bne.n	80195ac <log2f+0x24>
 80195a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195a6:	2001      	movs	r0, #1
 80195a8:	f000 bb12 	b.w	8019bd0 <__math_divzerof>
 80195ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80195b0:	d043      	beq.n	801963a <log2f+0xb2>
 80195b2:	2a00      	cmp	r2, #0
 80195b4:	db02      	blt.n	80195bc <log2f+0x34>
 80195b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80195ba:	d303      	bcc.n	80195c4 <log2f+0x3c>
 80195bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195c0:	f000 bb18 	b.w	8019bf4 <__math_invalidf>
 80195c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8019648 <log2f+0xc0>
 80195c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80195cc:	ee10 3a10 	vmov	r3, s0
 80195d0:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 80195d4:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 80195d8:	491c      	ldr	r1, [pc, #112]	; (801964c <log2f+0xc4>)
 80195da:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80195de:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80195e2:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 80195e6:	0ddc      	lsrs	r4, r3, #23
 80195e8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80195ec:	05e4      	lsls	r4, r4, #23
 80195ee:	ed90 5b00 	vldr	d5, [r0]
 80195f2:	1b12      	subs	r2, r2, r4
 80195f4:	ee07 2a90 	vmov	s15, r2
 80195f8:	15db      	asrs	r3, r3, #23
 80195fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80195fe:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019602:	ed90 7b02 	vldr	d7, [r0, #8]
 8019606:	ee26 4b06 	vmul.f64	d4, d6, d6
 801960a:	ee00 3a10 	vmov	s0, r3
 801960e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8019612:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8019616:	ee30 0b07 	vadd.f64	d0, d0, d7
 801961a:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801961e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019622:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8019626:	eea5 7b04 	vfma.f64	d7, d5, d4
 801962a:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801962e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019632:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019636:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801963a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801963e:	4770      	bx	lr
 8019640:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019650 <log2f+0xc8>
 8019644:	e7f9      	b.n	801963a <log2f+0xb2>
 8019646:	bf00      	nop
 8019648:	4b000000 	.word	0x4b000000
 801964c:	0802a908 	.word	0x0802a908
	...

08019658 <exp>:
 8019658:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801965a:	ee10 3a90 	vmov	r3, s1
 801965e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8019662:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8019666:	18a2      	adds	r2, r4, r2
 8019668:	2a3e      	cmp	r2, #62	; 0x3e
 801966a:	ee10 1a10 	vmov	r1, s0
 801966e:	d922      	bls.n	80196b6 <exp+0x5e>
 8019670:	2a00      	cmp	r2, #0
 8019672:	da06      	bge.n	8019682 <exp+0x2a>
 8019674:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8019678:	ee30 0b07 	vadd.f64	d0, d0, d7
 801967c:	b004      	add	sp, #16
 801967e:	bcf0      	pop	{r4, r5, r6, r7}
 8019680:	4770      	bx	lr
 8019682:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8019686:	f04f 0000 	mov.w	r0, #0
 801968a:	d913      	bls.n	80196b4 <exp+0x5c>
 801968c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8019690:	bf08      	it	eq
 8019692:	4281      	cmpeq	r1, r0
 8019694:	f000 80a0 	beq.w	80197d8 <exp+0x180>
 8019698:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801969c:	4294      	cmp	r4, r2
 801969e:	d0e9      	beq.n	8019674 <exp+0x1c>
 80196a0:	4283      	cmp	r3, r0
 80196a2:	da03      	bge.n	80196ac <exp+0x54>
 80196a4:	b004      	add	sp, #16
 80196a6:	bcf0      	pop	{r4, r5, r6, r7}
 80196a8:	f000 b8c6 	b.w	8019838 <__math_uflow>
 80196ac:	b004      	add	sp, #16
 80196ae:	bcf0      	pop	{r4, r5, r6, r7}
 80196b0:	f000 b8ca 	b.w	8019848 <__math_oflow>
 80196b4:	4604      	mov	r4, r0
 80196b6:	4950      	ldr	r1, [pc, #320]	; (80197f8 <exp+0x1a0>)
 80196b8:	ed91 6b02 	vldr	d6, [r1, #8]
 80196bc:	ed91 5b00 	vldr	d5, [r1]
 80196c0:	eeb0 7b46 	vmov.f64	d7, d6
 80196c4:	eea5 7b00 	vfma.f64	d7, d5, d0
 80196c8:	ee17 5a10 	vmov	r5, s14
 80196cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80196d0:	ed91 6b04 	vldr	d6, [r1, #16]
 80196d4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80196d8:	eea6 0b07 	vfma.f64	d0, d6, d7
 80196dc:	ed91 6b06 	vldr	d6, [r1, #24]
 80196e0:	18d8      	adds	r0, r3, r3
 80196e2:	f100 030f 	add.w	r3, r0, #15
 80196e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80196ea:	eea6 0b07 	vfma.f64	d0, d6, d7
 80196ee:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80196f2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80196f6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80196fa:	ed91 4b08 	vldr	d4, [r1, #32]
 80196fe:	ee30 6b06 	vadd.f64	d6, d0, d6
 8019702:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8019706:	eea3 4b00 	vfma.f64	d4, d3, d0
 801970a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801970e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019712:	ee27 7b07 	vmul.f64	d7, d7, d7
 8019716:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 801971a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801971e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8019722:	eea3 4b00 	vfma.f64	d4, d3, d0
 8019726:	2600      	movs	r6, #0
 8019728:	19f2      	adds	r2, r6, r7
 801972a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801972e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8019732:	2c00      	cmp	r4, #0
 8019734:	d14b      	bne.n	80197ce <exp+0x176>
 8019736:	42b5      	cmp	r5, r6
 8019738:	db10      	blt.n	801975c <exp+0x104>
 801973a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801973e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80197e0 <exp+0x188>
 8019742:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8019746:	4610      	mov	r0, r2
 8019748:	ec41 0b10 	vmov	d0, r0, r1
 801974c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8019750:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019754:	b004      	add	sp, #16
 8019756:	bcf0      	pop	{r4, r5, r6, r7}
 8019758:	f000 b88a 	b.w	8019870 <__math_check_oflow>
 801975c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019760:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8019764:	4610      	mov	r0, r2
 8019766:	ec41 0b17 	vmov	d7, r0, r1
 801976a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801976e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019772:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019776:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801977a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801977e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80197e8 <exp+0x190>
 8019782:	d51e      	bpl.n	80197c2 <exp+0x16a>
 8019784:	ee35 3b04 	vadd.f64	d3, d5, d4
 8019788:	ee37 7b45 	vsub.f64	d7, d7, d5
 801978c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019790:	ee34 6b43 	vsub.f64	d6, d4, d3
 8019794:	ee36 6b05 	vadd.f64	d6, d6, d5
 8019798:	ee36 6b07 	vadd.f64	d6, d6, d7
 801979c:	ee36 6b03 	vadd.f64	d6, d6, d3
 80197a0:	ee36 5b44 	vsub.f64	d5, d6, d4
 80197a4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80197a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ac:	d101      	bne.n	80197b2 <exp+0x15a>
 80197ae:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80197f0 <exp+0x198>
 80197b2:	ed8d 0b00 	vstr	d0, [sp]
 80197b6:	ed9d 7b00 	vldr	d7, [sp]
 80197ba:	ee27 7b00 	vmul.f64	d7, d7, d0
 80197be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197c2:	ee25 0b00 	vmul.f64	d0, d5, d0
 80197c6:	b004      	add	sp, #16
 80197c8:	bcf0      	pop	{r4, r5, r6, r7}
 80197ca:	f000 b845 	b.w	8019858 <__math_check_uflow>
 80197ce:	ec43 2b10 	vmov	d0, r2, r3
 80197d2:	eea6 0b00 	vfma.f64	d0, d6, d0
 80197d6:	e751      	b.n	801967c <exp+0x24>
 80197d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80197f0 <exp+0x198>
 80197dc:	e74e      	b.n	801967c <exp+0x24>
 80197de:	bf00      	nop
 80197e0:	00000000 	.word	0x00000000
 80197e4:	7f000000 	.word	0x7f000000
 80197e8:	00000000 	.word	0x00000000
 80197ec:	00100000 	.word	0x00100000
	...
 80197f8:	0802a098 	.word	0x0802a098

080197fc <with_errno>:
 80197fc:	b513      	push	{r0, r1, r4, lr}
 80197fe:	4604      	mov	r4, r0
 8019800:	ed8d 0b00 	vstr	d0, [sp]
 8019804:	f001 ff9a 	bl	801b73c <__errno>
 8019808:	ed9d 0b00 	vldr	d0, [sp]
 801980c:	6004      	str	r4, [r0, #0]
 801980e:	b002      	add	sp, #8
 8019810:	bd10      	pop	{r4, pc}

08019812 <xflow>:
 8019812:	b082      	sub	sp, #8
 8019814:	b158      	cbz	r0, 801982e <xflow+0x1c>
 8019816:	eeb1 7b40 	vneg.f64	d7, d0
 801981a:	ed8d 7b00 	vstr	d7, [sp]
 801981e:	ed9d 7b00 	vldr	d7, [sp]
 8019822:	2022      	movs	r0, #34	; 0x22
 8019824:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019828:	b002      	add	sp, #8
 801982a:	f7ff bfe7 	b.w	80197fc <with_errno>
 801982e:	eeb0 7b40 	vmov.f64	d7, d0
 8019832:	e7f2      	b.n	801981a <xflow+0x8>
 8019834:	0000      	movs	r0, r0
	...

08019838 <__math_uflow>:
 8019838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019840 <__math_uflow+0x8>
 801983c:	f7ff bfe9 	b.w	8019812 <xflow>
 8019840:	00000000 	.word	0x00000000
 8019844:	10000000 	.word	0x10000000

08019848 <__math_oflow>:
 8019848:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019850 <__math_oflow+0x8>
 801984c:	f7ff bfe1 	b.w	8019812 <xflow>
 8019850:	00000000 	.word	0x00000000
 8019854:	70000000 	.word	0x70000000

08019858 <__math_check_uflow>:
 8019858:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801985c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019860:	d102      	bne.n	8019868 <__math_check_uflow+0x10>
 8019862:	2022      	movs	r0, #34	; 0x22
 8019864:	f7ff bfca 	b.w	80197fc <with_errno>
 8019868:	4770      	bx	lr
 801986a:	0000      	movs	r0, r0
 801986c:	0000      	movs	r0, r0
	...

08019870 <__math_check_oflow>:
 8019870:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8019890 <__math_check_oflow+0x20>
 8019874:	eeb0 7bc0 	vabs.f64	d7, d0
 8019878:	eeb4 7b46 	vcmp.f64	d7, d6
 801987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019880:	dd02      	ble.n	8019888 <__math_check_oflow+0x18>
 8019882:	2022      	movs	r0, #34	; 0x22
 8019884:	f7ff bfba 	b.w	80197fc <with_errno>
 8019888:	4770      	bx	lr
 801988a:	bf00      	nop
 801988c:	f3af 8000 	nop.w
 8019890:	ffffffff 	.word	0xffffffff
 8019894:	7fefffff 	.word	0x7fefffff

08019898 <checkint>:
 8019898:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801989c:	2b7e      	cmp	r3, #126	; 0x7e
 801989e:	dd10      	ble.n	80198c2 <checkint+0x2a>
 80198a0:	2b96      	cmp	r3, #150	; 0x96
 80198a2:	dc0c      	bgt.n	80198be <checkint+0x26>
 80198a4:	2201      	movs	r2, #1
 80198a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80198aa:	fa02 f303 	lsl.w	r3, r2, r3
 80198ae:	1e5a      	subs	r2, r3, #1
 80198b0:	4202      	tst	r2, r0
 80198b2:	d106      	bne.n	80198c2 <checkint+0x2a>
 80198b4:	4203      	tst	r3, r0
 80198b6:	bf0c      	ite	eq
 80198b8:	2002      	moveq	r0, #2
 80198ba:	2001      	movne	r0, #1
 80198bc:	4770      	bx	lr
 80198be:	2002      	movs	r0, #2
 80198c0:	4770      	bx	lr
 80198c2:	2000      	movs	r0, #0
 80198c4:	4770      	bx	lr
	...

080198c8 <powf>:
 80198c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198ca:	ee10 1a10 	vmov	r1, s0
 80198ce:	ee10 4a90 	vmov	r4, s1
 80198d2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80198d6:	0062      	lsls	r2, r4, #1
 80198d8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80198dc:	eef0 7a40 	vmov.f32	s15, s0
 80198e0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80198e4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80198e8:	d252      	bcs.n	8019990 <powf+0xc8>
 80198ea:	4298      	cmp	r0, r3
 80198ec:	d252      	bcs.n	8019994 <powf+0xcc>
 80198ee:	2000      	movs	r0, #0
 80198f0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80198f4:	4a9e      	ldr	r2, [pc, #632]	; (8019b70 <powf+0x2a8>)
 80198f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80198fa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80198fe:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8019902:	0ddb      	lsrs	r3, r3, #23
 8019904:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8019908:	05db      	lsls	r3, r3, #23
 801990a:	ed94 5b00 	vldr	d5, [r4]
 801990e:	1ac9      	subs	r1, r1, r3
 8019910:	ee07 1a90 	vmov	s15, r1
 8019914:	15db      	asrs	r3, r3, #23
 8019916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801991a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801991e:	ed94 5b02 	vldr	d5, [r4, #8]
 8019922:	ee26 2b06 	vmul.f64	d2, d6, d6
 8019926:	ee22 1b02 	vmul.f64	d1, d2, d2
 801992a:	ee07 3a90 	vmov	s15, r3
 801992e:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8019932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019936:	ee37 7b05 	vadd.f64	d7, d7, d5
 801993a:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 801993e:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8019942:	eea6 3b05 	vfma.f64	d3, d6, d5
 8019946:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 801994a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801994e:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8019952:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019956:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 801995a:	eea2 7b05 	vfma.f64	d7, d2, d5
 801995e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8019962:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019966:	ee16 3a90 	vmov	r3, s13
 801996a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801996e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8019972:	429a      	cmp	r2, r3
 8019974:	f0c0 80b0 	bcc.w	8019ad8 <powf+0x210>
 8019978:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8019b50 <powf+0x288>
 801997c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019984:	dd78      	ble.n	8019a78 <powf+0x1b0>
 8019986:	b003      	add	sp, #12
 8019988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801998c:	f000 b91a 	b.w	8019bc4 <__math_oflowf>
 8019990:	4298      	cmp	r0, r3
 8019992:	d32d      	bcc.n	80199f0 <powf+0x128>
 8019994:	b952      	cbnz	r2, 80199ac <powf+0xe4>
 8019996:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 801999a:	0049      	lsls	r1, r1, #1
 801999c:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80199a0:	f240 80c8 	bls.w	8019b34 <powf+0x26c>
 80199a4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80199a8:	b003      	add	sp, #12
 80199aa:	bd30      	pop	{r4, r5, pc}
 80199ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80199b0:	d105      	bne.n	80199be <powf+0xf6>
 80199b2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80199b6:	0064      	lsls	r4, r4, #1
 80199b8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80199bc:	e7f0      	b.n	80199a0 <powf+0xd8>
 80199be:	0049      	lsls	r1, r1, #1
 80199c0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80199c4:	d8ee      	bhi.n	80199a4 <powf+0xdc>
 80199c6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80199ca:	d1eb      	bne.n	80199a4 <powf+0xdc>
 80199cc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80199d0:	f000 80b0 	beq.w	8019b34 <powf+0x26c>
 80199d4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80199d8:	ea6f 0404 	mvn.w	r4, r4
 80199dc:	bf34      	ite	cc
 80199de:	2100      	movcc	r1, #0
 80199e0:	2101      	movcs	r1, #1
 80199e2:	0fe4      	lsrs	r4, r4, #31
 80199e4:	42a1      	cmp	r1, r4
 80199e6:	f040 80a8 	bne.w	8019b3a <powf+0x272>
 80199ea:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80199ee:	e7db      	b.n	80199a8 <powf+0xe0>
 80199f0:	004d      	lsls	r5, r1, #1
 80199f2:	1e6a      	subs	r2, r5, #1
 80199f4:	429a      	cmp	r2, r3
 80199f6:	d31c      	bcc.n	8019a32 <powf+0x16a>
 80199f8:	2900      	cmp	r1, #0
 80199fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80199fe:	da0f      	bge.n	8019a20 <powf+0x158>
 8019a00:	ee10 0a90 	vmov	r0, s1
 8019a04:	f7ff ff48 	bl	8019898 <checkint>
 8019a08:	2801      	cmp	r0, #1
 8019a0a:	d109      	bne.n	8019a20 <powf+0x158>
 8019a0c:	eeb1 0a40 	vneg.f32	s0, s0
 8019a10:	b945      	cbnz	r5, 8019a24 <powf+0x15c>
 8019a12:	2c00      	cmp	r4, #0
 8019a14:	dac8      	bge.n	80199a8 <powf+0xe0>
 8019a16:	b003      	add	sp, #12
 8019a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a1c:	f000 b8d8 	b.w	8019bd0 <__math_divzerof>
 8019a20:	2000      	movs	r0, #0
 8019a22:	e7f5      	b.n	8019a10 <powf+0x148>
 8019a24:	2c00      	cmp	r4, #0
 8019a26:	dabf      	bge.n	80199a8 <powf+0xe0>
 8019a28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019a30:	e7ba      	b.n	80199a8 <powf+0xe0>
 8019a32:	2900      	cmp	r1, #0
 8019a34:	da1e      	bge.n	8019a74 <powf+0x1ac>
 8019a36:	ee10 0a90 	vmov	r0, s1
 8019a3a:	f7ff ff2d 	bl	8019898 <checkint>
 8019a3e:	b920      	cbnz	r0, 8019a4a <powf+0x182>
 8019a40:	b003      	add	sp, #12
 8019a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a46:	f000 b8d5 	b.w	8019bf4 <__math_invalidf>
 8019a4a:	1e43      	subs	r3, r0, #1
 8019a4c:	4258      	negs	r0, r3
 8019a4e:	4158      	adcs	r0, r3
 8019a50:	0400      	lsls	r0, r0, #16
 8019a52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019a56:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8019a5a:	f4bf af49 	bcs.w	80198f0 <powf+0x28>
 8019a5e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8019b74 <powf+0x2ac>
 8019a62:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019a66:	ee10 3a10 	vmov	r3, s0
 8019a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a6e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8019a72:	e73d      	b.n	80198f0 <powf+0x28>
 8019a74:	2000      	movs	r0, #0
 8019a76:	e7ee      	b.n	8019a56 <powf+0x18e>
 8019a78:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8019b58 <powf+0x290>
 8019a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a84:	dd10      	ble.n	8019aa8 <powf+0x1e0>
 8019a86:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	d158      	bne.n	8019b40 <powf+0x278>
 8019a8e:	9300      	str	r3, [sp, #0]
 8019a90:	eddd 7a00 	vldr	s15, [sp]
 8019a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a9c:	eef4 7a47 	vcmp.f32	s15, s14
 8019aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa4:	f47f af6f 	bne.w	8019986 <powf+0xbe>
 8019aa8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019b60 <powf+0x298>
 8019aac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ab4:	d804      	bhi.n	8019ac0 <powf+0x1f8>
 8019ab6:	b003      	add	sp, #12
 8019ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019abc:	f000 b876 	b.w	8019bac <__math_uflowf>
 8019ac0:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8019b68 <powf+0x2a0>
 8019ac4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019acc:	d504      	bpl.n	8019ad8 <powf+0x210>
 8019ace:	b003      	add	sp, #12
 8019ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ad4:	f000 b870 	b.w	8019bb8 <__math_may_uflowf>
 8019ad8:	4b27      	ldr	r3, [pc, #156]	; (8019b78 <powf+0x2b0>)
 8019ada:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019ade:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 8019ae2:	ee36 7b05 	vadd.f64	d7, d6, d5
 8019ae6:	ee17 2a10 	vmov	r2, s14
 8019aea:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019aee:	f002 011f 	and.w	r1, r2, #31
 8019af2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019af6:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019afa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019afe:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8019b02:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8019b06:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8019b0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019b0e:	686d      	ldr	r5, [r5, #4]
 8019b10:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8019b14:	1882      	adds	r2, r0, r2
 8019b16:	2300      	movs	r3, #0
 8019b18:	1918      	adds	r0, r3, r4
 8019b1a:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019b1e:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019b22:	ec41 0b17 	vmov	d7, r0, r1
 8019b26:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019b2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019b2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019b32:	e739      	b.n	80199a8 <powf+0xe0>
 8019b34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019b38:	e736      	b.n	80199a8 <powf+0xe0>
 8019b3a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8019b7c <powf+0x2b4>
 8019b3e:	e733      	b.n	80199a8 <powf+0xe0>
 8019b40:	9301      	str	r3, [sp, #4]
 8019b42:	eddd 7a01 	vldr	s15, [sp, #4]
 8019b46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b4e:	e7a5      	b.n	8019a9c <powf+0x1d4>
 8019b50:	ffd1d571 	.word	0xffd1d571
 8019b54:	405fffff 	.word	0x405fffff
 8019b58:	ffa3aae2 	.word	0xffa3aae2
 8019b5c:	405fffff 	.word	0x405fffff
 8019b60:	00000000 	.word	0x00000000
 8019b64:	c062c000 	.word	0xc062c000
 8019b68:	00000000 	.word	0x00000000
 8019b6c:	c062a000 	.word	0xc062a000
 8019b70:	0802af48 	.word	0x0802af48
 8019b74:	4b000000 	.word	0x4b000000
 8019b78:	08029e30 	.word	0x08029e30
 8019b7c:	00000000 	.word	0x00000000

08019b80 <with_errnof>:
 8019b80:	b513      	push	{r0, r1, r4, lr}
 8019b82:	4604      	mov	r4, r0
 8019b84:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019b88:	f001 fdd8 	bl	801b73c <__errno>
 8019b8c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019b90:	6004      	str	r4, [r0, #0]
 8019b92:	b002      	add	sp, #8
 8019b94:	bd10      	pop	{r4, pc}

08019b96 <xflowf>:
 8019b96:	b130      	cbz	r0, 8019ba6 <xflowf+0x10>
 8019b98:	eef1 7a40 	vneg.f32	s15, s0
 8019b9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019ba0:	2022      	movs	r0, #34	; 0x22
 8019ba2:	f7ff bfed 	b.w	8019b80 <with_errnof>
 8019ba6:	eef0 7a40 	vmov.f32	s15, s0
 8019baa:	e7f7      	b.n	8019b9c <xflowf+0x6>

08019bac <__math_uflowf>:
 8019bac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019bb4 <__math_uflowf+0x8>
 8019bb0:	f7ff bff1 	b.w	8019b96 <xflowf>
 8019bb4:	10000000 	.word	0x10000000

08019bb8 <__math_may_uflowf>:
 8019bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019bc0 <__math_may_uflowf+0x8>
 8019bbc:	f7ff bfeb 	b.w	8019b96 <xflowf>
 8019bc0:	1a200000 	.word	0x1a200000

08019bc4 <__math_oflowf>:
 8019bc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019bcc <__math_oflowf+0x8>
 8019bc8:	f7ff bfe5 	b.w	8019b96 <xflowf>
 8019bcc:	70000000 	.word	0x70000000

08019bd0 <__math_divzerof>:
 8019bd0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019bf0 <__math_divzerof+0x20>
 8019bd4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019bdc:	2800      	cmp	r0, #0
 8019bde:	f04f 0022 	mov.w	r0, #34	; 0x22
 8019be2:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8019be6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019bea:	f7ff bfc9 	b.w	8019b80 <with_errnof>
 8019bee:	bf00      	nop
 8019bf0:	00000000 	.word	0x00000000

08019bf4 <__math_invalidf>:
 8019bf4:	eef0 7a40 	vmov.f32	s15, s0
 8019bf8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019bfc:	eef4 7a67 	vcmp.f32	s15, s15
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019c08:	d602      	bvs.n	8019c10 <__math_invalidf+0x1c>
 8019c0a:	2021      	movs	r0, #33	; 0x21
 8019c0c:	f7ff bfb8 	b.w	8019b80 <with_errnof>
 8019c10:	4770      	bx	lr
	...

08019c14 <log10f>:
 8019c14:	b508      	push	{r3, lr}
 8019c16:	ed2d 8b02 	vpush	{d8}
 8019c1a:	eeb0 8a40 	vmov.f32	s16, s0
 8019c1e:	f000 f9df 	bl	8019fe0 <__ieee754_log10f>
 8019c22:	eeb4 8a48 	vcmp.f32	s16, s16
 8019c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2a:	d60f      	bvs.n	8019c4c <log10f+0x38>
 8019c2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c34:	d80a      	bhi.n	8019c4c <log10f+0x38>
 8019c36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c3e:	d108      	bne.n	8019c52 <log10f+0x3e>
 8019c40:	f001 fd7c 	bl	801b73c <__errno>
 8019c44:	2322      	movs	r3, #34	; 0x22
 8019c46:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019c68 <log10f+0x54>
 8019c4a:	6003      	str	r3, [r0, #0]
 8019c4c:	ecbd 8b02 	vpop	{d8}
 8019c50:	bd08      	pop	{r3, pc}
 8019c52:	f001 fd73 	bl	801b73c <__errno>
 8019c56:	ecbd 8b02 	vpop	{d8}
 8019c5a:	2321      	movs	r3, #33	; 0x21
 8019c5c:	6003      	str	r3, [r0, #0]
 8019c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c62:	4802      	ldr	r0, [pc, #8]	; (8019c6c <log10f+0x58>)
 8019c64:	f000 b80c 	b.w	8019c80 <nanf>
 8019c68:	ff800000 	.word	0xff800000
 8019c6c:	08029e2c 	.word	0x08029e2c

08019c70 <fabsf>:
 8019c70:	ee10 3a10 	vmov	r3, s0
 8019c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c78:	ee00 3a10 	vmov	s0, r3
 8019c7c:	4770      	bx	lr
	...

08019c80 <nanf>:
 8019c80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019c88 <nanf+0x8>
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	7fc00000 	.word	0x7fc00000

08019c8c <tanf>:
 8019c8c:	ee10 3a10 	vmov	r3, s0
 8019c90:	b507      	push	{r0, r1, r2, lr}
 8019c92:	4a12      	ldr	r2, [pc, #72]	; (8019cdc <tanf+0x50>)
 8019c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	dc07      	bgt.n	8019cac <tanf+0x20>
 8019c9c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019ce0 <tanf+0x54>
 8019ca0:	2001      	movs	r0, #1
 8019ca2:	b003      	add	sp, #12
 8019ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ca8:	f000 b8ba 	b.w	8019e20 <__kernel_tanf>
 8019cac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019cb0:	db04      	blt.n	8019cbc <tanf+0x30>
 8019cb2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019cb6:	b003      	add	sp, #12
 8019cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cbc:	4668      	mov	r0, sp
 8019cbe:	f000 f9e7 	bl	801a090 <__ieee754_rem_pio2f>
 8019cc2:	0040      	lsls	r0, r0, #1
 8019cc4:	f000 0002 	and.w	r0, r0, #2
 8019cc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8019ccc:	ed9d 0a00 	vldr	s0, [sp]
 8019cd0:	f1c0 0001 	rsb	r0, r0, #1
 8019cd4:	f000 f8a4 	bl	8019e20 <__kernel_tanf>
 8019cd8:	e7ed      	b.n	8019cb6 <tanf+0x2a>
 8019cda:	bf00      	nop
 8019cdc:	3f490fda 	.word	0x3f490fda
 8019ce0:	00000000 	.word	0x00000000

08019ce4 <tanhf>:
 8019ce4:	b538      	push	{r3, r4, r5, lr}
 8019ce6:	ee10 5a10 	vmov	r5, s0
 8019cea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019cee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019cf2:	ed2d 8b02 	vpush	{d8}
 8019cf6:	db0f      	blt.n	8019d18 <tanhf+0x34>
 8019cf8:	4b2a      	ldr	r3, [pc, #168]	; (8019da4 <tanhf+0xc0>)
 8019cfa:	ed93 6a00 	vldr	s12, [r3]
 8019cfe:	edd3 6a00 	vldr	s13, [r3]
 8019d02:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8019d06:	2d00      	cmp	r5, #0
 8019d08:	bfac      	ite	ge
 8019d0a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8019d0e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 8019d12:	ecbd 8b02 	vpop	{d8}
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	4a23      	ldr	r2, [pc, #140]	; (8019da8 <tanhf+0xc4>)
 8019d1a:	4293      	cmp	r3, r2
 8019d1c:	dc39      	bgt.n	8019d92 <tanhf+0xae>
 8019d1e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8019d22:	da07      	bge.n	8019d34 <tanhf+0x50>
 8019d24:	4b1f      	ldr	r3, [pc, #124]	; (8019da4 <tanhf+0xc0>)
 8019d26:	edd3 7a00 	vldr	s15, [r3]
 8019d2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019d2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019d32:	e7ee      	b.n	8019d12 <tanhf+0x2e>
 8019d34:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019d38:	4c1c      	ldr	r4, [pc, #112]	; (8019dac <tanhf+0xc8>)
 8019d3a:	db19      	blt.n	8019d70 <tanhf+0x8c>
 8019d3c:	f7ff ff98 	bl	8019c70 <fabsf>
 8019d40:	edd4 7a00 	vldr	s15, [r4]
 8019d44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019d48:	f000 ffc2 	bl	801acd0 <expm1f>
 8019d4c:	4b15      	ldr	r3, [pc, #84]	; (8019da4 <tanhf+0xc0>)
 8019d4e:	edd3 7a00 	vldr	s15, [r3]
 8019d52:	edd4 6a00 	vldr	s13, [r4]
 8019d56:	ed94 7a00 	vldr	s14, [r4]
 8019d5a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019d5e:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8019d62:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019d66:	2d00      	cmp	r5, #0
 8019d68:	bfb8      	it	lt
 8019d6a:	eeb1 0a40 	vneglt.f32	s0, s0
 8019d6e:	e7d0      	b.n	8019d12 <tanhf+0x2e>
 8019d70:	ed94 8a00 	vldr	s16, [r4]
 8019d74:	f7ff ff7c 	bl	8019c70 <fabsf>
 8019d78:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8019d7c:	f000 ffa8 	bl	801acd0 <expm1f>
 8019d80:	edd4 7a00 	vldr	s15, [r4]
 8019d84:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019d88:	eeb1 7a40 	vneg.f32	s14, s0
 8019d8c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019d90:	e7e9      	b.n	8019d66 <tanhf+0x82>
 8019d92:	4b04      	ldr	r3, [pc, #16]	; (8019da4 <tanhf+0xc0>)
 8019d94:	ed93 0a00 	vldr	s0, [r3]
 8019d98:	4b05      	ldr	r3, [pc, #20]	; (8019db0 <tanhf+0xcc>)
 8019d9a:	edd3 7a00 	vldr	s15, [r3]
 8019d9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019da2:	e7e0      	b.n	8019d66 <tanhf+0x82>
 8019da4:	20000a18 	.word	0x20000a18
 8019da8:	41afffff 	.word	0x41afffff
 8019dac:	20000a20 	.word	0x20000a20
 8019db0:	20000a1c 	.word	0x20000a1c
 8019db4:	00000000 	.word	0x00000000

08019db8 <tan>:
 8019db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019dba:	eeb0 7b40 	vmov.f64	d7, d0
 8019dbe:	ee17 3a90 	vmov	r3, s15
 8019dc2:	4a15      	ldr	r2, [pc, #84]	; (8019e18 <tan+0x60>)
 8019dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019dc8:	4293      	cmp	r3, r2
 8019dca:	dc07      	bgt.n	8019ddc <tan+0x24>
 8019dcc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8019e10 <tan+0x58>
 8019dd0:	2001      	movs	r0, #1
 8019dd2:	b005      	add	sp, #20
 8019dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019dd8:	f000 be5e 	b.w	801aa98 <__kernel_tan>
 8019ddc:	4a0f      	ldr	r2, [pc, #60]	; (8019e1c <tan+0x64>)
 8019dde:	4293      	cmp	r3, r2
 8019de0:	dd04      	ble.n	8019dec <tan+0x34>
 8019de2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8019de6:	b005      	add	sp, #20
 8019de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019dec:	4668      	mov	r0, sp
 8019dee:	f000 fa7b 	bl	801a2e8 <__ieee754_rem_pio2>
 8019df2:	0040      	lsls	r0, r0, #1
 8019df4:	f000 0002 	and.w	r0, r0, #2
 8019df8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019dfc:	ed9d 0b00 	vldr	d0, [sp]
 8019e00:	f1c0 0001 	rsb	r0, r0, #1
 8019e04:	f000 fe48 	bl	801aa98 <__kernel_tan>
 8019e08:	e7ed      	b.n	8019de6 <tan+0x2e>
 8019e0a:	bf00      	nop
 8019e0c:	f3af 8000 	nop.w
	...
 8019e18:	3fe921fb 	.word	0x3fe921fb
 8019e1c:	7fefffff 	.word	0x7fefffff

08019e20 <__kernel_tanf>:
 8019e20:	b508      	push	{r3, lr}
 8019e22:	ee10 3a10 	vmov	r3, s0
 8019e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019e2a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019e2e:	eef0 7a40 	vmov.f32	s15, s0
 8019e32:	da17      	bge.n	8019e64 <__kernel_tanf+0x44>
 8019e34:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019e38:	ee17 1a10 	vmov	r1, s14
 8019e3c:	bb41      	cbnz	r1, 8019e90 <__kernel_tanf+0x70>
 8019e3e:	1c43      	adds	r3, r0, #1
 8019e40:	4313      	orrs	r3, r2
 8019e42:	d108      	bne.n	8019e56 <__kernel_tanf+0x36>
 8019e44:	f7ff ff14 	bl	8019c70 <fabsf>
 8019e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e50:	eeb0 0a67 	vmov.f32	s0, s15
 8019e54:	bd08      	pop	{r3, pc}
 8019e56:	2801      	cmp	r0, #1
 8019e58:	d0fa      	beq.n	8019e50 <__kernel_tanf+0x30>
 8019e5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019e5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e62:	e7f5      	b.n	8019e50 <__kernel_tanf+0x30>
 8019e64:	494c      	ldr	r1, [pc, #304]	; (8019f98 <__kernel_tanf+0x178>)
 8019e66:	428a      	cmp	r2, r1
 8019e68:	db12      	blt.n	8019e90 <__kernel_tanf+0x70>
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019f9c <__kernel_tanf+0x17c>
 8019e70:	bfb8      	it	lt
 8019e72:	eef1 7a40 	vneglt.f32	s15, s0
 8019e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019e7a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019fa0 <__kernel_tanf+0x180>
 8019e7e:	bfb8      	it	lt
 8019e80:	eef1 0a60 	vneglt.f32	s1, s1
 8019e84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019e88:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019fa4 <__kernel_tanf+0x184>
 8019e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e90:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019e94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8019fa8 <__kernel_tanf+0x188>
 8019e98:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8019fac <__kernel_tanf+0x18c>
 8019e9c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8019fb0 <__kernel_tanf+0x190>
 8019ea0:	493d      	ldr	r1, [pc, #244]	; (8019f98 <__kernel_tanf+0x178>)
 8019ea2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019ea6:	428a      	cmp	r2, r1
 8019ea8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019eac:	eddf 5a41 	vldr	s11, [pc, #260]	; 8019fb4 <__kernel_tanf+0x194>
 8019eb0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019eb4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8019fb8 <__kernel_tanf+0x198>
 8019eb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019ebc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019fbc <__kernel_tanf+0x19c>
 8019ec0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019ec4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8019fc0 <__kernel_tanf+0x1a0>
 8019ec8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019ecc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8019fc4 <__kernel_tanf+0x1a4>
 8019ed0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019ed4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019fc8 <__kernel_tanf+0x1a8>
 8019ed8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019edc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8019fcc <__kernel_tanf+0x1ac>
 8019ee0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019ee4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019fd0 <__kernel_tanf+0x1b0>
 8019ee8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019eec:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019fd4 <__kernel_tanf+0x1b4>
 8019ef0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019ef4:	eeb0 7a46 	vmov.f32	s14, s12
 8019ef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019efc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8019f00:	eeb0 6a60 	vmov.f32	s12, s1
 8019f04:	eea7 6a05 	vfma.f32	s12, s14, s10
 8019f08:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019fd8 <__kernel_tanf+0x1b8>
 8019f0c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019f10:	eee5 0a07 	vfma.f32	s1, s10, s14
 8019f14:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019f18:	db1d      	blt.n	8019f56 <__kernel_tanf+0x136>
 8019f1a:	ee07 0a10 	vmov	s14, r0
 8019f1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f22:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8019f26:	ee76 6a87 	vadd.f32	s13, s13, s14
 8019f2a:	179b      	asrs	r3, r3, #30
 8019f2c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8019f30:	f003 0302 	and.w	r3, r3, #2
 8019f34:	f1c3 0301 	rsb	r3, r3, #1
 8019f38:	ee76 6a60 	vsub.f32	s13, s12, s1
 8019f3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019f44:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019f48:	ee07 3a90 	vmov	s15, r3
 8019f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f54:	e77c      	b.n	8019e50 <__kernel_tanf+0x30>
 8019f56:	2801      	cmp	r0, #1
 8019f58:	d01b      	beq.n	8019f92 <__kernel_tanf+0x172>
 8019f5a:	4b20      	ldr	r3, [pc, #128]	; (8019fdc <__kernel_tanf+0x1bc>)
 8019f5c:	ee16 2a90 	vmov	r2, s13
 8019f60:	401a      	ands	r2, r3
 8019f62:	ee05 2a90 	vmov	s11, r2
 8019f66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019f72:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019f76:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8019f7a:	ee16 2a10 	vmov	r2, s12
 8019f7e:	4013      	ands	r3, r2
 8019f80:	ee07 3a90 	vmov	s15, r3
 8019f84:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019f88:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019f8c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019f90:	e75e      	b.n	8019e50 <__kernel_tanf+0x30>
 8019f92:	eef0 7a66 	vmov.f32	s15, s13
 8019f96:	e75b      	b.n	8019e50 <__kernel_tanf+0x30>
 8019f98:	3f2ca140 	.word	0x3f2ca140
 8019f9c:	3f490fda 	.word	0x3f490fda
 8019fa0:	33222168 	.word	0x33222168
 8019fa4:	00000000 	.word	0x00000000
 8019fa8:	b79bae5f 	.word	0xb79bae5f
 8019fac:	38a3f445 	.word	0x38a3f445
 8019fb0:	37d95384 	.word	0x37d95384
 8019fb4:	3a1a26c8 	.word	0x3a1a26c8
 8019fb8:	3b6b6916 	.word	0x3b6b6916
 8019fbc:	3cb327a4 	.word	0x3cb327a4
 8019fc0:	3e088889 	.word	0x3e088889
 8019fc4:	3895c07a 	.word	0x3895c07a
 8019fc8:	398137b9 	.word	0x398137b9
 8019fcc:	3abede48 	.word	0x3abede48
 8019fd0:	3c11371f 	.word	0x3c11371f
 8019fd4:	3d5d0dd1 	.word	0x3d5d0dd1
 8019fd8:	3eaaaaab 	.word	0x3eaaaaab
 8019fdc:	fffff000 	.word	0xfffff000

08019fe0 <__ieee754_log10f>:
 8019fe0:	b508      	push	{r3, lr}
 8019fe2:	ee10 2a10 	vmov	r2, s0
 8019fe6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019fea:	ed2d 8b02 	vpush	{d8}
 8019fee:	d108      	bne.n	801a002 <__ieee754_log10f+0x22>
 8019ff0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a078 <__ieee754_log10f+0x98>
 8019ff4:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a07c <__ieee754_log10f+0x9c>
 8019ff8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019ffc:	ecbd 8b02 	vpop	{d8}
 801a000:	bd08      	pop	{r3, pc}
 801a002:	2a00      	cmp	r2, #0
 801a004:	da02      	bge.n	801a00c <__ieee754_log10f+0x2c>
 801a006:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a00a:	e7f3      	b.n	8019ff4 <__ieee754_log10f+0x14>
 801a00c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a010:	db02      	blt.n	801a018 <__ieee754_log10f+0x38>
 801a012:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a016:	e7f1      	b.n	8019ffc <__ieee754_log10f+0x1c>
 801a018:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801a01c:	bfbf      	itttt	lt
 801a01e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a080 <__ieee754_log10f+0xa0>
 801a022:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a026:	f06f 0118 	mvnlt.w	r1, #24
 801a02a:	ee17 2a90 	vmovlt	r2, s15
 801a02e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a032:	bfa8      	it	ge
 801a034:	2100      	movge	r1, #0
 801a036:	3b7f      	subs	r3, #127	; 0x7f
 801a038:	440b      	add	r3, r1
 801a03a:	0fd9      	lsrs	r1, r3, #31
 801a03c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a040:	ee07 3a90 	vmov	s15, r3
 801a044:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a048:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801a04c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a050:	ee00 3a10 	vmov	s0, r3
 801a054:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801a058:	f7ff fa30 	bl	80194bc <logf>
 801a05c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a084 <__ieee754_log10f+0xa4>
 801a060:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a064:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a088 <__ieee754_log10f+0xa8>
 801a068:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a06c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a08c <__ieee754_log10f+0xac>
 801a070:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a074:	e7c2      	b.n	8019ffc <__ieee754_log10f+0x1c>
 801a076:	bf00      	nop
 801a078:	cc000000 	.word	0xcc000000
 801a07c:	00000000 	.word	0x00000000
 801a080:	4c000000 	.word	0x4c000000
 801a084:	3ede5bd9 	.word	0x3ede5bd9
 801a088:	355427db 	.word	0x355427db
 801a08c:	3e9a2080 	.word	0x3e9a2080

0801a090 <__ieee754_rem_pio2f>:
 801a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a092:	ee10 6a10 	vmov	r6, s0
 801a096:	4b86      	ldr	r3, [pc, #536]	; (801a2b0 <__ieee754_rem_pio2f+0x220>)
 801a098:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801a09c:	429d      	cmp	r5, r3
 801a09e:	b087      	sub	sp, #28
 801a0a0:	4604      	mov	r4, r0
 801a0a2:	dc05      	bgt.n	801a0b0 <__ieee754_rem_pio2f+0x20>
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	ed80 0a00 	vstr	s0, [r0]
 801a0aa:	6043      	str	r3, [r0, #4]
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	e020      	b.n	801a0f2 <__ieee754_rem_pio2f+0x62>
 801a0b0:	4b80      	ldr	r3, [pc, #512]	; (801a2b4 <__ieee754_rem_pio2f+0x224>)
 801a0b2:	429d      	cmp	r5, r3
 801a0b4:	dc38      	bgt.n	801a128 <__ieee754_rem_pio2f+0x98>
 801a0b6:	2e00      	cmp	r6, #0
 801a0b8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a2b8 <__ieee754_rem_pio2f+0x228>
 801a0bc:	4b7f      	ldr	r3, [pc, #508]	; (801a2bc <__ieee754_rem_pio2f+0x22c>)
 801a0be:	f025 050f 	bic.w	r5, r5, #15
 801a0c2:	dd18      	ble.n	801a0f6 <__ieee754_rem_pio2f+0x66>
 801a0c4:	429d      	cmp	r5, r3
 801a0c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a0ca:	bf09      	itett	eq
 801a0cc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801a2c0 <__ieee754_rem_pio2f+0x230>
 801a0d0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801a2c4 <__ieee754_rem_pio2f+0x234>
 801a0d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a0d8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801a2c8 <__ieee754_rem_pio2f+0x238>
 801a0dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801a0e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a0e4:	edc0 6a00 	vstr	s13, [r0]
 801a0e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0ec:	edc0 7a01 	vstr	s15, [r0, #4]
 801a0f0:	2001      	movs	r0, #1
 801a0f2:	b007      	add	sp, #28
 801a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f6:	429d      	cmp	r5, r3
 801a0f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a0fc:	bf09      	itett	eq
 801a0fe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801a2c0 <__ieee754_rem_pio2f+0x230>
 801a102:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801a2c4 <__ieee754_rem_pio2f+0x234>
 801a106:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a10a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801a2c8 <__ieee754_rem_pio2f+0x238>
 801a10e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a116:	edc0 6a00 	vstr	s13, [r0]
 801a11a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a11e:	edc0 7a01 	vstr	s15, [r0, #4]
 801a122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a126:	e7e4      	b.n	801a0f2 <__ieee754_rem_pio2f+0x62>
 801a128:	4b68      	ldr	r3, [pc, #416]	; (801a2cc <__ieee754_rem_pio2f+0x23c>)
 801a12a:	429d      	cmp	r5, r3
 801a12c:	dc71      	bgt.n	801a212 <__ieee754_rem_pio2f+0x182>
 801a12e:	f7ff fd9f 	bl	8019c70 <fabsf>
 801a132:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a2d0 <__ieee754_rem_pio2f+0x240>
 801a136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a13a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a13e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a146:	ee17 0a90 	vmov	r0, s15
 801a14a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a2b8 <__ieee754_rem_pio2f+0x228>
 801a14e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a152:	281f      	cmp	r0, #31
 801a154:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a2c4 <__ieee754_rem_pio2f+0x234>
 801a158:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a15c:	eeb1 6a47 	vneg.f32	s12, s14
 801a160:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a164:	ee16 2a90 	vmov	r2, s13
 801a168:	dc1c      	bgt.n	801a1a4 <__ieee754_rem_pio2f+0x114>
 801a16a:	495a      	ldr	r1, [pc, #360]	; (801a2d4 <__ieee754_rem_pio2f+0x244>)
 801a16c:	1e47      	subs	r7, r0, #1
 801a16e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a172:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a176:	428b      	cmp	r3, r1
 801a178:	d014      	beq.n	801a1a4 <__ieee754_rem_pio2f+0x114>
 801a17a:	6022      	str	r2, [r4, #0]
 801a17c:	ed94 7a00 	vldr	s14, [r4]
 801a180:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a184:	2e00      	cmp	r6, #0
 801a186:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a18a:	ed84 0a01 	vstr	s0, [r4, #4]
 801a18e:	dab0      	bge.n	801a0f2 <__ieee754_rem_pio2f+0x62>
 801a190:	eeb1 7a47 	vneg.f32	s14, s14
 801a194:	eeb1 0a40 	vneg.f32	s0, s0
 801a198:	ed84 7a00 	vstr	s14, [r4]
 801a19c:	ed84 0a01 	vstr	s0, [r4, #4]
 801a1a0:	4240      	negs	r0, r0
 801a1a2:	e7a6      	b.n	801a0f2 <__ieee754_rem_pio2f+0x62>
 801a1a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a1a8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801a1ac:	2908      	cmp	r1, #8
 801a1ae:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a1b2:	dde2      	ble.n	801a17a <__ieee754_rem_pio2f+0xea>
 801a1b4:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a2c0 <__ieee754_rem_pio2f+0x230>
 801a1b8:	eef0 6a40 	vmov.f32	s13, s0
 801a1bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a1c0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a1c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a1c8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801a2c8 <__ieee754_rem_pio2f+0x238>
 801a1cc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a1d0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a1d4:	ee15 2a90 	vmov	r2, s11
 801a1d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a1dc:	1a5b      	subs	r3, r3, r1
 801a1de:	2b19      	cmp	r3, #25
 801a1e0:	dc04      	bgt.n	801a1ec <__ieee754_rem_pio2f+0x15c>
 801a1e2:	edc4 5a00 	vstr	s11, [r4]
 801a1e6:	eeb0 0a66 	vmov.f32	s0, s13
 801a1ea:	e7c7      	b.n	801a17c <__ieee754_rem_pio2f+0xec>
 801a1ec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a2d8 <__ieee754_rem_pio2f+0x248>
 801a1f0:	eeb0 0a66 	vmov.f32	s0, s13
 801a1f4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a1f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a1fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a2dc <__ieee754_rem_pio2f+0x24c>
 801a200:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a204:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a208:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a20c:	ed84 7a00 	vstr	s14, [r4]
 801a210:	e7b4      	b.n	801a17c <__ieee754_rem_pio2f+0xec>
 801a212:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a216:	db06      	blt.n	801a226 <__ieee754_rem_pio2f+0x196>
 801a218:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a21c:	edc0 7a01 	vstr	s15, [r0, #4]
 801a220:	edc0 7a00 	vstr	s15, [r0]
 801a224:	e742      	b.n	801a0ac <__ieee754_rem_pio2f+0x1c>
 801a226:	15ea      	asrs	r2, r5, #23
 801a228:	3a86      	subs	r2, #134	; 0x86
 801a22a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a22e:	ee07 3a90 	vmov	s15, r3
 801a232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a236:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801a2e0 <__ieee754_rem_pio2f+0x250>
 801a23a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a23e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a242:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a24a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a24e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a256:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a25a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a25e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a266:	edcd 7a05 	vstr	s15, [sp, #20]
 801a26a:	d11e      	bne.n	801a2aa <__ieee754_rem_pio2f+0x21a>
 801a26c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a274:	bf14      	ite	ne
 801a276:	2302      	movne	r3, #2
 801a278:	2301      	moveq	r3, #1
 801a27a:	491a      	ldr	r1, [pc, #104]	; (801a2e4 <__ieee754_rem_pio2f+0x254>)
 801a27c:	9101      	str	r1, [sp, #4]
 801a27e:	2102      	movs	r1, #2
 801a280:	9100      	str	r1, [sp, #0]
 801a282:	a803      	add	r0, sp, #12
 801a284:	4621      	mov	r1, r4
 801a286:	f000 fec9 	bl	801b01c <__kernel_rem_pio2f>
 801a28a:	2e00      	cmp	r6, #0
 801a28c:	f6bf af31 	bge.w	801a0f2 <__ieee754_rem_pio2f+0x62>
 801a290:	edd4 7a00 	vldr	s15, [r4]
 801a294:	eef1 7a67 	vneg.f32	s15, s15
 801a298:	edc4 7a00 	vstr	s15, [r4]
 801a29c:	edd4 7a01 	vldr	s15, [r4, #4]
 801a2a0:	eef1 7a67 	vneg.f32	s15, s15
 801a2a4:	edc4 7a01 	vstr	s15, [r4, #4]
 801a2a8:	e77a      	b.n	801a1a0 <__ieee754_rem_pio2f+0x110>
 801a2aa:	2303      	movs	r3, #3
 801a2ac:	e7e5      	b.n	801a27a <__ieee754_rem_pio2f+0x1ea>
 801a2ae:	bf00      	nop
 801a2b0:	3f490fd8 	.word	0x3f490fd8
 801a2b4:	4016cbe3 	.word	0x4016cbe3
 801a2b8:	3fc90f80 	.word	0x3fc90f80
 801a2bc:	3fc90fd0 	.word	0x3fc90fd0
 801a2c0:	37354400 	.word	0x37354400
 801a2c4:	37354443 	.word	0x37354443
 801a2c8:	2e85a308 	.word	0x2e85a308
 801a2cc:	43490f80 	.word	0x43490f80
 801a2d0:	3f22f984 	.word	0x3f22f984
 801a2d4:	0802aa28 	.word	0x0802aa28
 801a2d8:	2e85a300 	.word	0x2e85a300
 801a2dc:	248d3132 	.word	0x248d3132
 801a2e0:	43800000 	.word	0x43800000
 801a2e4:	0802aaa8 	.word	0x0802aaa8

0801a2e8 <__ieee754_rem_pio2>:
 801a2e8:	b570      	push	{r4, r5, r6, lr}
 801a2ea:	eeb0 7b40 	vmov.f64	d7, d0
 801a2ee:	ee17 5a90 	vmov	r5, s15
 801a2f2:	4b99      	ldr	r3, [pc, #612]	; (801a558 <__ieee754_rem_pio2+0x270>)
 801a2f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a2f8:	429e      	cmp	r6, r3
 801a2fa:	b088      	sub	sp, #32
 801a2fc:	4604      	mov	r4, r0
 801a2fe:	dc07      	bgt.n	801a310 <__ieee754_rem_pio2+0x28>
 801a300:	2200      	movs	r2, #0
 801a302:	2300      	movs	r3, #0
 801a304:	ed84 0b00 	vstr	d0, [r4]
 801a308:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a30c:	2000      	movs	r0, #0
 801a30e:	e01b      	b.n	801a348 <__ieee754_rem_pio2+0x60>
 801a310:	4b92      	ldr	r3, [pc, #584]	; (801a55c <__ieee754_rem_pio2+0x274>)
 801a312:	429e      	cmp	r6, r3
 801a314:	dc3b      	bgt.n	801a38e <__ieee754_rem_pio2+0xa6>
 801a316:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801a31a:	2d00      	cmp	r5, #0
 801a31c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801a518 <__ieee754_rem_pio2+0x230>
 801a320:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801a324:	dd19      	ble.n	801a35a <__ieee754_rem_pio2+0x72>
 801a326:	ee30 7b46 	vsub.f64	d7, d0, d6
 801a32a:	429e      	cmp	r6, r3
 801a32c:	d00e      	beq.n	801a34c <__ieee754_rem_pio2+0x64>
 801a32e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801a520 <__ieee754_rem_pio2+0x238>
 801a332:	ee37 5b46 	vsub.f64	d5, d7, d6
 801a336:	ee37 7b45 	vsub.f64	d7, d7, d5
 801a33a:	ed84 5b00 	vstr	d5, [r4]
 801a33e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a342:	ed84 7b02 	vstr	d7, [r4, #8]
 801a346:	2001      	movs	r0, #1
 801a348:	b008      	add	sp, #32
 801a34a:	bd70      	pop	{r4, r5, r6, pc}
 801a34c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a528 <__ieee754_rem_pio2+0x240>
 801a350:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a354:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a530 <__ieee754_rem_pio2+0x248>
 801a358:	e7eb      	b.n	801a332 <__ieee754_rem_pio2+0x4a>
 801a35a:	429e      	cmp	r6, r3
 801a35c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801a360:	d00e      	beq.n	801a380 <__ieee754_rem_pio2+0x98>
 801a362:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801a520 <__ieee754_rem_pio2+0x238>
 801a366:	ee37 5b06 	vadd.f64	d5, d7, d6
 801a36a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801a36e:	ed84 5b00 	vstr	d5, [r4]
 801a372:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a37a:	ed84 7b02 	vstr	d7, [r4, #8]
 801a37e:	e7e3      	b.n	801a348 <__ieee754_rem_pio2+0x60>
 801a380:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a528 <__ieee754_rem_pio2+0x240>
 801a384:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a388:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a530 <__ieee754_rem_pio2+0x248>
 801a38c:	e7eb      	b.n	801a366 <__ieee754_rem_pio2+0x7e>
 801a38e:	4b74      	ldr	r3, [pc, #464]	; (801a560 <__ieee754_rem_pio2+0x278>)
 801a390:	429e      	cmp	r6, r3
 801a392:	dc70      	bgt.n	801a476 <__ieee754_rem_pio2+0x18e>
 801a394:	f000 fdb8 	bl	801af08 <fabs>
 801a398:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a39c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a538 <__ieee754_rem_pio2+0x250>
 801a3a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801a3a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801a3a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801a3ac:	ee17 0a90 	vmov	r0, s15
 801a3b0:	eeb1 4b45 	vneg.f64	d4, d5
 801a3b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a518 <__ieee754_rem_pio2+0x230>
 801a3b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801a3bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a520 <__ieee754_rem_pio2+0x238>
 801a3c0:	281f      	cmp	r0, #31
 801a3c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801a3c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801a3ca:	dc08      	bgt.n	801a3de <__ieee754_rem_pio2+0xf6>
 801a3cc:	4b65      	ldr	r3, [pc, #404]	; (801a564 <__ieee754_rem_pio2+0x27c>)
 801a3ce:	1e42      	subs	r2, r0, #1
 801a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a3d4:	42b3      	cmp	r3, r6
 801a3d6:	d002      	beq.n	801a3de <__ieee754_rem_pio2+0xf6>
 801a3d8:	ed84 6b00 	vstr	d6, [r4]
 801a3dc:	e024      	b.n	801a428 <__ieee754_rem_pio2+0x140>
 801a3de:	ee16 3a90 	vmov	r3, s13
 801a3e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801a3e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801a3ea:	2b10      	cmp	r3, #16
 801a3ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 801a3f0:	ddf2      	ble.n	801a3d8 <__ieee754_rem_pio2+0xf0>
 801a3f2:	eeb0 6b40 	vmov.f64	d6, d0
 801a3f6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801a528 <__ieee754_rem_pio2+0x240>
 801a3fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 801a3fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 801a402:	eea4 7b03 	vfma.f64	d7, d4, d3
 801a406:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801a530 <__ieee754_rem_pio2+0x248>
 801a40a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801a40e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801a412:	ee13 3a90 	vmov	r3, s7
 801a416:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801a41a:	1ad3      	subs	r3, r2, r3
 801a41c:	2b31      	cmp	r3, #49	; 0x31
 801a41e:	dc17      	bgt.n	801a450 <__ieee754_rem_pio2+0x168>
 801a420:	eeb0 0b46 	vmov.f64	d0, d6
 801a424:	ed84 3b00 	vstr	d3, [r4]
 801a428:	ed94 6b00 	vldr	d6, [r4]
 801a42c:	2d00      	cmp	r5, #0
 801a42e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801a432:	ee30 0b47 	vsub.f64	d0, d0, d7
 801a436:	ed84 0b02 	vstr	d0, [r4, #8]
 801a43a:	da85      	bge.n	801a348 <__ieee754_rem_pio2+0x60>
 801a43c:	eeb1 6b46 	vneg.f64	d6, d6
 801a440:	eeb1 0b40 	vneg.f64	d0, d0
 801a444:	ed84 6b00 	vstr	d6, [r4]
 801a448:	ed84 0b02 	vstr	d0, [r4, #8]
 801a44c:	4240      	negs	r0, r0
 801a44e:	e77b      	b.n	801a348 <__ieee754_rem_pio2+0x60>
 801a450:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801a540 <__ieee754_rem_pio2+0x258>
 801a454:	eeb0 0b46 	vmov.f64	d0, d6
 801a458:	eea4 0b07 	vfma.f64	d0, d4, d7
 801a45c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801a460:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a464:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801a548 <__ieee754_rem_pio2+0x260>
 801a468:	eeb0 7b46 	vmov.f64	d7, d6
 801a46c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801a470:	ee30 6b47 	vsub.f64	d6, d0, d7
 801a474:	e7b0      	b.n	801a3d8 <__ieee754_rem_pio2+0xf0>
 801a476:	4b3c      	ldr	r3, [pc, #240]	; (801a568 <__ieee754_rem_pio2+0x280>)
 801a478:	429e      	cmp	r6, r3
 801a47a:	dd06      	ble.n	801a48a <__ieee754_rem_pio2+0x1a2>
 801a47c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801a480:	ed80 7b02 	vstr	d7, [r0, #8]
 801a484:	ed80 7b00 	vstr	d7, [r0]
 801a488:	e740      	b.n	801a30c <__ieee754_rem_pio2+0x24>
 801a48a:	1532      	asrs	r2, r6, #20
 801a48c:	ee10 0a10 	vmov	r0, s0
 801a490:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801a494:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801a498:	ec41 0b17 	vmov	d7, r0, r1
 801a49c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a4a0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801a550 <__ieee754_rem_pio2+0x268>
 801a4a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a4a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a4b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a4b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a4b8:	a808      	add	r0, sp, #32
 801a4ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a4be:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801a4c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a4ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4ce:	2103      	movs	r1, #3
 801a4d0:	ed30 7b02 	vldmdb	r0!, {d7}
 801a4d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4dc:	460b      	mov	r3, r1
 801a4de:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801a4e2:	d0f5      	beq.n	801a4d0 <__ieee754_rem_pio2+0x1e8>
 801a4e4:	4921      	ldr	r1, [pc, #132]	; (801a56c <__ieee754_rem_pio2+0x284>)
 801a4e6:	9101      	str	r1, [sp, #4]
 801a4e8:	2102      	movs	r1, #2
 801a4ea:	9100      	str	r1, [sp, #0]
 801a4ec:	a802      	add	r0, sp, #8
 801a4ee:	4621      	mov	r1, r4
 801a4f0:	f000 f83e 	bl	801a570 <__kernel_rem_pio2>
 801a4f4:	2d00      	cmp	r5, #0
 801a4f6:	f6bf af27 	bge.w	801a348 <__ieee754_rem_pio2+0x60>
 801a4fa:	ed94 7b00 	vldr	d7, [r4]
 801a4fe:	eeb1 7b47 	vneg.f64	d7, d7
 801a502:	ed84 7b00 	vstr	d7, [r4]
 801a506:	ed94 7b02 	vldr	d7, [r4, #8]
 801a50a:	eeb1 7b47 	vneg.f64	d7, d7
 801a50e:	ed84 7b02 	vstr	d7, [r4, #8]
 801a512:	e79b      	b.n	801a44c <__ieee754_rem_pio2+0x164>
 801a514:	f3af 8000 	nop.w
 801a518:	54400000 	.word	0x54400000
 801a51c:	3ff921fb 	.word	0x3ff921fb
 801a520:	1a626331 	.word	0x1a626331
 801a524:	3dd0b461 	.word	0x3dd0b461
 801a528:	1a600000 	.word	0x1a600000
 801a52c:	3dd0b461 	.word	0x3dd0b461
 801a530:	2e037073 	.word	0x2e037073
 801a534:	3ba3198a 	.word	0x3ba3198a
 801a538:	6dc9c883 	.word	0x6dc9c883
 801a53c:	3fe45f30 	.word	0x3fe45f30
 801a540:	2e000000 	.word	0x2e000000
 801a544:	3ba3198a 	.word	0x3ba3198a
 801a548:	252049c1 	.word	0x252049c1
 801a54c:	397b839a 	.word	0x397b839a
 801a550:	00000000 	.word	0x00000000
 801a554:	41700000 	.word	0x41700000
 801a558:	3fe921fb 	.word	0x3fe921fb
 801a55c:	4002d97b 	.word	0x4002d97b
 801a560:	413921fb 	.word	0x413921fb
 801a564:	0802adc0 	.word	0x0802adc0
 801a568:	7fefffff 	.word	0x7fefffff
 801a56c:	0802ae40 	.word	0x0802ae40

0801a570 <__kernel_rem_pio2>:
 801a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a574:	ed2d 8b06 	vpush	{d8-d10}
 801a578:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801a57c:	460f      	mov	r7, r1
 801a57e:	9002      	str	r0, [sp, #8]
 801a580:	49c3      	ldr	r1, [pc, #780]	; (801a890 <__kernel_rem_pio2+0x320>)
 801a582:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801a584:	9301      	str	r3, [sp, #4]
 801a586:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801a58a:	9901      	ldr	r1, [sp, #4]
 801a58c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801a58e:	f112 0f14 	cmn.w	r2, #20
 801a592:	bfa8      	it	ge
 801a594:	1ed0      	subge	r0, r2, #3
 801a596:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801a59a:	bfaa      	itet	ge
 801a59c:	2418      	movge	r4, #24
 801a59e:	2000      	movlt	r0, #0
 801a5a0:	fb90 f0f4 	sdivge	r0, r0, r4
 801a5a4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801a878 <__kernel_rem_pio2+0x308>
 801a5a8:	f06f 0417 	mvn.w	r4, #23
 801a5ac:	fb00 4404 	mla	r4, r0, r4, r4
 801a5b0:	eba0 060a 	sub.w	r6, r0, sl
 801a5b4:	4414      	add	r4, r2
 801a5b6:	eb09 0c0a 	add.w	ip, r9, sl
 801a5ba:	ad1a      	add	r5, sp, #104	; 0x68
 801a5bc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	4562      	cmp	r2, ip
 801a5c4:	dd10      	ble.n	801a5e8 <__kernel_rem_pio2+0x78>
 801a5c6:	9a01      	ldr	r2, [sp, #4]
 801a5c8:	a91a      	add	r1, sp, #104	; 0x68
 801a5ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a5ce:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801a5d2:	f04f 0c00 	mov.w	ip, #0
 801a5d6:	45cc      	cmp	ip, r9
 801a5d8:	dc26      	bgt.n	801a628 <__kernel_rem_pio2+0xb8>
 801a5da:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801a878 <__kernel_rem_pio2+0x308>
 801a5de:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a5e2:	4616      	mov	r6, r2
 801a5e4:	2500      	movs	r5, #0
 801a5e6:	e015      	b.n	801a614 <__kernel_rem_pio2+0xa4>
 801a5e8:	42d6      	cmn	r6, r2
 801a5ea:	d409      	bmi.n	801a600 <__kernel_rem_pio2+0x90>
 801a5ec:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801a5f0:	ee07 1a90 	vmov	s15, r1
 801a5f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a5f8:	eca5 7b02 	vstmia	r5!, {d7}
 801a5fc:	3201      	adds	r2, #1
 801a5fe:	e7e0      	b.n	801a5c2 <__kernel_rem_pio2+0x52>
 801a600:	eeb0 7b46 	vmov.f64	d7, d6
 801a604:	e7f8      	b.n	801a5f8 <__kernel_rem_pio2+0x88>
 801a606:	ecbe 5b02 	vldmia	lr!, {d5}
 801a60a:	ed96 6b00 	vldr	d6, [r6]
 801a60e:	3501      	adds	r5, #1
 801a610:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a614:	4555      	cmp	r5, sl
 801a616:	f1a6 0608 	sub.w	r6, r6, #8
 801a61a:	ddf4      	ble.n	801a606 <__kernel_rem_pio2+0x96>
 801a61c:	eca8 7b02 	vstmia	r8!, {d7}
 801a620:	f10c 0c01 	add.w	ip, ip, #1
 801a624:	3208      	adds	r2, #8
 801a626:	e7d6      	b.n	801a5d6 <__kernel_rem_pio2+0x66>
 801a628:	aa06      	add	r2, sp, #24
 801a62a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801a880 <__kernel_rem_pio2+0x310>
 801a62e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a888 <__kernel_rem_pio2+0x318>
 801a632:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801a636:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801a63a:	9204      	str	r2, [sp, #16]
 801a63c:	9303      	str	r3, [sp, #12]
 801a63e:	464d      	mov	r5, r9
 801a640:	00eb      	lsls	r3, r5, #3
 801a642:	9305      	str	r3, [sp, #20]
 801a644:	ab92      	add	r3, sp, #584	; 0x248
 801a646:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a64a:	f10d 0b18 	add.w	fp, sp, #24
 801a64e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801a650:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801a654:	465e      	mov	r6, fp
 801a656:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a65a:	4628      	mov	r0, r5
 801a65c:	2800      	cmp	r0, #0
 801a65e:	f1a2 0208 	sub.w	r2, r2, #8
 801a662:	dc48      	bgt.n	801a6f6 <__kernel_rem_pio2+0x186>
 801a664:	4620      	mov	r0, r4
 801a666:	f000 fc5b 	bl	801af20 <scalbn>
 801a66a:	eeb0 8b40 	vmov.f64	d8, d0
 801a66e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801a672:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a676:	f000 ff43 	bl	801b500 <floor>
 801a67a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801a67e:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a682:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a686:	2c00      	cmp	r4, #0
 801a688:	ee17 8a90 	vmov	r8, s15
 801a68c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a690:	ee38 8b47 	vsub.f64	d8, d8, d7
 801a694:	dd41      	ble.n	801a71a <__kernel_rem_pio2+0x1aa>
 801a696:	1e68      	subs	r0, r5, #1
 801a698:	ab06      	add	r3, sp, #24
 801a69a:	f1c4 0c18 	rsb	ip, r4, #24
 801a69e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801a6a2:	fa46 f20c 	asr.w	r2, r6, ip
 801a6a6:	4490      	add	r8, r2
 801a6a8:	fa02 f20c 	lsl.w	r2, r2, ip
 801a6ac:	1ab6      	subs	r6, r6, r2
 801a6ae:	f1c4 0217 	rsb	r2, r4, #23
 801a6b2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801a6b6:	4116      	asrs	r6, r2
 801a6b8:	2e00      	cmp	r6, #0
 801a6ba:	dd3d      	ble.n	801a738 <__kernel_rem_pio2+0x1c8>
 801a6bc:	f04f 0c00 	mov.w	ip, #0
 801a6c0:	f108 0801 	add.w	r8, r8, #1
 801a6c4:	4660      	mov	r0, ip
 801a6c6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801a6ca:	4565      	cmp	r5, ip
 801a6cc:	dc6a      	bgt.n	801a7a4 <__kernel_rem_pio2+0x234>
 801a6ce:	2c00      	cmp	r4, #0
 801a6d0:	dd04      	ble.n	801a6dc <__kernel_rem_pio2+0x16c>
 801a6d2:	2c01      	cmp	r4, #1
 801a6d4:	d07b      	beq.n	801a7ce <__kernel_rem_pio2+0x25e>
 801a6d6:	2c02      	cmp	r4, #2
 801a6d8:	f000 8083 	beq.w	801a7e2 <__kernel_rem_pio2+0x272>
 801a6dc:	2e02      	cmp	r6, #2
 801a6de:	d12b      	bne.n	801a738 <__kernel_rem_pio2+0x1c8>
 801a6e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a6e4:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a6e8:	b330      	cbz	r0, 801a738 <__kernel_rem_pio2+0x1c8>
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	f000 fc18 	bl	801af20 <scalbn>
 801a6f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a6f4:	e020      	b.n	801a738 <__kernel_rem_pio2+0x1c8>
 801a6f6:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a6fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a6fe:	3801      	subs	r0, #1
 801a700:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a704:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a708:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a70c:	eca6 0a01 	vstmia	r6!, {s0}
 801a710:	ed92 0b00 	vldr	d0, [r2]
 801a714:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a718:	e7a0      	b.n	801a65c <__kernel_rem_pio2+0xec>
 801a71a:	d105      	bne.n	801a728 <__kernel_rem_pio2+0x1b8>
 801a71c:	1e6a      	subs	r2, r5, #1
 801a71e:	ab06      	add	r3, sp, #24
 801a720:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a724:	15f6      	asrs	r6, r6, #23
 801a726:	e7c7      	b.n	801a6b8 <__kernel_rem_pio2+0x148>
 801a728:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a72c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a734:	da34      	bge.n	801a7a0 <__kernel_rem_pio2+0x230>
 801a736:	2600      	movs	r6, #0
 801a738:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a740:	f040 80aa 	bne.w	801a898 <__kernel_rem_pio2+0x328>
 801a744:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801a748:	4658      	mov	r0, fp
 801a74a:	2200      	movs	r2, #0
 801a74c:	4548      	cmp	r0, r9
 801a74e:	da50      	bge.n	801a7f2 <__kernel_rem_pio2+0x282>
 801a750:	2a00      	cmp	r2, #0
 801a752:	d06b      	beq.n	801a82c <__kernel_rem_pio2+0x2bc>
 801a754:	ab06      	add	r3, sp, #24
 801a756:	3c18      	subs	r4, #24
 801a758:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	f000 8087 	beq.w	801a870 <__kernel_rem_pio2+0x300>
 801a762:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a766:	4620      	mov	r0, r4
 801a768:	f000 fbda 	bl	801af20 <scalbn>
 801a76c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801a880 <__kernel_rem_pio2+0x310>
 801a770:	f10b 0201 	add.w	r2, fp, #1
 801a774:	a96a      	add	r1, sp, #424	; 0x1a8
 801a776:	00d3      	lsls	r3, r2, #3
 801a778:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a77c:	465a      	mov	r2, fp
 801a77e:	2a00      	cmp	r2, #0
 801a780:	f280 80b8 	bge.w	801a8f4 <__kernel_rem_pio2+0x384>
 801a784:	465a      	mov	r2, fp
 801a786:	2a00      	cmp	r2, #0
 801a788:	f2c0 80d6 	blt.w	801a938 <__kernel_rem_pio2+0x3c8>
 801a78c:	a96a      	add	r1, sp, #424	; 0x1a8
 801a78e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a792:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801a878 <__kernel_rem_pio2+0x308>
 801a796:	4d3f      	ldr	r5, [pc, #252]	; (801a894 <__kernel_rem_pio2+0x324>)
 801a798:	2000      	movs	r0, #0
 801a79a:	ebab 0102 	sub.w	r1, fp, r2
 801a79e:	e0c0      	b.n	801a922 <__kernel_rem_pio2+0x3b2>
 801a7a0:	2602      	movs	r6, #2
 801a7a2:	e78b      	b.n	801a6bc <__kernel_rem_pio2+0x14c>
 801a7a4:	f8db 2000 	ldr.w	r2, [fp]
 801a7a8:	b958      	cbnz	r0, 801a7c2 <__kernel_rem_pio2+0x252>
 801a7aa:	b122      	cbz	r2, 801a7b6 <__kernel_rem_pio2+0x246>
 801a7ac:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a7b0:	f8cb 2000 	str.w	r2, [fp]
 801a7b4:	2201      	movs	r2, #1
 801a7b6:	f10c 0c01 	add.w	ip, ip, #1
 801a7ba:	f10b 0b04 	add.w	fp, fp, #4
 801a7be:	4610      	mov	r0, r2
 801a7c0:	e783      	b.n	801a6ca <__kernel_rem_pio2+0x15a>
 801a7c2:	ebae 0202 	sub.w	r2, lr, r2
 801a7c6:	f8cb 2000 	str.w	r2, [fp]
 801a7ca:	4602      	mov	r2, r0
 801a7cc:	e7f3      	b.n	801a7b6 <__kernel_rem_pio2+0x246>
 801a7ce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a7d2:	ab06      	add	r3, sp, #24
 801a7d4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a7d8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a7dc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a7e0:	e77c      	b.n	801a6dc <__kernel_rem_pio2+0x16c>
 801a7e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a7e6:	ab06      	add	r3, sp, #24
 801a7e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a7ec:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a7f0:	e7f4      	b.n	801a7dc <__kernel_rem_pio2+0x26c>
 801a7f2:	ab06      	add	r3, sp, #24
 801a7f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a7f8:	3801      	subs	r0, #1
 801a7fa:	431a      	orrs	r2, r3
 801a7fc:	e7a6      	b.n	801a74c <__kernel_rem_pio2+0x1dc>
 801a7fe:	3201      	adds	r2, #1
 801a800:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a804:	2e00      	cmp	r6, #0
 801a806:	d0fa      	beq.n	801a7fe <__kernel_rem_pio2+0x28e>
 801a808:	9b05      	ldr	r3, [sp, #20]
 801a80a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a80e:	eb0d 0003 	add.w	r0, sp, r3
 801a812:	9b01      	ldr	r3, [sp, #4]
 801a814:	18ee      	adds	r6, r5, r3
 801a816:	ab1a      	add	r3, sp, #104	; 0x68
 801a818:	f105 0c01 	add.w	ip, r5, #1
 801a81c:	3898      	subs	r0, #152	; 0x98
 801a81e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a822:	442a      	add	r2, r5
 801a824:	4562      	cmp	r2, ip
 801a826:	da04      	bge.n	801a832 <__kernel_rem_pio2+0x2c2>
 801a828:	4615      	mov	r5, r2
 801a82a:	e709      	b.n	801a640 <__kernel_rem_pio2+0xd0>
 801a82c:	9804      	ldr	r0, [sp, #16]
 801a82e:	2201      	movs	r2, #1
 801a830:	e7e6      	b.n	801a800 <__kernel_rem_pio2+0x290>
 801a832:	9b03      	ldr	r3, [sp, #12]
 801a834:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a838:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a83c:	9305      	str	r3, [sp, #20]
 801a83e:	ee07 3a90 	vmov	s15, r3
 801a842:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a846:	2500      	movs	r5, #0
 801a848:	eca6 7b02 	vstmia	r6!, {d7}
 801a84c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801a878 <__kernel_rem_pio2+0x308>
 801a850:	46b0      	mov	r8, r6
 801a852:	4555      	cmp	r5, sl
 801a854:	dd04      	ble.n	801a860 <__kernel_rem_pio2+0x2f0>
 801a856:	eca0 7b02 	vstmia	r0!, {d7}
 801a85a:	f10c 0c01 	add.w	ip, ip, #1
 801a85e:	e7e1      	b.n	801a824 <__kernel_rem_pio2+0x2b4>
 801a860:	ecbe 5b02 	vldmia	lr!, {d5}
 801a864:	ed38 6b02 	vldmdb	r8!, {d6}
 801a868:	3501      	adds	r5, #1
 801a86a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a86e:	e7f0      	b.n	801a852 <__kernel_rem_pio2+0x2e2>
 801a870:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a874:	e76e      	b.n	801a754 <__kernel_rem_pio2+0x1e4>
 801a876:	bf00      	nop
	...
 801a884:	3e700000 	.word	0x3e700000
 801a888:	00000000 	.word	0x00000000
 801a88c:	41700000 	.word	0x41700000
 801a890:	0802b0b0 	.word	0x0802b0b0
 801a894:	0802b070 	.word	0x0802b070
 801a898:	4260      	negs	r0, r4
 801a89a:	eeb0 0b48 	vmov.f64	d0, d8
 801a89e:	f000 fb3f 	bl	801af20 <scalbn>
 801a8a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801aa80 <__kernel_rem_pio2+0x510>
 801a8a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ae:	db18      	blt.n	801a8e2 <__kernel_rem_pio2+0x372>
 801a8b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801aa88 <__kernel_rem_pio2+0x518>
 801a8b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a8b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a8bc:	aa06      	add	r2, sp, #24
 801a8be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a8c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a8c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a8ca:	f105 0b01 	add.w	fp, r5, #1
 801a8ce:	ee10 3a10 	vmov	r3, s0
 801a8d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a8d6:	ee17 3a10 	vmov	r3, s14
 801a8da:	3418      	adds	r4, #24
 801a8dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a8e0:	e73f      	b.n	801a762 <__kernel_rem_pio2+0x1f2>
 801a8e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a8e6:	aa06      	add	r2, sp, #24
 801a8e8:	ee10 3a10 	vmov	r3, s0
 801a8ec:	46ab      	mov	fp, r5
 801a8ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a8f2:	e736      	b.n	801a762 <__kernel_rem_pio2+0x1f2>
 801a8f4:	a806      	add	r0, sp, #24
 801a8f6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a8fa:	9001      	str	r0, [sp, #4]
 801a8fc:	ee07 0a90 	vmov	s15, r0
 801a900:	3a01      	subs	r2, #1
 801a902:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a906:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a90a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a90e:	ed21 7b02 	vstmdb	r1!, {d7}
 801a912:	e734      	b.n	801a77e <__kernel_rem_pio2+0x20e>
 801a914:	ecb5 5b02 	vldmia	r5!, {d5}
 801a918:	ecb4 6b02 	vldmia	r4!, {d6}
 801a91c:	3001      	adds	r0, #1
 801a91e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a922:	4548      	cmp	r0, r9
 801a924:	dc01      	bgt.n	801a92a <__kernel_rem_pio2+0x3ba>
 801a926:	4288      	cmp	r0, r1
 801a928:	ddf4      	ble.n	801a914 <__kernel_rem_pio2+0x3a4>
 801a92a:	a842      	add	r0, sp, #264	; 0x108
 801a92c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a930:	ed81 7b00 	vstr	d7, [r1]
 801a934:	3a01      	subs	r2, #1
 801a936:	e726      	b.n	801a786 <__kernel_rem_pio2+0x216>
 801a938:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a93a:	2a02      	cmp	r2, #2
 801a93c:	dc0a      	bgt.n	801a954 <__kernel_rem_pio2+0x3e4>
 801a93e:	2a00      	cmp	r2, #0
 801a940:	dc2e      	bgt.n	801a9a0 <__kernel_rem_pio2+0x430>
 801a942:	d047      	beq.n	801a9d4 <__kernel_rem_pio2+0x464>
 801a944:	f008 0007 	and.w	r0, r8, #7
 801a948:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a94c:	ecbd 8b06 	vpop	{d8-d10}
 801a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a954:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a956:	2a03      	cmp	r2, #3
 801a958:	d1f4      	bne.n	801a944 <__kernel_rem_pio2+0x3d4>
 801a95a:	a942      	add	r1, sp, #264	; 0x108
 801a95c:	f1a3 0208 	sub.w	r2, r3, #8
 801a960:	440a      	add	r2, r1
 801a962:	4611      	mov	r1, r2
 801a964:	4658      	mov	r0, fp
 801a966:	2800      	cmp	r0, #0
 801a968:	f1a1 0108 	sub.w	r1, r1, #8
 801a96c:	dc55      	bgt.n	801aa1a <__kernel_rem_pio2+0x4aa>
 801a96e:	4659      	mov	r1, fp
 801a970:	2901      	cmp	r1, #1
 801a972:	f1a2 0208 	sub.w	r2, r2, #8
 801a976:	dc60      	bgt.n	801aa3a <__kernel_rem_pio2+0x4ca>
 801a978:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801aa90 <__kernel_rem_pio2+0x520>
 801a97c:	aa42      	add	r2, sp, #264	; 0x108
 801a97e:	4413      	add	r3, r2
 801a980:	f1bb 0f01 	cmp.w	fp, #1
 801a984:	dc69      	bgt.n	801aa5a <__kernel_rem_pio2+0x4ea>
 801a986:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a98a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a98e:	2e00      	cmp	r6, #0
 801a990:	d16a      	bne.n	801aa68 <__kernel_rem_pio2+0x4f8>
 801a992:	ed87 5b00 	vstr	d5, [r7]
 801a996:	ed87 6b02 	vstr	d6, [r7, #8]
 801a99a:	ed87 7b04 	vstr	d7, [r7, #16]
 801a99e:	e7d1      	b.n	801a944 <__kernel_rem_pio2+0x3d4>
 801a9a0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801aa90 <__kernel_rem_pio2+0x520>
 801a9a4:	aa42      	add	r2, sp, #264	; 0x108
 801a9a6:	4413      	add	r3, r2
 801a9a8:	465a      	mov	r2, fp
 801a9aa:	2a00      	cmp	r2, #0
 801a9ac:	da26      	bge.n	801a9fc <__kernel_rem_pio2+0x48c>
 801a9ae:	b35e      	cbz	r6, 801aa08 <__kernel_rem_pio2+0x498>
 801a9b0:	eeb1 7b46 	vneg.f64	d7, d6
 801a9b4:	ed87 7b00 	vstr	d7, [r7]
 801a9b8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a9bc:	aa44      	add	r2, sp, #272	; 0x110
 801a9be:	2301      	movs	r3, #1
 801a9c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a9c4:	459b      	cmp	fp, r3
 801a9c6:	da22      	bge.n	801aa0e <__kernel_rem_pio2+0x49e>
 801a9c8:	b10e      	cbz	r6, 801a9ce <__kernel_rem_pio2+0x45e>
 801a9ca:	eeb1 7b47 	vneg.f64	d7, d7
 801a9ce:	ed87 7b02 	vstr	d7, [r7, #8]
 801a9d2:	e7b7      	b.n	801a944 <__kernel_rem_pio2+0x3d4>
 801a9d4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801aa90 <__kernel_rem_pio2+0x520>
 801a9d8:	aa42      	add	r2, sp, #264	; 0x108
 801a9da:	4413      	add	r3, r2
 801a9dc:	f1bb 0f00 	cmp.w	fp, #0
 801a9e0:	da05      	bge.n	801a9ee <__kernel_rem_pio2+0x47e>
 801a9e2:	b10e      	cbz	r6, 801a9e8 <__kernel_rem_pio2+0x478>
 801a9e4:	eeb1 7b47 	vneg.f64	d7, d7
 801a9e8:	ed87 7b00 	vstr	d7, [r7]
 801a9ec:	e7aa      	b.n	801a944 <__kernel_rem_pio2+0x3d4>
 801a9ee:	ed33 6b02 	vldmdb	r3!, {d6}
 801a9f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a9f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a9fa:	e7ef      	b.n	801a9dc <__kernel_rem_pio2+0x46c>
 801a9fc:	ed33 7b02 	vldmdb	r3!, {d7}
 801aa00:	3a01      	subs	r2, #1
 801aa02:	ee36 6b07 	vadd.f64	d6, d6, d7
 801aa06:	e7d0      	b.n	801a9aa <__kernel_rem_pio2+0x43a>
 801aa08:	eeb0 7b46 	vmov.f64	d7, d6
 801aa0c:	e7d2      	b.n	801a9b4 <__kernel_rem_pio2+0x444>
 801aa0e:	ecb2 6b02 	vldmia	r2!, {d6}
 801aa12:	3301      	adds	r3, #1
 801aa14:	ee37 7b06 	vadd.f64	d7, d7, d6
 801aa18:	e7d4      	b.n	801a9c4 <__kernel_rem_pio2+0x454>
 801aa1a:	ed91 7b00 	vldr	d7, [r1]
 801aa1e:	ed91 5b02 	vldr	d5, [r1, #8]
 801aa22:	3801      	subs	r0, #1
 801aa24:	ee37 6b05 	vadd.f64	d6, d7, d5
 801aa28:	ee37 7b46 	vsub.f64	d7, d7, d6
 801aa2c:	ed81 6b00 	vstr	d6, [r1]
 801aa30:	ee37 7b05 	vadd.f64	d7, d7, d5
 801aa34:	ed81 7b02 	vstr	d7, [r1, #8]
 801aa38:	e795      	b.n	801a966 <__kernel_rem_pio2+0x3f6>
 801aa3a:	ed92 7b00 	vldr	d7, [r2]
 801aa3e:	ed92 5b02 	vldr	d5, [r2, #8]
 801aa42:	3901      	subs	r1, #1
 801aa44:	ee37 6b05 	vadd.f64	d6, d7, d5
 801aa48:	ee37 7b46 	vsub.f64	d7, d7, d6
 801aa4c:	ed82 6b00 	vstr	d6, [r2]
 801aa50:	ee37 7b05 	vadd.f64	d7, d7, d5
 801aa54:	ed82 7b02 	vstr	d7, [r2, #8]
 801aa58:	e78a      	b.n	801a970 <__kernel_rem_pio2+0x400>
 801aa5a:	ed33 6b02 	vldmdb	r3!, {d6}
 801aa5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801aa62:	ee37 7b06 	vadd.f64	d7, d7, d6
 801aa66:	e78b      	b.n	801a980 <__kernel_rem_pio2+0x410>
 801aa68:	eeb1 5b45 	vneg.f64	d5, d5
 801aa6c:	eeb1 6b46 	vneg.f64	d6, d6
 801aa70:	ed87 5b00 	vstr	d5, [r7]
 801aa74:	eeb1 7b47 	vneg.f64	d7, d7
 801aa78:	ed87 6b02 	vstr	d6, [r7, #8]
 801aa7c:	e78d      	b.n	801a99a <__kernel_rem_pio2+0x42a>
 801aa7e:	bf00      	nop
 801aa80:	00000000 	.word	0x00000000
 801aa84:	41700000 	.word	0x41700000
 801aa88:	00000000 	.word	0x00000000
 801aa8c:	3e700000 	.word	0x3e700000
	...

0801aa98 <__kernel_tan>:
 801aa98:	eeb0 7b40 	vmov.f64	d7, d0
 801aa9c:	ee17 3a90 	vmov	r3, s15
 801aaa0:	4989      	ldr	r1, [pc, #548]	; (801acc8 <__kernel_tan+0x230>)
 801aaa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801aaa6:	428a      	cmp	r2, r1
 801aaa8:	b510      	push	{r4, lr}
 801aaaa:	dc33      	bgt.n	801ab14 <__kernel_tan+0x7c>
 801aaac:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801aab0:	ee16 1a90 	vmov	r1, s13
 801aab4:	2900      	cmp	r1, #0
 801aab6:	d143      	bne.n	801ab40 <__kernel_tan+0xa8>
 801aab8:	ee10 4a10 	vmov	r4, s0
 801aabc:	1c43      	adds	r3, r0, #1
 801aabe:	4323      	orrs	r3, r4
 801aac0:	4313      	orrs	r3, r2
 801aac2:	d108      	bne.n	801aad6 <__kernel_tan+0x3e>
 801aac4:	f000 fa20 	bl	801af08 <fabs>
 801aac8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801aacc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801aad0:	eeb0 0b47 	vmov.f64	d0, d7
 801aad4:	bd10      	pop	{r4, pc}
 801aad6:	2801      	cmp	r0, #1
 801aad8:	d0fa      	beq.n	801aad0 <__kernel_tan+0x38>
 801aada:	ee30 6b01 	vadd.f64	d6, d0, d1
 801aade:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801aae2:	ec53 2b16 	vmov	r2, r3, d6
 801aae6:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801aaea:	460a      	mov	r2, r1
 801aaec:	ec43 2b15 	vmov	d5, r2, r3
 801aaf0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801aaf4:	ec53 2b13 	vmov	r2, r3, d3
 801aaf8:	ee35 4b40 	vsub.f64	d4, d5, d0
 801aafc:	460a      	mov	r2, r1
 801aafe:	ec43 2b17 	vmov	d7, r2, r3
 801ab02:	ee31 4b44 	vsub.f64	d4, d1, d4
 801ab06:	eea5 6b07 	vfma.f64	d6, d5, d7
 801ab0a:	eea4 6b07 	vfma.f64	d6, d4, d7
 801ab0e:	eea6 7b03 	vfma.f64	d7, d6, d3
 801ab12:	e7dd      	b.n	801aad0 <__kernel_tan+0x38>
 801ab14:	496d      	ldr	r1, [pc, #436]	; (801accc <__kernel_tan+0x234>)
 801ab16:	428a      	cmp	r2, r1
 801ab18:	dd12      	ble.n	801ab40 <__kernel_tan+0xa8>
 801ab1a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 801ac48 <__kernel_tan+0x1b0>
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	bfb8      	it	lt
 801ab22:	eeb1 7b40 	vneglt.f64	d7, d0
 801ab26:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ab2a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801ac50 <__kernel_tan+0x1b8>
 801ab2e:	bfb8      	it	lt
 801ab30:	eeb1 1b41 	vneglt.f64	d1, d1
 801ab34:	ee37 7b41 	vsub.f64	d7, d7, d1
 801ab38:	ed9f 1b47 	vldr	d1, [pc, #284]	; 801ac58 <__kernel_tan+0x1c0>
 801ab3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ab40:	ee27 5b07 	vmul.f64	d5, d7, d7
 801ab44:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801ac60 <__kernel_tan+0x1c8>
 801ab48:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ab4c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801ac68 <__kernel_tan+0x1d0>
 801ab50:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ab54:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801ac70 <__kernel_tan+0x1d8>
 801ab58:	eea4 3b06 	vfma.f64	d3, d4, d6
 801ab5c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801ac78 <__kernel_tan+0x1e0>
 801ab60:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ab64:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801ac80 <__kernel_tan+0x1e8>
 801ab68:	eea4 3b06 	vfma.f64	d3, d4, d6
 801ab6c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801ac88 <__kernel_tan+0x1f0>
 801ab70:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801ac90 <__kernel_tan+0x1f8>
 801ab74:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ab78:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801ac98 <__kernel_tan+0x200>
 801ab7c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801ab80:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801aca0 <__kernel_tan+0x208>
 801ab84:	eea3 2b06 	vfma.f64	d2, d3, d6
 801ab88:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801aca8 <__kernel_tan+0x210>
 801ab8c:	eea2 3b06 	vfma.f64	d3, d2, d6
 801ab90:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801acb0 <__kernel_tan+0x218>
 801ab94:	eea3 2b06 	vfma.f64	d2, d3, d6
 801ab98:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801acb8 <__kernel_tan+0x220>
 801ab9c:	494b      	ldr	r1, [pc, #300]	; (801accc <__kernel_tan+0x234>)
 801ab9e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801aba2:	ee27 2b05 	vmul.f64	d2, d7, d5
 801aba6:	eeb0 6b44 	vmov.f64	d6, d4
 801abaa:	eeb0 4b41 	vmov.f64	d4, d1
 801abae:	eea3 6b05 	vfma.f64	d6, d3, d5
 801abb2:	eea6 4b02 	vfma.f64	d4, d6, d2
 801abb6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801acc0 <__kernel_tan+0x228>
 801abba:	eea4 1b05 	vfma.f64	d1, d4, d5
 801abbe:	428a      	cmp	r2, r1
 801abc0:	eea2 1b06 	vfma.f64	d1, d2, d6
 801abc4:	ee37 5b01 	vadd.f64	d5, d7, d1
 801abc8:	dd1d      	ble.n	801ac06 <__kernel_tan+0x16e>
 801abca:	ee25 3b05 	vmul.f64	d3, d5, d5
 801abce:	179b      	asrs	r3, r3, #30
 801abd0:	ee06 0a90 	vmov	s13, r0
 801abd4:	f003 0302 	and.w	r3, r3, #2
 801abd8:	f1c3 0301 	rsb	r3, r3, #1
 801abdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801abe0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801abe4:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801abe8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801abec:	ee34 4b41 	vsub.f64	d4, d4, d1
 801abf0:	ee37 7b44 	vsub.f64	d7, d7, d4
 801abf4:	eea7 6b45 	vfms.f64	d6, d7, d5
 801abf8:	ee07 3a90 	vmov	s15, r3
 801abfc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ac00:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ac04:	e764      	b.n	801aad0 <__kernel_tan+0x38>
 801ac06:	2801      	cmp	r0, #1
 801ac08:	d01a      	beq.n	801ac40 <__kernel_tan+0x1a8>
 801ac0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ac0e:	ec51 0b15 	vmov	r0, r1, d5
 801ac12:	2000      	movs	r0, #0
 801ac14:	ec41 0b13 	vmov	d3, r0, r1
 801ac18:	ee33 7b47 	vsub.f64	d7, d3, d7
 801ac1c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801ac20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ac24:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801ac28:	ec53 2b14 	vmov	r2, r3, d4
 801ac2c:	4602      	mov	r2, r0
 801ac2e:	ec43 2b17 	vmov	d7, r2, r3
 801ac32:	eea3 6b07 	vfma.f64	d6, d3, d7
 801ac36:	eea1 6b07 	vfma.f64	d6, d1, d7
 801ac3a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ac3e:	e747      	b.n	801aad0 <__kernel_tan+0x38>
 801ac40:	eeb0 7b45 	vmov.f64	d7, d5
 801ac44:	e744      	b.n	801aad0 <__kernel_tan+0x38>
 801ac46:	bf00      	nop
 801ac48:	54442d18 	.word	0x54442d18
 801ac4c:	3fe921fb 	.word	0x3fe921fb
 801ac50:	33145c07 	.word	0x33145c07
 801ac54:	3c81a626 	.word	0x3c81a626
	...
 801ac60:	db605373 	.word	0xdb605373
 801ac64:	bef375cb 	.word	0xbef375cb
 801ac68:	a03792a6 	.word	0xa03792a6
 801ac6c:	3f147e88 	.word	0x3f147e88
 801ac70:	f2f26501 	.word	0xf2f26501
 801ac74:	3f4344d8 	.word	0x3f4344d8
 801ac78:	c9560328 	.word	0xc9560328
 801ac7c:	3f6d6d22 	.word	0x3f6d6d22
 801ac80:	8406d637 	.word	0x8406d637
 801ac84:	3f9664f4 	.word	0x3f9664f4
 801ac88:	1110fe7a 	.word	0x1110fe7a
 801ac8c:	3fc11111 	.word	0x3fc11111
 801ac90:	74bf7ad4 	.word	0x74bf7ad4
 801ac94:	3efb2a70 	.word	0x3efb2a70
 801ac98:	32f0a7e9 	.word	0x32f0a7e9
 801ac9c:	3f12b80f 	.word	0x3f12b80f
 801aca0:	1a8d1068 	.word	0x1a8d1068
 801aca4:	3f3026f7 	.word	0x3f3026f7
 801aca8:	fee08315 	.word	0xfee08315
 801acac:	3f57dbc8 	.word	0x3f57dbc8
 801acb0:	e96e8493 	.word	0xe96e8493
 801acb4:	3f8226e3 	.word	0x3f8226e3
 801acb8:	1bb341fe 	.word	0x1bb341fe
 801acbc:	3faba1ba 	.word	0x3faba1ba
 801acc0:	55555563 	.word	0x55555563
 801acc4:	3fd55555 	.word	0x3fd55555
 801acc8:	3e2fffff 	.word	0x3e2fffff
 801accc:	3fe59427 	.word	0x3fe59427

0801acd0 <expm1f>:
 801acd0:	ee10 2a10 	vmov	r2, s0
 801acd4:	497d      	ldr	r1, [pc, #500]	; (801aecc <expm1f+0x1fc>)
 801acd6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801acda:	428b      	cmp	r3, r1
 801acdc:	d920      	bls.n	801ad20 <expm1f+0x50>
 801acde:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ace2:	d902      	bls.n	801acea <expm1f+0x1a>
 801ace4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ace8:	4770      	bx	lr
 801acea:	d105      	bne.n	801acf8 <expm1f+0x28>
 801acec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801acf0:	2a00      	cmp	r2, #0
 801acf2:	fe20 0a27 	vselge.f32	s0, s0, s15
 801acf6:	4770      	bx	lr
 801acf8:	2a00      	cmp	r2, #0
 801acfa:	db05      	blt.n	801ad08 <expm1f+0x38>
 801acfc:	4974      	ldr	r1, [pc, #464]	; (801aed0 <expm1f+0x200>)
 801acfe:	428b      	cmp	r3, r1
 801ad00:	d95c      	bls.n	801adbc <expm1f+0xec>
 801ad02:	2000      	movs	r0, #0
 801ad04:	f7fe bf5e 	b.w	8019bc4 <__math_oflowf>
 801ad08:	eddf 7a72 	vldr	s15, [pc, #456]	; 801aed4 <expm1f+0x204>
 801ad0c:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ad10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ad14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad18:	d550      	bpl.n	801adbc <expm1f+0xec>
 801ad1a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ad1e:	4770      	bx	lr
 801ad20:	496d      	ldr	r1, [pc, #436]	; (801aed8 <expm1f+0x208>)
 801ad22:	428b      	cmp	r3, r1
 801ad24:	d966      	bls.n	801adf4 <expm1f+0x124>
 801ad26:	496d      	ldr	r1, [pc, #436]	; (801aedc <expm1f+0x20c>)
 801ad28:	428b      	cmp	r3, r1
 801ad2a:	d847      	bhi.n	801adbc <expm1f+0xec>
 801ad2c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801aee0 <expm1f+0x210>
 801ad30:	2a00      	cmp	r2, #0
 801ad32:	bfa7      	ittee	ge
 801ad34:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801ad38:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 801aee4 <expm1f+0x214>
 801ad3c:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 801aee8 <expm1f+0x218>
 801ad40:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801ad44:	bfac      	ite	ge
 801ad46:	2301      	movge	r3, #1
 801ad48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ad4c:	ee37 0a66 	vsub.f32	s0, s14, s13
 801ad50:	ee77 7a40 	vsub.f32	s15, s14, s0
 801ad54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ad58:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801ad5c:	ee20 4a25 	vmul.f32	s8, s0, s11
 801ad60:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801aeec <expm1f+0x21c>
 801ad64:	eddf 6a62 	vldr	s13, [pc, #392]	; 801aef0 <expm1f+0x220>
 801ad68:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801aef4 <expm1f+0x224>
 801ad6c:	ee20 7a04 	vmul.f32	s14, s0, s8
 801ad70:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801ad74:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ad78:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801aef8 <expm1f+0x228>
 801ad7c:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ad80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801aefc <expm1f+0x22c>
 801ad84:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ad88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ad8c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ad90:	eef0 6a46 	vmov.f32	s13, s12
 801ad94:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ad98:	eee4 4a66 	vfms.f32	s9, s8, s13
 801ad9c:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801ada0:	eea0 4a64 	vfms.f32	s8, s0, s9
 801ada4:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801ada8:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801adac:	ee66 6a87 	vmul.f32	s13, s13, s14
 801adb0:	bb73      	cbnz	r3, 801ae10 <expm1f+0x140>
 801adb2:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801adb6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801adba:	4770      	bx	lr
 801adbc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801adc0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801adc4:	2a00      	cmp	r2, #0
 801adc6:	fe67 7a87 	vselge.f32	s15, s15, s14
 801adca:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801af00 <expm1f+0x230>
 801adce:	ee40 7a07 	vmla.f32	s15, s0, s14
 801add2:	eeb0 7a40 	vmov.f32	s14, s0
 801add6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801adda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801adde:	ee17 3a90 	vmov	r3, s15
 801ade2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801aee0 <expm1f+0x210>
 801ade6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801adea:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801aee4 <expm1f+0x214>
 801adee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801adf2:	e7ab      	b.n	801ad4c <expm1f+0x7c>
 801adf4:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801adf8:	d208      	bcs.n	801ae0c <expm1f+0x13c>
 801adfa:	eddf 7a42 	vldr	s15, [pc, #264]	; 801af04 <expm1f+0x234>
 801adfe:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ae02:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801ae06:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ae0a:	4770      	bx	lr
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	e7a3      	b.n	801ad58 <expm1f+0x88>
 801ae10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ae14:	1c5a      	adds	r2, r3, #1
 801ae16:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801ae1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae1e:	d106      	bne.n	801ae2e <expm1f+0x15e>
 801ae20:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ae24:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ae28:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801ae2c:	4770      	bx	lr
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d118      	bne.n	801ae64 <expm1f+0x194>
 801ae32:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801ae36:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae3e:	bf5b      	ittet	pl
 801ae40:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801ae44:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801ae48:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 801ae4c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801ae50:	bf43      	ittte	mi
 801ae52:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801ae56:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801ae5a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801ae5e:	eeb0 0a46 	vmovpl.f32	s0, s12
 801ae62:	4770      	bx	lr
 801ae64:	1c5a      	adds	r2, r3, #1
 801ae66:	2a39      	cmp	r2, #57	; 0x39
 801ae68:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801ae6c:	d90b      	bls.n	801ae86 <expm1f+0x1b6>
 801ae6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ae72:	ee76 7a67 	vsub.f32	s15, s12, s15
 801ae76:	ee17 3a90 	vmov	r3, s15
 801ae7a:	4419      	add	r1, r3
 801ae7c:	ee07 1a90 	vmov	s15, r1
 801ae80:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801ae84:	4770      	bx	lr
 801ae86:	2b16      	cmp	r3, #22
 801ae88:	dc11      	bgt.n	801aeae <expm1f+0x1de>
 801ae8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ae8e:	fa42 f303 	asr.w	r3, r2, r3
 801ae92:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801ae96:	ee07 3a10 	vmov	s14, r3
 801ae9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ae9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aea2:	ee17 3a90 	vmov	r3, s15
 801aea6:	440b      	add	r3, r1
 801aea8:	ee00 3a10 	vmov	s0, r3
 801aeac:	4770      	bx	lr
 801aeae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801aeb2:	05db      	lsls	r3, r3, #23
 801aeb4:	ee07 3a10 	vmov	s14, r3
 801aeb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aebc:	ee70 7a67 	vsub.f32	s15, s0, s15
 801aec0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aec4:	ee17 3a90 	vmov	r3, s15
 801aec8:	e7ed      	b.n	801aea6 <expm1f+0x1d6>
 801aeca:	bf00      	nop
 801aecc:	4195b843 	.word	0x4195b843
 801aed0:	42b17217 	.word	0x42b17217
 801aed4:	0da24260 	.word	0x0da24260
 801aed8:	3eb17218 	.word	0x3eb17218
 801aedc:	3f851591 	.word	0x3f851591
 801aee0:	3f317180 	.word	0x3f317180
 801aee4:	3717f7d1 	.word	0x3717f7d1
 801aee8:	b717f7d1 	.word	0xb717f7d1
 801aeec:	b457edbb 	.word	0xb457edbb
 801aef0:	36867e54 	.word	0x36867e54
 801aef4:	bd088889 	.word	0xbd088889
 801aef8:	b8a670cd 	.word	0xb8a670cd
 801aefc:	3ad00d01 	.word	0x3ad00d01
 801af00:	3fb8aa3b 	.word	0x3fb8aa3b
 801af04:	7149f2ca 	.word	0x7149f2ca

0801af08 <fabs>:
 801af08:	ec51 0b10 	vmov	r0, r1, d0
 801af0c:	ee10 2a10 	vmov	r2, s0
 801af10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801af14:	ec43 2b10 	vmov	d0, r2, r3
 801af18:	4770      	bx	lr
 801af1a:	0000      	movs	r0, r0
 801af1c:	0000      	movs	r0, r0
	...

0801af20 <scalbn>:
 801af20:	ee10 1a90 	vmov	r1, s1
 801af24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af28:	b98b      	cbnz	r3, 801af4e <scalbn+0x2e>
 801af2a:	ee10 3a10 	vmov	r3, s0
 801af2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801af32:	4319      	orrs	r1, r3
 801af34:	d00a      	beq.n	801af4c <scalbn+0x2c>
 801af36:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801afe8 <scalbn+0xc8>
 801af3a:	4b37      	ldr	r3, [pc, #220]	; (801b018 <scalbn+0xf8>)
 801af3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801af40:	4298      	cmp	r0, r3
 801af42:	da0b      	bge.n	801af5c <scalbn+0x3c>
 801af44:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801aff0 <scalbn+0xd0>
 801af48:	ee20 0b07 	vmul.f64	d0, d0, d7
 801af4c:	4770      	bx	lr
 801af4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801af52:	4293      	cmp	r3, r2
 801af54:	d107      	bne.n	801af66 <scalbn+0x46>
 801af56:	ee30 0b00 	vadd.f64	d0, d0, d0
 801af5a:	4770      	bx	lr
 801af5c:	ee10 1a90 	vmov	r1, s1
 801af60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af64:	3b36      	subs	r3, #54	; 0x36
 801af66:	f24c 3250 	movw	r2, #50000	; 0xc350
 801af6a:	4290      	cmp	r0, r2
 801af6c:	dd0d      	ble.n	801af8a <scalbn+0x6a>
 801af6e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801aff8 <scalbn+0xd8>
 801af72:	ee10 3a90 	vmov	r3, s1
 801af76:	eeb0 6b47 	vmov.f64	d6, d7
 801af7a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801b000 <scalbn+0xe0>
 801af7e:	2b00      	cmp	r3, #0
 801af80:	fe27 7b05 	vselge.f64	d7, d7, d5
 801af84:	ee27 0b06 	vmul.f64	d0, d7, d6
 801af88:	4770      	bx	lr
 801af8a:	4418      	add	r0, r3
 801af8c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801af90:	4298      	cmp	r0, r3
 801af92:	dcec      	bgt.n	801af6e <scalbn+0x4e>
 801af94:	2800      	cmp	r0, #0
 801af96:	dd0a      	ble.n	801afae <scalbn+0x8e>
 801af98:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801af9c:	ec53 2b10 	vmov	r2, r3, d0
 801afa0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801afa4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801afa8:	ec43 2b10 	vmov	d0, r2, r3
 801afac:	4770      	bx	lr
 801afae:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801afb2:	da09      	bge.n	801afc8 <scalbn+0xa8>
 801afb4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801aff0 <scalbn+0xd0>
 801afb8:	ee10 3a90 	vmov	r3, s1
 801afbc:	eeb0 6b47 	vmov.f64	d6, d7
 801afc0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801b008 <scalbn+0xe8>
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	e7db      	b.n	801af80 <scalbn+0x60>
 801afc8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801afcc:	ec53 2b10 	vmov	r2, r3, d0
 801afd0:	3036      	adds	r0, #54	; 0x36
 801afd2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801afd6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801afda:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801b010 <scalbn+0xf0>
 801afde:	ec43 2b10 	vmov	d0, r2, r3
 801afe2:	e7b1      	b.n	801af48 <scalbn+0x28>
 801afe4:	f3af 8000 	nop.w
 801afe8:	00000000 	.word	0x00000000
 801afec:	43500000 	.word	0x43500000
 801aff0:	c2f8f359 	.word	0xc2f8f359
 801aff4:	01a56e1f 	.word	0x01a56e1f
 801aff8:	8800759c 	.word	0x8800759c
 801affc:	7e37e43c 	.word	0x7e37e43c
 801b000:	8800759c 	.word	0x8800759c
 801b004:	fe37e43c 	.word	0xfe37e43c
 801b008:	c2f8f359 	.word	0xc2f8f359
 801b00c:	81a56e1f 	.word	0x81a56e1f
 801b010:	00000000 	.word	0x00000000
 801b014:	3c900000 	.word	0x3c900000
 801b018:	ffff3cb0 	.word	0xffff3cb0

0801b01c <__kernel_rem_pio2f>:
 801b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b020:	ed2d 8b04 	vpush	{d8-d9}
 801b024:	b0d9      	sub	sp, #356	; 0x164
 801b026:	4688      	mov	r8, r1
 801b028:	9002      	str	r0, [sp, #8]
 801b02a:	49b8      	ldr	r1, [pc, #736]	; (801b30c <__kernel_rem_pio2f+0x2f0>)
 801b02c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b02e:	9301      	str	r3, [sp, #4]
 801b030:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b034:	9901      	ldr	r1, [sp, #4]
 801b036:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b038:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801b03c:	1d11      	adds	r1, r2, #4
 801b03e:	db25      	blt.n	801b08c <__kernel_rem_pio2f+0x70>
 801b040:	1ed0      	subs	r0, r2, #3
 801b042:	bf48      	it	mi
 801b044:	1d10      	addmi	r0, r2, #4
 801b046:	10c0      	asrs	r0, r0, #3
 801b048:	1c45      	adds	r5, r0, #1
 801b04a:	00e9      	lsls	r1, r5, #3
 801b04c:	eba0 070b 	sub.w	r7, r0, fp
 801b050:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b054:	9103      	str	r1, [sp, #12]
 801b056:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b05a:	eb0a 0c0b 	add.w	ip, sl, fp
 801b05e:	ae1c      	add	r6, sp, #112	; 0x70
 801b060:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b064:	2400      	movs	r4, #0
 801b066:	4564      	cmp	r4, ip
 801b068:	dd12      	ble.n	801b090 <__kernel_rem_pio2f+0x74>
 801b06a:	9901      	ldr	r1, [sp, #4]
 801b06c:	ac1c      	add	r4, sp, #112	; 0x70
 801b06e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b072:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b076:	f04f 0c00 	mov.w	ip, #0
 801b07a:	45d4      	cmp	ip, sl
 801b07c:	dc27      	bgt.n	801b0ce <__kernel_rem_pio2f+0xb2>
 801b07e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b082:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b086:	4627      	mov	r7, r4
 801b088:	2600      	movs	r6, #0
 801b08a:	e016      	b.n	801b0ba <__kernel_rem_pio2f+0x9e>
 801b08c:	2000      	movs	r0, #0
 801b08e:	e7db      	b.n	801b048 <__kernel_rem_pio2f+0x2c>
 801b090:	42e7      	cmn	r7, r4
 801b092:	bf5d      	ittte	pl
 801b094:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b098:	ee07 1a90 	vmovpl	s15, r1
 801b09c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b0a0:	eef0 7a47 	vmovmi.f32	s15, s14
 801b0a4:	ece6 7a01 	vstmia	r6!, {s15}
 801b0a8:	3401      	adds	r4, #1
 801b0aa:	e7dc      	b.n	801b066 <__kernel_rem_pio2f+0x4a>
 801b0ac:	ecfe 6a01 	vldmia	lr!, {s13}
 801b0b0:	ed97 7a00 	vldr	s14, [r7]
 801b0b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b0b8:	3601      	adds	r6, #1
 801b0ba:	455e      	cmp	r6, fp
 801b0bc:	f1a7 0704 	sub.w	r7, r7, #4
 801b0c0:	ddf4      	ble.n	801b0ac <__kernel_rem_pio2f+0x90>
 801b0c2:	ece9 7a01 	vstmia	r9!, {s15}
 801b0c6:	f10c 0c01 	add.w	ip, ip, #1
 801b0ca:	3404      	adds	r4, #4
 801b0cc:	e7d5      	b.n	801b07a <__kernel_rem_pio2f+0x5e>
 801b0ce:	a908      	add	r1, sp, #32
 801b0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b0d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b0d8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b318 <__kernel_rem_pio2f+0x2fc>
 801b0dc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b314 <__kernel_rem_pio2f+0x2f8>
 801b0e0:	9105      	str	r1, [sp, #20]
 801b0e2:	9304      	str	r3, [sp, #16]
 801b0e4:	4656      	mov	r6, sl
 801b0e6:	00b3      	lsls	r3, r6, #2
 801b0e8:	9306      	str	r3, [sp, #24]
 801b0ea:	ab58      	add	r3, sp, #352	; 0x160
 801b0ec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b0f0:	ac08      	add	r4, sp, #32
 801b0f2:	ab44      	add	r3, sp, #272	; 0x110
 801b0f4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b0f8:	46a4      	mov	ip, r4
 801b0fa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b0fe:	4637      	mov	r7, r6
 801b100:	2f00      	cmp	r7, #0
 801b102:	f1a0 0004 	sub.w	r0, r0, #4
 801b106:	dc4a      	bgt.n	801b19e <__kernel_rem_pio2f+0x182>
 801b108:	4628      	mov	r0, r5
 801b10a:	9207      	str	r2, [sp, #28]
 801b10c:	f000 fab2 	bl	801b674 <scalbnf>
 801b110:	eeb0 8a40 	vmov.f32	s16, s0
 801b114:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b118:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b11c:	f000 fa68 	bl	801b5f0 <floorf>
 801b120:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b124:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b128:	2d00      	cmp	r5, #0
 801b12a:	9a07      	ldr	r2, [sp, #28]
 801b12c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b130:	ee17 9a90 	vmov	r9, s15
 801b134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b138:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b13c:	dd41      	ble.n	801b1c2 <__kernel_rem_pio2f+0x1a6>
 801b13e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801b142:	ab08      	add	r3, sp, #32
 801b144:	f1c5 0e08 	rsb	lr, r5, #8
 801b148:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b14c:	fa47 f00e 	asr.w	r0, r7, lr
 801b150:	4481      	add	r9, r0
 801b152:	fa00 f00e 	lsl.w	r0, r0, lr
 801b156:	1a3f      	subs	r7, r7, r0
 801b158:	f1c5 0007 	rsb	r0, r5, #7
 801b15c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b160:	4107      	asrs	r7, r0
 801b162:	2f00      	cmp	r7, #0
 801b164:	dd3c      	ble.n	801b1e0 <__kernel_rem_pio2f+0x1c4>
 801b166:	f04f 0e00 	mov.w	lr, #0
 801b16a:	f109 0901 	add.w	r9, r9, #1
 801b16e:	4671      	mov	r1, lr
 801b170:	4576      	cmp	r6, lr
 801b172:	dc67      	bgt.n	801b244 <__kernel_rem_pio2f+0x228>
 801b174:	2d00      	cmp	r5, #0
 801b176:	dd03      	ble.n	801b180 <__kernel_rem_pio2f+0x164>
 801b178:	2d01      	cmp	r5, #1
 801b17a:	d074      	beq.n	801b266 <__kernel_rem_pio2f+0x24a>
 801b17c:	2d02      	cmp	r5, #2
 801b17e:	d07b      	beq.n	801b278 <__kernel_rem_pio2f+0x25c>
 801b180:	2f02      	cmp	r7, #2
 801b182:	d12d      	bne.n	801b1e0 <__kernel_rem_pio2f+0x1c4>
 801b184:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b188:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b18c:	b341      	cbz	r1, 801b1e0 <__kernel_rem_pio2f+0x1c4>
 801b18e:	4628      	mov	r0, r5
 801b190:	9207      	str	r2, [sp, #28]
 801b192:	f000 fa6f 	bl	801b674 <scalbnf>
 801b196:	9a07      	ldr	r2, [sp, #28]
 801b198:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b19c:	e020      	b.n	801b1e0 <__kernel_rem_pio2f+0x1c4>
 801b19e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b1a2:	3f01      	subs	r7, #1
 801b1a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b1b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b1b4:	ecac 0a01 	vstmia	ip!, {s0}
 801b1b8:	ed90 0a00 	vldr	s0, [r0]
 801b1bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b1c0:	e79e      	b.n	801b100 <__kernel_rem_pio2f+0xe4>
 801b1c2:	d105      	bne.n	801b1d0 <__kernel_rem_pio2f+0x1b4>
 801b1c4:	1e70      	subs	r0, r6, #1
 801b1c6:	ab08      	add	r3, sp, #32
 801b1c8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b1cc:	11ff      	asrs	r7, r7, #7
 801b1ce:	e7c8      	b.n	801b162 <__kernel_rem_pio2f+0x146>
 801b1d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b1d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1dc:	da30      	bge.n	801b240 <__kernel_rem_pio2f+0x224>
 801b1de:	2700      	movs	r7, #0
 801b1e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1e8:	f040 809a 	bne.w	801b320 <__kernel_rem_pio2f+0x304>
 801b1ec:	1e74      	subs	r4, r6, #1
 801b1ee:	46a4      	mov	ip, r4
 801b1f0:	2100      	movs	r1, #0
 801b1f2:	45d4      	cmp	ip, sl
 801b1f4:	da47      	bge.n	801b286 <__kernel_rem_pio2f+0x26a>
 801b1f6:	2900      	cmp	r1, #0
 801b1f8:	d063      	beq.n	801b2c2 <__kernel_rem_pio2f+0x2a6>
 801b1fa:	ab08      	add	r3, sp, #32
 801b1fc:	3d08      	subs	r5, #8
 801b1fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d07f      	beq.n	801b306 <__kernel_rem_pio2f+0x2ea>
 801b206:	4628      	mov	r0, r5
 801b208:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b20c:	f000 fa32 	bl	801b674 <scalbnf>
 801b210:	1c63      	adds	r3, r4, #1
 801b212:	aa44      	add	r2, sp, #272	; 0x110
 801b214:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b318 <__kernel_rem_pio2f+0x2fc>
 801b218:	0099      	lsls	r1, r3, #2
 801b21a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b21e:	4623      	mov	r3, r4
 801b220:	2b00      	cmp	r3, #0
 801b222:	f280 80ad 	bge.w	801b380 <__kernel_rem_pio2f+0x364>
 801b226:	4623      	mov	r3, r4
 801b228:	2b00      	cmp	r3, #0
 801b22a:	f2c0 80cb 	blt.w	801b3c4 <__kernel_rem_pio2f+0x3a8>
 801b22e:	aa44      	add	r2, sp, #272	; 0x110
 801b230:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b234:	4e36      	ldr	r6, [pc, #216]	; (801b310 <__kernel_rem_pio2f+0x2f4>)
 801b236:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b23a:	2000      	movs	r0, #0
 801b23c:	1ae2      	subs	r2, r4, r3
 801b23e:	e0b6      	b.n	801b3ae <__kernel_rem_pio2f+0x392>
 801b240:	2702      	movs	r7, #2
 801b242:	e790      	b.n	801b166 <__kernel_rem_pio2f+0x14a>
 801b244:	6820      	ldr	r0, [r4, #0]
 801b246:	b949      	cbnz	r1, 801b25c <__kernel_rem_pio2f+0x240>
 801b248:	b118      	cbz	r0, 801b252 <__kernel_rem_pio2f+0x236>
 801b24a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b24e:	6020      	str	r0, [r4, #0]
 801b250:	2001      	movs	r0, #1
 801b252:	f10e 0e01 	add.w	lr, lr, #1
 801b256:	3404      	adds	r4, #4
 801b258:	4601      	mov	r1, r0
 801b25a:	e789      	b.n	801b170 <__kernel_rem_pio2f+0x154>
 801b25c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b260:	6020      	str	r0, [r4, #0]
 801b262:	4608      	mov	r0, r1
 801b264:	e7f5      	b.n	801b252 <__kernel_rem_pio2f+0x236>
 801b266:	1e74      	subs	r4, r6, #1
 801b268:	ab08      	add	r3, sp, #32
 801b26a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b26e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b272:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b276:	e783      	b.n	801b180 <__kernel_rem_pio2f+0x164>
 801b278:	1e74      	subs	r4, r6, #1
 801b27a:	ab08      	add	r3, sp, #32
 801b27c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b280:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b284:	e7f5      	b.n	801b272 <__kernel_rem_pio2f+0x256>
 801b286:	ab08      	add	r3, sp, #32
 801b288:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b28c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b290:	4301      	orrs	r1, r0
 801b292:	e7ae      	b.n	801b1f2 <__kernel_rem_pio2f+0x1d6>
 801b294:	3001      	adds	r0, #1
 801b296:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b29a:	2f00      	cmp	r7, #0
 801b29c:	d0fa      	beq.n	801b294 <__kernel_rem_pio2f+0x278>
 801b29e:	9b06      	ldr	r3, [sp, #24]
 801b2a0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b2a4:	eb0d 0403 	add.w	r4, sp, r3
 801b2a8:	9b01      	ldr	r3, [sp, #4]
 801b2aa:	18f7      	adds	r7, r6, r3
 801b2ac:	ab1c      	add	r3, sp, #112	; 0x70
 801b2ae:	f106 0c01 	add.w	ip, r6, #1
 801b2b2:	3c4c      	subs	r4, #76	; 0x4c
 801b2b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b2b8:	4430      	add	r0, r6
 801b2ba:	4560      	cmp	r0, ip
 801b2bc:	da04      	bge.n	801b2c8 <__kernel_rem_pio2f+0x2ac>
 801b2be:	4606      	mov	r6, r0
 801b2c0:	e711      	b.n	801b0e6 <__kernel_rem_pio2f+0xca>
 801b2c2:	9c05      	ldr	r4, [sp, #20]
 801b2c4:	2001      	movs	r0, #1
 801b2c6:	e7e6      	b.n	801b296 <__kernel_rem_pio2f+0x27a>
 801b2c8:	9b04      	ldr	r3, [sp, #16]
 801b2ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b2ce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b2d2:	9306      	str	r3, [sp, #24]
 801b2d4:	ee07 3a90 	vmov	s15, r3
 801b2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2dc:	2600      	movs	r6, #0
 801b2de:	ece7 7a01 	vstmia	r7!, {s15}
 801b2e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b2e6:	46b9      	mov	r9, r7
 801b2e8:	455e      	cmp	r6, fp
 801b2ea:	dd04      	ble.n	801b2f6 <__kernel_rem_pio2f+0x2da>
 801b2ec:	ece4 7a01 	vstmia	r4!, {s15}
 801b2f0:	f10c 0c01 	add.w	ip, ip, #1
 801b2f4:	e7e1      	b.n	801b2ba <__kernel_rem_pio2f+0x29e>
 801b2f6:	ecfe 6a01 	vldmia	lr!, {s13}
 801b2fa:	ed39 7a01 	vldmdb	r9!, {s14}
 801b2fe:	3601      	adds	r6, #1
 801b300:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b304:	e7f0      	b.n	801b2e8 <__kernel_rem_pio2f+0x2cc>
 801b306:	3c01      	subs	r4, #1
 801b308:	e777      	b.n	801b1fa <__kernel_rem_pio2f+0x1de>
 801b30a:	bf00      	nop
 801b30c:	0802b0ec 	.word	0x0802b0ec
 801b310:	0802b0c0 	.word	0x0802b0c0
 801b314:	43800000 	.word	0x43800000
 801b318:	3b800000 	.word	0x3b800000
 801b31c:	00000000 	.word	0x00000000
 801b320:	9b03      	ldr	r3, [sp, #12]
 801b322:	eeb0 0a48 	vmov.f32	s0, s16
 801b326:	1a98      	subs	r0, r3, r2
 801b328:	f000 f9a4 	bl	801b674 <scalbnf>
 801b32c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b314 <__kernel_rem_pio2f+0x2f8>
 801b330:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b338:	db19      	blt.n	801b36e <__kernel_rem_pio2f+0x352>
 801b33a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b318 <__kernel_rem_pio2f+0x2fc>
 801b33e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b342:	aa08      	add	r2, sp, #32
 801b344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b348:	1c74      	adds	r4, r6, #1
 801b34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b34e:	3508      	adds	r5, #8
 801b350:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b358:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b35c:	ee10 3a10 	vmov	r3, s0
 801b360:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b364:	ee17 3a90 	vmov	r3, s15
 801b368:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b36c:	e74b      	b.n	801b206 <__kernel_rem_pio2f+0x1ea>
 801b36e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b372:	aa08      	add	r2, sp, #32
 801b374:	ee10 3a10 	vmov	r3, s0
 801b378:	4634      	mov	r4, r6
 801b37a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b37e:	e742      	b.n	801b206 <__kernel_rem_pio2f+0x1ea>
 801b380:	a808      	add	r0, sp, #32
 801b382:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b386:	9001      	str	r0, [sp, #4]
 801b388:	ee07 0a90 	vmov	s15, r0
 801b38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b390:	3b01      	subs	r3, #1
 801b392:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b396:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b39a:	ed62 7a01 	vstmdb	r2!, {s15}
 801b39e:	e73f      	b.n	801b220 <__kernel_rem_pio2f+0x204>
 801b3a0:	ecf6 6a01 	vldmia	r6!, {s13}
 801b3a4:	ecb5 7a01 	vldmia	r5!, {s14}
 801b3a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b3ac:	3001      	adds	r0, #1
 801b3ae:	4550      	cmp	r0, sl
 801b3b0:	dc01      	bgt.n	801b3b6 <__kernel_rem_pio2f+0x39a>
 801b3b2:	4290      	cmp	r0, r2
 801b3b4:	ddf4      	ble.n	801b3a0 <__kernel_rem_pio2f+0x384>
 801b3b6:	a858      	add	r0, sp, #352	; 0x160
 801b3b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b3bc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801b3c0:	3b01      	subs	r3, #1
 801b3c2:	e731      	b.n	801b228 <__kernel_rem_pio2f+0x20c>
 801b3c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b3c6:	2b02      	cmp	r3, #2
 801b3c8:	dc09      	bgt.n	801b3de <__kernel_rem_pio2f+0x3c2>
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	dc2b      	bgt.n	801b426 <__kernel_rem_pio2f+0x40a>
 801b3ce:	d044      	beq.n	801b45a <__kernel_rem_pio2f+0x43e>
 801b3d0:	f009 0007 	and.w	r0, r9, #7
 801b3d4:	b059      	add	sp, #356	; 0x164
 801b3d6:	ecbd 8b04 	vpop	{d8-d9}
 801b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b3e0:	2b03      	cmp	r3, #3
 801b3e2:	d1f5      	bne.n	801b3d0 <__kernel_rem_pio2f+0x3b4>
 801b3e4:	aa30      	add	r2, sp, #192	; 0xc0
 801b3e6:	1f0b      	subs	r3, r1, #4
 801b3e8:	4413      	add	r3, r2
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	2800      	cmp	r0, #0
 801b3f0:	f1a2 0204 	sub.w	r2, r2, #4
 801b3f4:	dc52      	bgt.n	801b49c <__kernel_rem_pio2f+0x480>
 801b3f6:	4622      	mov	r2, r4
 801b3f8:	2a01      	cmp	r2, #1
 801b3fa:	f1a3 0304 	sub.w	r3, r3, #4
 801b3fe:	dc5d      	bgt.n	801b4bc <__kernel_rem_pio2f+0x4a0>
 801b400:	ab30      	add	r3, sp, #192	; 0xc0
 801b402:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b406:	440b      	add	r3, r1
 801b408:	2c01      	cmp	r4, #1
 801b40a:	dc67      	bgt.n	801b4dc <__kernel_rem_pio2f+0x4c0>
 801b40c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b410:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b414:	2f00      	cmp	r7, #0
 801b416:	d167      	bne.n	801b4e8 <__kernel_rem_pio2f+0x4cc>
 801b418:	edc8 6a00 	vstr	s13, [r8]
 801b41c:	ed88 7a01 	vstr	s14, [r8, #4]
 801b420:	edc8 7a02 	vstr	s15, [r8, #8]
 801b424:	e7d4      	b.n	801b3d0 <__kernel_rem_pio2f+0x3b4>
 801b426:	ab30      	add	r3, sp, #192	; 0xc0
 801b428:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b42c:	440b      	add	r3, r1
 801b42e:	4622      	mov	r2, r4
 801b430:	2a00      	cmp	r2, #0
 801b432:	da24      	bge.n	801b47e <__kernel_rem_pio2f+0x462>
 801b434:	b34f      	cbz	r7, 801b48a <__kernel_rem_pio2f+0x46e>
 801b436:	eef1 7a47 	vneg.f32	s15, s14
 801b43a:	edc8 7a00 	vstr	s15, [r8]
 801b43e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b446:	aa31      	add	r2, sp, #196	; 0xc4
 801b448:	2301      	movs	r3, #1
 801b44a:	429c      	cmp	r4, r3
 801b44c:	da20      	bge.n	801b490 <__kernel_rem_pio2f+0x474>
 801b44e:	b10f      	cbz	r7, 801b454 <__kernel_rem_pio2f+0x438>
 801b450:	eef1 7a67 	vneg.f32	s15, s15
 801b454:	edc8 7a01 	vstr	s15, [r8, #4]
 801b458:	e7ba      	b.n	801b3d0 <__kernel_rem_pio2f+0x3b4>
 801b45a:	ab30      	add	r3, sp, #192	; 0xc0
 801b45c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b31c <__kernel_rem_pio2f+0x300>
 801b460:	440b      	add	r3, r1
 801b462:	2c00      	cmp	r4, #0
 801b464:	da05      	bge.n	801b472 <__kernel_rem_pio2f+0x456>
 801b466:	b10f      	cbz	r7, 801b46c <__kernel_rem_pio2f+0x450>
 801b468:	eef1 7a67 	vneg.f32	s15, s15
 801b46c:	edc8 7a00 	vstr	s15, [r8]
 801b470:	e7ae      	b.n	801b3d0 <__kernel_rem_pio2f+0x3b4>
 801b472:	ed33 7a01 	vldmdb	r3!, {s14}
 801b476:	3c01      	subs	r4, #1
 801b478:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b47c:	e7f1      	b.n	801b462 <__kernel_rem_pio2f+0x446>
 801b47e:	ed73 7a01 	vldmdb	r3!, {s15}
 801b482:	3a01      	subs	r2, #1
 801b484:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b488:	e7d2      	b.n	801b430 <__kernel_rem_pio2f+0x414>
 801b48a:	eef0 7a47 	vmov.f32	s15, s14
 801b48e:	e7d4      	b.n	801b43a <__kernel_rem_pio2f+0x41e>
 801b490:	ecb2 7a01 	vldmia	r2!, {s14}
 801b494:	3301      	adds	r3, #1
 801b496:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b49a:	e7d6      	b.n	801b44a <__kernel_rem_pio2f+0x42e>
 801b49c:	edd2 7a00 	vldr	s15, [r2]
 801b4a0:	edd2 6a01 	vldr	s13, [r2, #4]
 801b4a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b4a8:	3801      	subs	r0, #1
 801b4aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b4ae:	ed82 7a00 	vstr	s14, [r2]
 801b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b4b6:	edc2 7a01 	vstr	s15, [r2, #4]
 801b4ba:	e798      	b.n	801b3ee <__kernel_rem_pio2f+0x3d2>
 801b4bc:	edd3 7a00 	vldr	s15, [r3]
 801b4c0:	edd3 6a01 	vldr	s13, [r3, #4]
 801b4c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b4c8:	3a01      	subs	r2, #1
 801b4ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b4ce:	ed83 7a00 	vstr	s14, [r3]
 801b4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b4d6:	edc3 7a01 	vstr	s15, [r3, #4]
 801b4da:	e78d      	b.n	801b3f8 <__kernel_rem_pio2f+0x3dc>
 801b4dc:	ed33 7a01 	vldmdb	r3!, {s14}
 801b4e0:	3c01      	subs	r4, #1
 801b4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b4e6:	e78f      	b.n	801b408 <__kernel_rem_pio2f+0x3ec>
 801b4e8:	eef1 6a66 	vneg.f32	s13, s13
 801b4ec:	eeb1 7a47 	vneg.f32	s14, s14
 801b4f0:	edc8 6a00 	vstr	s13, [r8]
 801b4f4:	ed88 7a01 	vstr	s14, [r8, #4]
 801b4f8:	eef1 7a67 	vneg.f32	s15, s15
 801b4fc:	e790      	b.n	801b420 <__kernel_rem_pio2f+0x404>
 801b4fe:	bf00      	nop

0801b500 <floor>:
 801b500:	ee10 1a90 	vmov	r1, s1
 801b504:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b508:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801b50c:	2b13      	cmp	r3, #19
 801b50e:	b530      	push	{r4, r5, lr}
 801b510:	ee10 0a10 	vmov	r0, s0
 801b514:	ee10 5a10 	vmov	r5, s0
 801b518:	dc31      	bgt.n	801b57e <floor+0x7e>
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	da15      	bge.n	801b54a <floor+0x4a>
 801b51e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801b5e0 <floor+0xe0>
 801b522:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b526:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b52e:	dd07      	ble.n	801b540 <floor+0x40>
 801b530:	2900      	cmp	r1, #0
 801b532:	da4e      	bge.n	801b5d2 <floor+0xd2>
 801b534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b538:	4308      	orrs	r0, r1
 801b53a:	d04d      	beq.n	801b5d8 <floor+0xd8>
 801b53c:	492a      	ldr	r1, [pc, #168]	; (801b5e8 <floor+0xe8>)
 801b53e:	2000      	movs	r0, #0
 801b540:	460b      	mov	r3, r1
 801b542:	4602      	mov	r2, r0
 801b544:	ec43 2b10 	vmov	d0, r2, r3
 801b548:	e020      	b.n	801b58c <floor+0x8c>
 801b54a:	4a28      	ldr	r2, [pc, #160]	; (801b5ec <floor+0xec>)
 801b54c:	411a      	asrs	r2, r3
 801b54e:	ea01 0402 	and.w	r4, r1, r2
 801b552:	4304      	orrs	r4, r0
 801b554:	d01a      	beq.n	801b58c <floor+0x8c>
 801b556:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b5e0 <floor+0xe0>
 801b55a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b55e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b566:	ddeb      	ble.n	801b540 <floor+0x40>
 801b568:	2900      	cmp	r1, #0
 801b56a:	bfbe      	ittt	lt
 801b56c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801b570:	fa40 f303 	asrlt.w	r3, r0, r3
 801b574:	18c9      	addlt	r1, r1, r3
 801b576:	ea21 0102 	bic.w	r1, r1, r2
 801b57a:	2000      	movs	r0, #0
 801b57c:	e7e0      	b.n	801b540 <floor+0x40>
 801b57e:	2b33      	cmp	r3, #51	; 0x33
 801b580:	dd05      	ble.n	801b58e <floor+0x8e>
 801b582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b586:	d101      	bne.n	801b58c <floor+0x8c>
 801b588:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b58c:	bd30      	pop	{r4, r5, pc}
 801b58e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801b592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b596:	40e2      	lsrs	r2, r4
 801b598:	4210      	tst	r0, r2
 801b59a:	d0f7      	beq.n	801b58c <floor+0x8c>
 801b59c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801b5e0 <floor+0xe0>
 801b5a0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b5a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ac:	ddc8      	ble.n	801b540 <floor+0x40>
 801b5ae:	2900      	cmp	r1, #0
 801b5b0:	da02      	bge.n	801b5b8 <floor+0xb8>
 801b5b2:	2b14      	cmp	r3, #20
 801b5b4:	d103      	bne.n	801b5be <floor+0xbe>
 801b5b6:	3101      	adds	r1, #1
 801b5b8:	ea20 0002 	bic.w	r0, r0, r2
 801b5bc:	e7c0      	b.n	801b540 <floor+0x40>
 801b5be:	2401      	movs	r4, #1
 801b5c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b5c4:	fa04 f303 	lsl.w	r3, r4, r3
 801b5c8:	4418      	add	r0, r3
 801b5ca:	4285      	cmp	r5, r0
 801b5cc:	bf88      	it	hi
 801b5ce:	1909      	addhi	r1, r1, r4
 801b5d0:	e7f2      	b.n	801b5b8 <floor+0xb8>
 801b5d2:	2000      	movs	r0, #0
 801b5d4:	4601      	mov	r1, r0
 801b5d6:	e7b3      	b.n	801b540 <floor+0x40>
 801b5d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b5dc:	e7b0      	b.n	801b540 <floor+0x40>
 801b5de:	bf00      	nop
 801b5e0:	8800759c 	.word	0x8800759c
 801b5e4:	7e37e43c 	.word	0x7e37e43c
 801b5e8:	bff00000 	.word	0xbff00000
 801b5ec:	000fffff 	.word	0x000fffff

0801b5f0 <floorf>:
 801b5f0:	ee10 3a10 	vmov	r3, s0
 801b5f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b5f8:	3a7f      	subs	r2, #127	; 0x7f
 801b5fa:	2a16      	cmp	r2, #22
 801b5fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b600:	dc2a      	bgt.n	801b658 <floorf+0x68>
 801b602:	2a00      	cmp	r2, #0
 801b604:	da11      	bge.n	801b62a <floorf+0x3a>
 801b606:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b668 <floorf+0x78>
 801b60a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b60e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b616:	dd05      	ble.n	801b624 <floorf+0x34>
 801b618:	2b00      	cmp	r3, #0
 801b61a:	da23      	bge.n	801b664 <floorf+0x74>
 801b61c:	4a13      	ldr	r2, [pc, #76]	; (801b66c <floorf+0x7c>)
 801b61e:	2900      	cmp	r1, #0
 801b620:	bf18      	it	ne
 801b622:	4613      	movne	r3, r2
 801b624:	ee00 3a10 	vmov	s0, r3
 801b628:	4770      	bx	lr
 801b62a:	4911      	ldr	r1, [pc, #68]	; (801b670 <floorf+0x80>)
 801b62c:	4111      	asrs	r1, r2
 801b62e:	420b      	tst	r3, r1
 801b630:	d0fa      	beq.n	801b628 <floorf+0x38>
 801b632:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b668 <floorf+0x78>
 801b636:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b63a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b642:	ddef      	ble.n	801b624 <floorf+0x34>
 801b644:	2b00      	cmp	r3, #0
 801b646:	bfbe      	ittt	lt
 801b648:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b64c:	fa40 f202 	asrlt.w	r2, r0, r2
 801b650:	189b      	addlt	r3, r3, r2
 801b652:	ea23 0301 	bic.w	r3, r3, r1
 801b656:	e7e5      	b.n	801b624 <floorf+0x34>
 801b658:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b65c:	d3e4      	bcc.n	801b628 <floorf+0x38>
 801b65e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b662:	4770      	bx	lr
 801b664:	2300      	movs	r3, #0
 801b666:	e7dd      	b.n	801b624 <floorf+0x34>
 801b668:	7149f2ca 	.word	0x7149f2ca
 801b66c:	bf800000 	.word	0xbf800000
 801b670:	007fffff 	.word	0x007fffff

0801b674 <scalbnf>:
 801b674:	ee10 3a10 	vmov	r3, s0
 801b678:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b67c:	d02a      	beq.n	801b6d4 <scalbnf+0x60>
 801b67e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b682:	d302      	bcc.n	801b68a <scalbnf+0x16>
 801b684:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b688:	4770      	bx	lr
 801b68a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b68e:	d122      	bne.n	801b6d6 <scalbnf+0x62>
 801b690:	4b23      	ldr	r3, [pc, #140]	; (801b720 <scalbnf+0xac>)
 801b692:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b724 <scalbnf+0xb0>
 801b696:	4298      	cmp	r0, r3
 801b698:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b69c:	db16      	blt.n	801b6cc <scalbnf+0x58>
 801b69e:	ee10 3a10 	vmov	r3, s0
 801b6a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b6a6:	3a19      	subs	r2, #25
 801b6a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b6ac:	4288      	cmp	r0, r1
 801b6ae:	dd14      	ble.n	801b6da <scalbnf+0x66>
 801b6b0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801b728 <scalbnf+0xb4>
 801b6b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801b72c <scalbnf+0xb8>
 801b6b8:	ee10 3a10 	vmov	r3, s0
 801b6bc:	eeb0 7a67 	vmov.f32	s14, s15
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801b6c6:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b6ca:	4770      	bx	lr
 801b6cc:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b730 <scalbnf+0xbc>
 801b6d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b6d4:	4770      	bx	lr
 801b6d6:	0dd2      	lsrs	r2, r2, #23
 801b6d8:	e7e6      	b.n	801b6a8 <scalbnf+0x34>
 801b6da:	4410      	add	r0, r2
 801b6dc:	28fe      	cmp	r0, #254	; 0xfe
 801b6de:	dce7      	bgt.n	801b6b0 <scalbnf+0x3c>
 801b6e0:	2800      	cmp	r0, #0
 801b6e2:	dd06      	ble.n	801b6f2 <scalbnf+0x7e>
 801b6e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b6e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b6ec:	ee00 3a10 	vmov	s0, r3
 801b6f0:	4770      	bx	lr
 801b6f2:	f110 0f16 	cmn.w	r0, #22
 801b6f6:	da09      	bge.n	801b70c <scalbnf+0x98>
 801b6f8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b730 <scalbnf+0xbc>
 801b6fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b734 <scalbnf+0xc0>
 801b700:	ee10 3a10 	vmov	r3, s0
 801b704:	eeb0 7a67 	vmov.f32	s14, s15
 801b708:	2b00      	cmp	r3, #0
 801b70a:	e7da      	b.n	801b6c2 <scalbnf+0x4e>
 801b70c:	3019      	adds	r0, #25
 801b70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b712:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b716:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b738 <scalbnf+0xc4>
 801b71a:	ee07 3a90 	vmov	s15, r3
 801b71e:	e7d7      	b.n	801b6d0 <scalbnf+0x5c>
 801b720:	ffff3cb0 	.word	0xffff3cb0
 801b724:	4c000000 	.word	0x4c000000
 801b728:	7149f2ca 	.word	0x7149f2ca
 801b72c:	f149f2ca 	.word	0xf149f2ca
 801b730:	0da24260 	.word	0x0da24260
 801b734:	8da24260 	.word	0x8da24260
 801b738:	33000000 	.word	0x33000000

0801b73c <__errno>:
 801b73c:	4b01      	ldr	r3, [pc, #4]	; (801b744 <__errno+0x8>)
 801b73e:	6818      	ldr	r0, [r3, #0]
 801b740:	4770      	bx	lr
 801b742:	bf00      	nop
 801b744:	20000a14 	.word	0x20000a14

0801b748 <_init>:
 801b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b74a:	bf00      	nop
 801b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b74e:	bc08      	pop	{r3}
 801b750:	469e      	mov	lr, r3
 801b752:	4770      	bx	lr

0801b754 <_fini>:
 801b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b756:	bf00      	nop
 801b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b75a:	bc08      	pop	{r3}
 801b75c:	469e      	mov	lr, r3
 801b75e:	4770      	bx	lr

0801b760 <__audioInitVocal_veneer>:
 801b760:	f85f f000 	ldr.w	pc, [pc]	; 801b764 <__audioInitVocal_veneer+0x4>
 801b764:	0000b6e1 	.word	0x0000b6e1

0801b768 <__audioInitString3_veneer>:
 801b768:	f85f f000 	ldr.w	pc, [pc]	; 801b76c <__audioInitString3_veneer+0x4>
 801b76c:	000078a1 	.word	0x000078a1

0801b770 <__audioFreeString2_veneer>:
 801b770:	f85f f000 	ldr.w	pc, [pc]	; 801b774 <__audioFreeString2_veneer+0x4>
 801b774:	00006de1 	.word	0x00006de1

0801b778 <__HAL_SPI_RxCpltCallback_veneer>:
 801b778:	f85f f000 	ldr.w	pc, [pc]	; 801b77c <__HAL_SPI_RxCpltCallback_veneer+0x4>
 801b77c:	000060e1 	.word	0x000060e1

0801b780 <__HAL_SAI_TxCpltCallback_veneer>:
 801b780:	f85f f000 	ldr.w	pc, [pc]	; 801b784 <__HAL_SAI_TxCpltCallback_veneer+0x4>
 801b784:	00001541 	.word	0x00001541

0801b788 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 801b788:	f85f f000 	ldr.w	pc, [pc]	; 801b78c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801b78c:	00001741 	.word	0x00001741

0801b790 <__randomNumber_veneer>:
 801b790:	f85f f000 	ldr.w	pc, [pc]	; 801b794 <__randomNumber_veneer+0x4>
 801b794:	00001c41 	.word	0x00001c41

0801b798 <__HAL_SAI_ErrorCallback_veneer>:
 801b798:	f85f f000 	ldr.w	pc, [pc]	; 801b79c <__HAL_SAI_ErrorCallback_veneer+0x4>
 801b79c:	00001921 	.word	0x00001921

0801b7a0 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 801b7a0:	f85f f000 	ldr.w	pc, [pc]	; 801b7a4 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801b7a4:	00005ea1 	.word	0x00005ea1

0801b7a8 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 801b7a8:	f85f f000 	ldr.w	pc, [pc]	; 801b7ac <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 801b7ac:	00006361 	.word	0x00006361

0801b7b0 <__parsePreset_veneer>:
 801b7b0:	f85f f000 	ldr.w	pc, [pc]	; 801b7b4 <__parsePreset_veneer+0x4>
 801b7b4:	00001c81 	.word	0x00001c81

0801b7b8 <__HAL_I2C_ErrorCallback_veneer>:
 801b7b8:	f85f f000 	ldr.w	pc, [pc]	; 801b7bc <__HAL_I2C_ErrorCallback_veneer+0x4>
 801b7bc:	00005ee1 	.word	0x00005ee1

0801b7c0 <__HAL_SPI_TxRxCpltCallback_veneer>:
 801b7c0:	f85f f000 	ldr.w	pc, [pc]	; 801b7c4 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801b7c4:	00005f21 	.word	0x00005f21

0801b7c8 <__audioFreeString1_veneer>:
 801b7c8:	f85f f000 	ldr.w	pc, [pc]	; 801b7cc <__audioFreeString1_veneer+0x4>
 801b7cc:	00006701 	.word	0x00006701

0801b7d0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 801b7d0:	f85f f000 	ldr.w	pc, [pc]	; 801b7d4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801b7d4:	00006001 	.word	0x00006001

0801b7d8 <__audioInitAdditive_veneer>:
 801b7d8:	f85f f000 	ldr.w	pc, [pc]	; 801b7dc <__audioInitAdditive_veneer+0x4>
 801b7dc:	00000401 	.word	0x00000401

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	f8df c3f4 	ldr.w	ip, [pc, #1012]	; 7fc <audioInitAdditive+0x3fc>
     408:	4fe2      	ldr	r7, [pc, #904]	; (794 <audioInitAdditive+0x394>)
     40a:	49e3      	ldr	r1, [pc, #908]	; (798 <audioInitAdditive+0x398>)
     40c:	4ae3      	ldr	r2, [pc, #908]	; (79c <audioInitAdditive+0x39c>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	4ce4      	ldr	r4, [pc, #912]	; (7a0 <audioInitAdditive+0x3a0>)
     410:	f101 053c 	add.w	r5, r1, #60	; 0x3c
     414:	48e3      	ldr	r0, [pc, #908]	; (7a4 <audioInitAdditive+0x3a4>)
     416:	4be4      	ldr	r3, [pc, #912]	; (7a8 <audioInitAdditive+0x3a8>)
}
     418:	4606      	mov	r6, r0
     41a:	ed2d 8b10 	vpush	{d8-d15}
        p->curr = pickupOut;
     41e:	edd7 2a00 	vldr	s5, [r7]
}
     422:	b083      	sub	sp, #12
     424:	6014      	str	r4, [r2, #0]
     426:	461a      	mov	r2, r3
     428:	ed9c 4a00 	vldr	s8, [ip]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     42c:	460c      	mov	r4, r1
     42e:	eddc 4a01 	vldr	s9, [ip, #4]
     432:	ed97 3a01 	vldr	s6, [r7, #4]
     436:	edd7 3a02 	vldr	s7, [r7, #8]
     43a:	ed97 5a03 	vldr	s10, [r7, #12]
     43e:	edd7 5a04 	vldr	s11, [r7, #16]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     442:	ed97 6a05 	vldr	s12, [r7, #20]
     446:	edd7 6a06 	vldr	s13, [r7, #24]
     44a:	ed97 7a07 	vldr	s14, [r7, #28]
    hdma->State = HAL_DMA_STATE_READY;
     44e:	edd7 7a08 	vldr	s15, [r7, #32]
     452:	ecf2 9a01 	vldmia	r2!, {s19}
    __HAL_UNLOCK(hdma);
     456:	ecf4 aa01 	vldmia	r4!, {s21}
     45a:	ecb6 aa01 	vldmia	r6!, {s20}
        hdma->State = HAL_DMA_STATE_READY;
     45e:	ee72 2aa9 	vadd.f32	s5, s5, s19
        return HAL_ERROR;
     462:	ed92 9a11 	vldr	s18, [r2, #68]	; 0x44
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     466:	42a5      	cmp	r5, r4
     468:	edd2 8a23 	vldr	s17, [r2, #140]	; 0x8c
        hdma->State = HAL_DMA_STATE_READY;
     46c:	ee34 4a2a 	vadd.f32	s8, s8, s21
        __HAL_UNLOCK(hdma);
     470:	ed92 8a35 	vldr	s16, [r2, #212]	; 0xd4
        return HAL_ERROR;
     474:	ee74 4a8a 	vadd.f32	s9, s9, s20
        (void) HAL_DMA_Abort(hdma);
     478:	ed92 0a47 	vldr	s0, [r2, #284]	; 0x11c
     47c:	ee33 3a09 	vadd.f32	s6, s6, s18
        return HAL_ERROR;
     480:	edd2 0a59 	vldr	s1, [r2, #356]	; 0x164
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     484:	ee73 3aa8 	vadd.f32	s7, s7, s17
     488:	ed92 1a6b 	vldr	s2, [r2, #428]	; 0x1ac
     48c:	ee35 5a08 	vadd.f32	s10, s10, s16
     490:	edd2 1a7d 	vldr	s3, [r2, #500]	; 0x1f4
     494:	ee75 5a80 	vadd.f32	s11, s11, s0
     498:	ed92 2a8f 	vldr	s4, [r2, #572]	; 0x23c
     49c:	ee36 6a20 	vadd.f32	s12, s12, s1
     4a0:	ee76 6a81 	vadd.f32	s13, s13, s2
     4a4:	ee37 7a21 	vadd.f32	s14, s14, s3
     4a8:	ee77 7a82 	vadd.f32	s15, s15, s4
     4ac:	d1d1      	bne.n	452 <audioInitAdditive+0x52>
     4ae:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
     4b2:	edc7 2a00 	vstr	s5, [r7]
     4b6:	4abd      	ldr	r2, [pc, #756]	; (7ac <audioInitAdditive+0x3ac>)
     4b8:	ed8c 4a00 	vstr	s8, [ip]
     4bc:	ee8a aaa2 	vdiv.f32	s20, s21, s5
     4c0:	edcc 4a01 	vstr	s9, [ip, #4]
     4c4:	ed87 3a01 	vstr	s6, [r7, #4]
     4c8:	edc7 3a02 	vstr	s7, [r7, #8]
     4cc:	ed87 5a03 	vstr	s10, [r7, #12]
     4d0:	edc7 5a04 	vstr	s11, [r7, #16]
     4d4:	eeca 9a83 	vdiv.f32	s19, s21, s6
     4d8:	ed87 6a05 	vstr	s12, [r7, #20]
     4dc:	edc7 6a06 	vstr	s13, [r7, #24]
     4e0:	ed87 7a07 	vstr	s14, [r7, #28]
     4e4:	edc7 7a08 	vstr	s15, [r7, #32]
     4e8:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
     4ec:	eeca 8a85 	vdiv.f32	s17, s21, s10
     4f0:	ed82 aa00 	vstr	s20, [r2]
     4f4:	ee8a 8aa5 	vdiv.f32	s16, s21, s11
     4f8:	edc2 9a01 	vstr	s19, [r2, #4]
     4fc:	ee8a 0a86 	vdiv.f32	s0, s21, s12
     500:	ed82 9a02 	vstr	s18, [r2, #8]
     504:	eeca 0aa6 	vdiv.f32	s1, s21, s13
     508:	edc2 8a03 	vstr	s17, [r2, #12]
     50c:	ee8a 1a87 	vdiv.f32	s2, s21, s14
     510:	ed82 8a04 	vstr	s16, [r2, #16]
     514:	eeca 1aa7 	vdiv.f32	s3, s21, s15
     518:	ed82 0a05 	vstr	s0, [r2, #20]
     51c:	ee8a 2a84 	vdiv.f32	s4, s21, s8
     520:	edc2 0a06 	vstr	s1, [r2, #24]
     524:	eeca 2aa4 	vdiv.f32	s5, s21, s9
     528:	ed82 1a07 	vstr	s2, [r2, #28]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     52c:	edc2 1a08 	vstr	s3, [r2, #32]
     530:	4a9f      	ldr	r2, [pc, #636]	; (7b0 <audioInitAdditive+0x3b0>)
     532:	ed82 2a00 	vstr	s4, [r2]
     536:	edc2 2a01 	vstr	s5, [r2, #4]
     53a:	edd3 7a00 	vldr	s15, [r3]
     53e:	ed91 3a00 	vldr	s6, [r1]
     542:	ee67 7a8a 	vmul.f32	s15, s15, s20
     546:	edd0 3a00 	vldr	s7, [r0]
     54a:	ee22 3a03 	vmul.f32	s6, s4, s6
     54e:	ee62 3aa3 	vmul.f32	s7, s5, s7
     552:	ece3 7a01 	vstmia	r3!, {s15}
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     556:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
     55a:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
     55e:	ed93 5a35 	vldr	s10, [r3, #212]	; 0xd4
     562:	ee24 4a29 	vmul.f32	s8, s8, s19
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     566:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
        return HAL_ERROR;
     56a:	ee64 4a89 	vmul.f32	s9, s9, s18
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     56e:	ed93 6a59 	vldr	s12, [r3, #356]	; 0x164
        __HAL_UNLOCK(hdma);
     572:	ee25 5a28 	vmul.f32	s10, s10, s17
        hdma->State = HAL_DMA_STATE_READY;
     576:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57a:	ee65 5a88 	vmul.f32	s11, s11, s16
     57e:	ed93 7a7d 	vldr	s14, [r3, #500]	; 0x1f4
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     582:	ee26 6a00 	vmul.f32	s12, s12, s0
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     586:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
     58a:	ee66 6aa0 	vmul.f32	s13, s13, s1
     58e:	ee27 7a01 	vmul.f32	s14, s14, s2
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	eca1 3a01 	vstmia	r1!, {s6}
     596:	ee67 7aa1 	vmul.f32	s15, s15, s3
     59a:	428d      	cmp	r5, r1
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59c:	ece0 3a01 	vstmia	r0!, {s7}
     5a0:	ed83 4a11 	vstr	s8, [r3, #68]	; 0x44
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a4:	edc3 4a23 	vstr	s9, [r3, #140]	; 0x8c
     5a8:	ed83 5a35 	vstr	s10, [r3, #212]	; 0xd4
     5ac:	edc3 5a47 	vstr	s11, [r3, #284]	; 0x11c
     5b0:	ed83 6a59 	vstr	s12, [r3, #356]	; 0x164
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b4:	edc3 6a6b 	vstr	s13, [r3, #428]	; 0x1ac
     5b8:	ed83 7a7d 	vstr	s14, [r3, #500]	; 0x1f4
     5bc:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c0:	d1bb      	bne.n	53a <audioInitAdditive+0x13a>
  return status;
     5c2:	4b7c      	ldr	r3, [pc, #496]	; (7b4 <audioInitAdditive+0x3b4>)
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     5c8:	4c7b      	ldr	r4, [pc, #492]	; (7b8 <audioInitAdditive+0x3b8>)
     5ca:	ed93 8a01 	vldr	s16, [r3, #4]

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	ed93 0a04 	vldr	s0, [r3, #16]
     5d2:	f104 083c 	add.w	r8, r4, #60	; 0x3c
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	edd3 0a07 	vldr	s1, [r3, #28]
     5da:	edd3 9a00 	vldr	s19, [r3]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	ed93 6a02 	vldr	s12, [r3, #8]
     5e2:	ed93 9a03 	vldr	s18, [r3, #12]
	pb->buf[i++] = (BYTE)c;
     5e6:	ee78 4a69 	vsub.f32	s9, s16, s19
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	edd3 6a05 	vldr	s13, [r3, #20]
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	ee36 6a48 	vsub.f32	s12, s12, s16
	pb->nchr++;
     5f2:	edd3 8a06 	vldr	s17, [r3, #24]
				while (j++ < w) putc_bfd(&pb, ' ');
     5f6:	ee30 5a49 	vsub.f32	s10, s0, s18
     5fa:	ed93 7a08 	vldr	s14, [r3, #32]
     5fe:	ee76 6ac0 	vsub.f32	s13, s13, s0
     602:	ee70 5ae8 	vsub.f32	s11, s1, s17
     606:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800 <audioInitAdditive+0x400>
     60a:	ee37 7a60 	vsub.f32	s14, s14, s1
     60e:	4f6b      	ldr	r7, [pc, #428]	; (7bc <audioInitAdditive+0x3bc>)
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     610:	eec7 daa4 	vdiv.f32	s27, s15, s9
			while (*p) putc_bfd(&pb, *p++);
     614:	4e6a      	ldr	r6, [pc, #424]	; (7c0 <audioInitAdditive+0x3c0>)
     616:	eddf aa6b 	vldr	s21, [pc, #428]	; 7c4 <audioInitAdditive+0x3c4>
     61a:	ed9f aa6b 	vldr	s20, [pc, #428]	; 7c8 <audioInitAdditive+0x3c8>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	4b6b      	ldr	r3, [pc, #428]	; (7cc <audioInitAdditive+0x3cc>)
     620:	486b      	ldr	r0, [pc, #428]	; (7d0 <audioInitAdditive+0x3d0>)
     622:	ee87 da86 	vdiv.f32	s26, s15, s12
		switch (d) {				/* Type is... */
     626:	496b      	ldr	r1, [pc, #428]	; (7d4 <audioInitAdditive+0x3d4>)
     628:	4a6b      	ldr	r2, [pc, #428]	; (7d8 <audioInitAdditive+0x3d8>)
     62a:	4d6c      	ldr	r5, [pc, #432]	; (7dc <audioInitAdditive+0x3dc>)
     62c:	eec7 ca85 	vdiv.f32	s25, s15, s10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     630:	ee87 caa6 	vdiv.f32	s24, s15, s13
     634:	eec7 baa5 	vdiv.f32	s23, s15, s11
     638:	ee87 ba87 	vdiv.f32	s22, s15, s14
	if (i < 0) return;
     63c:	edd3 4a12 	vldr	s9, [r3, #72]	; 0x48
	pb->buf[i++] = (BYTE)c;
     640:	3304      	adds	r3, #4
     642:	ed53 2a01 	vldr	s5, [r3, #-4]
     646:	ecb5 2a01 	vldmia	r5!, {s4}
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	ecb4 6a01 	vldmia	r4!, {s12}
	pb->buf[i++] = (BYTE)c;
     64e:	ee87 4aa4 	vdiv.f32	s8, s15, s9
	pb->nchr++;
     652:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
	pb->idx = i;
     656:	ed93 5a47 	vldr	s10, [r3, #284]	; 0x11c
	pb->nchr++;
     65a:	45a0      	cmp	r8, r4
     65c:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
     660:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     664:	edd3 1a7d 	vldr	s3, [r3, #500]	; 0x1f4
     668:	eec7 ea82 	vdiv.f32	s29, s15, s4
     66c:	edd3 5a6b 	vldr	s11, [r3, #428]	; 0x1ac
		i = (bw == (UINT)i) ? 0 : -1;
     670:	ed93 3a8f 	vldr	s6, [r3, #572]	; 0x23c
     674:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     678:	eec7 4a85 	vdiv.f32	s9, s15, s10
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67c:	eec7 faa3 	vdiv.f32	s31, s15, s7
     680:	ee87 5aa1 	vdiv.f32	s10, s15, s3
	if (i < 0) return;
     684:	eec7 3aa5 	vdiv.f32	s7, s15, s11
     688:	eec7 5a86 	vdiv.f32	s11, s15, s12
	pb->buf[i++] = (BYTE)c;
     68c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     690:	eec7 6a87 	vdiv.f32	s13, s15, s14
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     694:	ee87 7a83 	vdiv.f32	s14, s15, s6
	pb->buf[i++] = (BYTE)c;
     698:	ee74 1a42 	vsub.f32	s3, s8, s4
	pb->nchr++;
     69c:	ee35 3a63 	vsub.f32	s6, s10, s7
	pb->idx = i;
     6a0:	ee74 2aef 	vsub.f32	s5, s9, s31
	pb->nchr++;
     6a4:	ee61 1aad 	vmul.f32	s3, s3, s27
	return EOF;
     6a8:	ee75 5aee 	vsub.f32	s11, s11, s29
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ac:	ee36 6a44 	vsub.f32	s12, s12, s8
     6b0:	ee29 1aa1 	vmul.f32	s2, s19, s3
     6b4:	ece0 1a01 	vstmia	r0!, {s3}
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b8:	ee76 6ae4 	vsub.f32	s13, s13, s9
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6bc:	ee65 5aaa 	vmul.f32	s11, s11, s21
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6c0:	ee26 6a0d 	vmul.f32	s12, s12, s26
     6c4:	eca1 1a01 	vstmia	r1!, {s2}
     6c8:	ee32 2a41 	vsub.f32	s4, s4, s2
		i = (bw == (UINT)i) ? 0 : -1;
     6cc:	ee37 7a45 	vsub.f32	s14, s14, s10
     6d0:	ecec 5a01 	vstmia	ip!, {s11}
     6d4:	ee62 2aac 	vmul.f32	s5, s5, s25
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d8:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
     6dc:	ee66 6a8c 	vmul.f32	s13, s13, s24
     6e0:	eca2 2a01 	vstmia	r2!, {s4}
		i = (bw == (UINT)i) ? 0 : -1;
     6e4:	ee27 7a0b 	vmul.f32	s14, s14, s22
     6e8:	ee23 3a2b 	vmul.f32	s6, s6, s23
     6ec:	edc0 2a1d 	vstr	s5, [r0, #116]	; 0x74
				while (j++ < w) putc_bfd(&pb, ' ');
     6f0:	ee25 fa8a 	vmul.f32	s30, s11, s20
     6f4:	edc0 6a2c 	vstr	s13, [r0, #176]	; 0xb0
     6f8:	ee28 ea06 	vmul.f32	s28, s16, s12
     6fc:	ed80 7a4a 	vstr	s14, [r0, #296]	; 0x128
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     700:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     704:	ed80 3a3b 	vstr	s6, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     708:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     70c:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     710:	ee28 2a83 	vmul.f32	s4, s17, s6
     714:	ed81 ea0e 	vstr	s28, [r1, #56]	; 0x38
     718:	ee20 6a87 	vmul.f32	s12, s1, s14
     71c:	ed81 1a1d 	vstr	s2, [r1, #116]	; 0x74
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     720:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     724:	edc1 1a2c 	vstr	s3, [r1, #176]	; 0xb0

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     728:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     72c:	ed81 2a3b 	vstr	s4, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     730:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     734:	ed81 6a4a 	vstr	s12, [r1, #296]	; 0x128
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     738:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     73c:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     740:	ee73 3ac2 	vsub.f32	s7, s7, s4
     744:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
     748:	ee35 5a46 	vsub.f32	s10, s10, s12
     74c:	edc2 5a1d 	vstr	s11, [r2, #116]	; 0x74
     750:	edc2 4a2c 	vstr	s9, [r2, #176]	; 0xb0
     754:	edc2 3a3b 	vstr	s7, [r2, #236]	; 0xec
     758:	ed82 5a4a 	vstr	s10, [r2, #296]	; 0x128
	for (int i = 0; i < NUM_OVERTONES; i++)
     75c:	f47f af6e 	bne.w	63c <audioInitAdditive+0x23c>
     760:	4b1f      	ldr	r3, [pc, #124]	; (7e0 <audioInitAdditive+0x3e0>)
     762:	f04f 0b00 	mov.w	fp, #0
     766:	4f1f      	ldr	r7, [pc, #124]	; (7e4 <audioInitAdditive+0x3e4>)
     768:	9300      	str	r3, [sp, #0]
     76a:	4b1f      	ldr	r3, [pc, #124]	; (7e8 <audioInitAdditive+0x3e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     76c:	eddf 9a1f 	vldr	s19, [pc, #124]	; 7ec <audioInitAdditive+0x3ec>
     770:	9301      	str	r3, [sp, #4]
     772:	4b1a      	ldr	r3, [pc, #104]	; (7dc <audioInitAdditive+0x3dc>)
			tCycle_init(&additive[i][j], &leaf);
     774:	f8df a08c 	ldr.w	sl, [pc, #140]	; 804 <audioInitAdditive+0x404>
     778:	f103 093c 	add.w	r9, r3, #60	; 0x3c
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     77c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 808 <audioInitAdditive+0x408>
     780:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 7f0 <audioInitAdditive+0x3f0>
     784:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 7f4 <audioInitAdditive+0x3f4>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     788:	eddf 8a1b 	vldr	s17, [pc, #108]	; 7f8 <audioInitAdditive+0x3f8>
     78c:	9e01      	ldr	r6, [sp, #4]
     78e:	4d13      	ldr	r5, [pc, #76]	; (7dc <audioInitAdditive+0x3dc>)
     790:	9c00      	ldr	r4, [sp, #0]
     792:	e03b      	b.n	80c <audioInitAdditive+0x40c>
     794:	20001168 	.word	0x20001168
     798:	200000c0 	.word	0x200000c0
     79c:	200010dc 	.word	0x200010dc
     7a0:	3d888889 	.word	0x3d888889
     7a4:	20000108 	.word	0x20000108
     7a8:	200003fc 	.word	0x200003fc
     7ac:	200010a8 	.word	0x200010a8
     7b0:	200010a0 	.word	0x200010a0
     7b4:	200003d8 	.word	0x200003d8
     7b8:	20000078 	.word	0x20000078
     7bc:	20000f74 	.word	0x20000f74
     7c0:	20000fec 	.word	0x20000fec
     7c4:	3b84a9fa 	.word	0x3b84a9fa
     7c8:	42f60000 	.word	0x42f60000
     7cc:	20000150 	.word	0x20000150
     7d0:	20000ca4 	.word	0x20000ca4
     7d4:	20000b3c 	.word	0x20000b3c
     7d8:	20000e0c 	.word	0x20000e0c
     7dc:	20000030 	.word	0x20000030
     7e0:	20000a44 	.word	0x20000a44
     7e4:	20001158 	.word	0x20001158
     7e8:	20000abc 	.word	0x20000abc
     7ec:	447a0000 	.word	0x447a0000
     7f0:	43160000 	.word	0x43160000
     7f4:	00000000 	.word	0x00000000
     7f8:	3a83126f 	.word	0x3a83126f
     7fc:	20001160 	.word	0x20001160
     800:	20000fb0 	.word	0x20000fb0
     804:	20005298 	.word	0x20005298
     808:	200011bc 	.word	0x200011bc
			tCycle_init(&additive[i][j], &leaf);
     80c:	4620      	mov	r0, r4
     80e:	4651      	mov	r1, sl
     810:	f00b fb26 	bl	be60 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     814:	ecf5 0a01 	vldmia	r5!, {s1}
     818:	eef0 1a49 	vmov.f32	s3, s18
     81c:	4653      	mov	r3, sl
     81e:	eeb0 1a48 	vmov.f32	s2, s16
     822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     826:	4630      	mov	r0, r6
     828:	ee60 0aa9 	vmul.f32	s1, s1, s19
     82c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     830:	4641      	mov	r1, r8
     832:	f00b fced 	bl	c210 <__tADSRT_init_veneer>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     836:	eef0 0a68 	vmov.f32	s1, s17
     83a:	eeb0 0a48 	vmov.f32	s0, s16
     83e:	4651      	mov	r1, sl
     840:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     842:	3404      	adds	r4, #4
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     844:	f00b fcf4 	bl	c230 <__tExpSmooth_init_veneer>
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     848:	eeb0 0a48 	vmov.f32	s0, s16
     84c:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     84e:	3604      	adds	r6, #4
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     850:	f00b fc9a 	bl	c188 <__tExpSmooth_setDest_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     854:	45a9      	cmp	r9, r5
     856:	d1d9      	bne.n	80c <audioInitAdditive+0x40c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     858:	9b00      	ldr	r3, [sp, #0]
     85a:	f10b 0b0f 	add.w	fp, fp, #15
     85e:	3704      	adds	r7, #4
     860:	333c      	adds	r3, #60	; 0x3c
     862:	f1bb 0f1e 	cmp.w	fp, #30
     866:	9300      	str	r3, [sp, #0]
     868:	9b01      	ldr	r3, [sp, #4]
     86a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
     86e:	9301      	str	r3, [sp, #4]
     870:	d18c      	bne.n	78c <audioInitAdditive+0x38c>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     872:	b003      	add	sp, #12
     874:	ecbd 8b10 	vpop	{d8-d15}
     878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     87c:	f3af 8000 	nop.w

00000880 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     880:	4770      	bx	lr
     882:	bf00      	nop
     884:	f3af 8000 	nop.w
     888:	f3af 8000 	nop.w
     88c:	f3af 8000 	nop.w
     890:	f3af 8000 	nop.w
     894:	f3af 8000 	nop.w
     898:	f3af 8000 	nop.w
     89c:	f3af 8000 	nop.w

000008a0 <audioSwitchToAdditive>:

void __ATTR_ITCMRAM audioSwitchToAdditive()
{
     8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8a4:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8a8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 948 <audioSwitchToAdditive+0xa8>
     8ac:	4827      	ldr	r0, [pc, #156]	; (94c <audioSwitchToAdditive+0xac>)
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
	for (int i = 0; i < 12; i++)
     8ae:	2500      	movs	r5, #0
     8b0:	4c27      	ldr	r4, [pc, #156]	; (950 <audioSwitchToAdditive+0xb0>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
     8b2:	f04f 0901 	mov.w	r9, #1
     8b6:	4f27      	ldr	r7, [pc, #156]	; (954 <audioSwitchToAdditive+0xb4>)
     8b8:	4e27      	ldr	r6, [pc, #156]	; (958 <audioSwitchToAdditive+0xb8>)
     8ba:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 974 <audioSwitchToAdditive+0xd4>
     8be:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 978 <audioSwitchToAdditive+0xd8>
{
     8c2:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8c6:	ed9f 8a25 	vldr	s16, [pc, #148]	; 95c <audioSwitchToAdditive+0xbc>
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8ca:	f00b fa99 	bl	be00 <__tVZFilter_setFrequencyAndResonance_veneer>
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
     8ce:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8d2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 960 <audioSwitchToAdditive+0xc0>
     8d6:	4823      	ldr	r0, [pc, #140]	; (964 <audioSwitchToAdditive+0xc4>)
     8d8:	f00b fa92 	bl	be00 <__tVZFilter_setFrequencyAndResonance_veneer>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8dc:	4620      	mov	r0, r4
     8de:	eeb0 0a48 	vmov.f32	s0, s16
     8e2:	f00b fb99 	bl	c018 <__tExpSmooth_setFactor_veneer>
		if (voice == 61)
     8e6:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8ea:	4620      	mov	r0, r4
		if (voice == 61)
     8ec:	2b3d      	cmp	r3, #61	; 0x3d
     8ee:	d01f      	beq.n	930 <audioSwitchToAdditive+0x90>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8f0:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
     8f4:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8f6:	f00b fb63 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
     8fa:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
     8fe:	3501      	adds	r5, #1
     900:	3704      	adds	r7, #4
     902:	2d0c      	cmp	r5, #12
     904:	d1ea      	bne.n	8dc <audioSwitchToAdditive+0x3c>
	}
	for (int i = 0; i < numStringsThisBoard; i++)
     906:	4e18      	ldr	r6, [pc, #96]	; (968 <audioSwitchToAdditive+0xc8>)
     908:	7833      	ldrb	r3, [r6, #0]
     90a:	b16b      	cbz	r3, 928 <audioSwitchToAdditive+0x88>
     90c:	4d17      	ldr	r5, [pc, #92]	; (96c <audioSwitchToAdditive+0xcc>)
     90e:	2400      	movs	r4, #0
	{
		tADSRT_setSustain(&fenvelopes[i], 0.0f);
     910:	ed9f 8a17 	vldr	s16, [pc, #92]	; 970 <audioSwitchToAdditive+0xd0>
     914:	4628      	mov	r0, r5
     916:	eeb0 0a48 	vmov.f32	s0, s16
     91a:	f00b fb11 	bl	bf40 <__tADSRT_setSustain_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
     91e:	3401      	adds	r4, #1
     920:	7833      	ldrb	r3, [r6, #0]
     922:	3504      	adds	r5, #4
     924:	42a3      	cmp	r3, r4
     926:	dcf5      	bgt.n	914 <audioSwitchToAdditive+0x74>
	}

}
     928:	ecbd 8b02 	vpop	{d8}
     92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     930:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
     934:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     936:	f00b fb43 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
     93a:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
     93e:	3501      	adds	r5, #1
     940:	3604      	adds	r6, #4
     942:	2d0c      	cmp	r5, #12
     944:	d1ca      	bne.n	8dc <audioSwitchToAdditive+0x3c>
     946:	e7de      	b.n	906 <audioSwitchToAdditive+0x66>
     948:	44dc0000 	.word	0x44dc0000
     94c:	200052f8 	.word	0x200052f8
     950:	20005244 	.word	0x20005244
     954:	20000000 	.word	0x20000000
     958:	20018544 	.word	0x20018544
     95c:	3a83126f 	.word	0x3a83126f
     960:	42740000 	.word	0x42740000
     964:	200052fc 	.word	0x200052fc
     968:	20000694 	.word	0x20000694
     96c:	200051c8 	.word	0x200051c8
     970:	00000000 	.word	0x00000000
     974:	2001425c 	.word	0x2001425c
     978:	200051e0 	.word	0x200051e0
     97c:	f3af 8000 	nop.w

00000980 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     984:	4cac      	ldr	r4, [pc, #688]	; (c38 <audioTickAdditive+0x2b8>)
     986:	4dad      	ldr	r5, [pc, #692]	; (c3c <audioTickAdditive+0x2bc>)
     988:	f104 0630 	add.w	r6, r4, #48	; 0x30
     98c:	ed2d 8b10 	vpush	{d8-d15}
     990:	b087      	sub	sp, #28
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     992:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     994:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     996:	f00b fc43 	bl	c220 <__tExpSmooth_tick_veneer>
     99a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     99e:	42b4      	cmp	r4, r6
     9a0:	d1f7      	bne.n	992 <audioTickAdditive+0x12>
	}


	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     9a2:	48a7      	ldr	r0, [pc, #668]	; (c40 <audioTickAdditive+0x2c0>)
     9a4:	f00b fbc8 	bl	c138 <__tNoise_tick_veneer>
     9a8:	48a6      	ldr	r0, [pc, #664]	; (c44 <audioTickAdditive+0x2c4>)
     9aa:	f00b f985 	bl	bcb8 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9ae:	48a4      	ldr	r0, [pc, #656]	; (c40 <audioTickAdditive+0x2c0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     9b0:	eef0 da40 	vmov.f32	s27, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9b4:	f00b fbc0 	bl	c138 <__tNoise_tick_veneer>
     9b8:	48a3      	ldr	r0, [pc, #652]	; (c48 <audioTickAdditive+0x2c8>)
     9ba:	f00b f97d 	bl	bcb8 <__tVZFilter_tickEfficient_veneer>
	filtNoise *= 2.0f;
	float stretch = knobScaled[0];
     9be:	4b9e      	ldr	r3, [pc, #632]	; (c38 <audioTickAdditive+0x2b8>)
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
	float oneMinusPickup = (1.0f - knobScaled[4]);
	float pickup = knobScaled[4];
	float freqWeightKnob = knobScaled[1];
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9c0:	48a2      	ldr	r0, [pc, #648]	; (c4c <audioTickAdditive+0x2cc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9c2:	eef0 8a40 	vmov.f32	s17, s0
	float stretch = knobScaled[0];
     9c6:	ed93 9a00 	vldr	s18, [r3]
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9ca:	edd3 aa04 	vldr	s21, [r3, #16]
	float freqWeightKnob = knobScaled[1];
     9ce:	ed93 aa01 	vldr	s20, [r3, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9d2:	f00b fc25 	bl	c220 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     9d6:	4b9e      	ldr	r3, [pc, #632]	; (c50 <audioTickAdditive+0x2d0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9d8:	eeb0 da40 	vmov.f32	s26, s0
	for (int i = 0; i < numStringsThisBoard; i++)
     9dc:	781b      	ldrb	r3, [r3, #0]
     9de:	2b00      	cmp	r3, #0
     9e0:	f000 810e 	beq.w	c00 <audioTickAdditive+0x280>
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9e4:	ee29 9a09 	vmul.f32	s18, s18, s18
     9e8:	4b9a      	ldr	r3, [pc, #616]	; (c54 <audioTickAdditive+0x2d4>)
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9ea:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9ee:	eddf 7a9a 	vldr	s15, [pc, #616]	; c58 <audioTickAdditive+0x2d8>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9f2:	ee7d daa8 	vadd.f32	s27, s27, s17
     9f6:	9303      	str	r3, [sp, #12]
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9f8:	ee29 9a09 	vmul.f32	s18, s18, s18
     9fc:	4b97      	ldr	r3, [pc, #604]	; (c5c <audioTickAdditive+0x2dc>)
	float tempSamp = 0.0f;
     9fe:	eddf 8a98 	vldr	s17, [pc, #608]	; c60 <audioTickAdditive+0x2e0>
	float oneMinusPickup = (1.0f - knobScaled[4]);
     a02:	ee78 ca6a 	vsub.f32	s25, s16, s21
     a06:	9304      	str	r3, [sp, #16]
	filtNoise *= 2.0f;
     a08:	ee3d 7aad 	vadd.f32	s14, s27, s27
     a0c:	4b95      	ldr	r3, [pc, #596]	; (c64 <audioTickAdditive+0x2e4>)
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a0e:	ee38 ca4a 	vsub.f32	s24, s16, s20
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     a12:	ee29 9a27 	vmul.f32	s18, s18, s15
	{
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
		thisTension = knobScaled[5] * thisTension;
		float tensionSpeed = (1.0f - knobScaled[6]);
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a16:	ed9f ea94 	vldr	s28, [pc, #592]	; c68 <audioTickAdditive+0x2e8>
		invGainSum[i] = 1.0f;
		if(gainSum[i] > 0.0001f)
		{
			invGainSum[i] = 1.0f / gainSum[i];
		}
		gainSum[i] = 0.0f;
     a1a:	eef0 9a68 	vmov.f32	s19, s17
     a1e:	9302      	str	r3, [sp, #8]
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     a20:	eddf ba92 	vldr	s23, [pc, #584]	; c6c <audioTickAdditive+0x2ec>
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a24:	2300      	movs	r3, #0
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     a26:	ed9f ba92 	vldr	s22, [pc, #584]	; c70 <audioTickAdditive+0x2f0>
     a2a:	f8df a280 	ldr.w	sl, [pc, #640]	; cac <audioTickAdditive+0x32c>
     a2e:	f8df b280 	ldr.w	fp, [pc, #640]	; cb0 <audioTickAdditive+0x330>
     a32:	4f90      	ldr	r7, [pc, #576]	; (c74 <audioTickAdditive+0x2f4>)
	filtNoise *= 2.0f;
     a34:	ed8d 7a05 	vstr	s14, [sp, #20]
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a38:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     a3a:	9301      	str	r3, [sp, #4]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a3c:	9d03      	ldr	r5, [sp, #12]
		float tensionSpeed = (1.0f - knobScaled[6]);
     a3e:	4c7e      	ldr	r4, [pc, #504]	; (c38 <audioTickAdditive+0x2b8>)
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a40:	4628      	mov	r0, r5
     a42:	f00b fbed 	bl	c220 <__tExpSmooth_tick_veneer>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a46:	edd4 7a06 	vldr	s15, [r4, #24]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a4a:	eef0 fa40 	vmov.f32	s31, s0
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; c78 <audioTickAdditive+0x2f8>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a52:	ee78 7a67 	vsub.f32	s15, s16, s15
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a56:	4628      	mov	r0, r5
     a58:	eeb0 0a4e 	vmov.f32	s0, s28
		thisTension = knobScaled[5] * thisTension;
     a5c:	edd4 ea05 	vldr	s29, [r4, #20]
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a60:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a68:	eea7 0a87 	vfma.f32	s0, s15, s14
     a6c:	f00b fad4 	bl	c018 <__tExpSmooth_setFactor_veneer>
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a70:	9b04      	ldr	r3, [sp, #16]
     a72:	9a01      	ldr	r2, [sp, #4]
     a74:	ecb3 fa01 	vldmia	r3!, {s30}
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a78:	9802      	ldr	r0, [sp, #8]
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a7a:	9304      	str	r3, [sp, #16]
     a7c:	4b7f      	ldr	r3, [pc, #508]	; (c7c <audioTickAdditive+0x2fc>)
     a7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a82:	edd2 7a00 	vldr	s15, [r2]
     a86:	eeee 7aaf 	vfma.f32	s15, s29, s31
     a8a:	ee3f fa27 	vadd.f32	s30, s30, s15
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a8e:	f00b fbbb 	bl	c208 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a92:	edd4 7a02 	vldr	s15, [r4, #8]
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a96:	eeb0 7a40 	vmov.f32	s14, s0
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a9a:	eddd 6a05 	vldr	s13, [sp, #20]
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a9e:	eeb0 0a4f 	vmov.f32	s0, s30
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
     aa6:	eee7 8a27 	vfma.f32	s17, s14, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     aaa:	f00b f9f5 	bl	be98 <__mtofTableLookup_veneer>
		if(gainSum[i] > 0.0001f)
     aae:	ecf7 7a01 	vldmia	r7!, {s15}
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     ab2:	ecaa 0a01 	vstmia	sl!, {s0}
		if(gainSum[i] > 0.0001f)
     ab6:	eef4 7ace 	vcmpe.f32	s15, s28
		invGainSum[i] = 1.0f;
     aba:	ecab 8a01 	vstmia	fp!, {s16}
		if(gainSum[i] > 0.0001f)
     abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ac2:	dd03      	ble.n	acc <audioTickAdditive+0x14c>
			invGainSum[i] = 1.0f / gainSum[i];
     ac4:	ee88 7a27 	vdiv.f32	s14, s16, s15
     ac8:	ed0b 7a01 	vstr	s14, [fp, #-4]
		gainSum[i] = 0.0f;
     acc:	9b00      	ldr	r3, [sp, #0]
		for (int j = 0; j < NUM_OVERTONES; j++)
     ace:	2400      	movs	r4, #0
     ad0:	4a6b      	ldr	r2, [pc, #428]	; (c80 <audioTickAdditive+0x300>)
		gainSum[i] = 0.0f;
     ad2:	ed47 9a01 	vstr	s19, [r7, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     ad6:	18d6      	adds	r6, r2, r3
     ad8:	4a6a      	ldr	r2, [pc, #424]	; (c84 <audioTickAdditive+0x304>)
     ada:	18d5      	adds	r5, r2, r3
     adc:	4a6a      	ldr	r2, [pc, #424]	; (c88 <audioTickAdditive+0x308>)
     ade:	eb02 0903 	add.w	r9, r2, r3
     ae2:	4a6a      	ldr	r2, [pc, #424]	; (c8c <audioTickAdditive+0x30c>)
     ae4:	eb02 0803 	add.w	r8, r2, r3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     ae8:	ee0f 4a10 	vmov	s30, r4
     aec:	4630      	mov	r0, r6
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     aee:	3401      	adds	r4, #1
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     af0:	f00b fb8a 	bl	c208 <__tADSRT_tick_veneer>
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     af4:	eeb8 facf 	vcvt.f32.s32	s30, s30
     af8:	ed5a 6a01 	vldr	s13, [sl, #-4]
     afc:	eeb0 7a48 	vmov.f32	s14, s16
     b00:	ee07 4a90 	vmov	s15, r4
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b04:	eef0 0a48 	vmov.f32	s1, s16
		for (int j = 0; j < NUM_OVERTONES; j++)
     b08:	3604      	adds	r6, #4
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b0a:	eef8 fae7 	vcvt.f32.s32	s31, s15
     b0e:	eeaf 7a09 	vfma.f32	s14, s30, s18
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b12:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b16:	ee6f faa6 	vmul.f32	s31, s31, s13
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     b1a:	eef0 da40 	vmov.f32	s27, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b1e:	eeb0 0a69 	vmov.f32	s0, s19
			tCycle_setFreq(&additive[i][j], tempFreq);
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     b22:	eef0 ea6c 	vmov.f32	s29, s25
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b26:	ee6f fa87 	vmul.f32	s31, s31, s14
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b2a:	ee3b 7aef 	vsub.f32	s14, s23, s31
     b2e:	eee7 0a0b 	vfma.f32	s1, s14, s22
     b32:	f00b fa59 	bl	bfe8 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     b36:	eeb0 0a6f 	vmov.f32	s0, s31
     b3a:	4628      	mov	r0, r5
     b3c:	f00b faf8 	bl	c130 <__tCycle_setFreq_veneer>
			float upRamp = (j * invNumOvertones);
     b40:	4b53      	ldr	r3, [pc, #332]	; (c90 <audioTickAdditive+0x310>)
			gainSum[i] += freqWeight * finalGains[i][j];
     b42:	ed17 7a01 	vldr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b46:	4628      	mov	r0, r5
			float upRamp = (j * invNumOvertones);
     b48:	edd3 6a00 	vldr	s13, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b4c:	3504      	adds	r5, #4
			gainSum[i] += freqWeight * finalGains[i][j];
     b4e:	ecb9 6a01 	vldmia	r9!, {s12}
			float upRamp = (j * invNumOvertones);
     b52:	ee2f fa26 	vmul.f32	s30, s30, s13
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     b56:	ecf8 5a01 	vldmia	r8!, {s11}
     b5a:	eeea eaa5 	vfma.f32	s29, s21, s11
			float downRamp = 1.0f - (j * invNumOvertones);
     b5e:	ee78 fa4f 	vsub.f32	s31, s16, s30
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
     b62:	ee6f fa8c 	vmul.f32	s31, s31, s24
     b66:	eeea fa0f 	vfma.f32	s31, s20, s30
			gainSum[i] += freqWeight * finalGains[i][j];
     b6a:	eea6 7a2f 	vfma.f32	s14, s12, s31
     b6e:	ed07 7a01 	vstr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b72:	f00b faf1 	bl	c158 <__tCycle_tick_veneer>
     b76:	ee20 0a2d 	vmul.f32	s0, s0, s27
     b7a:	ed5b 7a01 	vldr	s15, [fp, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b7e:	2c0f      	cmp	r4, #15
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b80:	ee60 7a27 	vmul.f32	s15, s0, s15
     b84:	ee67 7aae 	vmul.f32	s15, s15, s29
     b88:	eeef 8aa7 	vfma.f32	s17, s31, s15
		for (int j = 0; j < NUM_OVERTONES; j++)
     b8c:	d1ac      	bne.n	ae8 <audioTickAdditive+0x168>
	for (int i = 0; i < numStringsThisBoard; i++)
     b8e:	9a03      	ldr	r2, [sp, #12]
     b90:	9b01      	ldr	r3, [sp, #4]
     b92:	3204      	adds	r2, #4
     b94:	3301      	adds	r3, #1
     b96:	9203      	str	r2, [sp, #12]
     b98:	9a02      	ldr	r2, [sp, #8]
     b9a:	9301      	str	r3, [sp, #4]
     b9c:	3204      	adds	r2, #4
     b9e:	9202      	str	r2, [sp, #8]
     ba0:	9a00      	ldr	r2, [sp, #0]
     ba2:	323c      	adds	r2, #60	; 0x3c
     ba4:	9200      	str	r2, [sp, #0]
     ba6:	4a2a      	ldr	r2, [pc, #168]	; (c50 <audioTickAdditive+0x2d0>)
     ba8:	7812      	ldrb	r2, [r2, #0]
     baa:	429a      	cmp	r2, r3
     bac:	f73f af46 	bgt.w	a3c <audioTickAdditive+0xbc>
     bb0:	ed9f 7a38 	vldr	s14, [pc, #224]	; c94 <audioTickAdditive+0x314>
		}
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     bb4:	ee2d 6a0d 	vmul.f32	s12, s26, s26
     bb8:	eddf 7a37 	vldr	s15, [pc, #220]	; c98 <audioTickAdditive+0x318>
     bbc:	ed9f 5a37 	vldr	s10, [pc, #220]	; c9c <audioTickAdditive+0x31c>
     bc0:	eeed 7a07 	vfma.f32	s15, s26, s14
     bc4:	eddf 5a36 	vldr	s11, [pc, #216]	; ca0 <audioTickAdditive+0x320>
     bc8:	ee6d 6a06 	vmul.f32	s13, s26, s12
     bcc:	ed9f 7a35 	vldr	s14, [pc, #212]	; ca4 <audioTickAdditive+0x324>
     bd0:	ee2d 7a07 	vmul.f32	s14, s26, s14
     bd4:	eee6 7a85 	vfma.f32	s15, s13, s10
     bd8:	eee6 7a65 	vfms.f32	s15, s12, s11
     bdc:	eee6 7ac7 	vfms.f32	s15, s13, s14


	tempSamp *= 0.5f;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     be0:	4b31      	ldr	r3, [pc, #196]	; (ca8 <audioTickAdditive+0x328>)
     be2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     be6:	ed93 0a00 	vldr	s0, [r3]
     bea:	ee20 0a07 	vmul.f32	s0, s0, s14
     bee:	ee20 0a28 	vmul.f32	s0, s0, s17
	return tempSamp;
}
     bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
     bf6:	b007      	add	sp, #28
     bf8:	ecbd 8b10 	vpop	{d8-d15}
     bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c00:	ed9f 7a24 	vldr	s14, [pc, #144]	; c94 <audioTickAdditive+0x314>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     c04:	ee60 6a00 	vmul.f32	s13, s0, s0
     c08:	eddf 7a23 	vldr	s15, [pc, #140]	; c98 <audioTickAdditive+0x318>
     c0c:	eddf 5a23 	vldr	s11, [pc, #140]	; c9c <audioTickAdditive+0x31c>
     c10:	eee0 7a07 	vfma.f32	s15, s0, s14
     c14:	ed9f 6a22 	vldr	s12, [pc, #136]	; ca0 <audioTickAdditive+0x320>
     c18:	ee20 7a26 	vmul.f32	s14, s0, s13
     c1c:	ed9f 5a21 	vldr	s10, [pc, #132]	; ca4 <audioTickAdditive+0x324>
	float tempSamp = 0.0f;
     c20:	eddf 8a0f 	vldr	s17, [pc, #60]	; c60 <audioTickAdditive+0x2e0>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     c24:	ee20 da05 	vmul.f32	s26, s0, s10
     c28:	eee7 7a25 	vfma.f32	s15, s14, s11
     c2c:	eee6 7ac6 	vfms.f32	s15, s13, s12
     c30:	eee7 7a4d 	vfms.f32	s15, s14, s26
     c34:	e7d4      	b.n	be0 <audioTickAdditive+0x260>
     c36:	bf00      	nop
     c38:	200051f4 	.word	0x200051f4
     c3c:	20005244 	.word	0x20005244
     c40:	200052f0 	.word	0x200052f0
     c44:	200052f8 	.word	0x200052f8
     c48:	200052fc 	.word	0x200052fc
     c4c:	20014268 	.word	0x20014268
     c50:	20000694 	.word	0x20000694
     c54:	20001158 	.word	0x20001158
     c58:	3e99999a 	.word	0x3e99999a
     c5c:	20014230 	.word	0x20014230
     c60:	00000000 	.word	0x00000000
     c64:	200051c8 	.word	0x200051c8
     c68:	38d1b717 	.word	0x38d1b717
     c6c:	466a6000 	.word	0x466a6000
     c70:	3983126f 	.word	0x3983126f
     c74:	200010cc 	.word	0x200010cc
     c78:	3c23d70a 	.word	0x3c23d70a
     c7c:	20014228 	.word	0x20014228
     c80:	20000abc 	.word	0x20000abc
     c84:	20000a44 	.word	0x20000a44
     c88:	20001028 	.word	0x20001028
     c8c:	200010e0 	.word	0x200010e0
     c90:	200010dc 	.word	0x200010dc
     c94:	3ef1ac0b 	.word	0x3ef1ac0b
     c98:	3bdc4213 	.word	0x3bdc4213
     c9c:	40caa285 	.word	0x40caa285
     ca0:	4022be0a 	.word	0x4022be0a
     ca4:	40516313 	.word	0x40516313
     ca8:	2000068c 	.word	0x2000068c
     cac:	200141e0 	.word	0x200141e0
     cb0:	200010d4 	.word	0x200010d4
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     cc0:	4b85      	ldr	r3, [pc, #532]	; (ed8 <audioFrameAdditive+0x218>)
{
     cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     cc6:	4f85      	ldr	r7, [pc, #532]	; (edc <audioFrameAdditive+0x21c>)
		for (int i = 0; i < numStringsThisBoard; i++)
     cc8:	f8df b268 	ldr.w	fp, [pc, #616]	; f34 <audioFrameAdditive+0x274>
{
     ccc:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     cd0:	685b      	ldr	r3, [r3, #4]
{
     cd2:	b091      	sub	sp, #68	; 0x44
	uint32_t tempCountFrame = DWT->CYCCNT;
     cd4:	930a      	str	r3, [sp, #40]	; 0x28
	if (resetStringInputs)
     cd6:	783b      	ldrb	r3, [r7, #0]
{
     cd8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (resetStringInputs)
     cda:	2b00      	cmp	r3, #0
     cdc:	f040 80b5 	bne.w	e4a <audioFrameAdditive+0x18a>
	for (int i = 0; i < numStringsThisBoard; i++)
     ce0:	4b7f      	ldr	r3, [pc, #508]	; (ee0 <audioFrameAdditive+0x220>)
     ce2:	9307      	str	r3, [sp, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
     ce4:	f89b 3000 	ldrb.w	r3, [fp]
	for (int i = 0; i < numStringsThisBoard; i++)
     ce8:	2b00      	cmp	r3, #0
     cea:	f000 80d8 	beq.w	e9e <audioFrameAdditive+0x1de>
     cee:	4c7d      	ldr	r4, [pc, #500]	; (ee4 <audioFrameAdditive+0x224>)
     cf0:	2500      	movs	r5, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     cf2:	ed9f 9a7d 	vldr	s18, [pc, #500]	; ee8 <audioFrameAdditive+0x228>
     cf6:	eddf 8a7d 	vldr	s17, [pc, #500]	; eec <audioFrameAdditive+0x22c>
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     cfa:	ed9f 8a7d 	vldr	s16, [pc, #500]	; ef0 <audioFrameAdditive+0x230>
     cfe:	4e7d      	ldr	r6, [pc, #500]	; (ef4 <audioFrameAdditive+0x234>)
     d00:	f8df 9234 	ldr.w	r9, [pc, #564]	; f38 <audioFrameAdditive+0x278>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     d04:	eeb0 0a68 	vmov.f32	s0, s17
     d08:	edd9 7a03 	vldr	s15, [r9, #12]
     d0c:	46b0      	mov	r8, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     d0e:	2700      	movs	r7, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     d10:	eea7 0a89 	vfma.f32	s0, s15, s18
     d14:	eca4 0a01 	vstmia	r4!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     d18:	e001      	b.n	d1e <audioFrameAdditive+0x5e>
			Lfloat x0 = additivePickupPos[i] * PI;
     d1a:	ed14 0a01 	vldr	s0, [r4, #-4]
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     d1e:	3701      	adds	r7, #1
     d20:	ee07 7a90 	vmov	s15, r7
     d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     d28:	ee67 7a88 	vmul.f32	s15, s15, s16
     d2c:	ee27 0a80 	vmul.f32	s0, s15, s0
     d30:	f00b fa36 	bl	c1a0 <__arm_sin_f32_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d34:	2f0f      	cmp	r7, #15
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     d36:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     d3a:	d1ee      	bne.n	d1a <audioFrameAdditive+0x5a>
	for (int i = 0; i < numStringsThisBoard; i++)
     d3c:	3501      	adds	r5, #1
     d3e:	f89b 3000 	ldrb.w	r3, [fp]
     d42:	363c      	adds	r6, #60	; 0x3c
     d44:	42ab      	cmp	r3, r5
     d46:	dcdd      	bgt.n	d04 <audioFrameAdditive+0x44>
	if (newPluck)
     d48:	9a07      	ldr	r2, [sp, #28]
     d4a:	6812      	ldr	r2, [r2, #0]
     d4c:	2a00      	cmp	r2, #0
     d4e:	d04e      	beq.n	dee <audioFrameAdditive+0x12e>
		for (int i = 0; i < numStringsThisBoard; i++)
     d50:	2b00      	cmp	r3, #0
     d52:	d049      	beq.n	de8 <audioFrameAdditive+0x128>
     d54:	4a68      	ldr	r2, [pc, #416]	; (ef8 <audioFrameAdditive+0x238>)
     d56:	f04f 0800 	mov.w	r8, #0
     d5a:	f8df a1e0 	ldr.w	sl, [pc, #480]	; f3c <audioFrameAdditive+0x27c>
     d5e:	9203      	str	r2, [sp, #12]
     d60:	4a66      	ldr	r2, [pc, #408]	; (efc <audioFrameAdditive+0x23c>)
					thisDecay *= 2000.0f * knobScaled[10];
     d62:	ed9f ca67 	vldr	s24, [pc, #412]	; f00 <audioFrameAdditive+0x240>
     d66:	9208      	str	r2, [sp, #32]
     d68:	4a66      	ldr	r2, [pc, #408]	; (f04 <audioFrameAdditive+0x244>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d6a:	eddf ea67 	vldr	s29, [pc, #412]	; f08 <audioFrameAdditive+0x248>
     d6e:	9206      	str	r2, [sp, #24]
     d70:	4a66      	ldr	r2, [pc, #408]	; (f0c <audioFrameAdditive+0x24c>)
     d72:	eddf fa67 	vldr	s31, [pc, #412]	; f10 <audioFrameAdditive+0x250>
     d76:	9205      	str	r2, [sp, #20]
     d78:	4a66      	ldr	r2, [pc, #408]	; (f14 <audioFrameAdditive+0x254>)
     d7a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
     d7e:	9204      	str	r2, [sp, #16]
     d80:	f8cd a008 	str.w	sl, [sp, #8]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     d84:	9a02      	ldr	r2, [sp, #8]
     d86:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     d8a:	b292      	uxth	r2, r2
     d8c:	b932      	cbnz	r2, d9c <audioFrameAdditive+0xdc>
     d8e:	4a62      	ldr	r2, [pc, #392]	; (f18 <audioFrameAdditive+0x258>)
     d90:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     d94:	b292      	uxth	r2, r2
     d96:	2a00      	cmp	r2, #0
     d98:	f040 80d2 	bne.w	f40 <audioFrameAdditive+0x280>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     d9c:	9a02      	ldr	r2, [sp, #8]
     d9e:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     da2:	b292      	uxth	r2, r2
     da4:	b132      	cbz	r2, db4 <audioFrameAdditive+0xf4>
     da6:	4a5c      	ldr	r2, [pc, #368]	; (f18 <audioFrameAdditive+0x258>)
     da8:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     dac:	b292      	uxth	r2, r2
     dae:	2a00      	cmp	r2, #0
     db0:	f000 8083 	beq.w	eba <audioFrameAdditive+0x1fa>
     db4:	9c08      	ldr	r4, [sp, #32]
     db6:	343c      	adds	r4, #60	; 0x3c
		for (int i = 0; i < numStringsThisBoard; i++)
     db8:	9a03      	ldr	r2, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
     dba:	9902      	ldr	r1, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
     dbc:	3204      	adds	r2, #4
     dbe:	9408      	str	r4, [sp, #32]
     dc0:	9203      	str	r2, [sp, #12]
     dc2:	9a06      	ldr	r2, [sp, #24]
     dc4:	323c      	adds	r2, #60	; 0x3c
     dc6:	9206      	str	r2, [sp, #24]
     dc8:	9a05      	ldr	r2, [sp, #20]
     dca:	3204      	adds	r2, #4
     dcc:	9205      	str	r2, [sp, #20]
     dce:	9a04      	ldr	r2, [sp, #16]
     dd0:	3204      	adds	r2, #4
     dd2:	9204      	str	r2, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
     dd4:	4a50      	ldr	r2, [pc, #320]	; (f18 <audioFrameAdditive+0x258>)
     dd6:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     dda:	b292      	uxth	r2, r2
     ddc:	f821 2018 	strh.w	r2, [r1, r8, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     de0:	f108 0801 	add.w	r8, r8, #1
     de4:	4543      	cmp	r3, r8
     de6:	dccd      	bgt.n	d84 <audioFrameAdditive+0xc4>
		newPluck = 0;
     de8:	2300      	movs	r3, #0
     dea:	9a07      	ldr	r2, [sp, #28]
     dec:	6013      	str	r3, [r2, #0]
     dee:	4c4b      	ldr	r4, [pc, #300]	; (f1c <audioFrameAdditive+0x25c>)
     df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     df2:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     df6:	ed9f 8a4a 	vldr	s16, [pc, #296]	; f20 <audioFrameAdditive+0x260>
     dfa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     dfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     e02:	f7ff fdbd 	bl	980 <audioTickAdditive>
     e06:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e0a:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e10:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     e12:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     e16:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e1a:	d1f2      	bne.n	e02 <audioFrameAdditive+0x142>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e1c:	4841      	ldr	r0, [pc, #260]	; (f24 <audioFrameAdditive+0x264>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e1e:	4b2e      	ldr	r3, [pc, #184]	; (ed8 <audioFrameAdditive+0x218>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e20:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e24:	685b      	ldr	r3, [r3, #4]
     e26:	980a      	ldr	r0, [sp, #40]	; 0x28
     e28:	493f      	ldr	r1, [pc, #252]	; (f28 <audioFrameAdditive+0x268>)
     e2a:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e2c:	4a3f      	ldr	r2, [pc, #252]	; (f2c <audioFrameAdditive+0x26c>)
     e2e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e32:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
     e38:	ee67 7a87 	vmul.f32	s15, s15, s14
     e3c:	edc2 7a00 	vstr	s15, [r2]
}
     e40:	b011      	add	sp, #68	; 0x44
     e42:	ecbd 8b10 	vpop	{d8-d15}
     e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     e4a:	f89b 3000 	ldrb.w	r3, [fp]
     e4e:	b373      	cbz	r3, eae <audioFrameAdditive+0x1ee>
     e50:	2500      	movs	r5, #0
     e52:	4e29      	ldr	r6, [pc, #164]	; (ef8 <audioFrameAdditive+0x238>)
     e54:	4c36      	ldr	r4, [pc, #216]	; (f30 <audioFrameAdditive+0x270>)
     e56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; f3c <audioFrameAdditive+0x27c>
			previousStringInputs[i] = 0;
     e5a:	46a8      	mov	r8, r5
     e5c:	f1a4 093c 	sub.w	r9, r4, #60	; 0x3c
				tADSRT_clear(&additiveEnv[i][j]);
     e60:	4648      	mov	r0, r9
			for (int j = 0; j < NUM_OVERTONES; j++)
     e62:	f109 0904 	add.w	r9, r9, #4
				tADSRT_clear(&additiveEnv[i][j]);
     e66:	f00b f9ab 	bl	c1c0 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     e6a:	45a1      	cmp	r9, r4
     e6c:	d1f8      	bne.n	e60 <audioFrameAdditive+0x1a0>
			tADSRT_clear(&fenvelopes[i]);
     e6e:	4630      	mov	r0, r6
		for (int i = 0; i < numStringsThisBoard; i++)
     e70:	f109 043c 	add.w	r4, r9, #60	; 0x3c
			tADSRT_clear(&fenvelopes[i]);
     e74:	f00b f9a4 	bl	c1c0 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     e78:	f89b 3000 	ldrb.w	r3, [fp]
			previousStringInputs[i] = 0;
     e7c:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     e80:	3501      	adds	r5, #1
			previousStringInputs[i] = 0;
     e82:	f04f 0200 	mov.w	r2, #0
		for (int i = 0; i < numStringsThisBoard; i++)
     e86:	3604      	adds	r6, #4
     e88:	42ab      	cmp	r3, r5
     e8a:	dce7      	bgt.n	e5c <audioFrameAdditive+0x19c>
		resetStringInputs = 0;
     e8c:	703a      	strb	r2, [r7, #0]
		newPluck = 1;
     e8e:	4a14      	ldr	r2, [pc, #80]	; (ee0 <audioFrameAdditive+0x220>)
     e90:	4611      	mov	r1, r2
     e92:	9207      	str	r2, [sp, #28]
     e94:	2201      	movs	r2, #1
     e96:	600a      	str	r2, [r1, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     e98:	2b00      	cmp	r3, #0
     e9a:	f47f af28 	bne.w	cee <audioFrameAdditive+0x2e>
	if (newPluck)
     e9e:	9b07      	ldr	r3, [sp, #28]
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d0a3      	beq.n	dee <audioFrameAdditive+0x12e>
		newPluck = 0;
     ea6:	2300      	movs	r3, #0
     ea8:	9a07      	ldr	r2, [sp, #28]
     eaa:	6013      	str	r3, [r2, #0]
     eac:	e79f      	b.n	dee <audioFrameAdditive+0x12e>
		newPluck = 1;
     eae:	4a0c      	ldr	r2, [pc, #48]	; (ee0 <audioFrameAdditive+0x220>)
		resetStringInputs = 0;
     eb0:	703b      	strb	r3, [r7, #0]
		newPluck = 1;
     eb2:	2301      	movs	r3, #1
     eb4:	9207      	str	r2, [sp, #28]
     eb6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     eb8:	e7f1      	b.n	e9e <audioFrameAdditive+0x1de>
     eba:	9d08      	ldr	r5, [sp, #32]
     ebc:	f105 043c 	add.w	r4, r5, #60	; 0x3c
					tADSRT_off(&additiveEnv[i][j]);
     ec0:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     ec2:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     ec4:	f00a ffbc 	bl	be40 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     ec8:	42ac      	cmp	r4, r5
     eca:	d1f9      	bne.n	ec0 <audioFrameAdditive+0x200>
				tADSRT_off(&fenvelopes[i]);
     ecc:	9803      	ldr	r0, [sp, #12]
     ece:	f00a ffb7 	bl	be40 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	e76f      	b.n	db8 <audioFrameAdditive+0xf8>
     ed8:	e0001000 	.word	0xe0001000
     edc:	2000577c 	.word	0x2000577c
     ee0:	200052f4 	.word	0x200052f4
     ee4:	20000b34 	.word	0x20000b34
     ee8:	3ecccccd 	.word	0x3ecccccd
     eec:	3dcccccd 	.word	0x3dcccccd
     ef0:	40490fdb 	.word	0x40490fdb
     ef4:	200010e0 	.word	0x200010e0
     ef8:	200051c8 	.word	0x200051c8
     efc:	20000abc 	.word	0x20000abc
     f00:	44fa0000 	.word	0x44fa0000
     f04:	20001028 	.word	0x20001028
     f08:	3ffeb852 	.word	0x3ffeb852
     f0c:	20014230 	.word	0x20014230
     f10:	00000000 	.word	0x00000000
     f14:	200141e0 	.word	0x200141e0
     f18:	20014210 	.word	0x20014210
     f1c:	30000000 	.word	0x30000000
     f20:	4b000000 	.word	0x4b000000
     f24:	20000684 	.word	0x20000684
     f28:	20014250 	.word	0x20014250
     f2c:	200051d8 	.word	0x200051d8
     f30:	20000af8 	.word	0x20000af8
     f34:	20000694 	.word	0x20000694
     f38:	200051f4 	.word	0x200051f4
     f3c:	20005364 	.word	0x20005364
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f40:	4bdf      	ldr	r3, [pc, #892]	; (12c0 <audioFrameAdditive+0x600>)
     f42:	eddf 7ae0 	vldr	s15, [pc, #896]	; 12c4 <audioFrameAdditive+0x604>
     f46:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f4a:	48df      	ldr	r0, [pc, #892]	; (12c8 <audioFrameAdditive+0x608>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f4c:	b29b      	uxth	r3, r3
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f4e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f52:	ee0a 3a90 	vmov	s21, r3
     f56:	eef8 aaea 	vcvt.f32.s32	s21, s21
     f5a:	ee6a aaa7 	vmul.f32	s21, s21, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f5e:	eeb0 0a6a 	vmov.f32	s0, s21
     f62:	f00b f835 	bl	bfd0 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     f66:	4bd9      	ldr	r3, [pc, #868]	; (12cc <audioFrameAdditive+0x60c>)
     f68:	9c05      	ldr	r4, [sp, #20]
     f6a:	681b      	ldr	r3, [r3, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f6c:	9d03      	ldr	r5, [sp, #12]
				stringOctave[i] = octave;
     f6e:	6023      	str	r3, [r4, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f70:	ed9f 0ad7 	vldr	s0, [pc, #860]	; 12d0 <audioFrameAdditive+0x610>
     f74:	4628      	mov	r0, r5
     f76:	f00b f80b 	bl	bf90 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     f7a:	eeb0 0a6a 	vmov.f32	s0, s21
     f7e:	4628      	mov	r0, r5
     f80:	f00a feaa 	bl	bcd8 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f84:	4bd3      	ldr	r3, [pc, #844]	; (12d4 <audioFrameAdditive+0x614>)
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f86:	ea4f 0288 	mov.w	r2, r8, lsl #2
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f8a:	edd4 7a00 	vldr	s15, [r4]
     f8e:	4413      	add	r3, r2
     f90:	ed93 0a00 	vldr	s0, [r3]
     f94:	ee30 0a27 	vadd.f32	s0, s0, s15
     f98:	f00a ff7e 	bl	be98 <__mtofTableLookup_veneer>
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     fa0:	ed99 6a0b 	vldr	s12, [r9, #44]	; 0x2c
     fa4:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
     fa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     fac:	9b04      	ldr	r3, [sp, #16]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fae:	ee37 7a46 	vsub.f32	s14, s14, s12
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     fb2:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     fb6:	4bc8      	ldr	r3, [pc, #800]	; (12d8 <audioFrameAdditive+0x618>)
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fb8:	eee7 7a26 	vfma.f32	s15, s14, s13
				int thisString = i + firstString;
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	4443      	add	r3, r8
				if (thisString < 6)
     fc0:	2b05      	cmp	r3, #5
				int thisString = i + firstString;
     fc2:	930c      	str	r3, [sp, #48]	; 0x30
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fc4:	ee20 9a27 	vmul.f32	s18, s0, s15
					stringFade = (float)thisString * 0.2f;
     fc8:	ee07 3a90 	vmov	s15, r3
     fcc:	eef8 9ae7 	vcvt.f32.s32	s19, s15
				if (thisString < 6)
     fd0:	f340 8130 	ble.w	1234 <audioFrameAdditive+0x574>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fd4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fd8:	4dc0      	ldr	r5, [pc, #768]	; (12dc <audioFrameAdditive+0x61c>)
     fda:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     fde:	eef0 1a6f 	vmov.f32	s3, s31
     fe2:	ed95 1a05 	vldr	s2, [r5, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fe6:	ee79 9ae7 	vsub.f32	s19, s19, s15
     fea:	eddf 7abd 	vldr	s15, [pc, #756]	; 12e0 <audioFrameAdditive+0x620>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fee:	edd5 0a03 	vldr	s1, [r5, #12]
     ff2:	eeb0 0a49 	vmov.f32	s0, s18
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     ff6:	ee69 9aa7 	vmul.f32	s19, s19, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ffa:	f00b f815 	bl	c028 <__LEAF_map_veneer>
     ffe:	eeb0 1a6e 	vmov.f32	s2, s29
    1002:	eef0 0a40 	vmov.f32	s1, s0
    1006:	eeb0 0a6f 	vmov.f32	s0, s31
    100a:	f00a ffed 	bl	bfe8 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    100e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1012:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1016:	ed95 1a02 	vldr	s2, [r5, #8]
    101a:	eef0 1a6f 	vmov.f32	s3, s31
    101e:	edd5 0a00 	vldr	s1, [r5]
    1022:	eeb0 0a49 	vmov.f32	s0, s18
    1026:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 12f4 <audioFrameAdditive+0x634>
    102a:	f00a fffd 	bl	c028 <__LEAF_map_veneer>
    102e:	eeb0 1a6e 	vmov.f32	s2, s29
    1032:	eef0 0a40 	vmov.f32	s1, s0
    1036:	4cab      	ldr	r4, [pc, #684]	; (12e4 <audioFrameAdditive+0x624>)
    1038:	eeb0 0a6f 	vmov.f32	s0, s31
    103c:	4eaa      	ldr	r6, [pc, #680]	; (12e8 <audioFrameAdditive+0x628>)
    103e:	f00a ffd3 	bl	bfe8 <__LEAF_clip_veneer>
				int height1Int = floor(height1);
    1042:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
				int height2Int = floor(height2);
    1046:	eeb7 7acb 	vcvt.f64.f32	d7, s22
    104a:	49a8      	ldr	r1, [pc, #672]	; (12ec <audioFrameAdditive+0x62c>)
				float oneMinusStringFade = 1.0f - stringFade;
    104c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    1050:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
				int height1Int = floor(height1);
    1054:	febb 6b46 	vrintm.f64	d6, d6
    1058:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				int height2Int = floor(height2);
    105c:	febb 7b47 	vrintm.f64	d7, d7
    1060:	eebd 7bc7 	vcvt.s32.f64	s14, d7
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1064:	ee38 eac0 	vsub.f32	s28, s17, s0
    1068:	46d0      	mov	r8, sl
    106a:	ee16 3a10 	vmov	r3, s12
				float height1Float = height1 - height1Int;
    106e:	eef8 7ac6 	vcvt.f32.s32	s15, s12
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1072:	ee78 dacb 	vsub.f32	s27, s17, s22
				float height2Float = height2 - height2Int;
    1076:	9f08      	ldr	r7, [sp, #32]
    1078:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    107c:	ee17 3a10 	vmov	r3, s14
    1080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1084:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
				float height1Float = height1 - height1Int;
    1088:	ee30 da67 	vsub.f32	s26, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    108c:	ee3e ea27 	vadd.f32	s28, s28, s15
    1090:	00db      	lsls	r3, r3, #3
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1092:	ee7d 7a87 	vadd.f32	s15, s27, s14
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1096:	eef0 ba40 	vmov.f32	s23, s0
				float oneMinusStringFade = 1.0f - stringFade;
    109a:	f103 0bd8 	add.w	fp, r3, #216	; 0xd8
    109e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
    10a2:	ee38 aae9 	vsub.f32	s20, s17, s19
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10a6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
    10aa:	18cb      	adds	r3, r1, r3
				float height2Float = height2 - height2Int;
    10ac:	ee7b ca47 	vsub.f32	s25, s22, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    10b0:	448b      	add	fp, r1
    10b2:	9300      	str	r3, [sp, #0]
    10b4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    10b8:	461a      	mov	r2, r3
    10ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
    10be:	9301      	str	r3, [sp, #4]
    10c0:	4692      	mov	sl, r2
				float height2Float = height2 - height2Int;
    10c2:	9b06      	ldr	r3, [sp, #24]
    10c4:	9309      	str	r3, [sp, #36]	; 0x24
    10c6:	e070      	b.n	11aa <audioFrameAdditive+0x4ea>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10c8:	edd3 7a00 	vldr	s15, [r3]
						if (height2 < 1.0f)
    10cc:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10d0:	9b00      	ldr	r3, [sp, #0]
    10d2:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10d6:	ee6d 7a27 	vmul.f32	s15, s26, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10da:	ed93 8a00 	vldr	s16, [r3]
						if (height2 < 1.0f)
    10de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10e2:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    10e6:	ee2c 8a88 	vmul.f32	s16, s25, s16
    10ea:	eea7 8a26 	vfma.f32	s16, s14, s13
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10ee:	ed9a 7a36 	vldr	s14, [sl, #216]	; 0xd8
    10f2:	eee7 7a0e 	vfma.f32	s15, s14, s28
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    10f6:	ee2a 8a08 	vmul.f32	s16, s20, s16
    10fa:	eea9 8aa7 	vfma.f32	s16, s19, s15
						if (height2 < 1.0f)
    10fe:	f100 80ce 	bmi.w	129e <audioFrameAdditive+0x5de>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    1102:	eef0 0a49 	vmov.f32	s1, s18
    1106:	ed95 1a08 	vldr	s2, [r5, #32]
    110a:	ed95 0a07 	vldr	s0, [r5, #28]
    110e:	edd4 da4b 	vldr	s27, [r4, #300]	; 0x12c
    1112:	f00a ff69 	bl	bfe8 <__LEAF_clip_veneer>
    1116:	ed98 7a4b 	vldr	s14, [r8, #300]	; 0x12c
    111a:	eead 7a80 	vfma.f32	s14, s27, s0
    111e:	eec8 da87 	vdiv.f32	s27, s17, s14
						if (height1 < 1.0f)
    1122:	eef4 bae8 	vcmpe.f32	s23, s17
    1126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    112a:	f100 80a7 	bmi.w	127c <audioFrameAdditive+0x5bc>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    112e:	eef0 0a49 	vmov.f32	s1, s18
    1132:	ed95 1a05 	vldr	s2, [r5, #20]
    1136:	ed95 0a04 	vldr	s0, [r5, #16]
    113a:	ed94 fa2d 	vldr	s30, [r4, #180]	; 0xb4
    113e:	f00a ff53 	bl	bfe8 <__LEAF_clip_veneer>
    1142:	ed98 7a2d 	vldr	s14, [r8, #180]	; 0xb4
    1146:	eeaf 7a00 	vfma.f32	s14, s30, s0
    114a:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    114e:	ee6d 7a8a 	vmul.f32	s15, s27, s20
    1152:	eee6 7aa9 	vfma.f32	s15, s13, s19
				for (int j = 0; j < NUM_OVERTONES; j++)
    1156:	9b01      	ldr	r3, [sp, #4]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1158:	4638      	mov	r0, r7
					thisDecay *= 2000.0f * knobScaled[10];
    115a:	ed99 0a0a 	vldr	s0, [r9, #40]	; 0x28
				for (int j = 0; j < NUM_OVERTONES; j++)
    115e:	3404      	adds	r4, #4
    1160:	3304      	adds	r3, #4
    1162:	f108 0804 	add.w	r8, r8, #4
					thisDecay *= 2000.0f * knobScaled[10];
    1166:	ee20 0a0c 	vmul.f32	s0, s0, s24
				for (int j = 0; j < NUM_OVERTONES; j++)
    116a:	f10a 0a04 	add.w	sl, sl, #4
    116e:	9301      	str	r3, [sp, #4]
    1170:	f10b 0b04 	add.w	fp, fp, #4
    1174:	9b00      	ldr	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1176:	ee20 0a27 	vmul.f32	s0, s0, s15
				for (int j = 0; j < NUM_OVERTONES; j++)
    117a:	3304      	adds	r3, #4
    117c:	9300      	str	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    117e:	f00a ff07 	bl	bf90 <__tADSRT_setDecay_veneer>
					currentRandom++;
    1182:	7833      	ldrb	r3, [r6, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    1184:	4638      	mov	r0, r7
    1186:	ee28 0a2a 	vmul.f32	s0, s16, s21
				for (int j = 0; j < NUM_OVERTONES; j++)
    118a:	3704      	adds	r7, #4
					currentRandom++;
    118c:	3301      	adds	r3, #1
    118e:	7033      	strb	r3, [r6, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    1190:	f00a fda2 	bl	bcd8 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
    1194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1196:	eca3 8a01 	vstmia	r3!, {s16}
    119a:	9309      	str	r3, [sp, #36]	; 0x24
					currentRandom++;
    119c:	7833      	ldrb	r3, [r6, #0]
    119e:	3301      	adds	r3, #1
    11a0:	7033      	strb	r3, [r6, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    11a2:	4b53      	ldr	r3, [pc, #332]	; (12f0 <audioFrameAdditive+0x630>)
    11a4:	42a3      	cmp	r3, r4
    11a6:	f000 80c9 	beq.w	133c <audioFrameAdditive+0x67c>
					if (thisString < 6)
    11aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11ac:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11ae:	9b01      	ldr	r3, [sp, #4]
					if (thisString < 6)
    11b0:	dd8a      	ble.n	10c8 <audioFrameAdditive+0x408>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11b2:	ed93 7a00 	vldr	s14, [r3]
						if (height2 < 1.0f)
    11b6:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11ba:	9b00      	ldr	r3, [sp, #0]
    11bc:	ed9b 8a00 	vldr	s16, [fp]
    11c0:	edd3 7a00 	vldr	s15, [r3]
						if (height2 < 1.0f)
    11c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11c8:	eea7 8aac 	vfma.f32	s16, s15, s25
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11cc:	edda 7a00 	vldr	s15, [sl]
    11d0:	eee7 7a0d 	vfma.f32	s15, s14, s26
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    11d4:	ee2a 8a08 	vmul.f32	s16, s20, s16
    11d8:	eea9 8aa7 	vfma.f32	s16, s19, s15
						if (height2 < 1.0f)
    11dc:	f100 809d 	bmi.w	131a <audioFrameAdditive+0x65a>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    11e0:	eef0 0a49 	vmov.f32	s1, s18
    11e4:	ed95 1a05 	vldr	s2, [r5, #20]
    11e8:	ed95 0a04 	vldr	s0, [r5, #16]
    11ec:	edd4 da2d 	vldr	s27, [r4, #180]	; 0xb4
    11f0:	f00a fefa 	bl	bfe8 <__LEAF_clip_veneer>
    11f4:	ed98 7a2d 	vldr	s14, [r8, #180]	; 0xb4
    11f8:	eead 7a80 	vfma.f32	s14, s27, s0
    11fc:	ee88 fa87 	vdiv.f32	s30, s17, s14
						if (height1 < 1.0f)
    1200:	eef4 bae8 	vcmpe.f32	s23, s17
    1204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1208:	d476      	bmi.n	12f8 <audioFrameAdditive+0x638>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    120a:	eef0 0a49 	vmov.f32	s1, s18
    120e:	ed95 1a02 	vldr	s2, [r5, #8]
    1212:	ed95 0a01 	vldr	s0, [r5, #4]
    1216:	edd4 da0f 	vldr	s27, [r4, #60]	; 0x3c
    121a:	f00a fee5 	bl	bfe8 <__LEAF_clip_veneer>
    121e:	ed98 7a0f 	vldr	s14, [r8, #60]	; 0x3c
    1222:	eead 7a80 	vfma.f32	s14, s27, s0
    1226:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    122a:	ee6f 7a0a 	vmul.f32	s15, s30, s20
    122e:	eee6 7aa9 	vfma.f32	s15, s13, s19
    1232:	e790      	b.n	1156 <audioFrameAdditive+0x496>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1234:	4d29      	ldr	r5, [pc, #164]	; (12dc <audioFrameAdditive+0x61c>)
    1236:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    123a:	eddf 7a29 	vldr	s15, [pc, #164]	; 12e0 <audioFrameAdditive+0x620>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    123e:	eef0 1a6f 	vmov.f32	s3, s31
    1242:	ed95 1a08 	vldr	s2, [r5, #32]
    1246:	eeb0 0a49 	vmov.f32	s0, s18
    124a:	edd5 0a06 	vldr	s1, [r5, #24]
					stringFade = (float)thisString * 0.2f;
    124e:	ee69 9aa7 	vmul.f32	s19, s19, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1252:	f00a fee9 	bl	c028 <__LEAF_map_veneer>
    1256:	eeb0 1a6e 	vmov.f32	s2, s29
    125a:	eef0 0a40 	vmov.f32	s1, s0
    125e:	eeb0 0a6f 	vmov.f32	s0, s31
    1262:	f00a fec1 	bl	bfe8 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1266:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    126a:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    126e:	ed95 1a05 	vldr	s2, [r5, #20]
    1272:	eef0 1a6f 	vmov.f32	s3, s31
    1276:	edd5 0a03 	vldr	s1, [r5, #12]
    127a:	e6d2      	b.n	1022 <audioFrameAdditive+0x362>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    127c:	eef0 0a49 	vmov.f32	s1, s18
    1280:	ed95 1a04 	vldr	s2, [r5, #16]
    1284:	ed95 0a03 	vldr	s0, [r5, #12]
    1288:	ed94 fa1e 	vldr	s30, [r4, #120]	; 0x78
    128c:	f00a feac 	bl	bfe8 <__LEAF_clip_veneer>
    1290:	ed98 7a1e 	vldr	s14, [r8, #120]	; 0x78
    1294:	eeaf 7a00 	vfma.f32	s14, s30, s0
    1298:	eec8 6a87 	vdiv.f32	s13, s17, s14
    129c:	e757      	b.n	114e <audioFrameAdditive+0x48e>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    129e:	eef0 0a49 	vmov.f32	s1, s18
    12a2:	ed95 1a07 	vldr	s2, [r5, #28]
    12a6:	ed95 0a06 	vldr	s0, [r5, #24]
    12aa:	edd4 da3c 	vldr	s27, [r4, #240]	; 0xf0
    12ae:	f00a fe9b 	bl	bfe8 <__LEAF_clip_veneer>
    12b2:	ed98 7a3c 	vldr	s14, [r8, #240]	; 0xf0
    12b6:	eead 7a80 	vfma.f32	s14, s27, s0
    12ba:	eec8 da87 	vdiv.f32	s27, s17, s14
    12be:	e730      	b.n	1122 <audioFrameAdditive+0x462>
    12c0:	20014210 	.word	0x20014210
    12c4:	37800080 	.word	0x37800080
    12c8:	20001158 	.word	0x20001158
    12cc:	20005300 	.word	0x20005300
    12d0:	42480000 	.word	0x42480000
    12d4:	20014228 	.word	0x20014228
    12d8:	200051d0 	.word	0x200051d0
    12dc:	200003d8 	.word	0x200003d8
    12e0:	3e4ccccd 	.word	0x3e4ccccd
    12e4:	20000ca4 	.word	0x20000ca4
    12e8:	20014320 	.word	0x20014320
    12ec:	200003fc 	.word	0x200003fc
    12f0:	20000ce0 	.word	0x20000ce0
    12f4:	20000e0c 	.word	0x20000e0c
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    12f8:	eef0 0a49 	vmov.f32	s1, s18
    12fc:	ed95 1a01 	vldr	s2, [r5, #4]
    1300:	ed95 0a00 	vldr	s0, [r5]
    1304:	edd4 da00 	vldr	s27, [r4]
    1308:	f00a fe6e 	bl	bfe8 <__LEAF_clip_veneer>
    130c:	ed98 7a00 	vldr	s14, [r8]
    1310:	eead 7a80 	vfma.f32	s14, s27, s0
    1314:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1318:	e787      	b.n	122a <audioFrameAdditive+0x56a>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    131a:	eef0 0a49 	vmov.f32	s1, s18
    131e:	ed95 1a04 	vldr	s2, [r5, #16]
    1322:	ed95 0a03 	vldr	s0, [r5, #12]
    1326:	edd4 da1e 	vldr	s27, [r4, #120]	; 0x78
    132a:	f00a fe5d 	bl	bfe8 <__LEAF_clip_veneer>
    132e:	ed98 7a1e 	vldr	s14, [r8, #120]	; 0x78
    1332:	eead 7a80 	vfma.f32	s14, s27, s0
    1336:	ee88 fa87 	vdiv.f32	s30, s17, s14
    133a:	e761      	b.n	1200 <audioFrameAdditive+0x540>
    133c:	9c08      	ldr	r4, [sp, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    133e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1340:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    1344:	343c      	adds	r4, #60	; 0x3c
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	e536      	b.n	db8 <audioFrameAdditive+0xf8>
    134a:	bf00      	nop
	...

00001360 <audioFrameWaiting>:


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	uint32_t tempCountFrame = DWT->CYCCNT;
    1360:	4a17      	ldr	r2, [pc, #92]	; (13c0 <audioFrameWaiting+0x60>)
    1362:	4918      	ldr	r1, [pc, #96]	; (13c4 <audioFrameWaiting+0x64>)
    1364:	eb02 0380 	add.w	r3, r2, r0, lsl #2
{
    1368:	b410      	push	{r4}
	uint32_t tempCountFrame = DWT->CYCCNT;
    136a:	684c      	ldr	r4, [r1, #4]
	//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    136c:	0759      	lsls	r1, r3, #29
    136e:	d11b      	bne.n	13a8 <audioFrameWaiting+0x48>
    1370:	f503 7200 	add.w	r2, r3, #512	; 0x200
	{
		int iplusbuffer = buffer_offset + i;
		audioOutBuffer[iplusbuffer] = 0;
    1374:	2000      	movs	r0, #0
    1376:	2100      	movs	r1, #0
    1378:	e8e3 0102 	strd	r0, r1, [r3], #8
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    137c:	4293      	cmp	r3, r2
    137e:	d1fb      	bne.n	1378 <audioFrameWaiting+0x18>
		audioOutBuffer[iplusbuffer + 1] = 0;
	}
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1380:	4b10      	ldr	r3, [pc, #64]	; (13c4 <audioFrameWaiting+0x64>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1382:	4811      	ldr	r0, [pc, #68]	; (13c8 <audioFrameWaiting+0x68>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1384:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1386:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    138a:	1b1b      	subs	r3, r3, r4
    138c:	490f      	ldr	r1, [pc, #60]	; (13cc <audioFrameWaiting+0x6c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    138e:	4a10      	ldr	r2, [pc, #64]	; (13d0 <audioFrameWaiting+0x70>)
    1390:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1394:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1396:	eef8 7a67 	vcvt.f32.u32	s15, s15
    139a:	ee67 7a87 	vmul.f32	s15, s15, s14
    139e:	edc2 7a00 	vstr	s15, [r2]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    13a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    13a6:	4770      	bx	lr
    13a8:	f502 7100 	add.w	r1, r2, #512	; 0x200
    13ac:	0080      	lsls	r0, r0, #2
		audioOutBuffer[iplusbuffer] = 0;
    13ae:	2200      	movs	r2, #0
    13b0:	4401      	add	r1, r0
		audioOutBuffer[iplusbuffer + 1] = 0;
    13b2:	e9c3 2200 	strd	r2, r2, [r3]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    13b6:	3308      	adds	r3, #8
    13b8:	428b      	cmp	r3, r1
    13ba:	d1fa      	bne.n	13b2 <audioFrameWaiting+0x52>
    13bc:	e7e0      	b.n	1380 <audioFrameWaiting+0x20>
    13be:	bf00      	nop
    13c0:	30000000 	.word	0x30000000
    13c4:	e0001000 	.word	0xe0001000
    13c8:	20000684 	.word	0x20000684
    13cc:	20014250 	.word	0x20014250
    13d0:	200051d8 	.word	0x200051d8
    13d4:	f3af 8000 	nop.w
    13d8:	f3af 8000 	nop.w
    13dc:	f3af 8000 	nop.w

000013e0 <updateStateFromSPIMessage>:
{
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13e2:	4a3e      	ldr	r2, [pc, #248]	; (14dc <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    13e4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	uint32_t tempCountSPI = DWT->CYCCNT;
    13e8:	4b3d      	ldr	r3, [pc, #244]	; (14e0 <updateStateFromSPIMessage+0x100>)
	octaveAction = (modeBit >> 6) & 1;
    13ea:	4d3e      	ldr	r5, [pc, #248]	; (14e4 <updateStateFromSPIMessage+0x104>)
	uint32_t tempCountSPI = DWT->CYCCNT;
    13ec:	685c      	ldr	r4, [r3, #4]
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13ee:	1813      	adds	r3, r2, r0
	voice = SPI_LEVERS_RX[25 + offset];
    13f0:	4e3d      	ldr	r6, [pc, #244]	; (14e8 <updateStateFromSPIMessage+0x108>)
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13f2:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    13f4:	7e5f      	ldrb	r7, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    13f6:	f001 030f 	and.w	r3, r1, #15
    13fa:	3b05      	subs	r3, #5
    13fc:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    1400:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1408:	702b      	strb	r3, [r5, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    140a:	6037      	str	r7, [r6, #0]
	dualSlider = (modeBit >> 5) & 1;
    140c:	f3c1 1640 	ubfx	r6, r1, #5, #1
	if (octaveAction)
    1410:	782b      	ldrb	r3, [r5, #0]
	edit = (modeBit >> 4) & 1;
    1412:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1416:	4d35      	ldr	r5, [pc, #212]	; (14ec <updateStateFromSPIMessage+0x10c>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1418:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    141c:	602e      	str	r6, [r5, #0]
	edit = (modeBit >> 4) & 1;
    141e:	4d34      	ldr	r5, [pc, #208]	; (14f0 <updateStateFromSPIMessage+0x110>)
    1420:	6029      	str	r1, [r5, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1422:	4934      	ldr	r1, [pc, #208]	; (14f4 <updateStateFromSPIMessage+0x114>)
    1424:	edc1 7a00 	vstr	s15, [r1]
	if (octaveAction)
    1428:	b14b      	cbz	r3, 143e <updateStateFromSPIMessage+0x5e>
		for (int i = 0; i < numStringsThisBoard; i++)
    142a:	4b33      	ldr	r3, [pc, #204]	; (14f8 <updateStateFromSPIMessage+0x118>)
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	b133      	cbz	r3, 143e <updateStateFromSPIMessage+0x5e>
			stringOctave[i] = octave;
    1430:	4932      	ldr	r1, [pc, #200]	; (14fc <updateStateFromSPIMessage+0x11c>)
		for (int i = 0; i < numStringsThisBoard; i++)
    1432:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    1434:	edc1 7a00 	vstr	s15, [r1]
    1438:	bf18      	it	ne
    143a:	edc1 7a01 	vstrne	s15, [r1, #4]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    143e:	4410      	add	r0, r2
    1440:	492f      	ldr	r1, [pc, #188]	; (1500 <updateStateFromSPIMessage+0x120>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1442:	4a30      	ldr	r2, [pc, #192]	; (1504 <updateStateFromSPIMessage+0x124>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1444:	7e85      	ldrb	r5, [r0, #26]
    1446:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1448:	eddf 7a2f 	vldr	s15, [pc, #188]	; 1508 <updateStateFromSPIMessage+0x128>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    144c:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	volumePedal = volumePedalInt * 0.0002442002442f;
    1450:	4e2e      	ldr	r6, [pc, #184]	; (150c <updateStateFromSPIMessage+0x12c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1452:	b29b      	uxth	r3, r3
    1454:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1456:	880b      	ldrh	r3, [r1, #0]
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1458:	7811      	ldrb	r1, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    145a:	b29b      	uxth	r3, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    145c:	b2c9      	uxtb	r1, r1
	volumePedal = volumePedalInt * 0.0002442002442f;
    145e:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1462:	7f03      	ldrb	r3, [r0, #28]
    1464:	7f40      	ldrb	r0, [r0, #29]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1466:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    146a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    146e:	4b28      	ldr	r3, [pc, #160]	; (1510 <updateStateFromSPIMessage+0x130>)
    1470:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1474:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1478:	7811      	ldrb	r1, [r2, #0]
    147a:	4826      	ldr	r0, [pc, #152]	; (1514 <updateStateFromSPIMessage+0x134>)
    147c:	b2c9      	uxtb	r1, r1
	volumePedal = volumePedalInt * 0.0002442002442f;
    147e:	ed86 0a00 	vstr	s0, [r6]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1482:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    1486:	7811      	ldrb	r1, [r2, #0]
    1488:	b2c9      	uxtb	r1, r1
    148a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    148e:	428d      	cmp	r5, r1
    1490:	d01a      	beq.n	14c8 <updateStateFromSPIMessage+0xe8>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1492:	7811      	ldrb	r1, [r2, #0]
    1494:	7812      	ldrb	r2, [r2, #0]
    1496:	b2c9      	uxtb	r1, r1
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1498:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1518 <updateStateFromSPIMessage+0x138>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    149c:	b2d2      	uxtb	r2, r2
    149e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    14a2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14a6:	ed93 7a00 	vldr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14aa:	edd3 7a01 	vldr	s15, [r3, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    14b2:	4b1a      	ldr	r3, [pc, #104]	; (151c <updateStateFromSPIMessage+0x13c>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14b8:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14c0:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14c4:	edc3 7a01 	vstr	s15, [r3, #4]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    14c8:	4815      	ldr	r0, [pc, #84]	; (1520 <updateStateFromSPIMessage+0x140>)
    14ca:	f00a fe5d 	bl	c188 <__tExpSmooth_setDest_veneer>
	timeSPI = DWT->CYCCNT - tempCountSPI;
    14ce:	4b04      	ldr	r3, [pc, #16]	; (14e0 <updateStateFromSPIMessage+0x100>)
    14d0:	4a14      	ldr	r2, [pc, #80]	; (1524 <updateStateFromSPIMessage+0x144>)
    14d2:	685b      	ldr	r3, [r3, #4]
    14d4:	1b1b      	subs	r3, r3, r4
    14d6:	6013      	str	r3, [r2, #0]
}
    14d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14da:	bf00      	nop
    14dc:	30000800 	.word	0x30000800
    14e0:	e0001000 	.word	0xe0001000
    14e4:	20005304 	.word	0x20005304
    14e8:	2001425c 	.word	0x2001425c
    14ec:	200051c0 	.word	0x200051c0
    14f0:	200051c4 	.word	0x200051c4
    14f4:	20005300 	.word	0x20005300
    14f8:	20000694 	.word	0x20000694
    14fc:	20014230 	.word	0x20014230
    1500:	20014264 	.word	0x20014264
    1504:	2001426c 	.word	0x2001426c
    1508:	39800801 	.word	0x39800801
    150c:	20014260 	.word	0x20014260
    1510:	20014238 	.word	0x20014238
    1514:	20014240 	.word	0x20014240
    1518:	3b000000 	.word	0x3b000000
    151c:	20001198 	.word	0x20001198
    1520:	20014268 	.word	0x20014268
    1524:	20014254 	.word	0x20014254
    1528:	f3af 8000 	nop.w
    152c:	f3af 8000 	nop.w
    1530:	f3af 8000 	nop.w
    1534:	f3af 8000 	nop.w
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <HAL_SAI_TxCpltCallback>:
{
    1540:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1542:	4d67      	ldr	r5, [pc, #412]	; (16e0 <HAL_SAI_TxCpltCallback+0x1a0>)
    1544:	782b      	ldrb	r3, [r5, #0]
    1546:	b91b      	cbnz	r3, 1550 <HAL_SAI_TxCpltCallback+0x10>
    1548:	4b66      	ldr	r3, [pc, #408]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	2b00      	cmp	r3, #0
    154e:	d167      	bne.n	1620 <HAL_SAI_TxCpltCallback+0xe0>
	if (voice != prevVoice)
    1550:	4c65      	ldr	r4, [pc, #404]	; (16e8 <HAL_SAI_TxCpltCallback+0x1a8>)
    1552:	4e66      	ldr	r6, [pc, #408]	; (16ec <HAL_SAI_TxCpltCallback+0x1ac>)
    1554:	6822      	ldr	r2, [r4, #0]
    1556:	6833      	ldr	r3, [r6, #0]
    1558:	429a      	cmp	r2, r3
    155a:	d066      	beq.n	162a <HAL_SAI_TxCpltCallback+0xea>
		if (voice == 63)
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	2b3f      	cmp	r3, #63	; 0x3f
    1560:	d078      	beq.n	1654 <HAL_SAI_TxCpltCallback+0x114>
		else if (voice == 62)
    1562:	6823      	ldr	r3, [r4, #0]
    1564:	2b3e      	cmp	r3, #62	; 0x3e
    1566:	d065      	beq.n	1634 <HAL_SAI_TxCpltCallback+0xf4>
		else if (voice == 61)
    1568:	6823      	ldr	r3, [r4, #0]
    156a:	2b3d      	cmp	r3, #61	; 0x3d
    156c:	f000 8081 	beq.w	1672 <HAL_SAI_TxCpltCallback+0x132>
		else if (voice == 60)
    1570:	6823      	ldr	r3, [r4, #0]
    1572:	2b3c      	cmp	r3, #60	; 0x3c
    1574:	f000 808f 	beq.w	1696 <HAL_SAI_TxCpltCallback+0x156>
		else if (voice == 59)
    1578:	6823      	ldr	r3, [r4, #0]
    157a:	2b3b      	cmp	r3, #59	; 0x3b
    157c:	f000 809d 	beq.w	16ba <HAL_SAI_TxCpltCallback+0x17a>
			presetWaitingToLoad = 1;
    1580:	4b5b      	ldr	r3, [pc, #364]	; (16f0 <HAL_SAI_TxCpltCallback+0x1b0>)
    1582:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    1584:	485b      	ldr	r0, [pc, #364]	; (16f4 <HAL_SAI_TxCpltCallback+0x1b4>)
			presetWaitingToLoad = 1;
    1586:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1588:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    158a:	495b      	ldr	r1, [pc, #364]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
			presetNumberToLoad = voice;
    158c:	b2db      	uxtb	r3, r3
    158e:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    1590:	485a      	ldr	r0, [pc, #360]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
			presetReady = 0;
    1592:	4b54      	ldr	r3, [pc, #336]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			audioFrameFunction = audioFrameWaiting;
    1594:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    1596:	2100      	movs	r1, #0
    1598:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    159a:	6833      	ldr	r3, [r6, #0]
    159c:	2b3b      	cmp	r3, #59	; 0x3b
    159e:	dc46      	bgt.n	162e <HAL_SAI_TxCpltCallback+0xee>
			frameLoadOverCount = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	4957      	ldr	r1, [pc, #348]	; (1700 <HAL_SAI_TxCpltCallback+0x1c0>)
    15a4:	4613      	mov	r3, r2
    15a6:	600a      	str	r2, [r1, #0]
			whichModel = 1;
    15a8:	4d56      	ldr	r5, [pc, #344]	; (1704 <HAL_SAI_TxCpltCallback+0x1c4>)
			audioOutBuffer[i] = 0;
    15aa:	2000      	movs	r0, #0
			whichModel = 1;
    15ac:	4a56      	ldr	r2, [pc, #344]	; (1708 <HAL_SAI_TxCpltCallback+0x1c8>)
			audioOutBuffer[i] = 0;
    15ae:	2100      	movs	r1, #0
			whichModel = 1;
    15b0:	7013      	strb	r3, [r2, #0]
    15b2:	462b      	mov	r3, r5
    15b4:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    15b8:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    15bc:	4293      	cmp	r3, r2
    15be:	d1fb      	bne.n	15b8 <HAL_SAI_TxCpltCallback+0x78>
	prevVoice = voice;
    15c0:	6823      	ldr	r3, [r4, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    15c2:	4952      	ldr	r1, [pc, #328]	; (170c <HAL_SAI_TxCpltCallback+0x1cc>)
	prevVoice = voice;
    15c4:	6033      	str	r3, [r6, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    15c6:	6848      	ldr	r0, [r1, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    15c8:	f3bf 8f4f 	dsb	sy

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15cc:	4b50      	ldr	r3, [pc, #320]	; (1710 <HAL_SAI_TxCpltCallback+0x1d0>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15ce:	4a51      	ldr	r2, [pc, #324]	; (1714 <HAL_SAI_TxCpltCallback+0x1d4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15d0:	f103 0420 	add.w	r4, r3, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15d4:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
    15d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    15dc:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15e4:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15e8:	f103 0460 	add.w	r4, r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15ec:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15f0:	f103 0480 	add.w	r4, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15f4:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15f8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15fc:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1600:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
    1604:	33e0      	adds	r3, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1606:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    160a:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    160e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1612:	f3bf 8f6f 	isb	sy
	timeClean = DWT->CYCCNT - tempCountClean;
    1616:	684b      	ldr	r3, [r1, #4]
    1618:	4a3f      	ldr	r2, [pc, #252]	; (1718 <HAL_SAI_TxCpltCallback+0x1d8>)
    161a:	1a1b      	subs	r3, r3, r0
    161c:	6013      	str	r3, [r2, #0]
}
    161e:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    1620:	4b35      	ldr	r3, [pc, #212]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1622:	2080      	movs	r0, #128	; 0x80
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	4798      	blx	r3
    1628:	e792      	b.n	1550 <HAL_SAI_TxCpltCallback+0x10>
    162a:	4d36      	ldr	r5, [pc, #216]	; (1704 <HAL_SAI_TxCpltCallback+0x1c4>)
    162c:	e7c8      	b.n	15c0 <HAL_SAI_TxCpltCallback+0x80>
				resetStringInputs = 1;
    162e:	4b3b      	ldr	r3, [pc, #236]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    1630:	701a      	strb	r2, [r3, #0]
    1632:	e7b5      	b.n	15a0 <HAL_SAI_TxCpltCallback+0x60>
			audioFrameFunction = audioFrameWaiting;
    1634:	4b30      	ldr	r3, [pc, #192]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1636:	4a31      	ldr	r2, [pc, #196]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
    1638:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    163a:	f005 fbf1 	bl	6e20 <audioSwitchToString2>
			currentActivePreset = voice;
    163e:	6823      	ldr	r3, [r4, #0]
    1640:	4a37      	ldr	r2, [pc, #220]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1642:	b2db      	uxtb	r3, r3
    1644:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1646:	2201      	movs	r2, #1
    1648:	4b34      	ldr	r3, [pc, #208]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    164a:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    164c:	2200      	movs	r2, #0
    164e:	2302      	movs	r3, #2
    1650:	702a      	strb	r2, [r5, #0]
			whichModel = 2;
    1652:	e7a9      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameWaiting;
    1654:	4b28      	ldr	r3, [pc, #160]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1656:	4a29      	ldr	r2, [pc, #164]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
    1658:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    165a:	f005 f881 	bl	6760 <audioSwitchToString1>
			currentActivePreset = voice;
    165e:	6823      	ldr	r3, [r4, #0]
    1660:	4a2f      	ldr	r2, [pc, #188]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1662:	b2db      	uxtb	r3, r3
    1664:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1666:	2301      	movs	r3, #1
    1668:	4a2c      	ldr	r2, [pc, #176]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    166a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    166c:	2200      	movs	r2, #0
    166e:	702a      	strb	r2, [r5, #0]
			whichModel = 1;
    1670:	e79a      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameAdditive;
    1672:	4b21      	ldr	r3, [pc, #132]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1674:	4a2b      	ldr	r2, [pc, #172]	; (1724 <HAL_SAI_TxCpltCallback+0x1e4>)
    1676:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1678:	f7ff f912 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    167c:	6823      	ldr	r3, [r4, #0]
    167e:	4a28      	ldr	r2, [pc, #160]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1680:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1682:	4918      	ldr	r1, [pc, #96]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    1684:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1686:	2200      	movs	r2, #0
			presetReady = 1;
    1688:	2301      	movs	r3, #1
			diskBusy = 0;
    168a:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    168c:	4a23      	ldr	r2, [pc, #140]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    168e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1690:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1692:	2303      	movs	r3, #3
    1694:	e788      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameVocal;
    1696:	4b18      	ldr	r3, [pc, #96]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1698:	4a23      	ldr	r2, [pc, #140]	; (1728 <HAL_SAI_TxCpltCallback+0x1e8>)
    169a:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    169c:	f00a f850 	bl	b740 <audioSwitchToVocal>
			currentActivePreset = voice;
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	4a1f      	ldr	r2, [pc, #124]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    16a4:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16a6:	490f      	ldr	r1, [pc, #60]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    16a8:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16aa:	2200      	movs	r2, #0
			presetReady = 1;
    16ac:	2301      	movs	r3, #1
			diskBusy = 0;
    16ae:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    16b0:	4a1a      	ldr	r2, [pc, #104]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    16b2:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16b4:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    16b6:	2304      	movs	r3, #4
    16b8:	e776      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    16ba:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    16bc:	4a1b      	ldr	r2, [pc, #108]	; (172c <HAL_SAI_TxCpltCallback+0x1ec>)
    16be:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    16c0:	f006 f92e 	bl	7920 <audioSwitchToString3>
			currentActivePreset = voice;
    16c4:	6823      	ldr	r3, [r4, #0]
    16c6:	4a16      	ldr	r2, [pc, #88]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    16c8:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16ca:	4906      	ldr	r1, [pc, #24]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    16cc:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16ce:	2200      	movs	r2, #0
			presetReady = 1;
    16d0:	2301      	movs	r3, #1
			diskBusy = 0;
    16d2:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    16d4:	4a11      	ldr	r2, [pc, #68]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    16d6:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16d8:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    16da:	2305      	movs	r3, #5
    16dc:	e764      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
    16de:	bf00      	nop
    16e0:	2001435c 	.word	0x2001435c
    16e4:	20005358 	.word	0x20005358
    16e8:	2001425c 	.word	0x2001425c
    16ec:	2000069c 	.word	0x2000069c
    16f0:	2001a084 	.word	0x2001a084
    16f4:	2001a082 	.word	0x2001a082
    16f8:	20001194 	.word	0x20001194
    16fc:	00001361 	.word	0x00001361
    1700:	200051d4 	.word	0x200051d4
    1704:	30000000 	.word	0x30000000
    1708:	2001c689 	.word	0x2001c689
    170c:	e0001000 	.word	0xe0001000
    1710:	30000020 	.word	0x30000020
    1714:	e000ed00 	.word	0xe000ed00
    1718:	2001424c 	.word	0x2001424c
    171c:	2000577c 	.word	0x2000577c
    1720:	200006ad 	.word	0x200006ad
    1724:	00000cc1 	.word	0x00000cc1
    1728:	0000b941 	.word	0x0000b941
    172c:	00007ba1 	.word	0x00007ba1
    1730:	f3af 8000 	nop.w
    1734:	f3af 8000 	nop.w
    1738:	f3af 8000 	nop.w
    173c:	f3af 8000 	nop.w

00001740 <HAL_SAI_TxHalfCpltCallback>:
{
    1740:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1742:	4d63      	ldr	r5, [pc, #396]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0x190>)
    1744:	7828      	ldrb	r0, [r5, #0]
    1746:	b918      	cbnz	r0, 1750 <HAL_SAI_TxHalfCpltCallback+0x10>
    1748:	4b62      	ldr	r3, [pc, #392]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	2b00      	cmp	r3, #0
    174e:	d160      	bne.n	1812 <HAL_SAI_TxHalfCpltCallback+0xd2>
	if (voice != prevVoice)
    1750:	4c61      	ldr	r4, [pc, #388]	; (18d8 <HAL_SAI_TxHalfCpltCallback+0x198>)
    1752:	4e62      	ldr	r6, [pc, #392]	; (18dc <HAL_SAI_TxHalfCpltCallback+0x19c>)
    1754:	6822      	ldr	r2, [r4, #0]
    1756:	6833      	ldr	r3, [r6, #0]
    1758:	429a      	cmp	r2, r3
    175a:	d05e      	beq.n	181a <HAL_SAI_TxHalfCpltCallback+0xda>
		if (voice == 63)
    175c:	6823      	ldr	r3, [r4, #0]
    175e:	2b3f      	cmp	r3, #63	; 0x3f
    1760:	d070      	beq.n	1844 <HAL_SAI_TxHalfCpltCallback+0x104>
		else if (voice == 62)
    1762:	6823      	ldr	r3, [r4, #0]
    1764:	2b3e      	cmp	r3, #62	; 0x3e
    1766:	d05d      	beq.n	1824 <HAL_SAI_TxHalfCpltCallback+0xe4>
		else if (voice == 61)
    1768:	6823      	ldr	r3, [r4, #0]
    176a:	2b3d      	cmp	r3, #61	; 0x3d
    176c:	d079      	beq.n	1862 <HAL_SAI_TxHalfCpltCallback+0x122>
		else if (voice == 60)
    176e:	6823      	ldr	r3, [r4, #0]
    1770:	2b3c      	cmp	r3, #60	; 0x3c
    1772:	f000 8088 	beq.w	1886 <HAL_SAI_TxHalfCpltCallback+0x146>
		else if (voice == 59)
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	2b3b      	cmp	r3, #59	; 0x3b
    177a:	f000 8096 	beq.w	18aa <HAL_SAI_TxHalfCpltCallback+0x16a>
			presetWaitingToLoad = 1;
    177e:	4b58      	ldr	r3, [pc, #352]	; (18e0 <HAL_SAI_TxHalfCpltCallback+0x1a0>)
    1780:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    1782:	4858      	ldr	r0, [pc, #352]	; (18e4 <HAL_SAI_TxHalfCpltCallback+0x1a4>)
			presetWaitingToLoad = 1;
    1784:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1786:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    1788:	4957      	ldr	r1, [pc, #348]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
			presetNumberToLoad = voice;
    178a:	b2db      	uxtb	r3, r3
    178c:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    178e:	4857      	ldr	r0, [pc, #348]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
			presetReady = 0;
    1790:	4b50      	ldr	r3, [pc, #320]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			audioFrameFunction = audioFrameWaiting;
    1792:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    1794:	2100      	movs	r1, #0
    1796:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    1798:	6833      	ldr	r3, [r6, #0]
    179a:	2b3b      	cmp	r3, #59	; 0x3b
    179c:	dc3f      	bgt.n	181e <HAL_SAI_TxHalfCpltCallback+0xde>
			frameLoadOverCount = 0;
    179e:	2200      	movs	r2, #0
    17a0:	4953      	ldr	r1, [pc, #332]	; (18f0 <HAL_SAI_TxHalfCpltCallback+0x1b0>)
    17a2:	4613      	mov	r3, r2
    17a4:	600a      	str	r2, [r1, #0]
			whichModel = 1;
    17a6:	4d53      	ldr	r5, [pc, #332]	; (18f4 <HAL_SAI_TxHalfCpltCallback+0x1b4>)
			audioOutBuffer[i] = 0;
    17a8:	2000      	movs	r0, #0
			whichModel = 1;
    17aa:	4a53      	ldr	r2, [pc, #332]	; (18f8 <HAL_SAI_TxHalfCpltCallback+0x1b8>)
			audioOutBuffer[i] = 0;
    17ac:	2100      	movs	r1, #0
			whichModel = 1;
    17ae:	7013      	strb	r3, [r2, #0]
    17b0:	462b      	mov	r3, r5
    17b2:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    17b6:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    17ba:	4293      	cmp	r3, r2
    17bc:	d1fb      	bne.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x76>
	prevVoice = voice;
    17be:	6823      	ldr	r3, [r4, #0]
    17c0:	6033      	str	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    17c2:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17c6:	4b4d      	ldr	r3, [pc, #308]	; (18fc <HAL_SAI_TxHalfCpltCallback+0x1bc>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17c8:	4a4d      	ldr	r2, [pc, #308]	; (1900 <HAL_SAI_TxHalfCpltCallback+0x1c0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17ca:	f103 0120 	add.w	r1, r3, #32
    17ce:	f103 0040 	add.w	r0, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17d2:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17d6:	f103 0480 	add.w	r4, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17da:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    17de:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17e2:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17e6:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17ea:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17ee:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17f2:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    17f6:	33e0      	adds	r3, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17f8:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    17fc:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
    1800:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    1804:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    1808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180c:	f3bf 8f6f 	isb	sy
}
    1810:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(0);
    1812:	4b35      	ldr	r3, [pc, #212]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	4798      	blx	r3
    1818:	e79a      	b.n	1750 <HAL_SAI_TxHalfCpltCallback+0x10>
    181a:	4d36      	ldr	r5, [pc, #216]	; (18f4 <HAL_SAI_TxHalfCpltCallback+0x1b4>)
    181c:	e7cf      	b.n	17be <HAL_SAI_TxHalfCpltCallback+0x7e>
				resetStringInputs = 1;
    181e:	4b39      	ldr	r3, [pc, #228]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    1820:	701a      	strb	r2, [r3, #0]
    1822:	e7bc      	b.n	179e <HAL_SAI_TxHalfCpltCallback+0x5e>
			audioFrameFunction = audioFrameWaiting;
    1824:	4b30      	ldr	r3, [pc, #192]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1826:	4a31      	ldr	r2, [pc, #196]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
    1828:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    182a:	f005 faf9 	bl	6e20 <audioSwitchToString2>
			currentActivePreset = voice;
    182e:	6823      	ldr	r3, [r4, #0]
    1830:	4a35      	ldr	r2, [pc, #212]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1832:	b2db      	uxtb	r3, r3
    1834:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1836:	2201      	movs	r2, #1
    1838:	4b32      	ldr	r3, [pc, #200]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    183a:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    183c:	2200      	movs	r2, #0
    183e:	2302      	movs	r3, #2
    1840:	702a      	strb	r2, [r5, #0]
			whichModel = 2;
    1842:	e7b0      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameWaiting;
    1844:	4b28      	ldr	r3, [pc, #160]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1846:	4a29      	ldr	r2, [pc, #164]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
    1848:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    184a:	f004 ff89 	bl	6760 <audioSwitchToString1>
			currentActivePreset = voice;
    184e:	6823      	ldr	r3, [r4, #0]
    1850:	4a2d      	ldr	r2, [pc, #180]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1852:	b2db      	uxtb	r3, r3
    1854:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1856:	2301      	movs	r3, #1
    1858:	4a2a      	ldr	r2, [pc, #168]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    185a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    185c:	2200      	movs	r2, #0
    185e:	702a      	strb	r2, [r5, #0]
			whichModel = 1;
    1860:	e7a1      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameAdditive;
    1862:	4b21      	ldr	r3, [pc, #132]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1864:	4a29      	ldr	r2, [pc, #164]	; (190c <HAL_SAI_TxHalfCpltCallback+0x1cc>)
    1866:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1868:	f7ff f81a 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    186c:	6823      	ldr	r3, [r4, #0]
    186e:	4a26      	ldr	r2, [pc, #152]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1870:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1872:	4918      	ldr	r1, [pc, #96]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    1874:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1876:	2200      	movs	r2, #0
			presetReady = 1;
    1878:	2301      	movs	r3, #1
			diskBusy = 0;
    187a:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    187c:	4a21      	ldr	r2, [pc, #132]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    187e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1880:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1882:	2303      	movs	r3, #3
    1884:	e78f      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameVocal;
    1886:	4b18      	ldr	r3, [pc, #96]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1888:	4a21      	ldr	r2, [pc, #132]	; (1910 <HAL_SAI_TxHalfCpltCallback+0x1d0>)
    188a:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    188c:	f009 ff58 	bl	b740 <audioSwitchToVocal>
			currentActivePreset = voice;
    1890:	6823      	ldr	r3, [r4, #0]
    1892:	4a1d      	ldr	r2, [pc, #116]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1894:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1896:	490f      	ldr	r1, [pc, #60]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    1898:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    189a:	2200      	movs	r2, #0
			presetReady = 1;
    189c:	2301      	movs	r3, #1
			diskBusy = 0;
    189e:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    18a0:	4a18      	ldr	r2, [pc, #96]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    18a2:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    18a4:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    18a6:	2304      	movs	r3, #4
    18a8:	e77d      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameString3;
    18aa:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    18ac:	4a19      	ldr	r2, [pc, #100]	; (1914 <HAL_SAI_TxHalfCpltCallback+0x1d4>)
    18ae:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    18b0:	f006 f836 	bl	7920 <audioSwitchToString3>
			currentActivePreset = voice;
    18b4:	6823      	ldr	r3, [r4, #0]
    18b6:	4a14      	ldr	r2, [pc, #80]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    18b8:	b2db      	uxtb	r3, r3
			presetReady = 1;
    18ba:	4906      	ldr	r1, [pc, #24]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    18bc:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    18be:	2200      	movs	r2, #0
			presetReady = 1;
    18c0:	2301      	movs	r3, #1
			diskBusy = 0;
    18c2:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    18c4:	4a0f      	ldr	r2, [pc, #60]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    18c6:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    18c8:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    18ca:	2305      	movs	r3, #5
    18cc:	e76b      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
    18ce:	bf00      	nop
    18d0:	2001435c 	.word	0x2001435c
    18d4:	20005358 	.word	0x20005358
    18d8:	2001425c 	.word	0x2001425c
    18dc:	2000069c 	.word	0x2000069c
    18e0:	2001a084 	.word	0x2001a084
    18e4:	2001a082 	.word	0x2001a082
    18e8:	20001194 	.word	0x20001194
    18ec:	00001361 	.word	0x00001361
    18f0:	200051d4 	.word	0x200051d4
    18f4:	30000000 	.word	0x30000000
    18f8:	2001c689 	.word	0x2001c689
    18fc:	30000020 	.word	0x30000020
    1900:	e000ed00 	.word	0xe000ed00
    1904:	2000577c 	.word	0x2000577c
    1908:	200006ad 	.word	0x200006ad
    190c:	00000cc1 	.word	0x00000cc1
    1910:	0000b941 	.word	0x0000b941
    1914:	00007ba1 	.word	0x00007ba1
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <HAL_SAI_ErrorCallback>:
}
    1920:	4770      	bx	lr
    1922:	bf00      	nop
	...

00001940 <scaleDefault>:
}
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	f3af 8000 	nop.w
    1948:	f3af 8000 	nop.w
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1960:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1964:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    1968:	eee0 7a07 	vfma.f32	s15, s0, s14
    196c:	eeb0 0a67 	vmov.f32	s0, s15
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	f3af 8000 	nop.w
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1980:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1994 <scaleOscFine+0x14>
    1984:	eddf 7a04 	vldr	s15, [pc, #16]	; 1998 <scaleOscFine+0x18>
}
    1988:	eee0 7a07 	vfma.f32	s15, s0, s14
    198c:	eeb0 0a67 	vmov.f32	s0, s15
    1990:	4770      	bx	lr
    1992:	bf00      	nop
    1994:	43480000 	.word	0x43480000
    1998:	c2c80000 	.word	0xc2c80000
    199c:	f3af 8000 	nop.w

000019a0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    19a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19b4 <scaleOscFreq+0x14>
    19a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19b8 <scaleOscFreq+0x18>
}
    19a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ac:	eeb0 0a67 	vmov.f32	s0, s15
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	457a0000 	.word	0x457a0000
    19b8:	c4fa0000 	.word	0xc4fa0000
    19bc:	f3af 8000 	nop.w

000019c0 <scaleFilterCutoff>:
	return (input * 127.0f);
    19c0:	eddf 7a02 	vldr	s15, [pc, #8]	; 19cc <scaleFilterCutoff+0xc>
}
    19c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	42fe0000 	.word	0x42fe0000
    19d0:	f3af 8000 	nop.w
    19d4:	f3af 8000 	nop.w
    19d8:	f3af 8000 	nop.w
    19dc:	f3af 8000 	nop.w

000019e0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    19e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19f4 <scaleFinalLowpass+0x14>
    19e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19f8 <scaleFinalLowpass+0x18>
}
    19e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ec:	eeb0 0a67 	vmov.f32	s0, s15
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	428c0000 	.word	0x428c0000
    19f8:	42680000 	.word	0x42680000
    19fc:	f3af 8000 	nop.w

00001a00 <blankFunction>:
}
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleTranspose>:
{
    1a20:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1a24:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1a44 <scaleTranspose+0x24>
    1a28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a2c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    1a2e:	f00a fadb 	bl	bfe8 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1a32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a48 <scaleTranspose+0x28>
    1a36:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a4c <scaleTranspose+0x2c>
}
    1a3a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1a3e:	eeb0 0a67 	vmov.f32	s0, s15
    1a42:	bd08      	pop	{r3, pc}
    1a44:	00000000 	.word	0x00000000
    1a48:	42c00000 	.word	0x42c00000
    1a4c:	c2400000 	.word	0xc2400000
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <scalePitchBend>:
{
    1a60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1a64:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1a7c <scalePitchBend+0x1c>
    1a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    1a6e:	f00a fabb 	bl	bfe8 <__LEAF_clip_veneer>
	return (input * 48.0f);
    1a72:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a80 <scalePitchBend+0x20>
}
    1a76:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a7a:	bd08      	pop	{r3, pc}
    1a7c:	00000000 	.word	0x00000000
    1a80:	42400000 	.word	0x42400000
    1a84:	f3af 8000 	nop.w
    1a88:	f3af 8000 	nop.w
    1a8c:	f3af 8000 	nop.w
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <scaleFilterResonance>:
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	ed2d 8b02 	vpush	{d8}
    1aa6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aaa:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1b18 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1aae:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1b1c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1ab2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1ab6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1aba:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1abe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ac2:	1c63      	adds	r3, r4, #1
    1ac4:	ee00 3a90 	vmov	s1, r3
    1ac8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1acc:	f00a fa8c 	bl	bfe8 <__LEAF_clip_veneer>
    1ad0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ad4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1ad8:	4b11      	ldr	r3, [pc, #68]	; (1b20 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    1ada:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ade:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1b24 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ae2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1aea:	ee38 8a27 	vadd.f32	s16, s16, s15
    1aee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1af2:	edd4 7a00 	vldr	s15, [r4]
    1af6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1afa:	ed93 7a00 	vldr	s14, [r3]
    1afe:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b02:	ee60 0a87 	vmul.f32	s1, s1, s14
    1b06:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    1b0a:	ecbd 8b02 	vpop	{d8}
    1b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b12:	f00a ba69 	b.w	bfe8 <__LEAF_clip_veneer>
    1b16:	bf00      	nop
    1b18:	44ffe000 	.word	0x44ffe000
    1b1c:	00000000 	.word	0x00000000
    1b20:	2001a4e4 	.word	0x2001a4e4
    1b24:	3dcccccd 	.word	0x3dcccccd
    1b28:	f3af 8000 	nop.w
    1b2c:	f3af 8000 	nop.w
    1b30:	f3af 8000 	nop.w
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <scaleEnvTimes>:
{
    1b40:	b510      	push	{r4, lr}
    1b42:	ed2d 8b02 	vpush	{d8}
    1b46:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1b4a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1ba8 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b4e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1bac <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1b52:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1b56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1b5a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b5e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b62:	1c63      	adds	r3, r4, #1
    1b64:	ee00 3a90 	vmov	s1, r3
    1b68:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b6c:	f00a fa3c 	bl	bfe8 <__LEAF_clip_veneer>
    1b70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1b7a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b7e:	ee10 2a10 	vmov	r2, s0
    1b82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b86:	ee38 8a07 	vadd.f32	s16, s16, s14
    1b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b8e:	ed94 7a00 	vldr	s14, [r4]
    1b92:	edd3 6a00 	vldr	s13, [r3]
    1b96:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b9a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1b9e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1ba2:	ecbd 8b02 	vpop	{d8}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	44ffe000 	.word	0x44ffe000
    1bac:	00000000 	.word	0x00000000
    1bb0:	200143b4 	.word	0x200143b4
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <scaleLFORates>:
{
    1bc0:	b510      	push	{r4, lr}
    1bc2:	ed2d 8b02 	vpush	{d8}
    1bc6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1bca:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1c28 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1bce:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1c2c <scaleLFORates+0x6c>
	input *= 2047.0f;
    1bd2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1bd6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1bda:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1bde:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1be2:	1c63      	adds	r3, r4, #1
    1be4:	ee00 3a90 	vmov	s1, r3
    1be8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1bec:	f00a f9fc 	bl	bfe8 <__LEAF_clip_veneer>
    1bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1bfa:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bfe:	ee10 2a10 	vmov	r2, s0
    1c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1c06:	ee38 8a07 	vadd.f32	s16, s16, s14
    1c0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1c0e:	ed94 7a00 	vldr	s14, [r4]
    1c12:	edd3 6a00 	vldr	s13, [r3]
    1c16:	ee38 8a68 	vsub.f32	s16, s16, s17
    1c1a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1c1e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1c22:	ecbd 8b02 	vpop	{d8}
    1c26:	bd10      	pop	{r4, pc}
    1c28:	44ffe000 	.word	0x44ffe000
    1c2c:	00000000 	.word	0x00000000
    1c30:	20016510 	.word	0x20016510
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <randomNumber>:
	return random_values[currentRandom++];
    1c40:	4a04      	ldr	r2, [pc, #16]	; (1c54 <randomNumber+0x14>)
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <randomNumber+0x18>)
    1c44:	7811      	ldrb	r1, [r2, #0]
    1c46:	1c48      	adds	r0, r1, #1
    1c48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1c4c:	7010      	strb	r0, [r2, #0]
}
    1c4e:	ed93 0a00 	vldr	s0, [r3]
    1c52:	4770      	bx	lr
    1c54:	20014320 	.word	0x20014320
    1c58:	2001a0e0 	.word	0x2001a0e0
    1c5c:	f3af 8000 	nop.w

00001c60 <scaleTwo>:
}
    1c60:	ee30 0a00 	vadd.f32	s0, s0, s0
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	f3af 8000 	nop.w
    1c6c:	f3af 8000 	nop.w
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <parsePreset>:
{
    1c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	currentPresetSize = size;
    1c84:	4bf0      	ldr	r3, [pc, #960]	; (2048 <parsePreset+0x3c8>)
{
    1c86:	ed2d 8b02 	vpush	{d8}
    1c8a:	b08d      	sub	sp, #52	; 0x34
	currentPresetSize = size;
    1c8c:	6018      	str	r0, [r3, #0]
{
    1c8e:	e9cd 0101 	strd	r0, r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c92:	b672      	cpsid	i
	 presetReady = 0;
    1c94:	2400      	movs	r4, #0
    1c96:	4bed      	ldr	r3, [pc, #948]	; (204c <parsePreset+0x3cc>)
		 audioOutBuffer[i] = 0;
    1c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c9c:	48ec      	ldr	r0, [pc, #944]	; (2050 <parsePreset+0x3d0>)
    1c9e:	4621      	mov	r1, r4
	 presetReady = 0;
    1ca0:	601c      	str	r4, [r3, #0]
	if (buffer[bufferIndex] == 17)
    1ca2:	f8df 93c8 	ldr.w	r9, [pc, #968]	; 206c <parsePreset+0x3ec>
		 audioOutBuffer[i] = 0;
    1ca6:	f00a f82b 	bl	bd00 <__memset_veneer>
	audioMasterLevel = 0.0f;
    1caa:	2200      	movs	r2, #0
    1cac:	49e9      	ldr	r1, [pc, #932]	; (2054 <parsePreset+0x3d4>)
	chorusAssignment = 255;
    1cae:	23ff      	movs	r3, #255	; 0xff
	if (buffer[bufferIndex] == 17)
    1cb0:	f899 6000 	ldrb.w	r6, [r9]
	audioMasterLevel = 0.0f;
    1cb4:	600a      	str	r2, [r1, #0]
	chorusAssignment = 255;
    1cb6:	4ae8      	ldr	r2, [pc, #928]	; (2058 <parsePreset+0x3d8>)
	if (buffer[bufferIndex] == 17)
    1cb8:	2e11      	cmp	r6, #17
	chorusAssignment = 255;
    1cba:	7013      	strb	r3, [r2, #0]
	delayAssignment = 255;
    1cbc:	4ae7      	ldr	r2, [pc, #924]	; (205c <parsePreset+0x3dc>)
    1cbe:	7013      	strb	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1cc0:	f000 84d1 	beq.w	2666 <parsePreset+0x9e6>
	uint16_t bufferIndex = 0;
    1cc4:	4623      	mov	r3, r4
		if (buffer[bufferIndex + 1] == 18)
    1cc6:	f899 7001 	ldrb.w	r7, [r9, #1]
	uint16_t presetVersionNumber = 0;
    1cca:	46a2      	mov	sl, r4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ccc:	1c9a      	adds	r2, r3, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cce:	9902      	ldr	r1, [sp, #8]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cd0:	f819 2002 	ldrb.w	r2, [r9, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cd4:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cd8:	9203      	str	r2, [sp, #12]
    1cda:	1cda      	adds	r2, r3, #3
    1cdc:	f819 8002 	ldrb.w	r8, [r9, r2]
    1ce0:	1d1a      	adds	r2, r3, #4
    1ce2:	f819 0002 	ldrb.w	r0, [r9, r2]
    1ce6:	1d5a      	adds	r2, r3, #5
    1ce8:	f819 2002 	ldrb.w	r2, [r9, r2]
    1cec:	9004      	str	r0, [sp, #16]
    1cee:	9205      	str	r2, [sp, #20]
    1cf0:	1d9a      	adds	r2, r3, #6
    1cf2:	f819 0002 	ldrb.w	r0, [r9, r2]
    1cf6:	1dda      	adds	r2, r3, #7
    1cf8:	f819 b002 	ldrb.w	fp, [r9, r2]
    1cfc:	f103 0208 	add.w	r2, r3, #8
    1d00:	9006      	str	r0, [sp, #24]
    1d02:	20c8      	movs	r0, #200	; 0xc8
    1d04:	f819 5002 	ldrb.w	r5, [r9, r2]
    1d08:	f103 0209 	add.w	r2, r3, #9
    1d0c:	fb01 f000 	mul.w	r0, r1, r0
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d10:	49d3      	ldr	r1, [pc, #844]	; (2060 <parsePreset+0x3e0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d12:	f819 e002 	ldrb.w	lr, [r9, r2]
    1d16:	f103 020a 	add.w	r2, r3, #10
    1d1a:	9507      	str	r5, [sp, #28]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d1c:	460d      	mov	r5, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d1e:	f819 c002 	ldrb.w	ip, [r9, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d22:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		presetName[i] = buffer[bufferIndex];
    1d26:	4acf      	ldr	r2, [pc, #828]	; (2064 <parsePreset+0x3e4>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d28:	0064      	lsls	r4, r4, #1
		presetName[i] = buffer[bufferIndex];
    1d2a:	7016      	strb	r6, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d2c:	552e      	strb	r6, [r5, r4]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d2e:	f103 060b 	add.w	r6, r3, #11
		presetName[i] = buffer[bufferIndex];
    1d32:	9c03      	ldr	r4, [sp, #12]
    1d34:	7057      	strb	r7, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d36:	704f      	strb	r7, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1d38:	7094      	strb	r4, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d3a:	708c      	strb	r4, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1d3c:	9c04      	ldr	r4, [sp, #16]
    1d3e:	f882 8003 	strb.w	r8, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d42:	f881 8003 	strb.w	r8, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1d46:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d48:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1d4a:	9c05      	ldr	r4, [sp, #20]
    1d4c:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d4e:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1d50:	9c06      	ldr	r4, [sp, #24]
    1d52:	7194      	strb	r4, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d54:	718c      	strb	r4, [r1, #6]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d56:	f819 7006 	ldrb.w	r7, [r9, r6]
    1d5a:	f103 060c 	add.w	r6, r3, #12
		presetName[i] = buffer[bufferIndex];
    1d5e:	9c07      	ldr	r4, [sp, #28]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d60:	f819 6006 	ldrb.w	r6, [r9, r6]
		presetName[i] = buffer[bufferIndex];
    1d64:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d68:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1d6c:	7214      	strb	r4, [r2, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d6e:	720c      	strb	r4, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1d70:	f882 e009 	strb.w	lr, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d74:	f881 e009 	strb.w	lr, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1d78:	f882 c00a 	strb.w	ip, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d7c:	f881 c00a 	strb.w	ip, [r1, #10]
		presetName[i] = buffer[bufferIndex];
    1d80:	72d7      	strb	r7, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d82:	72cf      	strb	r7, [r1, #11]
		presetName[i] = buffer[bufferIndex];
    1d84:	7316      	strb	r6, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d86:	730e      	strb	r6, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d88:	f103 060d 	add.w	r6, r3, #13
    1d8c:	4cb6      	ldr	r4, [pc, #728]	; (2068 <parsePreset+0x3e8>)
    1d8e:	f819 6006 	ldrb.w	r6, [r9, r6]
		presetName[i] = buffer[bufferIndex];
    1d92:	7356      	strb	r6, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d94:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d98:	734e      	strb	r6, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d9a:	f103 010f 	add.w	r1, r3, #15
    1d9e:	f819 2002 	ldrb.w	r2, [r9, r2]
    1da2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1da6:	5422      	strb	r2, [r4, r0]
    1da8:	1822      	adds	r2, r4, r0
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1daa:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1dae:	7051      	strb	r1, [r2, #1]
    1db0:	f103 0110 	add.w	r1, r3, #16
    1db4:	f819 1001 	ldrb.w	r1, [r9, r1]
    1db8:	7091      	strb	r1, [r2, #2]
    1dba:	f103 0111 	add.w	r1, r3, #17
    1dbe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dc2:	70d1      	strb	r1, [r2, #3]
    1dc4:	f103 0112 	add.w	r1, r3, #18
    1dc8:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dcc:	7111      	strb	r1, [r2, #4]
    1dce:	f103 0113 	add.w	r1, r3, #19
    1dd2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dd6:	7151      	strb	r1, [r2, #5]
    1dd8:	f103 0114 	add.w	r1, r3, #20
    1ddc:	f819 1001 	ldrb.w	r1, [r9, r1]
    1de0:	7191      	strb	r1, [r2, #6]
    1de2:	f103 0115 	add.w	r1, r3, #21
    1de6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dea:	71d1      	strb	r1, [r2, #7]
    1dec:	f103 0116 	add.w	r1, r3, #22
    1df0:	f819 1001 	ldrb.w	r1, [r9, r1]
    1df4:	7211      	strb	r1, [r2, #8]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1df6:	f103 0117 	add.w	r1, r3, #23
    1dfa:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1dfe:	7291      	strb	r1, [r2, #10]
    1e00:	f103 0118 	add.w	r1, r3, #24
    1e04:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e08:	72d1      	strb	r1, [r2, #11]
    1e0a:	f103 0119 	add.w	r1, r3, #25
    1e0e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e12:	7311      	strb	r1, [r2, #12]
    1e14:	f103 011a 	add.w	r1, r3, #26
    1e18:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e1c:	7351      	strb	r1, [r2, #13]
    1e1e:	f103 011b 	add.w	r1, r3, #27
    1e22:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e26:	7391      	strb	r1, [r2, #14]
    1e28:	f103 011c 	add.w	r1, r3, #28
    1e2c:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e30:	73d1      	strb	r1, [r2, #15]
    1e32:	f103 011d 	add.w	r1, r3, #29
    1e36:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e3a:	7411      	strb	r1, [r2, #16]
    1e3c:	f103 011e 	add.w	r1, r3, #30
    1e40:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e44:	7451      	strb	r1, [r2, #17]
    1e46:	f103 011f 	add.w	r1, r3, #31
    1e4a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e4e:	7491      	strb	r1, [r2, #18]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1e50:	f103 0120 	add.w	r1, r3, #32
    1e54:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1e58:	7511      	strb	r1, [r2, #20]
    1e5a:	f103 0121 	add.w	r1, r3, #33	; 0x21
    1e5e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e62:	7551      	strb	r1, [r2, #21]
    1e64:	f103 0122 	add.w	r1, r3, #34	; 0x22
    1e68:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e6c:	7591      	strb	r1, [r2, #22]
    1e6e:	f103 0123 	add.w	r1, r3, #35	; 0x23
    1e72:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e76:	75d1      	strb	r1, [r2, #23]
    1e78:	f103 0124 	add.w	r1, r3, #36	; 0x24
    1e7c:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e80:	7611      	strb	r1, [r2, #24]
    1e82:	f103 0125 	add.w	r1, r3, #37	; 0x25
    1e86:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e8a:	7651      	strb	r1, [r2, #25]
    1e8c:	f103 0126 	add.w	r1, r3, #38	; 0x26
    1e90:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e94:	7691      	strb	r1, [r2, #26]
    1e96:	f103 0127 	add.w	r1, r3, #39	; 0x27
    1e9a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e9e:	76d1      	strb	r1, [r2, #27]
    1ea0:	f103 0128 	add.w	r1, r3, #40	; 0x28
    1ea4:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ea8:	7711      	strb	r1, [r2, #28]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1eaa:	f103 0129 	add.w	r1, r3, #41	; 0x29
    1eae:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1eb2:	7791      	strb	r1, [r2, #30]
    1eb4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    1eb8:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ebc:	77d1      	strb	r1, [r2, #31]
    1ebe:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    1ec2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ec6:	f882 1020 	strb.w	r1, [r2, #32]
    1eca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    1ece:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ed2:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    1ed6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    1eda:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ede:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1ee2:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    1ee6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1eea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    1eee:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1ef2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ef6:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    1efa:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1efe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f02:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    1f06:	f103 0131 	add.w	r1, r3, #49	; 0x31
    1f0a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f0e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1f12:	f103 0132 	add.w	r1, r3, #50	; 0x32
    1f16:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1f1a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    1f1e:	f103 0133 	add.w	r1, r3, #51	; 0x33
    1f22:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f26:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    1f2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
    1f2e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f32:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    1f36:	f103 0135 	add.w	r1, r3, #53	; 0x35
    1f3a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f3e:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    1f42:	f103 0136 	add.w	r1, r3, #54	; 0x36
    1f46:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f4a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    1f4e:	f103 0137 	add.w	r1, r3, #55	; 0x37
    1f52:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f56:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    1f5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
    1f5e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f62:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    1f66:	f103 0139 	add.w	r1, r3, #57	; 0x39
    1f6a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f6e:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    1f72:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    1f76:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f7a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1f7e:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    1f82:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1f86:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    1f8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    1f8e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f92:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    1f96:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    1f9a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f9e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    1fa2:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    1fa6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1faa:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    1fae:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    1fb2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fb6:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    1fba:	f103 0140 	add.w	r1, r3, #64	; 0x40
    1fbe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fc2:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    1fc6:	f103 0141 	add.w	r1, r3, #65	; 0x41
    1fca:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fce:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    1fd2:	f103 0142 	add.w	r1, r3, #66	; 0x42
    1fd6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fda:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    1fde:	f103 0143 	add.w	r1, r3, #67	; 0x43
    1fe2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fe6:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1fea:	f103 0144 	add.w	r1, r3, #68	; 0x44
    1fee:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ff2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    1ff6:	f103 0145 	add.w	r1, r3, #69	; 0x45
    1ffa:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ffe:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    2002:	f103 0146 	add.w	r1, r3, #70	; 0x46
    2006:	f819 1001 	ldrb.w	r1, [r9, r1]
    200a:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    200e:	f103 0147 	add.w	r1, r3, #71	; 0x47
    2012:	f819 1001 	ldrb.w	r1, [r9, r1]
    2016:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    201a:	f103 0148 	add.w	r1, r3, #72	; 0x48
    201e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2022:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    2026:	f103 0149 	add.w	r1, r3, #73	; 0x49
    202a:	f819 1001 	ldrb.w	r1, [r9, r1]
    202e:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    2032:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    2036:	f819 1001 	ldrb.w	r1, [r9, r1]
    203a:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    203e:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    2042:	f819 1001 	ldrb.w	r1, [r9, r1]
    2046:	e013      	b.n	2070 <parsePreset+0x3f0>
    2048:	2001431c 	.word	0x2001431c
    204c:	20005358 	.word	0x20005358
    2050:	30000000 	.word	0x30000000
    2054:	200006a8 	.word	0x200006a8
    2058:	200006ac 	.word	0x200006ac
    205c:	200006b4 	.word	0x200006b4
    2060:	30042000 	.word	0x30042000
    2064:	2001a074 	.word	0x2001a074
    2068:	30043380 	.word	0x30043380
    206c:	30042380 	.word	0x30042380
    2070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2074:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    2078:	f819 1001 	ldrb.w	r1, [r9, r1]
    207c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2080:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    2084:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2088:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    208c:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    2090:	f819 1001 	ldrb.w	r1, [r9, r1]
    2094:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    2098:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    209c:	f819 1001 	ldrb.w	r1, [r9, r1]
    20a0:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    20a4:	f103 0150 	add.w	r1, r3, #80	; 0x50
    20a8:	f819 1001 	ldrb.w	r1, [r9, r1]
    20ac:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    20b0:	f103 0151 	add.w	r1, r3, #81	; 0x51
    20b4:	f819 1001 	ldrb.w	r1, [r9, r1]
    20b8:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    20bc:	f103 0152 	add.w	r1, r3, #82	; 0x52
    20c0:	f819 1001 	ldrb.w	r1, [r9, r1]
    20c4:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    20c8:	f103 0153 	add.w	r1, r3, #83	; 0x53
    20cc:	f819 1001 	ldrb.w	r1, [r9, r1]
    20d0:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    20d4:	f103 0154 	add.w	r1, r3, #84	; 0x54
    20d8:	f819 1001 	ldrb.w	r1, [r9, r1]
    20dc:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    20e0:	f103 0155 	add.w	r1, r3, #85	; 0x55
    20e4:	f819 1001 	ldrb.w	r1, [r9, r1]
    20e8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    20ec:	f103 0156 	add.w	r1, r3, #86	; 0x56
    20f0:	f819 1001 	ldrb.w	r1, [r9, r1]
    20f4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    20f8:	f103 0157 	add.w	r1, r3, #87	; 0x57
    20fc:	f819 1001 	ldrb.w	r1, [r9, r1]
    2100:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    2104:	f103 0158 	add.w	r1, r3, #88	; 0x58
    2108:	f819 1001 	ldrb.w	r1, [r9, r1]
    210c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    2110:	f103 0159 	add.w	r1, r3, #89	; 0x59
    2114:	f819 1001 	ldrb.w	r1, [r9, r1]
    2118:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    211c:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    2120:	f819 1001 	ldrb.w	r1, [r9, r1]
    2124:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    2128:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    212c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2130:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    2134:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    2138:	f819 1001 	ldrb.w	r1, [r9, r1]
    213c:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    2140:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    2144:	f819 1001 	ldrb.w	r1, [r9, r1]
    2148:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    214c:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    2150:	f819 1001 	ldrb.w	r1, [r9, r1]
    2154:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    2158:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    215c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2160:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    2164:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2168:	f819 1001 	ldrb.w	r1, [r9, r1]
    216c:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    2170:	f103 0161 	add.w	r1, r3, #97	; 0x61
    2174:	f819 1001 	ldrb.w	r1, [r9, r1]
    2178:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    217c:	f103 0162 	add.w	r1, r3, #98	; 0x62
    2180:	f819 1001 	ldrb.w	r1, [r9, r1]
    2184:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    2188:	f103 0163 	add.w	r1, r3, #99	; 0x63
    218c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2190:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    2194:	f103 0164 	add.w	r1, r3, #100	; 0x64
    2198:	f819 1001 	ldrb.w	r1, [r9, r1]
    219c:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    21a0:	f103 0165 	add.w	r1, r3, #101	; 0x65
    21a4:	f819 1001 	ldrb.w	r1, [r9, r1]
    21a8:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    21ac:	f103 0166 	add.w	r1, r3, #102	; 0x66
    21b0:	f819 1001 	ldrb.w	r1, [r9, r1]
    21b4:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    21b8:	f103 0167 	add.w	r1, r3, #103	; 0x67
    21bc:	f819 1001 	ldrb.w	r1, [r9, r1]
    21c0:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    21c4:	f103 0168 	add.w	r1, r3, #104	; 0x68
    21c8:	f819 1001 	ldrb.w	r1, [r9, r1]
    21cc:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    21d0:	f103 0169 	add.w	r1, r3, #105	; 0x69
    21d4:	f819 1001 	ldrb.w	r1, [r9, r1]
    21d8:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    21dc:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    21e0:	f819 1001 	ldrb.w	r1, [r9, r1]
    21e4:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    21e8:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    21ec:	f819 1001 	ldrb.w	r1, [r9, r1]
    21f0:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    21f4:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    21f8:	f819 1001 	ldrb.w	r1, [r9, r1]
    21fc:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2200:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    2204:	f819 1001 	ldrb.w	r1, [r9, r1]
    2208:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    220c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    2210:	f819 1001 	ldrb.w	r1, [r9, r1]
    2214:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    2218:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    221c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2220:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    2224:	f103 0170 	add.w	r1, r3, #112	; 0x70
    2228:	f819 1001 	ldrb.w	r1, [r9, r1]
    222c:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    2230:	f103 0171 	add.w	r1, r3, #113	; 0x71
    2234:	f819 1001 	ldrb.w	r1, [r9, r1]
    2238:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    223c:	f103 0172 	add.w	r1, r3, #114	; 0x72
    2240:	f819 1001 	ldrb.w	r1, [r9, r1]
    2244:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    2248:	f103 0173 	add.w	r1, r3, #115	; 0x73
    224c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2250:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    2254:	f103 0174 	add.w	r1, r3, #116	; 0x74
    2258:	f819 1001 	ldrb.w	r1, [r9, r1]
    225c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2260:	f103 0175 	add.w	r1, r3, #117	; 0x75
    2264:	f819 1001 	ldrb.w	r1, [r9, r1]
    2268:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    226c:	f103 0176 	add.w	r1, r3, #118	; 0x76
    2270:	f819 1001 	ldrb.w	r1, [r9, r1]
    2274:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    2278:	f103 0177 	add.w	r1, r3, #119	; 0x77
    227c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2280:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    2284:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2288:	f819 1001 	ldrb.w	r1, [r9, r1]
    228c:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    2290:	f103 0179 	add.w	r1, r3, #121	; 0x79
    2294:	f819 1001 	ldrb.w	r1, [r9, r1]
    2298:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    229c:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    22a0:	f819 1001 	ldrb.w	r1, [r9, r1]
    22a4:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    22a8:	f103 017b 	add.w	r1, r3, #123	; 0x7b
    22ac:	f819 1001 	ldrb.w	r1, [r9, r1]
    22b0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
    22b4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
    22b8:	f819 1001 	ldrb.w	r1, [r9, r1]
    22bc:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    22c0:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    22c4:	f819 1001 	ldrb.w	r1, [r9, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    22c8:	f8df 94a8 	ldr.w	r9, [pc, #1192]	; 2774 <parsePreset+0xaf4>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22cc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
			macroNamesArray[presetNumber][j+8][k] = 32;
    22d0:	2120      	movs	r1, #32
    22d2:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    22d6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    22da:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    22de:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    22e2:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    22e6:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    22ea:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    22ee:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    22f2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    22f6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    22fa:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    22fe:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    2302:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    2306:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    230a:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    230e:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    2312:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    2316:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    231a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    231e:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    2322:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2326:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    232a:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    232e:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    2332:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    2336:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    233a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    233e:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2342:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    2346:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    234a:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    234e:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    2352:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    2356:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    235a:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
    235e:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    2362:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
    2366:	f882 1079 	strb.w	r1, [r2, #121]	; 0x79
    236a:	f882 107a 	strb.w	r1, [r2, #122]	; 0x7a
    236e:	f882 107b 	strb.w	r1, [r2, #123]	; 0x7b
    2372:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    2376:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    237a:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
    237e:	f882 107f 	strb.w	r1, [r2, #127]	; 0x7f
    2382:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    2386:	f882 1082 	strb.w	r1, [r2, #130]	; 0x82
    238a:	f882 1083 	strb.w	r1, [r2, #131]	; 0x83
    238e:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
    2392:	f882 1085 	strb.w	r1, [r2, #133]	; 0x85
    2396:	f882 1086 	strb.w	r1, [r2, #134]	; 0x86
    239a:	f882 1087 	strb.w	r1, [r2, #135]	; 0x87
    239e:	f882 1088 	strb.w	r1, [r2, #136]	; 0x88
    23a2:	f882 1089 	strb.w	r1, [r2, #137]	; 0x89
    23a6:	f882 108a 	strb.w	r1, [r2, #138]	; 0x8a
    23aa:	f882 108c 	strb.w	r1, [r2, #140]	; 0x8c
    23ae:	f882 108d 	strb.w	r1, [r2, #141]	; 0x8d
    23b2:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
    23b6:	f882 108f 	strb.w	r1, [r2, #143]	; 0x8f
    23ba:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
    23be:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
    23c2:	f882 1092 	strb.w	r1, [r2, #146]	; 0x92
    23c6:	f882 1093 	strb.w	r1, [r2, #147]	; 0x93
    23ca:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
    23ce:	f882 1096 	strb.w	r1, [r2, #150]	; 0x96
    23d2:	f882 1097 	strb.w	r1, [r2, #151]	; 0x97
    23d6:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    23da:	f882 1099 	strb.w	r1, [r2, #153]	; 0x99
    23de:	f882 109a 	strb.w	r1, [r2, #154]	; 0x9a
    23e2:	f882 109b 	strb.w	r1, [r2, #155]	; 0x9b
    23e6:	f882 109c 	strb.w	r1, [r2, #156]	; 0x9c
    23ea:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    23ee:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    23f2:	eb09 0200 	add.w	r2, r9, r0
    23f6:	f819 1000 	ldrb.w	r1, [r9, r0]
    23fa:	7852      	ldrb	r2, [r2, #1]
    23fc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	if (paramCount > size)
    2400:	9901      	ldr	r1, [sp, #4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2402:	b292      	uxth	r2, r2
	if (paramCount > size)
    2404:	428a      	cmp	r2, r1
    2406:	dc0c      	bgt.n	2422 <parsePreset+0x7a2>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2408:	eb00 0142 	add.w	r1, r0, r2, lsl #1
	if (paramEndCheck != 0xefef)
    240c:	f64e 76ef 	movw	r6, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2410:	0054      	lsls	r4, r2, #1
    2412:	4449      	add	r1, r9
    2414:	788f      	ldrb	r7, [r1, #2]
    2416:	78c8      	ldrb	r0, [r1, #3]
    2418:	eb00 2007 	add.w	r0, r0, r7, lsl #8
	if (paramEndCheck != 0xefef)
    241c:	b280      	uxth	r0, r0
    241e:	42b0      	cmp	r0, r6
    2420:	d00c      	beq.n	243c <parsePreset+0x7bc>
		audioMasterLevel = 1.0f;
    2422:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2426:	4bbb      	ldr	r3, [pc, #748]	; (2714 <parsePreset+0xa94>)
    2428:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    242a:	48bb      	ldr	r0, [pc, #748]	; (2718 <parsePreset+0xa98>)
    242c:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    242e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2430:	b662      	cpsie	i
}
    2432:	b00d      	add	sp, #52	; 0x34
    2434:	ecbd 8b02 	vpop	{d8}
    2438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    243c:	7908      	ldrb	r0, [r1, #4]
    243e:	7949      	ldrb	r1, [r1, #5]
    2440:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    2444:	b288      	uxth	r0, r1
    2446:	9005      	str	r0, [sp, #20]
	if (presetVersionNumber == 0)
    2448:	f1ba 0f00 	cmp.w	sl, #0
    244c:	f000 8118 	beq.w	2680 <parsePreset+0xa00>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    2450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2454:	f103 0184 	add.w	r1, r3, #132	; 0x84
    2458:	4410      	add	r0, r2
    245a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    245e:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    2460:	9801      	ldr	r0, [sp, #4]
    2462:	4281      	cmp	r1, r0
    2464:	dcdd      	bgt.n	2422 <parsePreset+0x7a2>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    2466:	eb09 0501 	add.w	r5, r9, r1
    246a:	f819 0001 	ldrb.w	r0, [r9, r1]
    246e:	7869      	ldrb	r1, [r5, #1]
    2470:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2474:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    2478:	b289      	uxth	r1, r1
    247a:	4281      	cmp	r1, r0
    247c:	d1d1      	bne.n	2422 <parsePreset+0x7a2>
	bufferIndex = bufferIndex + 2;
    247e:	f103 0780 	add.w	r7, r3, #128	; 0x80
    2482:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    2484:	2a00      	cmp	r2, #0
    2486:	f001 82be 	beq.w	3a06 <_Min_Heap_Size+0xa06>
    248a:	4427      	add	r7, r4
    248c:	48a3      	ldr	r0, [pc, #652]	; (271c <parsePreset+0xa9c>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    248e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 2720 <parsePreset+0xaa0>
    2492:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    2494:	4683      	mov	fp, r0
    2496:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2498:	eb09 0105 	add.w	r1, r9, r5
    249c:	f819 6005 	ldrb.w	r6, [r9, r5]
		bufferIndex += 2;
    24a0:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    24a2:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24a4:	7849      	ldrb	r1, [r1, #1]
		bufferIndex += 2;
    24a6:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24a8:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    24ac:	42bd      	cmp	r5, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24ae:	ee07 1a90 	vmov	s15, r1
    24b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    24b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    24ba:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    24be:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    24c2:	d1e9      	bne.n	2498 <parsePreset+0x818>
    24c4:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    24c8:	4994      	ldr	r1, [pc, #592]	; (271c <parsePreset+0xa9c>)
    24ca:	4e96      	ldr	r6, [pc, #600]	; (2724 <parsePreset+0xaa4>)
    24cc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    24d0:	614e      	str	r6, [r1, #20]
	for (int i = 0; i < paramCount; i++)
    24d2:	311c      	adds	r1, #28
    24d4:	42a1      	cmp	r1, r4
    24d6:	d1fb      	bne.n	24d0 <parsePreset+0x850>
    24d8:	4993      	ldr	r1, [pc, #588]	; (2728 <parsePreset+0xaa8>)
		params[i].scaleFunc = &scaleDefault;
    24da:	6101      	str	r1, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    24dc:	301c      	adds	r0, #28
    24de:	42a0      	cmp	r0, r4
    24e0:	d1fb      	bne.n	24da <parsePreset+0x85a>
		bufferIndex += 2;
    24e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    24e6:	3380      	adds	r3, #128	; 0x80
    24e8:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    24ea:	2a9c      	cmp	r2, #156	; 0x9c
    24ec:	f001 8288 	beq.w	3a00 <_Min_Heap_Size+0xa00>
    24f0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    24f4:	4c8d      	ldr	r4, [pc, #564]	; (272c <parsePreset+0xaac>)
    24f6:	4e8b      	ldr	r6, [pc, #556]	; (2724 <parsePreset+0xaa4>)
    24f8:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    24fc:	498a      	ldr	r1, [pc, #552]	; (2728 <parsePreset+0xaa8>)
			params[i].zeroToOneVal[v] = 0.0f;
    24fe:	2200      	movs	r2, #0
    2500:	601a      	str	r2, [r3, #0]
    2502:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
    2504:	e9c3 1604 	strd	r1, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2508:	331c      	adds	r3, #28
    250a:	42a3      	cmp	r3, r4
    250c:	d1f8      	bne.n	2500 <parsePreset+0x880>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    250e:	4a88      	ldr	r2, [pc, #544]	; (2730 <parsePreset+0xab0>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2510:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2514:	4b87      	ldr	r3, [pc, #540]	; (2734 <parsePreset+0xab4>)
	for (int i = 0; i < NUM_EFFECT; i++)
    2516:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2518:	f8cb 22e8 	str.w	r2, [fp, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    251c:	f8cb 2454 	str.w	r2, [fp, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    2520:	f8cb 25c0 	str.w	r2, [fp, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2524:	4a84      	ldr	r2, [pc, #528]	; (2738 <parsePreset+0xab8>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2526:	f8cb 3be0 	str.w	r3, [fp, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    252a:	f8cb 2304 	str.w	r2, [fp, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    252e:	f8cb 2470 	str.w	r2, [fp, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2532:	f8cb 25dc 	str.w	r2, [fp, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2536:	4a81      	ldr	r2, [pc, #516]	; (273c <parsePreset+0xabc>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2538:	f8cb 3bfc 	str.w	r3, [fp, #3068]	; 0xbfc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    253c:	f8cb 2aac 	str.w	r2, [fp, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2540:	f8cb 2b54 	str.w	r2, [fp, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    2544:	4a7e      	ldr	r2, [pc, #504]	; (2740 <parsePreset+0xac0>)
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    2546:	f8cb 3c34 	str.w	r3, [fp, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    254a:	f8cb 3c88 	str.w	r3, [fp, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    254e:	f8cb 3ca4 	str.w	r3, [fp, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2552:	f8cb 3cdc 	str.w	r3, [fp, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    2556:	f8cb 3d30 	str.w	r3, [fp, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    255a:	f8cb 3d4c 	str.w	r3, [fp, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    255e:	f8cb 3d84 	str.w	r3, [fp, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2562:	f8cb 3dd8 	str.w	r3, [fp, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    2566:	f8cb 3df4 	str.w	r3, [fp, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    256a:	f8cb 3e2c 	str.w	r3, [fp, #3628]	; 0xe2c
	params[Transpose].scaleFunc = &scaleTranspose;
    256e:	f8cb 21d0 	str.w	r2, [fp, #464]	; 0x1d0
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2572:	4b74      	ldr	r3, [pc, #464]	; (2744 <parsePreset+0xac4>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2574:	4a74      	ldr	r2, [pc, #464]	; (2748 <parsePreset+0xac8>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2576:	4e75      	ldr	r6, [pc, #468]	; (274c <parsePreset+0xacc>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2578:	f8cb 32cc 	str.w	r3, [fp, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    257c:	f8cb 3358 	str.w	r3, [fp, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2580:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    2584:	f8cb 34c4 	str.w	r3, [fp, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2588:	f8cb 35a4 	str.w	r3, [fp, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    258c:	f8cb 3630 	str.w	r3, [fp, #1584]	; 0x630
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2590:	f8cb 21ec 	str.w	r2, [fp, #492]	; 0x1ec
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2594:	4b6e      	ldr	r3, [pc, #440]	; (2750 <parsePreset+0xad0>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2596:	4a6f      	ldr	r2, [pc, #444]	; (2754 <parsePreset+0xad4>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2598:	f8cb 3e80 	str.w	r3, [fp, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    259c:	f8cb 3f0c 	str.w	r3, [fp, #3852]	; 0xf0c
    25a0:	f6a2 181c 	subw	r8, r2, #2332	; 0x91c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    25a4:	f8cb 6ae4 	str.w	r6, [fp, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    25a8:	f8cb 6b8c 	str.w	r6, [fp, #2956]	; 0xb8c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    25ac:	f8cb 3f98 	str.w	r3, [fp, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    25b0:	6253      	str	r3, [r2, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    25b2:	4b69      	ldr	r3, [pc, #420]	; (2758 <parsePreset+0xad8>)
    25b4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25b8:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    25bc:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25be:	ee67 7a87 	vmul.f32	s15, s15, s14
    25c2:	fef8 7a67 	vrinta.f32	s15, s15
    25c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25ca:	edcd 7a01 	vstr	s15, [sp, #4]
    25ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    25d2:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    25d4:	bf88      	it	hi
    25d6:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    25da:	f009 fbf1 	bl	bdc0 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25de:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    25e2:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    25e8:	fef8 7a67 	vrinta.f32	s15, s15
    25ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25f0:	edcd 7a01 	vstr	s15, [sp, #4]
    25f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    25f8:	280d      	cmp	r0, #13
    25fa:	d949      	bls.n	2690 <parsePreset+0xa10>
	for (int i = 0; i < NUM_EFFECT; i++)
    25fc:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    25fe:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2602:	f009 fbdd 	bl	bdc0 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2606:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    260a:	2f04      	cmp	r7, #4
    260c:	d1d4      	bne.n	25b8 <parsePreset+0x938>
    260e:	4f43      	ldr	r7, [pc, #268]	; (271c <parsePreset+0xa9c>)
    2610:	46bb      	mov	fp, r7
    2612:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2614:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2616:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2618:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    261c:	4798      	blx	r3
    261e:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    2622:	42a6      	cmp	r6, r4
    2624:	d1f6      	bne.n	2614 <parsePreset+0x994>
    2626:	4e3d      	ldr	r6, [pc, #244]	; (271c <parsePreset+0xa9c>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2628:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    262a:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    262c:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    2630:	4798      	blx	r3
    2632:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2636:	42a6      	cmp	r6, r4
    2638:	d1f6      	bne.n	2628 <parsePreset+0x9a8>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    263a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    263e:	eddb 7af7 	vldr	s15, [fp, #988]	; 0x3dc
    2642:	ee67 7a87 	vmul.f32	s15, s15, s14
    2646:	fef8 7a67 	vrinta.f32	s15, s15
    264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    264e:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    2652:	2b05      	cmp	r3, #5
    2654:	d837      	bhi.n	26c6 <parsePreset+0xa46>
    2656:	e8df f013 	tbh	[pc, r3, lsl #1]
    265a:	09a9      	.short	0x09a9
    265c:	09a40033 	.word	0x09a40033
    2660:	099a099f 	.word	0x099a099f
    2664:	0995      	.short	0x0995
		if (buffer[bufferIndex + 1] == 18)
    2666:	f899 7001 	ldrb.w	r7, [r9, #1]
    266a:	2f12      	cmp	r7, #18
    266c:	d019      	beq.n	26a2 <parsePreset+0xa22>
	uint16_t bufferIndex = 0;
    266e:	4623      	mov	r3, r4
	uint16_t presetVersionNumber = 0;
    2670:	46a2      	mov	sl, r4
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    2672:	2f13      	cmp	r7, #19
    2674:	f000 85f8 	beq.w	3268 <_Min_Heap_Size+0x268>
		presetName[i] = buffer[bufferIndex];
    2678:	f819 6004 	ldrb.w	r6, [r9, r4]
    267c:	f7ff bb26 	b.w	1ccc <parsePreset+0x4c>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2680:	f103 0184 	add.w	r1, r3, #132	; 0x84
    2684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2688:	4421      	add	r1, r4
    268a:	4401      	add	r1, r0
    268c:	b289      	uxth	r1, r1
    268e:	e6e7      	b.n	2460 <parsePreset+0x7e0>
			setEffectsFunctions(effectType, i);
    2690:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    2692:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2694:	f009 fb94 	bl	bdc0 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2698:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    269c:	2f04      	cmp	r7, #4
    269e:	d18b      	bne.n	25b8 <parsePreset+0x938>
    26a0:	e7b5      	b.n	260e <parsePreset+0x98e>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    26a2:	f899 2002 	ldrb.w	r2, [r9, #2]
    26a6:	f899 3003 	ldrb.w	r3, [r9, #3]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    26aa:	f899 7005 	ldrb.w	r7, [r9, #5]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    26ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    26b2:	fa1f fa83 	uxth.w	sl, r3
			whichModel = 0; //this is a synth preset
    26b6:	4b29      	ldr	r3, [pc, #164]	; (275c <parsePreset+0xadc>)
    26b8:	701c      	strb	r4, [r3, #0]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    26ba:	2404      	movs	r4, #4
			bufferIndex = 4;
    26bc:	4623      	mov	r3, r4
    26be:	e7d8      	b.n	2672 <parsePreset+0x9f2>
			  shapeTick[i] = &sineTriTick;
    26c0:	4b27      	ldr	r3, [pc, #156]	; (2760 <parsePreset+0xae0>)
    26c2:	4a28      	ldr	r2, [pc, #160]	; (2764 <parsePreset+0xae4>)
    26c4:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    26ca:	ed9b 7aaa 	vldr	s14, [fp, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26ce:	4a26      	ldr	r2, [pc, #152]	; (2768 <parsePreset+0xae8>)
    26d0:	4926      	ldr	r1, [pc, #152]	; (276c <parsePreset+0xaec>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26d6:	edd2 7a00 	vldr	s15, [r2]
    26da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26e2:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    26e6:	bfd4      	ite	le
    26e8:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    26ea:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26ec:	fef8 7a67 	vrinta.f32	s15, s15
    26f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    26f4:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    26f6:	4603      	mov	r3, r0
    26f8:	491d      	ldr	r1, [pc, #116]	; (2770 <parsePreset+0xaf0>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26fa:	ee17 2a90 	vmov	r2, s15
    26fe:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    2700:	2a05      	cmp	r2, #5
    2702:	d83c      	bhi.n	277e <parsePreset+0xafe>
    2704:	e8df f012 	tbh	[pc, r2, lsl #1]
    2708:	00380939 	.word	0x00380939
    270c:	092f0934 	.word	0x092f0934
    2710:	0925092a 	.word	0x0925092a
    2714:	2001a088 	.word	0x2001a088
    2718:	200006a8 	.word	0x200006a8
    271c:	20018f30 	.word	0x20018f30
    2720:	377ffff6 	.word	0x377ffff6
    2724:	00001a01 	.word	0x00001a01
    2728:	00001941 	.word	0x00001941
    272c:	2001a040 	.word	0x2001a040
    2730:	00001981 	.word	0x00001981
    2734:	00001b41 	.word	0x00001b41
    2738:	000019a1 	.word	0x000019a1
    273c:	000019c1 	.word	0x000019c1
    2740:	00001a21 	.word	0x00001a21
    2744:	00001961 	.word	0x00001961
    2748:	00001a61 	.word	0x00001a61
    274c:	00001aa1 	.word	0x00001aa1
    2750:	00001bc1 	.word	0x00001bc1
    2754:	20019f30 	.word	0x20019f30
    2758:	000019e1 	.word	0x000019e1
    275c:	2001c689 	.word	0x2001c689
    2760:	2001d39c 	.word	0x2001d39c
    2764:	00008361 	.word	0x00008361
    2768:	20019478 	.word	0x20019478
    276c:	2001d1f8 	.word	0x2001d1f8
    2770:	20018f24 	.word	0x20018f24
    2774:	30042380 	.word	0x30042380
			  shapeTick[i] = &sineTriTick;
    2778:	4a15      	ldr	r2, [pc, #84]	; (27d0 <parsePreset+0xb50>)
    277a:	4816      	ldr	r0, [pc, #88]	; (27d4 <parsePreset+0xb54>)
    277c:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    277e:	4a16      	ldr	r2, [pc, #88]	; (27d8 <parsePreset+0xb58>)
    2780:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2784:	ed92 7a00 	vldr	s14, [r2]
    2788:	eeb4 7ae7 	vcmpe.f32	s14, s15
    278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2790:	f341 80aa 	ble.w	38e8 <_Min_Heap_Size+0x8e8>
			enabledCount++;
    2794:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2796:	2201      	movs	r2, #1
			enabledCount++;
    2798:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    279a:	4610      	mov	r0, r2
    279c:	4c0f      	ldr	r4, [pc, #60]	; (27dc <parsePreset+0xb5c>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    279e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    27a2:	6048      	str	r0, [r1, #4]
    27a4:	7062      	strb	r2, [r4, #1]
    27a6:	4a0e      	ldr	r2, [pc, #56]	; (27e0 <parsePreset+0xb60>)
    27a8:	edd2 7a00 	vldr	s15, [r2]
    27ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    27b0:	fef8 7a67 	vrinta.f32	s15, s15
    27b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    27b8:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    27bc:	2a05      	cmp	r2, #5
    27be:	d814      	bhi.n	27ea <parsePreset+0xb6a>
    27c0:	e8df f012 	tbh	[pc, r2, lsl #1]
    27c4:	08bd08c2 	.word	0x08bd08c2
    27c8:	08b308b8 	.word	0x08b308b8
    27cc:	08ae0010 	.word	0x08ae0010
    27d0:	2001d39c 	.word	0x2001d39c
    27d4:	00008361 	.word	0x00008361
    27d8:	20019344 	.word	0x20019344
    27dc:	2001d1f8 	.word	0x2001d1f8
    27e0:	200195e4 	.word	0x200195e4
			  shapeTick[i] = &sineTick;
    27e4:	4a99      	ldr	r2, [pc, #612]	; (2a4c <parsePreset+0xdcc>)
    27e6:	489a      	ldr	r0, [pc, #616]	; (2a50 <parsePreset+0xdd0>)
    27e8:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    27ea:	4a9a      	ldr	r2, [pc, #616]	; (2a54 <parsePreset+0xdd4>)
    27ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    27f0:	ed92 7a00 	vldr	s14, [r2]
    27f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    27f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27fc:	f341 807b 	ble.w	38f6 <_Min_Heap_Size+0x8f6>
			enabledCount++;
    2800:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2802:	2201      	movs	r2, #1
			enabledCount++;
    2804:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2806:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    2808:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    280c:	4e92      	ldr	r6, [pc, #584]	; (2a58 <parsePreset+0xdd8>)
	if (params[Noise].realVal[0]  > 0.5f)
    280e:	ed9b 6a80 	vldr	s12, [fp, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2812:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    2816:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2818:	f206 4444 	addw	r4, r6, #1092	; 0x444
    281c:	498f      	ldr	r1, [pc, #572]	; (2a5c <parsePreset+0xddc>)
	if (params[Noise].realVal[0]  > 0.5f)
    281e:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2822:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2826:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    282a:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    282c:	4a8c      	ldr	r2, [pc, #560]	; (2a60 <parsePreset+0xde0>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    282e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    2832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    2836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    283a:	4a8a      	ldr	r2, [pc, #552]	; (2a64 <parsePreset+0xde4>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    283c:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2844:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2846:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    2848:	bfcc      	ite	gt
    284a:	2301      	movgt	r3, #1
    284c:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    284e:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    2850:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    2854:	4a84      	ldr	r2, [pc, #528]	; (2a68 <parsePreset+0xde8>)
		setFilterTypes(filterType, i);
    2856:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    2858:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    285a:	f009 fd05 	bl	c268 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    285e:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    2862:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    2864:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2866:	ee67 7aa6 	vmul.f32	s15, s15, s13
    286a:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    286e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2872:	ee17 0a90 	vmov	r0, s15
    2876:	f009 fcf7 	bl	c268 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    287a:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    287c:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    287e:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2880:	348c      	adds	r4, #140	; 0x8c
    2882:	edd3 7a00 	vldr	s15, [r3]
    2886:	ee67 7a87 	vmul.f32	s15, s15, s14
    288a:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    288e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2892:	ee17 0a90 	vmov	r0, s15
    2896:	f009 fc17 	bl	c0c8 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    289a:	2e04      	cmp	r6, #4
    289c:	d1ed      	bne.n	287a <parsePreset+0xbfa>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    289e:	4873      	ldr	r0, [pc, #460]	; (2a6c <parsePreset+0xdec>)
	for (int i = 0; i < NUM_PARAMS; i++)
    28a0:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28a4:	4b72      	ldr	r3, [pc, #456]	; (2a70 <parsePreset+0xdf0>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    28a6:	f8cb 02d0 	str.w	r0, [fp, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    28aa:	f8cb 043c 	str.w	r0, [fp, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    28ae:	f8cb 05a8 	str.w	r0, [fp, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    28b2:	4870      	ldr	r0, [pc, #448]	; (2a74 <parsePreset+0xdf4>)
	params[OutputTone].setParam = &setFinalLowpass;
    28b4:	4e70      	ldr	r6, [pc, #448]	; (2a78 <parsePreset+0xdf8>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    28b6:	f8cb 035c 	str.w	r0, [fp, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    28ba:	f8cb 04c8 	str.w	r0, [fp, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    28be:	f8cb 0634 	str.w	r0, [fp, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28c2:	6818      	ldr	r0, [r3, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    28c4:	496d      	ldr	r1, [pc, #436]	; (2a7c <parsePreset+0xdfc>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28c6:	f8cb 0714 	str.w	r0, [fp, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    28ca:	6858      	ldr	r0, [r3, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    28cc:	4c6c      	ldr	r4, [pc, #432]	; (2a80 <parsePreset+0xe00>)
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    28ce:	f8cb 0730 	str.w	r0, [fp, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    28d2:	6898      	ldr	r0, [r3, #8]
	params[Effect1Mix].setParam = &fxMixSet;
    28d4:	f8cb 17a0 	str.w	r1, [fp, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    28d8:	f8cb 074c 	str.w	r0, [fp, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    28dc:	68d8      	ldr	r0, [r3, #12]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    28de:	f8cb 47bc 	str.w	r4, [fp, #1980]	; 0x7bc
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    28e2:	f8cb 0768 	str.w	r0, [fp, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    28e6:	6918      	ldr	r0, [r3, #16]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    28e8:	4a66      	ldr	r2, [pc, #408]	; (2a84 <parsePreset+0xe04>)
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    28ea:	f8cb 0784 	str.w	r0, [fp, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    28ee:	6958      	ldr	r0, [r3, #20]
    28f0:	f8cb 07f4 	str.w	r0, [fp, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    28f4:	6998      	ldr	r0, [r3, #24]
    28f6:	f8cb 0810 	str.w	r0, [fp, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    28fa:	69d8      	ldr	r0, [r3, #28]
    28fc:	f8cb 082c 	str.w	r0, [fp, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    2900:	4861      	ldr	r0, [pc, #388]	; (2a88 <parsePreset+0xe08>)
    2902:	f8cb 0228 	str.w	r0, [fp, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2906:	4861      	ldr	r0, [pc, #388]	; (2a8c <parsePreset+0xe0c>)
    2908:	f8cb 0260 	str.w	r0, [fp, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    290c:	4860      	ldr	r0, [pc, #384]	; (2a90 <parsePreset+0xe10>)
    290e:	f8cb 0244 	str.w	r0, [fp, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2912:	4860      	ldr	r0, [pc, #384]	; (2a94 <parsePreset+0xe14>)
    2914:	f8cb 004c 	str.w	r0, [fp, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2918:	485f      	ldr	r0, [pc, #380]	; (2a98 <parsePreset+0xe18>)
    291a:	f8cb 01d4 	str.w	r0, [fp, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    291e:	485f      	ldr	r0, [pc, #380]	; (2a9c <parsePreset+0xe1c>)
    2920:	f8cb 01f0 	str.w	r0, [fp, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2924:	485e      	ldr	r0, [pc, #376]	; (2aa0 <parsePreset+0xe20>)
    2926:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    292a:	6a18      	ldr	r0, [r3, #32]
    292c:	f8cb 0848 	str.w	r0, [fp, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    2930:	f8cb 1880 	str.w	r1, [fp, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    2934:	f8cb 1960 	str.w	r1, [fp, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    2938:	f8cb 1a40 	str.w	r1, [fp, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    293c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    293e:	f8cb 489c 	str.w	r4, [fp, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2942:	f8cb 1864 	str.w	r1, [fp, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2946:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2948:	f8cb 497c 	str.w	r4, [fp, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    294c:	f8cb 18d4 	str.w	r1, [fp, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2952:	f8cb 4a5c 	str.w	r4, [fp, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    2956:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2958:	f8cb 18f0 	str.w	r1, [fp, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    295c:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    295e:	4851      	ldr	r0, [pc, #324]	; (2aa4 <parsePreset+0xe24>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2960:	f8cb 190c 	str.w	r1, [fp, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2964:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2966:	f8cb 1928 	str.w	r1, [fp, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    296a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    296c:	f8cb 1944 	str.w	r1, [fp, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2970:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2972:	f8cb 19b4 	str.w	r1, [fp, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    2976:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2978:	f8cb 19d0 	str.w	r1, [fp, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    297c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    297e:	f8cb 19ec 	str.w	r1, [fp, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2982:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2986:	f8cb 1a08 	str.w	r1, [fp, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    298a:	f8cb 3a24 	str.w	r3, [fp, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    298e:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2990:	4945      	ldr	r1, [pc, #276]	; (2aa8 <parsePreset+0xe28>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2992:	f8cb 3ae8 	str.w	r3, [fp, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2996:	6853      	ldr	r3, [r2, #4]
    2998:	f8cb 3acc 	str.w	r3, [fp, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    299c:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    299e:	f8cb 1be4 	str.w	r1, [fp, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    29a2:	f8cb 3b90 	str.w	r3, [fp, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    29a6:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    29a8:	f8cb 1c8c 	str.w	r1, [fp, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    29ac:	f8cb 3b74 	str.w	r3, [fp, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    29b0:	4b3e      	ldr	r3, [pc, #248]	; (2aac <parsePreset+0xe2c>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    29b2:	f8cb 1d34 	str.w	r1, [fp, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    29b6:	f8cb 3c00 	str.w	r3, [fp, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    29ba:	f8cb 3ca8 	str.w	r3, [fp, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    29be:	f8cb 3d50 	str.w	r3, [fp, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    29c2:	f8cb 3df8 	str.w	r3, [fp, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    29c6:	4b3a      	ldr	r3, [pc, #232]	; (2ab0 <parsePreset+0xe30>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    29c8:	f8cb 1ddc 	str.w	r1, [fp, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    29cc:	f8cb 3c1c 	str.w	r3, [fp, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    29d0:	f8cb 3cc4 	str.w	r3, [fp, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    29d4:	f8cb 3d6c 	str.w	r3, [fp, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    29d8:	f8cb 3e14 	str.w	r3, [fp, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    29dc:	4b35      	ldr	r3, [pc, #212]	; (2ab4 <parsePreset+0xe34>)
    29de:	f8cb 3c38 	str.w	r3, [fp, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    29e2:	f8cb 3ce0 	str.w	r3, [fp, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    29e6:	f8cb 3d88 	str.w	r3, [fp, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    29ea:	f8cb 3e30 	str.w	r3, [fp, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    29ee:	4b32      	ldr	r3, [pc, #200]	; (2ab8 <parsePreset+0xe38>)
    29f0:	f8cb 3c54 	str.w	r3, [fp, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    29f4:	f8cb 3cfc 	str.w	r3, [fp, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    29f8:	f8cb 3da4 	str.w	r3, [fp, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    29fc:	f8cb 3e4c 	str.w	r3, [fp, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2a00:	6803      	ldr	r3, [r0, #0]
    2a02:	f8cb 3e84 	str.w	r3, [fp, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2a06:	68c3      	ldr	r3, [r0, #12]
    2a08:	f8cb 3f10 	str.w	r3, [fp, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2a0c:	6983      	ldr	r3, [r0, #24]
    2a0e:	f8cb 3f9c 	str.w	r3, [fp, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2a12:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2a14:	62b3      	str	r3, [r6, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2a16:	6843      	ldr	r3, [r0, #4]
    2a18:	f8cb 3ea0 	str.w	r3, [fp, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2a1c:	6903      	ldr	r3, [r0, #16]
    2a1e:	f8cb 3f2c 	str.w	r3, [fp, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2a22:	69c3      	ldr	r3, [r0, #28]
    2a24:	f8cb 3fb8 	str.w	r3, [fp, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2a2a:	6473      	str	r3, [r6, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2a2c:	6883      	ldr	r3, [r0, #8]
    2a2e:	f8cb 3ebc 	str.w	r3, [fp, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2a32:	6943      	ldr	r3, [r0, #20]
    2a34:	f8cb 3f48 	str.w	r3, [fp, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2a38:	6a03      	ldr	r3, [r0, #32]
    2a3a:	f8cb 3fd4 	str.w	r3, [fp, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2a3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2a40:	6633      	str	r3, [r6, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    2a42:	4b1e      	ldr	r3, [pc, #120]	; (2abc <parsePreset+0xe3c>)
    2a44:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			params[i].objectNumber = 1;
    2a48:	2601      	movs	r6, #1
    2a4a:	e039      	b.n	2ac0 <parsePreset+0xe40>
    2a4c:	2001d39c 	.word	0x2001d39c
    2a50:	00008461 	.word	0x00008461
    2a54:	200194b0 	.word	0x200194b0
    2a58:	200199b8 	.word	0x200199b8
    2a5c:	2001d1f8 	.word	0x2001d1f8
    2a60:	200008dc 	.word	0x200008dc
    2a64:	200008d8 	.word	0x200008d8
    2a68:	2001d1cc 	.word	0x2001d1cc
    2a6c:	00008981 	.word	0x00008981
    2a70:	20014360 	.word	0x20014360
    2a74:	000089e1 	.word	0x000089e1
    2a78:	20019f30 	.word	0x20019f30
    2a7c:	00009a81 	.word	0x00009a81
    2a80:	00009aa1 	.word	0x00009aa1
    2a84:	200163b4 	.word	0x200163b4
    2a88:	0000a7c1 	.word	0x0000a7c1
    2a8c:	0000a861 	.word	0x0000a861
    2a90:	0000a821 	.word	0x0000a821
    2a94:	00008fa1 	.word	0x00008fa1
    2a98:	00008fc1 	.word	0x00008fc1
    2a9c:	00008fe1 	.word	0x00008fe1
    2aa0:	00009001 	.word	0x00009001
    2aa4:	20018510 	.word	0x20018510
    2aa8:	00008ec1 	.word	0x00008ec1
    2aac:	00008ee1 	.word	0x00008ee1
    2ab0:	00008f01 	.word	0x00008f01
    2ab4:	00008f21 	.word	0x00008f21
    2ab8:	00008f41 	.word	0x00008f41
    2abc:	00008f81 	.word	0x00008f81
		if ((i >= Osc1) && (i < Osc2))
    2ac0:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    2ac4:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    2ac6:	2b0c      	cmp	r3, #12
    2ac8:	f240 829d 	bls.w	3006 <_Min_Heap_Size+0x6>
		else if ((i >= Osc2) && (i < Osc3))
    2acc:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2ad0:	2b72      	cmp	r3, #114	; 0x72
    2ad2:	f200 8298 	bhi.w	3006 <_Min_Heap_Size+0x6>
    2ad6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ada:	0073      	.short	0x0073
    2adc:	00730073 	.word	0x00730073
    2ae0:	00730073 	.word	0x00730073
    2ae4:	00730073 	.word	0x00730073
    2ae8:	00730073 	.word	0x00730073
    2aec:	00730073 	.word	0x00730073
    2af0:	00730073 	.word	0x00730073
    2af4:	02900290 	.word	0x02900290
    2af8:	02900290 	.word	0x02900290
    2afc:	02900290 	.word	0x02900290
    2b00:	02900290 	.word	0x02900290
    2b04:	02900290 	.word	0x02900290
    2b08:	02900290 	.word	0x02900290
    2b0c:	02960290 	.word	0x02960290
    2b10:	02960296 	.word	0x02960296
    2b14:	02960296 	.word	0x02960296
    2b18:	02960296 	.word	0x02960296
    2b1c:	00730296 	.word	0x00730296
    2b20:	00730073 	.word	0x00730073
    2b24:	00730073 	.word	0x00730073
    2b28:	00730073 	.word	0x00730073
    2b2c:	02900073 	.word	0x02900073
    2b30:	02900290 	.word	0x02900290
    2b34:	02900290 	.word	0x02900290
    2b38:	02900290 	.word	0x02900290
    2b3c:	02930290 	.word	0x02930290
    2b40:	02930293 	.word	0x02930293
    2b44:	02930293 	.word	0x02930293
    2b48:	02930293 	.word	0x02930293
    2b4c:	02960293 	.word	0x02960293
    2b50:	02960296 	.word	0x02960296
    2b54:	02960296 	.word	0x02960296
    2b58:	00730296 	.word	0x00730296
    2b5c:	00730073 	.word	0x00730073
    2b60:	00730073 	.word	0x00730073
    2b64:	00730073 	.word	0x00730073
    2b68:	02960296 	.word	0x02960296
    2b6c:	02960296 	.word	0x02960296
    2b70:	02960296 	.word	0x02960296
    2b74:	00730073 	.word	0x00730073
    2b78:	00730073 	.word	0x00730073
    2b7c:	00730073 	.word	0x00730073
    2b80:	02900290 	.word	0x02900290
    2b84:	02900290 	.word	0x02900290
    2b88:	02900290 	.word	0x02900290
    2b8c:	02930293 	.word	0x02930293
    2b90:	02930293 	.word	0x02930293
    2b94:	02930293 	.word	0x02930293
    2b98:	02960296 	.word	0x02960296
    2b9c:	02960296 	.word	0x02960296
    2ba0:	00730296 	.word	0x00730296
    2ba4:	00730073 	.word	0x00730073
    2ba8:	00730073 	.word	0x00730073
    2bac:	02900290 	.word	0x02900290
    2bb0:	02900290 	.word	0x02900290
    2bb4:	02930290 	.word	0x02930290
    2bb8:	02930293 	.word	0x02930293
    2bbc:	02930293 	.word	0x02930293
			params[i].objectNumber = 1;
    2bc0:	2001      	movs	r0, #1
    2bc2:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bc4:	ed97 0a02 	vldr	s0, [r7, #8]
    2bc8:	2100      	movs	r1, #0
    2bca:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2bcc:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bd0:	4798      	blx	r3
    2bd2:	ed97 0a03 	vldr	s0, [r7, #12]
    2bd6:	697b      	ldr	r3, [r7, #20]
    2bd8:	2101      	movs	r1, #1
    2bda:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2bdc:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bde:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2be0:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    2be4:	f47f af6c 	bne.w	2ac0 <parsePreset+0xe40>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2be8:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2bf0:	ed9b 7a02 	vldr	s14, [fp, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bf4:	493a      	ldr	r1, [pc, #232]	; (2ce0 <parsePreset+0x1060>)
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
    2bfa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2ce4 <parsePreset+0x1064>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bfe:	ed91 6a38 	vldr	s12, [r1, #224]	; 0xe0
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c02:	eddf 5a39 	vldr	s11, [pc, #228]	; 2ce8 <parsePreset+0x1068>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c06:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2c0a:	4b38      	ldr	r3, [pc, #224]	; (2cec <parsePreset+0x106c>)
    2c0c:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c14:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c18:	bfcc      	ite	gt
    2c1a:	2201      	movgt	r2, #1
    2c1c:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2c1e:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c22:	4b33      	ldr	r3, [pc, #204]	; (2cf0 <parsePreset+0x1070>)
    2c24:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c28:	4b32      	ldr	r3, [pc, #200]	; (2cf4 <parsePreset+0x1074>)
    2c2a:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2c2c:	f1ba 0f00 	cmp.w	sl, #0
    2c30:	f000 865e 	beq.w	38f0 <_Min_Heap_Size+0x8f0>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2c34:	edd1 7a3f 	vldr	s15, [r1, #252]	; 0xfc
    2c38:	eef4 7ae6 	vcmpe.f32	s15, s13
    2c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c40:	bfcc      	ite	gt
    2c42:	2301      	movgt	r3, #1
    2c44:	2300      	movle	r3, #0
	numMappings = 0;
    2c46:	2400      	movs	r4, #0
		knobFrozen[i] = 0;
    2c48:	4a2b      	ldr	r2, [pc, #172]	; (2cf8 <parsePreset+0x1078>)
		pedalTicked[i] = 0;
    2c4a:	482c      	ldr	r0, [pc, #176]	; (2cfc <parsePreset+0x107c>)
	bufferIndex += 2;
    2c4c:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2c4e:	7014      	strb	r4, [r2, #0]
		pedalTicked[i] = 0;
    2c50:	4621      	mov	r1, r4
		knobFrozen[i] = 0;
    2c52:	7054      	strb	r4, [r2, #1]
	bufferIndex += 2;
    2c54:	fa1f f885 	uxth.w	r8, r5
		knobFrozen[i] = 0;
    2c58:	7094      	strb	r4, [r2, #2]
    2c5a:	70d4      	strb	r4, [r2, #3]
    2c5c:	7114      	strb	r4, [r2, #4]
    2c5e:	7154      	strb	r4, [r2, #5]
    2c60:	7194      	strb	r4, [r2, #6]
    2c62:	71d4      	strb	r4, [r2, #7]
    2c64:	7214      	strb	r4, [r2, #8]
    2c66:	7254      	strb	r4, [r2, #9]
    2c68:	7294      	strb	r4, [r2, #10]
    2c6a:	72d4      	strb	r4, [r2, #11]
		knobTicked[i] = 0;
    2c6c:	4a24      	ldr	r2, [pc, #144]	; (2d00 <parsePreset+0x1080>)
    2c6e:	e9c2 4400 	strd	r4, r4, [r2]
    2c72:	e9c2 4402 	strd	r4, r4, [r2, #8]
    2c76:	e9c2 4404 	strd	r4, r4, [r2, #16]
    2c7a:	e9c2 4406 	strd	r4, r4, [r2, #24]
    2c7e:	e9c2 4408 	strd	r4, r4, [r2, #32]
    2c82:	e9c2 440a 	strd	r4, r4, [r2, #40]	; 0x28
    2c86:	4a1f      	ldr	r2, [pc, #124]	; (2d04 <parsePreset+0x1084>)
    2c88:	7013      	strb	r3, [r2, #0]
		pedalTicked[i] = 0;
    2c8a:	2228      	movs	r2, #40	; 0x28
	numMappings = 0;
    2c8c:	4b1e      	ldr	r3, [pc, #120]	; (2d08 <parsePreset+0x1088>)
    2c8e:	701c      	strb	r4, [r3, #0]
		lfoOn[i] = 0;
    2c90:	4b1e      	ldr	r3, [pc, #120]	; (2d0c <parsePreset+0x108c>)
    2c92:	601c      	str	r4, [r3, #0]
		envOn[i] = 0;
    2c94:	4b1e      	ldr	r3, [pc, #120]	; (2d10 <parsePreset+0x1090>)
    2c96:	601c      	str	r4, [r3, #0]
		pedalTicked[i] = 0;
    2c98:	f009 f832 	bl	bd00 <__memset_veneer>
    2c9c:	4b1d      	ldr	r3, [pc, #116]	; (2d14 <parsePreset+0x1094>)
		mappings[i].destNumber = 255;
    2c9e:	22ff      	movs	r2, #255	; 0xff
    2ca0:	f503 6118 	add.w	r1, r3, #2432	; 0x980
    2ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2ca6:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2ca8:	f843 4c04 	str.w	r4, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2cac:	428b      	cmp	r3, r1
    2cae:	d1f9      	bne.n	2ca4 <parsePreset+0x1024>
	for (int i = 0; i < mappingCount; i++)
    2cb0:	9b05      	ldr	r3, [sp, #20]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	f000 828f 	beq.w	31d6 <_Min_Heap_Size+0x1d6>
    2cb8:	2300      	movs	r3, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2cba:	f8cd b01c 	str.w	fp, [sp, #28]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2cbe:	ed9f 8a16 	vldr	s16, [pc, #88]	; 2d18 <parsePreset+0x1098>
			for (int v = 0; v < numStringsThisBoard; v++)
    2cc2:	4656      	mov	r6, sl
    2cc4:	46cb      	mov	fp, r9
	for (int i = 0; i < mappingCount; i++)
    2cc6:	9301      	str	r3, [sp, #4]
		uint8_t destNumber = buffer[bufferIndex+1];
    2cc8:	eb0b 0308 	add.w	r3, fp, r8
    2ccc:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2cce:	2e00      	cmp	r6, #0
    2cd0:	f000 81ac 	beq.w	302c <_Min_Heap_Size+0x2c>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2cd4:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2cd6:	2300      	movs	r3, #0
    2cd8:	4a0e      	ldr	r2, [pc, #56]	; (2d14 <parsePreset+0x1094>)
    2cda:	461f      	mov	r7, r3
    2cdc:	461c      	mov	r4, r3
    2cde:	e021      	b.n	2d24 <parsePreset+0x10a4>
    2ce0:	20019f30 	.word	0x20019f30
    2ce4:	3c010204 	.word	0x3c010204
    2ce8:	42fe0000 	.word	0x42fe0000
    2cec:	20018f14 	.word	0x20018f14
    2cf0:	20018f18 	.word	0x20018f18
    2cf4:	200164dd 	.word	0x200164dd
    2cf8:	200051e0 	.word	0x200051e0
    2cfc:	2001a044 	.word	0x2001a044
    2d00:	200164e0 	.word	0x200164e0
    2d04:	2001a040 	.word	0x2001a040
    2d08:	20018f20 	.word	0x20018f20
    2d0c:	2001cf88 	.word	0x2001cf88
    2d10:	2001ce84 	.word	0x2001ce84
    2d14:	20018594 	.word	0x20018594
    2d18:	37fffffc 	.word	0x37fffffc
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d1c:	3301      	adds	r3, #1
    2d1e:	324c      	adds	r2, #76	; 0x4c
    2d20:	2b20      	cmp	r3, #32
    2d22:	d00c      	beq.n	2d3e <parsePreset+0x10be>
			if (mappings[j].destNumber == destNumber)
    2d24:	7811      	ldrb	r1, [r2, #0]
    2d26:	4281      	cmp	r1, r0
    2d28:	d1f8      	bne.n	2d1c <parsePreset+0x109c>
				foundOne = 1;
    2d2a:	2701      	movs	r7, #1
    2d2c:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2d2e:	2e00      	cmp	r6, #0
    2d30:	d1f4      	bne.n	2d1c <parsePreset+0x109c>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d32:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2d34:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d38:	324c      	adds	r2, #76	; 0x4c
    2d3a:	2b20      	cmp	r3, #32
    2d3c:	d1f2      	bne.n	2d24 <parsePreset+0x10a4>
		if (foundOne == 0)
    2d3e:	b99f      	cbnz	r7, 2d68 <parsePreset+0x10e8>
			whichMapping = numMappings;
    2d40:	49be      	ldr	r1, [pc, #760]	; (303c <_Min_Heap_Size+0x3c>)
			mappings[whichMapping].dest = &params[destNumber];
    2d42:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2d46:	9c07      	ldr	r4, [sp, #28]
			if (presetVersionNumber == 0)
    2d48:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2d4a:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2d4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2d50:	bf08      	it	eq
    2d52:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2d54:	461c      	mov	r4, r3
			numMappings++;
    2d56:	3301      	adds	r3, #1
    2d58:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2d5a:	234c      	movs	r3, #76	; 0x4c
    2d5c:	49b8      	ldr	r1, [pc, #736]	; (3040 <_Min_Heap_Size+0x40>)
    2d5e:	fb03 f304 	mul.w	r3, r3, r4
    2d62:	54c8      	strb	r0, [r1, r3]
    2d64:	440b      	add	r3, r1
			mappings[whichMapping].dest = &params[destNumber];
    2d66:	605a      	str	r2, [r3, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d68:	224c      	movs	r2, #76	; 0x4c
    2d6a:	4fb5      	ldr	r7, [pc, #724]	; (3040 <_Min_Heap_Size+0x40>)
    2d6c:	1c69      	adds	r1, r5, #1
		int source = buffer[bufferIndex];
    2d6e:	f81b 3008 	ldrb.w	r3, [fp, r8]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d72:	fb02 f204 	mul.w	r2, r2, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2d76:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d78:	eb02 00c5 	add.w	r0, r2, r5, lsl #3
    2d7c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    2d80:	443a      	add	r2, r7
    2d82:	4438      	add	r0, r7
    2d84:	4faf      	ldr	r7, [pc, #700]	; (3044 <_Min_Heap_Size+0x44>)
    2d86:	442a      	add	r2, r5
    2d88:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    2d8c:	f107 0704 	add.w	r7, r7, #4
    2d90:	60c7      	str	r7, [r0, #12]
    2d92:	48ac      	ldr	r0, [pc, #688]	; (3044 <_Min_Heap_Size+0x44>)
    2d94:	4faa      	ldr	r7, [pc, #680]	; (3040 <_Min_Heap_Size+0x40>)
    2d96:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    2d9a:	5078      	str	r0, [r7, r1]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2d9c:	bfd4      	ite	le
    2d9e:	2100      	movle	r1, #0
    2da0:	2101      	movgt	r1, #1
    2da2:	b218      	sxth	r0, r3
    2da4:	f882 1020 	strb.w	r1, [r2, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2da8:	f1a3 0218 	sub.w	r2, r3, #24
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2dac:	00e9      	lsls	r1, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2dae:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2db0:	9103      	str	r1, [sp, #12]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2db2:	f200 812f 	bhi.w	3014 <_Min_Heap_Size+0x14>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2db6:	4aa4      	ldr	r2, [pc, #656]	; (3048 <_Min_Heap_Size+0x48>)
    2db8:	f04f 0101 	mov.w	r1, #1
    2dbc:	441a      	add	r2, r3
    2dbe:	f802 1c18 	strb.w	r1, [r2, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2dc2:	2b02      	cmp	r3, #2
    2dc4:	d803      	bhi.n	2dce <parsePreset+0x114e>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2dc6:	4aa1      	ldr	r2, [pc, #644]	; (304c <_Min_Heap_Size+0x4c>)
    2dc8:	f04f 0101 	mov.w	r1, #1
    2dcc:	54d1      	strb	r1, [r2, r3]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2dce:	2b03      	cmp	r3, #3
    2dd0:	f000 812e 	beq.w	3030 <_Min_Heap_Size+0x30>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2dd4:	1f1f      	subs	r7, r3, #4
    2dd6:	2f0b      	cmp	r7, #11
    2dd8:	f240 816d 	bls.w	30b6 <_Min_Heap_Size+0xb6>
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    2ddc:	3b1c      	subs	r3, #28
    2dde:	2b09      	cmp	r3, #9
    2de0:	d803      	bhi.n	2dea <parsePreset+0x116a>
			pedalTicked[source - PEDAL_SOURCE_OFFSET] = 1;
    2de2:	4a9b      	ldr	r2, [pc, #620]	; (3050 <_Min_Heap_Size+0x50>)
    2de4:	2101      	movs	r1, #1
    2de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		int scalar = buffer[bufferIndex+2];
    2dea:	eb0b 0308 	add.w	r3, fp, r8
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2dee:	4a99      	ldr	r2, [pc, #612]	; (3054 <_Min_Heap_Size+0x54>)
		int scalar = buffer[bufferIndex+2];
    2df0:	789f      	ldrb	r7, [r3, #2]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2df2:	f1a7 0904 	sub.w	r9, r7, #4
    2df6:	b239      	sxth	r1, r7
			if (scalar == 0xff)
    2df8:	2fff      	cmp	r7, #255	; 0xff
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2dfa:	f1a7 0a18 	sub.w	sl, r7, #24
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2dfe:	fa5f f389 	uxtb.w	r3, r9
    2e02:	9109      	str	r1, [sp, #36]	; 0x24
    2e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e08:	9308      	str	r3, [sp, #32]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2e0a:	f1a7 0314 	sub.w	r3, r7, #20
    2e0e:	9306      	str	r3, [sp, #24]
					uint8_t whichMacro = scalar - MACRO_SOURCE_OFFSET;
    2e10:	fa5f f389 	uxtb.w	r3, r9
    2e14:	9303      	str	r3, [sp, #12]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2e16:	f1a7 031c 	sub.w	r3, r7, #28
    2e1a:	9304      	str	r3, [sp, #16]
			if (scalar == 0xff)
    2e1c:	f000 8126 	beq.w	306c <_Min_Heap_Size+0x6c>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e20:	234c      	movs	r3, #76	; 0x4c
    2e22:	1d2a      	adds	r2, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e24:	f1ba 0f03 	cmp.w	sl, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e28:	fb03 f304 	mul.w	r3, r3, r4
    2e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e30:	4a83      	ldr	r2, [pc, #524]	; (3040 <_Min_Heap_Size+0x40>)
    2e32:	4413      	add	r3, r2
    2e34:	4a83      	ldr	r2, [pc, #524]	; (3044 <_Min_Heap_Size+0x44>)
    2e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    2e3a:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e3c:	f200 8125 	bhi.w	308a <_Min_Heap_Size+0x8a>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2e40:	4b81      	ldr	r3, [pc, #516]	; (3048 <_Min_Heap_Size+0x48>)
    2e42:	f04f 0201 	mov.w	r2, #1
    2e46:	443b      	add	r3, r7
    2e48:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2e4c:	2f02      	cmp	r7, #2
    2e4e:	d803      	bhi.n	2e58 <parsePreset+0x11d8>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2e50:	4b7e      	ldr	r3, [pc, #504]	; (304c <_Min_Heap_Size+0x4c>)
    2e52:	f04f 0201 	mov.w	r2, #1
    2e56:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2e58:	2f03      	cmp	r7, #3
    2e5a:	f000 8157 	beq.w	310c <_Min_Heap_Size+0x10c>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2e5e:	f1b9 0f0b 	cmp.w	r9, #11
    2e62:	f240 8188 	bls.w	3176 <_Min_Heap_Size+0x176>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2e66:	9b04      	ldr	r3, [sp, #16]
    2e68:	2b09      	cmp	r3, #9
    2e6a:	d803      	bhi.n	2e74 <parsePreset+0x11f4>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    2e6c:	4a78      	ldr	r2, [pc, #480]	; (3050 <_Min_Heap_Size+0x50>)
    2e6e:	2101      	movs	r1, #1
    2e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e74:	224c      	movs	r2, #76	; 0x4c
    2e76:	00eb      	lsls	r3, r5, #3
    2e78:	4971      	ldr	r1, [pc, #452]	; (3040 <_Min_Heap_Size+0x40>)
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e7a:	f1ba 0f03 	cmp.w	sl, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e7e:	fb02 3304 	mla	r3, r2, r4, r3
    2e82:	ea4f 0247 	mov.w	r2, r7, lsl #1
    2e86:	440b      	add	r3, r1
    2e88:	f102 0201 	add.w	r2, r2, #1
    2e8c:	496d      	ldr	r1, [pc, #436]	; (3044 <_Min_Heap_Size+0x44>)
    2e8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2e92:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e94:	f200 8104 	bhi.w	30a0 <_Min_Heap_Size+0xa0>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2e98:	4b6b      	ldr	r3, [pc, #428]	; (3048 <_Min_Heap_Size+0x48>)
    2e9a:	f04f 0201 	mov.w	r2, #1
    2e9e:	443b      	add	r3, r7
    2ea0:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2ea4:	2f02      	cmp	r7, #2
    2ea6:	d803      	bhi.n	2eb0 <parsePreset+0x1230>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2ea8:	4b68      	ldr	r3, [pc, #416]	; (304c <_Min_Heap_Size+0x4c>)
    2eaa:	f04f 0201 	mov.w	r2, #1
    2eae:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2eb0:	2f03      	cmp	r7, #3
    2eb2:	f000 8130 	beq.w	3116 <_Min_Heap_Size+0x116>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2eb6:	f1b9 0f0b 	cmp.w	r9, #11
    2eba:	f240 8131 	bls.w	3120 <_Min_Heap_Size+0x120>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2ebe:	9b04      	ldr	r3, [sp, #16]
    2ec0:	2b09      	cmp	r3, #9
    2ec2:	d803      	bhi.n	2ecc <parsePreset+0x124c>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    2ec4:	4a62      	ldr	r2, [pc, #392]	; (3050 <_Min_Heap_Size+0x50>)
    2ec6:	2101      	movs	r1, #1
    2ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ecc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ed0:	495b      	ldr	r1, [pc, #364]	; (3040 <_Min_Heap_Size+0x40>)
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2ed2:	eb0b 0208 	add.w	r2, fp, r8
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ed6:	204c      	movs	r0, #76	; 0x4c
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ed8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2edc:	fb00 1404 	mla	r4, r0, r4, r1
    2ee0:	f04f 0001 	mov.w	r0, #1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ee4:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ee6:	4425      	add	r5, r4
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ee8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2eec:	78d1      	ldrb	r1, [r2, #3]
    2eee:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ef0:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2ef4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2ef8:	b212      	sxth	r2, r2
    2efa:	ee07 2a90 	vmov	s15, r2
    2efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2f02:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2f06:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2f0a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2f0e:	3301      	adds	r3, #1
    2f10:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2f14:	2e00      	cmp	r6, #0
    2f16:	d078      	beq.n	300a <_Min_Heap_Size+0xa>
			bufferIndex += 6;
    2f18:	f108 0806 	add.w	r8, r8, #6
    2f1c:	fa1f f888 	uxth.w	r8, r8
	for (int i = 0; i < mappingCount; i++)
    2f20:	9b01      	ldr	r3, [sp, #4]
    2f22:	9a05      	ldr	r2, [sp, #20]
    2f24:	3301      	adds	r3, #1
    2f26:	4293      	cmp	r3, r2
    2f28:	9301      	str	r3, [sp, #4]
    2f2a:	f47f aecd 	bne.w	2cc8 <parsePreset+0x1048>
	for (int i = 0; i < numMappings; i++)
    2f2e:	4b43      	ldr	r3, [pc, #268]	; (303c <_Min_Heap_Size+0x3c>)
    2f30:	781a      	ldrb	r2, [r3, #0]
    2f32:	2a00      	cmp	r2, #0
    2f34:	f000 814f 	beq.w	31d6 <_Min_Heap_Size+0x1d6>
    2f38:	4c47      	ldr	r4, [pc, #284]	; (3058 <_Min_Heap_Size+0x58>)
    2f3a:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2f3e:	4f47      	ldr	r7, [pc, #284]	; (305c <_Min_Heap_Size+0x5c>)
    2f40:	e005      	b.n	2f4e <parsePreset+0x12ce>
	for (int i = 0; i < numMappings; i++)
    2f42:	f108 0801 	add.w	r8, r8, #1
    2f46:	344c      	adds	r4, #76	; 0x4c
    2f48:	4542      	cmp	r2, r8
    2f4a:	f340 8144 	ble.w	31d6 <_Min_Heap_Size+0x1d6>
		if (mappings[i].destNumber != 255)
    2f4e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2f52:	2bff      	cmp	r3, #255	; 0xff
    2f54:	d0f5      	beq.n	2f42 <parsePreset+0x12c2>
			for (int v = 0; v < numStringsThisBoard; v++)
    2f56:	783b      	ldrb	r3, [r7, #0]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d0f2      	beq.n	2f42 <parsePreset+0x12c2>
    2f5c:	4626      	mov	r6, r4
    2f5e:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2f60:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2f64:	eddf 7a3e 	vldr	s15, [pc, #248]	; 3060 <_Min_Heap_Size+0x60>
					if (mappings[i].hookActive[j])
    2f68:	b15b      	cbz	r3, 2f82 <parsePreset+0x1302>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2f6a:	6832      	ldr	r2, [r6, #0]
    2f6c:	69f3      	ldr	r3, [r6, #28]
    2f6e:	edd2 7a00 	vldr	s15, [r2]
    2f72:	edd3 6a00 	vldr	s13, [r3]
    2f76:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2f82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2f86:	b15b      	cbz	r3, 2fa0 <parsePreset+0x1320>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2f88:	68b2      	ldr	r2, [r6, #8]
    2f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2f8c:	ed92 7a00 	vldr	s14, [r2]
    2f90:	ed93 6a00 	vldr	s12, [r3]
    2f94:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2f98:	ee27 7a06 	vmul.f32	s14, s14, s12
    2f9c:	eee7 7a26 	vfma.f32	s15, s14, s13
					if (mappings[i].hookActive[j])
    2fa0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2fa4:	b15b      	cbz	r3, 2fbe <parsePreset+0x133e>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2fa6:	6932      	ldr	r2, [r6, #16]
    2fa8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2faa:	ed92 7a00 	vldr	s14, [r2]
    2fae:	ed93 6a00 	vldr	s12, [r3]
    2fb2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2fb6:	ee27 7a06 	vmul.f32	s14, s14, s12
    2fba:	eee7 7a26 	vfma.f32	s15, s14, s13
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2fbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2fc2:	3604      	adds	r6, #4
    2fc4:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2fc8:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2fca:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2fce:	ee37 0a80 	vadd.f32	s0, s15, s0
    2fd2:	4798      	blx	r3
    2fd4:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2fd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2fdc:	4629      	mov	r1, r5
    2fde:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2fe2:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2fe4:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2fe6:	ed92 0a02 	vldr	s0, [r2, #8]
    2fea:	695a      	ldr	r2, [r3, #20]
    2fec:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2fee:	783b      	ldrb	r3, [r7, #0]
    2ff0:	42ab      	cmp	r3, r5
    2ff2:	dcb5      	bgt.n	2f60 <parsePreset+0x12e0>
	for (int i = 0; i < numMappings; i++)
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <_Min_Heap_Size+0x3c>)
    2ff6:	781a      	ldrb	r2, [r3, #0]
    2ff8:	e7a3      	b.n	2f42 <parsePreset+0x12c2>
			params[i].objectNumber = 2;
    2ffa:	2002      	movs	r0, #2
    2ffc:	7638      	strb	r0, [r7, #24]
    2ffe:	e5e1      	b.n	2bc4 <parsePreset+0xf44>
			params[i].objectNumber = 3;
    3000:	2003      	movs	r0, #3
    3002:	7638      	strb	r0, [r7, #24]
    3004:	e5de      	b.n	2bc4 <parsePreset+0xf44>
		if ((i >= Osc1) && (i < Osc2))
    3006:	2000      	movs	r0, #0
    3008:	e5dc      	b.n	2bc4 <parsePreset+0xf44>
			bufferIndex += 5;
    300a:	f108 0805 	add.w	r8, r8, #5
    300e:	fa1f f888 	uxth.w	r8, r8
    3012:	e785      	b.n	2f20 <parsePreset+0x12a0>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3014:	f1a3 0214 	sub.w	r2, r3, #20
    3018:	2a03      	cmp	r2, #3
    301a:	f63f aed2 	bhi.w	2dc2 <parsePreset+0x1142>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    301e:	4a11      	ldr	r2, [pc, #68]	; (3064 <_Min_Heap_Size+0x64>)
    3020:	f04f 0101 	mov.w	r1, #1
    3024:	441a      	add	r2, r3
    3026:	f802 1c14 	strb.w	r1, [r2, #-20]
    302a:	e6ca      	b.n	2dc2 <parsePreset+0x1142>
		uint8_t whichHook = 0;
    302c:	4635      	mov	r5, r6
    302e:	e652      	b.n	2cd6 <parsePreset+0x1056>
			noiseOn = 1;
    3030:	4b0d      	ldr	r3, [pc, #52]	; (3068 <_Min_Heap_Size+0x68>)
    3032:	f04f 0201 	mov.w	r2, #1
    3036:	701a      	strb	r2, [r3, #0]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    3038:	e6d7      	b.n	2dea <parsePreset+0x116a>
    303a:	bf00      	nop
    303c:	20018f20 	.word	0x20018f20
    3040:	20018594 	.word	0x20018594
    3044:	2001d418 	.word	0x2001d418
    3048:	2001cf88 	.word	0x2001cf88
    304c:	2001d1f8 	.word	0x2001d1f8
    3050:	2001a044 	.word	0x2001a044
    3054:	20005244 	.word	0x20005244
    3058:	2001859c 	.word	0x2001859c
    305c:	20000694 	.word	0x20000694
    3060:	00000000 	.word	0x00000000
    3064:	2001ce84 	.word	0x2001ce84
    3068:	2001d1cc 	.word	0x2001d1cc
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    306c:	234c      	movs	r3, #76	; 0x4c
    306e:	1d29      	adds	r1, r5, #4
    3070:	00ea      	lsls	r2, r5, #3
    3072:	486c      	ldr	r0, [pc, #432]	; (3224 <_Min_Heap_Size+0x224>)
    3074:	fb03 f304 	mul.w	r3, r3, r4
    3078:	441a      	add	r2, r3
    307a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    307e:	496a      	ldr	r1, [pc, #424]	; (3228 <_Min_Heap_Size+0x228>)
    3080:	4402      	add	r2, r0
    3082:	4403      	add	r3, r0
    3084:	6291      	str	r1, [r2, #40]	; 0x28
    3086:	6059      	str	r1, [r3, #4]
    3088:	e720      	b.n	2ecc <parsePreset+0x124c>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    308a:	9b06      	ldr	r3, [sp, #24]
    308c:	2b03      	cmp	r3, #3
    308e:	f63f aedd 	bhi.w	2e4c <parsePreset+0x11cc>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3092:	4b66      	ldr	r3, [pc, #408]	; (322c <_Min_Heap_Size+0x22c>)
    3094:	f04f 0201 	mov.w	r2, #1
    3098:	443b      	add	r3, r7
    309a:	f803 2c14 	strb.w	r2, [r3, #-20]
    309e:	e6d5      	b.n	2e4c <parsePreset+0x11cc>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    30a0:	9b06      	ldr	r3, [sp, #24]
    30a2:	2b03      	cmp	r3, #3
    30a4:	f63f aefe 	bhi.w	2ea4 <parsePreset+0x1224>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    30a8:	4b60      	ldr	r3, [pc, #384]	; (322c <_Min_Heap_Size+0x22c>)
    30aa:	f04f 0201 	mov.w	r2, #1
    30ae:	443b      	add	r3, r7
    30b0:	f803 2c14 	strb.w	r2, [r3, #-20]
    30b4:	e6f6      	b.n	2ea4 <parsePreset+0x1224>
			for (int v = 0; v < numStringsThisBoard; v++)
    30b6:	4b5e      	ldr	r3, [pc, #376]	; (3230 <_Min_Heap_Size+0x230>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    30b8:	b2ff      	uxtb	r7, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    30ba:	781a      	ldrb	r2, [r3, #0]
    30bc:	2a00      	cmp	r2, #0
    30be:	f000 80ac 	beq.w	321a <_Min_Heap_Size+0x21a>
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    30c2:	4b5c      	ldr	r3, [pc, #368]	; (3234 <_Min_Heap_Size+0x234>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30c4:	f107 0a03 	add.w	sl, r7, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    30c8:	0092      	lsls	r2, r2, #2
    30ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    30ce:	9b07      	ldr	r3, [sp, #28]
    30d0:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
    30d4:	ea4f 09ca 	mov.w	r9, sl, lsl #3
    30d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    30dc:	3108      	adds	r1, #8
    30de:	f008 fe13 	bl	bd08 <__memcpy_veneer>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30e2:	9a07      	ldr	r2, [sp, #28]
    30e4:	eba9 030a 	sub.w	r3, r9, sl
    30e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30ec:	ed93 0a02 	vldr	s0, [r3, #8]
    30f0:	4b51      	ldr	r3, [pc, #324]	; (3238 <_Min_Heap_Size+0x238>)
    30f2:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    30f6:	f008 ff63 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    30fa:	4b50      	ldr	r3, [pc, #320]	; (323c <_Min_Heap_Size+0x23c>)
    30fc:	f04f 0201 	mov.w	r2, #1
    3100:	55da      	strb	r2, [r3, r7]
			knobTicked[whichMacro] = 1;
    3102:	2201      	movs	r2, #1
    3104:	4b4e      	ldr	r3, [pc, #312]	; (3240 <_Min_Heap_Size+0x240>)
    3106:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    310a:	e66e      	b.n	2dea <parsePreset+0x116a>
					noiseOn = 1;
    310c:	4b4d      	ldr	r3, [pc, #308]	; (3244 <_Min_Heap_Size+0x244>)
    310e:	f04f 0201 	mov.w	r2, #1
    3112:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    3114:	e6a7      	b.n	2e66 <parsePreset+0x11e6>
					noiseOn = 1;
    3116:	4b4b      	ldr	r3, [pc, #300]	; (3244 <_Min_Heap_Size+0x244>)
    3118:	f04f 0201 	mov.w	r2, #1
    311c:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    311e:	e6ce      	b.n	2ebe <parsePreset+0x123e>
					for (int v = 0; v < numStringsThisBoard; v++)
    3120:	4b43      	ldr	r3, [pc, #268]	; (3230 <_Min_Heap_Size+0x230>)
    3122:	781a      	ldrb	r2, [r3, #0]
    3124:	2a00      	cmp	r2, #0
    3126:	f000 8464 	beq.w	39f2 <_Min_Heap_Size+0x9f2>
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    312a:	4b42      	ldr	r3, [pc, #264]	; (3234 <_Min_Heap_Size+0x234>)
    312c:	0092      	lsls	r2, r2, #2
    312e:	9909      	ldr	r1, [sp, #36]	; 0x24
    3130:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3134:	9b03      	ldr	r3, [sp, #12]
    3136:	f103 0903 	add.w	r9, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    313a:	9b07      	ldr	r3, [sp, #28]
    313c:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    3140:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    3144:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3148:	3108      	adds	r1, #8
    314a:	f008 fddd 	bl	bd08 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    314e:	eba7 0309 	sub.w	r3, r7, r9
    3152:	e9dd 2007 	ldrd	r2, r0, [sp, #28]
    3156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    315a:	ed93 0a02 	vldr	s0, [r3, #8]
    315e:	f008 ff2f 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    3162:	4a36      	ldr	r2, [pc, #216]	; (323c <_Min_Heap_Size+0x23c>)
    3164:	9b03      	ldr	r3, [sp, #12]
    3166:	f04f 0101 	mov.w	r1, #1
    316a:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    316c:	2101      	movs	r1, #1
    316e:	4a34      	ldr	r2, [pc, #208]	; (3240 <_Min_Heap_Size+0x240>)
    3170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    3174:	e6aa      	b.n	2ecc <parsePreset+0x124c>
					for (int v = 0; v < numStringsThisBoard; v++)
    3176:	4b2e      	ldr	r3, [pc, #184]	; (3230 <_Min_Heap_Size+0x230>)
    3178:	781a      	ldrb	r2, [r3, #0]
    317a:	2a00      	cmp	r2, #0
    317c:	f000 8431 	beq.w	39e2 <_Min_Heap_Size+0x9e2>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3180:	9b03      	ldr	r3, [sp, #12]
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3182:	0092      	lsls	r2, r2, #2
    3184:	492b      	ldr	r1, [pc, #172]	; (3234 <_Min_Heap_Size+0x234>)
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3186:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    318a:	9809      	ldr	r0, [sp, #36]	; 0x24
    318c:	9b07      	ldr	r3, [sp, #28]
    318e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3192:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    3196:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    319a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    319e:	3108      	adds	r1, #8
    31a0:	e9cd 3c0a 	strd	r3, ip, [sp, #40]	; 0x28
    31a4:	f008 fdb0 	bl	bd08 <__memcpy_veneer>
    31a8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    31ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31ae:	9808      	ldr	r0, [sp, #32]
    31b0:	eba2 030c 	sub.w	r3, r2, ip
    31b4:	9a07      	ldr	r2, [sp, #28]
    31b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31ba:	ed93 0a02 	vldr	s0, [r3, #8]
    31be:	f008 feff 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    31c2:	4a1e      	ldr	r2, [pc, #120]	; (323c <_Min_Heap_Size+0x23c>)
    31c4:	9b03      	ldr	r3, [sp, #12]
    31c6:	f04f 0101 	mov.w	r1, #1
    31ca:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    31cc:	2101      	movs	r1, #1
    31ce:	4a1c      	ldr	r2, [pc, #112]	; (3240 <_Min_Heap_Size+0x240>)
    31d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    31d4:	e64e      	b.n	2e74 <parsePreset+0x11f4>
	audioSwitchToSynth();
    31d6:	f008 ff63 	bl	c0a0 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    31da:	2400      	movs	r4, #0
    31dc:	4b1a      	ldr	r3, [pc, #104]	; (3248 <_Min_Heap_Size+0x248>)
	overSampled = 1;
    31de:	2501      	movs	r5, #1
	currentActivePreset = presetNumber;
    31e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
	presetWaitingToParse = 0;
    31e4:	601c      	str	r4, [r3, #0]
	changeOversampling(overSampled);
    31e6:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    31e8:	4b18      	ldr	r3, [pc, #96]	; (324c <_Min_Heap_Size+0x24c>)
    31ea:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    31ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    31f0:	4a17      	ldr	r2, [pc, #92]	; (3250 <_Min_Heap_Size+0x250>)
    31f2:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    31f4:	2203      	movs	r2, #3
    31f6:	4b17      	ldr	r3, [pc, #92]	; (3254 <_Min_Heap_Size+0x254>)
    31f8:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    31fa:	4b17      	ldr	r3, [pc, #92]	; (3258 <_Min_Heap_Size+0x258>)
    31fc:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    31fe:	f008 fe9b 	bl	bf38 <__changeOversampling_veneer>
    3202:	b662      	cpsie	i
	diskBusy = 0;
    3204:	4a15      	ldr	r2, [pc, #84]	; (325c <_Min_Heap_Size+0x25c>)
	receivingI2C = 0;
    3206:	4b16      	ldr	r3, [pc, #88]	; (3260 <_Min_Heap_Size+0x260>)
	presetReady = 1;
    3208:	4916      	ldr	r1, [pc, #88]	; (3264 <_Min_Heap_Size+0x264>)
	diskBusy = 0;
    320a:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    320c:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    320e:	701c      	strb	r4, [r3, #0]
}
    3210:	b00d      	add	sp, #52	; 0x34
    3212:	ecbd 8b02 	vpop	{d8}
    3216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    321a:	f107 0a03 	add.w	sl, r7, #3
    321e:	ea4f 09ca 	mov.w	r9, sl, lsl #3
    3222:	e75e      	b.n	30e2 <_Min_Heap_Size+0xe2>
    3224:	20018594 	.word	0x20018594
    3228:	200006b0 	.word	0x200006b0
    322c:	2001ce84 	.word	0x2001ce84
    3230:	20000694 	.word	0x20000694
    3234:	2001d418 	.word	0x2001d418
    3238:	20005244 	.word	0x20005244
    323c:	200051e0 	.word	0x200051e0
    3240:	200164e0 	.word	0x200164e0
    3244:	2001d1cc 	.word	0x2001d1cc
    3248:	2001a088 	.word	0x2001a088
    324c:	200006ad 	.word	0x200006ad
    3250:	200006a8 	.word	0x200006a8
    3254:	200008ec 	.word	0x200008ec
    3258:	200008f0 	.word	0x200008f0
    325c:	2001435c 	.word	0x2001435c
    3260:	2001a4e0 	.word	0x2001a4e0
    3264:	20005358 	.word	0x20005358
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3268:	9a02      	ldr	r2, [sp, #8]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    326a:	20c8      	movs	r0, #200	; 0xc8
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    326c:	4cfb      	ldr	r4, [pc, #1004]	; (365c <_Min_Heap_Size+0x65c>)
    326e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
				presetName[i] = buffer[bufferIndex];
    3272:	f899 5004 	ldrb.w	r5, [r9, #4]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3276:	fb02 f000 	mul.w	r0, r2, r0
				presetName[i] = buffer[bufferIndex];
    327a:	4af9      	ldr	r2, [pc, #996]	; (3660 <_Min_Heap_Size+0x660>)
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    327c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3280:	ed9f 7af8 	vldr	s14, [pc, #992]	; 3664 <_Min_Heap_Size+0x664>
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3284:	005b      	lsls	r3, r3, #1
				presetName[i] = buffer[bufferIndex];
    3286:	7015      	strb	r5, [r2, #0]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3288:	54e5      	strb	r5, [r4, r3]
				presetName[i] = buffer[bufferIndex];
    328a:	f899 3005 	ldrb.w	r3, [r9, #5]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    328e:	4cf6      	ldr	r4, [pc, #984]	; (3668 <_Min_Heap_Size+0x668>)
				presetName[i] = buffer[bufferIndex];
    3290:	7053      	strb	r3, [r2, #1]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3292:	704b      	strb	r3, [r1, #1]
				presetName[i] = buffer[bufferIndex];
    3294:	f899 3006 	ldrb.w	r3, [r9, #6]
    3298:	7093      	strb	r3, [r2, #2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    329a:	708b      	strb	r3, [r1, #2]
				presetName[i] = buffer[bufferIndex];
    329c:	f899 3007 	ldrb.w	r3, [r9, #7]
    32a0:	70d3      	strb	r3, [r2, #3]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32a2:	70cb      	strb	r3, [r1, #3]
				presetName[i] = buffer[bufferIndex];
    32a4:	f899 3008 	ldrb.w	r3, [r9, #8]
    32a8:	7113      	strb	r3, [r2, #4]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32aa:	710b      	strb	r3, [r1, #4]
				presetName[i] = buffer[bufferIndex];
    32ac:	f899 3009 	ldrb.w	r3, [r9, #9]
    32b0:	7153      	strb	r3, [r2, #5]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32b2:	714b      	strb	r3, [r1, #5]
				presetName[i] = buffer[bufferIndex];
    32b4:	f899 300a 	ldrb.w	r3, [r9, #10]
    32b8:	7193      	strb	r3, [r2, #6]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ba:	718b      	strb	r3, [r1, #6]
				presetName[i] = buffer[bufferIndex];
    32bc:	f899 300b 	ldrb.w	r3, [r9, #11]
    32c0:	71d3      	strb	r3, [r2, #7]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32c2:	71cb      	strb	r3, [r1, #7]
				presetName[i] = buffer[bufferIndex];
    32c4:	f899 300c 	ldrb.w	r3, [r9, #12]
    32c8:	7213      	strb	r3, [r2, #8]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ca:	720b      	strb	r3, [r1, #8]
				presetName[i] = buffer[bufferIndex];
    32cc:	f899 300d 	ldrb.w	r3, [r9, #13]
    32d0:	7253      	strb	r3, [r2, #9]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32d2:	724b      	strb	r3, [r1, #9]
				presetName[i] = buffer[bufferIndex];
    32d4:	f899 300e 	ldrb.w	r3, [r9, #14]
    32d8:	7293      	strb	r3, [r2, #10]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32da:	728b      	strb	r3, [r1, #10]
				presetName[i] = buffer[bufferIndex];
    32dc:	f899 5010 	ldrb.w	r5, [r9, #16]
    32e0:	f899 300f 	ldrb.w	r3, [r9, #15]
    32e4:	72d3      	strb	r3, [r2, #11]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32e6:	72cb      	strb	r3, [r1, #11]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32e8:	1823      	adds	r3, r4, r0
				presetName[i] = buffer[bufferIndex];
    32ea:	7315      	strb	r5, [r2, #12]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ec:	730d      	strb	r5, [r1, #12]
				presetName[i] = buffer[bufferIndex];
    32ee:	f899 5011 	ldrb.w	r5, [r9, #17]
    32f2:	7355      	strb	r5, [r2, #13]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32f4:	f899 2015 	ldrb.w	r2, [r9, #21]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32f8:	734d      	strb	r5, [r1, #13]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32fa:	5422      	strb	r2, [r4, r0]
    32fc:	f899 2016 	ldrb.w	r2, [r9, #22]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    3300:	f899 5014 	ldrb.w	r5, [r9, #20]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3304:	705a      	strb	r2, [r3, #1]
    3306:	f899 2017 	ldrb.w	r2, [r9, #23]
    330a:	49d8      	ldr	r1, [pc, #864]	; (366c <_Min_Heap_Size+0x66c>)
    330c:	709a      	strb	r2, [r3, #2]
    330e:	f899 2018 	ldrb.w	r2, [r9, #24]
    3312:	f101 0450 	add.w	r4, r1, #80	; 0x50
    3316:	70da      	strb	r2, [r3, #3]
    3318:	f899 2019 	ldrb.w	r2, [r9, #25]
    331c:	711a      	strb	r2, [r3, #4]
    331e:	f899 201a 	ldrb.w	r2, [r9, #26]
    3322:	715a      	strb	r2, [r3, #5]
    3324:	f899 201b 	ldrb.w	r2, [r9, #27]
    3328:	719a      	strb	r2, [r3, #6]
    332a:	f899 201c 	ldrb.w	r2, [r9, #28]
    332e:	71da      	strb	r2, [r3, #7]
    3330:	f899 201d 	ldrb.w	r2, [r9, #29]
    3334:	721a      	strb	r2, [r3, #8]
    3336:	f899 201e 	ldrb.w	r2, [r9, #30]
    333a:	729a      	strb	r2, [r3, #10]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    333c:	4acc      	ldr	r2, [pc, #816]	; (3670 <_Min_Heap_Size+0x670>)
    333e:	7015      	strb	r5, [r2, #0]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3340:	f899 201f 	ldrb.w	r2, [r9, #31]
    3344:	72da      	strb	r2, [r3, #11]
    3346:	f899 2020 	ldrb.w	r2, [r9, #32]
    334a:	731a      	strb	r2, [r3, #12]
    334c:	f899 2021 	ldrb.w	r2, [r9, #33]	; 0x21
    3350:	735a      	strb	r2, [r3, #13]
    3352:	f899 2022 	ldrb.w	r2, [r9, #34]	; 0x22
    3356:	739a      	strb	r2, [r3, #14]
    3358:	f899 2023 	ldrb.w	r2, [r9, #35]	; 0x23
    335c:	73da      	strb	r2, [r3, #15]
    335e:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
    3362:	741a      	strb	r2, [r3, #16]
    3364:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
    3368:	745a      	strb	r2, [r3, #17]
    336a:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
    336e:	749a      	strb	r2, [r3, #18]
    3370:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
    3374:	751a      	strb	r2, [r3, #20]
    3376:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
    337a:	755a      	strb	r2, [r3, #21]
    337c:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
    3380:	759a      	strb	r2, [r3, #22]
    3382:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
    3386:	75da      	strb	r2, [r3, #23]
    3388:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
    338c:	761a      	strb	r2, [r3, #24]
    338e:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
    3392:	765a      	strb	r2, [r3, #25]
    3394:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
    3398:	769a      	strb	r2, [r3, #26]
    339a:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
    339e:	76da      	strb	r2, [r3, #27]
    33a0:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
    33a4:	771a      	strb	r2, [r3, #28]
    33a6:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
    33aa:	779a      	strb	r2, [r3, #30]
    33ac:	f899 2031 	ldrb.w	r2, [r9, #49]	; 0x31
    33b0:	77da      	strb	r2, [r3, #31]
    33b2:	f899 2032 	ldrb.w	r2, [r9, #50]	; 0x32
    33b6:	f883 2020 	strb.w	r2, [r3, #32]
    33ba:	f899 2033 	ldrb.w	r2, [r9, #51]	; 0x33
    33be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    33c2:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
    33c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    33ca:	f899 2035 	ldrb.w	r2, [r9, #53]	; 0x35
    33ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    33d2:	f899 2036 	ldrb.w	r2, [r9, #54]	; 0x36
    33d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    33da:	f899 2037 	ldrb.w	r2, [r9, #55]	; 0x37
    33de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    33e2:	f899 2038 	ldrb.w	r2, [r9, #56]	; 0x38
    33e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    33ea:	f899 2039 	ldrb.w	r2, [r9, #57]	; 0x39
    33ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    33f2:	f899 203a 	ldrb.w	r2, [r9, #58]	; 0x3a
    33f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    33fa:	f899 203b 	ldrb.w	r2, [r9, #59]	; 0x3b
    33fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    3402:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
    3406:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    340a:	f899 203d 	ldrb.w	r2, [r9, #61]	; 0x3d
    340e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    3412:	f899 203e 	ldrb.w	r2, [r9, #62]	; 0x3e
    3416:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    341a:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
    341e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3422:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
    3426:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    342a:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
    342e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    3432:	f899 2042 	ldrb.w	r2, [r9, #66]	; 0x42
    3436:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    343a:	f899 2043 	ldrb.w	r2, [r9, #67]	; 0x43
    343e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    3442:	f899 2044 	ldrb.w	r2, [r9, #68]	; 0x44
    3446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    344a:	f899 2045 	ldrb.w	r2, [r9, #69]	; 0x45
    344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    3452:	f899 2046 	ldrb.w	r2, [r9, #70]	; 0x46
    3456:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    345a:	f899 2047 	ldrb.w	r2, [r9, #71]	; 0x47
    345e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    3462:	f899 2048 	ldrb.w	r2, [r9, #72]	; 0x48
    3466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    346a:	f899 2049 	ldrb.w	r2, [r9, #73]	; 0x49
    346e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    3472:	f899 204a 	ldrb.w	r2, [r9, #74]	; 0x4a
    3476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    347a:	f899 204b 	ldrb.w	r2, [r9, #75]	; 0x4b
    347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    3482:	f899 204c 	ldrb.w	r2, [r9, #76]	; 0x4c
    3486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    348a:	f899 204d 	ldrb.w	r2, [r9, #77]	; 0x4d
    348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    3492:	f899 204e 	ldrb.w	r2, [r9, #78]	; 0x4e
    3496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    349a:	f899 204f 	ldrb.w	r2, [r9, #79]	; 0x4f
    349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    34a2:	f899 2050 	ldrb.w	r2, [r9, #80]	; 0x50
    34a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    34aa:	f899 2051 	ldrb.w	r2, [r9, #81]	; 0x51
    34ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    34b2:	f899 2052 	ldrb.w	r2, [r9, #82]	; 0x52
    34b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    34ba:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
    34be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    34c2:	f899 2054 	ldrb.w	r2, [r9, #84]	; 0x54
    34c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    34ca:	f899 2055 	ldrb.w	r2, [r9, #85]	; 0x55
    34ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    34d2:	f899 2056 	ldrb.w	r2, [r9, #86]	; 0x56
    34d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    34da:	f899 2057 	ldrb.w	r2, [r9, #87]	; 0x57
    34de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    34e2:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
    34e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    34ea:	f899 2059 	ldrb.w	r2, [r9, #89]	; 0x59
    34ee:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    34f2:	f899 205a 	ldrb.w	r2, [r9, #90]	; 0x5a
    34f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    34fa:	f899 205b 	ldrb.w	r2, [r9, #91]	; 0x5b
    34fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    3502:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
    3506:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    350a:	f899 205d 	ldrb.w	r2, [r9, #93]	; 0x5d
    350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    3512:	f899 205e 	ldrb.w	r2, [r9, #94]	; 0x5e
    3516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    351a:	f899 205f 	ldrb.w	r2, [r9, #95]	; 0x5f
    351e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    3522:	f899 2060 	ldrb.w	r2, [r9, #96]	; 0x60
    3526:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    352a:	f899 2061 	ldrb.w	r2, [r9, #97]	; 0x61
    352e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    3532:	f899 2062 	ldrb.w	r2, [r9, #98]	; 0x62
    3536:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    353a:	f899 2063 	ldrb.w	r2, [r9, #99]	; 0x63
    353e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    3542:	f899 2064 	ldrb.w	r2, [r9, #100]	; 0x64
    3546:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    354a:	f899 2065 	ldrb.w	r2, [r9, #101]	; 0x65
    354e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    3552:	f899 2066 	ldrb.w	r2, [r9, #102]	; 0x66
    3556:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    355a:	f899 2067 	ldrb.w	r2, [r9, #103]	; 0x67
    355e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    3562:	f899 2068 	ldrb.w	r2, [r9, #104]	; 0x68
    3566:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    356a:	f899 2069 	ldrb.w	r2, [r9, #105]	; 0x69
    356e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    3572:	f899 206a 	ldrb.w	r2, [r9, #106]	; 0x6a
    3576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    357a:	f899 206b 	ldrb.w	r2, [r9, #107]	; 0x6b
    357e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    3582:	f899 206c 	ldrb.w	r2, [r9, #108]	; 0x6c
    3586:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    358a:	f899 206d 	ldrb.w	r2, [r9, #109]	; 0x6d
    358e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    3592:	f899 206e 	ldrb.w	r2, [r9, #110]	; 0x6e
    3596:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    359a:	f899 206f 	ldrb.w	r2, [r9, #111]	; 0x6f
    359e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    35a2:	f899 2070 	ldrb.w	r2, [r9, #112]	; 0x70
    35a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    35aa:	f899 2071 	ldrb.w	r2, [r9, #113]	; 0x71
    35ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    35b2:	f899 2072 	ldrb.w	r2, [r9, #114]	; 0x72
    35b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    35ba:	f899 2073 	ldrb.w	r2, [r9, #115]	; 0x73
    35be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    35c2:	f899 2074 	ldrb.w	r2, [r9, #116]	; 0x74
    35c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    35ca:	f899 2075 	ldrb.w	r2, [r9, #117]	; 0x75
    35ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    35d2:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
    35d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    35da:	f899 2077 	ldrb.w	r2, [r9, #119]	; 0x77
    35de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    35e2:	f899 2078 	ldrb.w	r2, [r9, #120]	; 0x78
    35e6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    35ea:	f899 2079 	ldrb.w	r2, [r9, #121]	; 0x79
    35ee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    35f2:	f899 207a 	ldrb.w	r2, [r9, #122]	; 0x7a
    35f6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    35fa:	f899 207b 	ldrb.w	r2, [r9, #123]	; 0x7b
    35fe:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
    3602:	f899 207c 	ldrb.w	r2, [r9, #124]	; 0x7c
    3606:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    360a:	f899 207d 	ldrb.w	r2, [r9, #125]	; 0x7d
    360e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    3612:	f899 207e 	ldrb.w	r2, [r9, #126]	; 0x7e
    3616:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    361a:	f899 207f 	ldrb.w	r2, [r9, #127]	; 0x7f
    361e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    3622:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
    3626:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
    362a:	f899 2081 	ldrb.w	r2, [r9, #129]	; 0x81
    362e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    3632:	f899 2082 	ldrb.w	r2, [r9, #130]	; 0x82
    3636:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    363a:	f899 2083 	ldrb.w	r2, [r9, #131]	; 0x83
    363e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    3642:	f899 2084 	ldrb.w	r2, [r9, #132]	; 0x84
    3646:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    364a:	f899 2085 	ldrb.w	r2, [r9, #133]	; 0x85
    364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    3652:	f899 2086 	ldrb.w	r2, [r9, #134]	; 0x86
    3656:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    365a:	e00b      	b.n	3674 <_Min_Heap_Size+0x674>
    365c:	30042000 	.word	0x30042000
    3660:	2001a074 	.word	0x2001a074
    3664:	377ffff6 	.word	0x377ffff6
    3668:	30043380 	.word	0x30043380
    366c:	20018544 	.word	0x20018544
    3670:	2001c689 	.word	0x2001c689
    3674:	f899 2087 	ldrb.w	r2, [r9, #135]	; 0x87
    3678:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    367c:	f899 2088 	ldrb.w	r2, [r9, #136]	; 0x88
    3680:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    3684:	f899 2089 	ldrb.w	r2, [r9, #137]	; 0x89
    3688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    368c:	f899 208a 	ldrb.w	r2, [r9, #138]	; 0x8a
    3690:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    3694:	f899 208b 	ldrb.w	r2, [r9, #139]	; 0x8b
    3698:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    369c:	f899 208c 	ldrb.w	r2, [r9, #140]	; 0x8c
    36a0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    36a4:	f899 208d 	ldrb.w	r2, [r9, #141]	; 0x8d
    36a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    36ac:	f899 208e 	ldrb.w	r2, [r9, #142]	; 0x8e
    36b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    36b4:	f899 208f 	ldrb.w	r2, [r9, #143]	; 0x8f
    36b8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    36bc:	f899 2090 	ldrb.w	r2, [r9, #144]	; 0x90
    36c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    36c4:	f899 2091 	ldrb.w	r2, [r9, #145]	; 0x91
    36c8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    36cc:	f899 2092 	ldrb.w	r2, [r9, #146]	; 0x92
    36d0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    36d4:	f899 2093 	ldrb.w	r2, [r9, #147]	; 0x93
    36d8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
    36dc:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
    36e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    36e4:	f899 2095 	ldrb.w	r2, [r9, #149]	; 0x95
    36e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    36ec:	f899 2096 	ldrb.w	r2, [r9, #150]	; 0x96
    36f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    36f4:	f899 2097 	ldrb.w	r2, [r9, #151]	; 0x97
    36f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    36fc:	f899 2098 	ldrb.w	r2, [r9, #152]	; 0x98
    3700:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    3704:	f899 2099 	ldrb.w	r2, [r9, #153]	; 0x99
    3708:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    370c:	f899 209a 	ldrb.w	r2, [r9, #154]	; 0x9a
    3710:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
    3714:	f899 209b 	ldrb.w	r2, [r9, #155]	; 0x9b
    3718:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    371c:	f899 209c 	ldrb.w	r2, [r9, #156]	; 0x9c
    3720:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    3724:	f899 209d 	ldrb.w	r2, [r9, #157]	; 0x9d
    3728:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    372c:	f899 209e 	ldrb.w	r2, [r9, #158]	; 0x9e
    3730:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    3734:	f899 209f 	ldrb.w	r2, [r9, #159]	; 0x9f
    3738:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    373c:	f899 20a0 	ldrb.w	r2, [r9, #160]	; 0xa0
    3740:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    3744:	f899 20a1 	ldrb.w	r2, [r9, #161]	; 0xa1
    3748:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
    374c:	f899 20a2 	ldrb.w	r2, [r9, #162]	; 0xa2
    3750:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    3754:	f899 20a3 	ldrb.w	r2, [r9, #163]	; 0xa3
    3758:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    375c:	f899 20a4 	ldrb.w	r2, [r9, #164]	; 0xa4
    3760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    3764:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
    3768:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
    376c:	f899 20a6 	ldrb.w	r2, [r9, #166]	; 0xa6
    3770:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    3774:	f899 20a7 	ldrb.w	r2, [r9, #167]	; 0xa7
    3778:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    377c:	f899 20a8 	ldrb.w	r2, [r9, #168]	; 0xa8
    3780:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    3784:	f899 20a9 	ldrb.w	r2, [r9, #169]	; 0xa9
    3788:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    378c:	f899 20aa 	ldrb.w	r2, [r9, #170]	; 0xaa
    3790:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
    3794:	f899 20ab 	ldrb.w	r2, [r9, #171]	; 0xab
    3798:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    379c:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
    37a0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    37a4:	f899 20ad 	ldrb.w	r2, [r9, #173]	; 0xad
    37a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    37ac:	f899 20ae 	ldrb.w	r2, [r9, #174]	; 0xae
    37b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    37b4:	f899 20af 	ldrb.w	r2, [r9, #175]	; 0xaf
    37b8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    37bc:	f899 20b0 	ldrb.w	r2, [r9, #176]	; 0xb0
    37c0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    37c4:	f899 20b1 	ldrb.w	r2, [r9, #177]	; 0xb1
    37c8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    37cc:	f899 20b2 	ldrb.w	r2, [r9, #178]	; 0xb2
    37d0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    37d4:	f899 20b3 	ldrb.w	r2, [r9, #179]	; 0xb3
    37d8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
    37dc:	f899 20b4 	ldrb.w	r2, [r9, #180]	; 0xb4
    37e0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    37e4:	f899 20b5 	ldrb.w	r2, [r9, #181]	; 0xb5
    37e8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    37ec:	f899 20b6 	ldrb.w	r2, [r9, #182]	; 0xb6
    37f0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    37f4:	f899 20b7 	ldrb.w	r2, [r9, #183]	; 0xb7
    37f8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    37fc:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
    3800:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    3804:	f899 20b9 	ldrb.w	r2, [r9, #185]	; 0xb9
    3808:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    380c:	f899 20ba 	ldrb.w	r2, [r9, #186]	; 0xba
    3810:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    3814:	f899 20bb 	ldrb.w	r2, [r9, #187]	; 0xbb
    3818:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    381c:	f899 20bc 	ldrb.w	r2, [r9, #188]	; 0xbc
    3820:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    3824:	f899 20bd 	ldrb.w	r2, [r9, #189]	; 0xbd
    3828:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    382c:	f899 20be 	ldrb.w	r2, [r9, #190]	; 0xbe
    3830:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
    3834:	f899 20bf 	ldrb.w	r2, [r9, #191]	; 0xbf
    3838:	f899 00c0 	ldrb.w	r0, [r9, #192]	; 0xc0
    383c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    3840:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
    3844:	f899 00c1 	ldrb.w	r0, [r9, #193]	; 0xc1
    3848:	4a71      	ldr	r2, [pc, #452]	; (3a10 <_Min_Heap_Size+0xa10>)
    384a:	f883 00ba 	strb.w	r0, [r3, #186]	; 0xba
    384e:	f899 00c2 	ldrb.w	r0, [r9, #194]	; 0xc2
    3852:	f883 00bb 	strb.w	r0, [r3, #187]	; 0xbb
    3856:	f899 00c3 	ldrb.w	r0, [r9, #195]	; 0xc3
    385a:	f883 00bc 	strb.w	r0, [r3, #188]	; 0xbc
    385e:	f899 00c4 	ldrb.w	r0, [r9, #196]	; 0xc4
    3862:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
    3866:	f899 00c5 	ldrb.w	r0, [r9, #197]	; 0xc5
    386a:	f883 00bf 	strb.w	r0, [r3, #191]	; 0xbf
    386e:	f899 00c6 	ldrb.w	r0, [r9, #198]	; 0xc6
    3872:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
    3876:	f899 00c7 	ldrb.w	r0, [r9, #199]	; 0xc7
    387a:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
    387e:	f899 00c8 	ldrb.w	r0, [r9, #200]	; 0xc8
    3882:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    3886:	f899 00c9 	ldrb.w	r0, [r9, #201]	; 0xc9
    388a:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
    388e:	f899 00ca 	ldrb.w	r0, [r9, #202]	; 0xca
    3892:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
    3896:	f899 00cb 	ldrb.w	r0, [r9, #203]	; 0xcb
    389a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
    389e:	f899 00cc 	ldrb.w	r0, [r9, #204]	; 0xcc
    38a2:	f883 00c6 	strb.w	r0, [r3, #198]	; 0xc6
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    38a6:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
			for (int i = 0; i < 20; i++)
    38aa:	3202      	adds	r2, #2
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    38ac:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    38b0:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    38b4:	ee07 3a90 	vmov	s15, r3
    38b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    38bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    38c0:	ece1 7a01 	vstmia	r1!, {s15}
			for (int i = 0; i < 20; i++)
    38c4:	428c      	cmp	r4, r1
    38c6:	d1ee      	bne.n	38a6 <_Min_Heap_Size+0x8a6>
			presetWaitingToParse = 0;
    38c8:	4b52      	ldr	r3, [pc, #328]	; (3a14 <_Min_Heap_Size+0xa14>)
    38ca:	2100      	movs	r1, #0
			currentActivePreset = presetNumber;
    38cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
			if (whichModel == 1)
    38d0:	2d01      	cmp	r5, #1
			presetWaitingToParse = 0;
    38d2:	6019      	str	r1, [r3, #0]
			currentActivePreset = presetNumber;
    38d4:	4b50      	ldr	r3, [pc, #320]	; (3a18 <_Min_Heap_Size+0xa18>)
    38d6:	701a      	strb	r2, [r3, #0]
			if (whichModel == 1)
    38d8:	d011      	beq.n	38fe <_Min_Heap_Size+0x8fe>
			else if (whichModel == 2)
    38da:	3d02      	subs	r5, #2
    38dc:	2d03      	cmp	r5, #3
    38de:	d810      	bhi.n	3902 <_Min_Heap_Size+0x902>
    38e0:	e8df f005 	tbb	[pc, r5]
    38e4:	696f757b 	.word	0x696f757b
			oscOn[i] = 0;
    38e8:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    38ea:	4610      	mov	r0, r2
    38ec:	f7fe bf56 	b.w	279c <parsePreset+0xb1c>
		pedalControlsMaster = 1;
    38f0:	2301      	movs	r3, #1
    38f2:	f7ff b9a8 	b.w	2c46 <parsePreset+0xfc6>
			oscOn[i] = 0;
    38f6:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    38f8:	4610      	mov	r0, r2
    38fa:	f7fe bf85 	b.w	2808 <parsePreset+0xb88>
				switchStrings = 1;
    38fe:	4b47      	ldr	r3, [pc, #284]	; (3a1c <_Min_Heap_Size+0xa1c>)
    3900:	601d      	str	r5, [r3, #0]
			audioMasterLevel = 1.0f;
    3902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3906:	4a46      	ldr	r2, [pc, #280]	; (3a20 <_Min_Heap_Size+0xa20>)
    3908:	6013      	str	r3, [r2, #0]
    390a:	b662      	cpsie	i
			diskBusy = 0;
    390c:	2300      	movs	r3, #0
			presetReady = 1;
    390e:	2001      	movs	r0, #1
			diskBusy = 0;
    3910:	4944      	ldr	r1, [pc, #272]	; (3a24 <_Min_Heap_Size+0xa24>)
			receivingI2C = 0;
    3912:	4a45      	ldr	r2, [pc, #276]	; (3a28 <_Min_Heap_Size+0xa28>)
			presetReady = 1;
    3914:	4c45      	ldr	r4, [pc, #276]	; (3a2c <_Min_Heap_Size+0xa2c>)
			diskBusy = 0;
    3916:	700b      	strb	r3, [r1, #0]
			presetReady = 1;
    3918:	6020      	str	r0, [r4, #0]
			receivingI2C = 0;
    391a:	7013      	strb	r3, [r2, #0]
			return;
    391c:	f7fe bd89 	b.w	2432 <parsePreset+0x7b2>
			  shapeTick[i] = &triTick;
    3920:	4a43      	ldr	r2, [pc, #268]	; (3a30 <_Min_Heap_Size+0xa30>)
    3922:	4844      	ldr	r0, [pc, #272]	; (3a34 <_Min_Heap_Size+0xa34>)
    3924:	6090      	str	r0, [r2, #8]
			  break;
    3926:	f7fe bf60 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &pulseTick;
    392a:	4a41      	ldr	r2, [pc, #260]	; (3a30 <_Min_Heap_Size+0xa30>)
    392c:	4842      	ldr	r0, [pc, #264]	; (3a38 <_Min_Heap_Size+0xa38>)
    392e:	6090      	str	r0, [r2, #8]
			  break;
    3930:	f7fe bf5b 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sawTick;
    3934:	4a3e      	ldr	r2, [pc, #248]	; (3a30 <_Min_Heap_Size+0xa30>)
    3936:	4841      	ldr	r0, [pc, #260]	; (3a3c <_Min_Heap_Size+0xa3c>)
    3938:	6090      	str	r0, [r2, #8]
			  break;
    393a:	f7fe bf56 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sineTriTick;
    393e:	4a3c      	ldr	r2, [pc, #240]	; (3a30 <_Min_Heap_Size+0xa30>)
    3940:	483f      	ldr	r0, [pc, #252]	; (3a40 <_Min_Heap_Size+0xa40>)
    3942:	6090      	str	r0, [r2, #8]
			  break;
    3944:	f7fe bf51 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sawSquareTick;
    3948:	4a39      	ldr	r2, [pc, #228]	; (3a30 <_Min_Heap_Size+0xa30>)
    394a:	483e      	ldr	r0, [pc, #248]	; (3a44 <_Min_Heap_Size+0xa44>)
    394c:	6090      	str	r0, [r2, #8]
			  break;
    394e:	f7fe bf4c 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &triTick;
    3952:	4a37      	ldr	r2, [pc, #220]	; (3a30 <_Min_Heap_Size+0xa30>)
    3954:	4837      	ldr	r0, [pc, #220]	; (3a34 <_Min_Heap_Size+0xa34>)
    3956:	6050      	str	r0, [r2, #4]
			  break;
    3958:	f7fe bf11 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sineTick;
    395c:	4a34      	ldr	r2, [pc, #208]	; (3a30 <_Min_Heap_Size+0xa30>)
    395e:	483a      	ldr	r0, [pc, #232]	; (3a48 <_Min_Heap_Size+0xa48>)
    3960:	6050      	str	r0, [r2, #4]
			  break;
    3962:	f7fe bf0c 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &pulseTick;
    3966:	4a32      	ldr	r2, [pc, #200]	; (3a30 <_Min_Heap_Size+0xa30>)
    3968:	4833      	ldr	r0, [pc, #204]	; (3a38 <_Min_Heap_Size+0xa38>)
    396a:	6050      	str	r0, [r2, #4]
			  break;
    396c:	f7fe bf07 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sawTick;
    3970:	4a2f      	ldr	r2, [pc, #188]	; (3a30 <_Min_Heap_Size+0xa30>)
    3972:	4832      	ldr	r0, [pc, #200]	; (3a3c <_Min_Heap_Size+0xa3c>)
    3974:	6050      	str	r0, [r2, #4]
			  break;
    3976:	f7fe bf02 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sawSquareTick;
    397a:	4a2d      	ldr	r2, [pc, #180]	; (3a30 <_Min_Heap_Size+0xa30>)
    397c:	4831      	ldr	r0, [pc, #196]	; (3a44 <_Min_Heap_Size+0xa44>)
    397e:	6050      	str	r0, [r2, #4]
			  break;
    3980:	f7fe befd 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &triTick;
    3984:	4b2a      	ldr	r3, [pc, #168]	; (3a30 <_Min_Heap_Size+0xa30>)
    3986:	4a2b      	ldr	r2, [pc, #172]	; (3a34 <_Min_Heap_Size+0xa34>)
    3988:	601a      	str	r2, [r3, #0]
			  break;
    398a:	f7fe be9c 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sineTick;
    398e:	4b28      	ldr	r3, [pc, #160]	; (3a30 <_Min_Heap_Size+0xa30>)
    3990:	4a2d      	ldr	r2, [pc, #180]	; (3a48 <_Min_Heap_Size+0xa48>)
    3992:	601a      	str	r2, [r3, #0]
			  break;
    3994:	f7fe be97 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &pulseTick;
    3998:	4b25      	ldr	r3, [pc, #148]	; (3a30 <_Min_Heap_Size+0xa30>)
    399a:	4a27      	ldr	r2, [pc, #156]	; (3a38 <_Min_Heap_Size+0xa38>)
    399c:	601a      	str	r2, [r3, #0]
			  break;
    399e:	f7fe be92 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sawTick;
    39a2:	4b23      	ldr	r3, [pc, #140]	; (3a30 <_Min_Heap_Size+0xa30>)
    39a4:	4a25      	ldr	r2, [pc, #148]	; (3a3c <_Min_Heap_Size+0xa3c>)
    39a6:	601a      	str	r2, [r3, #0]
			  break;
    39a8:	f7fe be8d 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sawSquareTick;
    39ac:	4b20      	ldr	r3, [pc, #128]	; (3a30 <_Min_Heap_Size+0xa30>)
    39ae:	4a25      	ldr	r2, [pc, #148]	; (3a44 <_Min_Heap_Size+0xa44>)
    39b0:	601a      	str	r2, [r3, #0]
			  break;
    39b2:	f7fe be88 	b.w	26c6 <parsePreset+0xa46>
				audioFrameFunction = audioFrameString3;
    39b6:	4b25      	ldr	r3, [pc, #148]	; (3a4c <_Min_Heap_Size+0xa4c>)
    39b8:	4a25      	ldr	r2, [pc, #148]	; (3a50 <_Min_Heap_Size+0xa50>)
    39ba:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    39bc:	f003 ffb0 	bl	7920 <audioSwitchToString3>
    39c0:	e79f      	b.n	3902 <_Min_Heap_Size+0x902>
				audioFrameFunction = audioFrameVocal;
    39c2:	4b22      	ldr	r3, [pc, #136]	; (3a4c <_Min_Heap_Size+0xa4c>)
    39c4:	4a23      	ldr	r2, [pc, #140]	; (3a54 <_Min_Heap_Size+0xa54>)
    39c6:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    39c8:	f007 feba 	bl	b740 <audioSwitchToVocal>
    39cc:	e799      	b.n	3902 <_Min_Heap_Size+0x902>
				audioFrameFunction = audioFrameAdditive;
    39ce:	4b1f      	ldr	r3, [pc, #124]	; (3a4c <_Min_Heap_Size+0xa4c>)
    39d0:	4a21      	ldr	r2, [pc, #132]	; (3a58 <_Min_Heap_Size+0xa58>)
    39d2:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    39d4:	f7fc ff64 	bl	8a0 <audioSwitchToAdditive>
    39d8:	e793      	b.n	3902 <_Min_Heap_Size+0x902>
				switchStrings = 2;
    39da:	4b10      	ldr	r3, [pc, #64]	; (3a1c <_Min_Heap_Size+0xa1c>)
    39dc:	2202      	movs	r2, #2
    39de:	601a      	str	r2, [r3, #0]
    39e0:	e78f      	b.n	3902 <_Min_Heap_Size+0x902>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    39e2:	9b03      	ldr	r3, [sp, #12]
    39e4:	f103 0c03 	add.w	ip, r3, #3
    39e8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    39ec:	920a      	str	r2, [sp, #40]	; 0x28
    39ee:	f7ff bbdd 	b.w	31ac <_Min_Heap_Size+0x1ac>
    39f2:	9b03      	ldr	r3, [sp, #12]
    39f4:	f103 0903 	add.w	r9, r3, #3
    39f8:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    39fc:	f7ff bba7 	b.w	314e <_Min_Heap_Size+0x14e>
    3a00:	4c16      	ldr	r4, [pc, #88]	; (3a5c <_Min_Heap_Size+0xa5c>)
    3a02:	f7fe bd84 	b.w	250e <parsePreset+0x88e>
    3a06:	f8df b058 	ldr.w	fp, [pc, #88]	; 3a60 <_Min_Heap_Size+0xa60>
    3a0a:	f7fe bd6e 	b.w	24ea <parsePreset+0x86a>
    3a0e:	bf00      	nop
    3a10:	30042380 	.word	0x30042380
    3a14:	2001a088 	.word	0x2001a088
    3a18:	200006ad 	.word	0x200006ad
    3a1c:	20014248 	.word	0x20014248
    3a20:	200006a8 	.word	0x200006a8
    3a24:	2001435c 	.word	0x2001435c
    3a28:	2001a4e0 	.word	0x2001a4e0
    3a2c:	20005358 	.word	0x20005358
    3a30:	2001d39c 	.word	0x2001d39c
    3a34:	000084a1 	.word	0x000084a1
    3a38:	00008401 	.word	0x00008401
    3a3c:	000083c1 	.word	0x000083c1
    3a40:	00008361 	.word	0x00008361
    3a44:	00008301 	.word	0x00008301
    3a48:	00008461 	.word	0x00008461
    3a4c:	20001194 	.word	0x20001194
    3a50:	00007ba1 	.word	0x00007ba1
    3a54:	0000b941 	.word	0x0000b941
    3a58:	00000cc1 	.word	0x00000cc1
    3a5c:	2001a040 	.word	0x2001a040
    3a60:	20018f30 	.word	0x20018f30
    3a64:	f3af 8000 	nop.w
    3a68:	f3af 8000 	nop.w
    3a6c:	f3af 8000 	nop.w
    3a70:	f3af 8000 	nop.w
    3a74:	f3af 8000 	nop.w
    3a78:	f3af 8000 	nop.w
    3a7c:	f3af 8000 	nop.w

00003a80 <handleSPI>:
	if (foundBrainFirmware)
    3a80:	4972      	ldr	r1, [pc, #456]	; (3c4c <handleSPI+0x1cc>)
	interruptChecker = 1;
    3a82:	4b73      	ldr	r3, [pc, #460]	; (3c50 <handleSPI+0x1d0>)
{
    3a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    3a88:	2501      	movs	r5, #1
{
    3a8a:	4604      	mov	r4, r0
    3a8c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    3a90:	780a      	ldrb	r2, [r1, #0]
{
    3a92:	b089      	sub	sp, #36	; 0x24
	interruptChecker = 1;
    3a94:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    3a96:	b34a      	cbz	r2, 3aec <handleSPI+0x6c>
		if (brainFirmwareEndSignal)
    3a98:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 3c68 <handleSPI+0x1e8>
    3a9c:	f8d9 0000 	ldr.w	r0, [r9]
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d041      	beq.n	3b28 <handleSPI+0xa8>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3aa4:	4b6b      	ldr	r3, [pc, #428]	; (3c54 <handleSPI+0x1d4>)
    3aa6:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3aa8:	4a6b      	ldr	r2, [pc, #428]	; (3c58 <handleSPI+0x1d8>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3aaa:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    3aac:	4c6b      	ldr	r4, [pc, #428]	; (3c5c <handleSPI+0x1dc>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3aae:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3ab0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    3ab4:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    3ab6:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3ab8:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    3aba:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3abc:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    3abe:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3ac2:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ac4:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3ac6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    3aca:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3ace:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ad2:	bf18      	it	ne
    3ad4:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3ad6:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    3ada:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    3ae2:	b009      	add	sp, #36	; 0x24
    3ae4:	ecbd 8b02 	vpop	{d8}
    3ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    3aec:	4f59      	ldr	r7, [pc, #356]	; (3c54 <handleSPI+0x1d4>)
    3aee:	5c3b      	ldrb	r3, [r7, r0]
    3af0:	2b01      	cmp	r3, #1
    3af2:	f000 80bd 	beq.w	3c70 <handleSPI+0x1f0>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    3af6:	2b0e      	cmp	r3, #14
    3af8:	f200 8266 	bhi.w	3fc8 <handleSPI+0x548>
    3afc:	2b01      	cmp	r3, #1
    3afe:	f240 8145 	bls.w	3d8c <handleSPI+0x30c>
    3b02:	3b02      	subs	r3, #2
    3b04:	2b0c      	cmp	r3, #12
    3b06:	f200 8141 	bhi.w	3d8c <handleSPI+0x30c>
    3b0a:	e8df f013 	tbh	[pc, r3, lsl #1]
    3b0e:	02f0      	.short	0x02f0
    3b10:	013f09b2 	.word	0x013f09b2
    3b14:	0b86013f 	.word	0x0b86013f
    3b18:	013f0ae3 	.word	0x013f0ae3
    3b1c:	0b70013f 	.word	0x0b70013f
    3b20:	0abf0323 	.word	0x0abf0323
    3b24:	04750359 	.word	0x04750359
		else if (brainFirmwareSendInProgress)
    3b28:	4a4c      	ldr	r2, [pc, #304]	; (3c5c <handleSPI+0x1dc>)
    3b2a:	6813      	ldr	r3, [r2, #0]
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	f000 8263 	beq.w	3ff8 <handleSPI+0x578>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    3b32:	4f48      	ldr	r7, [pc, #288]	; (3c54 <handleSPI+0x1d4>)
    3b34:	23fb      	movs	r3, #251	; 0xfb
    3b36:	f8df b134 	ldr.w	fp, [pc, #308]	; 3c6c <handleSPI+0x1ec>
    3b3a:	eb07 0a04 	add.w	sl, r7, r4
    3b3e:	4d48      	ldr	r5, [pc, #288]	; (3c60 <handleSPI+0x1e0>)
    3b40:	f8db 2000 	ldr.w	r2, [fp]
    3b44:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    3b48:	4b46      	ldr	r3, [pc, #280]	; (3c64 <handleSPI+0x1e4>)
    3b4a:	8819      	ldrh	r1, [r3, #0]
    3b4c:	e032      	b.n	3bb4 <handleSPI+0x134>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b4e:	2e3a      	cmp	r6, #58	; 0x3a
    3b50:	f000 8298 	beq.w	4084 <handleSPI+0x604>
    3b54:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3b58:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b5c:	bf08      	it	eq
    3b5e:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b60:	18ab      	adds	r3, r5, r2
    3b62:	789b      	ldrb	r3, [r3, #2]
    3b64:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b66:	bf08      	it	eq
    3b68:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b6a:	18ab      	adds	r3, r5, r2
    3b6c:	78db      	ldrb	r3, [r3, #3]
    3b6e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b70:	bf08      	it	eq
    3b72:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b74:	18ab      	adds	r3, r5, r2
    3b76:	791b      	ldrb	r3, [r3, #4]
    3b78:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b7a:	bf08      	it	eq
    3b7c:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b7e:	18ab      	adds	r3, r5, r2
    3b80:	795b      	ldrb	r3, [r3, #5]
    3b82:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b84:	bf08      	it	eq
    3b86:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b88:	18ab      	adds	r3, r5, r2
    3b8a:	799b      	ldrb	r3, [r3, #6]
    3b8c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b8e:	bf08      	it	eq
    3b90:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b92:	18ab      	adds	r3, r5, r2
    3b94:	79db      	ldrb	r3, [r3, #7]
    3b96:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b98:	bf08      	it	eq
    3b9a:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b9c:	18ab      	adds	r3, r5, r2
    3b9e:	7a1b      	ldrb	r3, [r3, #8]
    3ba0:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3ba2:	bf08      	it	eq
    3ba4:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3ba6:	18ab      	adds	r3, r5, r2
    3ba8:	7a5b      	ldrb	r3, [r3, #9]
    3baa:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3bac:	bf08      	it	eq
    3bae:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    3bb0:	281e      	cmp	r0, #30
    3bb2:	d03a      	beq.n	3c2a <handleSPI+0x1aa>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    3bb4:	5cae      	ldrb	r6, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3bb6:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    3bba:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3bbe:	f815 e00c 	ldrb.w	lr, [r5, ip]
	if (('0' <= value) && (value <= '9'))
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	2b09      	cmp	r3, #9
    3bc6:	f240 823e 	bls.w	4046 <handleSPI+0x5c6>
	if (('a' <= value) && (value <= 'f'))
    3bca:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    3bce:	2b05      	cmp	r3, #5
    3bd0:	f240 824c 	bls.w	406c <handleSPI+0x5ec>
	if (('A' <= value) && (value <= 'F'))
    3bd4:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    3bd8:	2b05      	cmp	r3, #5
    3bda:	f240 824d 	bls.w	4078 <handleSPI+0x5f8>
    3bde:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    3be0:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    3be4:	fa5f f888 	uxtb.w	r8, r8
    3be8:	f1b8 0f09 	cmp.w	r8, #9
    3bec:	f240 8235 	bls.w	405a <handleSPI+0x5da>
	if (('a' <= value) && (value <= 'f'))
    3bf0:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    3bf4:	f1b8 0f05 	cmp.w	r8, #5
    3bf8:	f240 8232 	bls.w	4060 <handleSPI+0x5e0>
	if (('A' <= value) && (value <= 'F'))
    3bfc:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    3c00:	f1b8 0f05 	cmp.w	r8, #5
    3c04:	d804      	bhi.n	3c10 <handleSPI+0x190>
		return (uint8_t) (10 + value - 'A');
    3c06:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3c0a:	ea43 0308 	orr.w	r3, r3, r8
    3c0e:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    3c10:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    3c14:	d29b      	bcs.n	3b4e <handleSPI+0xce>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3c16:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    3c1a:	3001      	adds	r0, #1
				positionInRowLine++;
    3c1c:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    3c1e:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    3c20:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3c22:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    3c26:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    3c28:	d1c4      	bne.n	3bb4 <handleSPI+0x134>
    3c2a:	4b0e      	ldr	r3, [pc, #56]	; (3c64 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+31] = 254;
    3c2c:	4427      	add	r7, r4
    3c2e:	f8cb 2000 	str.w	r2, [fp]
    3c32:	8019      	strh	r1, [r3, #0]
    3c34:	23fe      	movs	r3, #254	; 0xfe
    3c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    3c3a:	4b07      	ldr	r3, [pc, #28]	; (3c58 <handleSPI+0x1d8>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	4293      	cmp	r3, r2
    3c40:	f63f af4f 	bhi.w	3ae2 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    3c44:	2301      	movs	r3, #1
    3c46:	f8c9 3000 	str.w	r3, [r9]
    3c4a:	e74a      	b.n	3ae2 <handleSPI+0x62>
    3c4c:	200164dc 	.word	0x200164dc
    3c50:	200164df 	.word	0x200164df
    3c54:	30000800 	.word	0x30000800
    3c58:	20014310 	.word	0x20014310
    3c5c:	2001430c 	.word	0x2001430c
    3c60:	61e00000 	.word	0x61e00000
    3c64:	2001a070 	.word	0x2001a070
    3c68:	20014308 	.word	0x20014308
    3c6c:	20014304 	.word	0x20014304
			 for (int i = 0; i < numStringsThisBoard; i++)
    3c70:	4bc9      	ldr	r3, [pc, #804]	; (3f98 <handleSPI+0x518>)
    3c72:	7818      	ldrb	r0, [r3, #0]
    3c74:	2800      	cmp	r0, #0
    3c76:	f000 8083 	beq.w	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c7a:	49c8      	ldr	r1, [pc, #800]	; (3f9c <handleSPI+0x51c>)
			 uint8_t currentByte = offset+1;
    3c7c:	1c63      	adds	r3, r4, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3c7e:	eddf 6ac8 	vldr	s13, [pc, #800]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c82:	680a      	ldr	r2, [r1, #0]
    3c84:	b2db      	uxtb	r3, r3
    3c86:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3c8a:	5cd2      	ldrb	r2, [r2, r3]
    3c8c:	0212      	lsls	r2, r2, #8
    3c8e:	ee07 2a90 	vmov	s15, r2
    3c92:	680a      	ldr	r2, [r1, #0]
    3c94:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3c9c:	441a      	add	r2, r3
    3c9e:	7852      	ldrb	r2, [r2, #1]
    3ca0:	ee07 2a90 	vmov	s15, r2
    3ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cac:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cb8:	dd09      	ble.n	3cce <handleSPI+0x24e>
    3cba:	eddf 6aba 	vldr	s13, [pc, #744]	; 3fa4 <handleSPI+0x524>
    3cbe:	eef4 7a66 	vcmp.f32	s15, s13
    3cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cc6:	d502      	bpl.n	3cce <handleSPI+0x24e>
					stringMIDIPitches[i] = myPitch;
    3cc8:	4ab7      	ldr	r2, [pc, #732]	; (3fa8 <handleSPI+0x528>)
    3cca:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3cce:	2801      	cmp	r0, #1
    3cd0:	d056      	beq.n	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cd2:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cd4:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 3fa4 <handleSPI+0x524>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cd8:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cda:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cde:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3ce2:	5cd2      	ldrb	r2, [r2, r3]
    3ce4:	0212      	lsls	r2, r2, #8
    3ce6:	ee07 2a90 	vmov	s15, r2
    3cea:	680a      	ldr	r2, [r1, #0]
    3cec:	3201      	adds	r2, #1
    3cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3cf2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3cf6:	441a      	add	r2, r3
    3cf8:	7852      	ldrb	r2, [r2, #1]
    3cfa:	ee06 2a90 	vmov	s13, r2
    3cfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d06:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d12:	d507      	bpl.n	3d24 <handleSPI+0x2a4>
    3d14:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d1c:	dd02      	ble.n	3d24 <handleSPI+0x2a4>
					stringMIDIPitches[i] = myPitch;
    3d1e:	4aa2      	ldr	r2, [pc, #648]	; (3fa8 <handleSPI+0x528>)
    3d20:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d24:	2802      	cmp	r0, #2
    3d26:	d02b      	beq.n	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d28:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d2a:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d2e:	3202      	adds	r2, #2
    3d30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3d34:	5cd2      	ldrb	r2, [r2, r3]
    3d36:	0212      	lsls	r2, r2, #8
    3d38:	ee07 2a90 	vmov	s15, r2
    3d3c:	680a      	ldr	r2, [r1, #0]
    3d3e:	3202      	adds	r2, #2
    3d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d44:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3d48:	441a      	add	r2, r3
    3d4a:	7852      	ldrb	r2, [r2, #1]
    3d4c:	ee06 2a90 	vmov	s13, r2
    3d50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d58:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d64:	dd09      	ble.n	3d7a <handleSPI+0x2fa>
    3d66:	eddf 6a8f 	vldr	s13, [pc, #572]	; 3fa4 <handleSPI+0x524>
    3d6a:	eef4 7a66 	vcmp.f32	s15, s13
    3d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d72:	d502      	bpl.n	3d7a <handleSPI+0x2fa>
					stringMIDIPitches[i] = myPitch;
    3d74:	4a8c      	ldr	r2, [pc, #560]	; (3fa8 <handleSPI+0x528>)
    3d76:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d7a:	2803      	cmp	r0, #3
    3d7c:	f040 8187 	bne.w	408e <handleSPI+0x60e>
			 whichBar = 0;
    3d80:	4b8a      	ldr	r3, [pc, #552]	; (3fac <handleSPI+0x52c>)
    3d82:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    3d84:	4620      	mov	r0, r4
			 whichBar = 0;
    3d86:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    3d88:	f7fd fb2a 	bl	13e0 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    3d8c:	4b88      	ldr	r3, [pc, #544]	; (3fb0 <handleSPI+0x530>)
    3d8e:	781b      	ldrb	r3, [r3, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	f47f aea6 	bne.w	3ae2 <handleSPI+0x62>
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3d96:	1c62      	adds	r2, r4, #1
    3d98:	4886      	ldr	r0, [pc, #536]	; (3fb4 <handleSPI+0x534>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3d9a:	443c      	add	r4, r7
    3d9c:	23fd      	movs	r3, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3d9e:	443a      	add	r2, r7
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3da0:	4985      	ldr	r1, [pc, #532]	; (3fb8 <handleSPI+0x538>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3da2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3da6:	25c8      	movs	r5, #200	; 0xc8
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3da8:	4b84      	ldr	r3, [pc, #528]	; (3fbc <handleSPI+0x53c>)
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3daa:	4f85      	ldr	r7, [pc, #532]	; (3fc0 <handleSPI+0x540>)
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3dac:	781e      	ldrb	r6, [r3, #0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3dae:	f8df c214 	ldr.w	ip, [pc, #532]	; 3fc4 <handleSPI+0x544>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3db2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3db6:	781a      	ldrb	r2, [r3, #0]
    3db8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dbc:	0052      	lsls	r2, r2, #1
    3dbe:	5c8a      	ldrb	r2, [r1, r2]
    3dc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3dc4:	781a      	ldrb	r2, [r3, #0]
    3dc6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dce:	7852      	ldrb	r2, [r2, #1]
    3dd0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    3dd4:	781a      	ldrb	r2, [r3, #0]
    3dd6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dda:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dde:	7892      	ldrb	r2, [r2, #2]
    3de0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dee:	78d2      	ldrb	r2, [r2, #3]
    3df0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    3df4:	781a      	ldrb	r2, [r3, #0]
    3df6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dfa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dfe:	7912      	ldrb	r2, [r2, #4]
    3e00:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    3e04:	781a      	ldrb	r2, [r3, #0]
    3e06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e0a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e0e:	7952      	ldrb	r2, [r2, #5]
    3e10:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    3e14:	781a      	ldrb	r2, [r3, #0]
    3e16:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e1e:	7992      	ldrb	r2, [r2, #6]
    3e20:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    3e24:	781a      	ldrb	r2, [r3, #0]
    3e26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e2a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e2e:	79d2      	ldrb	r2, [r2, #7]
    3e30:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e3e:	7a12      	ldrb	r2, [r2, #8]
    3e40:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    3e44:	781a      	ldrb	r2, [r3, #0]
    3e46:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e4a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e4e:	7a52      	ldrb	r2, [r2, #9]
    3e50:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3e54:	781a      	ldrb	r2, [r3, #0]
    3e56:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e5a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e5e:	7a92      	ldrb	r2, [r2, #10]
    3e60:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    3e64:	781a      	ldrb	r2, [r3, #0]
    3e66:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e6e:	7ad2      	ldrb	r2, [r2, #11]
    3e70:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    3e74:	781a      	ldrb	r2, [r3, #0]
    3e76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e7a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e7e:	7b12      	ldrb	r2, [r2, #12]
    3e80:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3e84:	781a      	ldrb	r2, [r3, #0]
    3e86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e8a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    3e8e:	7b4a      	ldrb	r2, [r1, #13]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e90:	781e      	ldrb	r6, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3e92:	7839      	ldrb	r1, [r7, #0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e94:	fb05 f606 	mul.w	r6, r5, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3e98:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e9c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3ea0:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
				whichMacroToSendName = (whichMacroToSendName + 1);
    3ea4:	3101      	adds	r1, #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3ea6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
				whichMacroToSendName = (whichMacroToSendName + 1);
    3eaa:	b2c9      	uxtb	r1, r1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3eac:	5d86      	ldrb	r6, [r0, r6]
    3eae:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    3eb2:	781e      	ldrb	r6, [r3, #0]
    3eb4:	fb05 f606 	mul.w	r6, r5, r6
    3eb8:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ebc:	4406      	add	r6, r0
    3ebe:	7876      	ldrb	r6, [r6, #1]
    3ec0:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    3ec4:	781e      	ldrb	r6, [r3, #0]
    3ec6:	fb05 f606 	mul.w	r6, r5, r6
    3eca:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ece:	4406      	add	r6, r0
    3ed0:	78b6      	ldrb	r6, [r6, #2]
    3ed2:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    3ed6:	781e      	ldrb	r6, [r3, #0]
    3ed8:	fb05 f606 	mul.w	r6, r5, r6
    3edc:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ee0:	4406      	add	r6, r0
    3ee2:	78f6      	ldrb	r6, [r6, #3]
    3ee4:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    3ee8:	781e      	ldrb	r6, [r3, #0]
    3eea:	fb05 f606 	mul.w	r6, r5, r6
    3eee:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ef2:	4406      	add	r6, r0
    3ef4:	7936      	ldrb	r6, [r6, #4]
    3ef6:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    3efa:	781e      	ldrb	r6, [r3, #0]
    3efc:	fb05 f606 	mul.w	r6, r5, r6
    3f00:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f04:	4406      	add	r6, r0
    3f06:	7976      	ldrb	r6, [r6, #5]
    3f08:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    3f0c:	781e      	ldrb	r6, [r3, #0]
    3f0e:	fb05 f606 	mul.w	r6, r5, r6
    3f12:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f16:	4406      	add	r6, r0
    3f18:	79b6      	ldrb	r6, [r6, #6]
    3f1a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    3f1e:	781e      	ldrb	r6, [r3, #0]
    3f20:	fb05 f606 	mul.w	r6, r5, r6
    3f24:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f28:	4406      	add	r6, r0
    3f2a:	79f6      	ldrb	r6, [r6, #7]
    3f2c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3f30:	781e      	ldrb	r6, [r3, #0]
    3f32:	fb05 f606 	mul.w	r6, r5, r6
    3f36:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f3a:	4406      	add	r6, r0
    3f3c:	7a36      	ldrb	r6, [r6, #8]
    3f3e:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3f42:	781e      	ldrb	r6, [r3, #0]
    3f44:	fb06 f505 	mul.w	r5, r6, r5
    3f48:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f4c:	4410      	add	r0, r2
    3f4e:	7a42      	ldrb	r2, [r0, #9]
    3f50:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3f54:	f8bc 2000 	ldrh.w	r2, [ip]
    3f58:	b292      	uxth	r2, r2
    3f5a:	3a00      	subs	r2, #0
    3f5c:	bf18      	it	ne
    3f5e:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 20)
    3f60:	2913      	cmp	r1, #19
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3f62:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    3f66:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    3f6a:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				SPI_LEVERS_TX[offset+27] = 13;
    3f6e:	f04f 020d 	mov.w	r2, #13
    3f72:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    3f76:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    3f7a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				if (whichMacroToSendName >= 20)
    3f7e:	d95c      	bls.n	403a <handleSPI+0x5ba>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f80:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    3f82:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f84:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    3f86:	7039      	strb	r1, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3f8c:	701a      	strb	r2, [r3, #0]
}
    3f8e:	b009      	add	sp, #36	; 0x24
    3f90:	ecbd 8b02 	vpop	{d8}
    3f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f98:	20000694 	.word	0x20000694
    3f9c:	200051d0 	.word	0x200051d0
    3fa0:	3b000080 	.word	0x3b000080
    3fa4:	478bff74 	.word	0x478bff74
    3fa8:	20014228 	.word	0x20014228
    3fac:	2001426c 	.word	0x2001426c
    3fb0:	20014301 	.word	0x20014301
    3fb4:	30043380 	.word	0x30043380
    3fb8:	30042000 	.word	0x30042000
    3fbc:	2001c68a 	.word	0x2001c68a
    3fc0:	2001c688 	.word	0x2001c688
    3fc4:	2000577e 	.word	0x2000577e
    3fc8:	2bfd      	cmp	r3, #253	; 0xfd
    3fca:	f47f aedf 	bne.w	3d8c <handleSPI+0x30c>
			if(writingState == ReceivingPreset)
    3fce:	4b67      	ldr	r3, [pc, #412]	; (416c <handleSPI+0x6ec>)
    3fd0:	7819      	ldrb	r1, [r3, #0]
    3fd2:	2902      	cmp	r1, #2
    3fd4:	f47f aeda 	bne.w	3d8c <handleSPI+0x30c>
				 presetNumberToLoad = presetNumberToSave;
    3fd8:	4865      	ldr	r0, [pc, #404]	; (4170 <handleSPI+0x6f0>)
				 writingState = 0;
    3fda:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    3fdc:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    3fde:	4a65      	ldr	r2, [pc, #404]	; (4174 <handleSPI+0x6f4>)
				 presetNumberToLoad = presetNumberToSave;
    3fe0:	4965      	ldr	r1, [pc, #404]	; (4178 <handleSPI+0x6f8>)
    3fe2:	b2db      	uxtb	r3, r3
    3fe4:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    3fe6:	8813      	ldrh	r3, [r2, #0]
    3fe8:	4964      	ldr	r1, [pc, #400]	; (417c <handleSPI+0x6fc>)
    3fea:	b29b      	uxth	r3, r3
    3fec:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    3fee:	8813      	ldrh	r3, [r2, #0]
    3ff0:	4a63      	ldr	r2, [pc, #396]	; (4180 <handleSPI+0x700>)
    3ff2:	b29b      	uxth	r3, r3
    3ff4:	6013      	str	r3, [r2, #0]
    3ff6:	e6c9      	b.n	3d8c <handleSPI+0x30c>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    3ff8:	4b62      	ldr	r3, [pc, #392]	; (4184 <handleSPI+0x704>)
    3ffa:	20fc      	movs	r0, #252	; 0xfc
    3ffc:	4962      	ldr	r1, [pc, #392]	; (4188 <handleSPI+0x708>)
    3ffe:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 41bc <handleSPI+0x73c>
			brainFirmwareSendInProgress = 1;
    4002:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    4004:	190a      	adds	r2, r1, r4
    4006:	1c5d      	adds	r5, r3, #1
    4008:	f8db 1000 	ldr.w	r1, [fp]
    400c:	f103 0464 	add.w	r4, r3, #100	; 0x64
    4010:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    4014:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    4016:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    401a:	283a      	cmp	r0, #58	; 0x3a
    401c:	d101      	bne.n	4022 <handleSPI+0x5a2>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    401e:	3202      	adds	r2, #2
    4020:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    4022:	42a3      	cmp	r3, r4
    4024:	d1f6      	bne.n	4014 <handleSPI+0x594>
			positionInRowLine = 0;
    4026:	4b59      	ldr	r3, [pc, #356]	; (418c <handleSPI+0x70c>)
    4028:	2200      	movs	r2, #0
    402a:	f8cb 1000 	str.w	r1, [fp]
    402e:	801a      	strh	r2, [r3, #0]
}
    4030:	b009      	add	sp, #36	; 0x24
    4032:	ecbd 8b02 	vpop	{d8}
    4036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    403a:	7039      	strb	r1, [r7, #0]
}
    403c:	b009      	add	sp, #36	; 0x24
    403e:	ecbd 8b02 	vpop	{d8}
    4042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (('0' <= value) && (value <= '9'))
    4046:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    404a:	011b      	lsls	r3, r3, #4
	if (('0' <= value) && (value <= '9'))
    404c:	fa5f f888 	uxtb.w	r8, r8
    4050:	b2db      	uxtb	r3, r3
    4052:	f1b8 0f09 	cmp.w	r8, #9
    4056:	f63f adcb 	bhi.w	3bf0 <handleSPI+0x170>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    405a:	ea48 0303 	orr.w	r3, r8, r3
    405e:	e5d7      	b.n	3c10 <handleSPI+0x190>
		return (uint8_t) (10 + value - 'a');
    4060:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    4064:	ea43 0308 	orr.w	r3, r3, r8
    4068:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    406a:	e5d1      	b.n	3c10 <handleSPI+0x190>
    406c:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    4070:	011b      	lsls	r3, r3, #4
    4072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    4076:	e5b3      	b.n	3be0 <handleSPI+0x160>
		return (uint8_t) (10 + value - 'A');
    4078:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    407c:	011b      	lsls	r3, r3, #4
    407e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    4082:	e5ad      	b.n	3be0 <handleSPI+0x160>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4084:	18ab      	adds	r3, r5, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4086:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4088:	f893 e002 	ldrb.w	lr, [r3, #2]
    408c:	e562      	b.n	3b54 <handleSPI+0xd4>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    408e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 4190 <handleSPI+0x710>
			 for (int i = 0; i < numStringsThisBoard; i++)
    4092:	2503      	movs	r5, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    4094:	eddf 6a3f 	vldr	s13, [pc, #252]	; 4194 <handleSPI+0x714>
					stringMIDIPitches[i] = myPitch;
    4098:	4e3f      	ldr	r6, [pc, #252]	; (4198 <handleSPI+0x718>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    409a:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    409c:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    40a0:	442a      	add	r2, r5
    40a2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    40a6:	5cd2      	ldrb	r2, [r2, r3]
    40a8:	0212      	lsls	r2, r2, #8
    40aa:	ee07 2a90 	vmov	s15, r2
    40ae:	680a      	ldr	r2, [r1, #0]
    40b0:	442a      	add	r2, r5
    40b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    40b6:	3501      	adds	r5, #1
    40b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    40bc:	441a      	add	r2, r3
    40be:	7852      	ldrb	r2, [r2, #1]
    40c0:	ee07 2a10 	vmov	s14, r2
    40c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    40c8:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    40cc:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    40d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    40d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40d8:	dd06      	ble.n	40e8 <handleSPI+0x668>
    40da:	eef4 7a66 	vcmp.f32	s15, s13
    40de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40e2:	d501      	bpl.n	40e8 <handleSPI+0x668>
					stringMIDIPitches[i] = myPitch;
    40e4:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    40e8:	42a8      	cmp	r0, r5
    40ea:	dcd6      	bgt.n	409a <handleSPI+0x61a>
    40ec:	e648      	b.n	3d80 <handleSPI+0x300>
			 if (writingState != ReceivingPreset)
    40ee:	4a1f      	ldr	r2, [pc, #124]	; (416c <handleSPI+0x6ec>)
    40f0:	7813      	ldrb	r3, [r2, #0]
    40f2:	2b02      	cmp	r3, #2
    40f4:	f001 8172 	beq.w	53dc <handleSPI+0x195c>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    40f8:	4b28      	ldr	r3, [pc, #160]	; (419c <handleSPI+0x71c>)
    40fa:	2102      	movs	r1, #2
    40fc:	0758      	lsls	r0, r3, #29
    40fe:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    4100:	f041 8643 	bne.w	5d8a <handleSPI+0x230a>
    4104:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    4108:	2000      	movs	r0, #0
    410a:	2100      	movs	r1, #0
    410c:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    4110:	4293      	cmp	r3, r2
    4112:	d1fb      	bne.n	410c <handleSPI+0x68c>
				 diskBusy = 1;
    4114:	4a22      	ldr	r2, [pc, #136]	; (41a0 <handleSPI+0x720>)
    4116:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    4118:	4b22      	ldr	r3, [pc, #136]	; (41a4 <handleSPI+0x724>)
				 diskBusy = 1;
    411a:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    411c:	2200      	movs	r2, #0
				 bufferPos = 0;
    411e:	4915      	ldr	r1, [pc, #84]	; (4174 <handleSPI+0x6f4>)
				 audioMasterLevel = 0.0f;
    4120:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    4122:	2300      	movs	r3, #0
    4124:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    4126:	193b      	adds	r3, r7, r4
    4128:	4a11      	ldr	r2, [pc, #68]	; (4170 <handleSPI+0x6f0>)
    412a:	4e1f      	ldr	r6, [pc, #124]	; (41a8 <handleSPI+0x728>)
    412c:	785b      	ldrb	r3, [r3, #1]
    412e:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    4130:	1ca3      	adds	r3, r4, #2
    4132:	b2db      	uxtb	r3, r3
    4134:	1e58      	subs	r0, r3, #1
    4136:	441e      	add	r6, r3
    4138:	4b1c      	ldr	r3, [pc, #112]	; (41ac <handleSPI+0x72c>)
    413a:	4438      	add	r0, r7
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    413c:	880a      	ldrh	r2, [r1, #0]
    413e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    4142:	b292      	uxth	r2, r2
			 for (int i = 0; i < 28; i++)
    4144:	4286      	cmp	r6, r0
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    4146:	549d      	strb	r5, [r3, r2]
    4148:	f102 0201 	add.w	r2, r2, #1
    414c:	b292      	uxth	r2, r2
    414e:	800a      	strh	r2, [r1, #0]
			 for (int i = 0; i < 28; i++)
    4150:	d1f4      	bne.n	413c <handleSPI+0x6bc>
    4152:	e61b      	b.n	3d8c <handleSPI+0x30c>
			if (boardNumber == 0)
    4154:	4b16      	ldr	r3, [pc, #88]	; (41b0 <handleSPI+0x730>)
    4156:	781b      	ldrb	r3, [r3, #0]
    4158:	2b00      	cmp	r3, #0
    415a:	f47f acc2 	bne.w	3ae2 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    415e:	2101      	movs	r1, #1
    4160:	4b14      	ldr	r3, [pc, #80]	; (41b4 <handleSPI+0x734>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    4162:	1842      	adds	r2, r0, r1
				brainFirmwareUpdateRequested = 1;
    4164:	6019      	str	r1, [r3, #0]
    4166:	4814      	ldr	r0, [pc, #80]	; (41b8 <handleSPI+0x738>)
    4168:	e617      	b.n	3d9a <handleSPI+0x31a>
    416a:	bf00      	nop
    416c:	2001c68b 	.word	0x2001c68b
    4170:	2001a083 	.word	0x2001a083
    4174:	20014318 	.word	0x20014318
    4178:	2001a082 	.word	0x2001a082
    417c:	2001a088 	.word	0x2001a088
    4180:	2001a08c 	.word	0x2001a08c
    4184:	61dfffff 	.word	0x61dfffff
    4188:	30000800 	.word	0x30000800
    418c:	2001a070 	.word	0x2001a070
    4190:	3b000080 	.word	0x3b000080
    4194:	478bff74 	.word	0x478bff74
    4198:	20014228 	.word	0x20014228
    419c:	30000000 	.word	0x30000000
    41a0:	2001435c 	.word	0x2001435c
    41a4:	200006a8 	.word	0x200006a8
    41a8:	3000081b 	.word	0x3000081b
    41ac:	30042380 	.word	0x30042380
    41b0:	20014301 	.word	0x20014301
    41b4:	20014314 	.word	0x20014314
    41b8:	30043380 	.word	0x30043380
    41bc:	20014304 	.word	0x20014304
			 uint8_t currentByte = offset+1;
    41c0:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[whichKnob])
    41c4:	4e87      	ldr	r6, [pc, #540]	; (43e4 <handleSPI+0x964>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    41c6:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[whichKnob])
    41ca:	7b33      	ldrb	r3, [r6, #12]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    41cc:	f817 9008 	ldrb.w	r9, [r7, r8]
				if (knobFrozen[whichKnob])
    41d0:	2b00      	cmp	r3, #0
    41d2:	f001 8214 	beq.w	55fe <handleSPI+0x1b7e>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    41d6:	4d84      	ldr	r5, [pc, #528]	; (43e8 <handleSPI+0x968>)
    41d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    41da:	3303      	adds	r3, #3
    41dc:	4599      	cmp	r9, r3
    41de:	dc03      	bgt.n	41e8 <handleSPI+0x768>
    41e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    41e2:	3b03      	subs	r3, #3
    41e4:	4599      	cmp	r9, r3
    41e6:	da03      	bge.n	41f0 <handleSPI+0x770>
						knobFrozen[whichKnob] = 0;
    41e8:	2300      	movs	r3, #0
    41ea:	7333      	strb	r3, [r6, #12]
						prevKnobByte[whichKnob] = newByte;
    41ec:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    41f0:	eb07 0308 	add.w	r3, r7, r8
    41f4:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[whichKnob])
    41f8:	7b73      	ldrb	r3, [r6, #13]
    41fa:	2b00      	cmp	r3, #0
    41fc:	f001 81f0 	beq.w	55e0 <handleSPI+0x1b60>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4200:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    4202:	3303      	adds	r3, #3
    4204:	4599      	cmp	r9, r3
    4206:	dc03      	bgt.n	4210 <handleSPI+0x790>
    4208:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    420a:	3b03      	subs	r3, #3
    420c:	4599      	cmp	r9, r3
    420e:	da03      	bge.n	4218 <handleSPI+0x798>
						knobFrozen[whichKnob] = 0;
    4210:	2300      	movs	r3, #0
    4212:	7373      	strb	r3, [r6, #13]
						prevKnobByte[whichKnob] = newByte;
    4214:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4218:	eb07 0308 	add.w	r3, r7, r8
    421c:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[whichKnob])
    4220:	7bb3      	ldrb	r3, [r6, #14]
    4222:	2b00      	cmp	r3, #0
    4224:	f001 8177 	beq.w	5516 <handleSPI+0x1a96>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4228:	6bab      	ldr	r3, [r5, #56]	; 0x38
    422a:	3303      	adds	r3, #3
    422c:	4599      	cmp	r9, r3
    422e:	dc03      	bgt.n	4238 <handleSPI+0x7b8>
    4230:	6bab      	ldr	r3, [r5, #56]	; 0x38
    4232:	3b03      	subs	r3, #3
    4234:	4599      	cmp	r9, r3
    4236:	da03      	bge.n	4240 <handleSPI+0x7c0>
						knobFrozen[whichKnob] = 0;
    4238:	2300      	movs	r3, #0
    423a:	73b3      	strb	r3, [r6, #14]
						prevKnobByte[whichKnob] = newByte;
    423c:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4240:	eb07 0308 	add.w	r3, r7, r8
    4244:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[whichKnob])
    4248:	7bf3      	ldrb	r3, [r6, #15]
    424a:	2b00      	cmp	r3, #0
    424c:	f001 8154 	beq.w	54f8 <handleSPI+0x1a78>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4250:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4252:	3303      	adds	r3, #3
    4254:	4599      	cmp	r9, r3
    4256:	dc03      	bgt.n	4260 <handleSPI+0x7e0>
    4258:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    425a:	3b03      	subs	r3, #3
    425c:	4599      	cmp	r9, r3
    425e:	da03      	bge.n	4268 <handleSPI+0x7e8>
						knobFrozen[whichKnob] = 0;
    4260:	2300      	movs	r3, #0
    4262:	73f3      	strb	r3, [r6, #15]
						prevKnobByte[whichKnob] = newByte;
    4264:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4268:	eb07 0308 	add.w	r3, r7, r8
    426c:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[whichKnob])
    4270:	7c33      	ldrb	r3, [r6, #16]
    4272:	2b00      	cmp	r3, #0
    4274:	f001 8131 	beq.w	54da <handleSPI+0x1a5a>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4278:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    427a:	3303      	adds	r3, #3
    427c:	4599      	cmp	r9, r3
    427e:	dc03      	bgt.n	4288 <handleSPI+0x808>
    4280:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    4282:	3b03      	subs	r3, #3
    4284:	4599      	cmp	r9, r3
    4286:	da03      	bge.n	4290 <handleSPI+0x810>
						knobFrozen[whichKnob] = 0;
    4288:	2300      	movs	r3, #0
    428a:	7433      	strb	r3, [r6, #16]
						prevKnobByte[whichKnob] = newByte;
    428c:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4290:	eb07 0308 	add.w	r3, r7, r8
    4294:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[whichKnob])
    4298:	7c73      	ldrb	r3, [r6, #17]
    429a:	2b00      	cmp	r3, #0
    429c:	f001 810e 	beq.w	54bc <handleSPI+0x1a3c>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42a0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    42a2:	3303      	adds	r3, #3
    42a4:	4599      	cmp	r9, r3
    42a6:	dc03      	bgt.n	42b0 <handleSPI+0x830>
    42a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    42aa:	3b03      	subs	r3, #3
    42ac:	4599      	cmp	r9, r3
    42ae:	da03      	bge.n	42b8 <handleSPI+0x838>
						knobFrozen[whichKnob] = 0;
    42b0:	2300      	movs	r3, #0
    42b2:	7473      	strb	r3, [r6, #17]
						prevKnobByte[whichKnob] = newByte;
    42b4:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    42b8:	eb07 0308 	add.w	r3, r7, r8
    42bc:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[whichKnob])
    42c0:	7cb3      	ldrb	r3, [r6, #18]
    42c2:	2b00      	cmp	r3, #0
    42c4:	f001 80eb 	beq.w	549e <handleSPI+0x1a1e>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42c8:	6cab      	ldr	r3, [r5, #72]	; 0x48
    42ca:	3303      	adds	r3, #3
    42cc:	4599      	cmp	r9, r3
    42ce:	dc03      	bgt.n	42d8 <handleSPI+0x858>
    42d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    42d2:	3b03      	subs	r3, #3
    42d4:	4599      	cmp	r9, r3
    42d6:	da03      	bge.n	42e0 <handleSPI+0x860>
						knobFrozen[whichKnob] = 0;
    42d8:	2300      	movs	r3, #0
    42da:	74b3      	strb	r3, [r6, #18]
						prevKnobByte[whichKnob] = newByte;
    42dc:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    42e0:	eb07 0308 	add.w	r3, r7, r8
    42e4:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[whichKnob])
    42e8:	7cf3      	ldrb	r3, [r6, #19]
    42ea:	2b00      	cmp	r3, #0
    42ec:	f001 80c8 	beq.w	5480 <handleSPI+0x1a00>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42f0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    42f2:	3303      	adds	r3, #3
    42f4:	454b      	cmp	r3, r9
    42f6:	db03      	blt.n	4300 <handleSPI+0x880>
    42f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    42fa:	3b03      	subs	r3, #3
    42fc:	454b      	cmp	r3, r9
    42fe:	dd03      	ble.n	4308 <handleSPI+0x888>
						knobFrozen[whichKnob] = 0;
    4300:	2300      	movs	r3, #0
    4302:	74f3      	strb	r3, [r6, #19]
						prevKnobByte[whichKnob] = newByte;
    4304:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4308:	eb07 0308 	add.w	r3, r7, r8
    430c:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[whichKnob])
    4310:	7a33      	ldrb	r3, [r6, #8]
    4312:	2b00      	cmp	r3, #0
    4314:	f001 8074 	beq.w	5400 <handleSPI+0x1980>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4318:	6a2b      	ldr	r3, [r5, #32]
    431a:	3303      	adds	r3, #3
    431c:	4599      	cmp	r9, r3
    431e:	dc03      	bgt.n	4328 <handleSPI+0x8a8>
    4320:	6a2b      	ldr	r3, [r5, #32]
    4322:	3b03      	subs	r3, #3
    4324:	4599      	cmp	r9, r3
    4326:	da03      	bge.n	4330 <handleSPI+0x8b0>
						knobFrozen[whichKnob] = 0;
    4328:	2300      	movs	r3, #0
    432a:	7233      	strb	r3, [r6, #8]
						prevKnobByte[whichKnob] = newByte;
    432c:	f8c5 9020 	str.w	r9, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4330:	eb07 0308 	add.w	r3, r7, r8
    4334:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[whichKnob])
    4338:	7a73      	ldrb	r3, [r6, #9]
    433a:	2b00      	cmp	r3, #0
    433c:	f001 8051 	beq.w	53e2 <handleSPI+0x1962>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4340:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4342:	3303      	adds	r3, #3
    4344:	4599      	cmp	r9, r3
    4346:	dc03      	bgt.n	4350 <handleSPI+0x8d0>
    4348:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    434a:	3b03      	subs	r3, #3
    434c:	4599      	cmp	r9, r3
    434e:	da03      	bge.n	4358 <handleSPI+0x8d8>
						knobFrozen[whichKnob] = 0;
    4350:	2300      	movs	r3, #0
    4352:	7273      	strb	r3, [r6, #9]
						prevKnobByte[whichKnob] = newByte;
    4354:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4358:	eb07 0308 	add.w	r3, r7, r8
    435c:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[whichKnob])
    4360:	7ab3      	ldrb	r3, [r6, #10]
    4362:	2b00      	cmp	r3, #0
    4364:	f001 812d 	beq.w	55c2 <handleSPI+0x1b42>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4368:	6aab      	ldr	r3, [r5, #40]	; 0x28
    436a:	3303      	adds	r3, #3
    436c:	4599      	cmp	r9, r3
    436e:	dc03      	bgt.n	4378 <handleSPI+0x8f8>
    4370:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4372:	3b03      	subs	r3, #3
    4374:	4599      	cmp	r9, r3
    4376:	da03      	bge.n	4380 <handleSPI+0x900>
						knobFrozen[whichKnob] = 0;
    4378:	2300      	movs	r3, #0
    437a:	72b3      	strb	r3, [r6, #10]
						prevKnobByte[whichKnob] = newByte;
    437c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4380:	44b8      	add	r8, r7
				if (knobFrozen[whichKnob])
    4382:	7af3      	ldrb	r3, [r6, #11]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4384:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[whichKnob])
    4388:	2b00      	cmp	r3, #0
    438a:	f001 810b 	beq.w	55a4 <handleSPI+0x1b24>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    438e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4390:	3303      	adds	r3, #3
    4392:	4543      	cmp	r3, r8
    4394:	db03      	blt.n	439e <handleSPI+0x91e>
    4396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4398:	3b03      	subs	r3, #3
    439a:	4543      	cmp	r3, r8
    439c:	dd03      	ble.n	43a6 <handleSPI+0x926>
						knobFrozen[whichKnob] = 0;
    439e:	2300      	movs	r3, #0
    43a0:	72f3      	strb	r3, [r6, #11]
						prevKnobByte[whichKnob] = newByte;
    43a2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
			currentByte += 12;
    43a6:	f104 060d 	add.w	r6, r4, #13
    43aa:	4d10      	ldr	r5, [pc, #64]	; (43ec <handleSPI+0x96c>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    43ac:	ed9f 8a10 	vldr	s16, [pc, #64]	; 43f0 <handleSPI+0x970>
    43b0:	b2f6      	uxtb	r6, r6
    43b2:	f105 0828 	add.w	r8, r5, #40	; 0x28
    43b6:	3e01      	subs	r6, #1
    43b8:	443e      	add	r6, r7
    43ba:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    43be:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    43c0:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    43c2:	ee00 3a10 	vmov	s0, r3
    43c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    43ca:	ee20 0a08 	vmul.f32	s0, s0, s16
    43ce:	f007 fedb 	bl	c188 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    43d2:	45a8      	cmp	r8, r5
    43d4:	d1f1      	bne.n	43ba <handleSPI+0x93a>
			whichBar = 1;
    43d6:	4b07      	ldr	r3, [pc, #28]	; (43f4 <handleSPI+0x974>)
    43d8:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    43da:	4620      	mov	r0, r4
			whichBar = 1;
    43dc:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    43de:	f7fc ffff 	bl	13e0 <updateStateFromSPIMessage>
    43e2:	e4d3      	b.n	3d8c <handleSPI+0x30c>
    43e4:	200051e0 	.word	0x200051e0
    43e8:	2001a090 	.word	0x2001a090
    43ec:	20005330 	.word	0x20005330
    43f0:	3b808081 	.word	0x3b808081
    43f4:	2001426c 	.word	0x2001426c
			if (boardNumber == 0)
    43f8:	4b19      	ldr	r3, [pc, #100]	; (4460 <handleSPI+0x9e0>)
    43fa:	781b      	ldrb	r3, [r3, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	f47f ab70 	bne.w	3ae2 <handleSPI+0x62>
				uint_fast8_t  currentByte = offset+1;
    4402:	1c42      	adds	r2, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    4404:	f8df 9074 	ldr.w	r9, [pc, #116]	; 447c <handleSPI+0x9fc>
    4408:	4816      	ldr	r0, [pc, #88]	; (4464 <handleSPI+0x9e4>)
    440a:	5cb9      	ldrb	r1, [r7, r2]
    440c:	18bd      	adds	r5, r7, r2
    440e:	eb00 0c04 	add.w	ip, r0, r4
    4412:	f889 1000 	strb.w	r1, [r9]
				bufferPos = 0;
    4416:	4914      	ldr	r1, [pc, #80]	; (4468 <handleSPI+0x9e8>)
    4418:	800b      	strh	r3, [r1, #0]
				for (int i = 0; i < 18; i++)
    441a:	4b14      	ldr	r3, [pc, #80]	; (446c <handleSPI+0x9ec>)
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    441c:	8808      	ldrh	r0, [r1, #0]
    441e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    4422:	b280      	uxth	r0, r0
				for (int i = 0; i < 18; i++)
    4424:	45ac      	cmp	ip, r5
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    4426:	541e      	strb	r6, [r3, r0]
    4428:	f100 0001 	add.w	r0, r0, #1
    442c:	b280      	uxth	r0, r0
    442e:	8008      	strh	r0, [r1, #0]
				for (int i = 0; i < 18; i++)
    4430:	d1f4      	bne.n	441c <handleSPI+0x99c>
				if (whichModel != 0)
    4432:	480f      	ldr	r0, [pc, #60]	; (4470 <handleSPI+0x9f0>)
    4434:	7806      	ldrb	r6, [r0, #0]
    4436:	2e00      	cmp	r6, #0
    4438:	f001 8114 	beq.w	5664 <handleSPI+0x1be4>
					bufferPos = 20;//first byte after name
    443c:	2014      	movs	r0, #20
					for (int j = 0; j < 8; j++)
    443e:	f04f 0800 	mov.w	r8, #0
					bufferPos = 20;//first byte after name
    4442:	8008      	strh	r0, [r1, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4444:	880d      	ldrh	r5, [r1, #0]
					bufferPos++;
    4446:	8808      	ldrh	r0, [r1, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4448:	b2ad      	uxth	r5, r5
					bufferPos++;
    444a:	3001      	adds	r0, #1
    444c:	b280      	uxth	r0, r0
    444e:	8008      	strh	r0, [r1, #0]
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    4450:	2013      	movs	r0, #19
    4452:	7058      	strb	r0, [r3, #1]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4454:	555e      	strb	r6, [r3, r5]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4456:	26c8      	movs	r6, #200	; 0xc8
    4458:	4d06      	ldr	r5, [pc, #24]	; (4474 <handleSPI+0x9f4>)
    445a:	4807      	ldr	r0, [pc, #28]	; (4478 <handleSPI+0x9f8>)
    445c:	e010      	b.n	4480 <handleSPI+0xa00>
    445e:	bf00      	nop
    4460:	20014301 	.word	0x20014301
    4464:	30000813 	.word	0x30000813
    4468:	20014318 	.word	0x20014318
    446c:	30042380 	.word	0x30042380
    4470:	2001c689 	.word	0x2001c689
    4474:	200006ad 	.word	0x200006ad
    4478:	30043380 	.word	0x30043380
    447c:	2001a083 	.word	0x2001a083
    4480:	f895 e000 	ldrb.w	lr, [r5]
    4484:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
    4488:	f8b1 a000 	ldrh.w	sl, [r1]
					for (int j = 0; j < 8; j++)
    448c:	f108 0801 	add.w	r8, r8, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4490:	fb06 fe0e 	mul.w	lr, r6, lr
					for (int j = 0; j < 8; j++)
    4494:	f1b8 0f08 	cmp.w	r8, #8
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4498:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    449c:	f810 b00e 	ldrb.w	fp, [r0, lr]
    44a0:	fa1f fe8a 	uxth.w	lr, sl
    44a4:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    44a8:	f8b1 e000 	ldrh.w	lr, [r1]
    44ac:	f10e 0e01 	add.w	lr, lr, #1
    44b0:	fa1f fe8e 	uxth.w	lr, lr
    44b4:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    44b8:	f895 e000 	ldrb.w	lr, [r5]
    44bc:	f8b1 a000 	ldrh.w	sl, [r1]
    44c0:	fb06 fe0e 	mul.w	lr, r6, lr
    44c4:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    44c8:	4486      	add	lr, r0
    44ca:	f89e b001 	ldrb.w	fp, [lr, #1]
    44ce:	fa1f fe8a 	uxth.w	lr, sl
    44d2:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    44d6:	f8b1 e000 	ldrh.w	lr, [r1]
    44da:	f10e 0e01 	add.w	lr, lr, #1
    44de:	fa1f fe8e 	uxth.w	lr, lr
    44e2:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    44e6:	f895 e000 	ldrb.w	lr, [r5]
    44ea:	f8b1 a000 	ldrh.w	sl, [r1]
    44ee:	fb06 fe0e 	mul.w	lr, r6, lr
    44f2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    44f6:	4486      	add	lr, r0
    44f8:	f89e b002 	ldrb.w	fp, [lr, #2]
    44fc:	fa1f fe8a 	uxth.w	lr, sl
    4500:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4504:	f8b1 e000 	ldrh.w	lr, [r1]
    4508:	f10e 0e01 	add.w	lr, lr, #1
    450c:	fa1f fe8e 	uxth.w	lr, lr
    4510:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4514:	f895 e000 	ldrb.w	lr, [r5]
    4518:	f8b1 a000 	ldrh.w	sl, [r1]
    451c:	fb06 fe0e 	mul.w	lr, r6, lr
    4520:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4524:	4486      	add	lr, r0
    4526:	f89e b003 	ldrb.w	fp, [lr, #3]
    452a:	fa1f fe8a 	uxth.w	lr, sl
    452e:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4532:	f8b1 e000 	ldrh.w	lr, [r1]
    4536:	f10e 0e01 	add.w	lr, lr, #1
    453a:	fa1f fe8e 	uxth.w	lr, lr
    453e:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4542:	f895 e000 	ldrb.w	lr, [r5]
    4546:	f8b1 a000 	ldrh.w	sl, [r1]
    454a:	fb06 fe0e 	mul.w	lr, r6, lr
    454e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4552:	4486      	add	lr, r0
    4554:	f89e b004 	ldrb.w	fp, [lr, #4]
    4558:	fa1f fe8a 	uxth.w	lr, sl
    455c:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4560:	f8b1 e000 	ldrh.w	lr, [r1]
    4564:	f10e 0e01 	add.w	lr, lr, #1
    4568:	fa1f fe8e 	uxth.w	lr, lr
    456c:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4570:	f895 e000 	ldrb.w	lr, [r5]
    4574:	f8b1 a000 	ldrh.w	sl, [r1]
    4578:	fb06 fe0e 	mul.w	lr, r6, lr
    457c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4580:	4486      	add	lr, r0
    4582:	f89e b005 	ldrb.w	fp, [lr, #5]
    4586:	fa1f fe8a 	uxth.w	lr, sl
    458a:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    458e:	f8b1 e000 	ldrh.w	lr, [r1]
    4592:	f10e 0e01 	add.w	lr, lr, #1
    4596:	fa1f fe8e 	uxth.w	lr, lr
    459a:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    459e:	f895 e000 	ldrb.w	lr, [r5]
    45a2:	f8b1 a000 	ldrh.w	sl, [r1]
    45a6:	fb06 fe0e 	mul.w	lr, r6, lr
    45aa:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    45ae:	4486      	add	lr, r0
    45b0:	f89e b006 	ldrb.w	fp, [lr, #6]
    45b4:	fa1f fe8a 	uxth.w	lr, sl
    45b8:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    45bc:	f8b1 e000 	ldrh.w	lr, [r1]
    45c0:	f10e 0e01 	add.w	lr, lr, #1
    45c4:	fa1f fe8e 	uxth.w	lr, lr
    45c8:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    45cc:	f895 e000 	ldrb.w	lr, [r5]
    45d0:	f8b1 a000 	ldrh.w	sl, [r1]
    45d4:	fb06 fe0e 	mul.w	lr, r6, lr
    45d8:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    45dc:	4486      	add	lr, r0
    45de:	f89e b007 	ldrb.w	fp, [lr, #7]
    45e2:	fa1f fe8a 	uxth.w	lr, sl
    45e6:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    45ea:	f8b1 e000 	ldrh.w	lr, [r1]
    45ee:	f10e 0e01 	add.w	lr, lr, #1
    45f2:	fa1f fe8e 	uxth.w	lr, lr
    45f6:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    45fa:	f895 e000 	ldrb.w	lr, [r5]
    45fe:	fb06 fe0e 	mul.w	lr, r6, lr
    4602:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
    4606:	f8b1 e000 	ldrh.w	lr, [r1]
    460a:	4484      	add	ip, r0
    460c:	f89c a008 	ldrb.w	sl, [ip, #8]
    4610:	fa1f fc8e 	uxth.w	ip, lr
    4614:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4618:	f8b1 c000 	ldrh.w	ip, [r1]
    461c:	f10c 0c01 	add.w	ip, ip, #1
    4620:	fa1f fc8c 	uxth.w	ip, ip
    4624:	f8a1 c000 	strh.w	ip, [r1]
					for (int j = 0; j < 8; j++)
    4628:	f47f af2a 	bne.w	4480 <handleSPI+0xa00>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    462c:	f895 e000 	ldrb.w	lr, [r5]
							bufferPos++;
    4630:	f04f 080c 	mov.w	r8, #12
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4634:	f8b1 c000 	ldrh.w	ip, [r1]
    4638:	fb06 0e0e 	mla	lr, r6, lr, r0
    463c:	fa1f fc8c 	uxth.w	ip, ip
    4640:	f89e e050 	ldrb.w	lr, [lr, #80]	; 0x50
    4644:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4648:	f8b1 c000 	ldrh.w	ip, [r1]
    464c:	f10c 0c01 	add.w	ip, ip, #1
    4650:	fa1f fc8c 	uxth.w	ip, ip
    4654:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4658:	f895 e000 	ldrb.w	lr, [r5]
    465c:	f8b1 c000 	ldrh.w	ip, [r1]
    4660:	fb06 0e0e 	mla	lr, r6, lr, r0
    4664:	fa1f fc8c 	uxth.w	ip, ip
    4668:	f89e e051 	ldrb.w	lr, [lr, #81]	; 0x51
    466c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4670:	f8b1 c000 	ldrh.w	ip, [r1]
    4674:	f10c 0c01 	add.w	ip, ip, #1
    4678:	fa1f fc8c 	uxth.w	ip, ip
    467c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4680:	f895 e000 	ldrb.w	lr, [r5]
    4684:	f8b1 c000 	ldrh.w	ip, [r1]
    4688:	fb06 0e0e 	mla	lr, r6, lr, r0
    468c:	fa1f fc8c 	uxth.w	ip, ip
    4690:	f89e e052 	ldrb.w	lr, [lr, #82]	; 0x52
    4694:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4698:	f8b1 c000 	ldrh.w	ip, [r1]
    469c:	f10c 0c01 	add.w	ip, ip, #1
    46a0:	fa1f fc8c 	uxth.w	ip, ip
    46a4:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46a8:	f895 e000 	ldrb.w	lr, [r5]
    46ac:	f8b1 c000 	ldrh.w	ip, [r1]
    46b0:	fb06 0e0e 	mla	lr, r6, lr, r0
    46b4:	fa1f fc8c 	uxth.w	ip, ip
    46b8:	f89e e053 	ldrb.w	lr, [lr, #83]	; 0x53
    46bc:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    46c0:	f8b1 c000 	ldrh.w	ip, [r1]
    46c4:	f10c 0c01 	add.w	ip, ip, #1
    46c8:	fa1f fc8c 	uxth.w	ip, ip
    46cc:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46d0:	f895 e000 	ldrb.w	lr, [r5]
    46d4:	f8b1 c000 	ldrh.w	ip, [r1]
    46d8:	fb06 0e0e 	mla	lr, r6, lr, r0
    46dc:	fa1f fc8c 	uxth.w	ip, ip
    46e0:	f89e e054 	ldrb.w	lr, [lr, #84]	; 0x54
    46e4:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    46e8:	f8b1 c000 	ldrh.w	ip, [r1]
    46ec:	f10c 0c01 	add.w	ip, ip, #1
    46f0:	fa1f fc8c 	uxth.w	ip, ip
    46f4:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46f8:	f895 e000 	ldrb.w	lr, [r5]
    46fc:	f8b1 c000 	ldrh.w	ip, [r1]
    4700:	fb06 0e0e 	mla	lr, r6, lr, r0
    4704:	fa1f fc8c 	uxth.w	ip, ip
    4708:	f89e e055 	ldrb.w	lr, [lr, #85]	; 0x55
    470c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4710:	f8b1 c000 	ldrh.w	ip, [r1]
    4714:	f10c 0c01 	add.w	ip, ip, #1
    4718:	fa1f fc8c 	uxth.w	ip, ip
    471c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4720:	f895 e000 	ldrb.w	lr, [r5]
    4724:	f8b1 c000 	ldrh.w	ip, [r1]
    4728:	fb06 0e0e 	mla	lr, r6, lr, r0
    472c:	fa1f fc8c 	uxth.w	ip, ip
    4730:	f89e e056 	ldrb.w	lr, [lr, #86]	; 0x56
    4734:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4738:	f8b1 c000 	ldrh.w	ip, [r1]
    473c:	f10c 0c01 	add.w	ip, ip, #1
    4740:	fa1f fc8c 	uxth.w	ip, ip
    4744:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4748:	f895 e000 	ldrb.w	lr, [r5]
    474c:	f8b1 c000 	ldrh.w	ip, [r1]
    4750:	fb06 0e0e 	mla	lr, r6, lr, r0
    4754:	fa1f fc8c 	uxth.w	ip, ip
    4758:	f89e e057 	ldrb.w	lr, [lr, #87]	; 0x57
    475c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4760:	f8b1 c000 	ldrh.w	ip, [r1]
    4764:	f10c 0c01 	add.w	ip, ip, #1
    4768:	fa1f fc8c 	uxth.w	ip, ip
    476c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4770:	f895 e000 	ldrb.w	lr, [r5]
    4774:	f8b1 c000 	ldrh.w	ip, [r1]
    4778:	fb06 0e0e 	mla	lr, r6, lr, r0
    477c:	fa1f fc8c 	uxth.w	ip, ip
    4780:	f89e e058 	ldrb.w	lr, [lr, #88]	; 0x58
    4784:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4788:	f8b1 c000 	ldrh.w	ip, [r1]
    478c:	f10c 0c01 	add.w	ip, ip, #1
    4790:	fa1f fc8c 	uxth.w	ip, ip
    4794:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4798:	f895 e000 	ldrb.w	lr, [r5]
    479c:	f8b1 c000 	ldrh.w	ip, [r1]
    47a0:	fb06 0e0e 	mla	lr, r6, lr, r0
    47a4:	fa1f fc8c 	uxth.w	ip, ip
    47a8:	f89e e059 	ldrb.w	lr, [lr, #89]	; 0x59
    47ac:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    47b0:	f8b1 c000 	ldrh.w	ip, [r1]
    47b4:	f10c 0c01 	add.w	ip, ip, #1
    47b8:	fa1f fc8c 	uxth.w	ip, ip
    47bc:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    47c0:	f895 e000 	ldrb.w	lr, [r5]
    47c4:	f8b1 c000 	ldrh.w	ip, [r1]
    47c8:	fb06 0e0e 	mla	lr, r6, lr, r0
    47cc:	fa1f fc8c 	uxth.w	ip, ip
    47d0:	f89e e05a 	ldrb.w	lr, [lr, #90]	; 0x5a
    47d4:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    47d8:	f8b1 c000 	ldrh.w	ip, [r1]
    47dc:	f10c 0c01 	add.w	ip, ip, #1
    47e0:	fa1f fc8c 	uxth.w	ip, ip
    47e4:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    47e8:	f895 e000 	ldrb.w	lr, [r5]
    47ec:	f8b1 c000 	ldrh.w	ip, [r1]
    47f0:	fb06 0e0e 	mla	lr, r6, lr, r0
    47f4:	fa1f fc8c 	uxth.w	ip, ip
    47f8:	f89e e05b 	ldrb.w	lr, [lr, #91]	; 0x5b
    47fc:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4800:	f8b1 c000 	ldrh.w	ip, [r1]
    4804:	f10c 0c01 	add.w	ip, ip, #1
    4808:	fa1f fc8c 	uxth.w	ip, ip
    480c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4810:	f895 e000 	ldrb.w	lr, [r5]
    4814:	f8b1 c000 	ldrh.w	ip, [r1]
    4818:	fb06 0e0e 	mla	lr, r6, lr, r0
    481c:	fa1f fc8c 	uxth.w	ip, ip
    4820:	f89e e05c 	ldrb.w	lr, [lr, #92]	; 0x5c
    4824:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4828:	f8b1 c000 	ldrh.w	ip, [r1]
    482c:	f10c 0c01 	add.w	ip, ip, #1
    4830:	fa1f fc8c 	uxth.w	ip, ip
    4834:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4838:	f895 e000 	ldrb.w	lr, [r5]
    483c:	f8b1 c000 	ldrh.w	ip, [r1]
    4840:	fb06 0e0e 	mla	lr, r6, lr, r0
    4844:	fa1f fc8c 	uxth.w	ip, ip
    4848:	f89e e05d 	ldrb.w	lr, [lr, #93]	; 0x5d
    484c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4850:	f8b1 c000 	ldrh.w	ip, [r1]
    4854:	f10c 0c01 	add.w	ip, ip, #1
    4858:	fa1f fc8c 	uxth.w	ip, ip
    485c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4860:	f895 e000 	ldrb.w	lr, [r5]
    4864:	f8b1 c000 	ldrh.w	ip, [r1]
    4868:	fb06 0e0e 	mla	lr, r6, lr, r0
    486c:	fa1f fc8c 	uxth.w	ip, ip
    4870:	f89e e05e 	ldrb.w	lr, [lr, #94]	; 0x5e
    4874:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4878:	f8b1 c000 	ldrh.w	ip, [r1]
    487c:	f10c 0c01 	add.w	ip, ip, #1
    4880:	fa1f fc8c 	uxth.w	ip, ip
    4884:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4888:	f895 e000 	ldrb.w	lr, [r5]
    488c:	f8b1 c000 	ldrh.w	ip, [r1]
    4890:	fb06 0e0e 	mla	lr, r6, lr, r0
    4894:	fa1f fc8c 	uxth.w	ip, ip
    4898:	f89e e05f 	ldrb.w	lr, [lr, #95]	; 0x5f
    489c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48a0:	f8b1 c000 	ldrh.w	ip, [r1]
    48a4:	f10c 0c01 	add.w	ip, ip, #1
    48a8:	fa1f fc8c 	uxth.w	ip, ip
    48ac:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    48b0:	f895 e000 	ldrb.w	lr, [r5]
    48b4:	f8b1 c000 	ldrh.w	ip, [r1]
    48b8:	fb06 0e0e 	mla	lr, r6, lr, r0
    48bc:	fa1f fc8c 	uxth.w	ip, ip
    48c0:	f89e e060 	ldrb.w	lr, [lr, #96]	; 0x60
    48c4:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48c8:	f8b1 c000 	ldrh.w	ip, [r1]
    48cc:	f10c 0c01 	add.w	ip, ip, #1
    48d0:	fa1f fc8c 	uxth.w	ip, ip
    48d4:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    48d8:	f895 e000 	ldrb.w	lr, [r5]
    48dc:	f8b1 c000 	ldrh.w	ip, [r1]
    48e0:	fb06 0e0e 	mla	lr, r6, lr, r0
    48e4:	fa1f fc8c 	uxth.w	ip, ip
    48e8:	f89e e061 	ldrb.w	lr, [lr, #97]	; 0x61
    48ec:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48f0:	f8b1 c000 	ldrh.w	ip, [r1]
    48f4:	f10c 0c01 	add.w	ip, ip, #1
    48f8:	fa1f fc8c 	uxth.w	ip, ip
    48fc:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4900:	f895 e000 	ldrb.w	lr, [r5]
    4904:	f8b1 c000 	ldrh.w	ip, [r1]
    4908:	fb06 0e0e 	mla	lr, r6, lr, r0
    490c:	fa1f fc8c 	uxth.w	ip, ip
    4910:	f89e e062 	ldrb.w	lr, [lr, #98]	; 0x62
    4914:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4918:	f8b1 c000 	ldrh.w	ip, [r1]
    491c:	f10c 0c01 	add.w	ip, ip, #1
    4920:	fa1f fc8c 	uxth.w	ip, ip
    4924:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4928:	f895 e000 	ldrb.w	lr, [r5]
    492c:	f8b1 c000 	ldrh.w	ip, [r1]
    4930:	fb06 0e0e 	mla	lr, r6, lr, r0
    4934:	fa1f fc8c 	uxth.w	ip, ip
    4938:	f89e e063 	ldrb.w	lr, [lr, #99]	; 0x63
    493c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4940:	f8b1 c000 	ldrh.w	ip, [r1]
    4944:	f10c 0c01 	add.w	ip, ip, #1
    4948:	fa1f fc8c 	uxth.w	ip, ip
    494c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4950:	f895 e000 	ldrb.w	lr, [r5]
    4954:	f8b1 c000 	ldrh.w	ip, [r1]
    4958:	fb06 0e0e 	mla	lr, r6, lr, r0
    495c:	fa1f fc8c 	uxth.w	ip, ip
    4960:	f89e e064 	ldrb.w	lr, [lr, #100]	; 0x64
    4964:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4968:	f8b1 c000 	ldrh.w	ip, [r1]
    496c:	f10c 0c01 	add.w	ip, ip, #1
    4970:	fa1f fc8c 	uxth.w	ip, ip
    4974:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4978:	f895 e000 	ldrb.w	lr, [r5]
    497c:	f8b1 c000 	ldrh.w	ip, [r1]
    4980:	fb06 0e0e 	mla	lr, r6, lr, r0
    4984:	fa1f fc8c 	uxth.w	ip, ip
    4988:	f89e e065 	ldrb.w	lr, [lr, #101]	; 0x65
    498c:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4990:	f8b1 c000 	ldrh.w	ip, [r1]
    4994:	f10c 0c01 	add.w	ip, ip, #1
    4998:	fa1f fc8c 	uxth.w	ip, ip
    499c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    49a0:	f895 e000 	ldrb.w	lr, [r5]
    49a4:	f8b1 c000 	ldrh.w	ip, [r1]
    49a8:	fb06 0e0e 	mla	lr, r6, lr, r0
    49ac:	fa1f fc8c 	uxth.w	ip, ip
    49b0:	f89e e066 	ldrb.w	lr, [lr, #102]	; 0x66
    49b4:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    49b8:	f8b1 c000 	ldrh.w	ip, [r1]
    49bc:	f10c 0c01 	add.w	ip, ip, #1
    49c0:	fa1f fc8c 	uxth.w	ip, ip
    49c4:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    49c8:	f895 e000 	ldrb.w	lr, [r5]
    49cc:	f8b1 c000 	ldrh.w	ip, [r1]
    49d0:	fb06 0e0e 	mla	lr, r6, lr, r0
    49d4:	fa1f fc8c 	uxth.w	ip, ip
    49d8:	f89e e067 	ldrb.w	lr, [lr, #103]	; 0x67
    49dc:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    49e0:	f8b1 c000 	ldrh.w	ip, [r1]
    49e4:	f10c 0c01 	add.w	ip, ip, #1
    49e8:	fa1f fc8c 	uxth.w	ip, ip
    49ec:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    49f0:	f895 e000 	ldrb.w	lr, [r5]
    49f4:	f8b1 c000 	ldrh.w	ip, [r1]
    49f8:	fb06 0e0e 	mla	lr, r6, lr, r0
    49fc:	fa1f fc8c 	uxth.w	ip, ip
    4a00:	f89e e068 	ldrb.w	lr, [lr, #104]	; 0x68
    4a04:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a08:	f8b1 c000 	ldrh.w	ip, [r1]
    4a0c:	f10c 0c01 	add.w	ip, ip, #1
    4a10:	fa1f fc8c 	uxth.w	ip, ip
    4a14:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a18:	f895 c000 	ldrb.w	ip, [r5]
    4a1c:	fb06 0c0c 	mla	ip, r6, ip, r0
    4a20:	880e      	ldrh	r6, [r1, #0]
    4a22:	f89c c069 	ldrb.w	ip, [ip, #105]	; 0x69
    4a26:	b2b6      	uxth	r6, r6
    4a28:	f803 c006 	strb.w	ip, [r3, r6]
							bufferPos++;
    4a2c:	880e      	ldrh	r6, [r1, #0]
    4a2e:	3601      	adds	r6, #1
    4a30:	b2b6      	uxth	r6, r6
    4a32:	800e      	strh	r6, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a34:	26c8      	movs	r6, #200	; 0xc8
    4a36:	f895 e000 	ldrb.w	lr, [r5]
    4a3a:	f8b1 c000 	ldrh.w	ip, [r1]
    4a3e:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a42:	fa1f fc8c 	uxth.w	ip, ip
    4a46:	f89e e06a 	ldrb.w	lr, [lr, #106]	; 0x6a
    4a4a:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a4e:	f8b1 c000 	ldrh.w	ip, [r1]
    4a52:	f10c 0c01 	add.w	ip, ip, #1
    4a56:	fa1f fc8c 	uxth.w	ip, ip
    4a5a:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a5e:	f895 e000 	ldrb.w	lr, [r5]
    4a62:	f8b1 c000 	ldrh.w	ip, [r1]
    4a66:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a6a:	fa1f fc8c 	uxth.w	ip, ip
    4a6e:	f89e e06b 	ldrb.w	lr, [lr, #107]	; 0x6b
    4a72:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a76:	f8b1 c000 	ldrh.w	ip, [r1]
    4a7a:	f10c 0c01 	add.w	ip, ip, #1
    4a7e:	fa1f fc8c 	uxth.w	ip, ip
    4a82:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a86:	f895 e000 	ldrb.w	lr, [r5]
    4a8a:	f8b1 c000 	ldrh.w	ip, [r1]
    4a8e:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a92:	fa1f fc8c 	uxth.w	ip, ip
    4a96:	f89e e06c 	ldrb.w	lr, [lr, #108]	; 0x6c
    4a9a:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a9e:	f8b1 c000 	ldrh.w	ip, [r1]
    4aa2:	f10c 0c01 	add.w	ip, ip, #1
    4aa6:	fa1f fc8c 	uxth.w	ip, ip
    4aaa:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4aae:	f895 e000 	ldrb.w	lr, [r5]
    4ab2:	f8b1 c000 	ldrh.w	ip, [r1]
    4ab6:	fb06 0e0e 	mla	lr, r6, lr, r0
    4aba:	fa1f fc8c 	uxth.w	ip, ip
    4abe:	f89e e06d 	ldrb.w	lr, [lr, #109]	; 0x6d
    4ac2:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4ac6:	f8b1 c000 	ldrh.w	ip, [r1]
    4aca:	f10c 0c01 	add.w	ip, ip, #1
    4ace:	fa1f fc8c 	uxth.w	ip, ip
    4ad2:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ad6:	f895 e000 	ldrb.w	lr, [r5]
    4ada:	f8b1 c000 	ldrh.w	ip, [r1]
    4ade:	fb06 0e0e 	mla	lr, r6, lr, r0
    4ae2:	fa1f fc8c 	uxth.w	ip, ip
    4ae6:	f89e e06e 	ldrb.w	lr, [lr, #110]	; 0x6e
    4aea:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4aee:	f8b1 c000 	ldrh.w	ip, [r1]
    4af2:	f10c 0c01 	add.w	ip, ip, #1
    4af6:	fa1f fc8c 	uxth.w	ip, ip
    4afa:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4afe:	f895 e000 	ldrb.w	lr, [r5]
    4b02:	f8b1 c000 	ldrh.w	ip, [r1]
    4b06:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b0a:	fa1f fc8c 	uxth.w	ip, ip
    4b0e:	f89e e06f 	ldrb.w	lr, [lr, #111]	; 0x6f
    4b12:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b16:	f8b1 c000 	ldrh.w	ip, [r1]
    4b1a:	f10c 0c01 	add.w	ip, ip, #1
    4b1e:	fa1f fc8c 	uxth.w	ip, ip
    4b22:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b26:	f895 e000 	ldrb.w	lr, [r5]
    4b2a:	f8b1 c000 	ldrh.w	ip, [r1]
    4b2e:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b32:	fa1f fc8c 	uxth.w	ip, ip
    4b36:	f89e e070 	ldrb.w	lr, [lr, #112]	; 0x70
    4b3a:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b3e:	f8b1 c000 	ldrh.w	ip, [r1]
    4b42:	f10c 0c01 	add.w	ip, ip, #1
    4b46:	fa1f fc8c 	uxth.w	ip, ip
    4b4a:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b4e:	f895 e000 	ldrb.w	lr, [r5]
    4b52:	f8b1 c000 	ldrh.w	ip, [r1]
    4b56:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b5a:	fa1f fc8c 	uxth.w	ip, ip
    4b5e:	f89e e071 	ldrb.w	lr, [lr, #113]	; 0x71
    4b62:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b66:	f8b1 c000 	ldrh.w	ip, [r1]
    4b6a:	f10c 0c01 	add.w	ip, ip, #1
    4b6e:	fa1f fc8c 	uxth.w	ip, ip
    4b72:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b76:	f895 e000 	ldrb.w	lr, [r5]
    4b7a:	f8b1 c000 	ldrh.w	ip, [r1]
    4b7e:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b82:	fa1f fc8c 	uxth.w	ip, ip
    4b86:	f89e e072 	ldrb.w	lr, [lr, #114]	; 0x72
    4b8a:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b8e:	f8b1 c000 	ldrh.w	ip, [r1]
    4b92:	f10c 0c01 	add.w	ip, ip, #1
    4b96:	fa1f fc8c 	uxth.w	ip, ip
    4b9a:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b9e:	f895 e000 	ldrb.w	lr, [r5]
    4ba2:	f8b1 c000 	ldrh.w	ip, [r1]
    4ba6:	fb06 0e0e 	mla	lr, r6, lr, r0
    4baa:	fa1f fc8c 	uxth.w	ip, ip
    4bae:	f89e e073 	ldrb.w	lr, [lr, #115]	; 0x73
    4bb2:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4bb6:	f8b1 c000 	ldrh.w	ip, [r1]
    4bba:	f10c 0c01 	add.w	ip, ip, #1
    4bbe:	fa1f fc8c 	uxth.w	ip, ip
    4bc2:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4bc6:	f895 e000 	ldrb.w	lr, [r5]
    4bca:	f8b1 c000 	ldrh.w	ip, [r1]
    4bce:	fb06 0e0e 	mla	lr, r6, lr, r0
    4bd2:	fa1f fc8c 	uxth.w	ip, ip
    4bd6:	f89e e074 	ldrb.w	lr, [lr, #116]	; 0x74
    4bda:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4bde:	f8b1 c000 	ldrh.w	ip, [r1]
    4be2:	f10c 0c01 	add.w	ip, ip, #1
    4be6:	fa1f fc8c 	uxth.w	ip, ip
    4bea:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4bee:	f895 e000 	ldrb.w	lr, [r5]
    4bf2:	f8b1 c000 	ldrh.w	ip, [r1]
    4bf6:	fb06 0e0e 	mla	lr, r6, lr, r0
    4bfa:	fa1f fc8c 	uxth.w	ip, ip
    4bfe:	f89e e075 	ldrb.w	lr, [lr, #117]	; 0x75
    4c02:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4c06:	f8b1 c000 	ldrh.w	ip, [r1]
    4c0a:	f10c 0c01 	add.w	ip, ip, #1
    4c0e:	fa1f fc8c 	uxth.w	ip, ip
    4c12:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c16:	f895 e000 	ldrb.w	lr, [r5]
    4c1a:	f8b1 c000 	ldrh.w	ip, [r1]
    4c1e:	fb06 0e0e 	mla	lr, r6, lr, r0
    4c22:	fa1f fc8c 	uxth.w	ip, ip
    4c26:	f89e e076 	ldrb.w	lr, [lr, #118]	; 0x76
    4c2a:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4c2e:	f8b1 c000 	ldrh.w	ip, [r1]
    4c32:	f10c 0c01 	add.w	ip, ip, #1
    4c36:	fa1f fc8c 	uxth.w	ip, ip
    4c3a:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c3e:	f895 e000 	ldrb.w	lr, [r5]
    4c42:	f8b1 c000 	ldrh.w	ip, [r1]
    4c46:	fb06 0e0e 	mla	lr, r6, lr, r0
    4c4a:	fa1f fc8c 	uxth.w	ip, ip
    4c4e:	f89e e077 	ldrb.w	lr, [lr, #119]	; 0x77
    4c52:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4c56:	f8b1 c000 	ldrh.w	ip, [r1]
    4c5a:	f10c 0c01 	add.w	ip, ip, #1
    4c5e:	fa1f fc8c 	uxth.w	ip, ip
    4c62:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c66:	f895 e000 	ldrb.w	lr, [r5]
    4c6a:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
    4c6e:	f8b1 a000 	ldrh.w	sl, [r1]
					for (int j = 0; j < 8; j++)
    4c72:	f108 0801 	add.w	r8, r8, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c76:	fb06 fe0e 	mul.w	lr, r6, lr
					for (int j = 0; j < 8; j++)
    4c7a:	f1b8 0f14 	cmp.w	r8, #20
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c7e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c82:	f810 b00e 	ldrb.w	fp, [r0, lr]
    4c86:	fa1f fe8a 	uxth.w	lr, sl
    4c8a:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4c8e:	f8b1 e000 	ldrh.w	lr, [r1]
    4c92:	f10e 0e01 	add.w	lr, lr, #1
    4c96:	fa1f fe8e 	uxth.w	lr, lr
    4c9a:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c9e:	f895 e000 	ldrb.w	lr, [r5]
    4ca2:	f8b1 a000 	ldrh.w	sl, [r1]
    4ca6:	fb06 fe0e 	mul.w	lr, r6, lr
    4caa:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4cae:	4486      	add	lr, r0
    4cb0:	f89e b001 	ldrb.w	fp, [lr, #1]
    4cb4:	fa1f fe8a 	uxth.w	lr, sl
    4cb8:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4cbc:	f8b1 e000 	ldrh.w	lr, [r1]
    4cc0:	f10e 0e01 	add.w	lr, lr, #1
    4cc4:	fa1f fe8e 	uxth.w	lr, lr
    4cc8:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4ccc:	f895 e000 	ldrb.w	lr, [r5]
    4cd0:	f8b1 a000 	ldrh.w	sl, [r1]
    4cd4:	fb06 fe0e 	mul.w	lr, r6, lr
    4cd8:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4cdc:	4486      	add	lr, r0
    4cde:	f89e b002 	ldrb.w	fp, [lr, #2]
    4ce2:	fa1f fe8a 	uxth.w	lr, sl
    4ce6:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4cea:	f8b1 e000 	ldrh.w	lr, [r1]
    4cee:	f10e 0e01 	add.w	lr, lr, #1
    4cf2:	fa1f fe8e 	uxth.w	lr, lr
    4cf6:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4cfa:	f895 e000 	ldrb.w	lr, [r5]
    4cfe:	f8b1 a000 	ldrh.w	sl, [r1]
    4d02:	fb06 fe0e 	mul.w	lr, r6, lr
    4d06:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4d0a:	4486      	add	lr, r0
    4d0c:	f89e b003 	ldrb.w	fp, [lr, #3]
    4d10:	fa1f fe8a 	uxth.w	lr, sl
    4d14:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4d18:	f8b1 e000 	ldrh.w	lr, [r1]
    4d1c:	f10e 0e01 	add.w	lr, lr, #1
    4d20:	fa1f fe8e 	uxth.w	lr, lr
    4d24:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4d28:	f895 e000 	ldrb.w	lr, [r5]
    4d2c:	f8b1 a000 	ldrh.w	sl, [r1]
    4d30:	fb06 fe0e 	mul.w	lr, r6, lr
    4d34:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4d38:	4486      	add	lr, r0
    4d3a:	f89e b004 	ldrb.w	fp, [lr, #4]
    4d3e:	fa1f fe8a 	uxth.w	lr, sl
    4d42:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4d46:	f8b1 e000 	ldrh.w	lr, [r1]
    4d4a:	f10e 0e01 	add.w	lr, lr, #1
    4d4e:	fa1f fe8e 	uxth.w	lr, lr
    4d52:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4d56:	f895 e000 	ldrb.w	lr, [r5]
    4d5a:	f8b1 a000 	ldrh.w	sl, [r1]
    4d5e:	fb06 fe0e 	mul.w	lr, r6, lr
    4d62:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4d66:	4486      	add	lr, r0
    4d68:	f89e b005 	ldrb.w	fp, [lr, #5]
    4d6c:	fa1f fe8a 	uxth.w	lr, sl
    4d70:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4d74:	f8b1 e000 	ldrh.w	lr, [r1]
    4d78:	f10e 0e01 	add.w	lr, lr, #1
    4d7c:	fa1f fe8e 	uxth.w	lr, lr
    4d80:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4d84:	f895 e000 	ldrb.w	lr, [r5]
    4d88:	f8b1 a000 	ldrh.w	sl, [r1]
    4d8c:	fb06 fe0e 	mul.w	lr, r6, lr
    4d90:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4d94:	4486      	add	lr, r0
    4d96:	f89e b006 	ldrb.w	fp, [lr, #6]
    4d9a:	fa1f fe8a 	uxth.w	lr, sl
    4d9e:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4da2:	f8b1 e000 	ldrh.w	lr, [r1]
    4da6:	f10e 0e01 	add.w	lr, lr, #1
    4daa:	fa1f fe8e 	uxth.w	lr, lr
    4dae:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4db2:	f895 e000 	ldrb.w	lr, [r5]
    4db6:	f8b1 a000 	ldrh.w	sl, [r1]
    4dba:	fb06 fe0e 	mul.w	lr, r6, lr
    4dbe:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4dc2:	4486      	add	lr, r0
    4dc4:	f89e b007 	ldrb.w	fp, [lr, #7]
    4dc8:	fa1f fe8a 	uxth.w	lr, sl
    4dcc:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4dd0:	f8b1 e000 	ldrh.w	lr, [r1]
    4dd4:	f10e 0e01 	add.w	lr, lr, #1
    4dd8:	fa1f fe8e 	uxth.w	lr, lr
    4ddc:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4de0:	f895 e000 	ldrb.w	lr, [r5]
    4de4:	fb06 fe0e 	mul.w	lr, r6, lr
    4de8:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
    4dec:	f8b1 e000 	ldrh.w	lr, [r1]
    4df0:	4484      	add	ip, r0
    4df2:	f89c a008 	ldrb.w	sl, [ip, #8]
    4df6:	fa1f fc8e 	uxth.w	ip, lr
    4dfa:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4dfe:	f8b1 c000 	ldrh.w	ip, [r1]
    4e02:	f10c 0c01 	add.w	ip, ip, #1
    4e06:	fa1f fc8c 	uxth.w	ip, ip
    4e0a:	f8a1 c000 	strh.w	ip, [r1]
					for (int j = 0; j < 8; j++)
    4e0e:	f47f af2a 	bne.w	4c66 <handleSPI+0x11e6>
    4e12:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 50d0 <handleSPI+0x1650>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4e16:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 50a4 <handleSPI+0x1624>
    4e1a:	f10e 0850 	add.w	r8, lr, #80	; 0x50
    4e1e:	ecfe 7a01 	vldmia	lr!, {s15}
						buffer[bufferPos] = integerVersion >> 8;
    4e22:	f8b1 c000 	ldrh.w	ip, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4e26:	ee67 7a87 	vmul.f32	s15, s15, s14
						buffer[bufferPos+1] = integerVersion & 255;
    4e2a:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    4e2c:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    4e2e:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    4e32:	fa13 f686 	uxtah	r6, r3, r6
					for (int i = 0; i < 20; i++)
    4e36:	45f0      	cmp	r8, lr
						bufferPos = bufferPos + 2;
    4e38:	f105 0502 	add.w	r5, r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    4e40:	b2ad      	uxth	r5, r5
    4e42:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4e44:	ee17 5a90 	vmov	r5, s15
						buffer[bufferPos] = integerVersion >> 8;
    4e48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
    4e4c:	f803 a00c 	strb.w	sl, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    4e50:	7075      	strb	r5, [r6, #1]
					for (int i = 0; i < 20; i++)
    4e52:	d1e4      	bne.n	4e1e <handleSPI+0x139e>
					 presetNumberToLoad = presetNumberToSave;
    4e54:	f899 3000 	ldrb.w	r3, [r9]
    4e58:	4d93      	ldr	r5, [pc, #588]	; (50a8 <handleSPI+0x1628>)
    4e5a:	b2db      	uxtb	r3, r3
    4e5c:	702b      	strb	r3, [r5, #0]
					 presetWaitingToParse = bufferPos;
    4e5e:	880b      	ldrh	r3, [r1, #0]
    4e60:	4d92      	ldr	r5, [pc, #584]	; (50ac <handleSPI+0x162c>)
    4e62:	b29b      	uxth	r3, r3
    4e64:	602b      	str	r3, [r5, #0]
					 presetWaitingToWrite = bufferPos;
    4e66:	880b      	ldrh	r3, [r1, #0]
    4e68:	4991      	ldr	r1, [pc, #580]	; (50b0 <handleSPI+0x1630>)
    4e6a:	b29b      	uxth	r3, r3
    4e6c:	600b      	str	r3, [r1, #0]
    4e6e:	f7fe bf94 	b.w	3d9a <handleSPI+0x31a>
			uint8_t currentByte = offset+1;
    4e72:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    4e76:	4e8f      	ldr	r6, [pc, #572]	; (50b4 <handleSPI+0x1634>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4e78:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    4e7c:	7833      	ldrb	r3, [r6, #0]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4e7e:	f817 9008 	ldrb.w	r9, [r7, r8]
				if (knobFrozen[i])
    4e82:	2b00      	cmp	r3, #0
    4e84:	f000 8247 	beq.w	5316 <handleSPI+0x1896>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4e88:	4d8b      	ldr	r5, [pc, #556]	; (50b8 <handleSPI+0x1638>)
    4e8a:	682b      	ldr	r3, [r5, #0]
    4e8c:	3303      	adds	r3, #3
    4e8e:	454b      	cmp	r3, r9
    4e90:	db03      	blt.n	4e9a <handleSPI+0x141a>
    4e92:	682b      	ldr	r3, [r5, #0]
    4e94:	3b03      	subs	r3, #3
    4e96:	454b      	cmp	r3, r9
    4e98:	dd03      	ble.n	4ea2 <handleSPI+0x1422>
						knobFrozen[i] = 0;
    4e9a:	2300      	movs	r3, #0
    4e9c:	7033      	strb	r3, [r6, #0]
						prevKnobByte[i] = newByte;
    4e9e:	f8c5 9000 	str.w	r9, [r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4ea2:	eb07 0308 	add.w	r3, r7, r8
    4ea6:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    4eaa:	7873      	ldrb	r3, [r6, #1]
    4eac:	2b00      	cmp	r3, #0
    4eae:	f000 836b 	beq.w	5588 <handleSPI+0x1b08>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4eb2:	686b      	ldr	r3, [r5, #4]
    4eb4:	3303      	adds	r3, #3
    4eb6:	454b      	cmp	r3, r9
    4eb8:	db03      	blt.n	4ec2 <handleSPI+0x1442>
    4eba:	686b      	ldr	r3, [r5, #4]
    4ebc:	3b03      	subs	r3, #3
    4ebe:	454b      	cmp	r3, r9
    4ec0:	dd03      	ble.n	4eca <handleSPI+0x144a>
						knobFrozen[i] = 0;
    4ec2:	2300      	movs	r3, #0
    4ec4:	7073      	strb	r3, [r6, #1]
						prevKnobByte[i] = newByte;
    4ec6:	f8c5 9004 	str.w	r9, [r5, #4]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4eca:	eb07 0308 	add.w	r3, r7, r8
    4ece:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    4ed2:	78b3      	ldrb	r3, [r6, #2]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	f000 8349 	beq.w	556c <handleSPI+0x1aec>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4eda:	68ab      	ldr	r3, [r5, #8]
    4edc:	3303      	adds	r3, #3
    4ede:	454b      	cmp	r3, r9
    4ee0:	db03      	blt.n	4eea <handleSPI+0x146a>
    4ee2:	68ab      	ldr	r3, [r5, #8]
    4ee4:	3b03      	subs	r3, #3
    4ee6:	454b      	cmp	r3, r9
    4ee8:	dd03      	ble.n	4ef2 <handleSPI+0x1472>
						knobFrozen[i] = 0;
    4eea:	2300      	movs	r3, #0
    4eec:	70b3      	strb	r3, [r6, #2]
						prevKnobByte[i] = newByte;
    4eee:	f8c5 9008 	str.w	r9, [r5, #8]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4ef2:	eb07 0308 	add.w	r3, r7, r8
    4ef6:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    4efa:	78f3      	ldrb	r3, [r6, #3]
    4efc:	2b00      	cmp	r3, #0
    4efe:	f000 8327 	beq.w	5550 <handleSPI+0x1ad0>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f02:	68eb      	ldr	r3, [r5, #12]
    4f04:	3303      	adds	r3, #3
    4f06:	4599      	cmp	r9, r3
    4f08:	dc03      	bgt.n	4f12 <handleSPI+0x1492>
    4f0a:	68eb      	ldr	r3, [r5, #12]
    4f0c:	3b03      	subs	r3, #3
    4f0e:	454b      	cmp	r3, r9
    4f10:	dd03      	ble.n	4f1a <handleSPI+0x149a>
						knobFrozen[i] = 0;
    4f12:	2300      	movs	r3, #0
    4f14:	70f3      	strb	r3, [r6, #3]
						prevKnobByte[i] = newByte;
    4f16:	f8c5 900c 	str.w	r9, [r5, #12]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f1a:	eb07 0308 	add.w	r3, r7, r8
    4f1e:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    4f22:	7933      	ldrb	r3, [r6, #4]
    4f24:	2b00      	cmp	r3, #0
    4f26:	f000 8305 	beq.w	5534 <handleSPI+0x1ab4>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f2a:	692b      	ldr	r3, [r5, #16]
    4f2c:	3303      	adds	r3, #3
    4f2e:	4599      	cmp	r9, r3
    4f30:	dc03      	bgt.n	4f3a <handleSPI+0x14ba>
    4f32:	692b      	ldr	r3, [r5, #16]
    4f34:	3b03      	subs	r3, #3
    4f36:	454b      	cmp	r3, r9
    4f38:	dd03      	ble.n	4f42 <handleSPI+0x14c2>
						knobFrozen[i] = 0;
    4f3a:	2300      	movs	r3, #0
    4f3c:	7133      	strb	r3, [r6, #4]
						prevKnobByte[i] = newByte;
    4f3e:	f8c5 9010 	str.w	r9, [r5, #16]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f42:	eb07 0308 	add.w	r3, r7, r8
    4f46:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    4f4a:	7973      	ldrb	r3, [r6, #5]
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	f000 821b 	beq.w	5388 <handleSPI+0x1908>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f52:	696b      	ldr	r3, [r5, #20]
    4f54:	3303      	adds	r3, #3
    4f56:	4599      	cmp	r9, r3
    4f58:	dc03      	bgt.n	4f62 <handleSPI+0x14e2>
    4f5a:	696b      	ldr	r3, [r5, #20]
    4f5c:	3b03      	subs	r3, #3
    4f5e:	4599      	cmp	r9, r3
    4f60:	da03      	bge.n	4f6a <handleSPI+0x14ea>
						knobFrozen[i] = 0;
    4f62:	2300      	movs	r3, #0
    4f64:	7173      	strb	r3, [r6, #5]
						prevKnobByte[i] = newByte;
    4f66:	f8c5 9014 	str.w	r9, [r5, #20]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f6a:	eb07 0308 	add.w	r3, r7, r8
    4f6e:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    4f72:	79b3      	ldrb	r3, [r6, #6]
    4f74:	2b00      	cmp	r3, #0
    4f76:	f000 81f9 	beq.w	536c <handleSPI+0x18ec>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f7a:	69ab      	ldr	r3, [r5, #24]
    4f7c:	3303      	adds	r3, #3
    4f7e:	4599      	cmp	r9, r3
    4f80:	dc03      	bgt.n	4f8a <handleSPI+0x150a>
    4f82:	69ab      	ldr	r3, [r5, #24]
    4f84:	3b03      	subs	r3, #3
    4f86:	4599      	cmp	r9, r3
    4f88:	da03      	bge.n	4f92 <handleSPI+0x1512>
						knobFrozen[i] = 0;
    4f8a:	2300      	movs	r3, #0
    4f8c:	71b3      	strb	r3, [r6, #6]
						prevKnobByte[i] = newByte;
    4f8e:	f8c5 9018 	str.w	r9, [r5, #24]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f92:	eb07 0308 	add.w	r3, r7, r8
    4f96:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    4f9a:	79f3      	ldrb	r3, [r6, #7]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	f000 81d7 	beq.w	5350 <handleSPI+0x18d0>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4fa2:	69eb      	ldr	r3, [r5, #28]
    4fa4:	3303      	adds	r3, #3
    4fa6:	454b      	cmp	r3, r9
    4fa8:	db03      	blt.n	4fb2 <handleSPI+0x1532>
    4faa:	69eb      	ldr	r3, [r5, #28]
    4fac:	3b03      	subs	r3, #3
    4fae:	454b      	cmp	r3, r9
    4fb0:	dd03      	ble.n	4fba <handleSPI+0x153a>
						knobFrozen[i] = 0;
    4fb2:	2300      	movs	r3, #0
    4fb4:	71f3      	strb	r3, [r6, #7]
						prevKnobByte[i] = newByte;
    4fb6:	f8c5 901c 	str.w	r9, [r5, #28]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4fba:	eb07 0308 	add.w	r3, r7, r8
    4fbe:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    4fc2:	7a33      	ldrb	r3, [r6, #8]
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	f000 81b5 	beq.w	5334 <handleSPI+0x18b4>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4fca:	6a2b      	ldr	r3, [r5, #32]
    4fcc:	3303      	adds	r3, #3
    4fce:	4599      	cmp	r9, r3
    4fd0:	dc03      	bgt.n	4fda <handleSPI+0x155a>
    4fd2:	6a2b      	ldr	r3, [r5, #32]
    4fd4:	3b03      	subs	r3, #3
    4fd6:	4599      	cmp	r9, r3
    4fd8:	da03      	bge.n	4fe2 <handleSPI+0x1562>
						knobFrozen[i] = 0;
    4fda:	2300      	movs	r3, #0
    4fdc:	7233      	strb	r3, [r6, #8]
						prevKnobByte[i] = newByte;
    4fde:	f8c5 9020 	str.w	r9, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4fe2:	eb07 0308 	add.w	r3, r7, r8
    4fe6:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    4fea:	7a73      	ldrb	r3, [r6, #9]
    4fec:	2b00      	cmp	r3, #0
    4fee:	f000 81e7 	beq.w	53c0 <handleSPI+0x1940>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ff4:	3303      	adds	r3, #3
    4ff6:	4599      	cmp	r9, r3
    4ff8:	dc03      	bgt.n	5002 <handleSPI+0x1582>
    4ffa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ffc:	3b03      	subs	r3, #3
    4ffe:	4599      	cmp	r9, r3
    5000:	da03      	bge.n	500a <handleSPI+0x158a>
						knobFrozen[i] = 0;
    5002:	2300      	movs	r3, #0
    5004:	7273      	strb	r3, [r6, #9]
						prevKnobByte[i] = newByte;
    5006:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    500a:	eb07 0308 	add.w	r3, r7, r8
    500e:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    5012:	7ab3      	ldrb	r3, [r6, #10]
    5014:	2b00      	cmp	r3, #0
    5016:	f000 81c5 	beq.w	53a4 <handleSPI+0x1924>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    501a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    501c:	3303      	adds	r3, #3
    501e:	454b      	cmp	r3, r9
    5020:	db03      	blt.n	502a <handleSPI+0x15aa>
    5022:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5024:	3b03      	subs	r3, #3
    5026:	454b      	cmp	r3, r9
    5028:	dd03      	ble.n	5032 <handleSPI+0x15b2>
						knobFrozen[i] = 0;
    502a:	2300      	movs	r3, #0
    502c:	72b3      	strb	r3, [r6, #10]
						prevKnobByte[i] = newByte;
    502e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5032:	44b8      	add	r8, r7
				if (knobFrozen[i])
    5034:	7af3      	ldrb	r3, [r6, #11]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5036:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    503a:	2b00      	cmp	r3, #0
    503c:	f000 815d 	beq.w	52fa <handleSPI+0x187a>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5040:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5042:	3303      	adds	r3, #3
    5044:	4543      	cmp	r3, r8
    5046:	db03      	blt.n	5050 <handleSPI+0x15d0>
    5048:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    504a:	3b03      	subs	r3, #3
    504c:	4543      	cmp	r3, r8
    504e:	dd03      	ble.n	5058 <handleSPI+0x15d8>
						knobFrozen[i] = 0;
    5050:	2300      	movs	r3, #0
    5052:	72f3      	strb	r3, [r6, #11]
						prevKnobByte[i] = newByte;
    5054:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
			currentByte += 12;
    5058:	f104 060d 	add.w	r6, r4, #13
    505c:	4d17      	ldr	r5, [pc, #92]	; (50bc <handleSPI+0x163c>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    505e:	ed9f 8a18 	vldr	s16, [pc, #96]	; 50c0 <handleSPI+0x1640>
    5062:	b2f6      	uxtb	r6, r6
    5064:	f105 0828 	add.w	r8, r5, #40	; 0x28
    5068:	3e01      	subs	r6, #1
    506a:	443e      	add	r6, r7
    506c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    5070:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    5072:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5074:	ee00 3a10 	vmov	s0, r3
    5078:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    507c:	ee20 0a08 	vmul.f32	s0, s0, s16
    5080:	f007 f882 	bl	c188 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    5084:	45a8      	cmp	r8, r5
    5086:	d1f1      	bne.n	506c <handleSPI+0x15ec>
    5088:	f7ff b9a5 	b.w	43d6 <handleSPI+0x956>
			if (boardNumber == 0)
    508c:	4b0d      	ldr	r3, [pc, #52]	; (50c4 <handleSPI+0x1644>)
    508e:	781b      	ldrb	r3, [r3, #0]
    5090:	2b00      	cmp	r3, #0
    5092:	f47e ad26 	bne.w	3ae2 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    5096:	2101      	movs	r1, #1
    5098:	4b0b      	ldr	r3, [pc, #44]	; (50c8 <handleSPI+0x1648>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    509a:	1842      	adds	r2, r0, r1
				pluckFirmwareUpdateRequested = 1;
    509c:	6019      	str	r1, [r3, #0]
    509e:	480b      	ldr	r0, [pc, #44]	; (50cc <handleSPI+0x164c>)
    50a0:	f7fe be7b 	b.w	3d9a <handleSPI+0x31a>
    50a4:	47800000 	.word	0x47800000
    50a8:	2001a082 	.word	0x2001a082
    50ac:	2001a088 	.word	0x2001a088
    50b0:	2001a08c 	.word	0x2001a08c
    50b4:	200051e0 	.word	0x200051e0
    50b8:	2001a090 	.word	0x2001a090
    50bc:	20005330 	.word	0x20005330
    50c0:	3b808081 	.word	0x3b808081
    50c4:	20014301 	.word	0x20014301
    50c8:	2001a06c 	.word	0x2001a06c
    50cc:	30043380 	.word	0x30043380
    50d0:	200051f4 	.word	0x200051f4
			if (presetReady)
    50d4:	4bd2      	ldr	r3, [pc, #840]	; (5420 <handleSPI+0x19a0>)
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	2b00      	cmp	r3, #0
    50da:	f43e ae57 	beq.w	3d8c <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    50de:	1c43      	adds	r3, r0, #1
    50e0:	f8df 8390 	ldr.w	r8, [pc, #912]	; 5474 <handleSPI+0x19f4>
				uint8_t foundOne = 0;
    50e4:	f04f 0c00 	mov.w	ip, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    50e8:	f04f 0a20 	mov.w	sl, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    50ec:	b2db      	uxtb	r3, r3
    50ee:	5cf9      	ldrb	r1, [r7, r3]
    50f0:	443b      	add	r3, r7
    50f2:	785d      	ldrb	r5, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50f4:	795e      	ldrb	r6, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    50f6:	eb05 2501 	add.w	r5, r5, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50fa:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    50fc:	f893 e002 	ldrb.w	lr, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    5100:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    5104:	f893 9003 	ldrb.w	r9, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    5108:	b2ad      	uxth	r5, r5
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    510a:	4641      	mov	r1, r8
    510c:	b236      	sxth	r6, r6
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    510e:	4663      	mov	r3, ip
					if (mappings[j].destNumber == destNumber)
    5110:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5112:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    5114:	4285      	cmp	r5, r0
    5116:	d102      	bne.n	511e <handleSPI+0x169e>
						whichMapping = j;
    5118:	b2da      	uxtb	r2, r3
						foundOne = 1;
    511a:	f04f 0c01 	mov.w	ip, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    511e:	28ff      	cmp	r0, #255	; 0xff
    5120:	d103      	bne.n	512a <handleSPI+0x16aa>
    5122:	459a      	cmp	sl, r3
    5124:	bfc8      	it	gt
    5126:	fa5f fa83 	uxtbgt.w	sl, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    512a:	3301      	adds	r3, #1
    512c:	2b20      	cmp	r3, #32
    512e:	d1ef      	bne.n	5110 <handleSPI+0x1690>
				if (foundOne == 0)
    5130:	f1bc 0f00 	cmp.w	ip, #0
    5134:	d110      	bne.n	5158 <handleSPI+0x16d8>
					numMappings++;
    5136:	49bb      	ldr	r1, [pc, #748]	; (5424 <handleSPI+0x19a4>)
					mappings[whichMapping].destNumber = destNumber;
    5138:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    513a:	4652      	mov	r2, sl
					numMappings++;
    513c:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    513e:	fb03 f30a 	mul.w	r3, r3, sl
					numMappings++;
    5142:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    5144:	f808 5003 	strb.w	r5, [r8, r3]
					mappings[whichMapping].dest = &params[destNumber];
    5148:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    514c:	4443      	add	r3, r8
					numMappings++;
    514e:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    5150:	49b5      	ldr	r1, [pc, #724]	; (5428 <handleSPI+0x19a8>)
    5152:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    5156:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    5158:	f1b9 0f00 	cmp.w	r9, #0
    515c:	f040 83db 	bne.w	5916 <handleSPI+0x1e96>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5160:	234c      	movs	r3, #76	; 0x4c
    5162:	2001      	movs	r0, #1
					if (source == 255)
    5164:	2eff      	cmp	r6, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5166:	fb02 f303 	mul.w	r3, r2, r3
    516a:	eb08 0a03 	add.w	sl, r8, r3
    516e:	eb0a 050e 	add.w	r5, sl, lr
    5172:	f885 0020 	strb.w	r0, [r5, #32]
					if (source == 255)
    5176:	f000 8612 	beq.w	5d9e <handleSPI+0x231e>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    517a:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 5478 <handleSPI+0x19f8>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    517e:	f10e 0104 	add.w	r1, lr, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5182:	f10e 0a01 	add.w	sl, lr, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5186:	2e03      	cmp	r6, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5188:	eb0c 0bc6 	add.w	fp, ip, r6, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    518c:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 547c <handleSPI+0x19fc>
    5190:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    5194:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5198:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    519c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    51a0:	4441      	add	r1, r8
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    51a2:	f848 b00a 	str.w	fp, [r8, sl]
    51a6:	f10b 0b04 	add.w	fp, fp, #4
    51aa:	4443      	add	r3, r8
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    51ac:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    51b0:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    51b4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    51b8:	f340 85da 	ble.w	5d70 <handleSPI+0x22f0>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    51bc:	f1a6 0318 	sub.w	r3, r6, #24
    51c0:	2b03      	cmp	r3, #3
    51c2:	f200 8647 	bhi.w	5e54 <handleSPI+0x23d4>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    51c6:	4b99      	ldr	r3, [pc, #612]	; (542c <handleSPI+0x19ac>)
    51c8:	4433      	add	r3, r6
    51ca:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    51ce:	2e03      	cmp	r6, #3
    51d0:	d102      	bne.n	51d8 <handleSPI+0x1758>
							noiseOn = 1;
    51d2:	4b97      	ldr	r3, [pc, #604]	; (5430 <handleSPI+0x19b0>)
    51d4:	2101      	movs	r1, #1
    51d6:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    51d8:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    51dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    51e0:	2200      	movs	r2, #0
    51e2:	4473      	add	r3, lr
    51e4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    51e8:	63da      	str	r2, [r3, #60]	; 0x3c
    51ea:	f7fe bdcf 	b.w	3d8c <handleSPI+0x30c>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51ee:	183b      	adds	r3, r7, r0
    51f0:	eddf 6a90 	vldr	s13, [pc, #576]	; 5434 <handleSPI+0x19b4>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    51f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51f8:	4a8f      	ldr	r2, [pc, #572]	; (5438 <handleSPI+0x19b8>)
    51fa:	785b      	ldrb	r3, [r3, #1]
    51fc:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    5200:	4b8e      	ldr	r3, [pc, #568]	; (543c <handleSPI+0x19bc>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    5202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5206:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    520a:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    520e:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    5212:	ed83 7a00 	vstr	s14, [r3]
    5216:	f7fe bdb9 	b.w	3d8c <handleSPI+0x30c>
			if (presetReady)
    521a:	4b81      	ldr	r3, [pc, #516]	; (5420 <handleSPI+0x19a0>)
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	2b00      	cmp	r3, #0
    5220:	f43e adb4 	beq.w	3d8c <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    5224:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    5226:	ed9f 7a86 	vldr	s14, [pc, #536]	; 5440 <handleSPI+0x19c0>
    522a:	4e7f      	ldr	r6, [pc, #508]	; (5428 <handleSPI+0x19a8>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    522c:	b2db      	uxtb	r3, r3
    522e:	18fa      	adds	r2, r7, r3
    5230:	5cfb      	ldrb	r3, [r7, r3]
    5232:	7855      	ldrb	r5, [r2, #1]
    5234:	eb05 2503 	add.w	r5, r5, r3, lsl #8
				currentByte = currentByte + 2;
    5238:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    523a:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    523c:	b2ad      	uxth	r5, r5
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    523e:	18f9      	adds	r1, r7, r3
    5240:	5cfa      	ldrb	r2, [r7, r3]
    5242:	f1a5 083f 	sub.w	r8, r5, #63	; 0x3f
    5246:	784b      	ldrb	r3, [r1, #1]
    5248:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    524c:	fa1f f288 	uxth.w	r2, r8
    5250:	ee07 3a90 	vmov	s15, r3
    5254:	00eb      	lsls	r3, r5, #3
    5256:	2a18      	cmp	r2, #24
    5258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    525c:	9301      	str	r3, [sp, #4]
    525e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5262:	ee67 7a87 	vmul.f32	s15, s15, s14
    5266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    526a:	edc3 7a00 	vstr	s15, [r3]
    526e:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    5272:	d805      	bhi.n	5280 <handleSPI+0x1800>
    5274:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    5278:	40d3      	lsrs	r3, r2
    527a:	07d9      	lsls	r1, r3, #31
    527c:	f100 845a 	bmi.w	5b34 <handleSPI+0x20b4>
    5280:	00eb      	lsls	r3, r5, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    5282:	f04f 0b00 	mov.w	fp, #0
    5286:	46a1      	mov	r9, r4
    5288:	eba3 0805 	sub.w	r8, r3, r5
    528c:	465c      	mov	r4, fp
    528e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    5292:	46c2      	mov	sl, r8
    5294:	ecb8 0a01 	vldmia	r8!, {s0}
    5298:	f8da 3010 	ldr.w	r3, [sl, #16]
    529c:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    529e:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    52a0:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    52a4:	f8da 3014 	ldr.w	r3, [sl, #20]
    52a8:	f89a 0018 	ldrb.w	r0, [sl, #24]
    52ac:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    52ae:	b314      	cbz	r4, 52f6 <handleSPI+0x1876>
    52b0:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    52b4:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    52b6:	b299      	uxth	r1, r3
    52b8:	291a      	cmp	r1, #26
    52ba:	d804      	bhi.n	52c6 <handleSPI+0x1846>
    52bc:	4a61      	ldr	r2, [pc, #388]	; (5444 <handleSPI+0x19c4>)
    52be:	40ca      	lsrs	r2, r1
    52c0:	07d2      	lsls	r2, r2, #31
    52c2:	f100 84e8 	bmi.w	5c96 <handleSPI+0x2216>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    52c6:	f1a5 0218 	sub.w	r2, r5, #24
    52ca:	b291      	uxth	r1, r2
    52cc:	291a      	cmp	r1, #26
    52ce:	f240 837b 	bls.w	59c8 <handleSPI+0x1f48>
				if ((whichParam == Noise))
    52d2:	2d12      	cmp	r5, #18
    52d4:	f040 8486 	bne.w	5be4 <handleSPI+0x2164>
					if (params[whichParam].realVal[0]  > 0.5f)
    52d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    52dc:	ed96 7a80 	vldr	s14, [r6, #512]	; 0x200
    52e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    52e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52e8:	f77e ad50 	ble.w	3d8c <handleSPI+0x30c>
						noiseOn = 1;
    52ec:	4b50      	ldr	r3, [pc, #320]	; (5430 <handleSPI+0x19b0>)
    52ee:	2201      	movs	r2, #1
    52f0:	701a      	strb	r2, [r3, #0]
    52f2:	f7fe bd4b 	b.w	3d8c <handleSPI+0x30c>
    52f6:	2401      	movs	r4, #1
    52f8:	e7cc      	b.n	5294 <handleSPI+0x1814>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    52fa:	ee07 8a90 	vmov	s15, r8
    52fe:	4852      	ldr	r0, [pc, #328]	; (5448 <handleSPI+0x19c8>)
    5300:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5304:	eddf 7a51 	vldr	s15, [pc, #324]	; 544c <handleSPI+0x19cc>
    5308:	ee20 0a27 	vmul.f32	s0, s0, s15
    530c:	f006 ff3c 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5310:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    5314:	e6a0      	b.n	5058 <handleSPI+0x15d8>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5316:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    531a:	4d4d      	ldr	r5, [pc, #308]	; (5450 <handleSPI+0x19d0>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    531c:	484d      	ldr	r0, [pc, #308]	; (5454 <handleSPI+0x19d4>)
    531e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5322:	eddf 7a4a 	vldr	s15, [pc, #296]	; 544c <handleSPI+0x19cc>
    5326:	ee20 0a27 	vmul.f32	s0, s0, s15
    532a:	f006 ff2d 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    532e:	f8c5 9000 	str.w	r9, [r5]
    5332:	e5b6      	b.n	4ea2 <handleSPI+0x1422>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5334:	ee07 9a90 	vmov	s15, r9
    5338:	4847      	ldr	r0, [pc, #284]	; (5458 <handleSPI+0x19d8>)
    533a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    533e:	eddf 7a43 	vldr	s15, [pc, #268]	; 544c <handleSPI+0x19cc>
    5342:	ee20 0a27 	vmul.f32	s0, s0, s15
    5346:	f006 ff1f 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    534a:	f8c5 9020 	str.w	r9, [r5, #32]
    534e:	e648      	b.n	4fe2 <handleSPI+0x1562>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5350:	ee07 9a90 	vmov	s15, r9
    5354:	4841      	ldr	r0, [pc, #260]	; (545c <handleSPI+0x19dc>)
    5356:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    535a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 544c <handleSPI+0x19cc>
    535e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5362:	f006 ff11 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5366:	f8c5 901c 	str.w	r9, [r5, #28]
    536a:	e626      	b.n	4fba <handleSPI+0x153a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    536c:	ee07 9a90 	vmov	s15, r9
    5370:	483b      	ldr	r0, [pc, #236]	; (5460 <handleSPI+0x19e0>)
    5372:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5376:	eddf 7a35 	vldr	s15, [pc, #212]	; 544c <handleSPI+0x19cc>
    537a:	ee20 0a27 	vmul.f32	s0, s0, s15
    537e:	f006 ff03 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5382:	f8c5 9018 	str.w	r9, [r5, #24]
    5386:	e604      	b.n	4f92 <handleSPI+0x1512>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5388:	ee07 9a90 	vmov	s15, r9
    538c:	4835      	ldr	r0, [pc, #212]	; (5464 <handleSPI+0x19e4>)
    538e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5392:	eddf 7a2e 	vldr	s15, [pc, #184]	; 544c <handleSPI+0x19cc>
    5396:	ee20 0a27 	vmul.f32	s0, s0, s15
    539a:	f006 fef5 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    539e:	f8c5 9014 	str.w	r9, [r5, #20]
    53a2:	e5e2      	b.n	4f6a <handleSPI+0x14ea>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    53a4:	ee07 9a90 	vmov	s15, r9
    53a8:	482f      	ldr	r0, [pc, #188]	; (5468 <handleSPI+0x19e8>)
    53aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53ae:	eddf 7a27 	vldr	s15, [pc, #156]	; 544c <handleSPI+0x19cc>
    53b2:	ee20 0a27 	vmul.f32	s0, s0, s15
    53b6:	f006 fee7 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53ba:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    53be:	e638      	b.n	5032 <handleSPI+0x15b2>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    53c0:	ee07 9a90 	vmov	s15, r9
    53c4:	4829      	ldr	r0, [pc, #164]	; (546c <handleSPI+0x19ec>)
    53c6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53ca:	eddf 7a20 	vldr	s15, [pc, #128]	; 544c <handleSPI+0x19cc>
    53ce:	ee20 0a27 	vmul.f32	s0, s0, s15
    53d2:	f006 fed9 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53d6:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    53da:	e616      	b.n	500a <handleSPI+0x158a>
    53dc:	4924      	ldr	r1, [pc, #144]	; (5470 <handleSPI+0x19f0>)
    53de:	f7fe bea2 	b.w	4126 <handleSPI+0x6a6>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    53e2:	ee07 9a90 	vmov	s15, r9
    53e6:	4821      	ldr	r0, [pc, #132]	; (546c <handleSPI+0x19ec>)
    53e8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53ec:	eddf 7a17 	vldr	s15, [pc, #92]	; 544c <handleSPI+0x19cc>
    53f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    53f4:	f006 fec8 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    53f8:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    53fc:	f7fe bfac 	b.w	4358 <handleSPI+0x8d8>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5400:	ee07 9a90 	vmov	s15, r9
    5404:	4814      	ldr	r0, [pc, #80]	; (5458 <handleSPI+0x19d8>)
    5406:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    540a:	eddf 7a10 	vldr	s15, [pc, #64]	; 544c <handleSPI+0x19cc>
    540e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5412:	f006 feb9 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5416:	f8c5 9020 	str.w	r9, [r5, #32]
    541a:	f7fe bf89 	b.w	4330 <handleSPI+0x8b0>
    541e:	bf00      	nop
    5420:	20005358 	.word	0x20005358
    5424:	20018f20 	.word	0x20018f20
    5428:	20018f30 	.word	0x20018f30
    542c:	2001cf88 	.word	0x2001cf88
    5430:	2001d1cc 	.word	0x2001d1cc
    5434:	3c23d70a 	.word	0x3c23d70a
    5438:	2000068c 	.word	0x2000068c
    543c:	20000690 	.word	0x20000690
    5440:	377ffff6 	.word	0x377ffff6
    5444:	04002001 	.word	0x04002001
    5448:	20005270 	.word	0x20005270
    544c:	3b808081 	.word	0x3b808081
    5450:	2001a090 	.word	0x2001a090
    5454:	20005244 	.word	0x20005244
    5458:	20005264 	.word	0x20005264
    545c:	20005260 	.word	0x20005260
    5460:	2000525c 	.word	0x2000525c
    5464:	20005258 	.word	0x20005258
    5468:	2000526c 	.word	0x2000526c
    546c:	20005268 	.word	0x20005268
    5470:	20014318 	.word	0x20014318
    5474:	20018594 	.word	0x20018594
    5478:	2001d418 	.word	0x2001d418
    547c:	200006b0 	.word	0x200006b0
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5480:	ee07 9a90 	vmov	s15, r9
    5484:	4866      	ldr	r0, [pc, #408]	; (5620 <handleSPI+0x1ba0>)
    5486:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    548a:	eddf 7a66 	vldr	s15, [pc, #408]	; 5624 <handleSPI+0x1ba4>
    548e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5492:	f006 fe79 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5496:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
    549a:	f7fe bf35 	b.w	4308 <handleSPI+0x888>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    549e:	ee07 9a90 	vmov	s15, r9
    54a2:	4861      	ldr	r0, [pc, #388]	; (5628 <handleSPI+0x1ba8>)
    54a4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54a8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 5624 <handleSPI+0x1ba4>
    54ac:	ee20 0a27 	vmul.f32	s0, s0, s15
    54b0:	f006 fe6a 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54b4:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
    54b8:	f7fe bf12 	b.w	42e0 <handleSPI+0x860>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54bc:	ee07 9a90 	vmov	s15, r9
    54c0:	485a      	ldr	r0, [pc, #360]	; (562c <handleSPI+0x1bac>)
    54c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54c6:	eddf 7a57 	vldr	s15, [pc, #348]	; 5624 <handleSPI+0x1ba4>
    54ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    54ce:	f006 fe5b 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54d2:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
    54d6:	f7fe beef 	b.w	42b8 <handleSPI+0x838>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54da:	ee07 9a90 	vmov	s15, r9
    54de:	4854      	ldr	r0, [pc, #336]	; (5630 <handleSPI+0x1bb0>)
    54e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54e4:	eddf 7a4f 	vldr	s15, [pc, #316]	; 5624 <handleSPI+0x1ba4>
    54e8:	ee20 0a27 	vmul.f32	s0, s0, s15
    54ec:	f006 fe4c 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54f0:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
    54f4:	f7fe becc 	b.w	4290 <handleSPI+0x810>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54f8:	ee07 9a90 	vmov	s15, r9
    54fc:	484d      	ldr	r0, [pc, #308]	; (5634 <handleSPI+0x1bb4>)
    54fe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5502:	eddf 7a48 	vldr	s15, [pc, #288]	; 5624 <handleSPI+0x1ba4>
    5506:	ee20 0a27 	vmul.f32	s0, s0, s15
    550a:	f006 fe3d 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    550e:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    5512:	f7fe bea9 	b.w	4268 <handleSPI+0x7e8>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5516:	ee07 9a90 	vmov	s15, r9
    551a:	4847      	ldr	r0, [pc, #284]	; (5638 <handleSPI+0x1bb8>)
    551c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5520:	eddf 7a40 	vldr	s15, [pc, #256]	; 5624 <handleSPI+0x1ba4>
    5524:	ee20 0a27 	vmul.f32	s0, s0, s15
    5528:	f006 fe2e 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    552c:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    5530:	f7fe be86 	b.w	4240 <handleSPI+0x7c0>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5534:	ee07 9a90 	vmov	s15, r9
    5538:	4840      	ldr	r0, [pc, #256]	; (563c <handleSPI+0x1bbc>)
    553a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    553e:	eddf 7a39 	vldr	s15, [pc, #228]	; 5624 <handleSPI+0x1ba4>
    5542:	ee20 0a27 	vmul.f32	s0, s0, s15
    5546:	f006 fe1f 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    554a:	f8c5 9010 	str.w	r9, [r5, #16]
    554e:	e4f8      	b.n	4f42 <handleSPI+0x14c2>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5550:	ee07 9a90 	vmov	s15, r9
    5554:	483a      	ldr	r0, [pc, #232]	; (5640 <handleSPI+0x1bc0>)
    5556:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    555a:	eddf 7a32 	vldr	s15, [pc, #200]	; 5624 <handleSPI+0x1ba4>
    555e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5562:	f006 fe11 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5566:	f8c5 900c 	str.w	r9, [r5, #12]
    556a:	e4d6      	b.n	4f1a <handleSPI+0x149a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    556c:	ee07 9a90 	vmov	s15, r9
    5570:	4834      	ldr	r0, [pc, #208]	; (5644 <handleSPI+0x1bc4>)
    5572:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5576:	eddf 7a2b 	vldr	s15, [pc, #172]	; 5624 <handleSPI+0x1ba4>
    557a:	ee20 0a27 	vmul.f32	s0, s0, s15
    557e:	f006 fe03 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5582:	f8c5 9008 	str.w	r9, [r5, #8]
    5586:	e4b4      	b.n	4ef2 <handleSPI+0x1472>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5588:	ee07 9a90 	vmov	s15, r9
    558c:	482e      	ldr	r0, [pc, #184]	; (5648 <handleSPI+0x1bc8>)
    558e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5592:	eddf 7a24 	vldr	s15, [pc, #144]	; 5624 <handleSPI+0x1ba4>
    5596:	ee20 0a27 	vmul.f32	s0, s0, s15
    559a:	f006 fdf5 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    559e:	f8c5 9004 	str.w	r9, [r5, #4]
    55a2:	e492      	b.n	4eca <handleSPI+0x144a>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    55a4:	ee07 8a90 	vmov	s15, r8
    55a8:	4828      	ldr	r0, [pc, #160]	; (564c <handleSPI+0x1bcc>)
    55aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55ae:	eddf 7a1d 	vldr	s15, [pc, #116]	; 5624 <handleSPI+0x1ba4>
    55b2:	ee20 0a27 	vmul.f32	s0, s0, s15
    55b6:	f006 fde7 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55ba:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    55be:	f7fe bef2 	b.w	43a6 <handleSPI+0x926>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    55c2:	ee07 9a90 	vmov	s15, r9
    55c6:	4822      	ldr	r0, [pc, #136]	; (5650 <handleSPI+0x1bd0>)
    55c8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 5624 <handleSPI+0x1ba4>
    55d0:	ee20 0a27 	vmul.f32	s0, s0, s15
    55d4:	f006 fdd8 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55d8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    55dc:	f7fe bed0 	b.w	4380 <handleSPI+0x900>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    55e0:	ee07 9a90 	vmov	s15, r9
    55e4:	481b      	ldr	r0, [pc, #108]	; (5654 <handleSPI+0x1bd4>)
    55e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 5624 <handleSPI+0x1ba4>
    55ee:	ee20 0a27 	vmul.f32	s0, s0, s15
    55f2:	f006 fdc9 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55f6:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
    55fa:	f7fe be0d 	b.w	4218 <handleSPI+0x798>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    55fe:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[whichKnob] = newByte;
    5602:	4d15      	ldr	r5, [pc, #84]	; (5658 <handleSPI+0x1bd8>)
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5604:	4815      	ldr	r0, [pc, #84]	; (565c <handleSPI+0x1bdc>)
    5606:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    560a:	eddf 7a06 	vldr	s15, [pc, #24]	; 5624 <handleSPI+0x1ba4>
    560e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5612:	f006 fdb9 	bl	c188 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5616:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    561a:	f7fe bde9 	b.w	41f0 <handleSPI+0x770>
    561e:	bf00      	nop
    5620:	20005290 	.word	0x20005290
    5624:	3b808081 	.word	0x3b808081
    5628:	2000528c 	.word	0x2000528c
    562c:	20005288 	.word	0x20005288
    5630:	20005284 	.word	0x20005284
    5634:	20005280 	.word	0x20005280
    5638:	2000527c 	.word	0x2000527c
    563c:	20005254 	.word	0x20005254
    5640:	20005250 	.word	0x20005250
    5644:	2000524c 	.word	0x2000524c
    5648:	20005248 	.word	0x20005248
    564c:	20005270 	.word	0x20005270
    5650:	2000526c 	.word	0x2000526c
    5654:	20005278 	.word	0x20005278
    5658:	2001a090 	.word	0x2001a090
    565c:	20005274 	.word	0x20005274
    5660:	47800000 	.word	0x47800000
					bufferPos = 138;//first byte after name
    5664:	208a      	movs	r0, #138	; 0x8a
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5666:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 5660 <handleSPI+0x1be0>
					bufferPos = 138;//first byte after name
    566a:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    566c:	f8b1 a000 	ldrh.w	sl, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    5670:	f8b1 8000 	ldrh.w	r8, [r1]
						bufferPos = bufferPos + 2;
    5674:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5676:	fa1f fa8a 	uxth.w	sl, sl
						buffer[bufferPos+1] = integerVersion & 255;
    567a:	fa13 f888 	uxtah	r8, r3, r8
						bufferPos = bufferPos + 2;
    567e:	3002      	adds	r0, #2
    5680:	b280      	uxth	r0, r0
    5682:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5684:	f8b1 e000 	ldrh.w	lr, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    5688:	f8b1 c000 	ldrh.w	ip, [r1]
						bufferPos = bufferPos + 2;
    568c:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    568e:	fa1f fe8e 	uxth.w	lr, lr
						buffer[bufferPos+1] = integerVersion & 255;
    5692:	fa13 fc8c 	uxtah	ip, r3, ip
						bufferPos = bufferPos + 2;
    5696:	3002      	adds	r0, #2
    5698:	b280      	uxth	r0, r0
    569a:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    569c:	880e      	ldrh	r6, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    569e:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    56a0:	b2b6      	uxth	r6, r6
						buffer[bufferPos+1] = integerVersion & 255;
    56a2:	fa13 f080 	uxtah	r0, r3, r0
    56a6:	9004      	str	r0, [sp, #16]
						bufferPos = bufferPos + 2;
    56a8:	8808      	ldrh	r0, [r1, #0]
    56aa:	3002      	adds	r0, #2
    56ac:	b280      	uxth	r0, r0
    56ae:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    56b0:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56b2:	48bc      	ldr	r0, [pc, #752]	; (59a4 <handleSPI+0x1f24>)
						buffer[bufferPos] = integerVersion >> 8;
    56b4:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56b6:	ed90 5a00 	vldr	s10, [r0]
						buffer[bufferPos] = integerVersion >> 8;
    56ba:	9501      	str	r5, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    56bc:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56be:	ee25 5a27 	vmul.f32	s10, s10, s15
    56c2:	edd0 5a01 	vldr	s11, [r0, #4]
    56c6:	ed90 6a02 	vldr	s12, [r0, #8]
    56ca:	edd0 6a03 	vldr	s13, [r0, #12]
    56ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
    56d2:	ed90 7a04 	vldr	s14, [r0, #16]
						buffer[bufferPos+1] = integerVersion & 255;
    56d6:	fa13 f085 	uxtah	r0, r3, r5
						bufferPos = bufferPos + 2;
    56da:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56dc:	eebc 5ac5 	vcvt.u32.f32	s10, s10
    56e0:	ee26 6a27 	vmul.f32	s12, s12, s15
						buffer[bufferPos+1] = integerVersion & 255;
    56e4:	9006      	str	r0, [sp, #24]
						bufferPos = bufferPos + 2;
    56e6:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56e8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
    56ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
    56f0:	ee15 ba10 	vmov	fp, s10
						bufferPos = bufferPos + 2;
    56f4:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    56f6:	ee27 7a27 	vmul.f32	s14, s14, s15
    56fa:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    56fe:	ee15 0a90 	vmov	r0, s11
						bufferPos = bufferPos + 2;
    5702:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5704:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    5708:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    570a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    570e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						buffer[bufferPos] = integerVersion >> 8;
    5712:	f803 b00a 	strb.w	fp, [r3, sl]
    5716:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5718:	ed8d 6a03 	vstr	s12, [sp, #12]
    571c:	edcd 6a05 	vstr	s13, [sp, #20]
						buffer[bufferPos] = integerVersion >> 8;
    5720:	9502      	str	r5, [sp, #8]
    5722:	ee15 5a10 	vmov	r5, s10
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5726:	ed8d 7a07 	vstr	s14, [sp, #28]
						buffer[bufferPos+1] = integerVersion & 255;
    572a:	f888 5001 	strb.w	r5, [r8, #1]
						buffer[bufferPos] = integerVersion >> 8;
    572e:	ee16 5a10 	vmov	r5, s12
    5732:	f3c0 2807 	ubfx	r8, r0, #8, #8
    5736:	f803 800e 	strb.w	r8, [r3, lr]
						buffer[bufferPos+1] = integerVersion & 255;
    573a:	f88c 0001 	strb.w	r0, [ip, #1]
						buffer[bufferPos] = integerVersion >> 8;
    573e:	f3c5 2c07 	ubfx	ip, r5, #8, #8
    5742:	9801      	ldr	r0, [sp, #4]
    5744:	f803 c006 	strb.w	ip, [r3, r6]
						buffer[bufferPos+1] = integerVersion & 255;
    5748:	9e04      	ldr	r6, [sp, #16]
    574a:	7075      	strb	r5, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    574c:	ee16 5a90 	vmov	r5, s13
    5750:	f3c5 2607 	ubfx	r6, r5, #8, #8
    5754:	541e      	strb	r6, [r3, r0]
						buffer[bufferPos+1] = integerVersion & 255;
    5756:	9806      	ldr	r0, [sp, #24]
    5758:	7045      	strb	r5, [r0, #1]
						buffer[bufferPos] = integerVersion >> 8;
    575a:	ee17 0a10 	vmov	r0, s14
    575e:	9d02      	ldr	r5, [sp, #8]
    5760:	f3c0 2607 	ubfx	r6, r0, #8, #8
    5764:	555e      	strb	r6, [r3, r5]
						buffer[bufferPos+1] = integerVersion & 255;
    5766:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5768:	4e8e      	ldr	r6, [pc, #568]	; (59a4 <handleSPI+0x1f24>)
						buffer[bufferPos+1] = integerVersion & 255;
    576a:	fa13 f585 	uxtah	r5, r3, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    576e:	edd6 5a05 	vldr	s11, [r6, #20]
						buffer[bufferPos+1] = integerVersion & 255;
    5772:	7068      	strb	r0, [r5, #1]
						bufferPos = bufferPos + 2;
    5774:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5776:	ee65 5aa7 	vmul.f32	s11, s11, s15
    577a:	ed96 6a06 	vldr	s12, [r6, #24]
						bufferPos = bufferPos + 2;
    577e:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5780:	edd6 6a07 	vldr	s13, [r6, #28]
    5784:	ed96 7a08 	vldr	s14, [r6, #32]
    5788:	eefc 5ae5 	vcvt.u32.f32	s11, s11
						bufferPos = bufferPos + 2;
    578c:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    578e:	ee26 6a27 	vmul.f32	s12, s12, s15
    5792:	ee66 6aa7 	vmul.f32	s13, s13, s15
						bufferPos = bufferPos + 2;
    5796:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5798:	ee27 7a27 	vmul.f32	s14, s14, s15
						buffer[bufferPos] = integerVersion >> 8;
    579c:	f8b1 8000 	ldrh.w	r8, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    57a0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
						buffer[bufferPos+1] = integerVersion & 255;
    57a4:	f8b1 e000 	ldrh.w	lr, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    57a8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
						bufferPos = bufferPos + 2;
    57ac:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    57ae:	fa1f f888 	uxth.w	r8, r8
						buffer[bufferPos+1] = integerVersion & 255;
    57b2:	fa13 fe8e 	uxtah	lr, r3, lr
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    57b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						bufferPos = bufferPos + 2;
    57ba:	3502      	adds	r5, #2
    57bc:	b2ad      	uxth	r5, r5
    57be:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    57c0:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    57c4:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    57c6:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    57c8:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    57cc:	fa13 f686 	uxtah	r6, r3, r6
						bufferPos = bufferPos + 2;
    57d0:	3502      	adds	r5, #2
    57d2:	b2ad      	uxth	r5, r5
    57d4:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    57d6:	880d      	ldrh	r5, [r1, #0]
    57d8:	b2a8      	uxth	r0, r5
						buffer[bufferPos+1] = integerVersion & 255;
    57da:	880d      	ldrh	r5, [r1, #0]
    57dc:	fa13 f585 	uxtah	r5, r3, r5
    57e0:	9504      	str	r5, [sp, #16]
						bufferPos = bufferPos + 2;
    57e2:	880d      	ldrh	r5, [r1, #0]
    57e4:	3502      	adds	r5, #2
    57e6:	b2ad      	uxth	r5, r5
    57e8:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    57ea:	880d      	ldrh	r5, [r1, #0]
    57ec:	b2ad      	uxth	r5, r5
    57ee:	9502      	str	r5, [sp, #8]
						buffer[bufferPos+1] = integerVersion & 255;
    57f0:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    57f2:	ed8d 6a01 	vstr	s12, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    57f6:	fa13 fa85 	uxtah	sl, r3, r5
						bufferPos = bufferPos + 2;
    57fa:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    57fc:	edcd 6a03 	vstr	s13, [sp, #12]
						bufferPos = bufferPos + 2;
    5800:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5802:	ed8d 7a05 	vstr	s14, [sp, #20]
						bufferPos = bufferPos + 2;
    5806:	b2ad      	uxth	r5, r5
    5808:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    580a:	ee15 5a90 	vmov	r5, s11
						buffer[bufferPos] = integerVersion >> 8;
    580e:	f3c5 2b07 	ubfx	fp, r5, #8, #8
    5812:	f803 b008 	strb.w	fp, [r3, r8]
						buffer[bufferPos+1] = integerVersion & 255;
    5816:	f88e 5001 	strb.w	r5, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    581a:	ee16 5a10 	vmov	r5, s12
    581e:	f8b1 8000 	ldrh.w	r8, [r1]
    5822:	f3c5 2507 	ubfx	r5, r5, #8, #8
						buffer[bufferPos+1] = integerVersion & 255;
    5826:	f8b1 e000 	ldrh.w	lr, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    582a:	fa1f f888 	uxth.w	r8, r8
    582e:	f803 500c 	strb.w	r5, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    5832:	ee16 5a10 	vmov	r5, s12
    5836:	fa13 fe8e 	uxtah	lr, r3, lr
    583a:	7075      	strb	r5, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    583c:	ee16 6a90 	vmov	r6, s13
    5840:	f3c6 2507 	ubfx	r5, r6, #8, #8
    5844:	541d      	strb	r5, [r3, r0]
						buffer[bufferPos+1] = integerVersion & 255;
    5846:	9804      	ldr	r0, [sp, #16]
    5848:	7046      	strb	r6, [r0, #1]
						buffer[bufferPos] = integerVersion >> 8;
    584a:	ee17 6a10 	vmov	r6, s14
    584e:	9802      	ldr	r0, [sp, #8]
    5850:	f3c6 2507 	ubfx	r5, r6, #8, #8
    5854:	541d      	strb	r5, [r3, r0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5856:	4853      	ldr	r0, [pc, #332]	; (59a4 <handleSPI+0x1f24>)
						buffer[bufferPos+1] = integerVersion & 255;
    5858:	f88a 6001 	strb.w	r6, [sl, #1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    585c:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    5860:	ed90 6a09 	vldr	s12, [r0, #36]	; 0x24
    5864:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5868:	484f      	ldr	r0, [pc, #316]	; (59a8 <handleSPI+0x1f28>)
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    586a:	ee26 6a27 	vmul.f32	s12, s12, s15
    586e:	ee66 6aa7 	vmul.f32	s13, s13, s15
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5872:	f8d0 a000 	ldr.w	sl, [r0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5876:	ee67 7a27 	vmul.f32	s15, s14, s15
						bufferPos = bufferPos + 2;
    587a:	8808      	ldrh	r0, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    587c:	eebc 7ac6 	vcvt.u32.f32	s14, s12
						bufferPos = bufferPos + 2;
    5880:	3002      	adds	r0, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    5886:	b280      	uxth	r0, r0
    5888:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    588a:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    588e:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    5890:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5892:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    5896:	fa13 f686 	uxtah	r6, r3, r6
						bufferPos = bufferPos + 2;
    589a:	3002      	adds	r0, #2
    589c:	b280      	uxth	r0, r0
    589e:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58a0:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    58a2:	8808      	ldrh	r0, [r1, #0]
						bufferPos = bufferPos + 2;
    58a4:	f8b1 b000 	ldrh.w	fp, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    58a8:	b2ad      	uxth	r5, r5
						buffer[bufferPos+1] = integerVersion & 255;
    58aa:	fa13 f080 	uxtah	r0, r3, r0
						bufferPos = bufferPos + 2;
    58ae:	f10b 0b02 	add.w	fp, fp, #2
    58b2:	fa1f fb8b 	uxth.w	fp, fp
    58b6:	f8a1 b000 	strh.w	fp, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58ba:	ee17 1a10 	vmov	r1, s14
					 presetNumberToLoad = presetNumberToSave;
    58be:	f899 9000 	ldrb.w	r9, [r9]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58c2:	eebc 7ae6 	vcvt.u32.f32	s14, s13
					 presetNumberToLoad = presetNumberToSave;
    58c6:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 59c4 <handleSPI+0x1f44>
    58ca:	fa5f f989 	uxtb.w	r9, r9
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58ce:	edcd 7a02 	vstr	s15, [sp, #8]
    58d2:	ed8d 7a01 	vstr	s14, [sp, #4]
					 presetNumberToLoad = presetNumberToSave;
    58d6:	f88b 9000 	strb.w	r9, [fp]
						buffer[bufferPos] = integerVersion >> 8;
    58da:	f3c1 2907 	ubfx	r9, r1, #8, #8
    58de:	f803 9008 	strb.w	r9, [r3, r8]
						buffer[bufferPos+1] = integerVersion & 255;
    58e2:	f88e 1001 	strb.w	r1, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    58e6:	ee17 1a10 	vmov	r1, s14
    58ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
    58ee:	f803 100c 	strb.w	r1, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    58f2:	ee17 1a10 	vmov	r1, s14
    58f6:	7071      	strb	r1, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    58f8:	ee17 6a90 	vmov	r6, s15
    58fc:	f3c6 2107 	ubfx	r1, r6, #8, #8
    5900:	5559      	strb	r1, [r3, r5]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5902:	4b2a      	ldr	r3, [pc, #168]	; (59ac <handleSPI+0x1f2c>)
						buffer[bufferPos+1] = integerVersion & 255;
    5904:	7046      	strb	r6, [r0, #1]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5906:	f8c3 a000 	str.w	sl, [r3]
					 presetWaitingToWrite = currentPresetSize;
    590a:	4b29      	ldr	r3, [pc, #164]	; (59b0 <handleSPI+0x1f30>)
    590c:	4829      	ldr	r0, [pc, #164]	; (59b4 <handleSPI+0x1f34>)
    590e:	f8c3 a000 	str.w	sl, [r3]
    5912:	f7fe ba42 	b.w	3d9a <handleSPI+0x31a>
				else if (mappingChangeType == Amount)
    5916:	f1b9 0f01 	cmp.w	r9, #1
    591a:	f000 8265 	beq.w	5de8 <handleSPI+0x2368>
				else if (mappingChangeType == ScalarID)
    591e:	f1b9 0f02 	cmp.w	r9, #2
    5922:	f47e aa33 	bne.w	3d8c <handleSPI+0x30c>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5926:	4824      	ldr	r0, [pc, #144]	; (59b8 <handleSPI+0x1f38>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5928:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    592a:	2eff      	cmp	r6, #255	; 0xff
    592c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5930:	f1a6 0918 	sub.w	r9, r6, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5934:	f1a6 0c14 	sub.w	ip, r6, #20
    5938:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    593a:	fb02 f303 	mul.w	r3, r2, r3
    593e:	f10e 0504 	add.w	r5, lr, #4
						if (scalar == 0xff)
    5942:	f000 828d 	beq.w	5e60 <handleSPI+0x23e0>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5946:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    594a:	4d1c      	ldr	r5, [pc, #112]	; (59bc <handleSPI+0x1f3c>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    594c:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5950:	4443      	add	r3, r8
    5952:	eb05 0bc6 	add.w	fp, r5, r6, lsl #3
    5956:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    595a:	f200 8261 	bhi.w	5e20 <handleSPI+0x23a0>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    595e:	4b18      	ldr	r3, [pc, #96]	; (59c0 <handleSPI+0x1f40>)
    5960:	f04f 0b01 	mov.w	fp, #1
    5964:	4433      	add	r3, r6
    5966:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    596a:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    596c:	2e03      	cmp	r6, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    596e:	f10a 0a01 	add.w	sl, sl, #1
    5972:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    5976:	bf08      	it	eq
    5978:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    597a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    597e:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5982:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
    5986:	4443      	add	r3, r8
    5988:	629d      	str	r5, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    598a:	f200 8240 	bhi.w	5e0e <handleSPI+0x238e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    598e:	4b0c      	ldr	r3, [pc, #48]	; (59c0 <handleSPI+0x1f40>)
    5990:	2201      	movs	r2, #1
    5992:	4433      	add	r3, r6
    5994:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    5998:	2e03      	cmp	r6, #3
    599a:	bf08      	it	eq
    599c:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    599e:	7001      	strb	r1, [r0, #0]
    59a0:	f7fe b9f4 	b.w	3d8c <handleSPI+0x30c>
    59a4:	200051f4 	.word	0x200051f4
    59a8:	2001431c 	.word	0x2001431c
    59ac:	2001a088 	.word	0x2001a088
    59b0:	2001a08c 	.word	0x2001a08c
    59b4:	30043380 	.word	0x30043380
    59b8:	2001d1cc 	.word	0x2001d1cc
    59bc:	2001d418 	.word	0x2001d418
    59c0:	2001cf88 	.word	0x2001cf88
    59c4:	2001a082 	.word	0x2001a082
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    59c8:	4bc9      	ldr	r3, [pc, #804]	; (5cf0 <handleSPI+0x2270>)
    59ca:	410b      	asrs	r3, r1
    59cc:	f013 0301 	ands.w	r3, r3, #1
    59d0:	d123      	bne.n	5a1a <handleSPI+0x1f9a>
					if (params[whichParam].realVal[0]  > 0.5f)
    59d2:	9901      	ldr	r1, [sp, #4]
    59d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    59d8:	1b49      	subs	r1, r1, r5
    59da:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    59de:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    59e2:	49c4      	ldr	r1, [pc, #784]	; (5cf4 <handleSPI+0x2274>)
					if (params[whichParam].realVal[0]  > 0.5f)
    59e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    59e8:	fb81 0102 	smull	r0, r1, r1, r2
    59ec:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    59ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    59f2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    59f6:	dd02      	ble.n	59fe <handleSPI+0x1f7e>
						oscOn[whichOsc] = 1;
    59f8:	2301      	movs	r3, #1
    59fa:	49bf      	ldr	r1, [pc, #764]	; (5cf8 <handleSPI+0x2278>)
    59fc:	548b      	strb	r3, [r1, r2]
    59fe:	49bf      	ldr	r1, [pc, #764]	; (5cfc <handleSPI+0x227c>)
    5a00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    5a04:	e9d1 3200 	ldrd	r3, r2, [r1]
    5a08:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    5a0a:	688a      	ldr	r2, [r1, #8]
    5a0c:	4413      	add	r3, r2
    5a0e:	4abc      	ldr	r2, [pc, #752]	; (5d00 <handleSPI+0x2280>)
    5a10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5a14:	681a      	ldr	r2, [r3, #0]
    5a16:	4bbb      	ldr	r3, [pc, #748]	; (5d04 <handleSPI+0x2284>)
    5a18:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    5a1a:	2d87      	cmp	r5, #135	; 0x87
    5a1c:	d005      	beq.n	5a2a <handleSPI+0x1faa>
    5a1e:	2d8c      	cmp	r5, #140	; 0x8c
    5a20:	d003      	beq.n	5a2a <handleSPI+0x1faa>
    5a22:	2d91      	cmp	r5, #145	; 0x91
    5a24:	d001      	beq.n	5a2a <handleSPI+0x1faa>
    5a26:	2d96      	cmp	r5, #150	; 0x96
    5a28:	d16e      	bne.n	5b08 <handleSPI+0x2088>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5a2a:	9b01      	ldr	r3, [sp, #4]
    5a2c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5a30:	4ab5      	ldr	r2, [pc, #724]	; (5d08 <handleSPI+0x2288>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5a32:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5a36:	1b5b      	subs	r3, r3, r5
    5a38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5a3c:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5a40:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5a44:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5a48:	fb82 1203 	smull	r1, r2, r2, r3
    5a4c:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5a4e:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    5a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5a56:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    5a5a:	ee17 0a90 	vmov	r0, s15
    5a5e:	4641      	mov	r1, r8
    5a60:	f006 fb32 	bl	c0c8 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5a64:	49a9      	ldr	r1, [pc, #676]	; (5d0c <handleSPI+0x228c>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    5a66:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    5a6a:	9703      	str	r7, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5a6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    5a70:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    5a74:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    5a78:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5a7a:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    5a7e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    5a82:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5a86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5a8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5a8e:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5a92:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5a96:	ea4f 0389 	mov.w	r3, r9, lsl #2
    5a9a:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    5a9e:	4617      	mov	r7, r2
    5aa0:	f103 0840 	add.w	r8, r3, #64	; 0x40
    5aa4:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5aa8:	6841      	ldr	r1, [r0, #4]
    5aaa:	44b0      	add	r8, r6
    5aac:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5ab0:	6881      	ldr	r1, [r0, #8]
    5ab2:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5ab4:	f103 0108 	add.w	r1, r3, #8
    5ab8:	1871      	adds	r1, r6, r1
    5aba:	9102      	str	r1, [sp, #8]
    5abc:	f103 0124 	add.w	r1, r3, #36	; 0x24
    5ac0:	1873      	adds	r3, r6, r1
    5ac2:	9301      	str	r3, [sp, #4]
    5ac4:	4623      	mov	r3, r4
    5ac6:	462c      	mov	r4, r5
    5ac8:	4655      	mov	r5, sl
    5aca:	469a      	mov	sl, r3
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    5acc:	9b02      	ldr	r3, [sp, #8]
    5ace:	4629      	mov	r1, r5
    5ad0:	f899 0018 	ldrb.w	r0, [r9, #24]
    5ad4:	ecb3 0a01 	vldmia	r3!, {s0}
    5ad8:	9302      	str	r3, [sp, #8]
    5ada:	f8d9 3014 	ldr.w	r3, [r9, #20]
    5ade:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    5ae0:	9b01      	ldr	r3, [sp, #4]
    5ae2:	4629      	mov	r1, r5
    5ae4:	f89b 0018 	ldrb.w	r0, [fp, #24]
    5ae8:	ecb3 0a01 	vldmia	r3!, {s0}
    5aec:	9301      	str	r3, [sp, #4]
    5aee:	f8db 3014 	ldr.w	r3, [fp, #20]
    5af2:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    5af4:	ecb8 0a01 	vldmia	r8!, {s0}
    5af8:	4629      	mov	r1, r5
    5afa:	697b      	ldr	r3, [r7, #20]
    5afc:	7e38      	ldrb	r0, [r7, #24]
    5afe:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5b00:	b1b5      	cbz	r5, 5b30 <handleSPI+0x20b0>
    5b02:	4625      	mov	r5, r4
    5b04:	9f03      	ldr	r7, [sp, #12]
    5b06:	4654      	mov	r4, sl
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    5b08:	2d01      	cmp	r5, #1
    5b0a:	d94b      	bls.n	5ba4 <handleSPI+0x2124>
				if (whichParam == FXOrder)
    5b0c:	2d9a      	cmp	r5, #154	; 0x9a
    5b0e:	d15f      	bne.n	5bd0 <handleSPI+0x2150>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    5b10:	4a7f      	ldr	r2, [pc, #508]	; (5d10 <handleSPI+0x2290>)
    5b12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5b16:	4b7f      	ldr	r3, [pc, #508]	; (5d14 <handleSPI+0x2294>)
    5b18:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b24:	bfcc      	ite	gt
    5b26:	2201      	movgt	r2, #1
    5b28:	2200      	movle	r2, #0
    5b2a:	701a      	strb	r2, [r3, #0]
    5b2c:	f7fe b92e 	b.w	3d8c <handleSPI+0x30c>
    5b30:	2501      	movs	r5, #1
    5b32:	e7cb      	b.n	5acc <handleSPI+0x204c>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b34:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    5b38:	f105 0901 	add.w	r9, r5, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    5b3c:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    5b40:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b44:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    5b48:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    5b4c:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b50:	fef8 7a67 	vrinta.f32	s15, s15
    5b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5b58:	edcd 7a02 	vstr	s15, [sp, #8]
    5b5c:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    5b60:	280d      	cmp	r0, #13
    5b62:	d902      	bls.n	5b6a <handleSPI+0x20ea>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    5b64:	4a6c      	ldr	r2, [pc, #432]	; (5d18 <handleSPI+0x2298>)
    5b66:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    5b6a:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    5b6c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    5b70:	f006 f926 	bl	bdc0 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    5b74:	4a69      	ldr	r2, [pc, #420]	; (5d1c <handleSPI+0x229c>)
    5b76:	ebab 0309 	sub.w	r3, fp, r9
    5b7a:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    5b7e:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    5b82:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5b86:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    5b88:	684b      	ldr	r3, [r1, #4]
    5b8a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    5b8e:	688b      	ldr	r3, [r1, #8]
    5b90:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    5b94:	68cb      	ldr	r3, [r1, #12]
    5b96:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    5b9a:	690b      	ldr	r3, [r1, #16]
    5b9c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    5ba0:	f7ff bb6e 	b.w	5280 <handleSPI+0x1800>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5ba4:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    5ba8:	ed96 7a02 	vldr	s14, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bac:	eddf 6a5c 	vldr	s13, [pc, #368]	; 5d20 <handleSPI+0x22a0>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bb0:	ee37 7a67 	vsub.f32	s14, s14, s15
    5bb4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 5d24 <handleSPI+0x22a4>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bbc:	4b5a      	ldr	r3, [pc, #360]	; (5d28 <handleSPI+0x22a8>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bbe:	4a5b      	ldr	r2, [pc, #364]	; (5d2c <handleSPI+0x22ac>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bc0:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bc4:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bc8:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    5bcc:	f7fe b8de 	b.w	3d8c <handleSPI+0x30c>
    5bd0:	2d9b      	cmp	r5, #155	; 0x9b
    5bd2:	f47e a8db 	bne.w	3d8c <handleSPI+0x30c>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5bd6:	4a4e      	ldr	r2, [pc, #312]	; (5d10 <handleSPI+0x2290>)
    5bd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5bdc:	4b54      	ldr	r3, [pc, #336]	; (5d30 <handleSPI+0x22b0>)
    5bde:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    5be2:	e79b      	b.n	5b1c <handleSPI+0x209c>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    5be4:	2d60      	cmp	r5, #96	; 0x60
    5be6:	d002      	beq.n	5bee <handleSPI+0x216e>
    5be8:	2d66      	cmp	r5, #102	; 0x66
    5bea:	f47f af16 	bne.w	5a1a <handleSPI+0x1f9a>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5bee:	9b01      	ldr	r3, [sp, #4]
    5bf0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5bf4:	494f      	ldr	r1, [pc, #316]	; (5d34 <handleSPI+0x22b4>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5bf6:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5bfa:	1b5b      	subs	r3, r3, r5
    5bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5c00:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5c04:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5c08:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5c0c:	fb81 2103 	smull	r2, r1, r1, r3
    5c10:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5c14:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    5c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5c1c:	ee17 0a90 	vmov	r0, s15
    5c20:	f006 fb22 	bl	c268 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5c24:	4844      	ldr	r0, [pc, #272]	; (5d38 <handleSPI+0x22b8>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5c26:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5c2a:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5c2e:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5c32:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5c34:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5c38:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    5c3c:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5c3e:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5c42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5c46:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    5c4a:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    5c4e:	f10a 0b08 	add.w	fp, sl, #8
    5c52:	f1aa 0a14 	sub.w	sl, sl, #20
    5c56:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5c5a:	eb06 0183 	add.w	r1, r6, r3, lsl #2
    5c5e:	44b3      	add	fp, r6
    5c60:	009b      	lsls	r3, r3, #2
    5c62:	44b2      	add	sl, r6
    5c64:	6148      	str	r0, [r1, #20]
    5c66:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    5c68:	ecbb 0a01 	vldmia	fp!, {s0}
    5c6c:	4649      	mov	r1, r9
    5c6e:	f898 0018 	ldrb.w	r0, [r8, #24]
    5c72:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5c76:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    5c78:	9b02      	ldr	r3, [sp, #8]
    5c7a:	ecba 0a01 	vldmia	sl!, {s0}
    5c7e:	4649      	mov	r1, r9
    5c80:	18f3      	adds	r3, r6, r3
    5c82:	695a      	ldr	r2, [r3, #20]
    5c84:	7e18      	ldrb	r0, [r3, #24]
    5c86:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5c88:	f1b9 0f00 	cmp.w	r9, #0
    5c8c:	f47f aec5 	bne.w	5a1a <handleSPI+0x1f9a>
    5c90:	f04f 0901 	mov.w	r9, #1
    5c94:	e7e8      	b.n	5c68 <handleSPI+0x21e8>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5c96:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    5c9a:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5c9e:	4a15      	ldr	r2, [pc, #84]	; (5cf4 <handleSPI+0x2274>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5ca4:	fb82 1203 	smull	r1, r2, r2, r3
    5ca8:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5caa:	fef8 7a67 	vrinta.f32	s15, s15
    5cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5cb2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5cb6:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    5cba:	2a05      	cmp	r2, #5
    5cbc:	f63f ab03 	bhi.w	52c6 <handleSPI+0x1846>
    5cc0:	e8df f002 	tbb	[pc, r2]
    5cc4:	0f444a50 	.word	0x0f444a50
    5cc8:	0309      	.short	0x0309
			  shapeTick[i] = &triTick;
    5cca:	4a1c      	ldr	r2, [pc, #112]	; (5d3c <handleSPI+0x22bc>)
    5ccc:	491c      	ldr	r1, [pc, #112]	; (5d40 <handleSPI+0x22c0>)
    5cce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5cd2:	f7ff baf8 	b.w	52c6 <handleSPI+0x1846>
			  shapeTick[i] = &sineTick;
    5cd6:	4a19      	ldr	r2, [pc, #100]	; (5d3c <handleSPI+0x22bc>)
    5cd8:	491a      	ldr	r1, [pc, #104]	; (5d44 <handleSPI+0x22c4>)
    5cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5cde:	f7ff baf2 	b.w	52c6 <handleSPI+0x1846>
			  shapeTick[i] = &pulseTick;
    5ce2:	4a16      	ldr	r2, [pc, #88]	; (5d3c <handleSPI+0x22bc>)
    5ce4:	4918      	ldr	r1, [pc, #96]	; (5d48 <handleSPI+0x22c8>)
    5ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5cea:	f7ff baec 	b.w	52c6 <handleSPI+0x1846>
    5cee:	bf00      	nop
    5cf0:	fbffdffe 	.word	0xfbffdffe
    5cf4:	4ec4ec4f 	.word	0x4ec4ec4f
    5cf8:	2001d1f8 	.word	0x2001d1f8
    5cfc:	20018f24 	.word	0x20018f24
    5d00:	200008dc 	.word	0x200008dc
    5d04:	200008d8 	.word	0x200008d8
    5d08:	66666667 	.word	0x66666667
    5d0c:	20018510 	.word	0x20018510
    5d10:	20019f30 	.word	0x20019f30
    5d14:	200164dd 	.word	0x200164dd
    5d18:	00001aa1 	.word	0x00001aa1
    5d1c:	20014360 	.word	0x20014360
    5d20:	42fe0000 	.word	0x42fe0000
    5d24:	3c010204 	.word	0x3c010204
    5d28:	20018f14 	.word	0x20018f14
    5d2c:	20018f18 	.word	0x20018f18
    5d30:	2001a040 	.word	0x2001a040
    5d34:	2aaaaaab 	.word	0x2aaaaaab
    5d38:	200163b4 	.word	0x200163b4
    5d3c:	2001d39c 	.word	0x2001d39c
    5d40:	000084a1 	.word	0x000084a1
    5d44:	00008461 	.word	0x00008461
    5d48:	00008401 	.word	0x00008401
			  shapeTick[i] = &sawTick;
    5d4c:	4a4a      	ldr	r2, [pc, #296]	; (5e78 <handleSPI+0x23f8>)
    5d4e:	494b      	ldr	r1, [pc, #300]	; (5e7c <handleSPI+0x23fc>)
    5d50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5d54:	f7ff bab7 	b.w	52c6 <handleSPI+0x1846>
			  shapeTick[i] = &sineTriTick;
    5d58:	4a47      	ldr	r2, [pc, #284]	; (5e78 <handleSPI+0x23f8>)
    5d5a:	4949      	ldr	r1, [pc, #292]	; (5e80 <handleSPI+0x2400>)
    5d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5d60:	f7ff bab1 	b.w	52c6 <handleSPI+0x1846>
			  shapeTick[i] = &sawSquareTick;
    5d64:	4a44      	ldr	r2, [pc, #272]	; (5e78 <handleSPI+0x23f8>)
    5d66:	4947      	ldr	r1, [pc, #284]	; (5e84 <handleSPI+0x2404>)
    5d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5d6c:	f7ff baab 	b.w	52c6 <handleSPI+0x1846>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5d70:	f1a6 0314 	sub.w	r3, r6, #20
    5d74:	f885 9020 	strb.w	r9, [r5, #32]
    5d78:	2b03      	cmp	r3, #3
    5d7a:	d82e      	bhi.n	5dda <handleSPI+0x235a>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    5d7c:	4b42      	ldr	r3, [pc, #264]	; (5e88 <handleSPI+0x2408>)
    5d7e:	2101      	movs	r1, #1
    5d80:	4433      	add	r3, r6
    5d82:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    5d86:	f7ff ba22 	b.w	51ce <handleSPI+0x174e>
						audioOutBuffer[i] = 0;
    5d8a:	2200      	movs	r2, #0
    5d8c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    5d90:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    5d94:	3308      	adds	r3, #8
    5d96:	428b      	cmp	r3, r1
    5d98:	d1fa      	bne.n	5d90 <handleSPI+0x2310>
    5d9a:	f7fe b9bb 	b.w	4114 <handleSPI+0x694>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    5d9e:	f885 9048 	strb.w	r9, [r5, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5da2:	464d      	mov	r5, r9
							mappings[whichMapping].destNumber = 255;
    5da4:	f808 6003 	strb.w	r6, [r8, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    5da8:	f8da 3004 	ldr.w	r3, [sl, #4]
    5dac:	eb03 0685 	add.w	r6, r3, r5, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    5db0:	691b      	ldr	r3, [r3, #16]
    5db2:	ed96 0a00 	vldr	s0, [r6]
    5db6:	4798      	blx	r3
    5db8:	ed86 0a02 	vstr	s0, [r6, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    5dbc:	f8da 3004 	ldr.w	r3, [sl, #4]
    5dc0:	4629      	mov	r1, r5
    5dc2:	eb03 0685 	add.w	r6, r3, r5, lsl #2
    5dc6:	695a      	ldr	r2, [r3, #20]
    5dc8:	7e18      	ldrb	r0, [r3, #24]
    5dca:	ed96 0a02 	vldr	s0, [r6, #8]
    5dce:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5dd0:	2d00      	cmp	r5, #0
    5dd2:	f47d afdb 	bne.w	3d8c <handleSPI+0x30c>
    5dd6:	2501      	movs	r5, #1
    5dd8:	e7e6      	b.n	5da8 <handleSPI+0x2328>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    5dda:	2e02      	cmp	r6, #2
    5ddc:	f63f a9f7 	bhi.w	51ce <handleSPI+0x174e>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    5de0:	4b2a      	ldr	r3, [pc, #168]	; (5e8c <handleSPI+0x240c>)
    5de2:	5598      	strb	r0, [r3, r6]
    5de4:	f7ff b9f3 	b.w	51ce <handleSPI+0x174e>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    5de8:	ee07 6a90 	vmov	s15, r6
    5dec:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    5df0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 5e90 <handleSPI+0x2410>
    5df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5df8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5dfc:	4473      	add	r3, lr
    5dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
    5e02:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5e06:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    5e0a:	f7fd bfbf 	b.w	3d8c <handleSPI+0x30c>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e0e:	f1bc 0f03 	cmp.w	ip, #3
    5e12:	d811      	bhi.n	5e38 <handleSPI+0x23b8>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5e14:	4b1c      	ldr	r3, [pc, #112]	; (5e88 <handleSPI+0x2408>)
    5e16:	2201      	movs	r2, #1
    5e18:	4433      	add	r3, r6
    5e1a:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e1e:	e5bb      	b.n	5998 <handleSPI+0x1f18>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e20:	f1bc 0f03 	cmp.w	ip, #3
    5e24:	d90f      	bls.n	5e46 <handleSPI+0x23c6>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e26:	2e02      	cmp	r6, #2
    5e28:	f63f ad9f 	bhi.w	596a <handleSPI+0x1eea>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    5e2c:	4b17      	ldr	r3, [pc, #92]	; (5e8c <handleSPI+0x240c>)
    5e2e:	f04f 0b01 	mov.w	fp, #1
    5e32:	f803 b006 	strb.w	fp, [r3, r6]
    5e36:	e598      	b.n	596a <handleSPI+0x1eea>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e38:	2e02      	cmp	r6, #2
    5e3a:	f63f adad 	bhi.w	5998 <handleSPI+0x1f18>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    5e3e:	4b13      	ldr	r3, [pc, #76]	; (5e8c <handleSPI+0x240c>)
    5e40:	2201      	movs	r2, #1
    5e42:	559a      	strb	r2, [r3, r6]
    5e44:	e5a8      	b.n	5998 <handleSPI+0x1f18>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5e46:	4b10      	ldr	r3, [pc, #64]	; (5e88 <handleSPI+0x2408>)
    5e48:	f04f 0b01 	mov.w	fp, #1
    5e4c:	4433      	add	r3, r6
    5e4e:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e52:	e58a      	b.n	596a <handleSPI+0x1eea>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e54:	f1a6 0314 	sub.w	r3, r6, #20
    5e58:	2b03      	cmp	r3, #3
    5e5a:	d98f      	bls.n	5d7c <handleSPI+0x22fc>
    5e5c:	f7ff b9b7 	b.w	51ce <handleSPI+0x174e>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5e60:	eb03 02ce 	add.w	r2, r3, lr, lsl #3
    5e64:	7001      	strb	r1, [r0, #0]
    5e66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    5e6a:	4d0a      	ldr	r5, [pc, #40]	; (5e94 <handleSPI+0x2414>)
    5e6c:	4442      	add	r2, r8
    5e6e:	4443      	add	r3, r8
    5e70:	6295      	str	r5, [r2, #40]	; 0x28
    5e72:	605d      	str	r5, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5e74:	f7fd bf8a 	b.w	3d8c <handleSPI+0x30c>
    5e78:	2001d39c 	.word	0x2001d39c
    5e7c:	000083c1 	.word	0x000083c1
    5e80:	00008361 	.word	0x00008361
    5e84:	00008301 	.word	0x00008301
    5e88:	2001ce84 	.word	0x2001ce84
    5e8c:	2001d1f8 	.word	0x2001d1f8
    5e90:	37fffffc 	.word	0x37fffffc
    5e94:	200006b0 	.word	0x200006b0
    5e98:	f3af 8000 	nop.w
    5e9c:	f3af 8000 	nop.w

00005ea0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    5ea0:	4b02      	ldr	r3, [pc, #8]	; (5eac <HAL_I2C_SlaveRxCpltCallback+0xc>)
    5ea2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5ea6:	601a      	str	r2, [r3, #0]
}
    5ea8:	4770      	bx	lr
    5eaa:	bf00      	nop
    5eac:	2001a088 	.word	0x2001a088
    5eb0:	f3af 8000 	nop.w
    5eb4:	f3af 8000 	nop.w
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    5ec0:	4b01      	ldr	r3, [pc, #4]	; (5ec8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    5ec2:	2200      	movs	r2, #0
    5ec4:	701a      	strb	r2, [r3, #0]
}
    5ec6:	4770      	bx	lr
    5ec8:	200164de 	.word	0x200164de
    5ecc:	f3af 8000 	nop.w
    5ed0:	f3af 8000 	nop.w
    5ed4:	f3af 8000 	nop.w
    5ed8:	f3af 8000 	nop.w
    5edc:	f3af 8000 	nop.w

00005ee0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    5ee0:	2100      	movs	r1, #0
	I2CErrors++;
    5ee2:	4a05      	ldr	r2, [pc, #20]	; (5ef8 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    5ee4:	4b05      	ldr	r3, [pc, #20]	; (5efc <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    5ee6:	4806      	ldr	r0, [pc, #24]	; (5f00 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    5ee8:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    5eea:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    5eec:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    5eee:	3301      	adds	r3, #1
    5ef0:	b2db      	uxtb	r3, r3
    5ef2:	7013      	strb	r3, [r2, #0]
}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	20014300 	.word	0x20014300
    5efc:	200164de 	.word	0x200164de
    5f00:	2001a4e0 	.word	0x2001a4e0
    5f04:	f3af 8000 	nop.w
    5f08:	f3af 8000 	nop.w
    5f0c:	f3af 8000 	nop.w
    5f10:	f3af 8000 	nop.w
    5f14:	f3af 8000 	nop.w
    5f18:	f3af 8000 	nop.w
    5f1c:	f3af 8000 	nop.w

00005f20 <HAL_SPI_TxRxCpltCallback>:
	interrupted = 1;
    5f20:	4a2a      	ldr	r2, [pc, #168]	; (5fcc <HAL_SPI_TxRxCpltCallback+0xac>)
    5f22:	2101      	movs	r1, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    5f24:	4b2a      	ldr	r3, [pc, #168]	; (5fd0 <HAL_SPI_TxRxCpltCallback+0xb0>)
{
    5f26:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    5f28:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    5f2a:	f3bf 8f4f 	dsb	sy
    5f2e:	4a29      	ldr	r2, [pc, #164]	; (5fd4 <HAL_SPI_TxRxCpltCallback+0xb4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    5f30:	f103 0120 	add.w	r1, r3, #32
    5f34:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5f38:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    5f3c:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    5f40:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    5f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f48:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    5f4c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    5f50:	2afe      	cmp	r2, #254	; 0xfe
    5f52:	d103      	bne.n	5f5c <HAL_SPI_TxRxCpltCallback+0x3c>
    5f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    5f58:	2bfd      	cmp	r3, #253	; 0xfd
    5f5a:	d033      	beq.n	5fc4 <HAL_SPI_TxRxCpltCallback+0xa4>
		HAL_SPI_Abort(&hspi1);
    5f5c:	4d1e      	ldr	r5, [pc, #120]	; (5fd8 <HAL_SPI_TxRxCpltCallback+0xb8>)
    5f5e:	4628      	mov	r0, r5
    5f60:	f006 f87a 	bl	c058 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    5f64:	4b1d      	ldr	r3, [pc, #116]	; (5fdc <HAL_SPI_TxRxCpltCallback+0xbc>)
    5f66:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    5f6e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    5f72:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    5f7a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    5f7e:	f006 f897 	bl	c0b0 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    5f82:	682e      	ldr	r6, [r5, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    5f84:	4a12      	ldr	r2, [pc, #72]	; (5fd0 <HAL_SPI_TxRxCpltCallback+0xb0>)
    5f86:	2340      	movs	r3, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
    5f88:	6831      	ldr	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    5f8a:	4628      	mov	r0, r5
		__HAL_SPI_ENABLE(&hspi1);
    5f8c:	f041 0101 	orr.w	r1, r1, #1
    5f90:	6031      	str	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    5f92:	18d1      	adds	r1, r2, r3
    5f94:	f006 f87c 	bl	c090 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    5f98:	4a11      	ldr	r2, [pc, #68]	; (5fe0 <HAL_SPI_TxRxCpltCallback+0xc0>)
    5f9a:	7813      	ldrb	r3, [r2, #0]
    5f9c:	3301      	adds	r3, #1
    5f9e:	b2db      	uxtb	r3, r3
    5fa0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    5fa2:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    5fa6:	4a0f      	ldr	r2, [pc, #60]	; (5fe4 <HAL_SPI_TxRxCpltCallback+0xc4>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5fa8:	4b0a      	ldr	r3, [pc, #40]	; (5fd4 <HAL_SPI_TxRxCpltCallback+0xb4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    5faa:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5fae:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    5fb2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    5fb6:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    5fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fbe:	f3bf 8f6f 	isb	sy
}
    5fc2:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(LEVER_BUFFER_SIZE);
    5fc4:	2020      	movs	r0, #32
    5fc6:	f7fd fd5b 	bl	3a80 <handleSPI>
    5fca:	e7ea      	b.n	5fa2 <HAL_SPI_TxRxCpltCallback+0x82>
    5fcc:	200051dc 	.word	0x200051dc
    5fd0:	30000800 	.word	0x30000800
    5fd4:	e000ed00 	.word	0xe000ed00
    5fd8:	2001caa8 	.word	0x2001caa8
    5fdc:	58024400 	.word	0x58024400
    5fe0:	20018f21 	.word	0x20018f21
    5fe4:	30000860 	.word	0x30000860
    5fe8:	f3af 8000 	nop.w
    5fec:	f3af 8000 	nop.w
    5ff0:	f3af 8000 	nop.w
    5ff4:	f3af 8000 	nop.w
    5ff8:	f3af 8000 	nop.w
    5ffc:	f3af 8000 	nop.w

00006000 <HAL_SPI_TxRxHalfCpltCallback>:
	interrupted = 1;
    6000:	4a29      	ldr	r2, [pc, #164]	; (60a8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
    6002:	2101      	movs	r1, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    6004:	4b29      	ldr	r3, [pc, #164]	; (60ac <HAL_SPI_TxRxHalfCpltCallback+0xac>)
{
    6006:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    6008:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    600a:	f3bf 8f4f 	dsb	sy
    600e:	4a28      	ldr	r2, [pc, #160]	; (60b0 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6010:	f103 0120 	add.w	r1, r3, #32
    6014:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6018:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    601c:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    6020:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    6024:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6028:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    602c:	7f9a      	ldrb	r2, [r3, #30]
    602e:	2afe      	cmp	r2, #254	; 0xfe
    6030:	d102      	bne.n	6038 <HAL_SPI_TxRxHalfCpltCallback+0x38>
    6032:	7fdb      	ldrb	r3, [r3, #31]
    6034:	2bfd      	cmp	r3, #253	; 0xfd
    6036:	d033      	beq.n	60a0 <HAL_SPI_TxRxHalfCpltCallback+0xa0>
		HAL_SPI_Abort(&hspi1);
    6038:	4d1e      	ldr	r5, [pc, #120]	; (60b4 <HAL_SPI_TxRxHalfCpltCallback+0xb4>)
    603a:	4628      	mov	r0, r5
    603c:	f006 f80c 	bl	c058 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    6040:	4b1d      	ldr	r3, [pc, #116]	; (60b8 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    6042:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    604a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    604e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    6056:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    605a:	f006 f829 	bl	c0b0 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    605e:	682e      	ldr	r6, [r5, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6060:	4a12      	ldr	r2, [pc, #72]	; (60ac <HAL_SPI_TxRxHalfCpltCallback+0xac>)
    6062:	2340      	movs	r3, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
    6064:	6831      	ldr	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6066:	4628      	mov	r0, r5
		__HAL_SPI_ENABLE(&hspi1);
    6068:	f041 0101 	orr.w	r1, r1, #1
    606c:	6031      	str	r1, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    606e:	18d1      	adds	r1, r2, r3
    6070:	f006 f80e 	bl	c090 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    6074:	4a11      	ldr	r2, [pc, #68]	; (60bc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    6076:	7813      	ldrb	r3, [r2, #0]
    6078:	3301      	adds	r3, #1
    607a:	b2db      	uxtb	r3, r3
    607c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    607e:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6082:	4a0f      	ldr	r2, [pc, #60]	; (60c0 <HAL_SPI_TxRxHalfCpltCallback+0xc0>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6084:	4b0a      	ldr	r3, [pc, #40]	; (60b0 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6086:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    608a:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    608e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    6092:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    6096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    609a:	f3bf 8f6f 	isb	sy
}
    609e:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(0);
    60a0:	2000      	movs	r0, #0
    60a2:	f7fd fced 	bl	3a80 <handleSPI>
    60a6:	e7ea      	b.n	607e <HAL_SPI_TxRxHalfCpltCallback+0x7e>
    60a8:	200051dc 	.word	0x200051dc
    60ac:	30000800 	.word	0x30000800
    60b0:	e000ed00 	.word	0xe000ed00
    60b4:	2001caa8 	.word	0x2001caa8
    60b8:	58024400 	.word	0x58024400
    60bc:	20018f21 	.word	0x20018f21
    60c0:	30000860 	.word	0x30000860
    60c4:	f3af 8000 	nop.w
    60c8:	f3af 8000 	nop.w
    60cc:	f3af 8000 	nop.w
    60d0:	f3af 8000 	nop.w
    60d4:	f3af 8000 	nop.w
    60d8:	f3af 8000 	nop.w
    60dc:	f3af 8000 	nop.w

000060e0 <HAL_SPI_RxCpltCallback>:
{
    60e0:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    60e2:	4c8f      	ldr	r4, [pc, #572]	; (6320 <HAL_SPI_RxCpltCallback+0x240>)
	interrupted = 1;
    60e4:	2201      	movs	r2, #1
    60e6:	4b8f      	ldr	r3, [pc, #572]	; (6324 <HAL_SPI_RxCpltCallback+0x244>)
	if (hspi == &hspi5)
    60e8:	4284      	cmp	r4, r0
	interrupted = 1;
    60ea:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    60ec:	d000      	beq.n	60f0 <HAL_SPI_RxCpltCallback+0x10>
}
    60ee:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    60f0:	4b8d      	ldr	r3, [pc, #564]	; (6328 <HAL_SPI_RxCpltCallback+0x248>)
    60f2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    60f6:	2afe      	cmp	r2, #254	; 0xfe
    60f8:	f040 80d5 	bne.w	62a6 <HAL_SPI_RxCpltCallback+0x1c6>
    60fc:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    6100:	2afd      	cmp	r2, #253	; 0xfd
    6102:	f040 80d0 	bne.w	62a6 <HAL_SPI_RxCpltCallback+0x1c6>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6106:	4a89      	ldr	r2, [pc, #548]	; (632c <HAL_SPI_RxCpltCallback+0x24c>)
    6108:	7811      	ldrb	r1, [r2, #0]
    610a:	2900      	cmp	r1, #0
    610c:	f000 80ff 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6110:	4a87      	ldr	r2, [pc, #540]	; (6330 <HAL_SPI_RxCpltCallback+0x250>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6112:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6114:	6814      	ldr	r4, [r2, #0]
    6116:	6810      	ldr	r0, [r2, #0]
    6118:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    611c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6120:	f894 c061 	ldrb.w	ip, [r4, #97]	; 0x61
    6124:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    6128:	4882      	ldr	r0, [pc, #520]	; (6334 <HAL_SPI_RxCpltCallback+0x254>)
    612a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    612e:	b2a4      	uxth	r4, r4
    6130:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6132:	f000 80ec 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6136:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6138:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    613a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    613e:	f894 c063 	ldrb.w	ip, [r4, #99]	; 0x63
    6142:	6814      	ldr	r4, [r2, #0]
    6144:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6148:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    614c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6150:	b2a4      	uxth	r4, r4
    6152:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6154:	f000 80db 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6158:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    615a:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    615c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6160:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
    6164:	6814      	ldr	r4, [r2, #0]
    6166:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    616a:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    616e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6172:	b2a4      	uxth	r4, r4
    6174:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6176:	f000 80ca 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    617a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    617c:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    617e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6182:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
    6186:	6814      	ldr	r4, [r2, #0]
    6188:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    618c:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    6190:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6194:	b2a4      	uxth	r4, r4
    6196:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6198:	f000 80b9 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    619c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    619e:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    61a0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61a4:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
    61a8:	6814      	ldr	r4, [r2, #0]
    61aa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61ae:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    61b2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    61b6:	b2a4      	uxth	r4, r4
    61b8:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    61ba:	f000 80a8 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    61be:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    61c0:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    61c2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61c6:	f894 c06b 	ldrb.w	ip, [r4, #107]	; 0x6b
    61ca:	6814      	ldr	r4, [r2, #0]
    61cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61d0:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    61d4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    61d8:	b2a4      	uxth	r4, r4
    61da:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    61dc:	f000 8097 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    61e0:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    61e2:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    61e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61e8:	f894 c06d 	ldrb.w	ip, [r4, #109]	; 0x6d
    61ec:	6814      	ldr	r4, [r2, #0]
    61ee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    61f2:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    61f6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    61fa:	b2a4      	uxth	r4, r4
    61fc:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    61fe:	f000 8086 	beq.w	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6202:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6204:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6206:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    620a:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
    620e:	6814      	ldr	r4, [r2, #0]
    6210:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6214:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    6218:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    621c:	b2a4      	uxth	r4, r4
    621e:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6220:	d075      	beq.n	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6222:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6224:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6226:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    622a:	f894 c071 	ldrb.w	ip, [r4, #113]	; 0x71
    622e:	6814      	ldr	r4, [r2, #0]
    6230:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6234:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    6238:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    623c:	b2a4      	uxth	r4, r4
    623e:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6240:	d065      	beq.n	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6242:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6244:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6246:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    624a:	f894 c073 	ldrb.w	ip, [r4, #115]	; 0x73
    624e:	6814      	ldr	r4, [r2, #0]
    6250:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6254:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    6258:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    625c:	b2a4      	uxth	r4, r4
    625e:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6260:	d055      	beq.n	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6262:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6264:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6266:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    626a:	f894 c075 	ldrb.w	ip, [r4, #117]	; 0x75
    626e:	6814      	ldr	r4, [r2, #0]
    6270:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6274:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    6278:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    627c:	b2a4      	uxth	r4, r4
    627e:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6280:	d045      	beq.n	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6282:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6284:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6286:	6815      	ldr	r5, [r2, #0]
    6288:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    628c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6290:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    6294:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6298:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    629c:	b29b      	uxth	r3, r3
    629e:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    62a0:	d035      	beq.n	630e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    62a2:	6813      	ldr	r3, [r2, #0]
    62a4:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    62a6:	481e      	ldr	r0, [pc, #120]	; (6320 <HAL_SPI_RxCpltCallback+0x240>)
    62a8:	f005 fed6 	bl	c058 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    62ac:	4b22      	ldr	r3, [pc, #136]	; (6338 <HAL_SPI_RxCpltCallback+0x258>)
    62ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    62b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    62b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    62ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    62be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    62c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    62c6:	f005 ff07 	bl	c0d8 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    62ca:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    62cc:	2240      	movs	r2, #64	; 0x40
    62ce:	491b      	ldr	r1, [pc, #108]	; (633c <HAL_SPI_RxCpltCallback+0x25c>)
			__HAL_SPI_ENABLE(&hspi5);
    62d0:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    62d2:	4813      	ldr	r0, [pc, #76]	; (6320 <HAL_SPI_RxCpltCallback+0x240>)
			__HAL_SPI_ENABLE(&hspi5);
    62d4:	f043 0301 	orr.w	r3, r3, #1
    62d8:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    62da:	f005 fd25 	bl	bd28 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    62de:	4a18      	ldr	r2, [pc, #96]	; (6340 <HAL_SPI_RxCpltCallback+0x260>)
    62e0:	7813      	ldrb	r3, [r2, #0]
    62e2:	3301      	adds	r3, #1
    62e4:	b2db      	uxtb	r3, r3
    62e6:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    62e8:	4a14      	ldr	r2, [pc, #80]	; (633c <HAL_SPI_RxCpltCallback+0x25c>)
  __ASM volatile ("dsb 0xF":::"memory");
    62ea:	f3bf 8f4f 	dsb	sy
    62ee:	4b15      	ldr	r3, [pc, #84]	; (6344 <HAL_SPI_RxCpltCallback+0x264>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    62f0:	f102 0020 	add.w	r0, r2, #32
    62f4:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    62f8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    62fc:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    6300:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    6304:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6308:	f3bf 8f6f 	isb	sy
}
    630c:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    630e:	4b0e      	ldr	r3, [pc, #56]	; (6348 <HAL_SPI_RxCpltCallback+0x268>)
    6310:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6312:	2240      	movs	r2, #64	; 0x40
    6314:	4909      	ldr	r1, [pc, #36]	; (633c <HAL_SPI_RxCpltCallback+0x25c>)
    6316:	4802      	ldr	r0, [pc, #8]	; (6320 <HAL_SPI_RxCpltCallback+0x240>)
			newPluck = 1;
    6318:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    631a:	f005 fd05 	bl	bd28 <__HAL_SPI_Receive_DMA_veneer>
    631e:	e7e3      	b.n	62e8 <HAL_SPI_RxCpltCallback+0x208>
    6320:	2001cb30 	.word	0x2001cb30
    6324:	200051dc 	.word	0x200051dc
    6328:	38000000 	.word	0x38000000
    632c:	20000694 	.word	0x20000694
    6330:	200051d0 	.word	0x200051d0
    6334:	20014210 	.word	0x20014210
    6338:	58024400 	.word	0x58024400
    633c:	38000040 	.word	0x38000040
    6340:	20018f21 	.word	0x20018f21
    6344:	e000ed00 	.word	0xe000ed00
    6348:	200052f4 	.word	0x200052f4
    634c:	f3af 8000 	nop.w
    6350:	f3af 8000 	nop.w
    6354:	f3af 8000 	nop.w
    6358:	f3af 8000 	nop.w
    635c:	f3af 8000 	nop.w

00006360 <HAL_SPI_RxHalfCpltCallback>:
{
    6360:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    6362:	4c8f      	ldr	r4, [pc, #572]	; (65a0 <HAL_SPI_RxHalfCpltCallback+0x240>)
	interrupted = 1;
    6364:	2201      	movs	r2, #1
    6366:	4b8f      	ldr	r3, [pc, #572]	; (65a4 <HAL_SPI_RxHalfCpltCallback+0x244>)
	if (hspi == &hspi5)
    6368:	4284      	cmp	r4, r0
	interrupted = 1;
    636a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    636c:	d000      	beq.n	6370 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    636e:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    6370:	4b8d      	ldr	r3, [pc, #564]	; (65a8 <HAL_SPI_RxHalfCpltCallback+0x248>)
    6372:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    6376:	2afe      	cmp	r2, #254	; 0xfe
    6378:	f040 80d5 	bne.w	6526 <HAL_SPI_RxHalfCpltCallback+0x1c6>
    637c:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    6380:	2afd      	cmp	r2, #253	; 0xfd
    6382:	f040 80d0 	bne.w	6526 <HAL_SPI_RxHalfCpltCallback+0x1c6>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6386:	4a89      	ldr	r2, [pc, #548]	; (65ac <HAL_SPI_RxHalfCpltCallback+0x24c>)
    6388:	7811      	ldrb	r1, [r2, #0]
    638a:	2900      	cmp	r1, #0
    638c:	f000 80ff 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6390:	4a87      	ldr	r2, [pc, #540]	; (65b0 <HAL_SPI_RxHalfCpltCallback+0x250>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6392:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6394:	6814      	ldr	r4, [r2, #0]
    6396:	6810      	ldr	r0, [r2, #0]
    6398:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    639c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    63a0:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
    63a4:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    63a8:	4882      	ldr	r0, [pc, #520]	; (65b4 <HAL_SPI_RxHalfCpltCallback+0x254>)
    63aa:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    63ae:	b2a4      	uxth	r4, r4
    63b0:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63b2:	f000 80ec 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63b6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63b8:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63ba:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63be:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
    63c2:	6814      	ldr	r4, [r2, #0]
    63c4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63c8:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    63cc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    63d0:	b2a4      	uxth	r4, r4
    63d2:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63d4:	f000 80db 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63d8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63da:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63e0:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
    63e4:	6814      	ldr	r4, [r2, #0]
    63e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63ea:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    63ee:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    63f2:	b2a4      	uxth	r4, r4
    63f4:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63f6:	f000 80ca 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63fa:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63fc:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63fe:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6402:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
    6406:	6814      	ldr	r4, [r2, #0]
    6408:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    640c:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    6410:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6414:	b2a4      	uxth	r4, r4
    6416:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6418:	f000 80b9 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    641c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    641e:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6420:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6424:	f894 c049 	ldrb.w	ip, [r4, #73]	; 0x49
    6428:	6814      	ldr	r4, [r2, #0]
    642a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    642e:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    6432:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6436:	b2a4      	uxth	r4, r4
    6438:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    643a:	f000 80a8 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    643e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6440:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6442:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6446:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
    644a:	6814      	ldr	r4, [r2, #0]
    644c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6450:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    6454:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    6458:	b2a4      	uxth	r4, r4
    645a:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    645c:	f000 8097 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6460:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6462:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6464:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6468:	f894 c04d 	ldrb.w	ip, [r4, #77]	; 0x4d
    646c:	6814      	ldr	r4, [r2, #0]
    646e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6472:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    6476:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    647a:	b2a4      	uxth	r4, r4
    647c:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    647e:	f000 8086 	beq.w	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6482:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6484:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6486:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    648a:	f894 c04f 	ldrb.w	ip, [r4, #79]	; 0x4f
    648e:	6814      	ldr	r4, [r2, #0]
    6490:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6494:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    6498:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    649c:	b2a4      	uxth	r4, r4
    649e:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64a0:	d075      	beq.n	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64a2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64a4:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64aa:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
    64ae:	6814      	ldr	r4, [r2, #0]
    64b0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64b4:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    64b8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    64bc:	b2a4      	uxth	r4, r4
    64be:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64c0:	d065      	beq.n	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64c2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64c4:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64ca:	f894 c053 	ldrb.w	ip, [r4, #83]	; 0x53
    64ce:	6814      	ldr	r4, [r2, #0]
    64d0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64d4:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    64d8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    64dc:	b2a4      	uxth	r4, r4
    64de:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64e0:	d055      	beq.n	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64e2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    64e4:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    64e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64ea:	f894 c055 	ldrb.w	ip, [r4, #85]	; 0x55
    64ee:	6814      	ldr	r4, [r2, #0]
    64f0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    64f4:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    64f8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    64fc:	b2a4      	uxth	r4, r4
    64fe:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6500:	d045      	beq.n	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6502:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6504:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6506:	6815      	ldr	r5, [r2, #0]
    6508:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    650c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6510:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    6514:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    6518:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    651c:	b29b      	uxth	r3, r3
    651e:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6520:	d035      	beq.n	658e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6522:	6813      	ldr	r3, [r2, #0]
    6524:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    6526:	481e      	ldr	r0, [pc, #120]	; (65a0 <HAL_SPI_RxHalfCpltCallback+0x240>)
    6528:	f005 fd96 	bl	c058 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    652c:	4b22      	ldr	r3, [pc, #136]	; (65b8 <HAL_SPI_RxHalfCpltCallback+0x258>)
    652e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6532:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    6536:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    653a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    653e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    6542:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    6546:	f005 fdc7 	bl	c0d8 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    654a:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    654c:	2240      	movs	r2, #64	; 0x40
    654e:	491b      	ldr	r1, [pc, #108]	; (65bc <HAL_SPI_RxHalfCpltCallback+0x25c>)
			__HAL_SPI_ENABLE(&hspi5);
    6550:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6552:	4813      	ldr	r0, [pc, #76]	; (65a0 <HAL_SPI_RxHalfCpltCallback+0x240>)
			__HAL_SPI_ENABLE(&hspi5);
    6554:	f043 0301 	orr.w	r3, r3, #1
    6558:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    655a:	f005 fbe5 	bl	bd28 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    655e:	4a18      	ldr	r2, [pc, #96]	; (65c0 <HAL_SPI_RxHalfCpltCallback+0x260>)
    6560:	7813      	ldrb	r3, [r2, #0]
    6562:	3301      	adds	r3, #1
    6564:	b2db      	uxtb	r3, r3
    6566:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    6568:	4a14      	ldr	r2, [pc, #80]	; (65bc <HAL_SPI_RxHalfCpltCallback+0x25c>)
  __ASM volatile ("dsb 0xF":::"memory");
    656a:	f3bf 8f4f 	dsb	sy
    656e:	4b15      	ldr	r3, [pc, #84]	; (65c4 <HAL_SPI_RxHalfCpltCallback+0x264>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6570:	f102 0020 	add.w	r0, r2, #32
    6574:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6578:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    657c:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    6580:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    6584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6588:	f3bf 8f6f 	isb	sy
}
    658c:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    658e:	4b0e      	ldr	r3, [pc, #56]	; (65c8 <HAL_SPI_RxHalfCpltCallback+0x268>)
    6590:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6592:	2240      	movs	r2, #64	; 0x40
    6594:	4909      	ldr	r1, [pc, #36]	; (65bc <HAL_SPI_RxHalfCpltCallback+0x25c>)
    6596:	4802      	ldr	r0, [pc, #8]	; (65a0 <HAL_SPI_RxHalfCpltCallback+0x240>)
			newPluck = 1;
    6598:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    659a:	f005 fbc5 	bl	bd28 <__HAL_SPI_Receive_DMA_veneer>
    659e:	e7e3      	b.n	6568 <HAL_SPI_RxHalfCpltCallback+0x208>
    65a0:	2001cb30 	.word	0x2001cb30
    65a4:	200051dc 	.word	0x200051dc
    65a8:	38000000 	.word	0x38000000
    65ac:	20000694 	.word	0x20000694
    65b0:	200051d0 	.word	0x200051d0
    65b4:	20014210 	.word	0x20014210
    65b8:	58024400 	.word	0x58024400
    65bc:	38000040 	.word	0x38000040
    65c0:	20018f21 	.word	0x20018f21
    65c4:	e000ed00 	.word	0xe000ed00
    65c8:	200052f4 	.word	0x200052f4
	...

000065e0 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    65e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (whichStringModelLoaded != String1Loaded)
    65e4:	f8df a100 	ldr.w	sl, [pc, #256]	; 66e8 <audioInitString1+0x108>
    65e8:	f89a 3000 	ldrb.w	r3, [sl]
    65ec:	2b01      	cmp	r3, #1
{
    65ee:	ed2d 8b06 	vpush	{d8-d10}
	if (whichStringModelLoaded != String1Loaded)
    65f2:	d055      	beq.n	66a0 <audioInitString1+0xc0>
	{

		if (whichStringModelLoaded == String2Loaded)
    65f4:	2b02      	cmp	r3, #2
    65f6:	d05a      	beq.n	66ae <audioInitString1+0xce>
		{
			audioFreeString2();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    65f8:	2b04      	cmp	r3, #4
    65fa:	d055      	beq.n	66a8 <audioInitString1+0xc8>
		{
			audioFreeSynth();
		}

		for (int v = 0; v < numStringsThisBoard; v++)
    65fc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 66ec <audioInitString1+0x10c>
    6600:	f899 3000 	ldrb.w	r3, [r9]
    6604:	2b00      	cmp	r3, #0
    6606:	d048      	beq.n	669a <audioInitString1+0xba>
    6608:	4c2a      	ldr	r4, [pc, #168]	; (66b4 <audioInitString1+0xd4>)
    660a:	2500      	movs	r5, #0
    660c:	4f2a      	ldr	r7, [pc, #168]	; (66b8 <audioInitString1+0xd8>)
    660e:	4e2b      	ldr	r6, [pc, #172]	; (66bc <audioInitString1+0xdc>)
		{

			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6610:	ed9f aa2b 	vldr	s20, [pc, #172]	; 66c0 <audioInitString1+0xe0>
    6614:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 66c4 <audioInitString1+0xe4>
    6618:	eddf 9a2b 	vldr	s19, [pc, #172]	; 66c8 <audioInitString1+0xe8>
    661c:	ed9f 9a2b 	vldr	s18, [pc, #172]	; 66cc <audioInitString1+0xec>
    6620:	eddf 8a2b 	vldr	s17, [pc, #172]	; 66d0 <audioInitString1+0xf0>
													 0.01f, 0, &mediumPool);
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
			tPickupNonLinearity_init(&pu[v], &leaf);
    6624:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 66f0 <audioInitString1+0x110>
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6628:	4b2a      	ldr	r3, [pc, #168]	; (66d4 <audioInitString1+0xf4>)
    662a:	eef0 2a4a 	vmov.f32	s5, s20
    662e:	eef0 1a48 	vmov.f32	s3, s16
    6632:	ed9f 2a23 	vldr	s4, [pc, #140]	; 66c0 <audioInitString1+0xe0>
    6636:	eeb0 1a69 	vmov.f32	s2, s19
    663a:	2200      	movs	r2, #0
    663c:	eef0 0a49 	vmov.f32	s1, s18
    6640:	2104      	movs	r1, #4
    6642:	4620      	mov	r0, r4
    6644:	eeb0 0a68 	vmov.f32	s0, s17
    6648:	f005 fcb2 	bl	bfb0 <__tSimpleLivingString3_initToPool_veneer>
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    664c:	4620      	mov	r0, r4
    664e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 66d8 <audioInitString1+0xf8>
		for (int v = 0; v < numStringsThisBoard; v++)
    6652:	3501      	adds	r5, #1
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    6654:	f005 fca0 	bl	bf98 <__tSimpleLivingString3_setTargetLev_veneer>
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    6658:	4620      	mov	r0, r4
    665a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 66dc <audioInitString1+0xfc>
    665e:	f005 fce7 	bl	c030 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    6662:	eeb0 0a48 	vmov.f32	s0, s16
    6666:	4620      	mov	r0, r4
    6668:	f005 fcce 	bl	c008 <__tSimpleLivingString3_setLevStrength_veneer>
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    666c:	4620      	mov	r0, r4
    666e:	2101      	movs	r1, #1
		for (int v = 0; v < numStringsThisBoard; v++)
    6670:	3404      	adds	r4, #4
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    6672:	f005 fb5d 	bl	bd30 <__tSimpleLivingString3_setLevMode_veneer>
			tPickupNonLinearity_init(&pu[v], &leaf);
    6676:	4638      	mov	r0, r7
    6678:	4641      	mov	r1, r8
		for (int v = 0; v < numStringsThisBoard; v++)
    667a:	3704      	adds	r7, #4
			tPickupNonLinearity_init(&pu[v], &leaf);
    667c:	f005 fde0 	bl	c240 <__tPickupNonLinearity_init_veneer>
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    6680:	4630      	mov	r0, r6
    6682:	4641      	mov	r1, r8
    6684:	eddf 0a16 	vldr	s1, [pc, #88]	; 66e0 <audioInitString1+0x100>
    6688:	ed9f 0a16 	vldr	s0, [pc, #88]	; 66e4 <audioInitString1+0x104>
		for (int v = 0; v < numStringsThisBoard; v++)
    668c:	3604      	adds	r6, #4
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    668e:	f005 fdcf 	bl	c230 <__tExpSmooth_init_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6692:	f899 3000 	ldrb.w	r3, [r9]
    6696:	42ab      	cmp	r3, r5
    6698:	dcc6      	bgt.n	6628 <audioInitString1+0x48>
		}
		whichStringModelLoaded = String1Loaded;
    669a:	2301      	movs	r3, #1
    669c:	f88a 3000 	strb.w	r3, [sl]
	}

}
    66a0:	ecbd 8b06 	vpop	{d8-d10}
    66a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			audioFreeSynth();
    66a8:	f005 fd1e 	bl	c0e8 <__audioFreeSynth_veneer>
    66ac:	e7a6      	b.n	65fc <audioInitString1+0x1c>
			audioFreeString2();
    66ae:	f000 fb97 	bl	6de0 <audioFreeString2>
    66b2:	e7a3      	b.n	65fc <audioInitString1+0x1c>
    66b4:	2001cbb8 	.word	0x2001cbb8
    66b8:	2001cbc8 	.word	0x2001cbc8
    66bc:	2001cbc0 	.word	0x2001cbc0
    66c0:	3c23d70a 	.word	0x3c23d70a
    66c4:	00000000 	.word	0x00000000
    66c8:	3f7fff58 	.word	0x3f7fff58
    66cc:	4684d000 	.word	0x4684d000
    66d0:	435c0000 	.word	0x435c0000
    66d4:	200052ec 	.word	0x200052ec
    66d8:	3d40c0f0 	.word	0x3d40c0f0
    66dc:	3cf753bf 	.word	0x3cf753bf
    66e0:	3f19999a 	.word	0x3f19999a
    66e4:	42800000 	.word	0x42800000
    66e8:	2001426d 	.word	0x2001426d
    66ec:	20000694 	.word	0x20000694
    66f0:	20005298 	.word	0x20005298
    66f4:	f3af 8000 	nop.w
    66f8:	f3af 8000 	nop.w
    66fc:	f3af 8000 	nop.w

00006700 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    6700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    6704:	f8df 8044 	ldr.w	r8, [pc, #68]	; 674c <audioFreeString1+0x4c>
    6708:	f898 3000 	ldrb.w	r3, [r8]
    670c:	b1ab      	cbz	r3, 673a <audioFreeString1+0x3a>
    670e:	4f0c      	ldr	r7, [pc, #48]	; (6740 <audioFreeString1+0x40>)
    6710:	2400      	movs	r4, #0
    6712:	4e0c      	ldr	r6, [pc, #48]	; (6744 <audioFreeString1+0x44>)
    6714:	4d0c      	ldr	r5, [pc, #48]	; (6748 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    6716:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    6718:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    671a:	f005 fb41 	bl	bda0 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    671e:	4630      	mov	r0, r6
    6720:	f005 fd82 	bl	c228 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    6724:	4628      	mov	r0, r5
    6726:	f005 fbf7 	bl	bf18 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    672a:	f898 3000 	ldrb.w	r3, [r8]
    672e:	3704      	adds	r7, #4
    6730:	3604      	adds	r6, #4
    6732:	42a3      	cmp	r3, r4
    6734:	f105 0504 	add.w	r5, r5, #4
    6738:	dced      	bgt.n	6716 <audioFreeString1+0x16>
	}
}
    673a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    673e:	bf00      	nop
    6740:	2001cbc0 	.word	0x2001cbc0
    6744:	2001cbb8 	.word	0x2001cbb8
    6748:	2001cbc8 	.word	0x2001cbc8
    674c:	20000694 	.word	0x20000694
    6750:	f3af 8000 	nop.w
    6754:	f3af 8000 	nop.w
    6758:	f3af 8000 	nop.w
    675c:	f3af 8000 	nop.w

00006760 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    6760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6764:	4c1f      	ldr	r4, [pc, #124]	; (67e4 <audioSwitchToString1+0x84>)

	audioInitString1();
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    6766:	2500      	movs	r5, #0
    6768:	4f1f      	ldr	r7, [pc, #124]	; (67e8 <audioSwitchToString1+0x88>)
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    676a:	f04f 0901 	mov.w	r9, #1
    676e:	4e1f      	ldr	r6, [pc, #124]	; (67ec <audioSwitchToString1+0x8c>)
    6770:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6808 <audioSwitchToString1+0xa8>
    6774:	f8df a094 	ldr.w	sl, [pc, #148]	; 680c <audioSwitchToString1+0xac>
{
    6778:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    677c:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 67f0 <audioSwitchToString1+0x90>
	audioInitString1();
    6780:	f7ff ff2e 	bl	65e0 <audioInitString1>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6784:	4620      	mov	r0, r4
    6786:	eeb0 0a48 	vmov.f32	s0, s16
    678a:	f005 fc45 	bl	c018 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    678e:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6792:	4620      	mov	r0, r4
		if (voice == 63)
    6794:	2b3f      	cmp	r3, #63	; 0x3f
    6796:	d019      	beq.n	67cc <audioSwitchToString1+0x6c>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6798:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    679c:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    679e:	f005 fc0f 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    67a2:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    67a6:	3501      	adds	r5, #1
    67a8:	3704      	adds	r7, #4
    67aa:	2d0c      	cmp	r5, #12
    67ac:	d1ea      	bne.n	6784 <audioSwitchToString1+0x24>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    67ae:	4811      	ldr	r0, [pc, #68]	; (67f4 <audioSwitchToString1+0x94>)
    67b0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 67f8 <audioSwitchToString1+0x98>
    67b4:	f005 fb90 	bl	bed8 <__tVZFilter_setFreq_veneer>
	audioFrameFunction = audioFrameString1;
    67b8:	4910      	ldr	r1, [pc, #64]	; (67fc <audioSwitchToString1+0x9c>)
    67ba:	4811      	ldr	r0, [pc, #68]	; (6800 <audioSwitchToString1+0xa0>)
	presetReady = 1;
    67bc:	2201      	movs	r2, #1
    67be:	4b11      	ldr	r3, [pc, #68]	; (6804 <audioSwitchToString1+0xa4>)
	audioFrameFunction = audioFrameString1;
    67c0:	6008      	str	r0, [r1, #0]
	presetReady = 1;
    67c2:	601a      	str	r2, [r3, #0]
}
    67c4:	ecbd 8b02 	vpop	{d8}
    67c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    67cc:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    67d0:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    67d2:	f005 fbf5 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    67d6:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    67da:	3501      	adds	r5, #1
    67dc:	3604      	adds	r6, #4
    67de:	2d0c      	cmp	r5, #12
    67e0:	d1d0      	bne.n	6784 <audioSwitchToString1+0x24>
    67e2:	e7e4      	b.n	67ae <audioSwitchToString1+0x4e>
    67e4:	20005244 	.word	0x20005244
    67e8:	200006b8 	.word	0x200006b8
    67ec:	20018544 	.word	0x20018544
    67f0:	3a83126f 	.word	0x3a83126f
    67f4:	200052fc 	.word	0x200052fc
    67f8:	45504000 	.word	0x45504000
    67fc:	20001194 	.word	0x20001194
    6800:	00006b21 	.word	0x00006b21
    6804:	20005358 	.word	0x20005358
    6808:	2001425c 	.word	0x2001425c
    680c:	200051e0 	.word	0x200051e0
    6810:	f3af 8000 	nop.w
    6814:	f3af 8000 	nop.w
    6818:	f3af 8000 	nop.w
    681c:	f3af 8000 	nop.w

00006820 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    6820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    6824:	4b9f      	ldr	r3, [pc, #636]	; (6aa4 <audioTickString1+0x284>)
    6826:	4ca0      	ldr	r4, [pc, #640]	; (6aa8 <audioTickString1+0x288>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6828:	48a0      	ldr	r0, [pc, #640]	; (6aac <audioTickString1+0x28c>)
    682a:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 6b0c <audioTickString1+0x2ec>
    682e:	4625      	mov	r5, r4
    6830:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    6834:	ed2d 8b0a 	vpush	{d8-d12}
    6838:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    683a:	781b      	ldrb	r3, [r3, #0]
{
    683c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    683e:	009b      	lsls	r3, r3, #2
    6840:	3307      	adds	r3, #7
    6842:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    6846:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    684a:	f005 fce9 	bl	c220 <__tExpSmooth_tick_veneer>
    684e:	eef0 8a40 	vmov.f32	s17, s0
	float note[numStringsThisBoard];
    6852:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    6854:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
    6856:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    685a:	f005 fce1 	bl	c220 <__tExpSmooth_tick_veneer>
    685e:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    6862:	45a9      	cmp	r9, r5
    6864:	d1f6      	bne.n	6854 <audioTickString1+0x34>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    6866:	4b8f      	ldr	r3, [pc, #572]	; (6aa4 <audioTickString1+0x284>)
	pluckPos = knobScaled[9];
    6868:	4a91      	ldr	r2, [pc, #580]	; (6ab0 <audioTickString1+0x290>)
    686a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    686c:	781b      	ldrb	r3, [r3, #0]
	pluckPos = knobScaled[9];
    686e:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    6870:	2b00      	cmp	r3, #0
    6872:	f000 80fc 	beq.w	6a6e <audioTickString1+0x24e>
    6876:	4b8f      	ldr	r3, [pc, #572]	; (6ab4 <audioTickString1+0x294>)
    6878:	2200      	movs	r2, #0
	float temp = 0.0f;
    687a:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 6ab8 <audioTickString1+0x298>
    687e:	f8df 9290 	ldr.w	r9, [pc, #656]	; 6b10 <audioTickString1+0x2f0>
    6882:	f8df a290 	ldr.w	sl, [pc, #656]	; 6b14 <audioTickString1+0x2f4>
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    6886:	eeb0 9a48 	vmov.f32	s18, s16
    688a:	f8df 828c 	ldr.w	r8, [pc, #652]	; 6b18 <audioTickString1+0x2f8>
    688e:	617b      	str	r3, [r7, #20]
    6890:	4b8a      	ldr	r3, [pc, #552]	; (6abc <audioTickString1+0x29c>)
    6892:	ed9f ba8b 	vldr	s22, [pc, #556]	; 6ac0 <audioTickString1+0x2a0>
    6896:	613b      	str	r3, [r7, #16]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    6898:	4633      	mov	r3, r6
		float decay = 0.1f;
    689a:	eddf aa8a 	vldr	s21, [pc, #552]	; 6ac4 <audioTickString1+0x2a4>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    689e:	4616      	mov	r6, r2
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    68a0:	eddf ba89 	vldr	s23, [pc, #548]	; 6ac8 <audioTickString1+0x2a8>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    68a4:	4652      	mov	r2, sl
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    68a6:	ed9f aa89 	vldr	s20, [pc, #548]	; 6acc <audioTickString1+0x2ac>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    68aa:	46ca      	mov	sl, r9
    68ac:	4d88      	ldr	r5, [pc, #544]	; (6ad0 <audioTickString1+0x2b0>)
    68ae:	46c1      	mov	r9, r8
    68b0:	f8df b268 	ldr.w	fp, [pc, #616]	; 6b1c <audioTickString1+0x2fc>
    68b4:	eddf 9a87 	vldr	s19, [pc, #540]	; 6ad4 <audioTickString1+0x2b4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    68b8:	4987      	ldr	r1, [pc, #540]	; (6ad8 <audioTickString1+0x2b8>)
			note[i] = 0.0f;
    68ba:	eeb0 ca49 	vmov.f32	s24, s18
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    68be:	ea4f 0886 	mov.w	r8, r6, lsl #2
    68c2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    68c6:	edd1 7a00 	vldr	s15, [r1]
    68ca:	6979      	ldr	r1, [r7, #20]
    68cc:	ecb1 7a01 	vldmia	r1!, {s14}
    68d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    68d4:	6179      	str	r1, [r7, #20]
		if (note[i] < 0.0f)
    68d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    68da:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    68de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    68e2:	f100 80c1 	bmi.w	6a68 <audioTickString1+0x248>
    68e6:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    68ea:	fe87 cacb 	vminnm.f32	s24, s15, s22
		if (lsDecay[i])
    68ee:	6938      	ldr	r0, [r7, #16]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    68f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    68f4:	eef0 ca6a 	vmov.f32	s25, s21
    68f8:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    68fc:	f810 1b01 	ldrb.w	r1, [r0], #1
    6900:	6138      	str	r0, [r7, #16]
    6902:	b129      	cbz	r1, 6910 <audioTickString1+0xf0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    6904:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    6908:	eee7 7a2b 	vfma.f32	s15, s14, s23
    690c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    6910:	4628      	mov	r0, r5
    6912:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    6916:	3601      	adds	r6, #1
    6918:	e9c7 3201 	strd	r3, r2, [r7, #4]
    691c:	4b6f      	ldr	r3, [pc, #444]	; (6adc <audioTickString1+0x2bc>)
    691e:	4498      	add	r8, r3
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    6920:	f005 fb6e 	bl	c000 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    6924:	4628      	mov	r0, r5
    6926:	eeb0 0a6c 	vmov.f32	s0, s25
    692a:	f005 fb61 	bl	bff0 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    692e:	4628      	mov	r0, r5
    6930:	eeb0 0a69 	vmov.f32	s0, s19
    6934:	f005 faf4 	bl	bf20 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    6938:	ed94 0a00 	vldr	s0, [r4]
    693c:	4628      	mov	r0, r5
    693e:	ee20 0a0a 	vmul.f32	s0, s0, s20
    6942:	f005 fb61 	bl	c008 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    6946:	edd4 7a05 	vldr	s15, [r4, #20]
    694a:	eddf 6a65 	vldr	s13, [pc, #404]	; 6ae0 <audioTickString1+0x2c0>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    694e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    6952:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    6956:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    695a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    695e:	60fd      	str	r5, [r7, #12]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    6960:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    6964:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleDelay = knobScaled[11];
    6968:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    696c:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    6970:	eec7 6a06 	vdiv.f32	s13, s14, s12
    6974:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    6978:	f005 fac2 	bl	bf00 <__mtof_veneer>
    697c:	4648      	mov	r0, r9
    697e:	f005 fc03 	bl	c188 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    6982:	4648      	mov	r0, r9
    6984:	f005 fc4c 	bl	c220 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    6988:	68f9      	ldr	r1, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    698a:	f109 0904 	add.w	r9, r9, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    698e:	4608      	mov	r0, r1
    6990:	f005 fa9a 	bl	bec8 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    6994:	4b53      	ldr	r3, [pc, #332]	; (6ae4 <audioTickString1+0x2c4>)
    6996:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    699a:	4640      	mov	r0, r8
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    699c:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    69a0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 6ae8 <audioTickString1+0x2c8>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    69a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    69a8:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    69ac:	eeb4 0a47 	vcmp.f32	s0, s14
    69b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69b4:	fe39 0a00 	vselgt.f32	s0, s18, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    69b8:	f005 fbe6 	bl	c188 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    69bc:	4640      	mov	r0, r8
    69be:	f005 fc2f 	bl	c220 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    69c2:	4650      	mov	r0, sl
    69c4:	f005 fb9c 	bl	c100 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    69c8:	4b46      	ldr	r3, [pc, #280]	; (6ae4 <audioTickString1+0x2c4>)
    69ca:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    69ce:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    69d2:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    69d6:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    69d8:	4844      	ldr	r0, [pc, #272]	; (6aec <audioTickString1+0x2cc>)
    69da:	f005 fbad 	bl	c138 <__tNoise_tick_veneer>
    69de:	4844      	ldr	r0, [pc, #272]	; (6af0 <audioTickString1+0x2d0>)
    69e0:	f005 f96a 	bl	bcb8 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    69e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    69e8:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    69ec:	68f9      	ldr	r1, [r7, #12]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    69ee:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    69f2:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    69f4:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    69f8:	ee27 0a80 	vmul.f32	s0, s15, s0
    69fc:	f005 fbdc 	bl	c1b8 <__tSimpleLivingString3_tick_veneer>
    6a00:	68ba      	ldr	r2, [r7, #8]
    6a02:	4610      	mov	r0, r2
    6a04:	60fa      	str	r2, [r7, #12]
    6a06:	f005 f9ff 	bl	be08 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    6a0a:	4b26      	ldr	r3, [pc, #152]	; (6aa4 <audioTickString1+0x284>)
    6a0c:	68fa      	ldr	r2, [r7, #12]
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    6a0e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    6a12:	7819      	ldrb	r1, [r3, #0]
    6a14:	3204      	adds	r2, #4
    6a16:	687b      	ldr	r3, [r7, #4]
    6a18:	42b1      	cmp	r1, r6
    6a1a:	f73f af4d 	bgt.w	68b8 <audioTickString1+0x98>
    6a1e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 6af4 <audioTickString1+0x2d4>
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);

	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    6a22:	ee28 6aa8 	vmul.f32	s12, s17, s17
    6a26:	eddf 7a34 	vldr	s15, [pc, #208]	; 6af8 <audioTickString1+0x2d8>
    6a2a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 6afc <audioTickString1+0x2dc>
    6a2e:	eee8 7a87 	vfma.f32	s15, s17, s14
    6a32:	eddf 5a33 	vldr	s11, [pc, #204]	; 6b00 <audioTickString1+0x2e0>
    6a36:	ee68 6a86 	vmul.f32	s13, s17, s12
    6a3a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 6b04 <audioTickString1+0x2e4>
    6a3e:	ee28 7a87 	vmul.f32	s14, s17, s14
    6a42:	eee6 7a85 	vfma.f32	s15, s13, s10
    6a46:	eee6 7a65 	vfms.f32	s15, s12, s11
    6a4a:	eee6 7ac7 	vfms.f32	s15, s13, s14


	//temp = input;
	temp *= outVol * masterVolFromBrain;
    6a4e:	4b2e      	ldr	r3, [pc, #184]	; (6b08 <audioTickString1+0x2e8>)
    6a50:	ee28 0a27 	vmul.f32	s0, s16, s15

	return temp;
}
    6a54:	371c      	adds	r7, #28
	temp *= outVol * masterVolFromBrain;
    6a56:	edd3 7a00 	vldr	s15, [r3]
    6a5a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    6a5e:	46bd      	mov	sp, r7
    6a60:	ecbd 8b0a 	vpop	{d8-d12}
    6a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a68:	ed03 9a01 	vstr	s18, [r3, #-4]
		if (note[i] > 127.0f)
    6a6c:	e73f      	b.n	68ee <audioTickString1+0xce>
    6a6e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 6af4 <audioTickString1+0x2d4>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    6a72:	ee68 6aa8 	vmul.f32	s13, s17, s17
    6a76:	eddf 7a20 	vldr	s15, [pc, #128]	; 6af8 <audioTickString1+0x2d8>
    6a7a:	eddf 5a20 	vldr	s11, [pc, #128]	; 6afc <audioTickString1+0x2dc>
    6a7e:	eee8 7a87 	vfma.f32	s15, s17, s14
    6a82:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 6b00 <audioTickString1+0x2e0>
    6a86:	ee28 7aa6 	vmul.f32	s14, s17, s13
    6a8a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 6b04 <audioTickString1+0x2e4>
	float temp = 0.0f;
    6a8e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 6ab8 <audioTickString1+0x298>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    6a92:	ee68 8a85 	vmul.f32	s17, s17, s10
    6a96:	eee7 7a25 	vfma.f32	s15, s14, s11
    6a9a:	eee6 7ac6 	vfms.f32	s15, s13, s12
    6a9e:	eee7 7a68 	vfms.f32	s15, s14, s17
    6aa2:	e7d4      	b.n	6a4e <audioTickString1+0x22e>
    6aa4:	20000694 	.word	0x20000694
    6aa8:	200051f4 	.word	0x200051f4
    6aac:	20014268 	.word	0x20014268
    6ab0:	20000698 	.word	0x20000698
    6ab4:	20014230 	.word	0x20014230
    6ab8:	00000000 	.word	0x00000000
    6abc:	200052e8 	.word	0x200052e8
    6ac0:	42fe0000 	.word	0x42fe0000
    6ac4:	3dcccccd 	.word	0x3dcccccd
    6ac8:	44480000 	.word	0x44480000
    6acc:	3d108950 	.word	0x3d108950
    6ad0:	2001cbb8 	.word	0x2001cbb8
    6ad4:	46768933 	.word	0x46768933
    6ad8:	20014228 	.word	0x20014228
    6adc:	200011a8 	.word	0x200011a8
    6ae0:	bcf5c28f 	.word	0xbcf5c28f
    6ae4:	2000535c 	.word	0x2000535c
    6ae8:	3e4ccccd 	.word	0x3e4ccccd
    6aec:	200052f0 	.word	0x200052f0
    6af0:	200052fc 	.word	0x200052fc
    6af4:	3ef1ac0b 	.word	0x3ef1ac0b
    6af8:	3bdc4213 	.word	0x3bdc4213
    6afc:	40caa285 	.word	0x40caa285
    6b00:	4022be0a 	.word	0x4022be0a
    6b04:	40516313 	.word	0x40516313
    6b08:	2000068c 	.word	0x2000068c
    6b0c:	20005244 	.word	0x20005244
    6b10:	200011a0 	.word	0x200011a0
    6b14:	2001cbc8 	.word	0x2001cbc8
    6b18:	2001cbc0 	.word	0x2001cbc0
    6b1c:	20001198 	.word	0x20001198

00006b20 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    6b20:	4a70      	ldr	r2, [pc, #448]	; (6ce4 <audioFrameString1+0x1c4>)
	if (resetStringInputs)
    6b22:	4b71      	ldr	r3, [pc, #452]	; (6ce8 <audioFrameString1+0x1c8>)
{
    6b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b28:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    6b2c:	f8d2 b004 	ldr.w	fp, [r2, #4]
{
    6b30:	b083      	sub	sp, #12
	if (resetStringInputs)
    6b32:	781a      	ldrb	r2, [r3, #0]
{
    6b34:	4605      	mov	r5, r0
	if (resetStringInputs)
    6b36:	2a00      	cmp	r2, #0
    6b38:	d170      	bne.n	6c1c <audioFrameString1+0xfc>
    6b3a:	4f6c      	ldr	r7, [pc, #432]	; (6cec <audioFrameString1+0x1cc>)
	if (newPluck)
    6b3c:	683b      	ldr	r3, [r7, #0]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d03f      	beq.n	6bc2 <audioFrameString1+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    6b42:	4b6b      	ldr	r3, [pc, #428]	; (6cf0 <audioFrameString1+0x1d0>)
    6b44:	7818      	ldrb	r0, [r3, #0]
    6b46:	2800      	cmp	r0, #0
    6b48:	d039      	beq.n	6bbe <audioFrameString1+0x9e>
    6b4a:	4b6a      	ldr	r3, [pc, #424]	; (6cf4 <audioFrameString1+0x1d4>)
    6b4c:	4639      	mov	r1, r7
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    6b4e:	eddf 9a6a 	vldr	s19, [pc, #424]	; 6cf8 <audioFrameString1+0x1d8>
    6b52:	462f      	mov	r7, r5
    6b54:	ed9f 9a69 	vldr	s18, [pc, #420]	; 6cfc <audioFrameString1+0x1dc>
    6b58:	461d      	mov	r5, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6b5a:	eddf 8a69 	vldr	s17, [pc, #420]	; 6d00 <audioFrameString1+0x1e0>
		for (int i = 0; i < numStringsThisBoard; i++)
    6b5e:	2400      	movs	r4, #0
    6b60:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 6d3c <audioFrameString1+0x21c>
    6b64:	460b      	mov	r3, r1
    6b66:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 6d40 <audioFrameString1+0x220>
    6b6a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 6d20 <audioFrameString1+0x200>
    6b6e:	4e65      	ldr	r6, [pc, #404]	; (6d04 <audioFrameString1+0x1e4>)
    6b70:	4a65      	ldr	r2, [pc, #404]	; (6d08 <audioFrameString1+0x1e8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    6b72:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    6b76:	b289      	uxth	r1, r1
    6b78:	b921      	cbnz	r1, 6b84 <audioFrameString1+0x64>
    6b7a:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6b7e:	b289      	uxth	r1, r1
    6b80:	2900      	cmp	r1, #0
    6b82:	d15d      	bne.n	6c40 <audioFrameString1+0x120>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    6b84:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    6b88:	b289      	uxth	r1, r1
    6b8a:	b139      	cbz	r1, 6b9c <audioFrameString1+0x7c>
    6b8c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6b90:	b289      	uxth	r1, r1
    6b92:	b919      	cbnz	r1, 6b9c <audioFrameString1+0x7c>
				lsDecay[i] = 0;
    6b94:	f888 1000 	strb.w	r1, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
    6b98:	4955      	ldr	r1, [pc, #340]	; (6cf0 <audioFrameString1+0x1d0>)
    6b9a:	7808      	ldrb	r0, [r1, #0]
			previousStringInputs[i] = stringInputs[i];
    6b9c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    6ba0:	3504      	adds	r5, #4
    6ba2:	f10a 0a04 	add.w	sl, sl, #4
    6ba6:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    6baa:	b289      	uxth	r1, r1
		for (int i = 0; i < numStringsThisBoard; i++)
    6bac:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    6bb0:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    6bb4:	3401      	adds	r4, #1
    6bb6:	42a0      	cmp	r0, r4
    6bb8:	dcdb      	bgt.n	6b72 <audioFrameString1+0x52>
    6bba:	463d      	mov	r5, r7
    6bbc:	461f      	mov	r7, r3
		newPluck = 0;
    6bbe:	2300      	movs	r3, #0
    6bc0:	603b      	str	r3, [r7, #0]
    6bc2:	4c52      	ldr	r4, [pc, #328]	; (6d0c <audioFrameString1+0x1ec>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6bc4:	ed9f 8a52 	vldr	s16, [pc, #328]	; 6d10 <audioFrameString1+0x1f0>
    6bc8:	f504 7300 	add.w	r3, r4, #512	; 0x200
    6bcc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6bd0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6bd4:	f7ff fe24 	bl	6820 <audioTickString1>
    6bd8:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6bdc:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6bde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6be2:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6be4:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    6be8:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6bec:	d1f2      	bne.n	6bd4 <audioFrameString1+0xb4>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6bee:	4b3d      	ldr	r3, [pc, #244]	; (6ce4 <audioFrameString1+0x1c4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6bf0:	4848      	ldr	r0, [pc, #288]	; (6d14 <audioFrameString1+0x1f4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6bf2:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6bf4:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6bf8:	eba3 030b 	sub.w	r3, r3, fp
    6bfc:	4946      	ldr	r1, [pc, #280]	; (6d18 <audioFrameString1+0x1f8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6bfe:	4a47      	ldr	r2, [pc, #284]	; (6d1c <audioFrameString1+0x1fc>)
    6c00:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6c04:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    6c0e:	edc2 7a00 	vstr	s15, [r2]
}
    6c12:	b003      	add	sp, #12
    6c14:	ecbd 8b04 	vpop	{d8-d9}
    6c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    6c1c:	4a34      	ldr	r2, [pc, #208]	; (6cf0 <audioFrameString1+0x1d0>)
    6c1e:	7811      	ldrb	r1, [r2, #0]
    6c20:	b141      	cbz	r1, 6c34 <audioFrameString1+0x114>
			lsDecay[i] = 0;
    6c22:	2200      	movs	r2, #0
    6c24:	483e      	ldr	r0, [pc, #248]	; (6d20 <audioFrameString1+0x200>)
			previousStringInputs[i] = 0;
    6c26:	4e37      	ldr	r6, [pc, #220]	; (6d04 <audioFrameString1+0x1e4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    6c28:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    6c2a:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    6c2c:	8032      	strh	r2, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    6c2e:	d001      	beq.n	6c34 <audioFrameString1+0x114>
			lsDecay[i] = 0;
    6c30:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    6c32:	8072      	strh	r2, [r6, #2]
		resetStringInputs = 0;
    6c34:	2200      	movs	r2, #0
		newPluck = 1;
    6c36:	4f2d      	ldr	r7, [pc, #180]	; (6cec <audioFrameString1+0x1cc>)
		resetStringInputs = 0;
    6c38:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    6c3a:	2301      	movs	r3, #1
    6c3c:	603b      	str	r3, [r7, #0]
    6c3e:	e77d      	b.n	6b3c <audioFrameString1+0x1c>
				float note = stringMIDIPitches[i] + stringOctave[i];
    6c40:	4938      	ldr	r1, [pc, #224]	; (6d24 <audioFrameString1+0x204>)
    6c42:	9301      	str	r3, [sp, #4]
    6c44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6c48:	ed91 0a00 	vldr	s0, [r1]
				stringOctave[i] = octave;
    6c4c:	4936      	ldr	r1, [pc, #216]	; (6d28 <audioFrameString1+0x208>)
    6c4e:	edd1 7a00 	vldr	s15, [r1]
				float note = stringMIDIPitches[i] + stringOctave[i];
    6c52:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    6c56:	edc5 7a00 	vstr	s15, [r5]
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    6c5a:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    6c5e:	fe80 0a49 	vminnm.f32	s0, s0, s18
    6c62:	f005 f94d 	bl	bf00 <__mtof_veneer>
    6c66:	4650      	mov	r0, sl
    6c68:	f005 f9aa 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    6c6c:	4650      	mov	r0, sl
    6c6e:	f005 fad7 	bl	c220 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    6c72:	4648      	mov	r0, r9
    6c74:	f005 f928 	bl	bec8 <__tSimpleLivingString3_setFreq_veneer>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6c78:	492c      	ldr	r1, [pc, #176]	; (6d2c <audioFrameString1+0x20c>)
    6c7a:	482d      	ldr	r0, [pc, #180]	; (6d30 <audioFrameString1+0x210>)
    6c7c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    6c80:	f891 c000 	ldrb.w	ip, [r1]
    6c84:	ed90 7a02 	vldr	s14, [r0, #8]
    6c88:	482a      	ldr	r0, [pc, #168]	; (6d34 <audioFrameString1+0x214>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6c8a:	4a1f      	ldr	r2, [pc, #124]	; (6d08 <audioFrameString1+0x1e8>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6c8c:	ee71 7a47 	vsub.f32	s15, s2, s14
    6c90:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6c94:	ed9f 0a18 	vldr	s0, [pc, #96]	; 6cf8 <audioFrameString1+0x1d8>
    6c98:	edd0 6a00 	vldr	s13, [r0]
    6c9c:	4826      	ldr	r0, [pc, #152]	; (6d38 <audioFrameString1+0x218>)
    6c9e:	eee6 7a87 	vfma.f32	s15, s13, s14
    6ca2:	edd0 0a00 	vldr	s1, [r0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6ca6:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
    6caa:	b283      	uxth	r3, r0
    6cac:	ee08 3a10 	vmov	s16, r3
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6cb0:	ee60 0aa7 	vmul.f32	s1, s1, s15
    6cb4:	f005 f998 	bl	bfe8 <__LEAF_clip_veneer>
    6cb8:	4648      	mov	r0, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6cba:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6cbe:	eef0 0a40 	vmov.f32	s1, s0
    6cc2:	ee28 0a28 	vmul.f32	s0, s16, s17
    6cc6:	f005 f90b 	bl	bee0 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    6cca:	4918      	ldr	r1, [pc, #96]	; (6d2c <audioFrameString1+0x20c>)
		for (int i = 0; i < numStringsThisBoard; i++)
    6ccc:	4b08      	ldr	r3, [pc, #32]	; (6cf0 <audioFrameString1+0x1d0>)
				currentRandom++;
    6cce:	7808      	ldrb	r0, [r1, #0]
			{
    6cd0:	4a0d      	ldr	r2, [pc, #52]	; (6d08 <audioFrameString1+0x1e8>)
				currentRandom++;
    6cd2:	3001      	adds	r0, #1
    6cd4:	7008      	strb	r0, [r1, #0]
				lsDecay[i] = 1;
    6cd6:	2101      	movs	r1, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    6cd8:	7818      	ldrb	r0, [r3, #0]
				lsDecay[i] = 1;
    6cda:	f888 1000 	strb.w	r1, [r8]
			{
    6cde:	9b01      	ldr	r3, [sp, #4]
    6ce0:	e75c      	b.n	6b9c <audioFrameString1+0x7c>
    6ce2:	bf00      	nop
    6ce4:	e0001000 	.word	0xe0001000
    6ce8:	2000577c 	.word	0x2000577c
    6cec:	200052f4 	.word	0x200052f4
    6cf0:	20000694 	.word	0x20000694
    6cf4:	20014230 	.word	0x20014230
    6cf8:	00000000 	.word	0x00000000
    6cfc:	42fe0000 	.word	0x42fe0000
    6d00:	37800080 	.word	0x37800080
    6d04:	20005364 	.word	0x20005364
    6d08:	20014210 	.word	0x20014210
    6d0c:	30000000 	.word	0x30000000
    6d10:	4b000000 	.word	0x4b000000
    6d14:	20000684 	.word	0x20000684
    6d18:	20014250 	.word	0x20014250
    6d1c:	200051d8 	.word	0x200051d8
    6d20:	200052e8 	.word	0x200052e8
    6d24:	20014228 	.word	0x20014228
    6d28:	20005300 	.word	0x20005300
    6d2c:	20014320 	.word	0x20014320
    6d30:	200051f4 	.word	0x200051f4
    6d34:	2000537c 	.word	0x2000537c
    6d38:	20000698 	.word	0x20000698
    6d3c:	2001cbc0 	.word	0x2001cbc0
    6d40:	2001cbb8 	.word	0x2001cbb8
	...

00006d60 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    6d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != String2Loaded)
    6d64:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6dd4 <audioInitString2+0x74>
    6d68:	f898 3000 	ldrb.w	r3, [r8]
    6d6c:	2b02      	cmp	r3, #2
    6d6e:	d023      	beq.n	6db8 <audioInitString2+0x58>
	{
		if (whichStringModelLoaded == String1Loaded)
    6d70:	2b01      	cmp	r3, #1
    6d72:	d026      	beq.n	6dc2 <audioInitString2+0x62>
		{
			audioFreeString1();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    6d74:	2b04      	cmp	r3, #4
    6d76:	d021      	beq.n	6dbc <audioInitString2+0x5c>
		{
			audioFreeSynth();
		}
		for (int v = 0; v < numStringsThisBoard; v++)
    6d78:	4e13      	ldr	r6, [pc, #76]	; (6dc8 <audioInitString2+0x68>)
    6d7a:	7833      	ldrb	r3, [r6, #0]
    6d7c:	b1cb      	cbz	r3, 6db2 <audioInitString2+0x52>
    6d7e:	4d13      	ldr	r5, [pc, #76]	; (6dcc <audioInitString2+0x6c>)
    6d80:	2400      	movs	r4, #0
    6d82:	4f13      	ldr	r7, [pc, #76]	; (6dd0 <audioInitString2+0x70>)
		{
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    6d84:	f8df 9050 	ldr.w	r9, [pc, #80]	; 6dd8 <audioInitString2+0x78>
    6d88:	4628      	mov	r0, r5
    6d8a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    6d8e:	464a      	mov	r2, r9
    6d90:	2101      	movs	r1, #1
    6d92:	f005 f859 	bl	be48 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6d96:	6839      	ldr	r1, [r7, #0]
    6d98:	4628      	mov	r0, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    6d9a:	3504      	adds	r5, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6d9c:	4421      	add	r1, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    6d9e:	3401      	adds	r4, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6da0:	2903      	cmp	r1, #3
    6da2:	bfd4      	ite	le
    6da4:	2100      	movle	r1, #0
    6da6:	2101      	movgt	r1, #1
    6da8:	f005 f852 	bl	be50 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6dac:	7833      	ldrb	r3, [r6, #0]
    6dae:	42a3      	cmp	r3, r4
    6db0:	dcea      	bgt.n	6d88 <audioInitString2+0x28>
		}

		whichStringModelLoaded = String2Loaded;
    6db2:	2302      	movs	r3, #2
    6db4:	f888 3000 	strb.w	r3, [r8]
	}
}
    6db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeSynth();
    6dbc:	f005 f994 	bl	c0e8 <__audioFreeSynth_veneer>
    6dc0:	e7da      	b.n	6d78 <audioInitString2+0x18>
			audioFreeString1();
    6dc2:	f7ff fc9d 	bl	6700 <audioFreeString1>
    6dc6:	e7d7      	b.n	6d78 <audioInitString2+0x18>
    6dc8:	20000694 	.word	0x20000694
    6dcc:	2001cbd0 	.word	0x2001cbd0
    6dd0:	200051d0 	.word	0x200051d0
    6dd4:	2001426d 	.word	0x2001426d
    6dd8:	200052ec 	.word	0x200052ec
    6ddc:	f3af 8000 	nop.w

00006de0 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    6de0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    6de2:	4e07      	ldr	r6, [pc, #28]	; (6e00 <audioFreeString2+0x20>)
    6de4:	7833      	ldrb	r3, [r6, #0]
    6de6:	b14b      	cbz	r3, 6dfc <audioFreeString2+0x1c>
    6de8:	4d06      	ldr	r5, [pc, #24]	; (6e04 <audioFreeString2+0x24>)
    6dea:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    6dec:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    6dee:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    6df0:	f005 f80e 	bl	be10 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    6df4:	7833      	ldrb	r3, [r6, #0]
    6df6:	3504      	adds	r5, #4
    6df8:	42a3      	cmp	r3, r4
    6dfa:	dcf7      	bgt.n	6dec <audioFreeString2+0xc>
	}
}
    6dfc:	bd70      	pop	{r4, r5, r6, pc}
    6dfe:	bf00      	nop
    6e00:	20000694 	.word	0x20000694
    6e04:	2001cbd0 	.word	0x2001cbd0
    6e08:	f3af 8000 	nop.w
    6e0c:	f3af 8000 	nop.w
    6e10:	f3af 8000 	nop.w
    6e14:	f3af 8000 	nop.w
    6e18:	f3af 8000 	nop.w
    6e1c:	f3af 8000 	nop.w

00006e20 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    6e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (whichStringModelLoaded != String2Loaded)
    6e24:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6f24 <audioSwitchToString2+0x104>
{
    6e28:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != String2Loaded)
    6e2c:	f898 3000 	ldrb.w	r3, [r8]
    6e30:	2b02      	cmp	r3, #2
    6e32:	d023      	beq.n	6e7c <audioSwitchToString2+0x5c>
		if (whichStringModelLoaded == String1Loaded)
    6e34:	2b01      	cmp	r3, #1
    6e36:	d05e      	beq.n	6ef6 <audioSwitchToString2+0xd6>
		else if (whichStringModelLoaded == SynthLoaded)
    6e38:	2b04      	cmp	r3, #4
    6e3a:	d059      	beq.n	6ef0 <audioSwitchToString2+0xd0>
		for (int v = 0; v < numStringsThisBoard; v++)
    6e3c:	4e2f      	ldr	r6, [pc, #188]	; (6efc <audioSwitchToString2+0xdc>)
    6e3e:	7833      	ldrb	r3, [r6, #0]
    6e40:	b1cb      	cbz	r3, 6e76 <audioSwitchToString2+0x56>
    6e42:	4d2f      	ldr	r5, [pc, #188]	; (6f00 <audioSwitchToString2+0xe0>)
    6e44:	2400      	movs	r4, #0
    6e46:	4f2f      	ldr	r7, [pc, #188]	; (6f04 <audioSwitchToString2+0xe4>)
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    6e48:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 6f28 <audioSwitchToString2+0x108>
    6e4c:	4628      	mov	r0, r5
    6e4e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    6e52:	464a      	mov	r2, r9
    6e54:	2101      	movs	r1, #1
    6e56:	f004 fff7 	bl	be48 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6e5a:	6839      	ldr	r1, [r7, #0]
    6e5c:	4628      	mov	r0, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    6e5e:	3504      	adds	r5, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6e60:	4421      	add	r1, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    6e62:	3401      	adds	r4, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6e64:	2903      	cmp	r1, #3
    6e66:	bfd4      	ite	le
    6e68:	2100      	movle	r1, #0
    6e6a:	2101      	movgt	r1, #1
    6e6c:	f004 fff0 	bl	be50 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6e70:	7833      	ldrb	r3, [r6, #0]
    6e72:	429c      	cmp	r4, r3
    6e74:	dbea      	blt.n	6e4c <audioSwitchToString2+0x2c>
		whichStringModelLoaded = String2Loaded;
    6e76:	2302      	movs	r3, #2
    6e78:	f888 3000 	strb.w	r3, [r8]
    6e7c:	4c22      	ldr	r4, [pc, #136]	; (6f08 <audioSwitchToString2+0xe8>)
		for (int v = 0; v < numStringsThisBoard; v++)
    6e7e:	2500      	movs	r5, #0
    6e80:	4f22      	ldr	r7, [pc, #136]	; (6f0c <audioSwitchToString2+0xec>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    6e82:	f04f 0901 	mov.w	r9, #1
    6e86:	4e22      	ldr	r6, [pc, #136]	; (6f10 <audioSwitchToString2+0xf0>)
    6e88:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    6e8c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6f2c <audioSwitchToString2+0x10c>
    6e90:	f8df a09c 	ldr.w	sl, [pc, #156]	; 6f30 <audioSwitchToString2+0x110>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6e94:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 6f14 <audioSwitchToString2+0xf4>
    6e98:	4620      	mov	r0, r4
    6e9a:	eeb0 0a48 	vmov.f32	s0, s16
    6e9e:	f005 f8bb 	bl	c018 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    6ea2:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6ea6:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    6ea8:	3404      	adds	r4, #4
		if (voice == 62)
    6eaa:	2b3e      	cmp	r3, #62	; 0x3e
    6eac:	d014      	beq.n	6ed8 <audioSwitchToString2+0xb8>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6eae:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 20; i++)
    6eb2:	3704      	adds	r7, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6eb4:	f005 f884 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    6eb8:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    6eba:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 20; i++)
    6ebe:	f105 0501 	add.w	r5, r5, #1
    6ec2:	d1e9      	bne.n	6e98 <audioSwitchToString2+0x78>
	}
	audioFrameFunction = audioFrameString2;
    6ec4:	4914      	ldr	r1, [pc, #80]	; (6f18 <audioSwitchToString2+0xf8>)
	presetReady = 1;
    6ec6:	2201      	movs	r2, #1
	audioFrameFunction = audioFrameString2;
    6ec8:	4814      	ldr	r0, [pc, #80]	; (6f1c <audioSwitchToString2+0xfc>)
	presetReady = 1;
    6eca:	4b15      	ldr	r3, [pc, #84]	; (6f20 <audioSwitchToString2+0x100>)
	audioFrameFunction = audioFrameString2;
    6ecc:	6008      	str	r0, [r1, #0]
	presetReady = 1;
    6ece:	601a      	str	r2, [r3, #0]
}
    6ed0:	ecbd 8b02 	vpop	{d8}
    6ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    6ed8:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 20; i++)
    6edc:	3604      	adds	r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    6ede:	f005 f86f 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    6ee2:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    6ee4:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 20; i++)
    6ee8:	f105 0501 	add.w	r5, r5, #1
    6eec:	d1d4      	bne.n	6e98 <audioSwitchToString2+0x78>
    6eee:	e7e9      	b.n	6ec4 <audioSwitchToString2+0xa4>
			audioFreeSynth();
    6ef0:	f005 f8fa 	bl	c0e8 <__audioFreeSynth_veneer>
    6ef4:	e7a2      	b.n	6e3c <audioSwitchToString2+0x1c>
			audioFreeString1();
    6ef6:	f7ff fc03 	bl	6700 <audioFreeString1>
    6efa:	e79f      	b.n	6e3c <audioSwitchToString2+0x1c>
    6efc:	20000694 	.word	0x20000694
    6f00:	2001cbd0 	.word	0x2001cbd0
    6f04:	200051d0 	.word	0x200051d0
    6f08:	20005244 	.word	0x20005244
    6f0c:	200006e8 	.word	0x200006e8
    6f10:	20018544 	.word	0x20018544
    6f14:	3a83126f 	.word	0x3a83126f
    6f18:	20001194 	.word	0x20001194
    6f1c:	00007701 	.word	0x00007701
    6f20:	20005358 	.word	0x20005358
    6f24:	2001426d 	.word	0x2001426d
    6f28:	200052ec 	.word	0x200052ec
    6f2c:	2001425c 	.word	0x2001425c
    6f30:	200051e0 	.word	0x200051e0
    6f34:	f3af 8000 	nop.w
    6f38:	f3af 8000 	nop.w
    6f3c:	f3af 8000 	nop.w

00006f40 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    6f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6f44:	48e5      	ldr	r0, [pc, #916]	; (72dc <audioTickString2+0x39c>)
    6f46:	4ee6      	ldr	r6, [pc, #920]	; (72e0 <audioTickString2+0x3a0>)
    6f48:	4de6      	ldr	r5, [pc, #920]	; (72e4 <audioTickString2+0x3a4>)
    6f4a:	4634      	mov	r4, r6
    6f4c:	f106 0750 	add.w	r7, r6, #80	; 0x50
{
    6f50:	ed2d 8b10 	vpush	{d8-d15}
    6f54:	b085      	sub	sp, #20
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6f56:	f005 f963 	bl	c220 <__tExpSmooth_tick_veneer>
    6f5a:	eeb0 9a40 	vmov.f32	s18, s0

	for (int i = 0; i < 20; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    6f5e:	4628      	mov	r0, r5
	for (int i = 0; i < 20; i++)
    6f60:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    6f62:	f005 f95d 	bl	c220 <__tExpSmooth_tick_veneer>
    6f66:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 20; i++)
    6f6a:	42a7      	cmp	r7, r4
    6f6c:	d1f7      	bne.n	6f5e <audioTickString2+0x1e>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    6f6e:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 732c <audioTickString2+0x3ec>
    6f72:	f8d8 3000 	ldr.w	r3, [r8]
    6f76:	2b00      	cmp	r3, #0
    6f78:	f040 827f 	bne.w	747a <audioTickString2+0x53a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    6f7c:	4bda      	ldr	r3, [pc, #872]	; (72e8 <audioTickString2+0x3a8>)
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    6f7e:	ed9f aadb 	vldr	s20, [pc, #876]	; 72ec <audioTickString2+0x3ac>
		for (int i = 0; i < numStringsThisBoard; i++)
    6f82:	781a      	ldrb	r2, [r3, #0]
    6f84:	9302      	str	r3, [sp, #8]
	for (int i = 0; i < numStringsThisBoard; i++)
    6f86:	2a00      	cmp	r2, #0
    6f88:	f000 82cd 	beq.w	7526 <audioTickString2+0x5e6>
		{

			float thisString = (firstString + i);
			float thisStringProportion = thisString * invNumStrings;
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    6f8c:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
    6f90:	4bd7      	ldr	r3, [pc, #860]	; (72f0 <audioTickString2+0x3b0>)
    6f92:	eef0 9a4a 	vmov.f32	s19, s20
    6f96:	f8df 8398 	ldr.w	r8, [pc, #920]	; 7330 <audioTickString2+0x3f0>
    6f9a:	f8df 9398 	ldr.w	r9, [pc, #920]	; 7334 <audioTickString2+0x3f4>
	for (int i = 0; i < numStringsThisBoard; i++)
    6f9e:	2500      	movs	r5, #0
    6fa0:	4cd4      	ldr	r4, [pc, #848]	; (72f4 <audioTickString2+0x3b4>)
    6fa2:	ed9f cad5 	vldr	s24, [pc, #852]	; 72f8 <audioTickString2+0x3b8>
    6fa6:	4fd5      	ldr	r7, [pc, #852]	; (72fc <audioTickString2+0x3bc>)
    6fa8:	f8df b38c 	ldr.w	fp, [pc, #908]	; 7338 <audioTickString2+0x3f8>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    6fac:	eddf bad4 	vldr	s23, [pc, #848]	; 7300 <audioTickString2+0x3c0>
    6fb0:	ed9f bad4 	vldr	s22, [pc, #848]	; 7304 <audioTickString2+0x3c4>
    6fb4:	eddf aad4 	vldr	s21, [pc, #848]	; 7308 <audioTickString2+0x3c8>
    6fb8:	9303      	str	r3, [sp, #12]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    6fba:	9b03      	ldr	r3, [sp, #12]
    6fbc:	46a2      	mov	sl, r4
    6fbe:	ecf8 7a01 	vldmia	r8!, {s15}
    6fc2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6fc6:	edd3 8a00 	vldr	s17, [r3]
    6fca:	ee78 8aa7 	vadd.f32	s17, s17, s15
    6fce:	fec8 8acc 	vminnm.f32	s17, s17, s24
    6fd2:	fec8 8aa9 	vmaxnm.f32	s17, s17, s19
		float finalFreq = mtofTableLookup(theNote[i]);
    6fd6:	eeb0 0a68 	vmov.f32	s0, s17
    6fda:	f004 ff5d 	bl	be98 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6fde:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    6fe2:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6fe6:	ee38 0ae7 	vsub.f32	s0, s17, s15
    6fea:	f004 ff55 	bl	be98 <__mtofTableLookup_veneer>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    6fee:	eeb0 2a6b 	vmov.f32	s4, s23
    6ff2:	eef0 1a4b 	vmov.f32	s3, s22
    6ff6:	eddf 0ac5 	vldr	s1, [pc, #788]	; 730c <audioTickString2+0x3cc>
    6ffa:	eeb0 1a6a 	vmov.f32	s2, s21
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6ffe:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    7002:	f005 f811 	bl	c028 <__LEAF_map_veneer>
    7006:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    700a:	4648      	mov	r0, r9
    700c:	ee17 1a90 	vmov	r1, s15
    7010:	f004 ff9e 	bl	bf50 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    7014:	6839      	ldr	r1, [r7, #0]
    7016:	2900      	cmp	r1, #0
    7018:	f000 81e3 	beq.w	73e2 <audioTickString2+0x4a2>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    701c:	ed94 0a00 	vldr	s0, [r4]
    7020:	4648      	mov	r0, r9
    7022:	f004 ff49 	bl	beb8 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    7026:	eeb0 0a48 	vmov.f32	s0, s16
    702a:	4648      	mov	r0, r9

		tTString_setFreq(&strings[i], finalFreq);



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    702c:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    7030:	f004 fe2a 	bl	bc88 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    7034:	ed96 0a06 	vldr	s0, [r6, #24]
    7038:	4648      	mov	r0, r9
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    703a:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    703e:	f004 fed3 	bl	bde8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    7042:	ed96 0a07 	vldr	s0, [r6, #28]
    7046:	4648      	mov	r0, r9
    7048:	f004 fe32 	bl	bcb0 <__tTString_setFeedbackReactionSpeed_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    704c:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    7050:	4648      	mov	r0, r9
    7052:	f004 ff15 	bl	be80 <__tTString_setRippleDepth_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    7056:	eeb0 0a4d 	vmov.f32	s0, s26
    705a:	4648      	mov	r0, r9
    705c:	f005 f878 	bl	c150 <__tTString_setFreq_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    7060:	eef0 0a68 	vmov.f32	s1, s17
    7064:	edd6 7a00 	vldr	s15, [r6]
    7068:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    706c:	eee7 0a8e 	vfma.f32	s1, s15, s28
    7070:	f005 f852 	bl	c118 <__fastPowf_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7074:	eef0 0a68 	vmov.f32	s1, s17
    7078:	edd6 7a01 	vldr	s15, [r6, #4]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    707c:	eef0 da40 	vmov.f32	s27, s0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7080:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    7084:	eee7 0a8e 	vfma.f32	s1, s15, s28
    7088:	f005 f846 	bl	c118 <__fastPowf_veneer>
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    708c:	eddb 0a00 	vldr	s1, [fp]
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7090:	eeb0 da40 	vmov.f32	s26, s0
			if (stringParams[i][0][0] > openStringFreq)
    7094:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    709c:	f100 8178 	bmi.w	7390 <audioTickString2+0x450>
		float oneMinusAlpha = 1.0f;
    70a0:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    70a4:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
		float alpha = 0.0f;
    70a8:	eef0 8a69 	vmov.f32	s17, s19
			if (stringParams[i][0][0] > openStringFreq)
    70ac:	eeb4 8ac7 	vcmpe.f32	s16, s14
    70b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70b4:	f100 8160 	bmi.w	7378 <audioTickString2+0x438>
				if (stringParams[i+1][0][0] < openStringFreq)
    70b8:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    70bc:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    70c0:	2300      	movs	r3, #0
			if (stringParams[i][0][0] > openStringFreq)
    70c2:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    70c6:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    70ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70ce:	d505      	bpl.n	70dc <audioTickString2+0x19c>
				if (stringParams[i+1][0][0] < openStringFreq)
    70d0:	eeb4 8ac7 	vcmpe.f32	s16, s14
    70d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70d8:	f300 8256 	bgt.w	7588 <audioTickString2+0x648>
			if (stringParams[i][0][0] > openStringFreq)
    70dc:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    70e0:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    70e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70e8:	d505      	bpl.n	70f6 <audioTickString2+0x1b6>
				if (stringParams[i+1][0][0] < openStringFreq)
    70ea:	eeb4 8ae0 	vcmpe.f32	s16, s1
    70ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70f2:	f300 8235 	bgt.w	7560 <audioTickString2+0x620>
			if (stringParams[i][0][0] > openStringFreq)
    70f6:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    70fa:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    70fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7102:	d505      	bpl.n	7110 <audioTickString2+0x1d0>
				if (stringParams[i+1][0][0] < openStringFreq)
    7104:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    710c:	f300 82b9 	bgt.w	7682 <audioTickString2+0x742>
			if (stringParams[i][0][0] > openStringFreq)
    7110:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7114:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    7118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    711c:	d505      	bpl.n	712a <audioTickString2+0x1ea>
				if (stringParams[i+1][0][0] < openStringFreq)
    711e:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7126:	f300 8298 	bgt.w	765a <audioTickString2+0x71a>
			if (stringParams[i][0][0] > openStringFreq)
    712a:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    712e:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    7132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7136:	d505      	bpl.n	7144 <audioTickString2+0x204>
				if (stringParams[i+1][0][0] < openStringFreq)
    7138:	eeb4 8ac7 	vcmpe.f32	s16, s14
    713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7140:	f300 8279 	bgt.w	7636 <audioTickString2+0x6f6>
			if (stringParams[i][0][0] > openStringFreq)
    7144:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7148:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7150:	d505      	bpl.n	715e <audioTickString2+0x21e>
				if (stringParams[i+1][0][0] < openStringFreq)
    7152:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    715a:	f300 8258 	bgt.w	760e <audioTickString2+0x6ce>
			if (stringParams[i][0][0] > openStringFreq)
    715e:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7166:	d50a      	bpl.n	717e <audioTickString2+0x23e>
				if (stringParams[i+1][0][0] < openStringFreq)
    7168:	ed9b 1a51 	vldr	s2, [fp, #324]	; 0x144
    716c:	eeb4 8ac1 	vcmpe.f32	s16, s2
    7170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7174:	f300 823d 	bgt.w	75f2 <audioTickString2+0x6b2>
    7178:	eef2 ea04 	vmov.f32	s29, #36	; 0x41200000  10.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
				{
					which = 9;
    717c:	2309      	movs	r3, #9
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    717e:	edda 7a00 	vldr	s15, [sl]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7182:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
		float barHeight = barInMIDI[i] / 12.0f;
    7186:	ed9f 7a62 	vldr	s14, [pc, #392]	; 7310 <audioTickString2+0x3d0>
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    718a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    718e:	9301      	str	r3, [sp, #4]
    7190:	eeb0 0a69 	vmov.f32	s0, s19
		float barHeight = barInMIDI[i] / 12.0f;
    7194:	ee67 7a87 	vmul.f32	s15, s15, s14
		uint32_t barHeightInt = (uint32_t)barHeight;
    7198:	3404      	adds	r4, #4
    719a:	eebc eae7 	vcvt.u32.f32	s28, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    719e:	ee7f fae7 	vsub.f32	s31, s31, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71a2:	ee1e 3a10 	vmov	r3, s28
		float barHeightAlpha = barHeight - barHeightInt;
    71a6:	eeb8 7a4e 	vcvt.f32.u32	s14, s28
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71aa:	3301      	adds	r3, #1
		float barHeightAlpha = barHeight - barHeightInt;
    71ac:	ee37 8ac7 	vsub.f32	s16, s15, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71b0:	ee00 3a90 	vmov	s1, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    71b4:	ee7f fa87 	vadd.f32	s31, s31, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71b8:	eef8 0a60 	vcvt.f32.u32	s1, s1
    71bc:	f004 ff14 	bl	bfe8 <__LEAF_clip_veneer>
    71c0:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    71c4:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    71c8:	eef0 0a6e 	vmov.f32	s1, s29
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    71d0:	eeb0 0a69 	vmov.f32	s0, s19
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    71d4:	ee17 aa90 	vmov	sl, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    71d8:	f004 ff06 	bl	bfe8 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	2b09      	cmp	r3, #9
    71e0:	f000 80e3 	beq.w	73aa <audioTickString2+0x46a>
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    71e4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71e8:	ee1e 2a10 	vmov	r2, s28
    71ec:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	for (int i = 0; i < numStringsThisBoard; i++)
    71f0:	3501      	adds	r5, #1
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71f2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    71f6:	ee17 2a90 	vmov	r2, s15
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71fa:	eb0a 00ca 	add.w	r0, sl, sl, lsl #3
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71fe:	009b      	lsls	r3, r3, #2
    7200:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7204:	0080      	lsls	r0, r0, #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7206:	0092      	lsls	r2, r2, #2
    7208:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    720c:	445a      	add	r2, fp
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    720e:	ed92 7a02 	vldr	s14, [r2, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7212:	edd2 7a01 	vldr	s15, [r2, #4]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7216:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    721a:	ee28 7a87 	vmul.f32	s14, s17, s14
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    721e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7222:	ee68 7aa7 	vmul.f32	s15, s17, s15
    7226:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    722a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    722e:	445a      	add	r2, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7230:	445b      	add	r3, fp
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7232:	4459      	add	r1, fp
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7234:	ed92 6a02 	vldr	s12, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7238:	edd2 6a01 	vldr	s13, [r2, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    723c:	ed91 0a02 	vldr	s0, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7240:	edd1 5a01 	vldr	s11, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7244:	ee28 0a80 	vmul.f32	s0, s17, s0
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7248:	edd3 4a02 	vldr	s9, [r3, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    724c:	ee68 8aa5 	vmul.f32	s17, s17, s11
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7250:	ed93 5a01 	vldr	s10, [r3, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7254:	eea4 7a8f 	vfma.f32	s14, s9, s30
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7258:	eea6 0a0f 	vfma.f32	s0, s12, s30
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    725c:	eee6 8a8f 	vfma.f32	s17, s13, s30
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7260:	eee5 7a0f 	vfma.f32	s15, s10, s30
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    7264:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    7268:	ee28 8a28 	vmul.f32	s16, s16, s17
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    726c:	eeaf 0a87 	vfma.f32	s0, s31, s14
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    7270:	eeaf 8aa7 	vfma.f32	s16, s31, s15
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    7274:	4648      	mov	r0, r9
    7276:	ee2d 0a80 	vmul.f32	s0, s27, s0
    727a:	f004 fe19 	bl	beb0 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    727e:	4648      	mov	r0, r9
    7280:	ee2d 0a08 	vmul.f32	s0, s26, s16
    7284:	f004 fd70 	bl	bd68 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]) * 0.5f;
    7288:	4648      	mov	r0, r9
    728a:	f004 fd45 	bl	bd18 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    728e:	9b02      	ldr	r3, [sp, #8]
		temp += tTString_tick(&strings[i]) * 0.5f;
    7290:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	for (int i = 0; i < numStringsThisBoard; i++)
    7294:	f109 0904 	add.w	r9, r9, #4
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	42ab      	cmp	r3, r5
		temp += tTString_tick(&strings[i]) * 0.5f;
    729c:	eea0 aa27 	vfma.f32	s20, s0, s15
	for (int i = 0; i < numStringsThisBoard; i++)
    72a0:	f73f ae8b 	bgt.w	6fba <audioTickString2+0x7a>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    72a4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 7314 <audioTickString2+0x3d4>
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    72a8:	ee29 7a09 	vmul.f32	s14, s18, s18
    72ac:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 7318 <audioTickString2+0x3d8>
    72b0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 731c <audioTickString2+0x3dc>
    72b4:	eea9 0a27 	vfma.f32	s0, s18, s15
    72b8:	ed9f 6a19 	vldr	s12, [pc, #100]	; 7320 <audioTickString2+0x3e0>
    72bc:	ee67 7a09 	vmul.f32	s15, s14, s18
    72c0:	eddf 6a18 	vldr	s13, [pc, #96]	; 7324 <audioTickString2+0x3e4>

	temp *= outVol * masterVolFromBrain;
    72c4:	4a18      	ldr	r2, [pc, #96]	; (7328 <audioTickString2+0x3e8>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    72c6:	ee29 9a26 	vmul.f32	s18, s18, s13
	thisFrameCount = (thisFrameCount + 1) & 63;
    72ca:	683b      	ldr	r3, [r7, #0]
	temp *= outVol * masterVolFromBrain;
    72cc:	edd2 6a00 	vldr	s13, [r2]
	thisFrameCount = (thisFrameCount + 1) & 63;
    72d0:	3301      	adds	r3, #1
    72d2:	eea7 0aa5 	vfma.f32	s0, s15, s11
    72d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72da:	e031      	b.n	7340 <audioTickString2+0x400>
    72dc:	20014268 	.word	0x20014268
    72e0:	200051f4 	.word	0x200051f4
    72e4:	20005244 	.word	0x20005244
    72e8:	20000694 	.word	0x20000694
    72ec:	00000000 	.word	0x00000000
    72f0:	20014228 	.word	0x20014228
    72f4:	20001198 	.word	0x20001198
    72f8:	42fe0000 	.word	0x42fe0000
    72fc:	2001cbd8 	.word	0x2001cbd8
    7300:	42f00000 	.word	0x42f00000
    7304:	428c0000 	.word	0x428c0000
    7308:	43770000 	.word	0x43770000
    730c:	42f60000 	.word	0x42f60000
    7310:	3daaaaab 	.word	0x3daaaaab
    7314:	3ef1ac0b 	.word	0x3ef1ac0b
    7318:	3bdc4213 	.word	0x3bdc4213
    731c:	40caa285 	.word	0x40caa285
    7320:	4022be0a 	.word	0x4022be0a
    7324:	40516313 	.word	0x40516313
    7328:	2000068c 	.word	0x2000068c
    732c:	200052f4 	.word	0x200052f4
    7330:	20014230 	.word	0x20014230
    7334:	2001cbd0 	.word	0x2001cbd0
    7338:	20000738 	.word	0x20000738
    733c:	3f7ae148 	.word	0x3f7ae148
    7340:	603b      	str	r3, [r7, #0]
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7342:	eea7 0a46 	vfms.f32	s0, s14, s12
    7346:	eea7 0ac9 	vfms.f32	s0, s15, s18
	temp *= outVol * masterVolFromBrain;
    734a:	ee20 0a26 	vmul.f32	s0, s0, s13
	temp = tanhf(temp);
    734e:	ee20 0a0a 	vmul.f32	s0, s0, s20
    7352:	f004 ff8d 	bl	c270 <__tanhf_veneer>
    7356:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    735a:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 733c <audioTickString2+0x3fc>
    735e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    7362:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    7366:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    736a:	b005      	add	sp, #20
    736c:	ecbd 8b10 	vpop	{d8-d15}
    7370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7374:	f004 be38 	b.w	bfe8 <__LEAF_clip_veneer>
				if (stringParams[i+1][0][0] < openStringFreq)
    7378:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    737c:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7384:	f300 8121 	bgt.w	75ca <audioTickString2+0x68a>
    7388:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    738c:	2300      	movs	r3, #0
    738e:	e698      	b.n	70c2 <audioTickString2+0x182>
    7390:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
    7394:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    739c:	f300 8106 	bgt.w	75ac <audioTickString2+0x66c>
		float oneMinusAlpha = 1.0f;
    73a0:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    73a4:	eef0 8a69 	vmov.f32	s17, s19
    73a8:	e680      	b.n	70ac <audioTickString2+0x16c>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    73aa:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    73ae:	ee1e 3a10 	vmov	r3, s28
	for (int i = 0; i < numStringsThisBoard; i++)
    73b2:	3501      	adds	r5, #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    73b4:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    73b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    73bc:	ed9a 0a53 	vldr	s0, [sl, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    73c0:	edda 7a52 	vldr	s15, [sl, #328]	; 0x148
			float freq1 = stringParams[9][barHeightInt][1];
    73c4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    73c8:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    73cc:	ee28 8a27 	vmul.f32	s16, s16, s15
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    73d0:	edd1 6a53 	vldr	s13, [r1, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    73d4:	ed91 7a52 	vldr	s14, [r1, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    73d8:	eeaf 0aa6 	vfma.f32	s0, s31, s13
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    73dc:	eeaf 8a87 	vfma.f32	s16, s31, s14
		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    73e0:	e748      	b.n	7274 <audioTickString2+0x334>
			float thisString = (firstString + i);
    73e2:	4bb4      	ldr	r3, [pc, #720]	; (76b4 <audioTickString2+0x774>)
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    73e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    73e8:	edd6 5a0b 	vldr	s11, [r6, #44]	; 0x2c
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    73ec:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
			float thisString = (firstString + i);
    73f0:	681b      	ldr	r3, [r3, #0]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    73f2:	eeb0 0a68 	vmov.f32	s0, s17
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    73f6:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    73fa:	eef0 8a6c 	vmov.f32	s17, s25
			float thisString = (firstString + i);
    73fe:	442b      	add	r3, r5
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    7400:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    7404:	ed9f 2aac 	vldr	s4, [pc, #688]	; 76b8 <audioTickString2+0x778>
			float thisString = (firstString + i);
    7408:	ee07 3a90 	vmov	s15, r3
			float thisStringProportion = thisString * invNumStrings;
    740c:	4bab      	ldr	r3, [pc, #684]	; (76bc <audioTickString2+0x77c>)
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    740e:	eddf 1aac 	vldr	s3, [pc, #688]	; 76c0 <audioTickString2+0x780>
			float thisString = (firstString + i);
    7412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    7416:	ed93 5a00 	vldr	s10, [r3]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    741a:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 76c4 <audioTickString2+0x784>
    741e:	9101      	str	r1, [sp, #4]
			float thisStringProportion = thisString * invNumStrings;
    7420:	ee67 7a85 	vmul.f32	s15, s15, s10
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7424:	ee37 7a67 	vsub.f32	s14, s14, s15
    7428:	ee67 7aa5 	vmul.f32	s15, s15, s11
    742c:	eee6 7a07 	vfma.f32	s15, s12, s14
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    7430:	eee7 8aa6 	vfma.f32	s17, s15, s13
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    7434:	f004 fdf8 	bl	c028 <__LEAF_map_veneer>
			if (knobScaled[5] > 0.05f)
    7438:	edd6 0a05 	vldr	s1, [r6, #20]
    743c:	eddf 7aa2 	vldr	s15, [pc, #648]	; 76c8 <audioTickString2+0x788>
    7440:	9901      	ldr	r1, [sp, #4]
    7442:	eef4 0ae7 	vcmpe.f32	s1, s15
    7446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    744a:	dd6e      	ble.n	752a <audioTickString2+0x5ea>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    744c:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 76cc <audioTickString2+0x78c>
    7450:	ee60 0a80 	vmul.f32	s1, s1, s0
    7454:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 76d0 <audioTickString2+0x790>
    7458:	f004 fdc6 	bl	bfe8 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    745c:	eef0 0a4d 	vmov.f32	s1, s26
    7460:	4648      	mov	r0, r9
    7462:	f004 fe89 	bl	c178 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    7466:	4648      	mov	r0, r9
    7468:	2101      	movs	r1, #1
    746a:	f004 fef1 	bl	c250 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    746e:	eeb0 0a68 	vmov.f32	s0, s17
    7472:	4648      	mov	r0, r9
    7474:	f004 fc3c 	bl	bcf0 <__tTString_setHarmonic_veneer>
    7478:	e5d0      	b.n	701c <audioTickString2+0xdc>
		for (int i = 0; i < numStringsThisBoard; i++)
    747a:	4b96      	ldr	r3, [pc, #600]	; (76d4 <audioTickString2+0x794>)
    747c:	781a      	ldrb	r2, [r3, #0]
    747e:	9302      	str	r3, [sp, #8]
    7480:	2a00      	cmp	r2, #0
    7482:	f000 8110 	beq.w	76a6 <audioTickString2+0x766>
    7486:	f8df a274 	ldr.w	sl, [pc, #628]	; 76fc <audioTickString2+0x7bc>
    748a:	2400      	movs	r4, #0
				float finalFreq = mtofTableLookup(theNote[i]);
    748c:	eddf 9a92 	vldr	s19, [pc, #584]	; 76d8 <audioTickString2+0x798>
    7490:	eddf 8a92 	vldr	s17, [pc, #584]	; 76dc <audioTickString2+0x79c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7494:	ed9f 8a92 	vldr	s16, [pc, #584]	; 76e0 <audioTickString2+0x7a0>
    7498:	4d92      	ldr	r5, [pc, #584]	; (76e4 <audioTickString2+0x7a4>)
    749a:	4f93      	ldr	r7, [pc, #588]	; (76e8 <audioTickString2+0x7a8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    749c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    74a0:	b29b      	uxth	r3, r3
    74a2:	2b00      	cmp	r3, #0
    74a4:	d14c      	bne.n	7540 <audioTickString2+0x600>
    74a6:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    74aa:	b29b      	uxth	r3, r3
    74ac:	2b00      	cmp	r3, #0
    74ae:	d047      	beq.n	7540 <audioTickString2+0x600>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    74b0:	4a8e      	ldr	r2, [pc, #568]	; (76ec <audioTickString2+0x7ac>)
				stringOctave[i] = octave;
    74b2:	4b8f      	ldr	r3, [pc, #572]	; (76f0 <audioTickString2+0x7b0>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    74b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				stringOctave[i] = octave;
    74b8:	edd3 7a00 	vldr	s15, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74bc:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    74c0:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74c4:	fa1f f983 	uxth.w	r9, r3
				stringOctave[i] = octave;
    74c8:	4b8a      	ldr	r3, [pc, #552]	; (76f4 <audioTickString2+0x7b4>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    74ca:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    74ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    74d2:	fe80 0a69 	vminnm.f32	s0, s0, s19
				stringOctave[i] = octave;
    74d6:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    74da:	fe80 0a28 	vmaxnm.f32	s0, s0, s17
    74de:	f004 fcdb 	bl	be98 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    74e2:	4650      	mov	r0, sl
    74e4:	f004 fe34 	bl	c150 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74e8:	ee07 9a90 	vmov	s15, r9
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    74ec:	ed96 0a02 	vldr	s0, [r6, #8]
    74f0:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74f2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    74f6:	ee60 0a88 	vmul.f32	s1, s1, s16
    74fa:	f004 fe39 	bl	c170 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    74fe:	9b02      	ldr	r3, [sp, #8]
    7500:	781a      	ldrb	r2, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
    7502:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7506:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    750a:	b29b      	uxth	r3, r3
    750c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7510:	3401      	adds	r4, #1
    7512:	42a2      	cmp	r2, r4
    7514:	dcc2      	bgt.n	749c <audioTickString2+0x55c>
		newPluck = 0;
    7516:	2300      	movs	r3, #0
	for (int i = 0; i < numStringsThisBoard; i++)
    7518:	ed9f aa70 	vldr	s20, [pc, #448]	; 76dc <audioTickString2+0x79c>
		newPluck = 0;
    751c:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    7520:	2a00      	cmp	r2, #0
    7522:	f47f ad33 	bne.w	6f8c <audioTickString2+0x4c>
    7526:	4f74      	ldr	r7, [pc, #464]	; (76f8 <audioTickString2+0x7b8>)
    7528:	e6bc      	b.n	72a4 <audioTickString2+0x364>
				tTString_setInharmonic(&strings[i], 0);
    752a:	4648      	mov	r0, r9
    752c:	f004 fe90 	bl	c250 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    7530:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    7534:	4648      	mov	r0, r9
    7536:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    753a:	f004 fbd9 	bl	bcf0 <__tTString_setHarmonic_veneer>
    753e:	e56d      	b.n	701c <audioTickString2+0xdc>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    7540:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7544:	b29b      	uxth	r3, r3
    7546:	2b00      	cmp	r3, #0
    7548:	d0db      	beq.n	7502 <audioTickString2+0x5c2>
    754a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    754e:	b29b      	uxth	r3, r3
    7550:	2b00      	cmp	r3, #0
    7552:	d1d6      	bne.n	7502 <audioTickString2+0x5c2>
				tTString_mute(&strings[i]);
    7554:	4650      	mov	r0, sl
    7556:	f004 fd93 	bl	c080 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    755a:	9b02      	ldr	r3, [sp, #8]
    755c:	781a      	ldrb	r2, [r3, #0]
    755e:	e7d0      	b.n	7502 <audioTickString2+0x5c2>
					oneMinusAlpha = 1.0f - alpha;
    7560:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7564:	eeb0 1a60 	vmov.f32	s2, s1
    7568:	eeb0 0a48 	vmov.f32	s0, s16
    756c:	eef0 0a47 	vmov.f32	s1, s14
    7570:	f004 fc52 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7574:	eef1 ea00 	vmov.f32	s29, #16	; 0x40800000  4.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7578:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    757c:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
					oneMinusAlpha = 1.0f - alpha;
    7580:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7584:	2303      	movs	r3, #3
    7586:	e5b6      	b.n	70f6 <audioTickString2+0x1b6>
					oneMinusAlpha = 1.0f - alpha;
    7588:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    758c:	eeb0 1a47 	vmov.f32	s2, s14
    7590:	eeb0 0a48 	vmov.f32	s0, s16
    7594:	f004 fc40 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7598:	eef0 ea08 	vmov.f32	s29, #8	; 0x40400000  3.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    759c:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    75a0:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
					oneMinusAlpha = 1.0f - alpha;
    75a4:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    75a8:	2302      	movs	r3, #2
    75aa:	e597      	b.n	70dc <audioTickString2+0x19c>
					oneMinusAlpha = 1.0f - alpha;
    75ac:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75b0:	eeb0 1a47 	vmov.f32	s2, s14
    75b4:	eeb0 0a48 	vmov.f32	s0, s16
    75b8:	f004 fc2e 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    75bc:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75c0:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    75c4:	ee3f fa40 	vsub.f32	s30, s30, s0
    75c8:	e570      	b.n	70ac <audioTickString2+0x16c>
    75ca:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75ce:	eeb0 1a60 	vmov.f32	s2, s1
    75d2:	eeb0 0a48 	vmov.f32	s0, s16
    75d6:	eef0 0a47 	vmov.f32	s1, s14
    75da:	f004 fc1d 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    75de:	eef0 ea00 	vmov.f32	s29, #0	; 0x40000000  2.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75e2:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    75e6:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
					oneMinusAlpha = 1.0f - alpha;
    75ea:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    75ee:	2301      	movs	r3, #1
    75f0:	e567      	b.n	70c2 <audioTickString2+0x182>
					oneMinusAlpha = 1.0f - alpha;
    75f2:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75f6:	eeb0 0a48 	vmov.f32	s0, s16
    75fa:	f004 fc0d 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    75fe:	eef2 ea02 	vmov.f32	s29, #34	; 0x41100000  9.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7602:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    7606:	2308      	movs	r3, #8
					oneMinusAlpha = 1.0f - alpha;
    7608:	ee3f fa40 	vsub.f32	s30, s30, s0
    760c:	e5b7      	b.n	717e <audioTickString2+0x23e>
    760e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7612:	eeb0 1a60 	vmov.f32	s2, s1
    7616:	eeb0 0a48 	vmov.f32	s0, s16
    761a:	eef0 0a47 	vmov.f32	s1, s14
    761e:	f004 fbfb 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7622:	eef2 ea00 	vmov.f32	s29, #32	; 0x41000000  8.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7626:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    762a:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
					oneMinusAlpha = 1.0f - alpha;
    762e:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7632:	2307      	movs	r3, #7
    7634:	e593      	b.n	715e <audioTickString2+0x21e>
					oneMinusAlpha = 1.0f - alpha;
    7636:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    763a:	eeb0 1a47 	vmov.f32	s2, s14
    763e:	eeb0 0a48 	vmov.f32	s0, s16
    7642:	f004 fbe9 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7646:	eef1 ea0c 	vmov.f32	s29, #28	; 0x40e00000  7.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    764a:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    764e:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
					oneMinusAlpha = 1.0f - alpha;
    7652:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7656:	2306      	movs	r3, #6
    7658:	e574      	b.n	7144 <audioTickString2+0x204>
					oneMinusAlpha = 1.0f - alpha;
    765a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    765e:	eeb0 1a60 	vmov.f32	s2, s1
    7662:	eeb0 0a48 	vmov.f32	s0, s16
    7666:	eef0 0a47 	vmov.f32	s1, s14
    766a:	f004 fbd5 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    766e:	eef1 ea08 	vmov.f32	s29, #24	; 0x40c00000  6.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7672:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    7676:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
					oneMinusAlpha = 1.0f - alpha;
    767a:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    767e:	2305      	movs	r3, #5
    7680:	e553      	b.n	712a <audioTickString2+0x1ea>
					oneMinusAlpha = 1.0f - alpha;
    7682:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7686:	eeb0 1a47 	vmov.f32	s2, s14
    768a:	eeb0 0a48 	vmov.f32	s0, s16
    768e:	f004 fbc3 	bl	be18 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7692:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7696:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    769a:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
					oneMinusAlpha = 1.0f - alpha;
    769e:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    76a2:	2304      	movs	r3, #4
    76a4:	e534      	b.n	7110 <audioTickString2+0x1d0>
		newPluck = 0;
    76a6:	ed9f aa0d 	vldr	s20, [pc, #52]	; 76dc <audioTickString2+0x79c>
    76aa:	4f13      	ldr	r7, [pc, #76]	; (76f8 <audioTickString2+0x7b8>)
    76ac:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    76b0:	e5f8      	b.n	72a4 <audioTickString2+0x364>
    76b2:	bf00      	nop
    76b4:	200051d0 	.word	0x200051d0
    76b8:	3727c5ac 	.word	0x3727c5ac
    76bc:	20000688 	.word	0x20000688
    76c0:	38d1b717 	.word	0x38d1b717
    76c4:	42980000 	.word	0x42980000
    76c8:	3d4ccccd 	.word	0x3d4ccccd
    76cc:	3c23d70a 	.word	0x3c23d70a
    76d0:	322bcc77 	.word	0x322bcc77
    76d4:	20000694 	.word	0x20000694
    76d8:	42fe0000 	.word	0x42fe0000
    76dc:	00000000 	.word	0x00000000
    76e0:	37800080 	.word	0x37800080
    76e4:	20005364 	.word	0x20005364
    76e8:	20014210 	.word	0x20014210
    76ec:	20014228 	.word	0x20014228
    76f0:	20005300 	.word	0x20005300
    76f4:	20014230 	.word	0x20014230
    76f8:	2001cbd8 	.word	0x2001cbd8
    76fc:	2001cbd0 	.word	0x2001cbd0

00007700 <audioFrameString2>:
{
    7700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7704:	4b57      	ldr	r3, [pc, #348]	; (7864 <audioFrameString2+0x164>)
{
    7706:	4680      	mov	r8, r0
		if (resetStringInputs)
    7708:	f8df b188 	ldr.w	fp, [pc, #392]	; 7894 <audioFrameString2+0x194>
			for (int i = 0; i < numStringsThisBoard; i++)
    770c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 7898 <audioFrameString2+0x198>
{
    7710:	ed2d 8b04 	vpush	{d8-d9}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7714:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    7716:	f89b 3000 	ldrb.w	r3, [fp]
    771a:	2b00      	cmp	r3, #0
    771c:	f040 8081 	bne.w	7822 <audioFrameString2+0x122>
			for (int i = 0; i < numStringsThisBoard; i++)
    7720:	f899 3000 	ldrb.w	r3, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    7724:	2b00      	cmp	r3, #0
    7726:	d051      	beq.n	77cc <audioFrameString2+0xcc>
    7728:	4c4f      	ldr	r4, [pc, #316]	; (7868 <audioFrameString2+0x168>)
    772a:	2700      	movs	r7, #0
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    772c:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 786c <audioFrameString2+0x16c>
    7730:	ed9f 9a4f 	vldr	s18, [pc, #316]	; 7870 <audioFrameString2+0x170>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    7734:	eddf 8a4f 	vldr	s17, [pc, #316]	; 7874 <audioFrameString2+0x174>
    7738:	4d4f      	ldr	r5, [pc, #316]	; (7878 <audioFrameString2+0x178>)
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    773a:	4620      	mov	r0, r4
    773c:	ed95 0a03 	vldr	s0, [r5, #12]
    7740:	f004 fd12 	bl	c168 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    7744:	4620      	mov	r0, r4
    7746:	ed95 0a04 	vldr	s0, [r5, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    774a:	3701      	adds	r7, #1
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    774c:	f004 fd18 	bl	c180 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    7750:	eeb0 0a49 	vmov.f32	s0, s18
    7754:	edd5 7a08 	vldr	s15, [r5, #32]
    7758:	4620      	mov	r0, r4
    775a:	eea7 0a88 	vfma.f32	s0, s15, s16
    775e:	f004 fb93 	bl	be88 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    7762:	4620      	mov	r0, r4
    7764:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    7768:	f004 fa8a 	bl	bc80 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    776c:	4620      	mov	r0, r4
    776e:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    7772:	f004 fb01 	bl	bd78 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    7776:	4620      	mov	r0, r4
    7778:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    777c:	f004 fc3c 	bl	bff8 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    7780:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7784:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    7788:	4620      	mov	r0, r4
    778a:	ee30 0a27 	vadd.f32	s0, s0, s15
    778e:	f004 faff 	bl	bd90 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    7792:	eeb0 0a68 	vmov.f32	s0, s17
    7796:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    779a:	4620      	mov	r0, r4
    779c:	eea7 0a88 	vfma.f32	s0, s15, s16
    77a0:	f004 fbe6 	bl	bf70 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    77a4:	4620      	mov	r0, r4
    77a6:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    77aa:	f004 fca1 	bl	c0f0 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    77ae:	4620      	mov	r0, r4
    77b0:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    77b4:	f004 fc94 	bl	c0e0 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    77b8:	4620      	mov	r0, r4
    77ba:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
		for (int i = 0; i < numStringsThisBoard; i++)
    77be:	3404      	adds	r4, #4
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    77c0:	f004 fae2 	bl	bd88 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    77c4:	f899 3000 	ldrb.w	r3, [r9]
    77c8:	42bb      	cmp	r3, r7
    77ca:	dcb6      	bgt.n	773a <audioFrameString2+0x3a>
    77cc:	4c2b      	ldr	r4, [pc, #172]	; (787c <audioFrameString2+0x17c>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    77ce:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 7880 <audioFrameString2+0x180>
    77d2:	f504 7500 	add.w	r5, r4, #512	; 0x200
    77d6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    77da:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    77de:	f7ff fbaf 	bl	6f40 <audioTickString2>
    77e2:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    77e6:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    77e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    77ec:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    77ee:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    77f2:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    77f6:	d1f2      	bne.n	77de <audioFrameString2+0xde>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    77f8:	4b1a      	ldr	r3, [pc, #104]	; (7864 <audioFrameString2+0x164>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    77fa:	4822      	ldr	r0, [pc, #136]	; (7884 <audioFrameString2+0x184>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    77fc:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    77fe:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7802:	1b9b      	subs	r3, r3, r6
    7804:	4920      	ldr	r1, [pc, #128]	; (7888 <audioFrameString2+0x188>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7806:	4a21      	ldr	r2, [pc, #132]	; (788c <audioFrameString2+0x18c>)
    7808:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    780c:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7812:	ee67 7a87 	vmul.f32	s15, s15, s14
    7816:	edc2 7a00 	vstr	s15, [r2]
}
    781a:	ecbd 8b04 	vpop	{d8-d9}
    781e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int i = 0; i < numStringsThisBoard; i++)
    7822:	f899 3000 	ldrb.w	r3, [r9]
    7826:	b1bb      	cbz	r3, 7858 <audioFrameString2+0x158>
    7828:	2400      	movs	r4, #0
    782a:	4d0f      	ldr	r5, [pc, #60]	; (7868 <audioFrameString2+0x168>)
    782c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 789c <audioFrameString2+0x19c>
				previousStringInputs[i] = 0;
    7830:	4627      	mov	r7, r4
				tTString_mute(&strings[i]);
    7832:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    7834:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    7836:	f004 fc23 	bl	c080 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    783a:	f899 3000 	ldrb.w	r3, [r9]
				previousStringInputs[i] = 0;
    783e:	f82a 7014 	strh.w	r7, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    7842:	3401      	adds	r4, #1
				previousStringInputs[i] = 0;
    7844:	f04f 0200 	mov.w	r2, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    7848:	42a3      	cmp	r3, r4
    784a:	dcf2      	bgt.n	7832 <audioFrameString2+0x132>
			resetStringInputs = 0;
    784c:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    7850:	2101      	movs	r1, #1
    7852:	4a0f      	ldr	r2, [pc, #60]	; (7890 <audioFrameString2+0x190>)
    7854:	6011      	str	r1, [r2, #0]
    7856:	e765      	b.n	7724 <audioFrameString2+0x24>
			resetStringInputs = 0;
    7858:	f88b 3000 	strb.w	r3, [fp]
			newPluck = 1;
    785c:	2301      	movs	r3, #1
    785e:	4a0c      	ldr	r2, [pc, #48]	; (7890 <audioFrameString2+0x190>)
    7860:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    7862:	e7b3      	b.n	77cc <audioFrameString2+0xcc>
    7864:	e0001000 	.word	0xe0001000
    7868:	2001cbd0 	.word	0x2001cbd0
    786c:	45bb8000 	.word	0x45bb8000
    7870:	447a0000 	.word	0x447a0000
    7874:	42700000 	.word	0x42700000
    7878:	200051f4 	.word	0x200051f4
    787c:	30000000 	.word	0x30000000
    7880:	4b000000 	.word	0x4b000000
    7884:	20000684 	.word	0x20000684
    7888:	20014250 	.word	0x20014250
    788c:	200051d8 	.word	0x200051d8
    7890:	200052f4 	.word	0x200052f4
    7894:	2000577c 	.word	0x2000577c
    7898:	20000694 	.word	0x20000694
    789c:	20005364 	.word	0x20005364

000078a0 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    78a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    78a2:	4e08      	ldr	r6, [pc, #32]	; (78c4 <audioInitString3+0x24>)
    78a4:	7833      	ldrb	r3, [r6, #0]
    78a6:	b163      	cbz	r3, 78c2 <audioInitString3+0x22>
    78a8:	4d07      	ldr	r5, [pc, #28]	; (78c8 <audioInitString3+0x28>)
    78aa:	2400      	movs	r4, #0
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    78ac:	4f07      	ldr	r7, [pc, #28]	; (78cc <audioInitString3+0x2c>)
    78ae:	4628      	mov	r0, r5
    78b0:	463a      	mov	r2, r7
    78b2:	2146      	movs	r1, #70	; 0x46
	for (int v = 0; v < numStringsThisBoard; v++)
    78b4:	3401      	adds	r4, #1
		tStiffString_init(&stringsC[v], 70, &leaf);
    78b6:	f004 fc03 	bl	c0c0 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    78ba:	7833      	ldrb	r3, [r6, #0]
    78bc:	3504      	adds	r5, #4
    78be:	42a3      	cmp	r3, r4
    78c0:	dcf5      	bgt.n	78ae <audioInitString3+0xe>
	}
}
    78c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78c4:	20000694 	.word	0x20000694
    78c8:	2001cc04 	.word	0x2001cc04
    78cc:	20005298 	.word	0x20005298
    78d0:	f3af 8000 	nop.w
    78d4:	f3af 8000 	nop.w
    78d8:	f3af 8000 	nop.w
    78dc:	f3af 8000 	nop.w

000078e0 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    78e0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    78e2:	4e07      	ldr	r6, [pc, #28]	; (7900 <audioFreeString3+0x20>)
    78e4:	7833      	ldrb	r3, [r6, #0]
    78e6:	b14b      	cbz	r3, 78fc <audioFreeString3+0x1c>
    78e8:	4d06      	ldr	r5, [pc, #24]	; (7904 <audioFreeString3+0x24>)
    78ea:	2400      	movs	r4, #0
	{
		tStiffString_free(&stringsC[v]);
    78ec:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    78ee:	3401      	adds	r4, #1
		tStiffString_free(&stringsC[v]);
    78f0:	f004 fca2 	bl	c238 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    78f4:	7833      	ldrb	r3, [r6, #0]
    78f6:	3504      	adds	r5, #4
    78f8:	42a3      	cmp	r3, r4
    78fa:	dcf7      	bgt.n	78ec <audioFreeString3+0xc>
	}
}
    78fc:	bd70      	pop	{r4, r5, r6, pc}
    78fe:	bf00      	nop
    7900:	20000694 	.word	0x20000694
    7904:	2001cc04 	.word	0x2001cc04
    7908:	f3af 8000 	nop.w
    790c:	f3af 8000 	nop.w
    7910:	f3af 8000 	nop.w
    7914:	f3af 8000 	nop.w
    7918:	f3af 8000 	nop.w
    791c:	f3af 8000 	nop.w

00007920 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    7920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7924:	4c1a      	ldr	r4, [pc, #104]	; (7990 <audioSwitchToString3+0x70>)
	for (int i = 0; i < 12; i++)
    7926:	2500      	movs	r5, #0
    7928:	4f1a      	ldr	r7, [pc, #104]	; (7994 <audioSwitchToString3+0x74>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    792a:	f04f 0901 	mov.w	r9, #1
    792e:	4e1a      	ldr	r6, [pc, #104]	; (7998 <audioSwitchToString3+0x78>)
    7930:	f8df 806c 	ldr.w	r8, [pc, #108]	; 79a0 <audioSwitchToString3+0x80>
    7934:	f8df a06c 	ldr.w	sl, [pc, #108]	; 79a4 <audioSwitchToString3+0x84>
{
    7938:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    793c:	ed9f 8a17 	vldr	s16, [pc, #92]	; 799c <audioSwitchToString3+0x7c>
    7940:	4620      	mov	r0, r4
    7942:	eeb0 0a48 	vmov.f32	s0, s16
    7946:	f004 fb67 	bl	c018 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    794a:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    794e:	4620      	mov	r0, r4
		if (voice == 59)
    7950:	2b3b      	cmp	r3, #59	; 0x3b
    7952:	d00e      	beq.n	7972 <audioSwitchToString3+0x52>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    7954:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    7958:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    795a:	f004 fb31 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    795e:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    7962:	3501      	adds	r5, #1
    7964:	3704      	adds	r7, #4
    7966:	2d0c      	cmp	r5, #12
    7968:	d1ea      	bne.n	7940 <audioSwitchToString3+0x20>
	}
}
    796a:	ecbd 8b02 	vpop	{d8}
    796e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    7972:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    7976:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    7978:	f004 fb22 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    797c:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    7980:	3501      	adds	r5, #1
    7982:	3604      	adds	r6, #4
    7984:	2d0c      	cmp	r5, #12
    7986:	d1db      	bne.n	7940 <audioSwitchToString3+0x20>
}
    7988:	ecbd 8b02 	vpop	{d8}
    798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7990:	20005244 	.word	0x20005244
    7994:	200008a0 	.word	0x200008a0
    7998:	20018544 	.word	0x20018544
    799c:	3a83126f 	.word	0x3a83126f
    79a0:	2001425c 	.word	0x2001425c
    79a4:	200051e0 	.word	0x200051e0
    79a8:	f3af 8000 	nop.w
    79ac:	f3af 8000 	nop.w
    79b0:	f3af 8000 	nop.w
    79b4:	f3af 8000 	nop.w
    79b8:	f3af 8000 	nop.w
    79bc:	f3af 8000 	nop.w

000079c0 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    79c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    79c4:	485d      	ldr	r0, [pc, #372]	; (7b3c <audioTickString3+0x17c>)
    79c6:	4c5e      	ldr	r4, [pc, #376]	; (7b40 <audioTickString3+0x180>)
    79c8:	4d5e      	ldr	r5, [pc, #376]	; (7b44 <audioTickString3+0x184>)
    79ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
{
    79ce:	ed2d 8b06 	vpush	{d8-d10}
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    79d2:	f004 fc25 	bl	c220 <__tExpSmooth_tick_veneer>
    79d6:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    79da:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    79dc:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    79de:	f004 fc1f 	bl	c220 <__tExpSmooth_tick_veneer>
    79e2:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    79e6:	42a6      	cmp	r6, r4
    79e8:	d1f7      	bne.n	79da <audioTickString3+0x1a>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    79ea:	4f57      	ldr	r7, [pc, #348]	; (7b48 <audioTickString3+0x188>)
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    79ec:	4e57      	ldr	r6, [pc, #348]	; (7b4c <audioTickString3+0x18c>)
	if (newPluck)
    79ee:	683b      	ldr	r3, [r7, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    79f0:	7832      	ldrb	r2, [r6, #0]
	if (newPluck)
    79f2:	2b00      	cmp	r3, #0
    79f4:	d049      	beq.n	7a8a <audioTickString3+0xca>
		for (int i = 0; i < numStringsThisBoard; i++)
    79f6:	2a00      	cmp	r2, #0
    79f8:	f000 8099 	beq.w	7b2e <audioTickString3+0x16e>
    79fc:	f8df 916c 	ldr.w	r9, [pc, #364]	; 7b6c <audioTickString3+0x1ac>
    7a00:	2400      	movs	r4, #0
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    7a02:	ed9f aa53 	vldr	s20, [pc, #332]	; 7b50 <audioTickString3+0x190>
    7a06:	eddf 9a53 	vldr	s19, [pc, #332]	; 7b54 <audioTickString3+0x194>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    7a0a:	ed9f 9a53 	vldr	s18, [pc, #332]	; 7b58 <audioTickString3+0x198>
    7a0e:	4d53      	ldr	r5, [pc, #332]	; (7b5c <audioTickString3+0x19c>)
    7a10:	f8df 8178 	ldr.w	r8, [pc, #376]	; 7b8c <audioTickString3+0x1cc>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    7a14:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7a18:	b29b      	uxth	r3, r3
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d178      	bne.n	7b10 <audioTickString3+0x150>
    7a1e:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    7a22:	b29b      	uxth	r3, r3
    7a24:	2b00      	cmp	r3, #0
    7a26:	d073      	beq.n	7b10 <audioTickString3+0x150>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    7a28:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    7a2c:	b29b      	uxth	r3, r3
    7a2e:	ee08 3a10 	vmov	s16, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7a32:	4b4b      	ldr	r3, [pc, #300]	; (7b60 <audioTickString3+0x1a0>)
    7a34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7a38:	ed93 0a00 	vldr	s0, [r3]
				stringOctave[i] = octave;
    7a3c:	4b49      	ldr	r3, [pc, #292]	; (7b64 <audioTickString3+0x1a4>)
    7a3e:	edd3 7a00 	vldr	s15, [r3]
    7a42:	4b49      	ldr	r3, [pc, #292]	; (7b68 <audioTickString3+0x1a8>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7a44:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    7a48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    7a4c:	fe80 0a4a 	vminnm.f32	s0, s0, s20
				stringOctave[i] = octave;
    7a50:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    7a54:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    7a58:	f004 fa1e 	bl	be98 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    7a5c:	4648      	mov	r0, r9
    7a5e:	f004 fa1f 	bl	bea0 <__tStiffString_setFreq_veneer>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    7a62:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tStiffString_pluck(&stringsC[i], str3Amp);
    7a66:	4648      	mov	r0, r9
    7a68:	ee20 0a09 	vmul.f32	s0, s0, s18
    7a6c:	f004 f93c 	bl	bce8 <__tStiffString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7a70:	7832      	ldrb	r2, [r6, #0]
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    7a72:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7a76:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    7a7a:	b29b      	uxth	r3, r3
    7a7c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7a80:	3401      	adds	r4, #1
    7a82:	42a2      	cmp	r2, r4
    7a84:	dcc6      	bgt.n	7a14 <audioTickString3+0x54>
		}
		newPluck = 0;
    7a86:	2300      	movs	r3, #0
    7a88:	603b      	str	r3, [r7, #0]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    7a8a:	2a00      	cmp	r2, #0
    7a8c:	d053      	beq.n	7b36 <audioTickString3+0x176>
	{

		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a8e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    7a92:	4d36      	ldr	r5, [pc, #216]	; (7b6c <audioTickString3+0x1ac>)
	for (int i = 0; i < numStringsThisBoard; i++)
    7a94:	2400      	movs	r4, #0
    7a96:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 7b54 <audioTickString3+0x194>
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a9a:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    7a9c:	3401      	adds	r4, #1
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a9e:	f004 f9bf 	bl	be20 <__tStiffString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    7aa2:	7833      	ldrb	r3, [r6, #0]
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7aa4:	eea0 8a09 	vfma.f32	s16, s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    7aa8:	3504      	adds	r5, #4
    7aaa:	42a3      	cmp	r3, r4
    7aac:	dcf5      	bgt.n	7a9a <audioTickString3+0xda>
	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7aae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 7b70 <audioTickString3+0x1b0>
    7ab2:	ee68 6aa8 	vmul.f32	s13, s17, s17
    7ab6:	eddf 7a2f 	vldr	s15, [pc, #188]	; 7b74 <audioTickString3+0x1b4>
    7aba:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 7b78 <audioTickString3+0x1b8>
    7abe:	eee8 7a87 	vfma.f32	s15, s17, s14
    7ac2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 7b7c <audioTickString3+0x1bc>
    7ac6:	ee26 7aa8 	vmul.f32	s14, s13, s17
    7aca:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 7b80 <audioTickString3+0x1c0>

	temp *= outVol * masterVolFromBrain;
    7ace:	4b2d      	ldr	r3, [pc, #180]	; (7b84 <audioTickString3+0x1c4>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7ad0:	ee68 8a86 	vmul.f32	s17, s17, s12
	temp *= outVol * masterVolFromBrain;
    7ad4:	ed93 6a00 	vldr	s12, [r3]
    7ad8:	eee7 7a05 	vfma.f32	s15, s14, s10
    7adc:	eee6 7ae5 	vfms.f32	s15, s13, s11
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7ae0:	eee7 7a68 	vfms.f32	s15, s14, s17
	temp *= outVol * masterVolFromBrain;
    7ae4:	ee27 0a86 	vmul.f32	s0, s15, s12
	temp = tanhf(temp);
    7ae8:	ee20 0a08 	vmul.f32	s0, s0, s16
    7aec:	f004 fbc0 	bl	c270 <__tanhf_veneer>
    7af0:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7af4:	eddf 7a24 	vldr	s15, [pc, #144]	; 7b88 <audioTickString3+0x1c8>
    7af8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    7afc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    7b00:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    7b04:	ecbd 8b06 	vpop	{d8-d10}
    7b08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7b0c:	f004 ba6c 	b.w	bfe8 <__LEAF_clip_veneer>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    7b10:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7b14:	b29b      	uxth	r3, r3
    7b16:	2b00      	cmp	r3, #0
    7b18:	d0ab      	beq.n	7a72 <audioTickString3+0xb2>
    7b1a:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    7b1e:	b29b      	uxth	r3, r3
    7b20:	2b00      	cmp	r3, #0
    7b22:	d1a6      	bne.n	7a72 <audioTickString3+0xb2>
				tStiffString_mute(&stringsC[i]);
    7b24:	4648      	mov	r0, r9
    7b26:	f004 fb37 	bl	c198 <__tStiffString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7b2a:	7832      	ldrb	r2, [r6, #0]
    7b2c:	e7a1      	b.n	7a72 <audioTickString3+0xb2>
		newPluck = 0;
    7b2e:	ed9f 8a09 	vldr	s16, [pc, #36]	; 7b54 <audioTickString3+0x194>
    7b32:	603a      	str	r2, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    7b34:	e7bb      	b.n	7aae <audioTickString3+0xee>
    7b36:	ed9f 8a07 	vldr	s16, [pc, #28]	; 7b54 <audioTickString3+0x194>
    7b3a:	e7b8      	b.n	7aae <audioTickString3+0xee>
    7b3c:	20014268 	.word	0x20014268
    7b40:	200051f4 	.word	0x200051f4
    7b44:	20005244 	.word	0x20005244
    7b48:	200052f4 	.word	0x200052f4
    7b4c:	20000694 	.word	0x20000694
    7b50:	42fe0000 	.word	0x42fe0000
    7b54:	00000000 	.word	0x00000000
    7b58:	37800080 	.word	0x37800080
    7b5c:	20005364 	.word	0x20005364
    7b60:	20014228 	.word	0x20014228
    7b64:	20005300 	.word	0x20005300
    7b68:	20014230 	.word	0x20014230
    7b6c:	2001cc04 	.word	0x2001cc04
    7b70:	3ef1ac0b 	.word	0x3ef1ac0b
    7b74:	3bdc4213 	.word	0x3bdc4213
    7b78:	40caa285 	.word	0x40caa285
    7b7c:	4022be0a 	.word	0x4022be0a
    7b80:	40516313 	.word	0x40516313
    7b84:	2000068c 	.word	0x2000068c
    7b88:	3f7ae148 	.word	0x3f7ae148
    7b8c:	20014210 	.word	0x20014210
    7b90:	f3af 8000 	nop.w
    7b94:	f3af 8000 	nop.w
    7b98:	f3af 8000 	nop.w
    7b9c:	f3af 8000 	nop.w

00007ba0 <audioFrameString3>:
		uint32_t tempCountFrame = DWT->CYCCNT;
    7ba0:	4bc6      	ldr	r3, [pc, #792]	; (7ebc <audioFrameString3+0x31c>)
{
    7ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (resetStringInputs)
    7ba6:	4cc6      	ldr	r4, [pc, #792]	; (7ec0 <audioFrameString3+0x320>)
{
    7ba8:	ed2d 8b08 	vpush	{d8-d11}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7bac:	685b      	ldr	r3, [r3, #4]
{
    7bae:	b08b      	sub	sp, #44	; 0x2c
		uint32_t tempCountFrame = DWT->CYCCNT;
    7bb0:	9304      	str	r3, [sp, #16]
		if (resetStringInputs)
    7bb2:	7823      	ldrb	r3, [r4, #0]
{
    7bb4:	9005      	str	r0, [sp, #20]
		if (resetStringInputs)
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	f040 8152 	bne.w	7e60 <audioFrameString3+0x2c0>
			for (int i = 0; i < numStringsThisBoard; i++)
    7bbc:	4bc1      	ldr	r3, [pc, #772]	; (7ec4 <audioFrameString3+0x324>)
    7bbe:	9303      	str	r3, [sp, #12]
    7bc0:	781b      	ldrb	r3, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	f000 8118 	beq.w	7df8 <audioFrameString3+0x258>
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7bc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7bcc:	4bbe      	ldr	r3, [pc, #760]	; (7ec8 <audioFrameString3+0x328>)
    7bce:	f8df b35c 	ldr.w	fp, [pc, #860]	; 7f2c <audioFrameString3+0x38c>
		for (int i = 0; i < numStringsThisBoard; i++)
    7bd2:	2400      	movs	r4, #0
    7bd4:	4ebd      	ldr	r6, [pc, #756]	; (7ecc <audioFrameString3+0x32c>)
    7bd6:	eddf aabe 	vldr	s21, [pc, #760]	; 7ed0 <audioFrameString3+0x330>
    7bda:	eddf 9abe 	vldr	s19, [pc, #760]	; 7ed4 <audioFrameString3+0x334>
			float newStiffness = (knobScaled[0] * 100.0f);
    7bde:	ed9f aabe 	vldr	s20, [pc, #760]	; 7ed8 <audioFrameString3+0x338>
				float squishedStiffness = (newStiffness*0.01f) ;
    7be2:	ed9f babe 	vldr	s22, [pc, #760]	; 7edc <audioFrameString3+0x33c>
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7be6:	ed9f 9abe 	vldr	s18, [pc, #760]	; 7ee0 <audioFrameString3+0x340>
    7bea:	4fbe      	ldr	r7, [pc, #760]	; (7ee4 <audioFrameString3+0x344>)
    7bec:	f8df 9340 	ldr.w	r9, [pc, #832]	; 7f30 <audioFrameString3+0x390>
    7bf0:	4dbd      	ldr	r5, [pc, #756]	; (7ee8 <audioFrameString3+0x348>)
    7bf2:	f8df 8340 	ldr.w	r8, [pc, #832]	; 7f34 <audioFrameString3+0x394>
    7bf6:	f8df a340 	ldr.w	sl, [pc, #832]	; 7f38 <audioFrameString3+0x398>
    7bfa:	9301      	str	r3, [sp, #4]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7bfc:	4bbb      	ldr	r3, [pc, #748]	; (7eec <audioFrameString3+0x34c>)
    7bfe:	ecfb 7a01 	vldmia	fp!, {s15}
    7c02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7c06:	ed93 8a00 	vldr	s16, [r3]
    7c0a:	ee38 8a27 	vadd.f32	s16, s16, s15
    7c0e:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    7c12:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
			float finalFreq = mtofTableLookup(theNote[i]);
    7c16:	eeb0 0a48 	vmov.f32	s0, s16
    7c1a:	f004 f93d 	bl	be98 <__mtofTableLookup_veneer>
    7c1e:	4bb4      	ldr	r3, [pc, #720]	; (7ef0 <audioFrameString3+0x350>)
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7c20:	00a0      	lsls	r0, r4, #2
			float finalFreq = mtofTableLookup(theNote[i]);
    7c22:	eef0 ba40 	vmov.f32	s23, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    7c26:	4418      	add	r0, r3
    7c28:	9002      	str	r0, [sp, #8]
    7c2a:	f004 fa25 	bl	c078 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    7c2e:	9b01      	ldr	r3, [sp, #4]
    7c30:	ecb3 0a01 	vldmia	r3!, {s0}
    7c34:	ee38 0a40 	vsub.f32	s0, s16, s0
    7c38:	9301      	str	r3, [sp, #4]
    7c3a:	f004 f92d 	bl	be98 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    7c3e:	ee8b 6a80 	vdiv.f32	s12, s23, s0
			float newStiffness = (knobScaled[0] * 100.0f);
    7c42:	ed9a 8a00 	vldr	s16, [sl]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7c46:	edd5 7a00 	vldr	s15, [r5]
    7c4a:	9802      	ldr	r0, [sp, #8]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    7c4c:	eec0 6a2b 	vdiv.f32	s13, s0, s23
			float newStiffness = (knobScaled[0] * 100.0f);
    7c50:	ee28 8a0a 	vmul.f32	s16, s16, s20
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7c54:	ee37 7aa8 	vadd.f32	s14, s15, s17
    7c58:	eeb4 7ac8 	vcmpe.f32	s14, s16
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    7c5c:	ed8d 6a06 	vstr	s12, [sp, #24]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    7c64:	edcd 6a07 	vstr	s13, [sp, #28]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7c68:	d406      	bmi.n	7c78 <audioFrameString3+0xd8>
    7c6a:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7c6e:	eef4 7ac8 	vcmpe.f32	s15, s16
    7c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c76:	dd0b      	ble.n	7c90 <audioFrameString3+0xf0>
				float squishedStiffness = (newStiffness*0.01f) ;
    7c78:	ee68 ba0b 	vmul.f32	s23, s16, s22
				if ( squishedStiffness != prevSquishedStiffness[i])
    7c7c:	edd8 7a00 	vldr	s15, [r8]
    7c80:	eef4 7a6b 	vcmp.f32	s15, s23
    7c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c88:	f040 8165 	bne.w	7f56 <audioFrameString3+0x3b6>
				prevStiffness[i] = newStiffness;
    7c8c:	ed85 8a00 	vstr	s16, [r5]
			float newpuPos = (knobScaled[10] * 200.0f);
    7c90:	ed9f 7a98 	vldr	s14, [pc, #608]	; 7ef4 <audioFrameString3+0x354>
    7c94:	ed9a 8a0a 	vldr	s16, [sl, #40]	; 0x28
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    7c98:	edd6 7a00 	vldr	s15, [r6]
			float newpuPos = (knobScaled[10] * 200.0f);
    7c9c:	ee28 8a07 	vmul.f32	s16, s16, s14
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    7ca0:	ee37 7aa8 	vadd.f32	s14, s15, s17
    7ca4:	eeb4 7ac8 	vcmpe.f32	s14, s16
    7ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cac:	d406      	bmi.n	7cbc <audioFrameString3+0x11c>
    7cae:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7cb2:	eef4 7ac8 	vcmpe.f32	s15, s16
    7cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cba:	dd30      	ble.n	7d1e <audioFrameString3+0x17e>
				float squishedPuPos = (newpuPos*0.005f) ;
    7cbc:	eddf ba8e 	vldr	s23, [pc, #568]	; 7ef8 <audioFrameString3+0x358>
				if ( squishedPuPos != prevSquishedPuPos[i])
    7cc0:	edd7 7a00 	vldr	s15, [r7]
				float squishedPuPos = (newpuPos*0.005f) ;
    7cc4:	ee68 ba2b 	vmul.f32	s23, s16, s23
				if ( squishedPuPos != prevSquishedPuPos[i])
    7cc8:	eef4 7a6b 	vcmp.f32	s15, s23
    7ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cd0:	d023      	beq.n	7d1a <audioFrameString3+0x17a>
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7cd2:	ee78 7aeb 	vsub.f32	s15, s17, s23
					if (ratioOfNoteToOpenString < pickupKnobVal)
    7cd6:	ed9d 7a07 	vldr	s14, [sp, #28]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7cda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					finalPuPos[i] = squishedPuPos;
    7cde:	edc9 ba00 	vstr	s23, [r9]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
					if (ratioOfNoteToOpenString < pickupKnobVal)
    7ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cee:	f100 8125 	bmi.w	7f3c <audioFrameString3+0x39c>
					float pickupKnobVal2 = pickupKnobVal;
    7cf2:	eef0 6a67 	vmov.f32	s13, s15
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    7cf6:	ed9a 7a01 	vldr	s14, [sl, #4]
    7cfa:	ed9d 6a06 	vldr	s12, [sp, #24]
    7cfe:	ee38 0ac7 	vsub.f32	s0, s17, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    7d02:	9002      	str	r0, [sp, #8]
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    7d04:	ee20 0a06 	vmul.f32	s0, s0, s12
    7d08:	ee20 0a26 	vmul.f32	s0, s0, s13
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    7d0c:	eea7 0a27 	vfma.f32	s0, s14, s15
    7d10:	f004 f8fa 	bl	bf08 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    7d14:	9802      	ldr	r0, [sp, #8]
    7d16:	edc7 ba00 	vstr	s23, [r7]
				prevPuPos[i] = newpuPos;
    7d1a:	ed86 8a00 	vstr	s16, [r6]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7d1e:	ed9a 7a0b 	vldr	s14, [sl, #44]	; 0x2c
    7d22:	eef0 7a49 	vmov.f32	s15, s18
    7d26:	ed9f 6a75 	vldr	s12, [pc, #468]	; 7efc <audioFrameString3+0x35c>
    7d2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
			if (ratioOfNoteToOpenString < pluckKnobVal)
    7d2e:	eddd 6a07 	vldr	s13, [sp, #28]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7d32:	eee7 7a06 	vfma.f32	s15, s14, s12
			if (ratioOfNoteToOpenString < pluckKnobVal)
    7d36:	eef4 6ae7 	vcmpe.f32	s13, s15
    7d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d3e:	f140 808c 	bpl.w	7e5a <audioFrameString3+0x2ba>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    7d42:	ed9d 7a07 	vldr	s14, [sp, #28]
    7d46:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7d4a:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    7d4e:	eddd 6a07 	vldr	s13, [sp, #28]
    7d52:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    7d56:	ee76 6ac7 	vsub.f32	s13, s13, s14
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7d5a:	ed9a 7a02 	vldr	s14, [sl, #8]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7d5e:	eeb0 0a49 	vmov.f32	s0, s18
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7d62:	ed9d 6a06 	vldr	s12, [sp, #24]
    7d66:	ee78 0ac7 	vsub.f32	s1, s17, s14
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7d6a:	ed9f 1a65 	vldr	s2, [pc, #404]	; 7f00 <audioFrameString3+0x360>
    7d6e:	9002      	str	r0, [sp, #8]
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7d70:	ee60 0a86 	vmul.f32	s1, s1, s12
    7d74:	ee60 0aa6 	vmul.f32	s1, s1, s13
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7d78:	eee7 0a27 	vfma.f32	s1, s14, s15
    7d7c:	f004 f934 	bl	bfe8 <__LEAF_clip_veneer>
    7d80:	9802      	ldr	r0, [sp, #8]
    7d82:	f004 fa49 	bl	c218 <__tStiffString_setPluckPosNoUpdate_veneer>
			float mainDecay = (1.0f - knobScaled[8]);
    7d86:	edda 7a08 	vldr	s15, [sl, #32]
			if (mainDecay < 0.01f)
    7d8a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 7f04 <audioFrameString3+0x364>
			float dampKnob = (1.0f - knobScaled[9]);
    7d8e:	ed9a 8a09 	vldr	s16, [sl, #36]	; 0x24
			if (mainDecay < 0.01f)
    7d92:	eef4 7ac7 	vcmpe.f32	s15, s14
    7d96:	9802      	ldr	r0, [sp, #8]
			float dampKnob = (1.0f - knobScaled[9]);
    7d98:	ee38 8ac8 	vsub.f32	s16, s17, s16
			if (mainDecay < 0.01f)
    7d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7da0:	dc58      	bgt.n	7e54 <audioFrameString3+0x2b4>
			float mainDecay = (1.0f - knobScaled[8]);
    7da2:	ee78 7ae7 	vsub.f32	s15, s17, s15
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    7da6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 7f08 <audioFrameString3+0x368>
    7daa:	ee27 0aa7 	vmul.f32	s0, s15, s15
    7dae:	ee20 0a07 	vmul.f32	s0, s0, s14
    7db2:	ee20 0a27 	vmul.f32	s0, s0, s15
    7db6:	9002      	str	r0, [sp, #8]
    7db8:	f003 ff92 	bl	bce0 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7dbc:	ee28 0a08 	vmul.f32	s0, s16, s16
    7dc0:	eddf 7a52 	vldr	s15, [pc, #328]	; 7f0c <audioFrameString3+0x36c>
    7dc4:	9802      	ldr	r0, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    7dc6:	3401      	adds	r4, #1
    7dc8:	3604      	adds	r6, #4
    7dca:	3704      	adds	r7, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (int i = 0; i < numStringsThisBoard; i++)
    7dd0:	f109 0904 	add.w	r9, r9, #4
    7dd4:	3504      	adds	r5, #4
    7dd6:	f108 0804 	add.w	r8, r8, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7dda:	ee20 0a08 	vmul.f32	s0, s0, s16
    7dde:	f004 f8eb 	bl	bfb8 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    7de2:	9802      	ldr	r0, [sp, #8]
    7de4:	f003 ff88 	bl	bcf8 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    7de8:	9802      	ldr	r0, [sp, #8]
    7dea:	f004 f87d 	bl	bee8 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7dee:	9b03      	ldr	r3, [sp, #12]
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	42a3      	cmp	r3, r4
    7df4:	f73f af02 	bgt.w	7bfc <audioFrameString3+0x5c>
    7df8:	4c45      	ldr	r4, [pc, #276]	; (7f10 <audioFrameString3+0x370>)
    7dfa:	9b05      	ldr	r3, [sp, #20]
    7dfc:	f504 7500 	add.w	r5, r4, #512	; 0x200
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7e00:	ed9f 8a44 	vldr	s16, [pc, #272]	; 7f14 <audioFrameString3+0x374>
    7e04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7e08:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    7e0c:	f7ff fdd8 	bl	79c0 <audioTickString3>
    7e10:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7e14:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7e16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7e1a:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7e1c:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    7e20:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7e24:	d1f2      	bne.n	7e0c <audioFrameString3+0x26c>
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7e26:	483c      	ldr	r0, [pc, #240]	; (7f18 <audioFrameString3+0x378>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7e28:	4b24      	ldr	r3, [pc, #144]	; (7ebc <audioFrameString3+0x31c>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7e2a:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7e2e:	685b      	ldr	r3, [r3, #4]
    7e30:	9804      	ldr	r0, [sp, #16]
    7e32:	493a      	ldr	r1, [pc, #232]	; (7f1c <audioFrameString3+0x37c>)
    7e34:	1a1b      	subs	r3, r3, r0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7e36:	4a3a      	ldr	r2, [pc, #232]	; (7f20 <audioFrameString3+0x380>)
    7e38:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7e3c:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7e42:	ee67 7a87 	vmul.f32	s15, s15, s14
    7e46:	edc2 7a00 	vstr	s15, [r2]
}
    7e4a:	b00b      	add	sp, #44	; 0x2c
    7e4c:	ecbd 8b08 	vpop	{d8-d11}
    7e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e54:	eeb0 0a69 	vmov.f32	s0, s19
    7e58:	e7ad      	b.n	7db6 <audioFrameString3+0x216>
			float pluckKnobVal2 = pluckKnobVal;
    7e5a:	eef0 6a67 	vmov.f32	s13, s15
    7e5e:	e77c      	b.n	7d5a <audioFrameString3+0x1ba>
			for (int i = 0; i < numStringsThisBoard; i++)
    7e60:	4b18      	ldr	r3, [pc, #96]	; (7ec4 <audioFrameString3+0x324>)
    7e62:	9303      	str	r3, [sp, #12]
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	b31b      	cbz	r3, 7eb0 <audioFrameString3+0x310>
				previousStringInputs[i] = 0;
    7e68:	4a2e      	ldr	r2, [pc, #184]	; (7f24 <audioFrameString3+0x384>)
    7e6a:	2100      	movs	r1, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    7e6c:	2b01      	cmp	r3, #1
				previousStringInputs[i] = 0;
    7e6e:	8011      	strh	r1, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e70:	d01e      	beq.n	7eb0 <audioFrameString3+0x310>
    7e72:	2b02      	cmp	r3, #2
				previousStringInputs[i] = 0;
    7e74:	8051      	strh	r1, [r2, #2]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e76:	d01b      	beq.n	7eb0 <audioFrameString3+0x310>
    7e78:	2b03      	cmp	r3, #3
				previousStringInputs[i] = 0;
    7e7a:	8091      	strh	r1, [r2, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e7c:	d018      	beq.n	7eb0 <audioFrameString3+0x310>
    7e7e:	2b04      	cmp	r3, #4
				previousStringInputs[i] = 0;
    7e80:	80d1      	strh	r1, [r2, #6]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e82:	d015      	beq.n	7eb0 <audioFrameString3+0x310>
    7e84:	2b05      	cmp	r3, #5
				previousStringInputs[i] = 0;
    7e86:	8111      	strh	r1, [r2, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e88:	d012      	beq.n	7eb0 <audioFrameString3+0x310>
    7e8a:	2b06      	cmp	r3, #6
				previousStringInputs[i] = 0;
    7e8c:	8151      	strh	r1, [r2, #10]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e8e:	d00f      	beq.n	7eb0 <audioFrameString3+0x310>
    7e90:	2b07      	cmp	r3, #7
				previousStringInputs[i] = 0;
    7e92:	8191      	strh	r1, [r2, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e94:	d00c      	beq.n	7eb0 <audioFrameString3+0x310>
    7e96:	2b08      	cmp	r3, #8
				previousStringInputs[i] = 0;
    7e98:	81d1      	strh	r1, [r2, #14]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e9a:	d009      	beq.n	7eb0 <audioFrameString3+0x310>
    7e9c:	2b09      	cmp	r3, #9
				previousStringInputs[i] = 0;
    7e9e:	8211      	strh	r1, [r2, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    7ea0:	d006      	beq.n	7eb0 <audioFrameString3+0x310>
    7ea2:	2b0a      	cmp	r3, #10
				previousStringInputs[i] = 0;
    7ea4:	8251      	strh	r1, [r2, #18]
			for (int i = 0; i < numStringsThisBoard; i++)
    7ea6:	d003      	beq.n	7eb0 <audioFrameString3+0x310>
    7ea8:	2b0b      	cmp	r3, #11
				previousStringInputs[i] = 0;
    7eaa:	8291      	strh	r1, [r2, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    7eac:	d000      	beq.n	7eb0 <audioFrameString3+0x310>
				previousStringInputs[i] = 0;
    7eae:	82d1      	strh	r1, [r2, #22]
			resetStringInputs = 0;
    7eb0:	2200      	movs	r2, #0
			newPluck = 1;
    7eb2:	2101      	movs	r1, #1
			resetStringInputs = 0;
    7eb4:	7022      	strb	r2, [r4, #0]
			newPluck = 1;
    7eb6:	4a1c      	ldr	r2, [pc, #112]	; (7f28 <audioFrameString3+0x388>)
    7eb8:	6011      	str	r1, [r2, #0]
    7eba:	e682      	b.n	7bc2 <audioFrameString3+0x22>
    7ebc:	e0001000 	.word	0xe0001000
    7ec0:	2000577c 	.word	0x2000577c
    7ec4:	20000694 	.word	0x20000694
    7ec8:	20001198 	.word	0x20001198
    7ecc:	2001cbe4 	.word	0x2001cbe4
    7ed0:	42fe0000 	.word	0x42fe0000
    7ed4:	00000000 	.word	0x00000000
    7ed8:	42c80000 	.word	0x42c80000
    7edc:	3c23d70a 	.word	0x3c23d70a
    7ee0:	3dcccccd 	.word	0x3dcccccd
    7ee4:	2001cbec 	.word	0x2001cbec
    7ee8:	2001cbfc 	.word	0x2001cbfc
    7eec:	20014228 	.word	0x20014228
    7ef0:	2001cc04 	.word	0x2001cc04
    7ef4:	43480000 	.word	0x43480000
    7ef8:	3ba3d70a 	.word	0x3ba3d70a
    7efc:	3ecccccd 	.word	0x3ecccccd
    7f00:	3f666666 	.word	0x3f666666
    7f04:	3f7d70a4 	.word	0x3f7d70a4
    7f08:	3a83126f 	.word	0x3a83126f
    7f0c:	3983126f 	.word	0x3983126f
    7f10:	30000000 	.word	0x30000000
    7f14:	4b000000 	.word	0x4b000000
    7f18:	20000684 	.word	0x20000684
    7f1c:	20014250 	.word	0x20014250
    7f20:	200051d8 	.word	0x200051d8
    7f24:	20005364 	.word	0x20005364
    7f28:	200052f4 	.word	0x200052f4
    7f2c:	20014230 	.word	0x20014230
    7f30:	2001cbdc 	.word	0x2001cbdc
    7f34:	2001cbf4 	.word	0x2001cbf4
    7f38:	200051f4 	.word	0x200051f4
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    7f3c:	ed9d 7a07 	vldr	s14, [sp, #28]
    7f40:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7f44:	ed8d 7a08 	vstr	s14, [sp, #32]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    7f48:	eddd 6a07 	vldr	s13, [sp, #28]
    7f4c:	ed9d 7a08 	vldr	s14, [sp, #32]
    7f50:	ee76 6ac7 	vsub.f32	s13, s13, s14
    7f54:	e6cf      	b.n	7cf6 <audioFrameString3+0x156>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    7f56:	eeb0 0a6b 	vmov.f32	s0, s23
    7f5a:	9002      	str	r0, [sp, #8]
    7f5c:	f004 f950 	bl	c200 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    7f60:	9802      	ldr	r0, [sp, #8]
    7f62:	edc8 ba00 	vstr	s23, [r8]
    7f66:	e691      	b.n	7c8c <audioFrameString3+0xec>
	...

00007f80 <oscillator_tick>:
{
    7f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    7f84:	0082      	lsls	r2, r0, #2
    7f86:	4cd1      	ldr	r4, [pc, #836]	; (82cc <oscillator_tick+0x34c>)
    7f88:	1c85      	adds	r5, r0, #2
    7f8a:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    7f8e:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    7f92:	1d07      	adds	r7, r0, #4
    7f94:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    7f98:	1d86      	adds	r6, r0, #6
{
    7f9a:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    7f9c:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    7f9e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 82f0 <oscillator_tick+0x370>
		oscOuts[1][i][string] = 0.0f;
    7fa2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    7fa6:	ed2d 8b04 	vpush	{d8-d9}
    7faa:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    7fac:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    7fb0:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    7fb4:	9200      	str	r2, [sp, #0]
    7fb6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    7fba:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    7fbc:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    7fc0:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    7fc4:	9002      	str	r0, [sp, #8]
    7fc6:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    7fca:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    7fce:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    7fd2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    7fd6:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    7fda:	f899 2000 	ldrb.w	r2, [r9]
    7fde:	b19a      	cbz	r2, 8008 <oscillator_tick+0x88>
		if (oscOn[osc])
    7fe0:	f8df 8310 	ldr.w	r8, [pc, #784]	; 82f4 <oscillator_tick+0x374>
    7fe4:	eeb0 8a40 	vmov.f32	s16, s0
    7fe8:	f898 0000 	ldrb.w	r0, [r8]
    7fec:	b988      	cbnz	r0, 8012 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    7fee:	2a01      	cmp	r2, #1
    7ff0:	d90a      	bls.n	8008 <oscillator_tick+0x88>
		if (oscOn[osc])
    7ff2:	f898 1001 	ldrb.w	r1, [r8, #1]
    7ff6:	2900      	cmp	r1, #0
    7ff8:	d16e      	bne.n	80d8 <oscillator_tick+0x158>
	for (int osc = 0; osc < oscToTick; osc++)
    7ffa:	2a02      	cmp	r2, #2
    7ffc:	d904      	bls.n	8008 <oscillator_tick+0x88>
		if (oscOn[osc])
    7ffe:	f898 2002 	ldrb.w	r2, [r8, #2]
    8002:	2a00      	cmp	r2, #0
    8004:	f040 80e6 	bne.w	81d4 <oscillator_tick+0x254>
}
    8008:	b009      	add	sp, #36	; 0x24
    800a:	ecbd 8b04 	vpop	{d8-d9}
    800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    8012:	00a9      	lsls	r1, r5, #2
    8014:	4aae      	ldr	r2, [pc, #696]	; (82d0 <oscillator_tick+0x350>)
    8016:	9305      	str	r3, [sp, #20]
    8018:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    801a:	9b00      	ldr	r3, [sp, #0]
    801c:	48ad      	ldr	r0, [pc, #692]	; (82d4 <oscillator_tick+0x354>)
			float freqToSmooth = (note + (fine*0.01f));
    801e:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    8022:	eddf 7aad 	vldr	s15, [pc, #692]	; 82d8 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8026:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    8028:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    802c:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8030:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    8034:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    8038:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    803c:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8040:	9003      	str	r0, [sp, #12]
    8042:	f004 f8a1 	bl	c188 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8046:	9803      	ldr	r0, [sp, #12]
    8048:	f004 f8ea 	bl	c220 <__tExpSmooth_tick_veneer>
    804c:	9b00      	ldr	r3, [sp, #0]
    804e:	4aa3      	ldr	r2, [pc, #652]	; (82dc <oscillator_tick+0x35c>)
    8050:	441a      	add	r2, r3
    8052:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8056:	ee30 0a27 	vadd.f32	s0, s0, s15
    805a:	f003 ff1d 	bl	be98 <__mtofTableLookup_veneer>
    805e:	9b00      	ldr	r3, [sp, #0]
    8060:	4a9f      	ldr	r2, [pc, #636]	; (82e0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8062:	a807      	add	r0, sp, #28
    8064:	499f      	ldr	r1, [pc, #636]	; (82e4 <oscillator_tick+0x364>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8066:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8068:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    806a:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    806e:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8072:	2200      	movs	r2, #0
    8074:	f8d1 b000 	ldr.w	fp, [r1]
    8078:	eee0 9a27 	vfma.f32	s19, s0, s15
    807c:	4611      	mov	r1, r2
    807e:	eddd 0a04 	vldr	s1, [sp, #16]
    8082:	9303      	str	r3, [sp, #12]
    8084:	eeb0 0a69 	vmov.f32	s0, s19
    8088:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    808a:	4a91      	ldr	r2, [pc, #580]	; (82d0 <oscillator_tick+0x350>)
    808c:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    808e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    8092:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8096:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    809a:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    809c:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    80a0:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    80a4:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    80a8:	4a8f      	ldr	r2, [pc, #572]	; (82e8 <oscillator_tick+0x368>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    80aa:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    80ae:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    80b2:	4a8e      	ldr	r2, [pc, #568]	; (82ec <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    80b4:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    80b8:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    80ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    80be:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    80c2:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    80c6:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    80ca:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    80ce:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    80d2:	edc6 7a00 	vstr	s15, [r6]
    80d6:	e78a      	b.n	7fee <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    80d8:	4e7d      	ldr	r6, [pc, #500]	; (82d0 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    80da:	eeb0 0a48 	vmov.f32	s0, s16
    80de:	487d      	ldr	r0, [pc, #500]	; (82d4 <oscillator_tick+0x354>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    80e0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    80e4:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    80e8:	eddf 7a7b 	vldr	s15, [pc, #492]	; 82d8 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    80ec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    80f0:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    80f2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    80f6:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    80f8:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    80fc:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    8100:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8104:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8108:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    810c:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    8110:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8114:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8118:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    811c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    8120:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    8124:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8128:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    812c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8130:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8134:	f004 f828 	bl	c188 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8138:	9800      	ldr	r0, [sp, #0]
    813a:	f004 f871 	bl	c220 <__tExpSmooth_tick_veneer>
    813e:	4a67      	ldr	r2, [pc, #412]	; (82dc <oscillator_tick+0x35c>)
    8140:	4452      	add	r2, sl
    8142:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8146:	ee30 0a27 	vadd.f32	s0, s0, s15
    814a:	f003 fea5 	bl	be98 <__mtofTableLookup_veneer>
    814e:	4a64      	ldr	r2, [pc, #400]	; (82e0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8150:	9b04      	ldr	r3, [sp, #16]
    8152:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8154:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8156:	a807      	add	r0, sp, #28
    8158:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    815c:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    8160:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8162:	9300      	str	r3, [sp, #0]
    8164:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    8168:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    816a:	4a5e      	ldr	r2, [pc, #376]	; (82e4 <oscillator_tick+0x364>)
    816c:	f8d2 b004 	ldr.w	fp, [r2, #4]
    8170:	2200      	movs	r2, #0
    8172:	eeb0 0a69 	vmov.f32	s0, s19
    8176:	47d8      	blx	fp
			sample *= amp;
    8178:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    817c:	9b01      	ldr	r3, [sp, #4]
    817e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8182:	4859      	ldr	r0, [pc, #356]	; (82e8 <oscillator_tick+0x368>)
			sample *= amp;
    8184:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8188:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    818c:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    818e:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8192:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8196:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    819a:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    819e:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81a2:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    81a6:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    81a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81ac:	ed96 6a00 	vldr	s12, [r6]
    81b0:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    81b4:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81b8:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    81bc:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    81c0:	494a      	ldr	r1, [pc, #296]	; (82ec <oscillator_tick+0x36c>)
    81c2:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81c4:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    81c6:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81ca:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    81ce:	f63f af16 	bhi.w	7ffe <oscillator_tick+0x7e>
    81d2:	e719      	b.n	8008 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    81d4:	4e3e      	ldr	r6, [pc, #248]	; (82d0 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    81d6:	eeb0 0a48 	vmov.f32	s0, s16
    81da:	483e      	ldr	r0, [pc, #248]	; (82d4 <oscillator_tick+0x354>)
			float fine = oscParams[OscFine].realVal[string];
    81dc:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    81e0:	eddf 7a3d 	vldr	s15, [pc, #244]	; 82d8 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    81e4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    81e8:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    81ea:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    81ee:	9000      	str	r0, [sp, #0]
    81f0:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    81f2:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    81f6:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    81fa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    81fe:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8202:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    8206:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    820a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    820e:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8212:	f206 6204 	addw	r2, r6, #1540	; 0x604
    8216:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    821a:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    821e:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8222:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    8226:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    822a:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    822e:	f003 ffab 	bl	c188 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8232:	9800      	ldr	r0, [sp, #0]
    8234:	f003 fff4 	bl	c220 <__tExpSmooth_tick_veneer>
    8238:	4a28      	ldr	r2, [pc, #160]	; (82dc <oscillator_tick+0x35c>)
    823a:	443a      	add	r2, r7
    823c:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8240:	ee30 0a27 	vadd.f32	s0, s0, s15
    8244:	f003 fe28 	bl	be98 <__mtofTableLookup_veneer>
    8248:	4a25      	ldr	r2, [pc, #148]	; (82e0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    824a:	9b03      	ldr	r3, [sp, #12]
    824c:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    824e:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8250:	eddd 0a01 	vldr	s1, [sp, #4]
    8254:	2102      	movs	r1, #2
    8256:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8258:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    825c:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    825e:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    8262:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8264:	4a1f      	ldr	r2, [pc, #124]	; (82e4 <oscillator_tick+0x364>)
    8266:	6895      	ldr	r5, [r2, #8]
    8268:	2200      	movs	r2, #0
    826a:	eeb0 0a49 	vmov.f32	s0, s18
    826e:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8270:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    8272:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    827a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    827e:	491a      	ldr	r1, [pc, #104]	; (82e8 <oscillator_tick+0x368>)
			sample *= amp;
    8280:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8284:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8286:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    828a:	4b18      	ldr	r3, [pc, #96]	; (82ec <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    828c:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8290:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    8294:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8296:	edd6 6a00 	vldr	s13, [r6]
    829a:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    829c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    82a0:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    82a4:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    82a8:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    82ac:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    82b0:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    82b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    82b8:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    82bc:	edc4 7a00 	vstr	s15, [r4]
}
    82c0:	b009      	add	sp, #36	; 0x24
    82c2:	ecbd 8b04 	vpop	{d8-d9}
    82c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82ca:	bf00      	nop
    82cc:	2001d1fc 	.word	0x2001d1fc
    82d0:	20018f30 	.word	0x20018f30
    82d4:	2001d2d4 	.word	0x2001d2d4
    82d8:	3c23d70a 	.word	0x3c23d70a
    82dc:	2001d16c 	.word	0x2001d16c
    82e0:	2001cf00 	.word	0x2001cf00
    82e4:	2001d39c 	.word	0x2001d39c
    82e8:	200008d8 	.word	0x200008d8
    82ec:	2001d418 	.word	0x2001d418
    82f0:	200008ec 	.word	0x200008ec
    82f4:	2001d1f8 	.word	0x2001d1f8
    82f8:	f3af 8000 	nop.w
    82fc:	f3af 8000 	nop.w

00008300 <sawSquareTick>:
{
    8300:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8302:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8306:	4c0e      	ldr	r4, [pc, #56]	; (8340 <sawSquareTick+0x40>)
{
    8308:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    830a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    830e:	ed2d 8b02 	vpush	{d8}
    8312:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8316:	4620      	mov	r0, r4
    8318:	f003 ff5a 	bl	c1d0 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    831c:	4620      	mov	r0, r4
    831e:	eeb0 0a48 	vmov.f32	s0, s16
    8322:	f003 fea1 	bl	c068 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    8326:	4620      	mov	r0, r4
    8328:	f003 fe3a 	bl	bfa0 <__tPBSawSquare_tick_veneer>
    832c:	edd5 7a00 	vldr	s15, [r5]
    8330:	ee37 0a80 	vadd.f32	s0, s15, s0
    8334:	ed85 0a00 	vstr	s0, [r5]
}
    8338:	ecbd 8b02 	vpop	{d8}
    833c:	bd38      	pop	{r3, r4, r5, pc}
    833e:	bf00      	nop
    8340:	2001d344 	.word	0x2001d344
    8344:	f3af 8000 	nop.w
    8348:	f3af 8000 	nop.w
    834c:	f3af 8000 	nop.w
    8350:	f3af 8000 	nop.w
    8354:	f3af 8000 	nop.w
    8358:	f3af 8000 	nop.w
    835c:	f3af 8000 	nop.w

00008360 <sineTriTick>:
{
    8360:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    8362:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8366:	4c0e      	ldr	r4, [pc, #56]	; (83a0 <sineTriTick+0x40>)
{
    8368:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    836a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    836e:	ed2d 8b02 	vpush	{d8}
    8372:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    8376:	4620      	mov	r0, r4
    8378:	f003 fd16 	bl	bda8 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    837c:	4620      	mov	r0, r4
    837e:	eeb0 0a48 	vmov.f32	s0, s16
    8382:	f003 feb9 	bl	c0f8 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    8386:	4620      	mov	r0, r4
    8388:	f003 fcea 	bl	bd60 <__tPBSineTriangle_tick_veneer>
    838c:	edd5 7a00 	vldr	s15, [r5]
    8390:	ee37 0a80 	vadd.f32	s0, s15, s0
    8394:	ed85 0a00 	vstr	s0, [r5]
}
    8398:	ecbd 8b02 	vpop	{d8}
    839c:	bd38      	pop	{r3, r4, r5, pc}
    839e:	bf00      	nop
    83a0:	2001d400 	.word	0x2001d400
    83a4:	f3af 8000 	nop.w
    83a8:	f3af 8000 	nop.w
    83ac:	f3af 8000 	nop.w
    83b0:	f3af 8000 	nop.w
    83b4:	f3af 8000 	nop.w
    83b8:	f3af 8000 	nop.w
    83bc:	f3af 8000 	nop.w

000083c0 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    83c0:	4a0a      	ldr	r2, [pc, #40]	; (83ec <sawTick+0x2c>)
    83c2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    83c6:	b510      	push	{r4, lr}
    83c8:	4604      	mov	r4, r0
    83ca:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    83cc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    83d0:	9001      	str	r0, [sp, #4]
    83d2:	f003 fd5d 	bl	be90 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    83d6:	9801      	ldr	r0, [sp, #4]
    83d8:	f003 fda6 	bl	bf28 <__tPBSaw_tick_veneer>
    83dc:	edd4 7a00 	vldr	s15, [r4]
    83e0:	ee37 0a80 	vadd.f32	s0, s15, s0
    83e4:	ed84 0a00 	vstr	s0, [r4]
}
    83e8:	b002      	add	sp, #8
    83ea:	bd10      	pop	{r4, pc}
    83ec:	2001d32c 	.word	0x2001d32c
    83f0:	f3af 8000 	nop.w
    83f4:	f3af 8000 	nop.w
    83f8:	f3af 8000 	nop.w
    83fc:	f3af 8000 	nop.w

00008400 <pulseTick>:
{
    8400:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    8402:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8406:	4c0e      	ldr	r4, [pc, #56]	; (8440 <pulseTick+0x40>)
{
    8408:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    840a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    840e:	ed2d 8b02 	vpush	{d8}
    8412:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    8416:	4620      	mov	r0, r4
    8418:	f003 fd0a 	bl	be30 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    841c:	4620      	mov	r0, r4
    841e:	eeb0 0a48 	vmov.f32	s0, s16
    8422:	f003 fc91 	bl	bd48 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    8426:	4620      	mov	r0, r4
    8428:	f003 fc4a 	bl	bcc0 <__tPBPulse_tick_veneer>
    842c:	edd5 7a00 	vldr	s15, [r5]
    8430:	ee37 0a80 	vadd.f32	s0, s15, s0
    8434:	ed85 0a00 	vstr	s0, [r5]
}
    8438:	ecbd 8b02 	vpop	{d8}
    843c:	bd38      	pop	{r3, r4, r5, pc}
    843e:	bf00      	nop
    8440:	2001d310 	.word	0x2001d310
    8444:	f3af 8000 	nop.w
    8448:	f3af 8000 	nop.w
    844c:	f3af 8000 	nop.w
    8450:	f3af 8000 	nop.w
    8454:	f3af 8000 	nop.w
    8458:	f3af 8000 	nop.w
    845c:	f3af 8000 	nop.w

00008460 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    8460:	4a0a      	ldr	r2, [pc, #40]	; (848c <sineTick+0x2c>)
    8462:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    8466:	b510      	push	{r4, lr}
    8468:	4604      	mov	r4, r0
    846a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    846c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    8470:	9001      	str	r0, [sp, #4]
    8472:	f003 fe5d 	bl	c130 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    8476:	9801      	ldr	r0, [sp, #4]
    8478:	f003 fe6e 	bl	c158 <__tCycle_tick_veneer>
    847c:	edd4 7a00 	vldr	s15, [r4]
    8480:	ee37 0a80 	vadd.f32	s0, s15, s0
    8484:	ed84 0a00 	vstr	s0, [r4]
}
    8488:	b002      	add	sp, #8
    848a:	bd10      	pop	{r4, pc}
    848c:	2001d3e8 	.word	0x2001d3e8
    8490:	f3af 8000 	nop.w
    8494:	f3af 8000 	nop.w
    8498:	f3af 8000 	nop.w
    849c:	f3af 8000 	nop.w

000084a0 <triTick>:
{
    84a0:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    84a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    84a6:	4c0e      	ldr	r4, [pc, #56]	; (84e0 <triTick+0x40>)
{
    84a8:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    84aa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    84ae:	ed2d 8b02 	vpush	{d8}
    84b2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    84b6:	4620      	mov	r0, r4
    84b8:	f003 fe7a 	bl	c1b0 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    84bc:	4620      	mov	r0, r4
    84be:	eeb0 0a48 	vmov.f32	s0, s16
    84c2:	f003 fe8d 	bl	c1e0 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    84c6:	4620      	mov	r0, r4
    84c8:	f003 fd6e 	bl	bfa8 <__tPBTriangle_tick_veneer>
    84cc:	edd5 7a00 	vldr	s15, [r5]
    84d0:	ee37 0a80 	vadd.f32	s0, s15, s0
    84d4:	ed85 0a00 	vstr	s0, [r5]
}
    84d8:	ecbd 8b02 	vpop	{d8}
    84dc:	bd38      	pop	{r3, r4, r5, pc}
    84de:	bf00      	nop
    84e0:	2001d584 	.word	0x2001d584
    84e4:	f3af 8000 	nop.w
    84e8:	f3af 8000 	nop.w
    84ec:	f3af 8000 	nop.w
    84f0:	f3af 8000 	nop.w
    84f4:	f3af 8000 	nop.w
    84f8:	f3af 8000 	nop.w
    84fc:	f3af 8000 	nop.w

00008500 <userTick>:
}
    8500:	4770      	bx	lr
    8502:	bf00      	nop
    8504:	f3af 8000 	nop.w
    8508:	f3af 8000 	nop.w
    850c:	f3af 8000 	nop.w
    8510:	f3af 8000 	nop.w
    8514:	f3af 8000 	nop.w
    8518:	f3af 8000 	nop.w
    851c:	f3af 8000 	nop.w

00008520 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    8520:	4b52      	ldr	r3, [pc, #328]	; (866c <filter_tick+0x14c>)
    8522:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    8526:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    852a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    852e:	b570      	push	{r4, r5, r6, lr}
    8530:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    8534:	ed92 7a00 	vldr	s14, [r2]
{
    8538:	460c      	mov	r4, r1
    853a:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    853c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8544:	d97d      	bls.n	8642 <filter_tick+0x122>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    8546:	1c8a      	adds	r2, r1, #2
    8548:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    854c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    8550:	edd1 7a00 	vldr	s15, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    8554:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    8558:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    855c:	edd2 6a00 	vldr	s13, [r2]
    8560:	eee0 6a27 	vfma.f32	s13, s0, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    8564:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    8568:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    856c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8570:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    8574:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    857c:	d953      	bls.n	8626 <filter_tick+0x106>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    857e:	1ca1      	adds	r1, r4, #2
    8580:	4a3b      	ldr	r2, [pc, #236]	; (8670 <filter_tick+0x150>)
	if (enabledFilt[0])
    8582:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    8586:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    858a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    858e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    8592:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    8596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    859a:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    859e:	ed93 8a00 	vldr	s16, [r3]
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    85a2:	eea0 6a25 	vfma.f32	s12, s0, s11
    85a6:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    85aa:	dd1f      	ble.n	85ec <filter_tick+0xcc>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    85ac:	4e31      	ldr	r6, [pc, #196]	; (8674 <filter_tick+0x154>)
    85ae:	eeb0 0a66 	vmov.f32	s0, s13
    85b2:	4622      	mov	r2, r4
    85b4:	2100      	movs	r1, #0
    85b6:	6833      	ldr	r3, [r6, #0]
    85b8:	4628      	mov	r0, r5
    85ba:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    85c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    85c4:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85c8:	edd5 7a00 	vldr	s15, [r5]
    85cc:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    85d0:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    85d4:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    85d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    85dc:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    85e0:	dc11      	bgt.n	8606 <filter_tick+0xe6>
	return samples[1] + (samples[0] * sp);
    85e2:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    85e6:	ecbd 8b04 	vpop	{d8-d9}
    85ea:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    85f0:	edd5 7a01 	vldr	s15, [r5, #4]
    85f4:	edd5 6a00 	vldr	s13, [r5]
    85f8:	4e1e      	ldr	r6, [pc, #120]	; (8674 <filter_tick+0x154>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85fa:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    85fe:	eee6 7a87 	vfma.f32	s15, s13, s14
    8602:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    8606:	eeb0 0a68 	vmov.f32	s0, s17
    860a:	6873      	ldr	r3, [r6, #4]
    860c:	4622      	mov	r2, r4
    860e:	2101      	movs	r1, #1
    8610:	1d28      	adds	r0, r5, #4
    8612:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    8614:	ed95 0a01 	vldr	s0, [r5, #4]
    8618:	edd5 7a00 	vldr	s15, [r5]
    861c:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    8620:	ecbd 8b04 	vpop	{d8-d9}
    8624:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    8626:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    862a:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    862e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    8632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    8636:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    863a:	dd05      	ble.n	8648 <filter_tick+0x128>
	float cutoff[2] = {0.0f, 0.0f};
    863c:	eddf 8a0e 	vldr	s17, [pc, #56]	; 8678 <filter_tick+0x158>
    8640:	e7b4      	b.n	85ac <filter_tick+0x8c>
    8642:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8678 <filter_tick+0x158>
    8646:	e78d      	b.n	8564 <filter_tick+0x44>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    8648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    864c:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    8650:	edd5 7a00 	vldr	s15, [r5]
    8654:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    8658:	eea7 0a27 	vfma.f32	s0, s14, s15
    865c:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    8660:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    8664:	ecbd 8b04 	vpop	{d8-d9}
    8668:	bd70      	pop	{r4, r5, r6, pc}
    866a:	bf00      	nop
    866c:	20018f30 	.word	0x20018f30
    8670:	20019ac8 	.word	0x20019ac8
    8674:	2001cee8 	.word	0x2001cee8
    8678:	00000000 	.word	0x00000000
    867c:	f3af 8000 	nop.w

00008680 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    8680:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8684:	4b0d      	ldr	r3, [pc, #52]	; (86bc <lowpassTick+0x3c>)
{
    8686:	b530      	push	{r4, r5, lr}
    8688:	4605      	mov	r5, r0
    868a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    868c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8690:	0094      	lsls	r4, r2, #2
    8692:	9001      	str	r0, [sp, #4]
    8694:	f003 fcec 	bl	c070 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    8698:	ed95 0a00 	vldr	s0, [r5]
    869c:	9801      	ldr	r0, [sp, #4]
    869e:	f003 fb8b 	bl	bdb8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    86a2:	4b07      	ldr	r3, [pc, #28]	; (86c0 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    86a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    86a8:	4423      	add	r3, r4
    86aa:	edd3 7a00 	vldr	s15, [r3]
    86ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    86b2:	edc5 7a00 	vstr	s15, [r5]
}
    86b6:	b003      	add	sp, #12
    86b8:	bd30      	pop	{r4, r5, pc}
    86ba:	bf00      	nop
    86bc:	2001d05c 	.word	0x2001d05c
    86c0:	2001ced8 	.word	0x2001ced8
    86c4:	f3af 8000 	nop.w
    86c8:	f3af 8000 	nop.w
    86cc:	f3af 8000 	nop.w
    86d0:	f3af 8000 	nop.w
    86d4:	f3af 8000 	nop.w
    86d8:	f3af 8000 	nop.w
    86dc:	f3af 8000 	nop.w

000086e0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    86e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    86e4:	4b0d      	ldr	r3, [pc, #52]	; (871c <highpassTick+0x3c>)
{
    86e6:	b530      	push	{r4, r5, lr}
    86e8:	4605      	mov	r5, r0
    86ea:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    86ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    86f0:	0094      	lsls	r4, r2, #2
    86f2:	9001      	str	r0, [sp, #4]
    86f4:	f003 fcbc 	bl	c070 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    86f8:	ed95 0a00 	vldr	s0, [r5]
    86fc:	9801      	ldr	r0, [sp, #4]
    86fe:	f003 fb5b 	bl	bdb8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    8702:	4b07      	ldr	r3, [pc, #28]	; (8720 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    8704:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8708:	4423      	add	r3, r4
    870a:	edd3 7a00 	vldr	s15, [r3]
    870e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8712:	edc5 7a00 	vstr	s15, [r5]
}
    8716:	b003      	add	sp, #12
    8718:	bd30      	pop	{r4, r5, pc}
    871a:	bf00      	nop
    871c:	2001cf58 	.word	0x2001cf58
    8720:	2001ced8 	.word	0x2001ced8
    8724:	f3af 8000 	nop.w
    8728:	f3af 8000 	nop.w
    872c:	f3af 8000 	nop.w
    8730:	f3af 8000 	nop.w
    8734:	f3af 8000 	nop.w
    8738:	f3af 8000 	nop.w
    873c:	f3af 8000 	nop.w

00008740 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    8740:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8744:	4b0d      	ldr	r3, [pc, #52]	; (877c <bandpassTick+0x3c>)
{
    8746:	b530      	push	{r4, r5, lr}
    8748:	4605      	mov	r5, r0
    874a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    874c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8750:	0094      	lsls	r4, r2, #2
    8752:	9001      	str	r0, [sp, #4]
    8754:	f003 fc8c 	bl	c070 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    8758:	ed95 0a00 	vldr	s0, [r5]
    875c:	9801      	ldr	r0, [sp, #4]
    875e:	f003 fb2b 	bl	bdb8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    8762:	4b07      	ldr	r3, [pc, #28]	; (8780 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    8764:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8768:	4423      	add	r3, r4
    876a:	edd3 7a00 	vldr	s15, [r3]
    876e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8772:	edc5 7a00 	vstr	s15, [r5]
}
    8776:	b003      	add	sp, #12
    8778:	bd30      	pop	{r4, r5, pc}
    877a:	bf00      	nop
    877c:	2001cd84 	.word	0x2001cd84
    8780:	2001ced8 	.word	0x2001ced8
    8784:	f3af 8000 	nop.w
    8788:	f3af 8000 	nop.w
    878c:	f3af 8000 	nop.w
    8790:	f3af 8000 	nop.w
    8794:	f3af 8000 	nop.w
    8798:	f3af 8000 	nop.w
    879c:	f3af 8000 	nop.w

000087a0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    87a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    87a4:	4b0d      	ldr	r3, [pc, #52]	; (87dc <diodeLowpassTick+0x3c>)
{
    87a6:	b530      	push	{r4, r5, lr}
    87a8:	4605      	mov	r5, r0
    87aa:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    87ac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    87b0:	0094      	lsls	r4, r2, #2
    87b2:	9001      	str	r0, [sp, #4]
    87b4:	f003 fbd4 	bl	bf60 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    87b8:	ed95 0a00 	vldr	s0, [r5]
    87bc:	9801      	ldr	r0, [sp, #4]
    87be:	f003 faa7 	bl	bd10 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    87c2:	4b07      	ldr	r3, [pc, #28]	; (87e0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    87c4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    87c8:	4423      	add	r3, r4
    87ca:	edd3 7a00 	vldr	s15, [r3]
    87ce:	ee67 7a80 	vmul.f32	s15, s15, s0
    87d2:	edc5 7a00 	vstr	s15, [r5]
}
    87d6:	b003      	add	sp, #12
    87d8:	bd30      	pop	{r4, r5, pc}
    87da:	bf00      	nop
    87dc:	2001ce64 	.word	0x2001ce64
    87e0:	2001ced8 	.word	0x2001ced8
    87e4:	f3af 8000 	nop.w
    87e8:	f3af 8000 	nop.w
    87ec:	f3af 8000 	nop.w
    87f0:	f3af 8000 	nop.w
    87f4:	f3af 8000 	nop.w
    87f8:	f3af 8000 	nop.w
    87fc:	f3af 8000 	nop.w

00008800 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    8800:	4b09      	ldr	r3, [pc, #36]	; (8828 <VZpeakTick+0x28>)
    8802:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    8806:	b510      	push	{r4, lr}
    8808:	4604      	mov	r4, r0
    880a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    880c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    8810:	9001      	str	r0, [sp, #4]
    8812:	f003 fbfd 	bl	c010 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    8816:	9801      	ldr	r0, [sp, #4]
    8818:	ed94 0a00 	vldr	s0, [r4]
    881c:	f003 fcb8 	bl	c190 <__tVZFilterBell_tick_veneer>
    8820:	ed84 0a00 	vstr	s0, [r4]
}
    8824:	b002      	add	sp, #8
    8826:	bd10      	pop	{r4, pc}
    8828:	2001cd6c 	.word	0x2001cd6c
    882c:	f3af 8000 	nop.w
    8830:	f3af 8000 	nop.w
    8834:	f3af 8000 	nop.w
    8838:	f3af 8000 	nop.w
    883c:	f3af 8000 	nop.w

00008840 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    8840:	4b09      	ldr	r3, [pc, #36]	; (8868 <VZlowshelfTick+0x28>)
    8842:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    8846:	b510      	push	{r4, lr}
    8848:	4604      	mov	r4, r0
    884a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    884c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    8850:	9001      	str	r0, [sp, #4]
    8852:	f003 fb6d 	bl	bf30 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    8856:	9801      	ldr	r0, [sp, #4]
    8858:	ed94 0a00 	vldr	s0, [r4]
    885c:	f003 fb30 	bl	bec0 <__tVZFilterLS_tick_veneer>
    8860:	ed84 0a00 	vstr	s0, [r4]
}
    8864:	b002      	add	sp, #8
    8866:	bd10      	pop	{r4, pc}
    8868:	2001cd5c 	.word	0x2001cd5c
    886c:	f3af 8000 	nop.w
    8870:	f3af 8000 	nop.w
    8874:	f3af 8000 	nop.w
    8878:	f3af 8000 	nop.w
    887c:	f3af 8000 	nop.w

00008880 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    8880:	4b09      	ldr	r3, [pc, #36]	; (88a8 <VZhighshelfTick+0x28>)
    8882:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    8886:	b510      	push	{r4, lr}
    8888:	4604      	mov	r4, r0
    888a:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    888c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    8890:	9001      	str	r0, [sp, #4]
    8892:	f003 fa01 	bl	bc98 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    8896:	9801      	ldr	r0, [sp, #4]
    8898:	ed94 0a00 	vldr	s0, [r4]
    889c:	f003 fa9c 	bl	bdd8 <__tVZFilterHS_tick_veneer>
    88a0:	ed84 0a00 	vstr	s0, [r4]
}
    88a4:	b002      	add	sp, #8
    88a6:	bd10      	pop	{r4, pc}
    88a8:	2001cd4c 	.word	0x2001cd4c
    88ac:	f3af 8000 	nop.w
    88b0:	f3af 8000 	nop.w
    88b4:	f3af 8000 	nop.w
    88b8:	f3af 8000 	nop.w
    88bc:	f3af 8000 	nop.w

000088c0 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    88c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    88c4:	4b0d      	ldr	r3, [pc, #52]	; (88fc <VZbandrejectTick+0x3c>)
{
    88c6:	b530      	push	{r4, r5, lr}
    88c8:	4605      	mov	r5, r0
    88ca:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    88cc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    88d0:	0094      	lsls	r4, r2, #2
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	f003 fba4 	bl	c020 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    88d8:	ed95 0a00 	vldr	s0, [r5]
    88dc:	9801      	ldr	r0, [sp, #4]
    88de:	f003 f9eb 	bl	bcb8 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    88e2:	4b07      	ldr	r3, [pc, #28]	; (8900 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    88e4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    88e8:	4423      	add	r3, r4
    88ea:	edd3 7a00 	vldr	s15, [r3]
    88ee:	ee67 7a80 	vmul.f32	s15, s15, s0
    88f2:	edc5 7a00 	vstr	s15, [r5]
}
    88f6:	b003      	add	sp, #12
    88f8:	bd30      	pop	{r4, r5, pc}
    88fa:	bf00      	nop
    88fc:	2001cd3c 	.word	0x2001cd3c
    8900:	2001ced8 	.word	0x2001ced8
    8904:	f3af 8000 	nop.w
    8908:	f3af 8000 	nop.w
    890c:	f3af 8000 	nop.w
    8910:	f3af 8000 	nop.w
    8914:	f3af 8000 	nop.w
    8918:	f3af 8000 	nop.w
    891c:	f3af 8000 	nop.w

00008920 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    8920:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8924:	4b0d      	ldr	r3, [pc, #52]	; (895c <LadderLowpassTick+0x3c>)
{
    8926:	b530      	push	{r4, r5, lr}
    8928:	4605      	mov	r5, r0
    892a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    892c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8930:	0094      	lsls	r4, r2, #2
    8932:	9001      	str	r0, [sp, #4]
    8934:	f003 f9f4 	bl	bd20 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    8938:	ed95 0a00 	vldr	s0, [r5]
    893c:	9801      	ldr	r0, [sp, #4]
    893e:	f003 fb4b 	bl	bfd8 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    8942:	4b07      	ldr	r3, [pc, #28]	; (8960 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    8944:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8948:	4423      	add	r3, r4
    894a:	edd3 7a00 	vldr	s15, [r3]
    894e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8952:	edc5 7a00 	vstr	s15, [r5]
}
    8956:	b003      	add	sp, #12
    8958:	bd30      	pop	{r4, r5, pc}
    895a:	bf00      	nop
    895c:	2001cd2c 	.word	0x2001cd2c
    8960:	2001ced8 	.word	0x2001ced8
    8964:	f3af 8000 	nop.w
    8968:	f3af 8000 	nop.w
    896c:	f3af 8000 	nop.w
    8970:	f3af 8000 	nop.w
    8974:	f3af 8000 	nop.w
    8978:	f3af 8000 	nop.w
    897c:	f3af 8000 	nop.w

00008980 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    8980:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    8984:	4b0f      	ldr	r3, [pc, #60]	; (89c4 <setFreqMultPitch+0x44>)
    8986:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    8988:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    898c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    8990:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8994:	3020      	adds	r0, #32
	pitch *= 24.0f;
    8996:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    899a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    899e:	4408      	add	r0, r1
    89a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    89a4:	ed93 7a02 	vldr	s14, [r3, #8]
    89a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    89ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89b0:	dd01      	ble.n	89b6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    89b2:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    89b6:	4b04      	ldr	r3, [pc, #16]	; (89c8 <setFreqMultPitch+0x48>)
    89b8:	440a      	add	r2, r1
    89ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    89be:	ed83 0a00 	vstr	s0, [r3]
}
    89c2:	4770      	bx	lr
    89c4:	20018f30 	.word	0x20018f30
    89c8:	2001d16c 	.word	0x2001d16c
    89cc:	f3af 8000 	nop.w
    89d0:	f3af 8000 	nop.w
    89d4:	f3af 8000 	nop.w
    89d8:	f3af 8000 	nop.w
    89dc:	f3af 8000 	nop.w

000089e0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    89e0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    89e4:	4b17      	ldr	r3, [pc, #92]	; (8a44 <setFreqMultHarm+0x64>)
    89e6:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    89e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    89ec:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    89f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    89f4:	3020      	adds	r0, #32
	harm *= 15.0f;
    89f6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    89fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    89fe:	4408      	add	r0, r1
    8a00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8a04:	ed93 7a02 	vldr	s14, [r3, #8]
    8a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a10:	dd01      	ble.n	8a16 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    8a12:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    8a16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    8a1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    8a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a22:	db08      	blt.n	8a36 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    8a24:	ee30 0a27 	vadd.f32	s0, s0, s15
    8a28:	4b07      	ldr	r3, [pc, #28]	; (8a48 <setFreqMultHarm+0x68>)
    8a2a:	440a      	add	r2, r1
    8a2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8a30:	ed83 0a00 	vstr	s0, [r3]
}
    8a34:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    8a36:	ee30 0a67 	vsub.f32	s0, s0, s15
    8a3a:	eeb0 7ac0 	vabs.f32	s14, s0
    8a3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    8a42:	e7f1      	b.n	8a28 <setFreqMultHarm+0x48>
    8a44:	20018f30 	.word	0x20018f30
    8a48:	2001cf00 	.word	0x2001cf00
    8a4c:	f3af 8000 	nop.w
    8a50:	f3af 8000 	nop.w
    8a54:	f3af 8000 	nop.w
    8a58:	f3af 8000 	nop.w
    8a5c:	f3af 8000 	nop.w

00008a60 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    8a60:	4b03      	ldr	r3, [pc, #12]	; (8a70 <lowpassSetQ+0x10>)
    8a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a6a:	f003 bb31 	b.w	c0d0 <__tSVF_setQ_veneer>
    8a6e:	bf00      	nop
    8a70:	2001d05c 	.word	0x2001d05c
    8a74:	f3af 8000 	nop.w
    8a78:	f3af 8000 	nop.w
    8a7c:	f3af 8000 	nop.w

00008a80 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    8a80:	4b03      	ldr	r3, [pc, #12]	; (8a90 <highpassSetQ+0x10>)
    8a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a8a:	f003 bb21 	b.w	c0d0 <__tSVF_setQ_veneer>
    8a8e:	bf00      	nop
    8a90:	2001cf58 	.word	0x2001cf58
    8a94:	f3af 8000 	nop.w
    8a98:	f3af 8000 	nop.w
    8a9c:	f3af 8000 	nop.w

00008aa0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    8aa0:	4b03      	ldr	r3, [pc, #12]	; (8ab0 <bandpassSetQ+0x10>)
    8aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aaa:	f003 bb11 	b.w	c0d0 <__tSVF_setQ_veneer>
    8aae:	bf00      	nop
    8ab0:	2001cd84 	.word	0x2001cd84
    8ab4:	f3af 8000 	nop.w
    8ab8:	f3af 8000 	nop.w
    8abc:	f3af 8000 	nop.w

00008ac0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    8ac0:	4b03      	ldr	r3, [pc, #12]	; (8ad0 <diodeLowpassSetQ+0x10>)
    8ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aca:	f003 ba45 	b.w	bf58 <__tDiodeFilter_setQ_veneer>
    8ace:	bf00      	nop
    8ad0:	2001ce64 	.word	0x2001ce64
    8ad4:	f3af 8000 	nop.w
    8ad8:	f3af 8000 	nop.w
    8adc:	f3af 8000 	nop.w

00008ae0 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    8ae0:	4b03      	ldr	r3, [pc, #12]	; (8af0 <VZpeakSetQ+0x10>)
    8ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aea:	f003 bb11 	b.w	c110 <__tVZFilterBell_setBandwidth_veneer>
    8aee:	bf00      	nop
    8af0:	2001cd6c 	.word	0x2001cd6c
    8af4:	f3af 8000 	nop.w
    8af8:	f3af 8000 	nop.w
    8afc:	f3af 8000 	nop.w

00008b00 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    8b00:	4b03      	ldr	r3, [pc, #12]	; (8b10 <VZlowshelfSetQ+0x10>)
    8b02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b0a:	f003 ba3d 	b.w	bf88 <__tVZFilterLS_setResonance_veneer>
    8b0e:	bf00      	nop
    8b10:	2001cd5c 	.word	0x2001cd5c
    8b14:	f3af 8000 	nop.w
    8b18:	f3af 8000 	nop.w
    8b1c:	f3af 8000 	nop.w

00008b20 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    8b20:	4b03      	ldr	r3, [pc, #12]	; (8b30 <VZhighshelfSetQ+0x10>)
    8b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b2a:	f003 baf9 	b.w	c120 <__tVZFilterHS_setResonance_veneer>
    8b2e:	bf00      	nop
    8b30:	2001cd4c 	.word	0x2001cd4c
    8b34:	f3af 8000 	nop.w
    8b38:	f3af 8000 	nop.w
    8b3c:	f3af 8000 	nop.w

00008b40 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    8b40:	4b03      	ldr	r3, [pc, #12]	; (8b50 <VZbandrejectSetQ+0x10>)
    8b42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b4a:	f003 b8bd 	b.w	bcc8 <__tVZFilter_setResonance_veneer>
    8b4e:	bf00      	nop
    8b50:	2001cd3c 	.word	0x2001cd3c
    8b54:	f3af 8000 	nop.w
    8b58:	f3af 8000 	nop.w
    8b5c:	f3af 8000 	nop.w

00008b60 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    8b60:	4b03      	ldr	r3, [pc, #12]	; (8b70 <LadderLowpassSetQ+0x10>)
    8b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8b6a:	f003 baed 	b.w	c148 <__tLadderFilter_setQ_veneer>
    8b6e:	bf00      	nop
    8b70:	2001cd2c 	.word	0x2001cd2c
    8b74:	f3af 8000 	nop.w
    8b78:	f3af 8000 	nop.w
    8b7c:	f3af 8000 	nop.w

00008b80 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8b84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    8b88:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8b8e:	4605      	mov	r5, r0
    8b90:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b92:	eeb0 0a67 	vmov.f32	s0, s15
    8b96:	f003 f9bb 	bl	bf10 <__dbToATableLookup_veneer>
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <lowpassSetGain+0x2c>)
    8b9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ba0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8ba4:	ed83 0a00 	vstr	s0, [r3]
}
    8ba8:	bd38      	pop	{r3, r4, r5, pc}
    8baa:	bf00      	nop
    8bac:	2001ced8 	.word	0x2001ced8
    8bb0:	f3af 8000 	nop.w
    8bb4:	f3af 8000 	nop.w
    8bb8:	f3af 8000 	nop.w
    8bbc:	f3af 8000 	nop.w

00008bc0 <highpassSetGain>:
    8bc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8bc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8bc8:	b538      	push	{r3, r4, r5, lr}
    8bca:	eee0 7a07 	vfma.f32	s15, s0, s14
    8bce:	4605      	mov	r5, r0
    8bd0:	460c      	mov	r4, r1
    8bd2:	eeb0 0a67 	vmov.f32	s0, s15
    8bd6:	f003 f99b 	bl	bf10 <__dbToATableLookup_veneer>
    8bda:	4b04      	ldr	r3, [pc, #16]	; (8bec <highpassSetGain+0x2c>)
    8bdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8be0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8be4:	ed83 0a00 	vstr	s0, [r3]
    8be8:	bd38      	pop	{r3, r4, r5, pc}
    8bea:	bf00      	nop
    8bec:	2001ced8 	.word	0x2001ced8
    8bf0:	f3af 8000 	nop.w
    8bf4:	f3af 8000 	nop.w
    8bf8:	f3af 8000 	nop.w
    8bfc:	f3af 8000 	nop.w

00008c00 <bandpassSetGain>:
    8c00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8c04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8c08:	b538      	push	{r3, r4, r5, lr}
    8c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8c0e:	4605      	mov	r5, r0
    8c10:	460c      	mov	r4, r1
    8c12:	eeb0 0a67 	vmov.f32	s0, s15
    8c16:	f003 f97b 	bl	bf10 <__dbToATableLookup_veneer>
    8c1a:	4b04      	ldr	r3, [pc, #16]	; (8c2c <bandpassSetGain+0x2c>)
    8c1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8c20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8c24:	ed83 0a00 	vstr	s0, [r3]
    8c28:	bd38      	pop	{r3, r4, r5, pc}
    8c2a:	bf00      	nop
    8c2c:	2001ced8 	.word	0x2001ced8
    8c30:	f3af 8000 	nop.w
    8c34:	f3af 8000 	nop.w
    8c38:	f3af 8000 	nop.w
    8c3c:	f3af 8000 	nop.w

00008c40 <diodeLowpassSetGain>:
    8c40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8c44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8c48:	b538      	push	{r3, r4, r5, lr}
    8c4a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8c4e:	4605      	mov	r5, r0
    8c50:	460c      	mov	r4, r1
    8c52:	eeb0 0a67 	vmov.f32	s0, s15
    8c56:	f003 f95b 	bl	bf10 <__dbToATableLookup_veneer>
    8c5a:	4b04      	ldr	r3, [pc, #16]	; (8c6c <diodeLowpassSetGain+0x2c>)
    8c5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8c60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8c64:	ed83 0a00 	vstr	s0, [r3]
    8c68:	bd38      	pop	{r3, r4, r5, pc}
    8c6a:	bf00      	nop
    8c6c:	2001ced8 	.word	0x2001ced8
    8c70:	f3af 8000 	nop.w
    8c74:	f3af 8000 	nop.w
    8c78:	f3af 8000 	nop.w
    8c7c:	f3af 8000 	nop.w

00008c80 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8c84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8cac <VZpeakSetGain+0x2c>
{
    8c88:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8c8e:	4605      	mov	r5, r0
    8c90:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c92:	eeb0 0a67 	vmov.f32	s0, s15
    8c96:	f003 f93b 	bl	bf10 <__dbToATableLookup_veneer>
    8c9a:	4b05      	ldr	r3, [pc, #20]	; (8cb0 <VZpeakSetGain+0x30>)
    8c9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8ca8:	f003 b8e2 	b.w	be70 <__tVZFilterBell_setGain_veneer>
    8cac:	42480000 	.word	0x42480000
    8cb0:	2001cd6c 	.word	0x2001cd6c
    8cb4:	f3af 8000 	nop.w
    8cb8:	f3af 8000 	nop.w
    8cbc:	f3af 8000 	nop.w

00008cc0 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8cc0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8cc4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8cec <VZlowshelfSetGain+0x2c>
{
    8cc8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8cca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8cce:	4605      	mov	r5, r0
    8cd0:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8cd2:	eeb0 0a67 	vmov.f32	s0, s15
    8cd6:	f003 f91b 	bl	bf10 <__dbToATableLookup_veneer>
    8cda:	4b05      	ldr	r3, [pc, #20]	; (8cf0 <VZlowshelfSetGain+0x30>)
    8cdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8ce8:	f003 b872 	b.w	bdd0 <__tVZFilterLS_setGain_veneer>
    8cec:	42480000 	.word	0x42480000
    8cf0:	2001cd5c 	.word	0x2001cd5c
    8cf4:	f3af 8000 	nop.w
    8cf8:	f3af 8000 	nop.w
    8cfc:	f3af 8000 	nop.w

00008d00 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8d00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8d04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8d2c <VZhighshelfSetGain+0x2c>
{
    8d08:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8d0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8d0e:	4605      	mov	r5, r0
    8d10:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8d12:	eeb0 0a67 	vmov.f32	s0, s15
    8d16:	f003 f8fb 	bl	bf10 <__dbToATableLookup_veneer>
    8d1a:	4b05      	ldr	r3, [pc, #20]	; (8d30 <VZhighshelfSetGain+0x30>)
    8d1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8d28:	f003 b98a 	b.w	c040 <__tVZFilterHS_setGain_veneer>
    8d2c:	42480000 	.word	0x42480000
    8d30:	2001cd4c 	.word	0x2001cd4c
    8d34:	f3af 8000 	nop.w
    8d38:	f3af 8000 	nop.w
    8d3c:	f3af 8000 	nop.w

00008d40 <VZbandrejectSetGain>:
    8d40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8d44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8d48:	b538      	push	{r3, r4, r5, lr}
    8d4a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8d4e:	4605      	mov	r5, r0
    8d50:	460c      	mov	r4, r1
    8d52:	eeb0 0a67 	vmov.f32	s0, s15
    8d56:	f003 f8db 	bl	bf10 <__dbToATableLookup_veneer>
    8d5a:	4b04      	ldr	r3, [pc, #16]	; (8d6c <VZbandrejectSetGain+0x2c>)
    8d5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8d60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8d64:	ed83 0a00 	vstr	s0, [r3]
    8d68:	bd38      	pop	{r3, r4, r5, pc}
    8d6a:	bf00      	nop
    8d6c:	2001ced8 	.word	0x2001ced8
    8d70:	f3af 8000 	nop.w
    8d74:	f3af 8000 	nop.w
    8d78:	f3af 8000 	nop.w
    8d7c:	f3af 8000 	nop.w

00008d80 <LadderLowpassSetGain>:
    8d80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8d84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8d88:	b538      	push	{r3, r4, r5, lr}
    8d8a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8d8e:	4605      	mov	r5, r0
    8d90:	460c      	mov	r4, r1
    8d92:	eeb0 0a67 	vmov.f32	s0, s15
    8d96:	f003 f8bb 	bl	bf10 <__dbToATableLookup_veneer>
    8d9a:	4b04      	ldr	r3, [pc, #16]	; (8dac <LadderLowpassSetGain+0x2c>)
    8d9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8da0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8da4:	ed83 0a00 	vstr	s0, [r3]
    8da8:	bd38      	pop	{r3, r4, r5, pc}
    8daa:	bf00      	nop
    8dac:	2001ced8 	.word	0x2001ced8
    8db0:	f3af 8000 	nop.w
    8db4:	f3af 8000 	nop.w
    8db8:	f3af 8000 	nop.w
    8dbc:	f3af 8000 	nop.w

00008dc0 <envelope_tick>:
{
    8dc0:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    8dc2:	4d1d      	ldr	r5, [pc, #116]	; (8e38 <envelope_tick+0x78>)
{
    8dc4:	4604      	mov	r4, r0
		if (envOn[v])
    8dc6:	782b      	ldrb	r3, [r5, #0]
    8dc8:	bb53      	cbnz	r3, 8e20 <envelope_tick+0x60>
    8dca:	786b      	ldrb	r3, [r5, #1]
    8dcc:	b9e3      	cbnz	r3, 8e08 <envelope_tick+0x48>
    8dce:	78ab      	ldrb	r3, [r5, #2]
    8dd0:	b973      	cbnz	r3, 8df0 <envelope_tick+0x30>
    8dd2:	78eb      	ldrb	r3, [r5, #3]
    8dd4:	b903      	cbnz	r3, 8dd8 <envelope_tick+0x18>
}
    8dd6:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8dd8:	4b18      	ldr	r3, [pc, #96]	; (8e3c <envelope_tick+0x7c>)
    8dda:	1da0      	adds	r0, r4, #6
    8ddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8de0:	f003 f8b2 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    8de4:	4b16      	ldr	r3, [pc, #88]	; (8e40 <envelope_tick+0x80>)
    8de6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8dea:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    8dee:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8df0:	4b12      	ldr	r3, [pc, #72]	; (8e3c <envelope_tick+0x7c>)
    8df2:	1d20      	adds	r0, r4, #4
    8df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8df8:	f003 f8a6 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    8dfc:	4b10      	ldr	r3, [pc, #64]	; (8e40 <envelope_tick+0x80>)
    8dfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8e02:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    8e06:	e7e4      	b.n	8dd2 <envelope_tick+0x12>
    8e08:	4b0c      	ldr	r3, [pc, #48]	; (8e3c <envelope_tick+0x7c>)
    8e0a:	1ca0      	adds	r0, r4, #2
    8e0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e10:	f003 f89a 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    8e14:	4b0a      	ldr	r3, [pc, #40]	; (8e40 <envelope_tick+0x80>)
    8e16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8e1a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    8e1e:	e7d6      	b.n	8dce <envelope_tick+0xe>
    8e20:	4806      	ldr	r0, [pc, #24]	; (8e3c <envelope_tick+0x7c>)
    8e22:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8e26:	f003 f88f 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    8e2a:	4b05      	ldr	r3, [pc, #20]	; (8e40 <envelope_tick+0x80>)
    8e2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8e30:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    8e34:	e7c9      	b.n	8dca <envelope_tick+0xa>
    8e36:	bf00      	nop
    8e38:	2001ce84 	.word	0x2001ce84
    8e3c:	2001ce88 	.word	0x2001ce88
    8e40:	2001d418 	.word	0x2001d418
    8e44:	f3af 8000 	nop.w
    8e48:	f3af 8000 	nop.w
    8e4c:	f3af 8000 	nop.w
    8e50:	f3af 8000 	nop.w
    8e54:	f3af 8000 	nop.w
    8e58:	f3af 8000 	nop.w
    8e5c:	f3af 8000 	nop.w

00008e60 <lfo_tick>:
{
    8e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e64:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8eb4 <lfo_tick+0x54>
    8e68:	b082      	sub	sp, #8
    8e6a:	4d10      	ldr	r5, [pc, #64]	; (8eac <lfo_tick+0x4c>)
    8e6c:	4607      	mov	r7, r0
    8e6e:	4e10      	ldr	r6, [pc, #64]	; (8eb0 <lfo_tick+0x50>)
    8e70:	f108 0904 	add.w	r9, r8, #4
    8e74:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    8e78:	4644      	mov	r4, r8
			float sample = 0.0f;
    8e7a:	f04f 0a00 	mov.w	sl, #0
    8e7e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    8e82:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    8e86:	463a      	mov	r2, r7
    8e88:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    8e8a:	b133      	cbz	r3, 8e9a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    8e8c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    8e8e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    8e92:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    8e94:	9b01      	ldr	r3, [sp, #4]
    8e96:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    8e9a:	454c      	cmp	r4, r9
    8e9c:	f106 0604 	add.w	r6, r6, #4
    8ea0:	f105 0508 	add.w	r5, r5, #8
    8ea4:	d1eb      	bne.n	8e7e <lfo_tick+0x1e>
}
    8ea6:	b002      	add	sp, #8
    8ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8eac:	2001d418 	.word	0x2001d418
    8eb0:	2001cfec 	.word	0x2001cfec
    8eb4:	2001cf88 	.word	0x2001cf88
    8eb8:	f3af 8000 	nop.w
    8ebc:	f3af 8000 	nop.w

00008ec0 <setEnvelopeAttack>:
	a = a + 0.001f;
    8ec0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8ed8 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    8ec4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ec8:	4b04      	ldr	r3, [pc, #16]	; (8edc <setEnvelopeAttack+0x1c>)
    8eca:	ee30 0a27 	vadd.f32	s0, s0, s15
    8ece:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8ed2:	f002 bf35 	b.w	bd40 <__tADSRT_setAttack_veneer>
    8ed6:	bf00      	nop
    8ed8:	3a83126f 	.word	0x3a83126f
    8edc:	2001ce88 	.word	0x2001ce88

00008ee0 <setEnvelopeDecay>:
	d = d + 0.001f;
    8ee0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8ef8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    8ee4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ee8:	4b04      	ldr	r3, [pc, #16]	; (8efc <setEnvelopeDecay+0x1c>)
    8eea:	ee30 0a27 	vadd.f32	s0, s0, s15
    8eee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8ef2:	f003 b84d 	b.w	bf90 <__tADSRT_setDecay_veneer>
    8ef6:	bf00      	nop
    8ef8:	3a83126f 	.word	0x3a83126f
    8efc:	2001ce88 	.word	0x2001ce88

00008f00 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    8f00:	4b03      	ldr	r3, [pc, #12]	; (8f10 <setEnvelopeSustain+0x10>)
    8f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f0a:	f003 b819 	b.w	bf40 <__tADSRT_setSustain_veneer>
    8f0e:	bf00      	nop
    8f10:	2001ce88 	.word	0x2001ce88
    8f14:	f3af 8000 	nop.w
    8f18:	f3af 8000 	nop.w
    8f1c:	f3af 8000 	nop.w

00008f20 <setEnvelopeRelease>:
	r = r + 0.001f;
    8f20:	eddf 7a05 	vldr	s15, [pc, #20]	; 8f38 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    8f24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f28:	4b04      	ldr	r3, [pc, #16]	; (8f3c <setEnvelopeRelease+0x1c>)
    8f2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    8f2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f32:	f002 bf91 	b.w	be58 <__tADSRT_setRelease_veneer>
    8f36:	bf00      	nop
    8f38:	3a83126f 	.word	0x3a83126f
    8f3c:	2001ce88 	.word	0x2001ce88

00008f40 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    8f40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8f44:	eddf 6a08 	vldr	s13, [pc, #32]	; 8f68 <setEnvelopeLeak+0x28>
    8f48:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8f6c <setEnvelopeLeak+0x2c>
    8f4c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8f50:	4b07      	ldr	r3, [pc, #28]	; (8f70 <setEnvelopeLeak+0x30>)
    8f52:	ee77 7ac0 	vsub.f32	s15, s15, s0
    8f56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f5a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    8f5e:	eeb0 0a47 	vmov.f32	s0, s14
    8f62:	f002 bfb5 	b.w	bed0 <__tADSRT_setLeakFactor_veneer>
    8f66:	bf00      	nop
    8f68:	3851b717 	.word	0x3851b717
    8f6c:	3f7ffcb9 	.word	0x3f7ffcb9
    8f70:	2001ce88 	.word	0x2001ce88
    8f74:	f3af 8000 	nop.w
    8f78:	f3af 8000 	nop.w
    8f7c:	f3af 8000 	nop.w

00008f80 <setAmp>:
	amplitude[string] = amp;
    8f80:	4b02      	ldr	r3, [pc, #8]	; (8f8c <setAmp+0xc>)
    8f82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8f86:	ed81 0a00 	vstr	s0, [r1]
}
    8f8a:	4770      	bx	lr
    8f8c:	2001cd7c 	.word	0x2001cd7c
    8f90:	f3af 8000 	nop.w
    8f94:	f3af 8000 	nop.w
    8f98:	f3af 8000 	nop.w
    8f9c:	f3af 8000 	nop.w

00008fa0 <setMaster>:
	finalMaster[string] = amp;
    8fa0:	4b02      	ldr	r3, [pc, #8]	; (8fac <setMaster+0xc>)
    8fa2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8fa6:	ed81 0a00 	vstr	s0, [r1]
}
    8faa:	4770      	bx	lr
    8fac:	2001cef8 	.word	0x2001cef8
    8fb0:	f3af 8000 	nop.w
    8fb4:	f3af 8000 	nop.w
    8fb8:	f3af 8000 	nop.w
    8fbc:	f3af 8000 	nop.w

00008fc0 <setTranspose>:
	transpose = in;
    8fc0:	4b01      	ldr	r3, [pc, #4]	; (8fc8 <setTranspose+0x8>)
    8fc2:	ed83 0a00 	vstr	s0, [r3]
}
    8fc6:	4770      	bx	lr
    8fc8:	2001d580 	.word	0x2001d580
    8fcc:	f3af 8000 	nop.w
    8fd0:	f3af 8000 	nop.w
    8fd4:	f3af 8000 	nop.w
    8fd8:	f3af 8000 	nop.w
    8fdc:	f3af 8000 	nop.w

00008fe0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    8fe0:	eddf 7a03 	vldr	s15, [pc, #12]	; 8ff0 <setPitchBendRange+0x10>
    8fe4:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <setPitchBendRange+0x14>)
    8fe6:	ee20 0a27 	vmul.f32	s0, s0, s15
    8fea:	ed83 0a00 	vstr	s0, [r3]
}
    8fee:	4770      	bx	lr
    8ff0:	39000200 	.word	0x39000200
    8ff4:	200008d0 	.word	0x200008d0
    8ff8:	f3af 8000 	nop.w
    8ffc:	f3af 8000 	nop.w

00009000 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    9000:	4802      	ldr	r0, [pc, #8]	; (900c <setFinalLowpass+0xc>)
    9002:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9006:	f003 b833 	b.w	c070 <__tSVF_setFreqFast_veneer>
    900a:	bf00      	nop
    900c:	2001cef0 	.word	0x2001cef0
    9010:	f3af 8000 	nop.w
    9014:	f3af 8000 	nop.w
    9018:	f3af 8000 	nop.w
    901c:	f3af 8000 	nop.w

00009020 <tickMappings>:
{
    9020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    9024:	f8df 915c 	ldr.w	r9, [pc, #348]	; 9184 <tickMappings+0x164>
	interruptChecker = 0;
    9028:	f04f 0b00 	mov.w	fp, #0
    902c:	4b51      	ldr	r3, [pc, #324]	; (9174 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    902e:	f899 2000 	ldrb.w	r2, [r9]
{
    9032:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    9036:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    903a:	2a00      	cmp	r2, #0
    903c:	f000 8087 	beq.w	914e <tickMappings+0x12e>
    9040:	4c4d      	ldr	r4, [pc, #308]	; (9178 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    9042:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9188 <tickMappings+0x168>
    9046:	e004      	b.n	9052 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    9048:	f10b 0b01 	add.w	fp, fp, #1
    904c:	344c      	adds	r4, #76	; 0x4c
    904e:	455a      	cmp	r2, fp
    9050:	dd7d      	ble.n	914e <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    9052:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    9056:	2bff      	cmp	r3, #255	; 0xff
    9058:	d0f6      	beq.n	9048 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    905a:	f898 3000 	ldrb.w	r3, [r8]
    905e:	2b00      	cmp	r3, #0
    9060:	d0f2      	beq.n	9048 <tickMappings+0x28>
    9062:	4b46      	ldr	r3, [pc, #280]	; (917c <tickMappings+0x15c>)
    9064:	4626      	mov	r6, r4
    9066:	2500      	movs	r5, #0
    9068:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    906c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    9070:	2b00      	cmp	r3, #0
    9072:	d070      	beq.n	9156 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9074:	6832      	ldr	r2, [r6, #0]
    9076:	69f3      	ldr	r3, [r6, #28]
    9078:	ed92 8a00 	vldr	s16, [r2]
    907c:	ed93 7a00 	vldr	s14, [r3]
    9080:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    9084:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    9088:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    908a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    908e:	2900      	cmp	r1, #0
    9090:	d069      	beq.n	9166 <tickMappings+0x146>
							smoothedValue += sum;
    9092:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    9096:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 9180 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    909a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    909e:	b183      	cbz	r3, 90c2 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    90a0:	68b2      	ldr	r2, [r6, #8]
    90a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    90a4:	ed92 7a00 	vldr	s14, [r2]
    90a8:	ed93 6a00 	vldr	s12, [r3]
    90ac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    90b0:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    90b4:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    90b6:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    90ba:	2900      	cmp	r1, #0
    90bc:	d156      	bne.n	916c <tickMappings+0x14c>
							unsmoothedValue += sum;
    90be:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    90c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    90c6:	b183      	cbz	r3, 90ea <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    90c8:	6932      	ldr	r2, [r6, #16]
    90ca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    90cc:	ed92 7a00 	vldr	s14, [r2]
    90d0:	ed93 6a00 	vldr	s12, [r3]
    90d4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    90d8:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    90dc:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    90de:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    90e2:	2900      	cmp	r1, #0
    90e4:	d13c      	bne.n	9160 <tickMappings+0x140>
							unsmoothedValue += sum;
    90e6:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    90ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    90ee:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    90f0:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    90f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    90f6:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    90fa:	ee37 0a80 	vadd.f32	s0, s15, s0
    90fe:	f003 f843 	bl	c188 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    9102:	4638      	mov	r0, r7
    9104:	f003 f88c 	bl	c220 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9108:	f854 ac04 	ldr.w	sl, [r4, #-4]
    910c:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    9110:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9112:	f8da 3010 	ldr.w	r3, [sl, #16]
    9116:	4798      	blx	r3
    9118:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    911a:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    911c:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    911e:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    9122:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    9126:	f854 0c04 	ldr.w	r0, [r4, #-4]
    912a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    912e:	6942      	ldr	r2, [r0, #20]
    9130:	7e00      	ldrb	r0, [r0, #24]
    9132:	ed93 0a00 	vldr	s0, [r3]
    9136:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    9138:	f898 3000 	ldrb.w	r3, [r8]
    913c:	42ab      	cmp	r3, r5
    913e:	dc95      	bgt.n	906c <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    9140:	f899 2000 	ldrb.w	r2, [r9]
    9144:	f10b 0b01 	add.w	fp, fp, #1
    9148:	344c      	adds	r4, #76	; 0x4c
    914a:	455a      	cmp	r2, fp
    914c:	dc81      	bgt.n	9052 <tickMappings+0x32>
}
    914e:	ecbd 8b02 	vpop	{d8}
    9152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    9156:	eddf 7a0a 	vldr	s15, [pc, #40]	; 9180 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    915a:	eeb0 8a67 	vmov.f32	s16, s15
    915e:	e79c      	b.n	909a <tickMappings+0x7a>
							smoothedValue += sum;
    9160:	ee77 7a87 	vadd.f32	s15, s15, s14
    9164:	e7c1      	b.n	90ea <tickMappings+0xca>
				float smoothedValue = 0.0f;
    9166:	eddf 7a06 	vldr	s15, [pc, #24]	; 9180 <tickMappings+0x160>
    916a:	e796      	b.n	909a <tickMappings+0x7a>
							smoothedValue += sum;
    916c:	ee77 7a87 	vadd.f32	s15, s15, s14
    9170:	e7a7      	b.n	90c2 <tickMappings+0xa2>
    9172:	bf00      	nop
    9174:	200164df 	.word	0x200164df
    9178:	2001859c 	.word	0x2001859c
    917c:	2001d06c 	.word	0x2001d06c
    9180:	00000000 	.word	0x00000000
    9184:	20018f20 	.word	0x20018f20
    9188:	20000694 	.word	0x20000694
    918c:	f3af 8000 	nop.w
    9190:	f3af 8000 	nop.w
    9194:	f3af 8000 	nop.w
    9198:	f3af 8000 	nop.w
    919c:	f3af 8000 	nop.w

000091a0 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    91a0:	4b05      	ldr	r3, [pc, #20]	; (91b8 <lfoSawSquareTick+0x18>)
    91a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    91a6:	b510      	push	{r4, lr}
    91a8:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    91aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    91ae:	f002 fe17 	bl	bde0 <__tSawSquareLFO_tick_veneer>
    91b2:	ed84 0a00 	vstr	s0, [r4]
}
    91b6:	bd10      	pop	{r4, pc}
    91b8:	2001cfcc 	.word	0x2001cfcc
    91bc:	f3af 8000 	nop.w

000091c0 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    91c0:	4b05      	ldr	r3, [pc, #20]	; (91d8 <lfoSineTriTick+0x18>)
    91c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    91c6:	b510      	push	{r4, lr}
    91c8:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    91ca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    91ce:	f002 fdbf 	bl	bd50 <__tSineTriLFO_tick_veneer>
    91d2:	ed84 0a00 	vstr	s0, [r4]
}
    91d6:	bd10      	pop	{r4, pc}
    91d8:	2001d01c 	.word	0x2001d01c
    91dc:	f3af 8000 	nop.w

000091e0 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    91e0:	4b05      	ldr	r3, [pc, #20]	; (91f8 <lfoSineTick+0x18>)
    91e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    91e6:	b510      	push	{r4, lr}
    91e8:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    91ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    91ee:	f002 ffb3 	bl	c158 <__tCycle_tick_veneer>
    91f2:	ed84 0a00 	vstr	s0, [r4]
}
    91f6:	bd10      	pop	{r4, pc}
    91f8:	2001cffc 	.word	0x2001cffc
    91fc:	f3af 8000 	nop.w

00009200 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    9200:	4b05      	ldr	r3, [pc, #20]	; (9218 <lfoTriTick+0x18>)
    9202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9206:	b510      	push	{r4, lr}
    9208:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    920a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    920e:	f002 ff4b 	bl	c0a8 <__tTriLFO_tick_veneer>
    9212:	ed84 0a00 	vstr	s0, [r4]
}
    9216:	bd10      	pop	{r4, pc}
    9218:	2001d03c 	.word	0x2001d03c
    921c:	f3af 8000 	nop.w

00009220 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    9220:	4b08      	ldr	r3, [pc, #32]	; (9244 <lfoSawTick+0x24>)
    9222:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9226:	b510      	push	{r4, lr}
    9228:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    922a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    922e:	f002 ff17 	bl	c060 <__tIntPhasor_tick_veneer>
    9232:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    9236:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    923a:	eee0 7a07 	vfma.f32	s15, s0, s14
    923e:	edc4 7a00 	vstr	s15, [r4]
}
    9242:	bd10      	pop	{r4, pc}
    9244:	2001cfac 	.word	0x2001cfac
    9248:	f3af 8000 	nop.w
    924c:	f3af 8000 	nop.w
    9250:	f3af 8000 	nop.w
    9254:	f3af 8000 	nop.w
    9258:	f3af 8000 	nop.w
    925c:	f3af 8000 	nop.w

00009260 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    9260:	4b05      	ldr	r3, [pc, #20]	; (9278 <lfoPulseTick+0x18>)
    9262:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9266:	b510      	push	{r4, lr}
    9268:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    926a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    926e:	f002 fdc3 	bl	bdf8 <__tSquareLFO_tick_veneer>
    9272:	ed84 0a00 	vstr	s0, [r4]
}
    9276:	bd10      	pop	{r4, pc}
    9278:	2001cf8c 	.word	0x2001cf8c
    927c:	f3af 8000 	nop.w

00009280 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    9280:	4b03      	ldr	r3, [pc, #12]	; (9290 <lfoSawSquareSetRate+0x10>)
    9282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    928a:	f002 be31 	b.w	bef0 <__tSawSquareLFO_setFreq_veneer>
    928e:	bf00      	nop
    9290:	2001cfcc 	.word	0x2001cfcc
    9294:	f3af 8000 	nop.w
    9298:	f3af 8000 	nop.w
    929c:	f3af 8000 	nop.w

000092a0 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    92a0:	4b03      	ldr	r3, [pc, #12]	; (92b0 <lfoSineTriSetRate+0x10>)
    92a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92aa:	f002 bd8d 	b.w	bdc8 <__tSineTriLFO_setFreq_veneer>
    92ae:	bf00      	nop
    92b0:	2001d01c 	.word	0x2001d01c
    92b4:	f3af 8000 	nop.w
    92b8:	f3af 8000 	nop.w
    92bc:	f3af 8000 	nop.w

000092c0 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    92c0:	4b03      	ldr	r3, [pc, #12]	; (92d0 <lfoSineSetRate+0x10>)
    92c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92ca:	f002 bf31 	b.w	c130 <__tCycle_setFreq_veneer>
    92ce:	bf00      	nop
    92d0:	2001cffc 	.word	0x2001cffc
    92d4:	f3af 8000 	nop.w
    92d8:	f3af 8000 	nop.w
    92dc:	f3af 8000 	nop.w

000092e0 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    92e0:	4b03      	ldr	r3, [pc, #12]	; (92f0 <lfoTriSetRate+0x10>)
    92e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92ea:	f002 bfc5 	b.w	c278 <__tTriLFO_setFreq_veneer>
    92ee:	bf00      	nop
    92f0:	2001d03c 	.word	0x2001d03c
    92f4:	f3af 8000 	nop.w
    92f8:	f3af 8000 	nop.w
    92fc:	f3af 8000 	nop.w

00009300 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    9300:	4b03      	ldr	r3, [pc, #12]	; (9310 <lfoSawSetRate+0x10>)
    9302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    930a:	f002 bf0d 	b.w	c128 <__tIntPhasor_setFreq_veneer>
    930e:	bf00      	nop
    9310:	2001cfac 	.word	0x2001cfac
    9314:	f3af 8000 	nop.w
    9318:	f3af 8000 	nop.w
    931c:	f3af 8000 	nop.w

00009320 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    9320:	4b03      	ldr	r3, [pc, #12]	; (9330 <lfoPulseSetRate+0x10>)
    9322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    932a:	f002 bcbd 	b.w	bca8 <__tSquareLFO_setFreq_veneer>
    932e:	bf00      	nop
    9330:	2001cf8c 	.word	0x2001cf8c
    9334:	f3af 8000 	nop.w
    9338:	f3af 8000 	nop.w
    933c:	f3af 8000 	nop.w

00009340 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    9340:	4b03      	ldr	r3, [pc, #12]	; (9350 <lfoSawSquareSetPhase+0x10>)
    9342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    934a:	f002 be75 	b.w	c038 <__tSawSquareLFO_setPhase_veneer>
    934e:	bf00      	nop
    9350:	2001cfcc 	.word	0x2001cfcc
    9354:	f3af 8000 	nop.w
    9358:	f3af 8000 	nop.w
    935c:	f3af 8000 	nop.w

00009360 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    9360:	4b03      	ldr	r3, [pc, #12]	; (9370 <lfoSineTriSetPhase+0x10>)
    9362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    936a:	f002 bd7d 	b.w	be68 <__tSineTriLFO_setPhase_veneer>
    936e:	bf00      	nop
    9370:	2001d01c 	.word	0x2001d01c
    9374:	f3af 8000 	nop.w
    9378:	f3af 8000 	nop.w
    937c:	f3af 8000 	nop.w

00009380 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    9380:	4b03      	ldr	r3, [pc, #12]	; (9390 <lfoSineSetPhase+0x10>)
    9382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    938a:	f002 bf5d 	b.w	c248 <__tCycle_setPhase_veneer>
    938e:	bf00      	nop
    9390:	2001cffc 	.word	0x2001cffc
    9394:	f3af 8000 	nop.w
    9398:	f3af 8000 	nop.w
    939c:	f3af 8000 	nop.w

000093a0 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    93a0:	4b03      	ldr	r3, [pc, #12]	; (93b0 <lfoTriSetPhase+0x10>)
    93a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    93a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    93aa:	f002 bc79 	b.w	bca0 <__tTriLFO_setPhase_veneer>
    93ae:	bf00      	nop
    93b0:	2001d03c 	.word	0x2001d03c
    93b4:	f3af 8000 	nop.w
    93b8:	f3af 8000 	nop.w
    93bc:	f3af 8000 	nop.w

000093c0 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    93c0:	4b03      	ldr	r3, [pc, #12]	; (93d0 <lfoSawSetPhase+0x10>)
    93c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    93c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    93ca:	f002 bf45 	b.w	c258 <__tIntPhasor_setPhase_veneer>
    93ce:	bf00      	nop
    93d0:	2001cfac 	.word	0x2001cfac
    93d4:	f3af 8000 	nop.w
    93d8:	f3af 8000 	nop.w
    93dc:	f3af 8000 	nop.w

000093e0 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    93e0:	4b03      	ldr	r3, [pc, #12]	; (93f0 <lfoPulseSetPhase+0x10>)
    93e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    93e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    93ea:	f002 bc51 	b.w	bc90 <__tSquareLFO_setPhase_veneer>
    93ee:	bf00      	nop
    93f0:	2001cf8c 	.word	0x2001cf8c
    93f4:	f3af 8000 	nop.w
    93f8:	f3af 8000 	nop.w
    93fc:	f3af 8000 	nop.w

00009400 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    9400:	4b03      	ldr	r3, [pc, #12]	; (9410 <lfoSawSquareSetShape+0x10>)
    9402:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    940a:	f002 beed 	b.w	c1e8 <__tSawSquareLFO_setShape_veneer>
    940e:	bf00      	nop
    9410:	2001cfcc 	.word	0x2001cfcc
    9414:	f3af 8000 	nop.w
    9418:	f3af 8000 	nop.w
    941c:	f3af 8000 	nop.w

00009420 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    9420:	4b03      	ldr	r3, [pc, #12]	; (9430 <lfoSineTriSetShape+0x10>)
    9422:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    942a:	f002 bd05 	b.w	be38 <__tSineTriLFO_setShape_veneer>
    942e:	bf00      	nop
    9430:	2001d01c 	.word	0x2001d01c
    9434:	f3af 8000 	nop.w
    9438:	f3af 8000 	nop.w
    943c:	f3af 8000 	nop.w

00009440 <lfoSineSetShape>:
}
    9440:	4770      	bx	lr
    9442:	bf00      	nop
    9444:	f3af 8000 	nop.w
    9448:	f3af 8000 	nop.w
    944c:	f3af 8000 	nop.w
    9450:	f3af 8000 	nop.w
    9454:	f3af 8000 	nop.w
    9458:	f3af 8000 	nop.w
    945c:	f3af 8000 	nop.w

00009460 <lfoTriSetShape>:
    9460:	4770      	bx	lr
    9462:	bf00      	nop
    9464:	f3af 8000 	nop.w
    9468:	f3af 8000 	nop.w
    946c:	f3af 8000 	nop.w
    9470:	f3af 8000 	nop.w
    9474:	f3af 8000 	nop.w
    9478:	f3af 8000 	nop.w
    947c:	f3af 8000 	nop.w

00009480 <lfoSawSetShape>:
    9480:	4770      	bx	lr
    9482:	bf00      	nop
    9484:	f3af 8000 	nop.w
    9488:	f3af 8000 	nop.w
    948c:	f3af 8000 	nop.w
    9490:	f3af 8000 	nop.w
    9494:	f3af 8000 	nop.w
    9498:	f3af 8000 	nop.w
    949c:	f3af 8000 	nop.w

000094a0 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    94a0:	4b03      	ldr	r3, [pc, #12]	; (94b0 <lfoPulseSetShape+0x10>)
    94a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    94a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    94aa:	f002 bdf5 	b.w	c098 <__tSquareLFO_setPulseWidth_veneer>
    94ae:	bf00      	nop
    94b0:	2001cf8c 	.word	0x2001cf8c
    94b4:	f3af 8000 	nop.w
    94b8:	f3af 8000 	nop.w
    94bc:	f3af 8000 	nop.w

000094c0 <param1Linear>:
	param1[v][string] = value;
    94c0:	4b03      	ldr	r3, [pc, #12]	; (94d0 <param1Linear+0x10>)
    94c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    94c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    94ca:	ed83 0a00 	vstr	s0, [r3]
}
    94ce:	4770      	bx	lr
    94d0:	2001d234 	.word	0x2001d234
    94d4:	f3af 8000 	nop.w
    94d8:	f3af 8000 	nop.w
    94dc:	f3af 8000 	nop.w

000094e0 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    94e0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    94e4:	b538      	push	{r3, r4, r5, lr}
    94e6:	4605      	mov	r5, r0
    94e8:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    94ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    94ee:	f002 fd0f 	bl	bf10 <__dbToATableLookup_veneer>
    94f2:	4b04      	ldr	r3, [pc, #16]	; (9504 <clipperGainSet+0x24>)
    94f4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    94f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    94fc:	ed83 0a00 	vstr	s0, [r3]
}
    9500:	bd38      	pop	{r3, r4, r5, pc}
    9502:	bf00      	nop
    9504:	2001d234 	.word	0x2001d234
    9508:	f3af 8000 	nop.w
    950c:	f3af 8000 	nop.w
    9510:	f3af 8000 	nop.w
    9514:	f3af 8000 	nop.w
    9518:	f3af 8000 	nop.w
    951c:	f3af 8000 	nop.w

00009520 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    9520:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    9524:	b538      	push	{r3, r4, r5, lr}
    9526:	4605      	mov	r5, r0
    9528:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    952a:	ee20 0a27 	vmul.f32	s0, s0, s15
    952e:	f002 fcef 	bl	bf10 <__dbToATableLookup_veneer>
    9532:	4b04      	ldr	r3, [pc, #16]	; (9544 <wavefolderParam1+0x24>)
    9534:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9538:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    953c:	ed83 0a00 	vstr	s0, [r3]
}
    9540:	bd38      	pop	{r3, r4, r5, pc}
    9542:	bf00      	nop
    9544:	2001d234 	.word	0x2001d234
    9548:	f3af 8000 	nop.w
    954c:	f3af 8000 	nop.w
    9550:	f3af 8000 	nop.w
    9554:	f3af 8000 	nop.w
    9558:	f3af 8000 	nop.w
    955c:	f3af 8000 	nop.w

00009560 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    9560:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9564:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9568:	4b07      	ldr	r3, [pc, #28]	; (9588 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    956a:	4a08      	ldr	r2, [pc, #32]	; (958c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    956c:	ee70 6a27 	vadd.f32	s13, s0, s15
    9570:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    9574:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    9578:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    957c:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    9580:	ed83 7a00 	vstr	s14, [r3]
}
    9584:	4770      	bx	lr
    9586:	bf00      	nop
    9588:	2001cf68 	.word	0x2001cf68
    958c:	2001d274 	.word	0x2001d274
    9590:	f3af 8000 	nop.w
    9594:	f3af 8000 	nop.w
    9598:	f3af 8000 	nop.w
    959c:	f3af 8000 	nop.w

000095a0 <tiltParam1>:
{
    95a0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    95a2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    95a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    95aa:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    95ae:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    95b2:	0084      	lsls	r4, r0, #2
{
    95b4:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    95b8:	eee0 7a68 	vfms.f32	s15, s0, s17
    95bc:	eeb0 0a67 	vmov.f32	s0, s15
    95c0:	f002 fca6 	bl	bf10 <__dbToATableLookup_veneer>
    95c4:	4808      	ldr	r0, [pc, #32]	; (95e8 <tiltParam1+0x48>)
    95c6:	4420      	add	r0, r4
    95c8:	f002 fc02 	bl	bdd0 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    95cc:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    95d0:	eea8 0a28 	vfma.f32	s0, s16, s17
    95d4:	f002 fc9c 	bl	bf10 <__dbToATableLookup_veneer>
    95d8:	4804      	ldr	r0, [pc, #16]	; (95ec <tiltParam1+0x4c>)
}
    95da:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    95de:	4420      	add	r0, r4
}
    95e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    95e4:	f002 bd2c 	b.w	c040 <__tVZFilterHS_setGain_veneer>
    95e8:	2001d3a8 	.word	0x2001d3a8
    95ec:	2001d3c8 	.word	0x2001d3c8
    95f0:	f3af 8000 	nop.w
    95f4:	f3af 8000 	nop.w
    95f8:	f3af 8000 	nop.w
    95fc:	f3af 8000 	nop.w

00009600 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    9600:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    9604:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 9638 <tiltParam2+0x38>
    9608:	eddf 7a0c 	vldr	s15, [pc, #48]	; 963c <tiltParam2+0x3c>
    960c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 9640 <tiltParam2+0x40>
    9610:	eee0 0a07 	vfma.f32	s1, s0, s14
    9614:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 9644 <tiltParam2+0x44>
{
    9618:	b538      	push	{r3, r4, r5, lr}
    961a:	4605      	mov	r5, r0
    961c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    961e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    9622:	f002 fce1 	bl	bfe8 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    9626:	4b08      	ldr	r3, [pc, #32]	; (9648 <tiltParam2+0x48>)
    9628:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    962c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    9630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    9634:	f002 bcec 	b.w	c010 <__tVZFilterBell_setFreq_veneer>
    9638:	429a0000 	.word	0x429a0000
    963c:	420fb824 	.word	0x420fb824
    9640:	457ff000 	.word	0x457ff000
    9644:	00000000 	.word	0x00000000
    9648:	2001cdb4 	.word	0x2001cdb4
    964c:	f3af 8000 	nop.w
    9650:	f3af 8000 	nop.w
    9654:	f3af 8000 	nop.w
    9658:	f3af 8000 	nop.w
    965c:	f3af 8000 	nop.w

00009660 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    9660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    9664:	4b06      	ldr	r3, [pc, #24]	; (9680 <tiltParam3+0x20>)
    9666:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    966a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    966e:	ee30 0a07 	vadd.f32	s0, s0, s14
    9672:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9676:	ee20 0a27 	vmul.f32	s0, s0, s15
    967a:	f002 bd49 	b.w	c110 <__tVZFilterBell_setBandwidth_veneer>
    967e:	bf00      	nop
    9680:	2001cdb4 	.word	0x2001cdb4
    9684:	f3af 8000 	nop.w
    9688:	f3af 8000 	nop.w
    968c:	f3af 8000 	nop.w
    9690:	f3af 8000 	nop.w
    9694:	f3af 8000 	nop.w
    9698:	f3af 8000 	nop.w
    969c:	f3af 8000 	nop.w

000096a0 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    96a0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    96a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 96cc <tiltParam4+0x2c>
{
    96a8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    96aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    96ae:	4605      	mov	r5, r0
    96b0:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    96b2:	eeb0 0a67 	vmov.f32	s0, s15
    96b6:	f002 fc2b 	bl	bf10 <__dbToATableLookup_veneer>
    96ba:	4b05      	ldr	r3, [pc, #20]	; (96d0 <tiltParam4+0x30>)
    96bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    96c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    96c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    96c8:	f002 bbd2 	b.w	be70 <__tVZFilterBell_setGain_veneer>
    96cc:	42080000 	.word	0x42080000
    96d0:	2001cdb4 	.word	0x2001cdb4
    96d4:	f3af 8000 	nop.w
    96d8:	f3af 8000 	nop.w
    96dc:	f3af 8000 	nop.w

000096e0 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    96e0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    96e4:	4b04      	ldr	r3, [pc, #16]	; (96f8 <compressorParam1+0x18>)
    96e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    96ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    96ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    96f2:	ed83 0a03 	vstr	s0, [r3, #12]
}
    96f6:	4770      	bx	lr
    96f8:	2001cdd4 	.word	0x2001cdd4
    96fc:	f3af 8000 	nop.w

00009700 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    9700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9704:	4b0a      	ldr	r3, [pc, #40]	; (9730 <compressorParam2+0x30>)
    9706:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    970a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    970e:	eeb0 7a67 	vmov.f32	s14, s15
    9712:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    9716:	eea0 7a26 	vfma.f32	s14, s0, s13
    971a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    971e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9722:	edd3 6a04 	vldr	s13, [r3, #16]
    9726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    972a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    972e:	4770      	bx	lr
    9730:	2001cdd4 	.word	0x2001cdd4
    9734:	f3af 8000 	nop.w
    9738:	f3af 8000 	nop.w
    973c:	f3af 8000 	nop.w

00009740 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    9740:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    9744:	4b04      	ldr	r3, [pc, #16]	; (9758 <compressorParam3+0x18>)
    9746:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    974a:	ee20 0a27 	vmul.f32	s0, s0, s15
    974e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9752:	ed83 0a06 	vstr	s0, [r3, #24]
}
    9756:	4770      	bx	lr
    9758:	2001cdd4 	.word	0x2001cdd4
    975c:	f3af 8000 	nop.w

00009760 <compressorParam4>:
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9760:	4b0b      	ldr	r3, [pc, #44]	; (9790 <compressorParam4+0x30>)
    9762:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    9766:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 9794 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    976a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    976e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9770:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    9774:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9778:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    977c:	ee20 0a07 	vmul.f32	s0, s0, s14
    9780:	ee87 0a80 	vdiv.f32	s0, s15, s0
    9784:	f002 fd38 	bl	c1f8 <__fastExp4_veneer>
    9788:	ed84 0a01 	vstr	s0, [r4, #4]
}
    978c:	bd10      	pop	{r4, pc}
    978e:	bf00      	nop
    9790:	2001cdd4 	.word	0x2001cdd4
    9794:	3a83126f 	.word	0x3a83126f
    9798:	f3af 8000 	nop.w
    979c:	f3af 8000 	nop.w

000097a0 <compressorParam5>:
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    97a0:	4b0b      	ldr	r3, [pc, #44]	; (97d0 <compressorParam5+0x30>)
    97a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    97a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 97d4 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    97aa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    97ae:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    97b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    97b4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    97b8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    97bc:	ee20 0a07 	vmul.f32	s0, s0, s14
    97c0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    97c4:	f002 fd18 	bl	c1f8 <__fastExp4_veneer>
    97c8:	ed84 0a02 	vstr	s0, [r4, #8]
}
    97cc:	bd10      	pop	{r4, pc}
    97ce:	bf00      	nop
    97d0:	2001cdd4 	.word	0x2001cdd4
    97d4:	3a83126f 	.word	0x3a83126f
    97d8:	f3af 8000 	nop.w
    97dc:	f3af 8000 	nop.w

000097e0 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    97e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    97e4:	4b05      	ldr	r3, [pc, #20]	; (97fc <offsetParam2+0x1c>)
    97e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    97ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    97ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    97f2:	eee0 7a07 	vfma.f32	s15, s0, s14
    97f6:	edc3 7a00 	vstr	s15, [r3]
}
    97fa:	4770      	bx	lr
    97fc:	2001d254 	.word	0x2001d254

00009800 <param2Linear>:
	param2[v][string] = value;
    9800:	4b03      	ldr	r3, [pc, #12]	; (9810 <param2Linear+0x10>)
    9802:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9806:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    980a:	ed83 0a00 	vstr	s0, [r3]
}
    980e:	4770      	bx	lr
    9810:	2001d254 	.word	0x2001d254
    9814:	f3af 8000 	nop.w
    9818:	f3af 8000 	nop.w
    981c:	f3af 8000 	nop.w

00009820 <param3Linear>:
	param3[v][string] = value;
    9820:	4b03      	ldr	r3, [pc, #12]	; (9830 <param3Linear+0x10>)
    9822:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9826:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    982a:	ed83 0a00 	vstr	s0, [r3]
}
    982e:	4770      	bx	lr
    9830:	2001d274 	.word	0x2001d274
    9834:	f3af 8000 	nop.w
    9838:	f3af 8000 	nop.w
    983c:	f3af 8000 	nop.w

00009840 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    9840:	eddf 6a10 	vldr	s13, [pc, #64]	; 9884 <param3Soft+0x44>
    9844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    9848:	eddf 7a0f 	vldr	s15, [pc, #60]	; 9888 <param3Soft+0x48>
    984c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9850:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 988c <param3Soft+0x4c>
    9854:	eee0 7a26 	vfma.f32	s15, s0, s13
    9858:	4a0d      	ldr	r2, [pc, #52]	; (9890 <param3Soft+0x50>)
    985a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    985e:	4b0d      	ldr	r3, [pc, #52]	; (9894 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    9860:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    9864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9868:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    986c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    9870:	eee5 6a86 	vfma.f32	s13, s11, s12
    9874:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9878:	eec7 6a27 	vdiv.f32	s13, s14, s15
    987c:	edc3 6a00 	vstr	s13, [r3]
}
    9880:	4770      	bx	lr
    9882:	bf00      	nop
    9884:	3f7d70a4 	.word	0x3f7d70a4
    9888:	3c23d70a 	.word	0x3c23d70a
    988c:	3eaaaaaa 	.word	0x3eaaaaaa
    9890:	2001d274 	.word	0x2001d274
    9894:	2001d37c 	.word	0x2001d37c
    9898:	f3af 8000 	nop.w
    989c:	f3af 8000 	nop.w

000098a0 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    98a0:	eddf 6a17 	vldr	s13, [pc, #92]	; 9900 <param3Hard+0x60>
    98a4:	eddf 7a17 	vldr	s15, [pc, #92]	; 9904 <param3Hard+0x64>
    98a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9908 <param3Hard+0x68>
    98ac:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    98b0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    98b2:	4b16      	ldr	r3, [pc, #88]	; (990c <param3Hard+0x6c>)
    98b4:	0045      	lsls	r5, r0, #1
    98b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    98ba:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    98bc:	ee27 0a87 	vmul.f32	s0, s15, s14
    98c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    98c4:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    98c8:	f002 fc6a 	bl	c1a0 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    98cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
    98d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98d4:	d00a      	beq.n	98ec <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    98d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    98da:	4b0d      	ldr	r3, [pc, #52]	; (9910 <param3Hard+0x70>)
    98dc:	4425      	add	r5, r4
    98de:	eec7 7a00 	vdiv.f32	s15, s14, s0
    98e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    98e6:	edc3 7a00 	vstr	s15, [r3]
}
    98ea:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    98ec:	4b08      	ldr	r3, [pc, #32]	; (9910 <param3Hard+0x70>)
    98ee:	4425      	add	r5, r4
    98f0:	eddf 7a08 	vldr	s15, [pc, #32]	; 9914 <param3Hard+0x74>
    98f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    98f8:	edc3 7a00 	vstr	s15, [r3]
}
    98fc:	bd38      	pop	{r3, r4, r5, pc}
    98fe:	bf00      	nop
    9900:	3f7d70a4 	.word	0x3f7d70a4
    9904:	3c23d70a 	.word	0x3c23d70a
    9908:	3fc90fdb 	.word	0x3fc90fdb
    990c:	2001d274 	.word	0x2001d274
    9910:	2001d35c 	.word	0x2001d35c
    9914:	4479ffff 	.word	0x4479ffff
    9918:	f3af 8000 	nop.w
    991c:	f3af 8000 	nop.w

00009920 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    9920:	eddf 6a17 	vldr	s13, [pc, #92]	; 9980 <param3Poly+0x60>
    9924:	eddf 7a17 	vldr	s15, [pc, #92]	; 9984 <param3Poly+0x64>
    9928:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9988 <param3Poly+0x68>
    992c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    9930:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    9932:	4b16      	ldr	r3, [pc, #88]	; (998c <param3Poly+0x6c>)
    9934:	0045      	lsls	r5, r0, #1
    9936:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    993a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    993c:	ee27 0a87 	vmul.f32	s0, s15, s14
    9940:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9944:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    9948:	f002 fc52 	bl	c1f0 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    994c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    9950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9954:	d00a      	beq.n	996c <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    9956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    995a:	4b0d      	ldr	r3, [pc, #52]	; (9990 <param3Poly+0x70>)
    995c:	4425      	add	r5, r4
    995e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    9962:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9966:	edc3 7a00 	vstr	s15, [r3]
}
    996a:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    996c:	4b08      	ldr	r3, [pc, #32]	; (9990 <param3Poly+0x70>)
    996e:	4425      	add	r5, r4
    9970:	eddf 7a08 	vldr	s15, [pc, #32]	; 9994 <param3Poly+0x74>
    9974:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9978:	edc3 7a00 	vstr	s15, [r3]
}
    997c:	bd38      	pop	{r3, r4, r5, pc}
    997e:	bf00      	nop
    9980:	3f7d70a4 	.word	0x3f7d70a4
    9984:	3c23d70a 	.word	0x3c23d70a
    9988:	3fc90fdb 	.word	0x3fc90fdb
    998c:	2001d274 	.word	0x2001d274
    9990:	2001d2ec 	.word	0x2001d2ec
    9994:	4479ffff 	.word	0x4479ffff
    9998:	f3af 8000 	nop.w
    999c:	f3af 8000 	nop.w

000099a0 <param4Linear>:
	param4[v][string] = value;
    99a0:	4b03      	ldr	r3, [pc, #12]	; (99b0 <param4Linear+0x10>)
    99a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    99a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    99aa:	ed83 0a00 	vstr	s0, [r3]
}
    99ae:	4770      	bx	lr
    99b0:	2001d294 	.word	0x2001d294
    99b4:	f3af 8000 	nop.w
    99b8:	f3af 8000 	nop.w
    99bc:	f3af 8000 	nop.w

000099c0 <param5Linear>:
	param5[v][string] = value;
    99c0:	4b03      	ldr	r3, [pc, #12]	; (99d0 <param5Linear+0x10>)
    99c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    99c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    99ca:	ed83 0a00 	vstr	s0, [r3]
}
    99ce:	4770      	bx	lr
    99d0:	2001d2b4 	.word	0x2001d2b4
    99d4:	f3af 8000 	nop.w
    99d8:	f3af 8000 	nop.w
    99dc:	f3af 8000 	nop.w

000099e0 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    99e0:	4b03      	ldr	r3, [pc, #12]	; (99f0 <param2BC+0x10>)
    99e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    99e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    99ea:	f002 bb8d 	b.w	c108 <__tCrusher_setQuality_veneer>
    99ee:	bf00      	nop
    99f0:	2001cd94 	.word	0x2001cd94
    99f4:	f3af 8000 	nop.w
    99f8:	f3af 8000 	nop.w
    99fc:	f3af 8000 	nop.w

00009a00 <param3BC>:
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    9a00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9a04:	4a08      	ldr	r2, [pc, #32]	; (9a28 <param3BC+0x28>)
    9a06:	ed9f 7a09 	vldr	s14, [pc, #36]	; 9a2c <param3BC+0x2c>
	tCrusher_setSamplingRatio (&bc[v][string], value);
    9a0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    9a0e:	edd2 6a00 	vldr	s13, [r2]
    9a12:	ee77 7ac0 	vsub.f32	s15, s15, s0
	tCrusher_setSamplingRatio (&bc[v][string], value);
    9a16:	4b06      	ldr	r3, [pc, #24]	; (9a30 <param3BC+0x30>)
    9a18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9a1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
    9a20:	eeb0 0a47 	vmov.f32	s0, s14
    9a24:	f002 ba00 	b.w	be28 <__tCrusher_setSamplingRatio_veneer>
    9a28:	200008d4 	.word	0x200008d4
    9a2c:	3c23d70a 	.word	0x3c23d70a
    9a30:	2001cd94 	.word	0x2001cd94
    9a34:	f3af 8000 	nop.w
    9a38:	f3af 8000 	nop.w
    9a3c:	f3af 8000 	nop.w

00009a40 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    9a40:	4b03      	ldr	r3, [pc, #12]	; (9a50 <param4BC+0x10>)
    9a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9a4a:	f002 bbc5 	b.w	c1d8 <__tCrusher_setRound_veneer>
    9a4e:	bf00      	nop
    9a50:	2001cd94 	.word	0x2001cd94
    9a54:	f3af 8000 	nop.w
    9a58:	f3af 8000 	nop.w
    9a5c:	f3af 8000 	nop.w

00009a60 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    9a60:	4b03      	ldr	r3, [pc, #12]	; (9a70 <param5BC+0x10>)
    9a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9a6a:	f002 b9a1 	b.w	bdb0 <__tCrusher_setOperation_veneer>
    9a6e:	bf00      	nop
    9a70:	2001cd94 	.word	0x2001cd94
    9a74:	f3af 8000 	nop.w
    9a78:	f3af 8000 	nop.w
    9a7c:	f3af 8000 	nop.w

00009a80 <fxMixSet>:
	fxMix[v][string] = value;
    9a80:	4b03      	ldr	r3, [pc, #12]	; (9a90 <fxMixSet+0x10>)
    9a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9a86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9a8a:	ed83 0a00 	vstr	s0, [r3]
}
    9a8e:	4770      	bx	lr
    9a90:	2001cf18 	.word	0x2001cf18
    9a94:	f3af 8000 	nop.w
    9a98:	f3af 8000 	nop.w
    9a9c:	f3af 8000 	nop.w

00009aa0 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9aa0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9aa4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    9aa8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9aaa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    9aae:	4605      	mov	r5, r0
    9ab0:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9ab2:	eeb0 0a67 	vmov.f32	s0, s15
    9ab6:	f002 fa2b 	bl	bf10 <__dbToATableLookup_veneer>
    9aba:	4b04      	ldr	r3, [pc, #16]	; (9acc <fxPostGainSet+0x2c>)
    9abc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9ac0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9ac4:	ed83 0a00 	vstr	s0, [r3]
}
    9ac8:	bd38      	pop	{r3, r4, r5, pc}
    9aca:	bf00      	nop
    9acc:	2001cf38 	.word	0x2001cf38
    9ad0:	f3af 8000 	nop.w
    9ad4:	f3af 8000 	nop.w
    9ad8:	f3af 8000 	nop.w
    9adc:	f3af 8000 	nop.w

00009ae0 <wavefolderTick>:
{
    9ae0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    9ae6:	4d36      	ldr	r5, [pc, #216]	; (9bc0 <wavefolderTick+0xe0>)
    9ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9aec:	4b35      	ldr	r3, [pc, #212]	; (9bc4 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    9aee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    9af2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9af6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9afa:	4a33      	ldr	r2, [pc, #204]	; (9bc8 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9afc:	eddf 3a33 	vldr	s7, [pc, #204]	; 9bcc <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9b00:	0084      	lsls	r4, r0, #2
    9b02:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    9b06:	ed9f 3a32 	vldr	s6, [pc, #200]	; 9bd0 <wavefolderTick+0xf0>
{
    9b0a:	ed2d 8b02 	vpush	{d8}
    9b0e:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9b12:	edd3 7a00 	vldr	s15, [r3]
    9b16:	fe86 6a66 	vminnm.f32	s12, s12, s13
    9b1a:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9b1e:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    9b22:	4b2c      	ldr	r3, [pc, #176]	; (9bd4 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9b24:	ee30 0a27 	vadd.f32	s0, s0, s15
    9b28:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    9b2c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    9b30:	4a29      	ldr	r2, [pc, #164]	; (9bd8 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9b32:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9b36:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    9b3a:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    9b3e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b42:	4b26      	ldr	r3, [pc, #152]	; (9bdc <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9b44:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b48:	ed9f 0a25 	vldr	s0, [pc, #148]	; 9be0 <wavefolderTick+0x100>
    9b4c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    9b50:	ee24 4a03 	vmul.f32	s8, s8, s6
    9b54:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9b58:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9b5c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    9b60:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9b68:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    9b6c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9b70:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b74:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    9b78:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b7c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9b80:	ee76 6ac6 	vsub.f32	s13, s13, s12
    9b84:	eee2 7a87 	vfma.f32	s15, s5, s14
    9b88:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b8c:	eee6 7a85 	vfma.f32	s15, s13, s10
    9b90:	eeb0 8a67 	vmov.f32	s16, s15
    9b94:	f002 fb04 	bl	c1a0 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    9b98:	4b12      	ldr	r3, [pc, #72]	; (9be4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9b9a:	4813      	ldr	r0, [pc, #76]	; (9be8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b9c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    9ba0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9ba2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    9ba4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9ba8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    9bac:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9bb0:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    9bb4:	ecbd 8b02 	vpop	{d8}
    9bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9bbc:	f002 ba10 	b.w	bfe0 <__tHighpass_tick_veneer>
    9bc0:	2001d5a0 	.word	0x2001d5a0
    9bc4:	2001d254 	.word	0x2001d254
    9bc8:	2001d234 	.word	0x2001d234
    9bcc:	3eaaaaaa 	.word	0x3eaaaaaa
    9bd0:	3fbffff8 	.word	0x3fbffff8
    9bd4:	2001d274 	.word	0x2001d274
    9bd8:	2001d294 	.word	0x2001d294
    9bdc:	2001d2b4 	.word	0x2001d2b4
    9be0:	40c90fdb 	.word	0x40c90fdb
    9be4:	2001cf68 	.word	0x2001cf68
    9be8:	2001cdf4 	.word	0x2001cdf4
    9bec:	f3af 8000 	nop.w
    9bf0:	f3af 8000 	nop.w
    9bf4:	f3af 8000 	nop.w
    9bf8:	f3af 8000 	nop.w
    9bfc:	f3af 8000 	nop.w

00009c00 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    9c00:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    9c04:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9c1c <chorusParam1+0x1c>
    9c08:	4b05      	ldr	r3, [pc, #20]	; (9c20 <chorusParam1+0x20>)
    9c0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9c0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    9c12:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9c16:	edc3 7a00 	vstr	s15, [r3]
}
    9c1a:	4770      	bx	lr
    9c1c:	45b4a000 	.word	0x45b4a000
    9c20:	2001d234 	.word	0x2001d234
    9c24:	f3af 8000 	nop.w
    9c28:	f3af 8000 	nop.w
    9c2c:	f3af 8000 	nop.w
    9c30:	f3af 8000 	nop.w
    9c34:	f3af 8000 	nop.w
    9c38:	f3af 8000 	nop.w
    9c3c:	f3af 8000 	nop.w

00009c40 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    9c40:	eddf 7a05 	vldr	s15, [pc, #20]	; 9c58 <chorusParam2+0x18>
    9c44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9c48:	4b04      	ldr	r3, [pc, #16]	; (9c5c <chorusParam2+0x1c>)
    9c4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9c4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9c52:	ed83 0a00 	vstr	s0, [r3]
}
    9c56:	4770      	bx	lr
    9c58:	3dcccccd 	.word	0x3dcccccd
    9c5c:	2001d254 	.word	0x2001d254

00009c60 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    9c60:	ed9f 7a07 	vldr	s14, [pc, #28]	; 9c80 <chorusParam3+0x20>
    9c64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9c68:	eddf 7a06 	vldr	s15, [pc, #24]	; 9c84 <chorusParam3+0x24>
    9c6c:	4b06      	ldr	r3, [pc, #24]	; (9c88 <chorusParam3+0x28>)
    9c6e:	eee0 7a07 	vfma.f32	s15, s0, s14
    9c72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9c76:	eeb0 0a67 	vmov.f32	s0, s15
    9c7a:	f002 ba59 	b.w	c130 <__tCycle_setFreq_veneer>
    9c7e:	bf00      	nop
    9c80:	3ecccccd 	.word	0x3ecccccd
    9c84:	3c23d70a 	.word	0x3c23d70a
    9c88:	2001d184 	.word	0x2001d184
    9c8c:	f3af 8000 	nop.w
    9c90:	f3af 8000 	nop.w
    9c94:	f3af 8000 	nop.w
    9c98:	f3af 8000 	nop.w
    9c9c:	f3af 8000 	nop.w

00009ca0 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    9ca0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 9cc0 <chorusParam4+0x20>
    9ca4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9ca8:	eddf 7a06 	vldr	s15, [pc, #24]	; 9cc4 <chorusParam4+0x24>
    9cac:	4b06      	ldr	r3, [pc, #24]	; (9cc8 <chorusParam4+0x28>)
    9cae:	eee0 7a07 	vfma.f32	s15, s0, s14
    9cb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9cb6:	eeb0 0a67 	vmov.f32	s0, s15
    9cba:	f002 ba39 	b.w	c130 <__tCycle_setFreq_veneer>
    9cbe:	bf00      	nop
    9cc0:	3ee38e37 	.word	0x3ee38e37
    9cc4:	3c343958 	.word	0x3c343958
    9cc8:	2001d1a4 	.word	0x2001d1a4
    9ccc:	f3af 8000 	nop.w
    9cd0:	f3af 8000 	nop.w
    9cd4:	f3af 8000 	nop.w
    9cd8:	f3af 8000 	nop.w
    9cdc:	f3af 8000 	nop.w

00009ce0 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[string], value * 30000.0f + 1.0f);
    9ce0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9ce4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9cfc <delayParam1+0x1c>
    9ce8:	4805      	ldr	r0, [pc, #20]	; (9d00 <delayParam1+0x20>)
    9cea:	eee0 7a07 	vfma.f32	s15, s0, s14
    9cee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9cf2:	eeb0 0a67 	vmov.f32	s0, s15
    9cf6:	f002 b84f 	b.w	bd98 <__tTapeDelay_setDelay_veneer>
    9cfa:	bf00      	nop
    9cfc:	46ea6000 	.word	0x46ea6000
    9d00:	2001d548 	.word	0x2001d548
    9d04:	f3af 8000 	nop.w
    9d08:	f3af 8000 	nop.w
    9d0c:	f3af 8000 	nop.w
    9d10:	f3af 8000 	nop.w
    9d14:	f3af 8000 	nop.w
    9d18:	f3af 8000 	nop.w
    9d1c:	f3af 8000 	nop.w

00009d20 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    9d20:	ed9f 1a09 	vldr	s2, [pc, #36]	; 9d48 <delayParam2+0x28>
{
    9d24:	b538      	push	{r3, r4, r5, lr}
    9d26:	4605      	mov	r5, r0
    9d28:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    9d2a:	ee60 0a01 	vmul.f32	s1, s0, s2
    9d2e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 9d4c <delayParam2+0x2c>
    9d32:	f002 f959 	bl	bfe8 <__LEAF_clip_veneer>
    9d36:	4b06      	ldr	r3, [pc, #24]	; (9d50 <delayParam2+0x30>)
    9d38:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9d3c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9d40:	ed83 0a00 	vstr	s0, [r3]
}
    9d44:	bd38      	pop	{r3, r4, r5, pc}
    9d46:	bf00      	nop
    9d48:	3f8ccccd 	.word	0x3f8ccccd
    9d4c:	00000000 	.word	0x00000000
    9d50:	2001d254 	.word	0x2001d254
    9d54:	f3af 8000 	nop.w
    9d58:	f3af 8000 	nop.w
    9d5c:	f3af 8000 	nop.w

00009d60 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    9d60:	eddf 7a05 	vldr	s15, [pc, #20]	; 9d78 <delayParam3+0x18>
    9d64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9d68:	4b04      	ldr	r3, [pc, #16]	; (9d7c <delayParam3+0x1c>)
    9d6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9d6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9d72:	f002 b97d 	b.w	c070 <__tSVF_setFreqFast_veneer>
    9d76:	bf00      	nop
    9d78:	42fe0000 	.word	0x42fe0000
    9d7c:	2001cd0c 	.word	0x2001cd0c

00009d80 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    9d80:	eddf 7a05 	vldr	s15, [pc, #20]	; 9d98 <delayParam4+0x18>
    9d84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9d88:	4b04      	ldr	r3, [pc, #16]	; (9d9c <delayParam4+0x1c>)
    9d8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9d8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9d92:	f002 b96d 	b.w	c070 <__tSVF_setFreqFast_veneer>
    9d96:	bf00      	nop
    9d98:	42fe0000 	.word	0x42fe0000
    9d9c:	2001ccec 	.word	0x2001ccec

00009da0 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    9da0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    9da4:	4b05      	ldr	r3, [pc, #20]	; (9dbc <delayParam5+0x1c>)
    9da6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9daa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9dae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9db2:	eee0 7a07 	vfma.f32	s15, s0, s14
    9db6:	edc3 7a00 	vstr	s15, [r3]
}
    9dba:	4770      	bx	lr
    9dbc:	2001d2b4 	.word	0x2001d2b4

00009dc0 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    9dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9dc4:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    9dc8:	4a2b      	ldr	r2, [pc, #172]	; (9e78 <chorusTick+0xb8>)
    9dca:	4f2c      	ldr	r7, [pc, #176]	; (9e7c <chorusTick+0xbc>)
    9dcc:	008c      	lsls	r4, r1, #2
    9dce:	482c      	ldr	r0, [pc, #176]	; (9e80 <chorusTick+0xc0>)
    9dd0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    9dd4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    9dd8:	4e2a      	ldr	r6, [pc, #168]	; (9e84 <chorusTick+0xc4>)
    9dda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9dde:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    9de2:	009d      	lsls	r5, r3, #2
{
    9de4:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9de8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    9dec:	edd7 9a00 	vldr	s19, [r7]
{
    9df0:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9df4:	ed98 9a00 	vldr	s18, [r8]
    9df8:	f002 f9ae 	bl	c158 <__tCycle_tick_veneer>
    9dfc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 9e88 <chorusTick+0xc8>
    9e00:	eef0 7a48 	vmov.f32	s15, s16
    9e04:	4630      	mov	r0, r6
    9e06:	ee29 9a07 	vmul.f32	s18, s18, s14
    9e0a:	eee9 7a80 	vfma.f32	s15, s19, s0
    9e0e:	ee29 0a27 	vmul.f32	s0, s18, s15
    9e12:	f002 f8b1 	bl	bf78 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    9e16:	481d      	ldr	r0, [pc, #116]	; (9e8c <chorusTick+0xcc>)
    9e18:	4b1d      	ldr	r3, [pc, #116]	; (9e90 <chorusTick+0xd0>)
    9e1a:	edd7 9a00 	vldr	s19, [r7]
    9e1e:	4428      	add	r0, r5
    9e20:	441c      	add	r4, r3
    9e22:	ed98 9a00 	vldr	s18, [r8]
    9e26:	f002 f997 	bl	c158 <__tCycle_tick_veneer>
    9e2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    9e2e:	eea9 8ac0 	vfms.f32	s16, s19, s0
    9e32:	4620      	mov	r0, r4
    9e34:	ee29 0a27 	vmul.f32	s0, s18, s15
    9e38:	ee20 0a08 	vmul.f32	s0, s0, s16
    9e3c:	f002 f89c 	bl	bf78 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[string], sample) - sample;
    9e40:	eeb0 0a68 	vmov.f32	s0, s17
    9e44:	4630      	mov	r0, r6
    9e46:	f002 fa0b 	bl	c260 <__tLinearDelay_tick_veneer>
    9e4a:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[string], sample) - sample;
    9e4e:	4620      	mov	r0, r4
    9e50:	eeb0 0a68 	vmov.f32	s0, s17
    9e54:	f002 fa04 	bl	c260 <__tLinearDelay_tick_veneer>
    9e58:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    9e5c:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9e60:	480c      	ldr	r0, [pc, #48]	; (9e94 <chorusTick+0xd4>)
    9e62:	4428      	add	r0, r5
    9e64:	eea8 0ae7 	vfms.f32	s0, s17, s15
    9e68:	f002 f8ba 	bl	bfe0 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    9e6c:	eeb1 0a40 	vneg.f32	s0, s0
    9e70:	ecbd 8b04 	vpop	{d8-d9}
    9e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e78:	2001d234 	.word	0x2001d234
    9e7c:	2001d254 	.word	0x2001d254
    9e80:	2001d184 	.word	0x2001d184
    9e84:	2001ce34 	.word	0x2001ce34
    9e88:	3f34fdf4 	.word	0x3f34fdf4
    9e8c:	2001d1a4 	.word	0x2001d1a4
    9e90:	2001ce3c 	.word	0x2001ce3c
    9e94:	2001cdf4 	.word	0x2001cdf4
    9e98:	f3af 8000 	nop.w
    9e9c:	f3af 8000 	nop.w

00009ea0 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * (param1[v][string]+1.0f);
    9ea0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9ea4:	4a11      	ldr	r2, [pc, #68]	; (9eec <shaperTick+0x4c>)
    sample = sample * (param1[v][string]+1.0f);
    9ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9eaa:	4b11      	ldr	r3, [pc, #68]	; (9ef0 <shaperTick+0x50>)
    9eac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    9eb0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    9eb4:	b510      	push	{r4, lr}
    sample = sample * (param1[v][string]+1.0f);
    9eb6:	4c0f      	ldr	r4, [pc, #60]	; (9ef4 <shaperTick+0x54>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9eb8:	edd2 6a00 	vldr	s13, [r2]
    sample = sample * (param1[v][string]+1.0f);
    9ebc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9ec0:	edd3 0a00 	vldr	s1, [r3]
    sample = sample * (param1[v][string]+1.0f);
    9ec4:	edd4 7a00 	vldr	s15, [r4]
    9ec8:	0084      	lsls	r4, r0, #2
    9eca:	ee37 7a87 	vadd.f32	s14, s15, s14
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9ed2:	eee7 7a00 	vfma.f32	s15, s14, s0
    9ed6:	eeb0 0a67 	vmov.f32	s0, s15
    9eda:	f002 f941 	bl	c160 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9ede:	4806      	ldr	r0, [pc, #24]	; (9ef8 <shaperTick+0x58>)
    9ee0:	4420      	add	r0, r4
    return temp;
}
    9ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9ee6:	f002 b87b 	b.w	bfe0 <__tHighpass_tick_veneer>
    9eea:	bf00      	nop
    9eec:	2001d254 	.word	0x2001d254
    9ef0:	2001d274 	.word	0x2001d274
    9ef4:	2001d234 	.word	0x2001d234
    9ef8:	2001cdf4 	.word	0x2001cdf4
    9efc:	f3af 8000 	nop.w

00009f00 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    9f00:	4770      	bx	lr
    9f02:	bf00      	nop
    9f04:	f3af 8000 	nop.w
    9f08:	f3af 8000 	nop.w
    9f0c:	f3af 8000 	nop.w
    9f10:	f3af 8000 	nop.w
    9f14:	f3af 8000 	nop.w
    9f18:	f3af 8000 	nop.w
    9f1c:	f3af 8000 	nop.w

00009f20 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    9f20:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9f24:	4b08      	ldr	r3, [pc, #32]	; (9f48 <tiltFilterTick+0x28>)
{
    9f26:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    9f28:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9f2c:	008c      	lsls	r4, r1, #2
    9f2e:	f001 ffc7 	bl	bec0 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    9f32:	4806      	ldr	r0, [pc, #24]	; (9f4c <tiltFilterTick+0x2c>)
    9f34:	4420      	add	r0, r4
    9f36:	f001 ff4f 	bl	bdd8 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    9f3a:	4805      	ldr	r0, [pc, #20]	; (9f50 <tiltFilterTick+0x30>)
    9f3c:	4420      	add	r0, r4
    return sample;
}
    9f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    9f42:	f002 b925 	b.w	c190 <__tVZFilterBell_tick_veneer>
    9f46:	bf00      	nop
    9f48:	2001d3a8 	.word	0x2001d3a8
    9f4c:	2001d3c8 	.word	0x2001d3c8
    9f50:	2001cdb4 	.word	0x2001cdb4
    9f54:	f3af 8000 	nop.w
    9f58:	f3af 8000 	nop.w
    9f5c:	f3af 8000 	nop.w

00009f60 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    9f60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9f64:	4a0d      	ldr	r2, [pc, #52]	; (9f9c <tanhTick+0x3c>)
    9f66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    9f6a:	4b0d      	ldr	r3, [pc, #52]	; (9fa0 <tanhTick+0x40>)
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9f6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    9f70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    9f74:	b510      	push	{r4, lr}
    9f76:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    9f7a:	008c      	lsls	r4, r1, #2
    9f7c:	edd3 7a00 	vldr	s15, [r3]
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9f80:	eea6 0a87 	vfma.f32	s0, s13, s14
    9f84:	ee27 0a80 	vmul.f32	s0, s15, s0
    9f88:	f001 fef2 	bl	bd70 <__fast_tanh5_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9f8c:	4805      	ldr	r0, [pc, #20]	; (9fa4 <tanhTick+0x44>)
    9f8e:	4420      	add	r0, r4
    9f90:	f002 f826 	bl	bfe0 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = fast_tanh5(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    9f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = fast_tanh5(temp);
    9f98:	f001 beea 	b.w	bd70 <__fast_tanh5_veneer>
    9f9c:	2001d254 	.word	0x2001d254
    9fa0:	2001d234 	.word	0x2001d234
    9fa4:	2001cdf4 	.word	0x2001cdf4
    9fa8:	f3af 8000 	nop.w
    9fac:	f3af 8000 	nop.w
    9fb0:	f3af 8000 	nop.w
    9fb4:	f3af 8000 	nop.w
    9fb8:	f3af 8000 	nop.w
    9fbc:	f3af 8000 	nop.w

00009fc0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    9fc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9fc4:	4a11      	ldr	r2, [pc, #68]	; (a00c <softClipTick+0x4c>)
    sample = sample + param2[v][string];
    9fc6:	4b12      	ldr	r3, [pc, #72]	; (a010 <softClipTick+0x50>)
    9fc8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    9fcc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    9fd0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    sample = sample + param2[v][string];
    9fd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9fd8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    9fdc:	ed92 5a00 	vldr	s10, [r2]
    9fe0:	edd3 7a00 	vldr	s15, [r3]
    9fe4:	eddf 6a0b 	vldr	s13, [pc, #44]	; a014 <softClipTick+0x54>
    9fe8:	eee5 7a00 	vfma.f32	s15, s10, s0
    {
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9fec:	480a      	ldr	r0, [pc, #40]	; (a018 <softClipTick+0x58>)
    9fee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9ff2:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    9ff6:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
    9ffa:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    9ffe:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a002:	ee27 0a27 	vmul.f32	s0, s14, s15
    a006:	f001 bfeb 	b.w	bfe0 <__tHighpass_tick_veneer>
    a00a:	bf00      	nop
    a00c:	2001d234 	.word	0x2001d234
    a010:	2001d254 	.word	0x2001d254
    a014:	3eaaaaaa 	.word	0x3eaaaaaa
    a018:	2001cdf4 	.word	0x2001cdf4
    a01c:	f3af 8000 	nop.w

0000a020 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    a020:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a024:	4a1a      	ldr	r2, [pc, #104]	; (a090 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    a026:	4b1b      	ldr	r3, [pc, #108]	; (a094 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    a028:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    a02c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    a030:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    a034:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    a038:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    a03a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    a03e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    a040:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    a044:	4e14      	ldr	r6, [pc, #80]	; (a098 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    a046:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    a04a:	4d14      	ldr	r5, [pc, #80]	; (a09c <hardClipTick+0x7c>)
    a04c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    a050:	4425      	add	r5, r4
    a052:	ed96 7a00 	vldr	s14, [r6]
    a056:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    a05a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    a05e:	ee27 0a87 	vmul.f32	s0, s15, s14
    a062:	f002 f89d 	bl	c1a0 <__arm_sin_f32_veneer>
    a066:	ed96 7a00 	vldr	s14, [r6]
    a06a:	edd5 7a00 	vldr	s15, [r5]
    a06e:	ee67 7a87 	vmul.f32	s15, s15, s14
    a072:	ee27 0a80 	vmul.f32	s0, s15, s0
    a076:	f002 f893 	bl	c1a0 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    a07a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a07e:	4808      	ldr	r0, [pc, #32]	; (a0a0 <hardClipTick+0x80>)
    a080:	ee20 0a27 	vmul.f32	s0, s0, s15
    a084:	4420      	add	r0, r4
    return sample;
}
    a086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a08a:	f001 bfa9 	b.w	bfe0 <__tHighpass_tick_veneer>
    a08e:	bf00      	nop
    a090:	2001d234 	.word	0x2001d234
    a094:	2001d254 	.word	0x2001d254
    a098:	2001d274 	.word	0x2001d274
    a09c:	2001d35c 	.word	0x2001d35c
    a0a0:	2001cdf4 	.word	0x2001cdf4
    a0a4:	f3af 8000 	nop.w
    a0a8:	f3af 8000 	nop.w
    a0ac:	f3af 8000 	nop.w
    a0b0:	f3af 8000 	nop.w
    a0b4:	f3af 8000 	nop.w
    a0b8:	f3af 8000 	nop.w
    a0bc:	f3af 8000 	nop.w

0000a0c0 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    a0c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a0c4:	4a1a      	ldr	r2, [pc, #104]	; (a130 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    a0c6:	4b1b      	ldr	r3, [pc, #108]	; (a134 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a0c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    a0cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a0d0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    a0d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    a0d8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    a0da:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    a0de:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    a0e0:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a0e4:	4e14      	ldr	r6, [pc, #80]	; (a138 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    a0e6:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a0ea:	4d14      	ldr	r5, [pc, #80]	; (a13c <polynomialShaperTick+0x7c>)
    a0ec:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    a0f0:	4425      	add	r5, r4
    a0f2:	ed96 7a00 	vldr	s14, [r6]
    a0f6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    a0fa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    a0fe:	ee27 0a87 	vmul.f32	s0, s15, s14
    a102:	f002 f875 	bl	c1f0 <__fastSine_veneer>
    a106:	ed96 7a00 	vldr	s14, [r6]
    a10a:	edd5 7a00 	vldr	s15, [r5]
    a10e:	ee67 7a87 	vmul.f32	s15, s15, s14
    a112:	ee27 0a80 	vmul.f32	s0, s15, s0
    a116:	f002 f86b 	bl	c1f0 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    a11a:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a11e:	4808      	ldr	r0, [pc, #32]	; (a140 <polynomialShaperTick+0x80>)
    a120:	ee20 0a27 	vmul.f32	s0, s0, s15
    a124:	4420      	add	r0, r4
    return sample;
}
    a126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a12a:	f001 bf59 	b.w	bfe0 <__tHighpass_tick_veneer>
    a12e:	bf00      	nop
    a130:	2001d234 	.word	0x2001d234
    a134:	2001d254 	.word	0x2001d254
    a138:	2001d274 	.word	0x2001d274
    a13c:	2001d2ec 	.word	0x2001d2ec
    a140:	2001cdf4 	.word	0x2001cdf4
    a144:	f3af 8000 	nop.w
    a148:	f3af 8000 	nop.w
    a14c:	f3af 8000 	nop.w
    a150:	f3af 8000 	nop.w
    a154:	f3af 8000 	nop.w
    a158:	f3af 8000 	nop.w
    a15c:	f3af 8000 	nop.w

0000a160 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    a160:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a164:	4b14      	ldr	r3, [pc, #80]	; (a1b8 <satTick+0x58>)
    sample = sample * param1[v][string];
    a166:	4a15      	ldr	r2, [pc, #84]	; (a1bc <satTick+0x5c>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a168:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    a16c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a170:	4813      	ldr	r0, [pc, #76]	; (a1c0 <satTick+0x60>)
    sample = sample * param1[v][string];
    a172:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a176:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    a17a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a17c:	edd3 7a00 	vldr	s15, [r3]
    sample = sample * param1[v][string];
    a180:	008c      	lsls	r4, r1, #2
    a182:	edd2 6a00 	vldr	s13, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a186:	eeb0 7a67 	vmov.f32	s14, s15
    a18a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    a18e:	eea6 7a80 	vfma.f32	s14, s13, s0
    a192:	eee6 7a80 	vfma.f32	s15, s13, s0
    a196:	eeb0 0ac7 	vabs.f32	s0, s14
    a19a:	ee30 0a06 	vadd.f32	s0, s0, s12
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a19e:	ee87 0a80 	vdiv.f32	s0, s15, s0
    a1a2:	f001 ff1d 	bl	bfe0 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    a1a6:	4807      	ldr	r0, [pc, #28]	; (a1c4 <satTick+0x64>)
    a1a8:	4420      	add	r0, r4
    a1aa:	f001 ff19 	bl	bfe0 <__tHighpass_tick_veneer>
    temp = fast_tanh5(temp);
    return temp;
}
    a1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = fast_tanh5(temp);
    a1b2:	f001 bddd 	b.w	bd70 <__fast_tanh5_veneer>
    a1b6:	bf00      	nop
    a1b8:	2001d254 	.word	0x2001d254
    a1bc:	2001d234 	.word	0x2001d234
    a1c0:	2001cdf4 	.word	0x2001cdf4
    a1c4:	2001ce14 	.word	0x2001ce14
    a1c8:	f3af 8000 	nop.w
    a1cc:	f3af 8000 	nop.w
    a1d0:	f3af 8000 	nop.w
    a1d4:	f3af 8000 	nop.w
    a1d8:	f3af 8000 	nop.w
    a1dc:	f3af 8000 	nop.w

0000a1e0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    a1e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a1e4:	4b05      	ldr	r3, [pc, #20]	; (a1fc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    a1e6:	4806      	ldr	r0, [pc, #24]	; (a200 <bcTick+0x20>)
    sample = sample * param1[v][string];
    a1e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    a1ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    a1f0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    a1f4:	ee20 0a27 	vmul.f32	s0, s0, s15
    a1f8:	f001 bd9e 	b.w	bd38 <__tCrusher_tick_veneer>
    a1fc:	2001d234 	.word	0x2001d234
    a200:	2001cd94 	.word	0x2001cd94
    a204:	f3af 8000 	nop.w
    a208:	f3af 8000 	nop.w
    a20c:	f3af 8000 	nop.w
    a210:	f3af 8000 	nop.w
    a214:	f3af 8000 	nop.w
    a218:	f3af 8000 	nop.w
    a21c:	f3af 8000 	nop.w

0000a220 <compressorTick>:
}


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
    a220:	4b03      	ldr	r3, [pc, #12]	; (a230 <compressorTick+0x10>)
    a222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a22a:	f001 becd 	b.w	bfc8 <__tCompressor_tickWithTableHardKnee_veneer>
    a22e:	bf00      	nop
    a230:	2001cdd4 	.word	0x2001cdd4
    a234:	f3af 8000 	nop.w
    a238:	f3af 8000 	nop.w
    a23c:	f3af 8000 	nop.w

0000a240 <FXlowpassTick>:
	//return tCompressor_tick(&comp[v][string], sample);
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    a240:	4b03      	ldr	r3, [pc, #12]	; (a250 <FXlowpassTick+0x10>)
    a242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a24a:	f001 bdb5 	b.w	bdb8 <__tSVF_tick_veneer>
    a24e:	bf00      	nop
    a250:	2001cd0c 	.word	0x2001cd0c
    a254:	f3af 8000 	nop.w
    a258:	f3af 8000 	nop.w
    a25c:	f3af 8000 	nop.w

0000a260 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    a260:	4b03      	ldr	r3, [pc, #12]	; (a270 <FXhighpassTick+0x10>)
    a262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a26a:	f001 bda5 	b.w	bdb8 <__tSVF_tick_veneer>
    a26e:	bf00      	nop
    a270:	2001ccec 	.word	0x2001ccec
    a274:	f3af 8000 	nop.w
    a278:	f3af 8000 	nop.w
    a27c:	f3af 8000 	nop.w

0000a280 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    a280:	4b03      	ldr	r3, [pc, #12]	; (a290 <FXbandpassTick+0x10>)
    a282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a28a:	f001 bd95 	b.w	bdb8 <__tSVF_tick_veneer>
    a28e:	bf00      	nop
    a290:	2001ccac 	.word	0x2001ccac
    a294:	f3af 8000 	nop.w
    a298:	f3af 8000 	nop.w
    a29c:	f3af 8000 	nop.w

0000a2a0 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    a2a0:	4b03      	ldr	r3, [pc, #12]	; (a2b0 <FXdiodeLowpassTick+0x10>)
    a2a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2aa:	f001 bf49 	b.w	c140 <__tDiodeFilter_tick_veneer>
    a2ae:	bf00      	nop
    a2b0:	2001cccc 	.word	0x2001cccc
    a2b4:	f3af 8000 	nop.w
    a2b8:	f3af 8000 	nop.w
    a2bc:	f3af 8000 	nop.w

0000a2c0 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    a2c0:	4b03      	ldr	r3, [pc, #12]	; (a2d0 <FXVZpeakTick+0x10>)
    a2c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2ca:	f001 bf61 	b.w	c190 <__tVZFilterBell_tick_veneer>
    a2ce:	bf00      	nop
    a2d0:	2001cc8c 	.word	0x2001cc8c
    a2d4:	f3af 8000 	nop.w
    a2d8:	f3af 8000 	nop.w
    a2dc:	f3af 8000 	nop.w

0000a2e0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    a2e0:	4b03      	ldr	r3, [pc, #12]	; (a2f0 <FXVZlowshelfTick+0x10>)
    a2e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2ea:	f001 bde9 	b.w	bec0 <__tVZFilterLS_tick_veneer>
    a2ee:	bf00      	nop
    a2f0:	2001cc6c 	.word	0x2001cc6c
    a2f4:	f3af 8000 	nop.w
    a2f8:	f3af 8000 	nop.w
    a2fc:	f3af 8000 	nop.w

0000a300 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    a300:	4b03      	ldr	r3, [pc, #12]	; (a310 <FXVZhighshelfTick+0x10>)
    a302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a30a:	f001 bd65 	b.w	bdd8 <__tVZFilterHS_tick_veneer>
    a30e:	bf00      	nop
    a310:	2001cc4c 	.word	0x2001cc4c
    a314:	f3af 8000 	nop.w
    a318:	f3af 8000 	nop.w
    a31c:	f3af 8000 	nop.w

0000a320 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    a320:	4b03      	ldr	r3, [pc, #12]	; (a330 <FXVZbandrejectTick+0x10>)
    a322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a32a:	f001 bcc5 	b.w	bcb8 <__tVZFilter_tickEfficient_veneer>
    a32e:	bf00      	nop
    a330:	2001cc2c 	.word	0x2001cc2c
    a334:	f3af 8000 	nop.w
    a338:	f3af 8000 	nop.w
    a33c:	f3af 8000 	nop.w

0000a340 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    a340:	4b03      	ldr	r3, [pc, #12]	; (a350 <FXLadderLowpassTick+0x10>)
    a342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a34a:	f001 be45 	b.w	bfd8 <__tLadderFilter_tick_veneer>
    a34e:	bf00      	nop
    a350:	2001cc0c 	.word	0x2001cc0c
    a354:	f3af 8000 	nop.w
    a358:	f3af 8000 	nop.w
    a35c:	f3af 8000 	nop.w

0000a360 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a360:	ed9f 7a07 	vldr	s14, [pc, #28]	; a380 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    a364:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a368:	eddf 7a06 	vldr	s15, [pc, #24]	; a384 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    a36c:	4b06      	ldr	r3, [pc, #24]	; (a388 <FXLowpassParam1+0x28>)
    a36e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a372:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a376:	eeb0 0a67 	vmov.f32	s0, s15
    a37a:	f001 be79 	b.w	c070 <__tSVF_setFreqFast_veneer>
    a37e:	bf00      	nop
    a380:	429a0000 	.word	0x429a0000
    a384:	42280000 	.word	0x42280000
    a388:	2001cd0c 	.word	0x2001cd0c
    a38c:	f3af 8000 	nop.w
    a390:	f3af 8000 	nop.w
    a394:	f3af 8000 	nop.w
    a398:	f3af 8000 	nop.w
    a39c:	f3af 8000 	nop.w

0000a3a0 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a3a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a3c0 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    a3a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a3a8:	eddf 7a06 	vldr	s15, [pc, #24]	; a3c4 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    a3ac:	4b06      	ldr	r3, [pc, #24]	; (a3c8 <FXHighpassParam1+0x28>)
    a3ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    a3b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a3b6:	eeb0 0a67 	vmov.f32	s0, s15
    a3ba:	f001 be59 	b.w	c070 <__tSVF_setFreqFast_veneer>
    a3be:	bf00      	nop
    a3c0:	429a0000 	.word	0x429a0000
    a3c4:	42280000 	.word	0x42280000
    a3c8:	2001ccec 	.word	0x2001ccec
    a3cc:	f3af 8000 	nop.w
    a3d0:	f3af 8000 	nop.w
    a3d4:	f3af 8000 	nop.w
    a3d8:	f3af 8000 	nop.w
    a3dc:	f3af 8000 	nop.w

0000a3e0 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a3e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a400 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    a3e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a3e8:	eddf 7a06 	vldr	s15, [pc, #24]	; a404 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    a3ec:	4b06      	ldr	r3, [pc, #24]	; (a408 <FXBandpassParam1+0x28>)
    a3ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    a3f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a3f6:	eeb0 0a67 	vmov.f32	s0, s15
    a3fa:	f001 be39 	b.w	c070 <__tSVF_setFreqFast_veneer>
    a3fe:	bf00      	nop
    a400:	429a0000 	.word	0x429a0000
    a404:	42280000 	.word	0x42280000
    a408:	2001ccac 	.word	0x2001ccac
    a40c:	f3af 8000 	nop.w
    a410:	f3af 8000 	nop.w
    a414:	f3af 8000 	nop.w
    a418:	f3af 8000 	nop.w
    a41c:	f3af 8000 	nop.w

0000a420 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a420:	ed9f 7a07 	vldr	s14, [pc, #28]	; a440 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    a424:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a428:	eddf 7a06 	vldr	s15, [pc, #24]	; a444 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    a42c:	4b06      	ldr	r3, [pc, #24]	; (a448 <FXDiodeParam1+0x28>)
    a42e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a432:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a436:	eeb0 0a67 	vmov.f32	s0, s15
    a43a:	f001 bd91 	b.w	bf60 <__tDiodeFilter_setFreqFast_veneer>
    a43e:	bf00      	nop
    a440:	429a0000 	.word	0x429a0000
    a444:	42280000 	.word	0x42280000
    a448:	2001cccc 	.word	0x2001cccc
    a44c:	f3af 8000 	nop.w
    a450:	f3af 8000 	nop.w
    a454:	f3af 8000 	nop.w
    a458:	f3af 8000 	nop.w
    a45c:	f3af 8000 	nop.w

0000a460 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a460:	ed9f 7a07 	vldr	s14, [pc, #28]	; a480 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    a464:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a468:	eddf 7a06 	vldr	s15, [pc, #24]	; a484 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    a46c:	4b06      	ldr	r3, [pc, #24]	; (a488 <FXPeakParam1+0x28>)
    a46e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a472:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a476:	eeb0 0a67 	vmov.f32	s0, s15
    a47a:	f001 bdc9 	b.w	c010 <__tVZFilterBell_setFreq_veneer>
    a47e:	bf00      	nop
    a480:	429a0000 	.word	0x429a0000
    a484:	42280000 	.word	0x42280000
    a488:	2001cc8c 	.word	0x2001cc8c
    a48c:	f3af 8000 	nop.w
    a490:	f3af 8000 	nop.w
    a494:	f3af 8000 	nop.w
    a498:	f3af 8000 	nop.w
    a49c:	f3af 8000 	nop.w

0000a4a0 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a4a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a4c0 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    a4a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a4a8:	eddf 7a06 	vldr	s15, [pc, #24]	; a4c4 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    a4ac:	4b06      	ldr	r3, [pc, #24]	; (a4c8 <FXLowShelfParam1+0x28>)
    a4ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    a4b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a4b6:	eeb0 0a67 	vmov.f32	s0, s15
    a4ba:	f001 bd39 	b.w	bf30 <__tVZFilterLS_setFreqFast_veneer>
    a4be:	bf00      	nop
    a4c0:	429a0000 	.word	0x429a0000
    a4c4:	42280000 	.word	0x42280000
    a4c8:	2001cc6c 	.word	0x2001cc6c
    a4cc:	f3af 8000 	nop.w
    a4d0:	f3af 8000 	nop.w
    a4d4:	f3af 8000 	nop.w
    a4d8:	f3af 8000 	nop.w
    a4dc:	f3af 8000 	nop.w

0000a4e0 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a4e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a500 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    a4e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a4e8:	eddf 7a06 	vldr	s15, [pc, #24]	; a504 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    a4ec:	4b06      	ldr	r3, [pc, #24]	; (a508 <FXHighShelfParam1+0x28>)
    a4ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    a4f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a4f6:	eeb0 0a67 	vmov.f32	s0, s15
    a4fa:	f001 bbcd 	b.w	bc98 <__tVZFilterHS_setFreqFast_veneer>
    a4fe:	bf00      	nop
    a500:	429a0000 	.word	0x429a0000
    a504:	42280000 	.word	0x42280000
    a508:	2001cc4c 	.word	0x2001cc4c
    a50c:	f3af 8000 	nop.w
    a510:	f3af 8000 	nop.w
    a514:	f3af 8000 	nop.w
    a518:	f3af 8000 	nop.w
    a51c:	f3af 8000 	nop.w

0000a520 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a520:	ed9f 7a07 	vldr	s14, [pc, #28]	; a540 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    a524:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a528:	eddf 7a06 	vldr	s15, [pc, #24]	; a544 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    a52c:	4b06      	ldr	r3, [pc, #24]	; (a548 <FXNotchParam1+0x28>)
    a52e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a532:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a536:	eeb0 0a67 	vmov.f32	s0, s15
    a53a:	f001 bd71 	b.w	c020 <__tVZFilter_setFreqFast_veneer>
    a53e:	bf00      	nop
    a540:	429a0000 	.word	0x429a0000
    a544:	42280000 	.word	0x42280000
    a548:	2001cc2c 	.word	0x2001cc2c
    a54c:	f3af 8000 	nop.w
    a550:	f3af 8000 	nop.w
    a554:	f3af 8000 	nop.w
    a558:	f3af 8000 	nop.w
    a55c:	f3af 8000 	nop.w

0000a560 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a560:	ed9f 7a07 	vldr	s14, [pc, #28]	; a580 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    a564:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a568:	eddf 7a06 	vldr	s15, [pc, #24]	; a584 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    a56c:	4b06      	ldr	r3, [pc, #24]	; (a588 <FXLadderParam1+0x28>)
    a56e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a572:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a576:	eeb0 0a67 	vmov.f32	s0, s15
    a57a:	f001 bbd1 	b.w	bd20 <__tLadderFilter_setFreqFast_veneer>
    a57e:	bf00      	nop
    a580:	429a0000 	.word	0x429a0000
    a584:	42280000 	.word	0x42280000
    a588:	2001cc0c 	.word	0x2001cc0c
    a58c:	f3af 8000 	nop.w
    a590:	f3af 8000 	nop.w
    a594:	f3af 8000 	nop.w
    a598:	f3af 8000 	nop.w
    a59c:	f3af 8000 	nop.w

0000a5a0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a5a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; a5cc <FXPeakParam2+0x2c>
{
    a5a8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a5ae:	4605      	mov	r5, r0
    a5b0:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5b2:	eeb0 0a67 	vmov.f32	s0, s15
    a5b6:	f001 fcab 	bl	bf10 <__dbToATableLookup_veneer>
    a5ba:	4b05      	ldr	r3, [pc, #20]	; (a5d0 <FXPeakParam2+0x30>)
    a5bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a5c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5c8:	f001 bc52 	b.w	be70 <__tVZFilterBell_setGain_veneer>
    a5cc:	42480000 	.word	0x42480000
    a5d0:	2001cc8c 	.word	0x2001cc8c
    a5d4:	f3af 8000 	nop.w
    a5d8:	f3af 8000 	nop.w
    a5dc:	f3af 8000 	nop.w

0000a5e0 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a5e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; a60c <FXLowShelfParam2+0x2c>
{
    a5e8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a5ee:	4605      	mov	r5, r0
    a5f0:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5f2:	eeb0 0a67 	vmov.f32	s0, s15
    a5f6:	f001 fc8b 	bl	bf10 <__dbToATableLookup_veneer>
    a5fa:	4b05      	ldr	r3, [pc, #20]	; (a610 <FXLowShelfParam2+0x30>)
    a5fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a608:	f001 bbe2 	b.w	bdd0 <__tVZFilterLS_setGain_veneer>
    a60c:	42480000 	.word	0x42480000
    a610:	2001cc6c 	.word	0x2001cc6c
    a614:	f3af 8000 	nop.w
    a618:	f3af 8000 	nop.w
    a61c:	f3af 8000 	nop.w

0000a620 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a620:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a624:	ed9f 7a09 	vldr	s14, [pc, #36]	; a64c <FXHighShelfParam2+0x2c>
{
    a628:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a62a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a62e:	4605      	mov	r5, r0
    a630:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a632:	eeb0 0a67 	vmov.f32	s0, s15
    a636:	f001 fc6b 	bl	bf10 <__dbToATableLookup_veneer>
    a63a:	4b05      	ldr	r3, [pc, #20]	; (a650 <FXHighShelfParam2+0x30>)
    a63c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a648:	f001 bcfa 	b.w	c040 <__tVZFilterHS_setGain_veneer>
    a64c:	42480000 	.word	0x42480000
    a650:	2001cc4c 	.word	0x2001cc4c
    a654:	f3af 8000 	nop.w
    a658:	f3af 8000 	nop.w
    a65c:	f3af 8000 	nop.w

0000a660 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a660:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a664:	ed9f 7a09 	vldr	s14, [pc, #36]	; a68c <FXNotchParam2+0x2c>
{
    a668:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a66a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a66e:	4605      	mov	r5, r0
    a670:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a672:	eeb0 0a67 	vmov.f32	s0, s15
    a676:	f001 fc4b 	bl	bf10 <__dbToATableLookup_veneer>
    a67a:	4b05      	ldr	r3, [pc, #20]	; (a690 <FXNotchParam2+0x30>)
    a67c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a680:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    a684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a688:	f001 bd16 	b.w	c0b8 <__tVZFilter_setGain_veneer>
    a68c:	42480000 	.word	0x42480000
    a690:	2001cc2c 	.word	0x2001cc2c
    a694:	f3af 8000 	nop.w
    a698:	f3af 8000 	nop.w
    a69c:	f3af 8000 	nop.w

0000a6a0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    a6a0:	4b03      	ldr	r3, [pc, #12]	; (a6b0 <FXLowpassParam3+0x10>)
    a6a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6aa:	f001 bd11 	b.w	c0d0 <__tSVF_setQ_veneer>
    a6ae:	bf00      	nop
    a6b0:	2001cd0c 	.word	0x2001cd0c
    a6b4:	f3af 8000 	nop.w
    a6b8:	f3af 8000 	nop.w
    a6bc:	f3af 8000 	nop.w

0000a6c0 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    a6c0:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <FXHighpassParam3+0x10>)
    a6c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6ca:	f001 bd01 	b.w	c0d0 <__tSVF_setQ_veneer>
    a6ce:	bf00      	nop
    a6d0:	2001ccec 	.word	0x2001ccec
    a6d4:	f3af 8000 	nop.w
    a6d8:	f3af 8000 	nop.w
    a6dc:	f3af 8000 	nop.w

0000a6e0 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    a6e0:	4b03      	ldr	r3, [pc, #12]	; (a6f0 <FXBandpassParam3+0x10>)
    a6e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6ea:	f001 bcf1 	b.w	c0d0 <__tSVF_setQ_veneer>
    a6ee:	bf00      	nop
    a6f0:	2001ccac 	.word	0x2001ccac
    a6f4:	f3af 8000 	nop.w
    a6f8:	f3af 8000 	nop.w
    a6fc:	f3af 8000 	nop.w

0000a700 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    a700:	4b03      	ldr	r3, [pc, #12]	; (a710 <FXDiodeParam3+0x10>)
    a702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a70a:	f001 bc25 	b.w	bf58 <__tDiodeFilter_setQ_veneer>
    a70e:	bf00      	nop
    a710:	2001cccc 	.word	0x2001cccc
    a714:	f3af 8000 	nop.w
    a718:	f3af 8000 	nop.w
    a71c:	f3af 8000 	nop.w

0000a720 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    a720:	4b03      	ldr	r3, [pc, #12]	; (a730 <FXPeakParam3+0x10>)
    a722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a72a:	f001 bcf1 	b.w	c110 <__tVZFilterBell_setBandwidth_veneer>
    a72e:	bf00      	nop
    a730:	2001cc8c 	.word	0x2001cc8c
    a734:	f3af 8000 	nop.w
    a738:	f3af 8000 	nop.w
    a73c:	f3af 8000 	nop.w

0000a740 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    a740:	4b03      	ldr	r3, [pc, #12]	; (a750 <FXLowShelfParam3+0x10>)
    a742:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a746:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a74a:	f001 bc1d 	b.w	bf88 <__tVZFilterLS_setResonance_veneer>
    a74e:	bf00      	nop
    a750:	2001cc6c 	.word	0x2001cc6c
    a754:	f3af 8000 	nop.w
    a758:	f3af 8000 	nop.w
    a75c:	f3af 8000 	nop.w

0000a760 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    a760:	4b03      	ldr	r3, [pc, #12]	; (a770 <FXHighShelfParam3+0x10>)
    a762:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a766:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a76a:	f001 bcd9 	b.w	c120 <__tVZFilterHS_setResonance_veneer>
    a76e:	bf00      	nop
    a770:	2001cc4c 	.word	0x2001cc4c
    a774:	f3af 8000 	nop.w
    a778:	f3af 8000 	nop.w
    a77c:	f3af 8000 	nop.w

0000a780 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    a780:	4b03      	ldr	r3, [pc, #12]	; (a790 <FXNotchParam3+0x10>)
    a782:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a786:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a78a:	f001 ba9d 	b.w	bcc8 <__tVZFilter_setResonance_veneer>
    a78e:	bf00      	nop
    a790:	2001cc2c 	.word	0x2001cc2c
    a794:	f3af 8000 	nop.w
    a798:	f3af 8000 	nop.w
    a79c:	f3af 8000 	nop.w

0000a7a0 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    a7a0:	4b03      	ldr	r3, [pc, #12]	; (a7b0 <FXLadderParam3+0x10>)
    a7a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a7a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a7aa:	f001 bccd 	b.w	c148 <__tLadderFilter_setQ_veneer>
    a7ae:	bf00      	nop
    a7b0:	2001cc0c 	.word	0x2001cc0c
    a7b4:	f3af 8000 	nop.w
    a7b8:	f3af 8000 	nop.w
    a7bc:	f3af 8000 	nop.w

0000a7c0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    a7c0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a7c2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    a7c6:	008c      	lsls	r4, r1, #2
{
    a7c8:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a7cc:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    a7d0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a7d4:	eee0 7a68 	vfms.f32	s15, s0, s17
    a7d8:	eeb0 0a67 	vmov.f32	s0, s15
    a7dc:	f001 fb98 	bl	bf10 <__dbToATableLookup_veneer>
    a7e0:	4808      	ldr	r0, [pc, #32]	; (a804 <noiseSetTilt+0x44>)
    a7e2:	4420      	add	r0, r4
    a7e4:	f001 faf4 	bl	bdd0 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a7e8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    a7ec:	eea8 0a28 	vfma.f32	s0, s16, s17
    a7f0:	f001 fb8e 	bl	bf10 <__dbToATableLookup_veneer>
    a7f4:	4804      	ldr	r0, [pc, #16]	; (a808 <noiseSetTilt+0x48>)
}
    a7f6:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a7fa:	4420      	add	r0, r4
}
    a7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a800:	f001 bc1e 	b.w	c040 <__tVZFilterHS_setGain_veneer>
    a804:	2001d1e0 	.word	0x2001d1e0
    a808:	2001d1e8 	.word	0x2001d1e8
    a80c:	f3af 8000 	nop.w
    a810:	f3af 8000 	nop.w
    a814:	f3af 8000 	nop.w
    a818:	f3af 8000 	nop.w
    a81c:	f3af 8000 	nop.w

0000a820 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a820:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    a824:	ed9f 7a08 	vldr	s14, [pc, #32]	; a848 <noiseSetGain+0x28>
{
    a828:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a82a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a82e:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a830:	eeb0 0a67 	vmov.f32	s0, s15
    a834:	f001 fb6c 	bl	bf10 <__dbToATableLookup_veneer>
    a838:	4804      	ldr	r0, [pc, #16]	; (a84c <noiseSetGain+0x2c>)
    a83a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    a83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a842:	f001 bb15 	b.w	be70 <__tVZFilterBell_setGain_veneer>
    a846:	bf00      	nop
    a848:	42080000 	.word	0x42080000
    a84c:	2001d1c4 	.word	0x2001d1c4
    a850:	f3af 8000 	nop.w
    a854:	f3af 8000 	nop.w
    a858:	f3af 8000 	nop.w
    a85c:	f3af 8000 	nop.w

0000a860 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a860:	ed9f 7a09 	vldr	s14, [pc, #36]	; a888 <noiseSetFreq+0x28>
    a864:	eddf 7a09 	vldr	s15, [pc, #36]	; a88c <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a868:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a86c:	b510      	push	{r4, lr}
    a86e:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a870:	eeb0 0a67 	vmov.f32	s0, s15
    a874:	f001 fa70 	bl	bd58 <__faster_mtof_veneer>
    a878:	4805      	ldr	r0, [pc, #20]	; (a890 <noiseSetFreq+0x30>)
    a87a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    a87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a882:	f001 bbc5 	b.w	c010 <__tVZFilterBell_setFreq_veneer>
    a886:	bf00      	nop
    a888:	429a0000 	.word	0x429a0000
    a88c:	42280000 	.word	0x42280000
    a890:	2001d1c4 	.word	0x2001d1c4
    a894:	f3af 8000 	nop.w
    a898:	f3af 8000 	nop.w
    a89c:	f3af 8000 	nop.w

0000a8a0 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    a8a0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    a8a2:	4b28      	ldr	r3, [pc, #160]	; (a944 <noise_tick+0xa4>)
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a8a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    a8a8:	4d27      	ldr	r5, [pc, #156]	; (a948 <noise_tick+0xa8>)
    a8aa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	float enabled = params[Noise].realVal[string];
    a8ae:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a8b2:	4926      	ldr	r1, [pc, #152]	; (a94c <noise_tick+0xac>)
{
    a8b4:	4604      	mov	r4, r0
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a8b6:	4826      	ldr	r0, [pc, #152]	; (a950 <noise_tick+0xb0>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    a8b8:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a8ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    a8be:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    a8c2:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    a8c6:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a8ca:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    a8cc:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a8d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    a8d4:	3201      	adds	r2, #1
    a8d6:	ed91 7a00 	vldr	s14, [r1]
    a8da:	702a      	strb	r2, [r5, #0]
    a8dc:	00a5      	lsls	r5, r4, #2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a8de:	eea7 0a27 	vfma.f32	s0, s14, s15
    a8e2:	f001 faed 	bl	bec0 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    a8e6:	481b      	ldr	r0, [pc, #108]	; (a954 <noise_tick+0xb4>)
    a8e8:	4428      	add	r0, r5
    a8ea:	f001 fa75 	bl	bdd8 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    a8ee:	481a      	ldr	r0, [pc, #104]	; (a958 <noise_tick+0xb8>)
    a8f0:	4428      	add	r0, r5
    a8f2:	f001 fc4d 	bl	c190 <__tVZFilterBell_tick_veneer>
	if (!isfinite(sample))
	{
		nanChuckTest++;
		sample = 0.0f;
	}
	float normSample = (sample + 1.f) * 0.5f;
    a8f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    a8fa:	ed9f 6a18 	vldr	s12, [pc, #96]	; a95c <noise_tick+0xbc>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a8fe:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    a902:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a906:	4b16      	ldr	r3, [pc, #88]	; (a960 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a908:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    a90c:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    a910:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a914:	4a13      	ldr	r2, [pc, #76]	; (a964 <noise_tick+0xc4>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a916:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a918:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a91c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    a920:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a924:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a928:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    a92c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a930:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a934:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a938:	edc2 7a06 	vstr	s15, [r2, #24]
}
    a93c:	ecbd 8b04 	vpop	{d8-d9}
    a940:	bd38      	pop	{r3, r4, r5, pc}
    a942:	bf00      	nop
    a944:	20018f30 	.word	0x20018f30
    a948:	2001d328 	.word	0x2001d328
    a94c:	2001a0e0 	.word	0x2001a0e0
    a950:	2001d1e0 	.word	0x2001d1e0
    a954:	2001d1e8 	.word	0x2001d1e8
    a958:	2001d1c4 	.word	0x2001d1c4
    a95c:	00000000 	.word	0x00000000
    a960:	2001d1d0 	.word	0x2001d1d0
    a964:	2001d418 	.word	0x2001d418
    a968:	f3af 8000 	nop.w
    a96c:	f3af 8000 	nop.w
    a970:	f3af 8000 	nop.w
    a974:	f3af 8000 	nop.w
    a978:	f3af 8000 	nop.w
    a97c:	f3af 8000 	nop.w

0000a980 <audioTickSynth>:
{
    a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    a984:	4db6      	ldr	r5, [pc, #728]	; (ac60 <audioTickSynth+0x2e0>)
		if (knobTicked[i])
    a986:	4cb7      	ldr	r4, [pc, #732]	; (ac64 <audioTickSynth+0x2e4>)
{
    a988:	ed2d 8b08 	vpush	{d8-d11}
    a98c:	b08f      	sub	sp, #60	; 0x3c
    a98e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    a990:	686b      	ldr	r3, [r5, #4]
    a992:	603b      	str	r3, [r7, #0]
	uint32_t tempCountMap = DWT->CYCCNT;
    a994:	686e      	ldr	r6, [r5, #4]
	tickMappings();
    a996:	f7fe fb43 	bl	9020 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    a99a:	686b      	ldr	r3, [r5, #4]
    a99c:	4ab2      	ldr	r2, [pc, #712]	; (ac68 <audioTickSynth+0x2e8>)
    a99e:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a9a0:	48b2      	ldr	r0, [pc, #712]	; (ac6c <audioTickSynth+0x2ec>)
	timeMap = DWT->CYCCNT - tempCountMap;
    a9a2:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    a9a4:	686d      	ldr	r5, [r5, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a9a6:	f001 fc3b 	bl	c220 <__tExpSmooth_tick_veneer>
		if (knobTicked[i])
    a9aa:	6823      	ldr	r3, [r4, #0]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a9ac:	eeb0 9a40 	vmov.f32	s18, s0
		if (knobTicked[i])
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	f040 849e 	bne.w	b2f2 <audioTickSynth+0x972>
    a9b6:	4bae      	ldr	r3, [pc, #696]	; (ac70 <audioTickSynth+0x2f0>)
    a9b8:	623b      	str	r3, [r7, #32]
    a9ba:	6863      	ldr	r3, [r4, #4]
    a9bc:	2b00      	cmp	r3, #0
    a9be:	f040 84af 	bne.w	b320 <audioTickSynth+0x9a0>
    a9c2:	68a3      	ldr	r3, [r4, #8]
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	f040 82d9 	bne.w	af7c <audioTickSynth+0x5fc>
    a9ca:	68e3      	ldr	r3, [r4, #12]
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	f040 82eb 	bne.w	afa8 <audioTickSynth+0x628>
    a9d2:	6923      	ldr	r3, [r4, #16]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	f040 82fd 	bne.w	afd4 <audioTickSynth+0x654>
    a9da:	6963      	ldr	r3, [r4, #20]
    a9dc:	2b00      	cmp	r3, #0
    a9de:	f040 830f 	bne.w	b000 <audioTickSynth+0x680>
    a9e2:	69a3      	ldr	r3, [r4, #24]
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	f040 8321 	bne.w	b02c <audioTickSynth+0x6ac>
    a9ea:	69e3      	ldr	r3, [r4, #28]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	f040 8333 	bne.w	b058 <audioTickSynth+0x6d8>
    a9f2:	6a23      	ldr	r3, [r4, #32]
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	f040 8345 	bne.w	b084 <audioTickSynth+0x704>
    a9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	f040 8357 	bne.w	b0b0 <audioTickSynth+0x730>
    aa02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    aa04:	2b00      	cmp	r3, #0
    aa06:	f040 8369 	bne.w	b0dc <audioTickSynth+0x75c>
    aa0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	f040 837b 	bne.w	b108 <audioTickSynth+0x788>
		if (pedalTicked[i])
    aa12:	4c98      	ldr	r4, [pc, #608]	; (ac74 <audioTickSynth+0x2f4>)
    aa14:	6823      	ldr	r3, [r4, #0]
    aa16:	2b00      	cmp	r3, #0
    aa18:	f040 83a2 	bne.w	b160 <audioTickSynth+0x7e0>
    aa1c:	6863      	ldr	r3, [r4, #4]
    aa1e:	2b00      	cmp	r3, #0
    aa20:	f040 83b4 	bne.w	b18c <audioTickSynth+0x80c>
    aa24:	68a3      	ldr	r3, [r4, #8]
    aa26:	2b00      	cmp	r3, #0
    aa28:	f040 83c6 	bne.w	b1b8 <audioTickSynth+0x838>
    aa2c:	68e3      	ldr	r3, [r4, #12]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	f040 83d8 	bne.w	b1e4 <audioTickSynth+0x864>
    aa34:	6923      	ldr	r3, [r4, #16]
    aa36:	2b00      	cmp	r3, #0
    aa38:	f040 83ea 	bne.w	b210 <audioTickSynth+0x890>
    aa3c:	6963      	ldr	r3, [r4, #20]
    aa3e:	2b00      	cmp	r3, #0
    aa40:	f040 83fc 	bne.w	b23c <audioTickSynth+0x8bc>
    aa44:	69a3      	ldr	r3, [r4, #24]
    aa46:	2b00      	cmp	r3, #0
    aa48:	f040 840e 	bne.w	b268 <audioTickSynth+0x8e8>
    aa4c:	69e3      	ldr	r3, [r4, #28]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	f040 8420 	bne.w	b294 <audioTickSynth+0x914>
    aa54:	6a23      	ldr	r3, [r4, #32]
    aa56:	2b00      	cmp	r3, #0
    aa58:	f040 8432 	bne.w	b2c0 <audioTickSynth+0x940>
    aa5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aa5e:	2b00      	cmp	r3, #0
    aa60:	f040 8472 	bne.w	b348 <audioTickSynth+0x9c8>
	for (int v = 0; v < numStringsThisBoard; v++)
    aa64:	6a3b      	ldr	r3, [r7, #32]
    aa66:	781a      	ldrb	r2, [r3, #0]
    aa68:	2a00      	cmp	r2, #0
    aa6a:	f000 81da 	beq.w	ae22 <audioTickSynth+0x4a2>
    aa6e:	4b82      	ldr	r3, [pc, #520]	; (ac78 <audioTickSynth+0x2f8>)
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    aa70:	4982      	ldr	r1, [pc, #520]	; (ac7c <audioTickSynth+0x2fc>)
	for (int v = 0; v < numStringsThisBoard; v++)
    aa72:	2a01      	cmp	r2, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    aa74:	6809      	ldr	r1, [r1, #0]
    aa76:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    aa7a:	dd01      	ble.n	aa80 <audioTickSynth+0x100>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    aa7c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	float note[numStringsThisBoard];
    aa80:	0093      	lsls	r3, r2, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa82:	f8df a1dc 	ldr.w	sl, [pc, #476]	; ac60 <audioTickSynth+0x2e0>
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aa86:	eddf 8a7e 	vldr	s17, [pc, #504]	; ac80 <audioTickSynth+0x300>
    aa8a:	f04f 0b00 	mov.w	fp, #0
	float note[numStringsThisBoard];
    aa8e:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa90:	f8da 2004 	ldr.w	r2, [sl, #4]
    aa94:	eeb0 aa68 	vmov.f32	s20, s17
    aa98:	eddf aa7a 	vldr	s21, [pc, #488]	; ac84 <audioTickSynth+0x304>
	float note[numStringsThisBoard];
    aa9c:	f023 0307 	bic.w	r3, r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aaa0:	1b52      	subs	r2, r2, r5
			float sample = 0.0f;
    aaa2:	eef0 9a68 	vmov.f32	s19, s17
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aaa6:	46d8      	mov	r8, fp
	float note[numStringsThisBoard];
    aaa8:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aaac:	4b76      	ldr	r3, [pc, #472]	; (ac88 <audioTickSynth+0x308>)
    aaae:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aab0:	f8da 3004 	ldr.w	r3, [sl, #4]
    aab4:	f8c7 d010 	str.w	sp, [r7, #16]
    aab8:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    aaba:	4b74      	ldr	r3, [pc, #464]	; (ac8c <audioTickSynth+0x30c>)
    aabc:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
    aac0:	627b      	str	r3, [r7, #36]	; 0x24
    aac2:	4b73      	ldr	r3, [pc, #460]	; (ac90 <audioTickSynth+0x310>)
    aac4:	61fb      	str	r3, [r7, #28]
    aac6:	4b73      	ldr	r3, [pc, #460]	; (ac94 <audioTickSynth+0x314>)
    aac8:	617b      	str	r3, [r7, #20]
    aaca:	4b73      	ldr	r3, [pc, #460]	; (ac98 <audioTickSynth+0x318>)
    aacc:	62bb      	str	r3, [r7, #40]	; 0x28
    aace:	4b73      	ldr	r3, [pc, #460]	; (ac9c <audioTickSynth+0x31c>)
    aad0:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aad2:	4b73      	ldr	r3, [pc, #460]	; (aca0 <audioTickSynth+0x320>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aad6:	edd3 7a00 	vldr	s15, [r3]
    aada:	4b72      	ldr	r3, [pc, #456]	; (aca4 <audioTickSynth+0x324>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aadc:	4a72      	ldr	r2, [pc, #456]	; (aca8 <audioTickSynth+0x328>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aade:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aae2:	4b72      	ldr	r3, [pc, #456]	; (acac <audioTickSynth+0x32c>)
    aae4:	440a      	add	r2, r1
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aae8:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    aaec:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    aaf0:	f8da 2004 	ldr.w	r2, [sl, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aaf4:	460d      	mov	r5, r1
    aaf6:	ed93 8a00 	vldr	s16, [r3]
    aafa:	693b      	ldr	r3, [r7, #16]
    aafc:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    ab00:	ee78 7a67 	vsub.f32	s15, s16, s15
    ab04:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    ab08:	fe88 8a0a 	vmaxnm.f32	s16, s16, s20
    ab0c:	eca3 8a01 	vstmia	r3!, {s16}
    ab10:	613b      	str	r3, [r7, #16]
    ab12:	ee67 7a87 	vmul.f32	s15, s15, s14
    ab16:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    ab1a:	f8da 3004 	ldr.w	r3, [sl, #4]
    ab1e:	1a9b      	subs	r3, r3, r2
    ab20:	4a63      	ldr	r2, [pc, #396]	; (acb0 <audioTickSynth+0x330>)
    ab22:	6013      	str	r3, [r2, #0]
    ab24:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    ab26:	4b63      	ldr	r3, [pc, #396]	; (acb4 <audioTickSynth+0x334>)
    ab28:	627a      	str	r2, [r7, #36]	; 0x24
    ab2a:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    ab2c:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (envOn[v])
    ab30:	2b00      	cmp	r3, #0
    ab32:	f040 819f 	bne.w	ae74 <audioTickSynth+0x4f4>
    ab36:	4b5f      	ldr	r3, [pc, #380]	; (acb4 <audioTickSynth+0x334>)
    ab38:	785b      	ldrb	r3, [r3, #1]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	f040 8191 	bne.w	ae62 <audioTickSynth+0x4e2>
    ab40:	4b5c      	ldr	r3, [pc, #368]	; (acb4 <audioTickSynth+0x334>)
    ab42:	789b      	ldrb	r3, [r3, #2]
    ab44:	2b00      	cmp	r3, #0
    ab46:	f040 8183 	bne.w	ae50 <audioTickSynth+0x4d0>
    ab4a:	4b5a      	ldr	r3, [pc, #360]	; (acb4 <audioTickSynth+0x334>)
    ab4c:	78db      	ldrb	r3, [r3, #3]
    ab4e:	2b00      	cmp	r3, #0
    ab50:	f040 8175 	bne.w	ae3e <audioTickSynth+0x4be>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    ab54:	f8da 3004 	ldr.w	r3, [sl, #4]
    ab58:	3d88      	subs	r5, #136	; 0x88
    ab5a:	4a57      	ldr	r2, [pc, #348]	; (acb8 <audioTickSynth+0x338>)
    ab5c:	1b1b      	subs	r3, r3, r4
    ab5e:	f8df b184 	ldr.w	fp, [pc, #388]	; ace4 <audioTickSynth+0x364>
    ab62:	4e56      	ldr	r6, [pc, #344]	; (acbc <audioTickSynth+0x33c>)
    ab64:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    ab66:	465c      	mov	r4, fp
    ab68:	f8da 9004 	ldr.w	r9, [sl, #4]
			float sample = 0.0f;
    ab6c:	eba4 010b 	sub.w	r1, r4, fp
		if (lfoOn[i])
    ab70:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    ab74:	4642      	mov	r2, r8
    ab76:	f107 0030 	add.w	r0, r7, #48	; 0x30
		if (lfoOn[i])
    ab7a:	b133      	cbz	r3, ab8a <audioTickSynth+0x20a>
			lfoShapeTick[i](&sample,i, string);
    ab7c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    ab7e:	edc7 9a0c 	vstr	s19, [r7, #48]	; 0x30
			lfoShapeTick[i](&sample,i, string);
    ab82:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab86:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    ab8a:	4b4d      	ldr	r3, [pc, #308]	; (acc0 <audioTickSynth+0x340>)
    ab8c:	3604      	adds	r6, #4
    ab8e:	3508      	adds	r5, #8
    ab90:	429c      	cmp	r4, r3
    ab92:	d1eb      	bne.n	ab6c <audioTickSynth+0x1ec>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    ab94:	f8da 3004 	ldr.w	r3, [sl, #4]
		oscillator_tick(note[v], v);
    ab98:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    ab9c:	4a49      	ldr	r2, [pc, #292]	; (acc4 <audioTickSynth+0x344>)
		oscillator_tick(note[v], v);
    ab9e:	4640      	mov	r0, r8
		timeLFO = DWT->CYCCNT - tempCountLFO;
    aba0:	eba3 0309 	sub.w	r3, r3, r9
    aba4:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    aba6:	f8da 4004 	ldr.w	r4, [sl, #4]
		oscillator_tick(note[v], v);
    abaa:	f7fd f9e9 	bl	7f80 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    abae:	f8da 3004 	ldr.w	r3, [sl, #4]
    abb2:	4a45      	ldr	r2, [pc, #276]	; (acc8 <audioTickSynth+0x348>)
    abb4:	1b1b      	subs	r3, r3, r4
    abb6:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    abb8:	4b44      	ldr	r3, [pc, #272]	; (accc <audioTickSynth+0x34c>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    abba:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (noiseOn)
    abbe:	781b      	ldrb	r3, [r3, #0]
    abc0:	2b00      	cmp	r3, #0
    abc2:	f040 8138 	bne.w	ae36 <audioTickSynth+0x4b6>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    abc6:	f8da 3004 	ldr.w	r3, [sl, #4]
    abca:	4a41      	ldr	r2, [pc, #260]	; (acd0 <audioTickSynth+0x350>)
    abcc:	1b1b      	subs	r3, r3, r4
    abce:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    abd0:	4b40      	ldr	r3, [pc, #256]	; (acd4 <audioTickSynth+0x354>)
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	2b00      	cmp	r3, #0
    abd6:	f000 8199 	beq.w	af0c <audioTickSynth+0x58c>
			filterSamps[0] += oscOuts[0][i][v];
    abda:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
    abdc:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    abde:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    abe2:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    abe6:	d011      	beq.n	ac0c <audioTickSynth+0x28c>
			filterSamps[0] += oscOuts[0][i][v];
    abe8:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    abec:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    abee:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    abf2:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    abf6:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    abfa:	d007      	beq.n	ac0c <audioTickSynth+0x28c>
			filterSamps[0] += oscOuts[0][i][v];
    abfc:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    ac00:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    ac04:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    ac08:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    ac0c:	697b      	ldr	r3, [r7, #20]
		sample = filter_tick(&filterSamps[0], note[v], v);
    ac0e:	eeb0 0a48 	vmov.f32	s0, s16
    ac12:	4641      	mov	r1, r8
    ac14:	f107 0030 	add.w	r0, r7, #48	; 0x30
		filterSamps[0] += noiseOuts[0][v];
    ac18:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    ac1c:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    ac20:	ee76 6a86 	vadd.f32	s13, s13, s12
    ac24:	617b      	str	r3, [r7, #20]
		filterSamps[1] += noiseOuts[1][v];
    ac26:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    ac2a:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
		filterSamps[1] += noiseOuts[1][v];
    ac2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		uint32_t tempCountFilt = DWT->CYCCNT;
    ac32:	f8da 4004 	ldr.w	r4, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    ac36:	f7fd fc73 	bl	8520 <filter_tick>
		timeFilt = DWT->CYCCNT - tempCountFilt;
    ac3a:	f8da 3004 	ldr.w	r3, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    ac3e:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    ac42:	4a25      	ldr	r2, [pc, #148]	; (acd8 <audioTickSynth+0x358>)
    ac44:	1b1b      	subs	r3, r3, r4
    ac46:	6013      	str	r3, [r2, #0]
		if (fxPre)
    ac48:	4b24      	ldr	r3, [pc, #144]	; (acdc <audioTickSynth+0x35c>)
    ac4a:	781b      	ldrb	r3, [r3, #0]
    ac4c:	b123      	cbz	r3, ac58 <audioTickSynth+0x2d8>
			sample *= amplitude[v];
    ac4e:	69fb      	ldr	r3, [r7, #28]
    ac50:	edd3 7a00 	vldr	s15, [r3]
    ac54:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
    ac58:	4b21      	ldr	r3, [pc, #132]	; (ace0 <audioTickSynth+0x360>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    ac5a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    ac5e:	e043      	b.n	ace8 <audioTickSynth+0x368>
    ac60:	e0001000 	.word	0xe0001000
    ac64:	200164e0 	.word	0x200164e0
    ac68:	2001d560 	.word	0x2001d560
    ac6c:	20014268 	.word	0x20014268
    ac70:	20000694 	.word	0x20000694
    ac74:	2001a044 	.word	0x2001a044
    ac78:	2001d418 	.word	0x2001d418
    ac7c:	20014260 	.word	0x20014260
    ac80:	00000000 	.word	0x00000000
    ac84:	42fe0000 	.word	0x42fe0000
    ac88:	2001d574 	.word	0x2001d574
    ac8c:	2001d4a0 	.word	0x2001d4a0
    ac90:	2001cd7c 	.word	0x2001cd7c
    ac94:	2001d1d0 	.word	0x2001d1d0
    ac98:	2001ce88 	.word	0x2001ce88
    ac9c:	2001d1fc 	.word	0x2001d1fc
    aca0:	20018f18 	.word	0x20018f18
    aca4:	20018f14 	.word	0x20018f14
    aca8:	20014230 	.word	0x20014230
    acac:	20014228 	.word	0x20014228
    acb0:	2001d558 	.word	0x2001d558
    acb4:	2001ce84 	.word	0x2001ce84
    acb8:	2001d550 	.word	0x2001d550
    acbc:	2001cfec 	.word	0x2001cfec
    acc0:	2001cf8c 	.word	0x2001cf8c
    acc4:	2001d55c 	.word	0x2001d55c
    acc8:	2001d56c 	.word	0x2001d56c
    accc:	2001d1cc 	.word	0x2001d1cc
    acd0:	2001d564 	.word	0x2001d564
    acd4:	200008ec 	.word	0x200008ec
    acd8:	2001d554 	.word	0x2001d554
    acdc:	200164dd 	.word	0x200164dd
    ace0:	200008f0 	.word	0x200008f0
    ace4:	2001cf88 	.word	0x2001cf88
		if (overSampled)
    ace8:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    acea:	f8da 3004 	ldr.w	r3, [sl, #4]
    acee:	60fb      	str	r3, [r7, #12]
		if (overSampled)
    acf0:	2c00      	cmp	r4, #0
    acf2:	f040 80c6 	bne.w	ae82 <audioTickSynth+0x502>
    acf6:	4a88      	ldr	r2, [pc, #544]	; (af18 <audioTickSynth+0x598>)
    acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acfa:	f8df 927c 	ldr.w	r9, [pc, #636]	; af78 <audioTickSynth+0x5f8>
    acfe:	18d6      	adds	r6, r2, r3
    ad00:	4a86      	ldr	r2, [pc, #536]	; (af1c <audioTickSynth+0x59c>)
    ad02:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    ad04:	f819 3b01 	ldrb.w	r3, [r9], #1
					sample = effectTick[i](sample, i, v); //run the effect
    ad08:	eeb0 0a48 	vmov.f32	s0, s16
    ad0c:	4620      	mov	r0, r4
    ad0e:	4641      	mov	r1, r8
				if (effectsActive[i])
    ad10:	b17b      	cbz	r3, ad32 <audioTickSynth+0x3b2>
					sample = effectTick[i](sample, i, v); //run the effect
    ad12:	4b83      	ldr	r3, [pc, #524]	; (af20 <audioTickSynth+0x5a0>)
    ad14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ad18:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    ad1a:	ed96 7a00 	vldr	s14, [r6]
					sample *= fxPostGain[i][v];
    ad1e:	edd5 6a00 	vldr	s13, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    ad22:	ee67 7a00 	vmul.f32	s15, s14, s0
    ad26:	ee3b 7a47 	vsub.f32	s14, s22, s14
    ad2a:	eee7 7a08 	vfma.f32	s15, s14, s16
					sample *= fxPostGain[i][v];
    ad2e:	ee27 8aa6 	vmul.f32	s16, s15, s13
			for (int i = 0; i < NUM_EFFECT; i++)
    ad32:	3401      	adds	r4, #1
    ad34:	3608      	adds	r6, #8
    ad36:	3508      	adds	r5, #8
    ad38:	2c04      	cmp	r4, #4
    ad3a:	d1e3      	bne.n	ad04 <audioTickSynth+0x384>
		timeOS = DWT->CYCCNT - tempCountOS;
    ad3c:	f8da 3004 	ldr.w	r3, [sl, #4]
    ad40:	68fa      	ldr	r2, [r7, #12]
    ad42:	1a9b      	subs	r3, r3, r2
    ad44:	4a77      	ldr	r2, [pc, #476]	; (af24 <audioTickSynth+0x5a4>)
    ad46:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    ad48:	4b77      	ldr	r3, [pc, #476]	; (af28 <audioTickSynth+0x5a8>)
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	b923      	cbnz	r3, ad58 <audioTickSynth+0x3d8>
			sample *= amplitude[v];
    ad4e:	69fb      	ldr	r3, [r7, #28]
    ad50:	edd3 7a00 	vldr	s15, [r3]
    ad54:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    ad58:	69fb      	ldr	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    ad5a:	eeb0 0a48 	vmov.f32	s0, s16
    ad5e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    ad60:	f108 0801 	add.w	r8, r8, #1
    ad64:	3304      	adds	r3, #4
    ad66:	61fb      	str	r3, [r7, #28]
    ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ad6a:	3304      	adds	r3, #4
    ad6c:	62bb      	str	r3, [r7, #40]	; 0x28
    ad6e:	69bb      	ldr	r3, [r7, #24]
    ad70:	3304      	adds	r3, #4
    ad72:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    ad74:	4b6d      	ldr	r3, [pc, #436]	; (af2c <audioTickSynth+0x5ac>)
    ad76:	1918      	adds	r0, r3, r4
    ad78:	f001 f81e 	bl	bdb8 <__tSVF_tick_veneer>
		masterSample += sample * finalMaster[v];
    ad7c:	4b6c      	ldr	r3, [pc, #432]	; (af30 <audioTickSynth+0x5b0>)
    ad7e:	ed93 7a00 	vldr	s14, [r3]
    ad82:	4b6c      	ldr	r3, [pc, #432]	; (af34 <audioTickSynth+0x5b4>)
    ad84:	4423      	add	r3, r4
    ad86:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    ad8a:	1d23      	adds	r3, r4, #4
    ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample * finalMaster[v];
    ad8e:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    ad92:	6a3b      	ldr	r3, [r7, #32]
    ad94:	781b      	ldrb	r3, [r3, #0]
		masterSample += sample * finalMaster[v];
    ad96:	eee0 8a27 	vfma.f32	s17, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    ad9a:	4543      	cmp	r3, r8
    ad9c:	f73f ae99 	bgt.w	aad2 <audioTickSynth+0x152>
	uint32_t tempVolumePoly = DWT->CYCCNT;
    ada0:	4b65      	ldr	r3, [pc, #404]	; (af38 <audioTickSynth+0x5b8>)
	if (pedalControlsMaster)
    ada2:	4a66      	ldr	r2, [pc, #408]	; (af3c <audioTickSynth+0x5bc>)
	uint32_t tempVolumePoly = DWT->CYCCNT;
    ada4:	6859      	ldr	r1, [r3, #4]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    ada6:	687c      	ldr	r4, [r7, #4]
    ada8:	685b      	ldr	r3, [r3, #4]
    adaa:	4865      	ldr	r0, [pc, #404]	; (af40 <audioTickSynth+0x5c0>)
    adac:	1b1b      	subs	r3, r3, r4
	if (pedalControlsMaster)
    adae:	7812      	ldrb	r2, [r2, #0]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    adb0:	6003      	str	r3, [r0, #0]
	if (pedalControlsMaster)
    adb2:	b1ca      	cbz	r2, ade8 <audioTickSynth+0x468>
    adb4:	ed9f 7a63 	vldr	s14, [pc, #396]	; af44 <audioTickSynth+0x5c4>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    adb8:	ee29 6a09 	vmul.f32	s12, s18, s18
    adbc:	eddf 7a62 	vldr	s15, [pc, #392]	; af48 <audioTickSynth+0x5c8>
    adc0:	ed9f 5a62 	vldr	s10, [pc, #392]	; af4c <audioTickSynth+0x5cc>
    adc4:	eee9 7a07 	vfma.f32	s15, s18, s14
    adc8:	eddf 5a61 	vldr	s11, [pc, #388]	; af50 <audioTickSynth+0x5d0>
    adcc:	ee66 6a09 	vmul.f32	s13, s12, s18
    add0:	ed9f 7a60 	vldr	s14, [pc, #384]	; af54 <audioTickSynth+0x5d4>
    add4:	ee29 7a07 	vmul.f32	s14, s18, s14
    add8:	eee6 7a45 	vfms.f32	s15, s12, s10
    addc:	eee6 7aa5 	vfma.f32	s15, s13, s11
    ade0:	eee6 7ac7 	vfms.f32	s15, s13, s14
		masterSample *= outVol;
    ade4:	ee68 8aa7 	vmul.f32	s17, s17, s15
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    ade8:	4a53      	ldr	r2, [pc, #332]	; (af38 <audioTickSynth+0x5b8>)
    adea:	4c5b      	ldr	r4, [pc, #364]	; (af58 <audioTickSynth+0x5d8>)
    adec:	6853      	ldr	r3, [r2, #4]
	return masterSample * audioMasterLevel * 0.98f;
    adee:	485b      	ldr	r0, [pc, #364]	; (af5c <audioTickSynth+0x5dc>)
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    adf0:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    adf2:	eddf 7a5b 	vldr	s15, [pc, #364]	; af60 <audioTickSynth+0x5e0>
	timeTick = DWT->CYCCNT - tempCountTick;
    adf6:	495b      	ldr	r1, [pc, #364]	; (af64 <audioTickSynth+0x5e4>)
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    adf8:	6023      	str	r3, [r4, #0]
	timeTick = DWT->CYCCNT - tempCountTick;
    adfa:	6853      	ldr	r3, [r2, #4]
	return masterSample * audioMasterLevel * 0.98f;
    adfc:	ed90 0a00 	vldr	s0, [r0]
	timeTick = DWT->CYCCNT - tempCountTick;
    ae00:	683a      	ldr	r2, [r7, #0]
}
    ae02:	373c      	adds	r7, #60	; 0x3c
	return masterSample * audioMasterLevel * 0.98f;
    ae04:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    ae08:	1a9b      	subs	r3, r3, r2
	return masterSample * audioMasterLevel * 0.98f;
    ae0a:	ee20 0a28 	vmul.f32	s0, s0, s17
	timeTick = DWT->CYCCNT - tempCountTick;
    ae0e:	600b      	str	r3, [r1, #0]
}
    ae10:	46bd      	mov	sp, r7
    ae12:	ecbd 8b08 	vpop	{d8-d11}
    ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pedalTicked[i])
    ae1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	f040 8294 	bne.w	b34a <audioTickSynth+0x9ca>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    ae22:	4a45      	ldr	r2, [pc, #276]	; (af38 <audioTickSynth+0x5b8>)
    ae24:	4950      	ldr	r1, [pc, #320]	; (af68 <audioTickSynth+0x5e8>)
    ae26:	6853      	ldr	r3, [r2, #4]
	float masterSample = 0.0f;
    ae28:	eddf 8a50 	vldr	s17, [pc, #320]	; af6c <audioTickSynth+0x5ec>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    ae2c:	1b5b      	subs	r3, r3, r5
    ae2e:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    ae30:	6853      	ldr	r3, [r2, #4]
    ae32:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    ae34:	e7b4      	b.n	ada0 <audioTickSynth+0x420>
			noise_tick(v);
    ae36:	4640      	mov	r0, r8
    ae38:	f7ff fd32 	bl	a8a0 <noise_tick>
    ae3c:	e6c3      	b.n	abc6 <audioTickSynth+0x246>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae40:	f103 0018 	add.w	r0, r3, #24
    ae44:	f001 f880 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae4a:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    ae4e:	e681      	b.n	ab54 <audioTickSynth+0x1d4>
    ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae52:	f103 0010 	add.w	r0, r3, #16
    ae56:	f001 f877 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae5c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    ae60:	e673      	b.n	ab4a <audioTickSynth+0x1ca>
    ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae64:	f103 0008 	add.w	r0, r3, #8
    ae68:	f001 f86e 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae6e:	ed83 0a07 	vstr	s0, [r3, #28]
    ae72:	e665      	b.n	ab40 <audioTickSynth+0x1c0>
    ae74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae76:	f001 f867 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
    ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae7c:	ed83 0a05 	vstr	s0, [r3, #20]
    ae80:	e659      	b.n	ab36 <audioTickSynth+0x1b6>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    ae82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ae84:	eeb0 0a48 	vmov.f32	s0, s16
    ae88:	4b39      	ldr	r3, [pc, #228]	; (af70 <audioTickSynth+0x5f0>)
			for (int i = 0; i < 4; i++)
    ae8a:	2400      	movs	r4, #0
    ae8c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; af78 <audioTickSynth+0x5f8>
    ae90:	1898      	adds	r0, r3, r2
    ae92:	4b21      	ldr	r3, [pc, #132]	; (af18 <audioTickSynth+0x598>)
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    ae94:	4937      	ldr	r1, [pc, #220]	; (af74 <audioTickSynth+0x5f4>)
    ae96:	189e      	adds	r6, r3, r2
    ae98:	4b20      	ldr	r3, [pc, #128]	; (af1c <audioTickSynth+0x59c>)
    ae9a:	ee0b 0a90 	vmov	s23, r0
    ae9e:	189d      	adds	r5, r3, r2
    aea0:	f000 ffa6 	bl	bdf0 <__tOversampler_upsample_veneer>
    aea4:	4641      	mov	r1, r8
    aea6:	46c8      	mov	r8, r9
    aea8:	46ab      	mov	fp, r5
				if (effectsActive[i])
    aeaa:	f818 3b01 	ldrb.w	r3, [r8], #1
    aeae:	b973      	cbnz	r3, aece <audioTickSynth+0x54e>
			for (int i = 0; i < 4; i++)
    aeb0:	3401      	adds	r4, #1
    aeb2:	3608      	adds	r6, #8
    aeb4:	f10b 0b08 	add.w	fp, fp, #8
    aeb8:	2c04      	cmp	r4, #4
    aeba:	d1f6      	bne.n	aeaa <audioTickSynth+0x52a>
    aebc:	4688      	mov	r8, r1
			sample = tOversampler_downsample(&os[v], oversamplerArray);
    aebe:	ee1b 0a90 	vmov	r0, s23
    aec2:	492c      	ldr	r1, [pc, #176]	; (af74 <audioTickSynth+0x5f4>)
    aec4:	f001 f850 	bl	bf68 <__tOversampler_downsample_veneer>
    aec8:	eeb0 8a40 	vmov.f32	s16, s0
    aecc:	e736      	b.n	ad3c <audioTickSynth+0x3bc>
    aece:	4d29      	ldr	r5, [pc, #164]	; (af74 <audioTickSynth+0x5f4>)
    aed0:	f105 0908 	add.w	r9, r5, #8
						float dry = oversamplerArray[j]; //store the dry value to mix later
    aed4:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](dry, i, v); //run the effect
    aed8:	4620      	mov	r0, r4
    aeda:	4b11      	ldr	r3, [pc, #68]	; (af20 <audioTickSynth+0x5a0>)
    aedc:	eeb0 0a48 	vmov.f32	s0, s16
    aee0:	60b9      	str	r1, [r7, #8]
    aee2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    aee6:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    aee8:	edd6 7a00 	vldr	s15, [r6]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    aeec:	ed9b 7a00 	vldr	s14, [fp]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    aef0:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    aef4:	68b9      	ldr	r1, [r7, #8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    aef6:	ee7b 7a67 	vsub.f32	s15, s22, s15
    aefa:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    aefe:	ee67 7a00 	vmul.f32	s15, s14, s0
    af02:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    af06:	454d      	cmp	r5, r9
    af08:	d1e4      	bne.n	aed4 <audioTickSynth+0x554>
    af0a:	e7d1      	b.n	aeb0 <audioTickSynth+0x530>
		for (int i = 0; i < oscToTick; i++)
    af0c:	eddf 7a17 	vldr	s15, [pc, #92]	; af6c <audioTickSynth+0x5ec>
    af10:	eeb0 6a67 	vmov.f32	s12, s15
    af14:	e67a      	b.n	ac0c <audioTickSynth+0x28c>
    af16:	bf00      	nop
    af18:	2001cf18 	.word	0x2001cf18
    af1c:	2001cf38 	.word	0x2001cf38
    af20:	2001ce74 	.word	0x2001ce74
    af24:	2001d568 	.word	0x2001d568
    af28:	200164dd 	.word	0x200164dd
    af2c:	2001cef0 	.word	0x2001cef0
    af30:	20000690 	.word	0x20000690
    af34:	2001cef8 	.word	0x2001cef8
    af38:	e0001000 	.word	0xe0001000
    af3c:	2001a040 	.word	0x2001a040
    af40:	2001d570 	.word	0x2001d570
    af44:	3ef1ac0b 	.word	0x3ef1ac0b
    af48:	3bdc4213 	.word	0x3bdc4213
    af4c:	4022be0a 	.word	0x4022be0a
    af50:	40caa285 	.word	0x40caa285
    af54:	40516313 	.word	0x40516313
    af58:	2001d57c 	.word	0x2001d57c
    af5c:	200006a8 	.word	0x200006a8
    af60:	3f7ae148 	.word	0x3f7ae148
    af64:	2001d578 	.word	0x2001d578
    af68:	2001d574 	.word	0x2001d574
    af6c:	00000000 	.word	0x00000000
    af70:	2001d1f0 	.word	0x2001d1f0
    af74:	2001d22c 	.word	0x2001d22c
    af78:	200143b0 	.word	0x200143b0
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    af7c:	486c      	ldr	r0, [pc, #432]	; (b130 <audioTickSynth+0x7b0>)
    af7e:	f001 f94f 	bl	c220 <__tExpSmooth_tick_veneer>
    af82:	4b6c      	ldr	r3, [pc, #432]	; (b134 <audioTickSynth+0x7b4>)
    af84:	ed83 0a02 	vstr	s0, [r3, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    af88:	6a3b      	ldr	r3, [r7, #32]
    af8a:	781a      	ldrb	r2, [r3, #0]
    af8c:	2a00      	cmp	r2, #0
    af8e:	f43f ad1c 	beq.w	a9ca <audioTickSynth+0x4a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af92:	4b69      	ldr	r3, [pc, #420]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    af94:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af96:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
    af9a:	bf18      	it	ne
    af9c:	ed83 0a0d 	vstrne	s0, [r3, #52]	; 0x34
		if (knobTicked[i])
    afa0:	68e3      	ldr	r3, [r4, #12]
    afa2:	2b00      	cmp	r3, #0
    afa4:	f43f ad15 	beq.w	a9d2 <audioTickSynth+0x52>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    afa8:	4864      	ldr	r0, [pc, #400]	; (b13c <audioTickSynth+0x7bc>)
    afaa:	f001 f939 	bl	c220 <__tExpSmooth_tick_veneer>
    afae:	4b61      	ldr	r3, [pc, #388]	; (b134 <audioTickSynth+0x7b4>)
    afb0:	ed83 0a03 	vstr	s0, [r3, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    afb4:	6a3b      	ldr	r3, [r7, #32]
    afb6:	781a      	ldrb	r2, [r3, #0]
    afb8:	2a00      	cmp	r2, #0
    afba:	f43f ad0a 	beq.w	a9d2 <audioTickSynth+0x52>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afbe:	4b5e      	ldr	r3, [pc, #376]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    afc0:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afc2:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    afc6:	bf18      	it	ne
    afc8:	ed83 0a0f 	vstrne	s0, [r3, #60]	; 0x3c
		if (knobTicked[i])
    afcc:	6923      	ldr	r3, [r4, #16]
    afce:	2b00      	cmp	r3, #0
    afd0:	f43f ad03 	beq.w	a9da <audioTickSynth+0x5a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    afd4:	485a      	ldr	r0, [pc, #360]	; (b140 <audioTickSynth+0x7c0>)
    afd6:	f001 f923 	bl	c220 <__tExpSmooth_tick_veneer>
    afda:	4b56      	ldr	r3, [pc, #344]	; (b134 <audioTickSynth+0x7b4>)
    afdc:	ed83 0a04 	vstr	s0, [r3, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    afe0:	6a3b      	ldr	r3, [r7, #32]
    afe2:	781a      	ldrb	r2, [r3, #0]
    afe4:	2a00      	cmp	r2, #0
    afe6:	f43f acf8 	beq.w	a9da <audioTickSynth+0x5a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afea:	4b53      	ldr	r3, [pc, #332]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    afec:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afee:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    aff2:	bf18      	it	ne
    aff4:	ed83 0a11 	vstrne	s0, [r3, #68]	; 0x44
		if (knobTicked[i])
    aff8:	6963      	ldr	r3, [r4, #20]
    affa:	2b00      	cmp	r3, #0
    affc:	f43f acf1 	beq.w	a9e2 <audioTickSynth+0x62>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b000:	4850      	ldr	r0, [pc, #320]	; (b144 <audioTickSynth+0x7c4>)
    b002:	f001 f90d 	bl	c220 <__tExpSmooth_tick_veneer>
    b006:	4b4b      	ldr	r3, [pc, #300]	; (b134 <audioTickSynth+0x7b4>)
    b008:	ed83 0a05 	vstr	s0, [r3, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    b00c:	6a3b      	ldr	r3, [r7, #32]
    b00e:	781a      	ldrb	r2, [r3, #0]
    b010:	2a00      	cmp	r2, #0
    b012:	f43f ace6 	beq.w	a9e2 <audioTickSynth+0x62>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b016:	4b48      	ldr	r3, [pc, #288]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b018:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b01a:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    b01e:	bf18      	it	ne
    b020:	ed83 0a13 	vstrne	s0, [r3, #76]	; 0x4c
		if (knobTicked[i])
    b024:	69a3      	ldr	r3, [r4, #24]
    b026:	2b00      	cmp	r3, #0
    b028:	f43f acdf 	beq.w	a9ea <audioTickSynth+0x6a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b02c:	4846      	ldr	r0, [pc, #280]	; (b148 <audioTickSynth+0x7c8>)
    b02e:	f001 f8f7 	bl	c220 <__tExpSmooth_tick_veneer>
    b032:	4b40      	ldr	r3, [pc, #256]	; (b134 <audioTickSynth+0x7b4>)
    b034:	ed83 0a06 	vstr	s0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    b038:	6a3b      	ldr	r3, [r7, #32]
    b03a:	781a      	ldrb	r2, [r3, #0]
    b03c:	2a00      	cmp	r2, #0
    b03e:	f43f acd4 	beq.w	a9ea <audioTickSynth+0x6a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b042:	4b3d      	ldr	r3, [pc, #244]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b044:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b046:	ed83 0a14 	vstr	s0, [r3, #80]	; 0x50
    b04a:	bf18      	it	ne
    b04c:	ed83 0a15 	vstrne	s0, [r3, #84]	; 0x54
		if (knobTicked[i])
    b050:	69e3      	ldr	r3, [r4, #28]
    b052:	2b00      	cmp	r3, #0
    b054:	f43f accd 	beq.w	a9f2 <audioTickSynth+0x72>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b058:	483c      	ldr	r0, [pc, #240]	; (b14c <audioTickSynth+0x7cc>)
    b05a:	f001 f8e1 	bl	c220 <__tExpSmooth_tick_veneer>
    b05e:	4b35      	ldr	r3, [pc, #212]	; (b134 <audioTickSynth+0x7b4>)
    b060:	ed83 0a07 	vstr	s0, [r3, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    b064:	6a3b      	ldr	r3, [r7, #32]
    b066:	781a      	ldrb	r2, [r3, #0]
    b068:	2a00      	cmp	r2, #0
    b06a:	f43f acc2 	beq.w	a9f2 <audioTickSynth+0x72>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b06e:	4b32      	ldr	r3, [pc, #200]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b070:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b072:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
    b076:	bf18      	it	ne
    b078:	ed83 0a17 	vstrne	s0, [r3, #92]	; 0x5c
		if (knobTicked[i])
    b07c:	6a23      	ldr	r3, [r4, #32]
    b07e:	2b00      	cmp	r3, #0
    b080:	f43f acbb 	beq.w	a9fa <audioTickSynth+0x7a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b084:	4832      	ldr	r0, [pc, #200]	; (b150 <audioTickSynth+0x7d0>)
    b086:	f001 f8cb 	bl	c220 <__tExpSmooth_tick_veneer>
    b08a:	4b2a      	ldr	r3, [pc, #168]	; (b134 <audioTickSynth+0x7b4>)
    b08c:	ed83 0a08 	vstr	s0, [r3, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    b090:	6a3b      	ldr	r3, [r7, #32]
    b092:	781a      	ldrb	r2, [r3, #0]
    b094:	2a00      	cmp	r2, #0
    b096:	f43f acb0 	beq.w	a9fa <audioTickSynth+0x7a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b09a:	4b27      	ldr	r3, [pc, #156]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b09c:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b09e:	ed83 0a18 	vstr	s0, [r3, #96]	; 0x60
    b0a2:	bf18      	it	ne
    b0a4:	ed83 0a19 	vstrne	s0, [r3, #100]	; 0x64
		if (knobTicked[i])
    b0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	f43f aca9 	beq.w	aa02 <audioTickSynth+0x82>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b0b0:	4828      	ldr	r0, [pc, #160]	; (b154 <audioTickSynth+0x7d4>)
    b0b2:	f001 f8b5 	bl	c220 <__tExpSmooth_tick_veneer>
    b0b6:	4b1f      	ldr	r3, [pc, #124]	; (b134 <audioTickSynth+0x7b4>)
    b0b8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    b0bc:	6a3b      	ldr	r3, [r7, #32]
    b0be:	781a      	ldrb	r2, [r3, #0]
    b0c0:	2a00      	cmp	r2, #0
    b0c2:	f43f ac9e 	beq.w	aa02 <audioTickSynth+0x82>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0c6:	4b1c      	ldr	r3, [pc, #112]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b0c8:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0ca:	ed83 0a1a 	vstr	s0, [r3, #104]	; 0x68
    b0ce:	bf18      	it	ne
    b0d0:	ed83 0a1b 	vstrne	s0, [r3, #108]	; 0x6c
		if (knobTicked[i])
    b0d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	f43f ac97 	beq.w	aa0a <audioTickSynth+0x8a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b0dc:	481e      	ldr	r0, [pc, #120]	; (b158 <audioTickSynth+0x7d8>)
    b0de:	f001 f89f 	bl	c220 <__tExpSmooth_tick_veneer>
    b0e2:	4b14      	ldr	r3, [pc, #80]	; (b134 <audioTickSynth+0x7b4>)
    b0e4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
			for (int v = 0; v < numStringsThisBoard; v++)
    b0e8:	6a3b      	ldr	r3, [r7, #32]
    b0ea:	781a      	ldrb	r2, [r3, #0]
    b0ec:	2a00      	cmp	r2, #0
    b0ee:	f43f ac8c 	beq.w	aa0a <audioTickSynth+0x8a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0f2:	4b11      	ldr	r3, [pc, #68]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b0f4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0f6:	ed83 0a1c 	vstr	s0, [r3, #112]	; 0x70
    b0fa:	bf18      	it	ne
    b0fc:	ed83 0a1d 	vstrne	s0, [r3, #116]	; 0x74
		if (knobTicked[i])
    b100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b102:	2b00      	cmp	r3, #0
    b104:	f43f ac85 	beq.w	aa12 <audioTickSynth+0x92>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b108:	4814      	ldr	r0, [pc, #80]	; (b15c <audioTickSynth+0x7dc>)
    b10a:	f001 f889 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b10e:	6a3a      	ldr	r2, [r7, #32]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b110:	4b08      	ldr	r3, [pc, #32]	; (b134 <audioTickSynth+0x7b4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b112:	7812      	ldrb	r2, [r2, #0]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b114:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    b118:	2a00      	cmp	r2, #0
    b11a:	f43f ac7a 	beq.w	aa12 <audioTickSynth+0x92>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b11e:	4b06      	ldr	r3, [pc, #24]	; (b138 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b120:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b122:	ed83 0a1e 	vstr	s0, [r3, #120]	; 0x78
			for (int v = 0; v < numStringsThisBoard; v++)
    b126:	f43f ac74 	beq.w	aa12 <audioTickSynth+0x92>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b12a:	ed83 0a1f 	vstr	s0, [r3, #124]	; 0x7c
			for (int v = 0; v < numStringsThisBoard; v++)
    b12e:	e470      	b.n	aa12 <audioTickSynth+0x92>
    b130:	2000524c 	.word	0x2000524c
    b134:	200051f4 	.word	0x200051f4
    b138:	2001d418 	.word	0x2001d418
    b13c:	20005250 	.word	0x20005250
    b140:	20005254 	.word	0x20005254
    b144:	20005258 	.word	0x20005258
    b148:	2000525c 	.word	0x2000525c
    b14c:	20005260 	.word	0x20005260
    b150:	20005264 	.word	0x20005264
    b154:	20005268 	.word	0x20005268
    b158:	2000526c 	.word	0x2000526c
    b15c:	20005270 	.word	0x20005270
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b160:	4883      	ldr	r0, [pc, #524]	; (b370 <audioTickSynth+0x9f0>)
    b162:	f001 f85d 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b166:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b168:	4e82      	ldr	r6, [pc, #520]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b16a:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b16c:	ed86 0a00 	vstr	s0, [r6]
			for (int v = 0; v < numStringsThisBoard; v++)
    b170:	2a00      	cmp	r2, #0
    b172:	f43f ac53 	beq.w	aa1c <audioTickSynth+0x9c>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b176:	4b80      	ldr	r3, [pc, #512]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b178:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b17a:	ed83 0a38 	vstr	s0, [r3, #224]	; 0xe0
    b17e:	bf18      	it	ne
    b180:	ed83 0a39 	vstrne	s0, [r3, #228]	; 0xe4
		if (pedalTicked[i])
    b184:	6863      	ldr	r3, [r4, #4]
    b186:	2b00      	cmp	r3, #0
    b188:	f43f ac4c 	beq.w	aa24 <audioTickSynth+0xa4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b18c:	487b      	ldr	r0, [pc, #492]	; (b37c <audioTickSynth+0x9fc>)
    b18e:	f001 f847 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b192:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b194:	4e77      	ldr	r6, [pc, #476]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b196:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b198:	ed86 0a01 	vstr	s0, [r6, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    b19c:	2a00      	cmp	r2, #0
    b19e:	f43f ac41 	beq.w	aa24 <audioTickSynth+0xa4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1a2:	4b75      	ldr	r3, [pc, #468]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1a4:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1a6:	ed83 0a3a 	vstr	s0, [r3, #232]	; 0xe8
    b1aa:	bf18      	it	ne
    b1ac:	ed83 0a3b 	vstrne	s0, [r3, #236]	; 0xec
		if (pedalTicked[i])
    b1b0:	68a3      	ldr	r3, [r4, #8]
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	f43f ac3a 	beq.w	aa2c <audioTickSynth+0xac>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1b8:	4871      	ldr	r0, [pc, #452]	; (b380 <audioTickSynth+0xa00>)
    b1ba:	f001 f831 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b1be:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1c0:	4e6c      	ldr	r6, [pc, #432]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1c2:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1c4:	ed86 0a02 	vstr	s0, [r6, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    b1c8:	2a00      	cmp	r2, #0
    b1ca:	f43f ac2f 	beq.w	aa2c <audioTickSynth+0xac>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1ce:	4b6a      	ldr	r3, [pc, #424]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1d0:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1d2:	ed83 0a3c 	vstr	s0, [r3, #240]	; 0xf0
    b1d6:	bf18      	it	ne
    b1d8:	ed83 0a3d 	vstrne	s0, [r3, #244]	; 0xf4
		if (pedalTicked[i])
    b1dc:	68e3      	ldr	r3, [r4, #12]
    b1de:	2b00      	cmp	r3, #0
    b1e0:	f43f ac28 	beq.w	aa34 <audioTickSynth+0xb4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1e4:	4867      	ldr	r0, [pc, #412]	; (b384 <audioTickSynth+0xa04>)
    b1e6:	f001 f81b 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b1ea:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1ec:	4e61      	ldr	r6, [pc, #388]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1ee:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1f0:	ed86 0a03 	vstr	s0, [r6, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    b1f4:	2a00      	cmp	r2, #0
    b1f6:	f43f ac1d 	beq.w	aa34 <audioTickSynth+0xb4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1fa:	4b5f      	ldr	r3, [pc, #380]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1fc:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1fe:	ed83 0a3e 	vstr	s0, [r3, #248]	; 0xf8
    b202:	bf18      	it	ne
    b204:	ed83 0a3f 	vstrne	s0, [r3, #252]	; 0xfc
		if (pedalTicked[i])
    b208:	6923      	ldr	r3, [r4, #16]
    b20a:	2b00      	cmp	r3, #0
    b20c:	f43f ac16 	beq.w	aa3c <audioTickSynth+0xbc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b210:	485d      	ldr	r0, [pc, #372]	; (b388 <audioTickSynth+0xa08>)
    b212:	f001 f805 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b216:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b218:	4e56      	ldr	r6, [pc, #344]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b21a:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b21c:	ed86 0a04 	vstr	s0, [r6, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    b220:	2a00      	cmp	r2, #0
    b222:	f43f ac0b 	beq.w	aa3c <audioTickSynth+0xbc>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b226:	4b54      	ldr	r3, [pc, #336]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b228:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b22a:	ed83 0a40 	vstr	s0, [r3, #256]	; 0x100
    b22e:	bf18      	it	ne
    b230:	ed83 0a41 	vstrne	s0, [r3, #260]	; 0x104
		if (pedalTicked[i])
    b234:	6963      	ldr	r3, [r4, #20]
    b236:	2b00      	cmp	r3, #0
    b238:	f43f ac04 	beq.w	aa44 <audioTickSynth+0xc4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b23c:	4853      	ldr	r0, [pc, #332]	; (b38c <audioTickSynth+0xa0c>)
    b23e:	f000 ffef 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b242:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b244:	4e4b      	ldr	r6, [pc, #300]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b246:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b248:	ed86 0a05 	vstr	s0, [r6, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    b24c:	2a00      	cmp	r2, #0
    b24e:	f43f abf9 	beq.w	aa44 <audioTickSynth+0xc4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b252:	4b49      	ldr	r3, [pc, #292]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b254:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b256:	ed83 0a42 	vstr	s0, [r3, #264]	; 0x108
    b25a:	bf18      	it	ne
    b25c:	ed83 0a43 	vstrne	s0, [r3, #268]	; 0x10c
		if (pedalTicked[i])
    b260:	69a3      	ldr	r3, [r4, #24]
    b262:	2b00      	cmp	r3, #0
    b264:	f43f abf2 	beq.w	aa4c <audioTickSynth+0xcc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b268:	4849      	ldr	r0, [pc, #292]	; (b390 <audioTickSynth+0xa10>)
    b26a:	f000 ffd9 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b26e:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b270:	4e40      	ldr	r6, [pc, #256]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b272:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b274:	ed86 0a06 	vstr	s0, [r6, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    b278:	2a00      	cmp	r2, #0
    b27a:	f43f abe7 	beq.w	aa4c <audioTickSynth+0xcc>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b27e:	4b3e      	ldr	r3, [pc, #248]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b280:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b282:	ed83 0a44 	vstr	s0, [r3, #272]	; 0x110
    b286:	bf18      	it	ne
    b288:	ed83 0a45 	vstrne	s0, [r3, #276]	; 0x114
		if (pedalTicked[i])
    b28c:	69e3      	ldr	r3, [r4, #28]
    b28e:	2b00      	cmp	r3, #0
    b290:	f43f abe0 	beq.w	aa54 <audioTickSynth+0xd4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b294:	483f      	ldr	r0, [pc, #252]	; (b394 <audioTickSynth+0xa14>)
    b296:	f000 ffc3 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b29a:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b29c:	4e35      	ldr	r6, [pc, #212]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b29e:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2a0:	ed86 0a07 	vstr	s0, [r6, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    b2a4:	2a00      	cmp	r2, #0
    b2a6:	f43f abd5 	beq.w	aa54 <audioTickSynth+0xd4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2aa:	4b33      	ldr	r3, [pc, #204]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2ac:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2ae:	ed83 0a46 	vstr	s0, [r3, #280]	; 0x118
    b2b2:	bf18      	it	ne
    b2b4:	ed83 0a47 	vstrne	s0, [r3, #284]	; 0x11c
		if (pedalTicked[i])
    b2b8:	6a23      	ldr	r3, [r4, #32]
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	f43f abce 	beq.w	aa5c <audioTickSynth+0xdc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2c0:	4835      	ldr	r0, [pc, #212]	; (b398 <audioTickSynth+0xa18>)
    b2c2:	f000 ffad 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b2c6:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2c8:	4e2a      	ldr	r6, [pc, #168]	; (b374 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2ca:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2cc:	ed86 0a08 	vstr	s0, [r6, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    b2d0:	2a00      	cmp	r2, #0
    b2d2:	f43f ada2 	beq.w	ae1a <audioTickSynth+0x49a>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2d6:	4b28      	ldr	r3, [pc, #160]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2d8:	2a01      	cmp	r2, #1
		if (pedalTicked[i])
    b2da:	6a62      	ldr	r2, [r4, #36]	; 0x24
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2dc:	ed83 0a48 	vstr	s0, [r3, #288]	; 0x120
    b2e0:	bf18      	it	ne
    b2e2:	ed83 0a49 	vstrne	s0, [r3, #292]	; 0x124
		if (pedalTicked[i])
    b2e6:	2a00      	cmp	r2, #0
    b2e8:	d12f      	bne.n	b34a <audioTickSynth+0x9ca>
	for (int v = 0; v < numStringsThisBoard; v++)
    b2ea:	6a3a      	ldr	r2, [r7, #32]
    b2ec:	7812      	ldrb	r2, [r2, #0]
    b2ee:	f7ff bbbf 	b.w	aa70 <audioTickSynth+0xf0>
			for (int v = 0; v < numStringsThisBoard; v++)
    b2f2:	4e2a      	ldr	r6, [pc, #168]	; (b39c <audioTickSynth+0xa1c>)
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b2f4:	482a      	ldr	r0, [pc, #168]	; (b3a0 <audioTickSynth+0xa20>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2f6:	623e      	str	r6, [r7, #32]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b2f8:	f000 ff92 	bl	c220 <__tExpSmooth_tick_veneer>
    b2fc:	4b29      	ldr	r3, [pc, #164]	; (b3a4 <audioTickSynth+0xa24>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2fe:	7832      	ldrb	r2, [r6, #0]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b300:	ed83 0a00 	vstr	s0, [r3]
			for (int v = 0; v < numStringsThisBoard; v++)
    b304:	2a00      	cmp	r2, #0
    b306:	f43f ab58 	beq.w	a9ba <audioTickSynth+0x3a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b30a:	4b1b      	ldr	r3, [pc, #108]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b30c:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b30e:	ed83 0a08 	vstr	s0, [r3, #32]
    b312:	bf18      	it	ne
    b314:	ed83 0a09 	vstrne	s0, [r3, #36]	; 0x24
		if (knobTicked[i])
    b318:	6863      	ldr	r3, [r4, #4]
    b31a:	2b00      	cmp	r3, #0
    b31c:	f43f ab51 	beq.w	a9c2 <audioTickSynth+0x42>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b320:	4821      	ldr	r0, [pc, #132]	; (b3a8 <audioTickSynth+0xa28>)
    b322:	f000 ff7d 	bl	c220 <__tExpSmooth_tick_veneer>
    b326:	4b1f      	ldr	r3, [pc, #124]	; (b3a4 <audioTickSynth+0xa24>)
    b328:	ed83 0a01 	vstr	s0, [r3, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    b32c:	6a3b      	ldr	r3, [r7, #32]
    b32e:	781a      	ldrb	r2, [r3, #0]
    b330:	2a00      	cmp	r2, #0
    b332:	f43f ab46 	beq.w	a9c2 <audioTickSynth+0x42>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b336:	4b10      	ldr	r3, [pc, #64]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b338:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b33a:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    b33e:	bf18      	it	ne
    b340:	ed83 0a0b 	vstrne	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    b344:	f7ff bb3d 	b.w	a9c2 <audioTickSynth+0x42>
    b348:	4e0a      	ldr	r6, [pc, #40]	; (b374 <audioTickSynth+0x9f4>)
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b34a:	4818      	ldr	r0, [pc, #96]	; (b3ac <audioTickSynth+0xa2c>)
    b34c:	f000 ff68 	bl	c220 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b350:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b352:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    b356:	781a      	ldrb	r2, [r3, #0]
    b358:	2a00      	cmp	r2, #0
    b35a:	f43f ad62 	beq.w	ae22 <audioTickSynth+0x4a2>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b35e:	4b06      	ldr	r3, [pc, #24]	; (b378 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b360:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b362:	ed83 0a4a 	vstr	s0, [r3, #296]	; 0x128
    b366:	bf18      	it	ne
    b368:	ed83 0a4b 	vstrne	s0, [r3, #300]	; 0x12c
			for (int v = 0; v < numStringsThisBoard; v++)
    b36c:	e7bd      	b.n	b2ea <audioTickSynth+0x96a>
    b36e:	bf00      	nop
    b370:	20005330 	.word	0x20005330
    b374:	20005308 	.word	0x20005308
    b378:	2001d418 	.word	0x2001d418
    b37c:	20005334 	.word	0x20005334
    b380:	20005338 	.word	0x20005338
    b384:	2000533c 	.word	0x2000533c
    b388:	20005340 	.word	0x20005340
    b38c:	20005344 	.word	0x20005344
    b390:	20005348 	.word	0x20005348
    b394:	2000534c 	.word	0x2000534c
    b398:	20005350 	.word	0x20005350
    b39c:	20000694 	.word	0x20000694
    b3a0:	20005244 	.word	0x20005244
    b3a4:	200051f4 	.word	0x200051f4
    b3a8:	20005248 	.word	0x20005248
    b3ac:	20005354 	.word	0x20005354
    b3b0:	f3af 8000 	nop.w
    b3b4:	f3af 8000 	nop.w
    b3b8:	f3af 8000 	nop.w
    b3bc:	f3af 8000 	nop.w

0000b3c0 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    b3c0:	4ba4      	ldr	r3, [pc, #656]	; (b654 <audioFrameSynth+0x294>)
{
    b3c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    b3c6:	f8df 92ec 	ldr.w	r9, [pc, #748]	; b6b4 <audioFrameSynth+0x2f4>
{
    b3ca:	4607      	mov	r7, r0
    b3cc:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b3d0:	685b      	ldr	r3, [r3, #4]
{
    b3d2:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    b3d4:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    b3d6:	f899 3000 	ldrb.w	r3, [r9]
    b3da:	2b00      	cmp	r3, #0
    b3dc:	f040 8084 	bne.w	b4e8 <audioFrameSynth+0x128>
    b3e0:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b6b8 <audioFrameSynth+0x2f8>
	if (newPluck)
    b3e4:	f8d8 3000 	ldr.w	r3, [r8]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d03a      	beq.n	b462 <audioFrameSynth+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    b3ec:	4e9a      	ldr	r6, [pc, #616]	; (b658 <audioFrameSynth+0x298>)
    b3ee:	7833      	ldrb	r3, [r6, #0]
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	d033      	beq.n	b45c <audioFrameSynth+0x9c>
    b3f4:	4a99      	ldr	r2, [pc, #612]	; (b65c <audioFrameSynth+0x29c>)
    b3f6:	2500      	movs	r5, #0
    b3f8:	4999      	ldr	r1, [pc, #612]	; (b660 <audioFrameSynth+0x2a0>)
    b3fa:	9702      	str	r7, [sp, #8]
    b3fc:	9603      	str	r6, [sp, #12]
    b3fe:	460f      	mov	r7, r1
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b400:	eddf 8a98 	vldr	s17, [pc, #608]	; b664 <audioFrameSynth+0x2a4>
    b404:	4616      	mov	r6, r2
    b406:	f8df 92b4 	ldr.w	r9, [pc, #692]	; b6bc <audioFrameSynth+0x2fc>
    b40a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; b6c0 <audioFrameSynth+0x300>
    b40e:	4c96      	ldr	r4, [pc, #600]	; (b668 <audioFrameSynth+0x2a8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    b410:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    b414:	b292      	uxth	r2, r2
    b416:	b932      	cbnz	r2, b426 <audioFrameSynth+0x66>
    b418:	4a94      	ldr	r2, [pc, #592]	; (b66c <audioFrameSynth+0x2ac>)
    b41a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    b41e:	b292      	uxth	r2, r2
    b420:	2a00      	cmp	r2, #0
    b422:	f040 808c 	bne.w	b53e <audioFrameSynth+0x17e>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    b426:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    b42a:	b292      	uxth	r2, r2
    b42c:	b132      	cbz	r2, b43c <audioFrameSynth+0x7c>
    b42e:	4a8f      	ldr	r2, [pc, #572]	; (b66c <audioFrameSynth+0x2ac>)
    b430:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    b434:	b292      	uxth	r2, r2
    b436:	2a00      	cmp	r2, #0
    b438:	f000 80ea 	beq.w	b610 <audioFrameSynth+0x250>
			previousStringInputs[i] = stringInputs[i];
    b43c:	4a8b      	ldr	r2, [pc, #556]	; (b66c <audioFrameSynth+0x2ac>)
		for (int i = 0; i < numStringsThisBoard; i++)
    b43e:	3604      	adds	r6, #4
    b440:	f109 0904 	add.w	r9, r9, #4
    b444:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    b448:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    b44c:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    b44e:	b292      	uxth	r2, r2
    b450:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    b454:	3501      	adds	r5, #1
    b456:	42ab      	cmp	r3, r5
    b458:	dcda      	bgt.n	b410 <audioFrameSynth+0x50>
    b45a:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    b45c:	2300      	movs	r3, #0
    b45e:	f8c8 3000 	str.w	r3, [r8]
    b462:	4c83      	ldr	r4, [pc, #524]	; (b670 <audioFrameSynth+0x2b0>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b464:	ed9f 8a83 	vldr	s16, [pc, #524]	; b674 <audioFrameSynth+0x2b4>
    b468:	f504 7500 	add.w	r5, r4, #512	; 0x200
    b46c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    b470:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    b474:	f7ff fa84 	bl	a980 <audioTickSynth>
    b478:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b47c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b47e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b482:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b484:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    b488:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b48c:	d1f2      	bne.n	b474 <audioFrameSynth+0xb4>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b48e:	487a      	ldr	r0, [pc, #488]	; (b678 <audioFrameSynth+0x2b8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b490:	4b70      	ldr	r3, [pc, #448]	; (b654 <audioFrameSynth+0x294>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b492:	edd0 6a00 	vldr	s13, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b496:	685b      	ldr	r3, [r3, #4]
    b498:	9801      	ldr	r0, [sp, #4]
	if (frameLoadPercentage > .99f)
    b49a:	ed9f 7a78 	vldr	s14, [pc, #480]	; b67c <audioFrameSynth+0x2bc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b49e:	1a1b      	subs	r3, r3, r0
    b4a0:	4977      	ldr	r1, [pc, #476]	; (b680 <audioFrameSynth+0x2c0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b4a2:	4a78      	ldr	r2, [pc, #480]	; (b684 <audioFrameSynth+0x2c4>)
    b4a4:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b4a8:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    b4ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    b4b2:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b4b6:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    b4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b4be:	dd0e      	ble.n	b4de <audioFrameSynth+0x11e>
		frameLoadOverCount++;
    b4c0:	4a71      	ldr	r2, [pc, #452]	; (b688 <audioFrameSynth+0x2c8>)
    b4c2:	6813      	ldr	r3, [r2, #0]
    b4c4:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    b4c6:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    b4c8:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    b4ca:	d908      	bls.n	b4de <audioFrameSynth+0x11e>
			if (overSampled == 1)
    b4cc:	4b6f      	ldr	r3, [pc, #444]	; (b68c <audioFrameSynth+0x2cc>)
    b4ce:	681a      	ldr	r2, [r3, #0]
    b4d0:	2a01      	cmp	r2, #1
    b4d2:	d02b      	beq.n	b52c <audioFrameSynth+0x16c>
			else if (oscToTick > 0)
    b4d4:	4a6e      	ldr	r2, [pc, #440]	; (b690 <audioFrameSynth+0x2d0>)
    b4d6:	7813      	ldrb	r3, [r2, #0]
    b4d8:	b10b      	cbz	r3, b4de <audioFrameSynth+0x11e>
				oscToTick--;
    b4da:	3b01      	subs	r3, #1
    b4dc:	7013      	strb	r3, [r2, #0]
}
    b4de:	b007      	add	sp, #28
    b4e0:	ecbd 8b04 	vpop	{d8-d9}
    b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    b4e8:	4e5b      	ldr	r6, [pc, #364]	; (b658 <audioFrameSynth+0x298>)
    b4ea:	7833      	ldrb	r3, [r6, #0]
    b4ec:	b1ab      	cbz	r3, b51a <audioFrameSynth+0x15a>
    b4ee:	2500      	movs	r5, #0
    b4f0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b6c4 <audioFrameSynth+0x304>
    b4f4:	4c5c      	ldr	r4, [pc, #368]	; (b668 <audioFrameSynth+0x2a8>)
				previousStringInputs[i] = 0;
    b4f6:	46aa      	mov	sl, r5
    b4f8:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    b4fc:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    b4fe:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    b502:	f000 fe5d 	bl	c1c0 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    b506:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    b50a:	45c3      	cmp	fp, r8
    b50c:	d1f6      	bne.n	b4fc <audioFrameSynth+0x13c>
		for (int i = 0; i < numStringsThisBoard; i++)
    b50e:	3501      	adds	r5, #1
    b510:	7833      	ldrb	r3, [r6, #0]
    b512:	f108 0804 	add.w	r8, r8, #4
    b516:	42ab      	cmp	r3, r5
    b518:	dcee      	bgt.n	b4f8 <audioFrameSynth+0x138>
		resetStringInputs = 0;
    b51a:	2300      	movs	r3, #0
		newPluck = 1;
    b51c:	f8df 8198 	ldr.w	r8, [pc, #408]	; b6b8 <audioFrameSynth+0x2f8>
		resetStringInputs = 0;
    b520:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    b524:	2301      	movs	r3, #1
    b526:	f8c8 3000 	str.w	r3, [r8]
    b52a:	e75b      	b.n	b3e4 <audioFrameSynth+0x24>
				overSampled = 0;
    b52c:	2000      	movs	r0, #0
    b52e:	6018      	str	r0, [r3, #0]
}
    b530:	b007      	add	sp, #28
    b532:	ecbd 8b04 	vpop	{d8-d9}
    b536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    b53a:	f000 bcfd 	b.w	bf38 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b53e:	4b4b      	ldr	r3, [pc, #300]	; (b66c <audioFrameSynth+0x2ac>)
    b540:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    b544:	f8df a168 	ldr.w	sl, [pc, #360]	; b6b0 <audioFrameSynth+0x2f0>
						if (useVelocity == 0) envVel = 1.f;
    b548:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b54c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    b550:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    b554:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b556:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    b558:	4655      	mov	r5, sl
    b55a:	9405      	str	r4, [sp, #20]
    b55c:	46ca      	mov	sl, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b55e:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    b562:	4b4c      	ldr	r3, [pc, #304]	; (b694 <audioFrameSynth+0x2d4>)
						voiceSounding = 1;
    b564:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b566:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    b56a:	681b      	ldr	r3, [r3, #0]
    b56c:	603b      	str	r3, [r7, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b56e:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    b572:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    b576:	4650      	mov	r0, sl
					if (envOn[v])
    b578:	b16b      	cbz	r3, b596 <audioFrameSynth+0x1d6>
						if (useVelocity == 0) envVel = 1.f;
    b57a:	edd4 7a00 	vldr	s15, [r4]
    b57e:	eef5 7a40 	vcmp.f32	s15, #0.0
    b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    b586:	fe09 0a08 	vseleq.f32	s0, s18, s16
    b58a:	f000 fba5 	bl	bcd8 <__tADSRT_on_veneer>
						voiceSounding = 1;
    b58e:	2001      	movs	r0, #1
    b590:	4b41      	ldr	r3, [pc, #260]	; (b698 <audioFrameSynth+0x2d8>)
    b592:	4942      	ldr	r1, [pc, #264]	; (b69c <audioFrameSynth+0x2dc>)
    b594:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    b596:	42a9      	cmp	r1, r5
    b598:	f10a 0a08 	add.w	sl, sl, #8
    b59c:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    b5a0:	d1e7      	bne.n	b572 <audioFrameSynth+0x1b2>
						if (noteOnSync > 0.5f)
    b5a2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    b5a6:	f8df a0f8 	ldr.w	sl, [pc, #248]	; b6a0 <audioFrameSynth+0x2e0>
						if (noteOnSync > 0.5f)
    b5aa:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
				for (int v = 0; v < NUM_ENV; v++)
    b5ae:	f8cd 8014 	str.w	r8, [sp, #20]
    b5b2:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    b5b6:	46a0      	mov	r8, r4
    b5b8:	465c      	mov	r4, fp
    b5ba:	009b      	lsls	r3, r3, #2
    b5bc:	330c      	adds	r3, #12
    b5be:	9304      	str	r3, [sp, #16]
						if (noteOnSync > 0.5f)
    b5c0:	4b37      	ldr	r3, [pc, #220]	; (b6a0 <audioFrameSynth+0x2e0>)
    b5c2:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    b5c6:	f81a 3b01 	ldrb.w	r3, [sl], #1
    b5ca:	b163      	cbz	r3, b5e6 <audioFrameSynth+0x226>
						if (noteOnSync > 0.5f)
    b5cc:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    b5d0:	eef4 7ac9 	vcmpe.f32	s15, s18
    b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5d8:	dd05      	ble.n	b5e6 <audioFrameSynth+0x226>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    b5da:	9b04      	ldr	r3, [sp, #16]
    b5dc:	4629      	mov	r1, r5
    b5de:	ed94 0a00 	vldr	s0, [r4]
    b5e2:	58e3      	ldr	r3, [r4, r3]
    b5e4:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    b5e6:	4b2f      	ldr	r3, [pc, #188]	; (b6a4 <audioFrameSynth+0x2e4>)
    b5e8:	348c      	adds	r4, #140	; 0x8c
    b5ea:	4553      	cmp	r3, sl
    b5ec:	d1e8      	bne.n	b5c0 <audioFrameSynth+0x200>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b5ee:	482e      	ldr	r0, [pc, #184]	; (b6a8 <audioFrameSynth+0x2e8>)
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b5f0:	4644      	mov	r4, r8
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b5f2:	492e      	ldr	r1, [pc, #184]	; (b6ac <audioFrameSynth+0x2ec>)
    b5f4:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    b5f6:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b5f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b5fc:	3201      	adds	r2, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b5fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b602:	7002      	strb	r2, [r0, #0]
    b604:	680a      	ldr	r2, [r1, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    b606:	781b      	ldrb	r3, [r3, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b608:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b60c:	60b2      	str	r2, [r6, #8]
			{
    b60e:	e715      	b.n	b43c <audioFrameSynth+0x7c>
					if (envOn[v])
    b610:	4b27      	ldr	r3, [pc, #156]	; (b6b0 <audioFrameSynth+0x2f0>)
    b612:	781b      	ldrb	r3, [r3, #0]
    b614:	b95b      	cbnz	r3, b62e <audioFrameSynth+0x26e>
    b616:	4b26      	ldr	r3, [pc, #152]	; (b6b0 <audioFrameSynth+0x2f0>)
    b618:	785b      	ldrb	r3, [r3, #1]
    b61a:	b9b3      	cbnz	r3, b64a <audioFrameSynth+0x28a>
    b61c:	4b24      	ldr	r3, [pc, #144]	; (b6b0 <audioFrameSynth+0x2f0>)
    b61e:	789b      	ldrb	r3, [r3, #2]
    b620:	b973      	cbnz	r3, b640 <audioFrameSynth+0x280>
    b622:	4b23      	ldr	r3, [pc, #140]	; (b6b0 <audioFrameSynth+0x2f0>)
    b624:	78db      	ldrb	r3, [r3, #3]
    b626:	b933      	cbnz	r3, b636 <audioFrameSynth+0x276>
		for (int i = 0; i < numStringsThisBoard; i++)
    b628:	9b03      	ldr	r3, [sp, #12]
    b62a:	781b      	ldrb	r3, [r3, #0]
    b62c:	e706      	b.n	b43c <audioFrameSynth+0x7c>
						tADSRT_off(&envs[v][i]);
    b62e:	4648      	mov	r0, r9
    b630:	f000 fc06 	bl	be40 <__tADSRT_off_veneer>
    b634:	e7ef      	b.n	b616 <audioFrameSynth+0x256>
    b636:	f109 0018 	add.w	r0, r9, #24
    b63a:	f000 fc01 	bl	be40 <__tADSRT_off_veneer>
    b63e:	e7f3      	b.n	b628 <audioFrameSynth+0x268>
    b640:	f109 0010 	add.w	r0, r9, #16
    b644:	f000 fbfc 	bl	be40 <__tADSRT_off_veneer>
    b648:	e7eb      	b.n	b622 <audioFrameSynth+0x262>
    b64a:	f109 0008 	add.w	r0, r9, #8
    b64e:	f000 fbf7 	bl	be40 <__tADSRT_off_veneer>
    b652:	e7e3      	b.n	b61c <audioFrameSynth+0x25c>
    b654:	e0001000 	.word	0xe0001000
    b658:	20000694 	.word	0x20000694
    b65c:	2001d4a8 	.word	0x2001d4a8
    b660:	20014230 	.word	0x20014230
    b664:	37800080 	.word	0x37800080
    b668:	20005364 	.word	0x20005364
    b66c:	20014210 	.word	0x20014210
    b670:	30000000 	.word	0x30000000
    b674:	4b000000 	.word	0x4b000000
    b678:	20000684 	.word	0x20000684
    b67c:	3f7d70a4 	.word	0x3f7d70a4
    b680:	20014250 	.word	0x20014250
    b684:	200051d8 	.word	0x200051d8
    b688:	200051d4 	.word	0x200051d4
    b68c:	200008f0 	.word	0x200008f0
    b690:	200008ec 	.word	0x200008ec
    b694:	20005300 	.word	0x20005300
    b698:	2001d59c 	.word	0x2001d59c
    b69c:	2001ce88 	.word	0x2001ce88
    b6a0:	2001cf88 	.word	0x2001cf88
    b6a4:	2001cf8c 	.word	0x2001cf8c
    b6a8:	2001d328 	.word	0x2001d328
    b6ac:	2001a0e0 	.word	0x2001a0e0
    b6b0:	2001ce84 	.word	0x2001ce84
    b6b4:	2000577c 	.word	0x2000577c
    b6b8:	200052f4 	.word	0x200052f4
    b6bc:	2001ce88 	.word	0x2001ce88
    b6c0:	20019de0 	.word	0x20019de0
    b6c4:	2001cea8 	.word	0x2001cea8
	...

0000b6e0 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    b6e0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    b6e2:	4c07      	ldr	r4, [pc, #28]	; (b700 <audioInitVocal+0x20>)
    b6e4:	2241      	movs	r2, #65	; 0x41
    b6e6:	4b07      	ldr	r3, [pc, #28]	; (b704 <audioInitVocal+0x24>)
    b6e8:	2116      	movs	r1, #22
    b6ea:	4620      	mov	r0, r4
    b6ec:	f000 fd5c 	bl	c1a8 <__tVoc_init_veneer>
    b6f0:	1d20      	adds	r0, r4, #4
    b6f2:	4b04      	ldr	r3, [pc, #16]	; (b704 <audioInitVocal+0x24>)
    b6f4:	2241      	movs	r2, #65	; 0x41
    b6f6:	2116      	movs	r1, #22
	}
}
    b6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    b6fc:	f000 bd54 	b.w	c1a8 <__tVoc_init_veneer>
    b700:	2001d5c0 	.word	0x2001d5c0
    b704:	20005298 	.word	0x20005298
    b708:	f3af 8000 	nop.w
    b70c:	f3af 8000 	nop.w
    b710:	f3af 8000 	nop.w
    b714:	f3af 8000 	nop.w
    b718:	f3af 8000 	nop.w
    b71c:	f3af 8000 	nop.w

0000b720 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    b720:	4770      	bx	lr
    b722:	bf00      	nop
    b724:	f3af 8000 	nop.w
    b728:	f3af 8000 	nop.w
    b72c:	f3af 8000 	nop.w
    b730:	f3af 8000 	nop.w
    b734:	f3af 8000 	nop.w
    b738:	f3af 8000 	nop.w
    b73c:	f3af 8000 	nop.w

0000b740 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    b740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b744:	4c1a      	ldr	r4, [pc, #104]	; (b7b0 <audioSwitchToVocal+0x70>)
	for (int i = 0; i < 12; i++)
    b746:	2500      	movs	r5, #0
    b748:	4e1a      	ldr	r6, [pc, #104]	; (b7b4 <audioSwitchToVocal+0x74>)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
		knobFrozen[i] = 1;
    b74a:	f04f 0901 	mov.w	r9, #1
    b74e:	4f1a      	ldr	r7, [pc, #104]	; (b7b8 <audioSwitchToVocal+0x78>)
    b750:	f8df 806c 	ldr.w	r8, [pc, #108]	; b7c0 <audioSwitchToVocal+0x80>
    b754:	f8df a06c 	ldr.w	sl, [pc, #108]	; b7c4 <audioSwitchToVocal+0x84>
{
    b758:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    b75c:	ed9f 8a17 	vldr	s16, [pc, #92]	; b7bc <audioSwitchToVocal+0x7c>
    b760:	e00e      	b.n	b780 <audioSwitchToVocal+0x40>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    b762:	ecb7 0a01 	vldmia	r7!, {s0}
    b766:	f000 fc2b 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b76a:	4620      	mov	r0, r4
    b76c:	ecb6 0a01 	vldmia	r6!, {s0}
    b770:	f000 fc26 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    b774:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    b778:	3501      	adds	r5, #1
    b77a:	3404      	adds	r4, #4
    b77c:	2d0c      	cmp	r5, #12
    b77e:	d013      	beq.n	b7a8 <audioSwitchToVocal+0x68>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    b780:	4620      	mov	r0, r4
    b782:	eeb0 0a48 	vmov.f32	s0, s16
    b786:	f000 fc47 	bl	c018 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    b78a:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    b78e:	4620      	mov	r0, r4
		if (voice == 60)
    b790:	2b3c      	cmp	r3, #60	; 0x3c
    b792:	d1e6      	bne.n	b762 <audioSwitchToVocal+0x22>
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b794:	46b3      	mov	fp, r6
    b796:	ecb6 0a01 	vldmia	r6!, {s0}
    b79a:	f000 fc11 	bl	bfc0 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 12; i++)
    b79e:	3704      	adds	r7, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b7a0:	4620      	mov	r0, r4
    b7a2:	ed9b 0a00 	vldr	s0, [fp]
    b7a6:	e7e3      	b.n	b770 <audioSwitchToVocal+0x30>
	}
}
    b7a8:	ecbd 8b02 	vpop	{d8}
    b7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7b0:	20005244 	.word	0x20005244
    b7b4:	2000090c 	.word	0x2000090c
    b7b8:	20018544 	.word	0x20018544
    b7bc:	3c23d70a 	.word	0x3c23d70a
    b7c0:	2001425c 	.word	0x2001425c
    b7c4:	200051e0 	.word	0x200051e0
    b7c8:	f3af 8000 	nop.w
    b7cc:	f3af 8000 	nop.w
    b7d0:	f3af 8000 	nop.w
    b7d4:	f3af 8000 	nop.w
    b7d8:	f3af 8000 	nop.w
    b7dc:	f3af 8000 	nop.w

0000b7e0 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    b7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7e4:	4c3f      	ldr	r4, [pc, #252]	; (b8e4 <audioTickVocal+0x104>)
    b7e6:	4d40      	ldr	r5, [pc, #256]	; (b8e8 <audioTickVocal+0x108>)
    b7e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    b7ec:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b7f0:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    b7f2:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b7f4:	f000 fd14 	bl	c220 <__tExpSmooth_tick_veneer>
    b7f8:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    b7fc:	42a6      	cmp	r6, r4
    b7fe:	d1f7      	bne.n	b7f0 <audioTickVocal+0x10>

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);



	for (int i = 0; i < numStringsThisBoard; i++)
    b800:	f8df 9110 	ldr.w	r9, [pc, #272]	; b914 <audioTickVocal+0x134>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    b804:	4839      	ldr	r0, [pc, #228]	; (b8ec <audioTickVocal+0x10c>)
    b806:	f000 fd0b 	bl	c220 <__tExpSmooth_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    b80a:	f899 3000 	ldrb.w	r3, [r9]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    b80e:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    b812:	2b00      	cmp	r3, #0
    b814:	d054      	beq.n	b8c0 <audioTickVocal+0xe0>
    b816:	4d36      	ldr	r5, [pc, #216]	; (b8f0 <audioTickVocal+0x110>)
    b818:	2400      	movs	r4, #0
    b81a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b918 <audioTickVocal+0x138>
    b81e:	4f35      	ldr	r7, [pc, #212]	; (b8f4 <audioTickVocal+0x114>)
	float tempSamp = 0.0f;
    b820:	ed9f 9a35 	vldr	s18, [pc, #212]	; b8f8 <audioTickVocal+0x118>
    b824:	f8df b0f4 	ldr.w	fp, [pc, #244]	; b91c <audioTickVocal+0x13c>
    b828:	f8df a0f4 	ldr.w	sl, [pc, #244]	; b920 <audioTickVocal+0x140>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b82c:	4628      	mov	r0, r5
    b82e:	00a6      	lsls	r6, r4, #2
    b830:	f000 fb22 	bl	be78 <__tVoc_tick_veneer>
    b834:	eef0 8a40 	vmov.f32	s17, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b838:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b83a:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    b83e:	f000 fb83 	bl	bf48 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b842:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b846:	eea8 9a80 	vfma.f32	s18, s17, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b84a:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    b84e:	3401      	adds	r4, #1
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b850:	ee30 0a27 	vadd.f32	s0, s0, s15
    b854:	f000 fb20 	bl	be98 <__mtofTableLookup_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    b858:	4628      	mov	r0, r5
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b85a:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    b85e:	f000 fa07 	bl	bc70 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    b862:	4628      	mov	r0, r5
    b864:	eeb0 0a48 	vmov.f32	s0, s16
    b868:	f000 fb46 	bl	bef8 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    b86c:	f899 3000 	ldrb.w	r3, [r9]
    b870:	3504      	adds	r5, #4
    b872:	42a3      	cmp	r3, r4
    b874:	dcda      	bgt.n	b82c <audioTickVocal+0x4c>
    b876:	ed9f 7a21 	vldr	s14, [pc, #132]	; b8fc <audioTickVocal+0x11c>
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	//float outVol = 0.008315613f + 0.3774075f*volumeSmoothed - 1.785774f*volumeSmoothed*volumeSmoothed + 4.218241f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.8576009f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.9656285f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b87a:	ee68 6a08 	vmul.f32	s13, s16, s16
    b87e:	eddf 7a20 	vldr	s15, [pc, #128]	; b900 <audioTickVocal+0x120>
    b882:	eddf 5a20 	vldr	s11, [pc, #128]	; b904 <audioTickVocal+0x124>
    b886:	eee8 7a07 	vfma.f32	s15, s16, s14
    b88a:	ed9f 6a1f 	vldr	s12, [pc, #124]	; b908 <audioTickVocal+0x128>
    b88e:	ed9f 5a1f 	vldr	s10, [pc, #124]	; b90c <audioTickVocal+0x12c>

	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    b892:	eee6 7ae5 	vfms.f32	s15, s13, s11
    b896:	4b1e      	ldr	r3, [pc, #120]	; (b910 <audioTickVocal+0x130>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b898:	ee28 7a26 	vmul.f32	s14, s16, s13
    b89c:	ee28 8a05 	vmul.f32	s16, s16, s10
	tempSamp *= masterVolFromBrain;
    b8a0:	ed93 0a00 	vldr	s0, [r3]
    b8a4:	eee7 7a06 	vfma.f32	s15, s14, s12
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b8a8:	eee7 7a48 	vfms.f32	s15, s14, s16
    b8ac:	ee29 9a27 	vmul.f32	s18, s18, s15
	return tanhf(tempSamp);
    b8b0:	ee29 0a00 	vmul.f32	s0, s18, s0
}
    b8b4:	ecbd 8b04 	vpop	{d8-d9}
    b8b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return tanhf(tempSamp);
    b8bc:	f000 bcd8 	b.w	c270 <__tanhf_veneer>
    b8c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; b8fc <audioTickVocal+0x11c>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b8c4:	ee60 6a00 	vmul.f32	s13, s0, s0
    b8c8:	eddf 7a0d 	vldr	s15, [pc, #52]	; b900 <audioTickVocal+0x120>
    b8cc:	eddf 5a0d 	vldr	s11, [pc, #52]	; b904 <audioTickVocal+0x124>
    b8d0:	eee0 7a07 	vfma.f32	s15, s0, s14
    b8d4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; b908 <audioTickVocal+0x128>
    b8d8:	ed9f 5a0c 	vldr	s10, [pc, #48]	; b90c <audioTickVocal+0x12c>
	float tempSamp = 0.0f;
    b8dc:	ed9f 9a06 	vldr	s18, [pc, #24]	; b8f8 <audioTickVocal+0x118>
    b8e0:	e7d7      	b.n	b892 <audioTickVocal+0xb2>
    b8e2:	bf00      	nop
    b8e4:	200051f4 	.word	0x200051f4
    b8e8:	20005244 	.word	0x20005244
    b8ec:	20014268 	.word	0x20014268
    b8f0:	2001d5c0 	.word	0x2001d5c0
    b8f4:	200141e0 	.word	0x200141e0
    b8f8:	00000000 	.word	0x00000000
    b8fc:	3ef1ac0b 	.word	0x3ef1ac0b
    b900:	3bdc4213 	.word	0x3bdc4213
    b904:	4022be0a 	.word	0x4022be0a
    b908:	40caa285 	.word	0x40caa285
    b90c:	40516313 	.word	0x40516313
    b910:	2000068c 	.word	0x2000068c
    b914:	20000694 	.word	0x20000694
    b918:	20014230 	.word	0x20014230
    b91c:	200051c8 	.word	0x200051c8
    b920:	20014228 	.word	0x20014228
    b924:	f3af 8000 	nop.w
    b928:	f3af 8000 	nop.w
    b92c:	f3af 8000 	nop.w
    b930:	f3af 8000 	nop.w
    b934:	f3af 8000 	nop.w
    b938:	f3af 8000 	nop.w
    b93c:	f3af 8000 	nop.w

0000b940 <audioFrameVocal>:
{
    b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b944:	4bb0      	ldr	r3, [pc, #704]	; (bc08 <audioFrameVocal+0x2c8>)
{
    b946:	4680      	mov	r8, r0
	if (resetStringInputs)
    b948:	f8df b310 	ldr.w	fp, [pc, #784]	; bc5c <audioFrameVocal+0x31c>
		for (int i = 0; i < numStringsThisBoard; i++)
    b94c:	4faf      	ldr	r7, [pc, #700]	; (bc0c <audioFrameVocal+0x2cc>)
{
    b94e:	ed2d 8b08 	vpush	{d8-d11}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b952:	685e      	ldr	r6, [r3, #4]
{
    b954:	b083      	sub	sp, #12
	if (resetStringInputs)
    b956:	f89b 3000 	ldrb.w	r3, [fp]
    b95a:	2b00      	cmp	r3, #0
    b95c:	f040 80cf 	bne.w	bafe <audioFrameVocal+0x1be>
	if (newPluck)
    b960:	4dab      	ldr	r5, [pc, #684]	; (bc10 <audioFrameVocal+0x2d0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    b962:	7839      	ldrb	r1, [r7, #0]
	if (newPluck)
    b964:	682b      	ldr	r3, [r5, #0]
    b966:	2b00      	cmp	r3, #0
    b968:	f040 80e6 	bne.w	bb38 <audioFrameVocal+0x1f8>
	for (int i = 0; i < numStringsThisBoard; i++)
    b96c:	2900      	cmp	r1, #0
    b96e:	f000 809a 	beq.w	baa6 <audioFrameVocal+0x166>
		float doublecompute = knobScaled[1] > 0.5f;
    b972:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    b976:	4da7      	ldr	r5, [pc, #668]	; (bc14 <audioFrameVocal+0x2d4>)
    b978:	f8df 92e4 	ldr.w	r9, [pc, #740]	; bc60 <audioFrameVocal+0x320>
	for (int i = 0; i < numStringsThisBoard; i++)
    b97c:	f04f 0b00 	mov.w	fp, #0
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b980:	eddf aaa5 	vldr	s21, [pc, #660]	; bc18 <audioFrameVocal+0x2d8>
			int32_t squishedTract = (newTractLength*0.168f) ;
    b984:	ed9f aaa5 	vldr	s20, [pc, #660]	; bc1c <audioFrameVocal+0x2dc>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    b988:	eddf 9aa5 	vldr	s19, [pc, #660]	; bc20 <audioFrameVocal+0x2e0>
    b98c:	ed9f 9aa5 	vldr	s18, [pc, #660]	; bc24 <audioFrameVocal+0x2e4>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    b990:	eddf 8aa5 	vldr	s17, [pc, #660]	; bc28 <audioFrameVocal+0x2e8>
    b994:	f8df a2cc 	ldr.w	sl, [pc, #716]	; bc64 <audioFrameVocal+0x324>
    b998:	4ca4      	ldr	r4, [pc, #656]	; (bc2c <audioFrameVocal+0x2ec>)
    b99a:	9601      	str	r6, [sp, #4]
		float doublecompute = knobScaled[1] > 0.5f;
    b99c:	edd4 7a01 	vldr	s15, [r4, #4]
    b9a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9a4:	f8d9 3000 	ldr.w	r3, [r9]
		float doublecompute = knobScaled[1] > 0.5f;
    b9a8:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
    b9ac:	eef4 7acb 	vcmpe.f32	s15, s22
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b9b0:	ed94 8a00 	vldr	s16, [r4]
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9b4:	f103 020a 	add.w	r2, r3, #10
    b9b8:	3b0a      	subs	r3, #10
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b9ba:	ee28 8a2a 	vmul.f32	s16, s16, s21
	for (int i = 0; i < numStringsThisBoard; i++)
    b9be:	f10b 0b01 	add.w	fp, fp, #1
		float doublecompute = knobScaled[1] > 0.5f;
    b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9c6:	ee06 2a90 	vmov	s13, r2
    b9ca:	ee07 3a90 	vmov	s15, r3
    b9ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float doublecompute = knobScaled[1] > 0.5f;
    b9d2:	fe37 7a06 	vselgt.f32	s14, s14, s12
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b9d6:	ee28 8a07 	vmul.f32	s16, s16, s14
		float doublecompute = knobScaled[1] > 0.5f;
    b9da:	bfcc      	ite	gt
    b9dc:	2601      	movgt	r6, #1
    b9de:	2600      	movle	r6, #0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			int32_t squishedTract = (newTractLength*0.168f) ;
    b9e4:	ee28 7a0a 	vmul.f32	s14, s16, s20
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9e8:	eef4 6ac8 	vcmpe.f32	s13, s16
			int32_t squishedTract = (newTractLength*0.168f) ;
    b9ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			int32_t squishedTract = (newTractLength*0.168f) ;
    b9f4:	ee17 3a10 	vmov	r3, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b9f8:	d404      	bmi.n	ba04 <audioFrameVocal+0xc4>
    b9fa:	eef4 7ac8 	vcmpe.f32	s15, s16
    b9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba02:	dd0f      	ble.n	ba24 <audioFrameVocal+0xe4>
			if ( squishedTract != prevActualTractLength[i])
    ba04:	f8da 2000 	ldr.w	r2, [sl]
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    ba08:	4628      	mov	r0, r5
    ba0a:	1c99      	adds	r1, r3, #2
			if ( squishedTract != prevActualTractLength[i])
    ba0c:	9300      	str	r3, [sp, #0]
    ba0e:	429a      	cmp	r2, r3
    ba10:	d004      	beq.n	ba1c <audioFrameVocal+0xdc>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    ba12:	f000 f9b5 	bl	bd80 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    ba16:	9b00      	ldr	r3, [sp, #0]
    ba18:	f8ca 3000 	str.w	r3, [sl]
			prevTractLength[i] = newTractLength;
    ba1c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    ba20:	ed89 8a00 	vstr	s16, [r9]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    ba24:	4631      	mov	r1, r6
    ba26:	4628      	mov	r0, r5
    ba28:	f000 fb12 	bl	c050 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    ba2c:	4628      	mov	r0, r5
    ba2e:	ed94 0a04 	vldr	s0, [r4, #16]
	for (int i = 0; i < numStringsThisBoard; i++)
    ba32:	f109 0904 	add.w	r9, r9, #4
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    ba36:	f000 fa37 	bl	bea8 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    ba3a:	4628      	mov	r0, r5
    ba3c:	ed94 0a05 	vldr	s0, [r4, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    ba40:	f10a 0a04 	add.w	sl, sl, #4
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    ba44:	f000 f944 	bl	bcd0 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    ba48:	4628      	mov	r0, r5
    ba4a:	ed94 0a06 	vldr	s0, [r4, #24]
    ba4e:	f000 fb1b 	bl	c088 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    ba52:	4628      	mov	r0, r5
    ba54:	ed94 0a07 	vldr	s0, [r4, #28]
    ba58:	f000 faf6 	bl	c048 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    ba5c:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    ba60:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    ba64:	4628      	mov	r0, r5
    ba66:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    ba6a:	ed94 0a08 	vldr	s0, [r4, #32]
    ba6e:	f000 fbab 	bl	c1c8 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    ba72:	eeb0 0a49 	vmov.f32	s0, s18
    ba76:	edd4 7a03 	vldr	s15, [r4, #12]
    ba7a:	4628      	mov	r0, r5
    ba7c:	eea7 0aa9 	vfma.f32	s0, s15, s19
    ba80:	f000 f8fa 	bl	bc78 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    ba84:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    ba88:	eeb0 0a68 	vmov.f32	s0, s17
    ba8c:	ed94 7a02 	vldr	s14, [r4, #8]
    ba90:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    ba92:	3504      	adds	r5, #4
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    ba94:	eea7 0a27 	vfma.f32	s0, s14, s15
    ba98:	f000 fa72 	bl	bf80 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    ba9c:	783b      	ldrb	r3, [r7, #0]
    ba9e:	455b      	cmp	r3, fp
    baa0:	f73f af7c 	bgt.w	b99c <audioFrameVocal+0x5c>
    baa4:	9e01      	ldr	r6, [sp, #4]
    baa6:	4c62      	ldr	r4, [pc, #392]	; (bc30 <audioFrameVocal+0x2f0>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    baa8:	ed9f 8a62 	vldr	s16, [pc, #392]	; bc34 <audioFrameVocal+0x2f4>
    baac:	f504 7500 	add.w	r5, r4, #512	; 0x200
    bab0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    bab4:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    bab8:	f7ff fe92 	bl	b7e0 <audioTickVocal>
    babc:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    bac0:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    bac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    bac6:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    bac8:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    bacc:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    bad0:	d1f2      	bne.n	bab8 <audioFrameVocal+0x178>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    bad2:	4b4d      	ldr	r3, [pc, #308]	; (bc08 <audioFrameVocal+0x2c8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    bad4:	4858      	ldr	r0, [pc, #352]	; (bc38 <audioFrameVocal+0x2f8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    bad6:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    bad8:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    badc:	1b9b      	subs	r3, r3, r6
    bade:	4957      	ldr	r1, [pc, #348]	; (bc3c <audioFrameVocal+0x2fc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    bae0:	4a57      	ldr	r2, [pc, #348]	; (bc40 <audioFrameVocal+0x300>)
    bae2:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    bae6:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    baec:	ee67 7a87 	vmul.f32	s15, s15, s14
    baf0:	edc2 7a00 	vstr	s15, [r2]
}
    baf4:	b003      	add	sp, #12
    baf6:	ecbd 8b08 	vpop	{d8-d11}
    bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    bafe:	7839      	ldrb	r1, [r7, #0]
    bb00:	2900      	cmp	r1, #0
    bb02:	d04c      	beq.n	bb9e <audioFrameVocal+0x25e>
    bb04:	2400      	movs	r4, #0
    bb06:	4d4f      	ldr	r5, [pc, #316]	; (bc44 <audioFrameVocal+0x304>)
    bb08:	f8df 915c 	ldr.w	r9, [pc, #348]	; bc68 <audioFrameVocal+0x328>
			previousStringInputs[i] = 0;
    bb0c:	46a2      	mov	sl, r4
			tADSRT_clear(&fenvelopes[i]);
    bb0e:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    bb10:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    bb12:	f000 fb55 	bl	c1c0 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    bb16:	7839      	ldrb	r1, [r7, #0]
			previousStringInputs[i] = 0;
    bb18:	f829 a014 	strh.w	sl, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    bb1c:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    bb1e:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    bb22:	42a1      	cmp	r1, r4
    bb24:	dcf3      	bgt.n	bb0e <audioFrameVocal+0x1ce>
		resetStringInputs = 0;
    bb26:	f88b 3000 	strb.w	r3, [fp]
		newPluck = 1;
    bb2a:	2301      	movs	r3, #1
    bb2c:	4d38      	ldr	r5, [pc, #224]	; (bc10 <audioFrameVocal+0x2d0>)
    bb2e:	602b      	str	r3, [r5, #0]
	if (newPluck)
    bb30:	682b      	ldr	r3, [r5, #0]
    bb32:	2b00      	cmp	r3, #0
    bb34:	f43f af1a 	beq.w	b96c <audioFrameVocal+0x2c>
		for (int i = 0; i < numStringsThisBoard; i++)
    bb38:	2900      	cmp	r1, #0
    bb3a:	d063      	beq.n	bc04 <audioFrameVocal+0x2c4>
    bb3c:	f8df b104 	ldr.w	fp, [pc, #260]	; bc44 <audioFrameVocal+0x304>
    bb40:	2400      	movs	r4, #0
    bb42:	4b41      	ldr	r3, [pc, #260]	; (bc48 <audioFrameVocal+0x308>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb44:	9500      	str	r5, [sp, #0]
    bb46:	465d      	mov	r5, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bb48:	eddf 8a40 	vldr	s17, [pc, #256]	; bc4c <audioFrameVocal+0x30c>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb4c:	469b      	mov	fp, r3
    bb4e:	f8df a11c 	ldr.w	sl, [pc, #284]	; bc6c <audioFrameVocal+0x32c>
    bb52:	f8df 9114 	ldr.w	r9, [pc, #276]	; bc68 <audioFrameVocal+0x328>
    bb56:	4a3e      	ldr	r2, [pc, #248]	; (bc50 <audioFrameVocal+0x310>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    bb58:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    bb5c:	b29b      	uxth	r3, r3
    bb5e:	b91b      	cbnz	r3, bb68 <audioFrameVocal+0x228>
    bb60:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    bb64:	b29b      	uxth	r3, r3
    bb66:	bb1b      	cbnz	r3, bbb0 <audioFrameVocal+0x270>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    bb68:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    bb6c:	b29b      	uxth	r3, r3
    bb6e:	b123      	cbz	r3, bb7a <audioFrameVocal+0x23a>
    bb70:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    bb74:	b29b      	uxth	r3, r3
    bb76:	2b00      	cmp	r3, #0
    bb78:	d03e      	beq.n	bbf8 <audioFrameVocal+0x2b8>
			previousStringInputs[i] = stringInputs[i];
    bb7a:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    bb7e:	f10b 0b04 	add.w	fp, fp, #4
    bb82:	f10a 0a04 	add.w	sl, sl, #4
    bb86:	3504      	adds	r5, #4
			previousStringInputs[i] = stringInputs[i];
    bb88:	fa1f fc8c 	uxth.w	ip, ip
    bb8c:	f829 c014 	strh.w	ip, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    bb90:	3401      	adds	r4, #1
    bb92:	42a1      	cmp	r1, r4
    bb94:	dce0      	bgt.n	bb58 <audioFrameVocal+0x218>
    bb96:	9d00      	ldr	r5, [sp, #0]
		newPluck = 0;
    bb98:	2300      	movs	r3, #0
    bb9a:	602b      	str	r3, [r5, #0]
    bb9c:	e6e6      	b.n	b96c <audioFrameVocal+0x2c>
		newPluck = 1;
    bb9e:	4d1c      	ldr	r5, [pc, #112]	; (bc10 <audioFrameVocal+0x2d0>)
    bba0:	2301      	movs	r3, #1
		resetStringInputs = 0;
    bba2:	f88b 1000 	strb.w	r1, [fp]
		newPluck = 1;
    bba6:	602b      	str	r3, [r5, #0]
	if (newPluck)
    bba8:	682b      	ldr	r3, [r5, #0]
    bbaa:	2b00      	cmp	r3, #0
    bbac:	d1f4      	bne.n	bb98 <audioFrameVocal+0x258>
    bbae:	e77a      	b.n	baa6 <audioFrameVocal+0x166>
				stringOctave[i] = octave;
    bbb0:	4b28      	ldr	r3, [pc, #160]	; (bc54 <audioFrameVocal+0x314>)
    bbb2:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbb6:	4b28      	ldr	r3, [pc, #160]	; (bc58 <audioFrameVocal+0x318>)
				stringOctave[i] = octave;
    bbb8:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbbc:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bbc0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbc4:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bbc8:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbca:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bbce:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbd2:	f000 f995 	bl	bf00 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    bbd6:	4628      	mov	r0, r5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bbd8:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    bbdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    bbe0:	f000 f9ae 	bl	bf40 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bbe4:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    bbe8:	4628      	mov	r0, r5
    bbea:	ee20 0a28 	vmul.f32	s0, s0, s17
    bbee:	f000 f873 	bl	bcd8 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    bbf2:	7839      	ldrb	r1, [r7, #0]
			{
    bbf4:	4a16      	ldr	r2, [pc, #88]	; (bc50 <audioFrameVocal+0x310>)
    bbf6:	e7c0      	b.n	bb7a <audioFrameVocal+0x23a>
				tADSRT_off(&fenvelopes[i]);
    bbf8:	4628      	mov	r0, r5
    bbfa:	f000 f921 	bl	be40 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    bbfe:	7839      	ldrb	r1, [r7, #0]
    bc00:	4a13      	ldr	r2, [pc, #76]	; (bc50 <audioFrameVocal+0x310>)
    bc02:	e7ba      	b.n	bb7a <audioFrameVocal+0x23a>
		newPluck = 0;
    bc04:	6029      	str	r1, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    bc06:	e74e      	b.n	baa6 <audioFrameVocal+0x166>
    bc08:	e0001000 	.word	0xe0001000
    bc0c:	20000694 	.word	0x20000694
    bc10:	200052f4 	.word	0x200052f4
    bc14:	2001d5c0 	.word	0x2001d5c0
    bc18:	42c80000 	.word	0x42c80000
    bc1c:	3e2c0831 	.word	0x3e2c0831
    bc20:	3ecccccd 	.word	0x3ecccccd
    bc24:	3c23d70a 	.word	0x3c23d70a
    bc28:	3cc8b439 	.word	0x3cc8b439
    bc2c:	200051f4 	.word	0x200051f4
    bc30:	30000000 	.word	0x30000000
    bc34:	4b000000 	.word	0x4b000000
    bc38:	20000684 	.word	0x20000684
    bc3c:	20014250 	.word	0x20014250
    bc40:	200051d8 	.word	0x200051d8
    bc44:	200051c8 	.word	0x200051c8
    bc48:	20014230 	.word	0x20014230
    bc4c:	37800080 	.word	0x37800080
    bc50:	20014210 	.word	0x20014210
    bc54:	20005300 	.word	0x20005300
    bc58:	20014228 	.word	0x20014228
    bc5c:	2000577c 	.word	0x2000577c
    bc60:	20000904 	.word	0x20000904
    bc64:	200008fc 	.word	0x200008fc
    bc68:	20005364 	.word	0x20005364
    bc6c:	200141e0 	.word	0x200141e0

0000bc70 <__tVoc_setFreq_veneer>:
    bc70:	f85f f000 	ldr.w	pc, [pc]	; bc74 <__tVoc_setFreq_veneer+0x4>
    bc74:	08018e31 	.word	0x08018e31

0000bc78 <__tVoc_set_velum_veneer>:
    bc78:	f85f f000 	ldr.w	pc, [pc]	; bc7c <__tVoc_set_velum_veneer+0x4>
    bc7c:	08018e51 	.word	0x08018e51

0000bc80 <__tTString_setPickupModFreq_veneer>:
    bc80:	f85f f000 	ldr.w	pc, [pc]	; bc84 <__tTString_setPickupModFreq_veneer+0x4>
    bc84:	080171c9 	.word	0x080171c9

0000bc88 <__tTString_setOpenStringFrequency_veneer>:
    bc88:	f85f f000 	ldr.w	pc, [pc]	; bc8c <__tTString_setOpenStringFrequency_veneer+0x4>
    bc8c:	08017275 	.word	0x08017275

0000bc90 <__tSquareLFO_setPhase_veneer>:
    bc90:	f85f f000 	ldr.w	pc, [pc]	; bc94 <__tSquareLFO_setPhase_veneer+0x4>
    bc94:	08015529 	.word	0x08015529

0000bc98 <__tVZFilterHS_setFreqFast_veneer>:
    bc98:	f85f f000 	ldr.w	pc, [pc]	; bc9c <__tVZFilterHS_setFreqFast_veneer+0x4>
    bc9c:	08012aa1 	.word	0x08012aa1

0000bca0 <__tTriLFO_setPhase_veneer>:
    bca0:	f85f f000 	ldr.w	pc, [pc]	; bca4 <__tTriLFO_setPhase_veneer+0x4>
    bca4:	080157ad 	.word	0x080157ad

0000bca8 <__tSquareLFO_setFreq_veneer>:
    bca8:	f85f f000 	ldr.w	pc, [pc]	; bcac <__tSquareLFO_setFreq_veneer+0x4>
    bcac:	080154b9 	.word	0x080154b9

0000bcb0 <__tTString_setFeedbackReactionSpeed_veneer>:
    bcb0:	f85f f000 	ldr.w	pc, [pc]	; bcb4 <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    bcb4:	0801737d 	.word	0x0801737d

0000bcb8 <__tVZFilter_tickEfficient_veneer>:
    bcb8:	f85f f000 	ldr.w	pc, [pc]	; bcbc <__tVZFilter_tickEfficient_veneer+0x4>
    bcbc:	08011d91 	.word	0x08011d91

0000bcc0 <__tPBPulse_tick_veneer>:
    bcc0:	f85f f000 	ldr.w	pc, [pc]	; bcc4 <__tPBPulse_tick_veneer+0x4>
    bcc4:	08014f11 	.word	0x08014f11

0000bcc8 <__tVZFilter_setResonance_veneer>:
    bcc8:	f85f f000 	ldr.w	pc, [pc]	; bccc <__tVZFilter_setResonance_veneer+0x4>
    bccc:	0801250d 	.word	0x0801250d

0000bcd0 <__tVoc_setAspirationNoiseGain_veneer>:
    bcd0:	f85f f000 	ldr.w	pc, [pc]	; bcd4 <__tVoc_setAspirationNoiseGain_veneer+0x4>
    bcd4:	08018e69 	.word	0x08018e69

0000bcd8 <__tADSRT_on_veneer>:
    bcd8:	f85f f000 	ldr.w	pc, [pc]	; bcdc <__tADSRT_on_veneer+0x4>
    bcdc:	08010d79 	.word	0x08010d79

0000bce0 <__tStiffString_setDecayNoUpdate_veneer>:
    bce0:	f85f f000 	ldr.w	pc, [pc]	; bce4 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    bce4:	08017c15 	.word	0x08017c15

0000bce8 <__tStiffString_pluck_veneer>:
    bce8:	f85f f000 	ldr.w	pc, [pc]	; bcec <__tStiffString_pluck_veneer+0x4>
    bcec:	08017b09 	.word	0x08017b09

0000bcf0 <__tTString_setHarmonic_veneer>:
    bcf0:	f85f f000 	ldr.w	pc, [pc]	; bcf4 <__tTString_setHarmonic_veneer+0x4>
    bcf4:	08017321 	.word	0x08017321

0000bcf8 <__tStiffString_updateOscillators_veneer>:
    bcf8:	f85f f000 	ldr.w	pc, [pc]	; bcfc <__tStiffString_updateOscillators_veneer+0x4>
    bcfc:	080177e9 	.word	0x080177e9

0000bd00 <__memset_veneer>:
    bd00:	f85f f000 	ldr.w	pc, [pc]	; bd04 <__memset_veneer+0x4>
    bd04:	08019361 	.word	0x08019361

0000bd08 <__memcpy_veneer>:
    bd08:	f85f f000 	ldr.w	pc, [pc]	; bd0c <__memcpy_veneer+0x4>
    bd0c:	080193b9 	.word	0x080193b9

0000bd10 <__tDiodeFilter_tickEfficient_veneer>:
    bd10:	f85f f000 	ldr.w	pc, [pc]	; bd14 <__tDiodeFilter_tickEfficient_veneer+0x4>
    bd14:	0801356d 	.word	0x0801356d

0000bd18 <__tTString_tick_veneer>:
    bd18:	f85f f000 	ldr.w	pc, [pc]	; bd1c <__tTString_tick_veneer+0x4>
    bd1c:	080167dd 	.word	0x080167dd

0000bd20 <__tLadderFilter_setFreqFast_veneer>:
    bd20:	f85f f000 	ldr.w	pc, [pc]	; bd24 <__tLadderFilter_setFreqFast_veneer+0x4>
    bd24:	08013d11 	.word	0x08013d11

0000bd28 <__HAL_SPI_Receive_DMA_veneer>:
    bd28:	f85f f000 	ldr.w	pc, [pc]	; bd2c <__HAL_SPI_Receive_DMA_veneer+0x4>
    bd2c:	0800ab1d 	.word	0x0800ab1d

0000bd30 <__tSimpleLivingString3_setLevMode_veneer>:
    bd30:	f85f f000 	ldr.w	pc, [pc]	; bd34 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    bd34:	08015da5 	.word	0x08015da5

0000bd38 <__tCrusher_tick_veneer>:
    bd38:	f85f f000 	ldr.w	pc, [pc]	; bd3c <__tCrusher_tick_veneer+0x4>
    bd3c:	08010809 	.word	0x08010809

0000bd40 <__tADSRT_setAttack_veneer>:
    bd40:	f85f f000 	ldr.w	pc, [pc]	; bd44 <__tADSRT_setAttack_veneer+0x4>
    bd44:	08010cc1 	.word	0x08010cc1

0000bd48 <__tPBPulse_setWidth_veneer>:
    bd48:	f85f f000 	ldr.w	pc, [pc]	; bd4c <__tPBPulse_setWidth_veneer+0x4>
    bd4c:	08014fbd 	.word	0x08014fbd

0000bd50 <__tSineTriLFO_tick_veneer>:
    bd50:	f85f f000 	ldr.w	pc, [pc]	; bd54 <__tSineTriLFO_tick_veneer+0x4>
    bd54:	08015859 	.word	0x08015859

0000bd58 <__faster_mtof_veneer>:
    bd58:	f85f f000 	ldr.w	pc, [pc]	; bd5c <__faster_mtof_veneer+0x4>
    bd5c:	080145a9 	.word	0x080145a9

0000bd60 <__tPBSineTriangle_tick_veneer>:
    bd60:	f85f f000 	ldr.w	pc, [pc]	; bd64 <__tPBSineTriangle_tick_veneer+0x4>
    bd64:	08014cc1 	.word	0x08014cc1

0000bd68 <__tTString_setFilterFreqDirectly_veneer>:
    bd68:	f85f f000 	ldr.w	pc, [pc]	; bd6c <__tTString_setFilterFreqDirectly_veneer+0x4>
    bd6c:	08017205 	.word	0x08017205

0000bd70 <__fast_tanh5_veneer>:
    bd70:	f85f f000 	ldr.w	pc, [pc]	; bd74 <__fast_tanh5_veneer+0x4>
    bd74:	08014219 	.word	0x08014219

0000bd78 <__tTString_setPickupModAmp_veneer>:
    bd78:	f85f f000 	ldr.w	pc, [pc]	; bd7c <__tTString_setPickupModAmp_veneer+0x4>
    bd7c:	080171c1 	.word	0x080171c1

0000bd80 <__tVoc_set_tractLength_veneer>:
    bd80:	f85f f000 	ldr.w	pc, [pc]	; bd84 <__tVoc_set_tractLength_veneer+0x4>
    bd84:	08018e3d 	.word	0x08018e3d

0000bd88 <__tTString_setPickupAmount_veneer>:
    bd88:	f85f f000 	ldr.w	pc, [pc]	; bd8c <__tTString_setPickupAmount_veneer+0x4>
    bd8c:	080171b9 	.word	0x080171b9

0000bd90 <__tTString_setPickupFilterQ_veneer>:
    bd90:	f85f f000 	ldr.w	pc, [pc]	; bd94 <__tTString_setPickupFilterQ_veneer+0x4>
    bd94:	08017765 	.word	0x08017765

0000bd98 <__tTapeDelay_setDelay_veneer>:
    bd98:	f85f f000 	ldr.w	pc, [pc]	; bd9c <__tTapeDelay_setDelay_veneer+0x4>
    bd9c:	0801057d 	.word	0x0801057d

0000bda0 <__tExpSmooth_free_veneer>:
    bda0:	f85f f000 	ldr.w	pc, [pc]	; bda4 <__tExpSmooth_free_veneer+0x4>
    bda4:	080112b9 	.word	0x080112b9

0000bda8 <__tPBSineTriangle_setFreq_veneer>:
    bda8:	f85f f000 	ldr.w	pc, [pc]	; bdac <__tPBSineTriangle_setFreq_veneer+0x4>
    bdac:	08014e89 	.word	0x08014e89

0000bdb0 <__tCrusher_setOperation_veneer>:
    bdb0:	f85f f000 	ldr.w	pc, [pc]	; bdb4 <__tCrusher_setOperation_veneer+0x4>
    bdb4:	08010889 	.word	0x08010889

0000bdb8 <__tSVF_tick_veneer>:
    bdb8:	f85f f000 	ldr.w	pc, [pc]	; bdbc <__tSVF_tick_veneer+0x4>
    bdbc:	08011afd 	.word	0x08011afd

0000bdc0 <__setEffectsFunctions_veneer>:
    bdc0:	f85f f000 	ldr.w	pc, [pc]	; bdc4 <__setEffectsFunctions_veneer+0x4>
    bdc4:	08001a0d 	.word	0x08001a0d

0000bdc8 <__tSineTriLFO_setFreq_veneer>:
    bdc8:	f85f f000 	ldr.w	pc, [pc]	; bdcc <__tSineTriLFO_setFreq_veneer+0x4>
    bdcc:	080158f5 	.word	0x080158f5

0000bdd0 <__tVZFilterLS_setGain_veneer>:
    bdd0:	f85f f000 	ldr.w	pc, [pc]	; bdd4 <__tVZFilterLS_setGain_veneer+0x4>
    bdd4:	08012845 	.word	0x08012845

0000bdd8 <__tVZFilterHS_tick_veneer>:
    bdd8:	f85f f000 	ldr.w	pc, [pc]	; bddc <__tVZFilterHS_tick_veneer+0x4>
    bddc:	08012a4d 	.word	0x08012a4d

0000bde0 <__tSawSquareLFO_tick_veneer>:
    bde0:	f85f f000 	ldr.w	pc, [pc]	; bde4 <__tSawSquareLFO_tick_veneer+0x4>
    bde4:	080155d5 	.word	0x080155d5

0000bde8 <__tTString_setFeedbackStrength_veneer>:
    bde8:	f85f f000 	ldr.w	pc, [pc]	; bdec <__tTString_setFeedbackStrength_veneer+0x4>
    bdec:	08017335 	.word	0x08017335

0000bdf0 <__tOversampler_upsample_veneer>:
    bdf0:	f85f f000 	ldr.w	pc, [pc]	; bdf4 <__tOversampler_upsample_veneer+0x4>
    bdf4:	08010655 	.word	0x08010655

0000bdf8 <__tSquareLFO_tick_veneer>:
    bdf8:	f85f f000 	ldr.w	pc, [pc]	; bdfc <__tSquareLFO_tick_veneer+0x4>
    bdfc:	08015471 	.word	0x08015471

0000be00 <__tVZFilter_setFrequencyAndResonance_veneer>:
    be00:	f85f f000 	ldr.w	pc, [pc]	; be04 <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    be04:	08012545 	.word	0x08012545

0000be08 <__tPickupNonLinearity_tick_veneer>:
    be08:	f85f f000 	ldr.w	pc, [pc]	; be0c <__tPickupNonLinearity_tick_veneer+0x4>
    be0c:	0801597d 	.word	0x0801597d

0000be10 <__tTString_free_veneer>:
    be10:	f85f f000 	ldr.w	pc, [pc]	; be14 <__tTString_free_veneer+0x4>
    be14:	080166c9 	.word	0x080166c9

0000be18 <__LEAF_mapToZeroToOneOutput_veneer>:
    be18:	f85f f000 	ldr.w	pc, [pc]	; be1c <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    be1c:	08013df5 	.word	0x08013df5

0000be20 <__tStiffString_tick_veneer>:
    be20:	f85f f000 	ldr.w	pc, [pc]	; be24 <__tStiffString_tick_veneer+0x4>
    be24:	08017a61 	.word	0x08017a61

0000be28 <__tCrusher_setSamplingRatio_veneer>:
    be28:	f85f f000 	ldr.w	pc, [pc]	; be2c <__tCrusher_setSamplingRatio_veneer+0x4>
    be2c:	080108f1 	.word	0x080108f1

0000be30 <__tPBPulse_setFreq_veneer>:
    be30:	f85f f000 	ldr.w	pc, [pc]	; be34 <__tPBPulse_setFreq_veneer+0x4>
    be34:	08014fa5 	.word	0x08014fa5

0000be38 <__tSineTriLFO_setShape_veneer>:
    be38:	f85f f000 	ldr.w	pc, [pc]	; be3c <__tSineTriLFO_setShape_veneer+0x4>
    be3c:	08015955 	.word	0x08015955

0000be40 <__tADSRT_off_veneer>:
    be40:	f85f f000 	ldr.w	pc, [pc]	; be44 <__tADSRT_off_veneer+0x4>
    be44:	08010d9d 	.word	0x08010d9d

0000be48 <__tTString_initToPool_veneer>:
    be48:	f85f f000 	ldr.w	pc, [pc]	; be4c <__tTString_initToPool_veneer+0x4>
    be4c:	080160cd 	.word	0x080160cd

0000be50 <__tTString_setWoundOrUnwound_veneer>:
    be50:	f85f f000 	ldr.w	pc, [pc]	; be54 <__tTString_setWoundOrUnwound_veneer+0x4>
    be54:	080176f9 	.word	0x080176f9

0000be58 <__tADSRT_setRelease_veneer>:
    be58:	f85f f000 	ldr.w	pc, [pc]	; be5c <__tADSRT_setRelease_veneer+0x4>
    be5c:	08010d2d 	.word	0x08010d2d

0000be60 <__tCycle_init_veneer>:
    be60:	f85f f000 	ldr.w	pc, [pc]	; be64 <__tCycle_init_veneer+0x4>
    be64:	080148ed 	.word	0x080148ed

0000be68 <__tSineTriLFO_setPhase_veneer>:
    be68:	f85f f000 	ldr.w	pc, [pc]	; be6c <__tSineTriLFO_setPhase_veneer+0x4>
    be6c:	08015925 	.word	0x08015925

0000be70 <__tVZFilterBell_setGain_veneer>:
    be70:	f85f f000 	ldr.w	pc, [pc]	; be74 <__tVZFilterBell_setGain_veneer+0x4>
    be74:	08013029 	.word	0x08013029

0000be78 <__tVoc_tick_veneer>:
    be78:	f85f f000 	ldr.w	pc, [pc]	; be7c <__tVoc_tick_veneer+0x4>
    be7c:	08018d89 	.word	0x08018d89

0000be80 <__tTString_setRippleDepth_veneer>:
    be80:	f85f f000 	ldr.w	pc, [pc]	; be84 <__tTString_setRippleDepth_veneer+0x4>
    be84:	0801729d 	.word	0x0801729d

0000be88 <__tTString_setPickupFilterFreq_veneer>:
    be88:	f85f f000 	ldr.w	pc, [pc]	; be8c <__tTString_setPickupFilterFreq_veneer+0x4>
    be8c:	0801775d 	.word	0x0801775d

0000be90 <__tPBSaw_setFreq_veneer>:
    be90:	f85f f000 	ldr.w	pc, [pc]	; be94 <__tPBSaw_setFreq_veneer+0x4>
    be94:	08015089 	.word	0x08015089

0000be98 <__mtofTableLookup_veneer>:
    be98:	f85f f000 	ldr.w	pc, [pc]	; be9c <__mtofTableLookup_veneer+0x4>
    be9c:	080007b5 	.word	0x080007b5

0000bea0 <__tStiffString_setFreq_veneer>:
    bea0:	f85f f000 	ldr.w	pc, [pc]	; bea4 <__tStiffString_setFreq_veneer+0x4>
    bea4:	08017af1 	.word	0x08017af1

0000bea8 <__tVoc_setTurbulenceNoiseGain_veneer>:
    bea8:	f85f f000 	ldr.w	pc, [pc]	; beac <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    beac:	08018e5d 	.word	0x08018e5d

0000beb0 <__tTString_setDecayInSeconds_veneer>:
    beb0:	f85f f000 	ldr.w	pc, [pc]	; beb4 <__tTString_setDecayInSeconds_veneer+0x4>
    beb4:	08017161 	.word	0x08017161

0000beb8 <__tTString_setBarPosition_veneer>:
    beb8:	f85f f000 	ldr.w	pc, [pc]	; bebc <__tTString_setBarPosition_veneer+0x4>
    bebc:	08017265 	.word	0x08017265

0000bec0 <__tVZFilterLS_tick_veneer>:
    bec0:	f85f f000 	ldr.w	pc, [pc]	; bec4 <__tVZFilterLS_tick_veneer+0x4>
    bec4:	08012765 	.word	0x08012765

0000bec8 <__tSimpleLivingString3_setFreq_veneer>:
    bec8:	f85f f000 	ldr.w	pc, [pc]	; becc <__tSimpleLivingString3_setFreq_veneer+0x4>
    becc:	08015c99 	.word	0x08015c99

0000bed0 <__tADSRT_setLeakFactor_veneer>:
    bed0:	f85f f000 	ldr.w	pc, [pc]	; bed4 <__tADSRT_setLeakFactor_veneer+0x4>
    bed4:	08010d55 	.word	0x08010d55

0000bed8 <__tVZFilter_setFreq_veneer>:
    bed8:	f85f f000 	ldr.w	pc, [pc]	; bedc <__tVZFilter_setFreq_veneer+0x4>
    bedc:	080121d1 	.word	0x080121d1

0000bee0 <__tSimpleLivingString3_pluck_veneer>:
    bee0:	f85f f000 	ldr.w	pc, [pc]	; bee4 <__tSimpleLivingString3_pluck_veneer+0x4>
    bee4:	08015db9 	.word	0x08015db9

0000bee8 <__tStiffString_updateOutputWeights_veneer>:
    bee8:	f85f f000 	ldr.w	pc, [pc]	; beec <__tStiffString_updateOutputWeights_veneer+0x4>
    beec:	080178cd 	.word	0x080178cd

0000bef0 <__tSawSquareLFO_setFreq_veneer>:
    bef0:	f85f f000 	ldr.w	pc, [pc]	; bef4 <__tSawSquareLFO_setFreq_veneer+0x4>
    bef4:	08015659 	.word	0x08015659

0000bef8 <__tVoc_set_tenseness_veneer>:
    bef8:	f85f f000 	ldr.w	pc, [pc]	; befc <__tVoc_set_tenseness_veneer+0x4>
    befc:	08018e45 	.word	0x08018e45

0000bf00 <__mtof_veneer>:
    bf00:	f85f f000 	ldr.w	pc, [pc]	; bf04 <__mtof_veneer+0x4>
    bf04:	08014555 	.word	0x08014555

0000bf08 <__tStiffString_setPickupPosNoUpdate_veneer>:
    bf08:	f85f f000 	ldr.w	pc, [pc]	; bf0c <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    bf0c:	08017bc5 	.word	0x08017bc5

0000bf10 <__dbToATableLookup_veneer>:
    bf10:	f85f f000 	ldr.w	pc, [pc]	; bf14 <__dbToATableLookup_veneer+0x4>
    bf14:	08000739 	.word	0x08000739

0000bf18 <__tPickupNonLinearity_free_veneer>:
    bf18:	f85f f000 	ldr.w	pc, [pc]	; bf1c <__tPickupNonLinearity_free_veneer+0x4>
    bf1c:	08015975 	.word	0x08015975

0000bf20 <__tSimpleLivingString3_setDampFreq_veneer>:
    bf20:	f85f f000 	ldr.w	pc, [pc]	; bf24 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    bf24:	08015d39 	.word	0x08015d39

0000bf28 <__tPBSaw_tick_veneer>:
    bf28:	f85f f000 	ldr.w	pc, [pc]	; bf2c <__tPBSaw_tick_veneer+0x4>
    bf2c:	08015039 	.word	0x08015039

0000bf30 <__tVZFilterLS_setFreqFast_veneer>:
    bf30:	f85f f000 	ldr.w	pc, [pc]	; bf34 <__tVZFilterLS_setFreqFast_veneer+0x4>
    bf34:	080127b9 	.word	0x080127b9

0000bf38 <__changeOversampling_veneer>:
    bf38:	f85f f000 	ldr.w	pc, [pc]	; bf3c <__changeOversampling_veneer+0x4>
    bf3c:	08003c89 	.word	0x08003c89

0000bf40 <__tADSRT_setSustain_veneer>:
    bf40:	f85f f000 	ldr.w	pc, [pc]	; bf44 <__tADSRT_setSustain_veneer+0x4>
    bf44:	08010d11 	.word	0x08010d11

0000bf48 <__tADSRT_tickNoInterp_veneer>:
    bf48:	f85f f000 	ldr.w	pc, [pc]	; bf4c <__tADSRT_tickNoInterp_veneer+0x4>
    bf4c:	0801107d 	.word	0x0801107d

0000bf50 <__tTString_setWindingsPerInch_veneer>:
    bf50:	f85f f000 	ldr.w	pc, [pc]	; bf54 <__tTString_setWindingsPerInch_veneer+0x4>
    bf54:	0801774d 	.word	0x0801774d

0000bf58 <__tDiodeFilter_setQ_veneer>:
    bf58:	f85f f000 	ldr.w	pc, [pc]	; bf5c <__tDiodeFilter_setQ_veneer+0x4>
    bf5c:	080139a9 	.word	0x080139a9

0000bf60 <__tDiodeFilter_setFreqFast_veneer>:
    bf60:	f85f f000 	ldr.w	pc, [pc]	; bf64 <__tDiodeFilter_setFreqFast_veneer+0x4>
    bf64:	0801394d 	.word	0x0801394d

0000bf68 <__tOversampler_downsample_veneer>:
    bf68:	f85f f000 	ldr.w	pc, [pc]	; bf6c <__tOversampler_downsample_veneer+0x4>
    bf6c:	08010729 	.word	0x08010729

0000bf70 <__tTString_setPeakFilterFreq_veneer>:
    bf70:	f85f f000 	ldr.w	pc, [pc]	; bf74 <__tTString_setPeakFilterFreq_veneer+0x4>
    bf74:	08017775 	.word	0x08017775

0000bf78 <__tLinearDelay_setDelay_veneer>:
    bf78:	f85f f000 	ldr.w	pc, [pc]	; bf7c <__tLinearDelay_setDelay_veneer+0x4>
    bf7c:	08010061 	.word	0x08010061

0000bf80 <__tVoc_rescaleDiameter_veneer>:
    bf80:	f85f f000 	ldr.w	pc, [pc]	; bf84 <__tVoc_rescaleDiameter_veneer+0x4>
    bf84:	08019231 	.word	0x08019231

0000bf88 <__tVZFilterLS_setResonance_veneer>:
    bf88:	f85f f000 	ldr.w	pc, [pc]	; bf8c <__tVZFilterLS_setResonance_veneer+0x4>
    bf8c:	080128a5 	.word	0x080128a5

0000bf90 <__tADSRT_setDecay_veneer>:
    bf90:	f85f f000 	ldr.w	pc, [pc]	; bf94 <__tADSRT_setDecay_veneer+0x4>
    bf94:	08010ce9 	.word	0x08010ce9

0000bf98 <__tSimpleLivingString3_setTargetLev_veneer>:
    bf98:	f85f f000 	ldr.w	pc, [pc]	; bf9c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    bf9c:	08015d8d 	.word	0x08015d8d

0000bfa0 <__tPBSawSquare_tick_veneer>:
    bfa0:	f85f f000 	ldr.w	pc, [pc]	; bfa4 <__tPBSawSquare_tick_veneer+0x4>
    bfa4:	080150d9 	.word	0x080150d9

0000bfa8 <__tPBTriangle_tick_veneer>:
    bfa8:	f85f f000 	ldr.w	pc, [pc]	; bfac <__tPBTriangle_tick_veneer+0x4>
    bfac:	08014a5d 	.word	0x08014a5d

0000bfb0 <__tSimpleLivingString3_initToPool_veneer>:
    bfb0:	f85f f000 	ldr.w	pc, [pc]	; bfb4 <__tSimpleLivingString3_initToPool_veneer+0x4>
    bfb4:	080159d9 	.word	0x080159d9

0000bfb8 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    bfb8:	f85f f000 	ldr.w	pc, [pc]	; bfbc <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    bfbc:	08017c1d 	.word	0x08017c1d

0000bfc0 <__tExpSmooth_setValAndDest_veneer>:
    bfc0:	f85f f000 	ldr.w	pc, [pc]	; bfc4 <__tExpSmooth_setValAndDest_veneer+0x4>
    bfc4:	080112f5 	.word	0x080112f5

0000bfc8 <__tCompressor_tickWithTableHardKnee_veneer>:
    bfc8:	f85f f000 	ldr.w	pc, [pc]	; bfcc <__tCompressor_tickWithTableHardKnee_veneer+0x4>
    bfcc:	080109a1 	.word	0x080109a1

0000bfd0 <__tExpSmooth_setVal_veneer>:
    bfd0:	f85f f000 	ldr.w	pc, [pc]	; bfd4 <__tExpSmooth_setVal_veneer+0x4>
    bfd4:	080112ed 	.word	0x080112ed

0000bfd8 <__tLadderFilter_tick_veneer>:
    bfd8:	f85f f000 	ldr.w	pc, [pc]	; bfdc <__tLadderFilter_tick_veneer+0x4>
    bfdc:	08013ac1 	.word	0x08013ac1

0000bfe0 <__tHighpass_tick_veneer>:
    bfe0:	f85f f000 	ldr.w	pc, [pc]	; bfe4 <__tHighpass_tick_veneer+0x4>
    bfe4:	08011d4d 	.word	0x08011d4d

0000bfe8 <__LEAF_clip_veneer>:
    bfe8:	f85f f000 	ldr.w	pc, [pc]	; bfec <__LEAF_clip_veneer+0x4>
    bfec:	08014169 	.word	0x08014169

0000bff0 <__tSimpleLivingString3_setDecay_veneer>:
    bff0:	f85f f000 	ldr.w	pc, [pc]	; bff4 <__tSimpleLivingString3_setDecay_veneer+0x4>
    bff4:	08015d41 	.word	0x08015d41

0000bff8 <__tTString_setPhantomHarmonicsGain_veneer>:
    bff8:	f85f f000 	ldr.w	pc, [pc]	; bffc <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    bffc:	0801728d 	.word	0x0801728d

0000c000 <__tSimpleLivingString3_setPickupPoint_veneer>:
    c000:	f85f f000 	ldr.w	pc, [pc]	; c004 <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    c004:	080160c5 	.word	0x080160c5

0000c008 <__tSimpleLivingString3_setLevStrength_veneer>:
    c008:	f85f f000 	ldr.w	pc, [pc]	; c00c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    c00c:	08015d9d 	.word	0x08015d9d

0000c010 <__tVZFilterBell_setFreq_veneer>:
    c010:	f85f f000 	ldr.w	pc, [pc]	; c014 <__tVZFilterBell_setFreq_veneer+0x4>
    c014:	08012e5d 	.word	0x08012e5d

0000c018 <__tExpSmooth_setFactor_veneer>:
    c018:	f85f f000 	ldr.w	pc, [pc]	; c01c <__tExpSmooth_setFactor_veneer+0x4>
    c01c:	080112c1 	.word	0x080112c1

0000c020 <__tVZFilter_setFreqFast_veneer>:
    c020:	f85f f000 	ldr.w	pc, [pc]	; c024 <__tVZFilter_setFreqFast_veneer+0x4>
    c024:	08012201 	.word	0x08012201

0000c028 <__LEAF_map_veneer>:
    c028:	f85f f000 	ldr.w	pc, [pc]	; c02c <__LEAF_map_veneer+0x4>
    c02c:	08013dc9 	.word	0x08013dc9

0000c030 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    c030:	f85f f000 	ldr.w	pc, [pc]	; c034 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    c034:	08015d95 	.word	0x08015d95

0000c038 <__tSawSquareLFO_setPhase_veneer>:
    c038:	f85f f000 	ldr.w	pc, [pc]	; c03c <__tSawSquareLFO_setPhase_veneer+0x4>
    c03c:	080156a1 	.word	0x080156a1

0000c040 <__tVZFilterHS_setGain_veneer>:
    c040:	f85f f000 	ldr.w	pc, [pc]	; c044 <__tVZFilterHS_setGain_veneer+0x4>
    c044:	08012b2d 	.word	0x08012b2d

0000c048 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    c048:	f85f f000 	ldr.w	pc, [pc]	; c04c <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    c04c:	08018e95 	.word	0x08018e95

0000c050 <__tVoc_setDoubleComputeFlag_veneer>:
    c050:	f85f f000 	ldr.w	pc, [pc]	; c054 <__tVoc_setDoubleComputeFlag_veneer+0x4>
    c054:	08018e29 	.word	0x08018e29

0000c058 <__HAL_SPI_Abort_veneer>:
    c058:	f85f f000 	ldr.w	pc, [pc]	; c05c <__HAL_SPI_Abort_veneer+0x4>
    c05c:	0800af19 	.word	0x0800af19

0000c060 <__tIntPhasor_tick_veneer>:
    c060:	f85f f000 	ldr.w	pc, [pc]	; c064 <__tIntPhasor_tick_veneer+0x4>
    c064:	080152cd 	.word	0x080152cd

0000c068 <__tPBSawSquare_setShape_veneer>:
    c068:	f85f f000 	ldr.w	pc, [pc]	; c06c <__tPBSawSquare_setShape_veneer+0x4>
    c06c:	0801519d 	.word	0x0801519d

0000c070 <__tSVF_setFreqFast_veneer>:
    c070:	f85f f000 	ldr.w	pc, [pc]	; c074 <__tSVF_setFreqFast_veneer+0x4>
    c074:	08011bd9 	.word	0x08011bd9

0000c078 <__tStiffString_setFreqNoUpdate_veneer>:
    c078:	f85f f000 	ldr.w	pc, [pc]	; c07c <__tStiffString_setFreqNoUpdate_veneer+0x4>
    c07c:	08017c0d 	.word	0x08017c0d

0000c080 <__tTString_mute_veneer>:
    c080:	f85f f000 	ldr.w	pc, [pc]	; c084 <__tTString_mute_veneer+0x4>
    c084:	080171d9 	.word	0x080171d9

0000c088 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    c088:	f85f f000 	ldr.w	pc, [pc]	; c08c <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    c08c:	08018e75 	.word	0x08018e75

0000c090 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    c090:	f85f f000 	ldr.w	pc, [pc]	; c094 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    c094:	0800acdd 	.word	0x0800acdd

0000c098 <__tSquareLFO_setPulseWidth_veneer>:
    c098:	f85f f000 	ldr.w	pc, [pc]	; c09c <__tSquareLFO_setPulseWidth_veneer+0x4>
    c09c:	080154e9 	.word	0x080154e9

0000c0a0 <__audioSwitchToSynth_veneer>:
    c0a0:	f85f f000 	ldr.w	pc, [pc]	; c0a4 <__audioSwitchToSynth_veneer+0x4>
    c0a4:	08003b9d 	.word	0x08003b9d

0000c0a8 <__tTriLFO_tick_veneer>:
    c0a8:	f85f f000 	ldr.w	pc, [pc]	; c0ac <__tTriLFO_tick_veneer+0x4>
    c0ac:	08015761 	.word	0x08015761

0000c0b0 <__MX_SPI1_Init_veneer>:
    c0b0:	f85f f000 	ldr.w	pc, [pc]	; c0b4 <__MX_SPI1_Init_veneer+0x4>
    c0b4:	080030d9 	.word	0x080030d9

0000c0b8 <__tVZFilter_setGain_veneer>:
    c0b8:	f85f f000 	ldr.w	pc, [pc]	; c0bc <__tVZFilter_setGain_veneer+0x4>
    c0bc:	080124d5 	.word	0x080124d5

0000c0c0 <__tStiffString_init_veneer>:
    c0c0:	f85f f000 	ldr.w	pc, [pc]	; c0c4 <__tStiffString_init_veneer+0x4>
    c0c4:	08017a59 	.word	0x08017a59

0000c0c8 <__setLFOShapes_veneer>:
    c0c8:	f85f f000 	ldr.w	pc, [pc]	; c0cc <__setLFOShapes_veneer+0x4>
    c0cc:	08002149 	.word	0x08002149

0000c0d0 <__tSVF_setQ_veneer>:
    c0d0:	f85f f000 	ldr.w	pc, [pc]	; c0d4 <__tSVF_setQ_veneer+0x4>
    c0d4:	08011c5d 	.word	0x08011c5d

0000c0d8 <__MX_SPI5_Init_veneer>:
    c0d8:	f85f f000 	ldr.w	pc, [pc]	; c0dc <__MX_SPI5_Init_veneer+0x4>
    c0dc:	08003131 	.word	0x08003131

0000c0e0 <__tTString_setTensionGain_veneer>:
    c0e0:	f85f f000 	ldr.w	pc, [pc]	; c0e4 <__tTString_setTensionGain_veneer+0x4>
    c0e4:	0801725d 	.word	0x0801725d

0000c0e8 <__audioFreeSynth_veneer>:
    c0e8:	f85f f000 	ldr.w	pc, [pc]	; c0ec <__audioFreeSynth_veneer+0x4>
    c0ec:	08003b61 	.word	0x08003b61

0000c0f0 <__tTString_setPeakFilterQ_veneer>:
    c0f0:	f85f f000 	ldr.w	pc, [pc]	; c0f4 <__tTString_setPeakFilterQ_veneer+0x4>
    c0f4:	08017781 	.word	0x08017781

0000c0f8 <__tPBSineTriangle_setShape_veneer>:
    c0f8:	f85f f000 	ldr.w	pc, [pc]	; c0fc <__tPBSineTriangle_setShape_veneer+0x4>
    c0fc:	08014eb9 	.word	0x08014eb9

0000c100 <__tEnvelopeFollower_tick_veneer>:
    c100:	f85f f000 	ldr.w	pc, [pc]	; c104 <__tEnvelopeFollower_tick_veneer+0x4>
    c104:	0800fda1 	.word	0x0800fda1

0000c108 <__tCrusher_setQuality_veneer>:
    c108:	f85f f000 	ldr.w	pc, [pc]	; c10c <__tCrusher_setQuality_veneer+0x4>
    c10c:	0801089d 	.word	0x0801089d

0000c110 <__tVZFilterBell_setBandwidth_veneer>:
    c110:	f85f f000 	ldr.w	pc, [pc]	; c114 <__tVZFilterBell_setBandwidth_veneer+0x4>
    c114:	08012dd1 	.word	0x08012dd1

0000c118 <__fastPowf_veneer>:
    c118:	f85f f000 	ldr.w	pc, [pc]	; c11c <__fastPowf_veneer+0x4>
    c11c:	0801404d 	.word	0x0801404d

0000c120 <__tVZFilterHS_setResonance_veneer>:
    c120:	f85f f000 	ldr.w	pc, [pc]	; c124 <__tVZFilterHS_setResonance_veneer+0x4>
    c124:	08012b89 	.word	0x08012b89

0000c128 <__tIntPhasor_setFreq_veneer>:
    c128:	f85f f000 	ldr.w	pc, [pc]	; c12c <__tIntPhasor_setFreq_veneer+0x4>
    c12c:	080152ed 	.word	0x080152ed

0000c130 <__tCycle_setFreq_veneer>:
    c130:	f85f f000 	ldr.w	pc, [pc]	; c134 <__tCycle_setFreq_veneer+0x4>
    c134:	080149b1 	.word	0x080149b1

0000c138 <__tNoise_tick_veneer>:
    c138:	f85f f000 	ldr.w	pc, [pc]	; c13c <__tNoise_tick_veneer+0x4>
    c13c:	080151f9 	.word	0x080151f9

0000c140 <__tDiodeFilter_tick_veneer>:
    c140:	f85f f000 	ldr.w	pc, [pc]	; c144 <__tDiodeFilter_tick_veneer+0x4>
    c144:	0801318d 	.word	0x0801318d

0000c148 <__tLadderFilter_setQ_veneer>:
    c148:	f85f f000 	ldr.w	pc, [pc]	; c14c <__tLadderFilter_setQ_veneer+0x4>
    c14c:	08013d75 	.word	0x08013d75

0000c150 <__tTString_setFreq_veneer>:
    c150:	f85f f000 	ldr.w	pc, [pc]	; c154 <__tTString_setFreq_veneer+0x4>
    c154:	080170e1 	.word	0x080170e1

0000c158 <__tCycle_tick_veneer>:
    c158:	f85f f000 	ldr.w	pc, [pc]	; c15c <__tCycle_tick_veneer+0x4>
    c15c:	08014965 	.word	0x08014965

0000c160 <__LEAF_shaper_veneer>:
    c160:	f85f f000 	ldr.w	pc, [pc]	; c164 <__LEAF_shaper_veneer+0x4>
    c164:	080140a5 	.word	0x080140a5

0000c168 <__tTString_setPickupPos_veneer>:
    c168:	f85f f000 	ldr.w	pc, [pc]	; c16c <__tTString_setPickupPos_veneer+0x4>
    c16c:	080171b1 	.word	0x080171b1

0000c170 <__tTString_pluck_veneer>:
    c170:	f85f f000 	ldr.w	pc, [pc]	; c174 <__tTString_pluck_veneer+0x4>
    c174:	080173b9 	.word	0x080173b9

0000c178 <__tTString_setHarmonicity_veneer>:
    c178:	f85f f000 	ldr.w	pc, [pc]	; c17c <__tTString_setHarmonicity_veneer+0x4>
    c17c:	0801768d 	.word	0x0801768d

0000c180 <__tTString_setSlideGain_veneer>:
    c180:	f85f f000 	ldr.w	pc, [pc]	; c184 <__tTString_setSlideGain_veneer+0x4>
    c184:	08017295 	.word	0x08017295

0000c188 <__tExpSmooth_setDest_veneer>:
    c188:	f85f f000 	ldr.w	pc, [pc]	; c18c <__tExpSmooth_setDest_veneer+0x4>
    c18c:	080112e5 	.word	0x080112e5

0000c190 <__tVZFilterBell_tick_veneer>:
    c190:	f85f f000 	ldr.w	pc, [pc]	; c194 <__tVZFilterBell_tick_veneer+0x4>
    c194:	08012d79 	.word	0x08012d79

0000c198 <__tStiffString_mute_veneer>:
    c198:	f85f f000 	ldr.w	pc, [pc]	; c19c <__tStiffString_mute_veneer+0x4>
    c19c:	08017afd 	.word	0x08017afd

0000c1a0 <__arm_sin_f32_veneer>:
    c1a0:	f85f f000 	ldr.w	pc, [pc]	; c1a4 <__arm_sin_f32_veneer+0x4>
    c1a4:	080006a1 	.word	0x080006a1

0000c1a8 <__tVoc_init_veneer>:
    c1a8:	f85f f000 	ldr.w	pc, [pc]	; c1ac <__tVoc_init_veneer+0x4>
    c1ac:	08018d19 	.word	0x08018d19

0000c1b0 <__tPBTriangle_setFreq_veneer>:
    c1b0:	f85f f000 	ldr.w	pc, [pc]	; c1b4 <__tPBTriangle_setFreq_veneer+0x4>
    c1b4:	08014be1 	.word	0x08014be1

0000c1b8 <__tSimpleLivingString3_tick_veneer>:
    c1b8:	f85f f000 	ldr.w	pc, [pc]	; c1bc <__tSimpleLivingString3_tick_veneer+0x4>
    c1bc:	08015f11 	.word	0x08015f11

0000c1c0 <__tADSRT_clear_veneer>:
    c1c0:	f85f f000 	ldr.w	pc, [pc]	; c1c4 <__tADSRT_clear_veneer+0x4>
    c1c4:	08010dad 	.word	0x08010dad

0000c1c8 <__tVoc_set_tongue_shape_and_touch_veneer>:
    c1c8:	f85f f000 	ldr.w	pc, [pc]	; c1cc <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    c1cc:	08019191 	.word	0x08019191

0000c1d0 <__tPBSawSquare_setFreq_veneer>:
    c1d0:	f85f f000 	ldr.w	pc, [pc]	; c1d4 <__tPBSawSquare_setFreq_veneer+0x4>
    c1d4:	08015185 	.word	0x08015185

0000c1d8 <__tCrusher_setRound_veneer>:
    c1d8:	f85f f000 	ldr.w	pc, [pc]	; c1dc <__tCrusher_setRound_veneer+0x4>
    c1dc:	080108e9 	.word	0x080108e9

0000c1e0 <__tPBTriangle_setSkew_veneer>:
    c1e0:	f85f f000 	ldr.w	pc, [pc]	; c1e4 <__tPBTriangle_setSkew_veneer+0x4>
    c1e4:	08014bf9 	.word	0x08014bf9

0000c1e8 <__tSawSquareLFO_setShape_veneer>:
    c1e8:	f85f f000 	ldr.w	pc, [pc]	; c1ec <__tSawSquareLFO_setShape_veneer+0x4>
    c1ec:	08015705 	.word	0x08015705

0000c1f0 <__fastSine_veneer>:
    c1f0:	f85f f000 	ldr.w	pc, [pc]	; c1f4 <__fastSine_veneer+0x4>
    c1f4:	0801424d 	.word	0x0801424d

0000c1f8 <__fastExp4_veneer>:
    c1f8:	f85f f000 	ldr.w	pc, [pc]	; c1fc <__fastExp4_veneer+0x4>
    c1fc:	08013f75 	.word	0x08013f75

0000c200 <__tStiffString_setStiffnessNoUpdate_veneer>:
    c200:	f85f f000 	ldr.w	pc, [pc]	; c204 <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    c204:	08017ba5 	.word	0x08017ba5

0000c208 <__tADSRT_tick_veneer>:
    c208:	f85f f000 	ldr.w	pc, [pc]	; c20c <__tADSRT_tick_veneer+0x4>
    c20c:	08010db9 	.word	0x08010db9

0000c210 <__tADSRT_init_veneer>:
    c210:	f85f f000 	ldr.w	pc, [pc]	; c214 <__tADSRT_init_veneer+0x4>
    c214:	08010bf9 	.word	0x08010bf9

0000c218 <__tStiffString_setPluckPosNoUpdate_veneer>:
    c218:	f85f f000 	ldr.w	pc, [pc]	; c21c <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    c21c:	08017be9 	.word	0x08017be9

0000c220 <__tExpSmooth_tick_veneer>:
    c220:	f85f f000 	ldr.w	pc, [pc]	; c224 <__tExpSmooth_tick_veneer+0x4>
    c224:	08011301 	.word	0x08011301

0000c228 <__tSimpleLivingString3_free_veneer>:
    c228:	f85f f000 	ldr.w	pc, [pc]	; c22c <__tSimpleLivingString3_free_veneer+0x4>
    c22c:	08015c59 	.word	0x08015c59

0000c230 <__tExpSmooth_init_veneer>:
    c230:	f85f f000 	ldr.w	pc, [pc]	; c234 <__tExpSmooth_init_veneer+0x4>
    c234:	08011221 	.word	0x08011221

0000c238 <__tStiffString_free_veneer>:
    c238:	f85f f000 	ldr.w	pc, [pc]	; c23c <__tStiffString_free_veneer+0x4>
    c23c:	08017795 	.word	0x08017795

0000c240 <__tPickupNonLinearity_init_veneer>:
    c240:	f85f f000 	ldr.w	pc, [pc]	; c244 <__tPickupNonLinearity_init_veneer+0x4>
    c244:	0801595d 	.word	0x0801595d

0000c248 <__tCycle_setPhase_veneer>:
    c248:	f85f f000 	ldr.w	pc, [pc]	; c24c <__tCycle_setPhase_veneer+0x4>
    c24c:	080149c9 	.word	0x080149c9

0000c250 <__tTString_setInharmonic_veneer>:
    c250:	f85f f000 	ldr.w	pc, [pc]	; c254 <__tTString_setInharmonic_veneer+0x4>
    c254:	080176e5 	.word	0x080176e5

0000c258 <__tIntPhasor_setPhase_veneer>:
    c258:	f85f f000 	ldr.w	pc, [pc]	; c25c <__tIntPhasor_setPhase_veneer+0x4>
    c25c:	08015305 	.word	0x08015305

0000c260 <__tLinearDelay_tick_veneer>:
    c260:	f85f f000 	ldr.w	pc, [pc]	; c264 <__tLinearDelay_tick_veneer+0x4>
    c264:	0800ff69 	.word	0x0800ff69

0000c268 <__setFilterTypes_veneer>:
    c268:	f85f f000 	ldr.w	pc, [pc]	; c26c <__setFilterTypes_veneer+0x4>
    c26c:	08001fb1 	.word	0x08001fb1

0000c270 <__tanhf_veneer>:
    c270:	f85f f000 	ldr.w	pc, [pc]	; c274 <__tanhf_veneer+0x4>
    c274:	08019ce5 	.word	0x08019ce5

0000c278 <__tTriLFO_setFreq_veneer>:
    c278:	f85f f000 	ldr.w	pc, [pc]	; c27c <__tTriLFO_setFreq_veneer+0x4>
    c27c:	08015795 	.word	0x08015795
