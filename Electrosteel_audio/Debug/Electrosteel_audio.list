
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b4e8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018530  0801b780  0801b780  0002b780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033cb0  08033cb0  0005018c  2**0
                  CONTENTS
  4 .ARM          00000000  08033cb0  08033cb0  0005018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08033cb0  08033cb0  0005018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033cb0  08033cb0  00043cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033cb4  08033cb4  00043cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08033cb8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019b04  20000190  08033e44  00050190  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019c94  08033e44  00059c94  2**0
                  ALLOC
 11 .RAM_D1       0005b020  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000011e0  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0005018c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006f588  00000000  00000000  000501ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008e94  00000000  00000000  000bf742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00063ef1  00000000  00000000  000c85d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003098  00000000  00000000  0012c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c588  00000000  00000000  0012f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004f84e  00000000  00000000  0013bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0000f16f  00000000  00000000  0018b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c5  00000000  00000000  0019a4a5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a7c4  00000000  00000000  0019a56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000190 	.word	0x20000190
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b768 	.word	0x0801b768

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000194 	.word	0x20000194
 80002d4:	0801b768 	.word	0x0801b768

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002ec:	4cd4      	ldr	r4, [pc, #848]	; (8000640 <audioInit+0x358>)
{
 80002ee:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002f0:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8000644 <audioInit+0x35c>
 80002f4:	f24e 2290 	movw	r2, #58000	; 0xe290
 80002f8:	4620      	mov	r0, r4
 80002fa:	49d3      	ldr	r1, [pc, #844]	; (8000648 <audioInit+0x360>)
 80002fc:	4bd3      	ldr	r3, [pc, #844]	; (800064c <audioInit+0x364>)
{
 80002fe:	ed2d 8b08 	vpush	{d8-d11}
 8000302:	b085      	sub	sp, #20

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
 8000304:	ed9f 8ad2 	vldr	s16, [pc, #840]	; 8000650 <audioInit+0x368>
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000308:	f019 f89c 	bl	8019444 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800030c:	4623      	mov	r3, r4
 800030e:	4ad1      	ldr	r2, [pc, #836]	; (8000654 <audioInit+0x36c>)
{
 8000310:	ee0b 5a90 	vmov	s23, r5
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000314:	49d0      	ldr	r1, [pc, #832]	; (8000658 <audioInit+0x370>)
 8000316:	48d1      	ldr	r0, [pc, #836]	; (800065c <audioInit+0x374>)
 8000318:	f014 fad8 	bl	80148cc <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800031c:	4623      	mov	r3, r4
 800031e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000322:	49cf      	ldr	r1, [pc, #828]	; (8000660 <audioInit+0x378>)
 8000324:	48cf      	ldr	r0, [pc, #828]	; (8000664 <audioInit+0x37c>)
 8000326:	f014 fad1 	bl	80148cc <tMempool_init>
	leaf.clearOnAllocation = 1;
 800032a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800032c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000334:	eef0 0a48 	vmov.f32	s1, s16
 8000338:	eddf 1acb 	vldr	s3, [pc, #812]	; 8000668 <audioInit+0x380>
 800033c:	ed9f 0acb 	vldr	s0, [pc, #812]	; 800066c <audioInit+0x384>
 8000340:	48cb      	ldr	r0, [pc, #812]	; (8000670 <audioInit+0x388>)
	leaf.clearOnAllocation = 1;
 8000342:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000344:	f014 f8b4 	bl	80144b0 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000348:	4bca      	ldr	r3, [pc, #808]	; (8000674 <audioInit+0x38c>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800034a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800034e:	4aca      	ldr	r2, [pc, #808]	; (8000678 <audioInit+0x390>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000350:	eddf 0aca 	vldr	s1, [pc, #808]	; 800067c <audioInit+0x394>
 8000354:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8000680 <audioInit+0x398>
 8000358:	48ca      	ldr	r0, [pc, #808]	; (8000684 <audioInit+0x39c>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800035a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800035c:	f014 f90c 	bl	8014578 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000360:	eddf 9ac9 	vldr	s19, [pc, #804]	; 8000688 <audioInit+0x3a0>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000364:	4bc9      	ldr	r3, [pc, #804]	; (800068c <audioInit+0x3a4>)
 8000366:	4aca      	ldr	r2, [pc, #808]	; (8000690 <audioInit+0x3a8>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000368:	ed9f 9aca 	vldr	s18, [pc, #808]	; 8000694 <audioInit+0x3ac>
        x += increment;
 800036c:	eddf 8aca 	vldr	s17, [pc, #808]	; 8000698 <audioInit+0x3b0>
 8000370:	4cca      	ldr	r4, [pc, #808]	; (800069c <audioInit+0x3b4>)
 8000372:	4dcb      	ldr	r5, [pc, #812]	; (80006a0 <audioInit+0x3b8>)
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000374:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000376:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800037a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800037e:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
 8000382:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000386:	ee20 0a29 	vmul.f32	s0, s0, s19
 800038a:	f014 f957 	bl	801463c <ftom>
 800038e:	ee30 0a49 	vsub.f32	s0, s0, s18
 8000392:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
 8000396:	42ac      	cmp	r4, r5
 8000398:	d1ed      	bne.n	8000376 <audioInit+0x8e>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800039a:	2102      	movs	r1, #2
 800039c:	48c1      	ldr	r0, [pc, #772]	; (80006a4 <audioInit+0x3bc>)
 800039e:	f008 faf3 	bl	8008988 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a2:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003a4:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a6:	48c0      	ldr	r0, [pc, #768]	; (80006a8 <audioInit+0x3c0>)
 80003a8:	f008 faee 	bl	8008988 <HAL_GPIO_ReadPin>
 80003ac:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80003ae:	2101      	movs	r1, #1
 80003b0:	48be      	ldr	r0, [pc, #760]	; (80006ac <audioInit+0x3c4>)
 80003b2:	f008 fae9 	bl	8008988 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 80003b6:	4bbe      	ldr	r3, [pc, #760]	; (80006b0 <audioInit+0x3c8>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003b8:	00a4      	lsls	r4, r4, #2
 80003ba:	49be      	ldr	r1, [pc, #760]	; (80006b4 <audioInit+0x3cc>)
	if (numStrings == 6)
 80003bc:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003be:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
 80003c2:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003c4:	4418      	add	r0, r3
 80003c6:	b2c3      	uxtb	r3, r0
 80003c8:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
 80003ca:	f000 82f2 	beq.w	80009b2 <audioInit+0x6ca>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 80003ce:	2a0a      	cmp	r2, #10
 80003d0:	f000 82ea 	beq.w	80009a8 <audioInit+0x6c0>
		}
	}
	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	48b8      	ldr	r0, [pc, #736]	; (80006b8 <audioInit+0x3d0>)
		numStringsThisBoard = 2;
 80003d8:	2102      	movs	r1, #2
 80003da:	4ab8      	ldr	r2, [pc, #736]	; (80006bc <audioInit+0x3d4>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003dc:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
 80003de:	7011      	strb	r1, [r2, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 80003e0:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80003e4:	4996      	ldr	r1, [pc, #600]	; (8000640 <audioInit+0x358>)
 80003e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003ea:	48b5      	ldr	r0, [pc, #724]	; (80006c0 <audioInit+0x3d8>)
 80003ec:	f012 fbda 	bl	8012ba4 <tSlide_init>

		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 80003f0:	4cb4      	ldr	r4, [pc, #720]	; (80006c4 <audioInit+0x3dc>)
 80003f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003f6:	4992      	ldr	r1, [pc, #584]	; (8000640 <audioInit+0x358>)
 80003f8:	eddf 0ab3 	vldr	s1, [pc, #716]	; 80006c8 <audioInit+0x3e0>
 80003fc:	f104 0610 	add.w	r6, r4, #16
 8000400:	48b2      	ldr	r0, [pc, #712]	; (80006cc <audioInit+0x3e4>)
 8000402:	f012 fb8f 	bl	8012b24 <tExpSmooth_init>
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 8000406:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800040a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800040e:	498c      	ldr	r1, [pc, #560]	; (8000640 <audioInit+0x358>)
 8000410:	48af      	ldr	r0, [pc, #700]	; (80006d0 <audioInit+0x3e8>)
 8000412:	f012 fbc7 	bl	8012ba4 <tSlide_init>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000416:	4d8a      	ldr	r5, [pc, #552]	; (8000640 <audioInit+0x358>)
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000418:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800041c:	4988      	ldr	r1, [pc, #544]	; (8000640 <audioInit+0x358>)
 800041e:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80006c8 <audioInit+0x3e0>
 8000422:	48ac      	ldr	r0, [pc, #688]	; (80006d4 <audioInit+0x3ec>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000424:	eddf 8aac 	vldr	s17, [pc, #688]	; 80006d8 <audioInit+0x3f0>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000428:	f012 fb7c 	bl	8012b24 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800042c:	ed9f 8a88 	vldr	s16, [pc, #544]	; 8000650 <audioInit+0x368>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000430:	4983      	ldr	r1, [pc, #524]	; (8000640 <audioInit+0x358>)
 8000432:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80006d8 <audioInit+0x3f0>
 8000436:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8000650 <audioInit+0x368>
 800043a:	48a8      	ldr	r0, [pc, #672]	; (80006dc <audioInit+0x3f4>)
 800043c:	f012 fb72 	bl	8012b24 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000440:	4620      	mov	r0, r4
	for (int i = 0; i < 4; i++)
 8000442:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000444:	eef0 0a68 	vmov.f32	s1, s17
 8000448:	4629      	mov	r1, r5
 800044a:	eeb0 0a48 	vmov.f32	s0, s16
 800044e:	f012 fb69 	bl	8012b24 <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 8000452:	42b4      	cmp	r4, r6
 8000454:	d1f4      	bne.n	8000440 <audioInit+0x158>
 8000456:	2600      	movs	r6, #0
 8000458:	4ba1      	ldr	r3, [pc, #644]	; (80006e0 <audioInit+0x3f8>)
 800045a:	f8df b314 	ldr.w	fp, [pc, #788]	; 8000770 <audioInit+0x488>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 800045e:	4c78      	ldr	r4, [pc, #480]	; (8000640 <audioInit+0x358>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000460:	eddf 8aa0 	vldr	s17, [pc, #640]	; 80006e4 <audioInit+0x3fc>
 8000464:	ed9f baa0 	vldr	s22, [pc, #640]	; 80006e8 <audioInit+0x400>
		}

		for (int i = 0; i < NUM_FILT; i++)
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000468:	eddf 9aa0 	vldr	s19, [pc, #640]	; 80006ec <audioInit+0x404>
 800046c:	ed9f 8aa0 	vldr	s16, [pc, #640]	; 80006f0 <audioInit+0x408>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000470:	ed9f aaa0 	vldr	s20, [pc, #640]	; 80006f4 <audioInit+0x40c>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000474:	e9cd 3600 	strd	r3, r6, [sp]
    float x = 0.0f;
 8000478:	2500      	movs	r5, #0
			tMBSaw_init(&saw[i][v],  &leaf);
 800047a:	4b9f      	ldr	r3, [pc, #636]	; (80006f8 <audioInit+0x410>)
 800047c:	4621      	mov	r1, r4
 800047e:	1998      	adds	r0, r3, r6
 8000480:	4428      	add	r0, r5
 8000482:	f017 fa25 	bl	80178d0 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 8000486:	4b9d      	ldr	r3, [pc, #628]	; (80006fc <audioInit+0x414>)
 8000488:	4621      	mov	r1, r4
 800048a:	1998      	adds	r0, r3, r6
 800048c:	4428      	add	r0, r5
 800048e:	f014 fafd 	bl	8014a8c <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8000492:	4b9b      	ldr	r3, [pc, #620]	; (8000700 <audioInit+0x418>)
 8000494:	4621      	mov	r1, r4
 8000496:	1998      	adds	r0, r3, r6
 8000498:	4428      	add	r0, r5
 800049a:	f014 fa97 	bl	80149cc <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 800049e:	4b99      	ldr	r3, [pc, #612]	; (8000704 <audioInit+0x41c>)
 80004a0:	4621      	mov	r1, r4
 80004a2:	1998      	adds	r0, r3, r6
 80004a4:	4428      	add	r0, r5
 80004a6:	f015 f8dd 	bl	8015664 <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 80004aa:	4b97      	ldr	r3, [pc, #604]	; (8000708 <audioInit+0x420>)
 80004ac:	4621      	mov	r1, r4
 80004ae:	1998      	adds	r0, r3, r6
 80004b0:	4428      	add	r0, r5
 80004b2:	f017 fccb 	bl	8017e4c <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 80004b6:	4b95      	ldr	r3, [pc, #596]	; (800070c <audioInit+0x424>)
 80004b8:	4621      	mov	r1, r4
 80004ba:	1998      	adds	r0, r3, r6
 80004bc:	4428      	add	r0, r5
 80004be:	f016 f947 	bl	8016750 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004c2:	4b93      	ldr	r3, [pc, #588]	; (8000710 <audioInit+0x428>)
 80004c4:	eef0 0a68 	vmov.f32	s1, s17
 80004c8:	4621      	mov	r1, r4
 80004ca:	1998      	adds	r0, r3, r6
 80004cc:	eeb0 0a4b 	vmov.f32	s0, s22
 80004d0:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 80004d2:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004d4:	f012 fb26 	bl	8012b24 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 80004d8:	2d18      	cmp	r5, #24
 80004da:	d1ce      	bne.n	800047a <audioInit+0x192>
 80004dc:	4635      	mov	r5, r6
 80004de:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80004e2:	4b8c      	ldr	r3, [pc, #560]	; (8000714 <audioInit+0x42c>)
 80004e4:	eef0 0a69 	vmov.f32	s1, s19
 80004e8:	eeb0 0a48 	vmov.f32	s0, s16
 80004ec:	2101      	movs	r1, #1
 80004ee:	1958      	adds	r0, r3, r5
 80004f0:	4622      	mov	r2, r4
 80004f2:	f012 fb99 	bl	8012c28 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <audioInit+0x430>)
 80004f8:	eef0 0a69 	vmov.f32	s1, s19
 80004fc:	4622      	mov	r2, r4
 80004fe:	1958      	adds	r0, r3, r5
 8000500:	eeb0 0a48 	vmov.f32	s0, s16
 8000504:	2100      	movs	r1, #0
 8000506:	f012 fb8f 	bl	8012c28 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 800050a:	4b84      	ldr	r3, [pc, #528]	; (800071c <audioInit+0x434>)
 800050c:	4622      	mov	r2, r4
 800050e:	eef0 0a69 	vmov.f32	s1, s19
 8000512:	1958      	adds	r0, r3, r5
 8000514:	eeb0 0a48 	vmov.f32	s0, s16
 8000518:	2102      	movs	r1, #2
 800051a:	f012 fb85 	bl	8012c28 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 800051e:	4b80      	ldr	r3, [pc, #512]	; (8000720 <audioInit+0x438>)
 8000520:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000524:	4621      	mov	r1, r4
 8000526:	1958      	adds	r0, r3, r5
 8000528:	eeb0 0a48 	vmov.f32	s0, s16
 800052c:	f013 f984 	bl	8013838 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000530:	4b7c      	ldr	r3, [pc, #496]	; (8000724 <audioInit+0x43c>)
 8000532:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000536:	4622      	mov	r2, r4
 8000538:	1958      	adds	r0, r3, r5
 800053a:	eeb0 0a48 	vmov.f32	s0, s16
 800053e:	2105      	movs	r1, #5
 8000540:	f012 fe9e 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8000544:	4b78      	ldr	r3, [pc, #480]	; (8000728 <audioInit+0x440>)
 8000546:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800054a:	4622      	mov	r2, r4
 800054c:	1958      	adds	r0, r3, r5
 800054e:	eeb0 0a48 	vmov.f32	s0, s16
 8000552:	2106      	movs	r1, #6
 8000554:	f012 fe94 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8000558:	4b74      	ldr	r3, [pc, #464]	; (800072c <audioInit+0x444>)
 800055a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800055e:	4622      	mov	r2, r4
 8000560:	1958      	adds	r0, r3, r5
 8000562:	eeb0 0a48 	vmov.f32	s0, s16
 8000566:	2107      	movs	r1, #7
 8000568:	f012 fe8a 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800056c:	4b70      	ldr	r3, [pc, #448]	; (8000730 <audioInit+0x448>)
 800056e:	4622      	mov	r2, r4
 8000570:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000574:	1958      	adds	r0, r3, r5
 8000576:	eeb0 0a48 	vmov.f32	s0, s16
 800057a:	2104      	movs	r1, #4
 800057c:	f012 fe80 	bl	8013280 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000580:	4b6c      	ldr	r3, [pc, #432]	; (8000734 <audioInit+0x44c>)
 8000582:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000586:	4621      	mov	r1, r4
 8000588:	1958      	adds	r0, r3, r5
 800058a:	eeb0 0a48 	vmov.f32	s0, s16
 800058e:	f013 fce7 	bl	8013f60 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000592:	4b69      	ldr	r3, [pc, #420]	; (8000738 <audioInit+0x450>)
 8000594:	eef0 0a68 	vmov.f32	s1, s17
 8000598:	4621      	mov	r1, r4
 800059a:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 800059c:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 800059e:	eeb0 0a4b 	vmov.f32	s0, s22
 80005a2:	f012 fabf 	bl	8012b24 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80005a6:	42bd      	cmp	r5, r7
 80005a8:	d19b      	bne.n	80004e2 <audioInit+0x1fa>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <audioInit+0x454>)
 80005ac:	2500      	movs	r5, #0
 80005ae:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005b2:	4b63      	ldr	r3, [pc, #396]	; (8000740 <audioInit+0x458>)
 80005b4:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005b6:	eb08 0005 	add.w	r0, r8, r5
 80005ba:	4621      	mov	r1, r4
 80005bc:	f018 fbe8 	bl	8018d90 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005c0:	1978      	adds	r0, r7, r5
 80005c2:	4621      	mov	r1, r4
 80005c4:	f018 fc2a 	bl	8018e1c <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <audioInit+0x45c>)
 80005ca:	4621      	mov	r1, r4
 80005cc:	1998      	adds	r0, r3, r6
 80005ce:	4428      	add	r0, r5
 80005d0:	f014 f9fc 	bl	80149cc <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <audioInit+0x460>)
 80005d6:	4621      	mov	r1, r4
 80005d8:	1998      	adds	r0, r3, r6
 80005da:	4428      	add	r0, r5
 80005dc:	f018 fe0a 	bl	80191f4 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 80005e0:	4b5a      	ldr	r3, [pc, #360]	; (800074c <audioInit+0x464>)
 80005e2:	4621      	mov	r1, r4
 80005e4:	1998      	adds	r0, r3, r6
 80005e6:	4428      	add	r0, r5
 80005e8:	f018 fe60 	bl	80192ac <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80005ec:	4b58      	ldr	r3, [pc, #352]	; (8000750 <audioInit+0x468>)
 80005ee:	4621      	mov	r1, r4
 80005f0:	1998      	adds	r0, r3, r6
 80005f2:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 80005f4:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80005f6:	f018 fd3b 	bl	8019070 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 80005fa:	2d20      	cmp	r5, #32
 80005fc:	d1db      	bne.n	80005b6 <audioInit+0x2ce>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <audioInit+0x46c>)
 8000600:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000604:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000758 <audioInit+0x470>
 8000608:	2106      	movs	r1, #6
 800060a:	1998      	adds	r0, r3, r6
 800060c:	4622      	mov	r2, r4
 800060e:	f012 fe37 	bl	8013280 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000612:	4b52      	ldr	r3, [pc, #328]	; (800075c <audioInit+0x474>)
 8000614:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000618:	4622      	mov	r2, r4
 800061a:	1998      	adds	r0, r3, r6
 800061c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8000760 <audioInit+0x478>
 8000620:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000622:	eddf aa50 	vldr	s21, [pc, #320]	; 8000764 <audioInit+0x47c>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000626:	f012 fe2b 	bl	8013280 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <audioInit+0x480>)
 800062c:	9f00      	ldr	r7, [sp, #0]
 800062e:	eeb0 0a4a 	vmov.f32	s0, s20
 8000632:	4622      	mov	r2, r4
 8000634:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800076c <audioInit+0x484>
 8000638:	2105      	movs	r1, #5
 800063a:	1998      	adds	r0, r3, r6
 800063c:	e09c      	b.n	8000778 <audioInit+0x490>
 800063e:	bf00      	nop
 8000640:	2000456c 	.word	0x2000456c
 8000644:	473b8000 	.word	0x473b8000
 8000648:	20004aac 	.word	0x20004aac
 800064c:	080044b1 	.word	0x080044b1
 8000650:	00000000 	.word	0x00000000
 8000654:	00030d40 	.word	0x00030d40
 8000658:	24028020 	.word	0x24028020
 800065c:	200047a0 	.word	0x200047a0
 8000660:	60000000 	.word	0x60000000
 8000664:	20004568 	.word	0x20004568
 8000668:	ba51b717 	.word	0xba51b717
 800066c:	3a83126f 	.word	0x3a83126f
 8000670:	200003e0 	.word	0x200003e0
 8000674:	200043e0 	.word	0x200043e0
 8000678:	457ff000 	.word	0x457ff000
 800067c:	4323d666 	.word	0x4323d666
 8000680:	c323d666 	.word	0xc323d666
 8000684:	24008020 	.word	0x24008020
 8000688:	435c0000 	.word	0x435c0000
 800068c:	20000060 	.word	0x20000060
 8000690:	449256db 	.word	0x449256db
 8000694:	42640000 	.word	0x42640000
 8000698:	38ffe802 	.word	0x38ffe802
 800069c:	24000000 	.word	0x24000000
 80006a0:	24008010 	.word	0x24008010
 80006a4:	58020400 	.word	0x58020400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58020000 	.word	0x58020000
 80006b0:	20000065 	.word	0x20000065
 80006b4:	20012fac 	.word	0x20012fac
 80006b8:	200044a4 	.word	0x200044a4
 80006bc:	20000066 	.word	0x20000066
 80006c0:	200044c4 	.word	0x200044c4
 80006c4:	20004558 	.word	0x20004558
 80006c8:	3d4ccccd 	.word	0x3d4ccccd
 80006cc:	20012e1c 	.word	0x20012e1c
 80006d0:	200044c8 	.word	0x200044c8
 80006d4:	20012e20 	.word	0x20012e20
 80006d8:	3a03126f 	.word	0x3a03126f
 80006dc:	20012ef8 	.word	0x20012ef8
 80006e0:	2000446c 	.word	0x2000446c
 80006e4:	3c23d70a 	.word	0x3c23d70a
 80006e8:	42800000 	.word	0x42800000
 80006ec:	3f333333 	.word	0x3f333333
 80006f0:	44fa0000 	.word	0x44fa0000
 80006f4:	447a0000 	.word	0x447a0000
 80006f8:	200049c0 	.word	0x200049c0
 80006fc:	200049a4 	.word	0x200049a4
 8000700:	20004a7c 	.word	0x20004a7c
 8000704:	20012ed0 	.word	0x20012ed0
 8000708:	200049d8 	.word	0x200049d8
 800070c:	20004a94 	.word	0x20004a94
 8000710:	20004954 	.word	0x20004954
 8000714:	20004690 	.word	0x20004690
 8000718:	2000450c 	.word	0x2000450c
 800071c:	20000324 	.word	0x20000324
 8000720:	20004424 	.word	0x20004424
 8000724:	2000030c 	.word	0x2000030c
 8000728:	200002fc 	.word	0x200002fc
 800072c:	200002ec 	.word	0x200002ec
 8000730:	200002dc 	.word	0x200002dc
 8000734:	200002cc 	.word	0x200002cc
 8000738:	2000446c 	.word	0x2000446c
 800073c:	200045e0 	.word	0x200045e0
 8000740:	200045c0 	.word	0x200045c0
 8000744:	20004630 	.word	0x20004630
 8000748:	20004670 	.word	0x20004670
 800074c:	20004650 	.word	0x20004650
 8000750:	20004600 	.word	0x20004600
 8000754:	2000480c 	.word	0x2000480c
 8000758:	42a00000 	.word	0x42a00000
 800075c:	20004814 	.word	0x20004814
 8000760:	463b8000 	.word	0x463b8000
 8000764:	3dcccccd 	.word	0x3dcccccd
 8000768:	200047f4 	.word	0x200047f4
 800076c:	3ff33333 	.word	0x3ff33333
 8000770:	200047a0 	.word	0x200047a0
 8000774:	3f7fffac 	.word	0x3f7fffac
 8000778:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800077c:	ed1f 9a03 	vldr	s18, [pc, #-12]	; 8000774 <audioInit+0x48c>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000780:	f012 fd7e 	bl	8013280 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000784:	4628      	mov	r0, r5
 8000786:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800078a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800078e:	4623      	mov	r3, r4
 8000790:	eef0 0a4a 	vmov.f32	s1, s20
 8000794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000798:	eeb0 0a6a 	vmov.f32	s0, s21
 800079c:	4995      	ldr	r1, [pc, #596]	; (80009f4 <audioInit+0x70c>)
 800079e:	f012 f819 	bl	80127d4 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007a2:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80007a4:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007a6:	eeb0 0a49 	vmov.f32	s0, s18
 80007aa:	f012 f8c9 	bl	8012940 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80007ae:	42af      	cmp	r7, r5
 80007b0:	d1e8      	bne.n	8000784 <audioInit+0x49c>
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <audioInit+0x710>)
 80007b4:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80007b6:	eddf aa91 	vldr	s21, [pc, #580]	; 80009fc <audioInit+0x714>
 80007ba:	eb03 0806 	add.w	r8, r3, r6
 80007be:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <audioInit+0x718>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80007c0:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8000a04 <audioInit+0x71c>
 80007c4:	199f      	adds	r7, r3, r6
 80007c6:	f106 0320 	add.w	r3, r6, #32
 80007ca:	e9cd b602 	strd	fp, r6, [sp, #8]
 80007ce:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 80007d0:	4640      	mov	r0, r8
 80007d2:	4621      	mov	r1, r4
 80007d4:	f011 fecc 	bl	8012570 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80007d8:	4638      	mov	r0, r7
 80007da:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80007de:	4621      	mov	r1, r4
 80007e0:	f012 fb1c 	bl	8012e1c <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80007e4:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <audioInit+0x720>)
 80007e6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80007ea:	4621      	mov	r1, r4
 80007ec:	195e      	adds	r6, r3, r5
 80007ee:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <audioInit+0x724>)
		for (int i = 0; i < NUM_EFFECT; i++)
 80007f0:	f108 0808 	add.w	r8, r8, #8
 80007f4:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80007f6:	1958      	adds	r0, r3, r5
 80007f8:	f012 fb10 	bl	8012e1c <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80007fc:	4b84      	ldr	r3, [pc, #528]	; (8000a10 <audioInit+0x728>)
 80007fe:	eef0 0a6a 	vmov.f32	s1, s21
 8000802:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8000a14 <audioInit+0x72c>
 8000806:	eb03 0a05 	add.w	sl, r3, r5
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <audioInit+0x730>)
 800080c:	4622      	mov	r2, r4
 800080e:	2106      	movs	r1, #6
 8000810:	eb03 0905 	add.w	r9, r3, r5
 8000814:	4630      	mov	r0, r6
 8000816:	f012 fd33 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 800081a:	4650      	mov	r0, sl
 800081c:	eef0 0a6a 	vmov.f32	s1, s21
 8000820:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8000a1c <audioInit+0x734>
 8000824:	4622      	mov	r2, r4
 8000826:	2107      	movs	r1, #7
 8000828:	f012 fd2a 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 800082c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000a20 <audioInit+0x738>
 8000830:	4622      	mov	r2, r4
 8000832:	2105      	movs	r1, #5
 8000834:	4648      	mov	r0, r9
 8000836:	eeb0 0a4a 	vmov.f32	s0, s20
 800083a:	f012 fd21 	bl	8013280 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800083e:	eeb0 0a49 	vmov.f32	s0, s18
 8000842:	4630      	mov	r0, r6
 8000844:	f012 feb6 	bl	80135b4 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000848:	4650      	mov	r0, sl
 800084a:	eeb0 0a49 	vmov.f32	s0, s18
 800084e:	f012 feb1 	bl	80135b4 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000852:	eeb0 0a49 	vmov.f32	s0, s18
 8000856:	4648      	mov	r0, r9
 8000858:	f012 feac 	bl	80135b4 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 800085c:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <audioInit+0x73c>)
 800085e:	4621      	mov	r1, r4
 8000860:	eb03 0a05 	add.w	sl, r3, r5
 8000864:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <audioInit+0x740>)
 8000866:	1958      	adds	r0, r3, r5
 8000868:	f011 ff0a 	bl	8012680 <tCompressor_init>
			//tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			//tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &mediumPool);
			//tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &mediumPool);
			tCycle_init(&mod1[i][v], &leaf);
 800086c:	4b6f      	ldr	r3, [pc, #444]	; (8000a2c <audioInit+0x744>)
 800086e:	4621      	mov	r1, r4
 8000870:	4650      	mov	r0, sl
 8000872:	eb03 0905 	add.w	r9, r3, r5
 8000876:	f014 f8a9 	bl	80149cc <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 800087a:	4621      	mov	r1, r4
 800087c:	4648      	mov	r0, r9
 800087e:	f014 f8a5 	bl	80149cc <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8000882:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000a30 <audioInit+0x748>
 8000886:	4650      	mov	r0, sl
 8000888:	f014 f8e2 	bl	8014a50 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800088c:	4648      	mov	r0, r9
 800088e:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000a34 <audioInit+0x74c>
 8000892:	f014 f8dd 	bl	8014a50 <tCycle_setFreq>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <audioInit+0x750>)
 8000898:	eef0 0a69 	vmov.f32	s1, s19
 800089c:	4622      	mov	r2, r4
 800089e:	1958      	adds	r0, r3, r5
 80008a0:	eeb0 0a48 	vmov.f32	s0, s16
 80008a4:	2101      	movs	r1, #1
 80008a6:	f012 f9bf 	bl	8012c28 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80008aa:	4b64      	ldr	r3, [pc, #400]	; (8000a3c <audioInit+0x754>)
 80008ac:	eef0 0a69 	vmov.f32	s1, s19
 80008b0:	4622      	mov	r2, r4
 80008b2:	1958      	adds	r0, r3, r5
 80008b4:	eeb0 0a48 	vmov.f32	s0, s16
 80008b8:	2100      	movs	r1, #0
 80008ba:	f012 f9b5 	bl	8012c28 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <audioInit+0x758>)
 80008c0:	4622      	mov	r2, r4
 80008c2:	eef0 0a69 	vmov.f32	s1, s19
 80008c6:	1958      	adds	r0, r3, r5
 80008c8:	eeb0 0a48 	vmov.f32	s0, s16
 80008cc:	2102      	movs	r1, #2
 80008ce:	f012 f9ab 	bl	8012c28 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80008d2:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <audioInit+0x75c>)
 80008d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008d8:	4621      	mov	r1, r4
 80008da:	1958      	adds	r0, r3, r5
 80008dc:	eeb0 0a48 	vmov.f32	s0, s16
 80008e0:	f012 ffaa 	bl	8013838 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 80008e4:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <audioInit+0x760>)
 80008e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008ea:	4622      	mov	r2, r4
 80008ec:	1958      	adds	r0, r3, r5
 80008ee:	eeb0 0a48 	vmov.f32	s0, s16
 80008f2:	2105      	movs	r1, #5
 80008f4:	f012 fcc4 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 80008f8:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <audioInit+0x764>)
 80008fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008fe:	4622      	mov	r2, r4
 8000900:	1958      	adds	r0, r3, r5
 8000902:	eeb0 0a48 	vmov.f32	s0, s16
 8000906:	2106      	movs	r1, #6
 8000908:	f012 fcba 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 800090c:	4b50      	ldr	r3, [pc, #320]	; (8000a50 <audioInit+0x768>)
 800090e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000912:	4622      	mov	r2, r4
 8000914:	1958      	adds	r0, r3, r5
 8000916:	eeb0 0a48 	vmov.f32	s0, s16
 800091a:	2107      	movs	r1, #7
 800091c:	f012 fcb0 	bl	8013280 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8000920:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <audioInit+0x76c>)
 8000922:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000926:	4622      	mov	r2, r4
 8000928:	1958      	adds	r0, r3, r5
 800092a:	eeb0 0a48 	vmov.f32	s0, s16
 800092e:	2104      	movs	r1, #4
 8000930:	f012 fca6 	bl	8013280 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000934:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <audioInit+0x770>)
 8000936:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800093a:	4621      	mov	r1, r4
 800093c:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 800093e:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000940:	eeb0 0a48 	vmov.f32	s0, s16
 8000944:	f013 fb0c 	bl	8013f60 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8000948:	45ab      	cmp	fp, r5
 800094a:	f47f af41 	bne.w	80007d0 <audioInit+0x4e8>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800094e:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8000a5c <audioInit+0x774>
 8000952:	e9dd b602 	ldrd	fp, r6, [sp, #8]
 8000956:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
 800095a:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800095c:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800095e:	eef0 0a68 	vmov.f32	s1, s17
 8000962:	4621      	mov	r1, r4
 8000964:	eeb0 0a49 	vmov.f32	s0, s18
 8000968:	f012 f8dc 	bl	8012b24 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800096c:	455d      	cmp	r5, fp
 800096e:	d1f4      	bne.n	800095a <audioInit+0x672>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000970:	9b00      	ldr	r3, [sp, #0]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8000972:	2102      	movs	r1, #2
 8000974:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000976:	f10b 0b04 	add.w	fp, fp, #4
 800097a:	3304      	adds	r3, #4
 800097c:	9300      	str	r3, [sp, #0]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <audioInit+0x778>)
 8000980:	1998      	adds	r0, r3, r6
 8000982:	4623      	mov	r3, r4
 8000984:	f011 fcf6 	bl	8012374 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8000988:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <audioInit+0x77c>)
 800098a:	4622      	mov	r2, r4
 800098c:	eddf 0a36 	vldr	s1, [pc, #216]	; 8000a68 <audioInit+0x780>
 8000990:	1998      	adds	r0, r3, r6
 8000992:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8000a6c <audioInit+0x784>
 8000996:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000998:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800099a:	f012 f945 	bl	8012c28 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	b96b      	cbnz	r3, 80009be <audioInit+0x6d6>
 80009a2:	2301      	movs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	e567      	b.n	8000478 <audioInit+0x190>
		if (boardNumber == 0)
 80009a8:	b11b      	cbz	r3, 80009b2 <audioInit+0x6ca>
		else if (boardNumber == 1)
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d01d      	beq.n	80009ea <audioInit+0x702>
			firstString = boardNumber - 1 * NUM_STRINGS_PER_BOARD;
 80009ae:	3b02      	subs	r3, #2
 80009b0:	e511      	b.n	80003d6 <audioInit+0xee>
			firstString = 0;
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <audioInit+0x788>)
			numStringsThisBoard = 1;
 80009b4:	2101      	movs	r1, #1
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <audioInit+0x78c>)
			firstString = 0;
 80009b8:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
 80009ba:	7011      	strb	r1, [r2, #0]
 80009bc:	e510      	b.n	80003e0 <audioInit+0xf8>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	2100      	movs	r1, #0
 80009c2:	482d      	ldr	r0, [pc, #180]	; (8000a78 <audioInit+0x790>)
 80009c4:	f018 fe04 	bl	80195d0 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80009c8:	2220      	movs	r2, #32
 80009ca:	492b      	ldr	r1, [pc, #172]	; (8000a78 <audioInit+0x790>)
 80009cc:	ee1b 0a90 	vmov	r0, s23
 80009d0:	f00b fa7c 	bl	800becc <HAL_SAI_Transmit_DMA>
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <audioInit+0x794>)
 80009d6:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 80009d8:	9801      	ldr	r0, [sp, #4]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80009da:	701a      	strb	r2, [r3, #0]

}
 80009dc:	b005      	add	sp, #20
 80009de:	ecbd 8b08 	vpop	{d8-d11}
 80009e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 80009e6:	f006 b9fd 	b.w	8006de4 <HAL_Delay>
			firstString = 1;
 80009ea:	4921      	ldr	r1, [pc, #132]	; (8000a70 <audioInit+0x788>)
			numStringsThisBoard = 1;
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <audioInit+0x78c>)
			firstString = 1;
 80009ee:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
 80009f0:	7013      	strb	r3, [r2, #0]
 80009f2:	e4f5      	b.n	80003e0 <audioInit+0xf8>
 80009f4:	200003e0 	.word	0x200003e0
 80009f8:	2000033c 	.word	0x2000033c
 80009fc:	42000000 	.word	0x42000000
 8000a00:	200003a0 	.word	0x200003a0
 8000a04:	47bb8000 	.word	0x47bb8000
 8000a08:	20004a3c 	.word	0x20004a3c
 8000a0c:	200003c0 	.word	0x200003c0
 8000a10:	20004a5c 	.word	0x20004a5c
 8000a14:	42a00000 	.word	0x42a00000
 8000a18:	2000035c 	.word	0x2000035c
 8000a1c:	463b8000 	.word	0x463b8000
 8000a20:	3ff33333 	.word	0x3ff33333
 8000a24:	200047a4 	.word	0x200047a4
 8000a28:	20000380 	.word	0x20000380
 8000a2c:	200047c4 	.word	0x200047c4
 8000a30:	3e4ccccd 	.word	0x3e4ccccd
 8000a34:	3e638e39 	.word	0x3e638e39
 8000a38:	200002ac 	.word	0x200002ac
 8000a3c:	2000028c 	.word	0x2000028c
 8000a40:	2000024c 	.word	0x2000024c
 8000a44:	2000026c 	.word	0x2000026c
 8000a48:	2000022c 	.word	0x2000022c
 8000a4c:	2000020c 	.word	0x2000020c
 8000a50:	200001ec 	.word	0x200001ec
 8000a54:	200001cc 	.word	0x200001cc
 8000a58:	200001ac 	.word	0x200001ac
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	20004820 	.word	0x20004820
 8000a64:	20004494 	.word	0x20004494
 8000a68:	3e99999a 	.word	0x3e99999a
 8000a6c:	46947000 	.word	0x46947000
 8000a70:	200044a4 	.word	0x200044a4
 8000a74:	20000066 	.word	0x20000066
 8000a78:	30000000 	.word	0x30000000
 8000a7c:	20012ec8 	.word	0x20012ec8

08000a80 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};


void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
 8000a80:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <updateStateFromSPIMessage+0x90>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
 8000a82:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8000b40 <updateStateFromSPIMessage+0xc0>
	int modeBit = SPI_LEVERS[24 + offset];
 8000a86:	1811      	adds	r1, r2, r0
{
 8000a88:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
 8000a8a:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
 8000a8c:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
 8000a8e:	4f21      	ldr	r7, [pc, #132]	; (8000b14 <updateStateFromSPIMessage+0x94>)
	voice = SPI_LEVERS[25 + offset];
 8000a90:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
 8000a94:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
 8000a98:	4e1f      	ldr	r6, [pc, #124]	; (8000b18 <updateStateFromSPIMessage+0x98>)
	neck = (modeBit >> 6) & 1;
 8000a9a:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
 8000a9e:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
 8000aa2:	4d1e      	ldr	r5, [pc, #120]	; (8000b1c <updateStateFromSPIMessage+0x9c>)

	if (voice != prevVoice)
 8000aa4:	4c1e      	ldr	r4, [pc, #120]	; (8000b20 <updateStateFromSPIMessage+0xa0>)
	dualSlider = (modeBit >> 5) & 1;
 8000aa6:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
 8000aa8:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8000aac:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
 8000aae:	6825      	ldr	r5, [r4, #0]
 8000ab0:	42a9      	cmp	r1, r5
 8000ab2:	d004      	beq.n	8000abe <updateStateFromSPIMessage+0x3e>
	{
		presetWaitingToLoad = 1;
 8000ab4:	4d1b      	ldr	r5, [pc, #108]	; (8000b24 <updateStateFromSPIMessage+0xa4>)
 8000ab6:	2601      	movs	r6, #1
 8000ab8:	602e      	str	r6, [r5, #0]
		presetNumberToLoad = voice;
 8000aba:	4d1b      	ldr	r5, [pc, #108]	; (8000b28 <updateStateFromSPIMessage+0xa8>)
 8000abc:	7029      	strb	r1, [r5, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000abe:	4410      	add	r0, r2
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000ac0:	f003 030f 	and.w	r3, r3, #15
 8000ac4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000ac8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000b2c <updateStateFromSPIMessage+0xac>
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000acc:	f890 c01a 	ldrb.w	ip, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000ad0:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000ad2:	7ec2      	ldrb	r2, [r0, #27]
 8000ad4:	4816      	ldr	r0, [pc, #88]	; (8000b30 <updateStateFromSPIMessage+0xb0>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000ad6:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000ada:	eb02 220c 	add.w	r2, r2, ip, lsl #8
	prevVoice = voice;
 8000ade:	6021      	str	r1, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae4:	4c13      	ldr	r4, [pc, #76]	; (8000b34 <updateStateFromSPIMessage+0xb4>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000ae6:	b292      	uxth	r2, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000ae8:	4913      	ldr	r1, [pc, #76]	; (8000b38 <updateStateFromSPIMessage+0xb8>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000aea:	8002      	strh	r2, [r0, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000aec:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000af0:	8803      	ldrh	r3, [r0, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <updateStateFromSPIMessage+0xbc>)
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000af4:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000af6:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000afa:	ee00 3a10 	vmov	s0, r3
 8000afe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000b02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000b06:	ed81 0a00 	vstr	s0, [r1]
}
 8000b0a:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000b0c:	f012 b836 	b.w	8012b7c <tExpSmooth_setDest>
 8000b10:	30000100 	.word	0x30000100
 8000b14:	200047e4 	.word	0x200047e4
 8000b18:	20004434 	.word	0x20004434
 8000b1c:	20004438 	.word	0x20004438
 8000b20:	20004970 	.word	0x20004970
 8000b24:	20016c2c 	.word	0x20016c2c
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	39800801 	.word	0x39800801
 8000b30:	20012ef4 	.word	0x20012ef4
 8000b34:	2000481c 	.word	0x2000481c
 8000b38:	20012ef0 	.word	0x20012ef0
 8000b3c:	20012ef8 	.word	0x20012ef8
 8000b40:	20012ee8 	.word	0x20012ee8

08000b44 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 8000b48:	496f      	ldr	r1, [pc, #444]	; (8000d08 <oscillator_tick+0x1c4>)
 8000b4a:	2500      	movs	r5, #0
	uint32_t tempCount1 = DWT->CYCCNT;
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
 8000b4c:	4a6f      	ldr	r2, [pc, #444]	; (8000d0c <oscillator_tick+0x1c8>)
{
 8000b4e:	ed2d 8b0c 	vpush	{d8-d13}
	interruptChecker = 0;
 8000b52:	700d      	strb	r5, [r1, #0]
{
 8000b54:	b089      	sub	sp, #36	; 0x24
	uint32_t tempCount1 = DWT->CYCCNT;
 8000b56:	496e      	ldr	r1, [pc, #440]	; (8000d10 <oscillator_tick+0x1cc>)
		oscOuts[0][i][string] = 0.0f;
 8000b58:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000b5c:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 8000d14 <oscillator_tick+0x1d0>
	uint32_t tempCount1 = DWT->CYCCNT;
 8000b60:	684b      	ldr	r3, [r1, #4]
		oscOuts[0][i][string] = 0.0f;
 8000b62:	ed86 9a00 	vstr	s18, [r6]
	uint32_t tempCount1 = DWT->CYCCNT;
 8000b66:	9305      	str	r3, [sp, #20]
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 8000b68:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <oscillator_tick+0x1d4>)
		oscOuts[1][i][string] = 0.0f;
 8000b6a:	ed86 9a06 	vstr	s18, [r6, #24]
	for (int osc = 0; osc < oscToTick; osc++)
 8000b6e:	781a      	ldrb	r2, [r3, #0]
		oscOuts[0][i][string] = 0.0f;
 8000b70:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8000b74:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 8000b78:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 8000b7c:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f000 80b6 	beq.w	8000cf2 <oscillator_tick+0x1ae>
 8000b86:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8000b8a:	4a64      	ldr	r2, [pc, #400]	; (8000d1c <oscillator_tick+0x1d8>)
 8000b8c:	4c64      	ldr	r4, [pc, #400]	; (8000d20 <oscillator_tick+0x1dc>)
 8000b8e:	eef0 9a40 	vmov.f32	s19, s0
 8000b92:	eb02 0b0a 	add.w	fp, r2, sl
 8000b96:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <oscillator_tick+0x1e0>)
 8000b98:	4f63      	ldr	r7, [pc, #396]	; (8000d28 <oscillator_tick+0x1e4>)
 8000b9a:	4681      	mov	r9, r0
 8000b9c:	eb02 030a 	add.w	r3, r2, sl
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
		float freqToSmooth = (note + (fine*0.01f));
 8000ba0:	ed9f ca62 	vldr	s24, [pc, #392]	; 8000d2c <oscillator_tick+0x1e8>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000ba4:	eddf ba62 	vldr	s23, [pc, #392]	; 8000d30 <oscillator_tick+0x1ec>
 8000ba8:	4454      	add	r4, sl
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	4457      	add	r7, sl
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <oscillator_tick+0x1f0>)
 8000bb0:	ed9f ba61 	vldr	s22, [pc, #388]	; 8000d38 <oscillator_tick+0x1f4>
 8000bb4:	eddf aa61 	vldr	s21, [pc, #388]	; 8000d3c <oscillator_tick+0x1f8>
 8000bb8:	ed9f aa61 	vldr	s20, [pc, #388]	; 8000d40 <oscillator_tick+0x1fc>
 8000bbc:	9302      	str	r3, [sp, #8]
 8000bbe:	f8cd a010 	str.w	sl, [sp, #16]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000bc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000bc6:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000bca:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 8000bce:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000bd2:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 8000bd4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8000d10 <oscillator_tick+0x1cc>
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000bd8:	eef4 6ac7 	vcmpe.f32	s13, s14
		float filterSend = oscParams[OscFilterSend].realVal[string];
 8000bdc:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000be0:	eea7 0a8c 	vfma.f32	s0, s15, s24
		float freqOffset= oscParams[OscFreq].realVal[string];
 8000be4:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
		float amp = oscParams[OscAmp].realVal[string];
 8000be8:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000bec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float shape = oscParams[OscShape].realVal[string];
 8000bf4:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	for (int osc = 0; osc < oscToTick; osc++)
 8000bf8:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 8000bfc:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000c00:	bfcc      	ite	gt
 8000c02:	2201      	movgt	r2, #1
 8000c04:	2200      	movle	r2, #0
 8000c06:	9203      	str	r2, [sp, #12]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000c08:	f011 ffb8 	bl	8012b7c <tExpSmooth_setDest>
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c0c:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 8000c0e:	f8d8 a004 	ldr.w	sl, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c12:	f011 ffb7 	bl	8012b84 <tExpSmooth_tick>
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c16:	eeb0 1a6a 	vmov.f32	s2, s21
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c1a:	eef0 0a40 	vmov.f32	s1, s0
	for (int osc = 0; osc < oscToTick; osc++)
 8000c1e:	3708      	adds	r7, #8
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c20:	eeb0 0a4a 	vmov.f32	s0, s20
 8000c24:	f013 fc0c 	bl	8014440 <LEAF_clip>
 8000c28:	eef0 7a4b 	vmov.f32	s15, s22
		timeApprox = DWT->CYCCNT - tempCountappr;

		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c2c:	465b      	mov	r3, fp
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000c2e:	4a45      	ldr	r2, [pc, #276]	; (8000d44 <oscillator_tick+0x200>)
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000c30:	4845      	ldr	r0, [pc, #276]	; (8000d48 <oscillator_tick+0x204>)

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000c32:	eef0 0a6d 	vmov.f32	s1, s27
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c36:	eee0 7a2b 	vfma.f32	s15, s0, s23
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c3a:	edd3 5a00 	vldr	s11, [r3]
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000c3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000c42:	eeb0 0a4d 	vmov.f32	s0, s26
		float sample = 0.0f;
 8000c46:	ed8d 9a07 	vstr	s18, [sp, #28]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c4a:	f10b 0b08 	add.w	fp, fp, #8
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000c4e:	eba3 030a 	sub.w	r3, r3, sl
 8000c52:	6013      	str	r3, [r2, #0]
		int tempIndexI = (int)tempIndexF;
 8000c54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000c58:	9a03      	ldr	r2, [sp, #12]
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c5a:	ee78 6a67 	vsub.f32	s13, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000c5e:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 8000c62:	ee17 3a10 	vmov	r3, s14
		tempIndexF = tempIndexF -tempIndexI;
 8000c66:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000c6a:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000c6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 8000c70:	ee77 7ac6 	vsub.f32	s15, s15, s12
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000c74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000c78:	f3c1 010e 	ubfx	r1, r1, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c7c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8000c80:	ed93 7a00 	vldr	s14, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000c84:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c88:	9904      	ldr	r1, [sp, #16]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000c8a:	a807      	add	r0, sp, #28
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c8c:	ed93 6a00 	vldr	s12, [r3]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <oscillator_tick+0x208>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c92:	ee67 7a86 	vmul.f32	s15, s15, s12
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c96:	440b      	add	r3, r1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000c98:	4629      	mov	r1, r5
	for (int osc = 0; osc < oscToTick; osc++)
 8000c9a:	3501      	adds	r5, #1
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c9c:	eee6 7a87 	vfma.f32	s15, s13, s14
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000ca0:	ed93 7a00 	vldr	s14, [r3]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000ca4:	9b02      	ldr	r3, [sp, #8]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000ca6:	ee27 7a25 	vmul.f32	s14, s14, s11
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000caa:	f853 8b04 	ldr.w	r8, [r3], #4
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8000cb6:	47c0      	blx	r8
		sample *= amp;
 8000cb8:	eddd 7a07 	vldr	s15, [sp, #28]
		sourceValues[osc][string] = sample;
 8000cbc:	9b01      	ldr	r3, [sp, #4]
		sample *= amp;
 8000cbe:	ee6c 7aa7 	vmul.f32	s15, s25, s15
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000cc2:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sourceValues[osc][string] = sample;
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	3308      	adds	r3, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000cca:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 8000cce:	9301      	str	r3, [sp, #4]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000cd0:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <oscillator_tick+0x1d4>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000cd6:	ee68 8aa7 	vmul.f32	s17, s17, s15
		sourceValues[osc][string] = sample;
 8000cda:	edc2 7a00 	vstr	s15, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
 8000cde:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000ce0:	ee28 8a07 	vmul.f32	s16, s16, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000ce4:	42ab      	cmp	r3, r5
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000ce6:	ed46 8a02 	vstr	s17, [r6, #-8]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000cea:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 8000cee:	f73f af68 	bgt.w	8000bc2 <oscillator_tick+0x7e>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <oscillator_tick+0x1cc>)
 8000cf4:	9905      	ldr	r1, [sp, #20]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <oscillator_tick+0x20c>)
 8000cfa:	1a5b      	subs	r3, r3, r1
 8000cfc:	6013      	str	r3, [r2, #0]
}
 8000cfe:	b009      	add	sp, #36	; 0x24
 8000d00:	ecbd 8b0c 	vpop	{d8-d13}
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d08:	20015169 	.word	0x20015169
 8000d0c:	20004828 	.word	0x20004828
 8000d10:	e0001000 	.word	0xe0001000
 8000d14:	00000000 	.word	0x00000000
 8000d18:	2000007c 	.word	0x2000007c
 8000d1c:	200044ac 	.word	0x200044ac
 8000d20:	20015b28 	.word	0x20015b28
 8000d24:	20012d3c 	.word	0x20012d3c
 8000d28:	20004954 	.word	0x20004954
 8000d2c:	3c23d70a 	.word	0x3c23d70a
 8000d30:	42c80000 	.word	0x42c80000
 8000d34:	20004a30 	.word	0x20004a30
 8000d38:	46800000 	.word	0x46800000
 8000d3c:	43480000 	.word	0x43480000
 8000d40:	c3480000 	.word	0xc3480000
 8000d44:	20012ea4 	.word	0x20012ea4
 8000d48:	24008020 	.word	0x24008020
 8000d4c:	20004540 	.word	0x20004540
 8000d50:	20012ebc 	.word	0x20012ebc

08000d54 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d58:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000d5a:	4c1a      	ldr	r4, [pc, #104]	; (8000dc4 <sawSquareTick+0x70>)
 8000d5c:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000d60:	4617      	mov	r7, r2
 8000d62:	4688      	mov	r8, r1
 8000d64:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000d66:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000d6a:	ed2d 8b02 	vpush	{d8}
 8000d6e:	eeb0 8a60 	vmov.f32	s16, s1
 8000d72:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000d74:	9001      	str	r0, [sp, #4]
 8000d76:	f017 ffa5 	bl	8018cc4 <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8000d7a:	9801      	ldr	r0, [sp, #4]
 8000d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8000d80:	f018 f802 	bl	8018d88 <tMBSawPulse_setShape>
    if (sync)
 8000d84:	9801      	ldr	r0, [sp, #4]
 8000d86:	b977      	cbnz	r7, 8000da6 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8000d88:	f017 f8aa 	bl	8017ee0 <tMBSawPulse_tick>
 8000d8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d90:	edd5 7a00 	vldr	s15, [r5]
 8000d94:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000d98:	edc5 7a00 	vstr	s15, [r5]
}
 8000d9c:	b002      	add	sp, #8
 8000d9e:	ecbd 8b02 	vpop	{d8}
 8000da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <sawSquareTick+0x74>)
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <sawSquareTick+0x78>)
 8000daa:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000dae:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000db2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000db6:	ed96 0a00 	vldr	s0, [r6]
 8000dba:	f017 ffb5 	bl	8018d28 <tMBSawPulse_sync>
 8000dbe:	9801      	ldr	r0, [sp, #4]
 8000dc0:	e7e2      	b.n	8000d88 <sawSquareTick+0x34>
 8000dc2:	bf00      	nop
 8000dc4:	200049d8 	.word	0x200049d8
 8000dc8:	0801b780 	.word	0x0801b780
 8000dcc:	20012d3c 	.word	0x20012d3c

08000dd0 <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd4:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000dd6:	4c1a      	ldr	r4, [pc, #104]	; (8000e40 <sineTriTick+0x70>)
 8000dd8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000ddc:	4617      	mov	r7, r2
 8000dde:	4688      	mov	r8, r1
 8000de0:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000de2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000de6:	ed2d 8b02 	vpush	{d8}
 8000dea:	eeb0 8a60 	vmov.f32	s16, s1
 8000dee:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000df0:	9001      	str	r0, [sp, #4]
 8000df2:	f016 fd29 	bl	8017848 <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 8000df6:	9801      	ldr	r0, [sp, #4]
 8000df8:	eeb0 0a48 	vmov.f32	s0, s16
 8000dfc:	f016 fd64 	bl	80178c8 <tMBSineTri_setShape>
    if (sync)
 8000e00:	9801      	ldr	r0, [sp, #4]
 8000e02:	b977      	cbnz	r7, 8000e22 <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 8000e04:	f015 fcf0 	bl	80167e8 <tMBSineTri_tick>
 8000e08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e0c:	edd5 7a00 	vldr	s15, [r5]
 8000e10:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e14:	edc5 7a00 	vstr	s15, [r5]
}
 8000e18:	b002      	add	sp, #8
 8000e1a:	ecbd 8b02 	vpop	{d8}
 8000e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <sineTriTick+0x74>)
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <sineTriTick+0x78>)
 8000e26:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000e2a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000e2e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000e32:	ed96 0a00 	vldr	s0, [r6]
 8000e36:	f016 fd17 	bl	8017868 <tMBSineTri_sync>
 8000e3a:	9801      	ldr	r0, [sp, #4]
 8000e3c:	e7e2      	b.n	8000e04 <sineTriTick+0x34>
 8000e3e:	bf00      	nop
 8000e40:	20004a94 	.word	0x20004a94
 8000e44:	0801b780 	.word	0x0801b780
 8000e48:	20012d3c 	.word	0x20012d3c

08000e4c <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 8000e50:	4c14      	ldr	r4, [pc, #80]	; (8000ea4 <sawTick+0x58>)
{
 8000e52:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8000e54:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000e58:	b082      	sub	sp, #8
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 8000e5e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000e62:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8000e64:	9001      	str	r0, [sp, #4]
 8000e66:	f016 ffb1 	bl	8017dcc <tMBSaw_setFreq>
    if (sync)
 8000e6a:	9801      	ldr	r0, [sp, #4]
 8000e6c:	b967      	cbnz	r7, 8000e88 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 8000e6e:	f016 fd6f 	bl	8017950 <tMBSaw_tick>
 8000e72:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e76:	edd5 7a00 	vldr	s15, [r5]
 8000e7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e7e:	edc5 7a00 	vstr	s15, [r5]
}
 8000e82:	b002      	add	sp, #8
 8000e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <sawTick+0x5c>)
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <sawTick+0x60>)
 8000e8c:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000e90:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000e94:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000e98:	ed96 0a00 	vldr	s0, [r6]
 8000e9c:	f016 ffa6 	bl	8017dec <tMBSaw_sync>
 8000ea0:	9801      	ldr	r0, [sp, #4]
 8000ea2:	e7e4      	b.n	8000e6e <sawTick+0x22>
 8000ea4:	200049c0 	.word	0x200049c0
 8000ea8:	0801b780 	.word	0x0801b780
 8000eac:	20012d3c 	.word	0x20012d3c

08000eb0 <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb4:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000eb6:	4c1a      	ldr	r4, [pc, #104]	; (8000f20 <pulseTick+0x70>)
 8000eb8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000ebc:	4617      	mov	r7, r2
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000ec2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000ec6:	ed2d 8b02 	vpush	{d8}
 8000eca:	eeb0 8a60 	vmov.f32	s16, s1
 8000ece:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000ed0:	9001      	str	r0, [sp, #4]
 8000ed2:	f014 fb79 	bl	80155c8 <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 8000ed6:	9801      	ldr	r0, [sp, #4]
 8000ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8000edc:	f014 fb84 	bl	80155e8 <tMBPulse_setWidth>
    if (sync)
 8000ee0:	9801      	ldr	r0, [sp, #4]
 8000ee2:	b977      	cbnz	r7, 8000f02 <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 8000ee4:	f013 fe18 	bl	8014b18 <tMBPulse_tick>
 8000ee8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000eec:	edd5 7a00 	vldr	s15, [r5]
 8000ef0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000ef4:	edc5 7a00 	vstr	s15, [r5]
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	ecbd 8b02 	vpop	{d8}
 8000efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <pulseTick+0x74>)
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <pulseTick+0x78>)
 8000f06:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000f0a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000f0e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000f12:	ed96 0a00 	vldr	s0, [r6]
 8000f16:	f014 fb75 	bl	8015604 <tMBPulse_sync>
 8000f1a:	9801      	ldr	r0, [sp, #4]
 8000f1c:	e7e2      	b.n	8000ee4 <pulseTick+0x34>
 8000f1e:	bf00      	nop
 8000f20:	200049a4 	.word	0x200049a4
 8000f24:	0801b780 	.word	0x0801b780
 8000f28:	20012d3c 	.word	0x20012d3c

08000f2c <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <sineTick+0x2c>)
 8000f2e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 8000f32:	b510      	push	{r4, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8000f38:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000f3c:	9001      	str	r0, [sp, #4]
 8000f3e:	f013 fd87 	bl	8014a50 <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 8000f42:	9801      	ldr	r0, [sp, #4]
 8000f44:	f013 fd5e 	bl	8014a04 <tCycle_tick>
 8000f48:	edd4 7a00 	vldr	s15, [r4]
 8000f4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000f50:	ed84 0a00 	vstr	s0, [r4]
}
 8000f54:	b002      	add	sp, #8
 8000f56:	bd10      	pop	{r4, pc}
 8000f58:	20004a7c 	.word	0x20004a7c

08000f5c <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f60:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000f62:	4c1a      	ldr	r4, [pc, #104]	; (8000fcc <triTick+0x70>)
 8000f64:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000f68:	4617      	mov	r7, r2
 8000f6a:	4688      	mov	r8, r1
 8000f6c:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000f6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000f72:	ed2d 8b02 	vpush	{d8}
 8000f76:	eeb0 8a60 	vmov.f32	s16, s1
 8000f7a:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000f7c:	9001      	str	r0, [sp, #4]
 8000f7e:	f015 fb95 	bl	80166ac <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 8000f82:	9801      	ldr	r0, [sp, #4]
 8000f84:	eeb0 0a48 	vmov.f32	s0, s16
 8000f88:	f015 fba0 	bl	80166cc <tMBTriangle_setWidth>
    if (sync)
 8000f8c:	9801      	ldr	r0, [sp, #4]
 8000f8e:	b977      	cbnz	r7, 8000fae <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 8000f90:	f014 fbae 	bl	80156f0 <tMBTriangle_tick>
 8000f94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f98:	edd5 7a00 	vldr	s15, [r5]
 8000f9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000fa0:	edc5 7a00 	vstr	s15, [r5]
}
 8000fa4:	b002      	add	sp, #8
 8000fa6:	ecbd 8b02 	vpop	{d8}
 8000faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <triTick+0x74>)
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <triTick+0x78>)
 8000fb2:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000fb6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000fba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000fbe:	ed96 0a00 	vldr	s0, [r6]
 8000fc2:	f015 fb95 	bl	80166f0 <tMBTriangle_sync>
 8000fc6:	9801      	ldr	r0, [sp, #4]
 8000fc8:	e7e2      	b.n	8000f90 <triTick+0x34>
 8000fca:	bf00      	nop
 8000fcc:	20012ed0 	.word	0x20012ed0
 8000fd0:	0801b780 	.word	0x0801b780
 8000fd4:	20012d3c 	.word	0x20012d3c

08000fd8 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	4a72      	ldr	r2, [pc, #456]	; (80011a8 <filter_tick+0x1cc>)
{
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 8000fe4:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80011d4 <filter_tick+0x1f8>
{
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8000ff0:	7013      	strb	r3, [r2, #0]
{
 8000ff2:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 8000ff4:	4a6d      	ldr	r2, [pc, #436]	; (80011ac <filter_tick+0x1d0>)
 8000ff6:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 8000ff8:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 8000ffc:	f898 3000 	ldrb.w	r3, [r8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80bc 	beq.w	800117e <filter_tick+0x1a2>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001006:	4e6a      	ldr	r6, [pc, #424]	; (80011b0 <filter_tick+0x1d4>)
 8001008:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 800100c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001010:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001014:	eeb0 8a40 	vmov.f32	s16, s0
 8001018:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 800101c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	d87b      	bhi.n	800111e <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
 8001026:	2b01      	cmp	r3, #1
 8001028:	d93b      	bls.n	80010a2 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
 800102a:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 800102e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001032:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001036:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 800103a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001042:	bfcc      	ite	gt
 8001044:	2301      	movgt	r3, #1
 8001046:	2300      	movle	r3, #0
 8001048:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 800104c:	d929      	bls.n	80010a2 <filter_tick+0xc6>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <filter_tick+0x1d8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001050:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001054:	eddf 0a58 	vldr	s1, [pc, #352]	; 80011b8 <filter_tick+0x1dc>
 8001058:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800105c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80011bc <filter_tick+0x1e0>
 8001060:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80011c0 <filter_tick+0x1e4>
 8001064:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001068:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 800106c:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800106e:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001072:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001076:	edd3 6a00 	vldr	s13, [r3]
 800107a:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800107e:	eee8 7a07 	vfma.f32	s15, s16, s14
 8001082:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001086:	f013 f9db 	bl	8014440 <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 800108a:	1cab      	adds	r3, r5, #2
 800108c:	484e      	ldr	r0, [pc, #312]	; (80011c8 <filter_tick+0x1ec>)
 800108e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001092:	9001      	str	r0, [sp, #4]
 8001094:	f011 fd72 	bl	8012b7c <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001098:	9801      	ldr	r0, [sp, #4]
 800109a:	f011 fd73 	bl	8012b84 <tExpSmooth_tick>
 800109e:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 80010a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80010a6:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 80010aa:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80010ae:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 80010b2:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80010b6:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	dd07      	ble.n	80010d0 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 80010c0:	4b42      	ldr	r3, [pc, #264]	; (80011cc <filter_tick+0x1f0>)
 80010c2:	462a      	mov	r2, r5
 80010c4:	ed9d 0a04 	vldr	s0, [sp, #16]
 80010c8:	2100      	movs	r1, #0
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4620      	mov	r0, r4
 80010ce:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80010d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 80010d4:	ed94 0a01 	vldr	s0, [r4, #4]
 80010d8:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80010dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 80010e0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80010e4:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 80010e8:	f1b8 0f00 	cmp.w	r8, #0
 80010ec:	d009      	beq.n	8001102 <filter_tick+0x126>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <filter_tick+0x1f0>)
 80010f0:	462a      	mov	r2, r5
 80010f2:	ed9d 0a05 	vldr	s0, [sp, #20]
 80010f6:	2101      	movs	r1, #1
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	1d20      	adds	r0, r4, #4
 80010fc:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 80010fe:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <filter_tick+0x1d0>)
 8001104:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <filter_tick+0x1f4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1bdb      	subs	r3, r3, r7
 800110a:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 800110c:	edd4 7a00 	vldr	s15, [r4]
}
 8001110:	eea7 0a88 	vfma.f32	s0, s15, s16
 8001114:	b006      	add	sp, #24
 8001116:	ecbd 8b02 	vpop	{d8}
 800111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 800111e:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001122:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001126:	eddf 0a24 	vldr	s1, [pc, #144]	; 80011b8 <filter_tick+0x1dc>
 800112a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800112e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80011bc <filter_tick+0x1e0>
 8001132:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80011c0 <filter_tick+0x1e4>
 8001136:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800113a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001140:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001144:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001150:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001154:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001158:	f013 f972 	bl	8014440 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 800115c:	481a      	ldr	r0, [pc, #104]	; (80011c8 <filter_tick+0x1ec>)
 800115e:	00ab      	lsls	r3, r5, #2
 8001160:	4418      	add	r0, r3
 8001162:	9001      	str	r0, [sp, #4]
 8001164:	f011 fd0a 	bl	8012b7c <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001168:	9801      	ldr	r0, [sp, #4]
 800116a:	f011 fd0b 	bl	8012b84 <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 800116e:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001172:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 8001176:	2b01      	cmp	r3, #1
 8001178:	f63f af57 	bhi.w	800102a <filter_tick+0x4e>
 800117c:	e791      	b.n	80010a2 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <filter_tick+0x1d4>)
 8001180:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001184:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001188:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800118c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 8001190:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001194:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001198:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 800119c:	eea7 0a87 	vfma.f32	s0, s15, s14
 80011a0:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 80011a4:	e7ad      	b.n	8001102 <filter_tick+0x126>
 80011a6:	bf00      	nop
 80011a8:	20015169 	.word	0x20015169
 80011ac:	e0001000 	.word	0xe0001000
 80011b0:	20015b28 	.word	0x20015b28
 80011b4:	20016634 	.word	0x20016634
 80011b8:	420fb824 	.word	0x420fb824
 80011bc:	457ff000 	.word	0x457ff000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	20000334 	.word	0x20000334
 80011c8:	2000446c 	.word	0x2000446c
 80011cc:	2000448c 	.word	0x2000448c
 80011d0:	20012eac 	.word	0x20012eac
 80011d4:	20000004 	.word	0x20000004

080011d8 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 80011d8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <lowpassTick+0x3c>)
{
 80011de:	b530      	push	{r4, r5, lr}
 80011e0:	4605      	mov	r5, r0
 80011e2:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 80011e4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80011e8:	0094      	lsls	r4, r2, #2
 80011ea:	9001      	str	r0, [sp, #4]
 80011ec:	f011 fdc2 	bl	8012d74 <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 80011f0:	ed95 0a00 	vldr	s0, [r5]
 80011f4:	9801      	ldr	r0, [sp, #4]
 80011f6:	f011 fd87 	bl	8012d08 <tSVF_tick>
    *sample *= filterGain[v][string];
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 80011fc:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001200:	4422      	add	r2, r4
 8001202:	edd2 7a00 	vldr	s15, [r2]
 8001206:	ee27 0a80 	vmul.f32	s0, s15, s0
 800120a:	ed85 0a00 	vstr	s0, [r5]
}
 800120e:	b003      	add	sp, #12
 8001210:	bd30      	pop	{r4, r5, pc}
 8001212:	bf00      	nop
 8001214:	20004690 	.word	0x20004690
 8001218:	2000447c 	.word	0x2000447c

0800121c <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 800121c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <highpassTick+0x3c>)
{
 8001222:	b530      	push	{r4, r5, lr}
 8001224:	4605      	mov	r5, r0
 8001226:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001228:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800122c:	0094      	lsls	r4, r2, #2
 800122e:	9001      	str	r0, [sp, #4]
 8001230:	f011 fda0 	bl	8012d74 <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001234:	ed95 0a00 	vldr	s0, [r5]
 8001238:	9801      	ldr	r0, [sp, #4]
 800123a:	f011 fd65 	bl	8012d08 <tSVF_tick>
    *sample *= filterGain[v][string];
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001240:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001244:	4422      	add	r2, r4
 8001246:	edd2 7a00 	vldr	s15, [r2]
 800124a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800124e:	ed85 0a00 	vstr	s0, [r5]
}
 8001252:	b003      	add	sp, #12
 8001254:	bd30      	pop	{r4, r5, pc}
 8001256:	bf00      	nop
 8001258:	2000450c 	.word	0x2000450c
 800125c:	2000447c 	.word	0x2000447c

08001260 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001260:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <bandpassTick+0x3c>)
{
 8001266:	b530      	push	{r4, r5, lr}
 8001268:	4605      	mov	r5, r0
 800126a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 800126c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001270:	0094      	lsls	r4, r2, #2
 8001272:	9001      	str	r0, [sp, #4]
 8001274:	f011 fd7e 	bl	8012d74 <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001278:	ed95 0a00 	vldr	s0, [r5]
 800127c:	9801      	ldr	r0, [sp, #4]
 800127e:	f011 fd43 	bl	8012d08 <tSVF_tick>
    *sample *= filterGain[v][string];
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001284:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001288:	4422      	add	r2, r4
 800128a:	edd2 7a00 	vldr	s15, [r2]
 800128e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001292:	ed85 0a00 	vstr	s0, [r5]
}
 8001296:	b003      	add	sp, #12
 8001298:	bd30      	pop	{r4, r5, pc}
 800129a:	bf00      	nop
 800129c:	20000324 	.word	0x20000324
 80012a0:	2000447c 	.word	0x2000447c

080012a4 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 80012a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <diodeLowpassTick+0x3c>)
{
 80012aa:	b530      	push	{r4, r5, lr}
 80012ac:	4605      	mov	r5, r0
 80012ae:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 80012b0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80012b4:	0094      	lsls	r4, r2, #2
 80012b6:	9001      	str	r0, [sp, #4]
 80012b8:	f012 fe1e 	bl	8013ef8 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 80012bc:	ed95 0a00 	vldr	s0, [r5]
 80012c0:	9801      	ldr	r0, [sp, #4]
 80012c2:	f012 fc97 	bl	8013bf4 <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 80012c8:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80012cc:	4422      	add	r2, r4
 80012ce:	edd2 7a00 	vldr	s15, [r2]
 80012d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80012d6:	ed85 0a00 	vstr	s0, [r5]
}
 80012da:	b003      	add	sp, #12
 80012dc:	bd30      	pop	{r4, r5, pc}
 80012de:	bf00      	nop
 80012e0:	20004424 	.word	0x20004424
 80012e4:	2000447c 	.word	0x2000447c

080012e8 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <VZpeakTick+0x28>)
 80012ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80012ee:	b510      	push	{r4, lr}
 80012f0:	4604      	mov	r4, r0
 80012f2:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 80012f4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80012f8:	9001      	str	r0, [sp, #4]
 80012fa:	f011 ffc5 	bl	8013288 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 80012fe:	9801      	ldr	r0, [sp, #4]
 8001300:	ed94 0a00 	vldr	s0, [r4]
 8001304:	f011 fdba 	bl	8012e7c <tVZFilter_tickEfficient>
 8001308:	ed84 0a00 	vstr	s0, [r4]
}
 800130c:	b002      	add	sp, #8
 800130e:	bd10      	pop	{r4, pc}
 8001310:	2000030c 	.word	0x2000030c

08001314 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <VZlowshelfTick+0x28>)
 8001316:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800131a:	b510      	push	{r4, lr}
 800131c:	4604      	mov	r4, r0
 800131e:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001320:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001324:	9001      	str	r0, [sp, #4]
 8001326:	f011 ffaf 	bl	8013288 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 800132a:	9801      	ldr	r0, [sp, #4]
 800132c:	ed94 0a00 	vldr	s0, [r4]
 8001330:	f011 fda4 	bl	8012e7c <tVZFilter_tickEfficient>
 8001334:	ed84 0a00 	vstr	s0, [r4]
}
 8001338:	b002      	add	sp, #8
 800133a:	bd10      	pop	{r4, pc}
 800133c:	200002fc 	.word	0x200002fc

08001340 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <VZhighshelfTick+0x28>)
 8001342:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001346:	b510      	push	{r4, lr}
 8001348:	4604      	mov	r4, r0
 800134a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 800134c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001350:	9001      	str	r0, [sp, #4]
 8001352:	f011 ff99 	bl	8013288 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 8001356:	9801      	ldr	r0, [sp, #4]
 8001358:	ed94 0a00 	vldr	s0, [r4]
 800135c:	f011 fd8e 	bl	8012e7c <tVZFilter_tickEfficient>
 8001360:	ed84 0a00 	vstr	s0, [r4]
}
 8001364:	b002      	add	sp, #8
 8001366:	bd10      	pop	{r4, pc}
 8001368:	200002ec 	.word	0x200002ec

0800136c <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 800136c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <VZbandrejectTick+0x3c>)
{
 8001372:	b530      	push	{r4, r5, lr}
 8001374:	4605      	mov	r5, r0
 8001376:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001378:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800137c:	0094      	lsls	r4, r2, #2
 800137e:	9001      	str	r0, [sp, #4]
 8001380:	f011 ff82 	bl	8013288 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001384:	ed95 0a00 	vldr	s0, [r5]
 8001388:	9801      	ldr	r0, [sp, #4]
 800138a:	f011 fd77 	bl	8012e7c <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001390:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001394:	4422      	add	r2, r4
 8001396:	edd2 7a00 	vldr	s15, [r2]
 800139a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800139e:	ed85 0a00 	vstr	s0, [r5]
}
 80013a2:	b003      	add	sp, #12
 80013a4:	bd30      	pop	{r4, r5, pc}
 80013a6:	bf00      	nop
 80013a8:	200002dc 	.word	0x200002dc
 80013ac:	2000447c 	.word	0x2000447c

080013b0 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 80013b0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <LadderLowpassTick+0x3c>)
{
 80013b6:	b530      	push	{r4, r5, lr}
 80013b8:	4605      	mov	r5, r0
 80013ba:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 80013bc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80013c0:	0094      	lsls	r4, r2, #2
 80013c2:	9001      	str	r0, [sp, #4]
 80013c4:	f012 ff36 	bl	8014234 <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80013c8:	ed95 0a00 	vldr	s0, [r5]
 80013cc:	9801      	ldr	r0, [sp, #4]
 80013ce:	f012 fe0b 	bl	8013fe8 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80013d4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80013d8:	4422      	add	r2, r4
 80013da:	edd2 7a00 	vldr	s15, [r2]
 80013de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80013e2:	ed85 0a00 	vstr	s0, [r5]
}
 80013e6:	b003      	add	sp, #12
 80013e8:	bd30      	pop	{r4, r5, pc}
 80013ea:	bf00      	nop
 80013ec:	200002cc 	.word	0x200002cc
 80013f0:	2000447c 	.word	0x2000447c

080013f4 <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 80013f4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80013f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80013fc:	eef0 0a40 	vmov.f32	s1, s0
 8001400:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001402:	0045      	lsls	r5, r0, #1
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <setFreqMultPitch+0x4c>)
 8001406:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 800140a:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 800140c:	3020      	adds	r0, #32
 800140e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001412:	4408      	add	r0, r1
 8001414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001418:	ed90 7a02 	vldr	s14, [r0, #8]
 800141c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	dd01      	ble.n	800142a <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 8001426:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 800142a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001444 <setFreqMultPitch+0x50>
 800142e:	442c      	add	r4, r5
 8001430:	f018 fb5a 	bl	8019ae8 <powf>
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <setFreqMultPitch+0x54>)
 8001436:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800143a:	ed84 0a00 	vstr	s0, [r4]

}
 800143e:	bd38      	pop	{r3, r4, r5, pc}
 8001440:	20015b28 	.word	0x20015b28
 8001444:	3f879c7d 	.word	0x3f879c7d
 8001448:	200044ac 	.word	0x200044ac

0800144c <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 800144c:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <setFreqMultHarm+0x5c>)
 8001452:	0042      	lsls	r2, r0, #1
 8001454:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001458:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800145c:	3020      	adds	r0, #32
 800145e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001462:	4408      	add	r0, r1
 8001464:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001468:	ed90 7a02 	vldr	s14, [r0, #8]
 800146c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	dd01      	ble.n	800147a <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 8001476:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 800147a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 800147e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	db08      	blt.n	800149a <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 8001488:	ee30 0a27 	vadd.f32	s0, s0, s15
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <setFreqMultHarm+0x60>)
 800148e:	4411      	add	r1, r2
 8001490:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001494:	ed81 0a00 	vstr	s0, [r1]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 8001498:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 800149a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800149e:	eeb0 7ac0 	vabs.f32	s14, s0
 80014a2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80014a6:	e7f1      	b.n	800148c <setFreqMultHarm+0x40>
 80014a8:	20015b28 	.word	0x20015b28
 80014ac:	200044ac 	.word	0x200044ac

080014b0 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <lowpassSetQ+0x10>)
 80014b2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80014b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014ba:	f011 bc91 	b.w	8012de0 <tSVF_setQ>
 80014be:	bf00      	nop
 80014c0:	20004690 	.word	0x20004690

080014c4 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <highpassSetQ+0x10>)
 80014c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80014ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014ce:	f011 bc87 	b.w	8012de0 <tSVF_setQ>
 80014d2:	bf00      	nop
 80014d4:	2000450c 	.word	0x2000450c

080014d8 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <bandpassSetQ+0x10>)
 80014da:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80014de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014e2:	f011 bc7d 	b.w	8012de0 <tSVF_setQ>
 80014e6:	bf00      	nop
 80014e8:	20000324 	.word	0x20000324

080014ec <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <diodeLowpassSetQ+0x10>)
 80014ee:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80014f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014f6:	f012 bd1f 	b.w	8013f38 <tDiodeFilter_setQ>
 80014fa:	bf00      	nop
 80014fc:	20004424 	.word	0x20004424

08001500 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <VZpeakSetQ+0x10>)
 8001502:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001506:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800150a:	f012 b837 	b.w	801357c <tVZFilter_setResonance>
 800150e:	bf00      	nop
 8001510:	2000030c 	.word	0x2000030c

08001514 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <VZlowshelfSetQ+0x10>)
 8001516:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800151a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800151e:	f012 b82d 	b.w	801357c <tVZFilter_setResonance>
 8001522:	bf00      	nop
 8001524:	200002fc 	.word	0x200002fc

08001528 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <VZhighshelfSetQ+0x10>)
 800152a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800152e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001532:	f012 b823 	b.w	801357c <tVZFilter_setResonance>
 8001536:	bf00      	nop
 8001538:	200002ec 	.word	0x200002ec

0800153c <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <VZbandrejectSetQ+0x10>)
 800153e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001542:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001546:	f012 b819 	b.w	801357c <tVZFilter_setResonance>
 800154a:	bf00      	nop
 800154c:	200002dc 	.word	0x200002dc

08001550 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <LadderLowpassSetQ+0x10>)
 8001552:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001556:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800155a:	f012 be8f 	b.w	801427c <tLadderFilter_setQ>
 800155e:	bf00      	nop
 8001560:	200002cc 	.word	0x200002cc

08001564 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001564:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001568:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 800156c:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 800156e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001572:	4605      	mov	r5, r0
 8001574:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001576:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	f013 f8ab 	bl	80146d8 <fasterdbtoa>
 8001582:	4b03      	ldr	r3, [pc, #12]	; (8001590 <lowpassSetGain+0x2c>)
 8001584:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001588:	ed84 0a00 	vstr	s0, [r4]
}
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	bf00      	nop
 8001590:	2000447c 	.word	0x2000447c

08001594 <highpassSetGain>:
 8001594:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001598:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80015a2:	4605      	mov	r5, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	f013 f893 	bl	80146d8 <fasterdbtoa>
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <highpassSetGain+0x2c>)
 80015b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80015b8:	ed84 0a00 	vstr	s0, [r4]
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	2000447c 	.word	0x2000447c

080015c4 <bandpassSetGain>:
 80015c4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80015c8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80015cc:	b538      	push	{r3, r4, r5, lr}
 80015ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80015d2:	4605      	mov	r5, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	f013 f87b 	bl	80146d8 <fasterdbtoa>
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <bandpassSetGain+0x2c>)
 80015e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80015e8:	ed84 0a00 	vstr	s0, [r4]
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	2000447c 	.word	0x2000447c

080015f4 <diodeLowpassSetGain>:
 80015f4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80015f8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001602:	4605      	mov	r5, r0
 8001604:	460c      	mov	r4, r1
 8001606:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	f013 f863 	bl	80146d8 <fasterdbtoa>
 8001612:	4b03      	ldr	r3, [pc, #12]	; (8001620 <diodeLowpassSetGain+0x2c>)
 8001614:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001618:	ed84 0a00 	vstr	s0, [r4]
 800161c:	bd38      	pop	{r3, r4, r5, pc}
 800161e:	bf00      	nop
 8001620:	2000447c 	.word	0x2000447c

08001624 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001624:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001628:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001650 <VZpeakSetGain+0x2c>
{
 800162c:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800162e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001632:	4605      	mov	r5, r0
 8001634:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001636:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	f013 f84b 	bl	80146d8 <fasterdbtoa>
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <VZpeakSetGain+0x30>)
 8001644:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800164c:	f011 bf7a 	b.w	8013544 <tVZFilter_setGain>
 8001650:	42480000 	.word	0x42480000
 8001654:	2000030c 	.word	0x2000030c

08001658 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001658:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800165c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001684 <VZlowshelfSetGain+0x2c>
{
 8001660:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001662:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001666:	4605      	mov	r5, r0
 8001668:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800166a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	f013 f831 	bl	80146d8 <fasterdbtoa>
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <VZlowshelfSetGain+0x30>)
 8001678:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800167c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001680:	f011 bf60 	b.w	8013544 <tVZFilter_setGain>
 8001684:	42480000 	.word	0x42480000
 8001688:	200002fc 	.word	0x200002fc

0800168c <VZhighshelfSetGain>:
 800168c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001690:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016b8 <VZhighshelfSetGain+0x2c>
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	eee0 7a07 	vfma.f32	s15, s0, s14
 800169a:	4605      	mov	r5, r0
 800169c:	460c      	mov	r4, r1
 800169e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	f013 f817 	bl	80146d8 <fasterdbtoa>
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <VZhighshelfSetGain+0x30>)
 80016ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80016b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016b4:	f011 bf46 	b.w	8013544 <tVZFilter_setGain>
 80016b8:	42480000 	.word	0x42480000
 80016bc:	200002fc 	.word	0x200002fc

080016c0 <VZbandrejectSetGain>:
 80016c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80016c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80016ce:	4605      	mov	r5, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	f012 fffd 	bl	80146d8 <fasterdbtoa>
 80016de:	4b03      	ldr	r3, [pc, #12]	; (80016ec <VZbandrejectSetGain+0x2c>)
 80016e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80016e4:	ed84 0a00 	vstr	s0, [r4]
 80016e8:	bd38      	pop	{r3, r4, r5, pc}
 80016ea:	bf00      	nop
 80016ec:	2000447c 	.word	0x2000447c

080016f0 <LadderLowpassSetGain>:
 80016f0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80016f4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80016f8:	b538      	push	{r3, r4, r5, lr}
 80016fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80016fe:	4605      	mov	r5, r0
 8001700:	460c      	mov	r4, r1
 8001702:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	f012 ffe5 	bl	80146d8 <fasterdbtoa>
 800170e:	4b03      	ldr	r3, [pc, #12]	; (800171c <LadderLowpassSetGain+0x2c>)
 8001710:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001714:	ed84 0a00 	vstr	s0, [r4]
 8001718:	bd38      	pop	{r3, r4, r5, pc}
 800171a:	bf00      	nop
 800171c:	2000447c 	.word	0x2000447c

08001720 <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 8001720:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001738 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 8001724:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <setEnvelopeAttack+0x1c>)
 800172a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800172e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001732:	f011 b8b3 	b.w	801289c <tADSRT_setAttack>
 8001736:	bf00      	nop
 8001738:	3c23d70a 	.word	0x3c23d70a
 800173c:	2000444c 	.word	0x2000444c

08001740 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 8001740:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001758 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 8001744:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <setEnvelopeDecay+0x1c>)
 800174a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800174e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001752:	f011 b8b7 	b.w	80128c4 <tADSRT_setDecay>
 8001756:	bf00      	nop
 8001758:	3c23d70a 	.word	0x3c23d70a
 800175c:	2000444c 	.word	0x2000444c

08001760 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <setEnvelopeSustain+0x10>)
 8001762:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001766:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800176a:	f011 b8bf 	b.w	80128ec <tADSRT_setSustain>
 800176e:	bf00      	nop
 8001770:	2000444c 	.word	0x2000444c

08001774 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 8001774:	eddf 7a05 	vldr	s15, [pc, #20]	; 800178c <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 8001778:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <setEnvelopeRelease+0x1c>)
 800177e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001782:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001786:	f011 b8c7 	b.w	8012918 <tADSRT_setRelease>
 800178a:	bf00      	nop
 800178c:	3c23d70a 	.word	0x3c23d70a
 8001790:	2000444c 	.word	0x2000444c

08001794 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 8001794:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001798:	eddf 6a08 	vldr	s13, [pc, #32]	; 80017bc <setEnvelopeLeak+0x28>
 800179c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80017c0 <setEnvelopeLeak+0x2c>
 80017a0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <setEnvelopeLeak+0x30>)
 80017a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80017aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80017b2:	eeb0 0a47 	vmov.f32	s0, s14
 80017b6:	f011 b8c3 	b.w	8012940 <tADSRT_setLeakFactor>
 80017ba:	bf00      	nop
 80017bc:	3851b717 	.word	0x3851b717
 80017c0:	3f7ffcb9 	.word	0x3f7ffcb9
 80017c4:	2000444c 	.word	0x2000444c

080017c8 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <setAmp+0xc>)
 80017ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80017ce:	ed81 0a00 	vstr	s0, [r1]
}
 80017d2:	4770      	bx	lr
 80017d4:	2000031c 	.word	0x2000031c

080017d8 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <setMaster+0xc>)
 80017da:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80017de:	ed81 0a00 	vstr	s0, [r1]
}
 80017e2:	4770      	bx	lr
 80017e4:	2000449c 	.word	0x2000449c

080017e8 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 80017e8:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <setTranspose+0x8>)
 80017ea:	ed83 0a00 	vstr	s0, [r3]
}
 80017ee:	4770      	bx	lr
 80017f0:	20012ecc 	.word	0x20012ecc

080017f4 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 80017f4:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001804 <setPitchBendRange+0x10>
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <setPitchBendRange+0x14>)
 80017fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80017fe:	ed83 0a00 	vstr	s0, [r3]
}
 8001802:	4770      	bx	lr
 8001804:	39000200 	.word	0x39000200
 8001808:	20000000 	.word	0x20000000

0800180c <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800180c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001810:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001840 <setFinalLowpass+0x34>
{
 8001814:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001818:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001844 <setFinalLowpass+0x38>
 800181c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001848 <setFinalLowpass+0x3c>
 8001820:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8001824:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001826:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 800182a:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800182c:	f012 fe08 	bl	8014440 <LEAF_clip>
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <setFinalLowpass+0x40>)
 8001832:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800183a:	f011 ba9b 	b.w	8012d74 <tSVF_setFreqFast>
 800183e:	bf00      	nop
 8001840:	420fb824 	.word	0x420fb824
 8001844:	457ff000 	.word	0x457ff000
 8001848:	00000000 	.word	0x00000000
 800184c:	20004494 	.word	0x20004494

08001850 <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 8001850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 8001854:	4956      	ldr	r1, [pc, #344]	; (80019b0 <tickMappings+0x160>)
 8001856:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8001858:	4a56      	ldr	r2, [pc, #344]	; (80019b4 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <tickMappings+0x168>)
{
 800185c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001860:	700f      	strb	r7, [r1, #0]
{
 8001862:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 8001864:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 8001866:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8001868:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8086 	beq.w	800197c <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 8001870:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80019c8 <tickMappings+0x178>
 8001874:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80019cc <tickMappings+0x17c>
 8001878:	f898 2000 	ldrb.w	r2, [r8]
 800187c:	4c4f      	ldr	r4, [pc, #316]	; (80019bc <tickMappings+0x16c>)
 800187e:	2a00      	cmp	r2, #0
 8001880:	d07c      	beq.n	800197c <tickMappings+0x12c>
 8001882:	46a3      	mov	fp, r4
 8001884:	464e      	mov	r6, r9
 8001886:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001888:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800188c:	2800      	cmp	r0, #0
 800188e:	f000 8086 	beq.w	800199e <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001892:	f8db 101c 	ldr.w	r1, [fp, #28]
 8001896:	f8db 2000 	ldr.w	r2, [fp]
 800189a:	edd1 7a00 	vldr	s15, [r1]
 800189e:	ed92 7a00 	vldr	s14, [r2]
 80018a2:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 80018aa:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80018ac:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d16e      	bne.n	8001992 <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 80018b4:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 80018b8:	eddf 7a41 	vldr	s15, [pc, #260]	; 80019c0 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 80018bc:	2801      	cmp	r0, #1
 80018be:	d027      	beq.n	8001910 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80018c0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 80018c4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80018c8:	ed91 7a00 	vldr	s14, [r1]
 80018cc:	ed92 6a00 	vldr	s12, [r2]
 80018d0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80018d4:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80018d8:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80018da:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d15a      	bne.n	8001998 <tickMappings+0x148>
					unsmoothedValue += sum;
 80018e2:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d012      	beq.n	8001910 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80018ea:	f8db 1010 	ldr.w	r1, [fp, #16]
 80018ee:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80018f2:	ed91 7a00 	vldr	s14, [r1]
 80018f6:	ed92 6a00 	vldr	s12, [r2]
 80018fa:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80018fe:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001902:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001904:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8001908:	2800      	cmp	r0, #0
 800190a:	d04d      	beq.n	80019a8 <tickMappings+0x158>
					smoothedValue += sum;
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8001910:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001914:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 8001916:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 800191a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800191e:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001922:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001926:	f011 f929 	bl	8012b7c <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 800192a:	4630      	mov	r0, r6
 800192c:	f011 f92a 	bl	8012b84 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8001930:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8001934:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 8001938:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 800193a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800193e:	4790      	blx	r2
 8001940:	1caa      	adds	r2, r5, #2
 8001942:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 8001946:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 800194a:	4629      	mov	r1, r5
 800194c:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 8001950:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8001952:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8001956:	6942      	ldr	r2, [r0, #20]
 8001958:	7e00      	ldrb	r0, [r0, #24]
 800195a:	ed9c 0a00 	vldr	s0, [ip]
 800195e:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 8001960:	f898 2000 	ldrb.w	r2, [r8]
 8001964:	42aa      	cmp	r2, r5
 8001966:	dc8f      	bgt.n	8001888 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <tickMappings+0x168>)
 800196a:	3701      	adds	r7, #1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	429f      	cmp	r7, r3
 8001970:	da04      	bge.n	800197c <tickMappings+0x12c>
 8001972:	f109 0908 	add.w	r9, r9, #8
 8001976:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 8001978:	2a00      	cmp	r2, #0
 800197a:	d182      	bne.n	8001882 <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <tickMappings+0x164>)
 800197e:	9901      	ldr	r1, [sp, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <tickMappings+0x174>)
 8001984:	1a5b      	subs	r3, r3, r1
 8001986:	6013      	str	r3, [r2, #0]

}
 8001988:	b003      	add	sp, #12
 800198a:	ecbd 8b02 	vpop	{d8}
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 8001992:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 80019c0 <tickMappings+0x170>
 8001996:	e791      	b.n	80018bc <tickMappings+0x6c>
					smoothedValue += sum;
 8001998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199c:	e7a3      	b.n	80018e6 <tickMappings+0x96>
			float smoothedValue = 0.0f;
 800199e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80019c0 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 80019a2:	eeb0 8a67 	vmov.f32	s16, s15
 80019a6:	e7b3      	b.n	8001910 <tickMappings+0xc0>
					unsmoothedValue += sum;
 80019a8:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80019ac:	e7b0      	b.n	8001910 <tickMappings+0xc0>
 80019ae:	bf00      	nop
 80019b0:	20015169 	.word	0x20015169
 80019b4:	e0001000 	.word	0xe0001000
 80019b8:	20015b24 	.word	0x20015b24
 80019bc:	200151a8 	.word	0x200151a8
 80019c0:	00000000 	.word	0x00000000
 80019c4:	20012eb8 	.word	0x20012eb8
 80019c8:	20000066 	.word	0x20000066
 80019cc:	200046a0 	.word	0x200046a0

080019d0 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <lfoSawSquareTick+0x18>)
 80019d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80019da:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80019de:	f017 fb6d 	bl	80190bc <tSawSquareLFO_tick>
 80019e2:	ed84 0a00 	vstr	s0, [r4]
}
 80019e6:	bd10      	pop	{r4, pc}
 80019e8:	20004600 	.word	0x20004600

080019ec <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <lfoSineTriTick+0x18>)
 80019ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80019f2:	b510      	push	{r4, lr}
 80019f4:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 80019f6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80019fa:	f017 fca1 	bl	8019340 <tSineTriLFO_tick>
 80019fe:	ed84 0a00 	vstr	s0, [r4]
}
 8001a02:	bd10      	pop	{r4, pc}
 8001a04:	20004650 	.word	0x20004650

08001a08 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <lfoSineTick+0x18>)
 8001a0a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a0e:	b510      	push	{r4, lr}
 8001a10:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001a12:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a16:	f012 fff5 	bl	8014a04 <tCycle_tick>
 8001a1a:	ed84 0a00 	vstr	s0, [r4]
}
 8001a1e:	bd10      	pop	{r4, pc}
 8001a20:	20004630 	.word	0x20004630

08001a24 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <lfoTriTick+0x18>)
 8001a26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a2a:	b510      	push	{r4, lr}
 8001a2c:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8001a2e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a32:	f017 fc09 	bl	8019248 <tTriLFO_tick>
 8001a36:	ed84 0a00 	vstr	s0, [r4]
}
 8001a3a:	bd10      	pop	{r4, pc}
 8001a3c:	20004670 	.word	0x20004670

08001a40 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <lfoSawTick+0x24>)
 8001a42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8001a4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a4e:	f017 f9b7 	bl	8018dc0 <tIntPhasor_tick>
 8001a52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a56:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001a5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a5e:	edc4 7a00 	vstr	s15, [r4]
}
 8001a62:	bd10      	pop	{r4, pc}
 8001a64:	200045e0 	.word	0x200045e0

08001a68 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <lfoPulseTick+0x18>)
 8001a6a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001a72:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a76:	f017 fa71 	bl	8018f5c <tSquareLFO_tick>
 8001a7a:	ed84 0a00 	vstr	s0, [r4]
}
 8001a7e:	bd10      	pop	{r4, pc}
 8001a80:	200045c0 	.word	0x200045c0

08001a84 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <lfoSawSquareSetRate+0x10>)
 8001a86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a8e:	f017 bb57 	b.w	8019140 <tSawSquareLFO_setFreq>
 8001a92:	bf00      	nop
 8001a94:	20004600 	.word	0x20004600

08001a98 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <lfoSineTriSetRate+0x10>)
 8001a9a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001aa2:	f017 bc99 	b.w	80193d8 <tSineTriLFO_setFreq>
 8001aa6:	bf00      	nop
 8001aa8:	20004650 	.word	0x20004650

08001aac <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <lfoSineSetRate+0x10>)
 8001aae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ab2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ab6:	f012 bfcb 	b.w	8014a50 <tCycle_setFreq>
 8001aba:	bf00      	nop
 8001abc:	20004630 	.word	0x20004630

08001ac0 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <lfoTriSetRate+0x10>)
 8001ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001aca:	f017 bbd7 	b.w	801927c <tTriLFO_setFreq>
 8001ace:	bf00      	nop
 8001ad0:	20004670 	.word	0x20004670

08001ad4 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <lfoSawSetRate+0x10>)
 8001ad6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ada:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ade:	f017 b97f 	b.w	8018de0 <tIntPhasor_setFreq>
 8001ae2:	bf00      	nop
 8001ae4:	200045e0 	.word	0x200045e0

08001ae8 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <lfoPulseSetRate+0x10>)
 8001aea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001aee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001af2:	f017 ba57 	b.w	8018fa4 <tSquareLFO_setFreq>
 8001af6:	bf00      	nop
 8001af8:	200045c0 	.word	0x200045c0

08001afc <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <lfoSawSquareSetPhase+0x10>)
 8001afe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b06:	f017 bb3f 	b.w	8019188 <tSawSquareLFO_setPhase>
 8001b0a:	bf00      	nop
 8001b0c:	20004600 	.word	0x20004600

08001b10 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <lfoSineTriSetPhase+0x10>)
 8001b12:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b1a:	f017 bc75 	b.w	8019408 <tSineTriLFO_setPhase>
 8001b1e:	bf00      	nop
 8001b20:	20004650 	.word	0x20004650

08001b24 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <lfoSineSetPhase+0x10>)
 8001b26:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b2e:	f012 bf9b 	b.w	8014a68 <tCycle_setPhase>
 8001b32:	bf00      	nop
 8001b34:	20004630 	.word	0x20004630

08001b38 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <lfoTriSetPhase+0x10>)
 8001b3a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b42:	f017 bba7 	b.w	8019294 <tTriLFO_setPhase>
 8001b46:	bf00      	nop
 8001b48:	20004670 	.word	0x20004670

08001b4c <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <lfoSawSetPhase+0x10>)
 8001b4e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b56:	f017 b94f 	b.w	8018df8 <tIntPhasor_setPhase>
 8001b5a:	bf00      	nop
 8001b5c:	200045e0 	.word	0x200045e0

08001b60 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <lfoPulseSetPhase+0x10>)
 8001b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b6a:	f017 ba53 	b.w	8019014 <tSquareLFO_setPhase>
 8001b6e:	bf00      	nop
 8001b70:	200045c0 	.word	0x200045c0

08001b74 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <lfoSawSquareSetShape+0x10>)
 8001b76:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b7e:	f017 bb35 	b.w	80191ec <tSawSquareLFO_setShape>
 8001b82:	bf00      	nop
 8001b84:	20004600 	.word	0x20004600

08001b88 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <lfoSineTriSetShape+0x10>)
 8001b8a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b92:	f017 bc51 	b.w	8019438 <tSineTriLFO_setShape>
 8001b96:	bf00      	nop
 8001b98:	20004650 	.word	0x20004650

08001b9c <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <lfoTriSetShape>:
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <lfoSawSetShape>:
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <lfoPulseSetShape+0x10>)
 8001baa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001bb2:	f017 ba0f 	b.w	8018fd4 <tSquareLFO_setPulseWidth>
 8001bb6:	bf00      	nop
 8001bb8:	200045c0 	.word	0x200045c0

08001bbc <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001bbc:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4605      	mov	r5, r0
 8001bc4:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001bc6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001bca:	f012 fd85 	bl	80146d8 <fasterdbtoa>
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <clipperGainSet+0x24>)
 8001bd0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001bd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001bd8:	ed84 0a00 	vstr	s0, [r4]
}
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	20004864 	.word	0x20004864

08001be4 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001be4:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4605      	mov	r5, r0
 8001bec:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001bee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001bf2:	f012 fd71 	bl	80146d8 <fasterdbtoa>
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <wavefolderParam1+0x24>)
 8001bf8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001bfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c00:	ed84 0a00 	vstr	s0, [r4]
}
 8001c04:	bd38      	pop	{r3, r4, r5, pc}
 8001c06:	bf00      	nop
 8001c08:	20004864 	.word	0x20004864

08001c0c <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c10:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c18:	ee70 6a27 	vadd.f32	s13, s0, s15
 8001c1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 8001c20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8001c28:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c2c:	ed83 7a00 	vstr	s14, [r3]
}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20004520 	.word	0x20004520
 8001c38:	200048a4 	.word	0x200048a4

08001c3c <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8001c3c:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001c3e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8001c42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001c46:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001c4a:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 8001c4e:	0084      	lsls	r4, r0, #2
{
 8001c50:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001c54:	eee0 7a68 	vfms.f32	s15, s0, s17
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	f012 fd3c 	bl	80146d8 <fasterdbtoa>
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <tiltParam1+0x48>)
 8001c62:	4420      	add	r0, r4
 8001c64:	f011 fc6e 	bl	8013544 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001c68:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8001c6c:	eea8 0a28 	vfma.f32	s0, s16, s17
 8001c70:	f012 fd32 	bl	80146d8 <fasterdbtoa>
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <tiltParam1+0x4c>)
}
 8001c76:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001c7a:	4420      	add	r0, r4
}
 8001c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001c80:	f011 bc60 	b.w	8013544 <tVZFilter_setGain>
 8001c84:	20004a3c 	.word	0x20004a3c
 8001c88:	20004a5c 	.word	0x20004a5c

08001c8c <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001c8c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001c90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001cc4 <tiltParam2+0x38>
 8001c94:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001cc8 <tiltParam2+0x3c>
 8001c98:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001ccc <tiltParam2+0x40>
 8001c9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001ca0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001cd0 <tiltParam2+0x44>
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001caa:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001cae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001cb2:	f012 fbc5 	bl	8014440 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <tiltParam2+0x48>)
 8001cb8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001cc0:	f011 bae2 	b.w	8013288 <tVZFilter_setFreqFast>
 8001cc4:	429a0000 	.word	0x429a0000
 8001cc8:	420fb824 	.word	0x420fb824
 8001ccc:	457ff000 	.word	0x457ff000
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	2000035c 	.word	0x2000035c

08001cd8 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 8001cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <tiltParam3+0x20>)
 8001cde:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001ce2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ce6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8001cea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001cee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001cf2:	f011 bc43 	b.w	801357c <tVZFilter_setResonance>
 8001cf6:	bf00      	nop
 8001cf8:	2000035c 	.word	0x2000035c

08001cfc <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001cfc:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8001d00:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d28 <tiltParam4+0x2c>
{
 8001d04:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d06:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d0e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	f012 fcd7 	bl	80146c8 <fastdbtoa>
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <tiltParam4+0x30>)
 8001d1c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d24:	f011 bc0e 	b.w	8013544 <tVZFilter_setGain>
 8001d28:	42080000 	.word	0x42080000
 8001d2c:	2000035c 	.word	0x2000035c

08001d30 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 8001d30:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <compressorParam1+0x18>)
 8001d36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d42:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8001d46:	4770      	bx	lr
 8001d48:	20000380 	.word	0x20000380

08001d4c <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8001d4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <compressorParam2+0x30>)
 8001d52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d56:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001d5a:	eeb0 7a67 	vmov.f32	s14, s15
 8001d5e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001d62:	eea0 7a26 	vfma.f32	s14, s0, s13
 8001d66:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8001d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d6e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d76:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000380 	.word	0x20000380

08001d80 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 8001d80:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <compressorParam3+0x18>)
 8001d86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d8a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d92:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8001d96:	4770      	bx	lr
 8001d98:	20000380 	.word	0x20000380

08001d9c <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <compressorParam4+0x30>)
 8001d9e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 8001da2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001dd0 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001da6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001daa:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001dac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 8001db0:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001db4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001db8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001dbc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001dc0:	f012 faaa 	bl	8014318 <fasterexpf>
 8001dc4:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000380 	.word	0x20000380
 8001dd0:	3a83126f 	.word	0x3a83126f

08001dd4 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <compressorParam5+0x30>)
 8001dd6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 8001dda:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e08 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001dde:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001de2:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001de4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8001de8:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001dec:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001df0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001df4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001df8:	f012 fa8e 	bl	8014318 <fasterexpf>
 8001dfc:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	bf00      	nop
 8001e04:	20000380 	.word	0x20000380
 8001e08:	3a83126f 	.word	0x3a83126f

08001e0c <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8001e0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <offsetParam2+0x1c>)
 8001e12:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001e16:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001e22:	edc3 7a00 	vstr	s15, [r3]
}
 8001e26:	4770      	bx	lr
 8001e28:	20004884 	.word	0x20004884

08001e2c <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <param2Linear+0x10>)
 8001e2e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e36:	ed83 0a00 	vstr	s0, [r3]
}
 8001e3a:	4770      	bx	lr
 8001e3c:	20004884 	.word	0x20004884

08001e40 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <param3Linear+0x10>)
 8001e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e46:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e4a:	ed83 0a00 	vstr	s0, [r3]
}
 8001e4e:	4770      	bx	lr
 8001e50:	200048a4 	.word	0x200048a4

08001e54 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8001e54:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001e98 <param3Soft+0x44>
 8001e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e5c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001e9c <param3Soft+0x48>
 8001e60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001e64:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001ea0 <param3Soft+0x4c>
 8001e68:	eee0 7a26 	vfma.f32	s15, s0, s13
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <param3Soft+0x50>)
 8001e6e:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8001e74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001e78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001e7c:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 8001e80:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001e84:	eee5 6a86 	vfma.f32	s13, s11, s12
 8001e88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e90:	edc1 6a00 	vstr	s13, [r1]
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	3f7d70a4 	.word	0x3f7d70a4
 8001e9c:	3c23d70a 	.word	0x3c23d70a
 8001ea0:	3eaaaaaa 	.word	0x3eaaaaaa
 8001ea4:	200048a4 	.word	0x200048a4
 8001ea8:	20004a10 	.word	0x20004a10

08001eac <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001eac:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f0c <param3Hard+0x60>
 8001eb0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001f10 <param3Hard+0x64>
 8001eb4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f14 <param3Hard+0x68>
 8001eb8:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 8001ebc:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <param3Hard+0x6c>)
 8001ec0:	0045      	lsls	r5, r0, #1
 8001ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001ec6:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001ec8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ed0:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
 8001ed4:	f017 faea 	bl	80194ac <arm_sin_f32>
	if (tempDiv == 0.0f)
 8001ed8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d00a      	beq.n	8001ef8 <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <param3Hard+0x70>)
 8001ee8:	442c      	add	r4, r5
 8001eea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001eee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001ef2:	edc4 7a00 	vstr	s15, [r4]
}
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <param3Hard+0x70>)
 8001efa:	442c      	add	r4, r5
 8001efc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001f20 <param3Hard+0x74>
 8001f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001f04:	edc4 7a00 	vstr	s15, [r4]
}
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
 8001f0a:	bf00      	nop
 8001f0c:	3f7d70a4 	.word	0x3f7d70a4
 8001f10:	3c23d70a 	.word	0x3c23d70a
 8001f14:	3fc90fdb 	.word	0x3fc90fdb
 8001f18:	200048a4 	.word	0x200048a4
 8001f1c:	200049f0 	.word	0x200049f0
 8001f20:	4479ffff 	.word	0x4479ffff

08001f24 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <param4Linear+0x10>)
 8001f26:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001f2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001f2e:	ed83 0a00 	vstr	s0, [r3]
}
 8001f32:	4770      	bx	lr
 8001f34:	200048c4 	.word	0x200048c4

08001f38 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <param5Linear+0x10>)
 8001f3a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001f3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001f42:	ed83 0a00 	vstr	s0, [r3]
}
 8001f46:	4770      	bx	lr
 8001f48:	200048e4 	.word	0x200048e4

08001f4c <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001f4e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 8001f52:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001f70 <param3BC+0x24>
 8001f56:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <param3BC+0x28>)
 8001f5c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8001f60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001f64:	eeb0 0a67 	vmov.f32	s0, s15
 8001f68:	f010 bb74 	b.w	8012654 <tCrusher_setSamplingRatio>
 8001f6c:	2000005c 	.word	0x2000005c
 8001f70:	3c23d70a 	.word	0x3c23d70a
 8001f74:	2000033c 	.word	0x2000033c

08001f78 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <fxMixSet+0x10>)
 8001f7a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001f7e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001f82:	ed83 0a00 	vstr	s0, [r3]
}
 8001f86:	4770      	bx	lr
 8001f88:	200044cc 	.word	0x200044cc

08001f8c <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001f8c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001f90:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8001f94:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001f96:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001f9e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	f012 fb97 	bl	80146d8 <fasterdbtoa>
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <fxPostGainSet+0x2c>)
 8001fac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001fb0:	ed84 0a00 	vstr	s0, [r4]
}
 8001fb4:	bd38      	pop	{r3, r4, r5, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200044ec 	.word	0x200044ec

08001fbc <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001fbe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 8001fc2:	4d36      	ldr	r5, [pc, #216]	; (800209c <wavefolderTick+0xe0>)
 8001fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 8001fca:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001fce:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001fd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001fd6:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <wavefolderTick+0xe8>)
 8001fd8:	ed9f 4a33 	vldr	s8, [pc, #204]	; 80020a8 <wavefolderTick+0xec>
 8001fdc:	0084      	lsls	r4, r0, #2
 8001fde:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 8001fe2:	eddf 3a32 	vldr	s7, [pc, #200]	; 80020ac <wavefolderTick+0xf0>
{
 8001fe6:	ed2d 8b02 	vpush	{d8}
 8001fea:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001fee:	ed93 6a00 	vldr	s12, [r3]
 8001ff2:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8001ff6:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8001ffa:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002000:	ee30 0a06 	vadd.f32	s0, s0, s12
 8002004:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
 8002008:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <wavefolderTick+0xf8>)
 800200e:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002012:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
 8002016:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
 800201a:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <wavefolderTick+0xfc>)
 8002020:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8002024:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80020bc <wavefolderTick+0x100>
 8002028:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
 800202c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002030:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8002034:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8002038:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
 800203c:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002040:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002044:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 8002048:	ee36 3ac5 	vsub.f32	s6, s13, s10
 800204c:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002050:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 8002054:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002058:	ee25 5a23 	vmul.f32	s10, s10, s7
 800205c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8002060:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8002064:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002068:	eee7 7a05 	vfma.f32	s15, s14, s10
 800206c:	eeb0 8a67 	vmov.f32	s16, s15
 8002070:	f017 fa1c 	bl	80194ac <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002076:	4813      	ldr	r0, [pc, #76]	; (80020c4 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002078:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 800207c:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800207e:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 8002080:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002084:	eee8 7ac0 	vfms.f32	s15, s17, s0
 8002088:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800208c:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 8002090:	ecbd 8b02 	vpop	{d8}
 8002094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002098:	f010 bee0 	b.w	8012e5c <tHighpass_tick>
 800209c:	20012efc 	.word	0x20012efc
 80020a0:	20004884 	.word	0x20004884
 80020a4:	20004864 	.word	0x20004864
 80020a8:	3eaaaaaa 	.word	0x3eaaaaaa
 80020ac:	3fbffff8 	.word	0x3fbffff8
 80020b0:	200048a4 	.word	0x200048a4
 80020b4:	200048c4 	.word	0x200048c4
 80020b8:	200048e4 	.word	0x200048e4
 80020bc:	40c90fdb 	.word	0x40c90fdb
 80020c0:	20004520 	.word	0x20004520
 80020c4:	200003a0 	.word	0x200003a0

080020c8 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 80020c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80020cc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80020e4 <chorusParam1+0x1c>
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <chorusParam1+0x20>)
 80020d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80020da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80020de:	edc3 7a00 	vstr	s15, [r3]
}
 80020e2:	4770      	bx	lr
 80020e4:	45b4a000 	.word	0x45b4a000
 80020e8:	20004864 	.word	0x20004864

080020ec <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 80020ec:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002104 <chorusParam2+0x18>
 80020f0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <chorusParam2+0x1c>)
 80020f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80020fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80020fe:	ed83 0a00 	vstr	s0, [r3]
}
 8002102:	4770      	bx	lr
 8002104:	3dcccccd 	.word	0x3dcccccd
 8002108:	20004884 	.word	0x20004884

0800210c <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 800210c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800212c <chorusParam3+0x20>
 8002110:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002114:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002130 <chorusParam3+0x24>
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <chorusParam3+0x28>)
 800211a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800211e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	f012 bc93 	b.w	8014a50 <tCycle_setFreq>
 800212a:	bf00      	nop
 800212c:	3ecccccd 	.word	0x3ecccccd
 8002130:	3c23d70a 	.word	0x3c23d70a
 8002134:	200047a4 	.word	0x200047a4

08002138 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 8002138:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002158 <chorusParam4+0x20>
 800213c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002140:	eddf 7a06 	vldr	s15, [pc, #24]	; 800215c <chorusParam4+0x24>
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <chorusParam4+0x28>)
 8002146:	eee0 7a07 	vfma.f32	s15, s0, s14
 800214a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	f012 bc7d 	b.w	8014a50 <tCycle_setFreq>
 8002156:	bf00      	nop
 8002158:	3ee38e37 	.word	0x3ee38e37
 800215c:	3c343958 	.word	0x3c343958
 8002160:	200047c4 	.word	0x200047c4

08002164 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 800216a:	4f28      	ldr	r7, [pc, #160]	; (800220c <chorusTick+0xa8>)
 800216c:	4e28      	ldr	r6, [pc, #160]	; (8002210 <chorusTick+0xac>)
 800216e:	4829      	ldr	r0, [pc, #164]	; (8002214 <chorusTick+0xb0>)
 8002170:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8002174:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 8002178:	4d27      	ldr	r5, [pc, #156]	; (8002218 <chorusTick+0xb4>)
 800217a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800217e:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8002182:	008c      	lsls	r4, r1, #2
{
 8002184:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 8002188:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800218c:	ed97 9a00 	vldr	s18, [r7]
{
 8002190:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 8002194:	edd6 9a00 	vldr	s19, [r6]
 8002198:	f012 fc34 	bl	8014a04 <tCycle_tick>
 800219c:	4628      	mov	r0, r5
 800219e:	eef0 7a48 	vmov.f32	s15, s16
 80021a2:	eee9 7a80 	vfma.f32	s15, s19, s0
 80021a6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800221c <chorusTick+0xb8>
 80021aa:	ee29 0a00 	vmul.f32	s0, s18, s0
 80021ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80021b2:	f010 f89d 	bl	80122f0 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
 80021b6:	481a      	ldr	r0, [pc, #104]	; (8002220 <chorusTick+0xbc>)
 80021b8:	491a      	ldr	r1, [pc, #104]	; (8002224 <chorusTick+0xc0>)
 80021ba:	edd6 9a00 	vldr	s19, [r6]
 80021be:	4420      	add	r0, r4
 80021c0:	ed97 9a00 	vldr	s18, [r7]
 80021c4:	440c      	add	r4, r1
 80021c6:	f012 fc1d 	bl	8014a04 <tCycle_tick>
 80021ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80021ce:	eea9 8ac0 	vfms.f32	s16, s19, s0
 80021d2:	4620      	mov	r0, r4
 80021d4:	ee29 0a27 	vmul.f32	s0, s18, s15
 80021d8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80021dc:	f010 f888 	bl	80122f0 <tLinearDelay_setDelay>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
 80021e0:	eeb0 0a68 	vmov.f32	s0, s17
 80021e4:	4628      	mov	r0, r5
 80021e6:	f010 f84b 	bl	8012280 <tLinearDelay_tick>
 80021ea:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
 80021ee:	4620      	mov	r0, r4
 80021f0:	eeb0 0a68 	vmov.f32	s0, s17
 80021f4:	f010 f844 	bl	8012280 <tLinearDelay_tick>
    //temp = tHighpass_tick(&dcBlock1[v], temp);
    return -temp;
 80021f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80021fc:	ee38 0a00 	vadd.f32	s0, s16, s0
}
 8002200:	ee98 0aa7 	vfnms.f32	s0, s17, s15
 8002204:	ecbd 8b04 	vpop	{d8-d9}
 8002208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220a:	bf00      	nop
 800220c:	20004864 	.word	0x20004864
 8002210:	20004884 	.word	0x20004884
 8002214:	200047a4 	.word	0x200047a4
 8002218:	200043e4 	.word	0x200043e4
 800221c:	3f34fdf4 	.word	0x3f34fdf4
 8002220:	200047c4 	.word	0x200047c4
 8002224:	20004404 	.word	0x20004404

08002228 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002228:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <shaperTick+0x40>)
    sample = sample * param1[v][string];
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002230:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 8002234:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8002238:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 800223a:	edd2 7a00 	vldr	s15, [r2]
 800223e:	008c      	lsls	r4, r1, #2
 8002240:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <shaperTick+0x48>)
 800224a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800224e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002252:	edd1 0a00 	vldr	s1, [r1]
 8002256:	f012 f88f 	bl	8014378 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <shaperTick+0x4c>)
 800225c:	4420      	add	r0, r4
    return temp;
}
 800225e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002262:	f010 bdfb 	b.w	8012e5c <tHighpass_tick>
 8002266:	bf00      	nop
 8002268:	20004884 	.word	0x20004884
 800226c:	20004864 	.word	0x20004864
 8002270:	200048a4 	.word	0x200048a4
 8002274:	200003a0 	.word	0x200003a0

08002278 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop

0800227c <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 800227c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <tiltFilterTick+0x28>)
{
 8002282:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 8002284:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002288:	008c      	lsls	r4, r1, #2
 800228a:	f010 fdf7 	bl	8012e7c <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <tiltFilterTick+0x2c>)
 8002290:	4420      	add	r0, r4
 8002292:	f010 fdf3 	bl	8012e7c <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <tiltFilterTick+0x30>)
 8002298:	4420      	add	r0, r4
    return sample;
}
 800229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 800229e:	f010 bded 	b.w	8012e7c <tVZFilter_tickEfficient>
 80022a2:	bf00      	nop
 80022a4:	20004a3c 	.word	0x20004a3c
 80022a8:	20004a5c 	.word	0x20004a5c
 80022ac:	2000035c 	.word	0x2000035c

080022b0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 80022b0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <tanhTick+0x48>)
 80022b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 80022ba:	4810      	ldr	r0, [pc, #64]	; (80022fc <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 80022bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 80022c0:	b510      	push	{r4, lr}
 80022c2:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
 80022c6:	008c      	lsls	r4, r1, #2
 80022c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80022cc:	eea6 0a87 	vfma.f32	s0, s13, s14
 80022d0:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
 80022d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80022d8:	f017 fd92 	bl	8019e00 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <tanhTick+0x50>)
 80022de:	4420      	add	r0, r4
 80022e0:	f010 fdbc 	bl	8012e5c <tHighpass_tick>
    temp *= param4[v][string];
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <tanhTick+0x54>)
 80022e6:	4423      	add	r3, r4
 80022e8:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 80022ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 80022f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80022f4:	f017 bd84 	b.w	8019e00 <tanhf>
 80022f8:	20004884 	.word	0x20004884
 80022fc:	20004864 	.word	0x20004864
 8002300:	200003a0 	.word	0x200003a0
 8002304:	200048c4 	.word	0x200048c4

08002308 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002308:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <softClipTick+0x6c>)
    float shape = param3[v][string];
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <softClipTick+0x70>)
    sample = sample + param2[v][string];
 8002310:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002314:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002318:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800237c <softClipTick+0x74>
    float shape = param3[v][string];
 800231c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002320:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002324:	4816      	ldr	r0, [pc, #88]	; (8002380 <softClipTick+0x78>)
{
 8002326:	b410      	push	{r4}
    sample = sample * param1[v][string];
 8002328:	4c16      	ldr	r4, [pc, #88]	; (8002384 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800232a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 800232e:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 8002332:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 8002336:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <softClipTick+0x80>)
    sample = sample + param2[v][string];
 800233c:	ed94 5a00 	vldr	s10, [r4]
 8002340:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 8002344:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 8002348:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 800234c:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 8002350:	ed93 0a00 	vldr	s0, [r3]
 8002354:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 8002358:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 800235c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002364:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800236c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002370:	f010 bd74 	b.w	8012e5c <tHighpass_tick>
 8002374:	20004884 	.word	0x20004884
 8002378:	200048a4 	.word	0x200048a4
 800237c:	3eaaaaaa 	.word	0x3eaaaaaa
 8002380:	200003a0 	.word	0x200003a0
 8002384:	20004864 	.word	0x20004864
 8002388:	20004a10 	.word	0x20004a10

0800238c <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 800238c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002390:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <hardClipTick+0x74>)
 8002394:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 8002398:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 800239c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 80023a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 80023a6:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 80023aa:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
 80023ac:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80023b0:	4e14      	ldr	r6, [pc, #80]	; (8002404 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 80023b2:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80023b6:	4d14      	ldr	r5, [pc, #80]	; (8002408 <hardClipTick+0x7c>)
 80023b8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80023bc:	4425      	add	r5, r4
 80023be:	ed96 7a00 	vldr	s14, [r6]
 80023c2:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 80023c6:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80023ca:	ee27 0a87 	vmul.f32	s0, s15, s14
 80023ce:	f017 f86d 	bl	80194ac <arm_sin_f32>
 80023d2:	ed96 7a00 	vldr	s14, [r6]
 80023d6:	edd5 7a00 	vldr	s15, [r5]
 80023da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80023e2:	f017 f863 	bl	80194ac <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 80023e6:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80023ea:	4808      	ldr	r0, [pc, #32]	; (800240c <hardClipTick+0x80>)
 80023ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023f0:	4420      	add	r0, r4
    return sample;
}
 80023f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80023f6:	f010 bd31 	b.w	8012e5c <tHighpass_tick>
 80023fa:	bf00      	nop
 80023fc:	20004864 	.word	0x20004864
 8002400:	20004884 	.word	0x20004884
 8002404:	200048a4 	.word	0x200048a4
 8002408:	200049f0 	.word	0x200049f0
 800240c:	200003a0 	.word	0x200003a0

08002410 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 8002410:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <satTick+0x64>)
    sample = sample * param1[v][string];
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002418:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800241c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002420:	4816      	ldr	r0, [pc, #88]	; (800247c <satTick+0x6c>)
    sample = sample * param1[v][string];
 8002422:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002426:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 800242a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 800242c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 8002430:	008c      	lsls	r4, r1, #2
 8002432:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002436:	eeb0 6a47 	vmov.f32	s12, s14
 800243a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800243e:	eea7 6a80 	vfma.f32	s12, s15, s0
 8002442:	eea7 7a80 	vfma.f32	s14, s15, s0
 8002446:	eeb0 6ac6 	vabs.f32	s12, s12
 800244a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800244e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002452:	ee36 6b05 	vadd.f64	d6, d6, d5
 8002456:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800245a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800245e:	f010 fcfd 	bl	8012e5c <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <satTick+0x70>)
 8002464:	4420      	add	r0, r4
 8002466:	f010 fcf9 	bl	8012e5c <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 800246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 800246e:	f011 bffb 	b.w	8014468 <LEAF_tanh>
 8002472:	bf00      	nop
 8002474:	20004884 	.word	0x20004884
 8002478:	20004864 	.word	0x20004864
 800247c:	200003a0 	.word	0x200003a0
 8002480:	200003c0 	.word	0x200003c0

08002484 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002484:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <bcTick+0x20>)
    sample = sample * param1[v][string];
 800248c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 8002490:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 8002494:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 8002498:	ee20 0a27 	vmul.f32	s0, s0, s15
 800249c:	f010 b89a 	b.w	80125d4 <tCrusher_tick>
 80024a0:	20004864 	.word	0x20004864
 80024a4:	2000033c 	.word	0x2000033c

080024a8 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <compressorTick+0x10>)
 80024aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024b2:	f010 b927 	b.w	8012704 <tCompressor_tick>
 80024b6:	bf00      	nop
 80024b8:	20000380 	.word	0x20000380

080024bc <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <FXlowpassTick+0x10>)
 80024be:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024c6:	f010 bc1f 	b.w	8012d08 <tSVF_tick>
 80024ca:	bf00      	nop
 80024cc:	200002ac 	.word	0x200002ac

080024d0 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <FXhighpassTick+0x10>)
 80024d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024da:	f010 bc15 	b.w	8012d08 <tSVF_tick>
 80024de:	bf00      	nop
 80024e0:	2000028c 	.word	0x2000028c

080024e4 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <FXbandpassTick+0x10>)
 80024e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024ee:	f010 bc0b 	b.w	8012d08 <tSVF_tick>
 80024f2:	bf00      	nop
 80024f4:	2000024c 	.word	0x2000024c

080024f8 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <FXdiodeLowpassTick+0x10>)
 80024fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002502:	f011 b9f5 	b.w	80138f0 <tDiodeFilter_tick>
 8002506:	bf00      	nop
 8002508:	2000026c 	.word	0x2000026c

0800250c <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <FXVZpeakTick+0x10>)
 800250e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002512:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002516:	f010 bcb1 	b.w	8012e7c <tVZFilter_tickEfficient>
 800251a:	bf00      	nop
 800251c:	2000022c 	.word	0x2000022c

08002520 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <FXVZlowshelfTick+0x10>)
 8002522:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800252a:	f010 bca7 	b.w	8012e7c <tVZFilter_tickEfficient>
 800252e:	bf00      	nop
 8002530:	2000020c 	.word	0x2000020c

08002534 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <FXVZhighshelfTick+0x10>)
 8002536:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800253a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800253e:	f010 bc9d 	b.w	8012e7c <tVZFilter_tickEfficient>
 8002542:	bf00      	nop
 8002544:	200001ec 	.word	0x200001ec

08002548 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <FXVZbandrejectTick+0x10>)
 800254a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800254e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002552:	f010 bc93 	b.w	8012e7c <tVZFilter_tickEfficient>
 8002556:	bf00      	nop
 8002558:	200001cc 	.word	0x200001cc

0800255c <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <FXLadderLowpassTick+0x10>)
 800255e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002562:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002566:	f011 bd3f 	b.w	8013fe8 <tLadderFilter_tick>
 800256a:	bf00      	nop
 800256c:	200001ac 	.word	0x200001ac

08002570 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002570:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002574:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025a8 <FXLowpassParam1+0x38>
 8002578:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80025ac <FXLowpassParam1+0x3c>
 800257c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80025b0 <FXLowpassParam1+0x40>
 8002580:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002584:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80025b4 <FXLowpassParam1+0x44>
{
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4605      	mov	r5, r0
 800258c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800258e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002592:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002596:	f011 ff53 	bl	8014440 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 800259a:	4807      	ldr	r0, [pc, #28]	; (80025b8 <FXLowpassParam1+0x48>)
 800259c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80025a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80025a4:	f010 bbe6 	b.w	8012d74 <tSVF_setFreqFast>
 80025a8:	429a0000 	.word	0x429a0000
 80025ac:	420fb824 	.word	0x420fb824
 80025b0:	457ff000 	.word	0x457ff000
 80025b4:	00000000 	.word	0x00000000
 80025b8:	200002ac 	.word	0x200002ac

080025bc <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025bc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80025c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025f4 <FXHighpassParam1+0x38>
 80025c4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80025f8 <FXHighpassParam1+0x3c>
 80025c8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80025fc <FXHighpassParam1+0x40>
 80025cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80025d0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002600 <FXHighpassParam1+0x44>
{
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025da:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 80025de:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025e2:	f011 ff2d 	bl	8014440 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 80025e6:	4807      	ldr	r0, [pc, #28]	; (8002604 <FXHighpassParam1+0x48>)
 80025e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80025ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 80025f0:	f010 bbc0 	b.w	8012d74 <tSVF_setFreqFast>
 80025f4:	429a0000 	.word	0x429a0000
 80025f8:	420fb824 	.word	0x420fb824
 80025fc:	457ff000 	.word	0x457ff000
 8002600:	00000000 	.word	0x00000000
 8002604:	2000028c 	.word	0x2000028c

08002608 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002608:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800260c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002640 <FXBandpassParam1+0x38>
 8002610:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002644 <FXBandpassParam1+0x3c>
 8002614:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002648 <FXBandpassParam1+0x40>
 8002618:	eee0 7a07 	vfma.f32	s15, s0, s14
 800261c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800264c <FXBandpassParam1+0x44>
{
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4605      	mov	r5, r0
 8002624:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002626:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800262a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800262e:	f011 ff07 	bl	8014440 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8002632:	4807      	ldr	r0, [pc, #28]	; (8002650 <FXBandpassParam1+0x48>)
 8002634:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800263c:	f010 bb9a 	b.w	8012d74 <tSVF_setFreqFast>
 8002640:	429a0000 	.word	0x429a0000
 8002644:	420fb824 	.word	0x420fb824
 8002648:	457ff000 	.word	0x457ff000
 800264c:	00000000 	.word	0x00000000
 8002650:	2000024c 	.word	0x2000024c

08002654 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002654:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002658:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800268c <FXDiodeParam1+0x38>
 800265c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002690 <FXDiodeParam1+0x3c>
 8002660:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002694 <FXDiodeParam1+0x40>
 8002664:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002668:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002698 <FXDiodeParam1+0x44>
{
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4605      	mov	r5, r0
 8002670:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002672:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002676:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800267a:	f011 fee1 	bl	8014440 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <FXDiodeParam1+0x48>)
 8002680:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002688:	f011 bc36 	b.w	8013ef8 <tDiodeFilter_setFreqFast>
 800268c:	429a0000 	.word	0x429a0000
 8002690:	420fb824 	.word	0x420fb824
 8002694:	457ff000 	.word	0x457ff000
 8002698:	00000000 	.word	0x00000000
 800269c:	2000026c 	.word	0x2000026c

080026a0 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026a0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026d8 <FXPeakParam1+0x38>
 80026a8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80026dc <FXPeakParam1+0x3c>
 80026ac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80026e0 <FXPeakParam1+0x40>
 80026b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80026b4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80026e4 <FXPeakParam1+0x44>
{
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4605      	mov	r5, r0
 80026bc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026be:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80026c2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026c6:	f011 febb 	bl	8014440 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80026ca:	4807      	ldr	r0, [pc, #28]	; (80026e8 <FXPeakParam1+0x48>)
 80026cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80026d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80026d4:	f010 bdd8 	b.w	8013288 <tVZFilter_setFreqFast>
 80026d8:	429a0000 	.word	0x429a0000
 80026dc:	420fb824 	.word	0x420fb824
 80026e0:	457ff000 	.word	0x457ff000
 80026e4:	00000000 	.word	0x00000000
 80026e8:	2000022c 	.word	0x2000022c

080026ec <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026ec:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002724 <FXLowShelfParam1+0x38>
 80026f4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002728 <FXLowShelfParam1+0x3c>
 80026f8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800272c <FXLowShelfParam1+0x40>
 80026fc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002700:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002730 <FXLowShelfParam1+0x44>
{
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4605      	mov	r5, r0
 8002708:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800270a:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800270e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002712:	f011 fe95 	bl	8014440 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <FXLowShelfParam1+0x48>)
 8002718:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800271c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002720:	f010 bdb2 	b.w	8013288 <tVZFilter_setFreqFast>
 8002724:	429a0000 	.word	0x429a0000
 8002728:	420fb824 	.word	0x420fb824
 800272c:	457ff000 	.word	0x457ff000
 8002730:	00000000 	.word	0x00000000
 8002734:	2000020c 	.word	0x2000020c

08002738 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002738:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800273c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002770 <FXHighShelfParam1+0x38>
 8002740:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002774 <FXHighShelfParam1+0x3c>
 8002744:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002778 <FXHighShelfParam1+0x40>
 8002748:	eee0 7a07 	vfma.f32	s15, s0, s14
 800274c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800277c <FXHighShelfParam1+0x44>
{
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	4605      	mov	r5, r0
 8002754:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002756:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 800275a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800275e:	f011 fe6f 	bl	8014440 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 8002762:	4807      	ldr	r0, [pc, #28]	; (8002780 <FXHighShelfParam1+0x48>)
 8002764:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 800276c:	f010 bd8c 	b.w	8013288 <tVZFilter_setFreqFast>
 8002770:	429a0000 	.word	0x429a0000
 8002774:	420fb824 	.word	0x420fb824
 8002778:	457ff000 	.word	0x457ff000
 800277c:	00000000 	.word	0x00000000
 8002780:	200001ec 	.word	0x200001ec

08002784 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002784:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002788:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80027bc <FXNotchParam1+0x38>
 800278c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80027c0 <FXNotchParam1+0x3c>
 8002790:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80027c4 <FXNotchParam1+0x40>
 8002794:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002798:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80027c8 <FXNotchParam1+0x44>
{
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	4605      	mov	r5, r0
 80027a0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027a2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80027a6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027aa:	f011 fe49 	bl	8014440 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80027ae:	4807      	ldr	r0, [pc, #28]	; (80027cc <FXNotchParam1+0x48>)
 80027b0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80027b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80027b8:	f010 bd66 	b.w	8013288 <tVZFilter_setFreqFast>
 80027bc:	429a0000 	.word	0x429a0000
 80027c0:	420fb824 	.word	0x420fb824
 80027c4:	457ff000 	.word	0x457ff000
 80027c8:	00000000 	.word	0x00000000
 80027cc:	200001cc 	.word	0x200001cc

080027d0 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027d0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80027d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002808 <FXLadderParam1+0x38>
 80027d8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800280c <FXLadderParam1+0x3c>
 80027dc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002810 <FXLadderParam1+0x40>
 80027e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80027e4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002814 <FXLadderParam1+0x44>
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4605      	mov	r5, r0
 80027ec:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027ee:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 80027f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027f6:	f011 fe23 	bl	8014440 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 80027fa:	4807      	ldr	r0, [pc, #28]	; (8002818 <FXLadderParam1+0x48>)
 80027fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8002804:	f011 bd16 	b.w	8014234 <tLadderFilter_setFreqFast>
 8002808:	429a0000 	.word	0x429a0000
 800280c:	420fb824 	.word	0x420fb824
 8002810:	457ff000 	.word	0x457ff000
 8002814:	00000000 	.word	0x00000000
 8002818:	200001ac 	.word	0x200001ac

0800281c <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800281c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002820:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002848 <FXPeakParam2+0x2c>
{
 8002824:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002826:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800282a:	4605      	mov	r5, r0
 800282c:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800282e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	f011 ff4f 	bl	80146d8 <fasterdbtoa>
 800283a:	4804      	ldr	r0, [pc, #16]	; (800284c <FXPeakParam2+0x30>)
 800283c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002844:	f010 be7e 	b.w	8013544 <tVZFilter_setGain>
 8002848:	42480000 	.word	0x42480000
 800284c:	2000022c 	.word	0x2000022c

08002850 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002850:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002854:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800287c <FXLowShelfParam2+0x2c>
{
 8002858:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800285a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800285e:	4605      	mov	r5, r0
 8002860:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002862:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	f011 ff35 	bl	80146d8 <fasterdbtoa>
 800286e:	4804      	ldr	r0, [pc, #16]	; (8002880 <FXLowShelfParam2+0x30>)
 8002870:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002878:	f010 be64 	b.w	8013544 <tVZFilter_setGain>
 800287c:	42480000 	.word	0x42480000
 8002880:	2000020c 	.word	0x2000020c

08002884 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002884:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002888:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028b0 <FXHighShelfParam2+0x2c>
{
 800288c:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800288e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002892:	4605      	mov	r5, r0
 8002894:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002896:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	f011 ff1b 	bl	80146d8 <fasterdbtoa>
 80028a2:	4804      	ldr	r0, [pc, #16]	; (80028b4 <FXHighShelfParam2+0x30>)
 80028a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80028a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028ac:	f010 be4a 	b.w	8013544 <tVZFilter_setGain>
 80028b0:	42480000 	.word	0x42480000
 80028b4:	200001ec 	.word	0x200001ec

080028b8 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028b8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80028bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028e4 <FXNotchParam2+0x2c>
{
 80028c0:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028c2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80028c6:	4605      	mov	r5, r0
 80028c8:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028ca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80028ce:	eeb0 0a67 	vmov.f32	s0, s15
 80028d2:	f011 ff01 	bl	80146d8 <fasterdbtoa>
 80028d6:	4804      	ldr	r0, [pc, #16]	; (80028e8 <FXNotchParam2+0x30>)
 80028d8:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 80028dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028e0:	f010 be30 	b.w	8013544 <tVZFilter_setGain>
 80028e4:	42480000 	.word	0x42480000
 80028e8:	200001cc 	.word	0x200001cc

080028ec <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <FXLowpassParam3+0x10>)
 80028ee:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80028f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80028f6:	f010 ba73 	b.w	8012de0 <tSVF_setQ>
 80028fa:	bf00      	nop
 80028fc:	200002ac 	.word	0x200002ac

08002900 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <FXHighpassParam3+0x10>)
 8002902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800290a:	f010 ba69 	b.w	8012de0 <tSVF_setQ>
 800290e:	bf00      	nop
 8002910:	2000028c 	.word	0x2000028c

08002914 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <FXBandpassParam3+0x10>)
 8002916:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800291a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800291e:	f010 ba5f 	b.w	8012de0 <tSVF_setQ>
 8002922:	bf00      	nop
 8002924:	2000024c 	.word	0x2000024c

08002928 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <FXDiodeParam3+0x10>)
 800292a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800292e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002932:	f011 bb01 	b.w	8013f38 <tDiodeFilter_setQ>
 8002936:	bf00      	nop
 8002938:	2000026c 	.word	0x2000026c

0800293c <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <FXPeakParam3+0x10>)
 800293e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002942:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002946:	f010 be19 	b.w	801357c <tVZFilter_setResonance>
 800294a:	bf00      	nop
 800294c:	2000022c 	.word	0x2000022c

08002950 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <FXLowShelfParam3+0x10>)
 8002952:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002956:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800295a:	f010 be0f 	b.w	801357c <tVZFilter_setResonance>
 800295e:	bf00      	nop
 8002960:	2000020c 	.word	0x2000020c

08002964 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <FXHighShelfParam3+0x10>)
 8002966:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800296a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800296e:	f010 be05 	b.w	801357c <tVZFilter_setResonance>
 8002972:	bf00      	nop
 8002974:	200001ec 	.word	0x200001ec

08002978 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <FXNotchParam3+0x10>)
 800297a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800297e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002982:	f010 bdfb 	b.w	801357c <tVZFilter_setResonance>
 8002986:	bf00      	nop
 8002988:	200001cc 	.word	0x200001cc

0800298c <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <FXLadderParam3+0x10>)
 800298e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002992:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002996:	f011 bc71 	b.w	801427c <tLadderFilter_setQ>
 800299a:	bf00      	nop
 800299c:	200001ac 	.word	0x200001ac

080029a0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 80029a0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80029a2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80029a6:	008c      	lsls	r4, r1, #2
{
 80029a8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80029ac:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 80029b0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80029b4:	eee0 7a68 	vfms.f32	s15, s0, s17
 80029b8:	eeb0 0a67 	vmov.f32	s0, s15
 80029bc:	f011 fe84 	bl	80146c8 <fastdbtoa>
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <noiseSetTilt+0x44>)
 80029c2:	4420      	add	r0, r4
 80029c4:	f010 fdbe 	bl	8013544 <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 80029c8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 80029cc:	eea8 0a28 	vfma.f32	s0, s16, s17
 80029d0:	f011 fe7a 	bl	80146c8 <fastdbtoa>
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <noiseSetTilt+0x48>)
}
 80029d6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 80029da:	4420      	add	r0, r4
}
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 80029e0:	f010 bdb0 	b.w	8013544 <tVZFilter_setGain>
 80029e4:	2000480c 	.word	0x2000480c
 80029e8:	20004814 	.word	0x20004814

080029ec <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 80029ec:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 80029f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a14 <noiseSetGain+0x28>
{
 80029f4:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 80029f6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80029fa:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 80029fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002a00:	f011 fe62 	bl	80146c8 <fastdbtoa>
 8002a04:	4804      	ldr	r0, [pc, #16]	; (8002a18 <noiseSetGain+0x2c>)
 8002a06:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002a0e:	f010 bd99 	b.w	8013544 <tVZFilter_setGain>
 8002a12:	bf00      	nop
 8002a14:	42080000 	.word	0x42080000
 8002a18:	200047f4 	.word	0x200047f4

08002a1c <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002a1c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002a20:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a50 <noiseSetFreq+0x34>
 8002a24:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002a54 <noiseSetFreq+0x38>
 8002a28:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002a58 <noiseSetFreq+0x3c>
 8002a2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002a30:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002a5c <noiseSetFreq+0x40>
{
 8002a34:	b510      	push	{r4, lr}
 8002a36:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002a38:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8002a3c:	f011 fd00 	bl	8014440 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <noiseSetFreq+0x44>)
 8002a42:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8002a4a:	f010 bc1d 	b.w	8013288 <tVZFilter_setFreqFast>
 8002a4e:	bf00      	nop
 8002a50:	429a0000 	.word	0x429a0000
 8002a54:	420fb824 	.word	0x420fb824
 8002a58:	457ff000 	.word	0x457ff000
 8002a5c:	00000000 	.word	0x00000000
 8002a60:	200047f4 	.word	0x200047f4

08002a64 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;

uint8_t randomValPointer = 0;
void __ATTR_ITCMRAM noise_tick(int string)
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 8002a66:	4d27      	ldr	r5, [pc, #156]	; (8002b04 <noise_tick+0xa0>)
{
 8002a68:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 8002a6e:	4f28      	ldr	r7, [pc, #160]	; (8002b10 <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002a70:	4828      	ldr	r0, [pc, #160]	; (8002b14 <noise_tick+0xb0>)
{
 8002a72:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 8002a76:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002a78:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 8002a7c:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 8002a7e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002a82:	3201      	adds	r2, #1
 8002a84:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 8002a86:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002a8a:	ed91 0a00 	vldr	s0, [r1]
 8002a8e:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 8002a90:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 8002a94:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 8002a98:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002a9c:	f010 f9ee 	bl	8012e7c <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 8002aa0:	481d      	ldr	r0, [pc, #116]	; (8002b18 <noise_tick+0xb4>)
 8002aa2:	4428      	add	r0, r5
 8002aa4:	f010 f9ea 	bl	8012e7c <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 8002aa8:	481c      	ldr	r0, [pc, #112]	; (8002b1c <noise_tick+0xb8>)
 8002aaa:	4428      	add	r0, r5
 8002aac:	f010 f9e6 	bl	8012e7c <tVZFilter_tickEfficient>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 8002ab0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
 8002ab4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002b20 <noise_tick+0xbc>
	sourceValues[3][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002ab8:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
 8002abc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[3][string] = normSample;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002ac2:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
 8002ac6:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 8002aca:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002ace:	4816      	ldr	r0, [pc, #88]	; (8002b28 <noise_tick+0xc4>)
	sourceValues[3][string] = normSample;
 8002ad0:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002ad6:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002ada:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
 8002adc:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002ae0:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002ae4:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
 8002ae8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002aec:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002af0:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[3][string] = normSample;
 8002af4:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
 8002af8:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 8002afa:	1b9b      	subs	r3, r3, r6
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	ecbd 8b04 	vpop	{d8-d9}
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b04:	200049bc 	.word	0x200049bc
 8002b08:	20016c38 	.word	0x20016c38
 8002b0c:	20015b28 	.word	0x20015b28
 8002b10:	e0001000 	.word	0xe0001000
 8002b14:	2000480c 	.word	0x2000480c
 8002b18:	20004814 	.word	0x20004814
 8002b1c:	200047f4 	.word	0x200047f4
 8002b20:	00000000 	.word	0x00000000
 8002b24:	20012d3c 	.word	0x20012d3c
 8002b28:	200047fc 	.word	0x200047fc
 8002b2c:	20012ec0 	.word	0x20012ec0

08002b30 <audioTickL>:
{
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8002b34:	2100      	movs	r1, #0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002b36:	4aba      	ldr	r2, [pc, #744]	; (8002e20 <audioTickL+0x2f0>)
	interrupted = 0;
 8002b38:	48ba      	ldr	r0, [pc, #744]	; (8002e24 <audioTickL+0x2f4>)
 8002b3a:	4cbb      	ldr	r4, [pc, #748]	; (8002e28 <audioTickL+0x2f8>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002b3c:	4bbb      	ldr	r3, [pc, #748]	; (8002e2c <audioTickL+0x2fc>)
 8002b3e:	4ebc      	ldr	r6, [pc, #752]	; (8002e30 <audioTickL+0x300>)
 8002b40:	f104 0810 	add.w	r8, r4, #16
	tickMappings();
 8002b44:	4dbb      	ldr	r5, [pc, #748]	; (8002e34 <audioTickL+0x304>)
{
 8002b46:	ed2d 8b06 	vpush	{d8-d10}
 8002b4a:	b08d      	sub	sp, #52	; 0x34
 8002b4c:	af00      	add	r7, sp, #0
	interrupted = 0;
 8002b4e:	7001      	strb	r1, [r0, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
 8002b50:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002b52:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002b56:	60ba      	str	r2, [r7, #8]
	tickMappings();
 8002b58:	f7fe fe7a 	bl	8001850 <tickMappings>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f010 f811 	bl	8012b84 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 8002b62:	4bb5      	ldr	r3, [pc, #724]	; (8002e38 <audioTickL+0x308>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002b64:	eca4 0a01 	vstmia	r4!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b12b      	cbz	r3, 8002b78 <audioTickL+0x48>
 8002b6c:	2b01      	cmp	r3, #1
			sourceValues[CTRL_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002b6e:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
		for (int v = 0; v < numStringsThisBoard; v++)
 8002b72:	d001      	beq.n	8002b78 <audioTickL+0x48>
			sourceValues[CTRL_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002b74:	ed85 0a19 	vstr	s0, [r5, #100]	; 0x64
	for (int i = 0; i < 4; i++)
 8002b78:	4544      	cmp	r4, r8
 8002b7a:	f106 0604 	add.w	r6, r6, #4
 8002b7e:	f105 0508 	add.w	r5, r5, #8
 8002b82:	d1eb      	bne.n	8002b5c <audioTickL+0x2c>
	float note[numStringsThisBoard];
 8002b84:	009a      	lsls	r2, r3, #2
	float masterSample = 0.0f;
 8002b86:	ed9f 9aad 	vldr	s18, [pc, #692]	; 8002e3c <audioTickL+0x30c>
	float note[numStringsThisBoard];
 8002b8a:	3207      	adds	r2, #7
 8002b8c:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 8002b90:	ebad 0d02 	sub.w	sp, sp, r2
 8002b94:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8115 	beq.w	8002dc6 <audioTickL+0x296>
 8002b9c:	4ba8      	ldr	r3, [pc, #672]	; (8002e40 <audioTickL+0x310>)
 8002b9e:	f04f 0a00 	mov.w	sl, #0
		if (note[v] < 0.0f)
 8002ba2:	eef0 8a49 	vmov.f32	s17, s18
 8002ba6:	61fa      	str	r2, [r7, #28]
 8002ba8:	617b      	str	r3, [r7, #20]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002baa:	46d3      	mov	fp, sl
 8002bac:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <audioTickL+0x314>)
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	4ba5      	ldr	r3, [pc, #660]	; (8002e48 <audioTickL+0x318>)
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	4ba5      	ldr	r3, [pc, #660]	; (8002e4c <audioTickL+0x31c>)
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	4ba5      	ldr	r3, [pc, #660]	; (8002e50 <audioTickL+0x320>)
 8002bba:	61bb      	str	r3, [r7, #24]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	ecb3 8a01 	vldmia	r3!, {s16}
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <audioTickL+0x324>)
 8002bc6:	4453      	add	r3, sl
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (note[v] < 0.0f)
 8002bd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd8:	f100 816a 	bmi.w	8002eb0 <audioTickL+0x380>
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	ed83 8a00 	vstr	s16, [r3]
	interruptChecker = 0;
 8002be2:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <audioTickL+0x328>)
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	4a8c      	ldr	r2, [pc, #560]	; (8002e20 <audioTickL+0x2f0>)
 8002bee:	f1a3 0520 	sub.w	r5, r3, #32
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	6854      	ldr	r4, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8002bf6:	4a99      	ldr	r2, [pc, #612]	; (8002e5c <audioTickL+0x32c>)
	uint32_t tempCount1 = DWT->CYCCNT;
 8002bf8:	462e      	mov	r6, r5
 8002bfa:	eb02 080a 	add.w	r8, r2, sl
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002bfe:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 8002c00:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002c02:	f00f fec9 	bl	8012998 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 8002c06:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 8002c0a:	454e      	cmp	r6, r9
 8002c0c:	f108 0808 	add.w	r8, r8, #8
 8002c10:	d1f5      	bne.n	8002bfe <audioTickL+0xce>
	timeEnv = DWT->CYCCNT - tempCount1;
 8002c12:	4a83      	ldr	r2, [pc, #524]	; (8002e20 <audioTickL+0x2f0>)
	interruptChecker = 0;
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	4e91      	ldr	r6, [pc, #580]	; (8002e60 <audioTickL+0x330>)
	timeEnv = DWT->CYCCNT - tempCount1;
 8002c1a:	6853      	ldr	r3, [r2, #4]
 8002c1c:	1b1c      	subs	r4, r3, r4
 8002c1e:	4b91      	ldr	r3, [pc, #580]	; (8002e64 <audioTickL+0x334>)
 8002c20:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < NUM_LFOS; i++)
 8002c22:	2400      	movs	r4, #0
	interruptChecker = 0;
 8002c24:	4b8c      	ldr	r3, [pc, #560]	; (8002e58 <audioTickL+0x328>)
 8002c26:	7019      	strb	r1, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002c28:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8002c2c:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 8002c30:	4621      	mov	r1, r4
 8002c32:	465a      	mov	r2, fp
 8002c34:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 8002c38:	edc7 8a0a 	vstr	s17, [r7, #40]	; 0x28
		if (lfoOn[i])
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 812f 	beq.w	8002ea0 <audioTickL+0x370>
			lfoShapeTick[i](&sample,i, string);
 8002c42:	4b89      	ldr	r3, [pc, #548]	; (8002e68 <audioTickL+0x338>)
	for (int i = 0; i < NUM_LFOS; i++)
 8002c44:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 8002c46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8002c4a:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 8002c4c:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 8002c50:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002c52:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 8002c56:	d1e9      	bne.n	8002c2c <audioTickL+0xfc>
	timeLFO = DWT->CYCCNT - tempCount1;
 8002c58:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <audioTickL+0x2f0>)
		oscillator_tick(note[v], v);
 8002c5a:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 8002c5e:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <audioTickL+0x33c>)
		oscillator_tick(note[v], v);
 8002c60:	4658      	mov	r0, fp
	timeLFO = DWT->CYCCNT - tempCount1;
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	eba3 0308 	sub.w	r3, r3, r8
 8002c68:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8002c6a:	f7fd ff6b 	bl	8000b44 <oscillator_tick>
		noise_tick(v);
 8002c6e:	4658      	mov	r0, fp
 8002c70:	f7ff fef8 	bl	8002a64 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <audioTickL+0x340>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 817a 	beq.w	8002f72 <audioTickL+0x442>
			filterSamps[0] += oscOuts[0][i][v];
 8002c7e:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
 8002c80:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 8002c82:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8002c86:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8002c8a:	d011      	beq.n	8002cb0 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002c8c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 8002c90:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 8002c92:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8002c96:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 8002c9e:	d007      	beq.n	8002cb0 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002ca0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8002ca4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8002ca8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002cac:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 8002cb0:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8002cbc:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 8002cc0:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8002cc4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002cc8:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 8002cce:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 8002cd2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002cd6:	f7fe f981 	bl	8000fdc <filter_tick>
		if (fxPre)
 8002cda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002cde:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 8002ce2:	eef4 9ae7 	vcmpe.f32	s19, s15
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	dd04      	ble.n	8002cf6 <audioTickL+0x1c6>
			sample *= amplitude[v];
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <audioTickL+0x344>)
 8002cf8:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <audioTickL+0x2f0>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 8002d00:	2c00      	cmp	r4, #0
 8002d02:	f040 80db 	bne.w	8002ebc <audioTickL+0x38c>
			for (int i = 0; i < numEffectToTick; i++)
 8002d06:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <audioTickL+0x348>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b323      	cbz	r3, 8002d56 <audioTickL+0x226>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d0c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002d10:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002e9c <audioTickL+0x36c>
			for (int i = 0; i < numEffectToTick; i++)
 8002d14:	46d0      	mov	r8, sl
 8002d16:	4e59      	ldr	r6, [pc, #356]	; (8002e7c <audioTickL+0x34c>)
 8002d18:	4d59      	ldr	r5, [pc, #356]	; (8002e80 <audioTickL+0x350>)
				sample = effectTick[i](sample, i, v); //run the effect
 8002d1a:	eeb0 0a48 	vmov.f32	s0, s16
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f859 3b04 	ldr.w	r3, [r9], #4
 8002d24:	4659      	mov	r1, fp
 8002d26:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d28:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
 8002d2c:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
				sample *= fxPostGain[i][v];
 8002d32:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
 8002d36:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d3e:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002d42:	eea7 0a88 	vfma.f32	s0, s15, s16
				sample *= fxPostGain[i][v];
 8002d46:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <audioTickL+0x348>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 8002d50:	ee20 8a08 	vmul.f32	s16, s0, s16
			for (int i = 0; i < numEffectToTick; i++)
 8002d54:	dce1      	bgt.n	8002d1a <audioTickL+0x1ea>
		if (!fxPre)
 8002d56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <audioTickL+0x2f0>)
		oversampleCount = tempCount2-tempCount1;
 8002d5c:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 8002d5e:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
 8002d60:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <audioTickL+0x354>)
		if (!fxPre)
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
 8002d6c:	6013      	str	r3, [r2, #0]
		if (!fxPre)
 8002d6e:	d804      	bhi.n	8002d7a <audioTickL+0x24a>
			sample *= amplitude[v];
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002d7c:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
 8002d80:	f10b 0b01 	add.w	fp, fp, #1
 8002d84:	3304      	adds	r3, #4
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3304      	adds	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <audioTickL+0x358>)
 8002d9c:	eb03 000a 	add.w	r0, r3, sl
 8002da0:	f00f ffb2 	bl	8012d08 <tSVF_tick>
		masterSample *= finalMaster[v] ;
 8002da4:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <audioTickL+0x35c>)
		masterSample += sample;
 8002da6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		masterSample *= finalMaster[v] ;
 8002daa:	4453      	add	r3, sl
	for (int v = 0; v < numStringsThisBoard; v++)
 8002dac:	f10a 0a04 	add.w	sl, sl, #4
		masterSample += sample;
 8002db0:	eea0 9a27 	vfma.f32	s18, s0, s15
		masterSample *= finalMaster[v] ;
 8002db4:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <audioTickL+0x308>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	455b      	cmp	r3, fp
		masterSample *= finalMaster[v] ;
 8002dbe:	ee29 9a27 	vmul.f32	s18, s18, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002dc2:	f73f aefb 	bgt.w	8002bbc <audioTickL+0x8c>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8002dc6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002dca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002dce:	eef0 0a49 	vmov.f32	s1, s18
 8002dd2:	f011 fb35 	bl	8014440 <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <audioTickL+0x2f0>)
	timeTick = tempCount6-tempCount5;
 8002dd8:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
 8002dda:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8002dde:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8002de0:	492b      	ldr	r1, [pc, #172]	; (8002e90 <audioTickL+0x360>)
 8002de2:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 8002de4:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 8002de6:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8002de8:	d90b      	bls.n	8002e02 <audioTickL+0x2d2>
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <audioTickL+0x2f4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b943      	cbnz	r3, 8002e02 <audioTickL+0x2d2>
		if (overSampled)
 8002df0:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <audioTickL+0x344>)
 8002df2:	7811      	ldrb	r1, [r2, #0]
 8002df4:	b921      	cbnz	r1, 8002e00 <audioTickL+0x2d0>
		else if (oscToTick > 1)
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <audioTickL+0x340>)
 8002df8:	7813      	ldrb	r3, [r2, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d901      	bls.n	8002e02 <audioTickL+0x2d2>
			oscToTick--;
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <audioTickL+0x364>)
}
 8002e04:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 8002e06:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e98 <audioTickL+0x368>
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e16:	46bd      	mov	sp, r7
 8002e18:	ecbd 8b06 	vpop	{d8-d10}
 8002e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e20:	e0001000 	.word	0xe0001000
 8002e24:	2000451c 	.word	0x2000451c
 8002e28:	20004548 	.word	0x20004548
 8002e2c:	20016b28 	.word	0x20016b28
 8002e30:	20004558 	.word	0x20004558
 8002e34:	20012d3c 	.word	0x20012d3c
 8002e38:	20000066 	.word	0x20000066
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	20012e54 	.word	0x20012e54
 8002e44:	2000031c 	.word	0x2000031c
 8002e48:	200047fc 	.word	0x200047fc
 8002e4c:	20012d5c 	.word	0x20012d5c
 8002e50:	20004828 	.word	0x20004828
 8002e54:	20012e8c 	.word	0x20012e8c
 8002e58:	20015169 	.word	0x20015169
 8002e5c:	2000444c 	.word	0x2000444c
 8002e60:	200045bc 	.word	0x200045bc
 8002e64:	20012ea8 	.word	0x20012ea8
 8002e68:	20004620 	.word	0x20004620
 8002e6c:	20012eb4 	.word	0x20012eb4
 8002e70:	2000007c 	.word	0x2000007c
 8002e74:	2000007d 	.word	0x2000007d
 8002e78:	20000064 	.word	0x20000064
 8002e7c:	200044cc 	.word	0x200044cc
 8002e80:	200044ec 	.word	0x200044ec
 8002e84:	20004858 	.word	0x20004858
 8002e88:	20004494 	.word	0x20004494
 8002e8c:	2000449c 	.word	0x2000449c
 8002e90:	20012ec4 	.word	0x20012ec4
 8002e94:	20000088 	.word	0x20000088
 8002e98:	3f7ae148 	.word	0x3f7ae148
 8002e9c:	2000443c 	.word	0x2000443c
	for (int i = 0; i < NUM_LFOS; i++)
 8002ea0:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002ea2:	edc5 8a30 	vstr	s17, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 8002ea6:	3508      	adds	r5, #8
 8002ea8:	2c04      	cmp	r4, #4
 8002eaa:	f47f aebf 	bne.w	8002c2c <audioTickL+0xfc>
 8002eae:	e6d3      	b.n	8002c58 <audioTickL+0x128>
			note[v] = 0.0f;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	eeb0 8a68 	vmov.f32	s16, s17
 8002eb6:	edc3 8a00 	vstr	s17, [r3]
 8002eba:	e692      	b.n	8002be2 <audioTickL+0xb2>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <audioTickL+0x454>)
 8002ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8002ec2:	4931      	ldr	r1, [pc, #196]	; (8002f88 <audioTickL+0x458>)
 8002ec4:	4453      	add	r3, sl
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	ee0a 3a90 	vmov	s21, r3
 8002ecc:	f00f faaa 	bl	8012424 <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <audioTickL+0x45c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d051      	beq.n	8002f7c <audioTickL+0x44c>
 8002ed8:	4e2d      	ldr	r6, [pc, #180]	; (8002f90 <audioTickL+0x460>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002eda:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002ede:	4d2d      	ldr	r5, [pc, #180]	; (8002f94 <audioTickL+0x464>)
			for (int i = 0; i < numEffectToTick; i++)
 8002ee0:	f04f 0800 	mov.w	r8, #0
 8002ee4:	eb06 090a 	add.w	r9, r6, sl
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <audioTickL+0x458>)
 8002eea:	4455      	add	r5, sl
 8002eec:	4e2a      	ldr	r6, [pc, #168]	; (8002f98 <audioTickL+0x468>)
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	4c25      	ldr	r4, [pc, #148]	; (8002f88 <audioTickL+0x458>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 8002ef2:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	4640      	mov	r0, r8
 8002efc:	eeb0 0a48 	vmov.f32	s0, s16
 8002f00:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f02:	edd9 7a00 	vldr	s15, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002f06:	ed95 7a00 	vldr	s14, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f0a:	ee20 0a27 	vmul.f32	s0, s0, s15
				for (int j = 0; j < OVERSAMPLE; j++)
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <audioTickL+0x46c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f10:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002f14:	eea7 0a88 	vfma.f32	s0, s15, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002f18:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002f1c:	eca4 0a01 	vstmia	r4!, {s0}
				for (int j = 0; j < OVERSAMPLE; j++)
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d1e6      	bne.n	8002ef2 <audioTickL+0x3c2>
			for (int i = 0; i < numEffectToTick; i++)
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <audioTickL+0x45c>)
 8002f26:	f108 0801 	add.w	r8, r8, #1
 8002f2a:	3604      	adds	r6, #4
 8002f2c:	f109 0908 	add.w	r9, r9, #8
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	3508      	adds	r5, #8
 8002f34:	4543      	cmp	r3, r8
 8002f36:	dcdb      	bgt.n	8002ef0 <audioTickL+0x3c0>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002f38:	687c      	ldr	r4, [r7, #4]
 8002f3a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002f3e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002f42:	edd4 0a00 	vldr	s1, [r4]
 8002f46:	f011 fa7b 	bl	8014440 <LEAF_clip>
 8002f4a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002f4e:	edd4 0a01 	vldr	s1, [r4, #4]
 8002f52:	ed84 0a00 	vstr	s0, [r4]
 8002f56:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002f5a:	f011 fa71 	bl	8014440 <LEAF_clip>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002f5e:	ee1a 0a90 	vmov	r0, s21
 8002f62:	4909      	ldr	r1, [pc, #36]	; (8002f88 <audioTickL+0x458>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002f64:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002f68:	f00f fac4 	bl	80124f4 <tOversampler_downsample>
 8002f6c:	eeb0 8a40 	vmov.f32	s16, s0
 8002f70:	e6f1      	b.n	8002d56 <audioTickL+0x226>
		for (int i = 0; i < oscToTick; i++)
 8002f72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002fa0 <audioTickL+0x470>
 8002f76:	eeb0 6a67 	vmov.f32	s12, s15
 8002f7a:	e699      	b.n	8002cb0 <audioTickL+0x180>
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <audioTickL+0x458>)
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	e7da      	b.n	8002f38 <audioTickL+0x408>
 8002f82:	bf00      	nop
 8002f84:	20004820 	.word	0x20004820
 8002f88:	2000485c 	.word	0x2000485c
 8002f8c:	20000064 	.word	0x20000064
 8002f90:	200044cc 	.word	0x200044cc
 8002f94:	200044ec 	.word	0x200044ec
 8002f98:	2000443c 	.word	0x2000443c
 8002f9c:	20004864 	.word	0x20004864
 8002fa0:	00000000 	.word	0x00000000

08002fa4 <audioFrame>:
{
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
 8002fa8:	49c2      	ldr	r1, [pc, #776]	; (80032b4 <audioFrame+0x310>)
	if (newBar)
 8002faa:	4fc3      	ldr	r7, [pc, #780]	; (80032b8 <audioFrame+0x314>)
{
 8002fac:	ed2d 8b04 	vpush	{d8-d9}
 8002fb0:	b089      	sub	sp, #36	; 0x24
	if (newBar)
 8002fb2:	683a      	ldr	r2, [r7, #0]
{
 8002fb4:	9003      	str	r0, [sp, #12]
	uint32_t tempCountFrame = DWT->CYCCNT;
 8002fb6:	684b      	ldr	r3, [r1, #4]
 8002fb8:	9302      	str	r3, [sp, #8]
	if (newBar)
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	f000 8095 	beq.w	80030ea <audioFrame+0x146>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8002fc0:	4abe      	ldr	r2, [pc, #760]	; (80032bc <audioFrame+0x318>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002fc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fc6:	49be      	ldr	r1, [pc, #760]	; (80032c0 <audioFrame+0x31c>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8002fc8:	ed92 7a02 	vldr	s14, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8002fcc:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002fd0:	edd2 7a03 	vldr	s15, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8002fd4:	ed92 6a00 	vldr	s12, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002fd8:	ee77 3a66 	vsub.f32	s7, s14, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002fdc:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002fde:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8002fe2:	ee76 4ac6 	vsub.f32	s9, s13, s12
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002fe6:	4282      	cmp	r2, r0
 8002fe8:	d00c      	beq.n	8003004 <audioFrame+0x60>
 8002fea:	ee07 2a90 	vmov	s15, r2
 8002fee:	4ab5      	ldr	r2, [pc, #724]	; (80032c4 <audioFrame+0x320>)
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	ed92 5a00 	vldr	s10, [r2]
 8002ff8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	f340 8115 	ble.w	800322e <audioFrame+0x28a>
				stringMappedPositions[j] = 1.0f;
 8003004:	f8df b310 	ldr.w	fp, [pc, #784]	; 8003318 <audioFrame+0x374>
 8003008:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800300c:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003010:	684a      	ldr	r2, [r1, #4]
 8003012:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003016:	428a      	cmp	r2, r1
 8003018:	d00c      	beq.n	8003034 <audioFrame+0x90>
 800301a:	ee07 2a90 	vmov	s15, r2
 800301e:	4aa9      	ldr	r2, [pc, #676]	; (80032c4 <audioFrame+0x320>)
 8003020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003024:	ed92 5a01 	vldr	s10, [r2, #4]
 8003028:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	f140 80ea 	bpl.w	8003208 <audioFrame+0x264>
				stringMappedPositions[j] = 1.0f;
 8003034:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003038:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
 800303c:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 800331c <audioFrame+0x378>
 8003040:	f89a 2000 	ldrb.w	r2, [sl]
 8003044:	2a00      	cmp	r2, #0
 8003046:	d04e      	beq.n	80030e6 <audioFrame+0x142>
 8003048:	4d9f      	ldr	r5, [pc, #636]	; (80032c8 <audioFrame+0x324>)
 800304a:	2400      	movs	r4, #0
 800304c:	4b9f      	ldr	r3, [pc, #636]	; (80032cc <audioFrame+0x328>)
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 800304e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8003052:	f8cd a004 	str.w	sl, [sp, #4]
 8003056:	46aa      	mov	sl, r5
 8003058:	eddf 8a9d 	vldr	s17, [pc, #628]	; 80032d0 <audioFrame+0x32c>
 800305c:	4625      	mov	r5, r4
 800305e:	4e9d      	ldr	r6, [pc, #628]	; (80032d4 <audioFrame+0x330>)
 8003060:	461c      	mov	r4, r3
 8003062:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8003320 <audioFrame+0x37c>
 8003066:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8003324 <audioFrame+0x380>
			if (dualSlider)
 800306a:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 800306e:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
 8003072:	b1c3      	cbz	r3, 80030a6 <audioFrame+0x102>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8003074:	eeb4 0a48 	vcmp.f32	s0, s16
 8003078:	eddb 0a01 	vldr	s1, [fp, #4]
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	f040 80b1 	bne.w	80031e6 <audioFrame+0x242>
 8003084:	eef4 0ac8 	vcmpe.f32	s1, s16
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	f100 80ec 	bmi.w	8003268 <audioFrame+0x2c4>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8003090:	4b91      	ldr	r3, [pc, #580]	; (80032d8 <audioFrame+0x334>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	442b      	add	r3, r5
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 800309e:	ee21 1a28 	vmul.f32	s2, s2, s17
 80030a2:	f011 fab7 	bl	8014614 <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 80030a6:	4650      	mov	r0, sl
		for (int i = 0; i < numStringsThisBoard; i++)
 80030a8:	3501      	adds	r5, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 80030aa:	f00f fda1 	bl	8012bf0 <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
 80030ae:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 80030b2:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 80030b6:	f10a 0a04 	add.w	sl, sl, #4
 80030ba:	9b01      	ldr	r3, [sp, #4]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 80030bc:	4987      	ldr	r1, [pc, #540]	; (80032dc <audioFrame+0x338>)
		for (int i = 0; i < numStringsThisBoard; i++)
 80030be:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 80030c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
 80030c4:	42aa      	cmp	r2, r5
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 80030c6:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
 80030ca:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 80030ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80030d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d6:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 80030da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f844 3b04 	str.w	r3, [r4], #4
		for (int i = 0; i < numStringsThisBoard; i++)
 80030e4:	dcc1      	bgt.n	800306a <audioFrame+0xc6>
		newBar = 0;
 80030e6:	2200      	movs	r2, #0
 80030e8:	603a      	str	r2, [r7, #0]
	if (newPluck)
 80030ea:	4f7d      	ldr	r7, [pc, #500]	; (80032e0 <audioFrame+0x33c>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b363      	cbz	r3, 800314a <audioFrame+0x1a6>
		for (int i = 0; i < numStringsThisBoard; i++)
 80030f0:	f8df a228 	ldr.w	sl, [pc, #552]	; 800331c <audioFrame+0x378>
 80030f4:	f89a 3000 	ldrb.w	r3, [sl]
 80030f8:	b32b      	cbz	r3, 8003146 <audioFrame+0x1a2>
 80030fa:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <audioFrame+0x340>)
 80030fc:	2400      	movs	r4, #0
 80030fe:	497a      	ldr	r1, [pc, #488]	; (80032e8 <audioFrame+0x344>)
				float amplitz = stringInputs[i] * 0.00005f;
 8003100:	eddf 8a7a 	vldr	s17, [pc, #488]	; 80032ec <audioFrame+0x348>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003104:	4690      	mov	r8, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003106:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80032f0 <audioFrame+0x34c>
 800310a:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8003328 <audioFrame+0x384>
 800310e:	4d79      	ldr	r5, [pc, #484]	; (80032f4 <audioFrame+0x350>)
 8003110:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800332c <audioFrame+0x388>
 8003114:	9101      	str	r1, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003116:	f8cd a010 	str.w	sl, [sp, #16]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800311a:	f85b 6b04 	ldr.w	r6, [fp], #4
 800311e:	682a      	ldr	r2, [r5, #0]
 8003120:	2e00      	cmp	r6, #0
 8003122:	d146      	bne.n	80031b2 <audioFrame+0x20e>
 8003124:	2a00      	cmp	r2, #0
 8003126:	f040 8122 	bne.w	800336e <audioFrame+0x3ca>
		for (int i = 0; i < numStringsThisBoard; i++)
 800312a:	3401      	adds	r4, #1
			previousStringInputs[i] = stringInputs[i];
 800312c:	f84b 2c04 	str.w	r2, [fp, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003130:	9a01      	ldr	r2, [sp, #4]
 8003132:	3504      	adds	r5, #4
 8003134:	42a3      	cmp	r3, r4
 8003136:	f108 0804 	add.w	r8, r8, #4
 800313a:	f102 0204 	add.w	r2, r2, #4
 800313e:	f109 0904 	add.w	r9, r9, #4
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	dce9      	bgt.n	800311a <audioFrame+0x176>
		newPluck = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
	if ((codecReady)&&(presetReady))
 800314a:	4b6b      	ldr	r3, [pc, #428]	; (80032f8 <audioFrame+0x354>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b1cb      	cbz	r3, 8003184 <audioFrame+0x1e0>
 8003150:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <audioFrame+0x358>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b1b3      	cbz	r3, 8003184 <audioFrame+0x1e0>
 8003156:	4c6a      	ldr	r4, [pc, #424]	; (8003300 <audioFrame+0x35c>)
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 800315e:	ed9f 8a69 	vldr	s16, [pc, #420]	; 8003304 <audioFrame+0x360>
 8003162:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003166:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800316a:	f7ff fce1 	bl	8002b30 <audioTickL>
 800316e:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003172:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8003174:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003178:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 800317a:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
 800317e:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003182:	d1f2      	bne.n	800316a <audioFrame+0x1c6>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003184:	4860      	ldr	r0, [pc, #384]	; (8003308 <audioFrame+0x364>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8003186:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <audioFrame+0x310>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003188:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	9802      	ldr	r0, [sp, #8]
 8003190:	495e      	ldr	r1, [pc, #376]	; (800330c <audioFrame+0x368>)
 8003192:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003194:	4a5e      	ldr	r2, [pc, #376]	; (8003310 <audioFrame+0x36c>)
 8003196:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800319a:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800319c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a4:	edc2 7a00 	vstr	s15, [r2]
}
 80031a8:	b009      	add	sp, #36	; 0x24
 80031aa:	ecbd 8b04 	vpop	{d8-d9}
 80031ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 80031b2:	ddba      	ble.n	800312a <audioFrame+0x186>
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d1b8      	bne.n	800312a <audioFrame+0x186>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80031b8:	2110      	movs	r1, #16
 80031ba:	4856      	ldr	r0, [pc, #344]	; (8003314 <audioFrame+0x370>)
 80031bc:	f005 fbea 	bl	8008994 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 80031c0:	4640      	mov	r0, r8
 80031c2:	f00f fbe1 	bl	8012988 <tADSRT_off>
 80031c6:	f108 0008 	add.w	r0, r8, #8
 80031ca:	f00f fbdd 	bl	8012988 <tADSRT_off>
 80031ce:	f108 0010 	add.w	r0, r8, #16
 80031d2:	f00f fbd9 	bl	8012988 <tADSRT_off>
 80031d6:	f108 0018 	add.w	r0, r8, #24
 80031da:	f00f fbd5 	bl	8012988 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
 80031de:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 80031e0:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	e7a1      	b.n	800312a <audioFrame+0x186>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 80031e6:	eef4 0a48 	vcmp.f32	s1, s16
 80031ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ee:	f47f af4f 	bne.w	8003090 <audioFrame+0xec>
 80031f2:	eeb4 0a48 	vcmp.f32	s0, s16
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	f57f af49 	bpl.w	8003090 <audioFrame+0xec>
					stringMappedPositions[1] = stringMappedPositions[0];
 80031fe:	eef0 0a40 	vmov.f32	s1, s0
 8003202:	ed8b 0a01 	vstr	s0, [fp, #4]
 8003206:	e743      	b.n	8003090 <audioFrame+0xec>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8003208:	ed92 4a05 	vldr	s8, [r2, #20]
 800320c:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	f200 808c 	bhi.w	8003330 <audioFrame+0x38c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003218:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800321c:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003220:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8003224:	eea4 6a87 	vfma.f32	s12, s9, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003228:	ed8b 6a01 	vstr	s12, [fp, #4]
 800322c:	e706      	b.n	800303c <audioFrame+0x98>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 800322e:	ed92 4a04 	vldr	s8, [r2, #16]
 8003232:	eef4 7ac4 	vcmpe.f32	s15, s8
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	da2b      	bge.n	8003294 <audioFrame+0x2f0>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 800323c:	ed92 5a08 	vldr	s10, [r2, #32]
 8003240:	eef4 7ac5 	vcmpe.f32	s15, s10
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	db13      	blt.n	8003272 <audioFrame+0x2ce>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800324a:	ee77 7ac4 	vsub.f32	s15, s15, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 800324e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8003318 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003252:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003256:	ee87 4a85 	vdiv.f32	s8, s15, s10
 800325a:	eef0 7a66 	vmov.f32	s15, s13
 800325e:	eee4 7a23 	vfma.f32	s15, s8, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003262:	edcb 7a00 	vstr	s15, [fp]
 8003266:	e6d3      	b.n	8003010 <audioFrame+0x6c>
					stringMappedPositions[0] = stringMappedPositions[1];
 8003268:	eeb0 0a60 	vmov.f32	s0, s1
 800326c:	edcb 0a00 	vstr	s1, [fp]
 8003270:	e70e      	b.n	8003090 <audioFrame+0xec>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003272:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
 8003276:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800327a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8003318 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800327e:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003282:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8003286:	eef0 7a47 	vmov.f32	s15, s14
 800328a:	eee5 7a84 	vfma.f32	s15, s11, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800328e:	edcb 7a00 	vstr	s15, [fp]
 8003292:	e6bd      	b.n	8003010 <audioFrame+0x6c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003294:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003298:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8003318 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800329c:	ee34 5a45 	vsub.f32	s10, s8, s10
 80032a0:	ee87 4a85 	vdiv.f32	s8, s15, s10
 80032a4:	eef0 7a46 	vmov.f32	s15, s12
 80032a8:	eee4 7a84 	vfma.f32	s15, s9, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80032ac:	edcb 7a00 	vstr	s15, [fp]
 80032b0:	e6ae      	b.n	8003010 <audioFrame+0x6c>
 80032b2:	bf00      	nop
 80032b4:	e0001000 	.word	0xe0001000
 80032b8:	200047e8 	.word	0x200047e8
 80032bc:	2000004c 	.word	0x2000004c
 80032c0:	20012e94 	.word	0x20012e94
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	200044c4 	.word	0x200044c4
 80032cc:	20000334 	.word	0x20000334
 80032d0:	3dcccccd 	.word	0x3dcccccd
 80032d4:	20004540 	.word	0x20004540
 80032d8:	200044a4 	.word	0x200044a4
 80032dc:	24000000 	.word	0x24000000
 80032e0:	200047f0 	.word	0x200047f0
 80032e4:	2000444c 	.word	0x2000444c
 80032e8:	20012e8c 	.word	0x20012e8c
 80032ec:	3851b717 	.word	0x3851b717
 80032f0:	00000000 	.word	0x00000000
 80032f4:	20012e24 	.word	0x20012e24
 80032f8:	2000037c 	.word	0x2000037c
 80032fc:	2000496c 	.word	0x2000496c
 8003300:	30000000 	.word	0x30000000
 8003304:	4b000000 	.word	0x4b000000
 8003308:	20000008 	.word	0x20000008
 800330c:	20012eb0 	.word	0x20012eb0
 8003310:	200044a8 	.word	0x200044a8
 8003314:	58020400 	.word	0x58020400
 8003318:	20012e5c 	.word	0x20012e5c
 800331c:	20000066 	.word	0x20000066
 8003320:	20004434 	.word	0x20004434
 8003324:	20000060 	.word	0x20000060
 8003328:	20004974 	.word	0x20004974
 800332c:	200169d8 	.word	0x200169d8
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8003330:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8003334:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	d80a      	bhi.n	8003354 <audioFrame+0x3b0>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800333e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003342:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003346:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800334a:	eee3 6a87 	vfma.f32	s13, s7, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 800334e:	edcb 6a01 	vstr	s13, [fp, #4]
 8003352:	e673      	b.n	800303c <audioFrame+0x98>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003354:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 8003358:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800335c:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003360:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003364:	eea5 7aa6 	vfma.f32	s14, s11, s13
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8003368:	ed8b 7a01 	vstr	s14, [fp, #4]
 800336c:	e666      	b.n	800303c <audioFrame+0x98>
				float amplitz = stringInputs[i] * 0.00005f;
 800336e:	ee07 2a90 	vmov	s15, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003372:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003376:	eeb0 0a48 	vmov.f32	s0, s16
				float amplitz = stringInputs[i] * 0.00005f;
 800337a:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 800337e:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8003382:	f011 f85d 	bl	8014440 <LEAF_clip>
				stringOctave[i] = octave;
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <audioFrame+0x498>)
 8003388:	9a01      	ldr	r2, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800338a:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 800338c:	681b      	ldr	r3, [r3, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 800338e:	eeb0 9a40 	vmov.f32	s18, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003392:	482b      	ldr	r0, [pc, #172]	; (8003440 <audioFrame+0x49c>)
				stringOctave[i] = octave;
 8003394:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003396:	f5a9 7313 	sub.w	r3, r9, #588	; 0x24c
 800339a:	2201      	movs	r2, #1
 800339c:	9307      	str	r3, [sp, #28]
 800339e:	f109 0354 	add.w	r3, r9, #84	; 0x54
 80033a2:	9305      	str	r3, [sp, #20]
 80033a4:	f005 faf6 	bl	8008994 <HAL_GPIO_WritePin>
 80033a8:	9b07      	ldr	r3, [sp, #28]
 80033aa:	9406      	str	r4, [sp, #24]
 80033ac:	4644      	mov	r4, r8
 80033ae:	469a      	mov	sl, r3
					if (useVelocity == 0) envVel = 1.f;
 80033b0:	edda 7a00 	vldr	s15, [sl]
				    tADSRT_on(&envs[v][i], envVel);
 80033b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
				for (int v = 0; v < NUM_ENV; v++)
 80033b8:	f10a 0aa8 	add.w	sl, sl, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
 80033bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d02e      	beq.n	8003424 <audioFrame+0x480>
				    tADSRT_on(&envs[v][i], envVel);
 80033c6:	4620      	mov	r0, r4
 80033c8:	eeb0 0a49 	vmov.f32	s0, s18
 80033cc:	f00f faca 	bl	8012964 <tADSRT_on>
				    voiceSounding = 1;
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <audioFrame+0x4a0>)
 80033d2:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
 80033d6:	3408      	adds	r4, #8
				    voiceSounding = 1;
 80033d8:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 80033da:	9b05      	ldr	r3, [sp, #20]
 80033dc:	4553      	cmp	r3, sl
 80033de:	d1e7      	bne.n	80033b0 <audioFrame+0x40c>
 80033e0:	9c06      	ldr	r4, [sp, #24]
					if (noteOnSync > 0.5f)
 80033e2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80033e6:	9505      	str	r5, [sp, #20]
 80033e8:	46ca      	mov	sl, r9
 80033ea:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	320c      	adds	r2, #12
 80033f2:	4615      	mov	r5, r2
					if (noteOnSync > 0.5f)
 80033f4:	edda 7a0e 	vldr	s15, [sl, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 80033f8:	4630      	mov	r0, r6
 80033fa:	4621      	mov	r1, r4
				for (int v = 0; v < NUM_LFOS; v++)
 80033fc:	3601      	adds	r6, #1
					if (noteOnSync > 0.5f)
 80033fe:	eef4 7ac9 	vcmpe.f32	s15, s18
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	dd04      	ble.n	8003412 <audioFrame+0x46e>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 8003408:	ed9a 0a00 	vldr	s0, [sl]
 800340c:	f85a 3005 	ldr.w	r3, [sl, r5]
 8003410:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
 8003412:	2e04      	cmp	r6, #4
 8003414:	f10a 0a8c 	add.w	sl, sl, #140	; 0x8c
 8003418:	d1ec      	bne.n	80033f4 <audioFrame+0x450>
			previousStringInputs[i] = stringInputs[i];
 800341a:	9d05      	ldr	r5, [sp, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
 800341c:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 800341e:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	e682      	b.n	800312a <audioFrame+0x186>
				    tADSRT_on(&envs[v][i], envVel);
 8003424:	4620      	mov	r0, r4
				for (int v = 0; v < NUM_ENV; v++)
 8003426:	3408      	adds	r4, #8
				    tADSRT_on(&envs[v][i], envVel);
 8003428:	f00f fa9c 	bl	8012964 <tADSRT_on>
				    voiceSounding = 1;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <audioFrame+0x4a0>)
 800342e:	f04f 0201 	mov.w	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 8003434:	9b05      	ldr	r3, [sp, #20]
 8003436:	459a      	cmp	sl, r3
 8003438:	d1ba      	bne.n	80033b0 <audioFrame+0x40c>
 800343a:	e7d1      	b.n	80033e0 <audioFrame+0x43c>
 800343c:	2000481c 	.word	0x2000481c
 8003440:	58020400 	.word	0x58020400
 8003444:	20012eec 	.word	0x20012eec

08003448 <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003448:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 800344a:	4b86      	ldr	r3, [pc, #536]	; (8003664 <HAL_SPI_RxCpltCallback+0x21c>)
	interrupted = 1;
 800344c:	2101      	movs	r1, #1
 800344e:	4a86      	ldr	r2, [pc, #536]	; (8003668 <HAL_SPI_RxCpltCallback+0x220>)
{
 8003450:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8003452:	4298      	cmp	r0, r3
	interrupted = 1;
 8003454:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8003456:	d019      	beq.n	800348c <HAL_SPI_RxCpltCallback+0x44>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8003458:	4b84      	ldr	r3, [pc, #528]	; (800366c <HAL_SPI_RxCpltCallback+0x224>)
 800345a:	429c      	cmp	r4, r3
 800345c:	d00d      	beq.n	800347a <HAL_SPI_RxCpltCallback+0x32>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 800345e:	4b84      	ldr	r3, [pc, #528]	; (8003670 <HAL_SPI_RxCpltCallback+0x228>)
 8003460:	429c      	cmp	r4, r3
 8003462:	d000      	beq.n	8003466 <HAL_SPI_RxCpltCallback+0x1e>
			levers[1][i] = SPI_LEVERS[i];
		}
		*/
		newLevers = 1;
	}
}
 8003464:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8003466:	4b83      	ldr	r3, [pc, #524]	; (8003674 <HAL_SPI_RxCpltCallback+0x22c>)
 8003468:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800346c:	2afe      	cmp	r2, #254	; 0xfe
 800346e:	f000 80ef 	beq.w	8003650 <HAL_SPI_RxCpltCallback+0x208>
		newLevers = 1;
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_SPI_RxCpltCallback+0x230>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 800347a:	4b80      	ldr	r3, [pc, #512]	; (800367c <HAL_SPI_RxCpltCallback+0x234>)
 800347c:	7b9a      	ldrb	r2, [r3, #14]
 800347e:	2afe      	cmp	r2, #254	; 0xfe
 8003480:	f000 80d6 	beq.w	8003630 <HAL_SPI_RxCpltCallback+0x1e8>
		newBar = 1;
 8003484:	4b7e      	ldr	r3, [pc, #504]	; (8003680 <HAL_SPI_RxCpltCallback+0x238>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e7e8      	b.n	800345e <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 800348c:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_SPI_RxCpltCallback+0x23c>)
 800348e:	7e9a      	ldrb	r2, [r3, #26]
 8003490:	2afe      	cmp	r2, #254	; 0xfe
 8003492:	d008      	beq.n	80034a6 <HAL_SPI_RxCpltCallback+0x5e>
		newPluck = 1;
 8003494:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <HAL_SPI_RxCpltCallback+0x240>)
 8003496:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8003498:	2234      	movs	r2, #52	; 0x34
 800349a:	497a      	ldr	r1, [pc, #488]	; (8003684 <HAL_SPI_RxCpltCallback+0x23c>)
		newPluck = 1;
 800349c:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800349e:	4871      	ldr	r0, [pc, #452]	; (8003664 <HAL_SPI_RxCpltCallback+0x21c>)
 80034a0:	f009 ffc6 	bl	800d430 <HAL_SPI_Receive_DMA>
 80034a4:	e7d8      	b.n	8003458 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 80034a6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80034aa:	2afd      	cmp	r2, #253	; 0xfd
 80034ac:	d1f2      	bne.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
			for (int i = 0; i < numStringsThisBoard; i++)
 80034ae:	4a77      	ldr	r2, [pc, #476]	; (800368c <HAL_SPI_RxCpltCallback+0x244>)
 80034b0:	7811      	ldrb	r1, [r2, #0]
 80034b2:	2900      	cmp	r1, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034b6:	4a76      	ldr	r2, [pc, #472]	; (8003690 <HAL_SPI_RxCpltCallback+0x248>)
			for (int i = 0; i < numStringsThisBoard; i++)
 80034b8:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034ba:	6810      	ldr	r0, [r2, #0]
 80034bc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80034c0:	f890 c01b 	ldrb.w	ip, [r0, #27]
 80034c4:	6810      	ldr	r0, [r2, #0]
 80034c6:	f100 000e 	add.w	r0, r0, #14
 80034ca:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 80034ce:	4871      	ldr	r0, [pc, #452]	; (8003694 <HAL_SPI_RxCpltCallback+0x24c>)
 80034d0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80034d4:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80034d6:	d0dd      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034d8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80034da:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034dc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80034e0:	f895 e01d 	ldrb.w	lr, [r5, #29]
 80034e4:	6815      	ldr	r5, [r2, #0]
 80034e6:	f105 0c0f 	add.w	ip, r5, #15
 80034ea:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80034ee:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80034f2:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 80034f4:	d0ce      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034f6:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80034f8:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80034fa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80034fe:	f895 e01f 	ldrb.w	lr, [r5, #31]
 8003502:	6815      	ldr	r5, [r2, #0]
 8003504:	f105 0c10 	add.w	ip, r5, #16
 8003508:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800350c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003510:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003512:	d0bf      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003514:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003516:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003518:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800351c:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 8003520:	6815      	ldr	r5, [r2, #0]
 8003522:	f105 0c11 	add.w	ip, r5, #17
 8003526:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800352a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800352e:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003530:	d0b0      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003532:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003534:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003536:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800353a:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 800353e:	6815      	ldr	r5, [r2, #0]
 8003540:	f105 0c12 	add.w	ip, r5, #18
 8003544:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003548:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800354c:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800354e:	d0a1      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003550:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003552:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003554:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003558:	f895 e025 	ldrb.w	lr, [r5, #37]	; 0x25
 800355c:	6815      	ldr	r5, [r2, #0]
 800355e:	f105 0c13 	add.w	ip, r5, #19
 8003562:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003566:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800356a:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 800356c:	d092      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800356e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003570:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003572:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003576:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 800357a:	6815      	ldr	r5, [r2, #0]
 800357c:	f105 0514 	add.w	r5, r5, #20
 8003580:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003584:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003588:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 800358a:	d083      	beq.n	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800358c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800358e:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003590:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003594:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8003598:	6815      	ldr	r5, [r2, #0]
 800359a:	f105 0515 	add.w	r5, r5, #21
 800359e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80035a2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80035a6:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035a8:	f43f af74 	beq.w	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035ac:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035ae:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035b0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035b4:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 80035b8:	6815      	ldr	r5, [r2, #0]
 80035ba:	f105 0516 	add.w	r5, r5, #22
 80035be:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80035c2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80035c6:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035c8:	f43f af64 	beq.w	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035cc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035ce:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035d0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035d4:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 80035d8:	6815      	ldr	r5, [r2, #0]
 80035da:	f105 0517 	add.w	r5, r5, #23
 80035de:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80035e2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80035e6:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 80035e8:	f43f af54 	beq.w	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035ec:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035ee:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035f0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035f4:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 80035f8:	6815      	ldr	r5, [r2, #0]
 80035fa:	f105 0518 	add.w	r5, r5, #24
 80035fe:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003602:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003606:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8003608:	f43f af44 	beq.w	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800360c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800360e:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003610:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003614:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8003618:	6815      	ldr	r5, [r2, #0]
 800361a:	f105 0519 	add.w	r5, r5, #25
 800361e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8003622:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8003626:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8003628:	f43f af34 	beq.w	8003494 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8003630:	7bda      	ldrb	r2, [r3, #15]
 8003632:	2afd      	cmp	r2, #253	; 0xfd
 8003634:	f47f af26 	bne.w	8003484 <HAL_SPI_RxCpltCallback+0x3c>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 8003638:	7a98      	ldrb	r0, [r3, #10]
 800363a:	7a1d      	ldrb	r5, [r3, #8]
 800363c:	7a5a      	ldrb	r2, [r3, #9]
 800363e:	7ad9      	ldrb	r1, [r3, #11]
 8003640:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8003644:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8003648:	4813      	ldr	r0, [pc, #76]	; (8003698 <HAL_SPI_RxCpltCallback+0x250>)
 800364a:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 800364e:	e719      	b.n	8003484 <HAL_SPI_RxCpltCallback+0x3c>
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8003650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003654:	2bfd      	cmp	r3, #253	; 0xfd
 8003656:	f47f af0c 	bne.w	8003472 <HAL_SPI_RxCpltCallback+0x2a>
			handleSPI(LEVER_BUFFER_SIZE);
 800365a:	2020      	movs	r0, #32
 800365c:	f001 f86a 	bl	8004734 <handleSPI>
			newLevers = 1;
 8003660:	e707      	b.n	8003472 <HAL_SPI_RxCpltCallback+0x2a>
 8003662:	bf00      	nop
 8003664:	20019568 	.word	0x20019568
 8003668:	2000451c 	.word	0x2000451c
 800366c:	200194e0 	.word	0x200194e0
 8003670:	20019458 	.word	0x20019458
 8003674:	30000100 	.word	0x30000100
 8003678:	200047ec 	.word	0x200047ec
 800367c:	30000180 	.word	0x30000180
 8003680:	200047e8 	.word	0x200047e8
 8003684:	300001a0 	.word	0x300001a0
 8003688:	200047f0 	.word	0x200047f0
 800368c:	20000066 	.word	0x20000066
 8003690:	200044a4 	.word	0x200044a4
 8003694:	20012e24 	.word	0x20012e24
 8003698:	20012e94 	.word	0x20012e94

0800369c <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800369c:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;

	if (hspi == &hspi5)
 800369e:	4b80      	ldr	r3, [pc, #512]	; (80038a0 <HAL_SPI_RxHalfCpltCallback+0x204>)
	interrupted = 1;
 80036a0:	2101      	movs	r1, #1
 80036a2:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_SPI_RxHalfCpltCallback+0x208>)
	if (hspi == &hspi5)
 80036a4:	4298      	cmp	r0, r3
	interrupted = 1;
 80036a6:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 80036a8:	d01d      	beq.n	80036e6 <HAL_SPI_RxHalfCpltCallback+0x4a>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 80036aa:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_SPI_RxHalfCpltCallback+0x20c>)
 80036ac:	4298      	cmp	r0, r3
 80036ae:	d011      	beq.n	80036d4 <HAL_SPI_RxHalfCpltCallback+0x38>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 80036b0:	4b7e      	ldr	r3, [pc, #504]	; (80038ac <HAL_SPI_RxHalfCpltCallback+0x210>)
 80036b2:	4298      	cmp	r0, r3
 80036b4:	d000      	beq.n	80036b8 <HAL_SPI_RxHalfCpltCallback+0x1c>
		{
			handleSPI(0);
			newLevers = 1;
		}
	}
}
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 80036b8:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <HAL_SPI_RxHalfCpltCallback+0x214>)
 80036ba:	7f9a      	ldrb	r2, [r3, #30]
 80036bc:	2afe      	cmp	r2, #254	; 0xfe
 80036be:	d1fa      	bne.n	80036b6 <HAL_SPI_RxHalfCpltCallback+0x1a>
 80036c0:	7fdb      	ldrb	r3, [r3, #31]
 80036c2:	2bfd      	cmp	r3, #253	; 0xfd
 80036c4:	d1f7      	bne.n	80036b6 <HAL_SPI_RxHalfCpltCallback+0x1a>
			handleSPI(0);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f001 f834 	bl	8004734 <handleSPI>
			newLevers = 1;
 80036cc:	4b79      	ldr	r3, [pc, #484]	; (80038b4 <HAL_SPI_RxHalfCpltCallback+0x218>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 80036d4:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <HAL_SPI_RxHalfCpltCallback+0x21c>)
 80036d6:	799a      	ldrb	r2, [r3, #6]
 80036d8:	2afe      	cmp	r2, #254	; 0xfe
 80036da:	f000 80d0 	beq.w	800387e <HAL_SPI_RxHalfCpltCallback+0x1e2>
		newBar = 1;
 80036de:	4b77      	ldr	r3, [pc, #476]	; (80038bc <HAL_SPI_RxHalfCpltCallback+0x220>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e7e4      	b.n	80036b0 <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 80036e6:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_SPI_RxHalfCpltCallback+0x224>)
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	2afe      	cmp	r2, #254	; 0xfe
 80036ec:	d003      	beq.n	80036f6 <HAL_SPI_RxHalfCpltCallback+0x5a>
		newPluck = 1;
 80036ee:	4b75      	ldr	r3, [pc, #468]	; (80038c4 <HAL_SPI_RxHalfCpltCallback+0x228>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e7d9      	b.n	80036aa <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 80036f6:	7e5a      	ldrb	r2, [r3, #25]
 80036f8:	2afd      	cmp	r2, #253	; 0xfd
 80036fa:	d1f8      	bne.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
			for (int i = 0; i < numStringsThisBoard; i++)
 80036fc:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <HAL_SPI_RxHalfCpltCallback+0x22c>)
 80036fe:	7811      	ldrb	r1, [r2, #0]
 8003700:	2900      	cmp	r1, #0
 8003702:	d0f4      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003704:	4a71      	ldr	r2, [pc, #452]	; (80038cc <HAL_SPI_RxHalfCpltCallback+0x230>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8003706:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003708:	6814      	ldr	r4, [r2, #0]
 800370a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800370e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003712:	6814      	ldr	r4, [r2, #0]
 8003714:	f104 0401 	add.w	r4, r4, #1
 8003718:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 800371c:	4c6c      	ldr	r4, [pc, #432]	; (80038d0 <HAL_SPI_RxHalfCpltCallback+0x234>)
 800371e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003722:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003724:	d0e3      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003726:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003728:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800372a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800372e:	f895 e003 	ldrb.w	lr, [r5, #3]
 8003732:	6815      	ldr	r5, [r2, #0]
 8003734:	f105 0c02 	add.w	ip, r5, #2
 8003738:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800373c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003740:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003742:	d0d4      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003744:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003746:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003748:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800374c:	f895 e005 	ldrb.w	lr, [r5, #5]
 8003750:	6815      	ldr	r5, [r2, #0]
 8003752:	f105 0c03 	add.w	ip, r5, #3
 8003756:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800375a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800375e:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003760:	d0c5      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003762:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003764:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003766:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800376a:	f895 e007 	ldrb.w	lr, [r5, #7]
 800376e:	6815      	ldr	r5, [r2, #0]
 8003770:	f105 0c04 	add.w	ip, r5, #4
 8003774:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003778:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800377c:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 800377e:	d0b6      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003780:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003782:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003784:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003788:	f895 e009 	ldrb.w	lr, [r5, #9]
 800378c:	6815      	ldr	r5, [r2, #0]
 800378e:	f105 0c05 	add.w	ip, r5, #5
 8003792:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003796:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800379a:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800379c:	d0a7      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800379e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037a0:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037a2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037a6:	f895 e00b 	ldrb.w	lr, [r5, #11]
 80037aa:	6815      	ldr	r5, [r2, #0]
 80037ac:	f105 0c06 	add.w	ip, r5, #6
 80037b0:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80037b4:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80037b8:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ba:	d098      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037bc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037be:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037c4:	f895 c00d 	ldrb.w	ip, [r5, #13]
 80037c8:	6815      	ldr	r5, [r2, #0]
 80037ca:	f105 0507 	add.w	r5, r5, #7
 80037ce:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80037d2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80037d6:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037d8:	d089      	beq.n	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037da:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037dc:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037de:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037e2:	f895 c00f 	ldrb.w	ip, [r5, #15]
 80037e6:	6815      	ldr	r5, [r2, #0]
 80037e8:	f105 0508 	add.w	r5, r5, #8
 80037ec:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80037f0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80037f4:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037f6:	f43f af7a 	beq.w	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037fa:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037fc:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037fe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003802:	f895 c011 	ldrb.w	ip, [r5, #17]
 8003806:	6815      	ldr	r5, [r2, #0]
 8003808:	f105 0509 	add.w	r5, r5, #9
 800380c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003810:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003814:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003816:	f43f af6a 	beq.w	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800381a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800381c:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800381e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003822:	f895 c013 	ldrb.w	ip, [r5, #19]
 8003826:	6815      	ldr	r5, [r2, #0]
 8003828:	f105 050a 	add.w	r5, r5, #10
 800382c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003830:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003834:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8003836:	f43f af5a 	beq.w	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800383a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800383c:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800383e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003842:	f895 c015 	ldrb.w	ip, [r5, #21]
 8003846:	6815      	ldr	r5, [r2, #0]
 8003848:	f105 050b 	add.w	r5, r5, #11
 800384c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003850:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003854:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8003856:	f43f af4a 	beq.w	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800385a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800385c:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800385e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003862:	f895 c017 	ldrb.w	ip, [r5, #23]
 8003866:	6815      	ldr	r5, [r2, #0]
 8003868:	f105 050c 	add.w	r5, r5, #12
 800386c:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8003870:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8003874:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8003876:	f43f af3a 	beq.w	80036ee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 800387e:	79da      	ldrb	r2, [r3, #7]
 8003880:	2afd      	cmp	r2, #253	; 0xfd
 8003882:	f47f af2c 	bne.w	80036de <HAL_SPI_RxHalfCpltCallback+0x42>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8003886:	789c      	ldrb	r4, [r3, #2]
 8003888:	781d      	ldrb	r5, [r3, #0]
 800388a:	785a      	ldrb	r2, [r3, #1]
 800388c:	78d9      	ldrb	r1, [r3, #3]
 800388e:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8003892:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8003896:	4c0f      	ldr	r4, [pc, #60]	; (80038d4 <HAL_SPI_RxHalfCpltCallback+0x238>)
 8003898:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 800389c:	e71f      	b.n	80036de <HAL_SPI_RxHalfCpltCallback+0x42>
 800389e:	bf00      	nop
 80038a0:	20019568 	.word	0x20019568
 80038a4:	2000451c 	.word	0x2000451c
 80038a8:	200194e0 	.word	0x200194e0
 80038ac:	20019458 	.word	0x20019458
 80038b0:	30000100 	.word	0x30000100
 80038b4:	200047ec 	.word	0x200047ec
 80038b8:	30000180 	.word	0x30000180
 80038bc:	200047e8 	.word	0x200047e8
 80038c0:	300001a0 	.word	0x300001a0
 80038c4:	200047f0 	.word	0x200047f0
 80038c8:	20000066 	.word	0x20000066
 80038cc:	200044a4 	.word	0x200044a4
 80038d0:	20012e24 	.word	0x20012e24
 80038d4:	20012e94 	.word	0x20012e94

080038d8 <HAL_SAI_TxCpltCallback>:


void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_SAI_TxCpltCallback+0x10>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b103      	cbz	r3, 80038e0 <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 80038de:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 80038e0:	2010      	movs	r0, #16
 80038e2:	f7ff bb5f 	b.w	8002fa4 <audioFrame>
 80038e6:	bf00      	nop
 80038e8:	20012fec 	.word	0x20012fec

080038ec <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <HAL_SAI_TxHalfCpltCallback+0xc>)
 80038ee:	7818      	ldrb	r0, [r3, #0]
 80038f0:	b100      	cbz	r0, 80038f4 <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 80038f2:	4770      	bx	lr
	audioFrame(0);
 80038f4:	f7ff bb56 	b.w	8002fa4 <audioFrame>
 80038f8:	20012fec 	.word	0x20012fec

080038fc <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003904:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8003906:	b082      	sub	sp, #8
 8003908:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800390a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390e:	483b      	ldr	r0, [pc, #236]	; (80039fc <AudioCodec_init+0xfc>)
 8003910:	f005 f840 	bl	8008994 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8003914:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8003916:	4c3a      	ldr	r4, [pc, #232]	; (8003a00 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8003918:	f003 fa64 	bl	8006de4 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800391c:	4f39      	ldr	r7, [pc, #228]	; (8003a04 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 800391e:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003922:	4e39      	ldr	r6, [pc, #228]	; (8003a08 <AudioCodec_init+0x108>)
 8003924:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8003926:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003928:	2120      	movs	r1, #32
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4628      	mov	r0, r5
 800392e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003a10 <AudioCodec_init+0x110>
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	8833      	ldrh	r3, [r6, #0]
 8003936:	f005 f957 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800393e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003942:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8003944:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003948:	2120      	movs	r1, #32
 800394a:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 800394c:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800394e:	8833      	ldrh	r3, [r6, #0]
 8003950:	f005 f94a 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003958:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800395c:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 800395e:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003960:	2120      	movs	r1, #32
 8003962:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8003964:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003966:	8833      	ldrh	r3, [r6, #0]
 8003968:	f005 f93e 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003970:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003974:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8003976:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800397a:	2120      	movs	r1, #32
 800397c:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 800397e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003980:	8833      	ldrh	r3, [r6, #0]
 8003982:	f005 f931 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800398a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800398e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8003990:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003994:	2120      	movs	r1, #32
 8003996:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8003998:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800399a:	8833      	ldrh	r3, [r6, #0]
 800399c:	f005 f924 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039a4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039a8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 80039aa:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039ae:	2120      	movs	r1, #32
 80039b0:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 80039b2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039b4:	8833      	ldrh	r3, [r6, #0]
 80039b6:	f005 f917 	bl	8008be8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039be:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039c2:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 80039c4:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039c8:	2120      	movs	r1, #32
 80039ca:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 80039cc:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039ce:	8833      	ldrh	r3, [r6, #0]
 80039d0:	f005 f90a 	bl	8008be8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039d4:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 80039d6:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039da:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039dc:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039e0:	4628      	mov	r0, r5
 80039e2:	9200      	str	r2, [sp, #0]
 80039e4:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 80039e6:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039e8:	2120      	movs	r1, #32
 80039ea:	f005 f8fd 	bl	8008be8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <AudioCodec_init+0x10c>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

}
 80039f4:	b002      	add	sp, #8
 80039f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039fa:	bf00      	nop
 80039fc:	58020800 	.word	0x58020800
 8003a00:	20012f1c 	.word	0x20012f1c
 8003a04:	20000080 	.word	0x20000080
 8003a08:	20000084 	.word	0x20000084
 8003a0c:	2000037c 	.word	0x2000037c
 8003a10:	20012f1e 	.word	0x20012f1e

08003a14 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003a16:	210b      	movs	r1, #11
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4608      	mov	r0, r1
{
 8003a1c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a1e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8003a22:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a24:	f044 0401 	orr.w	r4, r4, #1
 8003a28:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8003a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003a38:	f003 fa08 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003a3c:	200b      	movs	r0, #11
 8003a3e:	f003 fa43 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	210a      	movs	r1, #10
 8003a46:	200c      	movs	r0, #12
 8003a48:	f003 fa00 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003a4c:	200c      	movs	r0, #12
 8003a4e:	f003 fa3b 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2109      	movs	r1, #9
 8003a56:	200d      	movs	r0, #13
 8003a58:	f003 f9f8 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003a5c:	200d      	movs	r0, #13
 8003a5e:	f003 fa33 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2108      	movs	r1, #8
 8003a66:	200e      	movs	r0, #14
 8003a68:	f003 f9f0 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003a6c:	200e      	movs	r0, #14
 8003a6e:	f003 fa2b 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8003a72:	200f      	movs	r0, #15
 8003a74:	2200      	movs	r2, #0
 8003a76:	2107      	movs	r1, #7
 8003a78:	f003 f9e8 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003a7c:	200f      	movs	r0, #15

}
 8003a7e:	b002      	add	sp, #8
 8003a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003a84:	f003 ba20 	b.w	8006ec8 <HAL_NVIC_EnableIRQ>
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	00000000 	.word	0x00000000

08003a90 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003a90:	481f      	ldr	r0, [pc, #124]	; (8003b10 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003a92:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003a94:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003a96:	2108      	movs	r1, #8
{
 8003a98:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003a9a:	4c1e      	ldr	r4, [pc, #120]	; (8003b14 <MX_FMC_Init+0x84>)
{
 8003a9c:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003a9e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003aa0:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003aa2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8003aa4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003aa8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003aae:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003ab0:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ab2:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ab6:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003ab8:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003aba:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8003ac2:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003ac4:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8003ac8:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003aca:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8003acc:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8003ace:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8003b08 <MX_FMC_Init+0x78>
 8003ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	2302      	movs	r3, #2
 8003ada:	ed8d 7b00 	vstr	d7, [sp]
 8003ade:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003ae2:	f009 fb13 	bl	800d10c <HAL_SDRAM_Init>
 8003ae6:	b928      	cbnz	r0, 8003af4 <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003ae8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003aec:	f003 f992 	bl	8006e14 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003af0:	b008      	add	sp, #32
 8003af2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003af4:	f002 fc94 	bl	8006420 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003af8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003afc:	f003 f98a 	bl	8006e14 <HAL_SetFMCMemorySwappingConfig>
}
 8003b00:	b008      	add	sp, #32
 8003b02:	bd10      	pop	{r4, pc}
 8003b04:	f3af 8000 	nop.w
 8003b08:	00000002 	.word	0x00000002
 8003b0c:	00000006 	.word	0x00000006
 8003b10:	20012f24 	.word	0x20012f24
 8003b14:	52004140 	.word	0x52004140

08003b18 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8003b18:	4836      	ldr	r0, [pc, #216]	; (8003bf4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003b1c:	b5d0      	push	{r4, r6, r7, lr}
 8003b1e:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8003b20:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003b26:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b2a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8003b2c:	b109      	cbz	r1, 8003b32 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003b2e:	b038      	add	sp, #224	; 0xe0
 8003b30:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8003b32:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b34:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8003b36:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b38:	a80a      	add	r0, sp, #40	; 0x28
 8003b3a:	f015 fd49 	bl	80195d0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003b3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b42:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b44:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003b46:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b4a:	f006 fccd 	bl	800a4e8 <HAL_RCCEx_PeriphCLKConfig>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d14c      	bne.n	8003bec <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b54:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8003b58:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b5a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b5c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b60:	2600      	movs	r6, #0
 8003b62:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003b6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b70:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b7a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b7c:	a902      	add	r1, sp, #8
 8003b7e:	481f      	ldr	r0, [pc, #124]	; (8003bfc <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b80:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b82:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b86:	f004 fdb5 	bl	80086f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003b8a:	2219      	movs	r2, #25
 8003b8c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8e:	a902      	add	r1, sp, #8
 8003b90:	481b      	ldr	r0, [pc, #108]	; (8003c00 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b98:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9c:	f004 fdaa 	bl	80086f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003ba0:	f248 1237 	movw	r2, #33079	; 0x8137
 8003ba4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ba6:	a902      	add	r1, sp, #8
 8003ba8:	4816      	ldr	r0, [pc, #88]	; (8003c04 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003baa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bb0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bb4:	f004 fd9e 	bl	80086f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003bb8:	f64f 7283 	movw	r2, #65411	; 0xff83
 8003bbc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bbe:	a902      	add	r1, sp, #8
 8003bc0:	4811      	ldr	r0, [pc, #68]	; (8003c08 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bcc:	f004 fd92 	bl	80086f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003bd0:	f24c 7203 	movw	r2, #50947	; 0xc703
 8003bd4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd6:	a902      	add	r1, sp, #8
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003bdc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be4:	f004 fd86 	bl	80086f4 <HAL_GPIO_Init>
}
 8003be8:	b038      	add	sp, #224	; 0xe0
 8003bea:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003bec:	f002 fc18 	bl	8006420 <Error_Handler>
 8003bf0:	e7af      	b.n	8003b52 <HAL_SDRAM_MspInit+0x3a>
 8003bf2:	bf00      	nop
 8003bf4:	20012f20 	.word	0x20012f20
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58021400 	.word	0x58021400
 8003c00:	58020800 	.word	0x58020800
 8003c04:	58021800 	.word	0x58021800
 8003c08:	58021000 	.word	0x58021000
 8003c0c:	58020c00 	.word	0x58020c00

08003c10 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <MX_GPIO_Init+0x200>)
{
 8003c16:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c1a:	4f7e      	ldr	r7, [pc, #504]	; (8003e14 <MX_GPIO_Init+0x204>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003c1c:	4e7e      	ldr	r6, [pc, #504]	; (8003e18 <MX_GPIO_Init+0x208>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c24:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003c26:	4d7d      	ldr	r5, [pc, #500]	; (8003e1c <MX_GPIO_Init+0x20c>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c28:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c2c:	f04f 0800 	mov.w	r8, #0
 8003c30:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003c38:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c40:	f042 0210 	orr.w	r2, r2, #16
 8003c44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c4c:	f002 0210 	and.w	r2, r2, #16
 8003c50:	9200      	str	r2, [sp, #0]
 8003c52:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c58:	f042 0204 	orr.w	r2, r2, #4
 8003c5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c64:	f002 0204 	and.w	r2, r2, #4
 8003c68:	9201      	str	r2, [sp, #4]
 8003c6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c70:	f042 0220 	orr.w	r2, r2, #32
 8003c74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c7c:	f002 0220 	and.w	r2, r2, #32
 8003c80:	9202      	str	r2, [sp, #8]
 8003c82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003c98:	9203      	str	r2, [sp, #12]
 8003c9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ca8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cac:	f002 0201 	and.w	r2, r2, #1
 8003cb0:	9204      	str	r2, [sp, #16]
 8003cb2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cb8:	f042 0202 	orr.w	r2, r2, #2
 8003cbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003cc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cc4:	f002 0202 	and.w	r2, r2, #2
 8003cc8:	9205      	str	r2, [sp, #20]
 8003cca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ccc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003cd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cdc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003ce0:	9206      	str	r2, [sp, #24]
 8003ce2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ce8:	f042 0208 	orr.w	r2, r2, #8
 8003cec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003cf0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	9307      	str	r3, [sp, #28]
 8003cfc:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003cfe:	f004 fe49 	bl	8008994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003d02:	4622      	mov	r2, r4
 8003d04:	4630      	mov	r0, r6
 8003d06:	2102      	movs	r1, #2
 8003d08:	f004 fe44 	bl	8008994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	2110      	movs	r1, #16
 8003d12:	f004 fe3f 	bl	8008994 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003d16:	f242 0220 	movw	r2, #8224	; 0x2020
 8003d1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1c:	a908      	add	r1, sp, #32
 8003d1e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d20:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003d24:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d28:	f004 fce4 	bl	80086f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d30:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d32:	a908      	add	r1, sp, #32
 8003d34:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d3a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3e:	f004 fcd9 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003d42:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8003d46:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d48:	4638      	mov	r0, r7
 8003d4a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003d4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d52:	f004 fccf 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d5a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d5c:	a908      	add	r1, sp, #32
 8003d5e:	4830      	ldr	r0, [pc, #192]	; (8003e20 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d62:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d66:	f004 fcc5 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6e:	a908      	add	r1, sp, #32
 8003d70:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d72:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	f004 fcbb 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d7e:	2202      	movs	r2, #2
 8003d80:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d82:	a908      	add	r1, sp, #32
 8003d84:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d8a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8e:	f004 fcb1 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003d92:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8003d96:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	4630      	mov	r0, r6
 8003d9a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003d9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	f004 fca7 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003da6:	f240 32e5 	movw	r2, #997	; 0x3e5
 8003daa:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dac:	a908      	add	r1, sp, #32
 8003dae:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003db2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	f004 fc9d 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dba:	2202      	movs	r2, #2
 8003dbc:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbe:	a908      	add	r1, sp, #32
 8003dc0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dc2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dca:	f004 fc93 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003dce:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8003dd2:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dd4:	a908      	add	r1, sp, #32
 8003dd6:	4813      	ldr	r0, [pc, #76]	; (8003e24 <MX_GPIO_Init+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003dda:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dde:	f004 fc89 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8003de2:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8003de6:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003de8:	a908      	add	r1, sp, #32
 8003dea:	480f      	ldr	r0, [pc, #60]	; (8003e28 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8003dee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003df2:	f004 fc7f 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003df6:	2210      	movs	r2, #16
 8003df8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfa:	a908      	add	r1, sp, #32
 8003dfc:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003dfe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003e02:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e06:	f004 fc75 	bl	80086f4 <HAL_GPIO_Init>

}
 8003e0a:	b00e      	add	sp, #56	; 0x38
 8003e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58020800 	.word	0x58020800
 8003e18:	58020000 	.word	0x58020000
 8003e1c:	58020400 	.word	0x58020400
 8003e20:	58021400 	.word	0x58021400
 8003e24:	58020c00 	.word	0x58020c00
 8003e28:	58021800 	.word	0x58021800

08003e2c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003e2c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003e2e:	4817      	ldr	r0, [pc, #92]	; (8003e8c <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e30:	2300      	movs	r3, #0
 8003e32:	4917      	ldr	r1, [pc, #92]	; (8003e90 <MX_I2C2_Init+0x64>)
 8003e34:	2401      	movs	r4, #1
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e38:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e3a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8003e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e42:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e46:	f004 fe71 	bl	8008b2c <HAL_I2C_Init>
 8003e4a:	b950      	cbnz	r0, 8003e62 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	480f      	ldr	r0, [pc, #60]	; (8003e8c <MX_I2C2_Init+0x60>)
 8003e50:	f005 fbfa 	bl	8009648 <HAL_I2CEx_ConfigAnalogFilter>
 8003e54:	b968      	cbnz	r0, 8003e72 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003e56:	2100      	movs	r1, #0
 8003e58:	480c      	ldr	r0, [pc, #48]	; (8003e8c <MX_I2C2_Init+0x60>)
 8003e5a:	f005 fc29 	bl	80096b0 <HAL_I2CEx_ConfigDigitalFilter>
 8003e5e:	b980      	cbnz	r0, 8003e82 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003e60:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003e62:	f002 fadd 	bl	8006420 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e66:	2100      	movs	r1, #0
 8003e68:	4808      	ldr	r0, [pc, #32]	; (8003e8c <MX_I2C2_Init+0x60>)
 8003e6a:	f005 fbed 	bl	8009648 <HAL_I2CEx_ConfigAnalogFilter>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d0f1      	beq.n	8003e56 <MX_I2C2_Init+0x2a>
    Error_Handler();
 8003e72:	f002 fad5 	bl	8006420 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003e76:	2100      	movs	r1, #0
 8003e78:	4804      	ldr	r0, [pc, #16]	; (8003e8c <MX_I2C2_Init+0x60>)
 8003e7a:	f005 fc19 	bl	80096b0 <HAL_I2CEx_ConfigDigitalFilter>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d0ee      	beq.n	8003e60 <MX_I2C2_Init+0x34>
}
 8003e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003e86:	f002 bacb 	b.w	8006420 <Error_Handler>
 8003e8a:	bf00      	nop
 8003e8c:	20012f58 	.word	0x20012f58
 8003e90:	40005800 	.word	0x40005800
 8003e94:	00b03fdb 	.word	0x00b03fdb

08003e98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	2100      	movs	r1, #0
{
 8003e9e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ea0:	22c0      	movs	r2, #192	; 0xc0
 8003ea2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	9106      	str	r1, [sp, #24]
 8003ea6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003eaa:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eae:	f015 fb8f 	bl	80195d0 <memset>
  if(i2cHandle->Instance==I2C2)
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_I2C_MspInit+0xb8>)
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003eba:	b038      	add	sp, #224	; 0xe0
 8003ebc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ec2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003ec4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ec8:	f006 fb0e 	bl	800a4e8 <HAL_RCCEx_PeriphCLKConfig>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d138      	bne.n	8003f42 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed0:	4c20      	ldr	r4, [pc, #128]	; (8003f54 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ed2:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	a902      	add	r1, sp, #8
 8003ed6:	4820      	ldr	r0, [pc, #128]	; (8003f58 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003ee4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ee8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003eea:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eec:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ef0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8003f48 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003efe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f02:	f004 fbf7 	bl	80086f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f06:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003f12:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f14:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003f18:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003f24:	f002 ff92 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003f28:	2021      	movs	r0, #33	; 0x21
 8003f2a:	f002 ffcd 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2101      	movs	r1, #1
 8003f32:	2022      	movs	r0, #34	; 0x22
 8003f34:	f002 ff8a 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003f38:	2022      	movs	r0, #34	; 0x22
 8003f3a:	f002 ffc5 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
}
 8003f3e:	b038      	add	sp, #224	; 0xe0
 8003f40:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003f42:	f002 fa6d 	bl	8006420 <Error_Handler>
 8003f46:	e7c3      	b.n	8003ed0 <HAL_I2C_MspInit+0x38>
 8003f48:	00000c00 	.word	0x00000c00
 8003f4c:	00000012 	.word	0x00000012
 8003f50:	40005800 	.word	0x40005800
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58020400 	.word	0x58020400

08003f5c <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 8003f5c:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8003f60:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003f70 <scaleOscPitch+0x14>
}
 8003f64:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003f68:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	42400000 	.word	0x42400000

08003f74 <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 8003f74:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003f88 <scaleOscFine+0x14>
 8003f78:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003f8c <scaleOscFine+0x18>
}
 8003f7c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	43480000 	.word	0x43480000
 8003f8c:	c2c80000 	.word	0xc2c80000

08003f90 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 8003f90:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003fa4 <scaleOscFreq+0x14>
 8003f94:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003fa8 <scaleOscFreq+0x18>
}
 8003f98:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	457a0000 	.word	0x457a0000
 8003fa8:	c4fa0000 	.word	0xc4fa0000

08003fac <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 8003fac:	eddf 7a02 	vldr	s15, [pc, #8]	; 8003fb8 <scaleFilterCutoff+0xc>
}
 8003fb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	42fe0000 	.word	0x42fe0000

08003fbc <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 8003fbc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003fd0 <scaleFinalLowpass+0x14>
 8003fc0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003fd4 <scaleFinalLowpass+0x18>
}
 8003fc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	428c0000 	.word	0x428c0000
 8003fd4:	42680000 	.word	0x42680000

08003fd8 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <checkForSDCardPreset>:
{
 8003fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 8003fe0:	2301      	movs	r3, #1
{
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 8003fe6:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8003fea:	f00a ffd1 	bl	800ef90 <BSP_PlatformIsDetected>
 8003fee:	b110      	cbz	r0, 8003ff6 <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 8003ff6:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8003ffa:	b95b      	cbnz	r3, 8004014 <checkForSDCardPreset+0x38>
 8003ffc:	4c39      	ldr	r4, [pc, #228]	; (80040e4 <checkForSDCardPreset+0x108>)
 8003ffe:	4d3a      	ldr	r5, [pc, #232]	; (80040e8 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 8004000:	2301      	movs	r3, #1
 8004002:	2000      	movs	r0, #0
 8004004:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <checkForSDCardPreset+0x110>)
 800400a:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 800400c:	7023      	strb	r3, [r4, #0]
}
 800400e:	b00a      	add	sp, #40	; 0x28
 8004010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 8004014:	2700      	movs	r7, #0
		diskBusy = 1;
 8004016:	f04f 0801 	mov.w	r8, #1
 800401a:	4c32      	ldr	r4, [pc, #200]	; (80040e4 <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 800401c:	4d32      	ldr	r5, [pc, #200]	; (80040e8 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 800401e:	4638      	mov	r0, r7
		diskBusy = 1;
 8004020:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 8004024:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 8004026:	f00b f84d 	bl	800f0c4 <disk_initialize>
	    disk_status(0);
 800402a:	4638      	mov	r0, r7
 800402c:	f00b f840 	bl	800f0b0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8004030:	4642      	mov	r2, r8
 8004032:	492f      	ldr	r1, [pc, #188]	; (80040f0 <checkForSDCardPreset+0x114>)
 8004034:	482f      	ldr	r0, [pc, #188]	; (80040f4 <checkForSDCardPreset+0x118>)
 8004036:	f00d fad9 	bl	80115ec <f_mount>
 800403a:	2800      	cmp	r0, #0
 800403c:	d1e0      	bne.n	8004000 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 800403e:	a904      	add	r1, sp, #16
 8004040:	220a      	movs	r2, #10
 8004042:	4630      	mov	r0, r6
 8004044:	f015 fab4 	bl	80195b0 <itoa>
			int len = ((strlen(charBuf)));
 8004048:	a804      	add	r0, sp, #16
 800404a:	f7fc f945 	bl	80002d8 <strlen>
			if (len == 1)
 800404e:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 8004050:	4601      	mov	r1, r0
			if (len == 1)
 8004052:	d02d      	beq.n	80040b0 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 8004054:	ab04      	add	r3, sp, #16
 8004056:	4e28      	ldr	r6, [pc, #160]	; (80040f8 <checkForSDCardPreset+0x11c>)
 8004058:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 800405c:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 800405e:	181f      	adds	r7, r3, r0
 8004060:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 8004062:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 8004064:	f84c 0001 	str.w	r0, [ip, r1]
 8004068:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 800406a:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 800406c:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 800406e:	4661      	mov	r1, ip
 8004070:	f015 faa0 	bl	80195b4 <memcpy>
 8004074:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <checkForSDCardPreset+0x114>)
 8004078:	4920      	ldr	r1, [pc, #128]	; (80040fc <checkForSDCardPreset+0x120>)
 800407a:	4821      	ldr	r0, [pc, #132]	; (8004100 <checkForSDCardPreset+0x124>)
 800407c:	f00e f826 	bl	80120cc <f_findfirst>
			if(res == FR_OK)
 8004080:	2800      	cmp	r0, #0
 8004082:	d1bd      	bne.n	8004000 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8004084:	4e1f      	ldr	r6, [pc, #124]	; (8004104 <checkForSDCardPreset+0x128>)
 8004086:	2211      	movs	r2, #17
 8004088:	491f      	ldr	r1, [pc, #124]	; (8004108 <checkForSDCardPreset+0x12c>)
 800408a:	4630      	mov	r0, r6
 800408c:	f00d fb00 	bl	8011690 <f_open>
 8004090:	2800      	cmp	r0, #0
 8004092:	d1b5      	bne.n	8004000 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8004094:	ab03      	add	r3, sp, #12
 8004096:	68f2      	ldr	r2, [r6, #12]
 8004098:	491c      	ldr	r1, [pc, #112]	; (800410c <checkForSDCardPreset+0x130>)
 800409a:	4630      	mov	r0, r6
 800409c:	f00d fc76 	bl	801198c <f_read>
					presetWaitingToParse = bytesRead;
 80040a0:	9a03      	ldr	r2, [sp, #12]
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 80040a4:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 80040a6:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 80040a8:	f00d ff04 	bl	8011eb4 <f_close>
					found = 1;
 80040ac:	2001      	movs	r0, #1
 80040ae:	e7aa      	b.n	8004006 <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 80040b0:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 80040b4:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 80040b6:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 80040ba:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 80040be:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 80040c0:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 80040c2:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 80040c6:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 80040c8:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 80040cc:	f7fc f904 	bl	80002d8 <strlen>
 80040d0:	4909      	ldr	r1, [pc, #36]	; (80040f8 <checkForSDCardPreset+0x11c>)
 80040d2:	4602      	mov	r2, r0
 80040d4:	9b01      	ldr	r3, [sp, #4]
 80040d6:	181e      	adds	r6, r3, r0
 80040d8:	6808      	ldr	r0, [r1, #0]
 80040da:	5098      	str	r0, [r3, r2]
 80040dc:	790a      	ldrb	r2, [r1, #4]
 80040de:	7132      	strb	r2, [r6, #4]
 80040e0:	e7c9      	b.n	8004076 <checkForSDCardPreset+0x9a>
 80040e2:	bf00      	nop
 80040e4:	20012fec 	.word	0x20012fec
 80040e8:	2001519c 	.word	0x2001519c
 80040ec:	20016c2c 	.word	0x20016c2c
 80040f0:	20019a58 	.word	0x20019a58
 80040f4:	200195f4 	.word	0x200195f4
 80040f8:	0801b78c 	.word	0x0801b78c
 80040fc:	20015050 	.word	0x20015050
 8004100:	20012fb4 	.word	0x20012fb4
 8004104:	20019828 	.word	0x20019828
 8004108:	20015066 	.word	0x20015066
 800410c:	300001e0 	.word	0x300001e0
 8004110:	20016c30 	.word	0x20016c30

08004114 <scaleDefault>:
{
 8004114:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004118:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004124 <scaleDefault+0x10>
 800411c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004120:	f010 b98e 	b.w	8014440 <LEAF_clip>
 8004124:	00000000 	.word	0x00000000

08004128 <scaleTranspose>:
{
 8004128:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 800412c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800414c <scaleTranspose+0x24>
 8004130:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8004134:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 8004136:	f010 f983 	bl	8014440 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 800413a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004150 <scaleTranspose+0x28>
 800413e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004154 <scaleTranspose+0x2c>
}
 8004142:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004146:	eeb0 0a67 	vmov.f32	s0, s15
 800414a:	bd08      	pop	{r3, pc}
 800414c:	00000000 	.word	0x00000000
 8004150:	42c00000 	.word	0x42c00000
 8004154:	c2400000 	.word	0xc2400000

08004158 <scalePitchBend>:
{
 8004158:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 800415c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004174 <scalePitchBend+0x1c>
 8004160:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8004164:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 8004166:	f010 f96b 	bl	8014440 <LEAF_clip>
	return (input * 48.0f);
 800416a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8004178 <scalePitchBend+0x20>
}
 800416e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004172:	bd08      	pop	{r3, pc}
 8004174:	00000000 	.word	0x00000000
 8004178:	42400000 	.word	0x42400000

0800417c <scaleFilterResonance>:
{
 800417c:	b510      	push	{r4, lr}
 800417e:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 8004182:	ed9f 9a21 	vldr	s18, [pc, #132]	; 8004208 <scaleFilterResonance+0x8c>
{
 8004186:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 800418a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800418e:	eeb0 0a49 	vmov.f32	s0, s18
 8004192:	f010 f955 	bl	8014440 <LEAF_clip>
 8004196:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 800419a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800420c <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 800419e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004210 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 80041a2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80041a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80041aa:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80041ae:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80041b2:	1c63      	adds	r3, r4, #1
 80041b4:	ee00 3a90 	vmov	s1, r3
 80041b8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80041bc:	f010 f940 	bl	8014440 <LEAF_clip>
 80041c0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80041c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 80041ca:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80041ce:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80041d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80041d6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80041da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80041de:	edd4 7a00 	vldr	s15, [r4]
 80041e2:	eeb0 0a49 	vmov.f32	s0, s18
 80041e6:	ed93 7a00 	vldr	s14, [r3]
 80041ea:	ee38 8a68 	vsub.f32	s16, s16, s17
 80041ee:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80041f2:	ee60 0a87 	vmul.f32	s1, s1, s14
 80041f6:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 80041fa:	ecbd 8b04 	vpop	{d8-d9}
 80041fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8004202:	f010 b91d 	b.w	8014440 <LEAF_clip>
 8004206:	bf00      	nop
 8004208:	3dcccccd 	.word	0x3dcccccd
 800420c:	44ffe000 	.word	0x44ffe000
 8004210:	00000000 	.word	0x00000000
 8004214:	20017038 	.word	0x20017038

08004218 <scaleEnvTimes>:
{
 8004218:	b510      	push	{r4, lr}
 800421a:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 800421e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8004294 <scaleEnvTimes+0x7c>
{
 8004222:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8004226:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800422a:	eeb0 0a68 	vmov.f32	s0, s17
 800422e:	f010 f907 	bl	8014440 <LEAF_clip>
 8004232:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8004236:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004298 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 800423a:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 800423e:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8004242:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004246:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 800424a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 800424e:	1c63      	adds	r3, r4, #1
 8004250:	ee00 3a90 	vmov	s1, r3
 8004254:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004258:	f010 f8f2 	bl	8014440 <LEAF_clip>
 800425c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 8004266:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 800426a:	ee10 2a10 	vmov	r2, s0
 800426e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004272:	ee38 8a07 	vadd.f32	s16, s16, s14
 8004276:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800427a:	ed94 7a00 	vldr	s14, [r4]
 800427e:	ed93 0a00 	vldr	s0, [r3]
 8004282:	ee38 8a68 	vsub.f32	s16, s16, s17
 8004286:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 800428a:	eea7 0a08 	vfma.f32	s0, s14, s16
 800428e:	ecbd 8b02 	vpop	{d8}
 8004292:	bd10      	pop	{r4, pc}
 8004294:	00000000 	.word	0x00000000
 8004298:	44ffe000 	.word	0x44ffe000
 800429c:	20013040 	.word	0x20013040

080042a0 <scaleLFORates>:
{
 80042a0:	b510      	push	{r4, lr}
 80042a2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 80042a6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800431c <scaleLFORates+0x7c>
{
 80042aa:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 80042ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80042b2:	eeb0 0a68 	vmov.f32	s0, s17
 80042b6:	f010 f8c3 	bl	8014440 <LEAF_clip>
 80042ba:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 80042be:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004320 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80042c2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 80042c6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80042ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80042ce:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80042d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80042d6:	1c63      	adds	r3, r4, #1
 80042d8:	ee00 3a90 	vmov	s1, r3
 80042dc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80042e0:	f010 f8ae 	bl	8014440 <LEAF_clip>
 80042e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 80042e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 80042ee:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 80042f2:	ee10 2a10 	vmov	r2, s0
 80042f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80042fa:	ee38 8a07 	vadd.f32	s16, s16, s14
 80042fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004302:	ed94 7a00 	vldr	s14, [r4]
 8004306:	ed93 0a00 	vldr	s0, [r3]
 800430a:	ee38 8a68 	vsub.f32	s16, s16, s17
 800430e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8004312:	eea7 0a08 	vfma.f32	s0, s14, s16
 8004316:	ecbd 8b02 	vpop	{d8}
 800431a:	bd10      	pop	{r4, pc}
 800431c:	00000000 	.word	0x00000000
 8004320:	44ffe000 	.word	0x44ffe000
 8004324:	24059020 	.word	0x24059020

08004328 <SystemClock_Config>:
{
 8004328:	b500      	push	{lr}
 800432a:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800432c:	224c      	movs	r2, #76	; 0x4c
 800432e:	2100      	movs	r1, #0
 8004330:	a80c      	add	r0, sp, #48	; 0x30
 8004332:	f015 f94d 	bl	80195d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004336:	2220      	movs	r2, #32
 8004338:	2100      	movs	r1, #0
 800433a:	a804      	add	r0, sp, #16
 800433c:	f015 f948 	bl	80195d0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004340:	2002      	movs	r0, #2
 8004342:	f005 f9e7 	bl	8009714 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004346:	4b40      	ldr	r3, [pc, #256]	; (8004448 <SystemClock_Config+0x120>)
 8004348:	2100      	movs	r1, #0
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <SystemClock_Config+0x124>)
 800434c:	9101      	str	r1, [sp, #4]
 800434e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004350:	f021 0101 	bic.w	r1, r1, #1
 8004354:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6993      	ldr	r3, [r2, #24]
 8004360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004364:	6193      	str	r3, [r2, #24]
 8004366:	6993      	ldr	r3, [r2, #24]
 8004368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004370:	6993      	ldr	r3, [r2, #24]
 8004372:	0499      	lsls	r1, r3, #18
 8004374:	d5fc      	bpl.n	8004370 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004376:	4b36      	ldr	r3, [pc, #216]	; (8004450 <SystemClock_Config+0x128>)
 8004378:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800437c:	f041 0102 	orr.w	r1, r1, #2
 8004380:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004384:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	9302      	str	r3, [sp, #8]
 8004390:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004392:	9103      	str	r1, [sp, #12]
 8004394:	6991      	ldr	r1, [r2, #24]
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <SystemClock_Config+0x120>)
 8004398:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800439c:	6191      	str	r1, [r2, #24]
 800439e:	6992      	ldr	r2, [r2, #24]
 80043a0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80043a4:	9203      	str	r2, [sp, #12]
 80043a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80043a8:	4a28      	ldr	r2, [pc, #160]	; (800444c <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80043aa:	f041 0101 	orr.w	r1, r1, #1
 80043ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80043ba:	6993      	ldr	r3, [r2, #24]
 80043bc:	049b      	lsls	r3, r3, #18
 80043be:	d5fc      	bpl.n	80043ba <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80043c2:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043c4:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80043c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d2:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80043d4:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 80043d6:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80043d8:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80043da:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80043dc:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80043de:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80043e0:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 80043e2:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80043e4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8004430 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043e8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80043ec:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80043f0:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80043f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80043f6:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fa:	f005 fa33 	bl	8009864 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043fe:	2200      	movs	r2, #0
 8004400:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004402:	2104      	movs	r1, #4
 8004404:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004406:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004438 <SystemClock_Config+0x110>
 800440a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800440e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004418:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004440 <SystemClock_Config+0x118>
 800441c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004420:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004424:	f005 fdb0 	bl	8009f88 <HAL_RCC_ClockConfig>
}
 8004428:	b021      	add	sp, #132	; 0x84
 800442a:	f85d fb04 	ldr.w	pc, [sp], #4
 800442e:	bf00      	nop
 8004430:	00000021 	.word	0x00000021
 8004434:	00010000 	.word	0x00010000
 8004438:	0000003f 	.word	0x0000003f
 800443c:	00000003 	.word	0x00000003
 8004440:	00000040 	.word	0x00000040
 8004444:	00000040 	.word	0x00000040
 8004448:	58000400 	.word	0x58000400
 800444c:	58024800 	.word	0x58024800
 8004450:	58024400 	.word	0x58024400
 8004454:	00000000 	.word	0x00000000

08004458 <PeriphCommonClock_Config>:
{
 8004458:	b500      	push	{lr}
 800445a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800445c:	22a4      	movs	r2, #164	; 0xa4
 800445e:	2100      	movs	r1, #0
 8004460:	a807      	add	r0, sp, #28
 8004462:	f015 f8b5 	bl	80195d0 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8004466:	2019      	movs	r0, #25
 8004468:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800446c:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800446e:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004470:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8004472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8004476:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8004478:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800447a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80044a0 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800447e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8004482:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004486:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8004488:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800448c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80044a8 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8004490:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8004492:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004496:	f006 f827 	bl	800a4e8 <HAL_RCCEx_PeriphCLKConfig>
}
 800449a:	b031      	add	sp, #196	; 0xc4
 800449c:	f85d fb04 	ldr.w	pc, [sp], #4
 80044a0:	00011100 	.word	0x00011100
 80044a4:	00000000 	.word	0x00000000
 80044a8:	00000007 	.word	0x00000007
 80044ac:	00000002 	.word	0x00000002

080044b0 <randomNumber>:
float randomNumber(void) {
 80044b0:	b500      	push	{lr}
 80044b2:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80044b4:	4807      	ldr	r0, [pc, #28]	; (80044d4 <randomNumber+0x24>)
 80044b6:	a901      	add	r1, sp, #4
 80044b8:	f007 fa3e 	bl	800b938 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80044bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80044c0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80044d8 <randomNumber+0x28>
 80044c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80044c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80044cc:	b003      	add	sp, #12
 80044ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80044d2:	bf00      	nop
 80044d4:	2001903c 	.word	0x2001903c
 80044d8:	2f80000d 	.word	0x2f80000d

080044dc <BSP_SD_IsDetected>:
{
 80044dc:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 80044de:	2301      	movs	r3, #1
{
 80044e0:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80044e2:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 80044e6:	f00a fd53 	bl	800ef90 <BSP_PlatformIsDetected>
 80044ea:	b110      	cbz	r0, 80044f2 <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 80044f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80044f6:	b003      	add	sp, #12
 80044f8:	f85d fb04 	ldr.w	pc, [sp], #4

080044fc <getPresetNamesFromSDCard>:
{
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8004500:	2301      	movs	r3, #1
{
 8004502:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8004504:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 8004508:	f00a fd42 	bl	800ef90 <BSP_PlatformIsDetected>
 800450c:	b110      	cbz	r0, 8004514 <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 800450e:	2300      	movs	r3, #0
 8004510:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 8004514:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8004518:	b93b      	cbnz	r3, 800452a <getPresetNamesFromSDCard+0x2e>
 800451a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004694 <getPresetNamesFromSDCard+0x198>
	diskBusy = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	f889 3000 	strb.w	r3, [r9]
}
 8004524:	b009      	add	sp, #36	; 0x24
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 800452a:	2400      	movs	r4, #0
 800452c:	4b51      	ldr	r3, [pc, #324]	; (8004674 <getPresetNamesFromSDCard+0x178>)
		diskBusy = 1;
 800452e:	2501      	movs	r5, #1
 8004530:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8004694 <getPresetNamesFromSDCard+0x198>
		disk_initialize(0);
 8004534:	4620      	mov	r0, r4
		loadFailed = 0;
 8004536:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8004538:	f889 5000 	strb.w	r5, [r9]
		disk_initialize(0);
 800453c:	f00a fdc2 	bl	800f0c4 <disk_initialize>
	    disk_status(0);
 8004540:	4620      	mov	r0, r4
 8004542:	f00a fdb5 	bl	800f0b0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8004546:	462a      	mov	r2, r5
 8004548:	494b      	ldr	r1, [pc, #300]	; (8004678 <getPresetNamesFromSDCard+0x17c>)
 800454a:	484c      	ldr	r0, [pc, #304]	; (800467c <getPresetNamesFromSDCard+0x180>)
 800454c:	f00d f84e 	bl	80115ec <f_mount>
 8004550:	2800      	cmp	r0, #0
 8004552:	d1e4      	bne.n	800451e <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8004554:	4604      	mov	r4, r0
 8004556:	4d4a      	ldr	r5, [pc, #296]	; (8004680 <getPresetNamesFromSDCard+0x184>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004558:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8004678 <getPresetNamesFromSDCard+0x17c>
 800455c:	4f49      	ldr	r7, [pc, #292]	; (8004684 <getPresetNamesFromSDCard+0x188>)
 800455e:	4e4a      	ldr	r6, [pc, #296]	; (8004688 <getPresetNamesFromSDCard+0x18c>)
 8004560:	e015      	b.n	800458e <getPresetNamesFromSDCard+0x92>
					strcat(charBuf, ".ebp");
 8004562:	6828      	ldr	r0, [r5, #0]
 8004564:	f10d 0a08 	add.w	sl, sp, #8
 8004568:	f895 c004 	ldrb.w	ip, [r5, #4]
 800456c:	f84a 0003 	str.w	r0, [sl, r3]
					strcpy(finalString, charBuf);
 8004570:	a805      	add	r0, sp, #20
					strcat(charBuf, ".ebp");
 8004572:	f88e c004 	strb.w	ip, [lr, #4]
					strcpy(finalString, charBuf);
 8004576:	f015 f81d 	bl	80195b4 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800457a:	ab05      	add	r3, sp, #20
 800457c:	4642      	mov	r2, r8
 800457e:	4639      	mov	r1, r7
 8004580:	4630      	mov	r0, r6
 8004582:	f00d fda3 	bl	80120cc <f_findfirst>
				if(res == FR_OK)
 8004586:	b378      	cbz	r0, 80045e8 <getPresetNamesFromSDCard+0xec>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8004588:	3401      	adds	r4, #1
 800458a:	2c32      	cmp	r4, #50	; 0x32
 800458c:	d0c7      	beq.n	800451e <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 800458e:	220a      	movs	r2, #10
 8004590:	a902      	add	r1, sp, #8
 8004592:	4620      	mov	r0, r4
 8004594:	f015 f80c 	bl	80195b0 <itoa>
				int len = ((strlen(charBuf)));
 8004598:	a802      	add	r0, sp, #8
 800459a:	f7fb fe9d 	bl	80002d8 <strlen>
					strcpy(finalString, charBuf);
 800459e:	a902      	add	r1, sp, #8
				if (len == 1)
 80045a0:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80045a2:	4603      	mov	r3, r0
					strcat(charBuf, ".ebp");
 80045a4:	eb01 0e00 	add.w	lr, r1, r0
					strcpy(finalString, charBuf);
 80045a8:	f100 0205 	add.w	r2, r0, #5
				if (len == 1)
 80045ac:	d1d9      	bne.n	8004562 <getPresetNamesFromSDCard+0x66>
					finalString[2] = charBuf[1];
 80045ae:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebp");
 80045b2:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 80045b4:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 80045b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80045bc:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 80045c6:	f7fb fe87 	bl	80002d8 <strlen>
 80045ca:	aa05      	add	r2, sp, #20
 80045cc:	4603      	mov	r3, r0
 80045ce:	6828      	ldr	r0, [r5, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80045d0:	4639      	mov	r1, r7
					strcat(finalString, ".ebp");
 80045d2:	50d0      	str	r0, [r2, r3]
 80045d4:	4413      	add	r3, r2
 80045d6:	792a      	ldrb	r2, [r5, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80045d8:	4630      	mov	r0, r6
					strcat(finalString, ".ebp");
 80045da:	711a      	strb	r2, [r3, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80045dc:	ab05      	add	r3, sp, #20
 80045de:	4642      	mov	r2, r8
 80045e0:	f00d fd74 	bl	80120cc <f_findfirst>
				if(res == FR_OK)
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1cf      	bne.n	8004588 <getPresetNamesFromSDCard+0x8c>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80045e8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004698 <getPresetNamesFromSDCard+0x19c>
 80045ec:	2211      	movs	r2, #17
 80045ee:	4927      	ldr	r1, [pc, #156]	; (800468c <getPresetNamesFromSDCard+0x190>)
 80045f0:	4650      	mov	r0, sl
 80045f2:	f00d f84d 	bl	8011690 <f_open>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d1c6      	bne.n	8004588 <getPresetNamesFromSDCard+0x8c>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80045fa:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800469c <getPresetNamesFromSDCard+0x1a0>
 80045fe:	ab01      	add	r3, sp, #4
 8004600:	f8da 200c 	ldr.w	r2, [sl, #12]
 8004604:	4650      	mov	r0, sl
 8004606:	4659      	mov	r1, fp
 8004608:	f00d f9c0 	bl	801198c <f_read>
						f_close(&SDFile);
 800460c:	4650      	mov	r0, sl
 800460e:	f00d fc51 	bl	8011eb4 <f_close>
							presetNamesArray[i][j] = buffer[j];
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <getPresetNamesFromSDCard+0x194>)
 8004614:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8004618:	f89b 1000 	ldrb.w	r1, [fp]
 800461c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
 8004620:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004624:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004628:	705a      	strb	r2, [r3, #1]
 800462a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800462e:	709a      	strb	r2, [r3, #2]
 8004630:	f89b 2003 	ldrb.w	r2, [fp, #3]
 8004634:	70da      	strb	r2, [r3, #3]
 8004636:	f89b 2004 	ldrb.w	r2, [fp, #4]
 800463a:	711a      	strb	r2, [r3, #4]
 800463c:	f89b 2005 	ldrb.w	r2, [fp, #5]
 8004640:	715a      	strb	r2, [r3, #5]
 8004642:	f89b 2006 	ldrb.w	r2, [fp, #6]
 8004646:	719a      	strb	r2, [r3, #6]
 8004648:	f89b 2007 	ldrb.w	r2, [fp, #7]
 800464c:	71da      	strb	r2, [r3, #7]
 800464e:	f89b 2008 	ldrb.w	r2, [fp, #8]
 8004652:	721a      	strb	r2, [r3, #8]
 8004654:	f89b 2009 	ldrb.w	r2, [fp, #9]
 8004658:	725a      	strb	r2, [r3, #9]
 800465a:	f89b 200a 	ldrb.w	r2, [fp, #10]
 800465e:	729a      	strb	r2, [r3, #10]
 8004660:	f89b 200b 	ldrb.w	r2, [fp, #11]
 8004664:	72da      	strb	r2, [r3, #11]
 8004666:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800466a:	731a      	strb	r2, [r3, #12]
 800466c:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8004670:	735a      	strb	r2, [r3, #13]
						for (int j = 0; j < 14; j++)
 8004672:	e789      	b.n	8004588 <getPresetNamesFromSDCard+0x8c>
 8004674:	2001519c 	.word	0x2001519c
 8004678:	20019a58 	.word	0x20019a58
 800467c:	200195f4 	.word	0x200195f4
 8004680:	0801b78c 	.word	0x0801b78c
 8004684:	20015050 	.word	0x20015050
 8004688:	20012fb4 	.word	0x20012fb4
 800468c:	20015066 	.word	0x20015066
 8004690:	24058d60 	.word	0x24058d60
 8004694:	20012fec 	.word	0x20012fec
 8004698:	20019828 	.word	0x20019828
 800469c:	300001e0 	.word	0x300001e0

080046a0 <SDRAM_init>:
{
 80046a0:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 80046a2:	2300      	movs	r3, #0
{
 80046a4:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046a6:	4c22      	ldr	r4, [pc, #136]	; (8004730 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046a8:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 80046aa:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046ac:	2310      	movs	r3, #16
 80046ae:	2601      	movs	r6, #1
 80046b0:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046b2:	a902      	add	r1, sp, #8
 80046b4:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046be:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046c2:	f008 fd4d 	bl	800d160 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 80046c6:	2064      	movs	r0, #100	; 0x64
 80046c8:	f002 fb8c 	bl	8006de4 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046cc:	a902      	add	r1, sp, #8
 80046ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046d2:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80046d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046d8:	2602      	movs	r6, #2
 80046da:	2710      	movs	r7, #16
 80046dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046e0:	f008 fd3e 	bl	800d160 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80046e4:	2003      	movs	r0, #3
 80046e6:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80046ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046f0:	2004      	movs	r0, #4
 80046f2:	2100      	movs	r1, #0
 80046f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80046f8:	a902      	add	r1, sp, #8
 80046fa:	4620      	mov	r0, r4
 80046fc:	f008 fd30 	bl	800d160 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004700:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004704:	2204      	movs	r2, #4
 8004706:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004708:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 800470a:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800470c:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800470e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 8004712:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8004718:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800471c:	4620      	mov	r0, r4
 800471e:	f008 fd1f 	bl	800d160 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 8004722:	f640 0106 	movw	r1, #2054	; 0x806
 8004726:	4620      	mov	r0, r4
 8004728:	f008 fd3a 	bl	800d1a0 <HAL_SDRAM_ProgramRefreshRate>
}
 800472c:	b006      	add	sp, #24
 800472e:	bdd0      	pop	{r4, r6, r7, pc}
 8004730:	20012f24 	.word	0x20012f24

08004734 <handleSPI>:
{
 8004734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (SPI_LEVERS[offset] == ReceivingPitches)
 8004738:	4e6b      	ldr	r6, [pc, #428]	; (80048e8 <handleSPI+0x1b4>)
	interruptChecker = 1;
 800473a:	2201      	movs	r2, #1
 800473c:	496b      	ldr	r1, [pc, #428]	; (80048ec <handleSPI+0x1b8>)
{
 800473e:	4605      	mov	r5, r0
	if (SPI_LEVERS[offset] == ReceivingPitches)
 8004740:	5c33      	ldrb	r3, [r6, r0]
 8004742:	4293      	cmp	r3, r2
{
 8004744:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
 8004748:	700a      	strb	r2, [r1, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
 800474a:	f000 80e5 	beq.w	8004918 <handleSPI+0x1e4>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
 800474e:	2b02      	cmp	r3, #2
 8004750:	d050      	beq.n	80047f4 <handleSPI+0xc0>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
 8004752:	2b03      	cmp	r3, #3
 8004754:	f000 81b2 	beq.w	8004abc <handleSPI+0x388>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
 8004758:	2bfd      	cmp	r3, #253	; 0xfd
 800475a:	f000 8198 	beq.w	8004a8e <handleSPI+0x35a>
		if (boardNumber == 0)
 800475e:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <handleSPI+0x1bc>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d142      	bne.n	80047ec <handleSPI+0xb8>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8004766:	4f63      	ldr	r7, [pc, #396]	; (80048f4 <handleSPI+0x1c0>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8004768:	1973      	adds	r3, r6, r5
 800476a:	21fd      	movs	r1, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800476c:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8004914 <handleSPI+0x1e0>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8004770:	783a      	ldrb	r2, [r7, #0]
			whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8004772:	4861      	ldr	r0, [pc, #388]	; (80048f8 <handleSPI+0x1c4>)
 8004774:	1c54      	adds	r4, r2, #1
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8004776:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800477a:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8004782:	fba0 2004 	umull	r2, r0, r0, r4
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004786:	eb0c 0241 	add.w	r2, ip, r1, lsl #1
 800478a:	0049      	lsls	r1, r1, #1
			whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 800478c:	0900      	lsrs	r0, r0, #4
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800478e:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8004792:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8004796:	2132      	movs	r1, #50	; 0x32
 8004798:	fb01 4010 	mls	r0, r1, r0, r4
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 800479c:	7854      	ldrb	r4, [r2, #1]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 800479e:	7891      	ldrb	r1, [r2, #2]
			whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 80047a0:	7038      	strb	r0, [r7, #0]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 80047a2:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 80047a6:	78d0      	ldrb	r0, [r2, #3]
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 80047a8:	7911      	ldrb	r1, [r2, #4]
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 80047aa:	f883 4043 	strb.w	r4, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 80047ae:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 80047b2:	7954      	ldrb	r4, [r2, #5]
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 80047b4:	7991      	ldrb	r1, [r2, #6]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 80047b6:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 80047ba:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 80047be:	79d0      	ldrb	r0, [r2, #7]
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 80047c0:	7a11      	ldrb	r1, [r2, #8]
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 80047c2:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 80047c6:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 80047ca:	7a54      	ldrb	r4, [r2, #9]
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 80047cc:	7a91      	ldrb	r1, [r2, #10]
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 80047ce:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 80047d2:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 80047d6:	7ad0      	ldrb	r0, [r2, #11]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 80047d8:	7b11      	ldrb	r1, [r2, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 80047da:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 80047dc:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 80047e0:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 80047e4:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 80047e8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 80047ec:	ecbd 8b02 	vpop	{d8}
 80047f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 if (writingState != ReceivingPreset)
 80047f4:	4941      	ldr	r1, [pc, #260]	; (80048fc <handleSPI+0x1c8>)
 80047f6:	7808      	ldrb	r0, [r1, #0]
 80047f8:	2802      	cmp	r0, #2
 80047fa:	f000 815d 	beq.w	8004ab8 <handleSPI+0x384>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
 80047fe:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
 8004800:	493f      	ldr	r1, [pc, #252]	; (8004900 <handleSPI+0x1cc>)
			 audioMasterLevel = 0.0f;
 8004802:	4b40      	ldr	r3, [pc, #256]	; (8004904 <handleSPI+0x1d0>)
			 diskBusy = 1;
 8004804:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
 8004806:	2100      	movs	r1, #0
			 bufferPos = 0;
 8004808:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <handleSPI+0x1d4>)
			 audioMasterLevel = 0.0f;
 800480a:	6019      	str	r1, [r3, #0]
			 bufferPos = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	8013      	strh	r3, [r2, #0]
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8004810:	8814      	ldrh	r4, [r2, #0]
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 8004812:	1971      	adds	r1, r6, r5
 8004814:	483d      	ldr	r0, [pc, #244]	; (800490c <handleSPI+0x1d8>)
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
 8004816:	1cab      	adds	r3, r5, #2
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8004818:	b2a4      	uxth	r4, r4
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 800481a:	7849      	ldrb	r1, [r1, #1]
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 800481c:	b2db      	uxtb	r3, r3
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 800481e:	7001      	strb	r1, [r0, #0]
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8004820:	1c61      	adds	r1, r4, #1
 8004822:	5cf7      	ldrb	r7, [r6, r3]
 8004824:	b289      	uxth	r1, r1
 8004826:	8011      	strh	r1, [r2, #0]
 8004828:	18f1      	adds	r1, r6, r3
 800482a:	8810      	ldrh	r0, [r2, #0]
 800482c:	4b38      	ldr	r3, [pc, #224]	; (8004910 <handleSPI+0x1dc>)
 800482e:	b280      	uxth	r0, r0
 8004830:	551f      	strb	r7, [r3, r4]
 8004832:	1c44      	adds	r4, r0, #1
 8004834:	784f      	ldrb	r7, [r1, #1]
 8004836:	b2a4      	uxth	r4, r4
 8004838:	541f      	strb	r7, [r3, r0]
 800483a:	788f      	ldrb	r7, [r1, #2]
 800483c:	8014      	strh	r4, [r2, #0]
 800483e:	8814      	ldrh	r4, [r2, #0]
 8004840:	b2a4      	uxth	r4, r4
 8004842:	1c60      	adds	r0, r4, #1
 8004844:	551f      	strb	r7, [r3, r4]
 8004846:	78cf      	ldrb	r7, [r1, #3]
 8004848:	b280      	uxth	r0, r0
 800484a:	8010      	strh	r0, [r2, #0]
 800484c:	8810      	ldrh	r0, [r2, #0]
 800484e:	b280      	uxth	r0, r0
 8004850:	1c44      	adds	r4, r0, #1
 8004852:	541f      	strb	r7, [r3, r0]
 8004854:	790f      	ldrb	r7, [r1, #4]
 8004856:	b2a4      	uxth	r4, r4
 8004858:	8014      	strh	r4, [r2, #0]
 800485a:	8814      	ldrh	r4, [r2, #0]
 800485c:	b2a4      	uxth	r4, r4
 800485e:	1c60      	adds	r0, r4, #1
 8004860:	551f      	strb	r7, [r3, r4]
 8004862:	794f      	ldrb	r7, [r1, #5]
 8004864:	b280      	uxth	r0, r0
 8004866:	8010      	strh	r0, [r2, #0]
 8004868:	8810      	ldrh	r0, [r2, #0]
 800486a:	b280      	uxth	r0, r0
 800486c:	1c44      	adds	r4, r0, #1
 800486e:	541f      	strb	r7, [r3, r0]
 8004870:	798f      	ldrb	r7, [r1, #6]
 8004872:	b2a4      	uxth	r4, r4
 8004874:	8014      	strh	r4, [r2, #0]
 8004876:	8814      	ldrh	r4, [r2, #0]
 8004878:	b2a4      	uxth	r4, r4
 800487a:	1c60      	adds	r0, r4, #1
 800487c:	551f      	strb	r7, [r3, r4]
 800487e:	b280      	uxth	r0, r0
 8004880:	8010      	strh	r0, [r2, #0]
 8004882:	8810      	ldrh	r0, [r2, #0]
 8004884:	b280      	uxth	r0, r0
 8004886:	1c44      	adds	r4, r0, #1
 8004888:	b2a4      	uxth	r4, r4
 800488a:	8014      	strh	r4, [r2, #0]
 800488c:	79cc      	ldrb	r4, [r1, #7]
 800488e:	541c      	strb	r4, [r3, r0]
 8004890:	8810      	ldrh	r0, [r2, #0]
 8004892:	7a0c      	ldrb	r4, [r1, #8]
 8004894:	b280      	uxth	r0, r0
 8004896:	541c      	strb	r4, [r3, r0]
 8004898:	3001      	adds	r0, #1
 800489a:	7a4c      	ldrb	r4, [r1, #9]
 800489c:	b280      	uxth	r0, r0
 800489e:	8010      	strh	r0, [r2, #0]
 80048a0:	8810      	ldrh	r0, [r2, #0]
 80048a2:	b280      	uxth	r0, r0
 80048a4:	541c      	strb	r4, [r3, r0]
 80048a6:	3001      	adds	r0, #1
 80048a8:	7a8c      	ldrb	r4, [r1, #10]
 80048aa:	b280      	uxth	r0, r0
 80048ac:	8010      	strh	r0, [r2, #0]
 80048ae:	8810      	ldrh	r0, [r2, #0]
 80048b0:	b280      	uxth	r0, r0
 80048b2:	541c      	strb	r4, [r3, r0]
 80048b4:	3001      	adds	r0, #1
 80048b6:	7acc      	ldrb	r4, [r1, #11]
 80048b8:	b280      	uxth	r0, r0
 80048ba:	8010      	strh	r0, [r2, #0]
 80048bc:	8810      	ldrh	r0, [r2, #0]
 80048be:	b280      	uxth	r0, r0
 80048c0:	541c      	strb	r4, [r3, r0]
 80048c2:	3001      	adds	r0, #1
 80048c4:	7b0c      	ldrb	r4, [r1, #12]
 80048c6:	b280      	uxth	r0, r0
 80048c8:	8010      	strh	r0, [r2, #0]
 80048ca:	8810      	ldrh	r0, [r2, #0]
 80048cc:	b280      	uxth	r0, r0
 80048ce:	541c      	strb	r4, [r3, r0]
 80048d0:	3001      	adds	r0, #1
 80048d2:	7b4c      	ldrb	r4, [r1, #13]
 80048d4:	b281      	uxth	r1, r0
 80048d6:	8011      	strh	r1, [r2, #0]
 80048d8:	8811      	ldrh	r1, [r2, #0]
 80048da:	b289      	uxth	r1, r1
 80048dc:	545c      	strb	r4, [r3, r1]
 80048de:	1c4b      	adds	r3, r1, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]
 80048e4:	e73b      	b.n	800475e <handleSPI+0x2a>
 80048e6:	bf00      	nop
 80048e8:	30000100 	.word	0x30000100
 80048ec:	20015169 	.word	0x20015169
 80048f0:	20012fac 	.word	0x20012fac
 80048f4:	20019038 	.word	0x20019038
 80048f8:	51eb851f 	.word	0x51eb851f
 80048fc:	20019039 	.word	0x20019039
 8004900:	20012fec 	.word	0x20012fec
 8004904:	20000088 	.word	0x20000088
 8004908:	20012fae 	.word	0x20012fae
 800490c:	20016c2a 	.word	0x20016c2a
 8004910:	300001e0 	.word	0x300001e0
 8004914:	24058d60 	.word	0x24058d60
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004918:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <handleSPI+0x3d8>)
 800491a:	7818      	ldrb	r0, [r3, #0]
 800491c:	2800      	cmp	r0, #0
 800491e:	f000 80b2 	beq.w	8004a86 <handleSPI+0x352>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004922:	497b      	ldr	r1, [pc, #492]	; (8004b10 <handleSPI+0x3dc>)
		 uint8_t currentByte = offset+1;
 8004924:	1c6b      	adds	r3, r5, #1
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004926:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 8004b14 <handleSPI+0x3e0>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800492a:	680a      	ldr	r2, [r1, #0]
 800492c:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800492e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8004b18 <handleSPI+0x3e4>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004932:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8004936:	5cd2      	ldrb	r2, [r2, r3]
 8004938:	0212      	lsls	r2, r2, #8
 800493a:	ee07 2a90 	vmov	s15, r2
 800493e:	680a      	ldr	r2, [r1, #0]
 8004940:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8004944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004948:	441a      	add	r2, r3
 800494a:	7852      	ldrb	r2, [r2, #1]
 800494c:	ee07 2a90 	vmov	s15, r2
 8004950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004954:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004958:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800495c:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d507      	bpl.n	8004976 <handleSPI+0x242>
 8004966:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	dd02      	ble.n	8004976 <handleSPI+0x242>
				stringMIDIPitches[i] = myPitch;
 8004970:	4a6a      	ldr	r2, [pc, #424]	; (8004b1c <handleSPI+0x3e8>)
 8004972:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004976:	2801      	cmp	r0, #1
 8004978:	f000 8085 	beq.w	8004a86 <handleSPI+0x352>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800497c:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800497e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8004b18 <handleSPI+0x3e4>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004982:	3201      	adds	r2, #1
 8004984:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8004988:	5cd2      	ldrb	r2, [r2, r3]
 800498a:	0212      	lsls	r2, r2, #8
 800498c:	ee07 2a90 	vmov	s15, r2
 8004990:	680a      	ldr	r2, [r1, #0]
 8004992:	3201      	adds	r2, #1
 8004994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004998:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 800499c:	441a      	add	r2, r3
 800499e:	7852      	ldrb	r2, [r2, #1]
 80049a0:	ee07 2a90 	vmov	s15, r2
 80049a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a8:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80049ac:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80049b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	dd09      	ble.n	80049ce <handleSPI+0x29a>
 80049ba:	eddf 6a56 	vldr	s13, [pc, #344]	; 8004b14 <handleSPI+0x3e0>
 80049be:	eef4 7a66 	vcmp.f32	s15, s13
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	d502      	bpl.n	80049ce <handleSPI+0x29a>
				stringMIDIPitches[i] = myPitch;
 80049c8:	4a54      	ldr	r2, [pc, #336]	; (8004b1c <handleSPI+0x3e8>)
 80049ca:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80049ce:	2802      	cmp	r0, #2
 80049d0:	d059      	beq.n	8004a86 <handleSPI+0x352>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80049d2:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80049d4:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004b18 <handleSPI+0x3e4>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80049d8:	3202      	adds	r2, #2
 80049da:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80049de:	5cd2      	ldrb	r2, [r2, r3]
 80049e0:	0212      	lsls	r2, r2, #8
 80049e2:	ee07 2a90 	vmov	s15, r2
 80049e6:	680a      	ldr	r2, [r1, #0]
 80049e8:	3202      	adds	r2, #2
 80049ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ee:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80049f2:	441a      	add	r2, r3
 80049f4:	7852      	ldrb	r2, [r2, #1]
 80049f6:	ee07 2a90 	vmov	s15, r2
 80049fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004a02:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004a06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	dd09      	ble.n	8004a24 <handleSPI+0x2f0>
 8004a10:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004b14 <handleSPI+0x3e0>
 8004a14:	eef4 7a66 	vcmp.f32	s15, s13
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	d502      	bpl.n	8004a24 <handleSPI+0x2f0>
				stringMIDIPitches[i] = myPitch;
 8004a1e:	4a3f      	ldr	r2, [pc, #252]	; (8004b1c <handleSPI+0x3e8>)
 8004a20:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004a24:	2803      	cmp	r0, #3
 8004a26:	d02e      	beq.n	8004a86 <handleSPI+0x352>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004a28:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8004b18 <handleSPI+0x3e4>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004a2c:	2403      	movs	r4, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004a2e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004b14 <handleSPI+0x3e0>
 8004a32:	4f3a      	ldr	r7, [pc, #232]	; (8004b1c <handleSPI+0x3e8>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004a34:	680a      	ldr	r2, [r1, #0]
 8004a36:	4422      	add	r2, r4
 8004a38:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8004a3c:	5cd2      	ldrb	r2, [r2, r3]
 8004a3e:	0212      	lsls	r2, r2, #8
 8004a40:	ee07 2a90 	vmov	s15, r2
 8004a44:	680a      	ldr	r2, [r1, #0]
 8004a46:	4422      	add	r2, r4
 8004a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8004a52:	441a      	add	r2, r3
 8004a54:	7852      	ldrb	r2, [r2, #1]
 8004a56:	ee07 2a90 	vmov	s15, r2
 8004a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004a62:	ee27 7a86 	vmul.f32	s14, s15, s12
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004a66:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	dd06      	ble.n	8004a7e <handleSPI+0x34a>
 8004a70:	eef4 7a66 	vcmp.f32	s15, s13
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
 8004a78:	bf48      	it	mi
 8004a7a:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004a7e:	42a0      	cmp	r0, r4
 8004a80:	f107 0704 	add.w	r7, r7, #4
 8004a84:	dcd6      	bgt.n	8004a34 <handleSPI+0x300>
		 updateStateFromSPIMessage(offset);
 8004a86:	4628      	mov	r0, r5
 8004a88:	f7fb fffa 	bl	8000a80 <updateStateFromSPIMessage>
 8004a8c:	e667      	b.n	800475e <handleSPI+0x2a>
		if(writingState == ReceivingPreset)
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <handleSPI+0x3ec>)
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	2a02      	cmp	r2, #2
 8004a94:	f47f ae63 	bne.w	800475e <handleSPI+0x2a>
			 presetWaitingToParse = bufferPos;
 8004a98:	4922      	ldr	r1, [pc, #136]	; (8004b24 <handleSPI+0x3f0>)
			 writingState = 0;
 8004a9a:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
 8004a9c:	4822      	ldr	r0, [pc, #136]	; (8004b28 <handleSPI+0x3f4>)
			 writingState = 0;
 8004a9e:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
 8004aa0:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
 8004aa2:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8004aa4:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
 8004aa6:	4921      	ldr	r1, [pc, #132]	; (8004b2c <handleSPI+0x3f8>)
			 presetWaitingToParse = bufferPos;
 8004aa8:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
 8004aaa:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
 8004aac:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
 8004aae:	4920      	ldr	r1, [pc, #128]	; (8004b30 <handleSPI+0x3fc>)
 8004ab0:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8004ab2:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <handleSPI+0x400>)
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e652      	b.n	800475e <handleSPI+0x2a>
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <handleSPI+0x3f0>)
 8004aba:	e6a9      	b.n	8004810 <handleSPI+0xdc>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004abc:	4f13      	ldr	r7, [pc, #76]	; (8004b0c <handleSPI+0x3d8>)
		 uint8_t currentByte = offset+1;
 8004abe:	f100 0a01 	add.w	sl, r0, #1
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004ac2:	783b      	ldrb	r3, [r7, #0]
		 uint8_t currentByte = offset+1;
 8004ac4:	fa5f fa8a 	uxtb.w	sl, sl
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f43f ae48 	beq.w	800475e <handleSPI+0x2a>
 8004ace:	f04f 0900 	mov.w	r9, #0
				paramsFromBrain[i] = SPI_LEVERS[i + currentByte] * 0.003921568627451f; //scaled 0.0 to 1.0
 8004ad2:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004b38 <handleSPI+0x404>
 8004ad6:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004ada:	4c18      	ldr	r4, [pc, #96]	; (8004b3c <handleSPI+0x408>)
 8004adc:	eb06 0208 	add.w	r2, r6, r8
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <handleSPI+0x40c>)
 8004ae2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004ae6:	ee07 1a90 	vmov	s15, r1
 8004aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aee:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004af2:	ece3 7a01 	vstmia	r3!, {s15}
			for (int i = 0; i < 20; i++)
 8004af6:	429c      	cmp	r4, r3
 8004af8:	d1f3      	bne.n	8004ae2 <handleSPI+0x3ae>
			updateStateFromSPIMessage(currentByte);
 8004afa:	4650      	mov	r0, sl
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004afc:	f109 0901 	add.w	r9, r9, #1
			updateStateFromSPIMessage(currentByte);
 8004b00:	f7fb ffbe 	bl	8000a80 <updateStateFromSPIMessage>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004b04:	783b      	ldrb	r3, [r7, #0]
 8004b06:	454b      	cmp	r3, r9
 8004b08:	dce8      	bgt.n	8004adc <handleSPI+0x3a8>
 8004b0a:	e628      	b.n	800475e <handleSPI+0x2a>
 8004b0c:	20000066 	.word	0x20000066
 8004b10:	200044a4 	.word	0x200044a4
 8004b14:	478bff74 	.word	0x478bff74
 8004b18:	3b000080 	.word	0x3b000080
 8004b1c:	20012e54 	.word	0x20012e54
 8004b20:	20019039 	.word	0x20019039
 8004b24:	20012fae 	.word	0x20012fae
 8004b28:	20016c2a 	.word	0x20016c2a
 8004b2c:	20000090 	.word	0x20000090
 8004b30:	20016c30 	.word	0x20016c30
 8004b34:	20016c34 	.word	0x20016c34
 8004b38:	3b808081 	.word	0x3b808081
 8004b3c:	20004954 	.word	0x20004954
 8004b40:	20004904 	.word	0x20004904

08004b44 <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	9001      	str	r0, [sp, #4]
 8004b4e:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b50:	b672      	cpsid	i


	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[i];
 8004b52:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004c74 <parsePreset+0x130>
	 presetReady = 0;
 8004b56:	2100      	movs	r1, #0
 8004b58:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <parsePreset+0x114>)
		 audioOutBuffer[i] = 0;
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	483f      	ldr	r0, [pc, #252]	; (8004c5c <parsePreset+0x118>)
	 presetReady = 0;
 8004b5e:	6019      	str	r1, [r3, #0]
		 audioOutBuffer[i] = 0;
 8004b60:	f014 fd36 	bl	80195d0 <memset>
		presetName[i] = buffer[i];
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <parsePreset+0x11c>)
		presetNamesArray[presetNumber][i] = buffer[i];
 8004b66:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
		presetName[i] = buffer[i];
 8004b6a:	f89b 2000 	ldrb.w	r2, [fp]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004b6e:	493d      	ldr	r1, [pc, #244]	; (8004c64 <parsePreset+0x120>)
 8004b70:	0045      	lsls	r5, r0, #1
		presetName[i] = buffer[i];
 8004b72:	9202      	str	r2, [sp, #8]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004b74:	460c      	mov	r4, r1
		presetName[i] = buffer[i];
 8004b76:	701a      	strb	r2, [r3, #0]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004b78:	eb01 0240 	add.w	r2, r1, r0, lsl #1
		presetName[i] = buffer[i];
 8004b7c:	f89b 1007 	ldrb.w	r1, [fp, #7]
	audioMasterLevel = 0.0f;
 8004b80:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004c68 <parsePreset+0x124>
		presetName[i] = buffer[i];
 8004b84:	71d9      	strb	r1, [r3, #7]
 8004b86:	9103      	str	r1, [sp, #12]
 8004b88:	f89b 100a 	ldrb.w	r1, [fp, #10]
 8004b8c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004b90:	9104      	str	r1, [sp, #16]
	audioMasterLevel = 0.0f;
 8004b92:	4936      	ldr	r1, [pc, #216]	; (8004c6c <parsePreset+0x128>)
		presetName[i] = buffer[i];
 8004b94:	f89b a002 	ldrb.w	sl, [fp, #2]
	audioMasterLevel = 0.0f;
 8004b98:	edc1 7a00 	vstr	s15, [r1]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004b9c:	4621      	mov	r1, r4
		presetName[i] = buffer[i];
 8004b9e:	f89b 9003 	ldrb.w	r9, [fp, #3]
 8004ba2:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8004ba6:	f89b 7005 	ldrb.w	r7, [fp, #5]
 8004baa:	f89b e008 	ldrb.w	lr, [fp, #8]
 8004bae:	f89b c009 	ldrb.w	ip, [fp, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bb2:	9c02      	ldr	r4, [sp, #8]
		presetName[i] = buffer[i];
 8004bb4:	f89b 6006 	ldrb.w	r6, [fp, #6]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bb8:	554c      	strb	r4, [r1, r5]
		presetName[i] = buffer[i];
 8004bba:	7058      	strb	r0, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bbc:	7050      	strb	r0, [r2, #1]
		presetName[i] = buffer[i];
 8004bbe:	f883 a002 	strb.w	sl, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bc2:	f882 a002 	strb.w	sl, [r2, #2]
		presetName[i] = buffer[i];
 8004bc6:	f883 9003 	strb.w	r9, [r3, #3]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bca:	f882 9003 	strb.w	r9, [r2, #3]
		presetName[i] = buffer[i];
 8004bce:	f883 8004 	strb.w	r8, [r3, #4]
 8004bd2:	715f      	strb	r7, [r3, #5]
 8004bd4:	719e      	strb	r6, [r3, #6]
 8004bd6:	f883 e008 	strb.w	lr, [r3, #8]
 8004bda:	f883 c009 	strb.w	ip, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bde:	f882 8004 	strb.w	r8, [r2, #4]
 8004be2:	7157      	strb	r7, [r2, #5]
 8004be4:	7196      	strb	r6, [r2, #6]
		presetName[i] = buffer[i];
 8004be6:	9904      	ldr	r1, [sp, #16]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004be8:	9c03      	ldr	r4, [sp, #12]
	}
	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 8004bea:	f89b 000e 	ldrb.w	r0, [fp, #14]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bee:	71d4      	strb	r4, [r2, #7]
		presetName[i] = buffer[i];
 8004bf0:	7299      	strb	r1, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004bf2:	f882 e008 	strb.w	lr, [r2, #8]
 8004bf6:	f882 c009 	strb.w	ip, [r2, #9]
 8004bfa:	7291      	strb	r1, [r2, #10]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 8004bfc:	f89b 100f 	ldrb.w	r1, [fp, #15]
 8004c00:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		presetName[i] = buffer[i];
 8004c04:	f89b 000b 	ldrb.w	r0, [fp, #11]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004c08:	72d0      	strb	r0, [r2, #11]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 8004c0a:	b289      	uxth	r1, r1
		presetName[i] = buffer[i];
 8004c0c:	72d8      	strb	r0, [r3, #11]
 8004c0e:	f89b 000c 	ldrb.w	r0, [fp, #12]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004c12:	7310      	strb	r0, [r2, #12]
		presetName[i] = buffer[i];
 8004c14:	7318      	strb	r0, [r3, #12]
 8004c16:	f89b 000d 	ldrb.w	r0, [fp, #13]
 8004c1a:	7358      	strb	r0, [r3, #13]
	if (paramCount > size)
 8004c1c:	9b01      	ldr	r3, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004c1e:	7350      	strb	r0, [r2, #13]
	if (paramCount > size)
 8004c20:	4299      	cmp	r1, r3
 8004c22:	dc0d      	bgt.n	8004c40 <parsePreset+0xfc>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
 8004c24:	f101 0308 	add.w	r3, r1, #8
	if (paramEndCheck != 0xefef)
 8004c28:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
 8004c2c:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 8004c30:	f81b 5013 	ldrb.w	r5, [fp, r3, lsl #1]
 8004c34:	7853      	ldrb	r3, [r2, #1]
 8004c36:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	if (paramEndCheck != 0xefef)
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4283      	cmp	r3, r0
 8004c3e:	d01b      	beq.n	8004c78 <parsePreset+0x134>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <parsePreset+0x12c>)
 8004c42:	2100      	movs	r1, #0
		audioMasterLevel = 1.0f;
 8004c44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 8004c48:	6011      	str	r1, [r2, #0]
		audioMasterLevel = 1.0f;
 8004c4a:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <parsePreset+0x128>)
 8004c4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c4e:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 8004c50:	b007      	add	sp, #28
 8004c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	2000496c 	.word	0x2000496c
 8004c5c:	30000000 	.word	0x30000000
 8004c60:	20016c1c 	.word	0x20016c1c
 8004c64:	24058d60 	.word	0x24058d60
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	20000088 	.word	0x20000088
 8004c70:	20016c30 	.word	0x20016c30
 8004c74:	300001e0 	.word	0x300001e0
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004c78:	7893      	ldrb	r3, [r2, #2]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004c7a:	f101 050a 	add.w	r5, r1, #10
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004c7e:	f892 a003 	ldrb.w	sl, [r2, #3]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004c82:	006d      	lsls	r5, r5, #1
	if (mappingEndLocation > size)
 8004c84:	9a01      	ldr	r2, [sp, #4]
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004c86:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004c8a:	b2ad      	uxth	r5, r5
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004c8c:	fa1f fa8a 	uxth.w	sl, sl
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004c90:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	18eb      	adds	r3, r5, r3
	if (mappingEndLocation > size)
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	dccf      	bgt.n	8004c40 <parsePreset+0xfc>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 8004ca0:	eb0b 0003 	add.w	r0, fp, r3
 8004ca4:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8004ca8:	7843      	ldrb	r3, [r0, #1]
 8004caa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 8004cae:	f64f 62fe 	movw	r2, #65278	; 0xfefe
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d1c3      	bne.n	8004c40 <parsePreset+0xfc>
	for (int i = 0; i < paramCount; i++)
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	f001 80f1 	beq.w	8005ea0 <parsePreset+0x135c>
 8004cbe:	4fcf      	ldr	r7, [pc, #828]	; (8004ffc <parsePreset+0x4b8>)
 8004cc0:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
 8004cc4:	f8df c39c 	ldr.w	ip, [pc, #924]	; 8005064 <parsePreset+0x520>
 8004cc8:	4658      	mov	r0, fp
 8004cca:	463b      	mov	r3, r7
 8004ccc:	4ecc      	ldr	r6, [pc, #816]	; (8005000 <parsePreset+0x4bc>)
 8004cce:	4667      	mov	r7, ip
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004cd0:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005004 <parsePreset+0x4c0>
 8004cd4:	468c      	mov	ip, r1
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4619      	mov	r1, r3
 8004cda:	7c04      	ldrb	r4, [r0, #16]
	for (int i = 0; i < paramCount; i++)
 8004cdc:	3002      	adds	r0, #2
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004cde:	7bc3      	ldrb	r3, [r0, #15]
	for (int i = 0; i < paramCount; i++)
 8004ce0:	4570      	cmp	r0, lr
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004ce2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		params[i].setParam = &blankFunction;
 8004cee:	e9c2 7104 	strd	r7, r1, [r2, #16]
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < paramCount; i++)
 8004cf6:	f102 021c 	add.w	r2, r2, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004cfa:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
 8004cfe:	ed42 7a06 	vstr	s15, [r2, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 8004d02:	d1ea      	bne.n	8004cda <parsePreset+0x196>
 8004d04:	4661      	mov	r1, ip
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8004d06:	299a      	cmp	r1, #154	; 0x9a
 8004d08:	f301 80c7 	bgt.w	8005e9a <parsePreset+0x1356>
 8004d0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004d10:	f8df c350 	ldr.w	ip, [pc, #848]	; 8005064 <parsePreset+0x520>
 8004d14:	4cbc      	ldr	r4, [pc, #752]	; (8005008 <parsePreset+0x4c4>)
			params[i].zeroToOneVal[v] = 0.0f;
 8004d16:	2200      	movs	r2, #0
 8004d18:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8004d1c:	4fb7      	ldr	r7, [pc, #732]	; (8004ffc <parsePreset+0x4b8>)
 8004d1e:	4661      	mov	r1, ip
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
 8004d24:	e9c3 1704 	strd	r1, r7, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8004d28:	331c      	adds	r3, #28
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	d1f8      	bne.n	8004d20 <parsePreset+0x1dc>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8004d2e:	4bb7      	ldr	r3, [pc, #732]	; (800500c <parsePreset+0x4c8>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004d30:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 8004d34:	49b6      	ldr	r1, [pc, #728]	; (8005010 <parsePreset+0x4cc>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8004d36:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 8004d3a:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 8004d3e:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 8004d42:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 8004d46:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 8004d4a:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 8004d4e:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 8004d52:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 8004d56:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 8004d5a:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 8004d5e:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 8004d62:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8004d66:	4bab      	ldr	r3, [pc, #684]	; (8005014 <parsePreset+0x4d0>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8004d68:	4aab      	ldr	r2, [pc, #684]	; (8005018 <parsePreset+0x4d4>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8004d6a:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 8004d6e:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 8004d72:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 8004d76:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 8004d7a:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 8004d7e:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8004d82:	4ba6      	ldr	r3, [pc, #664]	; (800501c <parsePreset+0x4d8>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8004d84:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8005068 <parsePreset+0x524>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8004d88:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 8004d8c:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 8004d90:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8004d94:	4ba2      	ldr	r3, [pc, #648]	; (8005020 <parsePreset+0x4dc>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8004d96:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8004d9a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8004d9e:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 8004da2:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8004da6:	4b9f      	ldr	r3, [pc, #636]	; (8005024 <parsePreset+0x4e0>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8004da8:	499f      	ldr	r1, [pc, #636]	; (8005028 <parsePreset+0x4e4>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8004daa:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8004dae:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8004db2:	4b9e      	ldr	r3, [pc, #632]	; (800502c <parsePreset+0x4e8>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8004db4:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 8004db8:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8004dbc:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 8004dc0:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8004dc4:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 8004dc8:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8004dcc:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004dd0:	f6a9 1214 	subw	r2, r9, #2324	; 0x914
 8004dd4:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8004dd8:	4a95      	ldr	r2, [pc, #596]	; (8005030 <parsePreset+0x4ec>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004dda:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8004dde:	f8c9 20cc 	str.w	r2, [r9, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004de2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004de6:	fef8 7a67 	vrinta.f32	s15, s15
 8004dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dee:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004df2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004df6:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004df8:	4a8e      	ldr	r2, [pc, #568]	; (8005034 <parsePreset+0x4f0>)
 8004dfa:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004dfe:	bf88      	it	hi
 8004e00:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e08:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004e0c:	fef8 7a67 	vrinta.f32	s15, s15
 8004e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e14:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004e18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004e1c:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e1e:	4a86      	ldr	r2, [pc, #536]	; (8005038 <parsePreset+0x4f4>)
 8004e20:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004e24:	bf88      	it	hi
 8004e26:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e2e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004e32:	fef8 7a67 	vrinta.f32	s15, s15
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004e3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004e42:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e44:	4a7d      	ldr	r2, [pc, #500]	; (800503c <parsePreset+0x4f8>)
 8004e46:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004e4a:	bf88      	it	hi
 8004e4c:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e54:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004e58:	fef8 7a67 	vrinta.f32	s15, s15
 8004e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e60:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004e64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004e68:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e6a:	4a75      	ldr	r2, [pc, #468]	; (8005040 <parsePreset+0x4fc>)
 8004e6c:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004e70:	bf88      	it	hi
 8004e72:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e7a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004e7e:	fef8 7a67 	vrinta.f32	s15, s15
 8004e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e86:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004e8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004e8e:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e90:	4a6c      	ldr	r2, [pc, #432]	; (8005044 <parsePreset+0x500>)
 8004e92:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004e96:	bf88      	it	hi
 8004e98:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004ea4:	fef8 7a67 	vrinta.f32	s15, s15
 8004ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eac:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004eb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004eb4:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004eb6:	4a64      	ldr	r2, [pc, #400]	; (8005048 <parsePreset+0x504>)
 8004eb8:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004ebc:	bf88      	it	hi
 8004ebe:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec6:	fef8 7a67 	vrinta.f32	s15, s15
 8004eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ece:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004ed2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004ed6:	2a0b      	cmp	r2, #11
 8004ed8:	d901      	bls.n	8004ede <parsePreset+0x39a>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004eda:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004ede:	4a5b      	ldr	r2, [pc, #364]	; (800504c <parsePreset+0x508>)
 8004ee0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004ee4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8005000 <parsePreset+0x4bc>
 8004ee8:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 8004eec:	4647      	mov	r7, r8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef2:	fef8 7a67 	vrinta.f32	s15, s15
 8004ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efa:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004efe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004f02:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004f04:	bf88      	it	hi
 8004f06:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 8004f0a:	4646      	mov	r6, r8
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004f0c:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004f0e:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004f10:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
 8004f14:	4798      	blx	r3
 8004f16:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 8004f1a:	42a7      	cmp	r7, r4
 8004f1c:	d1f6      	bne.n	8004f0c <parsePreset+0x3c8>
 8004f1e:	4f38      	ldr	r7, [pc, #224]	; (8005000 <parsePreset+0x4bc>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004f20:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004f22:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004f24:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
 8004f28:	4798      	blx	r3
 8004f2a:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004f2e:	42a7      	cmp	r7, r4
 8004f30:	d1f6      	bne.n	8004f20 <parsePreset+0x3dc>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f32:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004f36:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
 8004f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3e:	fef8 7a67 	vrinta.f32	s15, s15
 8004f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f46:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d80b      	bhi.n	8004f66 <parsePreset+0x422>
 8004f4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f52:	0007      	.short	0x0007
 8004f54:	06e306e8 	.word	0x06e306e8
 8004f58:	06d906de 	.word	0x06d906de
 8004f5c:	06cf06d4 	.word	0x06cf06d4
				  shapeTick[i] = &sawSquareTick;
 8004f60:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <parsePreset+0x50c>)
 8004f62:	4a3c      	ldr	r2, [pc, #240]	; (8005054 <parsePreset+0x510>)
 8004f64:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004f66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <parsePreset+0x514>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004f6c:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f70:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004f74:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f78:	edd3 7a00 	vldr	s15, [r3]
 8004f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f84:	fef8 7a67 	vrinta.f32	s15, s15
 8004f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 8004f8c:	bfcc      	ite	gt
 8004f8e:	2201      	movgt	r2, #1
 8004f90:	2200      	movle	r2, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004f92:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d80b      	bhi.n	8004fb2 <parsePreset+0x46e>
 8004f9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f9e:	0007      	.short	0x0007
 8004fa0:	069f06a4 	.word	0x069f06a4
 8004fa4:	0695069a 	.word	0x0695069a
 8004fa8:	068b0690 	.word	0x068b0690
				  shapeTick[i] = &sawSquareTick;
 8004fac:	4b28      	ldr	r3, [pc, #160]	; (8005050 <parsePreset+0x50c>)
 8004fae:	4929      	ldr	r1, [pc, #164]	; (8005054 <parsePreset+0x510>)
 8004fb0:	6059      	str	r1, [r3, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <parsePreset+0x518>)
 8004fb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004fb8:	ed93 7a00 	vldr	s14, [r3]
 8004fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	dd01      	ble.n	8004fca <parsePreset+0x486>
			enabledCount++;
 8004fc6:	3201      	adds	r2, #1
 8004fc8:	b2d2      	uxtb	r2, r2
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <parsePreset+0x51c>)
 8004fcc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004fd0:	edd3 7a00 	vldr	s15, [r3]
 8004fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd8:	fef8 7a67 	vrinta.f32	s15, s15
 8004fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe0:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d844      	bhi.n	8005072 <parsePreset+0x52e>
 8004fe8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004fec:	065f0040 	.word	0x065f0040
 8004ff0:	0655065a 	.word	0x0655065a
 8004ff4:	064b0650 	.word	0x064b0650
 8004ff8:	0646      	.short	0x0646
 8004ffa:	bf00      	nop
 8004ffc:	08003fd9 	.word	0x08003fd9
 8005000:	20015b28 	.word	0x20015b28
 8005004:	377ffff6 	.word	0x377ffff6
 8005008:	20016c1c 	.word	0x20016c1c
 800500c:	08004219 	.word	0x08004219
 8005010:	08004129 	.word	0x08004129
 8005014:	08003f5d 	.word	0x08003f5d
 8005018:	080042a1 	.word	0x080042a1
 800501c:	08003f75 	.word	0x08003f75
 8005020:	08003f91 	.word	0x08003f91
 8005024:	08003fad 	.word	0x08003fad
 8005028:	08004159 	.word	0x08004159
 800502c:	0800417d 	.word	0x0800417d
 8005030:	08003fbd 	.word	0x08003fbd
 8005034:	20016218 	.word	0x20016218
 8005038:	200162f4 	.word	0x200162f4
 800503c:	200162f8 	.word	0x200162f8
 8005040:	200163d4 	.word	0x200163d4
 8005044:	200163d8 	.word	0x200163d8
 8005048:	200164b4 	.word	0x200164b4
 800504c:	200164b8 	.word	0x200164b8
 8005050:	20004a30 	.word	0x20004a30
 8005054:	08000d55 	.word	0x08000d55
 8005058:	20016070 	.word	0x20016070
 800505c:	20015f3c 	.word	0x20015f3c
 8005060:	200161dc 	.word	0x200161dc
 8005064:	08004115 	.word	0x08004115
 8005068:	20016b28 	.word	0x20016b28
				  shapeTick[i] = &sawSquareTick;
 800506c:	4b84      	ldr	r3, [pc, #528]	; (8005280 <parsePreset+0x73c>)
 800506e:	4985      	ldr	r1, [pc, #532]	; (8005284 <parsePreset+0x740>)
 8005070:	6099      	str	r1, [r3, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8005072:	4b85      	ldr	r3, [pc, #532]	; (8005288 <parsePreset+0x744>)
 8005074:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005078:	ed93 7a00 	vldr	s14, [r3]
 800507c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	dd01      	ble.n	800508a <parsePreset+0x546>
			enabledCount++;
 8005086:	3201      	adds	r2, #1
 8005088:	b2d2      	uxtb	r2, r2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 800508a:	4b80      	ldr	r3, [pc, #512]	; (800528c <parsePreset+0x748>)
 800508c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005090:	4f7f      	ldr	r7, [pc, #508]	; (8005290 <parsePreset+0x74c>)
 8005092:	edd3 7a00 	vldr	s15, [r3]
	oscAmpMult = oscAmpMultArray[enabledCount];
 8005096:	4b7f      	ldr	r3, [pc, #508]	; (8005294 <parsePreset+0x750>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8005098:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 800509c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80050a0:	fef8 7a67 	vrinta.f32	s15, s15
 80050a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	4a7b      	ldr	r2, [pc, #492]	; (8005298 <parsePreset+0x754>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80050ac:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 80050b0:	6011      	str	r1, [r2, #0]
		switch (filterType)
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d811      	bhi.n	80050da <parsePreset+0x596>
 80050b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80050ba:	0009      	.short	0x0009
 80050bc:	066f0678 	.word	0x066f0678
 80050c0:	065d0666 	.word	0x065d0666
 80050c4:	064b0654 	.word	0x064b0654
 80050c8:	06390642 	.word	0x06390642
				  filterTick[i] = &lowpassTick;
 80050cc:	4b73      	ldr	r3, [pc, #460]	; (800529c <parsePreset+0x758>)
 80050ce:	4a74      	ldr	r2, [pc, #464]	; (80052a0 <parsePreset+0x75c>)
 80050d0:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 80050d2:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <parsePreset+0x760>)
 80050d4:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 80050d6:	4b74      	ldr	r3, [pc, #464]	; (80052a8 <parsePreset+0x764>)
 80050d8:	607b      	str	r3, [r7, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80050da:	4b74      	ldr	r3, [pc, #464]	; (80052ac <parsePreset+0x768>)
 80050dc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80050e0:	edd3 7a00 	vldr	s15, [r3]
 80050e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e8:	fef8 7a67 	vrinta.f32	s15, s15
 80050ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f0:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d811      	bhi.n	800511c <parsePreset+0x5d8>
 80050f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80050fc:	069f0009 	.word	0x069f0009
 8005100:	068d0696 	.word	0x068d0696
 8005104:	067b0684 	.word	0x067b0684
 8005108:	06690672 	.word	0x06690672
 800510c:	0660      	.short	0x0660
				  filterTick[i] = &lowpassTick;
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <parsePreset+0x758>)
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <parsePreset+0x75c>)
 8005112:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 8005114:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <parsePreset+0x760>)
 8005116:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 8005118:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <parsePreset+0x764>)
 800511a:	60fb      	str	r3, [r7, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 800511c:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <parsePreset+0x76c>)
 800511e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512a:	fef8 7a67 	vrinta.f32	s15, s15
 800512e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005132:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8005136:	2b05      	cmp	r3, #5
 8005138:	f200 872d 	bhi.w	8005f96 <parsePreset+0x1452>
 800513c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005140:	05840590 	.word	0x05840590
 8005144:	051a0526 	.word	0x051a0526
 8005148:	0006050e 	.word	0x0006050e
				lfoShapeTick[i] = &lfoPulseTick;
 800514c:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <parsePreset+0x770>)
 800514e:	495a      	ldr	r1, [pc, #360]	; (80052b8 <parsePreset+0x774>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8005150:	4a5a      	ldr	r2, [pc, #360]	; (80052bc <parsePreset+0x778>)
				lfoShapeTick[i] = &lfoPulseTick;
 8005152:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <parsePreset+0x77c>)
 8005156:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8005158:	4b5a      	ldr	r3, [pc, #360]	; (80052c4 <parsePreset+0x780>)
 800515a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800515c:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <parsePreset+0x784>)
 800515e:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8005160:	4b5a      	ldr	r3, [pc, #360]	; (80052cc <parsePreset+0x788>)
 8005162:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800516e:	fef8 7a67 	vrinta.f32	s15, s15
 8005172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005176:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 800517a:	2b05      	cmp	r3, #5
 800517c:	d810      	bhi.n	80051a0 <parsePreset+0x65c>
 800517e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005182:	04e2      	.short	0x04e2
 8005184:	04cc04d7 	.word	0x04cc04d7
 8005188:	04ab04c1 	.word	0x04ab04c1
 800518c:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 800518e:	4b49      	ldr	r3, [pc, #292]	; (80052b4 <parsePreset+0x770>)
 8005190:	4949      	ldr	r1, [pc, #292]	; (80052b8 <parsePreset+0x774>)
 8005192:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8005194:	4b4a      	ldr	r3, [pc, #296]	; (80052c0 <parsePreset+0x77c>)
 8005196:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8005198:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <parsePreset+0x780>)
 800519a:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800519c:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <parsePreset+0x784>)
 800519e:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <parsePreset+0x78c>)
 80051a2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ae:	fef8 7a67 	vrinta.f32	s15, s15
 80051b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b6:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d810      	bhi.n	80051e0 <parsePreset+0x69c>
 80051be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051c2:	0496      	.short	0x0496
 80051c4:	04750480 	.word	0x04750480
 80051c8:	0449046a 	.word	0x0449046a
 80051cc:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 80051ce:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <parsePreset+0x770>)
 80051d0:	4939      	ldr	r1, [pc, #228]	; (80052b8 <parsePreset+0x774>)
 80051d2:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80051d4:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <parsePreset+0x77c>)
 80051d6:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80051d8:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <parsePreset+0x780>)
 80051da:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <parsePreset+0x784>)
 80051de:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80051e0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80051e4:	edd9 7a1c 	vldr	s15, [r9, #112]	; 0x70
 80051e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ec:	fef8 7a67 	vrinta.f32	s15, s15
 80051f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f4:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80051f8:	2b05      	cmp	r3, #5
 80051fa:	d810      	bhi.n	800521e <parsePreset+0x6da>
 80051fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005200:	04350440 	.word	0x04350440
 8005204:	0414041f 	.word	0x0414041f
 8005208:	00060409 	.word	0x00060409
				lfoShapeTick[i] = &lfoPulseTick;
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <parsePreset+0x770>)
 800520e:	492a      	ldr	r1, [pc, #168]	; (80052b8 <parsePreset+0x774>)
 8005210:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <parsePreset+0x77c>)
 8005214:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8005216:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <parsePreset+0x780>)
 8005218:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800521a:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <parsePreset+0x784>)
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 800521e:	2304      	movs	r3, #4
 8005220:	492c      	ldr	r1, [pc, #176]	; (80052d4 <parsePreset+0x790>)
 8005222:	482d      	ldr	r0, [pc, #180]	; (80052d8 <parsePreset+0x794>)
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	460b      	mov	r3, r1
 8005228:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80052dc <parsePreset+0x798>
				  effectSetters[i].setParam2 = &blankFunction;;
 800522c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80052e0 <parsePreset+0x79c>
				  effectTick[i] = FXVZhighshelfTick;
 8005230:	9204      	str	r2, [sp, #16]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 8005232:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005236:	eddc 7a00 	vldr	s15, [ip]
 800523a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523e:	fef8 7a67 	vrinta.f32	s15, s15
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	edcd 7a01 	vstr	s15, [sp, #4]
		switch (effectType)
 800524a:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800524e:	2c13      	cmp	r4, #19
 8005250:	d852      	bhi.n	80052f8 <parsePreset+0x7b4>
 8005252:	e8df f014 	tbh	[pc, r4, lsl #1]
 8005256:	03d1      	.short	0x03d1
 8005258:	03b703c4 	.word	0x03b703c4
 800525c:	03af03b3 	.word	0x03af03b3
 8005260:	02e303a2 	.word	0x02e303a2
 8005264:	02ce02d6 	.word	0x02ce02d6
 8005268:	02b402c1 	.word	0x02b402c1
 800526c:	029e02a9 	.word	0x029e02a9
 8005270:	038b0293 	.word	0x038b0293
 8005274:	02fb0306 	.word	0x02fb0306
 8005278:	039602f0 	.word	0x039602f0
 800527c:	0047      	.short	0x0047
 800527e:	bf00      	nop
 8005280:	20004a30 	.word	0x20004a30
 8005284:	08000d55 	.word	0x08000d55
 8005288:	200160a8 	.word	0x200160a8
 800528c:	200165b0 	.word	0x200165b0
 8005290:	20015040 	.word	0x20015040
 8005294:	2000006c 	.word	0x2000006c
 8005298:	20000068 	.word	0x20000068
 800529c:	2000448c 	.word	0x2000448c
 80052a0:	080011d9 	.word	0x080011d9
 80052a4:	080014b1 	.word	0x080014b1
 80052a8:	08001565 	.word	0x08001565
 80052ac:	20016658 	.word	0x20016658
 80052b0:	200169f4 	.word	0x200169f4
 80052b4:	20004620 	.word	0x20004620
 80052b8:	08001a69 	.word	0x08001a69
 80052bc:	2001516c 	.word	0x2001516c
 80052c0:	08001ae9 	.word	0x08001ae9
 80052c4:	08001ba9 	.word	0x08001ba9
 80052c8:	08001b61 	.word	0x08001b61
 80052cc:	20016a80 	.word	0x20016a80
 80052d0:	20016b0c 	.word	0x20016b0c
 80052d4:	20012ff0 	.word	0x20012ff0
 80052d8:	2000443c 	.word	0x2000443c
 80052dc:	20016214 	.word	0x20016214
 80052e0:	08003fd9 	.word	0x08003fd9
				  effectTick[i] = &FXLadderLowpassTick;
 80052e4:	4c72      	ldr	r4, [pc, #456]	; (80054b0 <parsePreset+0x96c>)
 80052e6:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 80052e8:	4c72      	ldr	r4, [pc, #456]	; (80054b4 <parsePreset+0x970>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80052ea:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 80052ee:	e9c3 4e00 	strd	r4, lr, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 80052f2:	4c71      	ldr	r4, [pc, #452]	; (80054b8 <parsePreset+0x974>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80052f4:	e9c3 4e02 	strd	r4, lr, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 80052f8:	3004      	adds	r0, #4
 80052fa:	4c70      	ldr	r4, [pc, #448]	; (80054bc <parsePreset+0x978>)
 80052fc:	f10c 0ce0 	add.w	ip, ip, #224	; 0xe0
 8005300:	3314      	adds	r3, #20
 8005302:	4284      	cmp	r4, r0
 8005304:	d195      	bne.n	8005232 <parsePreset+0x6ee>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 8005306:	4c6e      	ldr	r4, [pc, #440]	; (80054c0 <parsePreset+0x97c>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005308:	4b6e      	ldr	r3, [pc, #440]	; (80054c4 <parsePreset+0x980>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 800530a:	f8c6 42d0 	str.w	r4, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 800530e:	f8c6 443c 	str.w	r4, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 8005312:	f8c6 45a8 	str.w	r4, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8005316:	4c6c      	ldr	r4, [pc, #432]	; (80054c8 <parsePreset+0x984>)
	params[Effect1Mix].setParam = &fxMixSet;
 8005318:	486c      	ldr	r0, [pc, #432]	; (80054cc <parsePreset+0x988>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 800531a:	f8c6 435c 	str.w	r4, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 800531e:	f8c6 44c8 	str.w	r4, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 8005322:	f8c6 4634 	str.w	r4, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8005326:	680c      	ldr	r4, [r1, #0]
	params[Effect1Mix].setParam = &fxMixSet;
 8005328:	9a04      	ldr	r2, [sp, #16]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 800532a:	f8c6 4714 	str.w	r4, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 800532e:	684c      	ldr	r4, [r1, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005330:	f8c6 37bc 	str.w	r3, [r6, #1980]	; 0x7bc
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8005334:	f8c6 4730 	str.w	r4, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8005338:	688c      	ldr	r4, [r1, #8]
	params[Effect1Mix].setParam = &fxMixSet;
 800533a:	f8c6 07a0 	str.w	r0, [r6, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 800533e:	f8c6 474c 	str.w	r4, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 8005342:	68cc      	ldr	r4, [r1, #12]
 8005344:	f8c6 4768 	str.w	r4, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8005348:	690c      	ldr	r4, [r1, #16]
 800534a:	f8c6 4784 	str.w	r4, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 800534e:	694c      	ldr	r4, [r1, #20]
 8005350:	f8c6 47f4 	str.w	r4, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 8005354:	698c      	ldr	r4, [r1, #24]
 8005356:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 800535a:	69cc      	ldr	r4, [r1, #28]
 800535c:	f8c6 482c 	str.w	r4, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8005360:	4c5b      	ldr	r4, [pc, #364]	; (80054d0 <parsePreset+0x98c>)
 8005362:	f8c6 4228 	str.w	r4, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 8005366:	4c5b      	ldr	r4, [pc, #364]	; (80054d4 <parsePreset+0x990>)
 8005368:	f8c6 4260 	str.w	r4, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 800536c:	4c5a      	ldr	r4, [pc, #360]	; (80054d8 <parsePreset+0x994>)
 800536e:	f8c6 4244 	str.w	r4, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
 8005372:	4c5a      	ldr	r4, [pc, #360]	; (80054dc <parsePreset+0x998>)
 8005374:	64f4      	str	r4, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 8005376:	4c5a      	ldr	r4, [pc, #360]	; (80054e0 <parsePreset+0x99c>)
 8005378:	f8c6 41d4 	str.w	r4, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 800537c:	4c59      	ldr	r4, [pc, #356]	; (80054e4 <parsePreset+0x9a0>)
 800537e:	f8c6 41f0 	str.w	r4, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 8005382:	4c59      	ldr	r4, [pc, #356]	; (80054e8 <parsePreset+0x9a4>)
 8005384:	f8c9 40d0 	str.w	r4, [r9, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8005388:	6a0c      	ldr	r4, [r1, #32]
	params[Effect2PostGain].setParam = &fxPostGainSet;
 800538a:	f8c6 389c 	str.w	r3, [r6, #2204]	; 0x89c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 800538e:	f8c6 397c 	str.w	r3, [r6, #2428]	; 0x97c
	params[Effect4PostGain].setParam = &fxPostGainSet;
 8005392:	f8c6 3a5c 	str.w	r3, [r6, #2652]	; 0xa5c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 8005396:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8005398:	f8c6 4848 	str.w	r4, [r6, #2120]	; 0x848
	params[OutputAmp].setParam = &setAmp;
 800539c:	2401      	movs	r4, #1
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 800539e:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80053a2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	params[Effect2Mix].setParam = &fxMixSet;
 80053a4:	f8c6 0880 	str.w	r0, [r6, #2176]	; 0x880
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80053a8:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80053ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	params[Effect3Mix].setParam = &fxMixSet;
 80053ae:	f8c6 0960 	str.w	r0, [r6, #2400]	; 0x960
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80053b2:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80053b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	params[Effect4Mix].setParam = &fxMixSet;
 80053b8:	f8c6 0a40 	str.w	r0, [r6, #2624]	; 0xa40
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80053bc:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80053c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80053c2:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 80053c6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80053c8:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 80053cc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80053ce:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 80053d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053d4:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 80053d8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80053da:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 80053de:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80053e0:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80053e4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80053e6:	4941      	ldr	r1, [pc, #260]	; (80054ec <parsePreset+0x9a8>)
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80053e8:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80053f2:	687b      	ldr	r3, [r7, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80053f4:	f8c6 1be4 	str.w	r1, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80053f8:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 80053fc:	68bb      	ldr	r3, [r7, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 80053fe:	f8c6 1c8c 	str.w	r1, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 8005402:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 8005406:	68fb      	ldr	r3, [r7, #12]
		params[i].objectNumber = 0;
 8005408:	2700      	movs	r7, #0
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 800540a:	f8c6 1d34 	str.w	r1, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 800540e:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8005412:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <parsePreset+0x9ac>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 8005414:	f8c6 1ddc 	str.w	r1, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8005418:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 800541c:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 8005420:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 8005424:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8005428:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <parsePreset+0x9b0>)
 800542a:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 800542e:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 8005432:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 8005436:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 800543a:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <parsePreset+0x9b4>)
 800543c:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 8005440:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 8005444:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8005448:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <parsePreset+0x9b8>)
 800544e:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 8005452:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 8005456:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 800545a:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 8005464:	68d3      	ldr	r3, [r2, #12]
 8005466:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 800546a:	6993      	ldr	r3, [r2, #24]
 800546c:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 8005470:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005472:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 8005476:	6853      	ldr	r3, [r2, #4]
 8005478:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 800547c:	6913      	ldr	r3, [r2, #16]
 800547e:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 8005482:	69d3      	ldr	r3, [r2, #28]
 8005484:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 8005488:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800548a:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 800548e:	6893      	ldr	r3, [r2, #8]
 8005490:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 8005494:	6953      	ldr	r3, [r2, #20]
 8005496:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 800549a:	6a13      	ldr	r3, [r2, #32]
 800549c:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 80054a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80054a2:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 80054a6:	4b16      	ldr	r3, [pc, #88]	; (8005500 <parsePreset+0x9bc>)
 80054a8:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80054ac:	46a1      	mov	r9, r4
 80054ae:	e02c      	b.n	800550a <parsePreset+0x9c6>
 80054b0:	0800255d 	.word	0x0800255d
 80054b4:	080027d1 	.word	0x080027d1
 80054b8:	0800298d 	.word	0x0800298d
 80054bc:	2000444c 	.word	0x2000444c
 80054c0:	080013f5 	.word	0x080013f5
 80054c4:	08001f8d 	.word	0x08001f8d
 80054c8:	0800144d 	.word	0x0800144d
 80054cc:	08001f79 	.word	0x08001f79
 80054d0:	080029a1 	.word	0x080029a1
 80054d4:	08002a1d 	.word	0x08002a1d
 80054d8:	080029ed 	.word	0x080029ed
 80054dc:	080017d9 	.word	0x080017d9
 80054e0:	080017e9 	.word	0x080017e9
 80054e4:	080017f5 	.word	0x080017f5
 80054e8:	0800180d 	.word	0x0800180d
 80054ec:	08001721 	.word	0x08001721
 80054f0:	08001741 	.word	0x08001741
 80054f4:	08001761 	.word	0x08001761
 80054f8:	08001775 	.word	0x08001775
 80054fc:	08001795 	.word	0x08001795
 8005500:	080017c9 	.word	0x080017c9
 8005504:	f108 081c 	add.w	r8, r8, #28
 8005508:	3401      	adds	r4, #1
		if ((i >= Osc1) && (i < Osc2))
 800550a:	f1a4 0319 	sub.w	r3, r4, #25
		params[i].objectNumber = 0;
 800550e:	f888 7018 	strb.w	r7, [r8, #24]
		if ((i >= Osc1) && (i < Osc2))
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d94b      	bls.n	80055ae <parsePreset+0xa6a>
		else if ((i >= Osc2) && (i < Osc3))
 8005516:	f1a4 0326 	sub.w	r3, r4, #38	; 0x26
 800551a:	2b0c      	cmp	r3, #12
 800551c:	f240 8538 	bls.w	8005f90 <parsePreset+0x144c>
		else if ((i >= Osc3) && (i < Effect1FXType))
 8005520:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
 8005524:	2b0c      	cmp	r3, #12
 8005526:	f240 852f 	bls.w	8005f88 <parsePreset+0x1444>
		else if ((i >= Filter1) && (i < Filter2))
 800552a:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
 800552e:	2b05      	cmp	r3, #5
 8005530:	d93d      	bls.n	80055ae <parsePreset+0xa6a>
		else if ((i >= Filter2) && (i < Envelope1Attack))
 8005532:	f1a4 0366 	sub.w	r3, r4, #102	; 0x66
 8005536:	2b06      	cmp	r3, #6
 8005538:	f240 852a 	bls.w	8005f90 <parsePreset+0x144c>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
 800553c:	f1a4 036d 	sub.w	r3, r4, #109	; 0x6d
 8005540:	2b05      	cmp	r3, #5
 8005542:	d934      	bls.n	80055ae <parsePreset+0xa6a>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
 8005544:	f1a4 0373 	sub.w	r3, r4, #115	; 0x73
 8005548:	2b05      	cmp	r3, #5
 800554a:	f240 8521 	bls.w	8005f90 <parsePreset+0x144c>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
 800554e:	f1a4 0379 	sub.w	r3, r4, #121	; 0x79
 8005552:	2b05      	cmp	r3, #5
 8005554:	f240 8518 	bls.w	8005f88 <parsePreset+0x1444>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
 8005558:	f1a4 037f 	sub.w	r3, r4, #127	; 0x7f
 800555c:	2b05      	cmp	r3, #5
 800555e:	f240 84fd 	bls.w	8005f5c <parsePreset+0x1418>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
 8005562:	f1a4 0385 	sub.w	r3, r4, #133	; 0x85
 8005566:	2b04      	cmp	r3, #4
 8005568:	d921      	bls.n	80055ae <parsePreset+0xa6a>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
 800556a:	f1a4 038a 	sub.w	r3, r4, #138	; 0x8a
 800556e:	2b04      	cmp	r3, #4
 8005570:	f240 850e 	bls.w	8005f90 <parsePreset+0x144c>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
 8005574:	f1a4 038f 	sub.w	r3, r4, #143	; 0x8f
 8005578:	2b04      	cmp	r3, #4
 800557a:	f240 8505 	bls.w	8005f88 <parsePreset+0x1444>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
 800557e:	f1a4 0394 	sub.w	r3, r4, #148	; 0x94
 8005582:	2b04      	cmp	r3, #4
 8005584:	f240 84ea 	bls.w	8005f5c <parsePreset+0x1418>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
 8005588:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 800558c:	2b07      	cmp	r3, #7
 800558e:	d90e      	bls.n	80055ae <parsePreset+0xa6a>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
 8005590:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48
 8005594:	2b07      	cmp	r3, #7
 8005596:	f240 84fb 	bls.w	8005f90 <parsePreset+0x144c>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
 800559a:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
 800559e:	2b07      	cmp	r3, #7
 80055a0:	f240 84f2 	bls.w	8005f88 <parsePreset+0x1444>
		else if ((i >= Effect4FXType) && (i < Filter1))
 80055a4:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
 80055a8:	2b07      	cmp	r3, #7
 80055aa:	f240 84d7 	bls.w	8005f5c <parsePreset+0x1418>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80055ae:	2100      	movs	r1, #0
 80055b0:	ed98 0a02 	vldr	s0, [r8, #8]
 80055b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80055b8:	4608      	mov	r0, r1
 80055ba:	4798      	blx	r3
 80055bc:	ed98 0a03 	vldr	s0, [r8, #12]
 80055c0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80055c4:	2101      	movs	r1, #1
 80055c6:	f898 0018 	ldrb.w	r0, [r8, #24]
 80055ca:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80055cc:	2c9b      	cmp	r4, #155	; 0x9b
 80055ce:	d199      	bne.n	8005504 <parsePreset+0x9c0>
	numMappings = 0;
 80055d0:	2200      	movs	r2, #0
 80055d2:	4ba9      	ldr	r3, [pc, #676]	; (8005878 <parsePreset+0xd34>)
 80055d4:	f8df e38c 	ldr.w	lr, [pc, #908]	; 8005964 <parsePreset+0xe20>
		mappings[i].destNumber = 255;
 80055d8:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
 80055da:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 80055dc:	4ba7      	ldr	r3, [pc, #668]	; (800587c <parsePreset+0xd38>)
 80055de:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 80055e6:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80055e8:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 80055ea:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80055ee:	4283      	cmp	r3, r0
 80055f0:	d1f9      	bne.n	80055e6 <parsePreset+0xaa2>
	for (int i = 0; i < mappingCount; i++)
 80055f2:	f1ba 0f00 	cmp.w	sl, #0
 80055f6:	f000 8091 	beq.w	800571c <parsePreset+0xbd8>
 80055fa:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
 80055fc:	f04f 0a01 	mov.w	sl, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005600:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005880 <parsePreset+0xd3c>
			mappings[whichMapping].destNumber = destNumber;
 8005604:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8005608:	442b      	add	r3, r5
 800560a:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8005968 <parsePreset+0xe24>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800560e:	9602      	str	r6, [sp, #8]
 8005610:	b29b      	uxth	r3, r3
 8005612:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < mappingCount; i++)
 8005614:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005616:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8005618:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 800561a:	eb0b 0205 	add.w	r2, fp, r5
		uint8_t foundOne = 0;
 800561e:	461c      	mov	r4, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8005620:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 8005622:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8005624:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 8005626:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
 8005628:	7811      	ldrb	r1, [r2, #0]
 800562a:	4281      	cmp	r1, r0
 800562c:	d103      	bne.n	8005636 <parsePreset+0xaf2>
				whichHook = mappings[j].numHooks;
 800562e:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
 8005632:	b2de      	uxtb	r6, r3
				foundOne = 1;
 8005634:	2401      	movs	r4, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8005636:	3301      	adds	r3, #1
 8005638:	324c      	adds	r2, #76	; 0x4c
 800563a:	2b20      	cmp	r3, #32
 800563c:	d1f4      	bne.n	8005628 <parsePreset+0xae4>
		if (foundOne == 0)
 800563e:	2c00      	cmp	r4, #0
 8005640:	f000 8404 	beq.w	8005e4c <parsePreset+0x1308>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005644:	463c      	mov	r4, r7
		int source = buffer[bufferIndex];
 8005646:	f81b 2005 	ldrb.w	r2, [fp, r5]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 800564a:	fb08 f306 	mul.w	r3, r8, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 800564e:	1c60      	adds	r0, r4, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005650:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005654:	eb09 07c2 	add.w	r7, r9, r2, lsl #3
 8005658:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 800565c:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 800565e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005662:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005666:	4421      	add	r1, r4
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005668:	4473      	add	r3, lr
 800566a:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 800566c:	bfcc      	ite	gt
 800566e:	4653      	movgt	r3, sl
 8005670:	2300      	movle	r3, #0
 8005672:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005676:	eb09 03c2 	add.w	r3, r9, r2, lsl #3
 800567a:	00e1      	lsls	r1, r4, #3
 800567c:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005680:	f1a2 0318 	sub.w	r3, r2, #24
 8005684:	2b03      	cmp	r3, #3
 8005686:	d803      	bhi.n	8005690 <parsePreset+0xb4c>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 8005688:	4b7c      	ldr	r3, [pc, #496]	; (800587c <parsePreset+0xd38>)
 800568a:	441a      	add	r2, r3
 800568c:	f802 ac18 	strb.w	sl, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 8005690:	eb0b 0305 	add.w	r3, fp, r5
 8005694:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	f000 83eb 	beq.w	8005e72 <parsePreset+0x132e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800569c:	fb08 f006 	mul.w	r0, r8, r6
 80056a0:	1d22      	adds	r2, r4, #4
 80056a2:	eb09 07c3 	add.w	r7, r9, r3, lsl #3
 80056a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80056aa:	4472      	add	r2, lr
 80056ac:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80056ae:	f1a3 0218 	sub.w	r2, r3, #24
 80056b2:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80056b4:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80056b8:	f200 83e7 	bhi.w	8005e8a <parsePreset+0x1346>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80056bc:	2004      	movs	r0, #4
 80056be:	2108      	movs	r1, #8
 80056c0:	4472      	add	r2, lr
 80056c2:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80056c6:	486d      	ldr	r0, [pc, #436]	; (800587c <parsePreset+0xd38>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80056c8:	4449      	add	r1, r9
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80056ca:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80056cc:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80056ce:	f803 ac18 	strb.w	sl, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80056d2:	eb0b 0205 	add.w	r2, fp, r5
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80056d6:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
		bufferIndex += 5;
 80056da:	3505      	adds	r5, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80056dc:	78d1      	ldrb	r1, [r2, #3]
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80056de:	eb06 0747 	add.w	r7, r6, r7, lsl #1
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80056e2:	7913      	ldrb	r3, [r2, #4]
		mappings[whichMapping].numHooks++;
 80056e4:	fb08 e606 	mla	r6, r8, r6, lr
		bufferIndex += 5;
 80056e8:	b2ad      	uxth	r5, r5
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80056ea:	443c      	add	r4, r7
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80056ec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80056f0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 80056f4:	b21b      	sxth	r3, r3
 80056f6:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].numHooks++;
 80056fa:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 80056fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].numHooks++;
 8005702:	3301      	adds	r3, #1
 8005704:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 8005708:	9b01      	ldr	r3, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 800570a:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < mappingCount; i++)
 800570e:	429d      	cmp	r5, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005710:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
	for (int i = 0; i < mappingCount; i++)
 8005714:	d180      	bne.n	8005618 <parsePreset+0xad4>
 8005716:	4b58      	ldr	r3, [pc, #352]	; (8005878 <parsePreset+0xd34>)
 8005718:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
 800571c:	4b59      	ldr	r3, [pc, #356]	; (8005884 <parsePreset+0xd40>)
	presetWaitingToParse = 0;
 800571e:	2000      	movs	r0, #0
	audioMasterLevel = 1.0f;
 8005720:	4959      	ldr	r1, [pc, #356]	; (8005888 <parsePreset+0xd44>)
	if (params[Filter1].zeroToOneVal[0])
 8005722:	461a      	mov	r2, r3
 8005724:	ed93 7a00 	vldr	s14, [r3]
	if (params[Filter2].zeroToOneVal[0])
 8005728:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
	audioMasterLevel = 1.0f;
 800572c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	if (params[Filter1].zeroToOneVal[0])
 8005730:	eeb5 7a40 	vcmp.f32	s14, #0.0
	audioMasterLevel = 1.0f;
 8005734:	600b      	str	r3, [r1, #0]
	presetWaitingToParse = 0;
 8005736:	4955      	ldr	r1, [pc, #340]	; (800588c <parsePreset+0xd48>)
	if (params[Filter1].zeroToOneVal[0])
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscToTick = NUM_OSC;
 800573c:	4b54      	ldr	r3, [pc, #336]	; (8005890 <parsePreset+0xd4c>)
	presetWaitingToParse = 0;
 800573e:	6008      	str	r0, [r1, #0]
	if (params[Filter2].zeroToOneVal[0])
 8005740:	eef5 7a40 	vcmp.f32	s15, #0.0
	currentActivePreset = presetNumber;
 8005744:	9805      	ldr	r0, [sp, #20]
 8005746:	4953      	ldr	r1, [pc, #332]	; (8005894 <parsePreset+0xd50>)
	uint8_t totalFilters = 0;
 8005748:	bf14      	ite	ne
 800574a:	2201      	movne	r2, #1
 800574c:	2200      	moveq	r2, #0
	if (params[Filter2].zeroToOneVal[0])
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 8005752:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 8005754:	f04f 0103 	mov.w	r1, #3
	numEffectToTick = totalEffects;
 8005758:	9803      	ldr	r0, [sp, #12]
	oscToTick = NUM_OSC;
 800575a:	7019      	strb	r1, [r3, #0]
	overSampled = 1;
 800575c:	f04f 0301 	mov.w	r3, #1
 8005760:	494d      	ldr	r1, [pc, #308]	; (8005898 <parsePreset+0xd54>)
		totalFilters++;
 8005762:	bf18      	it	ne
 8005764:	3201      	addne	r2, #1
	overSampled = 1;
 8005766:	700b      	strb	r3, [r1, #0]
	numEffectToTick = totalEffects;
 8005768:	494c      	ldr	r1, [pc, #304]	; (800589c <parsePreset+0xd58>)
 800576a:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 800576c:	494c      	ldr	r1, [pc, #304]	; (80058a0 <parsePreset+0xd5c>)
 800576e:	700a      	strb	r2, [r1, #0]
 8005770:	b662      	cpsie	i
	presetReady = 1;
 8005772:	4a4c      	ldr	r2, [pc, #304]	; (80058a4 <parsePreset+0xd60>)
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	b007      	add	sp, #28
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
 800577c:	4c4a      	ldr	r4, [pc, #296]	; (80058a8 <parsePreset+0xd64>)
				  effectSetters[i].setParam2 = &blankFunction;
 800577e:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 8005782:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 8005784:	4c49      	ldr	r4, [pc, #292]	; (80058ac <parsePreset+0xd68>)
 8005786:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8005788:	4c49      	ldr	r4, [pc, #292]	; (80058b0 <parsePreset+0xd6c>)
				  effectSetters[i].setParam5 = &blankFunction;
 800578a:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 800578e:	609c      	str	r4, [r3, #8]
				  break;
 8005790:	e5b2      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &FXhighpassTick;
 8005792:	4c48      	ldr	r4, [pc, #288]	; (80058b4 <parsePreset+0xd70>)
				  effectSetters[i].setParam2 = &blankFunction;
 8005794:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 8005798:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 800579a:	4c47      	ldr	r4, [pc, #284]	; (80058b8 <parsePreset+0xd74>)
 800579c:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 800579e:	4c47      	ldr	r4, [pc, #284]	; (80058bc <parsePreset+0xd78>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057a0:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80057a4:	609c      	str	r4, [r3, #8]
				  break;
 80057a6:	e5a7      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &FXlowpassTick;
 80057a8:	4c45      	ldr	r4, [pc, #276]	; (80058c0 <parsePreset+0xd7c>)
				  effectSetters[i].setParam2 = &blankFunction;
 80057aa:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 80057ae:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 80057b0:	4c44      	ldr	r4, [pc, #272]	; (80058c4 <parsePreset+0xd80>)
 80057b2:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80057b4:	4c44      	ldr	r4, [pc, #272]	; (80058c8 <parsePreset+0xd84>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80057b6:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80057ba:	609c      	str	r4, [r3, #8]
				  break;
 80057bc:	e59c      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &wavefolderTick;
 80057be:	4c43      	ldr	r4, [pc, #268]	; (80058cc <parsePreset+0xd88>)
 80057c0:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 80057c2:	4c43      	ldr	r4, [pc, #268]	; (80058d0 <parsePreset+0xd8c>)
 80057c4:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80057c6:	4c43      	ldr	r4, [pc, #268]	; (80058d4 <parsePreset+0xd90>)
 80057c8:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 80057ca:	4c43      	ldr	r4, [pc, #268]	; (80058d8 <parsePreset+0xd94>)
 80057cc:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80057ce:	4c43      	ldr	r4, [pc, #268]	; (80058dc <parsePreset+0xd98>)
 80057d0:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 80057d2:	4c43      	ldr	r4, [pc, #268]	; (80058e0 <parsePreset+0xd9c>)
 80057d4:	611c      	str	r4, [r3, #16]
				  break;
 80057d6:	e58f      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &tiltFilterTick;
 80057d8:	4c42      	ldr	r4, [pc, #264]	; (80058e4 <parsePreset+0xda0>)
 80057da:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &tiltParam1;
 80057dc:	4c42      	ldr	r4, [pc, #264]	; (80058e8 <parsePreset+0xda4>)
 80057de:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &tiltParam2;
 80057e0:	4c42      	ldr	r4, [pc, #264]	; (80058ec <parsePreset+0xda8>)
 80057e2:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 80057e4:	4c42      	ldr	r4, [pc, #264]	; (80058f0 <parsePreset+0xdac>)
 80057e6:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 80057e8:	4c42      	ldr	r4, [pc, #264]	; (80058f4 <parsePreset+0xdb0>)
 80057ea:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 80057ec:	4c3c      	ldr	r4, [pc, #240]	; (80058e0 <parsePreset+0xd9c>)
 80057ee:	611c      	str	r4, [r3, #16]
				  break;
 80057f0:	e582      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &bcTick;
 80057f2:	4c41      	ldr	r4, [pc, #260]	; (80058f8 <parsePreset+0xdb4>)
 80057f4:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80057f6:	4c41      	ldr	r4, [pc, #260]	; (80058fc <parsePreset+0xdb8>)
 80057f8:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &param2Linear;
 80057fa:	4c41      	ldr	r4, [pc, #260]	; (8005900 <parsePreset+0xdbc>)
 80057fc:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 80057fe:	4c41      	ldr	r4, [pc, #260]	; (8005904 <parsePreset+0xdc0>)
 8005800:	e7e4      	b.n	80057cc <parsePreset+0xc88>
				  effectTick[i] = &chorusTick;
 8005802:	4c41      	ldr	r4, [pc, #260]	; (8005908 <parsePreset+0xdc4>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005804:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &chorusTick;
 8005808:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &chorusParam1;
 800580a:	4c40      	ldr	r4, [pc, #256]	; (800590c <parsePreset+0xdc8>)
 800580c:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &chorusParam2;
 800580e:	4c40      	ldr	r4, [pc, #256]	; (8005910 <parsePreset+0xdcc>)
 8005810:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 8005812:	4c40      	ldr	r4, [pc, #256]	; (8005914 <parsePreset+0xdd0>)
 8005814:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 8005816:	4c40      	ldr	r4, [pc, #256]	; (8005918 <parsePreset+0xdd4>)
 8005818:	60dc      	str	r4, [r3, #12]
				  break;
 800581a:	e56d      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &compressorTick;
 800581c:	4c3f      	ldr	r4, [pc, #252]	; (800591c <parsePreset+0xdd8>)
 800581e:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &compressorParam1;
 8005820:	4c3f      	ldr	r4, [pc, #252]	; (8005920 <parsePreset+0xddc>)
 8005822:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &compressorParam2;
 8005824:	4c3f      	ldr	r4, [pc, #252]	; (8005924 <parsePreset+0xde0>)
 8005826:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 8005828:	4c3f      	ldr	r4, [pc, #252]	; (8005928 <parsePreset+0xde4>)
 800582a:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 800582c:	4c3f      	ldr	r4, [pc, #252]	; (800592c <parsePreset+0xde8>)
 800582e:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 8005830:	4c3f      	ldr	r4, [pc, #252]	; (8005930 <parsePreset+0xdec>)
 8005832:	611c      	str	r4, [r3, #16]
				  break;
 8005834:	e560      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = FXVZhighshelfTick;
 8005836:	4c3f      	ldr	r4, [pc, #252]	; (8005934 <parsePreset+0xdf0>)
 8005838:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800583a:	4c3f      	ldr	r4, [pc, #252]	; (8005938 <parsePreset+0xdf4>)
 800583c:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 800583e:	4c3f      	ldr	r4, [pc, #252]	; (800593c <parsePreset+0xdf8>)
 8005840:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8005842:	4c3f      	ldr	r4, [pc, #252]	; (8005940 <parsePreset+0xdfc>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8005844:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8005848:	609c      	str	r4, [r3, #8]
				  break;
 800584a:	e555      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &FXVZlowshelfTick;
 800584c:	4c3d      	ldr	r4, [pc, #244]	; (8005944 <parsePreset+0xe00>)
 800584e:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8005850:	4c3d      	ldr	r4, [pc, #244]	; (8005948 <parsePreset+0xe04>)
 8005852:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8005854:	4c3d      	ldr	r4, [pc, #244]	; (800594c <parsePreset+0xe08>)
 8005856:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8005858:	4c3d      	ldr	r4, [pc, #244]	; (8005950 <parsePreset+0xe0c>)
				  effectSetters[i].setParam5 = &blankFunction;
 800585a:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800585e:	609c      	str	r4, [r3, #8]
				  break;
 8005860:	e54a      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &FXVZpeakTick;
 8005862:	4c3c      	ldr	r4, [pc, #240]	; (8005954 <parsePreset+0xe10>)
 8005864:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 8005866:	4c3c      	ldr	r4, [pc, #240]	; (8005958 <parsePreset+0xe14>)
 8005868:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 800586a:	4c3c      	ldr	r4, [pc, #240]	; (800595c <parsePreset+0xe18>)
 800586c:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 800586e:	4c3c      	ldr	r4, [pc, #240]	; (8005960 <parsePreset+0xe1c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005870:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8005874:	609c      	str	r4, [r3, #8]
				  break;
 8005876:	e53f      	b.n	80052f8 <parsePreset+0x7b4>
 8005878:	20015b24 	.word	0x20015b24
 800587c:	200045bc 	.word	0x200045bc
 8005880:	37fffffc 	.word	0x37fffffc
 8005884:	2001658c 	.word	0x2001658c
 8005888:	20000088 	.word	0x20000088
 800588c:	20016c30 	.word	0x20016c30
 8005890:	2000007c 	.word	0x2000007c
 8005894:	20012fb0 	.word	0x20012fb0
 8005898:	2000007d 	.word	0x2000007d
 800589c:	20000064 	.word	0x20000064
 80058a0:	20000004 	.word	0x20000004
 80058a4:	2000496c 	.word	0x2000496c
 80058a8:	080024e5 	.word	0x080024e5
 80058ac:	08002609 	.word	0x08002609
 80058b0:	08002915 	.word	0x08002915
 80058b4:	080024d1 	.word	0x080024d1
 80058b8:	080025bd 	.word	0x080025bd
 80058bc:	08002901 	.word	0x08002901
 80058c0:	080024bd 	.word	0x080024bd
 80058c4:	08002571 	.word	0x08002571
 80058c8:	080028ed 	.word	0x080028ed
 80058cc:	08001fbd 	.word	0x08001fbd
 80058d0:	08001be5 	.word	0x08001be5
 80058d4:	08001e0d 	.word	0x08001e0d
 80058d8:	08001c0d 	.word	0x08001c0d
 80058dc:	08001f25 	.word	0x08001f25
 80058e0:	08001f39 	.word	0x08001f39
 80058e4:	0800227d 	.word	0x0800227d
 80058e8:	08001c3d 	.word	0x08001c3d
 80058ec:	08001c8d 	.word	0x08001c8d
 80058f0:	08001cd9 	.word	0x08001cd9
 80058f4:	08001cfd 	.word	0x08001cfd
 80058f8:	08002485 	.word	0x08002485
 80058fc:	08001bbd 	.word	0x08001bbd
 8005900:	08001e2d 	.word	0x08001e2d
 8005904:	08001f4d 	.word	0x08001f4d
 8005908:	08002165 	.word	0x08002165
 800590c:	080020c9 	.word	0x080020c9
 8005910:	080020ed 	.word	0x080020ed
 8005914:	0800210d 	.word	0x0800210d
 8005918:	08002139 	.word	0x08002139
 800591c:	080024a9 	.word	0x080024a9
 8005920:	08001d31 	.word	0x08001d31
 8005924:	08001d4d 	.word	0x08001d4d
 8005928:	08001d81 	.word	0x08001d81
 800592c:	08001d9d 	.word	0x08001d9d
 8005930:	08001dd5 	.word	0x08001dd5
 8005934:	08002535 	.word	0x08002535
 8005938:	08002739 	.word	0x08002739
 800593c:	08002885 	.word	0x08002885
 8005940:	08002965 	.word	0x08002965
 8005944:	08002521 	.word	0x08002521
 8005948:	080026ed 	.word	0x080026ed
 800594c:	08002851 	.word	0x08002851
 8005950:	08002951 	.word	0x08002951
 8005954:	0800250d 	.word	0x0800250d
 8005958:	080026a1 	.word	0x080026a1
 800595c:	0800281d 	.word	0x0800281d
 8005960:	0800293d 	.word	0x0800293d
 8005964:	200151a0 	.word	0x200151a0
 8005968:	20012d3c 	.word	0x20012d3c
				  effectTick[i] = &FXdiodeLowpassTick;
 800596c:	4c8d      	ldr	r4, [pc, #564]	; (8005ba4 <parsePreset+0x1060>)
				  effectSetters[i].setParam2 = &blankFunction;
 800596e:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 8005972:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 8005974:	4c8c      	ldr	r4, [pc, #560]	; (8005ba8 <parsePreset+0x1064>)
 8005976:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8005978:	4c8c      	ldr	r4, [pc, #560]	; (8005bac <parsePreset+0x1068>)
				  effectSetters[i].setParam5 = &blankFunction;
 800597a:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 800597e:	609c      	str	r4, [r3, #8]
				  break;
 8005980:	e4ba      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = FXVZbandrejectTick;
 8005982:	4c8b      	ldr	r4, [pc, #556]	; (8005bb0 <parsePreset+0x106c>)
 8005984:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8005986:	4c8b      	ldr	r4, [pc, #556]	; (8005bb4 <parsePreset+0x1070>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8005988:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 800598c:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 800598e:	4c8a      	ldr	r4, [pc, #552]	; (8005bb8 <parsePreset+0x1074>)
 8005990:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 8005992:	4c8a      	ldr	r4, [pc, #552]	; (8005bbc <parsePreset+0x1078>)
				  effectSetters[i].setParam4 = &blankFunction;;
 8005994:	e9c3 4e02 	strd	r4, lr, [r3, #8]
				  break;
 8005998:	e4ae      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &shaperTick;
 800599a:	4c89      	ldr	r4, [pc, #548]	; (8005bc0 <parsePreset+0x107c>)
				  effectSetters[i].setParam5 = &blankFunction;
 800599c:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &tanhTick;
 80059a0:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80059a2:	4c88      	ldr	r4, [pc, #544]	; (8005bc4 <parsePreset+0x1080>)
 80059a4:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80059a6:	4c88      	ldr	r4, [pc, #544]	; (8005bc8 <parsePreset+0x1084>)
 80059a8:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 80059aa:	4c88      	ldr	r4, [pc, #544]	; (8005bcc <parsePreset+0x1088>)
 80059ac:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80059ae:	4c88      	ldr	r4, [pc, #544]	; (8005bd0 <parsePreset+0x108c>)
 80059b0:	60dc      	str	r4, [r3, #12]
				  break;
 80059b2:	e4a1      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &tanhTick;
 80059b4:	4c87      	ldr	r4, [pc, #540]	; (8005bd4 <parsePreset+0x1090>)
				  effectSetters[i].setParam5 = &blankFunction;
 80059b6:	f8c3 e010 	str.w	lr, [r3, #16]
 80059ba:	e7f1      	b.n	80059a0 <parsePreset+0xe5c>
				  effectTick[i] = &satTick;
 80059bc:	4c86      	ldr	r4, [pc, #536]	; (8005bd8 <parsePreset+0x1094>)
				  effectSetters[i].setParam5 = &blankFunction;
 80059be:	f8c3 e010 	str.w	lr, [r3, #16]
 80059c2:	e7ed      	b.n	80059a0 <parsePreset+0xe5c>
				  effectTick[i] = &hardClipTick;
 80059c4:	4c85      	ldr	r4, [pc, #532]	; (8005bdc <parsePreset+0x1098>)
				  effectSetters[i].setParam5 = &blankFunction;
 80059c6:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &hardClipTick;
 80059ca:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80059cc:	4c7d      	ldr	r4, [pc, #500]	; (8005bc4 <parsePreset+0x1080>)
 80059ce:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80059d0:	4c7d      	ldr	r4, [pc, #500]	; (8005bc8 <parsePreset+0x1084>)
 80059d2:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 80059d4:	4c82      	ldr	r4, [pc, #520]	; (8005be0 <parsePreset+0x109c>)
 80059d6:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80059d8:	4c7d      	ldr	r4, [pc, #500]	; (8005bd0 <parsePreset+0x108c>)
 80059da:	60dc      	str	r4, [r3, #12]
				  break;
 80059dc:	e48c      	b.n	80052f8 <parsePreset+0x7b4>
				  effectTick[i] = &softClipTick;
 80059de:	4c81      	ldr	r4, [pc, #516]	; (8005be4 <parsePreset+0x10a0>)
				  effectSetters[i].setParam5 = &blankFunction;
 80059e0:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &softClipTick;
 80059e4:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80059e6:	4c77      	ldr	r4, [pc, #476]	; (8005bc4 <parsePreset+0x1080>)
 80059e8:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80059ea:	4c77      	ldr	r4, [pc, #476]	; (8005bc8 <parsePreset+0x1084>)
 80059ec:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 80059ee:	4c7e      	ldr	r4, [pc, #504]	; (8005be8 <parsePreset+0x10a4>)
 80059f0:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80059f2:	4c77      	ldr	r4, [pc, #476]	; (8005bd0 <parsePreset+0x108c>)
 80059f4:	60dc      	str	r4, [r3, #12]
				  break;
 80059f6:	e47f      	b.n	80052f8 <parsePreset+0x7b4>
				  totalEffects--;
 80059f8:	9c03      	ldr	r4, [sp, #12]
				  effectSetters[i].setParam3 = &blankFunction;
 80059fa:	f8c3 e008 	str.w	lr, [r3, #8]
				  totalEffects--;
 80059fe:	3c01      	subs	r4, #1
 8005a00:	b2e4      	uxtb	r4, r4
 8005a02:	9403      	str	r4, [sp, #12]
				  effectTick[i] = &blankTick;
 8005a04:	4c79      	ldr	r4, [pc, #484]	; (8005bec <parsePreset+0x10a8>)
				  effectSetters[i].setParam2 = &blankFunction;
 8005a06:	e9c3 ee00 	strd	lr, lr, [r3]
				  effectSetters[i].setParam5 = &blankFunction;
 8005a0a:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectTick[i] = &blankTick;
 8005a0e:	6004      	str	r4, [r0, #0]
				  break;
 8005a10:	e472      	b.n	80052f8 <parsePreset+0x7b4>
				lfoShapeTick[i] = &lfoSawTick;
 8005a12:	4b77      	ldr	r3, [pc, #476]	; (8005bf0 <parsePreset+0x10ac>)
 8005a14:	4977      	ldr	r1, [pc, #476]	; (8005bf4 <parsePreset+0x10b0>)
 8005a16:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005a18:	4b77      	ldr	r3, [pc, #476]	; (8005bf8 <parsePreset+0x10b4>)
 8005a1a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005a1c:	4b77      	ldr	r3, [pc, #476]	; (8005bfc <parsePreset+0x10b8>)
 8005a1e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005a20:	4b77      	ldr	r3, [pc, #476]	; (8005c00 <parsePreset+0x10bc>)
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005a24:	f7ff bbfb 	b.w	800521e <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoTriTick;
 8005a28:	4b71      	ldr	r3, [pc, #452]	; (8005bf0 <parsePreset+0x10ac>)
 8005a2a:	4976      	ldr	r1, [pc, #472]	; (8005c04 <parsePreset+0x10c0>)
 8005a2c:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005a2e:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <parsePreset+0x10c4>)
 8005a30:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005a32:	4b76      	ldr	r3, [pc, #472]	; (8005c0c <parsePreset+0x10c8>)
 8005a34:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8005a36:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <parsePreset+0x10cc>)
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005a3a:	f7ff bbf0 	b.w	800521e <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSineTick;
 8005a3e:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <parsePreset+0x10ac>)
 8005a40:	4974      	ldr	r1, [pc, #464]	; (8005c14 <parsePreset+0x10d0>)
 8005a42:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005a44:	4b74      	ldr	r3, [pc, #464]	; (8005c18 <parsePreset+0x10d4>)
 8005a46:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 8005a48:	4b74      	ldr	r3, [pc, #464]	; (8005c1c <parsePreset+0x10d8>)
 8005a4a:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005a4c:	4b74      	ldr	r3, [pc, #464]	; (8005c20 <parsePreset+0x10dc>)
 8005a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005a50:	f7ff bbe5 	b.w	800521e <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSawTick;
 8005a54:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <parsePreset+0x10ac>)
 8005a56:	4967      	ldr	r1, [pc, #412]	; (8005bf4 <parsePreset+0x10b0>)
 8005a58:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005a5a:	4b67      	ldr	r3, [pc, #412]	; (8005bf8 <parsePreset+0x10b4>)
 8005a5c:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005a5e:	4b67      	ldr	r3, [pc, #412]	; (8005bfc <parsePreset+0x10b8>)
 8005a60:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <parsePreset+0x10bc>)
 8005a64:	6213      	str	r3, [r2, #32]
				break;
 8005a66:	f7ff bbbb 	b.w	80051e0 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005a6a:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <parsePreset+0x10ac>)
 8005a6c:	496d      	ldr	r1, [pc, #436]	; (8005c24 <parsePreset+0x10e0>)
 8005a6e:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005a70:	4b6d      	ldr	r3, [pc, #436]	; (8005c28 <parsePreset+0x10e4>)
 8005a72:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005a74:	4b6d      	ldr	r3, [pc, #436]	; (8005c2c <parsePreset+0x10e8>)
 8005a76:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005a78:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <parsePreset+0x10ec>)
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005a7c:	f7ff bbcf 	b.w	800521e <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005a80:	4b5b      	ldr	r3, [pc, #364]	; (8005bf0 <parsePreset+0x10ac>)
 8005a82:	496c      	ldr	r1, [pc, #432]	; (8005c34 <parsePreset+0x10f0>)
 8005a84:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005a86:	4b6c      	ldr	r3, [pc, #432]	; (8005c38 <parsePreset+0x10f4>)
 8005a88:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005a8a:	4b6c      	ldr	r3, [pc, #432]	; (8005c3c <parsePreset+0x10f8>)
 8005a8c:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005a8e:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <parsePreset+0x10fc>)
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005a92:	f7ff bbc4 	b.w	800521e <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoTriTick;
 8005a96:	4b56      	ldr	r3, [pc, #344]	; (8005bf0 <parsePreset+0x10ac>)
 8005a98:	495a      	ldr	r1, [pc, #360]	; (8005c04 <parsePreset+0x10c0>)
 8005a9a:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005a9c:	4b5a      	ldr	r3, [pc, #360]	; (8005c08 <parsePreset+0x10c4>)
 8005a9e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005aa0:	4b5a      	ldr	r3, [pc, #360]	; (8005c0c <parsePreset+0x10c8>)
 8005aa2:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8005aa4:	4b5a      	ldr	r3, [pc, #360]	; (8005c10 <parsePreset+0x10cc>)
 8005aa6:	6213      	str	r3, [r2, #32]
				break;
 8005aa8:	f7ff bb9a 	b.w	80051e0 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSineTick;
 8005aac:	4b50      	ldr	r3, [pc, #320]	; (8005bf0 <parsePreset+0x10ac>)
 8005aae:	4959      	ldr	r1, [pc, #356]	; (8005c14 <parsePreset+0x10d0>)
 8005ab0:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005ab2:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <parsePreset+0x10d4>)
 8005ab4:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8005ab6:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <parsePreset+0x10d8>)
 8005ab8:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005aba:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <parsePreset+0x10dc>)
 8005abc:	6213      	str	r3, [r2, #32]
				break;
 8005abe:	f7ff bb8f 	b.w	80051e0 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <parsePreset+0x10ac>)
 8005ac4:	4957      	ldr	r1, [pc, #348]	; (8005c24 <parsePreset+0x10e0>)
 8005ac6:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005ac8:	4b57      	ldr	r3, [pc, #348]	; (8005c28 <parsePreset+0x10e4>)
 8005aca:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005acc:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <parsePreset+0x10e8>)
 8005ace:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005ad0:	4b57      	ldr	r3, [pc, #348]	; (8005c30 <parsePreset+0x10ec>)
 8005ad2:	6213      	str	r3, [r2, #32]
				break;
 8005ad4:	f7ff bb84 	b.w	80051e0 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawTick;
 8005ad8:	4b45      	ldr	r3, [pc, #276]	; (8005bf0 <parsePreset+0x10ac>)
 8005ada:	4946      	ldr	r1, [pc, #280]	; (8005bf4 <parsePreset+0x10b0>)
 8005adc:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005ade:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <parsePreset+0x10b4>)
 8005ae0:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005ae2:	4b46      	ldr	r3, [pc, #280]	; (8005bfc <parsePreset+0x10b8>)
 8005ae4:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005ae6:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <parsePreset+0x10bc>)
 8005ae8:	6153      	str	r3, [r2, #20]
				break;
 8005aea:	f7ff bb59 	b.w	80051a0 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005aee:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <parsePreset+0x10ac>)
 8005af0:	4950      	ldr	r1, [pc, #320]	; (8005c34 <parsePreset+0x10f0>)
 8005af2:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005af4:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <parsePreset+0x10f4>)
 8005af6:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005af8:	4b50      	ldr	r3, [pc, #320]	; (8005c3c <parsePreset+0x10f8>)
 8005afa:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005afc:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <parsePreset+0x10fc>)
 8005afe:	6213      	str	r3, [r2, #32]
				break;
 8005b00:	f7ff bb6e 	b.w	80051e0 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoTriTick;
 8005b04:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <parsePreset+0x10ac>)
 8005b06:	493f      	ldr	r1, [pc, #252]	; (8005c04 <parsePreset+0x10c0>)
 8005b08:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005b0a:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <parsePreset+0x10c4>)
 8005b0c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005b0e:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <parsePreset+0x10c8>)
 8005b10:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <parsePreset+0x10cc>)
 8005b14:	6153      	str	r3, [r2, #20]
				break;
 8005b16:	f7ff bb43 	b.w	80051a0 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTick;
 8005b1a:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <parsePreset+0x10ac>)
 8005b1c:	493d      	ldr	r1, [pc, #244]	; (8005c14 <parsePreset+0x10d0>)
 8005b1e:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005b20:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <parsePreset+0x10d4>)
 8005b22:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8005b24:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <parsePreset+0x10d8>)
 8005b26:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005b28:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <parsePreset+0x10dc>)
 8005b2a:	6153      	str	r3, [r2, #20]
				break;
 8005b2c:	f7ff bb38 	b.w	80051a0 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <parsePreset+0x10ac>)
 8005b32:	493c      	ldr	r1, [pc, #240]	; (8005c24 <parsePreset+0x10e0>)
 8005b34:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005b36:	4b3c      	ldr	r3, [pc, #240]	; (8005c28 <parsePreset+0x10e4>)
 8005b38:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005b3a:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <parsePreset+0x10e8>)
 8005b3c:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <parsePreset+0x10ec>)
 8005b40:	6153      	str	r3, [r2, #20]
				break;
 8005b42:	f7ff bb2d 	b.w	80051a0 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005b46:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <parsePreset+0x10ac>)
 8005b48:	493a      	ldr	r1, [pc, #232]	; (8005c34 <parsePreset+0x10f0>)
 8005b4a:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <parsePreset+0x10f4>)
 8005b4e:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005b50:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <parsePreset+0x10f8>)
 8005b52:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005b54:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <parsePreset+0x10fc>)
 8005b56:	6153      	str	r3, [r2, #20]
				break;
 8005b58:	f7ff bb22 	b.w	80051a0 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSawTick;
 8005b5c:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <parsePreset+0x10ac>)
 8005b5e:	4925      	ldr	r1, [pc, #148]	; (8005bf4 <parsePreset+0x10b0>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005b60:	4a38      	ldr	r2, [pc, #224]	; (8005c44 <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoSawTick;
 8005b62:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <parsePreset+0x10b4>)
 8005b66:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005b68:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <parsePreset+0x10b8>)
 8005b6a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <parsePreset+0x10bc>)
 8005b6e:	6093      	str	r3, [r2, #8]
				break;
 8005b70:	f7ff baf6 	b.w	8005160 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoTriTick;
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <parsePreset+0x10ac>)
 8005b76:	4923      	ldr	r1, [pc, #140]	; (8005c04 <parsePreset+0x10c0>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005b78:	4a32      	ldr	r2, [pc, #200]	; (8005c44 <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoTriTick;
 8005b7a:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <parsePreset+0x10c4>)
 8005b7e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005b80:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <parsePreset+0x10c8>)
 8005b82:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8005b84:	4b22      	ldr	r3, [pc, #136]	; (8005c10 <parsePreset+0x10cc>)
 8005b86:	6093      	str	r3, [r2, #8]
				break;
 8005b88:	f7ff baea 	b.w	8005160 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoSineTick;
 8005b8c:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <parsePreset+0x10ac>)
 8005b8e:	4921      	ldr	r1, [pc, #132]	; (8005c14 <parsePreset+0x10d0>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005b90:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoSineTick;
 8005b92:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005b94:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <parsePreset+0x10d4>)
 8005b96:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8005b98:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <parsePreset+0x10d8>)
 8005b9a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005b9c:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <parsePreset+0x10dc>)
 8005b9e:	6093      	str	r3, [r2, #8]
				break;
 8005ba0:	f7ff bade 	b.w	8005160 <parsePreset+0x61c>
 8005ba4:	080024f9 	.word	0x080024f9
 8005ba8:	08002655 	.word	0x08002655
 8005bac:	08002929 	.word	0x08002929
 8005bb0:	08002549 	.word	0x08002549
 8005bb4:	08002785 	.word	0x08002785
 8005bb8:	080028b9 	.word	0x080028b9
 8005bbc:	08002979 	.word	0x08002979
 8005bc0:	08002229 	.word	0x08002229
 8005bc4:	08001bbd 	.word	0x08001bbd
 8005bc8:	08001e0d 	.word	0x08001e0d
 8005bcc:	08001e41 	.word	0x08001e41
 8005bd0:	08001f25 	.word	0x08001f25
 8005bd4:	080022b1 	.word	0x080022b1
 8005bd8:	08002411 	.word	0x08002411
 8005bdc:	0800238d 	.word	0x0800238d
 8005be0:	08001ead 	.word	0x08001ead
 8005be4:	08002309 	.word	0x08002309
 8005be8:	08001e55 	.word	0x08001e55
 8005bec:	08002279 	.word	0x08002279
 8005bf0:	20004620 	.word	0x20004620
 8005bf4:	08001a41 	.word	0x08001a41
 8005bf8:	08001ad5 	.word	0x08001ad5
 8005bfc:	08001ba5 	.word	0x08001ba5
 8005c00:	08001b4d 	.word	0x08001b4d
 8005c04:	08001a25 	.word	0x08001a25
 8005c08:	08001ac1 	.word	0x08001ac1
 8005c0c:	08001ba1 	.word	0x08001ba1
 8005c10:	08001b39 	.word	0x08001b39
 8005c14:	08001a09 	.word	0x08001a09
 8005c18:	08001aad 	.word	0x08001aad
 8005c1c:	08001b9d 	.word	0x08001b9d
 8005c20:	08001b25 	.word	0x08001b25
 8005c24:	080019d1 	.word	0x080019d1
 8005c28:	08001a85 	.word	0x08001a85
 8005c2c:	08001b75 	.word	0x08001b75
 8005c30:	08001afd 	.word	0x08001afd
 8005c34:	080019ed 	.word	0x080019ed
 8005c38:	08001a99 	.word	0x08001a99
 8005c3c:	08001b89 	.word	0x08001b89
 8005c40:	08001b11 	.word	0x08001b11
 8005c44:	2001516c 	.word	0x2001516c
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005c48:	4b97      	ldr	r3, [pc, #604]	; (8005ea8 <parsePreset+0x1364>)
 8005c4a:	4998      	ldr	r1, [pc, #608]	; (8005eac <parsePreset+0x1368>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005c4c:	4a98      	ldr	r2, [pc, #608]	; (8005eb0 <parsePreset+0x136c>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005c4e:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005c50:	4b98      	ldr	r3, [pc, #608]	; (8005eb4 <parsePreset+0x1370>)
 8005c52:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005c54:	4b98      	ldr	r3, [pc, #608]	; (8005eb8 <parsePreset+0x1374>)
 8005c56:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005c58:	4b98      	ldr	r3, [pc, #608]	; (8005ebc <parsePreset+0x1378>)
 8005c5a:	6093      	str	r3, [r2, #8]
				break;
 8005c5c:	f7ff ba80 	b.w	8005160 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005c60:	4b91      	ldr	r3, [pc, #580]	; (8005ea8 <parsePreset+0x1364>)
 8005c62:	4997      	ldr	r1, [pc, #604]	; (8005ec0 <parsePreset+0x137c>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005c64:	4a92      	ldr	r2, [pc, #584]	; (8005eb0 <parsePreset+0x136c>)
				lfoShapeTick[i] = &lfoSineTriTick;
 8005c66:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005c68:	4b96      	ldr	r3, [pc, #600]	; (8005ec4 <parsePreset+0x1380>)
 8005c6a:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005c6c:	4b96      	ldr	r3, [pc, #600]	; (8005ec8 <parsePreset+0x1384>)
 8005c6e:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005c70:	4b96      	ldr	r3, [pc, #600]	; (8005ecc <parsePreset+0x1388>)
 8005c72:	6093      	str	r3, [r2, #8]
				break;
 8005c74:	f7ff ba74 	b.w	8005160 <parsePreset+0x61c>
				  shapeTick[i] = &userTick;
 8005c78:	4b95      	ldr	r3, [pc, #596]	; (8005ed0 <parsePreset+0x138c>)
 8005c7a:	4996      	ldr	r1, [pc, #600]	; (8005ed4 <parsePreset+0x1390>)
 8005c7c:	6099      	str	r1, [r3, #8]
				  break;
 8005c7e:	f7ff b9f8 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &triTick;
 8005c82:	4b93      	ldr	r3, [pc, #588]	; (8005ed0 <parsePreset+0x138c>)
 8005c84:	4994      	ldr	r1, [pc, #592]	; (8005ed8 <parsePreset+0x1394>)
 8005c86:	6099      	str	r1, [r3, #8]
				  break;
 8005c88:	f7ff b9f3 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &sineTick;
 8005c8c:	4b90      	ldr	r3, [pc, #576]	; (8005ed0 <parsePreset+0x138c>)
 8005c8e:	4993      	ldr	r1, [pc, #588]	; (8005edc <parsePreset+0x1398>)
 8005c90:	6099      	str	r1, [r3, #8]
				  break;
 8005c92:	f7ff b9ee 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &pulseTick;
 8005c96:	4b8e      	ldr	r3, [pc, #568]	; (8005ed0 <parsePreset+0x138c>)
 8005c98:	4991      	ldr	r1, [pc, #580]	; (8005ee0 <parsePreset+0x139c>)
 8005c9a:	6099      	str	r1, [r3, #8]
				  break;
 8005c9c:	f7ff b9e9 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &sawTick;
 8005ca0:	4b8b      	ldr	r3, [pc, #556]	; (8005ed0 <parsePreset+0x138c>)
 8005ca2:	4990      	ldr	r1, [pc, #576]	; (8005ee4 <parsePreset+0x13a0>)
 8005ca4:	6099      	str	r1, [r3, #8]
				  break;
 8005ca6:	f7ff b9e4 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &sineTriTick;
 8005caa:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <parsePreset+0x138c>)
 8005cac:	498e      	ldr	r1, [pc, #568]	; (8005ee8 <parsePreset+0x13a4>)
 8005cae:	6099      	str	r1, [r3, #8]
				  break;
 8005cb0:	f7ff b9df 	b.w	8005072 <parsePreset+0x52e>
				  shapeTick[i] = &userTick;
 8005cb4:	4b86      	ldr	r3, [pc, #536]	; (8005ed0 <parsePreset+0x138c>)
 8005cb6:	4987      	ldr	r1, [pc, #540]	; (8005ed4 <parsePreset+0x1390>)
 8005cb8:	6059      	str	r1, [r3, #4]
				  break;
 8005cba:	f7ff b97a 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &triTick;
 8005cbe:	4b84      	ldr	r3, [pc, #528]	; (8005ed0 <parsePreset+0x138c>)
 8005cc0:	4985      	ldr	r1, [pc, #532]	; (8005ed8 <parsePreset+0x1394>)
 8005cc2:	6059      	str	r1, [r3, #4]
				  break;
 8005cc4:	f7ff b975 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &sineTick;
 8005cc8:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <parsePreset+0x138c>)
 8005cca:	4984      	ldr	r1, [pc, #528]	; (8005edc <parsePreset+0x1398>)
 8005ccc:	6059      	str	r1, [r3, #4]
				  break;
 8005cce:	f7ff b970 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &pulseTick;
 8005cd2:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <parsePreset+0x138c>)
 8005cd4:	4982      	ldr	r1, [pc, #520]	; (8005ee0 <parsePreset+0x139c>)
 8005cd6:	6059      	str	r1, [r3, #4]
				  break;
 8005cd8:	f7ff b96b 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &sawTick;
 8005cdc:	4b7c      	ldr	r3, [pc, #496]	; (8005ed0 <parsePreset+0x138c>)
 8005cde:	4981      	ldr	r1, [pc, #516]	; (8005ee4 <parsePreset+0x13a0>)
 8005ce0:	6059      	str	r1, [r3, #4]
				  break;
 8005ce2:	f7ff b966 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &sineTriTick;
 8005ce6:	4b7a      	ldr	r3, [pc, #488]	; (8005ed0 <parsePreset+0x138c>)
 8005ce8:	497f      	ldr	r1, [pc, #508]	; (8005ee8 <parsePreset+0x13a4>)
 8005cea:	6059      	str	r1, [r3, #4]
				  break;
 8005cec:	f7ff b961 	b.w	8004fb2 <parsePreset+0x46e>
				  shapeTick[i] = &userTick;
 8005cf0:	4b77      	ldr	r3, [pc, #476]	; (8005ed0 <parsePreset+0x138c>)
 8005cf2:	4a78      	ldr	r2, [pc, #480]	; (8005ed4 <parsePreset+0x1390>)
 8005cf4:	601a      	str	r2, [r3, #0]
				  break;
 8005cf6:	f7ff b936 	b.w	8004f66 <parsePreset+0x422>
				  shapeTick[i] = &triTick;
 8005cfa:	4b75      	ldr	r3, [pc, #468]	; (8005ed0 <parsePreset+0x138c>)
 8005cfc:	4a76      	ldr	r2, [pc, #472]	; (8005ed8 <parsePreset+0x1394>)
 8005cfe:	601a      	str	r2, [r3, #0]
				  break;
 8005d00:	f7ff b931 	b.w	8004f66 <parsePreset+0x422>
				  shapeTick[i] = &sineTick;
 8005d04:	4b72      	ldr	r3, [pc, #456]	; (8005ed0 <parsePreset+0x138c>)
 8005d06:	4a75      	ldr	r2, [pc, #468]	; (8005edc <parsePreset+0x1398>)
 8005d08:	601a      	str	r2, [r3, #0]
				  break;
 8005d0a:	f7ff b92c 	b.w	8004f66 <parsePreset+0x422>
				  shapeTick[i] = &pulseTick;
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <parsePreset+0x138c>)
 8005d10:	4a73      	ldr	r2, [pc, #460]	; (8005ee0 <parsePreset+0x139c>)
 8005d12:	601a      	str	r2, [r3, #0]
				  break;
 8005d14:	f7ff b927 	b.w	8004f66 <parsePreset+0x422>
				  shapeTick[i] = &sawTick;
 8005d18:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <parsePreset+0x138c>)
 8005d1a:	4a72      	ldr	r2, [pc, #456]	; (8005ee4 <parsePreset+0x13a0>)
 8005d1c:	601a      	str	r2, [r3, #0]
				  break;
 8005d1e:	f7ff b922 	b.w	8004f66 <parsePreset+0x422>
				  shapeTick[i] = &sineTriTick;
 8005d22:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <parsePreset+0x138c>)
 8005d24:	4a70      	ldr	r2, [pc, #448]	; (8005ee8 <parsePreset+0x13a4>)
 8005d26:	601a      	str	r2, [r3, #0]
				  break;
 8005d28:	f7ff b91d 	b.w	8004f66 <parsePreset+0x422>
				  filterTick[i] = &LadderLowpassTick;
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <parsePreset+0x13a8>)
 8005d2e:	4a70      	ldr	r2, [pc, #448]	; (8005ef0 <parsePreset+0x13ac>)
 8005d30:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8005d32:	4b70      	ldr	r3, [pc, #448]	; (8005ef4 <parsePreset+0x13b0>)
 8005d34:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8005d36:	4b70      	ldr	r3, [pc, #448]	; (8005ef8 <parsePreset+0x13b4>)
 8005d38:	607b      	str	r3, [r7, #4]
				  break;
 8005d3a:	f7ff b9ce 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &VZbandrejectTick;
 8005d3e:	4b6b      	ldr	r3, [pc, #428]	; (8005eec <parsePreset+0x13a8>)
 8005d40:	4a6e      	ldr	r2, [pc, #440]	; (8005efc <parsePreset+0x13b8>)
 8005d42:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8005d44:	4b6e      	ldr	r3, [pc, #440]	; (8005f00 <parsePreset+0x13bc>)
 8005d46:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8005d48:	4b6e      	ldr	r3, [pc, #440]	; (8005f04 <parsePreset+0x13c0>)
 8005d4a:	607b      	str	r3, [r7, #4]
				  break;
 8005d4c:	f7ff b9c5 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &VZhighshelfTick;
 8005d50:	4b66      	ldr	r3, [pc, #408]	; (8005eec <parsePreset+0x13a8>)
 8005d52:	4a6d      	ldr	r2, [pc, #436]	; (8005f08 <parsePreset+0x13c4>)
 8005d54:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8005d56:	4b6d      	ldr	r3, [pc, #436]	; (8005f0c <parsePreset+0x13c8>)
 8005d58:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8005d5a:	4b6d      	ldr	r3, [pc, #436]	; (8005f10 <parsePreset+0x13cc>)
 8005d5c:	607b      	str	r3, [r7, #4]
				  break;
 8005d5e:	f7ff b9bc 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &VZlowshelfTick;
 8005d62:	4b62      	ldr	r3, [pc, #392]	; (8005eec <parsePreset+0x13a8>)
 8005d64:	4a6b      	ldr	r2, [pc, #428]	; (8005f14 <parsePreset+0x13d0>)
 8005d66:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8005d68:	4b6b      	ldr	r3, [pc, #428]	; (8005f18 <parsePreset+0x13d4>)
 8005d6a:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8005d6c:	4b6b      	ldr	r3, [pc, #428]	; (8005f1c <parsePreset+0x13d8>)
 8005d6e:	607b      	str	r3, [r7, #4]
				  break;
 8005d70:	f7ff b9b3 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &VZpeakTick;
 8005d74:	4b5d      	ldr	r3, [pc, #372]	; (8005eec <parsePreset+0x13a8>)
 8005d76:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <parsePreset+0x13dc>)
 8005d78:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8005d7a:	4b6a      	ldr	r3, [pc, #424]	; (8005f24 <parsePreset+0x13e0>)
 8005d7c:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <parsePreset+0x13e4>)
 8005d80:	607b      	str	r3, [r7, #4]
				  break;
 8005d82:	f7ff b9aa 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &diodeLowpassTick;
 8005d86:	4b59      	ldr	r3, [pc, #356]	; (8005eec <parsePreset+0x13a8>)
 8005d88:	4a68      	ldr	r2, [pc, #416]	; (8005f2c <parsePreset+0x13e8>)
 8005d8a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8005d8c:	4b68      	ldr	r3, [pc, #416]	; (8005f30 <parsePreset+0x13ec>)
 8005d8e:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8005d90:	4b68      	ldr	r3, [pc, #416]	; (8005f34 <parsePreset+0x13f0>)
 8005d92:	607b      	str	r3, [r7, #4]
				  break;
 8005d94:	f7ff b9a1 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &bandpassTick;
 8005d98:	4b54      	ldr	r3, [pc, #336]	; (8005eec <parsePreset+0x13a8>)
 8005d9a:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <parsePreset+0x13f4>)
 8005d9c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 8005d9e:	4b67      	ldr	r3, [pc, #412]	; (8005f3c <parsePreset+0x13f8>)
 8005da0:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 8005da2:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <parsePreset+0x13fc>)
 8005da4:	607b      	str	r3, [r7, #4]
				  break;
 8005da6:	f7ff b998 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &highpassTick;
 8005daa:	4b50      	ldr	r3, [pc, #320]	; (8005eec <parsePreset+0x13a8>)
 8005dac:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <parsePreset+0x1400>)
 8005dae:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 8005db0:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <parsePreset+0x1404>)
 8005db2:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 8005db4:	4b65      	ldr	r3, [pc, #404]	; (8005f4c <parsePreset+0x1408>)
 8005db6:	607b      	str	r3, [r7, #4]
				  break;
 8005db8:	f7ff b98f 	b.w	80050da <parsePreset+0x596>
				  filterTick[i] = &LadderLowpassTick;
 8005dbc:	4b4b      	ldr	r3, [pc, #300]	; (8005eec <parsePreset+0x13a8>)
 8005dbe:	4a4c      	ldr	r2, [pc, #304]	; (8005ef0 <parsePreset+0x13ac>)
 8005dc0:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8005dc2:	4b4c      	ldr	r3, [pc, #304]	; (8005ef4 <parsePreset+0x13b0>)
 8005dc4:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8005dc6:	4b4c      	ldr	r3, [pc, #304]	; (8005ef8 <parsePreset+0x13b4>)
 8005dc8:	60fb      	str	r3, [r7, #12]
				  break;
 8005dca:	f7ff b9a7 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &VZbandrejectTick;
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <parsePreset+0x13a8>)
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <parsePreset+0x13b8>)
 8005dd2:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8005dd4:	4b4a      	ldr	r3, [pc, #296]	; (8005f00 <parsePreset+0x13bc>)
 8005dd6:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8005dd8:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <parsePreset+0x13c0>)
 8005dda:	60fb      	str	r3, [r7, #12]
				  break;
 8005ddc:	f7ff b99e 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &VZhighshelfTick;
 8005de0:	4b42      	ldr	r3, [pc, #264]	; (8005eec <parsePreset+0x13a8>)
 8005de2:	4a49      	ldr	r2, [pc, #292]	; (8005f08 <parsePreset+0x13c4>)
 8005de4:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8005de6:	4b49      	ldr	r3, [pc, #292]	; (8005f0c <parsePreset+0x13c8>)
 8005de8:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8005dea:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <parsePreset+0x13cc>)
 8005dec:	60fb      	str	r3, [r7, #12]
				  break;
 8005dee:	f7ff b995 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &VZlowshelfTick;
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <parsePreset+0x13a8>)
 8005df4:	4a47      	ldr	r2, [pc, #284]	; (8005f14 <parsePreset+0x13d0>)
 8005df6:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8005df8:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <parsePreset+0x13d4>)
 8005dfa:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8005dfc:	4b47      	ldr	r3, [pc, #284]	; (8005f1c <parsePreset+0x13d8>)
 8005dfe:	60fb      	str	r3, [r7, #12]
				  break;
 8005e00:	f7ff b98c 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &VZpeakTick;
 8005e04:	4b39      	ldr	r3, [pc, #228]	; (8005eec <parsePreset+0x13a8>)
 8005e06:	4a46      	ldr	r2, [pc, #280]	; (8005f20 <parsePreset+0x13dc>)
 8005e08:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8005e0a:	4b46      	ldr	r3, [pc, #280]	; (8005f24 <parsePreset+0x13e0>)
 8005e0c:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8005e0e:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <parsePreset+0x13e4>)
 8005e10:	60fb      	str	r3, [r7, #12]
				  break;
 8005e12:	f7ff b983 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &diodeLowpassTick;
 8005e16:	4b35      	ldr	r3, [pc, #212]	; (8005eec <parsePreset+0x13a8>)
 8005e18:	4a44      	ldr	r2, [pc, #272]	; (8005f2c <parsePreset+0x13e8>)
 8005e1a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8005e1c:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <parsePreset+0x13ec>)
 8005e1e:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8005e20:	4b44      	ldr	r3, [pc, #272]	; (8005f34 <parsePreset+0x13f0>)
 8005e22:	60fb      	str	r3, [r7, #12]
				  break;
 8005e24:	f7ff b97a 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &bandpassTick;
 8005e28:	4b30      	ldr	r3, [pc, #192]	; (8005eec <parsePreset+0x13a8>)
 8005e2a:	4a43      	ldr	r2, [pc, #268]	; (8005f38 <parsePreset+0x13f4>)
 8005e2c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 8005e2e:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <parsePreset+0x13f8>)
 8005e30:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8005e32:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <parsePreset+0x13fc>)
 8005e34:	60fb      	str	r3, [r7, #12]
				  break;
 8005e36:	f7ff b971 	b.w	800511c <parsePreset+0x5d8>
				  filterTick[i] = &highpassTick;
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	; (8005eec <parsePreset+0x13a8>)
 8005e3c:	4a41      	ldr	r2, [pc, #260]	; (8005f44 <parsePreset+0x1400>)
 8005e3e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8005e40:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <parsePreset+0x1404>)
 8005e42:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8005e44:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <parsePreset+0x1408>)
 8005e46:	60fb      	str	r3, [r7, #12]
				  break;
 8005e48:	f7ff b968 	b.w	800511c <parsePreset+0x5d8>
			mappings[whichMapping].destNumber = destNumber;
 8005e4c:	fb08 f30c 	mul.w	r3, r8, ip
 8005e50:	4666      	mov	r6, ip
 8005e52:	eb0e 0203 	add.w	r2, lr, r3
 8005e56:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 8005e5a:	9b02      	ldr	r3, [sp, #8]
 8005e5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005e60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
 8005e64:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
 8005e68:	6050      	str	r0, [r2, #4]
			numMappings++;
 8005e6a:	fa5f fc83 	uxtb.w	ip, r3
 8005e6e:	f7ff bbea 	b.w	8005646 <parsePreset+0xb02>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 8005e72:	fb08 f306 	mul.w	r3, r8, r6
 8005e76:	18ca      	adds	r2, r1, r3
 8005e78:	4935      	ldr	r1, [pc, #212]	; (8005f50 <parsePreset+0x140c>)
 8005e7a:	4472      	add	r2, lr
 8005e7c:	6291      	str	r1, [r2, #40]	; 0x28
 8005e7e:	1d22      	adds	r2, r4, #4
 8005e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e84:	4473      	add	r3, lr
 8005e86:	6059      	str	r1, [r3, #4]
 8005e88:	e423      	b.n	80056d2 <parsePreset+0xb8e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e8a:	2108      	movs	r1, #8
 8005e8c:	2004      	movs	r0, #4
 8005e8e:	4472      	add	r2, lr
 8005e90:	fb11 0303 	smlabb	r3, r1, r3, r0
 8005e94:	444b      	add	r3, r9
 8005e96:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005e98:	e41b      	b.n	80056d2 <parsePreset+0xb8e>
 8005e9a:	4c2e      	ldr	r4, [pc, #184]	; (8005f54 <parsePreset+0x1410>)
 8005e9c:	f7fe bf47 	b.w	8004d2e <parsePreset+0x1ea>
	for (int i = 0; i < paramCount; i++)
 8005ea0:	2514      	movs	r5, #20
 8005ea2:	4e2d      	ldr	r6, [pc, #180]	; (8005f58 <parsePreset+0x1414>)
 8005ea4:	f7fe bf2f 	b.w	8004d06 <parsePreset+0x1c2>
 8005ea8:	20004620 	.word	0x20004620
 8005eac:	080019d1 	.word	0x080019d1
 8005eb0:	2001516c 	.word	0x2001516c
 8005eb4:	08001a85 	.word	0x08001a85
 8005eb8:	08001b75 	.word	0x08001b75
 8005ebc:	08001afd 	.word	0x08001afd
 8005ec0:	080019ed 	.word	0x080019ed
 8005ec4:	08001a99 	.word	0x08001a99
 8005ec8:	08001b89 	.word	0x08001b89
 8005ecc:	08001b11 	.word	0x08001b11
 8005ed0:	20004a30 	.word	0x20004a30
 8005ed4:	08000fd9 	.word	0x08000fd9
 8005ed8:	08000f5d 	.word	0x08000f5d
 8005edc:	08000f2d 	.word	0x08000f2d
 8005ee0:	08000eb1 	.word	0x08000eb1
 8005ee4:	08000e4d 	.word	0x08000e4d
 8005ee8:	08000dd1 	.word	0x08000dd1
 8005eec:	2000448c 	.word	0x2000448c
 8005ef0:	080013b1 	.word	0x080013b1
 8005ef4:	08001551 	.word	0x08001551
 8005ef8:	080016f1 	.word	0x080016f1
 8005efc:	0800136d 	.word	0x0800136d
 8005f00:	0800153d 	.word	0x0800153d
 8005f04:	080016c1 	.word	0x080016c1
 8005f08:	08001341 	.word	0x08001341
 8005f0c:	08001529 	.word	0x08001529
 8005f10:	0800168d 	.word	0x0800168d
 8005f14:	08001315 	.word	0x08001315
 8005f18:	08001515 	.word	0x08001515
 8005f1c:	08001659 	.word	0x08001659
 8005f20:	080012e9 	.word	0x080012e9
 8005f24:	08001501 	.word	0x08001501
 8005f28:	08001625 	.word	0x08001625
 8005f2c:	080012a5 	.word	0x080012a5
 8005f30:	080014ed 	.word	0x080014ed
 8005f34:	080015f5 	.word	0x080015f5
 8005f38:	08001261 	.word	0x08001261
 8005f3c:	080014d9 	.word	0x080014d9
 8005f40:	080015c5 	.word	0x080015c5
 8005f44:	0800121d 	.word	0x0800121d
 8005f48:	080014c5 	.word	0x080014c5
 8005f4c:	08001595 	.word	0x08001595
 8005f50:	2000008c 	.word	0x2000008c
 8005f54:	20016c1c 	.word	0x20016c1c
 8005f58:	20015b28 	.word	0x20015b28
			params[i].objectNumber = 3;
 8005f5c:	f04f 0303 	mov.w	r3, #3
 8005f60:	f888 3018 	strb.w	r3, [r8, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 8005f64:	ed98 0a02 	vldr	s0, [r8, #8]
 8005f68:	2100      	movs	r1, #0
 8005f6a:	f898 0018 	ldrb.w	r0, [r8, #24]
 8005f6e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005f72:	4798      	blx	r3
 8005f74:	ed98 0a03 	vldr	s0, [r8, #12]
 8005f78:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	f898 0018 	ldrb.w	r0, [r8, #24]
 8005f82:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 8005f84:	f7ff babe 	b.w	8005504 <parsePreset+0x9c0>
			params[i].objectNumber = 2;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f888 3018 	strb.w	r3, [r8, #24]
 8005f8e:	e7e9      	b.n	8005f64 <parsePreset+0x1420>
			params[i].objectNumber = 1;
 8005f90:	f888 9018 	strb.w	r9, [r8, #24]
 8005f94:	e7e6      	b.n	8005f64 <parsePreset+0x1420>
 8005f96:	4a01      	ldr	r2, [pc, #4]	; (8005f9c <parsePreset+0x1458>)
 8005f98:	f7ff b8e2 	b.w	8005160 <parsePreset+0x61c>
 8005f9c:	2001516c 	.word	0x2001516c

08005fa0 <main>:
{
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005fa4:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005fa6:	2501      	movs	r5, #1
{
 8005fa8:	ed2d 8b02 	vpush	{d8}
 8005fac:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005fae:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005fb2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_MPU_Disable();
 8005fb6:	f000 ffab 	bl	8006f10 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005fba:	f248 721f 	movw	r2, #34591	; 0x871f
 8005fbe:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005fc2:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005fc4:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fca:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005fce:	f000 ffbd 	bl	8006f4c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 8005fd2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005fd6:	4bb1      	ldr	r3, [pc, #708]	; (800629c <main+0x2fc>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005fd8:	a808      	add	r0, sp, #32
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005fda:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005fde:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005fe2:	f000 ffb3 	bl	8006f4c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8005fe6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005fea:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005fec:	a808      	add	r0, sp, #32
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8005ff0:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005ff2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8005ff6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005ffa:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005ffe:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006002:	f000 ffa3 	bl	8006f4c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 8006006:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800600a:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800600c:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800600e:	a808      	add	r0, sp, #32
  MPU_InitStruct.BaseAddress = 0x60000000;
 8006010:	9209      	str	r2, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8006012:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8006016:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800601a:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800601e:	f000 ff95 	bl	8006f4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006022:	2004      	movs	r0, #4
 8006024:	f000 ff82 	bl	8006f2c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006028:	4b9d      	ldr	r3, [pc, #628]	; (80062a0 <main+0x300>)
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8006030:	d111      	bne.n	8006056 <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006036:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800603a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800603e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006042:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800604c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800604e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006052:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006056:	4892      	ldr	r0, [pc, #584]	; (80062a0 <main+0x300>)
 8006058:	6943      	ldr	r3, [r0, #20]
 800605a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800605e:	d124      	bne.n	80060aa <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006060:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006064:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006068:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800606c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006070:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006074:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8006078:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800607a:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800607e:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006080:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006084:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006086:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	d1f8      	bne.n	8006080 <main+0xe0>
    } while(sets-- != 0U);
 800608e:	3c20      	subs	r4, #32
 8006090:	f114 0f20 	cmn.w	r4, #32
 8006094:	d1f1      	bne.n	800607a <main+0xda>
 8006096:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800609a:	6943      	ldr	r3, [r0, #20]
 800609c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a0:	6143      	str	r3, [r0, #20]
 80060a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060a6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80060aa:	f000 fe59 	bl	8006d60 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80060ae:	b662      	cpsie	i
  SystemClock_Config();
 80060b0:	f7fe f93a 	bl	8004328 <SystemClock_Config>
  PeriphCommonClock_Config();
 80060b4:	f7fe f9d0 	bl	8004458 <PeriphCommonClock_Config>
  HAL_Delay(500);
 80060b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060bc:	f000 fe92 	bl	8006de4 <HAL_Delay>
  MX_GPIO_Init();
 80060c0:	f7fd fda6 	bl	8003c10 <MX_GPIO_Init>
  MX_DMA_Init();
 80060c4:	f7fd fca6 	bl	8003a14 <MX_DMA_Init>
  MX_FMC_Init();
 80060c8:	f7fd fce2 	bl	8003a90 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80060cc:	f000 fae2 	bl	8006694 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80060d0:	f008 fef6 	bl	800eec0 <MX_FATFS_Init>
  MX_SAI1_Init();
 80060d4:	f000 f9e6 	bl	80064a4 <MX_SAI1_Init>
  MX_RNG_Init();
 80060d8:	f000 f9a4 	bl	8006424 <MX_RNG_Init>
  MX_SPI2_Init();
 80060dc:	f000 fb7c 	bl	80067d8 <MX_SPI2_Init>
  MX_I2C2_Init();
 80060e0:	f7fd fea4 	bl	8003e2c <MX_I2C2_Init>
  MX_SPI1_Init();
 80060e4:	f000 fb4c 	bl	8006780 <MX_SPI1_Init>
  MX_SPI5_Init();
 80060e8:	f000 fba2 	bl	8006830 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060f2:	486c      	ldr	r0, [pc, #432]	; (80062a4 <main+0x304>)
 80060f4:	f002 fc4e 	bl	8008994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80060f8:	2200      	movs	r2, #0
 80060fa:	2102      	movs	r1, #2
 80060fc:	486a      	ldr	r0, [pc, #424]	; (80062a8 <main+0x308>)
 80060fe:	f002 fc49 	bl	8008994 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8006102:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8006106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 800610a:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800610e:	4964      	ldr	r1, [pc, #400]	; (80062a0 <main+0x300>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8006110:	4a66      	ldr	r2, [pc, #408]	; (80062ac <main+0x30c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006112:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8006116:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800611e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8006122:	07c3      	lsls	r3, r0, #31
 8006124:	d502      	bpl.n	800612c <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8006126:	4b62      	ldr	r3, [pc, #392]	; (80062b0 <main+0x310>)
 8006128:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 800612c:	4b61      	ldr	r3, [pc, #388]	; (80062b4 <main+0x314>)
  DWT->CYCCNT = 0;
 800612e:	2100      	movs	r1, #0
 8006130:	4a5e      	ldr	r2, [pc, #376]	; (80062ac <main+0x30c>)
  DWT->CTRL = 0x40000001;
 8006132:	4861      	ldr	r0, [pc, #388]	; (80062b8 <main+0x318>)
  DWT->CYCCNT = 0;
 8006134:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 8006136:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 8006138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800613c:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 800613e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800631c <main+0x37c>
	  buffer[i] = 0;
 8006142:	f013 fa45 	bl	80195d0 <memset>
  buffer[15] = NUM_PARAMS;
 8006146:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 8006148:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 800614a:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 800614c:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8006150:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 8006154:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8006156:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 800615a:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800615e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 8006162:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8006166:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 800616a:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800616e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80062bc <main+0x31c>
 8006172:	4853      	ldr	r0, [pc, #332]	; (80062c0 <main+0x320>)
 8006174:	f00e f9c4 	bl	8014500 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8006178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800617c:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80062c4 <main+0x324>
 8006180:	eddf 0a51 	vldr	s1, [pc, #324]	; 80062c8 <main+0x328>
 8006184:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80062cc <main+0x32c>
 8006188:	4851      	ldr	r0, [pc, #324]	; (80062d0 <main+0x330>)
 800618a:	f00e f9b9 	bl	8014500 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 800618e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8006192:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8006196:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800619a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80062cc <main+0x32c>
 800619e:	484d      	ldr	r0, [pc, #308]	; (80062d4 <main+0x334>)
 80061a0:	f00e f9ae 	bl	8014500 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80061a4:	4c4c      	ldr	r4, [pc, #304]	; (80062d8 <main+0x338>)
  getPresetNamesFromSDCard();
 80061a6:	f7fe f9a9 	bl	80044fc <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80061aa:	f89a 0000 	ldrb.w	r0, [sl]
 80061ae:	f7fd ff15 	bl	8003fdc <checkForSDCardPreset>
 80061b2:	b2c3      	uxtb	r3, r0
 80061b4:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 80061b6:	7823      	ldrb	r3, [r4, #0]
 80061b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8119 	beq.w	80063f4 <main+0x454>
  SDRAM_init();
 80061c2:	f7fe fa6d 	bl	80046a0 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80061c6:	4945      	ldr	r1, [pc, #276]	; (80062dc <main+0x33c>)
 80061c8:	4a45      	ldr	r2, [pc, #276]	; (80062e0 <main+0x340>)
 80061ca:	4846      	ldr	r0, [pc, #280]	; (80062e4 <main+0x344>)
 80061cc:	f7fa f88c 	bl	80002e8 <audioInit>
	AudioCodec_init(&hi2c2);
 80061d0:	4844      	ldr	r0, [pc, #272]	; (80062e4 <main+0x344>)
 80061d2:	f7fd fb95 	bl	8003900 <AudioCodec_init>
  	if (foundOne == 0)
 80061d6:	7823      	ldrb	r3, [r4, #0]
 80061d8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8102 	bne.w	80063e6 <main+0x446>
	  parsePreset((NUM_PARAMS*2)+27, 0); //default preset binary
 80061e2:	f240 1051 	movw	r0, #337	; 0x151
 80061e6:	4d40      	ldr	r5, [pc, #256]	; (80062e8 <main+0x348>)
 80061e8:	f7fe fcac 	bl	8004b44 <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 80061ec:	2210      	movs	r2, #16
 80061ee:	493f      	ldr	r1, [pc, #252]	; (80062ec <main+0x34c>)
 80061f0:	483f      	ldr	r0, [pc, #252]	; (80062f0 <main+0x350>)
 80061f2:	f007 f91d 	bl	800d430 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 80061f6:	2234      	movs	r2, #52	; 0x34
 80061f8:	493e      	ldr	r1, [pc, #248]	; (80062f4 <main+0x354>)
 80061fa:	483f      	ldr	r0, [pc, #252]	; (80062f8 <main+0x358>)
 80061fc:	f007 f918 	bl	800d430 <HAL_SPI_Receive_DMA>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	493e      	ldr	r1, [pc, #248]	; (80062fc <main+0x35c>)
 8006204:	483e      	ldr	r0, [pc, #248]	; (8006300 <main+0x360>)
	  if (rand > TWO_TO_31)
 8006206:	eddf 8a3f 	vldr	s17, [pc, #252]	; 8006304 <main+0x364>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 800620a:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8006308 <main+0x368>
 800620e:	4f3f      	ldr	r7, [pc, #252]	; (800630c <main+0x36c>)
 8006210:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8006320 <main+0x380>
 8006214:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8006324 <main+0x384>
 8006218:	4c3d      	ldr	r4, [pc, #244]	; (8006310 <main+0x370>)
 800621a:	4e3e      	ldr	r6, [pc, #248]	; (8006314 <main+0x374>)
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 800621c:	f007 f908 	bl	800d430 <HAL_SPI_Receive_DMA>
 8006220:	e02b      	b.n	800627a <main+0x2da>
	  if (presetWaitingToParse > 0)
 8006222:	6829      	ldr	r1, [r5, #0]
 8006224:	bb99      	cbnz	r1, 800628e <main+0x2ee>
	  else if (presetWaitingToWrite > 0)
 8006226:	f8d9 b000 	ldr.w	fp, [r9]
 800622a:	f1bb 0f00 	cmp.w	fp, #0
 800622e:	d17b      	bne.n	8006328 <main+0x388>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8006230:	a908      	add	r1, sp, #32
 8006232:	4839      	ldr	r0, [pc, #228]	; (8006318 <main+0x378>)
 8006234:	f005 fb80 	bl	800b938 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8006238:	eddd 7a08 	vldr	s15, [sp, #32]
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006240:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	dd0c      	ble.n	8006264 <main+0x2c4>
		  myTestInt++;
 800624a:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800624e:	2180      	movs	r1, #128	; 0x80
 8006250:	4814      	ldr	r0, [pc, #80]	; (80062a4 <main+0x304>)
		  myTestInt++;
 8006252:	3301      	adds	r3, #1
 8006254:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8006258:	f002 fba0 	bl	800899c <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 800625c:	eddd 7a08 	vldr	s15, [sp, #32]
 8006260:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8006264:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006268:	7823      	ldrb	r3, [r4, #0]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006270:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006274:	7022      	strb	r2, [r4, #0]
 8006276:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0d0      	beq.n	8006222 <main+0x282>
		  checkForSDCardPreset(presetNumberToLoad);
 8006280:	f89a 0000 	ldrb.w	r0, [sl]
 8006284:	f7fd feaa 	bl	8003fdc <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	2900      	cmp	r1, #0
 800628c:	d0cb      	beq.n	8006226 <main+0x286>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 800628e:	4608      	mov	r0, r1
 8006290:	f89a 1000 	ldrb.w	r1, [sl]
 8006294:	f7fe fc56 	bl	8004b44 <parsePreset>
 8006298:	e7ca      	b.n	8006230 <main+0x290>
 800629a:	bf00      	nop
 800629c:	03010011 	.word	0x03010011
 80062a0:	e000ed00 	.word	0xe000ed00
 80062a4:	58020800 	.word	0x58020800
 80062a8:	58020000 	.word	0x58020000
 80062ac:	e0001000 	.word	0xe0001000
 80062b0:	c5acce55 	.word	0xc5acce55
 80062b4:	300001e0 	.word	0x300001e0
 80062b8:	40000001 	.word	0x40000001
 80062bc:	3c23d70a 	.word	0x3c23d70a
 80062c0:	20017038 	.word	0x20017038
 80062c4:	457a0000 	.word	0x457a0000
 80062c8:	469c4000 	.word	0x469c4000
 80062cc:	00000000 	.word	0x00000000
 80062d0:	20013040 	.word	0x20013040
 80062d4:	24059020 	.word	0x24059020
 80062d8:	20015168 	.word	0x20015168
 80062dc:	20019144 	.word	0x20019144
 80062e0:	200191dc 	.word	0x200191dc
 80062e4:	20012f58 	.word	0x20012f58
 80062e8:	20016c30 	.word	0x20016c30
 80062ec:	30000180 	.word	0x30000180
 80062f0:	200194e0 	.word	0x200194e0
 80062f4:	300001a0 	.word	0x300001a0
 80062f8:	20019568 	.word	0x20019568
 80062fc:	30000100 	.word	0x30000100
 8006300:	20019458 	.word	0x20019458
 8006304:	4f000000 	.word	0x4f000000
 8006308:	3000000d 	.word	0x3000000d
 800630c:	20016c2c 	.word	0x20016c2c
 8006310:	20012fb1 	.word	0x20012fb1
 8006314:	20016c38 	.word	0x20016c38
 8006318:	2001903c 	.word	0x2001903c
 800631c:	20000090 	.word	0x20000090
 8006320:	20016c34 	.word	0x20016c34
 8006324:	20015b20 	.word	0x20015b20
  __ASM volatile ("cpsid i" : : : "memory");
 8006328:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	4834      	ldr	r0, [pc, #208]	; (8006400 <main+0x460>)
 800632e:	9101      	str	r1, [sp, #4]
 8006330:	f013 f94e 	bl	80195d0 <memset>
  __IO uint8_t status = SD_PRESENT;
 8006334:	2301      	movs	r3, #1
 8006336:	f88d 300f 	strb.w	r3, [sp, #15]
  if (BSP_PlatformIsDetected() != 0x0)
 800633a:	f008 fe29 	bl	800ef90 <BSP_PlatformIsDetected>
 800633e:	b110      	cbz	r0, 8006346 <main+0x3a6>
    status = SD_NOT_PRESENT;
 8006340:	9901      	ldr	r1, [sp, #4]
 8006342:	f88d 100f 	strb.w	r1, [sp, #15]
  return status;
 8006346:	f89d 300f 	ldrb.w	r3, [sp, #15]
	if(BSP_SD_IsDetected())
 800634a:	b323      	cbz	r3, 8006396 <main+0x3f6>
				diskBusy = 1;
 800634c:	2301      	movs	r3, #1
 800634e:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <main+0x464>)
 8006350:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <main+0x468>)
 8006354:	7818      	ldrb	r0, [r3, #0]
 8006356:	2863      	cmp	r0, #99	; 0x63
 8006358:	d901      	bls.n	800635e <main+0x3be>
			        presetNumberToSave = 99;
 800635a:	2063      	movs	r0, #99	; 0x63
 800635c:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 800635e:	220a      	movs	r2, #10
 8006360:	a905      	add	r1, sp, #20
 8006362:	f013 f925 	bl	80195b0 <itoa>
				int len = ((strlen(charBuf)));
 8006366:	a805      	add	r0, sp, #20
 8006368:	f7f9 ffb6 	bl	80002d8 <strlen>
				if (len == 1)
 800636c:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 800636e:	4602      	mov	r2, r0
				if (len == 1)
 8006370:	d018      	beq.n	80063a4 <main+0x404>
					strcat(charBuf, ".ebp");
 8006372:	4926      	ldr	r1, [pc, #152]	; (800640c <main+0x46c>)
 8006374:	ab05      	add	r3, sp, #20
 8006376:	6808      	ldr	r0, [r1, #0]
 8006378:	7909      	ldrb	r1, [r1, #4]
 800637a:	5098      	str	r0, [r3, r2]
 800637c:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 800637e:	a808      	add	r0, sp, #32
 8006380:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8006382:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8006384:	a905      	add	r1, sp, #20
 8006386:	f013 f915 	bl	80195b4 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800638a:	220a      	movs	r2, #10
 800638c:	a908      	add	r1, sp, #32
 800638e:	4820      	ldr	r0, [pc, #128]	; (8006410 <main+0x470>)
 8006390:	f00b f97e 	bl	8011690 <f_open>
 8006394:	b1e8      	cbz	r0, 80063d2 <main+0x432>
	presetWaitingToWrite = 0;
 8006396:	2300      	movs	r3, #0
	diskBusy = 0;
 8006398:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <main+0x464>)
	presetWaitingToWrite = 0;
 800639a:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 800639e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063a0:	b662      	cpsie	i
}
 80063a2:	e745      	b.n	8006230 <main+0x290>
					finalString[2] = charBuf[1];
 80063a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
					strcat(finalString, ".ebp");
 80063a8:	a808      	add	r0, sp, #32
					finalString[2] = charBuf[1];
 80063aa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
					finalString[1] = charBuf[0];
 80063ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80063b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
					finalString[0] = '0';
 80063b6:	2330      	movs	r3, #48	; 0x30
 80063b8:	f88d 3020 	strb.w	r3, [sp, #32]
					strcat(finalString, ".ebp");
 80063bc:	f7f9 ff8c 	bl	80002d8 <strlen>
 80063c0:	4a12      	ldr	r2, [pc, #72]	; (800640c <main+0x46c>)
 80063c2:	4603      	mov	r3, r0
 80063c4:	a908      	add	r1, sp, #32
 80063c6:	6810      	ldr	r0, [r2, #0]
 80063c8:	7912      	ldrb	r2, [r2, #4]
 80063ca:	50c8      	str	r0, [r1, r3]
 80063cc:	440b      	add	r3, r1
 80063ce:	711a      	strb	r2, [r3, #4]
 80063d0:	e7db      	b.n	800638a <main+0x3ea>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 80063d2:	465a      	mov	r2, fp
 80063d4:	ab04      	add	r3, sp, #16
 80063d6:	490f      	ldr	r1, [pc, #60]	; (8006414 <main+0x474>)
 80063d8:	480d      	ldr	r0, [pc, #52]	; (8006410 <main+0x470>)
 80063da:	f00b fc11 	bl	8011c00 <f_write>
					f_close(&SDFile);
 80063de:	480c      	ldr	r0, [pc, #48]	; (8006410 <main+0x470>)
 80063e0:	f00b fd68 	bl	8011eb4 <f_close>
 80063e4:	e7d7      	b.n	8006396 <main+0x3f6>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80063e6:	4d0c      	ldr	r5, [pc, #48]	; (8006418 <main+0x478>)
 80063e8:	f89a 1000 	ldrb.w	r1, [sl]
 80063ec:	6828      	ldr	r0, [r5, #0]
 80063ee:	f7fe fba9 	bl	8004b44 <parsePreset>
 80063f2:	e6fb      	b.n	80061ec <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80063f4:	2110      	movs	r1, #16
 80063f6:	4809      	ldr	r0, [pc, #36]	; (800641c <main+0x47c>)
 80063f8:	f002 facc 	bl	8008994 <HAL_GPIO_WritePin>
 80063fc:	e6e1      	b.n	80061c2 <main+0x222>
 80063fe:	bf00      	nop
 8006400:	30000000 	.word	0x30000000
 8006404:	20012fec 	.word	0x20012fec
 8006408:	20016c2a 	.word	0x20016c2a
 800640c:	0801b78c 	.word	0x0801b78c
 8006410:	20019828 	.word	0x20019828
 8006414:	300001e0 	.word	0x300001e0
 8006418:	20016c30 	.word	0x20016c30
 800641c:	58020400 	.word	0x58020400

08006420 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop

08006424 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8006424:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006426:	4806      	ldr	r0, [pc, #24]	; (8006440 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8006428:	2300      	movs	r3, #0
 800642a:	4a06      	ldr	r2, [pc, #24]	; (8006444 <MX_RNG_Init+0x20>)
 800642c:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006430:	f005 fa40 	bl	800b8b4 <HAL_RNG_Init>
 8006434:	b900      	cbnz	r0, 8006438 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006436:	bd08      	pop	{r3, pc}
 8006438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800643c:	f7ff bff0 	b.w	8006420 <Error_Handler>
 8006440:	2001903c 	.word	0x2001903c
 8006444:	48021800 	.word	0x48021800

08006448 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006448:	b510      	push	{r4, lr}
 800644a:	b0b2      	sub	sp, #200	; 0xc8
 800644c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800644e:	22c0      	movs	r2, #192	; 0xc0
 8006450:	2100      	movs	r1, #0
 8006452:	a802      	add	r0, sp, #8
 8006454:	f013 f8bc 	bl	80195d0 <memset>
  if(rngHandle->Instance==RNG)
 8006458:	4b10      	ldr	r3, [pc, #64]	; (800649c <HAL_RNG_MspInit+0x54>)
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d001      	beq.n	8006464 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006460:	b032      	add	sp, #200	; 0xc8
 8006462:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006468:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800646a:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800646c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006470:	f004 f83a 	bl	800a4e8 <HAL_RCCEx_PeriphCLKConfig>
 8006474:	b970      	cbnz	r0, 8006494 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <HAL_RNG_MspInit+0x58>)
 8006478:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800647c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006480:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006484:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	9b01      	ldr	r3, [sp, #4]
}
 8006490:	b032      	add	sp, #200	; 0xc8
 8006492:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006494:	f7ff ffc4 	bl	8006420 <Error_Handler>
 8006498:	e7ed      	b.n	8006476 <HAL_RNG_MspInit+0x2e>
 800649a:	bf00      	nop
 800649c:	48021800 	.word	0x48021800
 80064a0:	58024400 	.word	0x58024400

080064a4 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80064a4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80064a6:	4818      	ldr	r0, [pc, #96]	; (8006508 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80064a8:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 80064aa:	4c18      	ldr	r4, [pc, #96]	; (800650c <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80064ac:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064ae:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80064b0:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80064b2:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064b4:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80064b6:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80064b8:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 80064ba:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80064be:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80064c2:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80064c6:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80064c8:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064cc:	f005 fc44 	bl	800bd58 <HAL_SAI_InitProtocol>
 80064d0:	b998      	cbnz	r0, 80064fa <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80064d2:	480f      	ldr	r0, [pc, #60]	; (8006510 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80064d4:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 80064d6:	4c0f      	ldr	r4, [pc, #60]	; (8006514 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064d8:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80064da:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80064dc:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 80064de:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80064e0:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80064e2:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064e4:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80064e6:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80064e8:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80064ea:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80064ec:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80064ee:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80064f2:	f005 fc31 	bl	800bd58 <HAL_SAI_InitProtocol>
 80064f6:	b918      	cbnz	r0, 8006500 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80064f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80064fa:	f7ff ff91 	bl	8006420 <Error_Handler>
 80064fe:	e7e8      	b.n	80064d2 <MX_SAI1_Init+0x2e>
}
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006504:	f7ff bf8c 	b.w	8006420 <Error_Handler>
 8006508:	20019144 	.word	0x20019144
 800650c:	40015804 	.word	0x40015804
 8006510:	200191dc 	.word	0x200191dc
 8006514:	40015824 	.word	0x40015824

08006518 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8006518:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800651a:	4a55      	ldr	r2, [pc, #340]	; (8006670 <HAL_SAI_MspInit+0x158>)
{
 800651c:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 800651e:	6803      	ldr	r3, [r0, #0]
{
 8006520:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8006526:	4a53      	ldr	r2, [pc, #332]	; (8006674 <HAL_SAI_MspInit+0x15c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d03f      	beq.n	80065ac <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 800652c:	b009      	add	sp, #36	; 0x24
 800652e:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8006530:	4b51      	ldr	r3, [pc, #324]	; (8006678 <HAL_SAI_MspInit+0x160>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	2a00      	cmp	r2, #0
 8006536:	f000 8081 	beq.w	800663c <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 800653a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800653c:	2074      	movs	r0, #116	; 0x74
 800653e:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006540:	4d4e      	ldr	r5, [pc, #312]	; (800667c <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8006542:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006544:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006546:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8006668 <HAL_SAI_MspInit+0x150>
 800654a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800654e:	a902      	add	r1, sp, #8
 8006550:	484b      	ldr	r0, [pc, #300]	; (8006680 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006552:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006554:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006558:	f002 f8cc 	bl	80086f4 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800655c:	4949      	ldr	r1, [pc, #292]	; (8006684 <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800655e:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006560:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006562:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006564:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8006566:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006568:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800656c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006570:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006572:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006576:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800657c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006580:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006582:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006586:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800658a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800658e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006592:	2304      	movs	r3, #4
 8006594:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006596:	f000 fdef 	bl	8007178 <HAL_DMA_Init>
 800659a:	2800      	cmp	r0, #0
 800659c:	d15c      	bne.n	8006658 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 800659e:	4a35      	ldr	r2, [pc, #212]	; (8006674 <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80065a0:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80065a6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 80065aa:	d1bf      	bne.n	800652c <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 80065ac:	4b32      	ldr	r3, [pc, #200]	; (8006678 <HAL_SAI_MspInit+0x160>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	b3b2      	cbz	r2, 8006620 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 80065b2:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80065b4:	2008      	movs	r0, #8
 80065b6:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 80065b8:	4d33      	ldr	r5, [pc, #204]	; (8006688 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 80065ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80065bc:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80065be:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8006668 <HAL_SAI_MspInit+0x150>
 80065c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065c6:	a902      	add	r1, sp, #8
 80065c8:	482d      	ldr	r0, [pc, #180]	; (8006680 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80065ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80065cc:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065d0:	f002 f890 	bl	80086f4 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 80065d4:	492d      	ldr	r1, [pc, #180]	; (800668c <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80065d6:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065d8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80065da:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065dc:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80065de:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80065e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065ea:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80065ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f6:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80065fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80065fe:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006602:	2304      	movs	r3, #4
 8006604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006608:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800660c:	f000 fdb4 	bl	8007178 <HAL_DMA_Init>
 8006610:	bb28      	cbnz	r0, 800665e <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8006612:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006616:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8006618:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800661c:	b009      	add	sp, #36	; 0x24
 800661e:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006620:	491b      	ldr	r1, [pc, #108]	; (8006690 <HAL_SAI_MspInit+0x178>)
 8006622:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006626:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800662a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800662e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006632:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006636:	9101      	str	r1, [sp, #4]
 8006638:	9901      	ldr	r1, [sp, #4]
 800663a:	e7ba      	b.n	80065b2 <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800663c:	4914      	ldr	r1, [pc, #80]	; (8006690 <HAL_SAI_MspInit+0x178>)
 800663e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006642:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006646:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800664a:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800664e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006652:	9100      	str	r1, [sp, #0]
 8006654:	9900      	ldr	r1, [sp, #0]
 8006656:	e770      	b.n	800653a <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8006658:	f7ff fee2 	bl	8006420 <Error_Handler>
 800665c:	e79f      	b.n	800659e <HAL_SAI_MspInit+0x86>
      Error_Handler();
 800665e:	f7ff fedf 	bl	8006420 <Error_Handler>
 8006662:	e7d6      	b.n	8006612 <HAL_SAI_MspInit+0xfa>
 8006664:	f3af 8000 	nop.w
 8006668:	00000000 	.word	0x00000000
 800666c:	00000003 	.word	0x00000003
 8006670:	40015804 	.word	0x40015804
 8006674:	40015824 	.word	0x40015824
 8006678:	20019050 	.word	0x20019050
 800667c:	20019054 	.word	0x20019054
 8006680:	58021000 	.word	0x58021000
 8006684:	40020028 	.word	0x40020028
 8006688:	200190cc 	.word	0x200190cc
 800668c:	40020040 	.word	0x40020040
 8006690:	58024400 	.word	0x58024400

08006694 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8006694:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006698:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 800669a:	4c07      	ldr	r4, [pc, #28]	; (80066b8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800669c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 80066a0:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 80066a2:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80066a6:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 80066aa:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80066ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	20019274 	.word	0x20019274
 80066b8:	52007000 	.word	0x52007000

080066bc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80066bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80066be:	4b2b      	ldr	r3, [pc, #172]	; (800676c <HAL_SD_MspInit+0xb0>)
{
 80066c0:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 80066c2:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c4:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80066c6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c8:	9408      	str	r4, [sp, #32]
 80066ca:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80066ce:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 80066d2:	d001      	beq.n	80066d8 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80066d4:	b00b      	add	sp, #44	; 0x2c
 80066d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80066da:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80066dc:	2601      	movs	r6, #1
 80066de:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80066e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e4:	4823      	ldr	r0, [pc, #140]	; (8006774 <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80066e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80066ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80066f2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80066f6:	9201      	str	r2, [sp, #4]
 80066f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80066fe:	f042 0204 	orr.w	r2, r2, #4
 8006702:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006706:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800670a:	f002 0204 	and.w	r2, r2, #4
 800670e:	9202      	str	r2, [sp, #8]
 8006710:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006712:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800671e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006726:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800672e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006730:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006732:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006734:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006738:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800673c:	f001 ffda 	bl	80086f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006740:	2302      	movs	r3, #2
 8006742:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006744:	a904      	add	r1, sp, #16
 8006746:	480c      	ldr	r0, [pc, #48]	; (8006778 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006748:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800674a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800674e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006752:	f001 ffcf 	bl	80086f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8006756:	4622      	mov	r2, r4
 8006758:	4621      	mov	r1, r4
 800675a:	2031      	movs	r0, #49	; 0x31
 800675c:	f000 fb76 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006760:	2031      	movs	r0, #49	; 0x31
 8006762:	f000 fbb1 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
}
 8006766:	b00b      	add	sp, #44	; 0x2c
 8006768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676a:	bf00      	nop
 800676c:	52007000 	.word	0x52007000
 8006770:	58024400 	.word	0x58024400
 8006774:	58020800 	.word	0x58020800
 8006778:	58020c00 	.word	0x58020c00
 800677c:	00000000 	.word	0x00000000

08006780 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006780:	4813      	ldr	r0, [pc, #76]	; (80067d0 <MX_SPI1_Init+0x50>)
 8006782:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006784:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80067c8 <MX_SPI1_Init+0x48>
{
 8006788:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800678a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800678c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800678e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8006790:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006792:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006794:	ed80 7b08 	vstr	d7, [r0, #32]
 8006798:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800679c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80067a4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80067a8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80067ac:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80067b0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80067b4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80067b8:	f006 fd6e 	bl	800d298 <HAL_SPI_Init>
 80067bc:	b900      	cbnz	r0, 80067c0 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80067be:	bd08      	pop	{r3, pc}
 80067c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067c4:	f7ff be2c 	b.w	8006420 <Error_Handler>
	...
 80067d0:	20019458 	.word	0x20019458
 80067d4:	40013000 	.word	0x40013000

080067d8 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80067d8:	4813      	ldr	r0, [pc, #76]	; (8006828 <MX_SPI2_Init+0x50>)
 80067da:	4a14      	ldr	r2, [pc, #80]	; (800682c <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006820 <MX_SPI2_Init+0x48>
{
 80067e0:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80067e2:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 80067e4:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80067e6:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80067e8:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80067ea:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067ec:	ed80 7b08 	vstr	d7, [r0, #32]
 80067f0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80067f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80067fc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006800:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006804:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006808:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800680c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006810:	f006 fd42 	bl	800d298 <HAL_SPI_Init>
 8006814:	b900      	cbnz	r0, 8006818 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006816:	bd08      	pop	{r3, pc}
 8006818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800681c:	f7ff be00 	b.w	8006420 <Error_Handler>
	...
 8006828:	200194e0 	.word	0x200194e0
 800682c:	40003800 	.word	0x40003800

08006830 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8006830:	4813      	ldr	r0, [pc, #76]	; (8006880 <MX_SPI5_Init+0x50>)
 8006832:	4a14      	ldr	r2, [pc, #80]	; (8006884 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006834:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006878 <MX_SPI5_Init+0x48>
{
 8006838:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800683a:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 800683c:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800683e:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8006840:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006842:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006844:	ed80 7b08 	vstr	d7, [r0, #32]
 8006848:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800684c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006850:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006854:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006858:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800685c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006860:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006864:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006868:	f006 fd16 	bl	800d298 <HAL_SPI_Init>
 800686c:	b900      	cbnz	r0, 8006870 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800686e:	bd08      	pop	{r3, pc}
 8006870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006874:	f7ff bdd4 	b.w	8006420 <Error_Handler>
	...
 8006880:	20019568 	.word	0x20019568
 8006884:	40015000 	.word	0x40015000

08006888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006888:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688a:	2400      	movs	r4, #0
{
 800688c:	b0bc      	sub	sp, #240	; 0xf0
 800688e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006890:	22c0      	movs	r2, #192	; 0xc0
 8006892:	4621      	mov	r1, r4
 8006894:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006896:	940a      	str	r4, [sp, #40]	; 0x28
 8006898:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800689c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068a0:	f012 fe96 	bl	80195d0 <memset>
  if(spiHandle->Instance==SPI1)
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	4a93      	ldr	r2, [pc, #588]	; (8006af4 <HAL_SPI_MspInit+0x26c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d008      	beq.n	80068be <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80068ac:	4a92      	ldr	r2, [pc, #584]	; (8006af8 <HAL_SPI_MspInit+0x270>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d054      	beq.n	800695c <HAL_SPI_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 80068b2:	4a92      	ldr	r2, [pc, #584]	; (8006afc <HAL_SPI_MspInit+0x274>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	f000 80ae 	beq.w	8006a16 <HAL_SPI_MspInit+0x18e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80068ba:	b03c      	add	sp, #240	; 0xf0
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068be:	4b90      	ldr	r3, [pc, #576]	; (8006b00 <HAL_SPI_MspInit+0x278>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c0:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80068c2:	4e90      	ldr	r6, [pc, #576]	; (8006b04 <HAL_SPI_MspInit+0x27c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80068c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068cc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80068d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80068d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068d8:	9200      	str	r2, [sp, #0]
 80068da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068e8:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068f4:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f6:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f8:	4883      	ldr	r0, [pc, #524]	; (8006b08 <HAL_SPI_MspInit+0x280>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80068fe:	2203      	movs	r2, #3
 8006900:	2305      	movs	r3, #5
 8006902:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006906:	f001 fef5 	bl	80086f4 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800690a:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800690c:	4a7f      	ldr	r2, [pc, #508]	; (8006b0c <HAL_SPI_MspInit+0x284>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800690e:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8006910:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8006912:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8006916:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006918:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800691c:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800691e:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006920:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006922:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8006924:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006928:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800692a:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800692e:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006934:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006936:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006938:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800693a:	f000 fc1d 	bl	8007178 <HAL_DMA_Init>
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 80cb 	bne.w	8006ada <HAL_SPI_MspInit+0x252>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8006944:	2200      	movs	r2, #0
 8006946:	2102      	movs	r1, #2
 8006948:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800694a:	67ee      	str	r6, [r5, #124]	; 0x7c
 800694c:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800694e:	f000 fa7d 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006952:	2023      	movs	r0, #35	; 0x23
 8006954:	f000 fab8 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
}
 8006958:	b03c      	add	sp, #240	; 0xf0
 800695a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800695c:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <HAL_SPI_MspInit+0x278>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695e:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006960:	486b      	ldr	r0, [pc, #428]	; (8006b10 <HAL_SPI_MspInit+0x288>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006962:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800696e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006972:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006976:	9202      	str	r2, [sp, #8]
 8006978:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800697a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800697e:	f042 0202 	orr.w	r2, r2, #2
 8006982:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006986:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006994:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006996:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006998:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800699a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800699e:	2303      	movs	r3, #3
 80069a0:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069a4:	f001 fea6 	bl	80086f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80069a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069ac:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ae:	4858      	ldr	r0, [pc, #352]	; (8006b10 <HAL_SPI_MspInit+0x288>)
 80069b0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80069b2:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80069b4:	4e57      	ldr	r6, [pc, #348]	; (8006b14 <HAL_SPI_MspInit+0x28c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80069b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2302      	movs	r3, #2
 80069be:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c2:	f001 fe97 	bl	80086f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80069c6:	4a54      	ldr	r2, [pc, #336]	; (8006b18 <HAL_SPI_MspInit+0x290>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80069c8:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80069ca:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80069cc:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80069d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069d8:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80069de:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069e0:	2304      	movs	r3, #4
 80069e2:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80069e6:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069ec:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80069f0:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80069f4:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80069f6:	f000 fbbf 	bl	8007178 <HAL_DMA_Init>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d170      	bne.n	8006ae0 <HAL_SPI_MspInit+0x258>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80069fe:	2200      	movs	r2, #0
 8006a00:	2103      	movs	r1, #3
 8006a02:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8006a04:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006a06:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8006a08:	f000 fa20 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006a0c:	2024      	movs	r0, #36	; 0x24
 8006a0e:	f000 fa5b 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
}
 8006a12:	b03c      	add	sp, #240	; 0xf0
 8006a14:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8006a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a1a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a1c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8006a1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a22:	f003 fd61 	bl	800a4e8 <HAL_RCCEx_PeriphCLKConfig>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d160      	bne.n	8006aec <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006a2a:	4b35      	ldr	r3, [pc, #212]	; (8006b00 <HAL_SPI_MspInit+0x278>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006a2c:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a2e:	483b      	ldr	r0, [pc, #236]	; (8006b1c <HAL_SPI_MspInit+0x294>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006a30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a38:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006a3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a44:	9204      	str	r2, [sp, #16]
 8006a46:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a4c:	f042 0220 	orr.w	r2, r2, #32
 8006a50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8006a54:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006a5c:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8006a64:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a66:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a68:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8006a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2302      	movs	r3, #2
 8006a72:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a76:	f001 fe3d 	bl	80086f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a7e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a80:	a906      	add	r1, sp, #24
 8006a82:	4826      	ldr	r0, [pc, #152]	; (8006b1c <HAL_SPI_MspInit+0x294>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006a84:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8006a86:	4c26      	ldr	r4, [pc, #152]	; (8006b20 <HAL_SPI_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a94:	f001 fe2e 	bl	80086f4 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8006a98:	4922      	ldr	r1, [pc, #136]	; (8006b24 <HAL_SPI_MspInit+0x29c>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8006a9a:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a9c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8006a9e:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006aa0:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8006aa2:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006aaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aae:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ab2:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ab6:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006ab8:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8006abc:	f000 fb5c 	bl	8007178 <HAL_DMA_Init>
 8006ac0:	b988      	cbnz	r0, 8006ae6 <HAL_SPI_MspInit+0x25e>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8006ac8:	67ec      	str	r4, [r5, #124]	; 0x7c
 8006aca:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8006acc:	f000 f9be 	bl	8006e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8006ad0:	2055      	movs	r0, #85	; 0x55
 8006ad2:	f000 f9f9 	bl	8006ec8 <HAL_NVIC_EnableIRQ>
}
 8006ad6:	b03c      	add	sp, #240	; 0xf0
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006ada:	f7ff fca1 	bl	8006420 <Error_Handler>
 8006ade:	e731      	b.n	8006944 <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 8006ae0:	f7ff fc9e 	bl	8006420 <Error_Handler>
 8006ae4:	e78b      	b.n	80069fe <HAL_SPI_MspInit+0x176>
      Error_Handler();
 8006ae6:	f7ff fc9b 	bl	8006420 <Error_Handler>
 8006aea:	e7ea      	b.n	8006ac2 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 8006aec:	f7ff fc98 	bl	8006420 <Error_Handler>
 8006af0:	e79b      	b.n	8006a2a <HAL_SPI_MspInit+0x1a2>
 8006af2:	bf00      	nop
 8006af4:	40013000 	.word	0x40013000
 8006af8:	40003800 	.word	0x40003800
 8006afc:	40015000 	.word	0x40015000
 8006b00:	58024400 	.word	0x58024400
 8006b04:	200192f0 	.word	0x200192f0
 8006b08:	58020000 	.word	0x58020000
 8006b0c:	40020070 	.word	0x40020070
 8006b10:	58020400 	.word	0x58020400
 8006b14:	20019368 	.word	0x20019368
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	58021400 	.word	0x58021400
 8006b20:	200193e0 	.word	0x200193e0
 8006b24:	40020058 	.word	0x40020058

08006b28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <HAL_MspInit+0x20>)
{
 8006b2a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b2c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006b30:	f042 0202 	orr.w	r2, r2, #2
 8006b34:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b44:	b002      	add	sp, #8
 8006b46:	4770      	bx	lr
 8006b48:	58024400 	.word	0x58024400

08006b4c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b4c:	e7fe      	b.n	8006b4c <NMI_Handler>
 8006b4e:	bf00      	nop

08006b50 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b50:	e7fe      	b.n	8006b50 <HardFault_Handler>
 8006b52:	bf00      	nop

08006b54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b54:	e7fe      	b.n	8006b54 <MemManage_Handler>
 8006b56:	bf00      	nop

08006b58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b58:	e7fe      	b.n	8006b58 <BusFault_Handler>
 8006b5a:	bf00      	nop

08006b5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b5c:	e7fe      	b.n	8006b5c <UsageFault_Handler>
 8006b5e:	bf00      	nop

08006b60 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <DebugMon_Handler>:
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <PendSV_Handler>:
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b6c:	f000 b928 	b.w	8006dc0 <HAL_IncTick>

08006b70 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <DMA1_Stream0_IRQHandler+0x8>)
 8006b72:	f001 b955 	b.w	8007e20 <HAL_DMA_IRQHandler>
 8006b76:	bf00      	nop
 8006b78:	20019368 	.word	0x20019368

08006b7c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <DMA1_Stream1_IRQHandler+0x8>)
 8006b7e:	f001 b94f 	b.w	8007e20 <HAL_DMA_IRQHandler>
 8006b82:	bf00      	nop
 8006b84:	20019054 	.word	0x20019054

08006b88 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <DMA1_Stream2_IRQHandler+0x8>)
 8006b8a:	f001 b949 	b.w	8007e20 <HAL_DMA_IRQHandler>
 8006b8e:	bf00      	nop
 8006b90:	200190cc 	.word	0x200190cc

08006b94 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <DMA1_Stream3_IRQHandler+0x8>)
 8006b96:	f001 b943 	b.w	8007e20 <HAL_DMA_IRQHandler>
 8006b9a:	bf00      	nop
 8006b9c:	200193e0 	.word	0x200193e0

08006ba0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <DMA1_Stream4_IRQHandler+0x8>)
 8006ba2:	f001 b93d 	b.w	8007e20 <HAL_DMA_IRQHandler>
 8006ba6:	bf00      	nop
 8006ba8:	200192f0 	.word	0x200192f0

08006bac <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <I2C2_EV_IRQHandler+0x8>)
 8006bae:	f002 b9e7 	b.w	8008f80 <HAL_I2C_EV_IRQHandler>
 8006bb2:	bf00      	nop
 8006bb4:	20012f58 	.word	0x20012f58

08006bb8 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <I2C2_ER_IRQHandler+0x8>)
 8006bba:	f002 bd03 	b.w	80095c4 <HAL_I2C_ER_IRQHandler>
 8006bbe:	bf00      	nop
 8006bc0:	20012f58 	.word	0x20012f58

08006bc4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <SPI1_IRQHandler+0x8>)
 8006bc6:	f006 bdb7 	b.w	800d738 <HAL_SPI_IRQHandler>
 8006bca:	bf00      	nop
 8006bcc:	20019458 	.word	0x20019458

08006bd0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <SPI2_IRQHandler+0x8>)
 8006bd2:	f006 bdb1 	b.w	800d738 <HAL_SPI_IRQHandler>
 8006bd6:	bf00      	nop
 8006bd8:	200194e0 	.word	0x200194e0

08006bdc <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <SDMMC1_IRQHandler+0x8>)
 8006bde:	f006 b94d 	b.w	800ce7c <HAL_SD_IRQHandler>
 8006be2:	bf00      	nop
 8006be4:	20019274 	.word	0x20019274

08006be8 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <SPI5_IRQHandler+0x8>)
 8006bea:	f006 bda5 	b.w	800d738 <HAL_SPI_IRQHandler>
 8006bee:	bf00      	nop
 8006bf0:	20019568 	.word	0x20019568

08006bf4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006bf4:	4927      	ldr	r1, [pc, #156]	; (8006c94 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006bf6:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <SystemInit+0xa4>)
{
 8006bf8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006bfa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006bfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006c06:	6813      	ldr	r3, [r2, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2b06      	cmp	r3, #6
 8006c0e:	d805      	bhi.n	8006c1c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006c10:	6813      	ldr	r3, [r2, #0]
 8006c12:	f023 030f 	bic.w	r3, r3, #15
 8006c16:	f043 0307 	orr.w	r3, r3, #7
 8006c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006c1c:	4b1f      	ldr	r3, [pc, #124]	; (8006c9c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c1e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006c20:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006c22:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006c24:	481c      	ldr	r0, [pc, #112]	; (8006c98 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8006c26:	f041 0101 	orr.w	r1, r1, #1
 8006c2a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006c2c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	400a      	ands	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006c34:	6803      	ldr	r3, [r0, #0]
 8006c36:	071b      	lsls	r3, r3, #28
 8006c38:	d505      	bpl.n	8006c46 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006c3a:	6803      	ldr	r3, [r0, #0]
 8006c3c:	f023 030f 	bic.w	r3, r3, #15
 8006c40:	f043 0307 	orr.w	r3, r3, #7
 8006c44:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <SystemInit+0xa8>)
 8006c48:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006c4a:	4916      	ldr	r1, [pc, #88]	; (8006ca4 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8006c4c:	4c16      	ldr	r4, [pc, #88]	; (8006ca8 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8006c4e:	4817      	ldr	r0, [pc, #92]	; (8006cac <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8006c50:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006c52:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006c54:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006c56:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006c58:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8006c5a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006c5e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006c62:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006c64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006c66:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c68:	4c11      	ldr	r4, [pc, #68]	; (8006cb0 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8006c6a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c6e:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8006c70:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006c72:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	4019      	ands	r1, r3
 8006c78:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006c7c:	d203      	bcs.n	8006c86 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <SystemInit+0xc4>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <SystemInit+0xc8>)
 8006c88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006c8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	e000ed00 	.word	0xe000ed00
 8006c98:	52002000 	.word	0x52002000
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	eaf6ed7f 	.word	0xeaf6ed7f
 8006ca4:	01010280 	.word	0x01010280
 8006ca8:	02020200 	.word	0x02020200
 8006cac:	01ff0000 	.word	0x01ff0000
 8006cb0:	5c001000 	.word	0x5c001000
 8006cb4:	ffff0000 	.word	0xffff0000
 8006cb8:	51008000 	.word	0x51008000
 8006cbc:	52004000 	.word	0x52004000

08006cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006cc6:	e003      	b.n	8006cd0 <LoopCopyDataInit>

08006cc8 <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cce:	3104      	adds	r1, #4

08006cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cd0:	480b      	ldr	r0, [pc, #44]	; (8006d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cd8:	d3f6      	bcc.n	8006cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8006cda:	4a0b      	ldr	r2, [pc, #44]	; (8006d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006cdc:	e002      	b.n	8006ce4 <LoopFillZerobss>

08006cde <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ce0:	f842 3b04 	str.w	r3, [r2], #4

08006ce4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ce8:	d3f9      	bcc.n	8006cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006cea:	f7ff ff83 	bl	8006bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cee:	f012 fc23 	bl	8019538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cf2:	f7ff f955 	bl	8005fa0 <main>
  bx  lr
 8006cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006cfc:	08033cb8 	.word	0x08033cb8
  ldr  r0, =_sdata
 8006d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d04:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 8006d08:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 8006d0c:	20019c94 	.word	0x20019c94

08006d10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d10:	e7fe      	b.n	8006d10 <ADC3_IRQHandler>
	...

08006d14 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006d14:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <HAL_InitTick+0x40>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b90b      	cbnz	r3, 8006d1e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006d1a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006d1c:	4770      	bx	lr
{
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d26:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <HAL_InitTick+0x44>)
 8006d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d2c:	6810      	ldr	r0, [r2, #0]
 8006d2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d32:	f000 f8d7 	bl	8006ee4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d36:	2c0f      	cmp	r4, #15
 8006d38:	d800      	bhi.n	8006d3c <HAL_InitTick+0x28>
 8006d3a:	b108      	cbz	r0, 8006d40 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006d3c:	2001      	movs	r0, #1
}
 8006d3e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d40:	2200      	movs	r2, #0
 8006d42:	4621      	mov	r1, r4
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d48:	f000 f880 	bl	8006e4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <HAL_InitTick+0x48>)
 8006d4e:	2000      	movs	r0, #0
 8006d50:	601c      	str	r4, [r3, #0]
}
 8006d52:	bd10      	pop	{r4, pc}
 8006d54:	2000009c 	.word	0x2000009c
 8006d58:	20000094 	.word	0x20000094
 8006d5c:	200000a0 	.word	0x200000a0

08006d60 <HAL_Init>:
{
 8006d60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d62:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d64:	4c12      	ldr	r4, [pc, #72]	; (8006db0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d66:	f000 f85f 	bl	8006e28 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d6a:	f003 f86d 	bl	8009e48 <HAL_RCC_GetSysClockFreq>
 8006d6e:	4b11      	ldr	r3, [pc, #68]	; (8006db4 <HAL_Init+0x54>)
 8006d70:	4911      	ldr	r1, [pc, #68]	; (8006db8 <HAL_Init+0x58>)
 8006d72:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d74:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d76:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d7a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d7e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d80:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d82:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8006d86:	490d      	ldr	r1, [pc, #52]	; (8006dbc <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d88:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d8c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d8e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8006d92:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d94:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d96:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d98:	f7ff ffbc 	bl	8006d14 <HAL_InitTick>
 8006d9c:	b110      	cbz	r0, 8006da4 <HAL_Init+0x44>
    return HAL_ERROR;
 8006d9e:	2401      	movs	r4, #1
}
 8006da0:	4620      	mov	r0, r4
 8006da2:	bd10      	pop	{r4, pc}
 8006da4:	4604      	mov	r4, r0
  HAL_MspInit();
 8006da6:	f7ff febf 	bl	8006b28 <HAL_MspInit>
}
 8006daa:	4620      	mov	r0, r4
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	20000098 	.word	0x20000098
 8006db4:	58024400 	.word	0x58024400
 8006db8:	0801b794 	.word	0x0801b794
 8006dbc:	20000094 	.word	0x20000094

08006dc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006dc0:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <HAL_IncTick+0x10>)
 8006dc2:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_IncTick+0x14>)
 8006dc4:	6811      	ldr	r1, [r2, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	440b      	add	r3, r1
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	200195f0 	.word	0x200195f0
 8006dd4:	2000009c 	.word	0x2000009c

08006dd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006dd8:	4b01      	ldr	r3, [pc, #4]	; (8006de0 <HAL_GetTick+0x8>)
 8006dda:	6818      	ldr	r0, [r3, #0]
}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	200195f0 	.word	0x200195f0

08006de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006de8:	f7ff fff6 	bl	8006dd8 <HAL_GetTick>
 8006dec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dee:	1c63      	adds	r3, r4, #1
 8006df0:	d002      	beq.n	8006df8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <HAL_Delay+0x20>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006df8:	f7ff ffee 	bl	8006dd8 <HAL_GetTick>
 8006dfc:	1b43      	subs	r3, r0, r5
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	d3fa      	bcc.n	8006df8 <HAL_Delay+0x14>
  {
  }
}
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	2000009c 	.word	0x2000009c

08006e08 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006e08:	4b01      	ldr	r3, [pc, #4]	; (8006e10 <HAL_GetREVID+0x8>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
}
 8006e0c:	0c00      	lsrs	r0, r0, #16
 8006e0e:	4770      	bx	lr
 8006e10:	5c001000 	.word	0x5c001000

08006e14 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8006e14:	4a03      	ldr	r2, [pc, #12]	; (8006e24 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8006e16:	6813      	ldr	r3, [r2, #0]
 8006e18:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006e1c:	4318      	orrs	r0, r3
 8006e1e:	6010      	str	r0, [r2, #0]
}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	52004000 	.word	0x52004000

08006e28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e28:	4906      	ldr	r1, [pc, #24]	; (8006e44 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e2a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e32:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e34:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e38:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e3c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006e3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006e40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e42:	4770      	bx	lr
 8006e44:	e000ed00 	.word	0xe000ed00
 8006e48:	05fa0000 	.word	0x05fa0000

08006e4c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e4c:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e4e:	b500      	push	{lr}
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e56:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e5a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e5e:	f1be 0f04 	cmp.w	lr, #4
 8006e62:	bf28      	it	cs
 8006e64:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e68:	f1bc 0f06 	cmp.w	ip, #6
 8006e6c:	d91a      	bls.n	8006ea4 <HAL_NVIC_SetPriority+0x58>
 8006e6e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006e74:	fa0c fc03 	lsl.w	ip, ip, r3
 8006e78:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8006e80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e82:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006e86:	ea21 010c 	bic.w	r1, r1, ip
 8006e8a:	fa01 f103 	lsl.w	r1, r1, r3
 8006e8e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006e92:	db0a      	blt.n	8006eaa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e94:	0109      	lsls	r1, r1, #4
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_NVIC_SetPriority+0x74>)
 8006e98:	b2c9      	uxtb	r1, r1
 8006e9a:	4403      	add	r3, r0
 8006e9c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ea4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	e7e8      	b.n	8006e7c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eaa:	f000 000f 	and.w	r0, r0, #15
 8006eae:	0109      	lsls	r1, r1, #4
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <HAL_NVIC_SetPriority+0x78>)
 8006eb2:	b2c9      	uxtb	r1, r1
 8006eb4:	4403      	add	r3, r0
 8006eb6:	7619      	strb	r1, [r3, #24]
 8006eb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ebc:	e000ed00 	.word	0xe000ed00
 8006ec0:	e000e100 	.word	0xe000e100
 8006ec4:	e000ecfc 	.word	0xe000ecfc

08006ec8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	db07      	blt.n	8006edc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f000 011f 	and.w	r1, r0, #31
 8006ed2:	4a03      	ldr	r2, [pc, #12]	; (8006ee0 <HAL_NVIC_EnableIRQ+0x18>)
 8006ed4:	0940      	lsrs	r0, r0, #5
 8006ed6:	408b      	lsls	r3, r1
 8006ed8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	e000e100 	.word	0xe000e100

08006ee4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee4:	1e43      	subs	r3, r0, #1
 8006ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eea:	d20c      	bcs.n	8006f06 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eec:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ef0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef2:	4906      	ldr	r1, [pc, #24]	; (8006f0c <HAL_SYSTICK_Config+0x28>)
 8006ef4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ef8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006efa:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efc:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f00:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f02:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006f06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	e000ed00 	.word	0xe000ed00

08006f10 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f10:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f16:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8006f20:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	e000ed00 	.word	0xe000ed00

08006f2c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_MPU_Enable+0x1c>)
 8006f2e:	f040 0001 	orr.w	r0, r0, #1
 8006f32:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f42:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f46:	4770      	bx	lr
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006f4c:	7843      	ldrb	r3, [r0, #1]
 8006f4e:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <HAL_MPU_ConfigRegion+0x5c>)
 8006f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006f54:	7803      	ldrb	r3, [r0, #0]
 8006f56:	b313      	cbz	r3, 8006f9e <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006f58:	6843      	ldr	r3, [r0, #4]
 8006f5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f5e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f60:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f64:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006f66:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f68:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006f6c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f70:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006f72:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f74:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f78:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f7c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f80:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f82:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f86:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f8e:	7a01      	ldrb	r1, [r0, #8]
 8006f90:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006f94:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8006f9c:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8006f9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006fa2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8006fa6:	4770      	bx	lr
 8006fa8:	e000ed00 	.word	0xe000ed00

08006fac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fac:	4b34      	ldr	r3, [pc, #208]	; (8007080 <DMA_CalcBaseAndBitshift+0xd4>)
 8006fae:	4935      	ldr	r1, [pc, #212]	; (8007084 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8006fb0:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fb2:	4d35      	ldr	r5, [pc, #212]	; (8007088 <DMA_CalcBaseAndBitshift+0xdc>)
 8006fb4:	6802      	ldr	r2, [r0, #0]
 8006fb6:	4c35      	ldr	r4, [pc, #212]	; (800708c <DMA_CalcBaseAndBitshift+0xe0>)
 8006fb8:	42aa      	cmp	r2, r5
 8006fba:	bf18      	it	ne
 8006fbc:	429a      	cmpne	r2, r3
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	428a      	cmp	r2, r1
 8006fc6:	bf08      	it	eq
 8006fc8:	f043 0301 	orreq.w	r3, r3, #1
 8006fcc:	3130      	adds	r1, #48	; 0x30
 8006fce:	42a2      	cmp	r2, r4
 8006fd0:	bf08      	it	eq
 8006fd2:	f043 0301 	orreq.w	r3, r3, #1
 8006fd6:	3430      	adds	r4, #48	; 0x30
 8006fd8:	428a      	cmp	r2, r1
 8006fda:	bf08      	it	eq
 8006fdc:	f043 0301 	orreq.w	r3, r3, #1
 8006fe0:	3130      	adds	r1, #48	; 0x30
 8006fe2:	42a2      	cmp	r2, r4
 8006fe4:	bf08      	it	eq
 8006fe6:	f043 0301 	orreq.w	r3, r3, #1
 8006fea:	3430      	adds	r4, #48	; 0x30
 8006fec:	428a      	cmp	r2, r1
 8006fee:	bf08      	it	eq
 8006ff0:	f043 0301 	orreq.w	r3, r3, #1
 8006ff4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8006ff8:	42a2      	cmp	r2, r4
 8006ffa:	bf08      	it	eq
 8006ffc:	f043 0301 	orreq.w	r3, r3, #1
 8007000:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007004:	428a      	cmp	r2, r1
 8007006:	bf08      	it	eq
 8007008:	f043 0301 	orreq.w	r3, r3, #1
 800700c:	3130      	adds	r1, #48	; 0x30
 800700e:	42a2      	cmp	r2, r4
 8007010:	bf08      	it	eq
 8007012:	f043 0301 	orreq.w	r3, r3, #1
 8007016:	3430      	adds	r4, #48	; 0x30
 8007018:	428a      	cmp	r2, r1
 800701a:	bf08      	it	eq
 800701c:	f043 0301 	orreq.w	r3, r3, #1
 8007020:	3130      	adds	r1, #48	; 0x30
 8007022:	42a2      	cmp	r2, r4
 8007024:	bf08      	it	eq
 8007026:	f043 0301 	orreq.w	r3, r3, #1
 800702a:	3430      	adds	r4, #48	; 0x30
 800702c:	428a      	cmp	r2, r1
 800702e:	bf08      	it	eq
 8007030:	f043 0301 	orreq.w	r3, r3, #1
 8007034:	3130      	adds	r1, #48	; 0x30
 8007036:	42a2      	cmp	r2, r4
 8007038:	bf08      	it	eq
 800703a:	f043 0301 	orreq.w	r3, r3, #1
 800703e:	428a      	cmp	r2, r1
 8007040:	bf08      	it	eq
 8007042:	f043 0301 	orreq.w	r3, r3, #1
 8007046:	b913      	cbnz	r3, 800704e <DMA_CalcBaseAndBitshift+0xa2>
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <DMA_CalcBaseAndBitshift+0xe4>)
 800704a:	429a      	cmp	r2, r3
 800704c:	d113      	bne.n	8007076 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800704e:	b2d3      	uxtb	r3, r2
 8007050:	4910      	ldr	r1, [pc, #64]	; (8007094 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007052:	4c11      	ldr	r4, [pc, #68]	; (8007098 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007054:	3b10      	subs	r3, #16
 8007056:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800705a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800705e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007062:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007066:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007068:	bf88      	it	hi
 800706a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800706c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800706e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8007070:	4618      	mov	r0, r3
 8007072:	bc30      	pop	{r4, r5}
 8007074:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007076:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800707a:	6583      	str	r3, [r0, #88]	; 0x58
 800707c:	e7f8      	b.n	8007070 <DMA_CalcBaseAndBitshift+0xc4>
 800707e:	bf00      	nop
 8007080:	40020010 	.word	0x40020010
 8007084:	40020040 	.word	0x40020040
 8007088:	40020028 	.word	0x40020028
 800708c:	40020058 	.word	0x40020058
 8007090:	400204b8 	.word	0x400204b8
 8007094:	aaaaaaab 	.word	0xaaaaaaab
 8007098:	0801b7a4 	.word	0x0801b7a4
 800709c:	fffffc00 	.word	0xfffffc00

080070a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80070a0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070a2:	4a29      	ldr	r2, [pc, #164]	; (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80070a4:	4929      	ldr	r1, [pc, #164]	; (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 80070a6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070a8:	4d29      	ldr	r5, [pc, #164]	; (8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80070aa:	4c2a      	ldr	r4, [pc, #168]	; (8007154 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	bf18      	it	ne
 80070b0:	4293      	cmpne	r3, r2
 80070b2:	bf0c      	ite	eq
 80070b4:	2201      	moveq	r2, #1
 80070b6:	2200      	movne	r2, #0
 80070b8:	428b      	cmp	r3, r1
 80070ba:	bf08      	it	eq
 80070bc:	f042 0201 	orreq.w	r2, r2, #1
 80070c0:	3128      	adds	r1, #40	; 0x28
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	bf08      	it	eq
 80070c6:	f042 0201 	orreq.w	r2, r2, #1
 80070ca:	3428      	adds	r4, #40	; 0x28
 80070cc:	428b      	cmp	r3, r1
 80070ce:	bf08      	it	eq
 80070d0:	f042 0201 	orreq.w	r2, r2, #1
 80070d4:	3128      	adds	r1, #40	; 0x28
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	bf08      	it	eq
 80070da:	f042 0201 	orreq.w	r2, r2, #1
 80070de:	428b      	cmp	r3, r1
 80070e0:	bf08      	it	eq
 80070e2:	f042 0201 	orreq.w	r2, r2, #1
 80070e6:	b912      	cbnz	r2, 80070ee <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80070e8:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d113      	bne.n	8007116 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4c1a      	ldr	r4, [pc, #104]	; (800715c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070f4:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070f6:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070f8:	4d1a      	ldr	r5, [pc, #104]	; (8007164 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070fa:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070fe:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007100:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007104:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007108:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800710e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007110:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007112:	bc30      	pop	{r4, r5}
 8007114:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007116:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007118:	4913      	ldr	r1, [pc, #76]	; (8007168 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800711a:	4c14      	ldr	r4, [pc, #80]	; (800716c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800711c:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800711e:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007120:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007122:	fba4 2302 	umull	r2, r3, r4, r2
 8007126:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800712a:	d800      	bhi.n	800712e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800712c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800712e:	4a10      	ldr	r2, [pc, #64]	; (8007170 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007130:	f003 051f 	and.w	r5, r3, #31
 8007134:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007136:	4c0f      	ldr	r4, [pc, #60]	; (8007174 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007138:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800713a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800713c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800713e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007140:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007142:	6602      	str	r2, [r0, #96]	; 0x60
}
 8007144:	e7e5      	b.n	8007112 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8007146:	bf00      	nop
 8007148:	58025408 	.word	0x58025408
 800714c:	58025430 	.word	0x58025430
 8007150:	5802541c 	.word	0x5802541c
 8007154:	58025444 	.word	0x58025444
 8007158:	58025494 	.word	0x58025494
 800715c:	cccccccd 	.word	0xcccccccd
 8007160:	16009600 	.word	0x16009600
 8007164:	58025880 	.word	0x58025880
 8007168:	bffdfbf0 	.word	0xbffdfbf0
 800716c:	aaaaaaab 	.word	0xaaaaaaab
 8007170:	10008200 	.word	0x10008200
 8007174:	40020880 	.word	0x40020880

08007178 <HAL_DMA_Init>:
{
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800717c:	f7ff fe2c 	bl	8006dd8 <HAL_GetTick>
  if(hdma == NULL)
 8007180:	2c00      	cmp	r4, #0
 8007182:	f000 816b 	beq.w	800745c <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	4605      	mov	r5, r0
 800718a:	4ba3      	ldr	r3, [pc, #652]	; (8007418 <HAL_DMA_Init+0x2a0>)
 800718c:	429a      	cmp	r2, r3
 800718e:	d048      	beq.n	8007222 <HAL_DMA_Init+0xaa>
 8007190:	3318      	adds	r3, #24
 8007192:	429a      	cmp	r2, r3
 8007194:	d045      	beq.n	8007222 <HAL_DMA_Init+0xaa>
 8007196:	3330      	adds	r3, #48	; 0x30
 8007198:	49a0      	ldr	r1, [pc, #640]	; (800741c <HAL_DMA_Init+0x2a4>)
 800719a:	428a      	cmp	r2, r1
 800719c:	bf18      	it	ne
 800719e:	429a      	cmpne	r2, r3
 80071a0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80071a4:	bf0c      	ite	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	2300      	movne	r3, #0
 80071aa:	428a      	cmp	r2, r1
 80071ac:	bf08      	it	eq
 80071ae:	f043 0301 	orreq.w	r3, r3, #1
 80071b2:	3118      	adds	r1, #24
 80071b4:	428a      	cmp	r2, r1
 80071b6:	bf08      	it	eq
 80071b8:	f043 0301 	orreq.w	r3, r3, #1
 80071bc:	3118      	adds	r1, #24
 80071be:	428a      	cmp	r2, r1
 80071c0:	bf08      	it	eq
 80071c2:	f043 0301 	orreq.w	r3, r3, #1
 80071c6:	3118      	adds	r1, #24
 80071c8:	428a      	cmp	r2, r1
 80071ca:	bf08      	it	eq
 80071cc:	f043 0301 	orreq.w	r3, r3, #1
 80071d0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80071d4:	428a      	cmp	r2, r1
 80071d6:	bf08      	it	eq
 80071d8:	f043 0301 	orreq.w	r3, r3, #1
 80071dc:	3118      	adds	r1, #24
 80071de:	428a      	cmp	r2, r1
 80071e0:	bf08      	it	eq
 80071e2:	f043 0301 	orreq.w	r3, r3, #1
 80071e6:	3118      	adds	r1, #24
 80071e8:	428a      	cmp	r2, r1
 80071ea:	bf08      	it	eq
 80071ec:	f043 0301 	orreq.w	r3, r3, #1
 80071f0:	3118      	adds	r1, #24
 80071f2:	428a      	cmp	r2, r1
 80071f4:	bf08      	it	eq
 80071f6:	f043 0301 	orreq.w	r3, r3, #1
 80071fa:	3118      	adds	r1, #24
 80071fc:	428a      	cmp	r2, r1
 80071fe:	bf08      	it	eq
 8007200:	f043 0301 	orreq.w	r3, r3, #1
 8007204:	3118      	adds	r1, #24
 8007206:	428a      	cmp	r2, r1
 8007208:	bf08      	it	eq
 800720a:	f043 0301 	orreq.w	r3, r3, #1
 800720e:	3118      	adds	r1, #24
 8007210:	428a      	cmp	r2, r1
 8007212:	bf08      	it	eq
 8007214:	f043 0301 	orreq.w	r3, r3, #1
 8007218:	b91b      	cbnz	r3, 8007222 <HAL_DMA_Init+0xaa>
 800721a:	4b81      	ldr	r3, [pc, #516]	; (8007420 <HAL_DMA_Init+0x2a8>)
 800721c:	429a      	cmp	r2, r3
 800721e:	f040 8184 	bne.w	800752a <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 8007222:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007224:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8007226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800722a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	e005      	b.n	8007244 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007238:	f7ff fdce 	bl	8006dd8 <HAL_GetTick>
 800723c:	1b43      	subs	r3, r0, r5
 800723e:	2b05      	cmp	r3, #5
 8007240:	f200 80fe 	bhi.w	8007440 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	07d0      	lsls	r0, r2, #31
 800724a:	d4f5      	bmi.n	8007238 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800724c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007250:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8007252:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007254:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007256:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007258:	430a      	orrs	r2, r1
 800725a:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800725c:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800725e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007262:	69a1      	ldr	r1, [r4, #24]
 8007264:	ea42 0201 	orr.w	r2, r2, r1
 8007268:	69e1      	ldr	r1, [r4, #28]
 800726a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800726e:	6a21      	ldr	r1, [r4, #32]
 8007270:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007274:	496b      	ldr	r1, [pc, #428]	; (8007424 <HAL_DMA_Init+0x2ac>)
 8007276:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 800727a:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800727e:	d103      	bne.n	8007288 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007280:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8007284:	4301      	orrs	r1, r0
 8007286:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007288:	4867      	ldr	r0, [pc, #412]	; (8007428 <HAL_DMA_Init+0x2b0>)
 800728a:	4968      	ldr	r1, [pc, #416]	; (800742c <HAL_DMA_Init+0x2b4>)
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	4001      	ands	r1, r0
 8007290:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007294:	d30a      	bcc.n	80072ac <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007296:	6861      	ldr	r1, [r4, #4]
 8007298:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 800729c:	281f      	cmp	r0, #31
 800729e:	f240 80d6 	bls.w	800744e <HAL_DMA_Init+0x2d6>
 80072a2:	394f      	subs	r1, #79	; 0x4f
 80072a4:	2903      	cmp	r1, #3
 80072a6:	d801      	bhi.n	80072ac <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80072a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80072ac:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80072ae:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 80072b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80072b2:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072b4:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072b6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80072ba:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072be:	d10e      	bne.n	80072de <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072c0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80072c4:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072c6:	b150      	cbz	r0, 80072de <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072c8:	69a5      	ldr	r5, [r4, #24]
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f040 8108 	bne.w	80074e0 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	f000 8125 	beq.w	8007520 <HAL_DMA_Init+0x3a8>
 80072d6:	f032 0202 	bics.w	r2, r2, #2
 80072da:	f000 8109 	beq.w	80074f0 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80072de:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072e0:	4620      	mov	r0, r4
 80072e2:	f7ff fe63 	bl	8006fac <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80072e8:	233f      	movs	r3, #63	; 0x3f
 80072ea:	f002 021f 	and.w	r2, r2, #31
 80072ee:	4093      	lsls	r3, r2
 80072f0:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	4b48      	ldr	r3, [pc, #288]	; (8007418 <HAL_DMA_Init+0x2a0>)
 80072f6:	484e      	ldr	r0, [pc, #312]	; (8007430 <HAL_DMA_Init+0x2b8>)
 80072f8:	4948      	ldr	r1, [pc, #288]	; (800741c <HAL_DMA_Init+0x2a4>)
 80072fa:	4282      	cmp	r2, r0
 80072fc:	bf18      	it	ne
 80072fe:	429a      	cmpne	r2, r3
 8007300:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007304:	bf0c      	ite	eq
 8007306:	2301      	moveq	r3, #1
 8007308:	2300      	movne	r3, #0
 800730a:	428a      	cmp	r2, r1
 800730c:	bf08      	it	eq
 800730e:	f043 0301 	orreq.w	r3, r3, #1
 8007312:	3130      	adds	r1, #48	; 0x30
 8007314:	4282      	cmp	r2, r0
 8007316:	bf08      	it	eq
 8007318:	f043 0301 	orreq.w	r3, r3, #1
 800731c:	3030      	adds	r0, #48	; 0x30
 800731e:	428a      	cmp	r2, r1
 8007320:	bf08      	it	eq
 8007322:	f043 0301 	orreq.w	r3, r3, #1
 8007326:	3130      	adds	r1, #48	; 0x30
 8007328:	4282      	cmp	r2, r0
 800732a:	bf08      	it	eq
 800732c:	f043 0301 	orreq.w	r3, r3, #1
 8007330:	3030      	adds	r0, #48	; 0x30
 8007332:	428a      	cmp	r2, r1
 8007334:	bf08      	it	eq
 8007336:	f043 0301 	orreq.w	r3, r3, #1
 800733a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800733e:	4282      	cmp	r2, r0
 8007340:	bf08      	it	eq
 8007342:	f043 0301 	orreq.w	r3, r3, #1
 8007346:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800734a:	428a      	cmp	r2, r1
 800734c:	bf08      	it	eq
 800734e:	f043 0301 	orreq.w	r3, r3, #1
 8007352:	3130      	adds	r1, #48	; 0x30
 8007354:	4282      	cmp	r2, r0
 8007356:	bf08      	it	eq
 8007358:	f043 0301 	orreq.w	r3, r3, #1
 800735c:	3030      	adds	r0, #48	; 0x30
 800735e:	428a      	cmp	r2, r1
 8007360:	bf08      	it	eq
 8007362:	f043 0301 	orreq.w	r3, r3, #1
 8007366:	3130      	adds	r1, #48	; 0x30
 8007368:	4282      	cmp	r2, r0
 800736a:	bf08      	it	eq
 800736c:	f043 0301 	orreq.w	r3, r3, #1
 8007370:	3030      	adds	r0, #48	; 0x30
 8007372:	428a      	cmp	r2, r1
 8007374:	bf08      	it	eq
 8007376:	f043 0301 	orreq.w	r3, r3, #1
 800737a:	3130      	adds	r1, #48	; 0x30
 800737c:	4282      	cmp	r2, r0
 800737e:	bf08      	it	eq
 8007380:	f043 0301 	orreq.w	r3, r3, #1
 8007384:	3030      	adds	r0, #48	; 0x30
 8007386:	428a      	cmp	r2, r1
 8007388:	bf08      	it	eq
 800738a:	f043 0301 	orreq.w	r3, r3, #1
 800738e:	4929      	ldr	r1, [pc, #164]	; (8007434 <HAL_DMA_Init+0x2bc>)
 8007390:	4282      	cmp	r2, r0
 8007392:	bf08      	it	eq
 8007394:	f043 0301 	orreq.w	r3, r3, #1
 8007398:	4827      	ldr	r0, [pc, #156]	; (8007438 <HAL_DMA_Init+0x2c0>)
 800739a:	428a      	cmp	r2, r1
 800739c:	bf08      	it	eq
 800739e:	f043 0301 	orreq.w	r3, r3, #1
 80073a2:	3128      	adds	r1, #40	; 0x28
 80073a4:	4282      	cmp	r2, r0
 80073a6:	bf08      	it	eq
 80073a8:	f043 0301 	orreq.w	r3, r3, #1
 80073ac:	3028      	adds	r0, #40	; 0x28
 80073ae:	428a      	cmp	r2, r1
 80073b0:	bf08      	it	eq
 80073b2:	f043 0301 	orreq.w	r3, r3, #1
 80073b6:	3128      	adds	r1, #40	; 0x28
 80073b8:	4282      	cmp	r2, r0
 80073ba:	bf08      	it	eq
 80073bc:	f043 0301 	orreq.w	r3, r3, #1
 80073c0:	3028      	adds	r0, #40	; 0x28
 80073c2:	428a      	cmp	r2, r1
 80073c4:	bf08      	it	eq
 80073c6:	f043 0301 	orreq.w	r3, r3, #1
 80073ca:	3128      	adds	r1, #40	; 0x28
 80073cc:	4282      	cmp	r2, r0
 80073ce:	bf08      	it	eq
 80073d0:	f043 0301 	orreq.w	r3, r3, #1
 80073d4:	428a      	cmp	r2, r1
 80073d6:	bf08      	it	eq
 80073d8:	f043 0301 	orreq.w	r3, r3, #1
 80073dc:	b913      	cbnz	r3, 80073e4 <HAL_DMA_Init+0x26c>
 80073de:	4b17      	ldr	r3, [pc, #92]	; (800743c <HAL_DMA_Init+0x2c4>)
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d113      	bne.n	800740c <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7ff fe5b 	bl	80070a0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d037      	beq.n	8007460 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073f0:	7922      	ldrb	r2, [r4, #4]
 80073f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80073f4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073f6:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80073fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80073fc:	6861      	ldr	r1, [r4, #4]
 80073fe:	1e4b      	subs	r3, r1, #1
 8007400:	2b07      	cmp	r3, #7
 8007402:	d931      	bls.n	8007468 <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 8007404:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8007406:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800740a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800740c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800740e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007410:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007412:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	40020010 	.word	0x40020010
 800741c:	40020040 	.word	0x40020040
 8007420:	400204b8 	.word	0x400204b8
 8007424:	fe10803f 	.word	0xfe10803f
 8007428:	5c001000 	.word	0x5c001000
 800742c:	ffff0000 	.word	0xffff0000
 8007430:	40020028 	.word	0x40020028
 8007434:	58025408 	.word	0x58025408
 8007438:	5802541c 	.word	0x5802541c
 800743c:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007440:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8007442:	2303      	movs	r3, #3
        return HAL_ERROR;
 8007444:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007446:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800744c:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800744e:	496a      	ldr	r1, [pc, #424]	; (80075f8 <HAL_DMA_Init+0x480>)
 8007450:	fa21 f000 	lsr.w	r0, r1, r0
 8007454:	07c1      	lsls	r1, r0, #31
 8007456:	f57f af29 	bpl.w	80072ac <HAL_DMA_Init+0x134>
 800745a:	e725      	b.n	80072a8 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 800745c:	2001      	movs	r0, #1
}
 800745e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007460:	2300      	movs	r3, #0
 8007462:	461a      	mov	r2, r3
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	e7c4      	b.n	80073f2 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	4a64      	ldr	r2, [pc, #400]	; (80075fc <HAL_DMA_Init+0x484>)
 800746c:	4d64      	ldr	r5, [pc, #400]	; (8007600 <HAL_DMA_Init+0x488>)
 800746e:	42a8      	cmp	r0, r5
 8007470:	bf18      	it	ne
 8007472:	4290      	cmpne	r0, r2
 8007474:	f105 0514 	add.w	r5, r5, #20
 8007478:	bf0c      	ite	eq
 800747a:	2201      	moveq	r2, #1
 800747c:	2200      	movne	r2, #0
 800747e:	42a8      	cmp	r0, r5
 8007480:	bf08      	it	eq
 8007482:	f042 0201 	orreq.w	r2, r2, #1
 8007486:	3514      	adds	r5, #20
 8007488:	42a8      	cmp	r0, r5
 800748a:	bf08      	it	eq
 800748c:	f042 0201 	orreq.w	r2, r2, #1
 8007490:	3514      	adds	r5, #20
 8007492:	42a8      	cmp	r0, r5
 8007494:	bf08      	it	eq
 8007496:	f042 0201 	orreq.w	r2, r2, #1
 800749a:	3514      	adds	r5, #20
 800749c:	42a8      	cmp	r0, r5
 800749e:	bf08      	it	eq
 80074a0:	f042 0201 	orreq.w	r2, r2, #1
 80074a4:	3514      	adds	r5, #20
 80074a6:	42a8      	cmp	r0, r5
 80074a8:	bf08      	it	eq
 80074aa:	f042 0201 	orreq.w	r2, r2, #1
 80074ae:	b93a      	cbnz	r2, 80074c0 <HAL_DMA_Init+0x348>
 80074b0:	4a54      	ldr	r2, [pc, #336]	; (8007604 <HAL_DMA_Init+0x48c>)
 80074b2:	4290      	cmp	r0, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074b6:	4a54      	ldr	r2, [pc, #336]	; (8007608 <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074b8:	4854      	ldr	r0, [pc, #336]	; (800760c <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074ba:	440a      	add	r2, r1
 80074bc:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074be:	e003      	b.n	80074c8 <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074c0:	4a53      	ldr	r2, [pc, #332]	; (8007610 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074c2:	4854      	ldr	r0, [pc, #336]	; (8007614 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074c4:	440a      	add	r2, r1
 80074c6:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80074ce:	2100      	movs	r1, #0
 80074d0:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074d4:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80074d6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074d8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	e795      	b.n	800740c <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074e0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80074e4:	d00e      	beq.n	8007504 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 80074e6:	2a02      	cmp	r2, #2
 80074e8:	d905      	bls.n	80074f6 <HAL_DMA_Init+0x37e>
 80074ea:	2a03      	cmp	r2, #3
 80074ec:	f47f aef7 	bne.w	80072de <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074f0:	01c2      	lsls	r2, r0, #7
 80074f2:	f57f aef4 	bpl.w	80072de <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 80074f6:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074f8:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80074fa:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074fc:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80074fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007502:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8007504:	2a03      	cmp	r2, #3
 8007506:	f63f aeea 	bhi.w	80072de <HAL_DMA_Init+0x166>
 800750a:	a501      	add	r5, pc, #4	; (adr r5, 8007510 <HAL_DMA_Init+0x398>)
 800750c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8007510:	080074f7 	.word	0x080074f7
 8007514:	080074f1 	.word	0x080074f1
 8007518:	080074f7 	.word	0x080074f7
 800751c:	08007521 	.word	0x08007521
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007520:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8007524:	f47f aedb 	bne.w	80072de <HAL_DMA_Init+0x166>
 8007528:	e7e5      	b.n	80074f6 <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <HAL_DMA_Init+0x484>)
 800752c:	4834      	ldr	r0, [pc, #208]	; (8007600 <HAL_DMA_Init+0x488>)
 800752e:	493a      	ldr	r1, [pc, #232]	; (8007618 <HAL_DMA_Init+0x4a0>)
 8007530:	4282      	cmp	r2, r0
 8007532:	bf18      	it	ne
 8007534:	429a      	cmpne	r2, r3
 8007536:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	428a      	cmp	r2, r1
 8007542:	bf08      	it	eq
 8007544:	f043 0301 	orreq.w	r3, r3, #1
 8007548:	3128      	adds	r1, #40	; 0x28
 800754a:	4282      	cmp	r2, r0
 800754c:	bf08      	it	eq
 800754e:	f043 0301 	orreq.w	r3, r3, #1
 8007552:	3028      	adds	r0, #40	; 0x28
 8007554:	428a      	cmp	r2, r1
 8007556:	bf08      	it	eq
 8007558:	f043 0301 	orreq.w	r3, r3, #1
 800755c:	3128      	adds	r1, #40	; 0x28
 800755e:	4282      	cmp	r2, r0
 8007560:	bf08      	it	eq
 8007562:	f043 0301 	orreq.w	r3, r3, #1
 8007566:	428a      	cmp	r2, r1
 8007568:	bf08      	it	eq
 800756a:	f043 0301 	orreq.w	r3, r3, #1
 800756e:	b913      	cbnz	r3, 8007576 <HAL_DMA_Init+0x3fe>
 8007570:	4b24      	ldr	r3, [pc, #144]	; (8007604 <HAL_DMA_Init+0x48c>)
 8007572:	429a      	cmp	r2, r3
 8007574:	d139      	bne.n	80075ea <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
 8007576:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007578:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800757a:	4928      	ldr	r1, [pc, #160]	; (800761c <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800757c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007580:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007584:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007586:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d02b      	beq.n	80075e6 <HAL_DMA_Init+0x46e>
 800758e:	2b80      	cmp	r3, #128	; 0x80
 8007590:	bf0c      	ite	eq
 8007592:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8007596:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007598:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800759c:	08db      	lsrs	r3, r3, #3
 800759e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80075a2:	6965      	ldr	r5, [r4, #20]
 80075a4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80075a8:	69a5      	ldr	r5, [r4, #24]
 80075aa:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80075ae:	69e5      	ldr	r5, [r4, #28]
 80075b0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80075b4:	6a25      	ldr	r5, [r4, #32]
 80075b6:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80075ba:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075bc:	4918      	ldr	r1, [pc, #96]	; (8007620 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075be:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075c0:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80075c2:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	4b17      	ldr	r3, [pc, #92]	; (8007624 <HAL_DMA_Init+0x4ac>)
 80075c8:	4411      	add	r1, r2
 80075ca:	fba3 2301 	umull	r2, r3, r3, r1
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075d4:	f7ff fcea 	bl	8006fac <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80075da:	2301      	movs	r3, #1
 80075dc:	f002 021f 	and.w	r2, r2, #31
 80075e0:	4093      	lsls	r3, r2
 80075e2:	6043      	str	r3, [r0, #4]
 80075e4:	e685      	b.n	80072f2 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075e6:	2010      	movs	r0, #16
 80075e8:	e7d6      	b.n	8007598 <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075ea:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075ec:	2303      	movs	r3, #3
    return HAL_ERROR;
 80075ee:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075f0:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	c3c0003f 	.word	0xc3c0003f
 80075fc:	58025408 	.word	0x58025408
 8007600:	5802541c 	.word	0x5802541c
 8007604:	58025494 	.word	0x58025494
 8007608:	1000823f 	.word	0x1000823f
 800760c:	40020940 	.word	0x40020940
 8007610:	1600963f 	.word	0x1600963f
 8007614:	58025940 	.word	0x58025940
 8007618:	58025430 	.word	0x58025430
 800761c:	fffe000f 	.word	0xfffe000f
 8007620:	a7fdabf8 	.word	0xa7fdabf8
 8007624:	cccccccd 	.word	0xcccccccd

08007628 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8007628:	2800      	cmp	r0, #0
 800762a:	f000 8270 	beq.w	8007b0e <HAL_DMA_Start_IT+0x4e6>
 800762e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007630:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007634:	2801      	cmp	r0, #1
 8007636:	f000 826c 	beq.w	8007b12 <HAL_DMA_Start_IT+0x4ea>
 800763a:	2001      	movs	r0, #1
{
 800763c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 800763e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8007642:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007646:	4284      	cmp	r4, r0
 8007648:	d008      	beq.n	800765c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800764a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800764e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007650:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007654:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8007658:	bc70      	pop	{r4, r5, r6}
 800765a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800765c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800765e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007662:	4ea2      	ldr	r6, [pc, #648]	; (80078ec <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007664:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007668:	2000      	movs	r0, #0
 800766a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	f020 0001 	bic.w	r0, r0, #1
 8007674:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007676:	489e      	ldr	r0, [pc, #632]	; (80078f0 <HAL_DMA_Start_IT+0x2c8>)
 8007678:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800767c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007680:	42b4      	cmp	r4, r6
 8007682:	bf18      	it	ne
 8007684:	4284      	cmpne	r4, r0
 8007686:	f106 0618 	add.w	r6, r6, #24
 800768a:	bf0c      	ite	eq
 800768c:	2001      	moveq	r0, #1
 800768e:	2000      	movne	r0, #0
 8007690:	42b4      	cmp	r4, r6
 8007692:	bf08      	it	eq
 8007694:	f040 0001 	orreq.w	r0, r0, #1
 8007698:	3618      	adds	r6, #24
 800769a:	42b4      	cmp	r4, r6
 800769c:	bf08      	it	eq
 800769e:	f040 0001 	orreq.w	r0, r0, #1
 80076a2:	3618      	adds	r6, #24
 80076a4:	42b4      	cmp	r4, r6
 80076a6:	bf08      	it	eq
 80076a8:	f040 0001 	orreq.w	r0, r0, #1
 80076ac:	3618      	adds	r6, #24
 80076ae:	42b4      	cmp	r4, r6
 80076b0:	bf08      	it	eq
 80076b2:	f040 0001 	orreq.w	r0, r0, #1
 80076b6:	3618      	adds	r6, #24
 80076b8:	42b4      	cmp	r4, r6
 80076ba:	bf08      	it	eq
 80076bc:	f040 0001 	orreq.w	r0, r0, #1
 80076c0:	3618      	adds	r6, #24
 80076c2:	42b4      	cmp	r4, r6
 80076c4:	bf08      	it	eq
 80076c6:	f040 0001 	orreq.w	r0, r0, #1
 80076ca:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80076ce:	42b4      	cmp	r4, r6
 80076d0:	bf08      	it	eq
 80076d2:	f040 0001 	orreq.w	r0, r0, #1
 80076d6:	3618      	adds	r6, #24
 80076d8:	42b4      	cmp	r4, r6
 80076da:	bf08      	it	eq
 80076dc:	f040 0001 	orreq.w	r0, r0, #1
 80076e0:	3618      	adds	r6, #24
 80076e2:	42b4      	cmp	r4, r6
 80076e4:	bf08      	it	eq
 80076e6:	f040 0001 	orreq.w	r0, r0, #1
 80076ea:	3618      	adds	r6, #24
 80076ec:	42b4      	cmp	r4, r6
 80076ee:	bf08      	it	eq
 80076f0:	f040 0001 	orreq.w	r0, r0, #1
 80076f4:	3618      	adds	r6, #24
 80076f6:	42b4      	cmp	r4, r6
 80076f8:	bf08      	it	eq
 80076fa:	f040 0001 	orreq.w	r0, r0, #1
 80076fe:	3618      	adds	r6, #24
 8007700:	42b4      	cmp	r4, r6
 8007702:	bf08      	it	eq
 8007704:	f040 0001 	orreq.w	r0, r0, #1
 8007708:	3618      	adds	r6, #24
 800770a:	42b4      	cmp	r4, r6
 800770c:	bf08      	it	eq
 800770e:	f040 0001 	orreq.w	r0, r0, #1
 8007712:	3618      	adds	r6, #24
 8007714:	42b4      	cmp	r4, r6
 8007716:	bf08      	it	eq
 8007718:	f040 0001 	orreq.w	r0, r0, #1
 800771c:	4e75      	ldr	r6, [pc, #468]	; (80078f4 <HAL_DMA_Start_IT+0x2cc>)
 800771e:	42b4      	cmp	r4, r6
 8007720:	bf08      	it	eq
 8007722:	f040 0001 	orreq.w	r0, r0, #1
 8007726:	3614      	adds	r6, #20
 8007728:	42b4      	cmp	r4, r6
 800772a:	bf08      	it	eq
 800772c:	f040 0001 	orreq.w	r0, r0, #1
 8007730:	3614      	adds	r6, #20
 8007732:	42b4      	cmp	r4, r6
 8007734:	bf08      	it	eq
 8007736:	f040 0001 	orreq.w	r0, r0, #1
 800773a:	3614      	adds	r6, #20
 800773c:	42b4      	cmp	r4, r6
 800773e:	bf08      	it	eq
 8007740:	f040 0001 	orreq.w	r0, r0, #1
 8007744:	3614      	adds	r6, #20
 8007746:	42b4      	cmp	r4, r6
 8007748:	bf08      	it	eq
 800774a:	f040 0001 	orreq.w	r0, r0, #1
 800774e:	3614      	adds	r6, #20
 8007750:	42b4      	cmp	r4, r6
 8007752:	bf08      	it	eq
 8007754:	f040 0001 	orreq.w	r0, r0, #1
 8007758:	3614      	adds	r6, #20
 800775a:	42b4      	cmp	r4, r6
 800775c:	bf08      	it	eq
 800775e:	f040 0001 	orreq.w	r0, r0, #1
 8007762:	b910      	cbnz	r0, 800776a <HAL_DMA_Start_IT+0x142>
 8007764:	4864      	ldr	r0, [pc, #400]	; (80078f8 <HAL_DMA_Start_IT+0x2d0>)
 8007766:	4284      	cmp	r4, r0
 8007768:	d10a      	bne.n	8007780 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800776a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 800776e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007770:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8007774:	b110      	cbz	r0, 800777c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007776:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 800777a:	6044      	str	r4, [r0, #4]
 800777c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007780:	485b      	ldr	r0, [pc, #364]	; (80078f0 <HAL_DMA_Start_IT+0x2c8>)
 8007782:	4e5a      	ldr	r6, [pc, #360]	; (80078ec <HAL_DMA_Start_IT+0x2c4>)
 8007784:	42b4      	cmp	r4, r6
 8007786:	bf18      	it	ne
 8007788:	4284      	cmpne	r4, r0
 800778a:	f106 0618 	add.w	r6, r6, #24
 800778e:	bf0c      	ite	eq
 8007790:	2001      	moveq	r0, #1
 8007792:	2000      	movne	r0, #0
 8007794:	42b4      	cmp	r4, r6
 8007796:	bf08      	it	eq
 8007798:	f040 0001 	orreq.w	r0, r0, #1
 800779c:	3618      	adds	r6, #24
 800779e:	42b4      	cmp	r4, r6
 80077a0:	bf08      	it	eq
 80077a2:	f040 0001 	orreq.w	r0, r0, #1
 80077a6:	3618      	adds	r6, #24
 80077a8:	42b4      	cmp	r4, r6
 80077aa:	bf08      	it	eq
 80077ac:	f040 0001 	orreq.w	r0, r0, #1
 80077b0:	3618      	adds	r6, #24
 80077b2:	42b4      	cmp	r4, r6
 80077b4:	bf08      	it	eq
 80077b6:	f040 0001 	orreq.w	r0, r0, #1
 80077ba:	3618      	adds	r6, #24
 80077bc:	42b4      	cmp	r4, r6
 80077be:	bf08      	it	eq
 80077c0:	f040 0001 	orreq.w	r0, r0, #1
 80077c4:	3618      	adds	r6, #24
 80077c6:	42b4      	cmp	r4, r6
 80077c8:	bf08      	it	eq
 80077ca:	f040 0001 	orreq.w	r0, r0, #1
 80077ce:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80077d2:	42b4      	cmp	r4, r6
 80077d4:	bf08      	it	eq
 80077d6:	f040 0001 	orreq.w	r0, r0, #1
 80077da:	3618      	adds	r6, #24
 80077dc:	42b4      	cmp	r4, r6
 80077de:	bf08      	it	eq
 80077e0:	f040 0001 	orreq.w	r0, r0, #1
 80077e4:	3618      	adds	r6, #24
 80077e6:	42b4      	cmp	r4, r6
 80077e8:	bf08      	it	eq
 80077ea:	f040 0001 	orreq.w	r0, r0, #1
 80077ee:	3618      	adds	r6, #24
 80077f0:	42b4      	cmp	r4, r6
 80077f2:	bf08      	it	eq
 80077f4:	f040 0001 	orreq.w	r0, r0, #1
 80077f8:	3618      	adds	r6, #24
 80077fa:	42b4      	cmp	r4, r6
 80077fc:	bf08      	it	eq
 80077fe:	f040 0001 	orreq.w	r0, r0, #1
 8007802:	3618      	adds	r6, #24
 8007804:	42b4      	cmp	r4, r6
 8007806:	bf08      	it	eq
 8007808:	f040 0001 	orreq.w	r0, r0, #1
 800780c:	3618      	adds	r6, #24
 800780e:	42b4      	cmp	r4, r6
 8007810:	bf08      	it	eq
 8007812:	f040 0001 	orreq.w	r0, r0, #1
 8007816:	b918      	cbnz	r0, 8007820 <HAL_DMA_Start_IT+0x1f8>
 8007818:	4838      	ldr	r0, [pc, #224]	; (80078fc <HAL_DMA_Start_IT+0x2d4>)
 800781a:	4284      	cmp	r4, r0
 800781c:	f040 817b 	bne.w	8007b16 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007820:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8007824:	f000 041f 	and.w	r4, r0, #31
 8007828:	203f      	movs	r0, #63	; 0x3f
 800782a:	40a0      	lsls	r0, r4
 800782c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800782e:	f8dc 4000 	ldr.w	r4, [ip]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007838:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800783a:	f8dc 0000 	ldr.w	r0, [ip]
 800783e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007840:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007844:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007846:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800784a:	f000 815b 	beq.w	8007b04 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800784e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007850:	f8dc 3000 	ldr.w	r3, [ip]
 8007854:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007856:	f8dc 4000 	ldr.w	r4, [ip]
 800785a:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <HAL_DMA_Start_IT+0x2c8>)
 800785c:	4923      	ldr	r1, [pc, #140]	; (80078ec <HAL_DMA_Start_IT+0x2c4>)
 800785e:	4a28      	ldr	r2, [pc, #160]	; (8007900 <HAL_DMA_Start_IT+0x2d8>)
 8007860:	428c      	cmp	r4, r1
 8007862:	bf18      	it	ne
 8007864:	429c      	cmpne	r4, r3
 8007866:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	4294      	cmp	r4, r2
 8007872:	bf08      	it	eq
 8007874:	f043 0301 	orreq.w	r3, r3, #1
 8007878:	3230      	adds	r2, #48	; 0x30
 800787a:	428c      	cmp	r4, r1
 800787c:	bf08      	it	eq
 800787e:	f043 0301 	orreq.w	r3, r3, #1
 8007882:	3130      	adds	r1, #48	; 0x30
 8007884:	4294      	cmp	r4, r2
 8007886:	bf08      	it	eq
 8007888:	f043 0301 	orreq.w	r3, r3, #1
 800788c:	3230      	adds	r2, #48	; 0x30
 800788e:	428c      	cmp	r4, r1
 8007890:	bf08      	it	eq
 8007892:	f043 0301 	orreq.w	r3, r3, #1
 8007896:	3130      	adds	r1, #48	; 0x30
 8007898:	4294      	cmp	r4, r2
 800789a:	bf08      	it	eq
 800789c:	f043 0301 	orreq.w	r3, r3, #1
 80078a0:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80078a4:	428c      	cmp	r4, r1
 80078a6:	bf08      	it	eq
 80078a8:	f043 0301 	orreq.w	r3, r3, #1
 80078ac:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80078b0:	4294      	cmp	r4, r2
 80078b2:	bf08      	it	eq
 80078b4:	f043 0301 	orreq.w	r3, r3, #1
 80078b8:	3230      	adds	r2, #48	; 0x30
 80078ba:	428c      	cmp	r4, r1
 80078bc:	bf08      	it	eq
 80078be:	f043 0301 	orreq.w	r3, r3, #1
 80078c2:	3130      	adds	r1, #48	; 0x30
 80078c4:	4294      	cmp	r4, r2
 80078c6:	bf08      	it	eq
 80078c8:	f043 0301 	orreq.w	r3, r3, #1
 80078cc:	3230      	adds	r2, #48	; 0x30
 80078ce:	428c      	cmp	r4, r1
 80078d0:	bf08      	it	eq
 80078d2:	f043 0301 	orreq.w	r3, r3, #1
 80078d6:	3130      	adds	r1, #48	; 0x30
 80078d8:	4294      	cmp	r4, r2
 80078da:	bf08      	it	eq
 80078dc:	f043 0301 	orreq.w	r3, r3, #1
 80078e0:	3230      	adds	r2, #48	; 0x30
 80078e2:	428c      	cmp	r4, r1
 80078e4:	bf08      	it	eq
 80078e6:	f043 0301 	orreq.w	r3, r3, #1
 80078ea:	e00b      	b.n	8007904 <HAL_DMA_Start_IT+0x2dc>
 80078ec:	40020028 	.word	0x40020028
 80078f0:	40020010 	.word	0x40020010
 80078f4:	58025408 	.word	0x58025408
 80078f8:	58025494 	.word	0x58025494
 80078fc:	400204b8 	.word	0x400204b8
 8007900:	40020040 	.word	0x40020040
 8007904:	4294      	cmp	r4, r2
 8007906:	bf08      	it	eq
 8007908:	f043 0301 	orreq.w	r3, r3, #1
 800790c:	b91b      	cbnz	r3, 8007916 <HAL_DMA_Start_IT+0x2ee>
 800790e:	4b9b      	ldr	r3, [pc, #620]	; (8007b7c <HAL_DMA_Start_IT+0x554>)
 8007910:	429c      	cmp	r4, r3
 8007912:	f040 8143 	bne.w	8007b9c <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	f023 031e 	bic.w	r3, r3, #30
 800791c:	f043 0316 	orr.w	r3, r3, #22
 8007920:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007922:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007926:	b12b      	cbz	r3, 8007934 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007928:	f8dc 2000 	ldr.w	r2, [ip]
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	f043 0308 	orr.w	r3, r3, #8
 8007932:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007934:	f8dc 4000 	ldr.w	r4, [ip]
 8007938:	4b91      	ldr	r3, [pc, #580]	; (8007b80 <HAL_DMA_Start_IT+0x558>)
 800793a:	4992      	ldr	r1, [pc, #584]	; (8007b84 <HAL_DMA_Start_IT+0x55c>)
 800793c:	4a92      	ldr	r2, [pc, #584]	; (8007b88 <HAL_DMA_Start_IT+0x560>)
 800793e:	428c      	cmp	r4, r1
 8007940:	bf18      	it	ne
 8007942:	429c      	cmpne	r4, r3
 8007944:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007948:	bf0c      	ite	eq
 800794a:	2301      	moveq	r3, #1
 800794c:	2300      	movne	r3, #0
 800794e:	4294      	cmp	r4, r2
 8007950:	bf08      	it	eq
 8007952:	f043 0301 	orreq.w	r3, r3, #1
 8007956:	3230      	adds	r2, #48	; 0x30
 8007958:	428c      	cmp	r4, r1
 800795a:	bf08      	it	eq
 800795c:	f043 0301 	orreq.w	r3, r3, #1
 8007960:	3130      	adds	r1, #48	; 0x30
 8007962:	4294      	cmp	r4, r2
 8007964:	bf08      	it	eq
 8007966:	f043 0301 	orreq.w	r3, r3, #1
 800796a:	3230      	adds	r2, #48	; 0x30
 800796c:	428c      	cmp	r4, r1
 800796e:	bf08      	it	eq
 8007970:	f043 0301 	orreq.w	r3, r3, #1
 8007974:	3130      	adds	r1, #48	; 0x30
 8007976:	4294      	cmp	r4, r2
 8007978:	bf08      	it	eq
 800797a:	f043 0301 	orreq.w	r3, r3, #1
 800797e:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8007982:	428c      	cmp	r4, r1
 8007984:	bf08      	it	eq
 8007986:	f043 0301 	orreq.w	r3, r3, #1
 800798a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800798e:	4294      	cmp	r4, r2
 8007990:	bf08      	it	eq
 8007992:	f043 0301 	orreq.w	r3, r3, #1
 8007996:	3230      	adds	r2, #48	; 0x30
 8007998:	428c      	cmp	r4, r1
 800799a:	bf08      	it	eq
 800799c:	f043 0301 	orreq.w	r3, r3, #1
 80079a0:	3130      	adds	r1, #48	; 0x30
 80079a2:	4294      	cmp	r4, r2
 80079a4:	bf08      	it	eq
 80079a6:	f043 0301 	orreq.w	r3, r3, #1
 80079aa:	3230      	adds	r2, #48	; 0x30
 80079ac:	428c      	cmp	r4, r1
 80079ae:	bf08      	it	eq
 80079b0:	f043 0301 	orreq.w	r3, r3, #1
 80079b4:	3130      	adds	r1, #48	; 0x30
 80079b6:	4294      	cmp	r4, r2
 80079b8:	bf08      	it	eq
 80079ba:	f043 0301 	orreq.w	r3, r3, #1
 80079be:	3230      	adds	r2, #48	; 0x30
 80079c0:	428c      	cmp	r4, r1
 80079c2:	bf08      	it	eq
 80079c4:	f043 0301 	orreq.w	r3, r3, #1
 80079c8:	3130      	adds	r1, #48	; 0x30
 80079ca:	4294      	cmp	r4, r2
 80079cc:	bf08      	it	eq
 80079ce:	f043 0301 	orreq.w	r3, r3, #1
 80079d2:	4a6e      	ldr	r2, [pc, #440]	; (8007b8c <HAL_DMA_Start_IT+0x564>)
 80079d4:	428c      	cmp	r4, r1
 80079d6:	bf08      	it	eq
 80079d8:	f043 0301 	orreq.w	r3, r3, #1
 80079dc:	496c      	ldr	r1, [pc, #432]	; (8007b90 <HAL_DMA_Start_IT+0x568>)
 80079de:	4294      	cmp	r4, r2
 80079e0:	bf08      	it	eq
 80079e2:	f043 0301 	orreq.w	r3, r3, #1
 80079e6:	3228      	adds	r2, #40	; 0x28
 80079e8:	428c      	cmp	r4, r1
 80079ea:	bf08      	it	eq
 80079ec:	f043 0301 	orreq.w	r3, r3, #1
 80079f0:	3128      	adds	r1, #40	; 0x28
 80079f2:	4294      	cmp	r4, r2
 80079f4:	bf08      	it	eq
 80079f6:	f043 0301 	orreq.w	r3, r3, #1
 80079fa:	3228      	adds	r2, #40	; 0x28
 80079fc:	428c      	cmp	r4, r1
 80079fe:	bf08      	it	eq
 8007a00:	f043 0301 	orreq.w	r3, r3, #1
 8007a04:	3128      	adds	r1, #40	; 0x28
 8007a06:	4294      	cmp	r4, r2
 8007a08:	bf08      	it	eq
 8007a0a:	f043 0301 	orreq.w	r3, r3, #1
 8007a0e:	3228      	adds	r2, #40	; 0x28
 8007a10:	428c      	cmp	r4, r1
 8007a12:	bf08      	it	eq
 8007a14:	f043 0301 	orreq.w	r3, r3, #1
 8007a18:	4294      	cmp	r4, r2
 8007a1a:	bf08      	it	eq
 8007a1c:	f043 0301 	orreq.w	r3, r3, #1
 8007a20:	b913      	cbnz	r3, 8007a28 <HAL_DMA_Start_IT+0x400>
 8007a22:	4b5c      	ldr	r3, [pc, #368]	; (8007b94 <HAL_DMA_Start_IT+0x56c>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d111      	bne.n	8007a4c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a28:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	03d2      	lsls	r2, r2, #15
 8007a30:	d503      	bpl.n	8007a3a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a38:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8007a3a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8007a3e:	b11b      	cbz	r3, 8007a48 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8007a4c:	4b4c      	ldr	r3, [pc, #304]	; (8007b80 <HAL_DMA_Start_IT+0x558>)
 8007a4e:	494d      	ldr	r1, [pc, #308]	; (8007b84 <HAL_DMA_Start_IT+0x55c>)
 8007a50:	4a4d      	ldr	r2, [pc, #308]	; (8007b88 <HAL_DMA_Start_IT+0x560>)
 8007a52:	428c      	cmp	r4, r1
 8007a54:	bf18      	it	ne
 8007a56:	429c      	cmpne	r4, r3
 8007a58:	484f      	ldr	r0, [pc, #316]	; (8007b98 <HAL_DMA_Start_IT+0x570>)
 8007a5a:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	4294      	cmp	r4, r2
 8007a66:	bf08      	it	eq
 8007a68:	f043 0301 	orreq.w	r3, r3, #1
 8007a6c:	3230      	adds	r2, #48	; 0x30
 8007a6e:	4284      	cmp	r4, r0
 8007a70:	bf08      	it	eq
 8007a72:	f043 0301 	orreq.w	r3, r3, #1
 8007a76:	3060      	adds	r0, #96	; 0x60
 8007a78:	4294      	cmp	r4, r2
 8007a7a:	bf08      	it	eq
 8007a7c:	f043 0301 	orreq.w	r3, r3, #1
 8007a80:	3230      	adds	r2, #48	; 0x30
 8007a82:	428c      	cmp	r4, r1
 8007a84:	bf08      	it	eq
 8007a86:	f043 0301 	orreq.w	r3, r3, #1
 8007a8a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8007a8e:	4294      	cmp	r4, r2
 8007a90:	bf08      	it	eq
 8007a92:	f043 0301 	orreq.w	r3, r3, #1
 8007a96:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8007a9a:	4284      	cmp	r4, r0
 8007a9c:	bf08      	it	eq
 8007a9e:	f043 0301 	orreq.w	r3, r3, #1
 8007aa2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8007aa6:	4294      	cmp	r4, r2
 8007aa8:	bf08      	it	eq
 8007aaa:	f043 0301 	orreq.w	r3, r3, #1
 8007aae:	3230      	adds	r2, #48	; 0x30
 8007ab0:	428c      	cmp	r4, r1
 8007ab2:	bf08      	it	eq
 8007ab4:	f043 0301 	orreq.w	r3, r3, #1
 8007ab8:	3160      	adds	r1, #96	; 0x60
 8007aba:	4294      	cmp	r4, r2
 8007abc:	bf08      	it	eq
 8007abe:	f043 0301 	orreq.w	r3, r3, #1
 8007ac2:	3230      	adds	r2, #48	; 0x30
 8007ac4:	4284      	cmp	r4, r0
 8007ac6:	bf08      	it	eq
 8007ac8:	f043 0301 	orreq.w	r3, r3, #1
 8007acc:	4294      	cmp	r4, r2
 8007ace:	bf08      	it	eq
 8007ad0:	f043 0301 	orreq.w	r3, r3, #1
 8007ad4:	3230      	adds	r2, #48	; 0x30
 8007ad6:	428c      	cmp	r4, r1
 8007ad8:	bf08      	it	eq
 8007ada:	f043 0301 	orreq.w	r3, r3, #1
 8007ade:	4294      	cmp	r4, r2
 8007ae0:	bf08      	it	eq
 8007ae2:	f043 0301 	orreq.w	r3, r3, #1
 8007ae6:	b933      	cbnz	r3, 8007af6 <HAL_DMA_Start_IT+0x4ce>
 8007ae8:	3060      	adds	r0, #96	; 0x60
 8007aea:	1a20      	subs	r0, r4, r0
 8007aec:	fab0 f080 	clz	r0, r0
 8007af0:	0940      	lsrs	r0, r0, #5
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d03d      	beq.n	8007b72 <HAL_DMA_Start_IT+0x54a>
 8007af6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	6023      	str	r3, [r4, #0]
}
 8007b00:	bc70      	pop	{r4, r5, r6}
 8007b02:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b04:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b06:	f8dc 3000 	ldr.w	r3, [ip]
 8007b0a:	60d9      	str	r1, [r3, #12]
 8007b0c:	e6a3      	b.n	8007856 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8007b0e:	2001      	movs	r0, #1
 8007b10:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8007b12:	2002      	movs	r0, #2
}
 8007b14:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b16:	481d      	ldr	r0, [pc, #116]	; (8007b8c <HAL_DMA_Start_IT+0x564>)
 8007b18:	4e1d      	ldr	r6, [pc, #116]	; (8007b90 <HAL_DMA_Start_IT+0x568>)
 8007b1a:	42b4      	cmp	r4, r6
 8007b1c:	bf18      	it	ne
 8007b1e:	4284      	cmpne	r4, r0
 8007b20:	f106 0614 	add.w	r6, r6, #20
 8007b24:	bf0c      	ite	eq
 8007b26:	2001      	moveq	r0, #1
 8007b28:	2000      	movne	r0, #0
 8007b2a:	42b4      	cmp	r4, r6
 8007b2c:	bf08      	it	eq
 8007b2e:	f040 0001 	orreq.w	r0, r0, #1
 8007b32:	3614      	adds	r6, #20
 8007b34:	42b4      	cmp	r4, r6
 8007b36:	bf08      	it	eq
 8007b38:	f040 0001 	orreq.w	r0, r0, #1
 8007b3c:	3614      	adds	r6, #20
 8007b3e:	42b4      	cmp	r4, r6
 8007b40:	bf08      	it	eq
 8007b42:	f040 0001 	orreq.w	r0, r0, #1
 8007b46:	3614      	adds	r6, #20
 8007b48:	42b4      	cmp	r4, r6
 8007b4a:	bf08      	it	eq
 8007b4c:	f040 0001 	orreq.w	r0, r0, #1
 8007b50:	3614      	adds	r6, #20
 8007b52:	42b4      	cmp	r4, r6
 8007b54:	bf08      	it	eq
 8007b56:	f040 0001 	orreq.w	r0, r0, #1
 8007b5a:	b910      	cbnz	r0, 8007b62 <HAL_DMA_Start_IT+0x53a>
 8007b5c:	480d      	ldr	r0, [pc, #52]	; (8007b94 <HAL_DMA_Start_IT+0x56c>)
 8007b5e:	4284      	cmp	r4, r0
 8007b60:	d11c      	bne.n	8007b9c <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b62:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8007b66:	f000 041f 	and.w	r4, r0, #31
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	40a0      	lsls	r0, r4
 8007b6e:	6068      	str	r0, [r5, #4]
 8007b70:	e663      	b.n	800783a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	f043 0301 	orr.w	r3, r3, #1
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	e56d      	b.n	8007658 <HAL_DMA_Start_IT+0x30>
 8007b7c:	400204b8 	.word	0x400204b8
 8007b80:	40020010 	.word	0x40020010
 8007b84:	40020028 	.word	0x40020028
 8007b88:	40020040 	.word	0x40020040
 8007b8c:	58025408 	.word	0x58025408
 8007b90:	5802541c 	.word	0x5802541c
 8007b94:	58025494 	.word	0x58025494
 8007b98:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	f023 030e 	bic.w	r3, r3, #14
 8007ba2:	f043 030a 	orr.w	r3, r3, #10
 8007ba6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007ba8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f43f aec1 	beq.w	8007934 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007bb2:	f8dc 2000 	ldr.w	r2, [ip]
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	f043 0304 	orr.w	r3, r3, #4
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	e6b9      	b.n	8007934 <HAL_DMA_Start_IT+0x30c>

08007bc0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d065      	beq.n	8007c90 <HAL_DMA_Abort_IT+0xd0>
{
 8007bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bc8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2a02      	cmp	r2, #2
 8007bd0:	d159      	bne.n	8007c86 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bd2:	6801      	ldr	r1, [r0, #0]
 8007bd4:	4883      	ldr	r0, [pc, #524]	; (8007de4 <HAL_DMA_Abort_IT+0x224>)
 8007bd6:	4281      	cmp	r1, r0
 8007bd8:	d04b      	beq.n	8007c72 <HAL_DMA_Abort_IT+0xb2>
 8007bda:	4c83      	ldr	r4, [pc, #524]	; (8007de8 <HAL_DMA_Abort_IT+0x228>)
 8007bdc:	42a1      	cmp	r1, r4
 8007bde:	d048      	beq.n	8007c72 <HAL_DMA_Abort_IT+0xb2>
 8007be0:	f8df a228 	ldr.w	sl, [pc, #552]	; 8007e0c <HAL_DMA_Abort_IT+0x24c>
 8007be4:	f8df b214 	ldr.w	fp, [pc, #532]	; 8007dfc <HAL_DMA_Abort_IT+0x23c>
 8007be8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007e10 <HAL_DMA_Abort_IT+0x250>
 8007bec:	4559      	cmp	r1, fp
 8007bee:	bf18      	it	ne
 8007bf0:	4551      	cmpne	r1, sl
 8007bf2:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8007e14 <HAL_DMA_Abort_IT+0x254>
 8007bf6:	f8df e220 	ldr.w	lr, [pc, #544]	; 8007e18 <HAL_DMA_Abort_IT+0x258>
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2201      	moveq	r2, #1
 8007bfe:	2200      	movne	r2, #0
 8007c00:	f8df c218 	ldr.w	ip, [pc, #536]	; 8007e1c <HAL_DMA_Abort_IT+0x25c>
 8007c04:	4549      	cmp	r1, r9
 8007c06:	bf08      	it	eq
 8007c08:	f042 0201 	orreq.w	r2, r2, #1
 8007c0c:	4d77      	ldr	r5, [pc, #476]	; (8007dec <HAL_DMA_Abort_IT+0x22c>)
 8007c0e:	4f78      	ldr	r7, [pc, #480]	; (8007df0 <HAL_DMA_Abort_IT+0x230>)
 8007c10:	4541      	cmp	r1, r8
 8007c12:	bf08      	it	eq
 8007c14:	f042 0201 	orreq.w	r2, r2, #1
 8007c18:	4e76      	ldr	r6, [pc, #472]	; (8007df4 <HAL_DMA_Abort_IT+0x234>)
 8007c1a:	4571      	cmp	r1, lr
 8007c1c:	bf08      	it	eq
 8007c1e:	f042 0201 	orreq.w	r2, r2, #1
 8007c22:	4561      	cmp	r1, ip
 8007c24:	bf08      	it	eq
 8007c26:	f042 0201 	orreq.w	r2, r2, #1
 8007c2a:	42a9      	cmp	r1, r5
 8007c2c:	bf08      	it	eq
 8007c2e:	f042 0201 	orreq.w	r2, r2, #1
 8007c32:	3518      	adds	r5, #24
 8007c34:	42a9      	cmp	r1, r5
 8007c36:	bf08      	it	eq
 8007c38:	f042 0201 	orreq.w	r2, r2, #1
 8007c3c:	3518      	adds	r5, #24
 8007c3e:	42a9      	cmp	r1, r5
 8007c40:	bf08      	it	eq
 8007c42:	f042 0201 	orreq.w	r2, r2, #1
 8007c46:	3518      	adds	r5, #24
 8007c48:	42a9      	cmp	r1, r5
 8007c4a:	bf08      	it	eq
 8007c4c:	f042 0201 	orreq.w	r2, r2, #1
 8007c50:	3548      	adds	r5, #72	; 0x48
 8007c52:	42b9      	cmp	r1, r7
 8007c54:	bf08      	it	eq
 8007c56:	f042 0201 	orreq.w	r2, r2, #1
 8007c5a:	42b1      	cmp	r1, r6
 8007c5c:	bf08      	it	eq
 8007c5e:	f042 0201 	orreq.w	r2, r2, #1
 8007c62:	42a9      	cmp	r1, r5
 8007c64:	bf08      	it	eq
 8007c66:	f042 0201 	orreq.w	r2, r2, #1
 8007c6a:	b912      	cbnz	r2, 8007c72 <HAL_DMA_Abort_IT+0xb2>
 8007c6c:	4a62      	ldr	r2, [pc, #392]	; (8007df8 <HAL_DMA_Abort_IT+0x238>)
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	d110      	bne.n	8007c94 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c72:	2204      	movs	r2, #4
  return HAL_OK;
 8007c74:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007c7a:	680b      	ldr	r3, [r1, #0]
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	600b      	str	r3, [r1, #0]
}
 8007c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c86:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007c88:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c8a:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8007c90:	2001      	movs	r0, #1
}
 8007c92:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c94:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c96:	4c54      	ldr	r4, [pc, #336]	; (8007de8 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c98:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c9c:	4857      	ldr	r0, [pc, #348]	; (8007dfc <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c9e:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	680a      	ldr	r2, [r1, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007caa:	4a4e      	ldr	r2, [pc, #312]	; (8007de4 <HAL_DMA_Abort_IT+0x224>)
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	42a1      	cmp	r1, r4
 8007cb0:	bf18      	it	ne
 8007cb2:	4291      	cmpne	r1, r2
 8007cb4:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8007cb8:	bf0c      	ite	eq
 8007cba:	2201      	moveq	r2, #1
 8007cbc:	2200      	movne	r2, #0
 8007cbe:	4281      	cmp	r1, r0
 8007cc0:	bf08      	it	eq
 8007cc2:	f042 0201 	orreq.w	r2, r2, #1
 8007cc6:	3030      	adds	r0, #48	; 0x30
 8007cc8:	42a1      	cmp	r1, r4
 8007cca:	bf08      	it	eq
 8007ccc:	f042 0201 	orreq.w	r2, r2, #1
 8007cd0:	3430      	adds	r4, #48	; 0x30
 8007cd2:	4281      	cmp	r1, r0
 8007cd4:	bf08      	it	eq
 8007cd6:	f042 0201 	orreq.w	r2, r2, #1
 8007cda:	3030      	adds	r0, #48	; 0x30
 8007cdc:	42a1      	cmp	r1, r4
 8007cde:	bf08      	it	eq
 8007ce0:	f042 0201 	orreq.w	r2, r2, #1
 8007ce4:	3430      	adds	r4, #48	; 0x30
 8007ce6:	4281      	cmp	r1, r0
 8007ce8:	bf08      	it	eq
 8007cea:	f042 0201 	orreq.w	r2, r2, #1
 8007cee:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007cf2:	42a1      	cmp	r1, r4
 8007cf4:	bf08      	it	eq
 8007cf6:	f042 0201 	orreq.w	r2, r2, #1
 8007cfa:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007cfe:	4281      	cmp	r1, r0
 8007d00:	bf08      	it	eq
 8007d02:	f042 0201 	orreq.w	r2, r2, #1
 8007d06:	3030      	adds	r0, #48	; 0x30
 8007d08:	42a1      	cmp	r1, r4
 8007d0a:	bf08      	it	eq
 8007d0c:	f042 0201 	orreq.w	r2, r2, #1
 8007d10:	3430      	adds	r4, #48	; 0x30
 8007d12:	4281      	cmp	r1, r0
 8007d14:	bf08      	it	eq
 8007d16:	f042 0201 	orreq.w	r2, r2, #1
 8007d1a:	3030      	adds	r0, #48	; 0x30
 8007d1c:	42a1      	cmp	r1, r4
 8007d1e:	bf08      	it	eq
 8007d20:	f042 0201 	orreq.w	r2, r2, #1
 8007d24:	3430      	adds	r4, #48	; 0x30
 8007d26:	4281      	cmp	r1, r0
 8007d28:	bf08      	it	eq
 8007d2a:	f042 0201 	orreq.w	r2, r2, #1
 8007d2e:	3030      	adds	r0, #48	; 0x30
 8007d30:	42a1      	cmp	r1, r4
 8007d32:	bf08      	it	eq
 8007d34:	f042 0201 	orreq.w	r2, r2, #1
 8007d38:	3430      	adds	r4, #48	; 0x30
 8007d3a:	4281      	cmp	r1, r0
 8007d3c:	bf08      	it	eq
 8007d3e:	f042 0201 	orreq.w	r2, r2, #1
 8007d42:	482f      	ldr	r0, [pc, #188]	; (8007e00 <HAL_DMA_Abort_IT+0x240>)
 8007d44:	42a1      	cmp	r1, r4
 8007d46:	bf08      	it	eq
 8007d48:	f042 0201 	orreq.w	r2, r2, #1
 8007d4c:	4c2d      	ldr	r4, [pc, #180]	; (8007e04 <HAL_DMA_Abort_IT+0x244>)
 8007d4e:	4281      	cmp	r1, r0
 8007d50:	bf08      	it	eq
 8007d52:	f042 0201 	orreq.w	r2, r2, #1
 8007d56:	3028      	adds	r0, #40	; 0x28
 8007d58:	42a1      	cmp	r1, r4
 8007d5a:	bf08      	it	eq
 8007d5c:	f042 0201 	orreq.w	r2, r2, #1
 8007d60:	3428      	adds	r4, #40	; 0x28
 8007d62:	4281      	cmp	r1, r0
 8007d64:	bf08      	it	eq
 8007d66:	f042 0201 	orreq.w	r2, r2, #1
 8007d6a:	3028      	adds	r0, #40	; 0x28
 8007d6c:	42a1      	cmp	r1, r4
 8007d6e:	bf08      	it	eq
 8007d70:	f042 0201 	orreq.w	r2, r2, #1
 8007d74:	3428      	adds	r4, #40	; 0x28
 8007d76:	4281      	cmp	r1, r0
 8007d78:	bf08      	it	eq
 8007d7a:	f042 0201 	orreq.w	r2, r2, #1
 8007d7e:	3028      	adds	r0, #40	; 0x28
 8007d80:	42a1      	cmp	r1, r4
 8007d82:	bf08      	it	eq
 8007d84:	f042 0201 	orreq.w	r2, r2, #1
 8007d88:	4281      	cmp	r1, r0
 8007d8a:	bf08      	it	eq
 8007d8c:	f042 0201 	orreq.w	r2, r2, #1
 8007d90:	b912      	cbnz	r2, 8007d98 <HAL_DMA_Abort_IT+0x1d8>
 8007d92:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <HAL_DMA_Abort_IT+0x248>)
 8007d94:	4291      	cmp	r1, r2
 8007d96:	d117      	bne.n	8007dc8 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d98:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d9a:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d9c:	6801      	ldr	r1, [r0, #0]
 8007d9e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007da2:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007da8:	f001 011f 	and.w	r1, r1, #31
 8007dac:	408a      	lsls	r2, r1
 8007dae:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007db0:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8007db4:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007db8:	b132      	cbz	r2, 8007dc8 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dba:	6811      	ldr	r1, [r2, #0]
 8007dbc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007dc0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dc2:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8007dc6:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8007dc8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8007dca:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8007dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8007dce:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007dd2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8007dd6:	b11a      	cbz	r2, 8007de0 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8007dd8:	4618      	mov	r0, r3
 8007dda:	4790      	blx	r2
  return HAL_OK;
 8007ddc:	4620      	mov	r0, r4
 8007dde:	e755      	b.n	8007c8c <HAL_DMA_Abort_IT+0xcc>
 8007de0:	4610      	mov	r0, r2
 8007de2:	e753      	b.n	8007c8c <HAL_DMA_Abort_IT+0xcc>
 8007de4:	40020010 	.word	0x40020010
 8007de8:	40020028 	.word	0x40020028
 8007dec:	40020410 	.word	0x40020410
 8007df0:	40020470 	.word	0x40020470
 8007df4:	40020488 	.word	0x40020488
 8007df8:	400204b8 	.word	0x400204b8
 8007dfc:	40020040 	.word	0x40020040
 8007e00:	58025408 	.word	0x58025408
 8007e04:	5802541c 	.word	0x5802541c
 8007e08:	58025494 	.word	0x58025494
 8007e0c:	40020058 	.word	0x40020058
 8007e10:	40020070 	.word	0x40020070
 8007e14:	40020088 	.word	0x40020088
 8007e18:	400200a0 	.word	0x400200a0
 8007e1c:	400200b8 	.word	0x400200b8

08007e20 <HAL_DMA_IRQHandler>:
{
 8007e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8007e24:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e26:	4b9e      	ldr	r3, [pc, #632]	; (80080a0 <HAL_DMA_IRQHandler+0x280>)
{
 8007e28:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e2a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e2c:	681e      	ldr	r6, [r3, #0]
{
 8007e2e:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8007e30:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e32:	6803      	ldr	r3, [r0, #0]
 8007e34:	4a9b      	ldr	r2, [pc, #620]	; (80080a4 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 8007e36:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e38:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8007e3a:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e3c:	d048      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0xb0>
 8007e3e:	3218      	adds	r2, #24
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d045      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0xb0>
 8007e44:	3218      	adds	r2, #24
 8007e46:	4f98      	ldr	r7, [pc, #608]	; (80080a8 <HAL_DMA_IRQHandler+0x288>)
 8007e48:	42bb      	cmp	r3, r7
 8007e4a:	bf18      	it	ne
 8007e4c:	4293      	cmpne	r3, r2
 8007e4e:	f107 0718 	add.w	r7, r7, #24
 8007e52:	bf0c      	ite	eq
 8007e54:	2201      	moveq	r2, #1
 8007e56:	2200      	movne	r2, #0
 8007e58:	42bb      	cmp	r3, r7
 8007e5a:	bf08      	it	eq
 8007e5c:	f042 0201 	orreq.w	r2, r2, #1
 8007e60:	3718      	adds	r7, #24
 8007e62:	42bb      	cmp	r3, r7
 8007e64:	bf08      	it	eq
 8007e66:	f042 0201 	orreq.w	r2, r2, #1
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	42bb      	cmp	r3, r7
 8007e6e:	bf08      	it	eq
 8007e70:	f042 0201 	orreq.w	r2, r2, #1
 8007e74:	3718      	adds	r7, #24
 8007e76:	42bb      	cmp	r3, r7
 8007e78:	bf08      	it	eq
 8007e7a:	f042 0201 	orreq.w	r2, r2, #1
 8007e7e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8007e82:	42bb      	cmp	r3, r7
 8007e84:	bf08      	it	eq
 8007e86:	f042 0201 	orreq.w	r2, r2, #1
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	42bb      	cmp	r3, r7
 8007e8e:	bf08      	it	eq
 8007e90:	f042 0201 	orreq.w	r2, r2, #1
 8007e94:	3718      	adds	r7, #24
 8007e96:	42bb      	cmp	r3, r7
 8007e98:	bf08      	it	eq
 8007e9a:	f042 0201 	orreq.w	r2, r2, #1
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	42bb      	cmp	r3, r7
 8007ea2:	bf08      	it	eq
 8007ea4:	f042 0201 	orreq.w	r2, r2, #1
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	42bb      	cmp	r3, r7
 8007eac:	bf08      	it	eq
 8007eae:	f042 0201 	orreq.w	r2, r2, #1
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	42bb      	cmp	r3, r7
 8007eb6:	bf08      	it	eq
 8007eb8:	f042 0201 	orreq.w	r2, r2, #1
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	42bb      	cmp	r3, r7
 8007ec0:	bf08      	it	eq
 8007ec2:	f042 0201 	orreq.w	r2, r2, #1
 8007ec6:	b91a      	cbnz	r2, 8007ed0 <HAL_DMA_IRQHandler+0xb0>
 8007ec8:	4a78      	ldr	r2, [pc, #480]	; (80080ac <HAL_DMA_IRQHandler+0x28c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	f040 82b3 	bne.w	8008436 <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ed0:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	f000 011f 	and.w	r1, r0, #31
 8007eda:	408a      	lsls	r2, r1
 8007edc:	4222      	tst	r2, r4
 8007ede:	f040 81a5 	bne.w	800822c <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ee2:	fa24 f201 	lsr.w	r2, r4, r1
 8007ee6:	07d2      	lsls	r2, r2, #31
 8007ee8:	d511      	bpl.n	8007f0e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	0612      	lsls	r2, r2, #24
 8007eee:	f140 8269 	bpl.w	80083c4 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	fa03 f101 	lsl.w	r1, r3, r1
 8007ef8:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007efa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007efe:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f02:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f06:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f0a:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f0e:	f04f 0c04 	mov.w	ip, #4
 8007f12:	fa0c fc01 	lsl.w	ip, ip, r1
 8007f16:	ea1c 0f04 	tst.w	ip, r4
 8007f1a:	d062      	beq.n	8007fe2 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f1c:	f8d8 2000 	ldr.w	r2, [r8]
 8007f20:	4f60      	ldr	r7, [pc, #384]	; (80080a4 <HAL_DMA_IRQHandler+0x284>)
 8007f22:	4b63      	ldr	r3, [pc, #396]	; (80080b0 <HAL_DMA_IRQHandler+0x290>)
 8007f24:	429a      	cmp	r2, r3
 8007f26:	bf18      	it	ne
 8007f28:	42ba      	cmpne	r2, r7
 8007f2a:	f103 0318 	add.w	r3, r3, #24
 8007f2e:	bf0c      	ite	eq
 8007f30:	2701      	moveq	r7, #1
 8007f32:	2700      	movne	r7, #0
 8007f34:	429a      	cmp	r2, r3
 8007f36:	bf08      	it	eq
 8007f38:	f047 0701 	orreq.w	r7, r7, #1
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf08      	it	eq
 8007f42:	f047 0701 	orreq.w	r7, r7, #1
 8007f46:	3318      	adds	r3, #24
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bf08      	it	eq
 8007f4c:	f047 0701 	orreq.w	r7, r7, #1
 8007f50:	3318      	adds	r3, #24
 8007f52:	429a      	cmp	r2, r3
 8007f54:	bf08      	it	eq
 8007f56:	f047 0701 	orreq.w	r7, r7, #1
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bf08      	it	eq
 8007f60:	f047 0701 	orreq.w	r7, r7, #1
 8007f64:	3318      	adds	r3, #24
 8007f66:	429a      	cmp	r2, r3
 8007f68:	bf08      	it	eq
 8007f6a:	f047 0701 	orreq.w	r7, r7, #1
 8007f6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f72:	429a      	cmp	r2, r3
 8007f74:	bf08      	it	eq
 8007f76:	f047 0701 	orreq.w	r7, r7, #1
 8007f7a:	3318      	adds	r3, #24
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	bf08      	it	eq
 8007f80:	f047 0701 	orreq.w	r7, r7, #1
 8007f84:	3318      	adds	r3, #24
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bf08      	it	eq
 8007f8a:	f047 0701 	orreq.w	r7, r7, #1
 8007f8e:	3318      	adds	r3, #24
 8007f90:	429a      	cmp	r2, r3
 8007f92:	bf08      	it	eq
 8007f94:	f047 0701 	orreq.w	r7, r7, #1
 8007f98:	3318      	adds	r3, #24
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	bf08      	it	eq
 8007f9e:	f047 0701 	orreq.w	r7, r7, #1
 8007fa2:	3318      	adds	r3, #24
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	bf08      	it	eq
 8007fa8:	f047 0701 	orreq.w	r7, r7, #1
 8007fac:	3318      	adds	r3, #24
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	bf08      	it	eq
 8007fb2:	f047 0701 	orreq.w	r7, r7, #1
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	b91f      	cbnz	r7, 8007fc2 <HAL_DMA_IRQHandler+0x1a2>
 8007fba:	4f3c      	ldr	r7, [pc, #240]	; (80080ac <HAL_DMA_IRQHandler+0x28c>)
 8007fbc:	42ba      	cmp	r2, r7
 8007fbe:	f040 8277 	bne.w	80084b0 <HAL_DMA_IRQHandler+0x690>
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	0797      	lsls	r7, r2, #30
 8007fc6:	f140 8209 	bpl.w	80083dc <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fca:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fce:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fd2:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fd6:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fda:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fde:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fe2:	f04f 0c10 	mov.w	ip, #16
 8007fe6:	fa0c fc01 	lsl.w	ip, ip, r1
 8007fea:	ea1c 0f04 	tst.w	ip, r4
 8007fee:	d079      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8007ff4:	4f2b      	ldr	r7, [pc, #172]	; (80080a4 <HAL_DMA_IRQHandler+0x284>)
 8007ff6:	4b2e      	ldr	r3, [pc, #184]	; (80080b0 <HAL_DMA_IRQHandler+0x290>)
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bf18      	it	ne
 8007ffc:	42ba      	cmpne	r2, r7
 8007ffe:	f103 0318 	add.w	r3, r3, #24
 8008002:	bf0c      	ite	eq
 8008004:	2701      	moveq	r7, #1
 8008006:	2700      	movne	r7, #0
 8008008:	429a      	cmp	r2, r3
 800800a:	bf08      	it	eq
 800800c:	f047 0701 	orreq.w	r7, r7, #1
 8008010:	3318      	adds	r3, #24
 8008012:	429a      	cmp	r2, r3
 8008014:	bf08      	it	eq
 8008016:	f047 0701 	orreq.w	r7, r7, #1
 800801a:	3318      	adds	r3, #24
 800801c:	429a      	cmp	r2, r3
 800801e:	bf08      	it	eq
 8008020:	f047 0701 	orreq.w	r7, r7, #1
 8008024:	3318      	adds	r3, #24
 8008026:	429a      	cmp	r2, r3
 8008028:	bf08      	it	eq
 800802a:	f047 0701 	orreq.w	r7, r7, #1
 800802e:	3318      	adds	r3, #24
 8008030:	429a      	cmp	r2, r3
 8008032:	bf08      	it	eq
 8008034:	f047 0701 	orreq.w	r7, r7, #1
 8008038:	3318      	adds	r3, #24
 800803a:	429a      	cmp	r2, r3
 800803c:	bf08      	it	eq
 800803e:	f047 0701 	orreq.w	r7, r7, #1
 8008042:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008046:	429a      	cmp	r2, r3
 8008048:	bf08      	it	eq
 800804a:	f047 0701 	orreq.w	r7, r7, #1
 800804e:	3318      	adds	r3, #24
 8008050:	429a      	cmp	r2, r3
 8008052:	bf08      	it	eq
 8008054:	f047 0701 	orreq.w	r7, r7, #1
 8008058:	3318      	adds	r3, #24
 800805a:	429a      	cmp	r2, r3
 800805c:	bf08      	it	eq
 800805e:	f047 0701 	orreq.w	r7, r7, #1
 8008062:	3318      	adds	r3, #24
 8008064:	429a      	cmp	r2, r3
 8008066:	bf08      	it	eq
 8008068:	f047 0701 	orreq.w	r7, r7, #1
 800806c:	3318      	adds	r3, #24
 800806e:	429a      	cmp	r2, r3
 8008070:	bf08      	it	eq
 8008072:	f047 0701 	orreq.w	r7, r7, #1
 8008076:	3318      	adds	r3, #24
 8008078:	429a      	cmp	r2, r3
 800807a:	bf08      	it	eq
 800807c:	f047 0701 	orreq.w	r7, r7, #1
 8008080:	3318      	adds	r3, #24
 8008082:	429a      	cmp	r2, r3
 8008084:	bf08      	it	eq
 8008086:	f047 0701 	orreq.w	r7, r7, #1
 800808a:	4613      	mov	r3, r2
 800808c:	b91f      	cbnz	r7, 8008096 <HAL_DMA_IRQHandler+0x276>
 800808e:	4f07      	ldr	r7, [pc, #28]	; (80080ac <HAL_DMA_IRQHandler+0x28c>)
 8008090:	42ba      	cmp	r2, r7
 8008092:	f040 814b 	bne.w	800832c <HAL_DMA_IRQHandler+0x50c>
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	0710      	lsls	r0, r2, #28
 800809a:	f140 818c 	bpl.w	80083b6 <HAL_DMA_IRQHandler+0x596>
 800809e:	e009      	b.n	80080b4 <HAL_DMA_IRQHandler+0x294>
 80080a0:	20000094 	.word	0x20000094
 80080a4:	40020010 	.word	0x40020010
 80080a8:	40020058 	.word	0x40020058
 80080ac:	400204b8 	.word	0x400204b8
 80080b0:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080b4:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080b8:	f8d8 3000 	ldr.w	r3, [r8]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	0352      	lsls	r2, r2, #13
 80080c0:	f100 8195 	bmi.w	80083ee <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	05d7      	lsls	r7, r2, #23
 80080c8:	d403      	bmi.n	80080d2 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f022 0208 	bic.w	r2, r2, #8
 80080d0:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80080d2:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80080d6:	b10b      	cbz	r3, 80080dc <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 80080d8:	4640      	mov	r0, r8
 80080da:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080dc:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 80080e0:	f001 011f 	and.w	r1, r1, #31
 80080e4:	2320      	movs	r3, #32
 80080e6:	fa03 f101 	lsl.w	r1, r3, r1
 80080ea:	4221      	tst	r1, r4
 80080ec:	d069      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80080ee:	f8d8 3000 	ldr.w	r3, [r8]
 80080f2:	4a97      	ldr	r2, [pc, #604]	; (8008350 <HAL_DMA_IRQHandler+0x530>)
 80080f4:	4c97      	ldr	r4, [pc, #604]	; (8008354 <HAL_DMA_IRQHandler+0x534>)
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	bf18      	it	ne
 80080fa:	4293      	cmpne	r3, r2
 80080fc:	f104 0418 	add.w	r4, r4, #24
 8008100:	bf0c      	ite	eq
 8008102:	2201      	moveq	r2, #1
 8008104:	2200      	movne	r2, #0
 8008106:	42a3      	cmp	r3, r4
 8008108:	bf08      	it	eq
 800810a:	f042 0201 	orreq.w	r2, r2, #1
 800810e:	3418      	adds	r4, #24
 8008110:	42a3      	cmp	r3, r4
 8008112:	bf08      	it	eq
 8008114:	f042 0201 	orreq.w	r2, r2, #1
 8008118:	3418      	adds	r4, #24
 800811a:	42a3      	cmp	r3, r4
 800811c:	bf08      	it	eq
 800811e:	f042 0201 	orreq.w	r2, r2, #1
 8008122:	3418      	adds	r4, #24
 8008124:	42a3      	cmp	r3, r4
 8008126:	bf08      	it	eq
 8008128:	f042 0201 	orreq.w	r2, r2, #1
 800812c:	3418      	adds	r4, #24
 800812e:	42a3      	cmp	r3, r4
 8008130:	bf08      	it	eq
 8008132:	f042 0201 	orreq.w	r2, r2, #1
 8008136:	3418      	adds	r4, #24
 8008138:	42a3      	cmp	r3, r4
 800813a:	bf08      	it	eq
 800813c:	f042 0201 	orreq.w	r2, r2, #1
 8008140:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8008144:	42a3      	cmp	r3, r4
 8008146:	bf08      	it	eq
 8008148:	f042 0201 	orreq.w	r2, r2, #1
 800814c:	3418      	adds	r4, #24
 800814e:	42a3      	cmp	r3, r4
 8008150:	bf08      	it	eq
 8008152:	f042 0201 	orreq.w	r2, r2, #1
 8008156:	3418      	adds	r4, #24
 8008158:	42a3      	cmp	r3, r4
 800815a:	bf08      	it	eq
 800815c:	f042 0201 	orreq.w	r2, r2, #1
 8008160:	3418      	adds	r4, #24
 8008162:	42a3      	cmp	r3, r4
 8008164:	bf08      	it	eq
 8008166:	f042 0201 	orreq.w	r2, r2, #1
 800816a:	3418      	adds	r4, #24
 800816c:	42a3      	cmp	r3, r4
 800816e:	bf08      	it	eq
 8008170:	f042 0201 	orreq.w	r2, r2, #1
 8008174:	3418      	adds	r4, #24
 8008176:	42a3      	cmp	r3, r4
 8008178:	bf08      	it	eq
 800817a:	f042 0201 	orreq.w	r2, r2, #1
 800817e:	3418      	adds	r4, #24
 8008180:	42a3      	cmp	r3, r4
 8008182:	bf08      	it	eq
 8008184:	f042 0201 	orreq.w	r2, r2, #1
 8008188:	b91a      	cbnz	r2, 8008192 <HAL_DMA_IRQHandler+0x372>
 800818a:	4a73      	ldr	r2, [pc, #460]	; (8008358 <HAL_DMA_IRQHandler+0x538>)
 800818c:	4293      	cmp	r3, r2
 800818e:	f040 80da 	bne.w	8008346 <HAL_DMA_IRQHandler+0x526>
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	06dc      	lsls	r4, r3, #27
 8008196:	d514      	bpl.n	80081c2 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008198:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800819a:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 800819e:	2b04      	cmp	r3, #4
 80081a0:	f000 80de 	beq.w	8008360 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081a4:	f8d8 3000 	ldr.w	r3, [r8]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	0352      	lsls	r2, r2, #13
 80081ac:	f140 8129 	bpl.w	8008402 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	031b      	lsls	r3, r3, #12
 80081b4:	f140 8134 	bpl.w	8008420 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 80081b8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80081bc:	b10b      	cbz	r3, 80081c2 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 80081be:	4640      	mov	r0, r8
 80081c0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081c2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80f2 	beq.w	80083b0 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80081cc:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80081d0:	07df      	lsls	r7, r3, #31
 80081d2:	d521      	bpl.n	8008218 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 80081d4:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 80081d8:	2104      	movs	r1, #4
 80081da:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081e6:	4b5d      	ldr	r3, [pc, #372]	; (800835c <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081e8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081ec:	fba3 3606 	umull	r3, r6, r3, r6
 80081f0:	0ab6      	lsrs	r6, r6, #10
 80081f2:	e002      	b.n	80081fa <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081f4:	6813      	ldr	r3, [r2, #0]
 80081f6:	07dd      	lsls	r5, r3, #31
 80081f8:	d504      	bpl.n	8008204 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	3301      	adds	r3, #1
 80081fe:	42b3      	cmp	r3, r6
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	d9f7      	bls.n	80081f4 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008204:	6813      	ldr	r3, [r2, #0]
 8008206:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008208:	bf4c      	ite	mi
 800820a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800820c:	2301      	movpl	r3, #1
 800820e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008212:	2300      	movs	r3, #0
 8008214:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008218:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80c7 	beq.w	80083b0 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 8008222:	4640      	mov	r0, r8
}
 8008224:	b002      	add	sp, #8
 8008226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800822a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	0752      	lsls	r2, r2, #29
 8008230:	d514      	bpl.n	800825c <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	f022 0204 	bic.w	r2, r2, #4
 8008238:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800823a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800823e:	f003 021f 	and.w	r2, r3, #31
 8008242:	2308      	movs	r3, #8
 8008244:	4093      	lsls	r3, r2
 8008246:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008248:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800824c:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008250:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008254:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008258:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800825c:	fa24 f301 	lsr.w	r3, r4, r1
 8008260:	07df      	lsls	r7, r3, #31
 8008262:	f57f ae54 	bpl.w	8007f0e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008266:	f8d8 2000 	ldr.w	r2, [r8]
 800826a:	4f39      	ldr	r7, [pc, #228]	; (8008350 <HAL_DMA_IRQHandler+0x530>)
 800826c:	4b39      	ldr	r3, [pc, #228]	; (8008354 <HAL_DMA_IRQHandler+0x534>)
 800826e:	429a      	cmp	r2, r3
 8008270:	bf18      	it	ne
 8008272:	42ba      	cmpne	r2, r7
 8008274:	f103 0318 	add.w	r3, r3, #24
 8008278:	bf0c      	ite	eq
 800827a:	2701      	moveq	r7, #1
 800827c:	2700      	movne	r7, #0
 800827e:	429a      	cmp	r2, r3
 8008280:	bf08      	it	eq
 8008282:	f047 0701 	orreq.w	r7, r7, #1
 8008286:	3318      	adds	r3, #24
 8008288:	429a      	cmp	r2, r3
 800828a:	bf08      	it	eq
 800828c:	f047 0701 	orreq.w	r7, r7, #1
 8008290:	3318      	adds	r3, #24
 8008292:	429a      	cmp	r2, r3
 8008294:	bf08      	it	eq
 8008296:	f047 0701 	orreq.w	r7, r7, #1
 800829a:	3318      	adds	r3, #24
 800829c:	429a      	cmp	r2, r3
 800829e:	bf08      	it	eq
 80082a0:	f047 0701 	orreq.w	r7, r7, #1
 80082a4:	3318      	adds	r3, #24
 80082a6:	429a      	cmp	r2, r3
 80082a8:	bf08      	it	eq
 80082aa:	f047 0701 	orreq.w	r7, r7, #1
 80082ae:	3318      	adds	r3, #24
 80082b0:	429a      	cmp	r2, r3
 80082b2:	bf08      	it	eq
 80082b4:	f047 0701 	orreq.w	r7, r7, #1
 80082b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082bc:	429a      	cmp	r2, r3
 80082be:	bf08      	it	eq
 80082c0:	f047 0701 	orreq.w	r7, r7, #1
 80082c4:	3318      	adds	r3, #24
 80082c6:	429a      	cmp	r2, r3
 80082c8:	bf08      	it	eq
 80082ca:	f047 0701 	orreq.w	r7, r7, #1
 80082ce:	3318      	adds	r3, #24
 80082d0:	429a      	cmp	r2, r3
 80082d2:	bf08      	it	eq
 80082d4:	f047 0701 	orreq.w	r7, r7, #1
 80082d8:	3318      	adds	r3, #24
 80082da:	429a      	cmp	r2, r3
 80082dc:	bf08      	it	eq
 80082de:	f047 0701 	orreq.w	r7, r7, #1
 80082e2:	3318      	adds	r3, #24
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bf08      	it	eq
 80082e8:	f047 0701 	orreq.w	r7, r7, #1
 80082ec:	3318      	adds	r3, #24
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf08      	it	eq
 80082f2:	f047 0701 	orreq.w	r7, r7, #1
 80082f6:	3318      	adds	r3, #24
 80082f8:	429a      	cmp	r2, r3
 80082fa:	bf08      	it	eq
 80082fc:	f047 0701 	orreq.w	r7, r7, #1
 8008300:	4613      	mov	r3, r2
 8008302:	2f00      	cmp	r7, #0
 8008304:	f47f adf1 	bne.w	8007eea <HAL_DMA_IRQHandler+0xca>
 8008308:	4f13      	ldr	r7, [pc, #76]	; (8008358 <HAL_DMA_IRQHandler+0x538>)
 800830a:	42ba      	cmp	r2, r7
 800830c:	f43f aded 	beq.w	8007eea <HAL_DMA_IRQHandler+0xca>
 8008310:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008312:	2304      	movs	r3, #4
 8008314:	408b      	lsls	r3, r1
 8008316:	4223      	tst	r3, r4
 8008318:	f040 80ca 	bne.w	80084b0 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800831c:	f04f 0c10 	mov.w	ip, #16
 8008320:	fa0c fc01 	lsl.w	ip, ip, r1
 8008324:	ea14 0f0c 	tst.w	r4, ip
 8008328:	f43f aedc 	beq.w	80080e4 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800832c:	6813      	ldr	r3, [r2, #0]
 800832e:	0759      	lsls	r1, r3, #29
 8008330:	f53f aec0 	bmi.w	80080b4 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008334:	f000 0e1f 	and.w	lr, r0, #31
 8008338:	2120      	movs	r1, #32
 800833a:	fa01 f10e 	lsl.w	r1, r1, lr
 800833e:	420c      	tst	r4, r1
 8008340:	f43f af3f 	beq.w	80081c2 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008344:	4613      	mov	r3, r2
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	0798      	lsls	r0, r3, #30
 800834a:	f57f af3a 	bpl.w	80081c2 <HAL_DMA_IRQHandler+0x3a2>
 800834e:	e723      	b.n	8008198 <HAL_DMA_IRQHandler+0x378>
 8008350:	40020010 	.word	0x40020010
 8008354:	40020028 	.word	0x40020028
 8008358:	400204b8 	.word	0x400204b8
 800835c:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008360:	f8d8 2000 	ldr.w	r2, [r8]
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f023 0316 	bic.w	r3, r3, #22
 800836a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800836c:	f8d8 2000 	ldr.w	r2, [r8]
 8008370:	6953      	ldr	r3, [r2, #20]
 8008372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008376:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008378:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d055      	beq.n	800842c <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008380:	f8d8 2000 	ldr.w	r2, [r8]
 8008384:	6813      	ldr	r3, [r2, #0]
 8008386:	f023 0308 	bic.w	r3, r3, #8
 800838a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800838c:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8008390:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8008392:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008394:	f002 021f 	and.w	r2, r2, #31
 8008398:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 800839a:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800839c:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 800839e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80083a2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80083a6:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f47f af39 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
}
 80083b0:	b002      	add	sp, #8
 80083b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083b6:	2220      	movs	r2, #32
 80083b8:	fa02 f101 	lsl.w	r1, r2, r1
 80083bc:	420c      	tst	r4, r1
 80083be:	f47f aee8 	bne.w	8008192 <HAL_DMA_IRQHandler+0x372>
 80083c2:	e6fe      	b.n	80081c2 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083c4:	f04f 0c04 	mov.w	ip, #4
 80083c8:	fa0c fc01 	lsl.w	ip, ip, r1
 80083cc:	ea14 0f0c 	tst.w	r4, ip
 80083d0:	f43f ae07 	beq.w	8007fe2 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	0797      	lsls	r7, r2, #30
 80083d8:	f53f adf7 	bmi.w	8007fca <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083dc:	f04f 0c10 	mov.w	ip, #16
 80083e0:	fa0c fc01 	lsl.w	ip, ip, r1
 80083e4:	ea14 0f0c 	tst.w	r4, ip
 80083e8:	f47f ae55 	bne.w	8008096 <HAL_DMA_IRQHandler+0x276>
 80083ec:	e67a      	b.n	80080e4 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	f57f ae6e 	bpl.w	80080d2 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80083f6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f ae6c 	bne.w	80080d8 <HAL_DMA_IRQHandler+0x2b8>
 8008400:	e66c      	b.n	80080dc <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8008408:	f47f aed6 	bne.w	80081b8 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	f021 0110 	bic.w	r1, r1, #16
 8008412:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008414:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8008416:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800841a:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800841e:	e6cb      	b.n	80081b8 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 8008420:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f aeca 	bne.w	80081be <HAL_DMA_IRQHandler+0x39e>
 800842a:	e6ca      	b.n	80081c2 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800842c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1a5      	bne.n	8008380 <HAL_DMA_IRQHandler+0x560>
 8008434:	e7aa      	b.n	800838c <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008436:	4aa0      	ldr	r2, [pc, #640]	; (80086b8 <HAL_DMA_IRQHandler+0x898>)
 8008438:	4ca0      	ldr	r4, [pc, #640]	; (80086bc <HAL_DMA_IRQHandler+0x89c>)
 800843a:	42a3      	cmp	r3, r4
 800843c:	bf18      	it	ne
 800843e:	4293      	cmpne	r3, r2
 8008440:	f104 0414 	add.w	r4, r4, #20
 8008444:	bf0c      	ite	eq
 8008446:	2201      	moveq	r2, #1
 8008448:	2200      	movne	r2, #0
 800844a:	42a3      	cmp	r3, r4
 800844c:	bf08      	it	eq
 800844e:	f042 0201 	orreq.w	r2, r2, #1
 8008452:	3414      	adds	r4, #20
 8008454:	42a3      	cmp	r3, r4
 8008456:	bf08      	it	eq
 8008458:	f042 0201 	orreq.w	r2, r2, #1
 800845c:	3414      	adds	r4, #20
 800845e:	42a3      	cmp	r3, r4
 8008460:	bf08      	it	eq
 8008462:	f042 0201 	orreq.w	r2, r2, #1
 8008466:	3414      	adds	r4, #20
 8008468:	42a3      	cmp	r3, r4
 800846a:	bf08      	it	eq
 800846c:	f042 0201 	orreq.w	r2, r2, #1
 8008470:	3414      	adds	r4, #20
 8008472:	42a3      	cmp	r3, r4
 8008474:	bf08      	it	eq
 8008476:	f042 0201 	orreq.w	r2, r2, #1
 800847a:	b912      	cbnz	r2, 8008482 <HAL_DMA_IRQHandler+0x662>
 800847c:	4a90      	ldr	r2, [pc, #576]	; (80086c0 <HAL_DMA_IRQHandler+0x8a0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d196      	bne.n	80083b0 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008482:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8008486:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008488:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800848a:	f004 041f 	and.w	r4, r4, #31
 800848e:	40a6      	lsls	r6, r4
 8008490:	420e      	tst	r6, r1
 8008492:	d019      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x6a8>
 8008494:	0750      	lsls	r0, r2, #29
 8008496:	d517      	bpl.n	80084c8 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008498:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800849a:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800849c:	d549      	bpl.n	8008532 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800849e:	03d2      	lsls	r2, r2, #15
 80084a0:	f100 809f 	bmi.w	80085e2 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084a4:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f47f aeba 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
 80084ae:	e77f      	b.n	80083b0 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084b0:	f000 011f 	and.w	r1, r0, #31
 80084b4:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80084b8:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084ba:	fa0c fc01 	lsl.w	ip, ip, r1
 80084be:	ea14 0f0c 	tst.w	r4, ip
 80084c2:	f47f af33 	bne.w	800832c <HAL_DMA_IRQHandler+0x50c>
 80084c6:	e60d      	b.n	80080e4 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084c8:	2602      	movs	r6, #2
 80084ca:	40a6      	lsls	r6, r4
 80084cc:	420e      	tst	r6, r1
 80084ce:	d00e      	beq.n	80084ee <HAL_DMA_IRQHandler+0x6ce>
 80084d0:	0797      	lsls	r7, r2, #30
 80084d2:	d50c      	bpl.n	80084ee <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084d4:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084d6:	0415      	lsls	r5, r2, #16
 80084d8:	f140 8089 	bpl.w	80085ee <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084dc:	03d4      	lsls	r4, r2, #15
 80084de:	f100 80e4 	bmi.w	80086aa <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 80084e2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f ae9b 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
 80084ec:	e760      	b.n	80083b0 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80084ee:	2608      	movs	r6, #8
 80084f0:	fa06 f404 	lsl.w	r4, r6, r4
 80084f4:	420c      	tst	r4, r1
 80084f6:	f43f af5b 	beq.w	80083b0 <HAL_DMA_IRQHandler+0x590>
 80084fa:	0711      	lsls	r1, r2, #28
 80084fc:	f57f af58 	bpl.w	80083b0 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008500:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008502:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008504:	f021 010e 	bic.w	r1, r1, #14
 8008508:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 800850a:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800850c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 800851a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800851e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8008522:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8008526:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800852a:	2b00      	cmp	r3, #0
 800852c:	f47f ae79 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
 8008530:	e73e      	b.n	80083b0 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008532:	0693      	lsls	r3, r2, #26
 8008534:	d455      	bmi.n	80085e2 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008536:	f8d8 2000 	ldr.w	r2, [r8]
 800853a:	4b62      	ldr	r3, [pc, #392]	; (80086c4 <HAL_DMA_IRQHandler+0x8a4>)
 800853c:	4c62      	ldr	r4, [pc, #392]	; (80086c8 <HAL_DMA_IRQHandler+0x8a8>)
 800853e:	4963      	ldr	r1, [pc, #396]	; (80086cc <HAL_DMA_IRQHandler+0x8ac>)
 8008540:	42a2      	cmp	r2, r4
 8008542:	bf18      	it	ne
 8008544:	429a      	cmpne	r2, r3
 8008546:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800854a:	bf0c      	ite	eq
 800854c:	2301      	moveq	r3, #1
 800854e:	2300      	movne	r3, #0
 8008550:	428a      	cmp	r2, r1
 8008552:	bf08      	it	eq
 8008554:	f043 0301 	orreq.w	r3, r3, #1
 8008558:	3130      	adds	r1, #48	; 0x30
 800855a:	42a2      	cmp	r2, r4
 800855c:	bf08      	it	eq
 800855e:	f043 0301 	orreq.w	r3, r3, #1
 8008562:	3430      	adds	r4, #48	; 0x30
 8008564:	428a      	cmp	r2, r1
 8008566:	bf08      	it	eq
 8008568:	f043 0301 	orreq.w	r3, r3, #1
 800856c:	3130      	adds	r1, #48	; 0x30
 800856e:	42a2      	cmp	r2, r4
 8008570:	bf08      	it	eq
 8008572:	f043 0301 	orreq.w	r3, r3, #1
 8008576:	3430      	adds	r4, #48	; 0x30
 8008578:	428a      	cmp	r2, r1
 800857a:	bf08      	it	eq
 800857c:	f043 0301 	orreq.w	r3, r3, #1
 8008580:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008584:	42a2      	cmp	r2, r4
 8008586:	bf08      	it	eq
 8008588:	f043 0301 	orreq.w	r3, r3, #1
 800858c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008590:	428a      	cmp	r2, r1
 8008592:	bf08      	it	eq
 8008594:	f043 0301 	orreq.w	r3, r3, #1
 8008598:	3130      	adds	r1, #48	; 0x30
 800859a:	42a2      	cmp	r2, r4
 800859c:	bf08      	it	eq
 800859e:	f043 0301 	orreq.w	r3, r3, #1
 80085a2:	3430      	adds	r4, #48	; 0x30
 80085a4:	428a      	cmp	r2, r1
 80085a6:	bf08      	it	eq
 80085a8:	f043 0301 	orreq.w	r3, r3, #1
 80085ac:	3130      	adds	r1, #48	; 0x30
 80085ae:	42a2      	cmp	r2, r4
 80085b0:	bf08      	it	eq
 80085b2:	f043 0301 	orreq.w	r3, r3, #1
 80085b6:	3430      	adds	r4, #48	; 0x30
 80085b8:	428a      	cmp	r2, r1
 80085ba:	bf08      	it	eq
 80085bc:	f043 0301 	orreq.w	r3, r3, #1
 80085c0:	3130      	adds	r1, #48	; 0x30
 80085c2:	42a2      	cmp	r2, r4
 80085c4:	bf08      	it	eq
 80085c6:	f043 0301 	orreq.w	r3, r3, #1
 80085ca:	428a      	cmp	r2, r1
 80085cc:	bf08      	it	eq
 80085ce:	f043 0301 	orreq.w	r3, r3, #1
 80085d2:	b913      	cbnz	r3, 80085da <HAL_DMA_IRQHandler+0x7ba>
 80085d4:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <HAL_DMA_IRQHandler+0x8b0>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d17c      	bne.n	80086d4 <HAL_DMA_IRQHandler+0x8b4>
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	f023 0308 	bic.w	r3, r3, #8
 80085e0:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80085e2:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f47f ae1b 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
 80085ec:	e6e0      	b.n	80083b0 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085ee:	0690      	lsls	r0, r2, #26
 80085f0:	d45b      	bmi.n	80086aa <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085f2:	f8d8 2000 	ldr.w	r2, [r8]
 80085f6:	4b33      	ldr	r3, [pc, #204]	; (80086c4 <HAL_DMA_IRQHandler+0x8a4>)
 80085f8:	4c33      	ldr	r4, [pc, #204]	; (80086c8 <HAL_DMA_IRQHandler+0x8a8>)
 80085fa:	4934      	ldr	r1, [pc, #208]	; (80086cc <HAL_DMA_IRQHandler+0x8ac>)
 80085fc:	42a2      	cmp	r2, r4
 80085fe:	bf18      	it	ne
 8008600:	429a      	cmpne	r2, r3
 8008602:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	428a      	cmp	r2, r1
 800860e:	bf08      	it	eq
 8008610:	f043 0301 	orreq.w	r3, r3, #1
 8008614:	3130      	adds	r1, #48	; 0x30
 8008616:	42a2      	cmp	r2, r4
 8008618:	bf08      	it	eq
 800861a:	f043 0301 	orreq.w	r3, r3, #1
 800861e:	3430      	adds	r4, #48	; 0x30
 8008620:	428a      	cmp	r2, r1
 8008622:	bf08      	it	eq
 8008624:	f043 0301 	orreq.w	r3, r3, #1
 8008628:	3130      	adds	r1, #48	; 0x30
 800862a:	42a2      	cmp	r2, r4
 800862c:	bf08      	it	eq
 800862e:	f043 0301 	orreq.w	r3, r3, #1
 8008632:	3430      	adds	r4, #48	; 0x30
 8008634:	428a      	cmp	r2, r1
 8008636:	bf08      	it	eq
 8008638:	f043 0301 	orreq.w	r3, r3, #1
 800863c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008640:	42a2      	cmp	r2, r4
 8008642:	bf08      	it	eq
 8008644:	f043 0301 	orreq.w	r3, r3, #1
 8008648:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800864c:	428a      	cmp	r2, r1
 800864e:	bf08      	it	eq
 8008650:	f043 0301 	orreq.w	r3, r3, #1
 8008654:	3130      	adds	r1, #48	; 0x30
 8008656:	42a2      	cmp	r2, r4
 8008658:	bf08      	it	eq
 800865a:	f043 0301 	orreq.w	r3, r3, #1
 800865e:	3430      	adds	r4, #48	; 0x30
 8008660:	428a      	cmp	r2, r1
 8008662:	bf08      	it	eq
 8008664:	f043 0301 	orreq.w	r3, r3, #1
 8008668:	3130      	adds	r1, #48	; 0x30
 800866a:	42a2      	cmp	r2, r4
 800866c:	bf08      	it	eq
 800866e:	f043 0301 	orreq.w	r3, r3, #1
 8008672:	3430      	adds	r4, #48	; 0x30
 8008674:	428a      	cmp	r2, r1
 8008676:	bf08      	it	eq
 8008678:	f043 0301 	orreq.w	r3, r3, #1
 800867c:	3130      	adds	r1, #48	; 0x30
 800867e:	42a2      	cmp	r2, r4
 8008680:	bf08      	it	eq
 8008682:	f043 0301 	orreq.w	r3, r3, #1
 8008686:	428a      	cmp	r2, r1
 8008688:	bf08      	it	eq
 800868a:	f043 0301 	orreq.w	r3, r3, #1
 800868e:	b913      	cbnz	r3, 8008696 <HAL_DMA_IRQHandler+0x876>
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <HAL_DMA_IRQHandler+0x8b0>)
 8008692:	429a      	cmp	r2, r3
 8008694:	d123      	bne.n	80086de <HAL_DMA_IRQHandler+0x8be>
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	f023 0314 	bic.w	r3, r3, #20
 800869c:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800869e:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 80086a0:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 80086a2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80086a6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80086aa:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f adb7 	bne.w	8008222 <HAL_DMA_IRQHandler+0x402>
 80086b4:	e67c      	b.n	80083b0 <HAL_DMA_IRQHandler+0x590>
 80086b6:	bf00      	nop
 80086b8:	58025408 	.word	0x58025408
 80086bc:	5802541c 	.word	0x5802541c
 80086c0:	58025494 	.word	0x58025494
 80086c4:	40020010 	.word	0x40020010
 80086c8:	40020028 	.word	0x40020028
 80086cc:	40020040 	.word	0x40020040
 80086d0:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80086d4:	6813      	ldr	r3, [r2, #0]
 80086d6:	f023 0304 	bic.w	r3, r3, #4
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e781      	b.n	80085e2 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	f023 030a 	bic.w	r3, r3, #10
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e7da      	b.n	800869e <HAL_DMA_IRQHandler+0x87e>

080086e8 <HAL_DMA_GetState>:
  return hdma->State;
 80086e8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80086f0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80086f2:	4770      	bx	lr

080086f4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086f4:	680b      	ldr	r3, [r1, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 811a 	beq.w	8008930 <HAL_GPIO_Init+0x23c>
 80086fc:	f04f 0c00 	mov.w	ip, #0
{
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008704:	4662      	mov	r2, ip
{
 8008706:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008708:	4d94      	ldr	r5, [pc, #592]	; (800895c <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800870a:	4f95      	ldr	r7, [pc, #596]	; (8008960 <HAL_GPIO_Init+0x26c>)
 800870c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8008978 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008710:	f04f 0901 	mov.w	r9, #1
 8008714:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8008718:	ea19 0e03 	ands.w	lr, r9, r3
 800871c:	f000 80c2 	beq.w	80088a4 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008720:	684b      	ldr	r3, [r1, #4]
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	1e5c      	subs	r4, r3, #1
 8008728:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800872a:	f04f 0403 	mov.w	r4, #3
 800872e:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008732:	f240 80c1 	bls.w	80088b8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008736:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008738:	2b03      	cmp	r3, #3
 800873a:	d026      	beq.n	800878a <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 800873c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800873e:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008742:	688b      	ldr	r3, [r1, #8]
 8008744:	fa03 f30c 	lsl.w	r3, r3, ip
 8008748:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800874c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800874e:	684b      	ldr	r3, [r1, #4]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d118      	bne.n	800878a <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008758:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 800875c:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008760:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8008764:	230f      	movs	r3, #15
 8008766:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800876a:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 800876e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008772:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	fa03 f30b 	lsl.w	r3, r3, fp
 800877c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008780:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008784:	684b      	ldr	r3, [r1, #4]
 8008786:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 800878a:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800878e:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008792:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008796:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8008798:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800879a:	684b      	ldr	r3, [r1, #4]
 800879c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80087a0:	d07f      	beq.n	80088a2 <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80087a6:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087aa:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087ae:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087b0:	f043 0302 	orr.w	r3, r3, #2
 80087b4:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087b8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087bc:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80087c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80087c4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087d0:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80087d4:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087d8:	fa03 f309 	lsl.w	r3, r3, r9
 80087dc:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087e0:	d02b      	beq.n	800883a <HAL_GPIO_Init+0x146>
 80087e2:	4540      	cmp	r0, r8
 80087e4:	f000 8088 	beq.w	80088f8 <HAL_GPIO_Init+0x204>
 80087e8:	4e5e      	ldr	r6, [pc, #376]	; (8008964 <HAL_GPIO_Init+0x270>)
 80087ea:	42b0      	cmp	r0, r6
 80087ec:	f000 808b 	beq.w	8008906 <HAL_GPIO_Init+0x212>
 80087f0:	4e5d      	ldr	r6, [pc, #372]	; (8008968 <HAL_GPIO_Init+0x274>)
 80087f2:	42b0      	cmp	r0, r6
 80087f4:	d079      	beq.n	80088ea <HAL_GPIO_Init+0x1f6>
 80087f6:	4e5d      	ldr	r6, [pc, #372]	; (800896c <HAL_GPIO_Init+0x278>)
 80087f8:	42b0      	cmp	r0, r6
 80087fa:	f000 8092 	beq.w	8008922 <HAL_GPIO_Init+0x22e>
 80087fe:	4e5c      	ldr	r6, [pc, #368]	; (8008970 <HAL_GPIO_Init+0x27c>)
 8008800:	42b0      	cmp	r0, r6
 8008802:	f000 8096 	beq.w	8008932 <HAL_GPIO_Init+0x23e>
 8008806:	4e5b      	ldr	r6, [pc, #364]	; (8008974 <HAL_GPIO_Init+0x280>)
 8008808:	42b0      	cmp	r0, r6
 800880a:	f000 8083 	beq.w	8008914 <HAL_GPIO_Init+0x220>
 800880e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800897c <HAL_GPIO_Init+0x288>
 8008812:	4550      	cmp	r0, sl
 8008814:	f000 8094 	beq.w	8008940 <HAL_GPIO_Init+0x24c>
 8008818:	f8df a164 	ldr.w	sl, [pc, #356]	; 8008980 <HAL_GPIO_Init+0x28c>
 800881c:	4550      	cmp	r0, sl
 800881e:	f000 8096 	beq.w	800894e <HAL_GPIO_Init+0x25a>
 8008822:	f8df a160 	ldr.w	sl, [pc, #352]	; 8008984 <HAL_GPIO_Init+0x290>
 8008826:	4550      	cmp	r0, sl
 8008828:	bf0c      	ite	eq
 800882a:	f04f 0a09 	moveq.w	sl, #9
 800882e:	f04f 0a0a 	movne.w	sl, #10
 8008832:	fa0a f909 	lsl.w	r9, sl, r9
 8008836:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800883a:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800883c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008840:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8008842:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8008846:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008848:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800884c:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 800884e:	bf54      	ite	pl
 8008850:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8008852:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8008856:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800885a:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 800885c:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008860:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008864:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8008866:	bf54      	ite	pl
 8008868:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800886a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 800886e:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008872:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8008874:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008878:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800887c:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 800887e:	bf54      	ite	pl
 8008880:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8008882:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 8008886:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800888a:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 800888c:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008890:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8008892:	bf54      	ite	pl
 8008894:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8008896:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800889a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800889e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088a2:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80088a4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088a6:	f10c 0c02 	add.w	ip, ip, #2
 80088aa:	fa33 f402 	lsrs.w	r4, r3, r2
 80088ae:	f47f af2f 	bne.w	8008710 <HAL_GPIO_Init+0x1c>
  }
}
 80088b2:	b003      	add	sp, #12
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80088b8:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088ba:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088be:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088c0:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80088c6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80088ca:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088cc:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80088ce:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80088d6:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088da:	4093      	lsls	r3, r2
 80088dc:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 80088e0:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088e2:	684b      	ldr	r3, [r1, #4]
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	e726      	b.n	8008738 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80088ea:	f04f 0a03 	mov.w	sl, #3
 80088ee:	fa0a f909 	lsl.w	r9, sl, r9
 80088f2:	ea43 0309 	orr.w	r3, r3, r9
 80088f6:	e7a0      	b.n	800883a <HAL_GPIO_Init+0x146>
 80088f8:	f04f 0a01 	mov.w	sl, #1
 80088fc:	fa0a f909 	lsl.w	r9, sl, r9
 8008900:	ea43 0309 	orr.w	r3, r3, r9
 8008904:	e799      	b.n	800883a <HAL_GPIO_Init+0x146>
 8008906:	f04f 0a02 	mov.w	sl, #2
 800890a:	fa0a f909 	lsl.w	r9, sl, r9
 800890e:	ea43 0309 	orr.w	r3, r3, r9
 8008912:	e792      	b.n	800883a <HAL_GPIO_Init+0x146>
 8008914:	f04f 0a06 	mov.w	sl, #6
 8008918:	fa0a f909 	lsl.w	r9, sl, r9
 800891c:	ea43 0309 	orr.w	r3, r3, r9
 8008920:	e78b      	b.n	800883a <HAL_GPIO_Init+0x146>
 8008922:	f04f 0a04 	mov.w	sl, #4
 8008926:	fa0a f909 	lsl.w	r9, sl, r9
 800892a:	ea43 0309 	orr.w	r3, r3, r9
 800892e:	e784      	b.n	800883a <HAL_GPIO_Init+0x146>
 8008930:	4770      	bx	lr
 8008932:	f04f 0a05 	mov.w	sl, #5
 8008936:	fa0a f909 	lsl.w	r9, sl, r9
 800893a:	ea43 0309 	orr.w	r3, r3, r9
 800893e:	e77c      	b.n	800883a <HAL_GPIO_Init+0x146>
 8008940:	f04f 0a07 	mov.w	sl, #7
 8008944:	fa0a f909 	lsl.w	r9, sl, r9
 8008948:	ea43 0309 	orr.w	r3, r3, r9
 800894c:	e775      	b.n	800883a <HAL_GPIO_Init+0x146>
 800894e:	f04f 0a08 	mov.w	sl, #8
 8008952:	fa0a f909 	lsl.w	r9, sl, r9
 8008956:	ea43 0309 	orr.w	r3, r3, r9
 800895a:	e76e      	b.n	800883a <HAL_GPIO_Init+0x146>
 800895c:	58024400 	.word	0x58024400
 8008960:	58020000 	.word	0x58020000
 8008964:	58020800 	.word	0x58020800
 8008968:	58020c00 	.word	0x58020c00
 800896c:	58021000 	.word	0x58021000
 8008970:	58021400 	.word	0x58021400
 8008974:	58021800 	.word	0x58021800
 8008978:	58020400 	.word	0x58020400
 800897c:	58021c00 	.word	0x58021c00
 8008980:	58022000 	.word	0x58022000
 8008984:	58022400 	.word	0x58022400

08008988 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008988:	6903      	ldr	r3, [r0, #16]
 800898a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800898c:	bf14      	ite	ne
 800898e:	2001      	movne	r0, #1
 8008990:	2000      	moveq	r0, #0
 8008992:	4770      	bx	lr

08008994 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008994:	b902      	cbnz	r2, 8008998 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008996:	0409      	lsls	r1, r1, #16
 8008998:	6181      	str	r1, [r0, #24]
  }
}
 800899a:	4770      	bx	lr

0800899c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800899c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800899e:	ea01 0203 	and.w	r2, r1, r3
 80089a2:	ea21 0103 	bic.w	r1, r1, r3
 80089a6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089aa:	6181      	str	r1, [r0, #24]
}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop

080089b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b4:	6803      	ldr	r3, [r0, #0]
{
 80089b6:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	0694      	lsls	r4, r2, #26
 80089bc:	d46d      	bmi.n	8008a9a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 80089be:	4605      	mov	r5, r0
 80089c0:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089c2:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80089c6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089c8:	f014 0410 	ands.w	r4, r4, #16
 80089cc:	d068      	beq.n	8008aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 80089ce:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d0:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 80089d4:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089d6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089d8:	46b2      	mov	sl, r6
 80089da:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	d161      	bne.n	8008aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 80089e0:	0690      	lsls	r0, r2, #26
 80089e2:	f100 8085 	bmi.w	8008af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80089e6:	f1ba 0f00 	cmp.w	sl, #0
 80089ea:	d105      	bne.n	80089f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 80089ec:	699c      	ldr	r4, [r3, #24]
 80089ee:	06a1      	lsls	r1, r4, #26
 80089f0:	d5fc      	bpl.n	80089ec <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089f2:	2220      	movs	r2, #32
 80089f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80089f6:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 80089f8:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 80089fc:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 80089fe:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a00:	05d0      	lsls	r0, r2, #23
 8008a02:	d535      	bpl.n	8008a70 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a04:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a08:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8008a0a:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a0e:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a10:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a12:	d505      	bpl.n	8008a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008a18:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a1c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a1e:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a20:	0597      	lsls	r7, r2, #22
 8008a22:	d505      	bpl.n	8008a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a24:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a28:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a2c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	0790      	lsls	r0, r2, #30
 8008a34:	d502      	bpl.n	8008a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 8008a36:	2200      	movs	r2, #0
 8008a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	07d1      	lsls	r1, r2, #31
 8008a40:	d404      	bmi.n	8008a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	f042 0201 	orr.w	r2, r2, #1
 8008a48:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8008a50:	4835      	ldr	r0, [pc, #212]	; (8008b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 8008a52:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8008a54:	4002      	ands	r2, r0
      return HAL_ERROR;
 8008a56:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008a58:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8008a5a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a5c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8008a60:	431c      	orrs	r4, r3
 8008a62:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a64:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a68:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8008a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a70:	0550      	lsls	r0, r2, #21
 8008a72:	d4cf      	bmi.n	8008a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a74:	0596      	lsls	r6, r2, #22
 8008a76:	d4d5      	bmi.n	8008a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d1d9      	bne.n	8008a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7c:	f7fe f9ac 	bl	8006dd8 <HAL_GetTick>
 8008a80:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a84:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a86:	42b8      	cmp	r0, r7
 8008a88:	d800      	bhi.n	8008a8c <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 8008a8a:	b91f      	cbnz	r7, 8008a94 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	f012 0220 	ands.w	r2, r2, #32
 8008a92:	d032      	beq.n	8008afa <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	0692      	lsls	r2, r2, #26
 8008a98:	d595      	bpl.n	80089c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8008a9a:	2000      	movs	r0, #0
}
 8008a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	e7ac      	b.n	80089fe <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d423      	bmi.n	8008af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 8008aa8:	f1ba 0f00 	cmp.w	sl, #0
 8008aac:	d1a4      	bne.n	80089f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008aae:	f7fe f993 	bl	8006dd8 <HAL_GetTick>
 8008ab2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ab4:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ab6:	4287      	cmp	r7, r0
 8008ab8:	d301      	bcc.n	8008abe <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d18d      	bne.n	80089da <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008abe:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8008ac0:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ac4:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8008ac6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ac8:	0409      	lsls	r1, r1, #16
 8008aca:	d503      	bpl.n	8008ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 8008acc:	0441      	lsls	r1, r0, #17
 8008ace:	d401      	bmi.n	8008ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8008ad0:	2a20      	cmp	r2, #32
 8008ad2:	d11f      	bne.n	8008b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	0690      	lsls	r0, r2, #26
 8008ad8:	f53f af7f 	bmi.w	80089da <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008adc:	f7fe f97c 	bl	8006dd8 <HAL_GetTick>
 8008ae0:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ae2:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008ae4:	2819      	cmp	r0, #25
 8008ae6:	d9f5      	bls.n	8008ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ae8:	2620      	movs	r6, #32
              status = HAL_ERROR;
 8008aea:	f04f 0a01 	mov.w	sl, #1
 8008aee:	e774      	b.n	80089da <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8008af0:	f1ba 0f00 	cmp.w	sl, #0
 8008af4:	f43f af7d 	beq.w	80089f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8008af8:	e77e      	b.n	80089f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008afa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008afc:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8008afe:	2001      	movs	r0, #1
 8008b00:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b04:	430b      	orrs	r3, r1
 8008b06:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b08:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b0c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008b1c:	f7fe f95c 	bl	8006dd8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b20:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8008b22:	4604      	mov	r4, r0
 8008b24:	e7d6      	b.n	8008ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8008b26:	bf00      	nop
 8008b28:	fe00e800 	.word	0xfe00e800

08008b2c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d056      	beq.n	8008bde <HAL_I2C_Init+0xb2>
{
 8008b30:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008b36:	4604      	mov	r4, r0
 8008b38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d049      	beq.n	8008bd4 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8008b40:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b42:	2324      	movs	r3, #36	; 0x24
 8008b44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008b48:	6813      	ldr	r3, [r2, #0]
 8008b4a:	f023 0301 	bic.w	r3, r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b50:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b54:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008b58:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	6893      	ldr	r3, [r2, #8]
 8008b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b62:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b64:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b66:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b68:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	bf0c      	ite	eq
 8008b6e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b72:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8008b76:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b78:	68e3      	ldr	r3, [r4, #12]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d103      	bne.n	8008b86 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b84:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b86:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008b88:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b8c:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <HAL_I2C_Init+0xb8>)
 8008b8e:	6851      	ldr	r1, [r2, #4]
 8008b90:	430b      	orrs	r3, r1
 8008b92:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	68d3      	ldr	r3, [r2, #12]
 8008b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b9c:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b9e:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008ba6:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ba8:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008baa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008bae:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008bb0:	6821      	ldr	r1, [r4, #0]
 8008bb2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008bb6:	4303      	orrs	r3, r0
  return HAL_OK;
 8008bb8:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008bba:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	680b      	ldr	r3, [r1, #0]
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bc6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bcc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bce:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8008bd2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008bd4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008bd8:	f7fb f95e 	bl	8003e98 <HAL_I2C_MspInit>
 8008bdc:	e7b0      	b.n	8008b40 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8008bde:	2001      	movs	r0, #1
}
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	02008000 	.word	0x02008000

08008be8 <HAL_I2C_Master_Transmit>:
{
 8008be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8008bf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d12c      	bne.n	8008c52 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 8008bf8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008bfc:	4683      	mov	fp, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d027      	beq.n	8008c52 <HAL_I2C_Master_Transmit+0x6a>
 8008c02:	2301      	movs	r3, #1
 8008c04:	468a      	mov	sl, r1
 8008c06:	4616      	mov	r6, r2
 8008c08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008c0c:	f7fe f8e4 	bl	8006dd8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c10:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8008c14:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	0417      	lsls	r7, r2, #16
 8008c1a:	d51d      	bpl.n	8008c58 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1c:	f7fe f8dc 	bl	8006dd8 <HAL_GetTick>
 8008c20:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c24:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c28:	2819      	cmp	r0, #25
 8008c2a:	d9f4      	bls.n	8008c16 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	0410      	lsls	r0, r2, #16
 8008c30:	d5f1      	bpl.n	8008c16 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c32:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c36:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c38:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008c3a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c3c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8008c3e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c42:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c46:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8008c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8008c52:	2002      	movs	r0, #2
}
 8008c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c58:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c5a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8008c5c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c60:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008c64:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 8008c66:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008c6a:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c6e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 8008c72:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c76:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8008c7a:	b292      	uxth	r2, r2
 8008c7c:	2aff      	cmp	r2, #255	; 0xff
 8008c7e:	d87e      	bhi.n	8008d7e <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8008c80:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c84:	48ad      	ldr	r0, [pc, #692]	; (8008f3c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 8008c86:	b292      	uxth	r2, r2
 8008c88:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c8c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c8e:	6859      	ldr	r1, [r3, #4]
 8008c90:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c92:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8008c96:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c9a:	4301      	orrs	r1, r0
 8008c9c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008ca0:	49a7      	ldr	r1, [pc, #668]	; (8008f40 <HAL_I2C_Master_Transmit+0x358>)
 8008ca2:	4311      	orrs	r1, r2
 8008ca4:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ca6:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 8008caa:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8107 	beq.w	8008ec4 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cb6:	f8db 3000 	ldr.w	r3, [fp]
 8008cba:	699c      	ldr	r4, [r3, #24]
 8008cbc:	f014 0402 	ands.w	r4, r4, #2
 8008cc0:	f040 80c5 	bne.w	8008e4e <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 8008cc4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008cc6:	f012 0210 	ands.w	r2, r2, #16
 8008cca:	f000 808d 	beq.w	8008de8 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cce:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8008cd0:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 8008cd2:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cd6:	f8db 3000 	ldr.w	r3, [fp]
 8008cda:	1c69      	adds	r1, r5, #1
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	f040 8085 	bne.w	8008dec <HAL_I2C_Master_Transmit+0x204>
 8008ce2:	0690      	lsls	r0, r2, #26
 8008ce4:	f100 8106 	bmi.w	8008ef4 <HAL_I2C_Master_Transmit+0x30c>
 8008ce8:	b937      	cbnz	r7, 8008cf8 <HAL_I2C_Master_Transmit+0x110>
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	0691      	lsls	r1, r2, #26
 8008cee:	d5fc      	bpl.n	8008cea <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cf0:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8008cf4:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 8008cf8:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8008cfc:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008cfe:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d00:	05ce      	lsls	r6, r1, #23
 8008d02:	d54b      	bpl.n	8008d9c <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d04:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d08:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d0e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d10:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d14:	d506      	bpl.n	8008d24 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d16:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008d1a:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d1e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d20:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d24:	0589      	lsls	r1, r1, #22
 8008d26:	d506      	bpl.n	8008d36 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d28:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d2c:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d30:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d32:	f8db 3000 	ldr.w	r3, [fp]
 8008d36:	6999      	ldr	r1, [r3, #24]
 8008d38:	078e      	lsls	r6, r1, #30
 8008d3a:	d503      	bpl.n	8008d44 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d40:	f8db 3000 	ldr.w	r3, [fp]
 8008d44:	6999      	ldr	r1, [r3, #24]
 8008d46:	07cd      	lsls	r5, r1, #31
 8008d48:	d405      	bmi.n	8008d56 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d4a:	6999      	ldr	r1, [r3, #24]
 8008d4c:	f041 0101 	orr.w	r1, r1, #1
 8008d50:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8008d52:	f8db 3000 	ldr.w	r3, [fp]
 8008d56:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d58:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 8008d5a:	487a      	ldr	r0, [pc, #488]	; (8008f44 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8008d5c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8008d5e:	4001      	ands	r1, r0
        return HAL_ERROR;
 8008d60:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008d62:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8008d64:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8008d68:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d72:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d76:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8008d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d7e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d80:	496e      	ldr	r1, [pc, #440]	; (8008f3c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d82:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d8a:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8008d8e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d92:	4311      	orrs	r1, r2
 8008d94:	4a6c      	ldr	r2, [pc, #432]	; (8008f48 <HAL_I2C_Master_Transmit+0x360>)
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d9a:	e784      	b.n	8008ca6 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d9c:	054c      	lsls	r4, r1, #21
 8008d9e:	d4ba      	bmi.n	8008d16 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008da0:	058f      	lsls	r7, r1, #22
 8008da2:	d4c1      	bmi.n	8008d28 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1c6      	bne.n	8008d36 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 8008da8:	1c6a      	adds	r2, r5, #1
 8008daa:	d086      	beq.n	8008cba <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dac:	f7fe f814 	bl	8006dd8 <HAL_GetTick>
 8008db0:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008db4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db8:	4285      	cmp	r5, r0
 8008dba:	d302      	bcc.n	8008dc2 <HAL_I2C_Master_Transmit+0x1da>
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	f47f af7c 	bne.w	8008cba <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008dc2:	699a      	ldr	r2, [r3, #24]
 8008dc4:	f012 0202 	ands.w	r2, r2, #2
 8008dc8:	f47f af77 	bne.w	8008cba <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dcc:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	2120      	movs	r1, #32
        return HAL_ERROR;
 8008dd2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8008dd4:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008dde:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de2:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 8008de6:	e735      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8008de8:	4610      	mov	r0, r2
 8008dea:	e788      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dec:	0692      	lsls	r2, r2, #26
 8008dee:	f100 8081 	bmi.w	8008ef4 <HAL_I2C_Master_Transmit+0x30c>
 8008df2:	2f00      	cmp	r7, #0
 8008df4:	d180      	bne.n	8008cf8 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008df6:	f7fd ffef 	bl	8006dd8 <HAL_GetTick>
 8008dfa:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008dfc:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e00:	4285      	cmp	r5, r0
 8008e02:	d302      	bcc.n	8008e0a <HAL_I2C_Master_Transmit+0x222>
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	f47f af68 	bne.w	8008cda <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e0a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8008e0c:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e10:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8008e12:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e14:	0409      	lsls	r1, r1, #16
 8008e16:	d50c      	bpl.n	8008e32 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 8008e18:	0441      	lsls	r1, r0, #17
 8008e1a:	d40a      	bmi.n	8008e32 <HAL_I2C_Master_Transmit+0x24a>
 8008e1c:	2a20      	cmp	r2, #32
 8008e1e:	d008      	beq.n	8008e32 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e26:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008e28:	f7fd ffd6 	bl	8006dd8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e2c:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8008e30:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	0690      	lsls	r0, r2, #26
 8008e36:	f53f af50 	bmi.w	8008cda <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e3a:	f7fd ffcd 	bl	8006dd8 <HAL_GetTick>
 8008e3e:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e40:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e44:	2819      	cmp	r0, #25
 8008e46:	d9f4      	bls.n	8008e32 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e48:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8008e4a:	2701      	movs	r7, #1
 8008e4c:	e745      	b.n	8008cda <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e4e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e56:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 8008e5a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8008e5e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008e60:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8008e64:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8008e66:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008e68:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8008e6a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008e6c:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e70:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008e74:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e78:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8008e7a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	f43f af13 	beq.w	8008caa <HAL_I2C_Master_Transmit+0xc2>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f47f af10 	bne.w	8008caa <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e8a:	f8db 2000 	ldr.w	r2, [fp]
 8008e8e:	1c6c      	adds	r4, r5, #1
 8008e90:	d134      	bne.n	8008efc <HAL_I2C_Master_Transmit+0x314>
 8008e92:	6993      	ldr	r3, [r2, #24]
 8008e94:	0618      	lsls	r0, r3, #24
 8008e96:	d5fc      	bpl.n	8008e92 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e98:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2bff      	cmp	r3, #255	; 0xff
 8008ea0:	d958      	bls.n	8008f54 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ea4:	4929      	ldr	r1, [pc, #164]	; (8008f4c <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eaa:	6853      	ldr	r3, [r2, #4]
 8008eac:	400b      	ands	r3, r1
 8008eae:	4928      	ldr	r1, [pc, #160]	; (8008f50 <HAL_I2C_Master_Transmit+0x368>)
 8008eb0:	ea4a 0303 	orr.w	r3, sl, r3
 8008eb4:	4319      	orrs	r1, r3
 8008eb6:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 8008eb8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f47f aef9 	bne.w	8008cb6 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4658      	mov	r0, fp
 8008eca:	f7ff fd71 	bl	80089b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d151      	bne.n	8008f76 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed2:	f8db 3000 	ldr.w	r3, [fp]
 8008ed6:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8008ed8:	4c1a      	ldr	r4, [pc, #104]	; (8008f44 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eda:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008edc:	f8db 1000 	ldr.w	r1, [fp]
 8008ee0:	684b      	ldr	r3, [r1, #4]
 8008ee2:	4023      	ands	r3, r4
 8008ee4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee6:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008eea:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008eee:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8008ef2:	e6af      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	f43f aefb 	beq.w	8008cf0 <HAL_I2C_Master_Transmit+0x108>
 8008efa:	e6fd      	b.n	8008cf8 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008efc:	6993      	ldr	r3, [r2, #24]
 8008efe:	0619      	lsls	r1, r3, #24
 8008f00:	d4ca      	bmi.n	8008e98 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f02:	f7fd ff69 	bl	8006dd8 <HAL_GetTick>
 8008f06:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008f0a:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0e:	4285      	cmp	r5, r0
 8008f10:	d301      	bcc.n	8008f16 <HAL_I2C_Master_Transmit+0x32e>
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	d1bb      	bne.n	8008e8e <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008f16:	6993      	ldr	r3, [r2, #24]
 8008f18:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8008f1c:	d1b7      	bne.n	8008e8e <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f1e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f22:	2120      	movs	r1, #32
          return HAL_ERROR;
 8008f24:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8008f26:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f30:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f34:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 8008f38:	e68c      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x6c>
 8008f3a:	bf00      	nop
 8008f3c:	fc009800 	.word	0xfc009800
 8008f40:	02002000 	.word	0x02002000
 8008f44:	fe00e800 	.word	0xfe00e800
 8008f48:	01ff2000 	.word	0x01ff2000
 8008f4c:	fc009c00 	.word	0xfc009c00
 8008f50:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 8008f54:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f58:	4808      	ldr	r0, [pc, #32]	; (8008f7c <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 8008f5a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f5c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8008f5e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f62:	6853      	ldr	r3, [r2, #4]
 8008f64:	4003      	ands	r3, r0
 8008f66:	ea4a 0303 	orr.w	r3, sl, r3
 8008f6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008f6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f72:	6053      	str	r3, [r2, #4]
}
 8008f74:	e699      	b.n	8008caa <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 8008f76:	2001      	movs	r0, #1
 8008f78:	e66c      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x6c>
 8008f7a:	bf00      	nop
 8008f7c:	fc009c00 	.word	0xfc009c00

08008f80 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f80:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8008f82:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f84:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f86:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8008f88:	b103      	cbz	r3, 8008f8c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8008f8a:	4718      	bx	r3
}
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop

08008f90 <HAL_I2C_SlaveTxCpltCallback>:
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop

08008f94 <HAL_I2C_SlaveRxCpltCallback>:
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop

08008f98 <I2C_ITSlaveSeqCplt>:
{
 8008f98:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f9a:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9c:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f9e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008fa4:	0451      	lsls	r1, r2, #17
 8008fa6:	d50c      	bpl.n	8008fc2 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fae:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008fb0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008fb4:	2b29      	cmp	r3, #41	; 0x29
 8008fb6:	d00e      	beq.n	8008fd6 <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008fb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008fbe:	d024      	beq.n	800900a <I2C_ITSlaveSeqCplt+0x72>
}
 8008fc0:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008fc2:	0412      	lsls	r2, r2, #16
 8008fc4:	d5f4      	bpl.n	8008fb0 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fcc:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008fce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008fd2:	2b29      	cmp	r3, #41	; 0x29
 8008fd4:	d1f0      	bne.n	8008fb8 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fd6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fd8:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fda:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8008fdc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fe0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fe4:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fe6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fea:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fec:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008ff0:	2a28      	cmp	r2, #40	; 0x28
 8008ff2:	bf0c      	ite	eq
 8008ff4:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8008ff8:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8009000:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009004:	f7ff ffc4 	bl	8008f90 <HAL_I2C_SlaveTxCpltCallback>
}
 8009008:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800900a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800900c:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800900e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8009010:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009014:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009018:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800901a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800901e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009020:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8009024:	2a28      	cmp	r2, #40	; 0x28
 8009026:	bf0c      	ite	eq
 8009028:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800902c:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009030:	4013      	ands	r3, r2
 8009032:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8009034:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009038:	f7ff ffac 	bl	8008f94 <HAL_I2C_SlaveRxCpltCallback>
}
 800903c:	bd08      	pop	{r3, pc}
 800903e:	bf00      	nop

08009040 <HAL_I2C_AddrCallback>:
}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop

08009044 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8009044:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8009046:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8009048:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800904a:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800904c:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800904e:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009050:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009052:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8009054:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009058:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800905c:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800905e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009062:	d10f      	bne.n	8009084 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009064:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009068:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800906c:	f013 0306 	ands.w	r3, r3, #6
 8009070:	d106      	bne.n	8009080 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8009072:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8009074:	3501      	adds	r5, #1
 8009076:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009078:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800907a:	2d02      	cmp	r5, #2
 800907c:	d00c      	beq.n	8009098 <I2C_ITAddrCplt.part.0+0x54>
}
 800907e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009080:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800908a:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800908c:	2300      	movs	r3, #0
 800908e:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009092:	f7ff ffd5 	bl	8009040 <HAL_I2C_AddrCallback>
}
 8009096:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009098:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800909a:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800909c:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800909e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80090a2:	f7ff ffcd 	bl	8009040 <HAL_I2C_AddrCallback>
}
 80090a6:	bd70      	pop	{r4, r5, r6, pc}

080090a8 <HAL_I2C_ListenCpltCallback>:
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop

080090ac <HAL_I2C_ErrorCallback>:
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <HAL_I2C_AbortCpltCallback>:
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop

080090b4 <I2C_DMAAbort>:
{
 80090b4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 80090b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090ba:	b10b      	cbz	r3, 80090c0 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80090bc:	2200      	movs	r2, #0
 80090be:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80090c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80090c2:	b10b      	cbz	r3, 80090c8 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80090c4:	2200      	movs	r2, #0
 80090c6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80090c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80090cc:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ce:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80090d2:	d005      	beq.n	80090e0 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80090d4:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80090d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80090da:	f7ff ffe7 	bl	80090ac <HAL_I2C_ErrorCallback>
}
 80090de:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80090e0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80090e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80090e6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ea:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80090ec:	f7ff ffe0 	bl	80090b0 <HAL_I2C_AbortCpltCallback>
}
 80090f0:	bd08      	pop	{r3, pc}
 80090f2:	bf00      	nop

080090f4 <I2C_ITError>:
{
 80090f4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80090f6:	4a5d      	ldr	r2, [pc, #372]	; (800926c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090f8:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80090fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80090fe:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009100:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009104:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009106:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009108:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800910a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800910c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800910e:	ea41 0102 	orr.w	r1, r1, r2
 8009112:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009114:	d874      	bhi.n	8009200 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009116:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800911a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800911e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009122:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009124:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009128:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800912a:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800912c:	bf14      	ite	ne
 800912e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8009132:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009136:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009138:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800913c:	bf18      	it	ne
 800913e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009142:	4013      	ands	r3, r2
 8009144:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009146:	4b4a      	ldr	r3, [pc, #296]	; (8009270 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009148:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800914c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800914e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8009150:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009152:	b118      	cbz	r0, 800915c <I2C_ITError+0x68>
 8009154:	2b11      	cmp	r3, #17
 8009156:	d01e      	beq.n	8009196 <I2C_ITError+0xa2>
 8009158:	2b21      	cmp	r3, #33	; 0x21
 800915a:	d01c      	beq.n	8009196 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800915c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800915e:	b118      	cbz	r0, 8009168 <I2C_ITError+0x74>
 8009160:	2b12      	cmp	r3, #18
 8009162:	d030      	beq.n	80091c6 <I2C_ITError+0xd2>
 8009164:	2b22      	cmp	r3, #34	; 0x22
 8009166:	d02e      	beq.n	80091c6 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009168:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800916c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800916e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009172:	d006      	beq.n	8009182 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8009174:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8009176:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009178:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800917c:	f7ff ff96 	bl	80090ac <HAL_I2C_ErrorCallback>
}
 8009180:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8009182:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8009184:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8009186:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800918a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800918e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8009190:	f7ff ff8e 	bl	80090b0 <HAL_I2C_AbortCpltCallback>
}
 8009194:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	0451      	lsls	r1, r2, #17
 800919c:	d460      	bmi.n	8009260 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800919e:	f7ff faa3 	bl	80086e8 <HAL_DMA_GetState>
 80091a2:	2801      	cmp	r0, #1
 80091a4:	d0e0      	beq.n	8009168 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80091a8:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091aa:	4932      	ldr	r1, [pc, #200]	; (8009274 <I2C_ITError+0x180>)
 80091ac:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80091ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091b4:	f7fe fd04 	bl	8007bc0 <HAL_DMA_Abort_IT>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0e1      	beq.n	8009180 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80091be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80091c4:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	0412      	lsls	r2, r2, #16
 80091cc:	d504      	bpl.n	80091d8 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091d4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80091d8:	f7ff fa86 	bl	80086e8 <HAL_DMA_GetState>
 80091dc:	2801      	cmp	r0, #1
 80091de:	d0c3      	beq.n	8009168 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80091e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 80091e2:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80091e4:	4923      	ldr	r1, [pc, #140]	; (8009274 <I2C_ITError+0x180>)
 80091e6:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80091e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80091ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80091ee:	f7fe fce7 	bl	8007bc0 <HAL_DMA_Abort_IT>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d0c4      	beq.n	8009180 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80091f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80091fe:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009200:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009202:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009206:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009210:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009212:	6803      	ldr	r3, [r0, #0]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	0792      	lsls	r2, r2, #30
 8009218:	d501      	bpl.n	800921e <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800921a:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800921c:	6803      	ldr	r3, [r0, #0]
 800921e:	699a      	ldr	r2, [r3, #24]
 8009220:	07d6      	lsls	r6, r2, #31
 8009222:	d403      	bmi.n	800922c <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800922c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009230:	2b60      	cmp	r3, #96	; 0x60
 8009232:	d012      	beq.n	800925a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8009234:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009236:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8009238:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	0695      	lsls	r5, r2, #26
 8009240:	d50b      	bpl.n	800925a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	06d0      	lsls	r0, r2, #27
 8009246:	d506      	bpl.n	8009256 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009248:	2210      	movs	r2, #16
 800924a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800924c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800924e:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009250:	f042 0204 	orr.w	r2, r2, #4
 8009254:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009256:	2220      	movs	r2, #32
 8009258:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	6363      	str	r3, [r4, #52]	; 0x34
 800925e:	e776      	b.n	800914e <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009266:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009268:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800926a:	e798      	b.n	800919e <I2C_ITError+0xaa>
 800926c:	ffff0000 	.word	0xffff0000
 8009270:	08009421 	.word	0x08009421
 8009274:	080090b5 	.word	0x080090b5

08009278 <I2C_ITSlaveCplt>:
{
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800927a:	6802      	ldr	r2, [r0, #0]
{
 800927c:	460d      	mov	r5, r1
 800927e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009280:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009282:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009286:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009288:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800928c:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800928e:	2b21      	cmp	r3, #33	; 0x21
 8009290:	d16f      	bne.n	8009372 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009292:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009294:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009298:	6802      	ldr	r2, [r0, #0]
 800929a:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 800929e:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092a0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092a2:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 80092a4:	485c      	ldr	r0, [pc, #368]	; (8009418 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092a6:	6853      	ldr	r3, [r2, #4]
 80092a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ac:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	6853      	ldr	r3, [r2, #4]
 80092b2:	4003      	ands	r3, r0
 80092b4:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	0797      	lsls	r7, r2, #30
 80092bc:	d502      	bpl.n	80092c4 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 80092be:	2200      	movs	r2, #0
 80092c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	07d6      	lsls	r6, r2, #31
 80092c8:	d403      	bmi.n	80092d2 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092d2:	0448      	lsls	r0, r1, #17
 80092d4:	d558      	bpl.n	8009388 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092d6:	6822      	ldr	r2, [r4, #0]
 80092d8:	6813      	ldr	r3, [r2, #0]
 80092da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092de:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80092e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092e2:	b11b      	cbz	r3, 80092ec <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	6853      	ldr	r3, [r2, #4]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80092ec:	076a      	lsls	r2, r5, #29
 80092ee:	d50a      	bpl.n	8009306 <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092f0:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80092f2:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80092fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80092fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009300:	3301      	adds	r3, #1
 8009302:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009304:	bb72      	cbnz	r2, 8009364 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
 8009306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009308:	b29b      	uxth	r3, r3
 800930a:	b11b      	cbz	r3, 8009314 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800930c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800930e:	f043 0304 	orr.w	r3, r3, #4
 8009312:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	2700      	movs	r7, #0
 8009316:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800931a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800931c:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800931e:	2e00      	cmp	r6, #0
 8009320:	d13d      	bne.n	800939e <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009324:	4d3d      	ldr	r5, [pc, #244]	; (800941c <I2C_ITSlaveCplt+0x1a4>)
 8009326:	42ab      	cmp	r3, r5
 8009328:	d10e      	bne.n	8009348 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800932a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800932e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8009330:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009334:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8009336:	f04f 0320 	mov.w	r3, #32
 800933a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800933e:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009340:	d066      	beq.n	8009410 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009342:	f7ff fe25 	bl	8008f90 <HAL_I2C_SlaveTxCpltCallback>
}
 8009346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff fe25 	bl	8008f98 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800934e:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009350:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8009352:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8009354:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009358:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800935c:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800935e:	f7ff fea3 	bl	80090a8 <HAL_I2C_ListenCpltCallback>
}
 8009362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 8009364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009366:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009368:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800936a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800936c:	b29b      	uxth	r3, r3
 800936e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009370:	e7c9      	b.n	8009306 <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009372:	2b22      	cmp	r3, #34	; 0x22
 8009374:	d195      	bne.n	80092a2 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009376:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009378:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800937c:	6802      	ldr	r2, [r0, #0]
 800937e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8009382:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009384:	6323      	str	r3, [r4, #48]	; 0x30
 8009386:	e78c      	b.n	80092a2 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009388:	0409      	lsls	r1, r1, #16
 800938a:	d5af      	bpl.n	80092ec <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009394:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8009396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1a3      	bne.n	80092e4 <I2C_ITSlaveCplt+0x6c>
 800939c:	e7a6      	b.n	80092ec <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800939e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7ff fea7 	bl	80090f4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80093a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80093aa:	2b28      	cmp	r3, #40	; 0x28
 80093ac:	d1cb      	bne.n	8009346 <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
 80093ae:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093b0:	4a1a      	ldr	r2, [pc, #104]	; (800941c <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
 80093b2:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093b4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80093b6:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80093b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80093bc:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093be:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80093c2:	d512      	bpl.n	80093ea <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093c4:	6822      	ldr	r2, [r4, #0]
 80093c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80093ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80093d0:	3301      	adds	r3, #1
 80093d2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80093d4:	b14a      	cbz	r2, 80093ea <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
 80093d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80093d8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80093da:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80093dc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80093de:	b29b      	uxth	r3, r3
 80093e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80093e4:	f043 0304 	orr.w	r3, r3, #4
 80093e8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80093ea:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ec:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093ee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 80093f2:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80093fe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8009404:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8009406:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800940a:	f7ff fe4d 	bl	80090a8 <HAL_I2C_ListenCpltCallback>
}
 800940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009410:	f7ff fdc0 	bl	8008f94 <HAL_I2C_SlaveRxCpltCallback>
}
 8009414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009416:	bf00      	nop
 8009418:	fe00e800 	.word	0xfe00e800
 800941c:	ffff0000 	.word	0xffff0000

08009420 <I2C_Slave_ISR_IT>:
{
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8009422:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8009426:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8009428:	2b01      	cmp	r3, #1
 800942a:	d07f      	beq.n	800952c <I2C_Slave_ISR_IT+0x10c>
 800942c:	4617      	mov	r7, r2
 800942e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009430:	068a      	lsls	r2, r1, #26
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8009436:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800943a:	d501      	bpl.n	8009440 <I2C_Slave_ISR_IT+0x20>
 800943c:	06bb      	lsls	r3, r7, #26
 800943e:	d461      	bmi.n	8009504 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009440:	06ea      	lsls	r2, r5, #27
 8009442:	d51b      	bpl.n	800947c <I2C_Slave_ISR_IT+0x5c>
 8009444:	06fb      	lsls	r3, r7, #27
 8009446:	d519      	bpl.n	800947c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 8009448:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d15e      	bne.n	800950e <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009450:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009454:	2a28      	cmp	r2, #40	; 0x28
 8009456:	d102      	bne.n	800945e <I2C_Slave_ISR_IT+0x3e>
 8009458:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800945c:	d07f      	beq.n	800955e <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800945e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009462:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009464:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800946a:	d102      	bne.n	8009472 <I2C_Slave_ISR_IT+0x52>
 800946c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8009470:	d162      	bne.n	8009538 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 8009472:	2300      	movs	r3, #0
  return HAL_OK;
 8009474:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8009476:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800947c:	076a      	lsls	r2, r5, #29
 800947e:	d40d      	bmi.n	800949c <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009480:	0728      	lsls	r0, r5, #28
 8009482:	d529      	bpl.n	80094d8 <I2C_Slave_ISR_IT+0xb8>
 8009484:	0739      	lsls	r1, r7, #28
 8009486:	d527      	bpl.n	80094d8 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009488:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800948c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009490:	2b28      	cmp	r3, #40	; 0x28
 8009492:	d060      	beq.n	8009556 <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	2208      	movs	r2, #8
 8009498:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800949a:	e7ea      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800949c:	077b      	lsls	r3, r7, #29
 800949e:	d5ef      	bpl.n	8009480 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 80094a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	b16b      	cbz	r3, 80094c2 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094ac:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80094ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80094b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80094b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80094b4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80094b6:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80094b8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80094ba:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80094bc:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80094be:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80094c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80094c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1d3      	bne.n	8009472 <I2C_Slave_ISR_IT+0x52>
 80094ca:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80094ce:	d0d0      	beq.n	8009472 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7ff fd61 	bl	8008f98 <I2C_ITSlaveSeqCplt>
 80094d6:	e7cc      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094d8:	07aa      	lsls	r2, r5, #30
 80094da:	d5ca      	bpl.n	8009472 <I2C_Slave_ISR_IT+0x52>
 80094dc:	07bb      	lsls	r3, r7, #30
 80094de:	d5c8      	bpl.n	8009472 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80094e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	b323      	cbz	r3, 8009530 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80094f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80094f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80094f4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80094f6:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80094f8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80094fa:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80094fc:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80094fe:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009500:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009502:	e7b6      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009504:	f7ff feb8 	bl	8009278 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009508:	06ea      	lsls	r2, r5, #27
 800950a:	d5b7      	bpl.n	800947c <I2C_Slave_ISR_IT+0x5c>
 800950c:	e79a      	b.n	8009444 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	2210      	movs	r2, #16
 8009512:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009516:	f043 0304 	orr.w	r3, r3, #4
 800951a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800951c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8009520:	d1a7      	bne.n	8009472 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009522:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009524:	4620      	mov	r0, r4
 8009526:	f7ff fde5 	bl	80090f4 <I2C_ITError>
 800952a:	e7a2      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800952c:	2002      	movs	r0, #2
}
 800952e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009530:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8009534:	d19d      	bne.n	8009472 <I2C_Slave_ISR_IT+0x52>
 8009536:	e7cb      	b.n	80094d0 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	0790      	lsls	r0, r2, #30
 800953e:	d502      	bpl.n	8009546 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 8009540:	2200      	movs	r2, #0
 8009542:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	07d1      	lsls	r1, r2, #31
 800954a:	d4c1      	bmi.n	80094d0 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	619a      	str	r2, [r3, #24]
 8009554:	e7bc      	b.n	80094d0 <I2C_Slave_ISR_IT+0xb0>
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff fd74 	bl	8009044 <I2C_ITAddrCplt.part.0>
 800955c:	e789      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800955e:	4918      	ldr	r1, [pc, #96]	; (80095c0 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009560:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009562:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8009564:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009566:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009568:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800956a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800956e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009572:	d512      	bpl.n	800959a <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009574:	6822      	ldr	r2, [r4, #0]
 8009576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800957a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800957c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800957e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009580:	3301      	adds	r3, #1
 8009582:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009584:	b14a      	cbz	r2, 800959a <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
 8009586:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009588:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800958a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800958c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800958e:	b29b      	uxth	r3, r3
 8009590:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009592:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009594:	f043 0304 	orr.w	r3, r3, #4
 8009598:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800959a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800959c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800959e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 80095a2:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80095a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80095a8:	6813      	ldr	r3, [r2, #0]
 80095aa:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80095ae:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 80095b4:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 80095b6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80095ba:	f7ff fd75 	bl	80090a8 <HAL_I2C_ListenCpltCallback>
}
 80095be:	e758      	b.n	8009472 <I2C_Slave_ISR_IT+0x52>
 80095c0:	ffff0000 	.word	0xffff0000

080095c4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80095c4:	6803      	ldr	r3, [r0, #0]
{
 80095c6:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80095cc:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80095ce:	f412 7f80 	tst.w	r2, #256	; 0x100
 80095d2:	d032      	beq.n	800963a <HAL_I2C_ER_IRQHandler+0x76>
 80095d4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80095d8:	d021      	beq.n	800961e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80095da:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80095dc:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80095e0:	f041 0101 	orr.w	r1, r1, #1
 80095e4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80095e6:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80095e8:	0553      	lsls	r3, r2, #21
 80095ea:	d507      	bpl.n	80095fc <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80095ec:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80095ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80095f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80095f4:	f041 0108 	orr.w	r1, r1, #8
 80095f8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80095fa:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80095fc:	0592      	lsls	r2, r2, #22
 80095fe:	d507      	bpl.n	8009610 <HAL_I2C_ER_IRQHandler+0x4c>
 8009600:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009602:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009604:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800960e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 8009610:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009612:	f011 0f0b 	tst.w	r1, #11
 8009616:	d10c      	bne.n	8009632 <HAL_I2C_ER_IRQHandler+0x6e>
}
 8009618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800961c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800961e:	0553      	lsls	r3, r2, #21
 8009620:	d4f6      	bmi.n	8009610 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009622:	0593      	lsls	r3, r2, #22
 8009624:	d5f4      	bpl.n	8009610 <HAL_I2C_ER_IRQHandler+0x4c>
 8009626:	060a      	lsls	r2, r1, #24
 8009628:	d4eb      	bmi.n	8009602 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 800962a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800962c:	f011 0f0b 	tst.w	r1, #11
 8009630:	d0f2      	beq.n	8009618 <HAL_I2C_ER_IRQHandler+0x54>
}
 8009632:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8009636:	f7ff bd5d 	b.w	80090f4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800963a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800963e:	d0f0      	beq.n	8009622 <HAL_I2C_ER_IRQHandler+0x5e>
 8009640:	0609      	lsls	r1, r1, #24
 8009642:	d5e5      	bpl.n	8009610 <HAL_I2C_ER_IRQHandler+0x4c>
 8009644:	e7d3      	b.n	80095ee <HAL_I2C_ER_IRQHandler+0x2a>
 8009646:	bf00      	nop

08009648 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009648:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800964c:	2a20      	cmp	r2, #32
 800964e:	d129      	bne.n	80096a4 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8009650:	4603      	mov	r3, r0
{
 8009652:	b500      	push	{lr}
 8009654:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009658:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800965c:	2a01      	cmp	r2, #1
 800965e:	d023      	beq.n	80096a8 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8009660:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009662:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009664:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8009668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800966c:	2224      	movs	r2, #36	; 0x24
 800966e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009672:	6802      	ldr	r2, [r0, #0]
 8009674:	f022 0201 	bic.w	r2, r2, #1
 8009678:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	6802      	ldr	r2, [r0, #0]
 800967e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009682:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	6802      	ldr	r2, [r0, #0]
 8009688:	4311      	orrs	r1, r2
 800968a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800968c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	680a      	ldr	r2, [r1, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009698:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800969c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80096a0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80096a4:	2002      	movs	r0, #2
}
 80096a6:	4770      	bx	lr
    return HAL_BUSY;
 80096a8:	2002      	movs	r0, #2
}
 80096aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ae:	bf00      	nop

080096b0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096b0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80096b4:	2a20      	cmp	r2, #32
 80096b6:	d127      	bne.n	8009708 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80096b8:	4603      	mov	r3, r0
{
 80096ba:	b500      	push	{lr}
 80096bc:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096c0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80096c4:	2a01      	cmp	r2, #1
 80096c6:	d021      	beq.n	800970c <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 80096c8:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096ca:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096cc:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80096d4:	2224      	movs	r2, #36	; 0x24
 80096d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80096da:	6802      	ldr	r2, [r0, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80096e6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80096ea:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80096ee:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80096f0:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	680a      	ldr	r2, [r1, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80096fc:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009700:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009704:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8009708:	2002      	movs	r0, #2
}
 800970a:	4770      	bx	lr
    return HAL_BUSY;
 800970c:	2002      	movs	r0, #2
}
 800970e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009712:	bf00      	nop

08009714 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009714:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009716:	4c10      	ldr	r4, [pc, #64]	; (8009758 <HAL_PWREx_ConfigSupply+0x44>)
 8009718:	68e3      	ldr	r3, [r4, #12]
 800971a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800971e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009720:	d105      	bne.n	800972e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009722:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009726:	1a18      	subs	r0, r3, r0
 8009728:	bf18      	it	ne
 800972a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800972c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	4318      	orrs	r0, r3
 8009734:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8009736:	f7fd fb4f 	bl	8006dd8 <HAL_GetTick>
 800973a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800973c:	e005      	b.n	800974a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800973e:	f7fd fb4b 	bl	8006dd8 <HAL_GetTick>
 8009742:	1b40      	subs	r0, r0, r5
 8009744:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009748:	d804      	bhi.n	8009754 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	049b      	lsls	r3, r3, #18
 800974e:	d5f6      	bpl.n	800973e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8009750:	2000      	movs	r0, #0
}
 8009752:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009754:	2001      	movs	r0, #1
}
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	58024800 	.word	0x58024800

0800975c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800975c:	4b3b      	ldr	r3, [pc, #236]	; (800984c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800975e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009762:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009764:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8009766:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800976a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800976c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8009770:	d038      	beq.n	80097e4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009772:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009776:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800977a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800977e:	fb05 f101 	mul.w	r1, r5, r1
 8009782:	2a01      	cmp	r2, #1
 8009784:	ee07 1a90 	vmov	s15, r1
 8009788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800978c:	d002      	beq.n	8009794 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800978e:	2a02      	cmp	r2, #2
 8009790:	d04e      	beq.n	8009830 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8009792:	b34a      	cbz	r2, 80097e8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009794:	ee07 0a90 	vmov	s15, r0
 8009798:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8009850 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800979c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80097a6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009854 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80097aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ae:	ee06 3a90 	vmov	s13, r3
 80097b2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80097b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80097ba:	ee76 6a85 	vadd.f32	s13, s13, s10
 80097be:	eee7 6a25 	vfma.f32	s13, s14, s11
 80097c2:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80097c6:	4b21      	ldr	r3, [pc, #132]	; (800984c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80097ce:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80097e4:	bc30      	pop	{r4, r5}
 80097e6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	0692      	lsls	r2, r2, #26
 80097ec:	d527      	bpl.n	800983e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ee:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097f0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097f4:	4a18      	ldr	r2, [pc, #96]	; (8009858 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80097fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097fc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009804:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009854 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8009808:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800980c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800980e:	ee06 3a90 	vmov	s13, r3
 8009812:	ee05 2a90 	vmov	s11, r2
 8009816:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800981a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800981e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009822:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009826:	eee7 6a05 	vfma.f32	s13, s14, s10
 800982a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800982e:	e7ca      	b.n	80097c6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009830:	ee07 0a90 	vmov	s15, r0
 8009834:	eddf 6a09 	vldr	s13, [pc, #36]	; 800985c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8009838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800983c:	e7b0      	b.n	80097a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800983e:	ee07 0a90 	vmov	s15, r0
 8009842:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009860 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8009846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800984a:	e7a9      	b.n	80097a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800984c:	58024400 	.word	0x58024400
 8009850:	4a742400 	.word	0x4a742400
 8009854:	39000000 	.word	0x39000000
 8009858:	03d09000 	.word	0x03d09000
 800985c:	4bbebc20 	.word	0x4bbebc20
 8009860:	4c742400 	.word	0x4c742400

08009864 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8009864:	2800      	cmp	r0, #0
 8009866:	f000 81ef 	beq.w	8009c48 <HAL_RCC_OscConfig+0x3e4>
{
 800986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800986c:	6803      	ldr	r3, [r0, #0]
 800986e:	4604      	mov	r4, r0
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d52e      	bpl.n	80098d2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009874:	49a4      	ldr	r1, [pc, #656]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009876:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009878:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800987a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800987e:	2a10      	cmp	r2, #16
 8009880:	f000 8107 	beq.w	8009a92 <HAL_RCC_OscConfig+0x22e>
 8009884:	2a18      	cmp	r2, #24
 8009886:	f000 80ff 	beq.w	8009a88 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009890:	f000 812a 	beq.w	8009ae8 <HAL_RCC_OscConfig+0x284>
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 8188 	bne.w	8009baa <HAL_RCC_OscConfig+0x346>
 800989a:	4b9b      	ldr	r3, [pc, #620]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098aa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 815c 	beq.w	8009b6c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80098b4:	f7fd fa90 	bl	8006dd8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098b8:	4e93      	ldr	r6, [pc, #588]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80098ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098bc:	e005      	b.n	80098ca <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098be:	f7fd fa8b 	bl	8006dd8 <HAL_GetTick>
 80098c2:	1b40      	subs	r0, r0, r5
 80098c4:	2864      	cmp	r0, #100	; 0x64
 80098c6:	f200 814f 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ca:	6833      	ldr	r3, [r6, #0]
 80098cc:	039b      	lsls	r3, r3, #14
 80098ce:	d5f6      	bpl.n	80098be <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	079d      	lsls	r5, r3, #30
 80098d4:	f100 808a 	bmi.w	80099ec <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80098d8:	06d9      	lsls	r1, r3, #27
 80098da:	d533      	bpl.n	8009944 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098dc:	4a8a      	ldr	r2, [pc, #552]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 80098de:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	f000 80e3 	beq.w	8009ab2 <HAL_RCC_OscConfig+0x24e>
 80098ec:	2b18      	cmp	r3, #24
 80098ee:	f000 80db 	beq.w	8009aa8 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80098f2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80098f4:	4d84      	ldr	r5, [pc, #528]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8176 	beq.w	8009be8 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009904:	f7fd fa68 	bl	8006dd8 <HAL_GetTick>
 8009908:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800990a:	e005      	b.n	8009918 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800990c:	f7fd fa64 	bl	8006dd8 <HAL_GetTick>
 8009910:	1b80      	subs	r0, r0, r6
 8009912:	2802      	cmp	r0, #2
 8009914:	f200 8128 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	05db      	lsls	r3, r3, #23
 800991c:	d5f6      	bpl.n	800990c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800991e:	f7fd fa73 	bl	8006e08 <HAL_GetREVID>
 8009922:	f241 0303 	movw	r3, #4099	; 0x1003
 8009926:	4298      	cmp	r0, r3
 8009928:	f200 8266 	bhi.w	8009df8 <HAL_RCC_OscConfig+0x594>
 800992c:	6a22      	ldr	r2, [r4, #32]
 800992e:	686b      	ldr	r3, [r5, #4]
 8009930:	2a20      	cmp	r2, #32
 8009932:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009936:	bf0c      	ite	eq
 8009938:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800993c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009940:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	071d      	lsls	r5, r3, #28
 8009946:	d516      	bpl.n	8009976 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009948:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800994a:	4d6f      	ldr	r5, [pc, #444]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 811b 	beq.w	8009b88 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 8009952:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009954:	f043 0301 	orr.w	r3, r3, #1
 8009958:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800995a:	f7fd fa3d 	bl	8006dd8 <HAL_GetTick>
 800995e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009960:	e005      	b.n	800996e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009962:	f7fd fa39 	bl	8006dd8 <HAL_GetTick>
 8009966:	1b80      	subs	r0, r0, r6
 8009968:	2802      	cmp	r0, #2
 800996a:	f200 80fd 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800996e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009970:	0798      	lsls	r0, r3, #30
 8009972:	d5f6      	bpl.n	8009962 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	069a      	lsls	r2, r3, #26
 8009978:	d516      	bpl.n	80099a8 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800997a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800997c:	4d62      	ldr	r5, [pc, #392]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8121 	beq.w	8009bc6 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800998a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800998c:	f7fd fa24 	bl	8006dd8 <HAL_GetTick>
 8009990:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009992:	e005      	b.n	80099a0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009994:	f7fd fa20 	bl	8006dd8 <HAL_GetTick>
 8009998:	1b80      	subs	r0, r0, r6
 800999a:	2802      	cmp	r0, #2
 800999c:	f200 80e4 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	049f      	lsls	r7, r3, #18
 80099a4:	d5f6      	bpl.n	8009994 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	0759      	lsls	r1, r3, #29
 80099aa:	f100 80a3 	bmi.w	8009af4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099b0:	b1d0      	cbz	r0, 80099e8 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80099b2:	4d55      	ldr	r5, [pc, #340]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 80099b4:	692b      	ldr	r3, [r5, #16]
 80099b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ba:	2b18      	cmp	r3, #24
 80099bc:	f000 81b6 	beq.w	8009d2c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 80099c0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099c2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80099c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099c8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099ca:	f000 8149 	beq.w	8009c60 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 80099ce:	f7fd fa03 	bl	8006dd8 <HAL_GetTick>
 80099d2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099d4:	e005      	b.n	80099e2 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099d6:	f7fd f9ff 	bl	8006dd8 <HAL_GetTick>
 80099da:	1b00      	subs	r0, r0, r4
 80099dc:	2802      	cmp	r0, #2
 80099de:	f200 80c3 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	019b      	lsls	r3, r3, #6
 80099e6:	d4f6      	bmi.n	80099d6 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80099e8:	2000      	movs	r0, #0
}
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ec:	4a46      	ldr	r2, [pc, #280]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 80099ee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099f2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80099f6:	d12d      	bne.n	8009a54 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099f8:	4b43      	ldr	r3, [pc, #268]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 80099fa:	68e2      	ldr	r2, [r4, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	0759      	lsls	r1, r3, #29
 8009a00:	d501      	bpl.n	8009a06 <HAL_RCC_OscConfig+0x1a2>
 8009a02:	2a00      	cmp	r2, #0
 8009a04:	d04e      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a06:	4d40      	ldr	r5, [pc, #256]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	f023 0319 	bic.w	r3, r3, #25
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a12:	f7fd f9e1 	bl	8006dd8 <HAL_GetTick>
 8009a16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a18:	e005      	b.n	8009a26 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a1a:	f7fd f9dd 	bl	8006dd8 <HAL_GetTick>
 8009a1e:	1b80      	subs	r0, r0, r6
 8009a20:	2802      	cmp	r0, #2
 8009a22:	f200 80a1 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	075b      	lsls	r3, r3, #29
 8009a2a:	d5f6      	bpl.n	8009a1a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a2c:	f7fd f9ec 	bl	8006e08 <HAL_GetREVID>
 8009a30:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a34:	4298      	cmp	r0, r3
 8009a36:	f200 80fe 	bhi.w	8009c36 <HAL_RCC_OscConfig+0x3d2>
 8009a3a:	6922      	ldr	r2, [r4, #16]
 8009a3c:	686b      	ldr	r3, [r5, #4]
 8009a3e:	2a40      	cmp	r2, #64	; 0x40
 8009a40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a44:	bf0c      	ite	eq
 8009a46:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8009a4a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009a4e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	e741      	b.n	80098d8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a54:	2b18      	cmp	r3, #24
 8009a56:	f000 80ea 	beq.w	8009c2e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a5a:	4d2b      	ldr	r5, [pc, #172]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a5c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a5e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	f000 80d3 	beq.w	8009c0c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a66:	f023 0319 	bic.w	r3, r3, #25
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a6e:	f7fd f9b3 	bl	8006dd8 <HAL_GetTick>
 8009a72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a74:	e004      	b.n	8009a80 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a76:	f7fd f9af 	bl	8006dd8 <HAL_GetTick>
 8009a7a:	1b80      	subs	r0, r0, r6
 8009a7c:	2802      	cmp	r0, #2
 8009a7e:	d873      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	075f      	lsls	r7, r3, #29
 8009a84:	d5f7      	bpl.n	8009a76 <HAL_RCC_OscConfig+0x212>
 8009a86:	e7d1      	b.n	8009a2c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a88:	f001 0103 	and.w	r1, r1, #3
 8009a8c:	2902      	cmp	r1, #2
 8009a8e:	f47f aefc 	bne.w	800988a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a92:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	0392      	lsls	r2, r2, #14
 8009a98:	f57f af1b 	bpl.w	80098d2 <HAL_RCC_OscConfig+0x6e>
 8009a9c:	6862      	ldr	r2, [r4, #4]
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	f47f af17 	bne.w	80098d2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8009aa4:	2001      	movs	r0, #1
}
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009aa8:	f002 0203 	and.w	r2, r2, #3
 8009aac:	2a01      	cmp	r2, #1
 8009aae:	f47f af20 	bne.w	80098f2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	05da      	lsls	r2, r3, #23
 8009ab8:	d502      	bpl.n	8009ac0 <HAL_RCC_OscConfig+0x25c>
 8009aba:	69e3      	ldr	r3, [r4, #28]
 8009abc:	2b80      	cmp	r3, #128	; 0x80
 8009abe:	d1f1      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ac0:	f7fd f9a2 	bl	8006e08 <HAL_GetREVID>
 8009ac4:	f241 0303 	movw	r3, #4099	; 0x1003
 8009ac8:	4298      	cmp	r0, r3
 8009aca:	f200 80bf 	bhi.w	8009c4c <HAL_RCC_OscConfig+0x3e8>
 8009ace:	6a22      	ldr	r2, [r4, #32]
 8009ad0:	2a20      	cmp	r2, #32
 8009ad2:	f000 81ad 	beq.w	8009e30 <HAL_RCC_OscConfig+0x5cc>
 8009ad6:	490c      	ldr	r1, [pc, #48]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009ad8:	684b      	ldr	r3, [r1, #4]
 8009ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ade:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8009ae2:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	e72d      	b.n	8009944 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ae8:	4a07      	ldr	r2, [pc, #28]	; (8009b08 <HAL_RCC_OscConfig+0x2a4>)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e6db      	b.n	80098ac <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8009af4:	4d05      	ldr	r5, [pc, #20]	; (8009b0c <HAL_RCC_OscConfig+0x2a8>)
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009afc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009afe:	f7fd f96b 	bl	8006dd8 <HAL_GetTick>
 8009b02:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b04:	e009      	b.n	8009b1a <HAL_RCC_OscConfig+0x2b6>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b10:	f7fd f962 	bl	8006dd8 <HAL_GetTick>
 8009b14:	1b80      	subs	r0, r0, r6
 8009b16:	2864      	cmp	r0, #100	; 0x64
 8009b18:	d826      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	05da      	lsls	r2, r3, #23
 8009b1e:	d5f7      	bpl.n	8009b10 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	f000 8171 	beq.w	8009e0a <HAL_RCC_OscConfig+0x5a6>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f040 8174 	bne.w	8009e16 <HAL_RCC_OscConfig+0x5b2>
 8009b2e:	4baa      	ldr	r3, [pc, #680]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
 8009b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	671a      	str	r2, [r3, #112]	; 0x70
 8009b38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b3a:	f022 0204 	bic.w	r2, r2, #4
 8009b3e:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 8140 	beq.w	8009dc8 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 8009b48:	f7fd f946 	bl	8006dd8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b4c:	4ea2      	ldr	r6, [pc, #648]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b4e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009b52:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b54:	e004      	b.n	8009b60 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b56:	f7fd f93f 	bl	8006dd8 <HAL_GetTick>
 8009b5a:	1b40      	subs	r0, r0, r5
 8009b5c:	42b8      	cmp	r0, r7
 8009b5e:	d803      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b60:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	d5f7      	bpl.n	8009b56 <HAL_RCC_OscConfig+0x2f2>
 8009b66:	e722      	b.n	80099ae <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8009b68:	2003      	movs	r0, #3
}
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8009b6c:	f7fd f934 	bl	8006dd8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b70:	4e99      	ldr	r6, [pc, #612]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 8009b72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b74:	e004      	b.n	8009b80 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b76:	f7fd f92f 	bl	8006dd8 <HAL_GetTick>
 8009b7a:	1b40      	subs	r0, r0, r5
 8009b7c:	2864      	cmp	r0, #100	; 0x64
 8009b7e:	d8f3      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b80:	6833      	ldr	r3, [r6, #0]
 8009b82:	039f      	lsls	r7, r3, #14
 8009b84:	d4f7      	bmi.n	8009b76 <HAL_RCC_OscConfig+0x312>
 8009b86:	e6a3      	b.n	80098d0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8009b88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009b90:	f7fd f922 	bl	8006dd8 <HAL_GetTick>
 8009b94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b96:	e004      	b.n	8009ba2 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b98:	f7fd f91e 	bl	8006dd8 <HAL_GetTick>
 8009b9c:	1b80      	subs	r0, r0, r6
 8009b9e:	2802      	cmp	r0, #2
 8009ba0:	d8e2      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ba2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009ba4:	0799      	lsls	r1, r3, #30
 8009ba6:	d4f7      	bmi.n	8009b98 <HAL_RCC_OscConfig+0x334>
 8009ba8:	e6e4      	b.n	8009974 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bae:	4b8a      	ldr	r3, [pc, #552]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	f47f ae74 	bne.w	800989e <HAL_RCC_OscConfig+0x3a>
 8009bb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e672      	b.n	80098ac <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bcc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009bce:	f7fd f903 	bl	8006dd8 <HAL_GetTick>
 8009bd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bd4:	e004      	b.n	8009be0 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bd6:	f7fd f8ff 	bl	8006dd8 <HAL_GetTick>
 8009bda:	1b80      	subs	r0, r0, r6
 8009bdc:	2802      	cmp	r0, #2
 8009bde:	d8c3      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	0498      	lsls	r0, r3, #18
 8009be4:	d4f7      	bmi.n	8009bd6 <HAL_RCC_OscConfig+0x372>
 8009be6:	e6de      	b.n	80099a6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009bf0:	f7fd f8f2 	bl	8006dd8 <HAL_GetTick>
 8009bf4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bf6:	e004      	b.n	8009c02 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bf8:	f7fd f8ee 	bl	8006dd8 <HAL_GetTick>
 8009bfc:	1b80      	subs	r0, r0, r6
 8009bfe:	2802      	cmp	r0, #2
 8009c00:	d8b2      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	05df      	lsls	r7, r3, #23
 8009c06:	d4f7      	bmi.n	8009bf8 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	e69b      	b.n	8009944 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8009c0c:	f023 0301 	bic.w	r3, r3, #1
 8009c10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009c12:	f7fd f8e1 	bl	8006dd8 <HAL_GetTick>
 8009c16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c18:	e004      	b.n	8009c24 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c1a:	f7fd f8dd 	bl	8006dd8 <HAL_GetTick>
 8009c1e:	1b80      	subs	r0, r0, r6
 8009c20:	2802      	cmp	r0, #2
 8009c22:	d8a1      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	0758      	lsls	r0, r3, #29
 8009c28:	d4f7      	bmi.n	8009c1a <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	e654      	b.n	80098d8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009c2e:	0790      	lsls	r0, r2, #30
 8009c30:	f47f af13 	bne.w	8009a5a <HAL_RCC_OscConfig+0x1f6>
 8009c34:	e6e0      	b.n	80099f8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c36:	686b      	ldr	r3, [r5, #4]
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009c3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c42:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	e647      	b.n	80098d8 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8009c48:	2001      	movs	r0, #1
}
 8009c4a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c4c:	4a62      	ldr	r2, [pc, #392]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
 8009c4e:	6a21      	ldr	r1, [r4, #32]
 8009c50:	68d3      	ldr	r3, [r2, #12]
 8009c52:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009c56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009c5a:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	e671      	b.n	8009944 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8009c60:	f7fd f8ba 	bl	8006dd8 <HAL_GetTick>
 8009c64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c66:	e005      	b.n	8009c74 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c68:	f7fd f8b6 	bl	8006dd8 <HAL_GetTick>
 8009c6c:	1b80      	subs	r0, r0, r6
 8009c6e:	2802      	cmp	r0, #2
 8009c70:	f63f af7a 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	0199      	lsls	r1, r3, #6
 8009c78:	d4f6      	bmi.n	8009c68 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c7a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8009c7c:	4b57      	ldr	r3, [pc, #348]	; (8009ddc <HAL_RCC_OscConfig+0x578>)
 8009c7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c80:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c82:	4957      	ldr	r1, [pc, #348]	; (8009de0 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c84:	4e54      	ldr	r6, [pc, #336]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c86:	4313      	orrs	r3, r2
 8009c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c8a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009c8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009c90:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8009c94:	3b01      	subs	r3, #1
 8009c96:	3a01      	subs	r2, #1
 8009c98:	025b      	lsls	r3, r3, #9
 8009c9a:	0412      	lsls	r2, r2, #16
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ca6:	3a01      	subs	r2, #1
 8009ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cac:	4313      	orrs	r3, r2
 8009cae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009cb0:	3a01      	subs	r2, #1
 8009cb2:	0612      	lsls	r2, r2, #24
 8009cb4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009cbc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cbe:	f023 0301 	bic.w	r3, r3, #1
 8009cc2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009cc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009cc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009cc8:	4011      	ands	r1, r2
 8009cca:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8009cce:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009cd0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009cd4:	f023 030c 	bic.w	r3, r3, #12
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009cdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cde:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009ce0:	f023 0302 	bic.w	r3, r3, #2
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ce8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009cf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cfe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009d10:	f7fd f862 	bl	8006dd8 <HAL_GetTick>
 8009d14:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d16:	e005      	b.n	8009d24 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d18:	f7fd f85e 	bl	8006dd8 <HAL_GetTick>
 8009d1c:	1b00      	subs	r0, r0, r4
 8009d1e:	2802      	cmp	r0, #2
 8009d20:	f63f af22 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d24:	6833      	ldr	r3, [r6, #0]
 8009d26:	019a      	lsls	r2, r3, #6
 8009d28:	d5f6      	bpl.n	8009d18 <HAL_RCC_OscConfig+0x4b4>
 8009d2a:	e65d      	b.n	80099e8 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d2c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009d2e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009d30:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d32:	f43f ae5a 	beq.w	80099ea <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d36:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009d3c:	428b      	cmp	r3, r1
 8009d3e:	f47f aeb1 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d42:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	f47f aeab 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d50:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8009d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d56:	429a      	cmp	r2, r3
 8009d58:	f47f aea4 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5e:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8009d62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d64:	429a      	cmp	r2, r3
 8009d66:	f47f ae9d 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d6c:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8009d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d72:	429a      	cmp	r2, r3
 8009d74:	f47f ae96 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d7a:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8009d7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d80:	429e      	cmp	r6, r3
 8009d82:	f47f ae8f 	bne.w	8009aa4 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d8a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	f43f ae2a 	beq.w	80099e8 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d94:	4a10      	ldr	r2, [pc, #64]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
 8009d96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8009d9e:	f7fd f81b 	bl	8006dd8 <HAL_GetTick>
 8009da2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009da4:	f7fd f818 	bl	8006dd8 <HAL_GetTick>
 8009da8:	42a8      	cmp	r0, r5
 8009daa:	d0fb      	beq.n	8009da4 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009dac:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 8009dae:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009db2:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <HAL_RCC_OscConfig+0x57c>)
 8009db4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009db6:	4023      	ands	r3, r4
 8009db8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009dbc:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009dbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8009dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8009dc8:	f7fd f806 	bl	8006dd8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dcc:	4e02      	ldr	r6, [pc, #8]	; (8009dd8 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dce:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009dd2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dd4:	e00c      	b.n	8009df0 <HAL_RCC_OscConfig+0x58c>
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	fffffc0c 	.word	0xfffffc0c
 8009de0:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de4:	f7fc fff8 	bl	8006dd8 <HAL_GetTick>
 8009de8:	1b40      	subs	r0, r0, r5
 8009dea:	42b8      	cmp	r0, r7
 8009dec:	f63f aebc 	bhi.w	8009b68 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009df0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009df2:	0798      	lsls	r0, r3, #30
 8009df4:	d4f6      	bmi.n	8009de4 <HAL_RCC_OscConfig+0x580>
 8009df6:	e5da      	b.n	80099ae <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009df8:	68eb      	ldr	r3, [r5, #12]
 8009dfa:	6a22      	ldr	r2, [r4, #32]
 8009dfc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009e00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e04:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	e59c      	b.n	8009944 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e0a:	4a0e      	ldr	r2, [pc, #56]	; (8009e44 <HAL_RCC_OscConfig+0x5e0>)
 8009e0c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	6713      	str	r3, [r2, #112]	; 0x70
 8009e14:	e694      	b.n	8009b40 <HAL_RCC_OscConfig+0x2dc>
 8009e16:	2b05      	cmp	r3, #5
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <HAL_RCC_OscConfig+0x5e0>)
 8009e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e1c:	f47f ae89 	bne.w	8009b32 <HAL_RCC_OscConfig+0x2ce>
 8009e20:	f042 0204 	orr.w	r2, r2, #4
 8009e24:	671a      	str	r2, [r3, #112]	; 0x70
 8009e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e28:	f042 0201 	orr.w	r2, r2, #1
 8009e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8009e2e:	e687      	b.n	8009b40 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e30:	4a04      	ldr	r2, [pc, #16]	; (8009e44 <HAL_RCC_OscConfig+0x5e0>)
 8009e32:	6853      	ldr	r3, [r2, #4]
 8009e34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e3c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	e580      	b.n	8009944 <HAL_RCC_OscConfig+0xe0>
 8009e42:	bf00      	nop
 8009e44:	58024400 	.word	0x58024400

08009e48 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e48:	4a47      	ldr	r2, [pc, #284]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x120>)
 8009e4a:	6913      	ldr	r3, [r2, #16]
 8009e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e50:	2b10      	cmp	r3, #16
 8009e52:	d004      	beq.n	8009e5e <HAL_RCC_GetSysClockFreq+0x16>
 8009e54:	2b18      	cmp	r3, #24
 8009e56:	d00d      	beq.n	8009e74 <HAL_RCC_GetSysClockFreq+0x2c>
 8009e58:	b11b      	cbz	r3, 8009e62 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8009e5a:	4844      	ldr	r0, [pc, #272]	; (8009f6c <HAL_RCC_GetSysClockFreq+0x124>)
 8009e5c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e5e:	4844      	ldr	r0, [pc, #272]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x128>)
 8009e60:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e62:	6813      	ldr	r3, [r2, #0]
 8009e64:	0699      	lsls	r1, r3, #26
 8009e66:	d54a      	bpl.n	8009efe <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e68:	6813      	ldr	r3, [r2, #0]
 8009e6a:	4842      	ldr	r0, [pc, #264]	; (8009f74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009e6c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009e70:	40d8      	lsrs	r0, r3
 8009e72:	4770      	bx	lr
{
 8009e74:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e76:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009e78:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009e7a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8009e7c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e80:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009e82:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8009e86:	d038      	beq.n	8009efa <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e88:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009e8c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e90:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e94:	fb05 f101 	mul.w	r1, r5, r1
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	ee07 1a90 	vmov	s15, r1
 8009e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8009ea2:	d002      	beq.n	8009eaa <HAL_RCC_GetSysClockFreq+0x62>
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d02c      	beq.n	8009f02 <HAL_RCC_GetSysClockFreq+0xba>
 8009ea8:	b393      	cbz	r3, 8009f10 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eaa:	ee07 0a90 	vmov	s15, r0
 8009eae:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009f78 <HAL_RCC_GetSysClockFreq+0x130>
 8009eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009eb8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009ebc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009f7c <HAL_RCC_GetSysClockFreq+0x134>
 8009ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec4:	ee06 3a90 	vmov	s13, r3
 8009ec8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009ecc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ed0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009ed4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009ed8:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009edc:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x120>)
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ee4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 0a90 	vmov	r0, s15
}
 8009efa:	bc30      	pop	{r4, r5}
 8009efc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009efe:	481d      	ldr	r0, [pc, #116]	; (8009f74 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009f00:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f02:	ee07 0a90 	vmov	s15, r0
 8009f06:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009f80 <HAL_RCC_GetSysClockFreq+0x138>
 8009f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f0e:	e7d2      	b.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f10:	6813      	ldr	r3, [r2, #0]
 8009f12:	069b      	lsls	r3, r3, #26
 8009f14:	d520      	bpl.n	8009f58 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f16:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f18:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f1c:	4915      	ldr	r1, [pc, #84]	; (8009f74 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009f22:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f24:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f2c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009f7c <HAL_RCC_GetSysClockFreq+0x134>
 8009f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f34:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f36:	ee06 3a90 	vmov	s13, r3
 8009f3a:	ee05 1a90 	vmov	s11, r1
 8009f3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009f42:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009f46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009f4a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009f4e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009f52:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009f56:	e7c1      	b.n	8009edc <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f58:	ee07 0a90 	vmov	s15, r0
 8009f5c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009f84 <HAL_RCC_GetSysClockFreq+0x13c>
 8009f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f64:	e7a7      	b.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x6e>
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	003d0900 	.word	0x003d0900
 8009f70:	017d7840 	.word	0x017d7840
 8009f74:	03d09000 	.word	0x03d09000
 8009f78:	4a742400 	.word	0x4a742400
 8009f7c:	39000000 	.word	0x39000000
 8009f80:	4bbebc20 	.word	0x4bbebc20
 8009f84:	4c742400 	.word	0x4c742400

08009f88 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	f000 811a 	beq.w	800a1c2 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f8e:	4a92      	ldr	r2, [pc, #584]	; (800a1d8 <HAL_RCC_ClockConfig+0x250>)
{
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f94:	6813      	ldr	r3, [r2, #0]
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
 8009f9a:	f003 030f 	and.w	r3, r3, #15
 8009f9e:	428b      	cmp	r3, r1
 8009fa0:	d20c      	bcs.n	8009fbc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa2:	6813      	ldr	r3, [r2, #0]
 8009fa4:	f023 030f 	bic.w	r3, r3, #15
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fac:	6813      	ldr	r3, [r2, #0]
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	428b      	cmp	r3, r1
 8009fb4:	d002      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009fb6:	2001      	movs	r0, #1
}
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	075f      	lsls	r7, r3, #29
 8009fc0:	d50c      	bpl.n	8009fdc <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fc2:	4986      	ldr	r1, [pc, #536]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 8009fc4:	6920      	ldr	r0, [r4, #16]
 8009fc6:	698a      	ldr	r2, [r1, #24]
 8009fc8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009fcc:	4290      	cmp	r0, r2
 8009fce:	d905      	bls.n	8009fdc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fd0:	698b      	ldr	r3, [r1, #24]
 8009fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd6:	4303      	orrs	r3, r0
 8009fd8:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	071e      	lsls	r6, r3, #28
 8009fde:	d50c      	bpl.n	8009ffa <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fe0:	497e      	ldr	r1, [pc, #504]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 8009fe2:	6960      	ldr	r0, [r4, #20]
 8009fe4:	69ca      	ldr	r2, [r1, #28]
 8009fe6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009fea:	4290      	cmp	r0, r2
 8009fec:	d905      	bls.n	8009ffa <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fee:	69cb      	ldr	r3, [r1, #28]
 8009ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff4:	4303      	orrs	r3, r0
 8009ff6:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	06d8      	lsls	r0, r3, #27
 8009ffc:	d50c      	bpl.n	800a018 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ffe:	4977      	ldr	r1, [pc, #476]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a000:	69a0      	ldr	r0, [r4, #24]
 800a002:	69ca      	ldr	r2, [r1, #28]
 800a004:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a008:	4290      	cmp	r0, r2
 800a00a:	d905      	bls.n	800a018 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a00c:	69cb      	ldr	r3, [r1, #28]
 800a00e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a012:	4303      	orrs	r3, r0
 800a014:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	0699      	lsls	r1, r3, #26
 800a01a:	d50c      	bpl.n	800a036 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a01c:	496f      	ldr	r1, [pc, #444]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a01e:	69e0      	ldr	r0, [r4, #28]
 800a020:	6a0a      	ldr	r2, [r1, #32]
 800a022:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a026:	4290      	cmp	r0, r2
 800a028:	d905      	bls.n	800a036 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a02a:	6a0b      	ldr	r3, [r1, #32]
 800a02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a030:	4303      	orrs	r3, r0
 800a032:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	079a      	lsls	r2, r3, #30
 800a038:	f140 8083 	bpl.w	800a142 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a03c:	4867      	ldr	r0, [pc, #412]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a03e:	68e1      	ldr	r1, [r4, #12]
 800a040:	6982      	ldr	r2, [r0, #24]
 800a042:	f002 020f 	and.w	r2, r2, #15
 800a046:	4291      	cmp	r1, r2
 800a048:	f240 80a9 	bls.w	800a19e <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a04c:	6983      	ldr	r3, [r0, #24]
 800a04e:	f023 030f 	bic.w	r3, r3, #15
 800a052:	4319      	orrs	r1, r3
 800a054:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	07df      	lsls	r7, r3, #31
 800a05a:	d474      	bmi.n	800a146 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a05c:	079f      	lsls	r7, r3, #30
 800a05e:	d507      	bpl.n	800a070 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a060:	4a5e      	ldr	r2, [pc, #376]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a062:	68e1      	ldr	r1, [r4, #12]
 800a064:	6993      	ldr	r3, [r2, #24]
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	428b      	cmp	r3, r1
 800a06c:	f200 80a0 	bhi.w	800a1b0 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a070:	4a59      	ldr	r2, [pc, #356]	; (800a1d8 <HAL_RCC_ClockConfig+0x250>)
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	42ab      	cmp	r3, r5
 800a07a:	d909      	bls.n	800a090 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a07c:	6813      	ldr	r3, [r2, #0]
 800a07e:	f023 030f 	bic.w	r3, r3, #15
 800a082:	432b      	orrs	r3, r5
 800a084:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	42ab      	cmp	r3, r5
 800a08e:	d192      	bne.n	8009fb6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	075e      	lsls	r6, r3, #29
 800a094:	d50c      	bpl.n	800a0b0 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a096:	4951      	ldr	r1, [pc, #324]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a098:	6920      	ldr	r0, [r4, #16]
 800a09a:	698a      	ldr	r2, [r1, #24]
 800a09c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a0a0:	4290      	cmp	r0, r2
 800a0a2:	d205      	bcs.n	800a0b0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0a4:	698b      	ldr	r3, [r1, #24]
 800a0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0aa:	4303      	orrs	r3, r0
 800a0ac:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	071d      	lsls	r5, r3, #28
 800a0b2:	d50c      	bpl.n	800a0ce <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0b4:	4949      	ldr	r1, [pc, #292]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a0b6:	6960      	ldr	r0, [r4, #20]
 800a0b8:	69ca      	ldr	r2, [r1, #28]
 800a0ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a0be:	4290      	cmp	r0, r2
 800a0c0:	d205      	bcs.n	800a0ce <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0c2:	69cb      	ldr	r3, [r1, #28]
 800a0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c8:	4303      	orrs	r3, r0
 800a0ca:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	06d8      	lsls	r0, r3, #27
 800a0d0:	d50c      	bpl.n	800a0ec <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0d2:	4942      	ldr	r1, [pc, #264]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a0d4:	69a0      	ldr	r0, [r4, #24]
 800a0d6:	69ca      	ldr	r2, [r1, #28]
 800a0d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a0dc:	4290      	cmp	r0, r2
 800a0de:	d205      	bcs.n	800a0ec <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0e0:	69cb      	ldr	r3, [r1, #28]
 800a0e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a0e6:	4303      	orrs	r3, r0
 800a0e8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	0699      	lsls	r1, r3, #26
 800a0ee:	d50b      	bpl.n	800a108 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0f0:	4a3a      	ldr	r2, [pc, #232]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a0f2:	69e1      	ldr	r1, [r4, #28]
 800a0f4:	6a13      	ldr	r3, [r2, #32]
 800a0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	d204      	bcs.n	800a108 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0fe:	6a13      	ldr	r3, [r2, #32]
 800a100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a104:	430b      	orrs	r3, r1
 800a106:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a108:	f7ff fe9e 	bl	8009e48 <HAL_RCC_GetSysClockFreq>
 800a10c:	4a33      	ldr	r2, [pc, #204]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a10e:	4603      	mov	r3, r0
 800a110:	4833      	ldr	r0, [pc, #204]	; (800a1e0 <HAL_RCC_ClockConfig+0x258>)
 800a112:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a114:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a116:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800a11a:	4d32      	ldr	r5, [pc, #200]	; (800a1e4 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a11c:	f002 020f 	and.w	r2, r2, #15
 800a120:	4c31      	ldr	r4, [pc, #196]	; (800a1e8 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a122:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a124:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a126:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800a12a:	4830      	ldr	r0, [pc, #192]	; (800a1ec <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a12c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a130:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800a132:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800a134:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a136:	40d3      	lsrs	r3, r2
 800a138:	6023      	str	r3, [r4, #0]
}
 800a13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a13e:	f7fc bde9 	b.w	8006d14 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a142:	07db      	lsls	r3, r3, #31
 800a144:	d594      	bpl.n	800a070 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a146:	4a25      	ldr	r2, [pc, #148]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a148:	68a1      	ldr	r1, [r4, #8]
 800a14a:	6993      	ldr	r3, [r2, #24]
 800a14c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a150:	430b      	orrs	r3, r1
 800a152:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a154:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a156:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a158:	2902      	cmp	r1, #2
 800a15a:	d034      	beq.n	800a1c6 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a15c:	2903      	cmp	r1, #3
 800a15e:	d02d      	beq.n	800a1bc <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a160:	2901      	cmp	r1, #1
 800a162:	d035      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a164:	075b      	lsls	r3, r3, #29
 800a166:	f57f af26 	bpl.w	8009fb6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a16a:	4e1c      	ldr	r6, [pc, #112]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a16c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a170:	6933      	ldr	r3, [r6, #16]
 800a172:	f023 0307 	bic.w	r3, r3, #7
 800a176:	430b      	orrs	r3, r1
 800a178:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800a17a:	f7fc fe2d 	bl	8006dd8 <HAL_GetTick>
 800a17e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a180:	e004      	b.n	800a18c <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a182:	f7fc fe29 	bl	8006dd8 <HAL_GetTick>
 800a186:	1bc0      	subs	r0, r0, r7
 800a188:	4540      	cmp	r0, r8
 800a18a:	d81f      	bhi.n	800a1cc <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a18c:	6933      	ldr	r3, [r6, #16]
 800a18e:	6862      	ldr	r2, [r4, #4]
 800a190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a194:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a198:	d1f3      	bne.n	800a182 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	e75e      	b.n	800a05c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a19e:	07da      	lsls	r2, r3, #31
 800a1a0:	d4d1      	bmi.n	800a146 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1a2:	4a0e      	ldr	r2, [pc, #56]	; (800a1dc <HAL_RCC_ClockConfig+0x254>)
 800a1a4:	6993      	ldr	r3, [r2, #24]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	428b      	cmp	r3, r1
 800a1ac:	f67f af60 	bls.w	800a070 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1b0:	6993      	ldr	r3, [r2, #24]
 800a1b2:	f023 030f 	bic.w	r3, r3, #15
 800a1b6:	4319      	orrs	r1, r3
 800a1b8:	6191      	str	r1, [r2, #24]
 800a1ba:	e759      	b.n	800a070 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1bc:	0198      	lsls	r0, r3, #6
 800a1be:	d4d4      	bmi.n	800a16a <HAL_RCC_ClockConfig+0x1e2>
 800a1c0:	e6f9      	b.n	8009fb6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800a1c2:	2001      	movs	r0, #1
}
 800a1c4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c6:	039e      	lsls	r6, r3, #14
 800a1c8:	d4cf      	bmi.n	800a16a <HAL_RCC_ClockConfig+0x1e2>
 800a1ca:	e6f4      	b.n	8009fb6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800a1cc:	2003      	movs	r0, #3
 800a1ce:	e6f3      	b.n	8009fb8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1d0:	05da      	lsls	r2, r3, #23
 800a1d2:	d4ca      	bmi.n	800a16a <HAL_RCC_ClockConfig+0x1e2>
 800a1d4:	e6ef      	b.n	8009fb6 <HAL_RCC_ClockConfig+0x2e>
 800a1d6:	bf00      	nop
 800a1d8:	52002000 	.word	0x52002000
 800a1dc:	58024400 	.word	0x58024400
 800a1e0:	0801b794 	.word	0x0801b794
 800a1e4:	20000094 	.word	0x20000094
 800a1e8:	20000098 	.word	0x20000098
 800a1ec:	200000a0 	.word	0x200000a0

0800a1f0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1f0:	4a18      	ldr	r2, [pc, #96]	; (800a254 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1f2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1f4:	6913      	ldr	r3, [r2, #16]
 800a1f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1fa:	2b10      	cmp	r3, #16
 800a1fc:	d01a      	beq.n	800a234 <HAL_RCC_GetHCLKFreq+0x44>
 800a1fe:	2b18      	cmp	r3, #24
 800a200:	d023      	beq.n	800a24a <HAL_RCC_GetHCLKFreq+0x5a>
 800a202:	b1cb      	cbz	r3, 800a238 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800a204:	4814      	ldr	r0, [pc, #80]	; (800a258 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a206:	4b13      	ldr	r3, [pc, #76]	; (800a254 <HAL_RCC_GetHCLKFreq+0x64>)
 800a208:	4914      	ldr	r1, [pc, #80]	; (800a25c <HAL_RCC_GetHCLKFreq+0x6c>)
 800a20a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a20c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a20e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a212:	4c13      	ldr	r4, [pc, #76]	; (800a260 <HAL_RCC_GetHCLKFreq+0x70>)
 800a214:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a218:	4d12      	ldr	r5, [pc, #72]	; (800a264 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a21a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a21c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a21e:	f002 021f 	and.w	r2, r2, #31
 800a222:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a226:	f003 001f 	and.w	r0, r3, #31
 800a22a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800a22e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a230:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a232:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a234:	480c      	ldr	r0, [pc, #48]	; (800a268 <HAL_RCC_GetHCLKFreq+0x78>)
 800a236:	e7e6      	b.n	800a206 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a238:	6813      	ldr	r3, [r2, #0]
 800a23a:	069b      	lsls	r3, r3, #26
 800a23c:	d508      	bpl.n	800a250 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	480a      	ldr	r0, [pc, #40]	; (800a26c <HAL_RCC_GetHCLKFreq+0x7c>)
 800a242:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a246:	40d0      	lsrs	r0, r2
 800a248:	e7dd      	b.n	800a206 <HAL_RCC_GetHCLKFreq+0x16>
 800a24a:	f7ff fa87 	bl	800975c <HAL_RCC_GetSysClockFreq.part.0>
 800a24e:	e7da      	b.n	800a206 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a250:	4806      	ldr	r0, [pc, #24]	; (800a26c <HAL_RCC_GetHCLKFreq+0x7c>)
 800a252:	e7d8      	b.n	800a206 <HAL_RCC_GetHCLKFreq+0x16>
 800a254:	58024400 	.word	0x58024400
 800a258:	003d0900 	.word	0x003d0900
 800a25c:	0801b794 	.word	0x0801b794
 800a260:	20000098 	.word	0x20000098
 800a264:	20000094 	.word	0x20000094
 800a268:	017d7840 	.word	0x017d7840
 800a26c:	03d09000 	.word	0x03d09000

0800a270 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a270:	4a1c      	ldr	r2, [pc, #112]	; (800a2e4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a272:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a274:	6913      	ldr	r3, [r2, #16]
 800a276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d021      	beq.n	800a2c2 <HAL_RCC_GetPCLK1Freq+0x52>
 800a27e:	2b18      	cmp	r3, #24
 800a280:	d02b      	beq.n	800a2da <HAL_RCC_GetPCLK1Freq+0x6a>
 800a282:	b303      	cbz	r3, 800a2c6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800a284:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a286:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <HAL_RCC_GetPCLK1Freq+0x74>)
 800a288:	4918      	ldr	r1, [pc, #96]	; (800a2ec <HAL_RCC_GetPCLK1Freq+0x7c>)
 800a28a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800a28c:	4d18      	ldr	r5, [pc, #96]	; (800a2f0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a28e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a292:	4c18      	ldr	r4, [pc, #96]	; (800a2f4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a294:	5ccb      	ldrb	r3, [r1, r3]
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a29e:	6990      	ldr	r0, [r2, #24]
 800a2a0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800a2a4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2a6:	5c08      	ldrb	r0, [r1, r0]
 800a2a8:	f000 001f 	and.w	r0, r0, #31
 800a2ac:	40c3      	lsrs	r3, r0
 800a2ae:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2b0:	69d2      	ldr	r2, [r2, #28]
 800a2b2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800a2b6:	5c88      	ldrb	r0, [r1, r2]
 800a2b8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a2bc:	fa23 f000 	lsr.w	r0, r3, r0
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2c2:	480d      	ldr	r0, [pc, #52]	; (800a2f8 <HAL_RCC_GetPCLK1Freq+0x88>)
 800a2c4:	e7df      	b.n	800a286 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	069b      	lsls	r3, r3, #26
 800a2ca:	d509      	bpl.n	800a2e0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2cc:	6810      	ldr	r0, [r2, #0]
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a2d0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a2d4:	fa23 f000 	lsr.w	r0, r3, r0
 800a2d8:	e7d5      	b.n	800a286 <HAL_RCC_GetPCLK1Freq+0x16>
 800a2da:	f7ff fa3f 	bl	800975c <HAL_RCC_GetSysClockFreq.part.0>
 800a2de:	e7d2      	b.n	800a286 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a2e0:	4806      	ldr	r0, [pc, #24]	; (800a2fc <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a2e2:	e7d0      	b.n	800a286 <HAL_RCC_GetPCLK1Freq+0x16>
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	003d0900 	.word	0x003d0900
 800a2ec:	0801b794 	.word	0x0801b794
 800a2f0:	20000094 	.word	0x20000094
 800a2f4:	20000098 	.word	0x20000098
 800a2f8:	017d7840 	.word	0x017d7840
 800a2fc:	03d09000 	.word	0x03d09000

0800a300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a302:	4c3a      	ldr	r4, [pc, #232]	; (800a3ec <RCCEx_PLL2_Config+0xec>)
 800a304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d067      	beq.n	800a3de <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	4606      	mov	r6, r0
 800a312:	460f      	mov	r7, r1
 800a314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a318:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31a:	f7fc fd5d 	bl	8006dd8 <HAL_GetTick>
 800a31e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a320:	e004      	b.n	800a32c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a322:	f7fc fd59 	bl	8006dd8 <HAL_GetTick>
 800a326:	1b43      	subs	r3, r0, r5
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d856      	bhi.n	800a3da <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	011a      	lsls	r2, r3, #4
 800a330:	d4f7      	bmi.n	800a322 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a334:	6832      	ldr	r2, [r6, #0]
 800a336:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a33a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a33e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a340:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a344:	3b01      	subs	r3, #1
 800a346:	3a01      	subs	r2, #1
 800a348:	025b      	lsls	r3, r3, #9
 800a34a:	0412      	lsls	r2, r2, #16
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a352:	4313      	orrs	r3, r2
 800a354:	6872      	ldr	r2, [r6, #4]
 800a356:	3a01      	subs	r2, #1
 800a358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a35c:	4313      	orrs	r3, r2
 800a35e:	6932      	ldr	r2, [r6, #16]
 800a360:	3a01      	subs	r2, #1
 800a362:	0612      	lsls	r2, r2, #24
 800a364:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a368:	4313      	orrs	r3, r2
 800a36a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a36c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a36e:	6972      	ldr	r2, [r6, #20]
 800a370:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a374:	4313      	orrs	r3, r2
 800a376:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a37a:	69b3      	ldr	r3, [r6, #24]
 800a37c:	f022 0220 	bic.w	r2, r2, #32
 800a380:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a382:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a384:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a388:	f022 0210 	bic.w	r2, r2, #16
 800a38c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a38e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a390:	69f2      	ldr	r2, [r6, #28]
 800a392:	400b      	ands	r3, r1
 800a394:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a398:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a39a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a39c:	f043 0310 	orr.w	r3, r3, #16
 800a3a0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a3a4:	b1ef      	cbz	r7, 800a3e2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3a6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3a8:	bf0c      	ite	eq
 800a3aa:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3ae:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800a3b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3b4:	4c0d      	ldr	r4, [pc, #52]	; (800a3ec <RCCEx_PLL2_Config+0xec>)
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3be:	f7fc fd0b 	bl	8006dd8 <HAL_GetTick>
 800a3c2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c4:	e004      	b.n	800a3d0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3c6:	f7fc fd07 	bl	8006dd8 <HAL_GetTick>
 800a3ca:	1b40      	subs	r0, r0, r5
 800a3cc:	2802      	cmp	r0, #2
 800a3ce:	d804      	bhi.n	800a3da <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	d5f7      	bpl.n	800a3c6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800a3d6:	2000      	movs	r0, #0
}
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a3da:	2003      	movs	r0, #3
}
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a3de:	2001      	movs	r0, #1
}
 800a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3e8:	e7e4      	b.n	800a3b4 <RCCEx_PLL2_Config+0xb4>
 800a3ea:	bf00      	nop
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	ffff0007 	.word	0xffff0007

0800a3f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3f6:	4c3a      	ldr	r4, [pc, #232]	; (800a4e0 <RCCEx_PLL3_Config+0xec>)
 800a3f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d067      	beq.n	800a4d2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a40c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a40e:	f7fc fce3 	bl	8006dd8 <HAL_GetTick>
 800a412:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a414:	e004      	b.n	800a420 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a416:	f7fc fcdf 	bl	8006dd8 <HAL_GetTick>
 800a41a:	1b43      	subs	r3, r0, r5
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d856      	bhi.n	800a4ce <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	009a      	lsls	r2, r3, #2
 800a424:	d4f7      	bmi.n	800a416 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a428:	6832      	ldr	r2, [r6, #0]
 800a42a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800a42e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a432:	62a3      	str	r3, [r4, #40]	; 0x28
 800a434:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a438:	3b01      	subs	r3, #1
 800a43a:	3a01      	subs	r2, #1
 800a43c:	025b      	lsls	r3, r3, #9
 800a43e:	0412      	lsls	r2, r2, #16
 800a440:	b29b      	uxth	r3, r3
 800a442:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a446:	4313      	orrs	r3, r2
 800a448:	6872      	ldr	r2, [r6, #4]
 800a44a:	3a01      	subs	r2, #1
 800a44c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a450:	4313      	orrs	r3, r2
 800a452:	6932      	ldr	r2, [r6, #16]
 800a454:	3a01      	subs	r2, #1
 800a456:	0612      	lsls	r2, r2, #24
 800a458:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a45c:	4313      	orrs	r3, r2
 800a45e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a462:	6972      	ldr	r2, [r6, #20]
 800a464:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a468:	4313      	orrs	r3, r2
 800a46a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a46c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a46e:	69b3      	ldr	r3, [r6, #24]
 800a470:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a474:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a476:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a478:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a47a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a47c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a480:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a482:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a484:	69f2      	ldr	r2, [r6, #28]
 800a486:	400b      	ands	r3, r1
 800a488:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a48c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a48e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a494:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a498:	b1ef      	cbz	r7, 800a4d6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a49a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a49c:	bf0c      	ite	eq
 800a49e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4a2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800a4a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4a8:	4c0d      	ldr	r4, [pc, #52]	; (800a4e0 <RCCEx_PLL3_Config+0xec>)
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4b2:	f7fc fc91 	bl	8006dd8 <HAL_GetTick>
 800a4b6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4b8:	e004      	b.n	800a4c4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4ba:	f7fc fc8d 	bl	8006dd8 <HAL_GetTick>
 800a4be:	1b40      	subs	r0, r0, r5
 800a4c0:	2802      	cmp	r0, #2
 800a4c2:	d804      	bhi.n	800a4ce <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	d5f7      	bpl.n	800a4ba <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800a4ca:	2000      	movs	r0, #0
}
 800a4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a4ce:	2003      	movs	r0, #3
}
 800a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a4d2:	2001      	movs	r0, #1
}
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4dc:	e7e4      	b.n	800a4a8 <RCCEx_PLL3_Config+0xb4>
 800a4de:	bf00      	nop
 800a4e0:	58024400 	.word	0x58024400
 800a4e4:	ffff0007 	.word	0xffff0007

0800a4e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a4ec:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800a4f0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a4f2:	011d      	lsls	r5, r3, #4
 800a4f4:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800a4f8:	d521      	bpl.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4fa:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800a4fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a500:	f000 8572 	beq.w	800afe8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800a504:	d80e      	bhi.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800a506:	2900      	cmp	r1, #0
 800a508:	f000 85cd 	beq.w	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
 800a50c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a510:	f040 85c6 	bne.w	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a514:	2102      	movs	r1, #2
 800a516:	3008      	adds	r0, #8
 800a518:	f7ff fef2 	bl	800a300 <RCCEx_PLL2_Config>
 800a51c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a51e:	b966      	cbnz	r6, 800a53a <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a520:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a522:	e003      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a524:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800a528:	f040 85ba 	bne.w	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a52c:	4aa3      	ldr	r2, [pc, #652]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a52e:	2600      	movs	r6, #0
 800a530:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a532:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a536:	4319      	orrs	r1, r3
 800a538:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a53a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a53e:	05d8      	lsls	r0, r3, #23
 800a540:	d50a      	bpl.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a544:	2904      	cmp	r1, #4
 800a546:	d806      	bhi.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a548:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a54c:	055f0558 	.word	0x055f0558
 800a550:	030e0576 	.word	0x030e0576
 800a554:	030e      	.short	0x030e
 800a556:	2601      	movs	r6, #1
 800a558:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a55a:	0599      	lsls	r1, r3, #22
 800a55c:	d517      	bpl.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a55e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a560:	2980      	cmp	r1, #128	; 0x80
 800a562:	f000 8570 	beq.w	800b046 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 800a566:	f200 80e1 	bhi.w	800a72c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a56a:	2900      	cmp	r1, #0
 800a56c:	f000 8442 	beq.w	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a570:	2940      	cmp	r1, #64	; 0x40
 800a572:	f040 80e2 	bne.w	800a73a <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a576:	2100      	movs	r1, #0
 800a578:	f104 0008 	add.w	r0, r4, #8
 800a57c:	f7ff fec0 	bl	800a300 <RCCEx_PLL2_Config>
 800a580:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a582:	2d00      	cmp	r5, #0
 800a584:	f000 83f4 	beq.w	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a588:	462e      	mov	r6, r5
 800a58a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a58e:	055f      	lsls	r7, r3, #21
 800a590:	d51a      	bpl.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a592:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800a596:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a59a:	f000 851d 	beq.w	800afd8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800a59e:	f200 80cf 	bhi.w	800a740 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	f000 842d 	beq.w	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800a5a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a5ac:	f040 80d0 	bne.w	800a750 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	f104 0008 	add.w	r0, r4, #8
 800a5b6:	f7ff fea3 	bl	800a300 <RCCEx_PLL2_Config>
 800a5ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	f000 83f6 	beq.w	800adae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a5c2:	462e      	mov	r6, r5
 800a5c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a5c8:	0518      	lsls	r0, r3, #20
 800a5ca:	d51a      	bpl.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a5cc:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800a5d0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a5d4:	f000 8528 	beq.w	800b028 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800a5d8:	f200 80bd 	bhi.w	800a756 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	f000 8403 	beq.w	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800a5e2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a5e6:	f040 80be 	bne.w	800a766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f104 0008 	add.w	r0, r4, #8
 800a5f0:	f7ff fe86 	bl	800a300 <RCCEx_PLL2_Config>
 800a5f4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a5f6:	2d00      	cmp	r5, #0
 800a5f8:	f000 83af 	beq.w	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5fc:	462e      	mov	r6, r5
 800a5fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a602:	0199      	lsls	r1, r3, #6
 800a604:	d51a      	bpl.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800a606:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a608:	2920      	cmp	r1, #32
 800a60a:	f000 84b0 	beq.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a60e:	f200 80ad 	bhi.w	800a76c <HAL_RCCEx_PeriphCLKConfig+0x284>
 800a612:	b139      	cbz	r1, 800a624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a614:	2910      	cmp	r1, #16
 800a616:	f040 80ac 	bne.w	800a772 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61a:	4a68      	ldr	r2, [pc, #416]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a61c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a61e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a622:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a624:	2d00      	cmp	r5, #0
 800a626:	f040 8414 	bne.w	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a62a:	4a64      	ldr	r2, [pc, #400]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a62c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a62e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a630:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a634:	430b      	orrs	r3, r1
 800a636:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a638:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a63c:	04df      	lsls	r7, r3, #19
 800a63e:	d519      	bpl.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a640:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800a642:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a646:	f000 84e7 	beq.w	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800a64a:	f200 8095 	bhi.w	800a778 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800a64e:	2900      	cmp	r1, #0
 800a650:	f000 83c4 	beq.w	800addc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800a654:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a658:	f040 8096 	bne.w	800a788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a65c:	2100      	movs	r1, #0
 800a65e:	f104 0008 	add.w	r0, r4, #8
 800a662:	f7ff fe4d 	bl	800a300 <RCCEx_PLL2_Config>
 800a666:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a668:	2d00      	cmp	r5, #0
 800a66a:	f000 838b 	beq.w	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a66e:	462e      	mov	r6, r5
 800a670:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a674:	0498      	lsls	r0, r3, #18
 800a676:	d51d      	bpl.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a678:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a67a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a67e:	f000 8462 	beq.w	800af46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a682:	f200 8084 	bhi.w	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a686:	b149      	cbz	r1, 800a69c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a688:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a68c:	f040 8088 	bne.w	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a690:	2101      	movs	r1, #1
 800a692:	f104 0008 	add.w	r0, r4, #8
 800a696:	f7ff fe33 	bl	800a300 <RCCEx_PLL2_Config>
 800a69a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a69c:	2d00      	cmp	r5, #0
 800a69e:	f040 83e7 	bne.w	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a6a2:	4a46      	ldr	r2, [pc, #280]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a6a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a6a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a6b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a6b4:	0459      	lsls	r1, r3, #17
 800a6b6:	d51d      	bpl.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a6b8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800a6bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a6c0:	f000 844b 	beq.w	800af5a <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800a6c4:	d86f      	bhi.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800a6c6:	b141      	cbz	r1, 800a6da <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a6c8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a6cc:	d173      	bne.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	f104 0008 	add.w	r0, r4, #8
 800a6d4:	f7ff fe14 	bl	800a300 <RCCEx_PLL2_Config>
 800a6d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	f040 83d0 	bne.w	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a6e0:	4a36      	ldr	r2, [pc, #216]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6e2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800a6e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a6e8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a6f4:	041f      	lsls	r7, r3, #16
 800a6f6:	d50d      	bpl.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800a6f8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a6fa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a6fe:	f000 8419 	beq.w	800af34 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a702:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a706:	f000 8237 	beq.w	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800a70a:	2900      	cmp	r1, #0
 800a70c:	f000 823a 	beq.w	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800a710:	2601      	movs	r6, #1
 800a712:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a714:	01d8      	lsls	r0, r3, #7
 800a716:	d55f      	bpl.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
 800a718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a71a:	2903      	cmp	r1, #3
 800a71c:	f200 84ee 	bhi.w	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xc14>
 800a720:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a724:	04390054 	.word	0x04390054
 800a728:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800a72c:	29c0      	cmp	r1, #192	; 0xc0
 800a72e:	f43f af28 	beq.w	800a582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800a732:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a736:	f43f af24 	beq.w	800a582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800a73a:	2601      	movs	r6, #1
 800a73c:	4635      	mov	r5, r6
 800a73e:	e726      	b.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a740:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800a744:	f43f af3a 	beq.w	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a748:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a74c:	f43f af36 	beq.w	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a750:	2601      	movs	r6, #1
 800a752:	4635      	mov	r5, r6
 800a754:	e738      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a756:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a75a:	f43f af4c 	beq.w	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a75e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a762:	f43f af48 	beq.w	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a766:	2601      	movs	r6, #1
 800a768:	4635      	mov	r5, r6
 800a76a:	e74a      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800a76c:	2930      	cmp	r1, #48	; 0x30
 800a76e:	f43f af59 	beq.w	800a624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a772:	2601      	movs	r6, #1
 800a774:	4635      	mov	r5, r6
 800a776:	e761      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a778:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800a77c:	f43f af74 	beq.w	800a668 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a780:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a784:	f43f af70 	beq.w	800a668 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a788:	2601      	movs	r6, #1
 800a78a:	4635      	mov	r5, r6
 800a78c:	e772      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a78e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800a792:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800a796:	d081      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a798:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800a79c:	f43f af7e 	beq.w	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a7a0:	2601      	movs	r6, #1
 800a7a2:	4635      	mov	r5, r6
 800a7a4:	e786      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7a6:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800a7aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a7ae:	d094      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a7b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800a7b4:	d091      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a7b6:	2601      	movs	r6, #1
 800a7b8:	4635      	mov	r5, r6
 800a7ba:	e79b      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800a7bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7c0:	2102      	movs	r1, #2
 800a7c2:	f104 0008 	add.w	r0, r4, #8
 800a7c6:	f7ff fd9b 	bl	800a300 <RCCEx_PLL2_Config>
 800a7ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	f000 8345 	beq.w	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7d2:	462e      	mov	r6, r5
 800a7d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7d8:	0259      	lsls	r1, r3, #9
 800a7da:	f100 826c 	bmi.w	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a7de:	07d8      	lsls	r0, r3, #31
 800a7e0:	d52f      	bpl.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a7e2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a7e4:	2928      	cmp	r1, #40	; 0x28
 800a7e6:	d82a      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a7e8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a7ec:	0029020a 	.word	0x0029020a
 800a7f0:	00290029 	.word	0x00290029
 800a7f4:	00290029 	.word	0x00290029
 800a7f8:	00290029 	.word	0x00290029
 800a7fc:	0029044a 	.word	0x0029044a
 800a800:	00290029 	.word	0x00290029
 800a804:	00290029 	.word	0x00290029
 800a808:	00290029 	.word	0x00290029
 800a80c:	00290204 	.word	0x00290204
 800a810:	00290029 	.word	0x00290029
 800a814:	00290029 	.word	0x00290029
 800a818:	00290029 	.word	0x00290029
 800a81c:	0029020a 	.word	0x0029020a
 800a820:	00290029 	.word	0x00290029
 800a824:	00290029 	.word	0x00290029
 800a828:	00290029 	.word	0x00290029
 800a82c:	0029020a 	.word	0x0029020a
 800a830:	00290029 	.word	0x00290029
 800a834:	00290029 	.word	0x00290029
 800a838:	00290029 	.word	0x00290029
 800a83c:	020a      	.short	0x020a
 800a83e:	2601      	movs	r6, #1
 800a840:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a842:	0799      	lsls	r1, r3, #30
 800a844:	d517      	bpl.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a846:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a848:	2905      	cmp	r1, #5
 800a84a:	f200 845f 	bhi.w	800b10c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a84e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a852:	000c      	.short	0x000c
 800a854:	0006040c 	.word	0x0006040c
 800a858:	000c000c 	.word	0x000c000c
 800a85c:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a85e:	2101      	movs	r1, #1
 800a860:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a864:	f7ff fdc6 	bl	800a3f4 <RCCEx_PLL3_Config>
 800a868:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a86a:	2d00      	cmp	r5, #0
 800a86c:	f000 82d8 	beq.w	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a870:	462e      	mov	r6, r5
 800a872:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a876:	075f      	lsls	r7, r3, #29
 800a878:	d518      	bpl.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a87a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a87e:	2905      	cmp	r1, #5
 800a880:	f200 8440 	bhi.w	800b104 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800a884:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a888:	03e7000c 	.word	0x03e7000c
 800a88c:	000c0006 	.word	0x000c0006
 800a890:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a894:	2101      	movs	r1, #1
 800a896:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a89a:	f7ff fdab 	bl	800a3f4 <RCCEx_PLL3_Config>
 800a89e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	f000 82c7 	beq.w	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8a6:	462e      	mov	r6, r5
 800a8a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a8ac:	0698      	lsls	r0, r3, #26
 800a8ae:	d51f      	bpl.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a8b0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a8b4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a8b8:	f000 8363 	beq.w	800af82 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800a8bc:	f200 811c 	bhi.w	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800a8c0:	b149      	cbz	r1, 800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800a8c2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a8c6:	f040 8121 	bne.w	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	f104 0008 	add.w	r0, r4, #8
 800a8d0:	f7ff fd16 	bl	800a300 <RCCEx_PLL2_Config>
 800a8d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	f040 82b7 	bne.w	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8dc:	4ab0      	ldr	r2, [pc, #704]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a8de:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a8e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a8e4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a8e8:	430b      	orrs	r3, r1
 800a8ea:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a8f0:	0659      	lsls	r1, r3, #25
 800a8f2:	d51f      	bpl.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8f4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a8f8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a8fc:	f000 8306 	beq.w	800af0c <HAL_RCCEx_PeriphCLKConfig+0xa24>
 800a900:	f200 8107 	bhi.w	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800a904:	b149      	cbz	r1, 800a91a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a906:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a90a:	f040 810c 	bne.w	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a90e:	2100      	movs	r1, #0
 800a910:	f104 0008 	add.w	r0, r4, #8
 800a914:	f7ff fcf4 	bl	800a300 <RCCEx_PLL2_Config>
 800a918:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	f040 82b4 	bne.w	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a920:	4a9f      	ldr	r2, [pc, #636]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a922:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a926:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a928:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a92c:	430b      	orrs	r3, r1
 800a92e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a930:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a934:	061f      	lsls	r7, r3, #24
 800a936:	d51f      	bpl.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a938:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a93c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a940:	f000 82ee 	beq.w	800af20 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800a944:	f200 80f2 	bhi.w	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x644>
 800a948:	b149      	cbz	r1, 800a95e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a94a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a94e:	f040 80f7 	bne.w	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a952:	2100      	movs	r1, #0
 800a954:	f104 0008 	add.w	r0, r4, #8
 800a958:	f7ff fcd2 	bl	800a300 <RCCEx_PLL2_Config>
 800a95c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a95e:	2d00      	cmp	r5, #0
 800a960:	f040 828a 	bne.w	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a964:	4a8e      	ldr	r2, [pc, #568]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a966:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a96a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a96c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a970:	430b      	orrs	r3, r1
 800a972:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a974:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a978:	0718      	lsls	r0, r3, #28
 800a97a:	d50d      	bpl.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a97c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a980:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a984:	f000 8310 	beq.w	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a988:	4985      	ldr	r1, [pc, #532]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a98a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a98c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a990:	4313      	orrs	r3, r2
 800a992:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a994:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a998:	06d9      	lsls	r1, r3, #27
 800a99a:	d50d      	bpl.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a99c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a9a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a9a4:	f000 830c 	beq.w	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9a8:	497d      	ldr	r1, [pc, #500]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a9aa:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800a9ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a9b8:	031f      	lsls	r7, r3, #12
 800a9ba:	d50e      	bpl.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
 800a9bc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a9c0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a9c4:	f000 8102 	beq.w	800abcc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800a9c8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a9cc:	f000 8104 	beq.w	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	f000 8290 	beq.w	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a9d6:	2601      	movs	r6, #1
 800a9d8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9da:	0358      	lsls	r0, r3, #13
 800a9dc:	d50f      	bpl.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
 800a9de:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a9e2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a9e6:	f000 80dd 	beq.w	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a9ea:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800a9ee:	f000 80df 	beq.w	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800a9f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a9f6:	f000 8275 	beq.w	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800a9fa:	2601      	movs	r6, #1
 800a9fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9fe:	03d9      	lsls	r1, r3, #15
 800aa00:	d509      	bpl.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800aa02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aa04:	2900      	cmp	r1, #0
 800aa06:	f000 8258 	beq.w	800aeba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800aa0a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800aa0e:	f000 81d9 	beq.w	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800aa12:	2601      	movs	r6, #1
 800aa14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa16:	009f      	lsls	r7, r3, #2
 800aa18:	f100 80ff 	bmi.w	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa1c:	0398      	lsls	r0, r3, #14
 800aa1e:	d50e      	bpl.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800aa20:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800aa24:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aa28:	f000 823e 	beq.w	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800aa2c:	f240 808b 	bls.w	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800aa30:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800aa34:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aa38:	f000 8088 	beq.w	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa3c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa3e:	02d9      	lsls	r1, r3, #11
 800aa40:	d508      	bpl.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa42:	4a57      	ldr	r2, [pc, #348]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aa44:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800aa46:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800aa48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aa50:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aa54:	00df      	lsls	r7, r3, #3
 800aa56:	d509      	bpl.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aa58:	4a51      	ldr	r2, [pc, #324]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aa5a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800aa5e:	6913      	ldr	r3, [r2, #16]
 800aa60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa64:	430b      	orrs	r3, r1
 800aa66:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa68:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aa6c:	029d      	lsls	r5, r3, #10
 800aa6e:	d508      	bpl.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa70:	4a4b      	ldr	r2, [pc, #300]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aa72:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800aa74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800aa76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aa82:	0058      	lsls	r0, r3, #1
 800aa84:	d50b      	bpl.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa86:	4b46      	ldr	r3, [pc, #280]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa8e:	611a      	str	r2, [r3, #16]
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800aa96:	430a      	orrs	r2, r1
 800aa98:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da08      	bge.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aaa2:	4a3f      	ldr	r2, [pc, #252]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aaa4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aaa6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800aaa8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800aaac:	430b      	orrs	r3, r1
 800aaae:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aab0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aab4:	0219      	lsls	r1, r3, #8
 800aab6:	d508      	bpl.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aab8:	4a39      	ldr	r2, [pc, #228]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800aaba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800aabe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aac0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800aac4:	430b      	orrs	r3, r1
 800aac6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aac8:	6862      	ldr	r2, [r4, #4]
 800aaca:	07d3      	lsls	r3, r2, #31
 800aacc:	f100 80b1 	bmi.w	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aad0:	0797      	lsls	r7, r2, #30
 800aad2:	f100 80bb 	bmi.w	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aad6:	0755      	lsls	r5, r2, #29
 800aad8:	f100 80c5 	bmi.w	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aadc:	0710      	lsls	r0, r2, #28
 800aade:	f100 80cf 	bmi.w	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aae2:	06d1      	lsls	r1, r2, #27
 800aae4:	f100 80d9 	bmi.w	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aae8:	0692      	lsls	r2, r2, #26
 800aaea:	f100 812a 	bmi.w	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
 800aaee:	1e30      	subs	r0, r6, #0
 800aaf0:	bf18      	it	ne
 800aaf2:	2001      	movne	r0, #1
}
 800aaf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aaf8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800aafc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ab00:	f43f aee9 	beq.w	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800ab04:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800ab08:	f43f aee5 	beq.w	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800ab0c:	2601      	movs	r6, #1
 800ab0e:	4635      	mov	r5, r6
 800ab10:	e6ee      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ab12:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800ab16:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ab1a:	f43f aefe 	beq.w	800a91a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ab1e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800ab22:	f43f aefa 	beq.w	800a91a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ab26:	2601      	movs	r6, #1
 800ab28:	4635      	mov	r5, r6
 800ab2a:	e703      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab2c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800ab30:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ab34:	f43f af13 	beq.w	800a95e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab38:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800ab3c:	f43f af0f 	beq.w	800a95e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab40:	2601      	movs	r6, #1
 800ab42:	4635      	mov	r5, r6
 800ab44:	e718      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
 800ab46:	2900      	cmp	r1, #0
 800ab48:	f47f af78 	bne.w	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	f040 81c5 	bne.w	800aedc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab52:	4a13      	ldr	r2, [pc, #76]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800ab54:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ab58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ab5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab62:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab66:	e76a      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab68:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	f000 8114 	beq.w	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab70:	462e      	mov	r6, r5
 800ab72:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab76:	e4f0      	b.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab78:	2101      	movs	r1, #1
 800ab7a:	f104 0008 	add.w	r0, r4, #8
 800ab7e:	f7ff fbbf 	bl	800a300 <RCCEx_PLL2_Config>
 800ab82:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ab84:	2d00      	cmp	r5, #0
 800ab86:	f040 8147 	bne.w	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab8a:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800ab8c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800ab8e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ab90:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ab94:	430b      	orrs	r3, r1
 800ab96:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab98:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab9c:	e5ba      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aba4:	2101      	movs	r1, #1
 800aba6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800abaa:	f7ff fc23 	bl	800a3f4 <RCCEx_PLL3_Config>
 800abae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800abb0:	2d00      	cmp	r5, #0
 800abb2:	f040 8171 	bne.w	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abb6:	4aba      	ldr	r2, [pc, #744]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abb8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800abbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800abbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800abc2:	430b      	orrs	r3, r1
 800abc4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800abca:	e718      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abcc:	2102      	movs	r1, #2
 800abce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800abd2:	f7ff fc0f 	bl	800a3f4 <RCCEx_PLL3_Config>
 800abd6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800abd8:	2d00      	cmp	r5, #0
 800abda:	f040 8159 	bne.w	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abde:	4ab0      	ldr	r2, [pc, #704]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abe0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800abe4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800abe6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800abea:	430b      	orrs	r3, r1
 800abec:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abee:	e9d4 3200 	ldrd	r3, r2, [r4]
 800abf2:	e6f2      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abf4:	2101      	movs	r1, #1
 800abf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800abfa:	f7ff fbfb 	bl	800a3f4 <RCCEx_PLL3_Config>
 800abfe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	f040 8105 	bne.w	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac06:	4aa6      	ldr	r2, [pc, #664]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ac08:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800ac0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ac0c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ac10:	430b      	orrs	r3, r1
 800ac12:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac14:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac18:	e613      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac1a:	2102      	movs	r1, #2
 800ac1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ac20:	f7ff fbe8 	bl	800a3f4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f43f aef7 	beq.w	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
 800ac2e:	2601      	movs	r6, #1
 800ac30:	e6f4      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac32:	2100      	movs	r1, #0
 800ac34:	f104 0008 	add.w	r0, r4, #8
 800ac38:	f7ff fb62 	bl	800a300 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac3c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f af46 	beq.w	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac44:	0797      	lsls	r7, r2, #30
 800ac46:	4606      	mov	r6, r0
 800ac48:	f57f af45 	bpl.w	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	f104 0008 	add.w	r0, r4, #8
 800ac52:	f7ff fb55 	bl	800a300 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ac56:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f43f af3c 	beq.w	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ac5e:	0755      	lsls	r5, r2, #29
 800ac60:	4606      	mov	r6, r0
 800ac62:	f57f af3b 	bpl.w	800aadc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac66:	2102      	movs	r1, #2
 800ac68:	f104 0008 	add.w	r0, r4, #8
 800ac6c:	f7ff fb48 	bl	800a300 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ac70:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f43f af32 	beq.w	800aadc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ac78:	4606      	mov	r6, r0
 800ac7a:	0710      	lsls	r0, r2, #28
 800ac7c:	f57f af31 	bpl.w	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac80:	2100      	movs	r1, #0
 800ac82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ac86:	f7ff fbb5 	bl	800a3f4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac8a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f af28 	beq.w	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac92:	06d1      	lsls	r1, r2, #27
 800ac94:	4606      	mov	r6, r0
 800ac96:	f57f af27 	bpl.w	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac9a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800ac9e:	2101      	movs	r1, #1
 800aca0:	4628      	mov	r0, r5
 800aca2:	f7ff fba7 	bl	800a3f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f000 812e 	beq.w	800af08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800acac:	6863      	ldr	r3, [r4, #4]
 800acae:	069b      	lsls	r3, r3, #26
 800acb0:	d550      	bpl.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800acb2:	4606      	mov	r6, r0
 800acb4:	e047      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acb6:	4f7b      	ldr	r7, [pc, #492]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acbe:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800acc0:	f7fc f88a 	bl	8006dd8 <HAL_GetTick>
 800acc4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acc6:	e006      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acc8:	f7fc f886 	bl	8006dd8 <HAL_GetTick>
 800accc:	eba0 0008 	sub.w	r0, r0, r8
 800acd0:	2864      	cmp	r0, #100	; 0x64
 800acd2:	f200 81df 	bhi.w	800b094 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	05da      	lsls	r2, r3, #23
 800acda:	d5f5      	bpl.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 800acdc:	2d00      	cmp	r5, #0
 800acde:	f040 8208 	bne.w	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ace2:	4b6f      	ldr	r3, [pc, #444]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ace4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800ace8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800acea:	4051      	eors	r1, r2
 800acec:	f411 7f40 	tst.w	r1, #768	; 0x300
 800acf0:	d00d      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800acf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acf6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800acfa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800acfe:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ad02:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800ad06:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800ad08:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad0a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800ad0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ad12:	f000 81d0 	beq.w	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad16:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800ad1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad1e:	f000 81de 	beq.w	800b0de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ad22:	4a5f      	ldr	r2, [pc, #380]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad24:	6913      	ldr	r3, [r2, #16]
 800ad26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad2a:	6113      	str	r3, [r2, #16]
 800ad2c:	4a5c      	ldr	r2, [pc, #368]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800ad32:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ad34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ad40:	e54d      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad42:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad46:	2102      	movs	r1, #2
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7ff fb53 	bl	800a3f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f43f aecd 	beq.w	800aaee <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
 800ad54:	2001      	movs	r0, #1
}
 800ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad5a:	4a51      	ldr	r2, [pc, #324]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad5c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800ad60:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ad62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800ad66:	430b      	orrs	r3, r1
 800ad68:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ad6e:	e448      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ad70:	4a4b      	ldr	r2, [pc, #300]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad72:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ad74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ad76:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ad7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ad82:	e404      	b.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad84:	4a46      	ldr	r2, [pc, #280]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad86:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ad88:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ad8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad92:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ad96:	e46d      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad98:	4a41      	ldr	r2, [pc, #260]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ad9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ad9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ad9e:	f023 0307 	bic.w	r3, r3, #7
 800ada2:	430b      	orrs	r3, r1
 800ada4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ada6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800adaa:	f7ff bbd6 	b.w	800a55a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800adae:	4a3c      	ldr	r2, [pc, #240]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800adb0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800adb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800adb6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800adba:	430b      	orrs	r3, r1
 800adbc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800adbe:	e9d4 3200 	ldrd	r3, r2, [r4]
 800adc2:	e401      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adc4:	2102      	movs	r1, #2
 800adc6:	f104 0008 	add.w	r0, r4, #8
 800adca:	f7ff fa99 	bl	800a300 <RCCEx_PLL2_Config>
 800adce:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800add0:	2d00      	cmp	r5, #0
 800add2:	d079      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800add4:	462e      	mov	r6, r5
 800add6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800adda:	e61c      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800addc:	4a30      	ldr	r2, [pc, #192]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800adde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ade0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ade6:	e43f      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ade8:	4a2d      	ldr	r2, [pc, #180]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800adea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800adec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800adf2:	e400      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf4:	4a2a      	ldr	r2, [pc, #168]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800adf6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800adf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800adfe:	f7ff bbc0 	b.w	800a582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae02:	4a27      	ldr	r2, [pc, #156]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ae04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ae06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ae0c:	f7ff bbd6 	b.w	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae10:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae14:	462e      	mov	r6, r5
 800ae16:	e514      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae18:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae1c:	462e      	mov	r6, r5
 800ae1e:	e479      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae20:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ae22:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ae24:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae2e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae32:	e520      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae34:	4a1a      	ldr	r2, [pc, #104]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ae36:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ae3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ae3c:	f023 0307 	bic.w	r3, r3, #7
 800ae40:	430b      	orrs	r3, r1
 800ae42:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae44:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae48:	e530      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae4a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae4e:	462e      	mov	r6, r5
 800ae50:	e54e      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae52:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae56:	462e      	mov	r6, r5
 800ae58:	f7ff bbf0 	b.w	800a63c <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae5c:	4a10      	ldr	r2, [pc, #64]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ae5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	430b      	orrs	r3, r1
 800ae68:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae6e:	e4b3      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae70:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae74:	462e      	mov	r6, r5
 800ae76:	e41d      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ae78:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae7c:	462e      	mov	r6, r5
 800ae7e:	e57b      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae80:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae84:	462e      	mov	r6, r5
 800ae86:	e435      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ae88:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae8c:	462e      	mov	r6, r5
 800ae8e:	e551      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ae90:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae94:	462e      	mov	r6, r5
 800ae96:	e5a0      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae98:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae9c:	462e      	mov	r6, r5
 800ae9e:	e5ae      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x516>
 800aea0:	58024400 	.word	0x58024400
 800aea4:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea8:	4a9a      	ldr	r2, [pc, #616]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aeaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800aeac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	f43f ae4d 	beq.w	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aeb8:	e010      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeba:	4a96      	ldr	r2, [pc, #600]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aebc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800aebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aec2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	d185      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aec8:	4a92      	ldr	r2, [pc, #584]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aeca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aecc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800aece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aed2:	430b      	orrs	r3, r1
 800aed4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aed6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aeda:	e59c      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aedc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aee0:	462e      	mov	r6, r5
 800aee2:	e5ac      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee4:	4a8b      	ldr	r2, [pc, #556]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aee6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800aee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeec:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800aeee:	2d00      	cmp	r5, #0
 800aef0:	f43f ae61 	beq.w	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800aef4:	e7d0      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef6:	f104 0008 	add.w	r0, r4, #8
 800aefa:	f7ff fa01 	bl	800a300 <RCCEx_PLL2_Config>
 800aefe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af00:	2d00      	cmp	r5, #0
 800af02:	f43f ae6c 	beq.w	800abde <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800af06:	e7c3      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af08:	6862      	ldr	r2, [r4, #4]
 800af0a:	e5ed      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af0c:	2102      	movs	r1, #2
 800af0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af12:	f7ff fa6f 	bl	800a3f4 <RCCEx_PLL3_Config>
 800af16:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af18:	2d00      	cmp	r5, #0
 800af1a:	f43f ad01 	beq.w	800a920 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800af1e:	e7b3      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af20:	2102      	movs	r1, #2
 800af22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af26:	f7ff fa65 	bl	800a3f4 <RCCEx_PLL3_Config>
 800af2a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af2c:	2d00      	cmp	r5, #0
 800af2e:	f43f ad19 	beq.w	800a964 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800af32:	e7a1      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4a77      	ldr	r2, [pc, #476]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800af36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800af38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800af3e:	2d00      	cmp	r5, #0
 800af40:	f43f ae23 	beq.w	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 800af44:	e768      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af46:	2101      	movs	r1, #1
 800af48:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af4c:	f7ff fa52 	bl	800a3f4 <RCCEx_PLL3_Config>
 800af50:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af52:	2d00      	cmp	r5, #0
 800af54:	f43f aba5 	beq.w	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800af58:	e78a      	b.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af5a:	2101      	movs	r1, #1
 800af5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af60:	f7ff fa48 	bl	800a3f4 <RCCEx_PLL3_Config>
 800af64:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af66:	2d00      	cmp	r5, #0
 800af68:	f43f abba 	beq.w	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800af6c:	e788      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af6e:	2102      	movs	r1, #2
 800af70:	f104 0008 	add.w	r0, r4, #8
 800af74:	f7ff f9c4 	bl	800a300 <RCCEx_PLL2_Config>
 800af78:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	f43f ab55 	beq.w	800a62a <HAL_RCCEx_PeriphCLKConfig+0x142>
 800af80:	e767      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af82:	2102      	movs	r1, #2
 800af84:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af88:	f7ff fa34 	bl	800a3f4 <RCCEx_PLL3_Config>
 800af8c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af8e:	2d00      	cmp	r5, #0
 800af90:	f43f aca4 	beq.w	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800af94:	e759      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af96:	4a5f      	ldr	r2, [pc, #380]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800af98:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800af9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af9e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	f43f af5b 	beq.w	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x974>
 800afa6:	e414      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afa8:	2102      	movs	r1, #2
 800afaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800afae:	f7ff fa21 	bl	800a3f4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800afb2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f43f ace6 	beq.w	800a988 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
 800afbc:	2601      	movs	r6, #1
 800afbe:	e4e3      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afc0:	2102      	movs	r1, #2
 800afc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800afc6:	f7ff fa15 	bl	800a3f4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800afca:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f acea 	beq.w	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
 800afd4:	2601      	movs	r6, #1
 800afd6:	e4e7      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afd8:	2100      	movs	r1, #0
 800afda:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800afde:	f7ff fa09 	bl	800a3f4 <RCCEx_PLL3_Config>
 800afe2:	4605      	mov	r5, r0
        break;
 800afe4:	f7ff baea 	b.w	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afe8:	2102      	movs	r1, #2
 800afea:	3028      	adds	r0, #40	; 0x28
 800afec:	f7ff fa02 	bl	800a3f4 <RCCEx_PLL3_Config>
 800aff0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800aff2:	2e00      	cmp	r6, #0
 800aff4:	f43f aa94 	beq.w	800a520 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800aff8:	f7ff ba9f 	b.w	800a53a <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800affc:	4a45      	ldr	r2, [pc, #276]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
 800affe:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b000:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b006:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b008:	e5af      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b00a:	2100      	movs	r1, #0
 800b00c:	f104 0008 	add.w	r0, r4, #8
 800b010:	f7ff f976 	bl	800a300 <RCCEx_PLL2_Config>
 800b014:	4605      	mov	r5, r0
        break;
 800b016:	e5a8      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b018:	2100      	movs	r1, #0
 800b01a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b01e:	f7ff f9e9 	bl	800a3f4 <RCCEx_PLL3_Config>
 800b022:	4605      	mov	r5, r0
        break;
 800b024:	f7ff bb20 	b.w	800a668 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b028:	2100      	movs	r1, #0
 800b02a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b02e:	f7ff f9e1 	bl	800a3f4 <RCCEx_PLL3_Config>
 800b032:	4605      	mov	r5, r0
        break;
 800b034:	f7ff badf 	b.w	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b038:	2100      	movs	r1, #0
 800b03a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b03e:	f7ff f9d9 	bl	800a3f4 <RCCEx_PLL3_Config>
 800b042:	4605      	mov	r5, r0
        break;
 800b044:	e591      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b046:	2100      	movs	r1, #0
 800b048:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b04c:	f7ff f9d2 	bl	800a3f4 <RCCEx_PLL3_Config>
 800b050:	4605      	mov	r5, r0
        break;
 800b052:	f7ff ba96 	b.w	800a582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b056:	2101      	movs	r1, #1
 800b058:	f104 0008 	add.w	r0, r4, #8
 800b05c:	f7ff f950 	bl	800a300 <RCCEx_PLL2_Config>
 800b060:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b062:	2d00      	cmp	r5, #0
 800b064:	f43f aee6 	beq.w	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800b068:	e41d      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b06a:	2101      	movs	r1, #1
 800b06c:	f104 0008 	add.w	r0, r4, #8
 800b070:	f7ff f946 	bl	800a300 <RCCEx_PLL2_Config>
 800b074:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b076:	2d00      	cmp	r5, #0
 800b078:	f43f aed2 	beq.w	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b07c:	f7ff bbf8 	b.w	800a870 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b080:	2101      	movs	r1, #1
 800b082:	f104 0008 	add.w	r0, r4, #8
 800b086:	f7ff f93b 	bl	800a300 <RCCEx_PLL2_Config>
 800b08a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b08c:	2d00      	cmp	r5, #0
 800b08e:	f43f adba 	beq.w	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800b092:	e6bd      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
 800b094:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b096:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800b09a:	4635      	mov	r5, r6
 800b09c:	f7ff bb9f 	b.w	800a7de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0a0:	2601      	movs	r6, #1
 800b0a2:	f7ff ba4c 	b.w	800a53e <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a6:	4a1b      	ldr	r2, [pc, #108]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b0a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ae:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b0b0:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800b0b2:	f7ff ba3b 	b.w	800a52c <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800b0b6:	f7fb fe8f 	bl	8006dd8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0ba:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
 800b0be:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0c0:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0c4:	e004      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0c6:	f7fb fe87 	bl	8006dd8 <HAL_GetTick>
 800b0ca:	1bc0      	subs	r0, r0, r7
 800b0cc:	4548      	cmp	r0, r9
 800b0ce:	d8e1      	bhi.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0d0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b0d4:	079b      	lsls	r3, r3, #30
 800b0d6:	d5f6      	bpl.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0d8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800b0dc:	e61b      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b0de:	490d      	ldr	r1, [pc, #52]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800b0e2:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800b0e6:	690a      	ldr	r2, [r1, #16]
 800b0e8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	610b      	str	r3, [r1, #16]
 800b0f0:	e61c      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b0f6:	462e      	mov	r6, r5
 800b0f8:	f7ff bb71 	b.w	800a7de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
 800b0fc:	2601      	movs	r6, #1
 800b0fe:	4635      	mov	r5, r6
 800b100:	f7ff bb6a 	b.w	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b104:	2601      	movs	r6, #1
 800b106:	4635      	mov	r5, r6
 800b108:	f7ff bbd0 	b.w	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b10c:	2601      	movs	r6, #1
 800b10e:	4635      	mov	r5, r6
 800b110:	f7ff bbb1 	b.w	800a876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800b114:	58024400 	.word	0x58024400
 800b118:	00ffffcf 	.word	0x00ffffcf

0800b11c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b11c:	4b4f      	ldr	r3, [pc, #316]	; (800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b11e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b120:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b122:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b124:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800b126:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b12a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b12e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800b130:	d05c      	beq.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b132:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b136:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b13a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b13e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b142:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b144:	ee07 4a90 	vmov	s15, r4
 800b148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b14c:	d003      	beq.n	800b156 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800b14e:	2902      	cmp	r1, #2
 800b150:	d075      	beq.n	800b23e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800b152:	2900      	cmp	r1, #0
 800b154:	d04f      	beq.n	800b1f6 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b156:	ee07 2a90 	vmov	s15, r2
 800b15a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800b15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b164:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b168:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b170:	ee06 3a90 	vmov	s13, r3
 800b174:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b178:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b17c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b180:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b184:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b188:	4a34      	ldr	r2, [pc, #208]	; (800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b18a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b18e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800b190:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b194:	ee07 3a10 	vmov	s14, r3
 800b198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b19c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b19e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b1a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1aa:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800b1b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b1b4:	ee07 3a10 	vmov	s14, r3
 800b1b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800b1ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1da:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b1e6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b1ea:	4770      	bx	lr
 800b1ec:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1ee:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1f2:	6082      	str	r2, [r0, #8]
}
 800b1f4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1f6:	6819      	ldr	r1, [r3, #0]
 800b1f8:	0689      	lsls	r1, r1, #26
 800b1fa:	d527      	bpl.n	800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1fc:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1fe:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b202:	4919      	ldr	r1, [pc, #100]	; (800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b204:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b212:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b216:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b21a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b21c:	ee06 3a90 	vmov	s13, r3
 800b220:	ee05 1a90 	vmov	s11, r1
 800b224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b228:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b22c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b230:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b234:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b238:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b23c:	e7a4      	b.n	800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b23e:	ee07 2a90 	vmov	s15, r2
 800b242:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b24a:	e78a      	b.n	800b162 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b24c:	ee07 2a90 	vmov	s15, r2
 800b250:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800b254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b258:	e783      	b.n	800b162 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800b25a:	bf00      	nop
 800b25c:	58024400 	.word	0x58024400
 800b260:	4a742400 	.word	0x4a742400
 800b264:	39000000 	.word	0x39000000
 800b268:	03d09000 	.word	0x03d09000
 800b26c:	4bbebc20 	.word	0x4bbebc20
 800b270:	4c742400 	.word	0x4c742400

0800b274 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b274:	4b4f      	ldr	r3, [pc, #316]	; (800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b276:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b278:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b27a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b27c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800b27e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b282:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b286:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800b288:	d05c      	beq.n	800b344 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b28a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b28e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b292:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b296:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b29a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b29c:	ee07 4a90 	vmov	s15, r4
 800b2a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b2a4:	d003      	beq.n	800b2ae <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800b2a6:	2902      	cmp	r1, #2
 800b2a8:	d075      	beq.n	800b396 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	d04f      	beq.n	800b34e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2ae:	ee07 2a90 	vmov	s15, r2
 800b2b2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800b2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b2c0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b3bc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c8:	ee06 3a90 	vmov	s13, r3
 800b2cc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b2d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b2d4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b2d8:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b2dc:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2e0:	4a34      	ldr	r2, [pc, #208]	; (800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b2e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b2e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b2e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b2ec:	ee07 3a10 	vmov	s14, r3
 800b2f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b2f4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b302:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b306:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b308:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b30c:	ee07 3a10 	vmov	s14, r3
 800b310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b314:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b31c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b320:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b324:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b326:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b332:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b33e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b342:	4770      	bx	lr
 800b344:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b346:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b34a:	6082      	str	r2, [r0, #8]
}
 800b34c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	0689      	lsls	r1, r1, #26
 800b352:	d527      	bpl.n	800b3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b354:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b356:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b35a:	4919      	ldr	r1, [pc, #100]	; (800b3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b35c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b362:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b36a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b3bc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b372:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b374:	ee06 3a90 	vmov	s13, r3
 800b378:	ee05 1a90 	vmov	s11, r1
 800b37c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b380:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b384:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b388:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b38c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b390:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b394:	e7a4      	b.n	800b2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b396:	ee07 2a90 	vmov	s15, r2
 800b39a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b39e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3a2:	e78a      	b.n	800b2ba <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3a4:	ee07 2a90 	vmov	s15, r2
 800b3a8:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800b3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3b0:	e783      	b.n	800b2ba <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800b3b2:	bf00      	nop
 800b3b4:	58024400 	.word	0x58024400
 800b3b8:	4a742400 	.word	0x4a742400
 800b3bc:	39000000 	.word	0x39000000
 800b3c0:	03d09000 	.word	0x03d09000
 800b3c4:	4bbebc20 	.word	0x4bbebc20
 800b3c8:	4c742400 	.word	0x4c742400

0800b3cc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3cc:	4b4f      	ldr	r3, [pc, #316]	; (800b50c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800b3ce:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b3d2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b3d4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800b3d6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b3da:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3de:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800b3e0:	d05c      	beq.n	800b49c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3e2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b3e6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3ea:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3ee:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b3f2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3f4:	ee07 4a90 	vmov	s15, r4
 800b3f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b3fc:	d07e      	beq.n	800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800b3fe:	2902      	cmp	r1, #2
 800b400:	d075      	beq.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800b402:	2900      	cmp	r1, #0
 800b404:	d04f      	beq.n	800b4a6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b406:	ee07 2a90 	vmov	s15, r2
 800b40a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b510 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800b40e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b418:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b514 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b420:	ee06 3a90 	vmov	s13, r3
 800b424:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b428:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b42c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b430:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b434:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b438:	4a34      	ldr	r2, [pc, #208]	; (800b50c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800b43a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b43e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b440:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b444:	ee07 3a10 	vmov	s14, r3
 800b448:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b44c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b44e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b45e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b460:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b464:	ee07 3a10 	vmov	s14, r3
 800b468:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b46c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b478:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b47c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b47e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b492:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b496:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b49a:	4770      	bx	lr
 800b49c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b49e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b4a2:	6082      	str	r2, [r0, #8]
}
 800b4a4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a6:	6819      	ldr	r1, [r3, #0]
 800b4a8:	0689      	lsls	r1, r1, #26
 800b4aa:	d5ac      	bpl.n	800b406 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ac:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ae:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4b2:	4919      	ldr	r1, [pc, #100]	; (800b518 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ba:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4c2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b514 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ca:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4cc:	ee06 3a90 	vmov	s13, r3
 800b4d0:	ee05 1a90 	vmov	s11, r1
 800b4d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b4d8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b4dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b4e0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b4e4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b4e8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b4ec:	e7a4      	b.n	800b438 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ee:	ee07 2a90 	vmov	s15, r2
 800b4f2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b51c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800b4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4fa:	e78a      	b.n	800b412 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4fc:	ee07 2a90 	vmov	s15, r2
 800b500:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b520 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800b504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b508:	e783      	b.n	800b412 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800b50a:	bf00      	nop
 800b50c:	58024400 	.word	0x58024400
 800b510:	4c742400 	.word	0x4c742400
 800b514:	39000000 	.word	0x39000000
 800b518:	03d09000 	.word	0x03d09000
 800b51c:	4bbebc20 	.word	0x4bbebc20
 800b520:	4a742400 	.word	0x4a742400

0800b524 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b524:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b528:	430b      	orrs	r3, r1
{
 800b52a:	b500      	push	{lr}
 800b52c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b52e:	f000 8084 	beq.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b532:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800b536:	430b      	orrs	r3, r1
 800b538:	d039      	beq.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b53a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800b53e:	430b      	orrs	r3, r1
 800b540:	f000 80e6 	beq.w	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b544:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800b548:	430b      	orrs	r3, r1
 800b54a:	f000 8089 	beq.w	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b54e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800b552:	430b      	orrs	r3, r1
 800b554:	d061      	beq.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b556:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800b55a:	430b      	orrs	r3, r1
 800b55c:	f000 8112 	beq.w	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b560:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800b564:	430b      	orrs	r3, r1
 800b566:	f000 80a3 	beq.w	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b56a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800b56e:	430b      	orrs	r3, r1
 800b570:	f000 80fa 	beq.w	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b574:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800b578:	430b      	orrs	r3, r1
 800b57a:	f000 8143 	beq.w	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b57e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800b582:	ea50 0301 	orrs.w	r3, r0, r1
 800b586:	d137      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b588:	4a99      	ldr	r2, [pc, #612]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b58a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b58c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800b590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b594:	f000 8083 	beq.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b59c:	f000 8156 	beq.w	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b5a0:	bb53      	cbnz	r3, 800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5a2:	6810      	ldr	r0, [r2, #0]
 800b5a4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b5a8:	d044      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800b5aa:	4892      	ldr	r0, [pc, #584]	; (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b5ac:	e042      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b5ae:	4a90      	ldr	r2, [pc, #576]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b5b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b5b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800b5b6:	2b80      	cmp	r3, #128	; 0x80
 800b5b8:	f000 80a5 	beq.w	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b5bc:	d920      	bls.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800b5be:	2bc0      	cmp	r3, #192	; 0xc0
 800b5c0:	d037      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c6:	d117      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ca:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5d0:	0749      	lsls	r1, r1, #29
 800b5d2:	d502      	bpl.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80c1 	beq.w	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5da:	4a85      	ldr	r2, [pc, #532]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b5dc:	6812      	ldr	r2, [r2, #0]
 800b5de:	05d0      	lsls	r0, r2, #23
 800b5e0:	d503      	bpl.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800b5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e6:	f000 8101 	beq.w	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5ea:	4a81      	ldr	r2, [pc, #516]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	0391      	lsls	r1, r2, #14
 800b5f0:	d502      	bpl.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b5f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5f6:	d0d8      	beq.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800b5f8:	2000      	movs	r0, #0
}
 800b5fa:	b005      	add	sp, #20
 800b5fc:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800b600:	2b00      	cmp	r3, #0
 800b602:	d04c      	beq.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b604:	2b40      	cmp	r3, #64	; 0x40
 800b606:	d1f7      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b608:	6810      	ldr	r0, [r2, #0]
 800b60a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b60e:	d011      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b610:	a801      	add	r0, sp, #4
 800b612:	f7ff fd83 	bl	800b11c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b616:	9801      	ldr	r0, [sp, #4]
 800b618:	e00c      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b61a:	4a75      	ldr	r2, [pc, #468]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b61c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b61e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800b622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b626:	d06e      	beq.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b628:	d937      	bls.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b62a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b62e:	f040 8087 	bne.w	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b632:	4871      	ldr	r0, [pc, #452]	; (800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800b634:	b005      	add	sp, #20
 800b636:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b63a:	4b6d      	ldr	r3, [pc, #436]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800b642:	2b04      	cmp	r3, #4
 800b644:	d8d8      	bhi.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b646:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b6ef 	.word	0x0800b6ef
 800b650:	0800b6cb 	.word	0x0800b6cb
 800b654:	0800b6db 	.word	0x0800b6db
 800b658:	0800b633 	.word	0x0800b633
 800b65c:	0800b6d7 	.word	0x0800b6d7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b660:	4a63      	ldr	r2, [pc, #396]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b662:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b664:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800b668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b66c:	d04b      	beq.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b66e:	d944      	bls.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800b670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b674:	d0dd      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b67a:	d1bd      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b67c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b67e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b684:	0752      	lsls	r2, r2, #29
 800b686:	d5a8      	bpl.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1a6      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b68c:	4b58      	ldr	r3, [pc, #352]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b68e:	485b      	ldr	r0, [pc, #364]	; (800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b696:	40d8      	lsrs	r0, r3
 800b698:	e7cc      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d154      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b69e:	6810      	ldr	r0, [r2, #0]
 800b6a0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b6a4:	d0c6      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6a6:	a801      	add	r0, sp, #4
 800b6a8:	f7ff fe90 	bl	800b3cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6ac:	9802      	ldr	r0, [sp, #8]
 800b6ae:	e7c1      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b6b0:	4a4f      	ldr	r2, [pc, #316]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b6b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800b6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6bc:	f000 80d0 	beq.w	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800b6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c4:	d0da      	beq.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d196      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6ca:	4b49      	ldr	r3, [pc, #292]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b6d2:	d0af      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b6d4:	e79c      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6d6:	4a46      	ldr	r2, [pc, #280]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6d8:	e776      	b.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6da:	4b45      	ldr	r3, [pc, #276]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b6e2:	d0a7      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e4:	a801      	add	r0, sp, #4
 800b6e6:	f7ff fdc5 	bl	800b274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6ea:	9801      	ldr	r0, [sp, #4]
 800b6ec:	e7a2      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ee:	4b40      	ldr	r3, [pc, #256]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b6f6:	d09d      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b6f8:	e7d5      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0cf      	beq.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b6fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b702:	d081      	beq.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b704:	e778      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b706:	6810      	ldr	r0, [r2, #0]
 800b708:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b70c:	d092      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b70e:	e7e9      	b.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b710:	4a37      	ldr	r2, [pc, #220]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b712:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b714:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800b718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b71c:	d0f3      	beq.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b71e:	d806      	bhi.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0bc      	beq.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b728:	f43f af6e 	beq.w	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b72c:	e764      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b72e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b732:	f43f af7e 	beq.w	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b73a:	f43f af45 	beq.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800b73e:	e75b      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800b740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b744:	d09a      	beq.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800b746:	e757      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b74c:	f43f af5c 	beq.w	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b750:	e752      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b752:	6810      	ldr	r0, [r2, #0]
 800b754:	f010 0004 	ands.w	r0, r0, #4
 800b758:	f43f af6c 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75c:	6813      	ldr	r3, [r2, #0]
 800b75e:	4827      	ldr	r0, [pc, #156]	; (800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b760:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b764:	40d8      	lsrs	r0, r3
 800b766:	e765      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b768:	4b21      	ldr	r3, [pc, #132]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b76a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800b76c:	03d2      	lsls	r2, r2, #15
 800b76e:	d5bf      	bpl.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b776:	f43f af5d 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b77a:	a801      	add	r0, sp, #4
 800b77c:	f7ff fcce 	bl	800b11c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b780:	9803      	ldr	r0, [sp, #12]
 800b782:	e757      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b784:	4a1a      	ldr	r2, [pc, #104]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b786:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b788:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800b78c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b790:	d0df      	beq.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800b792:	d810      	bhi.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800b794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b798:	d058      	beq.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b79a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b79e:	d118      	bne.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7a0:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b7a8:	f43f af44 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ac:	a801      	add	r0, sp, #4
 800b7ae:	f7ff fd61 	bl	800b274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7b2:	9802      	ldr	r0, [sp, #8]
 800b7b4:	e73e      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b7b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7ba:	d012      	beq.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800b7bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7c0:	f47f af1a 	bne.w	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7c6:	6818      	ldr	r0, [r3, #0]
 800b7c8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b7cc:	f43f af32 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b7d0:	e6eb      	b.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f af10 	bne.w	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800b7d8:	b005      	add	sp, #20
 800b7da:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800b7de:	f7fe bd47 	b.w	800a270 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7e2:	6810      	ldr	r0, [r2, #0]
 800b7e4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b7e8:	f43f af24 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800b7ec:	4804      	ldr	r0, [pc, #16]	; (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b7ee:	e721      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b7f0:	58024400 	.word	0x58024400
 800b7f4:	017d7840 	.word	0x017d7840
 800b7f8:	00bb8000 	.word	0x00bb8000
 800b7fc:	03d09000 	.word	0x03d09000
 800b800:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b804:	4b28      	ldr	r3, [pc, #160]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b808:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800b80c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b810:	d037      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800b812:	d814      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800b814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b818:	d03f      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b81e:	d0bf      	beq.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800b820:	2b00      	cmp	r3, #0
 800b822:	f47f aee9 	bne.w	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b826:	f7fe fce3 	bl	800a1f0 <HAL_RCC_GetHCLKFreq>
 800b82a:	4b1f      	ldr	r3, [pc, #124]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b82c:	4a1f      	ldr	r2, [pc, #124]	; (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b834:	5cd3      	ldrb	r3, [r2, r3]
 800b836:	f003 031f 	and.w	r3, r3, #31
 800b83a:	40d8      	lsrs	r0, r3
        break;
 800b83c:	e6fa      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b842:	d017      	beq.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800b844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b848:	d0bc      	beq.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800b84a:	e6d5      	b.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b84c:	6810      	ldr	r0, [r2, #0]
 800b84e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b852:	f43f aeef 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b856:	a801      	add	r0, sp, #4
 800b858:	f7ff fc60 	bl	800b11c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b85c:	9802      	ldr	r0, [sp, #8]
 800b85e:	e6e9      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b860:	6810      	ldr	r0, [r2, #0]
 800b862:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b866:	f43f aee5 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b86a:	a801      	add	r0, sp, #4
 800b86c:	f7ff fd02 	bl	800b274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b870:	9803      	ldr	r0, [sp, #12]
 800b872:	e6df      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b874:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b876:	6818      	ldr	r0, [r3, #0]
 800b878:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b87c:	f43f aeda 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b880:	e7b4      	b.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	f010 0004 	ands.w	r0, r0, #4
 800b88a:	f43f aed3 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4807      	ldr	r0, [pc, #28]	; (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800b892:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b896:	40d8      	lsrs	r0, r3
 800b898:	e6cc      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b89a:	4b03      	ldr	r3, [pc, #12]	; (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b8a2:	f43f aec7 	beq.w	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b8a6:	e7d6      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	0801b794 	.word	0x0801b794
 800b8b0:	03d09000 	.word	0x03d09000

0800b8b4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d03c      	beq.n	800b932 <HAL_RNG_Init+0x7e>
{
 800b8b8:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b8ba:	7a43      	ldrb	r3, [r0, #9]
 800b8bc:	4604      	mov	r4, r0
 800b8be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d031      	beq.n	800b92a <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b8c6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b8c8:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b8ca:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b8cc:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	f023 0320 	bic.w	r3, r3, #32
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b8d8:	6822      	ldr	r2, [r4, #0]
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	f043 0304 	orr.w	r3, r3, #4
 800b8e0:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	0658      	lsls	r0, r3, #25
 800b8e8:	d503      	bpl.n	800b8f2 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b8ea:	2304      	movs	r3, #4
    return HAL_ERROR;
 800b8ec:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800b8ee:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800b8f2:	f7fb fa71 	bl	8006dd8 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b8f6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b8f8:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	0759      	lsls	r1, r3, #29
 800b8fe:	d50e      	bpl.n	800b91e <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b900:	f7fb fa6a 	bl	8006dd8 <HAL_GetTick>
 800b904:	1b43      	subs	r3, r0, r5
 800b906:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b908:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b90a:	d9f6      	bls.n	800b8fa <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	0752      	lsls	r2, r2, #29
 800b910:	d5f3      	bpl.n	800b8fa <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800b912:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b914:	2302      	movs	r3, #2
        return HAL_ERROR;
 800b916:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800b918:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b91a:	60e3      	str	r3, [r4, #12]
}
 800b91c:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b91e:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800b920:	2201      	movs	r2, #1
  return HAL_OK;
 800b922:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800b924:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b926:	60e3      	str	r3, [r4, #12]
}
 800b928:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800b92a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800b92c:	f7fa fd8c 	bl	8006448 <HAL_RNG_MspInit>
 800b930:	e7c9      	b.n	800b8c6 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800b932:	2001      	movs	r0, #1
}
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b93a:	7a03      	ldrb	r3, [r0, #8]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d027      	beq.n	800b990 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b940:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800b942:	2201      	movs	r2, #1
 800b944:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800b946:	4293      	cmp	r3, r2
 800b948:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800b94a:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800b94c:	d006      	beq.n	800b95c <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b94e:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800b950:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b952:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b954:	2300      	movs	r3, #0
 800b956:	7223      	strb	r3, [r4, #8]

  return status;
}
 800b958:	4630      	mov	r0, r6
 800b95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800b95c:	2302      	movs	r3, #2
 800b95e:	460d      	mov	r5, r1
 800b960:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800b962:	f7fb fa39 	bl	8006dd8 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b966:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800b968:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	07d2      	lsls	r2, r2, #31
 800b96e:	d412      	bmi.n	800b996 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b970:	f7fb fa32 	bl	8006dd8 <HAL_GetTick>
 800b974:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b976:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b978:	2802      	cmp	r0, #2
 800b97a:	d9f6      	bls.n	800b96a <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	f012 0201 	ands.w	r2, r2, #1
 800b982:	d1f2      	bne.n	800b96a <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800b984:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b986:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800b988:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800b98a:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b98c:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800b98e:	e7e3      	b.n	800b958 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800b990:	2602      	movs	r6, #2
}
 800b992:	4630      	mov	r0, r6
 800b994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800b996:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800b998:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800b99a:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800b99c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800b99e:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800b9a0:	7262      	strb	r2, [r4, #9]
 800b9a2:	e7d7      	b.n	800b954 <HAL_RNG_GenerateRandomNumber+0x1c>

0800b9a4 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b9a6:	4ba6      	ldr	r3, [pc, #664]	; (800bc40 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800b9a8:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b9aa:	6802      	ldr	r2, [r0, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d01c      	beq.n	800b9ea <HAL_SAI_Init.part.0+0x46>
 800b9b0:	3320      	adds	r3, #32
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d019      	beq.n	800b9ea <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b9b6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d04d      	beq.n	800ba5a <HAL_SAI_Init.part.0+0xb6>
 800b9be:	3320      	adds	r3, #32
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d04a      	beq.n	800ba5a <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b9c4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	f000 8134 	beq.w	800bc36 <HAL_SAI_Init.part.0+0x292>
 800b9ce:	3320      	adds	r3, #32
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	f000 8130 	beq.w	800bc36 <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b9d6:	4b9b      	ldr	r3, [pc, #620]	; (800bc44 <HAL_SAI_Init.part.0+0x2a0>)
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	f000 812e 	beq.w	800bc3a <HAL_SAI_Init.part.0+0x296>
 800b9de:	3320      	adds	r3, #32
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	f000 812a 	beq.w	800bc3a <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b9e6:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800b9ea:	4e97      	ldr	r6, [pc, #604]	; (800bc48 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800b9ec:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b9f0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d037      	beq.n	800ba68 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b9f8:	4b94      	ldr	r3, [pc, #592]	; (800bc4c <HAL_SAI_Init.part.0+0x2a8>)
 800b9fa:	4995      	ldr	r1, [pc, #596]	; (800bc50 <HAL_SAI_Init.part.0+0x2ac>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ba02:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ba04:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800ba06:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ba0a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800ba0c:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d031      	beq.n	800ba76 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ba12:	6822      	ldr	r2, [r4, #0]
    count--;
 800ba14:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ba16:	6815      	ldr	r5, [r2, #0]
 800ba18:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 800ba1c:	d1f7      	bne.n	800ba0e <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800ba1e:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800ba20:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800ba22:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800ba24:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800ba28:	f000 8156 	beq.w	800bcd8 <HAL_SAI_Init.part.0+0x334>
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	bf19      	ittee	ne
 800ba30:	4610      	movne	r0, r2
 800ba32:	2103      	movne	r1, #3
 800ba34:	2123      	moveq	r1, #35	; 0x23
 800ba36:	2022      	moveq	r0, #34	; 0x22
 800ba38:	bf15      	itete	ne
 800ba3a:	2701      	movne	r7, #1
 800ba3c:	2721      	moveq	r7, #33	; 0x21
 800ba3e:	2200      	movne	r2, #0
 800ba40:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	f200 8181 	bhi.w	800bd4e <HAL_SAI_Init.part.0+0x3aa>
 800ba4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba50:	001c00e8 	.word	0x001c00e8
 800ba54:	001b00ef 	.word	0x001b00ef
 800ba58:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 800ba5a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800ba5e:	4e7d      	ldr	r6, [pc, #500]	; (800bc54 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800ba60:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1c7      	bne.n	800b9f8 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800ba68:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 800ba6a:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800ba6e:	f7fa fd53 	bl	8006518 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	e7c0      	b.n	800b9f8 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ba76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800ba7a:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ba7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba80:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800ba84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ba86:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ba88:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ba8c:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ba8e:	6a23      	ldr	r3, [r4, #32]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d04a      	beq.n	800bb2a <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	4a6a      	ldr	r2, [pc, #424]	; (800bc40 <HAL_SAI_Init.part.0+0x29c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	f000 8131 	beq.w	800bd00 <HAL_SAI_Init.part.0+0x35c>
 800ba9e:	486e      	ldr	r0, [pc, #440]	; (800bc58 <HAL_SAI_Init.part.0+0x2b4>)
 800baa0:	1a18      	subs	r0, r3, r0
 800baa2:	fab0 f080 	clz	r0, r0
 800baa6:	0940      	lsrs	r0, r0, #5
 800baa8:	2800      	cmp	r0, #0
 800baaa:	f040 8129 	bne.w	800bd00 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800baae:	4a6b      	ldr	r2, [pc, #428]	; (800bc5c <HAL_SAI_Init.part.0+0x2b8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	f000 8133 	beq.w	800bd1c <HAL_SAI_Init.part.0+0x378>
 800bab6:	3220      	adds	r2, #32
 800bab8:	4293      	cmp	r3, r2
 800baba:	f000 812f 	beq.w	800bd1c <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800babe:	4a68      	ldr	r2, [pc, #416]	; (800bc60 <HAL_SAI_Init.part.0+0x2bc>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	f000 8124 	beq.w	800bd0e <HAL_SAI_Init.part.0+0x36a>
 800bac6:	3220      	adds	r2, #32
 800bac8:	4293      	cmp	r3, r2
 800baca:	f000 8120 	beq.w	800bd0e <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
 800bace:	4a5d      	ldr	r2, [pc, #372]	; (800bc44 <HAL_SAI_Init.part.0+0x2a0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	f000 8133 	beq.w	800bd3c <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
 800bad6:	4a63      	ldr	r2, [pc, #396]	; (800bc64 <HAL_SAI_Init.part.0+0x2c0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	f000 8129 	beq.w	800bd30 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800bade:	69a3      	ldr	r3, [r4, #24]
 800bae0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bae4:	f000 80fd 	beq.w	800bce2 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800baea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800baee:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800baf0:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800baf4:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800baf8:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bafa:	bf0c      	ite	eq
 800bafc:	2202      	moveq	r2, #2
 800bafe:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bb00:	fb00 f202 	mul.w	r2, r0, r2
 800bb04:	0212      	lsls	r2, r2, #8
 800bb06:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800bb0a:	4a57      	ldr	r2, [pc, #348]	; (800bc68 <HAL_SAI_Init.part.0+0x2c4>)
 800bb0c:	fba2 0203 	umull	r0, r2, r2, r3
 800bb10:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800bb12:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800bb16:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800bb1a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800bb1c:	bf08      	it	eq
 800bb1e:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bb20:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800bb22:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bb24:	d101      	bne.n	800bb2a <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bb26:	0852      	lsrs	r2, r2, #1
 800bb28:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb2a:	6863      	ldr	r3, [r4, #4]
 800bb2c:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bb30:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb32:	f040 80cc 	bne.w	800bcce <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	bf14      	ite	ne
 800bb3a:	f44f 7500 	movne.w	r5, #512	; 0x200
 800bb3e:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bb40:	f7fb f962 	bl	8006e08 <HAL_GetREVID>
 800bb44:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bb48:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bb4a:	f0c0 80ac 	bcc.w	800bca6 <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bb4e:	6811      	ldr	r1, [r2, #0]
 800bb50:	4b46      	ldr	r3, [pc, #280]	; (800bc6c <HAL_SAI_Init.part.0+0x2c8>)
 800bb52:	400b      	ands	r3, r1
 800bb54:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb56:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bb58:	e9d4 1300 	ldrd	r1, r3, [r4]
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bb60:	431a      	orrs	r2, r3
 800bb62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bb64:	431a      	orrs	r2, r3
 800bb66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	6963      	ldr	r3, [r4, #20]
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	69a3      	ldr	r3, [r4, #24]
 800bb70:	431a      	orrs	r2, r3
 800bb72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb74:	431a      	orrs	r2, r3
 800bb76:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	680b      	ldr	r3, [r1, #0]
 800bb7c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bb7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb80:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bb84:	4b3a      	ldr	r3, [pc, #232]	; (800bc70 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb86:	433a      	orrs	r2, r7
 800bb88:	432a      	orrs	r2, r5
 800bb8a:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bb8c:	6822      	ldr	r2, [r4, #0]
 800bb8e:	6851      	ldr	r1, [r2, #4]
 800bb90:	400b      	ands	r3, r1
 800bb92:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bb94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb96:	69e3      	ldr	r3, [r4, #28]
 800bb98:	6822      	ldr	r2, [r4, #0]
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	6851      	ldr	r1, [r2, #4]
 800bba2:	430b      	orrs	r3, r1
 800bba4:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	4b32      	ldr	r3, [pc, #200]	; (800bc74 <HAL_SAI_Init.part.0+0x2d0>)
 800bbaa:	6891      	ldr	r1, [r2, #8]
 800bbac:	400b      	ands	r3, r1
 800bbae:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbb0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800bbb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbb4:	6821      	ldr	r1, [r4, #0]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bbba:	6888      	ldr	r0, [r1, #8]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bbc0:	4303      	orrs	r3, r0
 800bbc2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bbc4:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbc8:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bbca:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bbcc:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbd2:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	68d3      	ldr	r3, [r2, #12]
 800bbd8:	4003      	ands	r3, r0
 800bbda:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bbdc:	6821      	ldr	r1, [r4, #0]
 800bbde:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 800bbe2:	68ca      	ldr	r2, [r1, #12]
 800bbe4:	4303      	orrs	r3, r0
 800bbe6:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bbe8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bbee:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bbf0:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bbf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bbf6:	4a12      	ldr	r2, [pc, #72]	; (800bc40 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bbf8:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d03f      	beq.n	800bc80 <HAL_SAI_Init.part.0+0x2dc>
 800bc00:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800bc04:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d039      	beq.n	800bc80 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bc0c:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800bc0e:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bc10:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800bc14:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800bc16:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800bc1a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800bc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800bc20:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800bc24:	e732      	b.n	800ba8c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800bc26:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc28:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800bc2c:	e72e      	b.n	800ba8c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bc2e:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc30:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800bc34:	e72a      	b.n	800ba8c <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800bc36:	4e10      	ldr	r6, [pc, #64]	; (800bc78 <HAL_SAI_Init.part.0+0x2d4>)
 800bc38:	e6d8      	b.n	800b9ec <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800bc3a:	4e10      	ldr	r6, [pc, #64]	; (800bc7c <HAL_SAI_Init.part.0+0x2d8>)
 800bc3c:	e6d6      	b.n	800b9ec <HAL_SAI_Init.part.0+0x48>
 800bc3e:	bf00      	nop
 800bc40:	40015804 	.word	0x40015804
 800bc44:	58005404 	.word	0x58005404
 800bc48:	40015800 	.word	0x40015800
 800bc4c:	20000094 	.word	0x20000094
 800bc50:	95cbec1b 	.word	0x95cbec1b
 800bc54:	40015c00 	.word	0x40015c00
 800bc58:	40015824 	.word	0x40015824
 800bc5c:	40015c04 	.word	0x40015c04
 800bc60:	40016004 	.word	0x40016004
 800bc64:	58005424 	.word	0x58005424
 800bc68:	cccccccd 	.word	0xcccccccd
 800bc6c:	f005c010 	.word	0xf005c010
 800bc70:	ffff1ff0 	.word	0xffff1ff0
 800bc74:	fff88000 	.word	0xfff88000
 800bc78:	40016000 	.word	0x40016000
 800bc7c:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bc80:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800bc82:	f023 0301 	bic.w	r3, r3, #1
 800bc86:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bc88:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d1bd      	bne.n	800bc0c <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bc90:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bc94:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bc96:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bc9a:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800bc9c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	6473      	str	r3, [r6, #68]	; 0x44
 800bca4:	e7b2      	b.n	800bc0c <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bca6:	6811      	ldr	r1, [r2, #0]
 800bca8:	4b2a      	ldr	r3, [pc, #168]	; (800bd54 <HAL_SAI_Init.part.0+0x3b0>)
 800bcaa:	400b      	ands	r3, r1
 800bcac:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bcb0:	e9d4 1300 	ldrd	r1, r3, [r4]
 800bcb4:	431a      	orrs	r2, r3
 800bcb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bcbc:	431a      	orrs	r2, r3
 800bcbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bcc0:	431a      	orrs	r2, r3
 800bcc2:	6963      	ldr	r3, [r4, #20]
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	69a3      	ldr	r3, [r4, #24]
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bccc:	e754      	b.n	800bb78 <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	bf08      	it	eq
 800bcd2:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800bcd6:	e733      	b.n	800bb40 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800bcd8:	2113      	movs	r1, #19
 800bcda:	2012      	movs	r0, #18
 800bcdc:	2711      	movs	r7, #17
 800bcde:	2210      	movs	r2, #16
 800bce0:	e6af      	b.n	800ba42 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bce2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bce4:	2904      	cmp	r1, #4
 800bce6:	d030      	beq.n	800bd4a <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800bce8:	2908      	cmp	r1, #8
 800bcea:	d01e      	beq.n	800bd2a <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
 800bcec:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bcee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bcf2:	0043      	lsls	r3, r0, #1
 800bcf4:	6a20      	ldr	r0, [r4, #32]
 800bcf6:	fb00 f202 	mul.w	r2, r0, r2
 800bcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcfe:	e704      	b.n	800bb0a <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bd00:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bd04:	2100      	movs	r1, #0
 800bd06:	f7ff fc0d 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	e6cf      	b.n	800baae <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800bd0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bd12:	2100      	movs	r1, #0
 800bd14:	f7ff fc06 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	e6d8      	b.n	800bace <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bd20:	2100      	movs	r1, #0
 800bd22:	f7ff fbff 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	e6c9      	b.n	800babe <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800bd2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd2e:	e7de      	b.n	800bcee <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800bd30:	2100      	movs	r1, #0
 800bd32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd36:	f7ff fbf5 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd3a:	e6d0      	b.n	800bade <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800bd3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bd40:	2100      	movs	r1, #0
 800bd42:	f7ff fbef 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	e6c5      	b.n	800bad6 <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800bd4a:	2240      	movs	r2, #64	; 0x40
 800bd4c:	e7cf      	b.n	800bcee <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 800bd4e:	2700      	movs	r7, #0
 800bd50:	e69c      	b.n	800ba8c <HAL_SAI_Init.part.0+0xe8>
 800bd52:	bf00      	nop
 800bd54:	f805c010 	.word	0xf805c010

0800bd58 <HAL_SAI_InitProtocol>:
  switch (protocol)
 800bd58:	2902      	cmp	r1, #2
{
 800bd5a:	b538      	push	{r3, r4, r5, lr}
 800bd5c:	4604      	mov	r4, r0
  switch (protocol)
 800bd5e:	d935      	bls.n	800bdcc <HAL_SAI_InitProtocol+0x74>
 800bd60:	1ec8      	subs	r0, r1, #3
 800bd62:	2801      	cmp	r0, #1
 800bd64:	d830      	bhi.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bd66:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800bd68:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bd6a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bd6c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bd6e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800bd70:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bd72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bd76:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd78:	6860      	ldr	r0, [r4, #4]
 800bd7a:	f030 0002 	bics.w	r0, r0, #2
 800bd7e:	bf0c      	ite	eq
 800bd80:	2501      	moveq	r5, #1
 800bd82:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800bd84:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bd86:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800bd8a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800bd8c:	bf0c      	ite	eq
 800bd8e:	2001      	moveq	r0, #1
 800bd90:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bd92:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bd94:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800bd98:	65a0      	str	r0, [r4, #88]	; 0x58
 800bd9a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800bd9c:	2a03      	cmp	r2, #3
 800bd9e:	d813      	bhi.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
 800bda0:	e8df f002 	tbb	[pc, r2]
 800bda4:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	4a47      	ldr	r2, [pc, #284]	; (800bec8 <HAL_SAI_InitProtocol+0x170>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d005      	beq.n	800bdbc <HAL_SAI_InitProtocol+0x64>
 800bdb0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800bdb4:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d105      	bne.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
 800bdbc:	6863      	ldr	r3, [r4, #4]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d102      	bne.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bdc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d037      	beq.n	800be38 <HAL_SAI_InitProtocol+0xe0>
}
 800bdc8:	2001      	movs	r0, #1
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bdcc:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800bdce:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bdd0:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bdd2:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800bdd4:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bdd6:	6860      	ldr	r0, [r4, #4]
 800bdd8:	f030 0002 	bics.w	r0, r0, #2
 800bddc:	bf14      	ite	ne
 800bdde:	2001      	movne	r0, #1
 800bde0:	2000      	moveq	r0, #0
 800bde2:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bde4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bde8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bdea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bdee:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800bdf0:	f013 0001 	ands.w	r0, r3, #1
 800bdf4:	d1e8      	bne.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800bdf6:	b949      	cbnz	r1, 800be0c <HAL_SAI_InitProtocol+0xb4>
 800bdf8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bdfc:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800be00:	2a03      	cmp	r2, #3
 800be02:	d8e1      	bhi.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
 800be04:	e8df f002 	tbb	[pc, r2]
 800be08:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800be0c:	6660      	str	r0, [r4, #100]	; 0x64
 800be0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800be12:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800be14:	2a03      	cmp	r2, #3
 800be16:	d8d7      	bhi.n	800bdc8 <HAL_SAI_InitProtocol+0x70>
 800be18:	e8df f002 	tbb	[pc, r2]
 800be1c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be20:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800be22:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800be24:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be26:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800be28:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800be2a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800be2c:	f7fa ffec 	bl	8006e08 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800be30:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800be34:	2b01      	cmp	r3, #1
 800be36:	d0b7      	beq.n	800bda8 <HAL_SAI_InitProtocol+0x50>
 800be38:	4620      	mov	r0, r4
}
 800be3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be3e:	f7ff bdb1 	b.w	800b9a4 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be42:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800be44:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be46:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800be48:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be4a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800be4c:	e7ee      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800be4e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800be50:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be52:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be54:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800be56:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be58:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800be5a:	e7e7      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be5c:	21e0      	movs	r1, #224	; 0xe0
 800be5e:	e7f7      	b.n	800be50 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be60:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be62:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be64:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be66:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be68:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be6a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be6c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be6e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be72:	e7db      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be74:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800be76:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be78:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be7a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be7c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800be80:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be82:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be86:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be88:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be8a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be8c:	d1ce      	bne.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800be8e:	2308      	movs	r3, #8
 800be90:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800be92:	e7cb      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be94:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be96:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be98:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be9a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be9e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bea0:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bea4:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bea6:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800beaa:	d1bf      	bne.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800beac:	2310      	movs	r3, #16
 800beae:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800beb0:	e7bc      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800beb2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800beb4:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800beb6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800beb8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800beba:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bebc:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bebe:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bec0:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bec4:	e7b2      	b.n	800be2c <HAL_SAI_InitProtocol+0xd4>
 800bec6:	bf00      	nop
 800bec8:	40015804 	.word	0x40015804

0800becc <HAL_SAI_Transmit_DMA>:
{
 800becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	460f      	mov	r7, r1
 800bed2:	4604      	mov	r4, r0
 800bed4:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800bed6:	f7fa ff7f 	bl	8006dd8 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800beda:	2f00      	cmp	r7, #0
 800bedc:	d06b      	beq.n	800bfb6 <HAL_SAI_Transmit_DMA+0xea>
 800bede:	fab5 f885 	clz	r8, r5
 800bee2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800bee6:	2d00      	cmp	r5, #0
 800bee8:	d065      	beq.n	800bfb6 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 800beea:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800beee:	2b01      	cmp	r3, #1
 800bef0:	fa5f f983 	uxtb.w	r9, r3
 800bef4:	d15a      	bne.n	800bfac <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800bef6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800befa:	2b01      	cmp	r3, #1
 800befc:	d056      	beq.n	800bfac <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800befe:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bf00:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bf04:	4a3c      	ldr	r2, [pc, #240]	; (800bff8 <HAL_SAI_Transmit_DMA+0x12c>)
 800bf06:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 800bf08:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 800bf0c:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 800bf0e:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800bf12:	f365 431f 	bfi	r3, r5, #16, #16
 800bf16:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bf18:	2312      	movs	r3, #18
 800bf1a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bf1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf22:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800bf24:	4a35      	ldr	r2, [pc, #212]	; (800bffc <HAL_SAI_Transmit_DMA+0x130>)
 800bf26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf2a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800bf2c:	4a34      	ldr	r2, [pc, #208]	; (800c000 <HAL_SAI_Transmit_DMA+0x134>)
 800bf2e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf32:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800bf34:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf38:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800bf3c:	6822      	ldr	r2, [r4, #0]
 800bf3e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800bf42:	321c      	adds	r2, #28
 800bf44:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800bf46:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800bf4a:	f7fb fb6d 	bl	8007628 <HAL_DMA_Start_IT>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d13f      	bne.n	800bfd2 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bf52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bf54:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bf56:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bf58:	d032      	beq.n	800bfc0 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bf5a:	2205      	movs	r2, #5
 800bf5c:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bf5e:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	bf98      	it	ls
 800bf64:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bf66:	6821      	ldr	r1, [r4, #0]
 800bf68:	690b      	ldr	r3, [r1, #16]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bf6e:	6822      	ldr	r2, [r4, #0]
 800bf70:	6813      	ldr	r3, [r2, #0]
 800bf72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf76:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bf78:	e005      	b.n	800bf86 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bf7a:	f7fa ff2d 	bl	8006dd8 <HAL_GetTick>
 800bf7e:	1b83      	subs	r3, r0, r6
 800bf80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf84:	d82a      	bhi.n	800bfdc <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bf86:	6822      	ldr	r2, [r4, #0]
 800bf88:	6955      	ldr	r5, [r2, #20]
 800bf8a:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800bf8e:	d0f4      	beq.n	800bf7a <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bf90:	6813      	ldr	r3, [r2, #0]
 800bf92:	03db      	lsls	r3, r3, #15
 800bf94:	d403      	bmi.n	800bf9e <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800bf96:	6813      	ldr	r3, [r2, #0]
 800bf98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf9c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800bf9e:	2300      	movs	r3, #0
    return HAL_OK;
 800bfa0:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 800bfa2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800bfa6:	4648      	mov	r0, r9
 800bfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800bfac:	f04f 0902 	mov.w	r9, #2
}
 800bfb0:	4648      	mov	r0, r9
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800bfb6:	f04f 0901 	mov.w	r9, #1
}
 800bfba:	4648      	mov	r0, r9
 800bfbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bfc0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bfc4:	2a01      	cmp	r2, #1
 800bfc6:	bf0b      	itete	eq
 800bfc8:	2215      	moveq	r2, #21
 800bfca:	2205      	movne	r2, #5
 800bfcc:	2171      	moveq	r1, #113	; 0x71
 800bfce:	2161      	movne	r1, #97	; 0x61
 800bfd0:	e7c5      	b.n	800bf5e <HAL_SAI_Transmit_DMA+0x92>
}
 800bfd2:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 800bfd4:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 800bfd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bfdc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800bfe0:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 800bfe4:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bfe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800bfec:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bfee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800bff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff6:	bf00      	nop
 800bff8:	0800c069 	.word	0x0800c069
 800bffc:	0800c005 	.word	0x0800c005
 800c000:	0800c075 	.word	0x0800c075

0800c004 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c004:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c006:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c008:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c00e:	d01b      	beq.n	800c048 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c010:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c01e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c020:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c022:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c024:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c026:	d012      	beq.n	800c04e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c028:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800c02c:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c030:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c032:	3b02      	subs	r3, #2
 800c034:	2b01      	cmp	r3, #1
 800c036:	bf98      	it	ls
 800c038:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c03a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c03c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c040:	4013      	ands	r3, r2
 800c042:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800c044:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c048:	f7f7 fc46 	bl	80038d8 <HAL_SAI_TxCpltCallback>
#endif
}
 800c04c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c04e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c052:	2a01      	cmp	r2, #1
 800c054:	bf0b      	itete	eq
 800c056:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800c05a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800c05e:	f06f 0215 	mvneq.w	r2, #21
 800c062:	f06f 0205 	mvnne.w	r2, #5
 800c066:	e7e3      	b.n	800c030 <SAI_DMATxCplt+0x2c>

0800c068 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c068:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c06a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c06c:	f7f7 fc3e 	bl	80038ec <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800c070:	bd08      	pop	{r3, pc}
 800c072:	bf00      	nop

0800c074 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c074:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c076:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c078:	f7fc fb3a 	bl	80086f0 <HAL_DMA_GetError>
 800c07c:	2802      	cmp	r0, #2
 800c07e:	d025      	beq.n	800c0cc <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c080:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c084:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c08a:	4b14      	ldr	r3, [pc, #80]	; (800c0dc <SAI_DMAError+0x68>)
 800c08c:	4814      	ldr	r0, [pc, #80]	; (800c0e0 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c08e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c092:	680a      	ldr	r2, [r1, #0]
 800c094:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c098:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c09a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800c09c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c09e:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 800c0a2:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c0a4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800c0a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c0aa:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800c0ac:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800c0ae:	b173      	cbz	r3, 800c0ce <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c0b0:	6822      	ldr	r2, [r4, #0]
    count--;
 800c0b2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c0b4:	6812      	ldr	r2, [r2, #0]
 800c0b6:	03d2      	lsls	r2, r2, #15
 800c0b8:	d4f9      	bmi.n	800c0ae <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c0ba:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c0bc:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c0be:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800c0c0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800c0c4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800c0c8:	f7f7 fc18 	bl	80038fc <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c0cc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c0ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800c0da:	e7ee      	b.n	800c0ba <SAI_DMAError+0x46>
 800c0dc:	20000094 	.word	0x20000094
 800c0e0:	95cbec1b 	.word	0x95cbec1b

0800c0e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c0ee:	f7fa fe73 	bl	8006dd8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c0f2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800c0f4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c0f6:	6828      	ldr	r0, [r5, #0]
 800c0f8:	f001 fd36 	bl	800db68 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	b118      	cbz	r0, 800c108 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800c100:	4620      	mov	r0, r4
 800c102:	b006      	add	sp, #24
 800c104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c108:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800c10a:	6828      	ldr	r0, [r5, #0]
 800c10c:	0409      	lsls	r1, r1, #16
 800c10e:	f002 fa85 	bl	800e61c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c112:	4604      	mov	r4, r0
 800c114:	2800      	cmp	r0, #0
 800c116:	d1f3      	bne.n	800c100 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c11c:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c11e:	4669      	mov	r1, sp
 800c120:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c122:	e9cd 2300 	strd	r2, r3, [sp]
 800c126:	2230      	movs	r2, #48	; 0x30
 800c128:	2302      	movs	r3, #2
 800c12a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c12e:	2200      	movs	r2, #0
 800c130:	2301      	movs	r3, #1
 800c132:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c136:	f001 fd01 	bl	800db3c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c13a:	6828      	ldr	r0, [r5, #0]
 800c13c:	f002 fbf4 	bl	800e928 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c140:	4604      	mov	r4, r0
 800c142:	2800      	cmp	r0, #0
 800c144:	d1dc      	bne.n	800c100 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c146:	4682      	mov	sl, r0
 800c148:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c14a:	f240 582a 	movw	r8, #1322	; 0x52a
 800c14e:	e004      	b.n	800c15a <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c150:	f7fa fe42 	bl	8006dd8 <HAL_GetTick>
 800c154:	1b83      	subs	r3, r0, r6
 800c156:	3301      	adds	r3, #1
 800c158:	d024      	beq.n	800c1a4 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c15a:	6828      	ldr	r0, [r5, #0]
 800c15c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c15e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c162:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c164:	d10c      	bne.n	800c180 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c166:	0319      	lsls	r1, r3, #12
 800c168:	d4f2      	bmi.n	800c150 <SD_FindSCR+0x6c>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d1f0      	bne.n	800c150 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c16e:	f001 fccb 	bl	800db08 <SDMMC_ReadFIFO>
 800c172:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c174:	6828      	ldr	r0, [r5, #0]
      index++;
 800c176:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c178:	f001 fcc6 	bl	800db08 <SDMMC_ReadFIFO>
 800c17c:	4682      	mov	sl, r0
      index++;
 800c17e:	e7e7      	b.n	800c150 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c180:	071a      	lsls	r2, r3, #28
 800c182:	d416      	bmi.n	800c1b2 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c184:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c186:	079b      	lsls	r3, r3, #30
 800c188:	d40f      	bmi.n	800c1aa <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c18a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c18c:	f014 0420 	ands.w	r4, r4, #32
 800c190:	d113      	bne.n	800c1ba <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c192:	fa9a f28a 	rev.w	r2, sl
 800c196:	fa99 f389 	rev.w	r3, r9
 800c19a:	490a      	ldr	r1, [pc, #40]	; (800c1c4 <SD_FindSCR+0xe0>)
 800c19c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c19e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800c1a2:	e7ad      	b.n	800c100 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800c1a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c1a8:	e7aa      	b.n	800c100 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c1aa:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c1ac:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c1ae:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c1b0:	e7a6      	b.n	800c100 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c1b2:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c1b4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c1b6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c1b8:	e7a2      	b.n	800c100 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c1ba:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800c1bc:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c1be:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800c1c0:	e79e      	b.n	800c100 <SD_FindSCR+0x1c>
 800c1c2:	bf00      	nop
 800c1c4:	18000f3a 	.word	0x18000f3a

0800c1c8 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	b096      	sub	sp, #88	; 0x58
 800c1d0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c1d2:	f7fa fe01 	bl	8006dd8 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c1d6:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800c1d8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c1da:	6820      	ldr	r0, [r4, #0]
 800c1dc:	f001 fcaa 	bl	800db34 <SDMMC_GetResponse>
 800c1e0:	0182      	lsls	r2, r0, #6
 800c1e2:	d45c      	bmi.n	800c29e <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c1e4:	2140      	movs	r1, #64	; 0x40
 800c1e6:	6820      	ldr	r0, [r4, #0]
 800c1e8:	f001 fcbe 	bl	800db68 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	b1e8      	cbz	r0, 800c22c <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c1f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c1f2:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1f4:	6820      	ldr	r0, [r4, #0]
 800c1f6:	4956      	ldr	r1, [pc, #344]	; (800c350 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 800c1f8:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1fa:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800c1fc:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800c1fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c200:	4303      	orrs	r3, r0
 800c202:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c204:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	f001 fcab 	bl	800db68 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c212:	b138      	cbz	r0, 800c224 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800c214:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c216:	6822      	ldr	r2, [r4, #0]
 800c218:	494d      	ldr	r1, [pc, #308]	; (800c350 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
 800c21a:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c21c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c21e:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c220:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800c224:	4630      	mov	r0, r6
 800c226:	b016      	add	sp, #88	; 0x58
 800c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c22c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c22e:	6820      	ldr	r0, [r4, #0]
 800c230:	0409      	lsls	r1, r1, #16
 800c232:	f002 f9f3 	bl	800e61c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c236:	4603      	mov	r3, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d1d9      	bne.n	800c1f0 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c23c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c240:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c242:	4669      	mov	r1, sp
 800c244:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c246:	e9cd 2300 	strd	r2, r3, [sp]
 800c24a:	2260      	movs	r2, #96	; 0x60
 800c24c:	2302      	movs	r3, #2
 800c24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c252:	2301      	movs	r3, #1
 800c254:	2200      	movs	r2, #0
 800c256:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c25a:	f001 fc6f 	bl	800db3c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	f002 fd86 	bl	800ed70 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c264:	4603      	mov	r3, r0
 800c266:	2800      	cmp	r0, #0
 800c268:	d1c2      	bne.n	800c1f0 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 800c26a:	ae06      	add	r6, sp, #24
 800c26c:	e004      	b.n	800c278 <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c26e:	f7fa fdb3 	bl	8006dd8 <HAL_GetTick>
 800c272:	1bc0      	subs	r0, r0, r7
 800c274:	3001      	adds	r0, #1
 800c276:	d016      	beq.n	800c2a6 <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c278:	6820      	ldr	r0, [r4, #0]
 800c27a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c27c:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c280:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c282:	d113      	bne.n	800c2ac <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c284:	041b      	lsls	r3, r3, #16
 800c286:	d5f2      	bpl.n	800c26e <HAL_SD_GetCardStatus.part.0+0xa6>
 800c288:	f106 0820 	add.w	r8, r6, #32
 800c28c:	e000      	b.n	800c290 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c28e:	6820      	ldr	r0, [r4, #0]
 800c290:	f001 fc3a 	bl	800db08 <SDMMC_ReadFIFO>
 800c294:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800c298:	4546      	cmp	r6, r8
 800c29a:	d1f8      	bne.n	800c28e <HAL_SD_GetCardStatus.part.0+0xc6>
 800c29c:	e7e7      	b.n	800c26e <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c29e:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c2a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2a4:	e7a7      	b.n	800c1f6 <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800c2a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2aa:	e7a3      	b.n	800c1f4 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c2ac:	0719      	lsls	r1, r3, #28
 800c2ae:	d448      	bmi.n	800c342 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c2b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c2b2:	079a      	lsls	r2, r3, #30
 800c2b4:	d447      	bmi.n	800c346 <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c2b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c2b8:	069b      	lsls	r3, r3, #26
 800c2ba:	d50a      	bpl.n	800c2d2 <HAL_SD_GetCardStatus.part.0+0x10a>
 800c2bc:	e045      	b.n	800c34a <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c2be:	f001 fc23 	bl	800db08 <SDMMC_ReadFIFO>
 800c2c2:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c2c6:	f7fa fd87 	bl	8006dd8 <HAL_GetTick>
 800c2ca:	1bc0      	subs	r0, r0, r7
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d0ea      	beq.n	800c2a6 <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c2d4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800c2d8:	d1f1      	bne.n	800c2be <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2da:	4a1e      	ldr	r2, [pc, #120]	; (800c354 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 800c2dc:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c2de:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2e0:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c2e2:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800c2e6:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c2e8:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800c2ec:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c2ee:	0a1a      	lsrs	r2, r3, #8
 800c2f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c2f4:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800c2f8:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800c2fc:	b292      	uxth	r2, r2
 800c2fe:	ba09      	rev	r1, r1
 800c300:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c302:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c304:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c306:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c308:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c30c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c310:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c312:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c316:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c318:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c31c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c320:	b2d0      	uxtb	r0, r2
 800c322:	4303      	orrs	r3, r0
 800c324:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c326:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800c32a:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c32c:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800c330:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c332:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c336:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c33a:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c33c:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c33e:	74a9      	strb	r1, [r5, #18]
 800c340:	e762      	b.n	800c208 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c342:	2308      	movs	r3, #8
 800c344:	e757      	b.n	800c1f6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c346:	2302      	movs	r3, #2
 800c348:	e755      	b.n	800c1f6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800c34a:	2320      	movs	r3, #32
 800c34c:	e753      	b.n	800c1f6 <HAL_SD_GetCardStatus.part.0+0x2e>
 800c34e:	bf00      	nop
 800c350:	1fe00fff 	.word	0x1fe00fff
 800c354:	18000f3a 	.word	0x18000f3a

0800c358 <HAL_SD_ReadBlocks>:
{
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	460d      	mov	r5, r1
 800c35e:	b087      	sub	sp, #28
 800c360:	4604      	mov	r4, r0
 800c362:	4692      	mov	sl, r2
 800c364:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800c366:	f7fa fd37 	bl	8006dd8 <HAL_GetTick>
  if (NULL == pData)
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	f000 8093 	beq.w	800c496 <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 800c370:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c374:	2b01      	cmp	r3, #1
 800c376:	fa5f f983 	uxtb.w	r9, r3
 800c37a:	d17b      	bne.n	800c474 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c37c:	eb0a 0307 	add.w	r3, sl, r7
 800c380:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c382:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c384:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c386:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c388:	f200 808f 	bhi.w	800c4aa <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 800c38c:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c38e:	f04f 0b02 	mov.w	fp, #2
 800c392:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800c394:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c39c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3a0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3a2:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3a4:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800c3b0:	bf18      	it	ne
 800c3b2:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3b6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c3b8:	027b      	lsls	r3, r7, #9
 800c3ba:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c3bc:	2390      	movs	r3, #144	; 0x90
 800c3be:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3c2:	f001 fbbb 	bl	800db3c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3c6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800c3c8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3ca:	68d3      	ldr	r3, [r2, #12]
 800c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d0:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800c3d2:	d959      	bls.n	800c488 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3d4:	4651      	mov	r1, sl
 800c3d6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c3d8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3dc:	f001 fd10 	bl	800de00 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d16a      	bne.n	800c4ba <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 800c3e4:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c3e8:	e005      	b.n	800c3f6 <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c3ea:	f7fa fcf5 	bl	8006dd8 <HAL_GetTick>
 800c3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3f0:	1b80      	subs	r0, r0, r6
 800c3f2:	4298      	cmp	r0, r3
 800c3f4:	d22c      	bcs.n	800c450 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c3fa:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800c3fe:	d168      	bne.n	800c4d2 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800c400:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c402:	041a      	lsls	r2, r3, #16
 800c404:	d5f1      	bpl.n	800c3ea <HAL_SD_ReadBlocks+0x92>
 800c406:	f1bb 0f1f 	cmp.w	fp, #31
 800c40a:	d9ee      	bls.n	800c3ea <HAL_SD_ReadBlocks+0x92>
 800c40c:	f105 0804 	add.w	r8, r5, #4
 800c410:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800c414:	e000      	b.n	800c418 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c416:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 800c418:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c41c:	f001 fb74 	bl	800db08 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c420:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c424:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 800c426:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c428:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c42c:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c430:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c434:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c438:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 800c43c:	d1eb      	bne.n	800c416 <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c43e:	f7fa fccb 	bl	8006dd8 <HAL_GetTick>
 800c442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c444:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800c446:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800c448:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c44c:	4298      	cmp	r0, r3
 800c44e:	d3d2      	bcc.n	800c3f6 <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c450:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800c452:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c456:	4842      	ldr	r0, [pc, #264]	; (800c560 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 800c458:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 800c45a:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c45c:	6398      	str	r0, [r3, #56]	; 0x38
}
 800c45e:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c466:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c468:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c46c:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c46e:	b007      	add	sp, #28
 800c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c474:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c476:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c47a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c47e:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c480:	4648      	mov	r0, r9
 800c482:	b007      	add	sp, #28
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c488:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c48a:	4651      	mov	r1, sl
 800c48c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c48e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c490:	f001 fc10 	bl	800dcb4 <SDMMC_CmdReadSingleBlock>
 800c494:	e7a4      	b.n	800c3e0 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c496:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c498:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c49c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800c4a0:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4a2:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c4a4:	b007      	add	sp, #28
 800c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800c4ac:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4b2:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c4b4:	b007      	add	sp, #28
 800c4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	4a28      	ldr	r2, [pc, #160]	; (800c560 <HAL_SD_ReadBlocks+0x208>)
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c4c0:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800c4c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c4:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800c4c6:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800c4c8:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c4ca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c4ce:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800c4d0:	e7d6      	b.n	800c480 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4d2:	68c3      	ldr	r3, [r0, #12]
 800c4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d8:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c4da:	6820      	ldr	r0, [r4, #0]
 800c4dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4de:	05db      	lsls	r3, r3, #23
 800c4e0:	d509      	bpl.n	800c4f6 <HAL_SD_ReadBlocks+0x19e>
 800c4e2:	2f01      	cmp	r7, #1
 800c4e4:	d907      	bls.n	800c4f6 <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c4e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d004      	beq.n	800c4f6 <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4ec:	f001 fe7a 	bl	800e1e4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1e2      	bne.n	800c4ba <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4f8:	f013 0308 	ands.w	r3, r3, #8
 800c4fc:	d112      	bne.n	800c524 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c4fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c500:	f012 0202 	ands.w	r2, r2, #2
 800c504:	d11a      	bne.n	800c53c <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c508:	f013 0320 	ands.w	r3, r3, #32
 800c50c:	d021      	beq.n	800c552 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c510:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c512:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c516:	f043 0320 	orr.w	r3, r3, #32
 800c51a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c51c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c520:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c522:	e7ad      	b.n	800c480 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c524:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c526:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c528:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c52a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c52c:	f043 0308 	orr.w	r3, r3, #8
 800c530:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c532:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800c534:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c538:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c53a:	e7a1      	b.n	800c480 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c53c:	4a08      	ldr	r2, [pc, #32]	; (800c560 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c53e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c540:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c542:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c544:	f042 0202 	orr.w	r2, r2, #2
 800c548:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c54a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c54e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c550:	e796      	b.n	800c480 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c552:	4904      	ldr	r1, [pc, #16]	; (800c564 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 800c554:	2201      	movs	r2, #1
    return HAL_OK;
 800c556:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c558:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c55a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800c55e:	e78f      	b.n	800c480 <HAL_SD_ReadBlocks+0x128>
 800c560:	1fe00fff 	.word	0x1fe00fff
 800c564:	18000f3a 	.word	0x18000f3a

0800c568 <HAL_SD_WriteBlocks>:
{
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	460d      	mov	r5, r1
 800c56e:	b089      	sub	sp, #36	; 0x24
 800c570:	4604      	mov	r4, r0
 800c572:	4692      	mov	sl, r2
 800c574:	461f      	mov	r7, r3
 800c576:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800c57a:	f7fa fc2d 	bl	8006dd8 <HAL_GetTick>
  if (NULL == pData)
 800c57e:	2d00      	cmp	r5, #0
 800c580:	d07c      	beq.n	800c67c <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 800c582:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c586:	2b01      	cmp	r3, #1
 800c588:	fa5f f983 	uxtb.w	r9, r3
 800c58c:	d166      	bne.n	800c65c <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c58e:	eb0a 0307 	add.w	r3, sl, r7
 800c592:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c594:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c596:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c598:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c59a:	d879      	bhi.n	800c690 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 800c59c:	2303      	movs	r3, #3
 800c59e:	4606      	mov	r6, r0
 800c5a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c5a8:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c5aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c5ac:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c5ae:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c5b0:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c5b4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c5b8:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800c5be:	bf18      	it	ne
 800c5c0:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c5c4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c5c6:	027b      	lsls	r3, r7, #9
 800c5c8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c5ca:	2390      	movs	r3, #144	; 0x90
 800c5cc:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c5ce:	f001 fab5 	bl	800db3c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c5d2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800c5d4:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c5d6:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c5d8:	68d3      	ldr	r3, [r2, #12]
 800c5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5de:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800c5e0:	d946      	bls.n	800c670 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c5e2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c5e4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c5e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c5e8:	f001 fd56 	bl	800e098 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d157      	bne.n	800c6a0 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 800c5f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c5f4:	e004      	b.n	800c600 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c5f6:	f7fa fbef 	bl	8006dd8 <HAL_GetTick>
 800c5fa:	1b80      	subs	r0, r0, r6
 800c5fc:	4540      	cmp	r0, r8
 800c5fe:	d21d      	bcs.n	800c63c <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c600:	6820      	ldr	r0, [r4, #0]
 800c602:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c604:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800c608:	d156      	bne.n	800c6b8 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c60a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c60c:	045a      	lsls	r2, r3, #17
 800c60e:	d5f2      	bpl.n	800c5f6 <HAL_SD_WriteBlocks+0x8e>
 800c610:	f1bb 0f1f 	cmp.w	fp, #31
 800c614:	d9ef      	bls.n	800c5f6 <HAL_SD_WriteBlocks+0x8e>
 800c616:	f105 0a20 	add.w	sl, r5, #32
 800c61a:	e000      	b.n	800c61e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c61c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c61e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c622:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c624:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c626:	f001 fa73 	bl	800db10 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800c62a:	4555      	cmp	r5, sl
 800c62c:	d1f6      	bne.n	800c61c <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c62e:	f7fa fbd3 	bl	8006dd8 <HAL_GetTick>
 800c632:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 800c634:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c638:	4540      	cmp	r0, r8
 800c63a:	d3e1      	bcc.n	800c600 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c63c:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800c63e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c642:	4841      	ldr	r0, [pc, #260]	; (800c748 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 800c644:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800c646:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c648:	6388      	str	r0, [r1, #56]	; 0x38
}
 800c64a:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800c64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c64e:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c650:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c654:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800c656:	b009      	add	sp, #36	; 0x24
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c65c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c65e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c666:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c668:	4648      	mov	r0, r9
 800c66a:	b009      	add	sp, #36	; 0x24
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c670:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c672:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c674:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c676:	f001 fc69 	bl	800df4c <SDMMC_CmdWriteSingleBlock>
 800c67a:	e7b7      	b.n	800c5ec <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c67e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800c686:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c688:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c68a:	b009      	add	sp, #36	; 0x24
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c690:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800c692:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c698:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c69a:	b009      	add	sp, #36	; 0x24
 800c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	4a29      	ldr	r2, [pc, #164]	; (800c748 <HAL_SD_WriteBlocks+0x1e0>)
 800c6a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c6a6:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800c6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6aa:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800c6ac:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800c6ae:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c6b0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800c6b6:	e7d7      	b.n	800c668 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6b8:	68c3      	ldr	r3, [r0, #12]
 800c6ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6be:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c6c4:	05db      	lsls	r3, r3, #23
 800c6c6:	d509      	bpl.n	800c6dc <HAL_SD_WriteBlocks+0x174>
 800c6c8:	2f01      	cmp	r7, #1
 800c6ca:	d907      	bls.n	800c6dc <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c6cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d004      	beq.n	800c6dc <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6d2:	f001 fd87 	bl	800e1e4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d1e2      	bne.n	800c6a0 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c6da:	6820      	ldr	r0, [r4, #0]
 800c6dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c6de:	f013 0308 	ands.w	r3, r3, #8
 800c6e2:	d112      	bne.n	800c70a <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c6e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c6e6:	f012 0202 	ands.w	r2, r2, #2
 800c6ea:	d11a      	bne.n	800c722 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c6ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c6ee:	f013 0310 	ands.w	r3, r3, #16
 800c6f2:	d021      	beq.n	800c738 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6f4:	4b14      	ldr	r3, [pc, #80]	; (800c748 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c6f6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6f8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c6fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6fc:	f043 0310 	orr.w	r3, r3, #16
 800c700:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c702:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c706:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c708:	e7ae      	b.n	800c668 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c70a:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c70c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c70e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c712:	f043 0308 	orr.w	r3, r3, #8
 800c716:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c718:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800c71a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c71e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c720:	e7a2      	b.n	800c668 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c722:	4a09      	ldr	r2, [pc, #36]	; (800c748 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c724:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c726:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c728:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c72a:	f042 0202 	orr.w	r2, r2, #2
 800c72e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c730:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c734:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c736:	e797      	b.n	800c668 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c738:	4904      	ldr	r1, [pc, #16]	; (800c74c <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800c73a:	2201      	movs	r2, #1
    return HAL_OK;
 800c73c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c73e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c740:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800c744:	e790      	b.n	800c668 <HAL_SD_WriteBlocks+0x100>
 800c746:	bf00      	nop
 800c748:	1fe00fff 	.word	0x1fe00fff
 800c74c:	18000f3a 	.word	0x18000f3a

0800c750 <HAL_SD_ErrorCallback>:
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop

0800c754 <HAL_SD_GetCardCSD>:
{
 800c754:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c756:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c758:	f04f 0c00 	mov.w	ip, #0
{
 800c75c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c75e:	0f92      	lsrs	r2, r2, #30
 800c760:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c762:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c764:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800c768:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c76a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800c76e:	f002 0203 	and.w	r2, r2, #3
 800c772:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c774:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800c778:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c77a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800c77e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c780:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800c784:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c786:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c788:	0d12      	lsrs	r2, r2, #20
 800c78a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c78c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800c790:	f002 020f 	and.w	r2, r2, #15
 800c794:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c796:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c798:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c79c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c79e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c7a0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c7a4:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c7a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c7a8:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c7ac:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c7ae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c7b0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c7b4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c7b6:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800c7ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	f040 808a 	bne.w	800c8d6 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c7c2:	f640 72fc 	movw	r2, #4092	; 0xffc
 800c7c6:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
 800c7ca:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800c7ce:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800c7d2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c7d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7d6:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800c7da:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c7dc:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800c7e0:	f002 0207 	and.w	r2, r2, #7
 800c7e4:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c7e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7e8:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800c7ec:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c7ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7f0:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800c7f4:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c7f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7f8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800c7fc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c7fe:	690a      	ldr	r2, [r1, #16]
 800c800:	3201      	adds	r2, #1
 800c802:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c804:	7e08      	ldrb	r0, [r1, #24]
 800c806:	f000 0007 	and.w	r0, r0, #7
 800c80a:	3002      	adds	r0, #2
 800c80c:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c80e:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c810:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c812:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c816:	f00c 0c0f 	and.w	ip, ip, #15
 800c81a:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c81e:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c822:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
 800c824:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c828:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800c82c:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
 800c832:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800c834:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c838:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c83c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c83e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c840:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800c844:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c846:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c84c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c84e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c850:	0fd2      	lsrs	r2, r2, #31
 800c852:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c854:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c856:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800c85a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c85c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c85e:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800c862:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c866:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800c86a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c86c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c86e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800c872:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800c876:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c87a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c87e:	ea02 020c 	and.w	r2, r2, ip
 800c882:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c886:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c888:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c88c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c890:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c892:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c896:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c89a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c89c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c8a0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c8a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c8a6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c8aa:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c8ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c8b0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800c8b4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c8b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c8ba:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800c8be:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c8c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8c4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800c8c8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800c8cc:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800c8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c8d6:	2a01      	cmp	r2, #1
 800c8d8:	d112      	bne.n	800c900 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c8da:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c8dc:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800c8e0:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c8e4:	0412      	lsls	r2, r2, #16
 800c8e6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800c8ea:	ea42 020c 	orr.w	r2, r2, ip
 800c8ee:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c8f0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800c8f2:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c8f4:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c8f6:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c8f8:	0292      	lsls	r2, r2, #10
 800c8fa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c8fc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c8fe:	e797      	b.n	800c830 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c900:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800c902:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c904:	4805      	ldr	r0, [pc, #20]	; (800c91c <HAL_SD_GetCardCSD+0x1c8>)
 800c906:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800c908:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c90c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c910:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c912:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800c916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	1fe00fff 	.word	0x1fe00fff

0800c920 <HAL_SD_InitCard>:
{
 800c920:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c922:	2200      	movs	r2, #0
{
 800c924:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c926:	2300      	movs	r3, #0
{
 800c928:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c92a:	2100      	movs	r1, #0
 800c92c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c934:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c938:	f7fe fdf4 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800c93c:	b940      	cbnz	r0, 800c950 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800c93e:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800c944:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c948:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c94a:	4630      	mov	r0, r6
 800c94c:	b015      	add	sp, #84	; 0x54
 800c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c950:	0a06      	lsrs	r6, r0, #8
 800c952:	4b8f      	ldr	r3, [pc, #572]	; (800cb90 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800c954:	aa07      	add	r2, sp, #28
 800c956:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c958:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800c95c:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c95e:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800c960:	9608      	str	r6, [sp, #32]
 800c962:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c966:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c96a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	f001 f8af 	bl	800dad0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c972:	6820      	ldr	r0, [r4, #0]
 800c974:	f001 f8d2 	bl	800db1c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800c978:	4b86      	ldr	r3, [pc, #536]	; (800cb94 <HAL_SD_InitCard+0x274>)
 800c97a:	429d      	cmp	r5, r3
 800c97c:	d902      	bls.n	800c984 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c97e:	0076      	lsls	r6, r6, #1
 800c980:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c984:	4884      	ldr	r0, [pc, #528]	; (800cb98 <HAL_SD_InitCard+0x278>)
 800c986:	fbb0 f0f5 	udiv	r0, r0, r5
 800c98a:	3001      	adds	r0, #1
 800c98c:	f7fa fa2a 	bl	8006de4 <HAL_Delay>
  __IO uint32_t count = 0U;
 800c990:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c992:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800c994:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c996:	f001 fdd5 	bl	800e544 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c99a:	4605      	mov	r5, r0
 800c99c:	b140      	cbz	r0, 800c9b0 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800c99e:	2601      	movs	r6, #1
 800c9a0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800c9a4:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800c9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9a8:	431d      	orrs	r5, r3
 800c9aa:	6365      	str	r5, [r4, #52]	; 0x34
}
 800c9ac:	b015      	add	sp, #84	; 0x54
 800c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c9b0:	6820      	ldr	r0, [r4, #0]
 800c9b2:	f001 fdf3 	bl	800e59c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c9b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800c9ba:	d06c      	beq.n	800ca96 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6820      	ldr	r0, [r4, #0]
 800c9c4:	f001 fe2a 	bl	800e61c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9c8:	bb08      	cbnz	r0, 800ca0e <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800c9d0:	42b3      	cmp	r3, r6
 800c9d2:	f200 80d6 	bhi.w	800cb82 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c9d6:	4f71      	ldr	r7, [pc, #452]	; (800cb9c <HAL_SD_InitCard+0x27c>)
 800c9d8:	e00b      	b.n	800c9f2 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9da:	6820      	ldr	r0, [r4, #0]
 800c9dc:	f001 f8aa 	bl	800db34 <SDMMC_GetResponse>
    count++;
 800c9e0:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c9e2:	2800      	cmp	r0, #0
    count++;
 800c9e4:	f103 0301 	add.w	r3, r3, #1
 800c9e8:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c9ea:	9b03      	ldr	r3, [sp, #12]
 800c9ec:	db12      	blt.n	800ca14 <HAL_SD_InitCard+0xf4>
 800c9ee:	42b3      	cmp	r3, r6
 800c9f0:	d810      	bhi.n	800ca14 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	6820      	ldr	r0, [r4, #0]
 800c9f6:	f001 fe11 	bl	800e61c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c9fa:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d1cd      	bne.n	800c99e <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ca02:	6820      	ldr	r0, [r4, #0]
 800ca04:	f001 feb0 	bl	800e768 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca08:	4601      	mov	r1, r0
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0e5      	beq.n	800c9da <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca0e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ca12:	e7c4      	b.n	800c99e <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ca14:	9a03      	ldr	r2, [sp, #12]
 800ca16:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	f200 80ab 	bhi.w	800cb76 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ca20:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800ca24:	d043      	beq.n	800caae <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ca26:	2301      	movs	r3, #1
 800ca28:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800ca30:	f7fa f9d2 	bl	8006dd8 <HAL_GetTick>
 800ca34:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ca36:	6820      	ldr	r0, [r4, #0]
 800ca38:	f001 f878 	bl	800db2c <SDMMC_GetPowerState>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d038      	beq.n	800cab2 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ca40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d140      	bne.n	800cac8 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ca46:	2104      	movs	r1, #4
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	f001 f873 	bl	800db34 <SDMMC_GetResponse>
 800ca4e:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ca50:	a909      	add	r1, sp, #36	; 0x24
 800ca52:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ca54:	0d1b      	lsrs	r3, r3, #20
 800ca56:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ca58:	f7ff fe7c 	bl	800c754 <HAL_SD_GetCardCSD>
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f040 808c 	bne.w	800cb7c <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ca66:	6820      	ldr	r0, [r4, #0]
 800ca68:	0409      	lsls	r1, r1, #16
 800ca6a:	f001 fcc5 	bl	800e3f8 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca6e:	bb10      	cbnz	r0, 800cab6 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca74:	6820      	ldr	r0, [r4, #0]
 800ca76:	f001 f877 	bl	800db68 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	f43f af65 	beq.w	800c94a <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca80:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ca82:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca84:	4946      	ldr	r1, [pc, #280]	; (800cba0 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 800ca86:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca88:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ca8c:	4310      	orrs	r0, r2
 800ca8e:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800ca94:	e759      	b.n	800c94a <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ca96:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	f001 fd53 	bl	800e544 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca9e:	4605      	mov	r5, r0
 800caa0:	2800      	cmp	r0, #0
 800caa2:	f47f af7c 	bne.w	800c99e <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800caa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d18e      	bne.n	800c9ca <HAL_SD_InitCard+0xaa>
 800caac:	e788      	b.n	800c9c0 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800caae:	63a0      	str	r0, [r4, #56]	; 0x38
 800cab0:	e7bb      	b.n	800ca2a <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cab2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800cab6:	2601      	movs	r6, #1
 800cab8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cabc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cabe:	4318      	orrs	r0, r3
 800cac0:	6360      	str	r0, [r4, #52]	; 0x34
}
 800cac2:	4630      	mov	r0, r6
 800cac4:	b015      	add	sp, #84	; 0x54
 800cac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	f001 ffd5 	bl	800ea78 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cace:	2800      	cmp	r0, #0
 800cad0:	d1f1      	bne.n	800cab6 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cad2:	4601      	mov	r1, r0
 800cad4:	6820      	ldr	r0, [r4, #0]
 800cad6:	f001 f82d 	bl	800db34 <SDMMC_GetResponse>
 800cada:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cadc:	2104      	movs	r1, #4
 800cade:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cae0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cae2:	f001 f827 	bl	800db34 <SDMMC_GetResponse>
 800cae6:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cae8:	2108      	movs	r1, #8
 800caea:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800caec:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800caee:	f001 f821 	bl	800db34 <SDMMC_GetResponse>
 800caf2:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800caf4:	210c      	movs	r1, #12
 800caf6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800caf8:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cafa:	f001 f81b 	bl	800db34 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cafe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cb00:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d09f      	beq.n	800ca46 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cb06:	f241 3687 	movw	r6, #4999	; 0x1387
 800cb0a:	e009      	b.n	800cb20 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cb0c:	6820      	ldr	r0, [r4, #0]
 800cb0e:	f002 f831 	bl	800eb74 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d1cf      	bne.n	800cab6 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cb16:	f7fa f95f 	bl	8006dd8 <HAL_GetTick>
 800cb1a:	1b43      	subs	r3, r0, r5
 800cb1c:	42b3      	cmp	r3, r6
 800cb1e:	d827      	bhi.n	800cb70 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 800cb20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cb24:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d0ef      	beq.n	800cb0c <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cb2e:	2a03      	cmp	r2, #3
 800cb30:	d089      	beq.n	800ca46 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb32:	0419      	lsls	r1, r3, #16
 800cb34:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800cb36:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb38:	f001 ffdc 	bl	800eaf4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1ba      	bne.n	800cab6 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cb40:	4601      	mov	r1, r0
 800cb42:	6820      	ldr	r0, [r4, #0]
 800cb44:	f000 fff6 	bl	800db34 <SDMMC_GetResponse>
 800cb48:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cb4a:	2104      	movs	r1, #4
 800cb4c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cb4e:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cb50:	f000 fff0 	bl	800db34 <SDMMC_GetResponse>
 800cb54:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cb56:	2108      	movs	r1, #8
 800cb58:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cb5a:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cb5c:	f000 ffea 	bl	800db34 <SDMMC_GetResponse>
 800cb60:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cb62:	210c      	movs	r1, #12
 800cb64:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cb66:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cb68:	f000 ffe4 	bl	800db34 <SDMMC_GetResponse>
 800cb6c:	66a0      	str	r0, [r4, #104]	; 0x68
 800cb6e:	e76a      	b.n	800ca46 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800cb70:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb74:	e79f      	b.n	800cab6 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cb76:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800cb7a:	e710      	b.n	800c99e <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800cb80:	e799      	b.n	800cab6 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	42b3      	cmp	r3, r6
 800cb86:	d8f6      	bhi.n	800cb76 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cb8c:	e74d      	b.n	800ca2a <HAL_SD_InitCard+0x10a>
 800cb8e:	bf00      	nop
 800cb90:	014f8b59 	.word	0x014f8b59
 800cb94:	000c34ff 	.word	0x000c34ff
 800cb98:	00012110 	.word	0x00012110
 800cb9c:	c1100000 	.word	0xc1100000
 800cba0:	1fe00fff 	.word	0x1fe00fff

0800cba4 <HAL_SD_GetCardInfo>:
{
 800cba4:	4603      	mov	r3, r0
}
 800cba6:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbaa:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cbac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbae:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cbb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbb2:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbb6:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cbb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cbba:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cbbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbbe:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cbc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbc2:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc6:	61cb      	str	r3, [r1, #28]
}
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop

0800cbcc <HAL_SD_ConfigWideBusOperation>:
{
 800cbcc:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800cbce:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cbd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800cbd2:	b089      	sub	sp, #36	; 0x24
 800cbd4:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cbd6:	4293      	cmp	r3, r2
{
 800cbd8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800cbda:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cbde:	d033      	beq.n	800cc48 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cbe0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800cbe4:	d030      	beq.n	800cc48 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cbe6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800cbea:	f000 8084 	beq.w	800ccf6 <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	d062      	beq.n	800ccb8 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbf2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbf8:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbfc:	bb5b      	cbnz	r3, 800cc56 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cc02:	2100      	movs	r1, #0
 800cc04:	f7fe fc8e 	bl	800b524 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d03b      	beq.n	800cc84 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc0c:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc0e:	4b55      	ldr	r3, [pc, #340]	; (800cd64 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc10:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800cc12:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc14:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc16:	fba3 5300 	umull	r5, r3, r3, r0
 800cc1a:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc1c:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc1e:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc22:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc24:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc28:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc2a:	d238      	bcs.n	800cc9e <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc2c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cc2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cc32:	d034      	beq.n	800cc9e <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc34:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cc38:	d07f      	beq.n	800cd3a <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
 800cc3a:	bb4a      	cbnz	r2, 800cc90 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cc3c:	4b4a      	ldr	r3, [pc, #296]	; (800cd68 <HAL_SD_ConfigWideBusOperation+0x19c>)
 800cc3e:	4298      	cmp	r0, r3
 800cc40:	f240 8085 	bls.w	800cd4e <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cc44:	9506      	str	r5, [sp, #24]
 800cc46:	e02b      	b.n	800cca0 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc4e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0d3      	beq.n	800cbfe <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc56:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800cc58:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc5a:	4a44      	ldr	r2, [pc, #272]	; (800cd6c <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc62:	6820      	ldr	r0, [r4, #0]
 800cc64:	f000 ff80 	bl	800db68 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc68:	b130      	cbz	r0, 800cc78 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc6a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800cc6c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc6e:	4a3f      	ldr	r2, [pc, #252]	; (800cd6c <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc74:	4318      	orrs	r0, r3
 800cc76:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800cc78:	2301      	movs	r3, #1
}
 800cc7a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800cc7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800cc80:	b009      	add	sp, #36	; 0x24
 800cc82:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cc84:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800cc86:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cc88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc8c:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800cc8e:	e7e6      	b.n	800cc5e <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cc90:	0053      	lsls	r3, r2, #1
 800cc92:	fbb0 f0f3 	udiv	r0, r0, r3
 800cc96:	4b34      	ldr	r3, [pc, #208]	; (800cd68 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cc98:	4298      	cmp	r0, r3
 800cc9a:	bf88      	it	hi
 800cc9c:	462a      	movhi	r2, r5
 800cc9e:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800cca0:	aa05      	add	r2, sp, #20
 800cca2:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800cca4:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800cca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ccae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccb0:	6820      	ldr	r0, [r4, #0]
 800ccb2:	f000 ff0d 	bl	800dad0 <SDMMC_Init>
 800ccb6:	e7d2      	b.n	800cc5e <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccbc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800ccbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccc2:	f000 ff37 	bl	800db34 <SDMMC_GetResponse>
 800ccc6:	0182      	lsls	r2, r0, #6
 800ccc8:	d434      	bmi.n	800cd34 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800ccca:	a902      	add	r1, sp, #8
 800cccc:	4620      	mov	r0, r4
 800ccce:	f7ff fa09 	bl	800c0e4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ccd2:	b960      	cbnz	r0, 800ccee <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ccd4:	9b03      	ldr	r3, [sp, #12]
 800ccd6:	03db      	lsls	r3, r3, #15
 800ccd8:	d536      	bpl.n	800cd48 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	0409      	lsls	r1, r1, #16
 800cce0:	f001 fc9c 	bl	800e61c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cce4:	b918      	cbnz	r0, 800ccee <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cce6:	4601      	mov	r1, r0
 800cce8:	6820      	ldr	r0, [r4, #0]
 800ccea:	f001 fd77 	bl	800e7dc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ccee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccf0:	4318      	orrs	r0, r3
 800ccf2:	6360      	str	r0, [r4, #52]	; 0x34
 800ccf4:	e7ac      	b.n	800cc50 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800ccfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cd02:	f000 ff17 	bl	800db34 <SDMMC_GetResponse>
 800cd06:	0180      	lsls	r0, r0, #6
 800cd08:	d414      	bmi.n	800cd34 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800cd0a:	a902      	add	r1, sp, #8
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f7ff f9e9 	bl	800c0e4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d1eb      	bne.n	800ccee <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd16:	9b03      	ldr	r3, [sp, #12]
 800cd18:	0359      	lsls	r1, r3, #13
 800cd1a:	d515      	bpl.n	800cd48 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cd1e:	6820      	ldr	r0, [r4, #0]
 800cd20:	0409      	lsls	r1, r1, #16
 800cd22:	f001 fc7b 	bl	800e61c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d1e1      	bne.n	800ccee <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cd2a:	2102      	movs	r1, #2
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	f001 fd55 	bl	800e7dc <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd32:	e7dc      	b.n	800ccee <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cd38:	e7d9      	b.n	800ccee <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
 800cd3a:	b95a      	cbnz	r2, 800cd54 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cd3c:	4a0c      	ldr	r2, [pc, #48]	; (800cd70 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800cd3e:	4290      	cmp	r0, r2
 800cd40:	d905      	bls.n	800cd4e <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cd42:	0e5b      	lsrs	r3, r3, #25
 800cd44:	9306      	str	r3, [sp, #24]
 800cd46:	e7ab      	b.n	800cca0 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd48:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800cd4c:	e7cf      	b.n	800ccee <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9306      	str	r3, [sp, #24]
 800cd52:	e7a5      	b.n	800cca0 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cd54:	0051      	lsls	r1, r2, #1
 800cd56:	fbb0 f0f1 	udiv	r0, r0, r1
 800cd5a:	4905      	ldr	r1, [pc, #20]	; (800cd70 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800cd5c:	4288      	cmp	r0, r1
 800cd5e:	d99e      	bls.n	800cc9e <HAL_SD_ConfigWideBusOperation+0xd2>
 800cd60:	e7ef      	b.n	800cd42 <HAL_SD_ConfigWideBusOperation+0x176>
 800cd62:	bf00      	nop
 800cd64:	55e63b89 	.word	0x55e63b89
 800cd68:	017d7840 	.word	0x017d7840
 800cd6c:	1fe00fff 	.word	0x1fe00fff
 800cd70:	02faf080 	.word	0x02faf080

0800cd74 <HAL_SD_Init>:
{
 800cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd76:	b087      	sub	sp, #28
  if (hsd == NULL)
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d044      	beq.n	800ce06 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800cd7c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800cd80:	4604      	mov	r4, r0
 800cd82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d041      	beq.n	800ce0e <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cd8a:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd8c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cd8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd92:	f7ff fdc5 	bl	800c920 <HAL_SD_InitCard>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d135      	bne.n	800ce06 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800cd9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	d031      	beq.n	800ce06 <HAL_SD_Init+0x92>
 800cda2:	a901      	add	r1, sp, #4
 800cda4:	4620      	mov	r0, r4
 800cda6:	f7ff fa0f 	bl	800c1c8 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cdaa:	bb60      	cbnz	r0, 800ce06 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cdac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800cdae:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cdb2:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cdb4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800cdb8:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cdba:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cdbc:	d02b      	beq.n	800ce16 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cdbe:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cdc0:	68e1      	ldr	r1, [r4, #12]
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7ff ff02 	bl	800cbcc <HAL_SD_ConfigWideBusOperation>
 800cdc8:	4606      	mov	r6, r0
 800cdca:	b9e0      	cbnz	r0, 800ce06 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800cdcc:	f7fa f804 	bl	8006dd8 <HAL_GetTick>
 800cdd0:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cdd2:	e00c      	b.n	800cdee <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cdd4:	6820      	ldr	r0, [r4, #0]
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	f000 feac 	bl	800db34 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cddc:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cde0:	2804      	cmp	r0, #4
 800cde2:	d020      	beq.n	800ce26 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cde4:	f7f9 fff8 	bl	8006dd8 <HAL_GetTick>
 800cde8:	1bc3      	subs	r3, r0, r7
 800cdea:	3301      	adds	r3, #1
 800cdec:	d021      	beq.n	800ce32 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cdee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cdf0:	6820      	ldr	r0, [r4, #0]
 800cdf2:	0409      	lsls	r1, r1, #16
 800cdf4:	f001 ff16 	bl	800ec24 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d0ea      	beq.n	800cdd4 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800cdfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce00:	4303      	orrs	r3, r0
 800ce02:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800ce04:	e7ee      	b.n	800cde4 <HAL_SD_Init+0x70>
    return HAL_ERROR;
 800ce06:	2601      	movs	r6, #1
}
 800ce08:	4630      	mov	r0, r6
 800ce0a:	b007      	add	sp, #28
 800ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800ce0e:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800ce10:	f7f9 fc54 	bl	80066bc <HAL_SD_MspInit>
 800ce14:	e7b9      	b.n	800cd8a <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ce16:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ce18:	bf14      	ite	ne
 800ce1a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ce1e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800ce22:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce24:	e7cc      	b.n	800cdc0 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800ce26:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce28:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ce2a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800ce2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800ce30:	e7ea      	b.n	800ce08 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ce32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800ce36:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800ce38:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ce3a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ce3c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800ce40:	e7e2      	b.n	800ce08 <HAL_SD_Init+0x94>
 800ce42:	bf00      	nop

0800ce44 <HAL_SD_GetCardState>:
{
 800ce44:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce46:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800ce48:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce4a:	6800      	ldr	r0, [r0, #0]
 800ce4c:	0409      	lsls	r1, r1, #16
 800ce4e:	f001 fee9 	bl	800ec24 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce52:	4601      	mov	r1, r0
 800ce54:	b120      	cbz	r0, 800ce60 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800ce56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4319      	orrs	r1, r3
 800ce5c:	6361      	str	r1, [r4, #52]	; 0x34
}
 800ce5e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	f000 fe67 	bl	800db34 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ce66:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800ce6a:	bd10      	pop	{r4, pc}

0800ce6c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop

0800ce70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop

0800ce74 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop

0800ce78 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop

0800ce7c <HAL_SD_IRQHandler>:
{
 800ce7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7e:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ce80:	6800      	ldr	r0, [r0, #0]
{
 800ce82:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800ce84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ce86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce88:	041b      	lsls	r3, r3, #16
 800ce8a:	d502      	bpl.n	800ce92 <HAL_SD_IRQHandler+0x16>
 800ce8c:	072f      	lsls	r7, r5, #28
 800ce8e:	f100 80b7 	bmi.w	800d000 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ce92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce94:	05de      	lsls	r6, r3, #23
 800ce96:	d529      	bpl.n	800ceec <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ce98:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ce9c:	4b99      	ldr	r3, [pc, #612]	; (800d104 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ce9e:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cea0:	6822      	ldr	r2, [r4, #0]
 800cea2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cea4:	400b      	ands	r3, r1
 800cea6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ceac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceb0:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	68d3      	ldr	r3, [r2, #12]
 800ceb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceba:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800cebc:	f015 0308 	ands.w	r3, r5, #8
 800cec0:	d076      	beq.n	800cfb0 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cec2:	f015 0f22 	tst.w	r5, #34	; 0x22
 800cec6:	f040 80e9 	bne.w	800d09c <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ceca:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800cecc:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cece:	498e      	ldr	r1, [pc, #568]	; (800d108 <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ced0:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ced2:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800ced4:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800ced8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cedc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cede:	f000 80b0 	beq.w	800d042 <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 800cee2:	4620      	mov	r0, r4
 800cee4:	f002 f838 	bl	800ef58 <HAL_SD_RxCpltCallback>
}
 800cee8:	b003      	add	sp, #12
 800ceea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ceec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ceee:	045b      	lsls	r3, r3, #17
 800cef0:	d502      	bpl.n	800cef8 <HAL_SD_IRQHandler+0x7c>
 800cef2:	072f      	lsls	r7, r5, #28
 800cef4:	f100 80aa 	bmi.w	800d04c <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cef8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cefa:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cefe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cf00:	d06e      	beq.n	800cfe0 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cf02:	079e      	lsls	r6, r3, #30
 800cf04:	d503      	bpl.n	800cf0e <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf08:	f043 0302 	orr.w	r3, r3, #2
 800cf0c:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cf0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf10:	0719      	lsls	r1, r3, #28
 800cf12:	d503      	bpl.n	800cf1c <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf16:	f043 0308 	orr.w	r3, r3, #8
 800cf1a:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cf1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf1e:	069a      	lsls	r2, r3, #26
 800cf20:	d503      	bpl.n	800cf2a <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cf2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf2c:	06db      	lsls	r3, r3, #27
 800cf2e:	d503      	bpl.n	800cf38 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf32:	f043 0310 	orr.w	r3, r3, #16
 800cf36:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf38:	4b73      	ldr	r3, [pc, #460]	; (800d108 <HAL_SD_IRQHandler+0x28c>)
 800cf3a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cf3c:	6822      	ldr	r2, [r4, #0]
 800cf3e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cf40:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800cf44:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cf46:	6822      	ldr	r2, [r4, #0]
 800cf48:	68d3      	ldr	r3, [r2, #12]
 800cf4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf4e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cf50:	6822      	ldr	r2, [r4, #0]
 800cf52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cf54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf58:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	68d3      	ldr	r3, [r2, #12]
 800cf5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf62:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf64:	6820      	ldr	r0, [r4, #0]
 800cf66:	f001 f93d 	bl	800e1e4 <SDMMC_CmdStopTransfer>
 800cf6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cf6c:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cf6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf72:	4318      	orrs	r0, r3
 800cf74:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cf76:	68d3      	ldr	r3, [r2, #12]
 800cf78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf7c:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cf82:	f015 0308 	ands.w	r3, r5, #8
 800cf86:	f040 8097 	bne.w	800d0b8 <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cf8a:	062f      	lsls	r7, r5, #24
 800cf8c:	d5ac      	bpl.n	800cee8 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cf8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cf90:	2a00      	cmp	r2, #0
 800cf92:	d0a9      	beq.n	800cee8 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf94:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800cf96:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800cf98:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf9a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800cf9c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cfa0:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cfa2:	6822      	ldr	r2, [r4, #0]
 800cfa4:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cfa6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800cfaa:	f7ff fbd1 	bl	800c750 <HAL_SD_ErrorCallback>
 800cfae:	e79b      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cfb0:	0629      	lsls	r1, r5, #24
 800cfb2:	d599      	bpl.n	800cee8 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800cfb4:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfb6:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800cfba:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cfbc:	6822      	ldr	r2, [r4, #0]
 800cfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cfc0:	6822      	ldr	r2, [r4, #0]
 800cfc2:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfc4:	f040 8086 	bne.w	800d0d4 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 800cfc8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800cfca:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfcc:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800cfd0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cfd4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfd6:	f040 808b 	bne.w	800d0f0 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cfda:	07aa      	lsls	r2, r5, #30
 800cfdc:	d084      	beq.n	800cee8 <HAL_SD_IRQHandler+0x6c>
 800cfde:	e780      	b.n	800cee2 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cfe0:	00de      	lsls	r6, r3, #3
 800cfe2:	d581      	bpl.n	800cee8 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cfe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfe8:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cfea:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff0:	0759      	lsls	r1, r3, #29
 800cff2:	d46a      	bmi.n	800d0ca <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cff4:	06aa      	lsls	r2, r5, #26
 800cff6:	f140 8082 	bpl.w	800d0fe <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cffa:	f7ff ff3d 	bl	800ce78 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800cffe:	e773      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
 800d000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d002:	2b1f      	cmp	r3, #31
 800d004:	f67f af70 	bls.w	800cee8 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800d008:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d00a:	1d3d      	adds	r5, r7, #4
 800d00c:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800d010:	e000      	b.n	800d014 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d012:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 800d014:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d016:	f000 fd77 	bl	800db08 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d01a:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d01c:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 800d01e:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 800d022:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d024:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d028:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d02c:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d030:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 800d034:	d1ed      	bne.n	800d012 <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 800d036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 800d038:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800d03a:	3b20      	subs	r3, #32
 800d03c:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 800d040:	e752      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800d042:	4620      	mov	r0, r4
 800d044:	f001 ff82 	bl	800ef4c <HAL_SD_TxCpltCallback>
}
 800d048:	b003      	add	sp, #12
 800d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800d04c:	6a23      	ldr	r3, [r4, #32]
 800d04e:	2b1f      	cmp	r3, #31
 800d050:	f67f af4a 	bls.w	800cee8 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800d054:	69e6      	ldr	r6, [r4, #28]
 800d056:	1d37      	adds	r7, r6, #4
 800d058:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800d05c:	e000      	b.n	800d060 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d05e:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800d060:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800d064:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d066:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800d068:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800d06a:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800d06e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d072:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800d074:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800d078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d07c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800d07e:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800d082:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d086:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d088:	f000 fd42 	bl	800db10 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d08c:	42bd      	cmp	r5, r7
 800d08e:	d1e6      	bne.n	800d05e <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 800d090:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800d092:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800d094:	3b20      	subs	r3, #32
 800d096:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800d09a:	e725      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	f001 f8a1 	bl	800e1e4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	f43f af10 	beq.w	800ceca <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800d0aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d0ac:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d0b2:	f7ff fb4d 	bl	800c750 <HAL_SD_ErrorCallback>
 800d0b6:	e708      	b.n	800ceca <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800d0b8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800d0ba:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800d0bc:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800d0be:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d0c2:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d0c4:	f7ff fb44 	bl	800c750 <HAL_SD_ErrorCallback>
 800d0c8:	e70e      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d0ca:	06ab      	lsls	r3, r5, #26
 800d0cc:	d514      	bpl.n	800d0f8 <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d0ce:	f7ff fed1 	bl	800ce74 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800d0d2:	e709      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0d4:	6820      	ldr	r0, [r4, #0]
 800d0d6:	f001 f885 	bl	800e1e4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f43f af73 	beq.w	800cfc8 <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 800d0e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d0e4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d0ea:	f7ff fb31 	bl	800c750 <HAL_SD_ErrorCallback>
 800d0ee:	e76b      	b.n	800cfc8 <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f001 ff2b 	bl	800ef4c <HAL_SD_TxCpltCallback>
 800d0f6:	e770      	b.n	800cfda <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d0f8:	f7ff feb8 	bl	800ce6c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d0fc:	e6f4      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d0fe:	f7ff feb7 	bl	800ce70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800d102:	e6f1      	b.n	800cee8 <HAL_SD_IRQHandler+0x6c>
 800d104:	ffff3ec5 	.word	0xffff3ec5
 800d108:	18000f3a 	.word	0x18000f3a

0800d10c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d10c:	b318      	cbz	r0, 800d156 <HAL_SDRAM_Init+0x4a>
{
 800d10e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d110:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d11c:	b1b3      	cbz	r3, 800d14c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d11e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d120:	2302      	movs	r3, #2
 800d122:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d126:	f851 0b04 	ldr.w	r0, [r1], #4
 800d12a:	f000 fc1f 	bl	800d96c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d12e:	6862      	ldr	r2, [r4, #4]
 800d130:	4629      	mov	r1, r5
 800d132:	6820      	ldr	r0, [r4, #0]
 800d134:	f000 fc58 	bl	800d9e8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d138:	4a08      	ldr	r2, [pc, #32]	; (800d15c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d13a:	2101      	movs	r1, #1

  return HAL_OK;
 800d13c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d13e:	6813      	ldr	r3, [r2, #0]
 800d140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d144:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d146:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800d14c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800d150:	f7f6 fce2 	bl	8003b18 <HAL_SDRAM_MspInit>
 800d154:	e7e3      	b.n	800d11e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800d156:	2001      	movs	r0, #1
}
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	52004000 	.word	0x52004000

0800d160 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d160:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d162:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800d166:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d168:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d16a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d16c:	d004      	beq.n	800d178 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d16e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800d172:	2e01      	cmp	r6, #1
 800d174:	d001      	beq.n	800d17a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800d176:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800d178:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d17a:	2302      	movs	r3, #2
 800d17c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d17e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d180:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d184:	f000 fc7e 	bl	800da84 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d003      	beq.n	800d196 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800d18e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d190:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800d194:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d196:	2305      	movs	r3, #5
  return HAL_OK;
 800d198:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d19a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800d19e:	bd70      	pop	{r4, r5, r6, pc}

0800d1a0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d1a0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d1a2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800d1a6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	b2d8      	uxtb	r0, r3
 800d1ac:	d005      	beq.n	800d1ba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d1ae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	b2dd      	uxtb	r5, r3
 800d1b6:	d001      	beq.n	800d1bc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800d1b8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1bc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d1be:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d1c4:	f000 fc76 	bl	800dab4 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800d1c8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d1ca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}

0800d1d0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800d1d0:	6802      	ldr	r2, [r0, #0]
{
 800d1d2:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800d1d4:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d1d6:	6991      	ldr	r1, [r2, #24]
 800d1d8:	f041 0108 	orr.w	r1, r1, #8
 800d1dc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1de:	6801      	ldr	r1, [r0, #0]
 800d1e0:	698a      	ldr	r2, [r1, #24]
 800d1e2:	f042 0210 	orr.w	r2, r2, #16
 800d1e6:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1e8:	6801      	ldr	r1, [r0, #0]
 800d1ea:	680a      	ldr	r2, [r1, #0]
 800d1ec:	f022 0201 	bic.w	r2, r2, #1
 800d1f0:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d1f2:	6801      	ldr	r1, [r0, #0]
 800d1f4:	4a27      	ldr	r2, [pc, #156]	; (800d294 <SPI_CloseTransfer+0xc4>)
 800d1f6:	690c      	ldr	r4, [r1, #16]
 800d1f8:	4022      	ands	r2, r4
 800d1fa:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1fc:	6801      	ldr	r1, [r0, #0]
 800d1fe:	688a      	ldr	r2, [r1, #8]
 800d200:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d204:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d206:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800d20a:	2a04      	cmp	r2, #4
 800d20c:	d001      	beq.n	800d212 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d20e:	069c      	lsls	r4, r3, #26
 800d210:	d433      	bmi.n	800d27a <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d212:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800d216:	2a03      	cmp	r2, #3
 800d218:	d001      	beq.n	800d21e <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d21a:	0659      	lsls	r1, r3, #25
 800d21c:	d421      	bmi.n	800d262 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d21e:	059a      	lsls	r2, r3, #22
 800d220:	d50a      	bpl.n	800d238 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d222:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d226:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d228:	f042 0201 	orr.w	r2, r2, #1
 800d22c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d230:	698a      	ldr	r2, [r1, #24]
 800d232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d236:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d238:	05db      	lsls	r3, r3, #23
 800d23a:	d50a      	bpl.n	800d252 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d23c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d240:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d242:	f043 0308 	orr.w	r3, r3, #8
 800d246:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d24a:	6993      	ldr	r3, [r2, #24]
 800d24c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d250:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d252:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800d254:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800d258:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d25c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800d260:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d262:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d266:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d268:	f042 0204 	orr.w	r2, r2, #4
 800d26c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d270:	698a      	ldr	r2, [r1, #24]
 800d272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d276:	618a      	str	r2, [r1, #24]
 800d278:	e7d1      	b.n	800d21e <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d27a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d27e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d284:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d288:	698a      	ldr	r2, [r1, #24]
 800d28a:	f042 0220 	orr.w	r2, r2, #32
 800d28e:	618a      	str	r2, [r1, #24]
 800d290:	e7bf      	b.n	800d212 <SPI_CloseTransfer+0x42>
 800d292:	bf00      	nop
 800d294:	fffffc90 	.word	0xfffffc90

0800d298 <HAL_SPI_Init>:
  if (hspi == NULL)
 800d298:	2800      	cmp	r0, #0
 800d29a:	f000 80be 	beq.w	800d41a <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d29e:	4a62      	ldr	r2, [pc, #392]	; (800d428 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2a0:	2100      	movs	r1, #0
{
 800d2a2:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d2a4:	6803      	ldr	r3, [r0, #0]
 800d2a6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2a8:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d015      	beq.n	800d2da <HAL_SPI_Init+0x42>
 800d2ae:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d011      	beq.n	800d2da <HAL_SPI_Init+0x42>
 800d2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	68c2      	ldr	r2, [r0, #12]
 800d2be:	f000 80a5 	beq.w	800d40c <HAL_SPI_Init+0x174>
 800d2c2:	2a0f      	cmp	r2, #15
 800d2c4:	d807      	bhi.n	800d2d6 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2c6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d2c8:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2ca:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d2cc:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800d2ce:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2d2:	2a08      	cmp	r2, #8
 800d2d4:	d914      	bls.n	800d300 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800d2d6:	2001      	movs	r0, #1
}
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800d2da:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800d2de:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2e0:	4d51      	ldr	r5, [pc, #324]	; (800d428 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2e2:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 800d2e4:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2e6:	4951      	ldr	r1, [pc, #324]	; (800d42c <HAL_SPI_Init+0x194>)
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf18      	it	ne
 800d2ec:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800d2ee:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2f2:	d003      	beq.n	800d2fc <HAL_SPI_Init+0x64>
 800d2f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2f8:	428b      	cmp	r3, r1
 800d2fa:	d101      	bne.n	800d300 <HAL_SPI_Init+0x68>
 800d2fc:	2a10      	cmp	r2, #16
 800d2fe:	d8ea      	bhi.n	800d2d6 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d300:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d304:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800d308:	2a00      	cmp	r2, #0
 800d30a:	d078      	beq.n	800d3fe <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800d30c:	2202      	movs	r2, #2
 800d30e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	f022 0201 	bic.w	r2, r2, #1
 800d318:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d31a:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d31c:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d31e:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d320:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800d324:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d326:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d32a:	d058      	beq.n	800d3de <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d32c:	0258      	lsls	r0, r3, #9
 800d32e:	d502      	bpl.n	800d336 <HAL_SPI_Init+0x9e>
 800d330:	68e3      	ldr	r3, [r4, #12]
 800d332:	2b06      	cmp	r3, #6
 800d334:	d84c      	bhi.n	800d3d0 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d336:	6813      	ldr	r3, [r2, #0]
 800d338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d33c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d33e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d340:	69e3      	ldr	r3, [r4, #28]
 800d342:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d344:	432b      	orrs	r3, r5
 800d346:	6822      	ldr	r2, [r4, #0]
 800d348:	4303      	orrs	r3, r0
 800d34a:	68e0      	ldr	r0, [r4, #12]
 800d34c:	4303      	orrs	r3, r0
 800d34e:	430b      	orrs	r3, r1
 800d350:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d352:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d354:	69a0      	ldr	r0, [r4, #24]
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800d35c:	432b      	orrs	r3, r5
 800d35e:	430b      	orrs	r3, r1
 800d360:	6921      	ldr	r1, [r4, #16]
 800d362:	4303      	orrs	r3, r0
 800d364:	6960      	ldr	r0, [r4, #20]
 800d366:	430b      	orrs	r3, r1
 800d368:	6a21      	ldr	r1, [r4, #32]
 800d36a:	4303      	orrs	r3, r0
 800d36c:	6860      	ldr	r0, [r4, #4]
 800d36e:	430b      	orrs	r3, r1
 800d370:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d372:	4303      	orrs	r3, r0
 800d374:	68a0      	ldr	r0, [r4, #8]
 800d376:	430b      	orrs	r3, r1
 800d378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d37a:	4303      	orrs	r3, r0
 800d37c:	430b      	orrs	r3, r1
 800d37e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d380:	430b      	orrs	r3, r1
 800d382:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d384:	6863      	ldr	r3, [r4, #4]
 800d386:	b96b      	cbnz	r3, 800d3a4 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	6893      	ldr	r3, [r2, #8]
 800d38c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800d390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d394:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	6893      	ldr	r3, [r2, #8]
 800d39a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d39e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d3a2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d3ae:	6863      	ldr	r3, [r4, #4]
 800d3b0:	025b      	lsls	r3, r3, #9
 800d3b2:	d506      	bpl.n	800d3c2 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d3b8:	68d3      	ldr	r3, [r2, #12]
 800d3ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3be:	430b      	orrs	r3, r1
 800d3c0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3c2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d3c4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3c6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d3ca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d3d0:	6813      	ldr	r3, [r2, #0]
 800d3d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3d8:	4303      	orrs	r3, r0
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	e7af      	b.n	800d33e <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d3de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3e2:	d01c      	beq.n	800d41e <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1a1      	bne.n	800d32c <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d3e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3ee:	d1a2      	bne.n	800d336 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d3f0:	6813      	ldr	r3, [r2, #0]
 800d3f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3f6:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d3f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3fc:	e796      	b.n	800d32c <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800d3fe:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d400:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800d404:	f7f9 fa40 	bl	8006888 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	e77f      	b.n	800d30c <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d40c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800d40e:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d410:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d412:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800d414:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d418:	e770      	b.n	800d2fc <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800d41a:	2001      	movs	r0, #1
}
 800d41c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d41e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0e5      	beq.n	800d3f0 <HAL_SPI_Init+0x158>
 800d424:	e784      	b.n	800d330 <HAL_SPI_Init+0x98>
 800d426:	bf00      	nop
 800d428:	40013000 	.word	0x40013000
 800d42c:	40003800 	.word	0x40003800

0800d430 <HAL_SPI_Receive_DMA>:
{
 800d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800d432:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d436:	2b01      	cmp	r3, #1
 800d438:	f000 80a9 	beq.w	800d58e <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d43c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d440:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800d442:	2201      	movs	r2, #1
 800d444:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d446:	b2de      	uxtb	r6, r3
 800d448:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800d44a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800d44e:	f040 8093 	bne.w	800d578 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800d452:	2900      	cmp	r1, #0
 800d454:	f000 808b 	beq.w	800d56e <HAL_SPI_Receive_DMA+0x13e>
 800d458:	fab5 f385 	clz	r3, r5
 800d45c:	095b      	lsrs	r3, r3, #5
 800d45e:	2d00      	cmp	r5, #0
 800d460:	f000 8085 	beq.w	800d56e <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d464:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d466:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d468:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d46a:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800d46e:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d472:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800d476:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d478:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d47c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800d480:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d484:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800d488:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d48c:	d07a      	beq.n	800d584 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800d48e:	68d3      	ldr	r3, [r2, #12]
 800d490:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800d494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d498:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d49a:	68e3      	ldr	r3, [r4, #12]
 800d49c:	2b0f      	cmp	r3, #15
 800d49e:	d861      	bhi.n	800d564 <HAL_SPI_Receive_DMA+0x134>
 800d4a0:	2b07      	cmp	r3, #7
 800d4a2:	f200 8092 	bhi.w	800d5ca <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d4a6:	6822      	ldr	r2, [r4, #0]
 800d4a8:	6893      	ldr	r3, [r2, #8]
 800d4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4ae:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d4b0:	68e3      	ldr	r3, [r4, #12]
 800d4b2:	2b07      	cmp	r3, #7
 800d4b4:	d86e      	bhi.n	800d594 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d4b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d4b8:	699a      	ldr	r2, [r3, #24]
 800d4ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d4be:	d107      	bne.n	800d4d0 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d4c0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d4c4:	b292      	uxth	r2, r2
 800d4c6:	3201      	adds	r2, #1
 800d4c8:	0852      	lsrs	r2, r2, #1
 800d4ca:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d4ce:	699a      	ldr	r2, [r3, #24]
 800d4d0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d4d4:	d106      	bne.n	800d4e4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d4d6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	3203      	adds	r2, #3
 800d4de:	0892      	lsrs	r2, r2, #2
 800d4e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d4e4:	4a3e      	ldr	r2, [pc, #248]	; (800d5e0 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800d4e6:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d4e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d4ea:	4a3e      	ldr	r2, [pc, #248]	; (800d5e4 <HAL_SPI_Receive_DMA+0x1b4>)
 800d4ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d4ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d4f0:	4a3d      	ldr	r2, [pc, #244]	; (800d5e8 <HAL_SPI_Receive_DMA+0x1b8>)
 800d4f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d4f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800d4f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d4f8:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800d4fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d4fe:	6821      	ldr	r1, [r4, #0]
 800d500:	b29b      	uxth	r3, r3
 800d502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d504:	3130      	adds	r1, #48	; 0x30
 800d506:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d508:	f7fa f88e 	bl	8007628 <HAL_DMA_Start_IT>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d150      	bne.n	800d5b2 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d510:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d512:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d514:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d516:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d51c:	4b33      	ldr	r3, [pc, #204]	; (800d5ec <HAL_SPI_Receive_DMA+0x1bc>)
 800d51e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d522:	bf18      	it	ne
 800d524:	432b      	orrne	r3, r5
 800d526:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	6893      	ldr	r3, [r2, #8]
 800d52c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d530:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d532:	6822      	ldr	r2, [r4, #0]
 800d534:	6913      	ldr	r3, [r2, #16]
 800d536:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800d53a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800d53c:	6822      	ldr	r2, [r4, #0]
 800d53e:	6813      	ldr	r3, [r2, #0]
 800d540:	f043 0301 	orr.w	r3, r3, #1
 800d544:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d546:	6863      	ldr	r3, [r4, #4]
 800d548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d54c:	d104      	bne.n	800d558 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d54e:	6822      	ldr	r2, [r4, #0]
 800d550:	6813      	ldr	r3, [r2, #0]
 800d552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d556:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800d558:	2300      	movs	r3, #0
  return errorcode;
 800d55a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800d55c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800d560:	4630      	mov	r0, r6
 800d562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d564:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d56c:	d09b      	beq.n	800d4a6 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800d56e:	2300      	movs	r3, #0
 800d570:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800d574:	4630      	mov	r0, r6
 800d576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800d578:	2300      	movs	r3, #0
    return errorcode;
 800d57a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800d57c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800d580:	4630      	mov	r0, r6
 800d582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800d584:	6813      	ldr	r3, [r2, #0]
 800d586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	e785      	b.n	800d49a <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800d58e:	2602      	movs	r6, #2
}
 800d590:	4630      	mov	r0, r6
 800d592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d594:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d596:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d598:	d8a4      	bhi.n	800d4e4 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d59a:	699a      	ldr	r2, [r3, #24]
 800d59c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d5a0:	d1a0      	bne.n	800d4e4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d5a2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	3201      	adds	r2, #1
 800d5aa:	0852      	lsrs	r2, r2, #1
 800d5ac:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800d5b0:	e798      	b.n	800d4e4 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d5b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d5b6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800d5b8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d5bc:	f043 0310 	orr.w	r3, r3, #16
 800d5c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d5c4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800d5c8:	e7d4      	b.n	800d574 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d5ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5d2:	f43f af68 	beq.w	800d4a6 <HAL_SPI_Receive_DMA+0x76>
 800d5d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5da:	d1c8      	bne.n	800d56e <HAL_SPI_Receive_DMA+0x13e>
 800d5dc:	e763      	b.n	800d4a6 <HAL_SPI_Receive_DMA+0x76>
 800d5de:	bf00      	nop
 800d5e0:	0800d621 	.word	0x0800d621
 800d5e4:	0800d5f5 	.word	0x0800d5f5
 800d5e8:	0800d631 	.word	0x0800d631
 800d5ec:	ffff0000 	.word	0xffff0000

0800d5f0 <HAL_SPI_TxCpltCallback>:
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop

0800d5f4 <SPI_DMAReceiveCplt>:
{
 800d5f4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d5f8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d5fc:	2b07      	cmp	r3, #7
 800d5fe:	d009      	beq.n	800d614 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d600:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800d602:	69db      	ldr	r3, [r3, #28]
 800d604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d608:	d005      	beq.n	800d616 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d60a:	6802      	ldr	r2, [r0, #0]
 800d60c:	6913      	ldr	r3, [r2, #16]
 800d60e:	f043 0308 	orr.w	r3, r3, #8
 800d612:	6113      	str	r3, [r2, #16]
}
 800d614:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800d616:	f7f5 ff17 	bl	8003448 <HAL_SPI_RxCpltCallback>
}
 800d61a:	bd08      	pop	{r3, pc}

0800d61c <HAL_SPI_TxRxCpltCallback>:
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <SPI_DMAHalfReceiveCplt>:
{
 800d620:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d622:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d624:	f7f6 f83a 	bl	800369c <HAL_SPI_RxHalfCpltCallback>
}
 800d628:	bd08      	pop	{r3, pc}
 800d62a:	bf00      	nop

0800d62c <HAL_SPI_ErrorCallback>:
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <SPI_DMAError>:
{
 800d630:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d632:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d634:	f7fb f85c 	bl	80086f0 <HAL_DMA_GetError>
 800d638:	2802      	cmp	r0, #2
 800d63a:	d100      	bne.n	800d63e <SPI_DMAError+0xe>
}
 800d63c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800d63e:	6822      	ldr	r2, [r4, #0]
 800d640:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d642:	6991      	ldr	r1, [r2, #24]
 800d644:	f041 0108 	orr.w	r1, r1, #8
 800d648:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d64a:	6821      	ldr	r1, [r4, #0]
 800d64c:	698a      	ldr	r2, [r1, #24]
 800d64e:	f042 0210 	orr.w	r2, r2, #16
 800d652:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800d654:	6821      	ldr	r1, [r4, #0]
 800d656:	680a      	ldr	r2, [r1, #0]
 800d658:	f022 0201 	bic.w	r2, r2, #1
 800d65c:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d65e:	6821      	ldr	r1, [r4, #0]
 800d660:	4a2c      	ldr	r2, [pc, #176]	; (800d714 <SPI_DMAError+0xe4>)
 800d662:	6908      	ldr	r0, [r1, #16]
 800d664:	4002      	ands	r2, r0
 800d666:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d668:	6821      	ldr	r1, [r4, #0]
 800d66a:	688a      	ldr	r2, [r1, #8]
 800d66c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d670:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d672:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d676:	2a04      	cmp	r2, #4
 800d678:	d001      	beq.n	800d67e <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d67a:	0698      	lsls	r0, r3, #26
 800d67c:	d43d      	bmi.n	800d6fa <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d67e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d682:	2a03      	cmp	r2, #3
 800d684:	d001      	beq.n	800d68a <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d686:	0659      	lsls	r1, r3, #25
 800d688:	d42b      	bmi.n	800d6e2 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d68a:	059a      	lsls	r2, r3, #22
 800d68c:	d50a      	bpl.n	800d6a4 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d68e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d692:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d694:	f042 0201 	orr.w	r2, r2, #1
 800d698:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d69c:	698a      	ldr	r2, [r1, #24]
 800d69e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6a2:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d6a4:	05db      	lsls	r3, r3, #23
 800d6a6:	d50a      	bpl.n	800d6be <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d6a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d6ac:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d6ae:	f043 0308 	orr.w	r3, r3, #8
 800d6b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d6b6:	6993      	ldr	r3, [r2, #24]
 800d6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6bc:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800d6be:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800d6c0:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800d6c2:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800d6c4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d6c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d6cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d6d0:	f043 0310 	orr.w	r3, r3, #16
 800d6d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d6d8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800d6dc:	f7ff ffa6 	bl	800d62c <HAL_SPI_ErrorCallback>
}
 800d6e0:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d6e2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6e6:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d6e8:	f042 0204 	orr.w	r2, r2, #4
 800d6ec:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6f0:	698a      	ldr	r2, [r1, #24]
 800d6f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6f6:	618a      	str	r2, [r1, #24]
 800d6f8:	e7c7      	b.n	800d68a <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6fe:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d704:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d708:	698a      	ldr	r2, [r1, #24]
 800d70a:	f042 0220 	orr.w	r2, r2, #32
 800d70e:	618a      	str	r2, [r1, #24]
 800d710:	e7b5      	b.n	800d67e <SPI_DMAError+0x4e>
 800d712:	bf00      	nop
 800d714:	fffffc90 	.word	0xfffffc90

0800d718 <SPI_DMAAbortOnError>:
{
 800d718:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800d71a:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d71c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800d71e:	2300      	movs	r3, #0
 800d720:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d724:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800d728:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800d72c:	f7ff ff7e 	bl	800d62c <HAL_SPI_ErrorCallback>
}
 800d730:	bd08      	pop	{r3, pc}
 800d732:	bf00      	nop

0800d734 <HAL_SPI_SuspendCallback>:
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop

0800d738 <HAL_SPI_IRQHandler>:
{
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800d73c:	6802      	ldr	r2, [r0, #0]
{
 800d73e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800d740:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800d742:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d744:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800d746:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800d74a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d74e:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800d750:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d752:	d502      	bpl.n	800d75a <HAL_SPI_IRQHandler+0x22>
 800d754:	0709      	lsls	r1, r1, #28
 800d756:	f100 80e2 	bmi.w	800d91e <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d75a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800d75e:	2b04      	cmp	r3, #4
 800d760:	d045      	beq.n	800d7ee <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d762:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800d766:	2b01      	cmp	r3, #1
 800d768:	d04b      	beq.n	800d802 <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d76a:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800d76e:	2b02      	cmp	r3, #2
 800d770:	f000 80ec 	beq.w	800d94c <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d774:	072b      	lsls	r3, r5, #28
 800d776:	d564      	bpl.n	800d842 <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d778:	6993      	ldr	r3, [r2, #24]
 800d77a:	f043 0308 	orr.w	r3, r3, #8
 800d77e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d780:	6821      	ldr	r1, [r4, #0]
 800d782:	698b      	ldr	r3, [r1, #24]
 800d784:	f043 0310 	orr.w	r3, r3, #16
 800d788:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d78a:	6821      	ldr	r1, [r4, #0]
 800d78c:	698b      	ldr	r3, [r1, #24]
 800d78e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d792:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d794:	6821      	ldr	r1, [r4, #0]
 800d796:	690b      	ldr	r3, [r1, #16]
 800d798:	f023 0308 	bic.w	r3, r3, #8
 800d79c:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800d7a6:	d136      	bne.n	800d816 <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 800d7a8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d031      	beq.n	800d816 <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d7b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d7b4:	e00f      	b.n	800d7d6 <HAL_SPI_IRQHandler+0x9e>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ba:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d7bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d7be:	3104      	adds	r1, #4
 800d7c0:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d7c2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d7ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	b1fb      	cbz	r3, 800d816 <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d7d6:	68e3      	ldr	r3, [r4, #12]
 800d7d8:	2b0f      	cmp	r3, #15
 800d7da:	d8ec      	bhi.n	800d7b6 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7dc:	2b07      	cmp	r3, #7
 800d7de:	f240 80ad 	bls.w	800d93c <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d7e2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800d7e4:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d7e8:	3102      	adds	r1, #2
 800d7ea:	6661      	str	r1, [r4, #100]	; 0x64
 800d7ec:	e7e9      	b.n	800d7c2 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d7f2:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d7f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d7fa:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d102      	bne.n	800d808 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 800d802:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d804:	4620      	mov	r0, r4
 800d806:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d808:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800d80c:	2d02      	cmp	r5, #2
 800d80e:	f000 809d 	beq.w	800d94c <HAL_SPI_IRQHandler+0x214>
}
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff fcda 	bl	800d1d0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800d81c:	2301      	movs	r3, #1
 800d81e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d822:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d826:	2b00      	cmp	r3, #0
 800d828:	f040 8085 	bne.w	800d936 <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d82c:	2e05      	cmp	r6, #5
 800d82e:	f000 8092 	beq.w	800d956 <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d832:	2e04      	cmp	r6, #4
 800d834:	f000 8092 	beq.w	800d95c <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d838:	2e03      	cmp	r6, #3
 800d83a:	d1ea      	bne.n	800d812 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 800d83c:	f7ff fed8 	bl	800d5f0 <HAL_SPI_TxCpltCallback>
 800d840:	e7e7      	b.n	800d812 <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d842:	f415 7f58 	tst.w	r5, #864	; 0x360
 800d846:	d0e4      	beq.n	800d812 <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d848:	0668      	lsls	r0, r5, #25
 800d84a:	d509      	bpl.n	800d860 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d84c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d850:	f043 0304 	orr.w	r3, r3, #4
 800d854:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d858:	6993      	ldr	r3, [r2, #24]
 800d85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d85e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d860:	05a9      	lsls	r1, r5, #22
 800d862:	d50a      	bpl.n	800d87a <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d868:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d86a:	f043 0301 	orr.w	r3, r3, #1
 800d86e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d872:	6993      	ldr	r3, [r2, #24]
 800d874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d878:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d87a:	05ea      	lsls	r2, r5, #23
 800d87c:	d50a      	bpl.n	800d894 <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d87e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d882:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d884:	f043 0308 	orr.w	r3, r3, #8
 800d888:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d88c:	6993      	ldr	r3, [r2, #24]
 800d88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d892:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d894:	06ab      	lsls	r3, r5, #26
 800d896:	d50a      	bpl.n	800d8ae <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d898:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d89c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d8a6:	6993      	ldr	r3, [r2, #24]
 800d8a8:	f043 0320 	orr.w	r3, r3, #32
 800d8ac:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d0ad      	beq.n	800d812 <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 800d8b6:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d8b8:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800d8bc:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d8be:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800d8c2:	f023 0301 	bic.w	r3, r3, #1
 800d8c6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d8c8:	6822      	ldr	r2, [r4, #0]
 800d8ca:	4b26      	ldr	r3, [pc, #152]	; (800d964 <HAL_SPI_IRQHandler+0x22c>)
 800d8cc:	6911      	ldr	r1, [r2, #16]
 800d8ce:	ea03 0301 	and.w	r3, r3, r1
 800d8d2:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d8d4:	d12b      	bne.n	800d92e <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d8d6:	6822      	ldr	r2, [r4, #0]
 800d8d8:	6893      	ldr	r3, [r2, #8]
 800d8da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d8de:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800d8e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d8e2:	b15b      	cbz	r3, 800d8fc <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d8e4:	4a20      	ldr	r2, [pc, #128]	; (800d968 <HAL_SPI_IRQHandler+0x230>)
 800d8e6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d8e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d8ea:	f7fa f969 	bl	8007bc0 <HAL_DMA_Abort_IT>
 800d8ee:	b128      	cbz	r0, 800d8fc <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d8f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800d8fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d087      	beq.n	800d812 <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d902:	4a19      	ldr	r2, [pc, #100]	; (800d968 <HAL_SPI_IRQHandler+0x230>)
 800d904:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d906:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d908:	f7fa f95a 	bl	8007bc0 <HAL_DMA_Abort_IT>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d080      	beq.n	800d812 <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d910:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d918:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d91c:	e779      	b.n	800d812 <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d91e:	6993      	ldr	r3, [r2, #24]
 800d920:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d924:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800d926:	f7ff ff05 	bl	800d734 <HAL_SPI_SuspendCallback>
}
 800d92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800d92e:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800d930:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800d932:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d936:	f7ff fe79 	bl	800d62c <HAL_SPI_ErrorCallback>
 800d93a:	e76a      	b.n	800d812 <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d942:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d944:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d946:	3101      	adds	r1, #1
 800d948:	6661      	str	r1, [r4, #100]	; 0x64
 800d94a:	e73a      	b.n	800d7c2 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800d94c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d94e:	4620      	mov	r0, r4
}
 800d950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800d954:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800d956:	f7ff fe61 	bl	800d61c <HAL_SPI_TxRxCpltCallback>
 800d95a:	e75a      	b.n	800d812 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 800d95c:	f7f5 fd74 	bl	8003448 <HAL_SPI_RxCpltCallback>
 800d960:	e757      	b.n	800d812 <HAL_SPI_IRQHandler+0xda>
 800d962:	bf00      	nop
 800d964:	fffffc94 	.word	0xfffffc94
 800d968:	0800d719 	.word	0x0800d719

0800d96c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d96c:	680b      	ldr	r3, [r1, #0]
{
 800d96e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d970:	b9d3      	cbnz	r3, 800d9a8 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d972:	6804      	ldr	r4, [r0, #0]
 800d974:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d978:	684a      	ldr	r2, [r1, #4]
 800d97a:	4023      	ands	r3, r4
 800d97c:	4313      	orrs	r3, r2
 800d97e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800d982:	4323      	orrs	r3, r4
 800d984:	4313      	orrs	r3, r2
 800d986:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800d98a:	4323      	orrs	r3, r4
 800d98c:	4313      	orrs	r3, r2
 800d98e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800d992:	4323      	orrs	r3, r4
 800d994:	4313      	orrs	r3, r2
 800d996:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800d99a:	4323      	orrs	r3, r4
 800d99c:	4313      	orrs	r3, r2
 800d99e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a6:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d9a8:	6802      	ldr	r2, [r0, #0]
 800d9aa:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800d9ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d9b2:	4322      	orrs	r2, r4
 800d9b4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800d9b6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d9b8:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d9ba:	4322      	orrs	r2, r4
 800d9bc:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d9be:	6842      	ldr	r2, [r0, #4]
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800d9c6:	4323      	orrs	r3, r4
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800d9ce:	4323      	orrs	r3, r4
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800d9d6:	4323      	orrs	r3, r4
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	6043      	str	r3, [r0, #4]
}
 800d9dc:	2000      	movs	r0, #0
 800d9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	ffff8000 	.word	0xffff8000

0800d9e8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d9e8:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d9ea:	bb02      	cbnz	r2, 800da2e <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d9ec:	6883      	ldr	r3, [r0, #8]
 800d9ee:	e9d1 2400 	ldrd	r2, r4, [r1]
 800d9f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d9f6:	3c01      	subs	r4, #1
 800d9f8:	3a01      	subs	r2, #1
 800d9fa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800d9fe:	4313      	orrs	r3, r2
 800da00:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800da04:	3a01      	subs	r2, #1
 800da06:	3c01      	subs	r4, #1
 800da08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da0c:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 800da10:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 800da14:	6989      	ldr	r1, [r1, #24]
 800da16:	3b01      	subs	r3, #1
 800da18:	3c01      	subs	r4, #1
 800da1a:	3901      	subs	r1, #1
 800da1c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800da20:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800da24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800da28:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800da2a:	2000      	movs	r0, #0
 800da2c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da2e:	6885      	ldr	r5, [r0, #8]
 800da30:	68ca      	ldr	r2, [r1, #12]
 800da32:	4b13      	ldr	r3, [pc, #76]	; (800da80 <FMC_SDRAM_Timing_Init+0x98>)
 800da34:	1e54      	subs	r4, r2, #1
 800da36:	694a      	ldr	r2, [r1, #20]
 800da38:	402b      	ands	r3, r5
 800da3a:	3a01      	subs	r2, #1
 800da3c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800da40:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800da44:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800da46:	68c3      	ldr	r3, [r0, #12]
 800da48:	e9d1 4200 	ldrd	r4, r2, [r1]
 800da4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da50:	3a01      	subs	r2, #1
 800da52:	3c01      	subs	r4, #1
 800da54:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800da58:	ea43 0204 	orr.w	r2, r3, r4
 800da5c:	688c      	ldr	r4, [r1, #8]
 800da5e:	690b      	ldr	r3, [r1, #16]
 800da60:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800da64:	6989      	ldr	r1, [r1, #24]
 800da66:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800da6a:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 800da6e:	3901      	subs	r1, #1
 800da70:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800da74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800da78:	60c3      	str	r3, [r0, #12]
}
 800da7a:	2000      	movs	r0, #0
 800da7c:	bd30      	pop	{r4, r5, pc}
 800da7e:	bf00      	nop
 800da80:	ff0f0fff 	.word	0xff0f0fff

0800da84 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800da84:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800da86:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800da8a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800da8c:	6900      	ldr	r0, [r0, #16]
 800da8e:	4323      	orrs	r3, r4
 800da90:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800da94:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800da98:	4c05      	ldr	r4, [pc, #20]	; (800dab0 <FMC_SDRAM_SendCommand+0x2c>)
 800da9a:	3901      	subs	r1, #1
 800da9c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800da9e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800daa0:	4323      	orrs	r3, r4
 800daa2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800daa6:	6113      	str	r3, [r2, #16]
}
 800daa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	ffc00000 	.word	0xffc00000

0800dab4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800dab4:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800dab8:	2000      	movs	r0, #0
{
 800daba:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800dabc:	6954      	ldr	r4, [r2, #20]
 800dabe:	4023      	ands	r3, r4
 800dac0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800dac4:	6151      	str	r1, [r2, #20]
}
 800dac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	ffffc001 	.word	0xffffc001

0800dad0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dad0:	b084      	sub	sp, #16
 800dad2:	b410      	push	{r4}
 800dad4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dad8:	4614      	mov	r4, r2
{
 800dada:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800dade:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800dae0:	9904      	ldr	r1, [sp, #16]
{
 800dae2:	4602      	mov	r2, r0
             Init.BusWide             | \
 800dae4:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800dae6:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dae8:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800daea:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800daec:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800daee:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800daf0:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800daf2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800daf4:	4903      	ldr	r1, [pc, #12]	; (800db04 <SDMMC_Init+0x34>)
 800daf6:	4021      	ands	r1, r4
 800daf8:	430b      	orrs	r3, r1
 800dafa:	6053      	str	r3, [r2, #4]
}
 800dafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db00:	b004      	add	sp, #16
 800db02:	4770      	bx	lr
 800db04:	ffc02c00 	.word	0xffc02c00

0800db08 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800db08:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop

0800db10 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800db10:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800db12:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800db14:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800db16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800db1a:	4770      	bx	lr

0800db1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800db1c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800db1e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	f042 0203 	orr.w	r2, r2, #3
 800db26:	601a      	str	r2, [r3, #0]
}
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop

0800db2c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800db2c:	6800      	ldr	r0, [r0, #0]
}
 800db2e:	f000 0003 	and.w	r0, r0, #3
 800db32:	4770      	bx	lr

0800db34 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800db34:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800db36:	5840      	ldr	r0, [r0, r1]
}
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop

0800db3c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800db3c:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db3e:	680b      	ldr	r3, [r1, #0]
{
 800db40:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db42:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db44:	684b      	ldr	r3, [r1, #4]
 800db46:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800db48:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db4c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800db50:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800db52:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db54:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800db58:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800db5a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800db5c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db5e:	430b      	orrs	r3, r1
 800db60:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800db62:	bc30      	pop	{r4, r5}
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop

0800db68 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db68:	4a4c      	ldr	r2, [pc, #304]	; (800dc9c <SDMMC_CmdBlockLength+0x134>)
 800db6a:	4b4d      	ldr	r3, [pc, #308]	; (800dca0 <SDMMC_CmdBlockLength+0x138>)
{
 800db6c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db6e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800db70:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db72:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db76:	68c1      	ldr	r1, [r0, #12]
 800db78:	4c4a      	ldr	r4, [pc, #296]	; (800dca4 <SDMMC_CmdBlockLength+0x13c>)
 800db7a:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db7e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db80:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db82:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db86:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db88:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db8c:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800db8e:	b14a      	cbz	r2, 800dba4 <SDMMC_CmdBlockLength+0x3c>
 800db90:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800db92:	4945      	ldr	r1, [pc, #276]	; (800dca8 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 800db94:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800db96:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db98:	420a      	tst	r2, r1
 800db9a:	d001      	beq.n	800dba0 <SDMMC_CmdBlockLength+0x38>
 800db9c:	0492      	lsls	r2, r2, #18
 800db9e:	d507      	bpl.n	800dbb0 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 800dba0:	1c5c      	adds	r4, r3, #1
 800dba2:	d1f7      	bne.n	800db94 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800dba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbae:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbb2:	075c      	lsls	r4, r3, #29
 800dbb4:	d43d      	bmi.n	800dc32 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbb8:	f013 0301 	ands.w	r3, r3, #1
 800dbbc:	d134      	bne.n	800dc28 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbbe:	4b3b      	ldr	r3, [pc, #236]	; (800dcac <SDMMC_CmdBlockLength+0x144>)
 800dbc0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dbc2:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2b10      	cmp	r3, #16
 800dbc8:	d131      	bne.n	800dc2e <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 800dbca:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbcc:	4b38      	ldr	r3, [pc, #224]	; (800dcb0 <SDMMC_CmdBlockLength+0x148>)
 800dbce:	4013      	ands	r3, r2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0e9      	beq.n	800dba8 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dbd4:	2a00      	cmp	r2, #0
 800dbd6:	db30      	blt.n	800dc3a <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dbd8:	0051      	lsls	r1, r2, #1
 800dbda:	d431      	bmi.n	800dc40 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dbdc:	0094      	lsls	r4, r2, #2
 800dbde:	d431      	bmi.n	800dc44 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dbe0:	00d0      	lsls	r0, r2, #3
 800dbe2:	d431      	bmi.n	800dc48 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dbe4:	0111      	lsls	r1, r2, #4
 800dbe6:	d432      	bmi.n	800dc4e <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dbe8:	0154      	lsls	r4, r2, #5
 800dbea:	d433      	bmi.n	800dc54 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dbec:	01d0      	lsls	r0, r2, #7
 800dbee:	d434      	bmi.n	800dc5a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dbf0:	0211      	lsls	r1, r2, #8
 800dbf2:	d435      	bmi.n	800dc60 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dbf4:	0254      	lsls	r4, r2, #9
 800dbf6:	d436      	bmi.n	800dc66 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dbf8:	0290      	lsls	r0, r2, #10
 800dbfa:	d440      	bmi.n	800dc7e <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dbfc:	02d1      	lsls	r1, r2, #11
 800dbfe:	d43b      	bmi.n	800dc78 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc00:	0354      	lsls	r4, r2, #13
 800dc02:	d436      	bmi.n	800dc72 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc04:	0390      	lsls	r0, r2, #14
 800dc06:	d431      	bmi.n	800dc6c <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc08:	03d1      	lsls	r1, r2, #15
 800dc0a:	d444      	bmi.n	800dc96 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc0c:	0414      	lsls	r4, r2, #16
 800dc0e:	d43f      	bmi.n	800dc90 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc10:	0450      	lsls	r0, r2, #17
 800dc12:	d43a      	bmi.n	800dc8a <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc14:	0491      	lsls	r1, r2, #18
 800dc16:	d435      	bmi.n	800dc84 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc18:	f012 0f08 	tst.w	r2, #8
 800dc1c:	bf14      	ite	ne
 800dc1e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800dc22:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800dc26:	e7bf      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc28:	2201      	movs	r2, #1
 800dc2a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc2c:	e7bc      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e7ba      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc32:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc34:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc38:	e7b6      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dc3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dc3e:	e7b3      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc40:	2340      	movs	r3, #64	; 0x40
 800dc42:	e7b1      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dc44:	2380      	movs	r3, #128	; 0x80
 800dc46:	e7af      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc4c:	e7ac      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc52:	e7a9      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc58:	e7a6      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc5e:	e7a3      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc64:	e7a0      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc6a:	e79d      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc70:	e79a      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dc76:	e797      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 800dc78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc7c:	e794      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc82:	e791      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800dc84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dc88:	e78e      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dc8e:	e78b      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dc94:	e788      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc9a:	e785      	b.n	800dba8 <SDMMC_CmdBlockLength+0x40>
 800dc9c:	20000094 	.word	0x20000094
 800dca0:	10624dd3 	.word	0x10624dd3
 800dca4:	fffee0c0 	.word	0xfffee0c0
 800dca8:	00200045 	.word	0x00200045
 800dcac:	002000c5 	.word	0x002000c5
 800dcb0:	fdffe008 	.word	0xfdffe008

0800dcb4 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcb4:	4a4c      	ldr	r2, [pc, #304]	; (800dde8 <SDMMC_CmdReadSingleBlock+0x134>)
 800dcb6:	4b4d      	ldr	r3, [pc, #308]	; (800ddec <SDMMC_CmdReadSingleBlock+0x138>)
{
 800dcb8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800dcbc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcbe:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcc2:	68c1      	ldr	r1, [r0, #12]
 800dcc4:	4c4a      	ldr	r4, [pc, #296]	; (800ddf0 <SDMMC_CmdReadSingleBlock+0x13c>)
 800dcc6:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dccc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcce:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcd2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dcd4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcd8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dcda:	b14a      	cbz	r2, 800dcf0 <SDMMC_CmdReadSingleBlock+0x3c>
 800dcdc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dcde:	4945      	ldr	r1, [pc, #276]	; (800ddf4 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800dce0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800dce2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dce4:	420a      	tst	r2, r1
 800dce6:	d001      	beq.n	800dcec <SDMMC_CmdReadSingleBlock+0x38>
 800dce8:	0492      	lsls	r2, r2, #18
 800dcea:	d507      	bpl.n	800dcfc <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 800dcec:	1c5c      	adds	r4, r3, #1
 800dcee:	d1f7      	bne.n	800dce0 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800dcf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcfa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dcfe:	075c      	lsls	r4, r3, #29
 800dd00:	d43d      	bmi.n	800dd7e <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dd04:	f013 0301 	ands.w	r3, r3, #1
 800dd08:	d134      	bne.n	800dd74 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd0a:	4b3b      	ldr	r3, [pc, #236]	; (800ddf8 <SDMMC_CmdReadSingleBlock+0x144>)
 800dd0c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dd0e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b11      	cmp	r3, #17
 800dd14:	d131      	bne.n	800dd7a <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800dd16:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd18:	4b38      	ldr	r3, [pc, #224]	; (800ddfc <SDMMC_CmdReadSingleBlock+0x148>)
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d0e9      	beq.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd20:	2a00      	cmp	r2, #0
 800dd22:	db30      	blt.n	800dd86 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dd24:	0051      	lsls	r1, r2, #1
 800dd26:	d431      	bmi.n	800dd8c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dd28:	0094      	lsls	r4, r2, #2
 800dd2a:	d431      	bmi.n	800dd90 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dd2c:	00d0      	lsls	r0, r2, #3
 800dd2e:	d431      	bmi.n	800dd94 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dd30:	0111      	lsls	r1, r2, #4
 800dd32:	d432      	bmi.n	800dd9a <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dd34:	0154      	lsls	r4, r2, #5
 800dd36:	d433      	bmi.n	800dda0 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dd38:	01d0      	lsls	r0, r2, #7
 800dd3a:	d434      	bmi.n	800dda6 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dd3c:	0211      	lsls	r1, r2, #8
 800dd3e:	d435      	bmi.n	800ddac <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dd40:	0254      	lsls	r4, r2, #9
 800dd42:	d436      	bmi.n	800ddb2 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dd44:	0290      	lsls	r0, r2, #10
 800dd46:	d440      	bmi.n	800ddca <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dd48:	02d1      	lsls	r1, r2, #11
 800dd4a:	d43b      	bmi.n	800ddc4 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dd4c:	0354      	lsls	r4, r2, #13
 800dd4e:	d436      	bmi.n	800ddbe <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dd50:	0390      	lsls	r0, r2, #14
 800dd52:	d431      	bmi.n	800ddb8 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dd54:	03d1      	lsls	r1, r2, #15
 800dd56:	d444      	bmi.n	800dde2 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dd58:	0414      	lsls	r4, r2, #16
 800dd5a:	d43f      	bmi.n	800dddc <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dd5c:	0450      	lsls	r0, r2, #17
 800dd5e:	d43a      	bmi.n	800ddd6 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dd60:	0491      	lsls	r1, r2, #18
 800dd62:	d435      	bmi.n	800ddd0 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd64:	f012 0f08 	tst.w	r2, #8
 800dd68:	bf14      	ite	ne
 800dd6a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800dd6e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800dd72:	e7bf      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd74:	2201      	movs	r2, #1
 800dd76:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd78:	e7bc      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e7ba      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd7e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd80:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd82:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd84:	e7b6      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd8a:	e7b3      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dd8c:	2340      	movs	r3, #64	; 0x40
 800dd8e:	e7b1      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dd90:	2380      	movs	r3, #128	; 0x80
 800dd92:	e7af      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dd94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd98:	e7ac      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dd9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd9e:	e7a9      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dda0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dda4:	e7a6      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dda6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddaa:	e7a3      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ddac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddb0:	e7a0      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ddb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ddb6:	e79d      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ddb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ddbc:	e79a      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ddbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ddc2:	e797      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800ddc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddc8:	e794      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ddca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddce:	e791      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800ddd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ddd4:	e78e      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ddd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ddda:	e78b      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dde0:	e788      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dde2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dde6:	e785      	b.n	800dcf4 <SDMMC_CmdReadSingleBlock+0x40>
 800dde8:	20000094 	.word	0x20000094
 800ddec:	10624dd3 	.word	0x10624dd3
 800ddf0:	fffee0c0 	.word	0xfffee0c0
 800ddf4:	00200045 	.word	0x00200045
 800ddf8:	002000c5 	.word	0x002000c5
 800ddfc:	fdffe008 	.word	0xfdffe008

0800de00 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de00:	4a4c      	ldr	r2, [pc, #304]	; (800df34 <SDMMC_CmdReadMultiBlock+0x134>)
 800de02:	4b4d      	ldr	r3, [pc, #308]	; (800df38 <SDMMC_CmdReadMultiBlock+0x138>)
{
 800de04:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de06:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800de08:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de0a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de0e:	68c1      	ldr	r1, [r0, #12]
 800de10:	4c4a      	ldr	r4, [pc, #296]	; (800df3c <SDMMC_CmdReadMultiBlock+0x13c>)
 800de12:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de16:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de18:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de1a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de1e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de20:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de24:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800de26:	b14a      	cbz	r2, 800de3c <SDMMC_CmdReadMultiBlock+0x3c>
 800de28:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800de2a:	4945      	ldr	r1, [pc, #276]	; (800df40 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800de2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800de2e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800de30:	420a      	tst	r2, r1
 800de32:	d001      	beq.n	800de38 <SDMMC_CmdReadMultiBlock+0x38>
 800de34:	0492      	lsls	r2, r2, #18
 800de36:	d507      	bpl.n	800de48 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 800de38:	1c5c      	adds	r4, r3, #1
 800de3a:	d1f7      	bne.n	800de2c <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800de3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800de40:	4618      	mov	r0, r3
 800de42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de46:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de4a:	075c      	lsls	r4, r3, #29
 800de4c:	d43d      	bmi.n	800deca <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de50:	f013 0301 	ands.w	r3, r3, #1
 800de54:	d134      	bne.n	800dec0 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de56:	4b3b      	ldr	r3, [pc, #236]	; (800df44 <SDMMC_CmdReadMultiBlock+0x144>)
 800de58:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800de5a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b12      	cmp	r3, #18
 800de60:	d131      	bne.n	800dec6 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800de62:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de64:	4b38      	ldr	r3, [pc, #224]	; (800df48 <SDMMC_CmdReadMultiBlock+0x148>)
 800de66:	4013      	ands	r3, r2
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0e9      	beq.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de6c:	2a00      	cmp	r2, #0
 800de6e:	db30      	blt.n	800ded2 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de70:	0051      	lsls	r1, r2, #1
 800de72:	d431      	bmi.n	800ded8 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de74:	0094      	lsls	r4, r2, #2
 800de76:	d431      	bmi.n	800dedc <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de78:	00d0      	lsls	r0, r2, #3
 800de7a:	d431      	bmi.n	800dee0 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de7c:	0111      	lsls	r1, r2, #4
 800de7e:	d432      	bmi.n	800dee6 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de80:	0154      	lsls	r4, r2, #5
 800de82:	d433      	bmi.n	800deec <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de84:	01d0      	lsls	r0, r2, #7
 800de86:	d434      	bmi.n	800def2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de88:	0211      	lsls	r1, r2, #8
 800de8a:	d435      	bmi.n	800def8 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de8c:	0254      	lsls	r4, r2, #9
 800de8e:	d436      	bmi.n	800defe <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de90:	0290      	lsls	r0, r2, #10
 800de92:	d440      	bmi.n	800df16 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de94:	02d1      	lsls	r1, r2, #11
 800de96:	d43b      	bmi.n	800df10 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de98:	0354      	lsls	r4, r2, #13
 800de9a:	d436      	bmi.n	800df0a <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de9c:	0390      	lsls	r0, r2, #14
 800de9e:	d431      	bmi.n	800df04 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dea0:	03d1      	lsls	r1, r2, #15
 800dea2:	d444      	bmi.n	800df2e <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dea4:	0414      	lsls	r4, r2, #16
 800dea6:	d43f      	bmi.n	800df28 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dea8:	0450      	lsls	r0, r2, #17
 800deaa:	d43a      	bmi.n	800df22 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800deac:	0491      	lsls	r1, r2, #18
 800deae:	d435      	bmi.n	800df1c <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800deb0:	f012 0f08 	tst.w	r2, #8
 800deb4:	bf14      	ite	ne
 800deb6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800deba:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800debe:	e7bf      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dec0:	2201      	movs	r2, #1
 800dec2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dec4:	e7bc      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e7ba      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800deca:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800decc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dece:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ded0:	e7b6      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ded2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ded6:	e7b3      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ded8:	2340      	movs	r3, #64	; 0x40
 800deda:	e7b1      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dedc:	2380      	movs	r3, #128	; 0x80
 800dede:	e7af      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee4:	e7ac      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deea:	e7a9      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800deec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def0:	e7a6      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800def2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800def6:	e7a3      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800def8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800defc:	e7a0      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800defe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df02:	e79d      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800df04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df08:	e79a      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800df0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df0e:	e797      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800df10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df14:	e794      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800df16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df1a:	e791      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800df1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df20:	e78e      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800df26:	e78b      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800df2c:	e788      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df32:	e785      	b.n	800de40 <SDMMC_CmdReadMultiBlock+0x40>
 800df34:	20000094 	.word	0x20000094
 800df38:	10624dd3 	.word	0x10624dd3
 800df3c:	fffee0c0 	.word	0xfffee0c0
 800df40:	00200045 	.word	0x00200045
 800df44:	002000c5 	.word	0x002000c5
 800df48:	fdffe008 	.word	0xfdffe008

0800df4c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df4c:	4a4c      	ldr	r2, [pc, #304]	; (800e080 <SDMMC_CmdWriteSingleBlock+0x134>)
 800df4e:	4b4d      	ldr	r3, [pc, #308]	; (800e084 <SDMMC_CmdWriteSingleBlock+0x138>)
{
 800df50:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df52:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800df54:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df56:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df5a:	68c1      	ldr	r1, [r0, #12]
 800df5c:	4c4a      	ldr	r4, [pc, #296]	; (800e088 <SDMMC_CmdWriteSingleBlock+0x13c>)
 800df5e:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df62:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df64:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df66:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df6a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df6c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df70:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800df72:	b14a      	cbz	r2, 800df88 <SDMMC_CmdWriteSingleBlock+0x3c>
 800df74:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800df76:	4945      	ldr	r1, [pc, #276]	; (800e08c <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800df78:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800df7a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800df7c:	420a      	tst	r2, r1
 800df7e:	d001      	beq.n	800df84 <SDMMC_CmdWriteSingleBlock+0x38>
 800df80:	0492      	lsls	r2, r2, #18
 800df82:	d507      	bpl.n	800df94 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 800df84:	1c5c      	adds	r4, r3, #1
 800df86:	d1f7      	bne.n	800df78 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800df88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df92:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df96:	075c      	lsls	r4, r3, #29
 800df98:	d43d      	bmi.n	800e016 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df9c:	f013 0301 	ands.w	r3, r3, #1
 800dfa0:	d134      	bne.n	800e00c <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfa2:	4b3b      	ldr	r3, [pc, #236]	; (800e090 <SDMMC_CmdWriteSingleBlock+0x144>)
 800dfa4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dfa6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b18      	cmp	r3, #24
 800dfac:	d131      	bne.n	800e012 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800dfae:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dfb0:	4b38      	ldr	r3, [pc, #224]	; (800e094 <SDMMC_CmdWriteSingleBlock+0x148>)
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0e9      	beq.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dfb8:	2a00      	cmp	r2, #0
 800dfba:	db30      	blt.n	800e01e <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dfbc:	0051      	lsls	r1, r2, #1
 800dfbe:	d431      	bmi.n	800e024 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dfc0:	0094      	lsls	r4, r2, #2
 800dfc2:	d431      	bmi.n	800e028 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dfc4:	00d0      	lsls	r0, r2, #3
 800dfc6:	d431      	bmi.n	800e02c <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dfc8:	0111      	lsls	r1, r2, #4
 800dfca:	d432      	bmi.n	800e032 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfcc:	0154      	lsls	r4, r2, #5
 800dfce:	d433      	bmi.n	800e038 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfd0:	01d0      	lsls	r0, r2, #7
 800dfd2:	d434      	bmi.n	800e03e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfd4:	0211      	lsls	r1, r2, #8
 800dfd6:	d435      	bmi.n	800e044 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfd8:	0254      	lsls	r4, r2, #9
 800dfda:	d436      	bmi.n	800e04a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfdc:	0290      	lsls	r0, r2, #10
 800dfde:	d440      	bmi.n	800e062 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dfe0:	02d1      	lsls	r1, r2, #11
 800dfe2:	d43b      	bmi.n	800e05c <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dfe4:	0354      	lsls	r4, r2, #13
 800dfe6:	d436      	bmi.n	800e056 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dfe8:	0390      	lsls	r0, r2, #14
 800dfea:	d431      	bmi.n	800e050 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dfec:	03d1      	lsls	r1, r2, #15
 800dfee:	d444      	bmi.n	800e07a <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dff0:	0414      	lsls	r4, r2, #16
 800dff2:	d43f      	bmi.n	800e074 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dff4:	0450      	lsls	r0, r2, #17
 800dff6:	d43a      	bmi.n	800e06e <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dff8:	0491      	lsls	r1, r2, #18
 800dffa:	d435      	bmi.n	800e068 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dffc:	f012 0f08 	tst.w	r2, #8
 800e000:	bf14      	ite	ne
 800e002:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e006:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e00a:	e7bf      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e00c:	2201      	movs	r2, #1
 800e00e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e010:	e7bc      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e012:	2301      	movs	r3, #1
 800e014:	e7ba      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e016:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e018:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e01a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e01c:	e7b6      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e01e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e022:	e7b3      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e024:	2340      	movs	r3, #64	; 0x40
 800e026:	e7b1      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e028:	2380      	movs	r3, #128	; 0x80
 800e02a:	e7af      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e030:	e7ac      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e036:	e7a9      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e03c:	e7a6      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e03e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e042:	e7a3      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e048:	e7a0      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e04a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e04e:	e79d      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e054:	e79a      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e05a:	e797      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e060:	e794      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e066:	e791      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e068:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e06c:	e78e      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e06e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e072:	e78b      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e078:	e788      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e07a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e07e:	e785      	b.n	800df8c <SDMMC_CmdWriteSingleBlock+0x40>
 800e080:	20000094 	.word	0x20000094
 800e084:	10624dd3 	.word	0x10624dd3
 800e088:	fffee0c0 	.word	0xfffee0c0
 800e08c:	00200045 	.word	0x00200045
 800e090:	002000c5 	.word	0x002000c5
 800e094:	fdffe008 	.word	0xfdffe008

0800e098 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e098:	4a4c      	ldr	r2, [pc, #304]	; (800e1cc <SDMMC_CmdWriteMultiBlock+0x134>)
 800e09a:	4b4d      	ldr	r3, [pc, #308]	; (800e1d0 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 800e09c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e09e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e0a0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e0a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0a6:	68c1      	ldr	r1, [r0, #12]
 800e0a8:	4c4a      	ldr	r4, [pc, #296]	; (800e1d4 <SDMMC_CmdWriteMultiBlock+0x13c>)
 800e0aa:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e0ae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0b0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e0b2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0b6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e0b8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0bc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e0be:	b14a      	cbz	r2, 800e0d4 <SDMMC_CmdWriteMultiBlock+0x3c>
 800e0c0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e0c2:	4945      	ldr	r1, [pc, #276]	; (800e1d8 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800e0c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e0c6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0c8:	420a      	tst	r2, r1
 800e0ca:	d001      	beq.n	800e0d0 <SDMMC_CmdWriteMultiBlock+0x38>
 800e0cc:	0492      	lsls	r2, r2, #18
 800e0ce:	d507      	bpl.n	800e0e0 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 800e0d0:	1c5c      	adds	r4, r3, #1
 800e0d2:	d1f7      	bne.n	800e0c4 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e0d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0de:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e0e2:	075c      	lsls	r4, r3, #29
 800e0e4:	d43d      	bmi.n	800e162 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e0e8:	f013 0301 	ands.w	r3, r3, #1
 800e0ec:	d134      	bne.n	800e158 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0ee:	4b3b      	ldr	r3, [pc, #236]	; (800e1dc <SDMMC_CmdWriteMultiBlock+0x144>)
 800e0f0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e0f2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b19      	cmp	r3, #25
 800e0f8:	d131      	bne.n	800e15e <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e0fa:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e0fc:	4b38      	ldr	r3, [pc, #224]	; (800e1e0 <SDMMC_CmdWriteMultiBlock+0x148>)
 800e0fe:	4013      	ands	r3, r2
 800e100:	2b00      	cmp	r3, #0
 800e102:	d0e9      	beq.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e104:	2a00      	cmp	r2, #0
 800e106:	db30      	blt.n	800e16a <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e108:	0051      	lsls	r1, r2, #1
 800e10a:	d431      	bmi.n	800e170 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e10c:	0094      	lsls	r4, r2, #2
 800e10e:	d431      	bmi.n	800e174 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e110:	00d0      	lsls	r0, r2, #3
 800e112:	d431      	bmi.n	800e178 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e114:	0111      	lsls	r1, r2, #4
 800e116:	d432      	bmi.n	800e17e <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e118:	0154      	lsls	r4, r2, #5
 800e11a:	d433      	bmi.n	800e184 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e11c:	01d0      	lsls	r0, r2, #7
 800e11e:	d434      	bmi.n	800e18a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e120:	0211      	lsls	r1, r2, #8
 800e122:	d435      	bmi.n	800e190 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e124:	0254      	lsls	r4, r2, #9
 800e126:	d436      	bmi.n	800e196 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e128:	0290      	lsls	r0, r2, #10
 800e12a:	d440      	bmi.n	800e1ae <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e12c:	02d1      	lsls	r1, r2, #11
 800e12e:	d43b      	bmi.n	800e1a8 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e130:	0354      	lsls	r4, r2, #13
 800e132:	d436      	bmi.n	800e1a2 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e134:	0390      	lsls	r0, r2, #14
 800e136:	d431      	bmi.n	800e19c <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e138:	03d1      	lsls	r1, r2, #15
 800e13a:	d444      	bmi.n	800e1c6 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e13c:	0414      	lsls	r4, r2, #16
 800e13e:	d43f      	bmi.n	800e1c0 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e140:	0450      	lsls	r0, r2, #17
 800e142:	d43a      	bmi.n	800e1ba <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e144:	0491      	lsls	r1, r2, #18
 800e146:	d435      	bmi.n	800e1b4 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e148:	f012 0f08 	tst.w	r2, #8
 800e14c:	bf14      	ite	ne
 800e14e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e152:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e156:	e7bf      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e158:	2201      	movs	r2, #1
 800e15a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e15c:	e7bc      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e15e:	2301      	movs	r3, #1
 800e160:	e7ba      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e162:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e164:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e166:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e168:	e7b6      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e16a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e16e:	e7b3      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e170:	2340      	movs	r3, #64	; 0x40
 800e172:	e7b1      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e174:	2380      	movs	r3, #128	; 0x80
 800e176:	e7af      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e17c:	e7ac      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e182:	e7a9      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e188:	e7a6      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e18a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e18e:	e7a3      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e194:	e7a0      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e19a:	e79d      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e19c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e1a0:	e79a      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e1a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e1a6:	e797      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e1a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1ac:	e794      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e1ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e1b2:	e791      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e1b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e1b8:	e78e      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e1ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e1be:	e78b      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e1c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e1c4:	e788      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e1c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e1ca:	e785      	b.n	800e0d8 <SDMMC_CmdWriteMultiBlock+0x40>
 800e1cc:	20000094 	.word	0x20000094
 800e1d0:	10624dd3 	.word	0x10624dd3
 800e1d4:	fffee0c0 	.word	0xfffee0c0
 800e1d8:	00200045 	.word	0x00200045
 800e1dc:	002000c5 	.word	0x002000c5
 800e1e0:	fdffe008 	.word	0xfdffe008

0800e1e4 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e1e4:	4b7d      	ldr	r3, [pc, #500]	; (800e3dc <SDMMC_CmdStopTransfer+0x1f8>)
 800e1e6:	497e      	ldr	r1, [pc, #504]	; (800e3e0 <SDMMC_CmdStopTransfer+0x1fc>)
{
 800e1e8:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e1ea:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800e1ec:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1ee:	4b7d      	ldr	r3, [pc, #500]	; (800e3e4 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e1f0:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e1f4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e1f6:	4d7c      	ldr	r5, [pc, #496]	; (800e3e8 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e1f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e1fc:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e1fe:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e200:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e202:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e206:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800e20a:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e20c:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800e210:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e212:	68c4      	ldr	r4, [r0, #12]
 800e214:	4023      	ands	r3, r4
 800e216:	4319      	orrs	r1, r3
 800e218:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800e21a:	b14a      	cbz	r2, 800e230 <SDMMC_CmdStopTransfer+0x4c>
 800e21c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e21e:	4973      	ldr	r1, [pc, #460]	; (800e3ec <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 800e220:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e222:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e224:	420a      	tst	r2, r1
 800e226:	d001      	beq.n	800e22c <SDMMC_CmdStopTransfer+0x48>
 800e228:	0492      	lsls	r2, r2, #18
 800e22a:	d50a      	bpl.n	800e242 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800e22c:	1c5c      	adds	r4, r3, #1
 800e22e:	d1f7      	bne.n	800e220 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e230:	68c2      	ldr	r2, [r0, #12]
 800e232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e23a:	60c2      	str	r2, [r0, #12]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	bc30      	pop	{r4, r5}
 800e240:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e242:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e244:	075b      	lsls	r3, r3, #29
 800e246:	d454      	bmi.n	800e2f2 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e248:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e24a:	f013 0301 	ands.w	r3, r3, #1
 800e24e:	d13c      	bne.n	800e2ca <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e250:	4a67      	ldr	r2, [pc, #412]	; (800e3f0 <SDMMC_CmdStopTransfer+0x20c>)
 800e252:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e254:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e256:	b2d2      	uxtb	r2, r2
 800e258:	2a0c      	cmp	r2, #12
 800e25a:	d144      	bne.n	800e2e6 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 800e25c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e25e:	4965      	ldr	r1, [pc, #404]	; (800e3f4 <SDMMC_CmdStopTransfer+0x210>)
 800e260:	4011      	ands	r1, r2
 800e262:	2900      	cmp	r1, #0
 800e264:	d038      	beq.n	800e2d8 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e266:	2a00      	cmp	r2, #0
 800e268:	db36      	blt.n	800e2d8 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e26a:	0055      	lsls	r5, r2, #1
 800e26c:	d448      	bmi.n	800e300 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e26e:	0094      	lsls	r4, r2, #2
 800e270:	d44c      	bmi.n	800e30c <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e272:	00d1      	lsls	r1, r2, #3
 800e274:	d450      	bmi.n	800e318 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e276:	0113      	lsls	r3, r2, #4
 800e278:	d455      	bmi.n	800e326 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e27a:	0155      	lsls	r5, r2, #5
 800e27c:	d45a      	bmi.n	800e334 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e27e:	01d4      	lsls	r4, r2, #7
 800e280:	d466      	bmi.n	800e350 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e282:	0211      	lsls	r1, r2, #8
 800e284:	d45d      	bmi.n	800e342 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e286:	0253      	lsls	r3, r2, #9
 800e288:	d470      	bmi.n	800e36c <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e28a:	0295      	lsls	r5, r2, #10
 800e28c:	d467      	bmi.n	800e35e <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e28e:	02d4      	lsls	r4, r2, #11
 800e290:	f100 8081 	bmi.w	800e396 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e294:	0351      	lsls	r1, r2, #13
 800e296:	d477      	bmi.n	800e388 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e298:	0393      	lsls	r3, r2, #14
 800e29a:	d46e      	bmi.n	800e37a <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e29c:	03d5      	lsls	r5, r2, #15
 800e29e:	f100 8096 	bmi.w	800e3ce <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e2a2:	0414      	lsls	r4, r2, #16
 800e2a4:	f100 8085 	bmi.w	800e3b2 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e2a8:	0451      	lsls	r1, r2, #17
 800e2aa:	d47b      	bmi.n	800e3a4 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e2ac:	0493      	lsls	r3, r2, #18
 800e2ae:	f100 8087 	bmi.w	800e3c0 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e2b2:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2b6:	68c2      	ldr	r2, [r0, #12]
 800e2b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e2bc:	bf14      	ite	ne
 800e2be:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2c2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2c6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e2c8:	e7b8      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2ce:	68c2      	ldr	r2, [r0, #12]
 800e2d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2d4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e2d6:	e7b1      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2d8:	68c2      	ldr	r2, [r0, #12]
 800e2da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2de:	60c2      	str	r2, [r0, #12]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	bc30      	pop	{r4, r5}
 800e2e4:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2e6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2e8:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2ee:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e2f0:	e7a4      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2f2:	2304      	movs	r3, #4
 800e2f4:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e2f6:	68c2      	ldr	r2, [r0, #12]
 800e2f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2fc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e2fe:	e79d      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e300:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e302:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e308:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e30a:	e797      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e30c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e30e:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e314:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e316:	e791      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e318:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e31a:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e31e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e322:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e324:	e78a      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e326:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e328:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e32c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e330:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e332:	e783      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e334:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e336:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e33a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e33e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e340:	e77c      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e342:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e34c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e34e:	e775      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e350:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e352:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e35a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e35c:	e76e      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e35e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e368:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e36a:	e767      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e36c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e36e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e376:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e378:	e760      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e37a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e37c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e384:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e386:	e759      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e388:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e38a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e38e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e392:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e394:	e752      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e396:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 800e398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e39c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3a0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e3a2:	e74b      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3a4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e3a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3ae:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e3b0:	e744      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3b2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e3b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3bc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e3be:	e73d      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3c0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800e3c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3ca:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e3cc:	e736      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3ce:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e3d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3d8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e3da:	e72f      	b.n	800e23c <SDMMC_CmdStopTransfer+0x58>
 800e3dc:	20000094 	.word	0x20000094
 800e3e0:	10624dd3 	.word	0x10624dd3
 800e3e4:	fffee0c0 	.word	0xfffee0c0
 800e3e8:	05f5e100 	.word	0x05f5e100
 800e3ec:	00200045 	.word	0x00200045
 800e3f0:	002000c5 	.word	0x002000c5
 800e3f4:	fdffe008 	.word	0xfdffe008

0800e3f8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e3f8:	4a4c      	ldr	r2, [pc, #304]	; (800e52c <SDMMC_CmdSelDesel+0x134>)
 800e3fa:	4b4d      	ldr	r3, [pc, #308]	; (800e530 <SDMMC_CmdSelDesel+0x138>)
{
 800e3fc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e3fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e400:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e402:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e406:	68c1      	ldr	r1, [r0, #12]
 800e408:	4c4a      	ldr	r4, [pc, #296]	; (800e534 <SDMMC_CmdSelDesel+0x13c>)
 800e40a:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e40e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e410:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e412:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e416:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e418:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e41c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e41e:	b14a      	cbz	r2, 800e434 <SDMMC_CmdSelDesel+0x3c>
 800e420:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e422:	4945      	ldr	r1, [pc, #276]	; (800e538 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 800e424:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e426:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e428:	420a      	tst	r2, r1
 800e42a:	d001      	beq.n	800e430 <SDMMC_CmdSelDesel+0x38>
 800e42c:	0492      	lsls	r2, r2, #18
 800e42e:	d507      	bpl.n	800e440 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 800e430:	1c5c      	adds	r4, r3, #1
 800e432:	d1f7      	bne.n	800e424 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e438:	4618      	mov	r0, r3
 800e43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e43e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e440:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e442:	075c      	lsls	r4, r3, #29
 800e444:	d43d      	bmi.n	800e4c2 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e446:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e448:	f013 0301 	ands.w	r3, r3, #1
 800e44c:	d134      	bne.n	800e4b8 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e44e:	4b3b      	ldr	r3, [pc, #236]	; (800e53c <SDMMC_CmdSelDesel+0x144>)
 800e450:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e452:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b07      	cmp	r3, #7
 800e458:	d131      	bne.n	800e4be <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e45a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e45c:	4b38      	ldr	r3, [pc, #224]	; (800e540 <SDMMC_CmdSelDesel+0x148>)
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0e9      	beq.n	800e438 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e464:	2a00      	cmp	r2, #0
 800e466:	db30      	blt.n	800e4ca <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e468:	0051      	lsls	r1, r2, #1
 800e46a:	d431      	bmi.n	800e4d0 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e46c:	0094      	lsls	r4, r2, #2
 800e46e:	d431      	bmi.n	800e4d4 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e470:	00d0      	lsls	r0, r2, #3
 800e472:	d431      	bmi.n	800e4d8 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e474:	0111      	lsls	r1, r2, #4
 800e476:	d432      	bmi.n	800e4de <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e478:	0154      	lsls	r4, r2, #5
 800e47a:	d433      	bmi.n	800e4e4 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e47c:	01d0      	lsls	r0, r2, #7
 800e47e:	d434      	bmi.n	800e4ea <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e480:	0211      	lsls	r1, r2, #8
 800e482:	d435      	bmi.n	800e4f0 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e484:	0254      	lsls	r4, r2, #9
 800e486:	d436      	bmi.n	800e4f6 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e488:	0290      	lsls	r0, r2, #10
 800e48a:	d440      	bmi.n	800e50e <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e48c:	02d1      	lsls	r1, r2, #11
 800e48e:	d43b      	bmi.n	800e508 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e490:	0354      	lsls	r4, r2, #13
 800e492:	d436      	bmi.n	800e502 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e494:	0390      	lsls	r0, r2, #14
 800e496:	d431      	bmi.n	800e4fc <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e498:	03d1      	lsls	r1, r2, #15
 800e49a:	d444      	bmi.n	800e526 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e49c:	0414      	lsls	r4, r2, #16
 800e49e:	d43f      	bmi.n	800e520 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4a0:	0450      	lsls	r0, r2, #17
 800e4a2:	d43a      	bmi.n	800e51a <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4a4:	0491      	lsls	r1, r2, #18
 800e4a6:	d435      	bmi.n	800e514 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4a8:	f012 0f08 	tst.w	r2, #8
 800e4ac:	bf14      	ite	ne
 800e4ae:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e4b2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e4b6:	e7bf      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4bc:	e7bc      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e7ba      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4c2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4c4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4c6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4c8:	e7b6      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4ce:	e7b3      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	e7b1      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	e7af      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e4d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4dc:	e7ac      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e2:	e7a9      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e8:	e7a6      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e4ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4ee:	e7a3      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4f4:	e7a0      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4fa:	e79d      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e500:	e79a      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e506:	e797      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e50c:	e794      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e50e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e512:	e791      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e518:	e78e      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e51a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e51e:	e78b      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e520:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e524:	e788      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e526:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e52a:	e785      	b.n	800e438 <SDMMC_CmdSelDesel+0x40>
 800e52c:	20000094 	.word	0x20000094
 800e530:	10624dd3 	.word	0x10624dd3
 800e534:	fffee0c0 	.word	0xfffee0c0
 800e538:	00200045 	.word	0x00200045
 800e53c:	002000c5 	.word	0x002000c5
 800e540:	fdffe008 	.word	0xfdffe008

0800e544 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e544:	4b11      	ldr	r3, [pc, #68]	; (800e58c <SDMMC_CmdGoIdleState+0x48>)
{
 800e546:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e548:	4a11      	ldr	r2, [pc, #68]	; (800e590 <SDMMC_CmdGoIdleState+0x4c>)
{
 800e54a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e54c:	4c11      	ldr	r4, [pc, #68]	; (800e594 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800e54e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e550:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800e552:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e554:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e558:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e55a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e55e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e560:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e562:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e566:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e56a:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e56c:	e002      	b.n	800e574 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e56e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800e570:	0612      	lsls	r2, r2, #24
 800e572:	d405      	bmi.n	800e580 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800e574:	3b01      	subs	r3, #1
 800e576:	d2fa      	bcs.n	800e56e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e578:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e57c:	bc30      	pop	{r4, r5}
 800e57e:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e580:	4b05      	ldr	r3, [pc, #20]	; (800e598 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800e582:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e584:	638b      	str	r3, [r1, #56]	; 0x38
}
 800e586:	bc30      	pop	{r4, r5}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	20000094 	.word	0x20000094
 800e590:	fffee0c0 	.word	0xfffee0c0
 800e594:	10624dd3 	.word	0x10624dd3
 800e598:	002000c5 	.word	0x002000c5

0800e59c <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e59c:	4a1c      	ldr	r2, [pc, #112]	; (800e610 <SDMMC_CmdOperCond+0x74>)
{
 800e59e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800e5a0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5a4:	481b      	ldr	r0, [pc, #108]	; (800e614 <SDMMC_CmdOperCond+0x78>)
{
 800e5a6:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5a8:	4c1b      	ldr	r4, [pc, #108]	; (800e618 <SDMMC_CmdOperCond+0x7c>)
 800e5aa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e5ac:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5ae:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5b2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5b6:	68cc      	ldr	r4, [r1, #12]
 800e5b8:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5bc:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5be:	f241 3088 	movw	r0, #5000	; 0x1388
 800e5c2:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5c6:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e5c8:	b14a      	cbz	r2, 800e5de <SDMMC_CmdOperCond+0x42>
 800e5ca:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e5cc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800e5ce:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e5d0:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e5d4:	d001      	beq.n	800e5da <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5d6:	0490      	lsls	r0, r2, #18
 800e5d8:	d506      	bpl.n	800e5e8 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800e5da:	1c5c      	adds	r4, r3, #1
 800e5dc:	d1f6      	bne.n	800e5cc <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e5de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e5ea:	075a      	lsls	r2, r3, #29
 800e5ec:	d40c      	bmi.n	800e608 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5ee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e5f0:	f010 0001 	ands.w	r0, r0, #1
 800e5f4:	d105      	bne.n	800e602 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e5f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e5f8:	065b      	lsls	r3, r3, #25
 800e5fa:	d5f2      	bpl.n	800e5e2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e5fc:	2340      	movs	r3, #64	; 0x40
 800e5fe:	638b      	str	r3, [r1, #56]	; 0x38
 800e600:	e7ef      	b.n	800e5e2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e602:	2301      	movs	r3, #1
 800e604:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e606:	e7ec      	b.n	800e5e2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e608:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e60a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e60c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e60e:	e7e8      	b.n	800e5e2 <SDMMC_CmdOperCond+0x46>
 800e610:	20000094 	.word	0x20000094
 800e614:	fffee0c0 	.word	0xfffee0c0
 800e618:	10624dd3 	.word	0x10624dd3

0800e61c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e61c:	4a4c      	ldr	r2, [pc, #304]	; (800e750 <SDMMC_CmdAppCommand+0x134>)
 800e61e:	4b4d      	ldr	r3, [pc, #308]	; (800e754 <SDMMC_CmdAppCommand+0x138>)
{
 800e620:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e622:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e624:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e626:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e62a:	68c1      	ldr	r1, [r0, #12]
 800e62c:	4c4a      	ldr	r4, [pc, #296]	; (800e758 <SDMMC_CmdAppCommand+0x13c>)
 800e62e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e632:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e634:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e636:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e63a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e63c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e640:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e642:	b14a      	cbz	r2, 800e658 <SDMMC_CmdAppCommand+0x3c>
 800e644:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e646:	4945      	ldr	r1, [pc, #276]	; (800e75c <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 800e648:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e64a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e64c:	420a      	tst	r2, r1
 800e64e:	d001      	beq.n	800e654 <SDMMC_CmdAppCommand+0x38>
 800e650:	0492      	lsls	r2, r2, #18
 800e652:	d507      	bpl.n	800e664 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 800e654:	1c5c      	adds	r4, r3, #1
 800e656:	d1f7      	bne.n	800e648 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e662:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e664:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e666:	075c      	lsls	r4, r3, #29
 800e668:	d43d      	bmi.n	800e6e6 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e66a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e66c:	f013 0301 	ands.w	r3, r3, #1
 800e670:	d134      	bne.n	800e6dc <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e672:	4b3b      	ldr	r3, [pc, #236]	; (800e760 <SDMMC_CmdAppCommand+0x144>)
 800e674:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e676:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b37      	cmp	r3, #55	; 0x37
 800e67c:	d131      	bne.n	800e6e2 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e67e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e680:	4b38      	ldr	r3, [pc, #224]	; (800e764 <SDMMC_CmdAppCommand+0x148>)
 800e682:	4013      	ands	r3, r2
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0e9      	beq.n	800e65c <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e688:	2a00      	cmp	r2, #0
 800e68a:	db30      	blt.n	800e6ee <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e68c:	0051      	lsls	r1, r2, #1
 800e68e:	d431      	bmi.n	800e6f4 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e690:	0094      	lsls	r4, r2, #2
 800e692:	d431      	bmi.n	800e6f8 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e694:	00d0      	lsls	r0, r2, #3
 800e696:	d431      	bmi.n	800e6fc <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e698:	0111      	lsls	r1, r2, #4
 800e69a:	d432      	bmi.n	800e702 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e69c:	0154      	lsls	r4, r2, #5
 800e69e:	d433      	bmi.n	800e708 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e6a0:	01d0      	lsls	r0, r2, #7
 800e6a2:	d434      	bmi.n	800e70e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e6a4:	0211      	lsls	r1, r2, #8
 800e6a6:	d435      	bmi.n	800e714 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e6a8:	0254      	lsls	r4, r2, #9
 800e6aa:	d436      	bmi.n	800e71a <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e6ac:	0290      	lsls	r0, r2, #10
 800e6ae:	d440      	bmi.n	800e732 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e6b0:	02d1      	lsls	r1, r2, #11
 800e6b2:	d43b      	bmi.n	800e72c <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e6b4:	0354      	lsls	r4, r2, #13
 800e6b6:	d436      	bmi.n	800e726 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e6b8:	0390      	lsls	r0, r2, #14
 800e6ba:	d431      	bmi.n	800e720 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e6bc:	03d1      	lsls	r1, r2, #15
 800e6be:	d444      	bmi.n	800e74a <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6c0:	0414      	lsls	r4, r2, #16
 800e6c2:	d43f      	bmi.n	800e744 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e6c4:	0450      	lsls	r0, r2, #17
 800e6c6:	d43a      	bmi.n	800e73e <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e6c8:	0491      	lsls	r1, r2, #18
 800e6ca:	d435      	bmi.n	800e738 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e6cc:	f012 0f08 	tst.w	r2, #8
 800e6d0:	bf14      	ite	ne
 800e6d2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e6d6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e6da:	e7bf      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6dc:	2201      	movs	r2, #1
 800e6de:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6e0:	e7bc      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e7ba      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6e6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6e8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6ea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6ec:	e7b6      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e6ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e6f2:	e7b3      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e6f4:	2340      	movs	r3, #64	; 0x40
 800e6f6:	e7b1      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e6f8:	2380      	movs	r3, #128	; 0x80
 800e6fa:	e7af      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e6fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e700:	e7ac      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e702:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e706:	e7a9      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e70c:	e7a6      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e70e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e712:	e7a3      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e718:	e7a0      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e71a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e71e:	e79d      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e720:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e724:	e79a      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e72a:	e797      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e730:	e794      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e736:	e791      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e73c:	e78e      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e73e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e742:	e78b      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e744:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e748:	e788      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e74a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e74e:	e785      	b.n	800e65c <SDMMC_CmdAppCommand+0x40>
 800e750:	20000094 	.word	0x20000094
 800e754:	10624dd3 	.word	0x10624dd3
 800e758:	fffee0c0 	.word	0xfffee0c0
 800e75c:	00200045 	.word	0x00200045
 800e760:	002000c5 	.word	0x002000c5
 800e764:	fdffe008 	.word	0xfdffe008

0800e768 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e768:	4a18      	ldr	r2, [pc, #96]	; (800e7cc <SDMMC_CmdAppOperCommand+0x64>)
 800e76a:	4b19      	ldr	r3, [pc, #100]	; (800e7d0 <SDMMC_CmdAppOperCommand+0x68>)
{
 800e76c:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e76e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e770:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e772:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e776:	68c1      	ldr	r1, [r0, #12]
 800e778:	4c16      	ldr	r4, [pc, #88]	; (800e7d4 <SDMMC_CmdAppOperCommand+0x6c>)
 800e77a:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e77e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e780:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e782:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e786:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e788:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e78c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e78e:	b14a      	cbz	r2, 800e7a4 <SDMMC_CmdAppOperCommand+0x3c>
 800e790:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e792:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e794:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e796:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e79a:	d001      	beq.n	800e7a0 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e79c:	0492      	lsls	r2, r2, #18
 800e79e:	d507      	bpl.n	800e7b0 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 800e7a0:	1c59      	adds	r1, r3, #1
 800e7a2:	d1f6      	bne.n	800e792 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e7a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ae:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7b2:	f013 0304 	ands.w	r3, r3, #4
 800e7b6:	d105      	bne.n	800e7c4 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7b8:	4a07      	ldr	r2, [pc, #28]	; (800e7d8 <SDMMC_CmdAppOperCommand+0x70>)
 800e7ba:	6382      	str	r2, [r0, #56]	; 0x38
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7c4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7c8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7ca:	e7ed      	b.n	800e7a8 <SDMMC_CmdAppOperCommand+0x40>
 800e7cc:	20000094 	.word	0x20000094
 800e7d0:	10624dd3 	.word	0x10624dd3
 800e7d4:	fffee0c0 	.word	0xfffee0c0
 800e7d8:	002000c5 	.word	0x002000c5

0800e7dc <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7dc:	4a4c      	ldr	r2, [pc, #304]	; (800e910 <SDMMC_CmdBusWidth+0x134>)
 800e7de:	4b4d      	ldr	r3, [pc, #308]	; (800e914 <SDMMC_CmdBusWidth+0x138>)
{
 800e7e0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7e2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e7e4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7e6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7ea:	68c1      	ldr	r1, [r0, #12]
 800e7ec:	4c4a      	ldr	r4, [pc, #296]	; (800e918 <SDMMC_CmdBusWidth+0x13c>)
 800e7ee:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7f4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7fa:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e7fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e800:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e802:	b14a      	cbz	r2, 800e818 <SDMMC_CmdBusWidth+0x3c>
 800e804:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e806:	4945      	ldr	r1, [pc, #276]	; (800e91c <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 800e808:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e80a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e80c:	420a      	tst	r2, r1
 800e80e:	d001      	beq.n	800e814 <SDMMC_CmdBusWidth+0x38>
 800e810:	0492      	lsls	r2, r2, #18
 800e812:	d507      	bpl.n	800e824 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 800e814:	1c5c      	adds	r4, r3, #1
 800e816:	d1f7      	bne.n	800e808 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e822:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e824:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e826:	075c      	lsls	r4, r3, #29
 800e828:	d43d      	bmi.n	800e8a6 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e82a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e82c:	f013 0301 	ands.w	r3, r3, #1
 800e830:	d134      	bne.n	800e89c <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e832:	4b3b      	ldr	r3, [pc, #236]	; (800e920 <SDMMC_CmdBusWidth+0x144>)
 800e834:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e836:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b06      	cmp	r3, #6
 800e83c:	d131      	bne.n	800e8a2 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e83e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e840:	4b38      	ldr	r3, [pc, #224]	; (800e924 <SDMMC_CmdBusWidth+0x148>)
 800e842:	4013      	ands	r3, r2
 800e844:	2b00      	cmp	r3, #0
 800e846:	d0e9      	beq.n	800e81c <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e848:	2a00      	cmp	r2, #0
 800e84a:	db30      	blt.n	800e8ae <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e84c:	0051      	lsls	r1, r2, #1
 800e84e:	d431      	bmi.n	800e8b4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e850:	0094      	lsls	r4, r2, #2
 800e852:	d431      	bmi.n	800e8b8 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e854:	00d0      	lsls	r0, r2, #3
 800e856:	d431      	bmi.n	800e8bc <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e858:	0111      	lsls	r1, r2, #4
 800e85a:	d432      	bmi.n	800e8c2 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e85c:	0154      	lsls	r4, r2, #5
 800e85e:	d433      	bmi.n	800e8c8 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e860:	01d0      	lsls	r0, r2, #7
 800e862:	d434      	bmi.n	800e8ce <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e864:	0211      	lsls	r1, r2, #8
 800e866:	d435      	bmi.n	800e8d4 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e868:	0254      	lsls	r4, r2, #9
 800e86a:	d436      	bmi.n	800e8da <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e86c:	0290      	lsls	r0, r2, #10
 800e86e:	d440      	bmi.n	800e8f2 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e870:	02d1      	lsls	r1, r2, #11
 800e872:	d43b      	bmi.n	800e8ec <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e874:	0354      	lsls	r4, r2, #13
 800e876:	d436      	bmi.n	800e8e6 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e878:	0390      	lsls	r0, r2, #14
 800e87a:	d431      	bmi.n	800e8e0 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e87c:	03d1      	lsls	r1, r2, #15
 800e87e:	d444      	bmi.n	800e90a <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e880:	0414      	lsls	r4, r2, #16
 800e882:	d43f      	bmi.n	800e904 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e884:	0450      	lsls	r0, r2, #17
 800e886:	d43a      	bmi.n	800e8fe <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e888:	0491      	lsls	r1, r2, #18
 800e88a:	d435      	bmi.n	800e8f8 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e88c:	f012 0f08 	tst.w	r2, #8
 800e890:	bf14      	ite	ne
 800e892:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e896:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e89a:	e7bf      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e89c:	2201      	movs	r2, #1
 800e89e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8a0:	e7bc      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e7ba      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8a6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8a8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8ac:	e7b6      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e8ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e8b2:	e7b3      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e8b4:	2340      	movs	r3, #64	; 0x40
 800e8b6:	e7b1      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e8b8:	2380      	movs	r3, #128	; 0x80
 800e8ba:	e7af      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e8bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8c0:	e7ac      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8c6:	e7a9      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e8c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8cc:	e7a6      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8d2:	e7a3      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e8d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8d8:	e7a0      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8de:	e79d      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8e4:	e79a      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8ea:	e797      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e8ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8f0:	e794      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e8f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8f6:	e791      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e8f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e8fc:	e78e      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e8fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e902:	e78b      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e908:	e788      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e90a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e90e:	e785      	b.n	800e81c <SDMMC_CmdBusWidth+0x40>
 800e910:	20000094 	.word	0x20000094
 800e914:	10624dd3 	.word	0x10624dd3
 800e918:	fffee0c0 	.word	0xfffee0c0
 800e91c:	00200045 	.word	0x00200045
 800e920:	002000c5 	.word	0x002000c5
 800e924:	fdffe008 	.word	0xfdffe008

0800e928 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e928:	4a4d      	ldr	r2, [pc, #308]	; (800ea60 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 800e92a:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e92c:	494d      	ldr	r1, [pc, #308]	; (800ea64 <SDMMC_CmdSendSCR+0x13c>)
{
 800e92e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e930:	4c4d      	ldr	r4, [pc, #308]	; (800ea68 <SDMMC_CmdSendSCR+0x140>)
 800e932:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e934:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e936:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e93a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e93e:	68c4      	ldr	r4, [r0, #12]
 800e940:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e942:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e944:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e946:	f241 3188 	movw	r1, #5000	; 0x1388
 800e94a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e94e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e950:	b14a      	cbz	r2, 800e966 <SDMMC_CmdSendSCR+0x3e>
 800e952:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e954:	4945      	ldr	r1, [pc, #276]	; (800ea6c <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800e956:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e958:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e95a:	420a      	tst	r2, r1
 800e95c:	d001      	beq.n	800e962 <SDMMC_CmdSendSCR+0x3a>
 800e95e:	0492      	lsls	r2, r2, #18
 800e960:	d507      	bpl.n	800e972 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800e962:	1c5c      	adds	r4, r3, #1
 800e964:	d1f7      	bne.n	800e956 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e966:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e970:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e972:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e974:	075c      	lsls	r4, r3, #29
 800e976:	d43d      	bmi.n	800e9f4 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e97a:	f013 0301 	ands.w	r3, r3, #1
 800e97e:	d134      	bne.n	800e9ea <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e980:	4b3b      	ldr	r3, [pc, #236]	; (800ea70 <SDMMC_CmdSendSCR+0x148>)
 800e982:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e984:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b33      	cmp	r3, #51	; 0x33
 800e98a:	d131      	bne.n	800e9f0 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800e98c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e98e:	4b39      	ldr	r3, [pc, #228]	; (800ea74 <SDMMC_CmdSendSCR+0x14c>)
 800e990:	4013      	ands	r3, r2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0e9      	beq.n	800e96a <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e996:	2a00      	cmp	r2, #0
 800e998:	db30      	blt.n	800e9fc <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e99a:	0051      	lsls	r1, r2, #1
 800e99c:	d431      	bmi.n	800ea02 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e99e:	0094      	lsls	r4, r2, #2
 800e9a0:	d431      	bmi.n	800ea06 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e9a2:	00d0      	lsls	r0, r2, #3
 800e9a4:	d431      	bmi.n	800ea0a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e9a6:	0111      	lsls	r1, r2, #4
 800e9a8:	d432      	bmi.n	800ea10 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e9aa:	0154      	lsls	r4, r2, #5
 800e9ac:	d433      	bmi.n	800ea16 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e9ae:	01d0      	lsls	r0, r2, #7
 800e9b0:	d434      	bmi.n	800ea1c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e9b2:	0211      	lsls	r1, r2, #8
 800e9b4:	d435      	bmi.n	800ea22 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e9b6:	0254      	lsls	r4, r2, #9
 800e9b8:	d436      	bmi.n	800ea28 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e9ba:	0290      	lsls	r0, r2, #10
 800e9bc:	d440      	bmi.n	800ea40 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e9be:	02d1      	lsls	r1, r2, #11
 800e9c0:	d43b      	bmi.n	800ea3a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e9c2:	0354      	lsls	r4, r2, #13
 800e9c4:	d436      	bmi.n	800ea34 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e9c6:	0390      	lsls	r0, r2, #14
 800e9c8:	d431      	bmi.n	800ea2e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e9ca:	03d1      	lsls	r1, r2, #15
 800e9cc:	d444      	bmi.n	800ea58 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e9ce:	0414      	lsls	r4, r2, #16
 800e9d0:	d43f      	bmi.n	800ea52 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e9d2:	0450      	lsls	r0, r2, #17
 800e9d4:	d43a      	bmi.n	800ea4c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e9d6:	0491      	lsls	r1, r2, #18
 800e9d8:	d435      	bmi.n	800ea46 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e9da:	f012 0f08 	tst.w	r2, #8
 800e9de:	bf14      	ite	ne
 800e9e0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e9e4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e9e8:	e7bf      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9ee:	e7bc      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e7ba      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9f4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9f6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9f8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9fa:	e7b6      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e9fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea00:	e7b3      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea02:	2340      	movs	r3, #64	; 0x40
 800ea04:	e7b1      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea06:	2380      	movs	r3, #128	; 0x80
 800ea08:	e7af      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ea0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea0e:	e7ac      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea14:	e7a9      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea1a:	e7a6      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea20:	e7a3      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea26:	e7a0      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea2c:	e79d      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ea32:	e79a      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ea38:	e797      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800ea3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea3e:	e794      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea44:	e791      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800ea46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea4a:	e78e      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ea4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ea50:	e78b      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ea52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea56:	e788      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ea58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea5c:	e785      	b.n	800e96a <SDMMC_CmdSendSCR+0x42>
 800ea5e:	bf00      	nop
 800ea60:	20000094 	.word	0x20000094
 800ea64:	fffee0c0 	.word	0xfffee0c0
 800ea68:	10624dd3 	.word	0x10624dd3
 800ea6c:	00200045 	.word	0x00200045
 800ea70:	002000c5 	.word	0x002000c5
 800ea74:	fdffe008 	.word	0xfdffe008

0800ea78 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea78:	4a1a      	ldr	r2, [pc, #104]	; (800eae4 <SDMMC_CmdSendCID+0x6c>)
{
 800ea7a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800ea7c:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea7e:	481a      	ldr	r0, [pc, #104]	; (800eae8 <SDMMC_CmdSendCID+0x70>)
{
 800ea80:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea82:	4c1a      	ldr	r4, [pc, #104]	; (800eaec <SDMMC_CmdSendCID+0x74>)
 800ea84:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ea86:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea88:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea8c:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea90:	68cc      	ldr	r4, [r1, #12]
 800ea92:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea94:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea96:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea98:	f241 3088 	movw	r0, #5000	; 0x1388
 800ea9c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaa0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800eaa2:	b14a      	cbz	r2, 800eab8 <SDMMC_CmdSendCID+0x40>
 800eaa4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800eaa6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800eaa8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eaaa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800eaae:	d001      	beq.n	800eab4 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eab0:	0492      	lsls	r2, r2, #18
 800eab2:	d506      	bpl.n	800eac2 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800eab4:	1c58      	adds	r0, r3, #1
 800eab6:	d1f6      	bne.n	800eaa6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800eab8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800eabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eac2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800eac4:	075b      	lsls	r3, r3, #29
 800eac6:	d409      	bmi.n	800eadc <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eac8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800eaca:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eace:	bf14      	ite	ne
 800ead0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ead2:	4b07      	ldreq	r3, [pc, #28]	; (800eaf0 <SDMMC_CmdSendCID+0x78>)
 800ead4:	638b      	str	r3, [r1, #56]	; 0x38
}
 800ead6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eada:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eadc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eade:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eae0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eae2:	e7eb      	b.n	800eabc <SDMMC_CmdSendCID+0x44>
 800eae4:	20000094 	.word	0x20000094
 800eae8:	fffee0c0 	.word	0xfffee0c0
 800eaec:	10624dd3 	.word	0x10624dd3
 800eaf0:	002000c5 	.word	0x002000c5

0800eaf4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eaf4:	4a1b      	ldr	r2, [pc, #108]	; (800eb64 <SDMMC_CmdSendCSD+0x70>)
{
 800eaf6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eaf8:	4b1b      	ldr	r3, [pc, #108]	; (800eb68 <SDMMC_CmdSendCSD+0x74>)
 800eafa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800eafc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb00:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb04:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800eb08:	4818      	ldr	r0, [pc, #96]	; (800eb6c <SDMMC_CmdSendCSD+0x78>)
 800eb0a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb0e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb10:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb12:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb16:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb18:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb1c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800eb20:	1e53      	subs	r3, r2, #1
 800eb22:	b14a      	cbz	r2, 800eb38 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800eb24:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800eb28:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb2a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800eb2e:	d001      	beq.n	800eb34 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb30:	0492      	lsls	r2, r2, #18
 800eb32:	d504      	bpl.n	800eb3e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800eb34:	1c59      	adds	r1, r3, #1
 800eb36:	d1f5      	bne.n	800eb24 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800eb38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800eb3c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb3e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800eb42:	075b      	lsls	r3, r3, #29
 800eb44:	d409      	bmi.n	800eb5a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb46:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800eb4a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb4e:	bf14      	ite	ne
 800eb50:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb52:	4b07      	ldreq	r3, [pc, #28]	; (800eb70 <SDMMC_CmdSendCSD+0x7c>)
 800eb54:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800eb58:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb5a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb5c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb5e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb62:	4770      	bx	lr
 800eb64:	20000094 	.word	0x20000094
 800eb68:	10624dd3 	.word	0x10624dd3
 800eb6c:	fffee0c0 	.word	0xfffee0c0
 800eb70:	002000c5 	.word	0x002000c5

0800eb74 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800eb74:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb76:	4a27      	ldr	r2, [pc, #156]	; (800ec14 <SDMMC_CmdSetRelAdd+0xa0>)
{
 800eb78:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800eb7a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb7c:	4c26      	ldr	r4, [pc, #152]	; (800ec18 <SDMMC_CmdSetRelAdd+0xa4>)
 800eb7e:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb80:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb82:	401c      	ands	r4, r3
 800eb84:	f241 1303 	movw	r3, #4355	; 0x1103
 800eb88:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb8a:	4c24      	ldr	r4, [pc, #144]	; (800ec1c <SDMMC_CmdSetRelAdd+0xa8>)
 800eb8c:	fba4 4202 	umull	r4, r2, r4, r2
 800eb90:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb94:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb96:	0a52      	lsrs	r2, r2, #9
 800eb98:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 800eb9c:	b14a      	cbz	r2, 800ebb2 <SDMMC_CmdSetRelAdd+0x3e>
 800eb9e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800eba0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800eba2:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eba4:	f012 0f45 	tst.w	r2, #69	; 0x45
 800eba8:	d001      	beq.n	800ebae <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebaa:	0492      	lsls	r2, r2, #18
 800ebac:	d507      	bpl.n	800ebbe <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 800ebae:	1c5c      	adds	r4, r3, #1
 800ebb0:	d1f6      	bne.n	800eba0 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ebb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebbc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc0:	075c      	lsls	r4, r3, #29
 800ebc2:	d41c      	bmi.n	800ebfe <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ebc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc6:	f013 0301 	ands.w	r3, r3, #1
 800ebca:	d113      	bne.n	800ebf4 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 800ebcc:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d112      	bne.n	800ebfa <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebd4:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <SDMMC_CmdSetRelAdd+0xac>)
 800ebd6:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800ebd8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ebda:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800ebde:	d015      	beq.n	800ec0c <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ebe0:	0451      	lsls	r1, r2, #17
 800ebe2:	d410      	bmi.n	800ec06 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ebe4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ebe8:	bf14      	ite	ne
 800ebea:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800ebee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ebf2:	e7e0      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebf8:	e7dd      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e7db      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebfe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec00:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec02:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec04:	e7d7      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec0a:	e7d4      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ec0c:	0c12      	lsrs	r2, r2, #16
 800ec0e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800ec10:	e7d1      	b.n	800ebb6 <SDMMC_CmdSetRelAdd+0x42>
 800ec12:	bf00      	nop
 800ec14:	20000094 	.word	0x20000094
 800ec18:	fffee0c0 	.word	0xfffee0c0
 800ec1c:	10624dd3 	.word	0x10624dd3
 800ec20:	002000c5 	.word	0x002000c5

0800ec24 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec24:	4a4c      	ldr	r2, [pc, #304]	; (800ed58 <SDMMC_CmdSendStatus+0x134>)
 800ec26:	4b4d      	ldr	r3, [pc, #308]	; (800ed5c <SDMMC_CmdSendStatus+0x138>)
{
 800ec28:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec2a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ec2c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec2e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec32:	68c1      	ldr	r1, [r0, #12]
 800ec34:	4c4a      	ldr	r4, [pc, #296]	; (800ed60 <SDMMC_CmdSendStatus+0x13c>)
 800ec36:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec3a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec3c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec3e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec42:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec44:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec48:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ec4a:	b14a      	cbz	r2, 800ec60 <SDMMC_CmdSendStatus+0x3c>
 800ec4c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ec4e:	4945      	ldr	r1, [pc, #276]	; (800ed64 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 800ec50:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ec52:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec54:	420a      	tst	r2, r1
 800ec56:	d001      	beq.n	800ec5c <SDMMC_CmdSendStatus+0x38>
 800ec58:	0492      	lsls	r2, r2, #18
 800ec5a:	d507      	bpl.n	800ec6c <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 800ec5c:	1c5c      	adds	r4, r3, #1
 800ec5e:	d1f7      	bne.n	800ec50 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ec60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec6a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ec6e:	075c      	lsls	r4, r3, #29
 800ec70:	d43d      	bmi.n	800ecee <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ec74:	f013 0301 	ands.w	r3, r3, #1
 800ec78:	d134      	bne.n	800ece4 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec7a:	4b3b      	ldr	r3, [pc, #236]	; (800ed68 <SDMMC_CmdSendStatus+0x144>)
 800ec7c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ec7e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b0d      	cmp	r3, #13
 800ec84:	d131      	bne.n	800ecea <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 800ec86:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ec88:	4b38      	ldr	r3, [pc, #224]	; (800ed6c <SDMMC_CmdSendStatus+0x148>)
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d0e9      	beq.n	800ec64 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	db30      	blt.n	800ecf6 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ec94:	0051      	lsls	r1, r2, #1
 800ec96:	d431      	bmi.n	800ecfc <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ec98:	0094      	lsls	r4, r2, #2
 800ec9a:	d431      	bmi.n	800ed00 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ec9c:	00d0      	lsls	r0, r2, #3
 800ec9e:	d431      	bmi.n	800ed04 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eca0:	0111      	lsls	r1, r2, #4
 800eca2:	d432      	bmi.n	800ed0a <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eca4:	0154      	lsls	r4, r2, #5
 800eca6:	d433      	bmi.n	800ed10 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eca8:	01d0      	lsls	r0, r2, #7
 800ecaa:	d434      	bmi.n	800ed16 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ecac:	0211      	lsls	r1, r2, #8
 800ecae:	d435      	bmi.n	800ed1c <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ecb0:	0254      	lsls	r4, r2, #9
 800ecb2:	d436      	bmi.n	800ed22 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ecb4:	0290      	lsls	r0, r2, #10
 800ecb6:	d440      	bmi.n	800ed3a <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ecb8:	02d1      	lsls	r1, r2, #11
 800ecba:	d43b      	bmi.n	800ed34 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ecbc:	0354      	lsls	r4, r2, #13
 800ecbe:	d436      	bmi.n	800ed2e <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ecc0:	0390      	lsls	r0, r2, #14
 800ecc2:	d431      	bmi.n	800ed28 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ecc4:	03d1      	lsls	r1, r2, #15
 800ecc6:	d444      	bmi.n	800ed52 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ecc8:	0414      	lsls	r4, r2, #16
 800ecca:	d43f      	bmi.n	800ed4c <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eccc:	0450      	lsls	r0, r2, #17
 800ecce:	d43a      	bmi.n	800ed46 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ecd0:	0491      	lsls	r1, r2, #18
 800ecd2:	d435      	bmi.n	800ed40 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecd4:	f012 0f08 	tst.w	r2, #8
 800ecd8:	bf14      	ite	ne
 800ecda:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ecde:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ece2:	e7bf      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ece4:	2201      	movs	r2, #1
 800ece6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ece8:	e7bc      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecea:	2301      	movs	r3, #1
 800ecec:	e7ba      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ecee:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecf0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ecf2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecf4:	e7b6      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ecf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ecfa:	e7b3      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ecfc:	2340      	movs	r3, #64	; 0x40
 800ecfe:	e7b1      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ed00:	2380      	movs	r3, #128	; 0x80
 800ed02:	e7af      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ed04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed08:	e7ac      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed0e:	e7a9      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed14:	e7a6      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed1a:	e7a3      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed20:	e7a0      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed26:	e79d      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed2c:	e79a      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed32:	e797      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800ed34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed38:	e794      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed3e:	e791      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800ed40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed44:	e78e      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ed46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed4a:	e78b      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ed4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed50:	e788      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed56:	e785      	b.n	800ec64 <SDMMC_CmdSendStatus+0x40>
 800ed58:	20000094 	.word	0x20000094
 800ed5c:	10624dd3 	.word	0x10624dd3
 800ed60:	fffee0c0 	.word	0xfffee0c0
 800ed64:	00200045 	.word	0x00200045
 800ed68:	002000c5 	.word	0x002000c5
 800ed6c:	fdffe008 	.word	0xfdffe008

0800ed70 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed70:	4a4d      	ldr	r2, [pc, #308]	; (800eea8 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 800ed72:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed74:	494d      	ldr	r1, [pc, #308]	; (800eeac <SDMMC_CmdStatusRegister+0x13c>)
{
 800ed76:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed78:	4c4d      	ldr	r4, [pc, #308]	; (800eeb0 <SDMMC_CmdStatusRegister+0x140>)
 800ed7a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ed7c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed7e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed82:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed86:	68c4      	ldr	r4, [r0, #12]
 800ed88:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed8a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed8c:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed8e:	f241 3188 	movw	r1, #5000	; 0x1388
 800ed92:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed96:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ed98:	b14a      	cbz	r2, 800edae <SDMMC_CmdStatusRegister+0x3e>
 800ed9a:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ed9c:	4945      	ldr	r1, [pc, #276]	; (800eeb4 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800ed9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800eda0:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eda2:	420a      	tst	r2, r1
 800eda4:	d001      	beq.n	800edaa <SDMMC_CmdStatusRegister+0x3a>
 800eda6:	0492      	lsls	r2, r2, #18
 800eda8:	d507      	bpl.n	800edba <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800edaa:	1c5c      	adds	r4, r3, #1
 800edac:	d1f7      	bne.n	800ed9e <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800edae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800edbc:	075c      	lsls	r4, r3, #29
 800edbe:	d43d      	bmi.n	800ee3c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800edc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800edc2:	f013 0301 	ands.w	r3, r3, #1
 800edc6:	d134      	bne.n	800ee32 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edc8:	4b3b      	ldr	r3, [pc, #236]	; (800eeb8 <SDMMC_CmdStatusRegister+0x148>)
 800edca:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800edcc:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b0d      	cmp	r3, #13
 800edd2:	d131      	bne.n	800ee38 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800edd4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800edd6:	4b39      	ldr	r3, [pc, #228]	; (800eebc <SDMMC_CmdStatusRegister+0x14c>)
 800edd8:	4013      	ands	r3, r2
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0e9      	beq.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800edde:	2a00      	cmp	r2, #0
 800ede0:	db30      	blt.n	800ee44 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ede2:	0051      	lsls	r1, r2, #1
 800ede4:	d431      	bmi.n	800ee4a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ede6:	0094      	lsls	r4, r2, #2
 800ede8:	d431      	bmi.n	800ee4e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800edea:	00d0      	lsls	r0, r2, #3
 800edec:	d431      	bmi.n	800ee52 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800edee:	0111      	lsls	r1, r2, #4
 800edf0:	d432      	bmi.n	800ee58 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800edf2:	0154      	lsls	r4, r2, #5
 800edf4:	d433      	bmi.n	800ee5e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800edf6:	01d0      	lsls	r0, r2, #7
 800edf8:	d434      	bmi.n	800ee64 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800edfa:	0211      	lsls	r1, r2, #8
 800edfc:	d435      	bmi.n	800ee6a <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800edfe:	0254      	lsls	r4, r2, #9
 800ee00:	d436      	bmi.n	800ee70 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ee02:	0290      	lsls	r0, r2, #10
 800ee04:	d440      	bmi.n	800ee88 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ee06:	02d1      	lsls	r1, r2, #11
 800ee08:	d43b      	bmi.n	800ee82 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ee0a:	0354      	lsls	r4, r2, #13
 800ee0c:	d436      	bmi.n	800ee7c <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ee0e:	0390      	lsls	r0, r2, #14
 800ee10:	d431      	bmi.n	800ee76 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ee12:	03d1      	lsls	r1, r2, #15
 800ee14:	d444      	bmi.n	800eea0 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ee16:	0414      	lsls	r4, r2, #16
 800ee18:	d43f      	bmi.n	800ee9a <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee1a:	0450      	lsls	r0, r2, #17
 800ee1c:	d43a      	bmi.n	800ee94 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee1e:	0491      	lsls	r1, r2, #18
 800ee20:	d435      	bmi.n	800ee8e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ee22:	f012 0f08 	tst.w	r2, #8
 800ee26:	bf14      	ite	ne
 800ee28:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ee2c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ee30:	e7bf      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee32:	2201      	movs	r2, #1
 800ee34:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee36:	e7bc      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e7ba      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee3c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee3e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee40:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee42:	e7b6      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ee44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ee48:	e7b3      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ee4a:	2340      	movs	r3, #64	; 0x40
 800ee4c:	e7b1      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ee4e:	2380      	movs	r3, #128	; 0x80
 800ee50:	e7af      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ee52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee56:	e7ac      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ee58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee5c:	e7a9      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ee5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee62:	e7a6      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ee64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee68:	e7a3      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ee6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee6e:	e7a0      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ee70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee74:	e79d      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ee76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ee7a:	e79a      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ee7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ee80:	e797      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 800ee82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee86:	e794      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ee88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ee8c:	e791      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800ee8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ee92:	e78e      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ee98:	e78b      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ee9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee9e:	e788      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eea0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eea4:	e785      	b.n	800edb2 <SDMMC_CmdStatusRegister+0x42>
 800eea6:	bf00      	nop
 800eea8:	20000094 	.word	0x20000094
 800eeac:	fffee0c0 	.word	0xfffee0c0
 800eeb0:	10624dd3 	.word	0x10624dd3
 800eeb4:	00200045 	.word	0x00200045
 800eeb8:	002000c5 	.word	0x002000c5
 800eebc:	fdffe008 	.word	0xfdffe008

0800eec0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eec0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eec2:	4903      	ldr	r1, [pc, #12]	; (800eed0 <MX_FATFS_Init+0x10>)
 800eec4:	4803      	ldr	r0, [pc, #12]	; (800eed4 <MX_FATFS_Init+0x14>)
 800eec6:	f003 f94f 	bl	8012168 <FATFS_LinkDriver>
 800eeca:	4b03      	ldr	r3, [pc, #12]	; (800eed8 <MX_FATFS_Init+0x18>)
 800eecc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eece:	bd08      	pop	{r3, pc}
 800eed0:	20019a58 	.word	0x20019a58
 800eed4:	0801b7ac 	.word	0x0801b7ac
 800eed8:	20019a5c 	.word	0x20019a5c

0800eedc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800eedc:	2000      	movs	r0, #0
 800eede:	4770      	bx	lr

0800eee0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800eee0:	b510      	push	{r4, lr}
 800eee2:	4694      	mov	ip, r2
 800eee4:	b082      	sub	sp, #8
 800eee6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eee8:	460a      	mov	r2, r1
 800eeea:	4663      	mov	r3, ip
 800eeec:	4601      	mov	r1, r0
 800eeee:	9400      	str	r4, [sp, #0]
 800eef0:	4803      	ldr	r0, [pc, #12]	; (800ef00 <BSP_SD_ReadBlocks+0x20>)
 800eef2:	f7fd fa31 	bl	800c358 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800eef6:	3800      	subs	r0, #0
 800eef8:	bf18      	it	ne
 800eefa:	2001      	movne	r0, #1
 800eefc:	b002      	add	sp, #8
 800eefe:	bd10      	pop	{r4, pc}
 800ef00:	20019274 	.word	0x20019274

0800ef04 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ef04:	b510      	push	{r4, lr}
 800ef06:	4694      	mov	ip, r2
 800ef08:	b082      	sub	sp, #8
 800ef0a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ef0c:	460a      	mov	r2, r1
 800ef0e:	4663      	mov	r3, ip
 800ef10:	4601      	mov	r1, r0
 800ef12:	9400      	str	r4, [sp, #0]
 800ef14:	4803      	ldr	r0, [pc, #12]	; (800ef24 <BSP_SD_WriteBlocks+0x20>)
 800ef16:	f7fd fb27 	bl	800c568 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ef1a:	3800      	subs	r0, #0
 800ef1c:	bf18      	it	ne
 800ef1e:	2001      	movne	r0, #1
 800ef20:	b002      	add	sp, #8
 800ef22:	bd10      	pop	{r4, pc}
 800ef24:	20019274 	.word	0x20019274

0800ef28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ef28:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ef2a:	4803      	ldr	r0, [pc, #12]	; (800ef38 <BSP_SD_GetCardState+0x10>)
 800ef2c:	f7fd ff8a 	bl	800ce44 <HAL_SD_GetCardState>
}
 800ef30:	3804      	subs	r0, #4
 800ef32:	bf18      	it	ne
 800ef34:	2001      	movne	r0, #1
 800ef36:	bd08      	pop	{r3, pc}
 800ef38:	20019274 	.word	0x20019274

0800ef3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ef3c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ef3e:	4801      	ldr	r0, [pc, #4]	; (800ef44 <BSP_SD_GetCardInfo+0x8>)
 800ef40:	f7fd be30 	b.w	800cba4 <HAL_SD_GetCardInfo>
 800ef44:	20019274 	.word	0x20019274

0800ef48 <BSP_SD_WriteCpltCallback>:
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop

0800ef4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef4c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800ef4e:	f7ff fffb 	bl	800ef48 <BSP_SD_WriteCpltCallback>
}
 800ef52:	bd08      	pop	{r3, pc}

0800ef54 <BSP_SD_ReadCpltCallback>:
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop

0800ef58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef58:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800ef5a:	f7ff fffb 	bl	800ef54 <BSP_SD_ReadCpltCallback>
}
 800ef5e:	bd08      	pop	{r3, pc}

0800ef60 <BSP_SD_Init>:
{
 800ef60:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ef62:	f7f5 fabb 	bl	80044dc <BSP_SD_IsDetected>
 800ef66:	2801      	cmp	r0, #1
 800ef68:	d001      	beq.n	800ef6e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ef6a:	2002      	movs	r0, #2
}
 800ef6c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800ef6e:	4807      	ldr	r0, [pc, #28]	; (800ef8c <BSP_SD_Init+0x2c>)
 800ef70:	f7fd ff00 	bl	800cd74 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d1f9      	bne.n	800ef6c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ef78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ef7c:	4803      	ldr	r0, [pc, #12]	; (800ef8c <BSP_SD_Init+0x2c>)
 800ef7e:	f7fd fe25 	bl	800cbcc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ef82:	3800      	subs	r0, #0
 800ef84:	bf18      	it	ne
 800ef86:	2001      	movne	r0, #1
}
 800ef88:	bd08      	pop	{r3, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20019274 	.word	0x20019274

0800ef90 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ef90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ef94:	4803      	ldr	r0, [pc, #12]	; (800efa4 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ef96:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ef98:	f7f9 fcf6 	bl	8008988 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800ef9c:	fab0 f080 	clz	r0, r0
 800efa0:	0940      	lsrs	r0, r0, #5
 800efa2:	bd08      	pop	{r3, pc}
 800efa4:	58020800 	.word	0x58020800

0800efa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800efa8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800efaa:	4c0a      	ldr	r4, [pc, #40]	; (800efd4 <SD_initialize+0x2c>)
 800efac:	2501      	movs	r5, #1
 800efae:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800efb0:	f7ff ffd6 	bl	800ef60 <BSP_SD_Init>
 800efb4:	b108      	cbz	r0, 800efba <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800efb6:	7820      	ldrb	r0, [r4, #0]
}
 800efb8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800efba:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800efbc:	f7ff ffb4 	bl	800ef28 <BSP_SD_GetCardState>
 800efc0:	b918      	cbnz	r0, 800efca <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800efc2:	7823      	ldrb	r3, [r4, #0]
 800efc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800efc8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800efca:	7823      	ldrb	r3, [r4, #0]
 800efcc:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800efce:	7023      	strb	r3, [r4, #0]
  return Stat;
 800efd0:	7820      	ldrb	r0, [r4, #0]
}
 800efd2:	bd38      	pop	{r3, r4, r5, pc}
 800efd4:	200000a4 	.word	0x200000a4

0800efd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800efd8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800efda:	2301      	movs	r3, #1
 800efdc:	4c05      	ldr	r4, [pc, #20]	; (800eff4 <SD_status+0x1c>)
 800efde:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800efe0:	f7ff ffa2 	bl	800ef28 <BSP_SD_GetCardState>
 800efe4:	b918      	cbnz	r0, 800efee <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800efe6:	7823      	ldrb	r3, [r4, #0]
 800efe8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800efec:	7023      	strb	r3, [r4, #0]
  return Stat;
 800efee:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800eff0:	bd10      	pop	{r4, pc}
 800eff2:	bf00      	nop
 800eff4:	200000a4 	.word	0x200000a4

0800eff8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eff8:	b508      	push	{r3, lr}
 800effa:	4608      	mov	r0, r1
 800effc:	4611      	mov	r1, r2
 800effe:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f004:	f7ff ff6c 	bl	800eee0 <BSP_SD_ReadBlocks>
 800f008:	b108      	cbz	r0, 800f00e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800f00a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800f00c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f00e:	f7ff ff8b 	bl	800ef28 <BSP_SD_GetCardState>
 800f012:	2800      	cmp	r0, #0
 800f014:	d0fa      	beq.n	800f00c <SD_read+0x14>
 800f016:	f7ff ff87 	bl	800ef28 <BSP_SD_GetCardState>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d1f7      	bne.n	800f00e <SD_read+0x16>
 800f01e:	e7f5      	b.n	800f00c <SD_read+0x14>

0800f020 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f020:	4b18      	ldr	r3, [pc, #96]	; (800f084 <SD_ioctl+0x64>)
{
 800f022:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f024:	7818      	ldrb	r0, [r3, #0]
{
 800f026:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f028:	f010 0401 	ands.w	r4, r0, #1
 800f02c:	d106      	bne.n	800f03c <SD_ioctl+0x1c>
 800f02e:	4615      	mov	r5, r2

  switch (cmd)
 800f030:	2903      	cmp	r1, #3
 800f032:	d824      	bhi.n	800f07e <SD_ioctl+0x5e>
 800f034:	e8df f001 	tbb	[pc, r1]
 800f038:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f03c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800f03e:	4620      	mov	r0, r4
 800f040:	b00b      	add	sp, #44	; 0x2c
 800f042:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800f044:	460c      	mov	r4, r1
}
 800f046:	4620      	mov	r0, r4
 800f048:	b00b      	add	sp, #44	; 0x2c
 800f04a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800f04c:	a801      	add	r0, sp, #4
 800f04e:	f7ff ff75 	bl	800ef3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f052:	9b07      	ldr	r3, [sp, #28]
}
 800f054:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f056:	602b      	str	r3, [r5, #0]
}
 800f058:	b00b      	add	sp, #44	; 0x2c
 800f05a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800f05c:	a801      	add	r0, sp, #4
 800f05e:	f7ff ff6d 	bl	800ef3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f062:	9b08      	ldr	r3, [sp, #32]
}
 800f064:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f066:	802b      	strh	r3, [r5, #0]
}
 800f068:	b00b      	add	sp, #44	; 0x2c
 800f06a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800f06c:	a801      	add	r0, sp, #4
 800f06e:	f7ff ff65 	bl	800ef3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f072:	9b08      	ldr	r3, [sp, #32]
}
 800f074:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f076:	0a5b      	lsrs	r3, r3, #9
 800f078:	602b      	str	r3, [r5, #0]
}
 800f07a:	b00b      	add	sp, #44	; 0x2c
 800f07c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800f07e:	2404      	movs	r4, #4
 800f080:	e7dd      	b.n	800f03e <SD_ioctl+0x1e>
 800f082:	bf00      	nop
 800f084:	200000a4 	.word	0x200000a4

0800f088 <SD_write>:
{
 800f088:	b508      	push	{r3, lr}
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f094:	f7ff ff36 	bl	800ef04 <BSP_SD_WriteBlocks>
 800f098:	b108      	cbz	r0, 800f09e <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800f09a:	2001      	movs	r0, #1
}
 800f09c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f09e:	f7ff ff43 	bl	800ef28 <BSP_SD_GetCardState>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d0fa      	beq.n	800f09c <SD_write+0x14>
 800f0a6:	f7ff ff3f 	bl	800ef28 <BSP_SD_GetCardState>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d1f7      	bne.n	800f09e <SD_write+0x16>
 800f0ae:	e7f5      	b.n	800f09c <SD_write+0x14>

0800f0b0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f0b0:	4b03      	ldr	r3, [pc, #12]	; (800f0c0 <disk_status+0x10>)
 800f0b2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800f0b6:	4403      	add	r3, r0
 800f0b8:	6852      	ldr	r2, [r2, #4]
 800f0ba:	7a18      	ldrb	r0, [r3, #8]
 800f0bc:	6853      	ldr	r3, [r2, #4]
 800f0be:	4718      	bx	r3
 800f0c0:	20019c88 	.word	0x20019c88

0800f0c4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800f0c4:	4b07      	ldr	r3, [pc, #28]	; (800f0e4 <disk_initialize+0x20>)
 800f0c6:	5c1a      	ldrb	r2, [r3, r0]
 800f0c8:	b952      	cbnz	r2, 800f0e0 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f0ca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800f0ce:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800f0d0:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f0d4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800f0d6:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f0da:	7a08      	ldrb	r0, [r1, #8]
 800f0dc:	6813      	ldr	r3, [r2, #0]
 800f0de:	4718      	bx	r3
  }
  return stat;
}
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	4770      	bx	lr
 800f0e4:	20019c88 	.word	0x20019c88

0800f0e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f0e8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f0ea:	4c05      	ldr	r4, [pc, #20]	; (800f100 <disk_read+0x18>)
 800f0ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800f0f0:	4404      	add	r4, r0
 800f0f2:	686d      	ldr	r5, [r5, #4]
 800f0f4:	7a20      	ldrb	r0, [r4, #8]
 800f0f6:	68ac      	ldr	r4, [r5, #8]
 800f0f8:	46a4      	mov	ip, r4
  return res;
}
 800f0fa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f0fc:	4760      	bx	ip
 800f0fe:	bf00      	nop
 800f100:	20019c88 	.word	0x20019c88

0800f104 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f104:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f106:	4c05      	ldr	r4, [pc, #20]	; (800f11c <disk_write+0x18>)
 800f108:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800f10c:	4404      	add	r4, r0
 800f10e:	686d      	ldr	r5, [r5, #4]
 800f110:	7a20      	ldrb	r0, [r4, #8]
 800f112:	68ec      	ldr	r4, [r5, #12]
 800f114:	46a4      	mov	ip, r4
  return res;
}
 800f116:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f118:	4760      	bx	ip
 800f11a:	bf00      	nop
 800f11c:	20019c88 	.word	0x20019c88

0800f120 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f120:	4b04      	ldr	r3, [pc, #16]	; (800f134 <disk_ioctl+0x14>)
 800f122:	eb03 0c00 	add.w	ip, r3, r0
 800f126:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	4718      	bx	r3
 800f134:	20019c88 	.word	0x20019c88

0800f138 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800f138:	4b26      	ldr	r3, [pc, #152]	; (800f1d4 <inc_lock+0x9c>)
{
 800f13a:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	6805      	ldr	r5, [r0, #0]
 800f140:	4295      	cmp	r5, r2
 800f142:	d01b      	beq.n	800f17c <inc_lock+0x44>
 800f144:	691c      	ldr	r4, [r3, #16]
 800f146:	42ac      	cmp	r4, r5
 800f148:	d006      	beq.n	800f158 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f14a:	b30a      	cbz	r2, 800f190 <inc_lock+0x58>
 800f14c:	2c00      	cmp	r4, #0
 800f14e:	d036      	beq.n	800f1be <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f150:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800f152:	4620      	mov	r0, r4
 800f154:	bcf0      	pop	{r4, r5, r6, r7}
 800f156:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800f158:	695e      	ldr	r6, [r3, #20]
 800f15a:	6887      	ldr	r7, [r0, #8]
 800f15c:	42be      	cmp	r6, r7
 800f15e:	d1f4      	bne.n	800f14a <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800f160:	699e      	ldr	r6, [r3, #24]
 800f162:	6947      	ldr	r7, [r0, #20]
 800f164:	42be      	cmp	r6, r7
 800f166:	d1f0      	bne.n	800f14a <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f168:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f16a:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f16e:	bb49      	cbnz	r1, 800f1c4 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f170:	0111      	lsls	r1, r2, #4
	return i + 1;
 800f172:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f174:	8982      	ldrh	r2, [r0, #12]
 800f176:	3201      	adds	r2, #1
 800f178:	b292      	uxth	r2, r2
 800f17a:	e01b      	b.n	800f1b4 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
 800f17c:	6884      	ldr	r4, [r0, #8]
 800f17e:	685e      	ldr	r6, [r3, #4]
 800f180:	42a6      	cmp	r6, r4
 800f182:	d1df      	bne.n	800f144 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800f184:	689c      	ldr	r4, [r3, #8]
 800f186:	6946      	ldr	r6, [r0, #20]
 800f188:	42a6      	cmp	r6, r4
 800f18a:	d1db      	bne.n	800f144 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f18c:	2200      	movs	r2, #0
 800f18e:	e7ec      	b.n	800f16a <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f190:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f192:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800f194:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800f198:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800f19c:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800f19e:	6945      	ldr	r5, [r0, #20]
 800f1a0:	6880      	ldr	r0, [r0, #8]
 800f1a2:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
 800f1a6:	f04f 0000 	mov.w	r0, #0
 800f1aa:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f1ac:	bf14      	ite	ne
 800f1ae:	f44f 7280 	movne.w	r2, #256	; 0x100
 800f1b2:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f1b4:	440b      	add	r3, r1
}
 800f1b6:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f1b8:	819a      	strh	r2, [r3, #12]
}
 800f1ba:	bcf0      	pop	{r4, r5, r6, r7}
 800f1bc:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f1be:	2402      	movs	r4, #2
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	e7e6      	b.n	800f192 <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f1c4:	8980      	ldrh	r0, [r0, #12]
 800f1c6:	0111      	lsls	r1, r2, #4
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d1c1      	bne.n	800f150 <inc_lock+0x18>
	return i + 1;
 800f1cc:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f1ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1d2:	e7ef      	b.n	800f1b4 <inc_lock+0x7c>
 800f1d4:	20019a64 	.word	0x20019a64

0800f1d8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	440a      	add	r2, r1
 800f1de:	460d      	mov	r5, r1
 800f1e0:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f1e2:	4f37      	ldr	r7, [pc, #220]	; (800f2c0 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800f1e4:	42aa      	cmp	r2, r5
 800f1e6:	d012      	beq.n	800f20e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f1e8:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f1ec:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f1f0:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f1f4:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f1f8:	2919      	cmp	r1, #25
 800f1fa:	d9f3      	bls.n	800f1e4 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f1fc:	2c7f      	cmp	r4, #127	; 0x7f
 800f1fe:	bf88      	it	hi
 800f200:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800f204:	2c00      	cmp	r4, #0
 800f206:	d1ed      	bne.n	800f1e4 <pattern_matching+0xc>
 800f208:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800f20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f20e:	1e1f      	subs	r7, r3, #0
 800f210:	f896 8000 	ldrb.w	r8, [r6]
 800f214:	bf18      	it	ne
 800f216:	2701      	movne	r7, #1
 800f218:	f1b8 0f00 	cmp.w	r8, #0
 800f21c:	d100      	bne.n	800f220 <pattern_matching+0x48>
 800f21e:	bb8f      	cbnz	r7, 800f284 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f220:	4c27      	ldr	r4, [pc, #156]	; (800f2c0 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800f222:	4630      	mov	r0, r6
{
 800f224:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800f226:	46a9      	mov	r9, r5
 800f228:	e010      	b.n	800f24c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f22a:	3a20      	subs	r2, #32
 800f22c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f22e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f232:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f236:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f238:	f1bc 0f19 	cmp.w	ip, #25
 800f23c:	d815      	bhi.n	800f26a <pattern_matching+0x92>
 800f23e:	3b20      	subs	r3, #32
 800f240:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800f242:	4293      	cmp	r3, r2
 800f244:	d118      	bne.n	800f278 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800f246:	b1eb      	cbz	r3, 800f284 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800f248:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f24c:	2b3f      	cmp	r3, #63	; 0x3f
 800f24e:	d01c      	beq.n	800f28a <pattern_matching+0xb2>
 800f250:	2b2a      	cmp	r3, #42	; 0x2a
 800f252:	d01a      	beq.n	800f28a <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f254:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f258:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f25a:	2919      	cmp	r1, #25
 800f25c:	d9e5      	bls.n	800f22a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f25e:	2a7f      	cmp	r2, #127	; 0x7f
 800f260:	d9e5      	bls.n	800f22e <pattern_matching+0x56>
 800f262:	4423      	add	r3, r4
 800f264:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800f268:	e7e1      	b.n	800f22e <pattern_matching+0x56>
 800f26a:	2b7f      	cmp	r3, #127	; 0x7f
 800f26c:	d9e9      	bls.n	800f242 <pattern_matching+0x6a>
 800f26e:	4421      	add	r1, r4
 800f270:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800f274:	4293      	cmp	r3, r2
 800f276:	d0e6      	beq.n	800f246 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f278:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d0c4      	beq.n	800f208 <pattern_matching+0x30>
 800f27e:	2f00      	cmp	r7, #0
 800f280:	d1cf      	bne.n	800f222 <pattern_matching+0x4a>
 800f282:	e7c1      	b.n	800f208 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f284:	2001      	movs	r0, #1
}
 800f286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f28a:	4601      	mov	r1, r0
				nm = nx = 0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	f811 cb01 	ldrb.w	ip, [r1], #1
 800f292:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800f294:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800f298:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800f29a:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800f29e:	bf0c      	ite	eq
 800f2a0:	3201      	addeq	r2, #1
 800f2a2:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800f2a4:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800f2a8:	d0f4      	beq.n	800f294 <pattern_matching+0xbc>
 800f2aa:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800f2ae:	d0f1      	beq.n	800f294 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800f2b0:	4649      	mov	r1, r9
 800f2b2:	f7ff ff91 	bl	800f1d8 <pattern_matching>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d1e4      	bne.n	800f284 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800f2ba:	f899 3000 	ldrb.w	r3, [r9]
 800f2be:	e7db      	b.n	800f278 <pattern_matching+0xa0>
 800f2c0:	0801b7d4 	.word	0x0801b7d4

0800f2c4 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800f2c4:	2300      	movs	r3, #0
{
 800f2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800f2ca:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800f2ce:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f2d0:	69c2      	ldr	r2, [r0, #28]
 800f2d2:	2a00      	cmp	r2, #0
 800f2d4:	d063      	beq.n	800f39e <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f2d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f2d8:	4604      	mov	r4, r0
 800f2da:	460d      	mov	r5, r1
 800f2dc:	3201      	adds	r2, #1
 800f2de:	d01f      	beq.n	800f320 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f2e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2e4:	8818      	ldrh	r0, [r3, #0]
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d063      	beq.n	800f3b2 <get_fileinfo+0xee>
 800f2ea:	f101 0715 	add.w	r7, r1, #21
 800f2ee:	2601      	movs	r6, #1
 800f2f0:	e000      	b.n	800f2f4 <get_fileinfo+0x30>
 800f2f2:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	f002 ff5b 	bl	80121b0 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f2fa:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d058      	beq.n	800f3b2 <get_fileinfo+0xee>
 800f300:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800f304:	d055      	beq.n	800f3b2 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800f306:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f30a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f30e:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800f312:	2800      	cmp	r0, #0
 800f314:	d1ed      	bne.n	800f2f2 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f316:	442e      	add	r6, r5
 800f318:	2300      	movs	r3, #0
 800f31a:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f31c:	7da8      	ldrb	r0, [r5, #22]
 800f31e:	e000      	b.n	800f322 <get_fileinfo+0x5e>
 800f320:	4618      	mov	r0, r3
	i = j = 0;
 800f322:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800f326:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800f328:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800f32a:	6a21      	ldr	r1, [r4, #32]
 800f32c:	5c8b      	ldrb	r3, [r1, r2]
 800f32e:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800f330:	2b20      	cmp	r3, #32
 800f332:	d01b      	beq.n	800f36c <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f334:	2b05      	cmp	r3, #5
 800f336:	bf08      	it	eq
 800f338:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800f33a:	2a09      	cmp	r2, #9
 800f33c:	d031      	beq.n	800f3a2 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800f33e:	eb05 010c 	add.w	r1, r5, ip
 800f342:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800f344:	b980      	cbnz	r0, 800f368 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f346:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800f34a:	2e19      	cmp	r6, #25
 800f34c:	d80b      	bhi.n	800f366 <get_fileinfo+0xa2>
 800f34e:	6a26      	ldr	r6, [r4, #32]
 800f350:	2a08      	cmp	r2, #8
 800f352:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800f356:	bf8c      	ite	hi
 800f358:	2610      	movhi	r6, #16
 800f35a:	2608      	movls	r6, #8
 800f35c:	ea1e 0f06 	tst.w	lr, r6
 800f360:	d001      	beq.n	800f366 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800f362:	3320      	adds	r3, #32
 800f364:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800f366:	758b      	strb	r3, [r1, #22]
		j++;
 800f368:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800f36c:	2a0b      	cmp	r2, #11
 800f36e:	d1dc      	bne.n	800f32a <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800f370:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800f374:	b928      	cbnz	r0, 800f382 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800f376:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f378:	6a23      	ldr	r3, [r4, #32]
 800f37a:	7b1b      	ldrb	r3, [r3, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	bf08      	it	eq
 800f380:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f382:	2300      	movs	r3, #0
 800f384:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f386:	6a23      	ldr	r3, [r4, #32]
 800f388:	7adb      	ldrb	r3, [r3, #11]
 800f38a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800f38c:	6a23      	ldr	r3, [r4, #32]
 800f38e:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f390:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800f392:	6a23      	ldr	r3, [r4, #32]
 800f394:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f398:	0c1a      	lsrs	r2, r3, #16
 800f39a:	80eb      	strh	r3, [r5, #6]
 800f39c:	80aa      	strh	r2, [r5, #4]
}
 800f39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800f3a2:	eb05 010c 	add.w	r1, r5, ip
 800f3a6:	b900      	cbnz	r0, 800f3aa <get_fileinfo+0xe6>
 800f3a8:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800f3aa:	f10c 0c01 	add.w	ip, ip, #1
 800f3ae:	724f      	strb	r7, [r1, #9]
 800f3b0:	e7c5      	b.n	800f33e <get_fileinfo+0x7a>
			i = j = 0;
 800f3b2:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	442e      	add	r6, r5
 800f3b8:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f3ba:	7da8      	ldrb	r0, [r5, #22]
 800f3bc:	e7b1      	b.n	800f322 <get_fileinfo+0x5e>
 800f3be:	bf00      	nop

0800f3c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3c0:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f3c6:	2300      	movs	r3, #0
{
 800f3c8:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f3ca:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3cc:	70c3      	strb	r3, [r0, #3]
 800f3ce:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f3d0:	d00c      	beq.n	800f3ec <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f3d2:	460d      	mov	r5, r1
 800f3d4:	460a      	mov	r2, r1
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800f3dc:	7840      	ldrb	r0, [r0, #1]
 800f3de:	f7ff fe83 	bl	800f0e8 <disk_read>
 800f3e2:	b110      	cbz	r0, 800f3ea <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3e4:	2004      	movs	r0, #4
			fs->winsect = sector;
 800f3e6:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800f3ea:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f3f0:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d11a      	bne.n	800f42e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f3f8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f3fc:	2be9      	cmp	r3, #233	; 0xe9
 800f3fe:	d007      	beq.n	800f410 <check_fs+0x50>
 800f400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f402:	4a0d      	ldr	r2, [pc, #52]	; (800f438 <check_fs+0x78>)
 800f404:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800f408:	4293      	cmp	r3, r2
 800f40a:	d001      	beq.n	800f410 <check_fs+0x50>
	return 2;
 800f40c:	2002      	movs	r0, #2
}
 800f40e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800f410:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f414:	4a09      	ldr	r2, [pc, #36]	; (800f43c <check_fs+0x7c>)
 800f416:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d009      	beq.n	800f432 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800f41e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f422:	4b07      	ldr	r3, [pc, #28]	; (800f440 <check_fs+0x80>)
 800f424:	4298      	cmp	r0, r3
 800f426:	bf14      	ite	ne
 800f428:	2002      	movne	r0, #2
 800f42a:	2000      	moveq	r0, #0
}
 800f42c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f42e:	2003      	movs	r0, #3
}
 800f430:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f432:	2000      	movs	r0, #0
}
 800f434:	bd70      	pop	{r4, r5, r6, pc}
 800f436:	bf00      	nop
 800f438:	009000eb 	.word	0x009000eb
 800f43c:	00544146 	.word	0x00544146
 800f440:	33544146 	.word	0x33544146

0800f444 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f444:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f446:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f448:	b083      	sub	sp, #12
 800f44a:	4604      	mov	r4, r0
 800f44c:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f44e:	b973      	cbnz	r3, 800f46e <move_window.part.0+0x2a>
 800f450:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f454:	2301      	movs	r3, #1
 800f456:	462a      	mov	r2, r5
 800f458:	7860      	ldrb	r0, [r4, #1]
 800f45a:	f7ff fe45 	bl	800f0e8 <disk_read>
 800f45e:	b910      	cbnz	r0, 800f466 <move_window.part.0+0x22>
			fs->winsect = sector;
 800f460:	6325      	str	r5, [r4, #48]	; 0x30
}
 800f462:	b003      	add	sp, #12
 800f464:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800f466:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f468:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f46c:	e7f8      	b.n	800f460 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 800f46e:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f470:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800f474:	2301      	movs	r3, #1
 800f476:	7840      	ldrb	r0, [r0, #1]
 800f478:	4632      	mov	r2, r6
 800f47a:	9101      	str	r1, [sp, #4]
 800f47c:	f7ff fe42 	bl	800f104 <disk_write>
 800f480:	b9b8      	cbnz	r0, 800f4b2 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f482:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f484:	69e3      	ldr	r3, [r4, #28]
 800f486:	1ab2      	subs	r2, r6, r2
 800f488:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800f48a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d2e1      	bcs.n	800f454 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f490:	78a7      	ldrb	r7, [r4, #2]
 800f492:	2f01      	cmp	r7, #1
 800f494:	d801      	bhi.n	800f49a <move_window.part.0+0x56>
 800f496:	e7dd      	b.n	800f454 <move_window.part.0+0x10>
					wsect += fs->fsize;
 800f498:	69e3      	ldr	r3, [r4, #28]
 800f49a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f49c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800f49e:	2301      	movs	r3, #1
 800f4a0:	7860      	ldrb	r0, [r4, #1]
 800f4a2:	4632      	mov	r2, r6
 800f4a4:	9101      	str	r1, [sp, #4]
 800f4a6:	f7ff fe2d 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4aa:	2f01      	cmp	r7, #1
 800f4ac:	9901      	ldr	r1, [sp, #4]
 800f4ae:	d1f3      	bne.n	800f498 <move_window.part.0+0x54>
 800f4b0:	e7d0      	b.n	800f454 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 800f4b2:	2001      	movs	r0, #1
}
 800f4b4:	b003      	add	sp, #12
 800f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4b8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f4b8:	2300      	movs	r3, #0
{
 800f4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800f4be:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800f4c0:	6804      	ldr	r4, [r0, #0]
 800f4c2:	b18c      	cbz	r4, 800f4e8 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4c4:	7825      	ldrb	r5, [r4, #0]
 800f4c6:	2d1f      	cmp	r5, #31
 800f4c8:	d912      	bls.n	800f4f0 <find_volume+0x38>
 800f4ca:	2d3a      	cmp	r5, #58	; 0x3a
 800f4cc:	d010      	beq.n	800f4f0 <find_volume+0x38>
 800f4ce:	46a4      	mov	ip, r4
 800f4d0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f4d4:	2b1f      	cmp	r3, #31
 800f4d6:	d90d      	bls.n	800f4f4 <find_volume+0x3c>
 800f4d8:	2b3a      	cmp	r3, #58	; 0x3a
 800f4da:	d1f9      	bne.n	800f4d0 <find_volume+0x18>
			i = *tp++ - '0';
 800f4dc:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4de:	45a4      	cmp	ip, r4
 800f4e0:	d102      	bne.n	800f4e8 <find_volume+0x30>
 800f4e2:	2d30      	cmp	r5, #48	; 0x30
 800f4e4:	f000 80da 	beq.w	800f69c <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4e8:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4f0:	462b      	mov	r3, r5
 800f4f2:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4f4:	2b3a      	cmp	r3, #58	; 0x3a
 800f4f6:	d0f1      	beq.n	800f4dc <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f4f8:	4ba6      	ldr	r3, [pc, #664]	; (800f794 <find_volume+0x2dc>)
 800f4fa:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	f000 80c9 	beq.w	800f694 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800f502:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f504:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f508:	782b      	ldrb	r3, [r5, #0]
 800f50a:	b17b      	cbz	r3, 800f52c <find_volume+0x74>
		stat = disk_status(fs->drv);
 800f50c:	7868      	ldrb	r0, [r5, #1]
 800f50e:	f7ff fdcf 	bl	800f0b0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f512:	07c1      	lsls	r1, r0, #31
 800f514:	d40a      	bmi.n	800f52c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f516:	2c00      	cmp	r4, #0
 800f518:	f000 80ab 	beq.w	800f672 <find_volume+0x1ba>
 800f51c:	f010 0404 	ands.w	r4, r0, #4
 800f520:	f000 80a7 	beq.w	800f672 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800f524:	240a      	movs	r4, #10
}
 800f526:	4620      	mov	r0, r4
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800f52c:	2000      	movs	r0, #0
 800f52e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f530:	f7ff fdc8 	bl	800f0c4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f534:	07c2      	lsls	r2, r0, #31
 800f536:	f100 809f 	bmi.w	800f678 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f53a:	b10c      	cbz	r4, 800f540 <find_volume+0x88>
 800f53c:	0743      	lsls	r3, r0, #29
 800f53e:	d4f1      	bmi.n	800f524 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f540:	2100      	movs	r1, #0
 800f542:	4628      	mov	r0, r5
 800f544:	f7ff ff3c 	bl	800f3c0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f548:	2802      	cmp	r0, #2
 800f54a:	d077      	beq.n	800f63c <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f54c:	2804      	cmp	r0, #4
 800f54e:	f000 809f 	beq.w	800f690 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f552:	2801      	cmp	r0, #1
 800f554:	f200 808c 	bhi.w	800f670 <find_volume+0x1b8>
	bsect = 0;
 800f558:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f55a:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800f55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f562:	f040 8085 	bne.w	800f670 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f566:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f56a:	b902      	cbnz	r2, 800f56e <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800f56c:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f56e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800f572:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f574:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f576:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f578:	2901      	cmp	r1, #1
 800f57a:	d879      	bhi.n	800f670 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f57c:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800f580:	b288      	uxth	r0, r1
 800f582:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f584:	2800      	cmp	r0, #0
 800f586:	d073      	beq.n	800f670 <find_volume+0x1b8>
 800f588:	1e48      	subs	r0, r1, #1
 800f58a:	4208      	tst	r0, r1
 800f58c:	d170      	bne.n	800f670 <find_volume+0x1b8>
	rv = ptr[1];
 800f58e:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f592:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f596:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f59a:	d169      	bne.n	800f670 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f59c:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f5a0:	b900      	cbnz	r0, 800f5a4 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800f5a2:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 800f5a4:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f5a8:	2f00      	cmp	r7, #0
 800f5aa:	d061      	beq.n	800f670 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f5ac:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f5b0:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800f5b4:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f5b6:	42b0      	cmp	r0, r6
 800f5b8:	d35a      	bcc.n	800f670 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f5ba:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f5be:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f5c0:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f5c4:	d354      	bcc.n	800f670 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f5c6:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800f5ca:	4288      	cmp	r0, r1
 800f5cc:	f200 8084 	bhi.w	800f6d8 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f5d0:	f640 71f5 	movw	r1, #4085	; 0xff5
 800f5d4:	4288      	cmp	r0, r1
 800f5d6:	f200 80a3 	bhi.w	800f720 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f5da:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f5dc:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f5de:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800f5e0:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f5e2:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800f5e4:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f5e6:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f5e8:	f1bc 0f00 	cmp.w	ip, #0
 800f5ec:	d040      	beq.n	800f670 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f5ee:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800f5f2:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f5f6:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f5f8:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800f5fc:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f5fe:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f600:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800f604:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800f608:	d332      	bcc.n	800f670 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f60a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800f60e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f610:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800f614:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800f616:	4960      	ldr	r1, [pc, #384]	; (800f798 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800f618:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f61a:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f61c:	485f      	ldr	r0, [pc, #380]	; (800f79c <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f61e:	4a60      	ldr	r2, [pc, #384]	; (800f7a0 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 800f620:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f622:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f624:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f626:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f628:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800f62a:	800b      	strh	r3, [r1, #0]
 800f62c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f62e:	f000 8086 	beq.w	800f73e <find_volume+0x286>
 800f632:	6913      	ldr	r3, [r2, #16]
 800f634:	429d      	cmp	r5, r3
 800f636:	d06f      	beq.n	800f718 <find_volume+0x260>
	return FR_OK;
 800f638:	2400      	movs	r4, #0
 800f63a:	e01a      	b.n	800f672 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f63c:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800f640:	b10e      	cbz	r6, 800f646 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800f642:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f646:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800f64a:	b10c      	cbz	r4, 800f650 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800f64c:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f650:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800f654:	b303      	cbz	r3, 800f698 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800f656:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f65a:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800f65e:	b10f      	cbz	r7, 800f664 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800f660:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f664:	b9f6      	cbnz	r6, 800f6a4 <find_volume+0x1ec>
 800f666:	bb2c      	cbnz	r4, 800f6b4 <find_volume+0x1fc>
 800f668:	f1b8 0f00 	cmp.w	r8, #0
 800f66c:	d12c      	bne.n	800f6c8 <find_volume+0x210>
 800f66e:	b93f      	cbnz	r7, 800f680 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f670:	240d      	movs	r4, #13
}
 800f672:	4620      	mov	r0, r4
 800f674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f678:	2403      	movs	r4, #3
}
 800f67a:	4620      	mov	r0, r4
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f680:	4639      	mov	r1, r7
 800f682:	4628      	mov	r0, r5
 800f684:	f7ff fe9c 	bl	800f3c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f688:	2801      	cmp	r0, #1
 800f68a:	d95b      	bls.n	800f744 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f68c:	2804      	cmp	r0, #4
 800f68e:	d1ef      	bne.n	800f670 <find_volume+0x1b8>
 800f690:	2401      	movs	r4, #1
 800f692:	e7ee      	b.n	800f672 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f694:	240c      	movs	r4, #12
 800f696:	e7ec      	b.n	800f672 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f698:	4698      	mov	r8, r3
 800f69a:	e7de      	b.n	800f65a <find_volume+0x1a2>
					*path = ++tt;
 800f69c:	f10c 0301 	add.w	r3, ip, #1
 800f6a0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6a2:	e729      	b.n	800f4f8 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f7ff fe8a 	bl	800f3c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f6ac:	2801      	cmp	r0, #1
 800f6ae:	d8da      	bhi.n	800f666 <find_volume+0x1ae>
 800f6b0:	4634      	mov	r4, r6
 800f6b2:	e752      	b.n	800f55a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f7ff fe82 	bl	800f3c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f6bc:	2801      	cmp	r0, #1
 800f6be:	f67f af4c 	bls.w	800f55a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f6c2:	f1b8 0f00 	cmp.w	r8, #0
 800f6c6:	d0d2      	beq.n	800f66e <find_volume+0x1b6>
 800f6c8:	4641      	mov	r1, r8
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7ff fe78 	bl	800f3c0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f6d0:	2801      	cmp	r0, #1
 800f6d2:	d8cc      	bhi.n	800f66e <find_volume+0x1b6>
 800f6d4:	4644      	mov	r4, r8
 800f6d6:	e740      	b.n	800f55a <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 800f6d8:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f6dc:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f6de:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f6e0:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6e2:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f6e6:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f6e8:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f6ea:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800f6ec:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6ee:	d1bf      	bne.n	800f670 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6f0:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800f6f2:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f6f4:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f6f8:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f6fa:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800f6fe:	d3b7      	bcc.n	800f670 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f700:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800f708:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f70a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800f70c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f70e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f712:	d019      	beq.n	800f748 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f714:	2003      	movs	r0, #3
 800f716:	e77e      	b.n	800f616 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f718:	2300      	movs	r3, #0
	return FR_OK;
 800f71a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f71c:	6113      	str	r3, [r2, #16]
 800f71e:	e7a8      	b.n	800f672 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f720:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f722:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f724:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800f726:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f728:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800f72a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f72c:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f72e:	f1bc 0f00 	cmp.w	ip, #0
 800f732:	d09d      	beq.n	800f670 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f734:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f736:	0049      	lsls	r1, r1, #1
 800f738:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f73a:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f73c:	e760      	b.n	800f600 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	e776      	b.n	800f632 <find_volume+0x17a>
 800f744:	463c      	mov	r4, r7
 800f746:	e708      	b.n	800f55a <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f748:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f74a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f74c:	4299      	cmp	r1, r3
 800f74e:	d004      	beq.n	800f75a <find_volume+0x2a2>
 800f750:	4628      	mov	r0, r5
 800f752:	f7ff fe77 	bl	800f444 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f756:	2800      	cmp	r0, #0
 800f758:	d1dc      	bne.n	800f714 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f75a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f75e:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800f762:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f764:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 800f766:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f768:	d1d4      	bne.n	800f714 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800f76a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f76c:	4b0d      	ldr	r3, [pc, #52]	; (800f7a4 <find_volume+0x2ec>)
 800f76e:	429a      	cmp	r2, r3
 800f770:	d1d0      	bne.n	800f714 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f772:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800f776:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f77a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f77e:	3320      	adds	r3, #32
 800f780:	429a      	cmp	r2, r3
 800f782:	d1c7      	bne.n	800f714 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800f784:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f788:	2003      	movs	r0, #3
 800f78a:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800f78e:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800f792:	e740      	b.n	800f616 <find_volume+0x15e>
 800f794:	20019a60 	.word	0x20019a60
 800f798:	20019a84 	.word	0x20019a84
 800f79c:	20019a88 	.word	0x20019a88
 800f7a0:	20019a64 	.word	0x20019a64
 800f7a4:	41615252 	.word	0x41615252

0800f7a8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800f7ac:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	460d      	mov	r5, r1
 800f7b2:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d006      	beq.n	800f7c6 <put_fat.part.0+0x1e>
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d052      	beq.n	800f862 <put_fat.part.0+0xba>
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d01b      	beq.n	800f7f8 <put_fat.part.0+0x50>
 800f7c0:	2002      	movs	r0, #2
}
 800f7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f7c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f7ca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7ce:	4299      	cmp	r1, r3
 800f7d0:	d003      	beq.n	800f7da <put_fat.part.0+0x32>
 800f7d2:	f7ff fe37 	bl	800f444 <move_window.part.0>
			if (res != FR_OK) break;
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d1f3      	bne.n	800f7c2 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f7da:	006d      	lsls	r5, r5, #1
 800f7dc:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800f7e0:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 800f7e4:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f7e6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800f7ea:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f7ec:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 800f7ee:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800f7f0:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800f7f2:	70e3      	strb	r3, [r4, #3]
}
 800f7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 800f7f8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f7fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f800:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f804:	4299      	cmp	r1, r3
 800f806:	d003      	beq.n	800f810 <put_fat.part.0+0x68>
 800f808:	f7ff fe1c 	bl	800f444 <move_window.part.0>
			if (res != FR_OK) break;
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d1d8      	bne.n	800f7c2 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f810:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800f812:	f107 0801 	add.w	r8, r7, #1
 800f816:	f104 0934 	add.w	r9, r4, #52	; 0x34
 800f81a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f81e:	d542      	bpl.n	800f8a6 <put_fat.part.0+0xfe>
 800f820:	f819 3007 	ldrb.w	r3, [r9, r7]
 800f824:	f003 030f 	and.w	r3, r3, #15
 800f828:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800f82c:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 800f830:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f832:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800f834:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f836:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f83a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d004      	beq.n	800f84a <put_fat.part.0+0xa2>
 800f840:	4620      	mov	r0, r4
 800f842:	f7ff fdff 	bl	800f444 <move_window.part.0>
			if (res != FR_OK) break;
 800f846:	2800      	cmp	r0, #0
 800f848:	d1bb      	bne.n	800f7c2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f84a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f84e:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 800f852:	44c8      	add	r8, r9
			fs->wflag = 1;
 800f854:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f856:	f888 2000 	strb.w	r2, [r8]
			break;
 800f85a:	2000      	movs	r0, #0
			fs->wflag = 1;
 800f85c:	70e3      	strb	r3, [r4, #3]
}
 800f85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f862:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f864:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f866:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f86a:	4299      	cmp	r1, r3
 800f86c:	d003      	beq.n	800f876 <put_fat.part.0+0xce>
 800f86e:	f7ff fde9 	bl	800f444 <move_window.part.0>
			if (res != FR_OK) break;
 800f872:	2800      	cmp	r0, #0
 800f874:	d1a5      	bne.n	800f7c2 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f876:	00ad      	lsls	r5, r5, #2
 800f878:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f87c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 800f880:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800f884:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f886:	1941      	adds	r1, r0, r5
 800f888:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f88c:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800f88e:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f890:	5542      	strb	r2, [r0, r5]
 800f892:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800f894:	708b      	strb	r3, [r1, #2]
 800f896:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 800f898:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f89a:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 800f89c:	70ca      	strb	r2, [r1, #3]
			break;
 800f89e:	2000      	movs	r0, #0
			fs->wflag = 1;
 800f8a0:	70e3      	strb	r3, [r4, #3]
}
 800f8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f8a6:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 800f8aa:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800f8ae:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8b0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f8b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8b6:	4299      	cmp	r1, r3
 800f8b8:	d005      	beq.n	800f8c6 <put_fat.part.0+0x11e>
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f7ff fdc2 	bl	800f444 <move_window.part.0>
			if (res != FR_OK) break;
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	f47f af7e 	bne.w	800f7c2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f8c6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f8ca:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 800f8ce:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f8d0:	f898 3000 	ldrb.w	r3, [r8]
 800f8d4:	f023 060f 	bic.w	r6, r3, #15
 800f8d8:	4332      	orrs	r2, r6
 800f8da:	e7bb      	b.n	800f854 <put_fat.part.0+0xac>

0800f8dc <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f8dc:	2901      	cmp	r1, #1
 800f8de:	d90e      	bls.n	800f8fe <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f8e2:	6983      	ldr	r3, [r0, #24]
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	4605      	mov	r5, r0
 800f8e8:	4299      	cmp	r1, r3
 800f8ea:	d206      	bcs.n	800f8fa <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800f8ec:	7803      	ldrb	r3, [r0, #0]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d03e      	beq.n	800f970 <get_fat.isra.0+0x94>
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d02b      	beq.n	800f94e <get_fat.isra.0+0x72>
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d003      	beq.n	800f902 <get_fat.isra.0+0x26>
 800f8fa:	2001      	movs	r0, #1
}
 800f8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800f8fe:	2001      	movs	r0, #1
}
 800f900:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 800f902:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f906:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f908:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f90a:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f90e:	4291      	cmp	r1, r2
 800f910:	d004      	beq.n	800f91c <get_fat.isra.0+0x40>
 800f912:	f7ff fd97 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f916:	bba0      	cbnz	r0, 800f982 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f918:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f91a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800f91c:	1c77      	adds	r7, r6, #1
 800f91e:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f922:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800f926:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f928:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800f92a:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f92e:	d003      	beq.n	800f938 <get_fat.isra.0+0x5c>
 800f930:	4628      	mov	r0, r5
 800f932:	f7ff fd87 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f936:	bb20      	cbnz	r0, 800f982 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f938:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f93c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f93e:	443d      	add	r5, r7
 800f940:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f944:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f948:	d524      	bpl.n	800f994 <get_fat.isra.0+0xb8>
 800f94a:	0900      	lsrs	r0, r0, #4
}
 800f94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f94e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f950:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f952:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f956:	4299      	cmp	r1, r3
 800f958:	d002      	beq.n	800f960 <get_fat.isra.0+0x84>
 800f95a:	f7ff fd73 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f95e:	b980      	cbnz	r0, 800f982 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f960:	00a4      	lsls	r4, r4, #2
 800f962:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800f966:	4425      	add	r5, r4
 800f968:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f96a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f970:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f972:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f974:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f978:	4299      	cmp	r1, r3
 800f97a:	d005      	beq.n	800f988 <get_fat.isra.0+0xac>
 800f97c:	f7ff fd62 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f980:	b110      	cbz	r0, 800f988 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800f986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f988:	0064      	lsls	r4, r4, #1
 800f98a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800f98e:	4425      	add	r5, r4
 800f990:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 800f992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f994:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800f998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f99a:	bf00      	nop

0800f99c <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f9a0:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f9a2:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f9a4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f9a6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800f9aa:	d22d      	bcs.n	800fa08 <dir_next.constprop.0+0x6c>
 800f9ac:	b363      	cbz	r3, 800fa08 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f9ae:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800f9b2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f9b4:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f9b6:	b137      	cbz	r7, 800f9c6 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f9b8:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 800f9ba:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800f9bc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f9be:	443e      	add	r6, r7
 800f9c0:	6226      	str	r6, [r4, #32]
}
 800f9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 800f9c6:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800f9c8:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800f9ca:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800f9cc:	b1f9      	cbz	r1, 800fa0e <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f9ce:	8973      	ldrh	r3, [r6, #10]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800f9d6:	d1ef      	bne.n	800f9b8 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7ff ff7f 	bl	800f8dc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f9de:	2801      	cmp	r0, #1
 800f9e0:	d91d      	bls.n	800fa1e <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	d01d      	beq.n	800fa22 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f9e6:	69b3      	ldr	r3, [r6, #24]
 800f9e8:	4298      	cmp	r0, r3
 800f9ea:	d214      	bcs.n	800fa16 <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800f9ec:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800f9ee:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f9f0:	69b3      	ldr	r3, [r6, #24]
 800f9f2:	3b02      	subs	r3, #2
 800f9f4:	4298      	cmp	r0, r3
 800f9f6:	d204      	bcs.n	800fa02 <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
 800f9f8:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800f9fc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f9fe:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 800fa02:	f8c4 801c 	str.w	r8, [r4, #28]
 800fa06:	e7d7      	b.n	800f9b8 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fa08:	2004      	movs	r0, #4
}
 800fa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fa0e:	8933      	ldrh	r3, [r6, #8]
 800fa10:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800fa14:	d8d0      	bhi.n	800f9b8 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 800fa16:	2300      	movs	r3, #0
 800fa18:	2004      	movs	r0, #4
 800fa1a:	61e3      	str	r3, [r4, #28]
 800fa1c:	e7d1      	b.n	800f9c2 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa1e:	2002      	movs	r0, #2
 800fa20:	e7cf      	b.n	800f9c2 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa22:	2001      	movs	r0, #1
 800fa24:	e7cd      	b.n	800f9c2 <dir_next.constprop.0+0x26>
 800fa26:	bf00      	nop

0800fa28 <dir_read>:
{
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800fa2c:	69c6      	ldr	r6, [r0, #28]
{
 800fa2e:	b083      	sub	sp, #12
 800fa30:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800fa32:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800fa34:	2e00      	cmp	r6, #0
 800fa36:	d064      	beq.n	800fb02 <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800fa38:	23ff      	movs	r3, #255	; 0xff
 800fa3a:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fa3c:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800fa40:	4698      	mov	r8, r3
 800fa42:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa44:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800fa46:	42b5      	cmp	r5, r6
 800fa48:	d014      	beq.n	800fa74 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f040 80d2 	bne.w	800fbf6 <dir_read+0x1ce>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fa52:	2301      	movs	r3, #1
 800fa54:	4632      	mov	r2, r6
 800fa56:	4649      	mov	r1, r9
 800fa58:	7878      	ldrb	r0, [r7, #1]
 800fa5a:	f7ff fb45 	bl	800f0e8 <disk_read>
 800fa5e:	b140      	cbz	r0, 800fa72 <dir_read+0x4a>
			fs->winsect = sector;
 800fa60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800fa64:	2001      	movs	r0, #1
			fs->winsect = sector;
 800fa66:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fa68:	2300      	movs	r3, #0
 800fa6a:	61e3      	str	r3, [r4, #28]
}
 800fa6c:	b003      	add	sp, #12
 800fa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800fa72:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fa74:	6a21      	ldr	r1, [r4, #32]
 800fa76:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	d042      	beq.n	800fb02 <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa7c:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fa7e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa84:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fa86:	d00a      	beq.n	800fa9e <dir_read+0x76>
 800fa88:	2a2e      	cmp	r2, #46	; 0x2e
 800fa8a:	d008      	beq.n	800fa9e <dir_read+0x76>
 800fa8c:	f023 0020 	bic.w	r0, r3, #32
 800fa90:	f1a0 0008 	sub.w	r0, r0, #8
 800fa94:	fab0 f080 	clz	r0, r0
 800fa98:	0940      	lsrs	r0, r0, #5
 800fa9a:	4550      	cmp	r0, sl
 800fa9c:	d038      	beq.n	800fb10 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa9e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800faa2:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800faa4:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800faa6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800faa8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800faac:	d229      	bcs.n	800fb02 <dir_read+0xda>
 800faae:	b346      	cbz	r6, 800fb02 <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fab0:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800fab4:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fab6:	bb32      	cbnz	r2, 800fb06 <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800fab8:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800faba:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800fabc:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800fabe:	b961      	cbnz	r1, 800fada <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fac0:	891a      	ldrh	r2, [r3, #8]
 800fac2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800fac6:	d91c      	bls.n	800fb02 <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fac8:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800faca:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800facc:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800face:	2e00      	cmp	r6, #0
 800fad0:	d1b8      	bne.n	800fa44 <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fad2:	2000      	movs	r0, #0
}
 800fad4:	b003      	add	sp, #12
 800fad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fada:	895a      	ldrh	r2, [r3, #10]
 800fadc:	3a01      	subs	r2, #1
 800fade:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800fae2:	d1f1      	bne.n	800fac8 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fae4:	4618      	mov	r0, r3
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	f7ff fef8 	bl	800f8dc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800faec:	2801      	cmp	r0, #1
 800faee:	f240 80b6 	bls.w	800fc5e <dir_read+0x236>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	f000 8086 	beq.w	800fc04 <dir_read+0x1dc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	699a      	ldr	r2, [r3, #24]
 800fafc:	4290      	cmp	r0, r2
 800fafe:	f0c0 80a2 	bcc.w	800fc46 <dir_read+0x21e>
	FRESULT res = FR_NO_FILE;
 800fb02:	2004      	movs	r0, #4
 800fb04:	e7b0      	b.n	800fa68 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb06:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800fb08:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb0a:	441a      	add	r2, r3
 800fb0c:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 800fb0e:	e799      	b.n	800fa44 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800fb10:	2b0f      	cmp	r3, #15
 800fb12:	f040 80ac 	bne.w	800fc6e <dir_read+0x246>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800fb16:	0650      	lsls	r0, r2, #25
 800fb18:	d576      	bpl.n	800fc08 <dir_read+0x1e0>
						sum = dp->dir[LDIR_Chksum];
 800fb1a:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800fb1c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800fb20:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800fb22:	6963      	ldr	r3, [r4, #20]
 800fb24:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fb26:	7b4b      	ldrb	r3, [r1, #13]
 800fb28:	9800      	ldr	r0, [sp, #0]
 800fb2a:	4283      	cmp	r3, r0
 800fb2c:	d1b7      	bne.n	800fa9e <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fb2e:	8b4b      	ldrh	r3, [r1, #26]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1b4      	bne.n	800fa9e <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fb34:	780b      	ldrb	r3, [r1, #0]
 800fb36:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800fb3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800fb44:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb48:	2bfe      	cmp	r3, #254	; 0xfe
 800fb4a:	d8a8      	bhi.n	800fa9e <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fb4c:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb4e:	f103 0801 	add.w	r8, r3, #1
 800fb52:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800fb56:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	f040 8090 	bne.w	800fc80 <dir_read+0x258>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb64:	429e      	cmp	r6, r3
 800fb66:	d19a      	bne.n	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fb68:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb70:	459e      	cmp	lr, r3
 800fb72:	d194      	bne.n	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fb74:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb7c:	459c      	cmp	ip, r3
 800fb7e:	d18e      	bne.n	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fb80:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb88:	429e      	cmp	r6, r3
 800fb8a:	d188      	bne.n	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fb8c:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb94:	459c      	cmp	ip, r3
 800fb96:	d182      	bne.n	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fb98:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fba0:	459e      	cmp	lr, r3
 800fba2:	f47f af7c 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fba6:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbac:	429e      	cmp	r6, r3
 800fbae:	f47f af76 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fbb2:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbba:	459c      	cmp	ip, r3
 800fbbc:	f47f af6f 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fbc0:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbc6:	429e      	cmp	r6, r3
 800fbc8:	f47f af69 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fbcc:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbd4:	459c      	cmp	ip, r3
 800fbd6:	f47f af62 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fbda:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbe0:	429e      	cmp	r6, r3
 800fbe2:	f47f af5c 	bne.w	800fa9e <dir_read+0x76>
	rv = ptr[1];
 800fbe6:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbee:	459c      	cmp	ip, r3
 800fbf0:	f000 80df 	beq.w	800fdb2 <dir_read+0x38a>
 800fbf4:	e753      	b.n	800fa9e <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	462a      	mov	r2, r5
 800fbfa:	4649      	mov	r1, r9
 800fbfc:	7878      	ldrb	r0, [r7, #1]
 800fbfe:	f7ff fa81 	bl	800f104 <disk_write>
 800fc02:	b128      	cbz	r0, 800fc10 <dir_read+0x1e8>
	FRESULT res = FR_NO_FILE;
 800fc04:	2001      	movs	r0, #1
 800fc06:	e72f      	b.n	800fa68 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fc08:	4590      	cmp	r8, r2
 800fc0a:	f47f af48 	bne.w	800fa9e <dir_read+0x76>
 800fc0e:	e78a      	b.n	800fb26 <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800fc12:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fc14:	1aea      	subs	r2, r5, r3
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	f4bf af1a 	bcs.w	800fa52 <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc1e:	f897 b002 	ldrb.w	fp, [r7, #2]
 800fc22:	f1bb 0f01 	cmp.w	fp, #1
 800fc26:	d801      	bhi.n	800fc2c <dir_read+0x204>
 800fc28:	e713      	b.n	800fa52 <dir_read+0x2a>
					wsect += fs->fsize;
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800fc32:	2301      	movs	r3, #1
 800fc34:	4649      	mov	r1, r9
 800fc36:	462a      	mov	r2, r5
 800fc38:	7878      	ldrb	r0, [r7, #1]
 800fc3a:	f7ff fa63 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc3e:	f1bb 0f01 	cmp.w	fp, #1
 800fc42:	d1f2      	bne.n	800fc2a <dir_read+0x202>
 800fc44:	e705      	b.n	800fa52 <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800fc46:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800fc48:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fc4a:	699a      	ldr	r2, [r3, #24]
 800fc4c:	3a02      	subs	r2, #2
 800fc4e:	4290      	cmp	r0, r2
 800fc50:	d207      	bcs.n	800fc62 <dir_read+0x23a>
	return clst * fs->csize + fs->database;
 800fc52:	895a      	ldrh	r2, [r3, #10]
 800fc54:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fc56:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800fc5a:	61e6      	str	r6, [r4, #28]
 800fc5c:	e734      	b.n	800fac8 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fc5e:	2002      	movs	r0, #2
 800fc60:	e702      	b.n	800fa68 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fc62:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800fc64:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800fc68:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fc6a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800fc6c:	e731      	b.n	800fad2 <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fc6e:	f1b8 0f00 	cmp.w	r8, #0
 800fc72:	f000 80ac 	beq.w	800fdce <dir_read+0x3a6>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fc76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	6323      	str	r3, [r4, #48]	; 0x30
 800fc7e:	e6f5      	b.n	800fa6c <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fc80:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fc84:	f43f af0d 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fc88:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 800fc8c:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fc90:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800fc94:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 800fc98:	2e00      	cmp	r6, #0
 800fc9a:	f43f af67 	beq.w	800fb6c <dir_read+0x144>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fc9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fca2:	f43f aefe 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fca6:	4428      	add	r0, r5
 800fca8:	f103 0803 	add.w	r8, r3, #3
 800fcac:	f8a0 e002 	strh.w	lr, [r0, #2]
 800fcb0:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800fcb4:	f1be 0f00 	cmp.w	lr, #0
 800fcb8:	f43f af5e 	beq.w	800fb78 <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fcbc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fcc0:	f43f aeef 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fcc4:	f8a0 c004 	strh.w	ip, [r0, #4]
 800fcc8:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 800fccc:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800fcd0:	f1bc 0f00 	cmp.w	ip, #0
 800fcd4:	f43f af56 	beq.w	800fb84 <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fcd8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fcdc:	f43f aee1 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fce0:	80c6      	strh	r6, [r0, #6]
 800fce2:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 800fce6:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800fcea:	2e00      	cmp	r6, #0
 800fcec:	f43f af50 	beq.w	800fb90 <dir_read+0x168>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fcf0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fcf4:	f43f aed5 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fcf8:	f8a0 c008 	strh.w	ip, [r0, #8]
 800fcfc:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 800fd00:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800fd04:	f1bc 0f00 	cmp.w	ip, #0
 800fd08:	f43f af48 	beq.w	800fb9c <dir_read+0x174>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd10:	f43f aec7 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd14:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800fd18:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 800fd1c:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800fd1e:	f1be 0f00 	cmp.w	lr, #0
 800fd22:	f43f af41 	beq.w	800fba8 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd2a:	f43f aeba 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd2e:	8186      	strh	r6, [r0, #12]
 800fd30:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 800fd34:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800fd38:	2e00      	cmp	r6, #0
 800fd3a:	f43f af3c 	beq.w	800fbb6 <dir_read+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd3e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd42:	f43f aeae 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd46:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800fd4a:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 800fd4e:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800fd50:	f1bc 0f00 	cmp.w	ip, #0
 800fd54:	f43f af35 	beq.w	800fbc2 <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd58:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd5c:	f43f aea1 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd60:	8206      	strh	r6, [r0, #16]
 800fd62:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 800fd66:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800fd6a:	2e00      	cmp	r6, #0
 800fd6c:	f43f af30 	beq.w	800fbd0 <dir_read+0x1a8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd70:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd74:	f43f ae95 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd78:	f8a0 c012 	strh.w	ip, [r0, #18]
 800fd7c:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 800fd80:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800fd82:	f1bc 0f00 	cmp.w	ip, #0
 800fd86:	f43f af29 	beq.w	800fbdc <dir_read+0x1b4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd8a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fd8e:	f43f ae88 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd92:	8286      	strh	r6, [r0, #20]
 800fd94:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 800fd98:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	f43f af24 	beq.w	800fbea <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fda2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fda6:	f43f ae7c 	beq.w	800faa2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fdaa:	f103 080d 	add.w	r8, r3, #13
 800fdae:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fdb2:	780b      	ldrb	r3, [r1, #0]
 800fdb4:	0659      	lsls	r1, r3, #25
 800fdb6:	d506      	bpl.n	800fdc6 <dir_read+0x39e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fdb8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fdbc:	f43f ae71 	beq.w	800faa2 <dir_read+0x7a>
		lfnbuf[i] = 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fdc6:	3a01      	subs	r2, #1
 800fdc8:	fa5f f882 	uxtb.w	r8, r2
 800fdcc:	e669      	b.n	800faa2 <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fdce:	780a      	ldrb	r2, [r1, #0]
 800fdd0:	01d3      	lsls	r3, r2, #7
 800fdd2:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800fdd6:	784a      	ldrb	r2, [r1, #1]
 800fdd8:	441a      	add	r2, r3
 800fdda:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fdde:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fde2:	788a      	ldrb	r2, [r1, #2]
 800fde4:	fa52 f283 	uxtab	r2, r2, r3
 800fde8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fdec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fdf0:	78ca      	ldrb	r2, [r1, #3]
 800fdf2:	fa52 f283 	uxtab	r2, r2, r3
 800fdf6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fdfa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fdfe:	790a      	ldrb	r2, [r1, #4]
 800fe00:	fa52 f283 	uxtab	r2, r2, r3
 800fe04:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe08:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fe0c:	794a      	ldrb	r2, [r1, #5]
 800fe0e:	fa52 f283 	uxtab	r2, r2, r3
 800fe12:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe16:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fe1a:	798a      	ldrb	r2, [r1, #6]
 800fe1c:	fa52 f283 	uxtab	r2, r2, r3
 800fe20:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe24:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fe28:	79ca      	ldrb	r2, [r1, #7]
 800fe2a:	fa52 f283 	uxtab	r2, r2, r3
 800fe2e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe32:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fe36:	7a0a      	ldrb	r2, [r1, #8]
 800fe38:	fa52 f283 	uxtab	r2, r2, r3
 800fe3c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fe44:	7a4a      	ldrb	r2, [r1, #9]
 800fe46:	7a89      	ldrb	r1, [r1, #10]
 800fe48:	fa52 f283 	uxtab	r2, r2, r3
 800fe4c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fe50:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fe54:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fe56:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	f47f af0a 	bne.w	800fc76 <dir_read+0x24e>
 800fe62:	e636      	b.n	800fad2 <dir_read+0xaa>

0800fe64 <sync_fs>:
{
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe66:	78c3      	ldrb	r3, [r0, #3]
{
 800fe68:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe6a:	b95b      	cbnz	r3, 800fe84 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe6c:	7823      	ldrb	r3, [r4, #0]
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d029      	beq.n	800fec6 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fe72:	2200      	movs	r2, #0
 800fe74:	7860      	ldrb	r0, [r4, #1]
 800fe76:	4611      	mov	r1, r2
 800fe78:	f7ff f952 	bl	800f120 <disk_ioctl>
			res = FR_DISK_ERR;
 800fe7c:	3800      	subs	r0, #0
 800fe7e:	bf18      	it	ne
 800fe80:	2001      	movne	r0, #1
}
 800fe82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800fe84:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe86:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	7840      	ldrb	r0, [r0, #1]
 800fe8e:	462a      	mov	r2, r5
 800fe90:	4639      	mov	r1, r7
 800fe92:	f7ff f937 	bl	800f104 <disk_write>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d150      	bne.n	800ff3c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fe9c:	69e3      	ldr	r3, [r4, #28]
 800fe9e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800fea0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d2e2      	bcs.n	800fe6c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fea6:	78a6      	ldrb	r6, [r4, #2]
 800fea8:	2e01      	cmp	r6, #1
 800feaa:	d801      	bhi.n	800feb0 <sync_fs+0x4c>
 800feac:	e7de      	b.n	800fe6c <sync_fs+0x8>
					wsect += fs->fsize;
 800feae:	69e3      	ldr	r3, [r4, #28]
 800feb0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800feb2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800feb4:	2301      	movs	r3, #1
 800feb6:	4639      	mov	r1, r7
 800feb8:	462a      	mov	r2, r5
 800feba:	7860      	ldrb	r0, [r4, #1]
 800febc:	f7ff f922 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fec0:	2e01      	cmp	r6, #1
 800fec2:	d1f4      	bne.n	800feae <sync_fs+0x4a>
 800fec4:	e7d2      	b.n	800fe6c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fec6:	7925      	ldrb	r5, [r4, #4]
 800fec8:	2d01      	cmp	r5, #1
 800feca:	d1d2      	bne.n	800fe72 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800fecc:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800fed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fed4:	2100      	movs	r1, #0
 800fed6:	4630      	mov	r0, r6
 800fed8:	f009 fb7a 	bl	80195d0 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800fedc:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fee0:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fee2:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800fee4:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fee8:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800feea:	4815      	ldr	r0, [pc, #84]	; (800ff40 <sync_fs+0xdc>)
 800feec:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 800fef0:	6360      	str	r0, [r4, #52]	; 0x34
 800fef2:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 800fef6:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800fefa:	3020      	adds	r0, #32
 800fefc:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 800ff00:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ff02:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 800ff06:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ff08:	0e12      	lsrs	r2, r2, #24
 800ff0a:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ff0e:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 800ff10:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800ff14:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 800ff16:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff18:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 800ff1c:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ff1e:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 800ff22:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ff24:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800ff26:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ff28:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800ff2c:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ff30:	7860      	ldrb	r0, [r4, #1]
 800ff32:	f7ff f8e7 	bl	800f104 <disk_write>
			fs->fsi_flag = 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	7123      	strb	r3, [r4, #4]
 800ff3a:	e79a      	b.n	800fe72 <sync_fs+0xe>
			res = FR_DISK_ERR;
 800ff3c:	2001      	movs	r0, #1
}
 800ff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff40:	41615252 	.word	0x41615252

0800ff44 <create_chain>:
{
 800ff44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff48:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 800ff4a:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 800ff4c:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 800ff50:	2900      	cmp	r1, #0
 800ff52:	f040 80b4 	bne.w	80100be <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff56:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff5a:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff5e:	b9ce      	cbnz	r6, 800ff94 <create_chain+0x50>
 800ff60:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800ff62:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800ff64:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff66:	429c      	cmp	r4, r3
 800ff68:	d318      	bcc.n	800ff9c <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 800ff6a:	2e01      	cmp	r6, #1
 800ff6c:	f000 80a3 	beq.w	80100b6 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ff70:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 800ff74:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff76:	69ab      	ldr	r3, [r5, #24]
 800ff78:	42a3      	cmp	r3, r4
 800ff7a:	d907      	bls.n	800ff8c <create_chain+0x48>
		switch (fs->fs_type) {
 800ff7c:	782b      	ldrb	r3, [r5, #0]
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	f000 8088 	beq.w	8010094 <create_chain+0x150>
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	d044      	beq.n	8010012 <create_chain+0xce>
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d00c      	beq.n	800ffa6 <create_chain+0x62>
 800ff8c:	2401      	movs	r4, #1
}
 800ff8e:	4620      	mov	r0, r4
 800ff90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff94:	42b3      	cmp	r3, r6
 800ff96:	bf98      	it	ls
 800ff98:	2601      	movls	r6, #1
 800ff9a:	e7e2      	b.n	800ff62 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff9c:	2c01      	cmp	r4, #1
 800ff9e:	f8da 5000 	ldr.w	r5, [sl]
 800ffa2:	d9f3      	bls.n	800ff8c <create_chain+0x48>
 800ffa4:	e7e7      	b.n	800ff76 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 800ffa6:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffae:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffb2:	4291      	cmp	r1, r2
 800ffb4:	d005      	beq.n	800ffc2 <create_chain+0x7e>
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f7ff fa44 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffbc:	bb20      	cbnz	r0, 8010008 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffc0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800ffc2:	f107 0b01 	add.w	fp, r7, #1
 800ffc6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffca:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800ffce:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffd0:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800ffd2:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffd6:	d003      	beq.n	800ffe0 <create_chain+0x9c>
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f7ff fa33 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffde:	b998      	cbnz	r0, 8010008 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ffe0:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ffe4:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800ffe6:	445d      	add	r5, fp
 800ffe8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800ffec:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fff0:	d575      	bpl.n	80100de <create_chain+0x19a>
 800fff2:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 800fff4:	b30b      	cbz	r3, 801003a <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d0c8      	beq.n	800ff8c <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 800fffa:	42a6      	cmp	r6, r4
 800fffc:	d05b      	beq.n	80100b6 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fffe:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010002:	e7af      	b.n	800ff64 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010004:	2801      	cmp	r0, #1
 8010006:	d1c1      	bne.n	800ff8c <create_chain+0x48>
 8010008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 801000c:	4620      	mov	r0, r4
 801000e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010012:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010014:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010016:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801001a:	4299      	cmp	r1, r3
 801001c:	d004      	beq.n	8010028 <create_chain+0xe4>
 801001e:	4628      	mov	r0, r5
 8010020:	f7ff fa10 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010024:	2800      	cmp	r0, #0
 8010026:	d1ef      	bne.n	8010008 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010028:	00a3      	lsls	r3, r4, #2
 801002a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801002e:	441d      	add	r5, r3
 8010030:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010032:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8010036:	2b00      	cmp	r3, #0
 8010038:	d1dd      	bne.n	800fff6 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801003a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801003e:	42a3      	cmp	r3, r4
 8010040:	d9a4      	bls.n	800ff8c <create_chain+0x48>
 8010042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010046:	4621      	mov	r1, r4
 8010048:	4648      	mov	r0, r9
 801004a:	f7ff fbad 	bl	800f7a8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 801004e:	b970      	cbnz	r0, 801006e <create_chain+0x12a>
 8010050:	f1b8 0f00 	cmp.w	r8, #0
 8010054:	d00b      	beq.n	801006e <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010056:	f1b8 0f01 	cmp.w	r8, #1
 801005a:	d097      	beq.n	800ff8c <create_chain+0x48>
 801005c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010060:	4598      	cmp	r8, r3
 8010062:	d293      	bcs.n	800ff8c <create_chain+0x48>
 8010064:	4622      	mov	r2, r4
 8010066:	4641      	mov	r1, r8
 8010068:	4648      	mov	r0, r9
 801006a:	f7ff fb9d 	bl	800f7a8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801006e:	2800      	cmp	r0, #0
 8010070:	d1c8      	bne.n	8010004 <create_chain+0xc0>
		fs->last_clst = ncl;
 8010072:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010076:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 801007a:	3b02      	subs	r3, #2
 801007c:	429a      	cmp	r2, r3
 801007e:	d802      	bhi.n	8010086 <create_chain+0x142>
 8010080:	3a01      	subs	r2, #1
 8010082:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 8010086:	f899 3004 	ldrb.w	r3, [r9, #4]
 801008a:	f043 0301 	orr.w	r3, r3, #1
 801008e:	f889 3004 	strb.w	r3, [r9, #4]
 8010092:	e77c      	b.n	800ff8e <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010094:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010096:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010098:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801009c:	4299      	cmp	r1, r3
 801009e:	d004      	beq.n	80100aa <create_chain+0x166>
 80100a0:	4628      	mov	r0, r5
 80100a2:	f7ff f9cf 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d1ae      	bne.n	8010008 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80100aa:	0063      	lsls	r3, r4, #1
 80100ac:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80100b0:	441d      	add	r5, r3
 80100b2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 80100b4:	e79e      	b.n	800fff4 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 80100b6:	2400      	movs	r4, #0
}
 80100b8:	4620      	mov	r0, r4
 80100ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80100be:	4648      	mov	r0, r9
 80100c0:	f7ff fc0c 	bl	800f8dc <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80100c4:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80100c6:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80100c8:	f67f af60 	bls.w	800ff8c <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80100cc:	1c41      	adds	r1, r0, #1
 80100ce:	d09b      	beq.n	8010008 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80100d0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80100d4:	4283      	cmp	r3, r0
 80100d6:	f63f af5a 	bhi.w	800ff8e <create_chain+0x4a>
 80100da:	4646      	mov	r6, r8
 80100dc:	e741      	b.n	800ff62 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80100de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100e2:	e787      	b.n	800fff4 <create_chain+0xb0>

080100e4 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80100e8:	d274      	bcs.n	80101d4 <dir_sdi+0xf0>
 80100ea:	06ca      	lsls	r2, r1, #27
{
 80100ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100f2:	d151      	bne.n	8010198 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100f4:	6885      	ldr	r5, [r0, #8]
 80100f6:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 80100f8:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 80100fc:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100fe:	2d00      	cmp	r5, #0
 8010100:	d04d      	beq.n	801019e <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010102:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010106:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801010a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 801010e:	f0c0 808e 	bcc.w	801022e <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010112:	2d01      	cmp	r5, #1
 8010114:	d040      	beq.n	8010198 <dir_sdi+0xb4>
 8010116:	4647      	mov	r7, r8
 8010118:	e03b      	b.n	8010192 <dir_sdi+0xae>
		switch (fs->fs_type) {
 801011a:	783b      	ldrb	r3, [r7, #0]
 801011c:	2b02      	cmp	r3, #2
 801011e:	d073      	beq.n	8010208 <dir_sdi+0x124>
 8010120:	2b03      	cmp	r3, #3
 8010122:	d05f      	beq.n	80101e4 <dir_sdi+0x100>
 8010124:	2b01      	cmp	r3, #1
 8010126:	d137      	bne.n	8010198 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8010128:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801012e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010130:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010134:	4291      	cmp	r1, r2
 8010136:	d006      	beq.n	8010146 <dir_sdi+0x62>
 8010138:	4638      	mov	r0, r7
 801013a:	f7ff f983 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801013e:	2800      	cmp	r0, #0
 8010140:	d172      	bne.n	8010228 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8010146:	f10a 0b01 	add.w	fp, sl, #1
 801014a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801014e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8010152:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010154:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8010156:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801015a:	d004      	beq.n	8010166 <dir_sdi+0x82>
 801015c:	4638      	mov	r0, r7
 801015e:	f7ff f971 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010162:	2800      	cmp	r0, #0
 8010164:	d160      	bne.n	8010228 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010166:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 801016a:	445f      	add	r7, fp
 801016c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010170:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010174:	07eb      	lsls	r3, r5, #31
 8010176:	d568      	bpl.n	801024a <dir_sdi+0x166>
 8010178:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801017c:	2d01      	cmp	r5, #1
 801017e:	d90b      	bls.n	8010198 <dir_sdi+0xb4>
 8010180:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010184:	42ab      	cmp	r3, r5
 8010186:	d907      	bls.n	8010198 <dir_sdi+0xb4>
			ofs -= csz;
 8010188:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 801018c:	45a1      	cmp	r9, r4
 801018e:	d850      	bhi.n	8010232 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010190:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	42ab      	cmp	r3, r5
 8010196:	d8c0      	bhi.n	801011a <dir_sdi+0x36>
		switch (fs->fs_type) {
 8010198:	2002      	movs	r0, #2
}
 801019a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801019e:	f898 3000 	ldrb.w	r3, [r8]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d818      	bhi.n	80101d8 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80101a6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80101aa:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80101ae:	d9f3      	bls.n	8010198 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 80101b0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 80101b4:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80101b6:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80101b8:	2a00      	cmp	r2, #0
 80101ba:	d0ed      	beq.n	8010198 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80101bc:	f108 0834 	add.w	r8, r8, #52	; 0x34
 80101c0:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80101c4:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 80101c8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80101ca:	4443      	add	r3, r8
 80101cc:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 80101d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 80101d4:	2002      	movs	r0, #2
}
 80101d6:	4770      	bx	lr
		clst = fs->dirbase;
 80101d8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d0e2      	beq.n	80101a6 <dir_sdi+0xc2>
 80101e0:	461d      	mov	r5, r3
 80101e2:	e78e      	b.n	8010102 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80101e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101e8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d003      	beq.n	80101f8 <dir_sdi+0x114>
 80101f0:	4638      	mov	r0, r7
 80101f2:	f7ff f927 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101f6:	b9b8      	cbnz	r0, 8010228 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101f8:	00ad      	lsls	r5, r5, #2
 80101fa:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80101fe:	442f      	add	r7, r5
 8010200:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010202:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8010206:	e7b9      	b.n	801017c <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010208:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801020c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010210:	4299      	cmp	r1, r3
 8010212:	d003      	beq.n	801021c <dir_sdi+0x138>
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff f915 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801021a:	b928      	cbnz	r0, 8010228 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801021c:	006d      	lsls	r5, r5, #1
 801021e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8010222:	442f      	add	r7, r5
 8010224:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8010226:	e7a9      	b.n	801017c <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010228:	2001      	movs	r0, #1
}
 801022a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801022e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010232:	3b02      	subs	r3, #2
	clst -= 2;
 8010234:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010236:	4299      	cmp	r1, r3
 8010238:	d20a      	bcs.n	8010250 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 801023a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801023e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8010242:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8010246:	61f2      	str	r2, [r6, #28]
 8010248:	e7b5      	b.n	80101b6 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801024a:	f3ca 050b 	ubfx	r5, sl, #0, #12
 801024e:	e795      	b.n	801017c <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8010250:	2300      	movs	r3, #0
 8010252:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010256:	e79f      	b.n	8010198 <dir_sdi+0xb4>

08010258 <dir_find>:
{
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801025c:	2100      	movs	r1, #0
{
 801025e:	b085      	sub	sp, #20
 8010260:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8010262:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010266:	f7ff ff3d 	bl	80100e4 <dir_sdi>
	if (res != FR_OK) return res;
 801026a:	4607      	mov	r7, r0
 801026c:	b9e8      	cbnz	r0, 80102aa <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801026e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 8010276:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010278:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801027a:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801027c:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8010280:	42b5      	cmp	r5, r6
 8010282:	d018      	beq.n	80102b6 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010284:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010288:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801028c:	2b00      	cmp	r3, #0
 801028e:	f040 8088 	bne.w	80103a2 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010292:	2301      	movs	r3, #1
 8010294:	4632      	mov	r2, r6
 8010296:	f898 0001 	ldrb.w	r0, [r8, #1]
 801029a:	f7fe ff25 	bl	800f0e8 <disk_read>
 801029e:	b140      	cbz	r0, 80102b2 <dir_find+0x5a>
			fs->winsect = sector;
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80102a4:	2701      	movs	r7, #1
			fs->winsect = sector;
 80102a6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 80102aa:	4638      	mov	r0, r7
 80102ac:	b005      	add	sp, #20
 80102ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80102b2:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80102b6:	6a26      	ldr	r6, [r4, #32]
 80102b8:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80102ba:	b34d      	cbz	r5, 8010310 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80102bc:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80102be:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80102c0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80102c4:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80102c6:	d004      	beq.n	80102d2 <dir_find+0x7a>
 80102c8:	0717      	lsls	r7, r2, #28
 80102ca:	d526      	bpl.n	801031a <dir_find+0xc2>
 80102cc:	2b0f      	cmp	r3, #15
 80102ce:	f000 8094 	beq.w	80103fa <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80102d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102d6:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80102da:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80102dc:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80102de:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80102e0:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80102e2:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80102e6:	d213      	bcs.n	8010310 <dir_find+0xb8>
 80102e8:	b196      	cbz	r6, 8010310 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80102ea:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80102ee:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80102f0:	b94b      	cbnz	r3, 8010306 <dir_find+0xae>
		dp->sect++;				/* Next sector */
 80102f2:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 80102f4:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80102f6:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80102f8:	2900      	cmp	r1, #0
 80102fa:	d15e      	bne.n	80103ba <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80102fc:	893a      	ldrh	r2, [r7, #8]
 80102fe:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8010302:	f240 8134 	bls.w	801056e <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010306:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8010308:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801030a:	443b      	add	r3, r7
 801030c:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 801030e:	e7b5      	b.n	801027c <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010310:	2704      	movs	r7, #4
}
 8010312:	4638      	mov	r0, r7
 8010314:	b005      	add	sp, #20
 8010316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 801031a:	2b0f      	cmp	r3, #15
 801031c:	d06d      	beq.n	80103fa <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801031e:	f1ba 0f00 	cmp.w	sl, #0
 8010322:	f000 80d6 	beq.w	80104d2 <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010326:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 801032a:	f01a 0a01 	ands.w	sl, sl, #1
 801032e:	d1d0      	bne.n	80102d2 <dir_find+0x7a>
	} while (--cnt && r == 0);
 8010330:	7832      	ldrb	r2, [r6, #0]
 8010332:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8010336:	429a      	cmp	r2, r3
 8010338:	d1cb      	bne.n	80102d2 <dir_find+0x7a>
 801033a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801033e:	7873      	ldrb	r3, [r6, #1]
 8010340:	429a      	cmp	r2, r3
 8010342:	d1c6      	bne.n	80102d2 <dir_find+0x7a>
 8010344:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010348:	78b3      	ldrb	r3, [r6, #2]
 801034a:	429a      	cmp	r2, r3
 801034c:	d1c1      	bne.n	80102d2 <dir_find+0x7a>
 801034e:	78f2      	ldrb	r2, [r6, #3]
 8010350:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8010354:	429a      	cmp	r2, r3
 8010356:	d1bc      	bne.n	80102d2 <dir_find+0x7a>
 8010358:	7932      	ldrb	r2, [r6, #4]
 801035a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801035e:	429a      	cmp	r2, r3
 8010360:	d1b7      	bne.n	80102d2 <dir_find+0x7a>
 8010362:	7972      	ldrb	r2, [r6, #5]
 8010364:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8010368:	429a      	cmp	r2, r3
 801036a:	d1b2      	bne.n	80102d2 <dir_find+0x7a>
 801036c:	79b2      	ldrb	r2, [r6, #6]
 801036e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010372:	429a      	cmp	r2, r3
 8010374:	d1ad      	bne.n	80102d2 <dir_find+0x7a>
 8010376:	79f2      	ldrb	r2, [r6, #7]
 8010378:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801037c:	429a      	cmp	r2, r3
 801037e:	d1a8      	bne.n	80102d2 <dir_find+0x7a>
 8010380:	7a32      	ldrb	r2, [r6, #8]
 8010382:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010386:	429a      	cmp	r2, r3
 8010388:	d1a3      	bne.n	80102d2 <dir_find+0x7a>
 801038a:	7a72      	ldrb	r2, [r6, #9]
 801038c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010390:	429a      	cmp	r2, r3
 8010392:	d19e      	bne.n	80102d2 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010394:	7ab2      	ldrb	r2, [r6, #10]
 8010396:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801039a:	429a      	cmp	r2, r3
 801039c:	d199      	bne.n	80102d2 <dir_find+0x7a>
 801039e:	4657      	mov	r7, sl
 80103a0:	e783      	b.n	80102aa <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80103a2:	2301      	movs	r3, #1
 80103a4:	462a      	mov	r2, r5
 80103a6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80103aa:	9100      	str	r1, [sp, #0]
 80103ac:	f7fe feaa 	bl	800f104 <disk_write>
 80103b0:	9900      	ldr	r1, [sp, #0]
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d06d      	beq.n	8010492 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80103b6:	2701      	movs	r7, #1
 80103b8:	e777      	b.n	80102aa <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80103ba:	897a      	ldrh	r2, [r7, #10]
 80103bc:	3a01      	subs	r2, #1
 80103be:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 80103c2:	d1a0      	bne.n	8010306 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80103c4:	4638      	mov	r0, r7
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	f7ff fa88 	bl	800f8dc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80103cc:	2801      	cmp	r0, #1
 80103ce:	f240 80d2 	bls.w	8010576 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80103d2:	1c43      	adds	r3, r0, #1
 80103d4:	d0ef      	beq.n	80103b6 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80103d6:	69ba      	ldr	r2, [r7, #24]
 80103d8:	4290      	cmp	r0, r2
 80103da:	f080 80c8 	bcs.w	801056e <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
 80103de:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80103e0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80103e2:	69ba      	ldr	r2, [r7, #24]
 80103e4:	9b00      	ldr	r3, [sp, #0]
 80103e6:	3a02      	subs	r2, #2
 80103e8:	4290      	cmp	r0, r2
 80103ea:	f080 80c6 	bcs.w	801057a <dir_find+0x322>
	return clst * fs->csize + fs->database;
 80103ee:	897a      	ldrh	r2, [r7, #10]
 80103f0:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80103f2:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 80103f6:	61e6      	str	r6, [r4, #28]
 80103f8:	e785      	b.n	8010306 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80103fa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80103fe:	0658      	lsls	r0, r3, #25
 8010400:	f53f af6c 	bmi.w	80102dc <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010404:	0669      	lsls	r1, r5, #25
 8010406:	d53f      	bpl.n	8010488 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010408:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801040a:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 801040e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010412:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010414:	7b73      	ldrb	r3, [r6, #13]
 8010416:	454b      	cmp	r3, r9
 8010418:	d138      	bne.n	801048c <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801041a:	8b73      	ldrh	r3, [r6, #26]
 801041c:	bbb3      	cbnz	r3, 801048c <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801041e:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010420:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010422:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010426:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 801042a:	f8df a178 	ldr.w	sl, [pc, #376]	; 80105a4 <dir_find+0x34c>
 801042e:	9502      	str	r5, [sp, #8]
 8010430:	4615      	mov	r5, r2
 8010432:	3f01      	subs	r7, #1
 8010434:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010438:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801043a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801043e:	f8cd 8000 	str.w	r8, [sp]
 8010442:	9401      	str	r4, [sp, #4]
 8010444:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010448:	e010      	b.n	801046c <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801044a:	2ffe      	cmp	r7, #254	; 0xfe
 801044c:	4620      	mov	r0, r4
 801044e:	d816      	bhi.n	801047e <dir_find+0x226>
 8010450:	f001 fecc 	bl	80121ec <ff_wtoupper>
 8010454:	4680      	mov	r8, r0
 8010456:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 801045a:	3701      	adds	r7, #1
 801045c:	f001 fec6 	bl	80121ec <ff_wtoupper>
 8010460:	4580      	cmp	r8, r0
 8010462:	4621      	mov	r1, r4
 8010464:	d10b      	bne.n	801047e <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010466:	45d3      	cmp	fp, sl
 8010468:	f000 8089 	beq.w	801057e <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801046c:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8010470:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 8010472:	2900      	cmp	r1, #0
 8010474:	d1e9      	bne.n	801044a <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801047a:	429c      	cmp	r4, r3
 801047c:	d0f3      	beq.n	8010466 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801047e:	e9dd 8400 	ldrd	r8, r4, [sp]
 8010482:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8010486:	e729      	b.n	80102dc <dir_find+0x84>
 8010488:	45aa      	cmp	sl, r5
 801048a:	d0c3      	beq.n	8010414 <dir_find+0x1bc>
 801048c:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8010490:	e724      	b.n	80102dc <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010492:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8010496:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801049a:	1aea      	subs	r2, r5, r3
 801049c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	f4bf aef6 	bcs.w	8010292 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104a6:	f898 7002 	ldrb.w	r7, [r8, #2]
 80104aa:	2f01      	cmp	r7, #1
 80104ac:	f67f aef1 	bls.w	8010292 <dir_find+0x3a>
 80104b0:	468b      	mov	fp, r1
 80104b2:	e001      	b.n	80104b8 <dir_find+0x260>
					wsect += fs->fsize;
 80104b4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80104b8:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104ba:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80104bc:	2301      	movs	r3, #1
 80104be:	4659      	mov	r1, fp
 80104c0:	462a      	mov	r2, r5
 80104c2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80104c6:	f7fe fe1d 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104ca:	2f01      	cmp	r7, #1
 80104cc:	d1f2      	bne.n	80104b4 <dir_find+0x25c>
 80104ce:	4659      	mov	r1, fp
 80104d0:	e6df      	b.n	8010292 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80104d2:	7830      	ldrb	r0, [r6, #0]
 80104d4:	7872      	ldrb	r2, [r6, #1]
 80104d6:	01c1      	lsls	r1, r0, #7
 80104d8:	78b3      	ldrb	r3, [r6, #2]
 80104da:	f896 b003 	ldrb.w	fp, [r6, #3]
 80104de:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 80104e2:	7937      	ldrb	r7, [r6, #4]
 80104e4:	f896 e005 	ldrb.w	lr, [r6, #5]
 80104e8:	4411      	add	r1, r2
 80104ea:	f896 c006 	ldrb.w	ip, [r6, #6]
 80104ee:	7a32      	ldrb	r2, [r6, #8]
 80104f0:	f3c1 0046 	ubfx	r0, r1, #1, #7
 80104f4:	7a75      	ldrb	r5, [r6, #9]
 80104f6:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 80104fa:	fa53 f180 	uxtab	r1, r3, r0
 80104fe:	79f3      	ldrb	r3, [r6, #7]
 8010500:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8010504:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8010508:	7ab1      	ldrb	r1, [r6, #10]
 801050a:	fa5b fb80 	uxtab	fp, fp, r0
 801050e:	f3cb 0046 	ubfx	r0, fp, #1, #7
 8010512:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 8010516:	fa57 f780 	uxtab	r7, r7, r0
 801051a:	f3c7 0046 	ubfx	r0, r7, #1, #7
 801051e:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 8010522:	fa5e f080 	uxtab	r0, lr, r0
 8010526:	f3c0 0746 	ubfx	r7, r0, #1, #7
 801052a:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 801052e:	fa5c f780 	uxtab	r7, ip, r0
 8010532:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8010536:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 801053a:	fa53 f080 	uxtab	r0, r3, r0
 801053e:	f3c0 0346 	ubfx	r3, r0, #1, #7
 8010542:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8010546:	fa52 f383 	uxtab	r3, r2, r3
 801054a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801054e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8010552:	fa55 f283 	uxtab	r2, r5, r3
 8010556:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801055a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801055e:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010562:	b2db      	uxtb	r3, r3
 8010564:	4599      	cmp	r9, r3
 8010566:	f47f aede 	bne.w	8010326 <dir_find+0xce>
 801056a:	4657      	mov	r7, sl
 801056c:	e69d      	b.n	80102aa <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 801056e:	2300      	movs	r3, #0
 8010570:	2704      	movs	r7, #4
 8010572:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8010574:	e699      	b.n	80102aa <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010576:	2702      	movs	r7, #2
 8010578:	e697      	b.n	80102aa <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801057a:	461e      	mov	r6, r3
 801057c:	e73b      	b.n	80103f6 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801057e:	7833      	ldrb	r3, [r6, #0]
 8010580:	f8dd 8000 	ldr.w	r8, [sp]
 8010584:	065a      	lsls	r2, r3, #25
 8010586:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 801058a:	d500      	bpl.n	801058e <dir_find+0x336>
 801058c:	b919      	cbnz	r1, 8010596 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801058e:	3d01      	subs	r5, #1
 8010590:	fa5f fa85 	uxtb.w	sl, r5
 8010594:	e6a2      	b.n	80102dc <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d0f6      	beq.n	801058e <dir_find+0x336>
 80105a0:	e774      	b.n	801048c <dir_find+0x234>
 80105a2:	bf00      	nop
 80105a4:	0801b854 	.word	0x0801b854

080105a8 <follow_path>:
{
 80105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80105ac:	780b      	ldrb	r3, [r1, #0]
{
 80105ae:	b083      	sub	sp, #12
 80105b0:	4688      	mov	r8, r1
 80105b2:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80105b4:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 80105b6:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80105ba:	d103      	bne.n	80105c4 <follow_path+0x1c>
 80105bc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80105c0:	2b2f      	cmp	r3, #47	; 0x2f
 80105c2:	d0fb      	beq.n	80105bc <follow_path+0x14>
 80105c4:	2b5c      	cmp	r3, #92	; 0x5c
 80105c6:	d0f9      	beq.n	80105bc <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 80105c8:	2100      	movs	r1, #0
 80105ca:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80105cc:	f898 3000 	ldrb.w	r3, [r8]
 80105d0:	2b1f      	cmp	r3, #31
 80105d2:	f240 8148 	bls.w	8010866 <follow_path+0x2be>
 80105d6:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 80105d8:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80105da:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 80105dc:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 80105de:	d929      	bls.n	8010634 <follow_path+0x8c>
 80105e0:	f1a5 0902 	sub.w	r9, r5, #2
 80105e4:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 80105e6:	2401      	movs	r4, #1
 80105e8:	e008      	b.n	80105fc <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 80105ea:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 80105ee:	1c63      	adds	r3, r4, #1
 80105f0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80105f4:	281f      	cmp	r0, #31
 80105f6:	f240 80f7 	bls.w	80107e8 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 80105fa:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80105fc:	282f      	cmp	r0, #47	; 0x2f
 80105fe:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8010602:	d01d      	beq.n	8010640 <follow_path+0x98>
 8010604:	285c      	cmp	r0, #92	; 0x5c
 8010606:	d01b      	beq.n	8010640 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010608:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801060c:	d00e      	beq.n	801062c <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801060e:	2101      	movs	r1, #1
 8010610:	f001 fdce 	bl	80121b0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010614:	b150      	cbz	r0, 801062c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010616:	287f      	cmp	r0, #127	; 0x7f
 8010618:	d8e7      	bhi.n	80105ea <follow_path+0x42>
	while (*str && *str != chr) str++;
 801061a:	2322      	movs	r3, #34	; 0x22
 801061c:	4aa5      	ldr	r2, [pc, #660]	; (80108b4 <follow_path+0x30c>)
 801061e:	e003      	b.n	8010628 <follow_path+0x80>
 8010620:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010624:	2b00      	cmp	r3, #0
 8010626:	d0e0      	beq.n	80105ea <follow_path+0x42>
 8010628:	4298      	cmp	r0, r3
 801062a:	d1f9      	bne.n	8010620 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801062c:	2006      	movs	r0, #6
}
 801062e:	b003      	add	sp, #12
 8010630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8010634:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010636:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8010638:	802b      	strh	r3, [r5, #0]
}
 801063a:	b003      	add	sp, #12
 801063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010640:	f818 3004 	ldrb.w	r3, [r8, r4]
 8010644:	eb08 0204 	add.w	r2, r8, r4
 8010648:	2b5c      	cmp	r3, #92	; 0x5c
 801064a:	d002      	beq.n	8010652 <follow_path+0xaa>
 801064c:	2b2f      	cmp	r3, #47	; 0x2f
 801064e:	f040 811f 	bne.w	8010890 <follow_path+0x2e8>
 8010652:	1c63      	adds	r3, r4, #1
 8010654:	4443      	add	r3, r8
 8010656:	4698      	mov	r8, r3
 8010658:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065c:	2a2f      	cmp	r2, #47	; 0x2f
 801065e:	d0fa      	beq.n	8010656 <follow_path+0xae>
 8010660:	2a5c      	cmp	r2, #92	; 0x5c
 8010662:	d0f8      	beq.n	8010656 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010664:	f1ba 0f00 	cmp.w	sl, #0
 8010668:	d0e4      	beq.n	8010634 <follow_path+0x8c>
 801066a:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801066c:	2400      	movs	r4, #0
 801066e:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 8010672:	e002      	b.n	801067a <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010674:	f1ba 0a01 	subs.w	sl, sl, #1
 8010678:	d0dc      	beq.n	8010634 <follow_path+0x8c>
		w = lfn[di - 1];
 801067a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801067e:	2b20      	cmp	r3, #32
 8010680:	d0f8      	beq.n	8010674 <follow_path+0xcc>
 8010682:	2b2e      	cmp	r3, #46	; 0x2e
 8010684:	d0f6      	beq.n	8010674 <follow_path+0xcc>
		*d++ = (BYTE)val;
 8010686:	2320      	movs	r3, #32
 8010688:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 801068c:	2100      	movs	r1, #0
 801068e:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 8010692:	627a      	str	r2, [r7, #36]	; 0x24
 8010694:	62ba      	str	r2, [r7, #40]	; 0x28
 8010696:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801069a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801069e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80106a2:	8828      	ldrh	r0, [r5, #0]
 80106a4:	282e      	cmp	r0, #46	; 0x2e
 80106a6:	d002      	beq.n	80106ae <follow_path+0x106>
 80106a8:	4298      	cmp	r0, r3
 80106aa:	f040 80e5 	bne.w	8010878 <follow_path+0x2d0>
 80106ae:	462a      	mov	r2, r5
 80106b0:	2300      	movs	r3, #0
 80106b2:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80106b6:	461c      	mov	r4, r3
 80106b8:	3301      	adds	r3, #1
 80106ba:	2820      	cmp	r0, #32
 80106bc:	d0f9      	beq.n	80106b2 <follow_path+0x10a>
 80106be:	282e      	cmp	r0, #46	; 0x2e
 80106c0:	d0f7      	beq.n	80106b2 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 80106c2:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80106c4:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 80106c8:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80106cc:	2a2e      	cmp	r2, #46	; 0x2e
 80106ce:	d002      	beq.n	80106d6 <follow_path+0x12e>
 80106d0:	f1ba 0a01 	subs.w	sl, sl, #1
 80106d4:	d1f8      	bne.n	80106c8 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 80106d6:	b3b0      	cbz	r0, 8010746 <follow_path+0x19e>
 80106d8:	2208      	movs	r2, #8
 80106da:	4641      	mov	r1, r8
 80106dc:	2300      	movs	r3, #0
 80106de:	46b8      	mov	r8, r7
 80106e0:	462f      	mov	r7, r5
 80106e2:	4615      	mov	r5, r2
 80106e4:	4699      	mov	r9, r3
 80106e6:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80106e8:	2820      	cmp	r0, #32
 80106ea:	d003      	beq.n	80106f4 <follow_path+0x14c>
 80106ec:	282e      	cmp	r0, #46	; 0x2e
 80106ee:	d14d      	bne.n	801078c <follow_path+0x1e4>
 80106f0:	45a2      	cmp	sl, r4
 80106f2:	d04b      	beq.n	801078c <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 80106f4:	f046 0603 	orr.w	r6, r6, #3
 80106f8:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 80106fa:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 80106fe:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8010700:	2800      	cmp	r0, #0
 8010702:	d1f1      	bne.n	80106e8 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010704:	4647      	mov	r7, r8
 8010706:	4690      	mov	r8, r2
 8010708:	462a      	mov	r2, r5
 801070a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 801070e:	29e5      	cmp	r1, #229	; 0xe5
 8010710:	d102      	bne.n	8010718 <follow_path+0x170>
 8010712:	2105      	movs	r1, #5
 8010714:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8010718:	2a08      	cmp	r2, #8
 801071a:	f000 8093 	beq.w	8010844 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801071e:	f003 020c 	and.w	r2, r3, #12
 8010722:	2a0c      	cmp	r2, #12
 8010724:	d065      	beq.n	80107f2 <follow_path+0x24a>
 8010726:	f003 0303 	and.w	r3, r3, #3
 801072a:	2b03      	cmp	r3, #3
 801072c:	d061      	beq.n	80107f2 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801072e:	07b1      	lsls	r1, r6, #30
 8010730:	d409      	bmi.n	8010746 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010732:	2b01      	cmp	r3, #1
 8010734:	d102      	bne.n	801073c <follow_path+0x194>
 8010736:	f046 0610 	orr.w	r6, r6, #16
 801073a:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801073c:	2a04      	cmp	r2, #4
 801073e:	d102      	bne.n	8010746 <follow_path+0x19e>
 8010740:	f046 0608 	orr.w	r6, r6, #8
 8010744:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8010746:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010748:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801074c:	f7ff fd84 	bl	8010258 <dir_find>
			ns = dp->fn[NSFLAG];
 8010750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8010754:	2800      	cmp	r0, #0
 8010756:	d158      	bne.n	801080a <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010758:	075a      	lsls	r2, r3, #29
 801075a:	f53f af68 	bmi.w	801062e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801075e:	79bb      	ldrb	r3, [r7, #6]
 8010760:	06db      	lsls	r3, r3, #27
 8010762:	f140 8097 	bpl.w	8010894 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 801076c:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010770:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8010774:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010776:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8010778:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801077a:	d102      	bne.n	8010782 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801077c:	8a9b      	ldrh	r3, [r3, #20]
 801077e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010782:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010784:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8010786:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801078a:	e725      	b.n	80105d8 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801078c:	454d      	cmp	r5, r9
 801078e:	d91c      	bls.n	80107ca <follow_path+0x222>
 8010790:	ebaa 0104 	sub.w	r1, sl, r4
 8010794:	fab1 f181 	clz	r1, r1
 8010798:	0949      	lsrs	r1, r1, #5
 801079a:	b9b1      	cbnz	r1, 80107ca <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 801079c:	287f      	cmp	r0, #127	; 0x7f
 801079e:	d83c      	bhi.n	801081a <follow_path+0x272>
	while (*str && *str != chr) str++;
 80107a0:	212b      	movs	r1, #43	; 0x2b
 80107a2:	f8df c118 	ldr.w	ip, [pc, #280]	; 80108bc <follow_path+0x314>
 80107a6:	e003      	b.n	80107b0 <follow_path+0x208>
 80107a8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80107ac:	2900      	cmp	r1, #0
 80107ae:	d052      	beq.n	8010856 <follow_path+0x2ae>
 80107b0:	4281      	cmp	r1, r0
 80107b2:	d1f9      	bne.n	80107a8 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80107b4:	f046 0603 	orr.w	r6, r6, #3
 80107b8:	205f      	movs	r0, #95	; 0x5f
 80107ba:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 80107bc:	eb08 0109 	add.w	r1, r8, r9
 80107c0:	f109 0901 	add.w	r9, r9, #1
 80107c4:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80107c8:	e797      	b.n	80106fa <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 80107ca:	2d0b      	cmp	r5, #11
 80107cc:	d064      	beq.n	8010898 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80107ce:	45a2      	cmp	sl, r4
 80107d0:	d003      	beq.n	80107da <follow_path+0x232>
 80107d2:	f046 0603 	orr.w	r6, r6, #3
 80107d6:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 80107d8:	d394      	bcc.n	8010704 <follow_path+0x15c>
			b <<= 2; continue;
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80107de:	250b      	movs	r5, #11
 80107e0:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	e788      	b.n	80106fa <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 80107e8:	46a2      	mov	sl, r4
 80107ea:	4498      	add	r8, r3
 80107ec:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80107ee:	2404      	movs	r4, #4
 80107f0:	e73d      	b.n	801066e <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80107f2:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 80107f6:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80107f8:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80107fa:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80107fe:	f7ff fd2b 	bl	8010258 <dir_find>
			ns = dp->fn[NSFLAG];
 8010802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8010806:	2800      	cmp	r0, #0
 8010808:	d0a6      	beq.n	8010758 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801080a:	2804      	cmp	r0, #4
 801080c:	f47f af0f 	bne.w	801062e <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010810:	f013 0f04 	tst.w	r3, #4
 8010814:	bf08      	it	eq
 8010816:	2005      	moveq	r0, #5
 8010818:	e709      	b.n	801062e <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801081a:	e9cd 3200 	strd	r3, r2, [sp]
 801081e:	f001 fcc7 	bl	80121b0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010822:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010826:	b918      	cbnz	r0, 8010830 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 8010828:	f046 0602 	orr.w	r6, r6, #2
 801082c:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801082e:	e7c1      	b.n	80107b4 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010830:	4921      	ldr	r1, [pc, #132]	; (80108b8 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8010832:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010836:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8010838:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801083a:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801083e:	2800      	cmp	r0, #0
 8010840:	d0b8      	beq.n	80107b4 <follow_path+0x20c>
 8010842:	e7ad      	b.n	80107a0 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801084a:	2a0c      	cmp	r2, #12
 801084c:	d0d1      	beq.n	80107f2 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801084e:	07b0      	lsls	r0, r6, #30
 8010850:	f57f af74 	bpl.w	801073c <follow_path+0x194>
 8010854:	e777      	b.n	8010746 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8010856:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 801085a:	2919      	cmp	r1, #25
 801085c:	d80f      	bhi.n	801087e <follow_path+0x2d6>
					b |= 2;
 801085e:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 8010862:	b2c0      	uxtb	r0, r0
 8010864:	e7aa      	b.n	80107bc <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 8010866:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8010868:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 801086a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 801086e:	b003      	add	sp, #12
 8010870:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8010874:	f7ff bc36 	b.w	80100e4 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010878:	4626      	mov	r6, r4
 801087a:	2401      	movs	r4, #1
 801087c:	e722      	b.n	80106c4 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 801087e:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8010882:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8010884:	bf9c      	itt	ls
 8010886:	3820      	subls	r0, #32
 8010888:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 801088c:	b2c0      	uxtb	r0, r0
 801088e:	e795      	b.n	80107bc <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010890:	4690      	mov	r8, r2
 8010892:	e6e7      	b.n	8010664 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010894:	2005      	movs	r0, #5
 8010896:	e6ca      	b.n	801062e <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8010898:	4647      	mov	r7, r8
 801089a:	4690      	mov	r8, r2
 801089c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80108a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 80108a4:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80108a6:	2ae5      	cmp	r2, #229	; 0xe5
 80108a8:	f47f af39 	bne.w	801071e <follow_path+0x176>
 80108ac:	2205      	movs	r2, #5
 80108ae:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80108b2:	e734      	b.n	801071e <follow_path+0x176>
 80108b4:	0801b7c0 	.word	0x0801b7c0
 80108b8:	0801b7d4 	.word	0x0801b7d4
 80108bc:	0801b7cc 	.word	0x0801b7cc

080108c0 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80108c0:	2901      	cmp	r1, #1
{
 80108c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c6:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80108c8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80108ca:	d90f      	bls.n	80108ec <remove_chain+0x2c>
 80108cc:	69ab      	ldr	r3, [r5, #24]
 80108ce:	428b      	cmp	r3, r1
 80108d0:	d90c      	bls.n	80108ec <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80108d2:	4606      	mov	r6, r0
 80108d4:	4611      	mov	r1, r2
 80108d6:	b962      	cbnz	r2, 80108f2 <remove_chain+0x32>
 80108d8:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80108da:	429c      	cmp	r4, r3
 80108dc:	d206      	bcs.n	80108ec <remove_chain+0x2c>
		switch (fs->fs_type) {
 80108de:	783b      	ldrb	r3, [r7, #0]
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	d072      	beq.n	80109ca <remove_chain+0x10a>
 80108e4:	2b03      	cmp	r3, #3
 80108e6:	d05d      	beq.n	80109a4 <remove_chain+0xe4>
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d010      	beq.n	801090e <remove_chain+0x4e>
 80108ec:	2002      	movs	r0, #2
}
 80108ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d9fa      	bls.n	80108ec <remove_chain+0x2c>
 80108f6:	2a01      	cmp	r2, #1
 80108f8:	d0f8      	beq.n	80108ec <remove_chain+0x2c>
 80108fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108fe:	4628      	mov	r0, r5
 8010900:	f7fe ff52 	bl	800f7a8 <put_fat.part.0>
		if (res != FR_OK) return res;
 8010904:	2800      	cmp	r0, #0
 8010906:	d1f2      	bne.n	80108ee <remove_chain+0x2e>
 8010908:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	e7e5      	b.n	80108da <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 801090e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010916:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801091a:	4291      	cmp	r1, r2
 801091c:	d006      	beq.n	801092c <remove_chain+0x6c>
 801091e:	4638      	mov	r0, r7
 8010920:	f7fe fd90 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010924:	2800      	cmp	r0, #0
 8010926:	d161      	bne.n	80109ec <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801092a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801092c:	f108 0901 	add.w	r9, r8, #1
 8010930:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010934:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8010938:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801093a:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801093c:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010940:	d004      	beq.n	801094c <remove_chain+0x8c>
 8010942:	4638      	mov	r0, r7
 8010944:	f7fe fd7e 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010948:	2800      	cmp	r0, #0
 801094a:	d14f      	bne.n	80109ec <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801094c:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8010950:	444f      	add	r7, r9
 8010952:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010956:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801095a:	07e3      	lsls	r3, r4, #31
 801095c:	d548      	bpl.n	80109f0 <remove_chain+0x130>
 801095e:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 8010962:	f1b8 0f00 	cmp.w	r8, #0
 8010966:	d046      	beq.n	80109f6 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010968:	f1b8 0f01 	cmp.w	r8, #1
 801096c:	d0be      	beq.n	80108ec <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801096e:	69ab      	ldr	r3, [r5, #24]
 8010970:	42a3      	cmp	r3, r4
 8010972:	d9bb      	bls.n	80108ec <remove_chain+0x2c>
 8010974:	2200      	movs	r2, #0
 8010976:	4621      	mov	r1, r4
 8010978:	4628      	mov	r0, r5
 801097a:	f7fe ff15 	bl	800f7a8 <put_fat.part.0>
			if (res != FR_OK) return res;
 801097e:	2800      	cmp	r0, #0
 8010980:	d1b5      	bne.n	80108ee <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010982:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8010986:	1e91      	subs	r1, r2, #2
 8010988:	428b      	cmp	r3, r1
 801098a:	d205      	bcs.n	8010998 <remove_chain+0xd8>
			fs->free_clst++;
 801098c:	3301      	adds	r3, #1
 801098e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8010990:	792b      	ldrb	r3, [r5, #4]
 8010992:	f043 0301 	orr.w	r3, r3, #1
 8010996:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010998:	4542      	cmp	r2, r8
 801099a:	d92c      	bls.n	80109f6 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801099c:	6837      	ldr	r7, [r6, #0]
 801099e:	4644      	mov	r4, r8
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	e79a      	b.n	80108da <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80109a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80109a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80109ac:	4299      	cmp	r1, r3
 80109ae:	d003      	beq.n	80109b8 <remove_chain+0xf8>
 80109b0:	4638      	mov	r0, r7
 80109b2:	f7fe fd47 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80109b6:	b9c8      	cbnz	r0, 80109ec <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80109b8:	00a3      	lsls	r3, r4, #2
 80109ba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80109be:	441f      	add	r7, r3
 80109c0:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80109c4:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 80109c8:	e7cb      	b.n	8010962 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80109ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80109ce:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80109d2:	4299      	cmp	r1, r3
 80109d4:	d003      	beq.n	80109de <remove_chain+0x11e>
 80109d6:	4638      	mov	r0, r7
 80109d8:	f7fe fd34 	bl	800f444 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80109dc:	b930      	cbnz	r0, 80109ec <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80109de:	0063      	lsls	r3, r4, #1
 80109e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80109e4:	441f      	add	r7, r3
 80109e6:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 80109ea:	e7ba      	b.n	8010962 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80109ec:	2001      	movs	r0, #1
 80109ee:	e77e      	b.n	80108ee <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80109f0:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80109f4:	e7b5      	b.n	8010962 <remove_chain+0xa2>
	return FR_OK;
 80109f6:	2000      	movs	r0, #0
 80109f8:	e779      	b.n	80108ee <remove_chain+0x2e>
 80109fa:	bf00      	nop

080109fc <dir_alloc>:
{
 80109fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a00:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 8010a02:	2100      	movs	r1, #0
{
 8010a04:	4681      	mov	r9, r0
 8010a06:	ed2d 8b02 	vpush	{d8}
 8010a0a:	b089      	sub	sp, #36	; 0x24
	FATFS *fs = dp->obj.fs;
 8010a0c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8010a10:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8010a12:	f7ff fb67 	bl	80100e4 <dir_sdi>
	if (res == FR_OK) {
 8010a16:	9002      	str	r0, [sp, #8]
 8010a18:	b150      	cbz	r0, 8010a30 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010a1a:	9b02      	ldr	r3, [sp, #8]
 8010a1c:	2b04      	cmp	r3, #4
 8010a1e:	d101      	bne.n	8010a24 <dir_alloc+0x28>
 8010a20:	2307      	movs	r3, #7
 8010a22:	9302      	str	r3, [sp, #8]
}
 8010a24:	9802      	ldr	r0, [sp, #8]
 8010a26:	b009      	add	sp, #36	; 0x24
 8010a28:	ecbd 8b02 	vpop	{d8}
 8010a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8010a30:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 8010a34:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a36:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8010a3a:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a3c:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 8010a40:	42ac      	cmp	r4, r5
 8010a42:	d019      	beq.n	8010a78 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a44:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d148      	bne.n	8010ade <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	462a      	mov	r2, r5
 8010a50:	4651      	mov	r1, sl
 8010a52:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010a56:	f7fe fb47 	bl	800f0e8 <disk_read>
 8010a5a:	b158      	cbz	r0, 8010a74 <dir_alloc+0x78>
				res = FR_DISK_ERR;
 8010a5c:	2201      	movs	r2, #1
			fs->winsect = sector;
 8010a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8010a62:	9202      	str	r2, [sp, #8]
}
 8010a64:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 8010a66:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8010a6a:	b009      	add	sp, #36	; 0x24
 8010a6c:	ecbd 8b02 	vpop	{d8}
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8010a74:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010a78:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	2be5      	cmp	r3, #229	; 0xe5
 8010a80:	d028      	beq.n	8010ad4 <dir_alloc+0xd8>
 8010a82:	fab3 f283 	clz	r2, r3
 8010a86:	0952      	lsrs	r2, r2, #5
 8010a88:	b323      	cbz	r3, 8010ad4 <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 8010a8a:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010a8c:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010a90:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010a94:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010a96:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8010a9a:	d2c1      	bcs.n	8010a20 <dir_alloc+0x24>
 8010a9c:	2d00      	cmp	r5, #0
 8010a9e:	d0bf      	beq.n	8010a20 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010aa0:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8010aa4:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010aa8:	f1bb 0f00 	cmp.w	fp, #0
 8010aac:	d109      	bne.n	8010ac2 <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 8010aae:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 8010ab0:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 8010ab4:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 8010ab8:	bba9      	cbnz	r1, 8010b26 <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010aba:	8933      	ldrh	r3, [r6, #8]
 8010abc:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8010ac0:	d95b      	bls.n	8010b7a <dir_alloc+0x17e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010ac2:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010ac6:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010ac8:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 8010aca:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010ace:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010ad2:	e7b3      	b.n	8010a3c <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010ad4:	3701      	adds	r7, #1
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	429f      	cmp	r7, r3
 8010ada:	d1d7      	bne.n	8010a8c <dir_alloc+0x90>
 8010adc:	e7a2      	b.n	8010a24 <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010ade:	2301      	movs	r3, #1
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	4651      	mov	r1, sl
 8010ae4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010ae8:	f7fe fb0c 	bl	800f104 <disk_write>
 8010aec:	bb48      	cbnz	r0, 8010b42 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010aee:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8010af2:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010af6:	1ae2      	subs	r2, r4, r3
 8010af8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d2a5      	bcs.n	8010a4c <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b00:	f898 6002 	ldrb.w	r6, [r8, #2]
 8010b04:	2e01      	cmp	r6, #1
 8010b06:	d802      	bhi.n	8010b0e <dir_alloc+0x112>
 8010b08:	e7a0      	b.n	8010a4c <dir_alloc+0x50>
					wsect += fs->fsize;
 8010b0a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010b0e:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b10:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b12:	2301      	movs	r3, #1
 8010b14:	4651      	mov	r1, sl
 8010b16:	4622      	mov	r2, r4
 8010b18:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010b1c:	f7fe faf2 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b20:	2e01      	cmp	r6, #1
 8010b22:	d1f2      	bne.n	8010b0a <dir_alloc+0x10e>
 8010b24:	e792      	b.n	8010a4c <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010b26:	8973      	ldrh	r3, [r6, #10]
 8010b28:	3b01      	subs	r3, #1
 8010b2a:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 8010b2e:	d1c8      	bne.n	8010ac2 <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7fe fed3 	bl	800f8dc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010b36:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010b38:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010b3a:	f240 8082 	bls.w	8010c42 <dir_alloc+0x246>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010b3e:	1c43      	adds	r3, r0, #1
 8010b40:	d102      	bne.n	8010b48 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b42:	2301      	movs	r3, #1
 8010b44:	9302      	str	r3, [sp, #8]
 8010b46:	e76d      	b.n	8010a24 <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010b48:	69b3      	ldr	r3, [r6, #24]
 8010b4a:	4298      	cmp	r0, r3
 8010b4c:	d21a      	bcs.n	8010b84 <dir_alloc+0x188>
	clst -= 2;
 8010b4e:	1e83      	subs	r3, r0, #2
 8010b50:	9305      	str	r3, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010b52:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010b56:	9301      	str	r3, [sp, #4]
 8010b58:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 8010b5a:	f8c9 3018 	str.w	r3, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b5e:	69b3      	ldr	r3, [r6, #24]
 8010b60:	9a05      	ldr	r2, [sp, #20]
 8010b62:	3b02      	subs	r3, #2
 8010b64:	4293      	cmp	r3, r2
 8010b66:	f240 809e 	bls.w	8010ca6 <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 8010b6a:	8973      	ldrh	r3, [r6, #10]
 8010b6c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8010b6e:	fb02 5503 	mla	r5, r2, r3, r5
 8010b72:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 8010b74:	f8c9 501c 	str.w	r5, [r9, #28]
 8010b78:	e7a6      	b.n	8010ac8 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010b7a:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 8010b7c:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010b80:	9302      	str	r3, [sp, #8]
 8010b82:	e74f      	b.n	8010a24 <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010b84:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8010b88:	4648      	mov	r0, r9
 8010b8a:	f7ff f9db 	bl	800ff44 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010b8e:	4603      	mov	r3, r0
 8010b90:	9004      	str	r0, [sp, #16]
 8010b92:	2800      	cmp	r0, #0
 8010b94:	f43f af44 	beq.w	8010a20 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010b98:	2801      	cmp	r0, #1
 8010b9a:	d052      	beq.n	8010c42 <dir_alloc+0x246>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	d0d0      	beq.n	8010b42 <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010ba0:	78f3      	ldrb	r3, [r6, #3]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d150      	bne.n	8010c48 <dir_alloc+0x24c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010ba6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010baa:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8010bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	f008 fd0c 	bl	80195d0 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bb8:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 8010bba:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bbc:	3b02      	subs	r3, #2
	clst -= 2;
 8010bbe:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bc0:	429a      	cmp	r2, r3
	clst -= 2;
 8010bc2:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bc4:	d27c      	bcs.n	8010cc0 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 8010bc6:	4611      	mov	r1, r2
 8010bc8:	8973      	ldrh	r3, [r6, #10]
 8010bca:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8010bcc:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010bd0:	6332      	str	r2, [r6, #48]	; 0x30
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d071      	beq.n	8010cba <dir_alloc+0x2be>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	ee08 aa10 	vmov	s16, sl
 8010bdc:	9706      	str	r7, [sp, #24]
 8010bde:	4692      	mov	sl, r2
 8010be0:	f8cd 901c 	str.w	r9, [sp, #28]
 8010be4:	46a1      	mov	r9, r4
 8010be6:	9f01      	ldr	r7, [sp, #4]
 8010be8:	461c      	mov	r4, r3
						fs->wflag = 1;
 8010bea:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010bee:	4652      	mov	r2, sl
 8010bf0:	4639      	mov	r1, r7
 8010bf2:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8010bf4:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	f7fe fa84 	bl	800f104 <disk_write>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d1a0      	bne.n	8010b42 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c00:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8010c02:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c04:	ebaa 0203 	sub.w	r2, sl, r3
 8010c08:	69f3      	ldr	r3, [r6, #28]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d20e      	bcs.n	8010c2c <dir_alloc+0x230>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c0e:	78b5      	ldrb	r5, [r6, #2]
 8010c10:	2d01      	cmp	r5, #1
 8010c12:	d801      	bhi.n	8010c18 <dir_alloc+0x21c>
 8010c14:	e00a      	b.n	8010c2c <dir_alloc+0x230>
					wsect += fs->fsize;
 8010c16:	69f3      	ldr	r3, [r6, #28]
 8010c18:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c1a:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	4639      	mov	r1, r7
 8010c20:	4652      	mov	r2, sl
 8010c22:	7870      	ldrb	r0, [r6, #1]
 8010c24:	f7fe fa6e 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c28:	2d01      	cmp	r5, #1
 8010c2a:	d1f4      	bne.n	8010c16 <dir_alloc+0x21a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010c2c:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8010c2e:	1c63      	adds	r3, r4, #1
 8010c30:	8972      	ldrh	r2, [r6, #10]
 8010c32:	f101 0a01 	add.w	sl, r1, #1
 8010c36:	4293      	cmp	r3, r2
 8010c38:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 8010c3c:	d235      	bcs.n	8010caa <dir_alloc+0x2ae>
 8010c3e:	461c      	mov	r4, r3
 8010c40:	e7d3      	b.n	8010bea <dir_alloc+0x1ee>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010c42:	2302      	movs	r3, #2
 8010c44:	9302      	str	r3, [sp, #8]
 8010c46:	e6ed      	b.n	8010a24 <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 8010c48:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010c4a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8010c4e:	2301      	movs	r3, #1
 8010c50:	7870      	ldrb	r0, [r6, #1]
 8010c52:	9205      	str	r2, [sp, #20]
 8010c54:	9101      	str	r1, [sp, #4]
 8010c56:	f7fe fa55 	bl	800f104 <disk_write>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	f47f af71 	bne.w	8010b42 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010c62:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 8010c64:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c66:	1ad1      	subs	r1, r2, r3
 8010c68:	69f3      	ldr	r3, [r6, #28]
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	d29e      	bcs.n	8010bac <dir_alloc+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c6e:	78b5      	ldrb	r5, [r6, #2]
 8010c70:	2d01      	cmp	r5, #1
 8010c72:	d99b      	bls.n	8010bac <dir_alloc+0x1b0>
 8010c74:	ee08 aa10 	vmov	s16, sl
 8010c78:	f8cd 9014 	str.w	r9, [sp, #20]
 8010c7c:	4692      	mov	sl, r2
 8010c7e:	46a1      	mov	r9, r4
 8010c80:	9c01      	ldr	r4, [sp, #4]
 8010c82:	e000      	b.n	8010c86 <dir_alloc+0x28a>
					wsect += fs->fsize;
 8010c84:	69f3      	ldr	r3, [r6, #28]
 8010c86:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c88:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4652      	mov	r2, sl
 8010c90:	7870      	ldrb	r0, [r6, #1]
 8010c92:	f7fe fa37 	bl	800f104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c96:	2d01      	cmp	r5, #1
 8010c98:	d1f4      	bne.n	8010c84 <dir_alloc+0x288>
 8010c9a:	464c      	mov	r4, r9
 8010c9c:	ee18 aa10 	vmov	sl, s16
 8010ca0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010ca4:	e782      	b.n	8010bac <dir_alloc+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010ca6:	2500      	movs	r5, #0
 8010ca8:	e763      	b.n	8010b72 <dir_alloc+0x176>
					fs->winsect -= n;							/* Restore window offset */
 8010caa:	4623      	mov	r3, r4
 8010cac:	9f06      	ldr	r7, [sp, #24]
 8010cae:	464c      	mov	r4, r9
 8010cb0:	ee18 aa10 	vmov	sl, s16
 8010cb4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010cb8:	1aca      	subs	r2, r1, r3
 8010cba:	9b04      	ldr	r3, [sp, #16]
 8010cbc:	6332      	str	r2, [r6, #48]	; 0x30
 8010cbe:	e74c      	b.n	8010b5a <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 8010cc0:	8973      	ldrh	r3, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	e784      	b.n	8010bd0 <dir_alloc+0x1d4>
 8010cc6:	bf00      	nop

08010cc8 <dir_register>:
{
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010ccc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8010cd0:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010cd2:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 8010cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8010cd8:	f040 8450 	bne.w	801157c <dir_register+0x8b4>
	FATFS *fs = dp->obj.fs;
 8010cdc:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010ce6:	881a      	ldrh	r2, [r3, #0]
 8010ce8:	2a00      	cmp	r2, #0
 8010cea:	f000 844b 	beq.w	8011584 <dir_register+0x8bc>
 8010cee:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8010cf2:	f10b 0b01 	add.w	fp, fp, #1
 8010cf6:	2a00      	cmp	r2, #0
 8010cf8:	d1f9      	bne.n	8010cee <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 8010cfa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 8010cfe:	ab12      	add	r3, sp, #72	; 0x48
 8010d00:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010d04:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d0a:	07d8      	lsls	r0, r3, #31
 8010d0c:	f140 818b 	bpl.w	8011026 <dir_register+0x35e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010d10:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d12:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
			*d++ = *s++;
 8010d16:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
		for (n = 1; n < 100; n++) {
 8010d1a:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010d1c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d20:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 8010d24:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 8010d28:	4dba      	ldr	r5, [pc, #744]	; (8011014 <dir_register+0x34c>)
			*d++ = *s++;
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8010d30:	9302      	str	r3, [sp, #8]
 8010d32:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8010d36:	9305      	str	r3, [sp, #20]
 8010d38:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010d42:	9303      	str	r3, [sp, #12]
 8010d44:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8010d48:	9308      	str	r3, [sp, #32]
 8010d4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010d4e:	9307      	str	r3, [sp, #28]
 8010d50:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8010d54:	9306      	str	r3, [sp, #24]
 8010d56:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d5c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d60:	469b      	mov	fp, r3
			*d++ = *s++;
 8010d62:	9b01      	ldr	r3, [sp, #4]
 8010d64:	2100      	movs	r1, #0
 8010d66:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010d68:	2f05      	cmp	r7, #5
			*d++ = *s++;
 8010d6a:	f363 0107 	bfi	r1, r3, #0, #8
 8010d6e:	9b02      	ldr	r3, [sp, #8]
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010d70:	f8d9 000c 	ldr.w	r0, [r9, #12]
			*d++ = *s++;
 8010d74:	f363 210f 	bfi	r1, r3, #8, #8
 8010d78:	9b05      	ldr	r3, [sp, #20]
 8010d7a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
 8010d7e:	f363 4117 	bfi	r1, r3, #16, #8
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 8010d88:	f363 611f 	bfi	r1, r3, #24, #8
 8010d8c:	9b03      	ldr	r3, [sp, #12]
 8010d8e:	f363 0207 	bfi	r2, r3, #0, #8
 8010d92:	9b08      	ldr	r3, [sp, #32]
 8010d94:	f363 220f 	bfi	r2, r3, #8, #8
 8010d98:	9b07      	ldr	r3, [sp, #28]
 8010d9a:	f363 4217 	bfi	r2, r3, #16, #8
 8010d9e:	9b06      	ldr	r3, [sp, #24]
 8010da0:	f363 621f 	bfi	r2, r3, #24, #8
 8010da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da6:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 8010daa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010dae:	f240 8304 	bls.w	80113ba <dir_register+0x6f2>
		while (*lfn) {	/* Create a CRC */
 8010db2:	8802      	ldrh	r2, [r0, #0]
 8010db4:	2a00      	cmp	r2, #0
 8010db6:	f000 8300 	beq.w	80113ba <dir_register+0x6f2>
				sr = (sr << 1) + (wc & 1);
 8010dba:	f002 0101 	and.w	r1, r2, #1
 8010dbe:	4684      	mov	ip, r0
				wc >>= 1;
 8010dc0:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8010dc2:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010dc6:	e009      	b.n	8010ddc <dir_register+0x114>
				sr = (sr << 1) + (wc & 1);
 8010dc8:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010dcc:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8010dd0:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8010dd4:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010dd8:	bf18      	it	ne
 8010dda:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010ddc:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8010de0:	0893      	lsrs	r3, r2, #2
 8010de2:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8010de4:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010de8:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8010dea:	f003 0301 	and.w	r3, r3, #1
 8010dee:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010df2:	bf48      	it	mi
 8010df4:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8010df8:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8010dfa:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010dfe:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8010e02:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e06:	bf18      	it	ne
 8010e08:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010e0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e0e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010e10:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8010e14:	bf48      	it	mi
 8010e16:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e20:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010e22:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8010e26:	bf48      	it	mi
 8010e28:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010e2a:	f000 0001 	and.w	r0, r0, #1
 8010e2e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e32:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010e34:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8010e38:	bf48      	it	mi
 8010e3a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010e3c:	f001 0101 	and.w	r1, r1, #1
 8010e40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e44:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010e46:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8010e4a:	bf48      	it	mi
 8010e4c:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010e4e:	f003 0301 	and.w	r3, r3, #1
 8010e52:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e56:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010e58:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8010e5c:	bf48      	it	mi
 8010e5e:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010e60:	f000 0001 	and.w	r0, r0, #1
 8010e64:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e68:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010e6a:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8010e6e:	bf48      	it	mi
 8010e70:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010e72:	f001 0101 	and.w	r1, r1, #1
 8010e76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e7a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010e7c:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8010e80:	bf48      	it	mi
 8010e82:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e8c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010e8e:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8010e92:	bf48      	it	mi
 8010e94:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010e96:	f000 0001 	and.w	r0, r0, #1
 8010e9a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010e9e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010ea0:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8010ea4:	bf48      	it	mi
 8010ea6:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010ea8:	f001 0101 	and.w	r1, r1, #1
 8010eac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010eb0:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010eb2:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8010eb6:	bf48      	it	mi
 8010eb8:	4068      	eormi	r0, r5
				wc >>= 1;
 8010eba:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 8010ebc:	f003 0301 	and.w	r3, r3, #1
 8010ec0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ec4:	0400      	lsls	r0, r0, #16
 8010ec6:	bf48      	it	mi
 8010ec8:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010eca:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ece:	0409      	lsls	r1, r1, #16
 8010ed0:	bf48      	it	mi
 8010ed2:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010ed4:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ed8:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 8010eda:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8010ede:	bf48      	it	mi
 8010ee0:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 8010ee4:	2a00      	cmp	r2, #0
 8010ee6:	f47f af6f 	bne.w	8010dc8 <dir_register+0x100>
		c = (BYTE)((seq % 16) + '0');
 8010eea:	f00e 010f 	and.w	r1, lr, #15
 8010eee:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010ef2:	2a39      	cmp	r2, #57	; 0x39
 8010ef4:	bf88      	it	hi
 8010ef6:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010efa:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8010efe:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8010f02:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 8010f06:	f240 830c 	bls.w	8011522 <dir_register+0x85a>
		c = (BYTE)((seq % 16) + '0');
 8010f0a:	f001 000f 	and.w	r0, r1, #15
 8010f0e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010f12:	2a39      	cmp	r2, #57	; 0x39
 8010f14:	bf88      	it	hi
 8010f16:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010f1a:	290f      	cmp	r1, #15
		seq /= 16;
 8010f1c:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8010f20:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8010f24:	f240 8303 	bls.w	801152e <dir_register+0x866>
		c = (BYTE)((seq % 16) + '0');
 8010f28:	f000 010f 	and.w	r1, r0, #15
 8010f2c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010f30:	2a39      	cmp	r2, #57	; 0x39
 8010f32:	bf88      	it	hi
 8010f34:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010f38:	280f      	cmp	r0, #15
		seq /= 16;
 8010f3a:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8010f3e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8010f42:	f240 82fa 	bls.w	801153a <dir_register+0x872>
		c = (BYTE)((seq % 16) + '0');
 8010f46:	f001 000f 	and.w	r0, r1, #15
 8010f4a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010f4e:	2a39      	cmp	r2, #57	; 0x39
 8010f50:	bf88      	it	hi
 8010f52:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010f56:	290f      	cmp	r1, #15
		seq /= 16;
 8010f58:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8010f5c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 8010f60:	f240 82fa 	bls.w	8011558 <dir_register+0x890>
		c = (BYTE)((seq % 16) + '0');
 8010f64:	f000 010f 	and.w	r1, r0, #15
 8010f68:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010f6c:	2a39      	cmp	r2, #57	; 0x39
 8010f6e:	bf88      	it	hi
 8010f70:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010f74:	280f      	cmp	r0, #15
		seq /= 16;
 8010f76:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 8010f7a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 8010f7e:	f240 82f1 	bls.w	8011564 <dir_register+0x89c>
		c = (BYTE)((seq % 16) + '0');
 8010f82:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8010f86:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 8010f8a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010f8e:	2a39      	cmp	r2, #57	; 0x39
 8010f90:	bf88      	it	hi
 8010f92:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010f96:	290f      	cmp	r1, #15
		ns[i--] = c;
 8010f98:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 8010f9c:	f240 82e8 	bls.w	8011570 <dir_register+0x8a8>
		c = (BYTE)((seq % 16) + '0');
 8010fa0:	f00e 010f 	and.w	r1, lr, #15
 8010fa4:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010fa8:	2a39      	cmp	r2, #57	; 0x39
 8010faa:	bf88      	it	hi
 8010fac:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010fb0:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8010fb4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8010fb8:	f240 82c5 	bls.w	8011546 <dir_register+0x87e>
		ns[i--] = c;
 8010fbc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010fc0:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	e002      	b.n	8010fce <dir_register+0x306>
 8010fc8:	3201      	adds	r2, #1
 8010fca:	4562      	cmp	r2, ip
 8010fcc:	d003      	beq.n	8010fd6 <dir_register+0x30e>
 8010fce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010fd2:	2b20      	cmp	r3, #32
 8010fd4:	d1f8      	bne.n	8010fc8 <dir_register+0x300>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010fd6:	f1bc 0f07 	cmp.w	ip, #7
 8010fda:	f240 81f3 	bls.w	80113c4 <dir_register+0x6fc>
 8010fde:	1c50      	adds	r0, r2, #1
 8010fe0:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8010fe4:	2807      	cmp	r0, #7
 8010fe6:	d809      	bhi.n	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010fe8:	1c42      	adds	r2, r0, #1
 8010fea:	2120      	movs	r1, #32
 8010fec:	2a08      	cmp	r2, #8
 8010fee:	f1c0 0208 	rsb	r2, r0, #8
 8010ff2:	4430      	add	r0, r6
 8010ff4:	bf88      	it	hi
 8010ff6:	2201      	movhi	r2, #1
 8010ff8:	f008 faea 	bl	80195d0 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f7ff f92b 	bl	8010258 <dir_find>
			if (res != FR_OK) break;
 8011002:	b948      	cbnz	r0, 8011018 <dir_register+0x350>
		for (n = 1; n < 100; n++) {
 8011004:	3701      	adds	r7, #1
 8011006:	2f64      	cmp	r7, #100	; 0x64
 8011008:	f47f aeab 	bne.w	8010d62 <dir_register+0x9a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801100c:	2007      	movs	r0, #7
}
 801100e:	b013      	add	sp, #76	; 0x4c
 8011010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011014:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011018:	2804      	cmp	r0, #4
 801101a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801101e:	d1f6      	bne.n	801100e <dir_register+0x346>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011022:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011028:	079b      	lsls	r3, r3, #30
 801102a:	f140 818e 	bpl.w	801134a <dir_register+0x682>
 801102e:	f10b 0b0c 	add.w	fp, fp, #12
 8011032:	4de3      	ldr	r5, [pc, #908]	; (80113c0 <dir_register+0x6f8>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011034:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011036:	fba5 350b 	umull	r3, r5, r5, fp
 801103a:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801103c:	1c69      	adds	r1, r5, #1
 801103e:	f7ff fcdd 	bl	80109fc <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011042:	2800      	cmp	r0, #0
 8011044:	d1e3      	bne.n	801100e <dir_register+0x346>
 8011046:	f1bb 0f0c 	cmp.w	fp, #12
 801104a:	f000 8185 	beq.w	8011358 <dir_register+0x690>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801104e:	6961      	ldr	r1, [r4, #20]
 8011050:	4620      	mov	r0, r4
 8011052:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8011056:	f7ff f845 	bl	80100e4 <dir_sdi>
		if (res == FR_OK) {
 801105a:	2800      	cmp	r0, #0
 801105c:	d1d7      	bne.n	801100e <dir_register+0x346>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801105e:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8011062:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011064:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011068:	01fb      	lsls	r3, r7, #7
 801106a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 801106e:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8011072:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 8011076:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 801107a:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 801107e:	189f      	adds	r7, r3, r2
 8011080:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8011084:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 8011088:	f3c7 0346 	ubfx	r3, r7, #1, #7
 801108c:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 8011090:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8011094:	fa50 f783 	uxtab	r7, r0, r3
 8011098:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 801109c:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80110a0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80110a4:	fa51 f783 	uxtab	r7, r1, r3
 80110a8:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80110ac:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80110b0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110b4:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80110b8:	fa5a fa83 	uxtab	sl, sl, r3
 80110bc:	f3ca 0346 	ubfx	r3, sl, #1, #7
 80110c0:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 80110c4:	fa52 f283 	uxtab	r2, r2, r3
 80110c8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80110cc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80110d0:	fa5e f283 	uxtab	r2, lr, r3
 80110d4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80110d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80110dc:	fa5c f283 	uxtab	r2, ip, r3
 80110e0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80110e4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80110e8:	fa56 f283 	uxtab	r2, r6, r3
 80110ec:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80110f0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80110f4:	fa50 f383 	uxtab	r3, r0, r3
 80110f8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80110fc:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8011100:	fa51 f183 	uxtab	r1, r1, r3
 8011104:	b2ce      	uxtb	r6, r1
	} while (--n);
 8011106:	e036      	b.n	8011176 <dir_register+0x4ae>
	*ptr++ = (BYTE)val; val >>= 8;
 8011108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801110c:	f8a3 2003 	strh.w	r2, [r3, #3]
 8011110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011114:	f8a3 2005 	strh.w	r2, [r3, #5]
 8011118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801111c:	f8a3 2007 	strh.w	r2, [r3, #7]
 8011120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011124:	f8a3 2009 	strh.w	r2, [r3, #9]
 8011128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801112c:	81da      	strh	r2, [r3, #14]
 801112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011132:	821a      	strh	r2, [r3, #16]
 8011134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011138:	825a      	strh	r2, [r3, #18]
 801113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801113e:	829a      	strh	r2, [r3, #20]
 8011140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011144:	82da      	strh	r2, [r3, #22]
 8011146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801114a:	831a      	strh	r2, [r3, #24]
 801114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011150:	839a      	strh	r2, [r3, #28]
 8011152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011156:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011158:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801115c:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 801115e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8011160:	4620      	mov	r0, r4
				fs->wflag = 1;
 8011162:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011166:	f7fe fc19 	bl	800f99c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 801116a:	2800      	cmp	r0, #0
 801116c:	f47f af4f 	bne.w	801100e <dir_register+0x346>
 8011170:	3d01      	subs	r5, #1
 8011172:	f000 80f1 	beq.w	8011358 <dir_register+0x690>
				res = move_window(fs, dp->sect);
 8011176:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011178:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 801117c:	4299      	cmp	r1, r3
 801117e:	d005      	beq.n	801118c <dir_register+0x4c4>
 8011180:	4648      	mov	r0, r9
 8011182:	f7fe f95f 	bl	800f444 <move_window.part.0>
				if (res != FR_OK) break;
 8011186:	2800      	cmp	r0, #0
 8011188:	f47f af41 	bne.w	801100e <dir_register+0x346>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801118c:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801118e:	f04f 020f 	mov.w	r2, #15
 8011192:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011194:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011198:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801119a:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801119c:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 801119e:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80111a2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 80111a6:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 80111aa:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80111ae:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80111b2:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80111b6:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80111ba:	f883 c001 	strb.w	ip, [r3, #1]
 80111be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80111c2:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80111c6:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80111ca:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80111ce:	45be      	cmp	lr, r7
 80111d0:	d89a      	bhi.n	8011108 <dir_register+0x440>
 80111d2:	3201      	adds	r2, #1
 80111d4:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 80111d8:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80111da:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 80111de:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 80111e2:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80111e6:	f1ba 0f00 	cmp.w	sl, #0
 80111ea:	d091      	beq.n	8011110 <dir_register+0x448>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80111ec:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80111f0:	45f2      	cmp	sl, lr
 80111f2:	d08d      	beq.n	8011110 <dir_register+0x448>
 80111f4:	440a      	add	r2, r1
 80111f6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80111fa:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80111fe:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 8011202:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011206:	f1ba 0f00 	cmp.w	sl, #0
 801120a:	f000 81be 	beq.w	801158a <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801120e:	45f2      	cmp	sl, lr
 8011210:	d082      	beq.n	8011118 <dir_register+0x450>
 8011212:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8011216:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 801121a:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 801121e:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011222:	f1ba 0f00 	cmp.w	sl, #0
 8011226:	f000 81c5 	beq.w	80115b4 <dir_register+0x8ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801122a:	45f2      	cmp	sl, lr
 801122c:	f43f af78 	beq.w	8011120 <dir_register+0x458>
 8011230:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8011234:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011238:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 801123c:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011240:	f1ba 0f00 	cmp.w	sl, #0
 8011244:	f000 81b3 	beq.w	80115ae <dir_register+0x8e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011248:	45f2      	cmp	sl, lr
 801124a:	f43f af6d 	beq.w	8011128 <dir_register+0x460>
 801124e:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8011252:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8011256:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 801125a:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801125e:	f1ba 0f00 	cmp.w	sl, #0
 8011262:	f43f af64 	beq.w	801112e <dir_register+0x466>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011266:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801126a:	45f2      	cmp	sl, lr
 801126c:	f43f af5f 	beq.w	801112e <dir_register+0x466>
 8011270:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8011274:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011278:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 801127c:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011280:	f1ba 0f00 	cmp.w	sl, #0
 8011284:	f000 8190 	beq.w	80115a8 <dir_register+0x8e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011288:	45f2      	cmp	sl, lr
 801128a:	f43f af53 	beq.w	8011134 <dir_register+0x46c>
 801128e:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011292:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011296:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 801129a:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801129e:	f1ba 0f00 	cmp.w	sl, #0
 80112a2:	f000 817e 	beq.w	80115a2 <dir_register+0x8da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80112a6:	45f2      	cmp	sl, lr
 80112a8:	f43f af47 	beq.w	801113a <dir_register+0x472>
 80112ac:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80112b0:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80112b4:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 80112b8:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80112bc:	f1ba 0f00 	cmp.w	sl, #0
 80112c0:	f000 816c 	beq.w	801159c <dir_register+0x8d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80112c4:	45f2      	cmp	sl, lr
 80112c6:	f43f af3b 	beq.w	8011140 <dir_register+0x478>
 80112ca:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80112ce:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80112d2:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 80112d6:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80112da:	f1ba 0f00 	cmp.w	sl, #0
 80112de:	f000 815a 	beq.w	8011596 <dir_register+0x8ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80112e2:	45f2      	cmp	sl, lr
 80112e4:	f43f af2f 	beq.w	8011146 <dir_register+0x47e>
 80112e8:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80112ec:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80112f0:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 80112f4:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80112f8:	f1be 0f00 	cmp.w	lr, #0
 80112fc:	f43f af26 	beq.w	801114c <dir_register+0x484>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011300:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8011304:	45d6      	cmp	lr, sl
 8011306:	f43f af21 	beq.w	801114c <dir_register+0x484>
 801130a:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 801130e:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 8011312:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 8011316:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801131a:	f1be 0f00 	cmp.w	lr, #0
 801131e:	f000 8137 	beq.w	8011590 <dir_register+0x8c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011322:	45d6      	cmp	lr, sl
 8011324:	f43f af15 	beq.w	8011152 <dir_register+0x48a>
 8011328:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801132a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 801132e:	779a      	strb	r2, [r3, #30]
 8011330:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8011332:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011334:	fa1f f28e 	uxth.w	r2, lr
 8011338:	42ba      	cmp	r2, r7
 801133a:	f63f af0d 	bhi.w	8011158 <dir_register+0x490>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801133e:	4461      	add	r1, ip
 8011340:	8b4a      	ldrh	r2, [r1, #26]
 8011342:	2a00      	cmp	r2, #0
 8011344:	f47f af0a 	bne.w	801115c <dir_register+0x494>
 8011348:	e706      	b.n	8011158 <dir_register+0x490>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801134a:	2101      	movs	r1, #1
 801134c:	4620      	mov	r0, r4
 801134e:	f7ff fb55 	bl	80109fc <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011352:	2800      	cmp	r0, #0
 8011354:	f47f ae5b 	bne.w	801100e <dir_register+0x346>
		res = move_window(fs, dp->sect);
 8011358:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801135a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 801135e:	4299      	cmp	r1, r3
 8011360:	d005      	beq.n	801136e <dir_register+0x6a6>
 8011362:	4648      	mov	r0, r9
 8011364:	f7fe f86e 	bl	800f444 <move_window.part.0>
		if (res == FR_OK) {
 8011368:	2800      	cmp	r0, #0
 801136a:	f47f ae50 	bne.w	801100e <dir_register+0x346>
		*d++ = (BYTE)val;
 801136e:	2220      	movs	r2, #32
 8011370:	2100      	movs	r1, #0
 8011372:	6a20      	ldr	r0, [r4, #32]
 8011374:	f008 f92c 	bl	80195d0 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011378:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801137a:	f104 0225 	add.w	r2, r4, #37	; 0x25
 801137e:	1a9a      	subs	r2, r3, r2
 8011380:	2a02      	cmp	r2, #2
 8011382:	f240 811a 	bls.w	80115ba <dir_register+0x8f2>
			*d++ = *s++;
 8011386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801138c:	605a      	str	r2, [r3, #4]
 801138e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 8011392:	2000      	movs	r0, #0
			*d++ = *s++;
 8011394:	721a      	strb	r2, [r3, #8]
 8011396:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801139a:	725a      	strb	r2, [r3, #9]
 801139c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80113a0:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80113a2:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80113a4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80113a8:	6a21      	ldr	r1, [r4, #32]
 80113aa:	f003 0318 	and.w	r3, r3, #24
 80113ae:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 80113b0:	f889 2003 	strb.w	r2, [r9, #3]
}
 80113b4:	b013      	add	sp, #76	; 0x4c
 80113b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ba:	46be      	mov	lr, r7
 80113bc:	e595      	b.n	8010eea <dir_register+0x222>
 80113be:	bf00      	nop
 80113c0:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80113c4:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 80113c8:	f10c 0c01 	add.w	ip, ip, #1
 80113cc:	eb0d 0103 	add.w	r1, sp, r3
 80113d0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80113d4:	54b1      	strb	r1, [r6, r2]
 80113d6:	3201      	adds	r2, #1
	} while (j < 8);
 80113d8:	2a07      	cmp	r2, #7
 80113da:	f63f ae0f 	bhi.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80113de:	f1bc 0f08 	cmp.w	ip, #8
 80113e2:	d067      	beq.n	80114b4 <dir_register+0x7ec>
 80113e4:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 80113e8:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80113ea:	f102 0001 	add.w	r0, r2, #1
 80113ee:	eb0d 0103 	add.w	r1, sp, r3
 80113f2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80113f6:	54b1      	strb	r1, [r6, r2]
 80113f8:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 80113fc:	f43f adfe 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011400:	2908      	cmp	r1, #8
 8011402:	d05f      	beq.n	80114c4 <dir_register+0x7fc>
 8011404:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8011408:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801140a:	eb0d 0103 	add.w	r1, sp, r3
 801140e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011412:	5431      	strb	r1, [r6, r0]
 8011414:	f10c 0102 	add.w	r1, ip, #2
 8011418:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 801141c:	f43f adee 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011420:	2908      	cmp	r1, #8
 8011422:	d057      	beq.n	80114d4 <dir_register+0x80c>
 8011424:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8011428:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801142a:	eb0d 0103 	add.w	r1, sp, r3
 801142e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011432:	5431      	strb	r1, [r6, r0]
 8011434:	f10c 0103 	add.w	r1, ip, #3
 8011438:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 801143c:	f43f adde 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011440:	2908      	cmp	r1, #8
 8011442:	d04f      	beq.n	80114e4 <dir_register+0x81c>
 8011444:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8011448:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801144a:	eb0d 0103 	add.w	r1, sp, r3
 801144e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011452:	5431      	strb	r1, [r6, r0]
 8011454:	f10c 0104 	add.w	r1, ip, #4
 8011458:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 801145c:	f43f adce 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011460:	2908      	cmp	r1, #8
 8011462:	d047      	beq.n	80114f4 <dir_register+0x82c>
 8011464:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8011468:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801146a:	eb0d 0103 	add.w	r1, sp, r3
 801146e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011472:	5431      	strb	r1, [r6, r0]
 8011474:	f10c 0105 	add.w	r1, ip, #5
 8011478:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 801147c:	f43f adbe 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011480:	2908      	cmp	r1, #8
 8011482:	d03f      	beq.n	8011504 <dir_register+0x83c>
 8011484:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8011488:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801148a:	eb0d 0103 	add.w	r1, sp, r3
 801148e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011492:	5431      	strb	r1, [r6, r0]
 8011494:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8011498:	f43f adb0 	beq.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801149c:	f1bc 0f01 	cmp.w	ip, #1
 80114a0:	d138      	bne.n	8011514 <dir_register+0x84c>
 80114a2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 80114a6:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114a8:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 80114aa:	f47f ada7 	bne.w	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114ae:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 80114b2:	e5a3      	b.n	8010ffc <dir_register+0x334>
 80114b4:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114b6:	f102 0001 	add.w	r0, r2, #1
 80114ba:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 80114be:	f47f ad93 	bne.w	8010fe8 <dir_register+0x320>
 80114c2:	e59b      	b.n	8010ffc <dir_register+0x334>
 80114c4:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114c6:	f806 8000 	strb.w	r8, [r6, r0]
 80114ca:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 80114ce:	f47f ad8b 	bne.w	8010fe8 <dir_register+0x320>
 80114d2:	e593      	b.n	8010ffc <dir_register+0x334>
 80114d4:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114d6:	f806 8000 	strb.w	r8, [r6, r0]
 80114da:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 80114de:	f47f ad83 	bne.w	8010fe8 <dir_register+0x320>
 80114e2:	e58b      	b.n	8010ffc <dir_register+0x334>
 80114e4:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114e6:	f806 8000 	strb.w	r8, [r6, r0]
 80114ea:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 80114ee:	f47f ad7b 	bne.w	8010fe8 <dir_register+0x320>
 80114f2:	e583      	b.n	8010ffc <dir_register+0x334>
 80114f4:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114f6:	f806 8000 	strb.w	r8, [r6, r0]
 80114fa:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80114fe:	f47f ad73 	bne.w	8010fe8 <dir_register+0x320>
 8011502:	e57b      	b.n	8010ffc <dir_register+0x334>
 8011504:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011506:	f806 8000 	strb.w	r8, [r6, r0]
 801150a:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 801150e:	f47f ad6b 	bne.w	8010fe8 <dir_register+0x320>
 8011512:	e573      	b.n	8010ffc <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011514:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 8011518:	2a00      	cmp	r2, #0
 801151a:	f47f ad6f 	bne.w	8010ffc <dir_register+0x334>
 801151e:	2007      	movs	r0, #7
 8011520:	e562      	b.n	8010fe8 <dir_register+0x320>
	ns[i] = '~';
 8011522:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011524:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8011528:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801152c:	e548      	b.n	8010fc0 <dir_register+0x2f8>
	ns[i] = '~';
 801152e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011530:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 8011534:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011538:	e542      	b.n	8010fc0 <dir_register+0x2f8>
	ns[i] = '~';
 801153a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801153c:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8011540:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011544:	e53c      	b.n	8010fc0 <dir_register+0x2f8>
	ns[i] = '~';
 8011546:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011548:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 801154c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011550:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8011554:	4662      	mov	r2, ip
 8011556:	e745      	b.n	80113e4 <dir_register+0x71c>
	ns[i] = '~';
 8011558:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801155a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 801155e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011562:	e52d      	b.n	8010fc0 <dir_register+0x2f8>
	ns[i] = '~';
 8011564:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011566:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 801156a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801156e:	e527      	b.n	8010fc0 <dir_register+0x2f8>
	ns[i] = '~';
 8011570:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011572:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8011576:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801157a:	e521      	b.n	8010fc0 <dir_register+0x2f8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801157c:	2006      	movs	r0, #6
}
 801157e:	b013      	add	sp, #76	; 0x4c
 8011580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011584:	4693      	mov	fp, r2
 8011586:	f7ff bbb8 	b.w	8010cfa <dir_register+0x32>
	*ptr++ = (BYTE)val; val >>= 8;
 801158a:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801158e:	e5c7      	b.n	8011120 <dir_register+0x458>
	*ptr++ = (BYTE)val; val >>= 8;
 8011590:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011594:	e5e0      	b.n	8011158 <dir_register+0x490>
	*ptr++ = (BYTE)val; val >>= 8;
 8011596:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801159a:	e5d7      	b.n	801114c <dir_register+0x484>
	*ptr++ = (BYTE)val; val >>= 8;
 801159c:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115a0:	e5d1      	b.n	8011146 <dir_register+0x47e>
	*ptr++ = (BYTE)val; val >>= 8;
 80115a2:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115a6:	e5cb      	b.n	8011140 <dir_register+0x478>
	*ptr++ = (BYTE)val; val >>= 8;
 80115a8:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115ac:	e5c5      	b.n	801113a <dir_register+0x472>
	*ptr++ = (BYTE)val; val >>= 8;
 80115ae:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115b2:	e5bc      	b.n	801112e <dir_register+0x466>
	*ptr++ = (BYTE)val; val >>= 8;
 80115b4:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115b8:	e5b6      	b.n	8011128 <dir_register+0x460>
			*d++ = *s++;
 80115ba:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80115c4:	705a      	strb	r2, [r3, #1]
 80115c6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80115ca:	709a      	strb	r2, [r3, #2]
 80115cc:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80115d0:	70da      	strb	r2, [r3, #3]
 80115d2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80115d6:	711a      	strb	r2, [r3, #4]
 80115d8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80115dc:	715a      	strb	r2, [r3, #5]
 80115de:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80115e2:	719a      	strb	r2, [r3, #6]
 80115e4:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80115e8:	71da      	strb	r2, [r3, #7]
 80115ea:	e6d0      	b.n	801138e <dir_register+0x6c6>

080115ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80115ec:	b510      	push	{r4, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80115f4:	b1a1      	cbz	r1, 8011620 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80115f6:	f891 c000 	ldrb.w	ip, [r1]
 80115fa:	f1bc 0f1f 	cmp.w	ip, #31
 80115fe:	d912      	bls.n	8011626 <f_mount+0x3a>
 8011600:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8011604:	d00f      	beq.n	8011626 <f_mount+0x3a>
 8011606:	4608      	mov	r0, r1
 8011608:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801160c:	2b1f      	cmp	r3, #31
 801160e:	d90c      	bls.n	801162a <f_mount+0x3e>
 8011610:	2b3a      	cmp	r3, #58	; 0x3a
 8011612:	d1f9      	bne.n	8011608 <f_mount+0x1c>
			i = *tp++ - '0';
 8011614:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011616:	4288      	cmp	r0, r1
 8011618:	d102      	bne.n	8011620 <f_mount+0x34>
 801161a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801161e:	d006      	beq.n	801162e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011620:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8011622:	b002      	add	sp, #8
 8011624:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011626:	4663      	mov	r3, ip
 8011628:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801162a:	2b3a      	cmp	r3, #58	; 0x3a
 801162c:	d0f2      	beq.n	8011614 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801162e:	4916      	ldr	r1, [pc, #88]	; (8011688 <f_mount+0x9c>)
 8011630:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8011632:	b143      	cbz	r3, 8011646 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011634:	4815      	ldr	r0, [pc, #84]	; (801168c <f_mount+0xa0>)
 8011636:	6804      	ldr	r4, [r0, #0]
 8011638:	42a3      	cmp	r3, r4
 801163a:	d01c      	beq.n	8011676 <f_mount+0x8a>
 801163c:	6904      	ldr	r4, [r0, #16]
 801163e:	429c      	cmp	r4, r3
 8011640:	d016      	beq.n	8011670 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
 8011642:	2000      	movs	r0, #0
 8011644:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8011646:	9b01      	ldr	r3, [sp, #4]
 8011648:	b173      	cbz	r3, 8011668 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
 801164a:	2000      	movs	r0, #0
 801164c:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 801164e:	9b01      	ldr	r3, [sp, #4]
 8011650:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011652:	b1b3      	cbz	r3, 8011682 <f_mount+0x96>
 8011654:	3a01      	subs	r2, #1
 8011656:	bf18      	it	ne
 8011658:	2201      	movne	r2, #1
 801165a:	b992      	cbnz	r2, 8011682 <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801165c:	a901      	add	r1, sp, #4
 801165e:	4668      	mov	r0, sp
 8011660:	f7fd ff2a 	bl	800f4b8 <find_volume>
}
 8011664:	b002      	add	sp, #8
 8011666:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011668:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 801166a:	600b      	str	r3, [r1, #0]
}
 801166c:	b002      	add	sp, #8
 801166e:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011670:	2400      	movs	r4, #0
 8011672:	6104      	str	r4, [r0, #16]
 8011674:	e7e5      	b.n	8011642 <f_mount+0x56>
 8011676:	2400      	movs	r4, #0
 8011678:	6004      	str	r4, [r0, #0]
 801167a:	6904      	ldr	r4, [r0, #16]
 801167c:	429c      	cmp	r4, r3
 801167e:	d1e0      	bne.n	8011642 <f_mount+0x56>
 8011680:	e7f6      	b.n	8011670 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011682:	2000      	movs	r0, #0
}
 8011684:	b002      	add	sp, #8
 8011686:	bd10      	pop	{r4, pc}
 8011688:	20019a60 	.word	0x20019a60
 801168c:	20019a64 	.word	0x20019a64

08011690 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011694:	b092      	sub	sp, #72	; 0x48
 8011696:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011698:	2800      	cmp	r0, #0
 801169a:	f000 80a1 	beq.w	80117e0 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801169e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80116a2:	4616      	mov	r6, r2
 80116a4:	4604      	mov	r4, r0
 80116a6:	a903      	add	r1, sp, #12
 80116a8:	a801      	add	r0, sp, #4
 80116aa:	463a      	mov	r2, r7
 80116ac:	f7fd ff04 	bl	800f4b8 <find_volume>
	if (res == FR_OK) {
 80116b0:	4605      	mov	r5, r0
 80116b2:	b128      	cbz	r0, 80116c0 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80116b4:	2300      	movs	r3, #0
 80116b6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80116b8:	4628      	mov	r0, r5
 80116ba:	b012      	add	sp, #72	; 0x48
 80116bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 80116c0:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80116c2:	a804      	add	r0, sp, #16
 80116c4:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80116c6:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80116c8:	f7fe ff6e 	bl	80105a8 <follow_path>
		if (res == FR_OK) {
 80116cc:	bb00      	cbnz	r0, 8011710 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80116ce:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f2c0 808b 	blt.w	80117ee <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
 80116d8:	4ba7      	ldr	r3, [pc, #668]	; (8011978 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116da:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116de:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 80116e0:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116e4:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 80116e6:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 80116ea:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 80116ee:	f1b8 0f00 	cmp.w	r8, #0
 80116f2:	f000 80fe 	beq.w	80118f2 <f_open+0x262>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116f6:	4580      	cmp	r8, r0
 80116f8:	d07b      	beq.n	80117f2 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 80116fa:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80116fe:	f1b8 0f00 	cmp.w	r8, #0
 8011702:	f000 808e 	beq.w	8011822 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011706:	4580      	cmp	r8, r0
 8011708:	f000 8103 	beq.w	8011912 <f_open+0x282>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801170c:	2512      	movs	r5, #18
 801170e:	e7d1      	b.n	80116b4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011710:	f016 0f1c 	tst.w	r6, #28
 8011714:	d069      	beq.n	80117ea <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011716:	2804      	cmp	r0, #4
 8011718:	d167      	bne.n	80117ea <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801171a:	4b97      	ldr	r3, [pc, #604]	; (8011978 <f_open+0x2e8>)
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	b112      	cbz	r2, 8011726 <f_open+0x96>
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1f2      	bne.n	801170c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011726:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011728:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801172c:	f7ff facc 	bl	8010cc8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011730:	2800      	cmp	r0, #0
 8011732:	d15a      	bne.n	80117ea <f_open+0x15a>
				dw = GET_FATTIME();
 8011734:	f7fd fbd2 	bl	800eedc <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 801173a:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801173e:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011742:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011746:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 801174a:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801174c:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801174e:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8011752:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8011754:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011758:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801175a:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801175c:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8011760:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8011762:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011766:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 801176a:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801176c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 801176e:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8011770:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8011772:	d102      	bne.n	801177a <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011774:	8a9a      	ldrh	r2, [r3, #20]
 8011776:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801177a:	2200      	movs	r2, #0
 801177c:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801177e:	7808      	ldrb	r0, [r1, #0]
 8011780:	2803      	cmp	r0, #3
 8011782:	d100      	bne.n	8011786 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8011784:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8011786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8011788:	2200      	movs	r2, #0
 801178a:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 801178c:	2301      	movs	r3, #1
 801178e:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
 8011790:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
 8011792:	b19e      	cbz	r6, 80117bc <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
 8011794:	4631      	mov	r1, r6
 8011796:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8011798:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 801179c:	f7ff f890 	bl	80108c0 <remove_chain>
						if (res == FR_OK) {
 80117a0:	bb18      	cbnz	r0, 80117ea <f_open+0x15a>
							res = move_window(fs, dw);
 80117a2:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80117a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117a6:	4590      	cmp	r8, r2
 80117a8:	f000 80e3 	beq.w	8011972 <f_open+0x2e2>
 80117ac:	4618      	mov	r0, r3
 80117ae:	4641      	mov	r1, r8
 80117b0:	f7fd fe48 	bl	800f444 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80117b4:	3e01      	subs	r6, #1
 80117b6:	9b03      	ldr	r3, [sp, #12]
 80117b8:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80117ba:	b9b0      	cbnz	r0, 80117ea <f_open+0x15a>
				mode |= FA_MODIFIED;
 80117bc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80117c0:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80117c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80117c6:	3900      	subs	r1, #0
 80117c8:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80117ca:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80117cc:	bf18      	it	ne
 80117ce:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 80117d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117d2:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80117d4:	f7fd fcb0 	bl	800f138 <inc_lock>
 80117d8:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80117da:	bb70      	cbnz	r0, 801183a <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80117dc:	2502      	movs	r5, #2
 80117de:	e769      	b.n	80116b4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80117e0:	2509      	movs	r5, #9
}
 80117e2:	4628      	mov	r0, r5
 80117e4:	b012      	add	sp, #72	; 0x48
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	4605      	mov	r5, r0
 80117ec:	e762      	b.n	80116b4 <f_open+0x24>
				res = FR_INVALID_NAME;
 80117ee:	2506      	movs	r5, #6
 80117f0:	e760      	b.n	80116b4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117f2:	6858      	ldr	r0, [r3, #4]
 80117f4:	4560      	cmp	r0, ip
 80117f6:	f000 8095 	beq.w	8011924 <f_open+0x294>
		if (Files[i].fs) {	/* Existing entry */
 80117fa:	6918      	ldr	r0, [r3, #16]
 80117fc:	b188      	cbz	r0, 8011822 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117fe:	4540      	cmp	r0, r8
 8011800:	d184      	bne.n	801170c <f_open+0x7c>
 8011802:	6958      	ldr	r0, [r3, #20]
 8011804:	4560      	cmp	r0, ip
 8011806:	d181      	bne.n	801170c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8011808:	6998      	ldr	r0, [r3, #24]
 801180a:	4570      	cmp	r0, lr
 801180c:	f47f af7e 	bne.w	801170c <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011810:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011812:	2a00      	cmp	r2, #0
 8011814:	d164      	bne.n	80118e0 <f_open+0x250>
 8011816:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801181a:	899b      	ldrh	r3, [r3, #12]
 801181c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011820:	d05e      	beq.n	80118e0 <f_open+0x250>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011822:	f016 0f1c 	tst.w	r6, #28
 8011826:	d04b      	beq.n	80118c0 <f_open+0x230>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011828:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801182c:	f013 0f11 	tst.w	r3, #17
 8011830:	d15d      	bne.n	80118ee <f_open+0x25e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011832:	0773      	lsls	r3, r6, #29
 8011834:	d556      	bpl.n	80118e4 <f_open+0x254>
 8011836:	2508      	movs	r5, #8
 8011838:	e73c      	b.n	80116b4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801183a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801183e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8011840:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8011844:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8011846:	2a03      	cmp	r2, #3
 8011848:	d102      	bne.n	8011850 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801184a:	8a9a      	ldrh	r2, [r3, #20]
 801184c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011850:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011852:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8011854:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011858:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 801185c:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 801185e:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011862:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
 8011866:	4650      	mov	r0, sl
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011868:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 801186c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
 8011870:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011872:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011874:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
 8011876:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8011878:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 801187a:	f007 fea9 	bl	80195d0 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801187e:	06b9      	lsls	r1, r7, #26
 8011880:	f57f af1a 	bpl.w	80116b8 <f_open+0x28>
 8011884:	f1b8 0f00 	cmp.w	r8, #0
 8011888:	f43f af16 	beq.w	80116b8 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801188c:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011890:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011894:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011898:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801189c:	d804      	bhi.n	80118a8 <f_open+0x218>
 801189e:	e047      	b.n	8011930 <f_open+0x2a0>
 80118a0:	1c42      	adds	r2, r0, #1
 80118a2:	d06b      	beq.n	801197c <f_open+0x2ec>
 80118a4:	4547      	cmp	r7, r8
 80118a6:	d269      	bcs.n	801197c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80118a8:	4631      	mov	r1, r6
 80118aa:	6820      	ldr	r0, [r4, #0]
 80118ac:	f7fe f816 	bl	800f8dc <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80118b0:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80118b2:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 80118b6:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80118b8:	d8f2      	bhi.n	80118a0 <f_open+0x210>
 80118ba:	2502      	movs	r5, #2
				fp->clust = clst;
 80118bc:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80118be:	e6f9      	b.n	80116b4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80118c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80118c4:	06d9      	lsls	r1, r3, #27
 80118c6:	d422      	bmi.n	801190e <f_open+0x27e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80118c8:	07b1      	lsls	r1, r6, #30
 80118ca:	d501      	bpl.n	80118d0 <f_open+0x240>
 80118cc:	07d8      	lsls	r0, r3, #31
 80118ce:	d40e      	bmi.n	80118ee <f_open+0x25e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80118d0:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80118d4:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80118d6:	2e00      	cmp	r6, #0
 80118d8:	f47f af70 	bne.w	80117bc <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80118dc:	4611      	mov	r1, r2
 80118de:	e771      	b.n	80117c4 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80118e0:	2510      	movs	r5, #16
 80118e2:	e6e7      	b.n	80116b4 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80118e4:	0730      	lsls	r0, r6, #28
 80118e6:	f53f af25 	bmi.w	8011734 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	e76a      	b.n	80117c4 <f_open+0x134>
						res = FR_DENIED;
 80118ee:	2507      	movs	r5, #7
 80118f0:	e6e0      	b.n	80116b4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 80118f2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80118f6:	f1b8 0f00 	cmp.w	r8, #0
 80118fa:	d092      	beq.n	8011822 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118fc:	4540      	cmp	r0, r8
 80118fe:	d190      	bne.n	8011822 <f_open+0x192>
 8011900:	6958      	ldr	r0, [r3, #20]
 8011902:	4560      	cmp	r0, ip
 8011904:	d18d      	bne.n	8011822 <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
 8011906:	6998      	ldr	r0, [r3, #24]
 8011908:	4586      	cmp	lr, r0
 801190a:	d18a      	bne.n	8011822 <f_open+0x192>
 801190c:	e780      	b.n	8011810 <f_open+0x180>
					res = FR_NO_FILE;
 801190e:	2504      	movs	r5, #4
 8011910:	e6d0      	b.n	80116b4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011912:	6958      	ldr	r0, [r3, #20]
 8011914:	4560      	cmp	r0, ip
 8011916:	f47f aef9 	bne.w	801170c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 801191a:	6998      	ldr	r0, [r3, #24]
 801191c:	4586      	cmp	lr, r0
 801191e:	f47f aef5 	bne.w	801170c <f_open+0x7c>
 8011922:	e775      	b.n	8011810 <f_open+0x180>
 8011924:	6898      	ldr	r0, [r3, #8]
 8011926:	4570      	cmp	r0, lr
 8011928:	f47f af67 	bne.w	80117fa <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801192c:	4628      	mov	r0, r5
 801192e:	e770      	b.n	8011812 <f_open+0x182>
				fp->clust = clst;
 8011930:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011932:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8011936:	2b00      	cmp	r3, #0
 8011938:	f43f aebe 	beq.w	80116b8 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801193c:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 801193e:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011940:	6983      	ldr	r3, [r0, #24]
 8011942:	3b02      	subs	r3, #2
 8011944:	429e      	cmp	r6, r3
 8011946:	f4bf af49 	bcs.w	80117dc <f_open+0x14c>
	return clst * fs->csize + fs->database;
 801194a:	8942      	ldrh	r2, [r0, #10]
 801194c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801194e:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011952:	2a00      	cmp	r2, #0
 8011954:	f43f af42 	beq.w	80117dc <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011958:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801195c:	4651      	mov	r1, sl
 801195e:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011960:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011962:	7840      	ldrb	r0, [r0, #1]
 8011964:	f7fd fbc0 	bl	800f0e8 <disk_read>
 8011968:	2800      	cmp	r0, #0
 801196a:	f43f aea5 	beq.w	80116b8 <f_open+0x28>
 801196e:	2501      	movs	r5, #1
 8011970:	e6a0      	b.n	80116b4 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011972:	3e01      	subs	r6, #1
 8011974:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8011976:	e721      	b.n	80117bc <f_open+0x12c>
 8011978:	20019a64 	.word	0x20019a64
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801197c:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 801197e:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011980:	bf0c      	ite	eq
 8011982:	2301      	moveq	r3, #1
 8011984:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011986:	d1d4      	bne.n	8011932 <f_open+0x2a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011988:	461d      	mov	r5, r3
 801198a:	e693      	b.n	80116b4 <f_open+0x24>

0801198c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011990:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8011992:	2300      	movs	r3, #0
{
 8011994:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8011996:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011998:	b150      	cbz	r0, 80119b0 <f_read+0x24>
 801199a:	6803      	ldr	r3, [r0, #0]
 801199c:	4604      	mov	r4, r0
 801199e:	b13b      	cbz	r3, 80119b0 <f_read+0x24>
 80119a0:	4617      	mov	r7, r2
 80119a2:	781a      	ldrb	r2, [r3, #0]
 80119a4:	b122      	cbz	r2, 80119b0 <f_read+0x24>
 80119a6:	460d      	mov	r5, r1
 80119a8:	88da      	ldrh	r2, [r3, #6]
 80119aa:	8881      	ldrh	r1, [r0, #4]
 80119ac:	4291      	cmp	r1, r2
 80119ae:	d005      	beq.n	80119bc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80119b0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80119b4:	4640      	mov	r0, r8
 80119b6:	b005      	add	sp, #20
 80119b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80119bc:	7858      	ldrb	r0, [r3, #1]
 80119be:	f7fd fb77 	bl	800f0b0 <disk_status>
 80119c2:	07c2      	lsls	r2, r0, #31
 80119c4:	d4f4      	bmi.n	80119b0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80119c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80119ca:	f1b8 0f00 	cmp.w	r8, #0
 80119ce:	d1f1      	bne.n	80119b4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80119d0:	7d23      	ldrb	r3, [r4, #20]
 80119d2:	f013 0301 	ands.w	r3, r3, #1
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	f000 80d8 	beq.w	8011b8c <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 80119dc:	69a1      	ldr	r1, [r4, #24]
 80119de:	68e3      	ldr	r3, [r4, #12]
 80119e0:	1a5b      	subs	r3, r3, r1
 80119e2:	429f      	cmp	r7, r3
 80119e4:	bf28      	it	cs
 80119e6:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 80119e8:	2f00      	cmp	r7, #0
 80119ea:	d0e3      	beq.n	80119b4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80119ec:	f104 0331 	add.w	r3, r4, #49	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80119f0:	46a2      	mov	sl, r4
 80119f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80119f6:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80119f8:	f3c1 0308 	ubfx	r3, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80119fc:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d142      	bne.n	8011a8a <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011a04:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8011a08:	0a4b      	lsrs	r3, r1, #9
 8011a0a:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8011a0c:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8011a10:	d06d      	beq.n	8011aee <f_read+0x162>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011a12:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a14:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8011a18:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a1a:	3b02      	subs	r3, #2
 8011a1c:	4298      	cmp	r0, r3
 8011a1e:	d273      	bcs.n	8011b08 <f_read+0x17c>
	return clst * fs->csize + fs->database;
 8011a20:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8011a24:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8011a28:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d06b      	beq.n	8011b08 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011a30:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8011a34:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011a38:	d36d      	bcc.n	8011b16 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a3a:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011a3e:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a42:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a44:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8011a48:	bf88      	it	hi
 8011a4a:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a4e:	465a      	mov	r2, fp
 8011a50:	4629      	mov	r1, r5
 8011a52:	4643      	mov	r3, r8
 8011a54:	f7fd fb48 	bl	800f0e8 <disk_read>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	f040 8085 	bne.w	8011b68 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011a5e:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8011a62:	2a00      	cmp	r2, #0
 8011a64:	f2c0 80a9 	blt.w	8011bba <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011a68:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011a6c:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8011a6e:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011a70:	440d      	add	r5, r1
 8011a72:	440b      	add	r3, r1
 8011a74:	61a3      	str	r3, [r4, #24]
 8011a76:	6833      	ldr	r3, [r6, #0]
 8011a78:	440b      	add	r3, r1
 8011a7a:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8011a7c:	f000 80b3 	beq.w	8011be6 <f_read+0x25a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011a80:	69a1      	ldr	r1, [r4, #24]
 8011a82:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0bc      	beq.n	8011a04 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011a8a:	1c58      	adds	r0, r3, #1
 8011a8c:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011a90:	4453      	add	r3, sl
 8011a92:	4450      	add	r0, sl
 8011a94:	42b9      	cmp	r1, r7
 8011a96:	eba5 0000 	sub.w	r0, r5, r0
 8011a9a:	bf28      	it	cs
 8011a9c:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a9e:	2802      	cmp	r0, #2
 8011aa0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8011aa4:	d968      	bls.n	8011b78 <f_read+0x1ec>
 8011aa6:	f1bb 0f07 	cmp.w	fp, #7
 8011aaa:	d965      	bls.n	8011b78 <f_read+0x1ec>
 8011aac:	f021 0e03 	bic.w	lr, r1, #3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	449e      	add	lr, r3
			*d++ = *s++;
 8011ab6:	f852 cb04 	ldr.w	ip, [r2], #4
 8011aba:	4596      	cmp	lr, r2
 8011abc:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 8011ac0:	d1f9      	bne.n	8011ab6 <f_read+0x12a>
 8011ac2:	f021 0203 	bic.w	r2, r1, #3
 8011ac6:	4291      	cmp	r1, r2
 8011ac8:	eb05 0002 	add.w	r0, r5, r2
 8011acc:	eb03 0c02 	add.w	ip, r3, r2
 8011ad0:	d0cc      	beq.n	8011a6c <f_read+0xe0>
			*d++ = *s++;
 8011ad2:	5c9b      	ldrb	r3, [r3, r2]
 8011ad4:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 8011ad6:	ebbb 0202 	subs.w	r2, fp, r2
 8011ada:	d0c7      	beq.n	8011a6c <f_read+0xe0>
			*d++ = *s++;
 8011adc:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8011ae0:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8011ae2:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 8011ae4:	d0c2      	beq.n	8011a6c <f_read+0xe0>
			*d++ = *s++;
 8011ae6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8011aea:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 8011aec:	e7be      	b.n	8011a6c <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011aee:	bb39      	cbnz	r1, 8011b40 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011af0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011af2:	2801      	cmp	r0, #1
 8011af4:	d908      	bls.n	8011b08 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011af6:	1c43      	adds	r3, r0, #1
 8011af8:	d036      	beq.n	8011b68 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
 8011afa:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8011afc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011afe:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011b02:	3b02      	subs	r3, #2
 8011b04:	4298      	cmp	r0, r3
 8011b06:	d38b      	bcc.n	8011a20 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011b08:	2302      	movs	r3, #2
 8011b0a:	4698      	mov	r8, r3
 8011b0c:	7563      	strb	r3, [r4, #21]
}
 8011b0e:	4640      	mov	r0, r8
 8011b10:	b005      	add	sp, #20
 8011b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011b16:	6a22      	ldr	r2, [r4, #32]
 8011b18:	455a      	cmp	r2, fp
 8011b1a:	d00b      	beq.n	8011b34 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011b1c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	db3d      	blt.n	8011ba0 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b24:	2301      	movs	r3, #1
 8011b26:	465a      	mov	r2, fp
 8011b28:	4651      	mov	r1, sl
 8011b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011b2e:	f7fd fadb 	bl	800f0e8 <disk_read>
 8011b32:	b9c8      	cbnz	r0, 8011b68 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b34:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8011b36:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b3e:	e7a4      	b.n	8011a8a <f_read+0xfe>
					if (fp->cltbl) {
 8011b40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011b42:	b330      	cbz	r0, 8011b92 <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011b44:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011b46:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011b48:	8949      	ldrh	r1, [r1, #10]
 8011b4a:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011b4e:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011b50:	b929      	cbnz	r1, 8011b5e <f_read+0x1d2>
 8011b52:	e7d9      	b.n	8011b08 <f_read+0x17c>
		cl -= ncl; tbl++;		/* Next fragment */
 8011b54:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011b56:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011b5a:	2900      	cmp	r1, #0
 8011b5c:	d0d4      	beq.n	8011b08 <f_read+0x17c>
		if (cl < ncl) break;	/* In this fragment? */
 8011b5e:	4299      	cmp	r1, r3
 8011b60:	d9f8      	bls.n	8011b54 <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 8011b62:	6840      	ldr	r0, [r0, #4]
 8011b64:	4418      	add	r0, r3
 8011b66:	e7c4      	b.n	8011af2 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b68:	f8dd 8000 	ldr.w	r8, [sp]
 8011b6c:	2301      	movs	r3, #1
}
 8011b6e:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b70:	7563      	strb	r3, [r4, #21]
}
 8011b72:	b005      	add	sp, #20
 8011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b78:	1e6a      	subs	r2, r5, #1
 8011b7a:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 8011b7e:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 8011b82:	4563      	cmp	r3, ip
			*d++ = *s++;
 8011b84:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8011b88:	d1f9      	bne.n	8011b7e <f_read+0x1f2>
 8011b8a:	e76f      	b.n	8011a6c <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011b8c:	f04f 0807 	mov.w	r8, #7
 8011b90:	e710      	b.n	80119b4 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011b92:	69e1      	ldr	r1, [r4, #28]
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	9203      	str	r2, [sp, #12]
 8011b98:	f7fd fea0 	bl	800f8dc <get_fat.isra.0>
 8011b9c:	9a03      	ldr	r2, [sp, #12]
 8011b9e:	e7a8      	b.n	8011af2 <f_read+0x166>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	4651      	mov	r1, sl
 8011ba4:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011ba8:	f7fd faac 	bl	800f104 <disk_write>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d1db      	bne.n	8011b68 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bb0:	7d23      	ldrb	r3, [r4, #20]
 8011bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb6:	7523      	strb	r3, [r4, #20]
 8011bb8:	e7b4      	b.n	8011b24 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011bba:	6a22      	ldr	r2, [r4, #32]
 8011bbc:	eba2 0b0b 	sub.w	fp, r2, fp
 8011bc0:	45c3      	cmp	fp, r8
 8011bc2:	f4bf af51 	bcs.w	8011a68 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011bc6:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 8011bca:	9b01      	ldr	r3, [sp, #4]
 8011bcc:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011bce:	1ad0      	subs	r0, r2, r3
 8011bd0:	2802      	cmp	r0, #2
 8011bd2:	d90b      	bls.n	8011bec <f_read+0x260>
 8011bd4:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8011bd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8011bdc:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8011be0:	4562      	cmp	r2, ip
 8011be2:	d1f9      	bne.n	8011bd8 <f_read+0x24c>
 8011be4:	e740      	b.n	8011a68 <f_read+0xdc>
 8011be6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011bea:	e6e3      	b.n	80119b4 <f_read+0x28>
 8011bec:	3a01      	subs	r2, #1
 8011bee:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8011bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8011bf6:	458c      	cmp	ip, r1
			*d++ = *s++;
 8011bf8:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 8011bfc:	d1f9      	bne.n	8011bf2 <f_read+0x266>
 8011bfe:	e733      	b.n	8011a68 <f_read+0xdc>

08011c00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c04:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8011c06:	2300      	movs	r3, #0
{
 8011c08:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8011c0a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011c0c:	b150      	cbz	r0, 8011c24 <f_write+0x24>
 8011c0e:	6803      	ldr	r3, [r0, #0]
 8011c10:	4604      	mov	r4, r0
 8011c12:	b13b      	cbz	r3, 8011c24 <f_write+0x24>
 8011c14:	4616      	mov	r6, r2
 8011c16:	781a      	ldrb	r2, [r3, #0]
 8011c18:	b122      	cbz	r2, 8011c24 <f_write+0x24>
 8011c1a:	460d      	mov	r5, r1
 8011c1c:	88da      	ldrh	r2, [r3, #6]
 8011c1e:	8881      	ldrh	r1, [r0, #4]
 8011c20:	4291      	cmp	r1, r2
 8011c22:	d005      	beq.n	8011c30 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8011c24:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8011c28:	4640      	mov	r0, r8
 8011c2a:	b005      	add	sp, #20
 8011c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011c30:	7858      	ldrb	r0, [r3, #1]
 8011c32:	f7fd fa3d 	bl	800f0b0 <disk_status>
 8011c36:	07c1      	lsls	r1, r0, #31
 8011c38:	d4f4      	bmi.n	8011c24 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c3e:	f1b8 0f00 	cmp.w	r8, #0
 8011c42:	d1f1      	bne.n	8011c28 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c44:	7d23      	ldrb	r3, [r4, #20]
 8011c46:	079a      	lsls	r2, r3, #30
 8011c48:	f140 80f4 	bpl.w	8011e34 <f_write+0x234>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011c4c:	69a2      	ldr	r2, [r4, #24]
 8011c4e:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011c50:	bf28      	it	cs
 8011c52:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8011c54:	2e00      	cmp	r6, #0
 8011c56:	f000 80cb 	beq.w	8011df0 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c5a:	f504 730c 	add.w	r3, r4, #560	; 0x230
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011c5e:	46a2      	mov	sl, r4
 8011c60:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c62:	f3c2 0308 	ubfx	r3, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011c66:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d160      	bne.n	8011d30 <f_write+0x130>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011c6e:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8011c72:	0a53      	lsrs	r3, r2, #9
 8011c74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8011c78:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 8011c7c:	d110      	bne.n	8011ca0 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	f040 809f 	bne.w	8011dc2 <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c84:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f000 80df 	beq.w	8011e4a <f_write+0x24a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c8c:	2801      	cmp	r0, #1
 8011c8e:	f000 8086 	beq.w	8011d9e <f_write+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c92:	1c43      	adds	r3, r0, #1
 8011c94:	f000 80bd 	beq.w	8011e12 <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011c98:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8011c9a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011c9c:	b903      	cbnz	r3, 8011ca0 <f_write+0xa0>
 8011c9e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011ca0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f2c0 80a7 	blt.w	8011df8 <f_write+0x1f8>
	clst -= 2;
 8011caa:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011cac:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8011cb0:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011cb2:	3b02      	subs	r3, #2
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d272      	bcs.n	8011d9e <f_write+0x19e>
	return clst * fs->csize + fs->database;
 8011cb8:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8011cbc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8011cc0:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011cc4:	2a00      	cmp	r2, #0
 8011cc6:	d06a      	beq.n	8011d9e <f_write+0x19e>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011cc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8011ccc:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011cce:	d36d      	bcc.n	8011dac <f_write+0x1ac>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011cd0:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011cd4:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011cd6:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cd8:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8011cdc:	bf88      	it	hi
 8011cde:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ce8:	f7fd fa0c 	bl	800f104 <disk_write>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f040 8090 	bne.w	8011e12 <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011cf2:	6a21      	ldr	r1, [r4, #32]
 8011cf4:	9a02      	ldr	r2, [sp, #8]
 8011cf6:	9b03      	ldr	r3, [sp, #12]
 8011cf8:	1a8a      	subs	r2, r1, r2
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	f0c0 80b9 	bcc.w	8011e72 <f_write+0x272>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011d00:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8011d04:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011d08:	69a3      	ldr	r3, [r4, #24]
 8011d0a:	4615      	mov	r5, r2
 8011d0c:	68e2      	ldr	r2, [r4, #12]
 8011d0e:	4463      	add	r3, ip
 8011d10:	4293      	cmp	r3, r2
 8011d12:	61a3      	str	r3, [r4, #24]
 8011d14:	bf38      	it	cc
 8011d16:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 8011d18:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011d1c:	60e3      	str	r3, [r4, #12]
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	4463      	add	r3, ip
 8011d22:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8011d24:	d063      	beq.n	8011dee <f_write+0x1ee>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011d26:	69a2      	ldr	r2, [r4, #24]
 8011d28:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d09e      	beq.n	8011c6e <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011d30:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011d34:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011d36:	4453      	add	r3, sl
 8011d38:	45b4      	cmp	ip, r6
 8011d3a:	eba3 0202 	sub.w	r2, r3, r2
 8011d3e:	bf28      	it	cs
 8011d40:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011d42:	2a02      	cmp	r2, #2
 8011d44:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8011d48:	d96a      	bls.n	8011e20 <f_write+0x220>
 8011d4a:	f1bb 0f07 	cmp.w	fp, #7
 8011d4e:	d967      	bls.n	8011e20 <f_write+0x220>
 8011d50:	f02c 0e03 	bic.w	lr, ip, #3
 8011d54:	461a      	mov	r2, r3
 8011d56:	4629      	mov	r1, r5
 8011d58:	449e      	add	lr, r3
			*d++ = *s++;
 8011d5a:	f851 0b04 	ldr.w	r0, [r1], #4
 8011d5e:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8011d62:	4596      	cmp	lr, r2
 8011d64:	d1f9      	bne.n	8011d5a <f_write+0x15a>
 8011d66:	f02c 0103 	bic.w	r1, ip, #3
 8011d6a:	458c      	cmp	ip, r1
 8011d6c:	eb03 0001 	add.w	r0, r3, r1
 8011d70:	eb05 0201 	add.w	r2, r5, r1
 8011d74:	d00e      	beq.n	8011d94 <f_write+0x194>
			*d++ = *s++;
 8011d76:	f815 e001 	ldrb.w	lr, [r5, r1]
 8011d7a:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8011d7e:	ebbb 0101 	subs.w	r1, fp, r1
 8011d82:	d005      	beq.n	8011d90 <f_write+0x190>
			*d++ = *s++;
 8011d84:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 8011d86:	2901      	cmp	r1, #1
			*d++ = *s++;
 8011d88:	7043      	strb	r3, [r0, #1]
 8011d8a:	bf1c      	itt	ne
 8011d8c:	7893      	ldrbne	r3, [r2, #2]
 8011d8e:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8011d90:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8011d94:	7d23      	ldrb	r3, [r4, #20]
 8011d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d9a:	7523      	strb	r3, [r4, #20]
 8011d9c:	e7b4      	b.n	8011d08 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d9e:	2302      	movs	r3, #2
 8011da0:	4698      	mov	r8, r3
 8011da2:	7563      	strb	r3, [r4, #21]
}
 8011da4:	4640      	mov	r0, r8
 8011da6:	b005      	add	sp, #20
 8011da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dac:	6a23      	ldr	r3, [r4, #32]
 8011dae:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8011db0:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011db2:	d002      	beq.n	8011dba <f_write+0x1ba>
 8011db4:	68e1      	ldr	r1, [r4, #12]
 8011db6:	428b      	cmp	r3, r1
 8011db8:	d34f      	bcc.n	8011e5a <f_write+0x25a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8011dbe:	6222      	str	r2, [r4, #32]
 8011dc0:	e7b6      	b.n	8011d30 <f_write+0x130>
					if (fp->cltbl) {
 8011dc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	d038      	beq.n	8011e3a <f_write+0x23a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011dc8:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011dca:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011dcc:	8952      	ldrh	r2, [r2, #10]
 8011dce:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011dd2:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011dd4:	b922      	cbnz	r2, 8011de0 <f_write+0x1e0>
 8011dd6:	e00a      	b.n	8011dee <f_write+0x1ee>
		cl -= ncl; tbl++;		/* Next fragment */
 8011dd8:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011dda:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011dde:	b132      	cbz	r2, 8011dee <f_write+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d2f9      	bcs.n	8011dd8 <f_write+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 8011de4:	6848      	ldr	r0, [r1, #4]
 8011de6:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011de8:	2800      	cmp	r0, #0
 8011dea:	f47f af4f 	bne.w	8011c8c <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011dee:	7d23      	ldrb	r3, [r4, #20]
 8011df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011df4:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8011df6:	e717      	b.n	8011c28 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011df8:	2301      	movs	r3, #1
 8011dfa:	6a22      	ldr	r2, [r4, #32]
 8011dfc:	4651      	mov	r1, sl
 8011dfe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011e02:	f7fd f97f 	bl	800f104 <disk_write>
 8011e06:	b920      	cbnz	r0, 8011e12 <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e08:	7d23      	ldrb	r3, [r4, #20]
 8011e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e0e:	7523      	strb	r3, [r4, #20]
 8011e10:	e74b      	b.n	8011caa <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e12:	2301      	movs	r3, #1
 8011e14:	4698      	mov	r8, r3
 8011e16:	7563      	strb	r3, [r4, #21]
}
 8011e18:	4640      	mov	r0, r8
 8011e1a:	b005      	add	sp, #20
 8011e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e20:	3b01      	subs	r3, #1
 8011e22:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 8011e26:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 8011e2a:	4295      	cmp	r5, r2
			*d++ = *s++;
 8011e2c:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8011e30:	d1f9      	bne.n	8011e26 <f_write+0x226>
 8011e32:	e7af      	b.n	8011d94 <f_write+0x194>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011e34:	f04f 0807 	mov.w	r8, #7
 8011e38:	e6f6      	b.n	8011c28 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011e3a:	69e1      	ldr	r1, [r4, #28]
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f7fe f881 	bl	800ff44 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e42:	2800      	cmp	r0, #0
 8011e44:	f47f af22 	bne.w	8011c8c <f_write+0x8c>
 8011e48:	e7d1      	b.n	8011dee <f_write+0x1ee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011e4a:	4659      	mov	r1, fp
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7fe f879 	bl	800ff44 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e52:	2800      	cmp	r0, #0
 8011e54:	f47f af1a 	bne.w	8011c8c <f_write+0x8c>
 8011e58:	e7c9      	b.n	8011dee <f_write+0x1ee>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4651      	mov	r1, sl
 8011e5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011e62:	9202      	str	r2, [sp, #8]
 8011e64:	f7fd f940 	bl	800f0e8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	d1d2      	bne.n	8011e12 <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e6c:	69a3      	ldr	r3, [r4, #24]
 8011e6e:	9a02      	ldr	r2, [sp, #8]
 8011e70:	e7a3      	b.n	8011dba <f_write+0x1ba>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011e72:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8011e76:	1c42      	adds	r2, r0, #1
 8011e78:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011e7a:	ebaa 0202 	sub.w	r2, sl, r2
 8011e7e:	2a02      	cmp	r2, #2
 8011e80:	d90d      	bls.n	8011e9e <f_write+0x29e>
 8011e82:	4652      	mov	r2, sl
 8011e84:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8011e88:	f851 0b04 	ldr.w	r0, [r1], #4
 8011e8c:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8011e90:	4562      	cmp	r2, ip
 8011e92:	d1f9      	bne.n	8011e88 <f_write+0x288>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011e94:	7d22      	ldrb	r2, [r4, #20]
 8011e96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011e9a:	7522      	strb	r2, [r4, #20]
 8011e9c:	e730      	b.n	8011d00 <f_write+0x100>
 8011e9e:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 8011ea2:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 8011ea6:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8011eaa:	458c      	cmp	ip, r1
			*d++ = *s++;
 8011eac:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8011eb0:	d1f9      	bne.n	8011ea6 <f_write+0x2a6>
 8011eb2:	e7ef      	b.n	8011e94 <f_write+0x294>

08011eb4 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011eb4:	b158      	cbz	r0, 8011ece <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011eb6:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011eb8:	6803      	ldr	r3, [r0, #0]
 8011eba:	4604      	mov	r4, r0
 8011ebc:	b12b      	cbz	r3, 8011eca <f_close+0x16>
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	b11a      	cbz	r2, 8011eca <f_close+0x16>
 8011ec2:	8881      	ldrh	r1, [r0, #4]
 8011ec4:	88da      	ldrh	r2, [r3, #6]
 8011ec6:	4291      	cmp	r1, r2
 8011ec8:	d003      	beq.n	8011ed2 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8011eca:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8011ecc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8011ece:	2009      	movs	r0, #9
}
 8011ed0:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011ed2:	7858      	ldrb	r0, [r3, #1]
 8011ed4:	f7fd f8ec 	bl	800f0b0 <disk_status>
 8011ed8:	07c1      	lsls	r1, r0, #31
 8011eda:	d4f6      	bmi.n	8011eca <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011edc:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011ede:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ee0:	065a      	lsls	r2, r3, #25
 8011ee2:	d53c      	bpl.n	8011f5e <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011ee4:	061b      	lsls	r3, r3, #24
 8011ee6:	d45d      	bmi.n	8011fa4 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8011ee8:	f7fc fff8 	bl	800eedc <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8011eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011eee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8011ef0:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ef2:	4299      	cmp	r1, r3
 8011ef4:	d004      	beq.n	8011f00 <f_close+0x4c>
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f7fd faa4 	bl	800f444 <move_window.part.0>
				if (res == FR_OK) {
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d1e5      	bne.n	8011ecc <f_close+0x18>
					dir = fp->dir_ptr;
 8011f00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f02:	7ad3      	ldrb	r3, [r2, #11]
 8011f04:	f043 0320 	orr.w	r3, r3, #32
 8011f08:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f0a:	68a3      	ldr	r3, [r4, #8]
 8011f0c:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f0e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8011f12:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8011f14:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8011f16:	7809      	ldrb	r1, [r1, #0]
 8011f18:	2903      	cmp	r1, #3
 8011f1a:	d103      	bne.n	8011f24 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011f1c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011f1e:	7513      	strb	r3, [r2, #20]
 8011f20:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8011f22:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f24:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f26:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8011f28:	7596      	strb	r6, [r2, #22]
 8011f2a:	0a19      	lsrs	r1, r3, #8
 8011f2c:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f2e:	7751      	strb	r1, [r2, #29]
 8011f30:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011f32:	0e1b      	lsrs	r3, r3, #24
 8011f34:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8011f36:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f38:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011f3a:	75d3      	strb	r3, [r2, #23]
 8011f3c:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011f3e:	0e36      	lsrs	r6, r6, #24
 8011f40:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f42:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8011f44:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f46:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 8011f48:	2301      	movs	r3, #1
 8011f4a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f4c:	f7fd ff8a 	bl	800fe64 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f50:	7d23      	ldrb	r3, [r4, #20]
 8011f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f56:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d1b7      	bne.n	8011ecc <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f5c:	6825      	ldr	r5, [r4, #0]
 8011f5e:	2d00      	cmp	r5, #0
 8011f60:	d0b3      	beq.n	8011eca <f_close+0x16>
 8011f62:	782b      	ldrb	r3, [r5, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d0b0      	beq.n	8011eca <f_close+0x16>
 8011f68:	88a2      	ldrh	r2, [r4, #4]
 8011f6a:	88eb      	ldrh	r3, [r5, #6]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d1ac      	bne.n	8011eca <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f70:	7868      	ldrb	r0, [r5, #1]
 8011f72:	f7fd f89d 	bl	800f0b0 <disk_status>
 8011f76:	f010 0001 	ands.w	r0, r0, #1
 8011f7a:	d1a6      	bne.n	8011eca <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011f7c:	6923      	ldr	r3, [r4, #16]
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d81c      	bhi.n	8011fbe <f_close+0x10a>
		n = Files[i].ctr;
 8011f84:	4912      	ldr	r1, [pc, #72]	; (8011fd0 <f_close+0x11c>)
 8011f86:	011d      	lsls	r5, r3, #4
 8011f88:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8011f8c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011f8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011f92:	d016      	beq.n	8011fc2 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8011f94:	b1b2      	cbz	r2, 8011fc4 <f_close+0x110>
 8011f96:	3a01      	subs	r2, #1
 8011f98:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8011f9a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011f9c:	b192      	cbz	r2, 8011fc4 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	6023      	str	r3, [r4, #0]
}
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	6a22      	ldr	r2, [r4, #32]
 8011fa8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011fac:	7868      	ldrb	r0, [r5, #1]
 8011fae:	f7fd f8a9 	bl	800f104 <disk_write>
 8011fb2:	b950      	cbnz	r0, 8011fca <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011fb4:	7d23      	ldrb	r3, [r4, #20]
 8011fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fba:	7523      	strb	r3, [r4, #20]
 8011fbc:	e794      	b.n	8011ee8 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011fbe:	2002      	movs	r0, #2
}
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8011fc2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8011fc8:	e7e9      	b.n	8011f9e <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011fca:	2001      	movs	r0, #1
}
 8011fcc:	bd70      	pop	{r4, r5, r6, pc}
 8011fce:	bf00      	nop
 8011fd0:	20019a64 	.word	0x20019a64

08011fd4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011fd6:	b150      	cbz	r0, 8011fee <f_findnext+0x1a>
 8011fd8:	4605      	mov	r5, r0
 8011fda:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011fdc:	4c3a      	ldr	r4, [pc, #232]	; (80120c8 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011fde:	682b      	ldr	r3, [r5, #0]
 8011fe0:	b12b      	cbz	r3, 8011fee <f_findnext+0x1a>
 8011fe2:	781a      	ldrb	r2, [r3, #0]
 8011fe4:	b11a      	cbz	r2, 8011fee <f_findnext+0x1a>
 8011fe6:	88a9      	ldrh	r1, [r5, #4]
 8011fe8:	88da      	ldrh	r2, [r3, #6]
 8011fea:	4291      	cmp	r1, r2
 8011fec:	d002      	beq.n	8011ff4 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8011fee:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8011ff0:	4638      	mov	r0, r7
 8011ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011ff4:	7858      	ldrb	r0, [r3, #1]
 8011ff6:	f7fd f85b 	bl	800f0b0 <disk_status>
 8011ffa:	f010 0101 	ands.w	r1, r0, #1
 8011ffe:	d1f6      	bne.n	8011fee <f_findnext+0x1a>
		if (!fno) {
 8012000:	2e00      	cmp	r6, #0
 8012002:	d058      	beq.n	80120b6 <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 8012004:	4628      	mov	r0, r5
 8012006:	f7fd fd0f 	bl	800fa28 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 801200a:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801200e:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8012010:	d1ee      	bne.n	8011ff0 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012012:	4631      	mov	r1, r6
 8012014:	4628      	mov	r0, r5
 8012016:	f7fd f955 	bl	800f2c4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801201a:	4628      	mov	r0, r5
 801201c:	f7fd fcbe 	bl	800f99c <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012020:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 8012024:	d14d      	bne.n	80120c2 <f_findnext+0xee>
 8012026:	7db3      	ldrb	r3, [r6, #22]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d0e1      	beq.n	8011ff0 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801202c:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8012030:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 8012034:	e00f      	b.n	8012056 <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012036:	3a20      	subs	r2, #32
 8012038:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801203a:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801203e:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012042:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012044:	f1be 0f19 	cmp.w	lr, #25
 8012048:	d817      	bhi.n	801207a <f_findnext+0xa6>
 801204a:	3b20      	subs	r3, #32
 801204c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 801204e:	4293      	cmp	r3, r2
 8012050:	d1c5      	bne.n	8011fde <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8012052:	2b00      	cmp	r3, #0
 8012054:	d0cc      	beq.n	8011ff0 <f_findnext+0x1c>
 8012056:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012058:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801205c:	2b3f      	cmp	r3, #63	; 0x3f
 801205e:	d012      	beq.n	8012086 <f_findnext+0xb2>
 8012060:	2b2a      	cmp	r3, #42	; 0x2a
 8012062:	d010      	beq.n	8012086 <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012064:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012068:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801206a:	2819      	cmp	r0, #25
 801206c:	d9e3      	bls.n	8012036 <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801206e:	2a7f      	cmp	r2, #127	; 0x7f
 8012070:	d9e3      	bls.n	801203a <f_findnext+0x66>
 8012072:	4423      	add	r3, r4
 8012074:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 8012078:	e7df      	b.n	801203a <f_findnext+0x66>
 801207a:	2b7f      	cmp	r3, #127	; 0x7f
 801207c:	d9e7      	bls.n	801204e <f_findnext+0x7a>
 801207e:	4420      	add	r0, r4
 8012080:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 8012084:	e7e3      	b.n	801204e <f_findnext+0x7a>
 8012086:	4694      	mov	ip, r2
				nm = nx = 0;
 8012088:	2300      	movs	r3, #0
 801208a:	f81c eb01 	ldrb.w	lr, [ip], #1
 801208e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8012090:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8012094:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 8012096:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 801209a:	bf0c      	ite	eq
 801209c:	3201      	addeq	r2, #1
 801209e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 80120a0:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 80120a4:	d0f4      	beq.n	8012090 <f_findnext+0xbc>
 80120a6:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 80120aa:	d0f1      	beq.n	8012090 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80120ac:	f7fd f894 	bl	800f1d8 <pattern_matching>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d094      	beq.n	8011fde <f_findnext+0xa>
 80120b4:	e79c      	b.n	8011ff0 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80120b6:	4631      	mov	r1, r6
 80120b8:	4628      	mov	r0, r5
}
 80120ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80120be:	f7fe b811 	b.w	80100e4 <dir_sdi>
 80120c2:	4607      	mov	r7, r0
 80120c4:	e794      	b.n	8011ff0 <f_findnext+0x1c>
 80120c6:	bf00      	nop
 80120c8:	0801b7d4 	.word	0x0801b7d4

080120cc <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	4615      	mov	r5, r2
 80120d2:	4604      	mov	r4, r0
 80120d4:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80120d6:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 80120d8:	2200      	movs	r2, #0
 80120da:	a901      	add	r1, sp, #4
 80120dc:	4668      	mov	r0, sp
 80120de:	9500      	str	r5, [sp, #0]
 80120e0:	f7fd f9ea 	bl	800f4b8 <find_volume>
	if (res == FR_OK) {
 80120e4:	b118      	cbz	r0, 80120ee <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80120e6:	2300      	movs	r3, #0
 80120e8:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 80120ea:	b002      	add	sp, #8
 80120ec:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80120ee:	e9dd 1300 	ldrd	r1, r3, [sp]
 80120f2:	4620      	mov	r0, r4
		obj->fs = fs;
 80120f4:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80120f6:	f7fe fa57 	bl	80105a8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80120fa:	bb08      	cbnz	r0, 8012140 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80120fc:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8012100:	2b00      	cmp	r3, #0
 8012102:	db25      	blt.n	8012150 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012104:	79a3      	ldrb	r3, [r4, #6]
 8012106:	06db      	lsls	r3, r3, #27
 8012108:	d520      	bpl.n	801214c <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801210a:	9b01      	ldr	r3, [sp, #4]
 801210c:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 801210e:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8012110:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8012112:	2803      	cmp	r0, #3
 8012114:	d102      	bne.n	801211c <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012116:	8a89      	ldrh	r1, [r1, #20]
 8012118:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801211c:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 801211e:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012120:	2100      	movs	r1, #0
 8012122:	4620      	mov	r0, r4
				obj->id = fs->id;
 8012124:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012126:	f7fd ffdd 	bl	80100e4 <dir_sdi>
				if (res == FR_OK) {
 801212a:	b948      	cbnz	r0, 8012140 <f_findfirst+0x74>
					if (obj->sclust) {
 801212c:	68a3      	ldr	r3, [r4, #8]
 801212e:	b98b      	cbnz	r3, 8012154 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012130:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 8012132:	4631      	mov	r1, r6
 8012134:	4620      	mov	r0, r4
}
 8012136:	b002      	add	sp, #8
 8012138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 801213c:	f7ff bf4a 	b.w	8011fd4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012140:	2804      	cmp	r0, #4
 8012142:	d1d0      	bne.n	80120e6 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012144:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012146:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012148:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 801214a:	e7ce      	b.n	80120ea <f_findfirst+0x1e>
					res = FR_NO_PATH;
 801214c:	2005      	movs	r0, #5
 801214e:	e7ca      	b.n	80120e6 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	e7e4      	b.n	801211e <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012154:	4601      	mov	r1, r0
 8012156:	4620      	mov	r0, r4
 8012158:	f7fc ffee 	bl	800f138 <inc_lock>
 801215c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801215e:	2800      	cmp	r0, #0
 8012160:	d1e7      	bne.n	8012132 <f_findfirst+0x66>
 8012162:	2012      	movs	r0, #18
 8012164:	e7bf      	b.n	80120e6 <f_findfirst+0x1a>
 8012166:	bf00      	nop

08012168 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8012168:	4b10      	ldr	r3, [pc, #64]	; (80121ac <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801216a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 801216c:	7a5c      	ldrb	r4, [r3, #9]
 801216e:	b9cc      	cbnz	r4, 80121a4 <FATFS_LinkDriver+0x3c>
 8012170:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8012172:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8012176:	7a5c      	ldrb	r4, [r3, #9]
 8012178:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801217a:	7a5c      	ldrb	r4, [r3, #9]
 801217c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012180:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8012182:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8012184:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8012186:	441c      	add	r4, r3
 8012188:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 801218a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 801218c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801218e:	b2e4      	uxtb	r4, r4
 8012190:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8012192:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8012194:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8012196:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8012198:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 801219a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801219c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80121a0:	708b      	strb	r3, [r1, #2]
}
 80121a2:	4770      	bx	lr
  uint8_t ret = 1;
 80121a4:	2001      	movs	r0, #1
}
 80121a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	20019c88 	.word	0x20019c88

080121b0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80121b0:	287f      	cmp	r0, #127	; 0x7f
 80121b2:	d912      	bls.n	80121da <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80121b4:	b971      	cbnz	r1, 80121d4 <ff_convert+0x24>
 80121b6:	4b0c      	ldr	r3, [pc, #48]	; (80121e8 <ff_convert+0x38>)
 80121b8:	e001      	b.n	80121be <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80121ba:	2980      	cmp	r1, #128	; 0x80
 80121bc:	d00c      	beq.n	80121d8 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 80121be:	f833 2b02 	ldrh.w	r2, [r3], #2
 80121c2:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 80121c6:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 80121c8:	4282      	cmp	r2, r0
 80121ca:	d1f6      	bne.n	80121ba <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 80121cc:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 80121d0:	b280      	uxth	r0, r0
 80121d2:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80121d4:	28ff      	cmp	r0, #255	; 0xff
 80121d6:	d901      	bls.n	80121dc <ff_convert+0x2c>
 80121d8:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80121da:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80121dc:	4b02      	ldr	r3, [pc, #8]	; (80121e8 <ff_convert+0x38>)
 80121de:	3880      	subs	r0, #128	; 0x80
 80121e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	0801b864 	.word	0x0801b864

080121ec <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80121ec:	4b22      	ldr	r3, [pc, #136]	; (8012278 <ff_wtoupper+0x8c>)
 80121ee:	4a23      	ldr	r2, [pc, #140]	; (801227c <ff_wtoupper+0x90>)
 80121f0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80121f4:	bf28      	it	cs
 80121f6:	4613      	movcs	r3, r2
{
 80121f8:	b510      	push	{r4, lr}
 80121fa:	3304      	adds	r3, #4
 80121fc:	e001      	b.n	8012202 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80121fe:	3304      	adds	r3, #4
 8012200:	b1da      	cbz	r2, 801223a <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 8012202:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8012206:	461c      	mov	r4, r3
 8012208:	b1b1      	cbz	r1, 8012238 <ff_wtoupper+0x4c>
 801220a:	4288      	cmp	r0, r1
 801220c:	d314      	bcc.n	8012238 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801220e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8012212:	fa5f fc82 	uxtb.w	ip, r2
 8012216:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8012218:	eb0c 0e01 	add.w	lr, ip, r1
 801221c:	4570      	cmp	r0, lr
 801221e:	daee      	bge.n	80121fe <ff_wtoupper+0x12>
			switch (cmd) {
 8012220:	2a08      	cmp	r2, #8
 8012222:	d809      	bhi.n	8012238 <ff_wtoupper+0x4c>
 8012224:	e8df f002 	tbb	[pc, r2]
 8012228:	19161005 	.word	0x19161005
 801222c:	25221f1c 	.word	0x25221f1c
 8012230:	0c          	.byte	0x0c
 8012231:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012232:	1a41      	subs	r1, r0, r1
 8012234:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8012238:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 801223a:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 801223e:	e7dc      	b.n	80121fa <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012240:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8012244:	b280      	uxth	r0, r0
}
 8012246:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012248:	1a43      	subs	r3, r0, r1
 801224a:	f003 0301 	and.w	r3, r3, #1
 801224e:	1ac0      	subs	r0, r0, r3
 8012250:	b280      	uxth	r0, r0
}
 8012252:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8012254:	3810      	subs	r0, #16
 8012256:	b280      	uxth	r0, r0
}
 8012258:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 801225a:	3820      	subs	r0, #32
 801225c:	b280      	uxth	r0, r0
}
 801225e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012260:	3830      	subs	r0, #48	; 0x30
 8012262:	b280      	uxth	r0, r0
}
 8012264:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012266:	381a      	subs	r0, #26
 8012268:	b280      	uxth	r0, r0
}
 801226a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 801226c:	3008      	adds	r0, #8
 801226e:	b280      	uxth	r0, r0
}
 8012270:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8012272:	3850      	subs	r0, #80	; 0x50
 8012274:	b280      	uxth	r0, r0
}
 8012276:	bd10      	pop	{r4, pc}
 8012278:	0801b964 	.word	0x0801b964
 801227c:	0801bb58 	.word	0x0801bb58

08012280 <tLinearDelay_tick>:
    }
}

float   tLinearDelay_tick (tLinearDelay* const dl, float input)
{
    _tLinearDelay* d = *dl;
 8012280:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 8012282:	edd3 7a01 	vldr	s15, [r3, #4]
 8012286:	6959      	ldr	r1, [r3, #20]
 8012288:	689a      	ldr	r2, [r3, #8]
 801228a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801228e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012292:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8012296:	695a      	ldr	r2, [r3, #20]
 8012298:	69d9      	ldr	r1, [r3, #28]
 801229a:	3201      	adds	r2, #1
 801229c:	428a      	cmp	r2, r1
 801229e:	615a      	str	r2, [r3, #20]
 80122a0:	d101      	bne.n	80122a6 <tLinearDelay_tick+0x26>
 80122a2:	2200      	movs	r2, #0
 80122a4:	615a      	str	r2, [r3, #20]

    uint32_t idx = (uint32_t) d->outPoint;
 80122a6:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 80122a8:	6898      	ldr	r0, [r3, #8]
 80122aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80122ae:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 80122b2:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 80122b4:	ed9c 0a00 	vldr	s0, [ip]
    if ((idx + 1) < d->maxDelay)
 80122b8:	4291      	cmp	r1, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
 80122ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122be:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 80122c2:	d909      	bls.n	80122d8 <tLinearDelay_tick+0x58>
        d->lastOut += d->buff[idx+1] * d->alpha;
 80122c4:	ed9c 7a01 	vldr	s14, [ip, #4]
 80122c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80122cc:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 80122ce:	eea7 0a27 	vfma.f32	s0, s14, s15
 80122d2:	ed83 0a03 	vstr	s0, [r3, #12]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80122d6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 80122d8:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80122dc:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 80122de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80122e2:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 80122e4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80122e8:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop

080122f0 <tLinearDelay_setDelay>:

    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
 80122f0:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 80122f2:	6804      	ldr	r4, [r0, #0]
{
 80122f4:	eef0 0a40 	vmov.f32	s1, s0

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80122f8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012370 <tLinearDelay_setDelay+0x80>
 80122fc:	edd4 7a07 	vldr	s15, [r4, #28]
 8012300:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8012304:	f002 f89c 	bl	8014440 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 8012308:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801230c:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 8012310:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 8012314:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 8012316:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 801231a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012322:	d50a      	bpl.n	801233a <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 8012324:	ee07 2a90 	vmov	s15, r2
 8012328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801232c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8012330:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012338:	d4f8      	bmi.n	801232c <tLinearDelay_setDelay+0x3c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 801233a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801233e:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 8012342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8012346:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801234a:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 801234c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8012350:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8012352:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012356:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801235a:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 801235e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8012362:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012366:	d000      	beq.n	801236a <tLinearDelay_setDelay+0x7a>
}
 8012368:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801236a:	2300      	movs	r3, #0
 801236c:	61a3      	str	r3, [r4, #24]
}
 801236e:	bd10      	pop	{r4, pc}
 8012370:	00000000 	.word	0x00000000

08012374 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 801237a:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 801237c:	6999      	ldr	r1, [r3, #24]
{
 801237e:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8012380:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 8012384:	bf0c      	ite	eq
 8012386:	2700      	moveq	r7, #0
 8012388:	2706      	movne	r7, #6
{
 801238a:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 801238c:	2b1e      	cmp	r3, #30
 801238e:	d93a      	bls.n	8012406 <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 8012390:	2d40      	cmp	r5, #64	; 0x40
 8012392:	d135      	bne.n	8012400 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8012394:	2028      	movs	r0, #40	; 0x28
 8012396:	9101      	str	r1, [sp, #4]
 8012398:	f002 f9d6 	bl	8014748 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 801239c:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 80123a0:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 80123a2:	4604      	mov	r4, r0
 80123a4:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80123a8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 80123ac:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 80123ae:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 80123b0:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 80123b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80123b6:	f007 fad9 	bl	801996c <log2f>
 80123ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80123be:	4a16      	ldr	r2, [pc, #88]	; (8012418 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123c0:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80123c2:	ee17 3a90 	vmov	r3, s15
 80123c6:	3b01      	subs	r3, #1
 80123c8:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80123ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80123ce:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 80123d2:	4a12      	ldr	r2, [pc, #72]	; (801241c <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80123d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123d8:	ee17 0a90 	vmov	r0, s15
 80123dc:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
 80123e0:	fb90 f5f5 	sdiv	r5, r0, r5
 80123e4:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123e6:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 80123e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123ec:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123ee:	f002 f9ab 	bl	8014748 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123f2:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123f4:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80123f6:	9901      	ldr	r1, [sp, #4]
 80123f8:	00d8      	lsls	r0, r3, #3
 80123fa:	f002 f9a5 	bl	8014748 <mpool_alloc>
 80123fe:	61e0      	str	r0, [r4, #28]
}
 8012400:	b002      	add	sp, #8
 8012402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8012406:	4a06      	ldr	r2, [pc, #24]	; (8012420 <tOversampler_init+0xac>)
 8012408:	fa22 f303 	lsr.w	r3, r2, r3
 801240c:	07db      	lsls	r3, r3, #31
 801240e:	d4c1      	bmi.n	8012394 <tOversampler_init+0x20>
}
 8012410:	b002      	add	sp, #8
 8012412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012416:	bf00      	nop
 8012418:	08025294 	.word	0x08025294
 801241c:	200000a8 	.word	0x200000a8
 8012420:	40004045 	.word	0x40004045

08012424 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 8012424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 8012428:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d05b      	beq.n	80124e8 <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 8012430:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 8012432:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8012434:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 8012438:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 801243c:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8012440:	68fc      	ldr	r4, [r7, #12]
 8012442:	46a1      	mov	r9, r4
    
    while (i > 0U)
 8012444:	b3ac      	cbz	r4, 80124b2 <tOversampler_upsample+0x8e>
    j = 1U;
 8012446:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 801244a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80124f0 <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 801244e:	eba4 030e 	sub.w	r3, r4, lr
 8012452:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 8012456:	b325      	cbz	r5, 80124a2 <tOversampler_upsample+0x7e>
 8012458:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 801245a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801245e:	d135      	bne.n	80124cc <tOversampler_upsample+0xa8>
 8012460:	462a      	mov	r2, r5
        ptr1 = pState;
 8012462:	4630      	mov	r0, r6
        sum0 = 0.0f;
 8012464:	eddf 7a22 	vldr	s15, [pc, #136]	; 80124f0 <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 8012468:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 801246c:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801246e:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 8012472:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8012474:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8012478:	d1f6      	bne.n	8012468 <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 801247a:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 801247e:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8012480:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8012484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801248c:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8012490:	d00f      	beq.n	80124b2 <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 8012492:	68fc      	ldr	r4, [r7, #12]
 8012494:	469e      	mov	lr, r3
 8012496:	eba4 030e 	sub.w	r3, r4, lr
 801249a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 801249e:	2d00      	cmp	r5, #0
 80124a0:	d1da      	bne.n	8012458 <tOversampler_upsample+0x34>
 80124a2:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 80124a6:	45f1      	cmp	r9, lr
        j++;
 80124a8:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 80124ac:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 80124b0:	d1ef      	bne.n	8012492 <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80124b2:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 80124b4:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 80124b8:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 80124ba:	d005      	beq.n	80124c8 <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 80124bc:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 80124c0:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80124c2:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 80124c6:	d1f9      	bne.n	80124bc <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 80124c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 80124cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80124f0 <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 80124d0:	462a      	mov	r2, r5
        ptr1 = pState;
 80124d2:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 80124d4:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 80124d8:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80124da:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 80124de:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 80124e0:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80124e4:	d1f6      	bne.n	80124d4 <tOversampler_upsample+0xb0>
 80124e6:	e7c8      	b.n	801247a <tOversampler_upsample+0x56>
        output[0] = input;
 80124e8:	ed81 0a00 	vstr	s0, [r1]
}
 80124ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124f0:	00000000 	.word	0x00000000

080124f4 <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 80124f4:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 80124f6:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 80124f8:	68f3      	ldr	r3, [r6, #12]
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d029      	beq.n	8012552 <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 80124fe:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8012500:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 8012504:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 8012506:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8012508:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 801250a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 801250e:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 8012512:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8012514:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 8012518:	d1f9      	bne.n	801250e <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801251a:	b1f2      	cbz	r2, 801255a <tOversampler_downsample+0x66>
 801251c:	4613      	mov	r3, r2
    acc0 = 0.0f;
 801251e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801256c <tOversampler_downsample+0x78>
    px0 = pState;
 8012522:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8012524:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 8012528:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 801252a:	ecf1 7a01 	vldmia	r1!, {s15}
 801252e:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8012532:	d1f7      	bne.n	8012524 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 8012534:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8012536:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 8012538:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 801253a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 801253e:	d006      	beq.n	801254e <tOversampler_downsample+0x5a>
 8012540:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 8012542:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 8012546:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8012548:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 801254c:	d1f9      	bne.n	8012542 <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 801254e:	bc70      	pop	{r4, r5, r6}
 8012550:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 8012552:	ed91 0a00 	vldr	s0, [r1]
}
 8012556:	bc70      	pop	{r4, r5, r6}
 8012558:	4770      	bx	lr
    pState = pState + os->ratio;
 801255a:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 801255c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 8012560:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 8012562:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801256c <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 8012566:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 801256a:	e7e9      	b.n	8012540 <tOversampler_downsample+0x4c>
 801256c:	00000000 	.word	0x00000000

08012570 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8012570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012572:	698f      	ldr	r7, [r1, #24]
{
 8012574:	4606      	mov	r6, r0
 8012576:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8012578:	2020      	movs	r0, #32
 801257a:	4639      	mov	r1, r7
 801257c:	f002 f8e4 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8012580:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8012584:	4a10      	ldr	r2, [pc, #64]	; (80125c8 <tCrusher_init+0x58>)
    c->op = 4;
 8012586:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8012588:	6030      	str	r0, [r6, #0]
 801258a:	4604      	mov	r4, r0
    c->op = 4;
 801258c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 801258e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8012590:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 8012592:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8012594:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8012596:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8012598:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801259a:	4629      	mov	r1, r5
 801259c:	f002 f8d4 	bl	8014748 <mpool_alloc>
    s->invRatio = 1.0f;
 80125a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 80125a4:	2200      	movs	r2, #0
    s->count = 0;
 80125a6:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80125a8:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80125aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80125cc <tCrusher_init+0x5c>
    s->mempool = m;
 80125ae:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 80125b0:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 80125b2:	6082      	str	r2, [r0, #8]
    s->count = 0;
 80125b4:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80125b6:	eddf 7a06 	vldr	s15, [pc, #24]	; 80125d0 <tCrusher_init+0x60>
 80125ba:	edd4 6a03 	vldr	s13, [r4, #12]
 80125be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80125c2:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80125c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c8:	3951b717 	.word	0x3951b717
 80125cc:	3912ccf6 	.word	0x3912ccf6
 80125d0:	3e99999a 	.word	0x3e99999a

080125d4 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 80125d4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012650 <tCrusher_tick+0x7c>
 80125d8:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80125dc:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 80125de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 80125e2:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 80125e4:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 80125e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80125ec:	6960      	ldr	r0, [r4, #20]
 80125ee:	05c0      	lsls	r0, r0, #23
 80125f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80125f4:	f001 ff1e 	bl	8014434 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80125f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80125fc:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8012600:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012604:	f001 ff1c 	bl	8014440 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 8012608:	edd4 0a04 	vldr	s1, [r4, #16]
 801260c:	f001 ff00 	bl	8014410 <LEAF_round>
    _tSampleReducer* s = *sr;
 8012610:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 8012612:	68da      	ldr	r2, [r3, #12]
 8012614:	edd3 7a01 	vldr	s15, [r3, #4]
 8012618:	ee07 2a10 	vmov	s14, r2
 801261c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012628:	dc08      	bgt.n	801263c <tCrusher_tick+0x68>
    s->count++;
 801262a:	3201      	adds	r2, #1
    return s->hold;
 801262c:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 8012630:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 8012632:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 8012636:	ee20 0a27 	vmul.f32	s0, s0, s15
 801263a:	bd10      	pop	{r4, pc}
        s->hold = input;
 801263c:	2201      	movs	r2, #1
 801263e:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 8012642:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 8012644:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8012648:	ee20 0a27 	vmul.f32	s0, s0, s15
 801264c:	bd10      	pop	{r4, pc}
 801264e:	bf00      	nop
 8012650:	459c4000 	.word	0x459c4000

08012654 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8012654:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 8012658:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 801265a:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 801265e:	eeb4 0a67 	vcmp.f32	s0, s15
 8012662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012666:	d809      	bhi.n	801267c <tCrusher_setSamplingRatio+0x28>
 8012668:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012670:	db04      	blt.n	801267c <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 8012672:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 8012676:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8012678:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop

08012680 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012686:	698d      	ldr	r5, [r1, #24]
{
 8012688:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801268a:	206c      	movs	r0, #108	; 0x6c
 801268c:	4629      	mov	r1, r5
 801268e:	f002 f85b 	bl	8014748 <mpool_alloc>
 8012692:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012694:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 8012696:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 801269a:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801269c:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 801269e:	ed93 8a00 	vldr	s16, [r3]
 80126a2:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80126a6:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80126aa:	f007 f87d 	bl	80197a8 <expf>
 80126ae:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80126b2:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80126b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80126ba:	f007 f875 	bl	80197a8 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 80126be:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80126c2:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 80126c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 80126c8:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 80126ca:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80126cc:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 80126ce:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 80126d0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80126d4:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
 80126d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80126d8:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
 80126da:	6363      	str	r3, [r4, #52]	; 0x34
 80126dc:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
 80126de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80126e0:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 80126e2:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 80126e4:	4905      	ldr	r1, [pc, #20]	; (80126fc <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80126e6:	4b06      	ldr	r3, [pc, #24]	; (8012700 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80126e8:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 80126ec:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 80126ee:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 80126f0:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80126f2:	6223      	str	r3, [r4, #32]
}
 80126f4:	ecbd 8b02 	vpop	{d8}
 80126f8:	bd70      	pop	{r4, r5, r6, pc}
 80126fa:	bf00      	nop
 80126fc:	40400000 	.word	0x40400000
 8012700:	3e2aaaab 	.word	0x3e2aaaab

08012704 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 8012704:	b510      	push	{r4, lr}
 8012706:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 801270a:	6804      	ldr	r4, [r0, #0]
{
 801270c:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8012710:	f001 fdfa 	bl	8014308 <fastabsf>
 8012714:	f001 ffac 	bl	8014670 <fasteratodb>
 8012718:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80127cc <tCompressor_tick+0xc8>
 801271c:	eef0 0a40 	vmov.f32	s1, s0
 8012720:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80127d0 <tCompressor_tick+0xcc>
 8012724:	f001 fe8c 	bl	8014440 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 8012728:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 801272c:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8012730:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 8012734:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 8012738:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 801273c:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8012740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012748:	db23      	blt.n	8012792 <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80127cc <tCompressor_tick+0xc8>
 8012750:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8012752:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8012756:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801275a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 801275e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 8012762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8012766:	bf4c      	ite	mi
 8012768:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 801276c:	ed94 6a02 	vldrpl	s12, [r4, #8]
 8012770:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012778:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 801277c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012780:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8012784:	f001 ffa8 	bl	80146d8 <fasterdbtoa>
    return attenuation * in;
}
 8012788:	ee28 0a00 	vmul.f32	s0, s16, s0
 801278c:	ecbd 8b02 	vpop	{d8}
 8012790:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8012792:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 8012796:	edd4 5a07 	vldr	s11, [r4, #28]
 801279a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 80127a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 80127a6:	dd0c      	ble.n	80127c2 <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80127a8:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 80127ac:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 80127b0:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80127b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 80127b6:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80127b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127bc:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 80127c0:	e7c7      	b.n	8012752 <tCompressor_tick+0x4e>
        c->isActive = 1;
 80127c2:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 80127c4:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 80127c8:	6463      	str	r3, [r4, #68]	; 0x44
 80127ca:	e7c2      	b.n	8012752 <tCompressor_tick+0x4e>
 80127cc:	00000000 	.word	0x00000000
 80127d0:	c2b40000 	.word	0xc2b40000

080127d4 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 80127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d6:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 80127da:	699e      	ldr	r6, [r3, #24]
{
 80127dc:	4614      	mov	r4, r2
 80127de:	4607      	mov	r7, r0
 80127e0:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80127e2:	2068      	movs	r0, #104	; 0x68
 80127e4:	4631      	mov	r1, r6
{
 80127e6:	eef0 9a40 	vmov.f32	s19, s0
 80127ea:	eeb0 9a60 	vmov.f32	s18, s1
 80127ee:	eeb0 8a41 	vmov.f32	s16, s2
 80127f2:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80127f6:	f001 ffa7 	bl	8014748 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80127fa:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80127fe:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8012800:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8012802:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012804:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8012808:	eddf 7a22 	vldr	s15, [pc, #136]	; 8012894 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 801280c:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 801280e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8012812:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8012814:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012818:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 801281c:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 801281e:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 8012820:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8012824:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 8012828:	2200      	movs	r2, #0
 801282a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8012898 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 8012832:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012836:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 801283a:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 801283e:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 8012842:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 8012846:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 801284a:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 801284e:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 8012852:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 8012854:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 8012858:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 801285c:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 8012860:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8012864:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012868:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801286c:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012870:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8012874:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8012878:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 801287c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8012880:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012884:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	6643      	str	r3, [r0, #100]	; 0x64
}
 801288c:	ecbd 8b04 	vpop	{d8-d9}
 8012890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012892:	bf00      	nop
 8012894:	4479ffff 	.word	0x4479ffff
 8012898:	00000000 	.word	0x00000000

0801289c <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 801289c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80128a0:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80128a2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 80128a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 80128aa:	bf48      	it	mi
 80128ac:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80128c0 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80128b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 80128b4:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80128b8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	3c23d70a 	.word	0x3c23d70a

080128c4 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 80128c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80128c8:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80128ca:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 80128ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 80128d2:	bf48      	it	mi
 80128d4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80128e8 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80128d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 80128dc:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80128e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	3c23d70a 	.word	0x3c23d70a

080128ec <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 80128ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 80128f0:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 80128f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80128f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fa:	dd02      	ble.n	8012902 <tADSRT_setSustain+0x16>
 80128fc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8012900:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 8012902:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012906:	2200      	movs	r2, #0
 8012908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290c:	bf4c      	ite	mi
 801290e:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 8012910:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop

08012918 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8012918:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801291c:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801291e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8012922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 8012926:	bf48      	it	mi
 8012928:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 801293c <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801292c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8012930:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012934:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8012938:	4770      	bx	lr
 801293a:	bf00      	nop
 801293c:	3c23d70a 	.word	0x3c23d70a

08012940 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 8012940:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8012942:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8012944:	eddf 7a06 	vldr	s15, [pc, #24]	; 8012960 <tADSRT_setLeakFactor+0x20>
 8012948:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 801294c:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8012950:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012954:	f007 f8c8 	bl	8019ae8 <powf>
 8012958:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 801295c:	bd10      	pop	{r4, pc}
 801295e:	bf00      	nop
 8012960:	472c4400 	.word	0x472c4400

08012964 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 8012964:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8012966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012968:	b162      	cbz	r2, 8012984 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 801296a:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 801296c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 801296e:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8012970:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 8012972:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 8012974:	2200      	movs	r2, #0
 8012976:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8012978:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 801297c:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 801297e:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 8012980:	655a      	str	r2, [r3, #84]	; 0x54
}
 8012982:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8012984:	2101      	movs	r1, #1
 8012986:	e7f5      	b.n	8012974 <tADSRT_on+0x10>

08012988 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8012988:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 801298a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801298c:	b11a      	cbz	r2, 8012996 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 801298e:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8012990:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8012992:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 8012994:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 8012996:	4770      	bx	lr

08012998 <tADSRT_tickNoInterp>:
    return adsr->next;
}

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8012998:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 801299a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801299c:	3a01      	subs	r2, #1
 801299e:	2a04      	cmp	r2, #4
 80129a0:	f200 80ba 	bhi.w	8012b18 <tADSRT_tickNoInterp+0x180>
 80129a4:	e8df f002 	tbb	[pc, r2]
 80129a8:	58333c1b 	.word	0x58333c1b
 80129ac:	03          	.byte	0x03
 80129ad:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80129ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80129b2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80129b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80129ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c2:	dd61      	ble.n	8012a88 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 80129c4:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 80129c6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8012b20 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 80129ca:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 80129cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80129d0:	ed83 0a06 	vstr	s0, [r3, #24]
 80129d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129d8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 80129dc:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 80129de:	edd3 7a03 	vldr	s15, [r3, #12]
 80129e2:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80129e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80129ea:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f2:	dd57      	ble.n	8012aa4 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 80129f4:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 80129f6:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 80129fa:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 80129fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012a00:	ed83 0a06 	vstr	s0, [r3, #24]
 8012a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a08:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 8012a0c:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 8012a0e:	ed93 0a06 	vldr	s0, [r3, #24]
 8012a12:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8012a16:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012a1a:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8012a1e:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8012a20:	edd3 7a03 	vldr	s15, [r3, #12]
 8012a24:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8012a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012a2c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a34:	dd48      	ble.n	8012ac8 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 8012a36:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8012a3a:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 8012a3c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8012a40:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 8012a42:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 8012a46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012a4a:	ed83 0a06 	vstr	s0, [r3, #24]
 8012a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a52:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8012a56:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8012a58:	edd3 7a03 	vldr	s15, [r3, #12]
 8012a5c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8012a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012a64:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6c:	dd46      	ble.n	8012afc <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 8012a6e:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 8012a70:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8012b20 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 8012a74:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8012a76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012a7a:	ed83 0a06 	vstr	s0, [r3, #24]
 8012a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a82:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 8012a86:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8012a88:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8012a8c:	685a      	ldr	r2, [r3, #4]
 8012a8e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8012a92:	ee17 1a10 	vmov	r1, s14
 8012a96:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012a9a:	ed92 0a00 	vldr	s0, [r2]
 8012a9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012aa2:	e793      	b.n	80129cc <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8012aa4:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8012aa8:	685a      	ldr	r2, [r3, #4]
 8012aaa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012aae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8012ab2:	ee17 1a10 	vmov	r1, s14
 8012ab6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012aba:	ed92 7a00 	vldr	s14, [r2]
 8012abe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012ac2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012ac6:	e799      	b.n	80129fc <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8012ac8:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ad2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8012ad6:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8012ada:	ee15 1a90 	vmov	r1, s11
 8012ade:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8012ae2:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012ae6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012aea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012aee:	ed92 6a00 	vldr	s12, [r2]
 8012af2:	eea6 0a07 	vfma.f32	s0, s12, s14
 8012af6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012afa:	e7a4      	b.n	8012a46 <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8012afc:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8012b00:	685a      	ldr	r2, [r3, #4]
 8012b02:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8012b06:	ee17 1a10 	vmov	r1, s14
 8012b0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b0e:	ed92 0a00 	vldr	s0, [r2]
 8012b12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b16:	e7ae      	b.n	8012a76 <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 8012b18:	ed93 0a06 	vldr	s0, [r3, #24]
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop
 8012b20:	00000000 	.word	0x00000000

08012b24 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012b2a:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012b2c:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8012b2e:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012b30:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8012b34:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012b36:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8012b3a:	f001 fe05 	bl	8014748 <mpool_alloc>
 8012b3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b42:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8012b78 <tExpSmooth_init+0x54>
 8012b46:	6028      	str	r0, [r5, #0]
 8012b48:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8012b4c:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8012b50:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8012b54:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8012b56:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8012b5a:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8012b5e:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8012b62:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8012b66:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8012b6a:	6863      	ldr	r3, [r4, #4]
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	6183      	str	r3, [r0, #24]
}
 8012b70:	ecbd 8b02 	vpop	{d8}
 8012b74:	bd38      	pop	{r3, r4, r5, pc}
 8012b76:	bf00      	nop
 8012b78:	00000000 	.word	0x00000000

08012b7c <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8012b7c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8012b7e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8012b82:	4770      	bx	lr

08012b84 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8012b84:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8012b86:	edd3 6a04 	vldr	s13, [r3, #16]
 8012b8a:	ed93 0a03 	vldr	s0, [r3, #12]
 8012b8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8012b92:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012b96:	edd3 7a05 	vldr	s15, [r3, #20]
 8012b9a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012b9e:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 8012ba2:	4770      	bx	lr

08012ba4 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012baa:	698d      	ldr	r5, [r1, #24]
{
 8012bac:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8012bae:	201c      	movs	r0, #28
{
 8012bb0:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8012bb4:	4629      	mov	r1, r5
{
 8012bb6:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8012bba:	f001 fdc5 	bl	8014748 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8012bbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8012bc2:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8012bc4:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8012bc6:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8012bc8:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8012bcc:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8012bd0:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8012bd4:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8012bd6:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8012bd8:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8012bda:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8012bdc:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8012be0:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8012be4:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8012be8:	ecbd 8b02 	vpop	{d8}
 8012bec:	bd38      	pop	{r3, r4, r5, pc}
 8012bee:	bf00      	nop

08012bf0 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8012bf0:	6803      	ldr	r3, [r0, #0]
{
 8012bf2:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8012bf6:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8012bfa:	ed83 7a03 	vstr	s14, [r3, #12]
    if (in >= s->prevOut)
 8012bfe:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8012c02:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8012c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8012c0a:	bf94      	ite	ls
 8012c0c:	edd3 6a04 	vldrls	s13, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8012c10:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8012c14:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012c18:	eeb0 0a67 	vmov.f32	s0, s15
 8012c1c:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8012c20:	edc3 7a01 	vstr	s15, [r3, #4]
    return s->currentOut;
}
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop

08012c28 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 8012c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2a:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012c2e:	6996      	ldr	r6, [r2, #24]
{
 8012c30:	4607      	mov	r7, r0
 8012c32:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8012c34:	2044      	movs	r0, #68	; 0x44
 8012c36:	4631      	mov	r1, r6
{
 8012c38:	eef0 8a40 	vmov.f32	s17, s0
 8012c3c:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8012c40:	f001 fd82 	bl	8014748 <mpool_alloc>
 8012c44:	6038      	str	r0, [r7, #0]
 8012c46:	4604      	mov	r4, r0
    svf->mempool = m;
 8012c48:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 8012c4a:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 8012c4c:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012c4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012d00 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
 8012c52:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012c54:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8012c58:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 8012c5a:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 8012c5e:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012c60:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8012c64:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 8012c68:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 8012c6a:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 8012c6c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 8012c70:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012c74:	f007 f898 	bl	8019da8 <tanf>
    svf->k = 1.0f/Q;
 8012c78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012c7c:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 8012c80:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 8012c82:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8012c84:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 8012c88:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 8012c8a:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 8012c8c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012c90:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 8012c94:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012c98:	eeb0 7a67 	vmov.f32	s14, s15
 8012c9c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012ca0:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8012ca4:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012ca8:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8012cac:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8012cb0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8012cb4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8012cb8:	d007      	beq.n	8012cca <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8012cba:	2d02      	cmp	r5, #2
 8012cbc:	d008      	beq.n	8012cd0 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 8012cbe:	b96d      	cbnz	r5, 8012cdc <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8012cc0:	4b10      	ldr	r3, [pc, #64]	; (8012d04 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8012cc2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8012cc6:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8012cc8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8012cca:	ecbd 8b02 	vpop	{d8}
 8012cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 8012cd0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 8012cd4:	6366      	str	r6, [r4, #52]	; 0x34
}
 8012cd6:	ecbd 8b02 	vpop	{d8}
 8012cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 8012cdc:	2d03      	cmp	r5, #3
 8012cde:	d009      	beq.n	8012cf4 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 8012ce0:	2d04      	cmp	r5, #4
 8012ce2:	d1f2      	bne.n	8012cca <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8012ce4:	4a07      	ldr	r2, [pc, #28]	; (8012d04 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 8012ce6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8012cea:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8012cee:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8012cf0:	6363      	str	r3, [r4, #52]	; 0x34
}
 8012cf2:	e7ea      	b.n	8012cca <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 8012cf4:	4b03      	ldr	r3, [pc, #12]	; (8012d04 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8012cf6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 8012cfa:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 8012cfc:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8012cfe:	e7e4      	b.n	8012cca <tSVF_init+0xa2>
 8012d00:	40490fdb 	.word	0x40490fdb
 8012d04:	bf800000 	.word	0xbf800000

08012d08 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8012d08:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012d0a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8012d0e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012d12:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012d16:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012d1a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8012d1e:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012d22:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 8012d26:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 8012d2a:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012d2e:	edd3 2a08 	vldr	s5, [r3, #32]
 8012d32:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012d36:	ed93 2a07 	vldr	s4, [r3, #28]
 8012d3a:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8012d3e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8012d42:	eea2 5a23 	vfma.f32	s10, s4, s7
 8012d46:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012d4a:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012d4e:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012d52:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8012d56:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8012d5a:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8012d5e:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012d62:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8012d66:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8012d6a:	eea3 7a80 	vfma.f32	s14, s7, s0
 8012d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8012d72:	4770      	bx	lr

08012d74 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 8012d74:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012d78:	4a18      	ldr	r2, [pc, #96]	; (8012ddc <tSVF_setFreqFast+0x68>)
 8012d7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 8012d7e:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8012d80:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012d84:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012d88:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8012d8c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012d90:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 8012d94:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012d98:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8012d9c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012da0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012da4:	ed90 6a00 	vldr	s12, [r0]
 8012da8:	ee20 0a25 	vmul.f32	s0, s0, s11
 8012dac:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012db0:	eef0 6a67 	vmov.f32	s13, s15
 8012db4:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012db8:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012dbc:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012dc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 8012dc4:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012dc8:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8012dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8012dd0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8012dd4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8012dd8:	4770      	bx	lr
 8012dda:	bf00      	nop
 8012ddc:	0801bc14 	.word	0x0801bc14

08012de0 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8012de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8012de4:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012de6:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8012dea:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8012dee:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012df2:	eeb0 6a47 	vmov.f32	s12, s14
 8012df6:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8012dfa:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012dfe:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8012e02:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8012e06:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012e0a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8012e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8012e12:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8012e16:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8012e1a:	4770      	bx	lr

08012e1c <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012e22:	698c      	ldr	r4, [r1, #24]
{
 8012e24:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8012e26:	2018      	movs	r0, #24
{
 8012e28:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8012e2c:	4621      	mov	r1, r4
 8012e2e:	f001 fcef 	bl	8014810 <mpool_calloc>
 8012e32:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8012e34:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012e3a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8012e3c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012e3e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8012e42:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012e44:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8012e48:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8012e4a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012e4e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012e52:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8012e56:	ecbd 8b02 	vpop	{d8}
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}

08012e5c <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8012e5c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8012e5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012e62:	ed93 7a02 	vldr	s14, [r3, #8]
 8012e66:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8012e6a:	ed83 0a01 	vstr	s0, [r3, #4]
 8012e6e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8012e72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e76:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8012e7a:	4770      	bx	lr

08012e7c <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8012e7c:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012e7e:	edd3 6a03 	vldr	s13, [r3, #12]
 8012e82:	ed93 7a02 	vldr	s14, [r3, #8]
 8012e86:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012e8a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8012e8e:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8012e92:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012e96:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8012e9a:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8012e9e:	edd3 4a08 	vldr	s9, [r3, #32]
 8012ea2:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012ea6:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012eaa:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8012eae:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8012eb2:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012eb6:	eeb0 5a47 	vmov.f32	s10, s14
 8012eba:	eea4 0a87 	vfma.f32	s0, s9, s14
 8012ebe:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012ec2:	eef0 7a66 	vmov.f32	s15, s13
}
 8012ec6:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012eca:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012ece:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012ed2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8012ed6:	4770      	bx	lr

08012ed8 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8012ed8:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8012eda:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012edc:	eddf 7a98 	vldr	s15, [pc, #608]	; 8013140 <tVZFilter_calcCoeffs+0x268>
{
 8012ee0:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012ee4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8012ee8:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8012eec:	ee68 8a87 	vmul.f32	s17, s17, s14
 8012ef0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012ef4:	eeb0 0a68 	vmov.f32	s0, s17
 8012ef8:	f006 ff56 	bl	8019da8 <tanf>
    
    switch( f->type )
 8012efc:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012efe:	eeb0 8a40 	vmov.f32	s16, s0
 8012f02:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8012f06:	2b0a      	cmp	r3, #10
 8012f08:	f200 8117 	bhi.w	801313a <tVZFilter_calcCoeffs+0x262>
 8012f0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012f10:	002f0026 	.word	0x002f0026
 8012f14:	00410038 	.word	0x00410038
 8012f18:	0056004d 	.word	0x0056004d
 8012f1c:	00a1008b 	.word	0x00a1008b
 8012f20:	010a00b7 	.word	0x010a00b7
 8012f24:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8012f26:	edd4 7a05 	vldr	s15, [r4, #20]
 8012f2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012f2e:	eeb1 7a67 	vneg.f32	s14, s15
 8012f32:	61e3      	str	r3, [r4, #28]
 8012f34:	6263      	str	r3, [r4, #36]	; 0x24
 8012f36:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8012f3e:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012f42:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8012f46:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012f4a:	eee7 6a88 	vfma.f32	s13, s15, s16
 8012f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012f52:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8012f56:	ecbd 8b02 	vpop	{d8}
 8012f5a:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012f62:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012f66:	61e3      	str	r3, [r4, #28]
 8012f68:	6223      	str	r3, [r4, #32]
 8012f6a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8012f6c:	e7e5      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012f74:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8012f78:	6223      	str	r3, [r4, #32]
 8012f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8012f7c:	61e2      	str	r2, [r4, #28]
            break;
 8012f7e:	e7dc      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8012f80:	2300      	movs	r3, #0
 8012f82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012f86:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8012f8a:	61e3      	str	r3, [r4, #28]
 8012f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8012f8e:	6222      	str	r2, [r4, #32]
            break;
 8012f90:	e7d3      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8012f92:	edd4 7a05 	vldr	s15, [r4, #20]
 8012f96:	2300      	movs	r3, #0
 8012f98:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012f9c:	61e3      	str	r3, [r4, #28]
 8012f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8012fa4:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8012fa8:	e7c7      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012faa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012fae:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8012fb0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012fb4:	6222      	str	r2, [r4, #32]
 8012fb6:	61e3      	str	r3, [r4, #28]
 8012fb8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8012fba:	e7be      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012fbc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8012fc0:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8012fc4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012fc8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012fcc:	f006 fd8c 	bl	8019ae8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012fd0:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012fd4:	f006 fee8 	bl	8019da8 <tanf>
            float r  = f->g/wl;
 8012fd8:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012fdc:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8012fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012fe4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8012fe8:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012fec:	ed84 7a07 	vstr	s14, [r4, #28]
 8012ff0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012ff4:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ff8:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8012ffc:	eef0 6a47 	vmov.f32	s13, s14
 8013000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013004:	ee77 7a45 	vsub.f32	s15, s14, s10
 8013008:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801300c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8013010:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013014:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013018:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801301c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013020:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8013024:	e789      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8013026:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801302a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801302e:	edd4 7a05 	vldr	s15, [r4, #20]
 8013032:	eef1 6ac7 	vsqrt.f32	s13, s14
 8013036:	ed84 7a07 	vstr	s14, [r4, #28]
 801303a:	6263      	str	r3, [r4, #36]	; 0x24
 801303c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8013040:	ed84 6a08 	vstr	s12, [r4, #32]
 8013044:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013048:	ee80 8a07 	vdiv.f32	s16, s0, s14
 801304c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8013050:	e773      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8013052:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013056:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801305a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801305e:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013062:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8013066:	61e3      	str	r3, [r4, #28]
 8013068:	ee27 6a27 	vmul.f32	s12, s14, s15
 801306c:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013070:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8013074:	ee20 8a07 	vmul.f32	s16, s0, s14
 8013078:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801307c:	e75d      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 801307e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013082:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013086:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801308a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8013144 <tVZFilter_calcCoeffs+0x26c>
 801308e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013092:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013096:	eeb0 0a48 	vmov.f32	s0, s16
 801309a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801309e:	f001 fb35 	bl	801470c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80130a2:	eddf 0a28 	vldr	s1, [pc, #160]	; 8013144 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80130a6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80130aa:	eeb0 0a68 	vmov.f32	s0, s17
 80130ae:	f001 fb31 	bl	8014714 <minimum>
            f->cB = 1.0f-x*x;
 80130b2:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80130b6:	edd4 7a05 	vldr	s15, [r4, #20]
 80130ba:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80130be:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80130c2:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80130c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80130ca:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80130ce:	ee76 5a06 	vadd.f32	s11, s12, s12
 80130d2:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80130d6:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80130da:	eee6 7a06 	vfma.f32	s15, s12, s12
 80130de:	eee0 7a00 	vfma.f32	s15, s0, s0
 80130e2:	eee0 7a65 	vfms.f32	s15, s0, s11
 80130e6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80130ea:	f001 f8eb 	bl	80142c4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80130ee:	edd4 5a07 	vldr	s11, [r4, #28]
 80130f2:	ed94 6a08 	vldr	s12, [r4, #32]
 80130f6:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80130fa:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80130fe:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8013102:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013106:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 801310a:	ee65 5a80 	vmul.f32	s11, s11, s0
 801310e:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013112:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013116:	edc4 5a07 	vstr	s11, [r4, #28]
 801311a:	ed84 6a08 	vstr	s12, [r4, #32]
 801311e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013122:	e70a      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8013124:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8013128:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801312c:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801312e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8013132:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8013136:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013138:	e6ff      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 801313a:	edd4 7a05 	vldr	s15, [r4, #20]
 801313e:	e6fc      	b.n	8012f3a <tVZFilter_calcCoeffs+0x62>
 8013140:	40490fdb 	.word	0x40490fdb
 8013144:	00000000 	.word	0x00000000

08013148 <tVZFilter_initToPool>:
{
 8013148:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801314a:	6817      	ldr	r7, [r2, #0]
{
 801314c:	4605      	mov	r5, r0
 801314e:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8013150:	204c      	movs	r0, #76	; 0x4c
 8013152:	4639      	mov	r1, r7
{
 8013154:	ed2d 8b04 	vpush	{d8-d9}
 8013158:	b083      	sub	sp, #12
 801315a:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801315e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013162:	ed9f 8a42 	vldr	s16, [pc, #264]	; 801326c <tVZFilter_initToPool+0x124>
{
 8013166:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 801316a:	f001 faed 	bl	8014748 <mpool_alloc>
 801316e:	6028      	str	r0, [r5, #0]
 8013170:	4604      	mov	r4, r0
    f->mempool = m;
 8013172:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013174:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8013178:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801317a:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 801317e:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013182:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8013270 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 8013186:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801318a:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013192:	f001 f955 	bl	8014440 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8013196:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8013274 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 801319a:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801319e:	ee20 6a09 	vmul.f32	s12, s0, s18
 80131a2:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80131a6:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80131aa:	4b33      	ldr	r3, [pc, #204]	; (8013278 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80131ac:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80131b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80131b2:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80131b6:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80131ba:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80131be:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 80131c2:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 80131c4:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80131c8:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 80131cc:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 80131d0:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 80131d4:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80131d8:	f006 fde6 	bl	8019da8 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80131dc:	ed9f 1a27 	vldr	s2, [pc, #156]	; 801327c <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80131e0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80131e4:	eef0 0a68 	vmov.f32	s1, s17
 80131e8:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 80131ec:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80131ee:	f001 f927 	bl	8014440 <LEAF_clip>
 80131f2:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80131f6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80131fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80131fe:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8013202:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8013204:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013208:	f006 fc6e 	bl	8019ae8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801320c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8013210:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8013214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013218:	ee67 7a89 	vmul.f32	s15, s15, s18
 801321c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013220:	f006 fdc2 	bl	8019da8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8013224:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8013228:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 801322c:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 801322e:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8013232:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013236:	ee27 7a07 	vmul.f32	s14, s14, s14
 801323a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801323e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013246:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801324a:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 801324e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013252:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8013256:	f7ff fe3f 	bl	8012ed8 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 801325a:	4628      	mov	r0, r5
}
 801325c:	b003      	add	sp, #12
 801325e:	ecbd 8b04 	vpop	{d8-d9}
 8013262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8013266:	f7ff be37 	b.w	8012ed8 <tVZFilter_calcCoeffs>
 801326a:	bf00      	nop
 801326c:	00000000 	.word	0x00000000
 8013270:	40490fdb 	.word	0x40490fdb
 8013274:	3fb504f3 	.word	0x3fb504f3
 8013278:	3f3504f3 	.word	0x3f3504f3
 801327c:	42c80000 	.word	0x42c80000

08013280 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8013280:	3218      	adds	r2, #24
 8013282:	f7ff bf61 	b.w	8013148 <tVZFilter_initToPool>
 8013286:	bf00      	nop

08013288 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8013288:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801328c:	4baa      	ldr	r3, [pc, #680]	; (8013538 <tVZFilter_setFreqFast+0x2b0>)
 801328e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 8013292:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013296:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 801329a:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801329e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 80132a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80132a6:	ed91 6a01 	vldr	s12, [r1, #4]
{
 80132aa:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 80132ac:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 80132b0:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80132b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80132b6:	edd1 6a00 	vldr	s13, [r1]
 80132ba:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 80132be:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80132c2:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 80132c6:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80132c8:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 80132cc:	2a0a      	cmp	r2, #10
 80132ce:	f200 812f 	bhi.w	8013530 <tVZFilter_setFreqFast+0x2a8>
 80132d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80132d6:	0026      	.short	0x0026
 80132d8:	0038002f 	.word	0x0038002f
 80132dc:	004d0041 	.word	0x004d0041
 80132e0:	009b0056 	.word	0x009b0056
 80132e4:	00cf00b5 	.word	0x00cf00b5
 80132e8:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80132ec:	ed94 7a05 	vldr	s14, [r4, #20]
 80132f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80132f4:	eef1 6a47 	vneg.f32	s13, s14
 80132f8:	61e3      	str	r3, [r4, #28]
 80132fa:	6263      	str	r3, [r4, #36]	; 0x24
 80132fc:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8013300:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8013308:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801330c:	eef0 6a47 	vmov.f32	s13, s14
 8013310:	eee0 6a27 	vfma.f32	s13, s0, s15
 8013314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013318:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801331c:	ecbd 8b02 	vpop	{d8}
 8013320:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013322:	2300      	movs	r3, #0
 8013324:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013328:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801332c:	61e3      	str	r3, [r4, #28]
 801332e:	6223      	str	r3, [r4, #32]
 8013330:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8013332:	e7e5      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013334:	2300      	movs	r3, #0
 8013336:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801333a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801333e:	6223      	str	r3, [r4, #32]
 8013340:	6263      	str	r3, [r4, #36]	; 0x24
 8013342:	61e2      	str	r2, [r4, #28]
            break;
 8013344:	e7dc      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013346:	2300      	movs	r3, #0
 8013348:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801334c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013350:	61e3      	str	r3, [r4, #28]
 8013352:	6263      	str	r3, [r4, #36]	; 0x24
 8013354:	6222      	str	r2, [r4, #32]
            break;
 8013356:	e7d3      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013358:	ed94 7a05 	vldr	s14, [r4, #20]
 801335c:	2300      	movs	r3, #0
 801335e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013362:	61e3      	str	r3, [r4, #28]
 8013364:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013368:	6263      	str	r3, [r4, #36]	; 0x24
 801336a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801336e:	e7c7      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013370:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013374:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8013376:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 801337a:	6222      	str	r2, [r4, #32]
 801337c:	61e3      	str	r3, [r4, #28]
 801337e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013380:	e7be      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8013382:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013386:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 801338a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801338e:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013392:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8013396:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801339a:	f000 ffd7 	bl	801434c <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801339e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80133a2:	eddf 7a66 	vldr	s15, [pc, #408]	; 801353c <tVZFilter_setFreqFast+0x2b4>
 80133a6:	ee28 8a07 	vmul.f32	s16, s16, s14
 80133aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80133ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 80133b2:	f000 ff73 	bl	801429c <fastertanf>
            float r  = f->g/wl;
 80133b6:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80133ba:	eeb0 5a68 	vmov.f32	s10, s17
 80133be:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 80133c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80133c6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80133ca:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80133ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80133d2:	eea7 5aa7 	vfma.f32	s10, s15, s15
 80133d6:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80133da:	ee77 7a65 	vsub.f32	s15, s14, s11
 80133de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80133e2:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80133e6:	f000 ff6d 	bl	80142c4 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80133ea:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 80133ee:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80133f2:	edc4 8a07 	vstr	s17, [r4, #28]
 80133f6:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80133fa:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80133fe:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013402:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013406:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801340a:	e779      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 801340c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8013410:	f000 ff58 	bl	80142c4 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013414:	f000 ff56 	bl	80142c4 <fastsqrtf>
 8013418:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801341c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013420:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013424:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013428:	ed94 7a05 	vldr	s14, [r4, #20]
 801342c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013430:	6263      	str	r3, [r4, #36]	; 0x24
 8013432:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013436:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801343a:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 801343e:	e75f      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8013440:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8013444:	f000 ff3e 	bl	80142c4 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013448:	f000 ff3c 	bl	80142c4 <fastsqrtf>
 801344c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013450:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013454:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013458:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801345c:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013460:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8013464:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013468:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801346a:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 801346e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8013472:	e745      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 8013474:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013478:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801347c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013480:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8013540 <tVZFilter_setFreqFast+0x2b8>
 8013484:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013488:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801348c:	eeb0 0a48 	vmov.f32	s0, s16
 8013490:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013494:	f001 f93a 	bl	801470c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013498:	eddf 0a29 	vldr	s1, [pc, #164]	; 8013540 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801349c:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80134a0:	eeb0 0a68 	vmov.f32	s0, s17
 80134a4:	f001 f936 	bl	8014714 <minimum>
            f->cB = 1.0f-x*x;
 80134a8:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80134ac:	edd4 7a05 	vldr	s15, [r4, #20]
 80134b0:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80134b4:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80134b8:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80134bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80134c0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80134c4:	ee76 5a06 	vadd.f32	s11, s12, s12
 80134c8:	ee38 8a08 	vadd.f32	s16, s16, s16
 80134cc:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80134d0:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80134d4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80134d8:	eee0 7a00 	vfma.f32	s15, s0, s0
 80134dc:	eee0 7a65 	vfms.f32	s15, s0, s11
 80134e0:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80134e4:	f000 feee 	bl	80142c4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80134e8:	edd4 5a07 	vldr	s11, [r4, #28]
 80134ec:	ed94 6a08 	vldr	s12, [r4, #32]
 80134f0:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80134f4:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80134f8:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 80134fc:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8013500:	ee65 5a80 	vmul.f32	s11, s11, s0
 8013504:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013508:	ee26 0a80 	vmul.f32	s0, s13, s0
 801350c:	edc4 5a07 	vstr	s11, [r4, #28]
 8013510:	ed84 6a08 	vstr	s12, [r4, #32]
 8013514:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013518:	e6f2      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 801351a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801351e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8013522:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8013524:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8013528:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 801352c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801352e:	e6e7      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 8013530:	ed94 7a05 	vldr	s14, [r4, #20]
 8013534:	e6e4      	b.n	8013300 <tVZFilter_setFreqFast+0x78>
 8013536:	bf00      	nop
 8013538:	0801bc14 	.word	0x0801bc14
 801353c:	40490fdb 	.word	0x40490fdb
 8013540:	00000000 	.word	0x00000000

08013544 <tVZFilter_setGain>:
{
 8013544:	b538      	push	{r3, r4, r5, lr}
 8013546:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801354a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8013574 <tVZFilter_setGain+0x30>
 801354e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8013578 <tVZFilter_setGain+0x34>
{
 8013552:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8013554:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013556:	f000 ff73 	bl	8014440 <LEAF_clip>
    f->invG = 1.0f/f->G;
 801355a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 801355e:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013560:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 8013564:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013568:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 801356c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8013570:	f7ff bcb2 	b.w	8012ed8 <tVZFilter_calcCoeffs>
 8013574:	457a0000 	.word	0x457a0000
 8013578:	358637bd 	.word	0x358637bd

0801357c <tVZFilter_setResonance>:
{
 801357c:	b538      	push	{r3, r4, r5, lr}
 801357e:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8013582:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80135ac <tVZFilter_setResonance+0x30>
 8013586:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80135b0 <tVZFilter_setResonance+0x34>
{
 801358a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 801358c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801358e:	f000 ff57 	bl	8014440 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8013592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8013596:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8013598:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 801359c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80135a0:	edc5 7a05 	vstr	s15, [r5, #20]
}
 80135a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80135a8:	f7ff bc96 	b.w	8012ed8 <tVZFilter_calcCoeffs>
 80135ac:	42c80000 	.word	0x42c80000
 80135b0:	3c23d70a 	.word	0x3c23d70a

080135b4 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 80135b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 80135b8:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80135ba:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8013830 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 80135be:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 80135c2:	b510      	push	{r4, lr}
 80135c4:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 80135c8:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 80135cc:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 80135d0:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80135d2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80135d6:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 80135da:	ee68 8a87 	vmul.f32	s17, s17, s14
 80135de:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80135e2:	eeb0 0a68 	vmov.f32	s0, s17
 80135e6:	f006 fbdf 	bl	8019da8 <tanf>
    switch( f->type )
 80135ea:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80135ec:	eeb0 8a40 	vmov.f32	s16, s0
 80135f0:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 80135f4:	2b0a      	cmp	r3, #10
 80135f6:	f200 8117 	bhi.w	8013828 <tVZFilter_setSampleRate+0x274>
 80135fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80135fe:	0026      	.short	0x0026
 8013600:	0038002f 	.word	0x0038002f
 8013604:	004d0041 	.word	0x004d0041
 8013608:	008b0056 	.word	0x008b0056
 801360c:	00b700a1 	.word	0x00b700a1
 8013610:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8013614:	edd4 7a05 	vldr	s15, [r4, #20]
 8013618:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801361c:	eeb1 7a67 	vneg.f32	s14, s15
 8013620:	61e3      	str	r3, [r4, #28]
 8013622:	6263      	str	r3, [r4, #36]	; 0x24
 8013624:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 801362c:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013630:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8013634:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013638:	eee7 6a88 	vfma.f32	s13, s15, s16
 801363c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013640:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 8013644:	ecbd 8b02 	vpop	{d8}
 8013648:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801364a:	2300      	movs	r3, #0
 801364c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013650:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013654:	61e3      	str	r3, [r4, #28]
 8013656:	6223      	str	r3, [r4, #32]
 8013658:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 801365a:	e7e5      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801365c:	2300      	movs	r3, #0
 801365e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013662:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013666:	6223      	str	r3, [r4, #32]
 8013668:	6263      	str	r3, [r4, #36]	; 0x24
 801366a:	61e2      	str	r2, [r4, #28]
            break;
 801366c:	e7dc      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 801366e:	2300      	movs	r3, #0
 8013670:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013674:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013678:	61e3      	str	r3, [r4, #28]
 801367a:	6263      	str	r3, [r4, #36]	; 0x24
 801367c:	6222      	str	r2, [r4, #32]
            break;
 801367e:	e7d3      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013680:	edd4 7a05 	vldr	s15, [r4, #20]
 8013684:	2300      	movs	r3, #0
 8013686:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 801368a:	61e3      	str	r3, [r4, #28]
 801368c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013690:	6263      	str	r3, [r4, #36]	; 0x24
 8013692:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8013696:	e7c7      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013698:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801369c:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 801369e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80136a2:	6222      	str	r2, [r4, #32]
 80136a4:	61e3      	str	r3, [r4, #28]
 80136a6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80136a8:	e7be      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80136aa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80136ae:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80136b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80136b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80136ba:	f006 fa15 	bl	8019ae8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80136be:	ee28 0a80 	vmul.f32	s0, s17, s0
 80136c2:	f006 fb71 	bl	8019da8 <tanf>
            float r  = f->g/wl;
 80136c6:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80136ca:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80136ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80136d6:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80136da:	ed84 7a07 	vstr	s14, [r4, #28]
 80136de:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80136e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80136e6:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80136ea:	eef0 6a47 	vmov.f32	s13, s14
 80136ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136f2:	ee77 7a45 	vsub.f32	s15, s14, s10
 80136f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80136fa:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80136fe:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013702:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013706:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801370a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801370e:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8013712:	e789      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8013714:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013718:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801371c:	edd4 7a05 	vldr	s15, [r4, #20]
 8013720:	eef1 6ac7 	vsqrt.f32	s13, s14
 8013724:	ed84 7a07 	vstr	s14, [r4, #28]
 8013728:	6263      	str	r3, [r4, #36]	; 0x24
 801372a:	ee27 6a27 	vmul.f32	s12, s14, s15
 801372e:	ed84 6a08 	vstr	s12, [r4, #32]
 8013732:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013736:	ee80 8a07 	vdiv.f32	s16, s0, s14
 801373a:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801373e:	e773      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8013740:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013744:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013748:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801374c:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013750:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8013754:	61e3      	str	r3, [r4, #28]
 8013756:	ee27 6a27 	vmul.f32	s12, s14, s15
 801375a:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801375e:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8013762:	ee20 8a07 	vmul.f32	s16, s0, s14
 8013766:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801376a:	e75d      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 801376c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013770:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013774:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013778:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8013834 <tVZFilter_setSampleRate+0x280>
 801377c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013780:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013784:	eeb0 0a48 	vmov.f32	s0, s16
 8013788:	eea7 0a67 	vfms.f32	s0, s14, s15
 801378c:	f000 ffbe 	bl	801470c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013790:	eddf 0a28 	vldr	s1, [pc, #160]	; 8013834 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013794:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013798:	eeb0 0a68 	vmov.f32	s0, s17
 801379c:	f000 ffba 	bl	8014714 <minimum>
            f->cB = 1.0f-x*x;
 80137a0:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137a4:	edd4 7a05 	vldr	s15, [r4, #20]
 80137a8:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80137ac:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137b0:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80137b4:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80137b8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137bc:	ee76 5a06 	vadd.f32	s11, s12, s12
 80137c0:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80137c4:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137c8:	eee6 7a06 	vfma.f32	s15, s12, s12
 80137cc:	eee0 7a00 	vfma.f32	s15, s0, s0
 80137d0:	eee0 7a65 	vfms.f32	s15, s0, s11
 80137d4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80137d8:	f000 fd74 	bl	80142c4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80137dc:	edd4 5a07 	vldr	s11, [r4, #28]
 80137e0:	ed94 6a08 	vldr	s12, [r4, #32]
 80137e4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80137e8:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137ec:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 80137f0:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80137f4:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 80137f8:	ee65 5a80 	vmul.f32	s11, s11, s0
 80137fc:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013800:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013804:	edc4 5a07 	vstr	s11, [r4, #28]
 8013808:	ed84 6a08 	vstr	s12, [r4, #32]
 801380c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013810:	e70a      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 8013812:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8013816:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801381a:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801381c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8013820:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8013824:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013826:	e6ff      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
 8013828:	edd4 7a05 	vldr	s15, [r4, #20]
 801382c:	e6fc      	b.n	8013628 <tVZFilter_setSampleRate+0x74>
 801382e:	bf00      	nop
 8013830:	40490fdb 	.word	0x40490fdb
 8013834:	00000000 	.word	0x00000000

08013838 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8013838:	b570      	push	{r4, r5, r6, lr}
 801383a:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 801383e:	698d      	ldr	r5, [r1, #24]
{
 8013840:	eeb0 8a40 	vmov.f32	s16, s0
 8013844:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8013846:	2040      	movs	r0, #64	; 0x40
 8013848:	4629      	mov	r1, r5
{
 801384a:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801384e:	f000 ff7b 	bl	8014748 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8013852:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80138cc <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8013856:	6030      	str	r0, [r6, #0]
 8013858:	4604      	mov	r4, r0
    f->mempool = m;
 801385a:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801385c:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 8013860:	686b      	ldr	r3, [r5, #4]
 8013862:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 8013866:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801386a:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 801386e:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8013872:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013876:	f005 ff63 	bl	8019740 <tan>
    f->r = (7.f * resonance + 0.5f);
 801387a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801387e:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8013882:	4913      	ldr	r1, [pc, #76]	; (80138d0 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 8013884:	4b13      	ldr	r3, [pc, #76]	; (80138d4 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8013886:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 801388a:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 801388e:	2000      	movs	r0, #0
    f->n = 1.836f;
 8013890:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8013892:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 8013896:	4910      	ldr	r1, [pc, #64]	; (80138d8 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 8013898:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 801389c:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 801389e:	4b0f      	ldr	r3, [pc, #60]	; (80138dc <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 80138a0:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 80138a2:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 80138a4:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 80138a6:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 80138a8:	480d      	ldr	r0, [pc, #52]	; (80138e0 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 80138aa:	490e      	ldr	r1, [pc, #56]	; (80138e4 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 80138ac:	4a0e      	ldr	r2, [pc, #56]	; (80138e8 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80138b0:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 80138b4:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 80138b8:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 80138bc:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 80138be:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 80138c0:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 80138c2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80138c4:	ecbd 8b02 	vpop	{d8}
 80138c8:	bd70      	pop	{r4, r5, r6, pc}
 80138ca:	bf00      	nop
 80138cc:	40490fdb 	.word	0x40490fdb
 80138d0:	3feb020c 	.word	0x3feb020c
 80138d4:	3f6b020c 	.word	0x3f6b020c
 80138d8:	3c23d70a 	.word	0x3c23d70a
 80138dc:	3ca3d70a 	.word	0x3ca3d70a
 80138e0:	3cf5c28f 	.word	0x3cf5c28f
 80138e4:	3f0b6efd 	.word	0x3f0b6efd
 80138e8:	3e39e952 	.word	0x3e39e952
 80138ec:	3d23d70a 	.word	0x3d23d70a

080138f0 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 80138f0:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80138f2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80138f6:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8013be0 <tDiodeFilter_tick+0x2f0>
 80138fa:	eddf 7aba 	vldr	s15, [pc, #744]	; 8013be4 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80138fe:	eddf 0aba 	vldr	s1, [pc, #744]	; 8013be8 <tDiodeFilter_tick+0x2f8>
 8013902:	eeb0 1a67 	vmov.f32	s2, s15
{
 8013906:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801390a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801390e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013912:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013916:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 801391a:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801391e:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013922:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8013926:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 801392a:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801392e:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8013932:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013936:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801393a:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801393e:	eea4 7a84 	vfma.f32	s14, s9, s8
 8013942:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013946:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801394a:	ee73 5ac3 	vsub.f32	s11, s7, s6
 801394e:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013952:	ee27 7a22 	vmul.f32	s14, s14, s5
 8013956:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 801395a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801395e:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013962:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013966:	ee77 4a20 	vadd.f32	s9, s14, s1
 801396a:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801396e:	eef0 4a67 	vmov.f32	s9, s15
 8013972:	eee7 4a04 	vfma.f32	s9, s14, s8
 8013976:	eeb0 7a42 	vmov.f32	s14, s4
 801397a:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801397e:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8013982:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8013986:	eeb0 1a67 	vmov.f32	s2, s15
 801398a:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801398e:	eef0 4a67 	vmov.f32	s9, s15
 8013992:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013996:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801399a:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801399e:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80139a2:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 80139a6:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80139aa:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80139ae:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80139b2:	ee24 4a06 	vmul.f32	s8, s8, s12
 80139b6:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 80139ba:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80139be:	ee25 5a25 	vmul.f32	s10, s10, s11
 80139c2:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 80139c6:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80139ca:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 80139ce:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80139d2:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80139d6:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80139da:	eee5 9a88 	vfma.f32	s19, s11, s16
 80139de:	eeb0 8a67 	vmov.f32	s16, s15
 80139e2:	eee1 8a09 	vfma.f32	s17, s2, s18
 80139e6:	eeb0 9a67 	vmov.f32	s18, s15
 80139ea:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80139ee:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80139f2:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80139f6:	ee75 9aa0 	vadd.f32	s19, s11, s1
 80139fa:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80139fe:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a02:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8013a06:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013a0a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a0e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a12:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a16:	eea1 9a25 	vfma.f32	s18, s2, s11
 8013a1a:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a1e:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8013a22:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a26:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a2a:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a2e:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8013a32:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8013a36:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a3a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a3e:	ee31 1a20 	vadd.f32	s2, s2, s1
 8013a42:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a46:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a4a:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013a4e:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a52:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a56:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a5a:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a5e:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013a62:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a66:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a6a:	eeaa aa87 	vfma.f32	s20, s21, s14
 8013a6e:	ee68 aa07 	vmul.f32	s21, s16, s14
 8013a72:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a76:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a7a:	eeea 5a82 	vfma.f32	s11, s21, s4
 8013a7e:	eeb0 1a65 	vmov.f32	s2, s11
 8013a82:	eef0 5a45 	vmov.f32	s11, s10
 8013a86:	eeea 5a89 	vfma.f32	s11, s21, s18
 8013a8a:	eee1 5a27 	vfma.f32	s11, s2, s15
 8013a8e:	ee35 1a09 	vadd.f32	s2, s10, s18
 8013a92:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013a96:	ee66 9a87 	vmul.f32	s19, s13, s14
 8013a9a:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013a9e:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013aa2:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013aa6:	eee1 5a06 	vfma.f32	s11, s2, s12
 8013aaa:	eeb0 1a66 	vmov.f32	s2, s13
 8013aae:	eea9 1a89 	vfma.f32	s2, s19, s18
 8013ab2:	eea2 1a27 	vfma.f32	s2, s4, s15
 8013ab6:	ee34 2a04 	vadd.f32	s4, s8, s8
 8013aba:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013abe:	eeb0 2a41 	vmov.f32	s4, s2
 8013ac2:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8013ac6:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8013aca:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8013ace:	eef4 5a44 	vcmp.f32	s11, s8
 8013ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013ad6:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013ada:	bf14      	ite	ne
 8013adc:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8013ae0:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8013bec <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
 8013ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013ae8:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8013aec:	d069      	beq.n	8013bc2 <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013aee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013af2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afa:	ee37 2a02 	vadd.f32	s4, s14, s4
 8013afe:	d069      	beq.n	8013bd4 <tDiodeFilter_tick+0x2e4>
 8013b00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013b04:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8013b08:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 8013b0c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013b10:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8013b14:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8013b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013b1c:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8013b20:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8013b24:	bf08      	it	eq
 8013b26:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8013bec <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
 8013b2a:	eeb0 0a61 	vmov.f32	s0, s3
 8013b2e:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013b32:	ee38 4a06 	vadd.f32	s8, s16, s12
 8013b36:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013b3a:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013b3e:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8013b42:	eea6 8a20 	vfma.f32	s16, s12, s1
 8013b46:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013b4a:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8013b4e:	eee7 1a84 	vfma.f32	s3, s15, s8
 8013b52:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013b56:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013b5a:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8013b5e:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013b62:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013b66:	ee74 1a60 	vsub.f32	s3, s8, s1
 8013b6a:	ee61 1a86 	vmul.f32	s3, s3, s12
 8013b6e:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013b72:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013b76:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013b7a:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013b7e:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013b82:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8013b86:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013b8a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013b8e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013b92:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013b96:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013b9a:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013b9e:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013ba2:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013ba6:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013baa:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013bae:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013bb2:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013bb6:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8013bba:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
 8013bbe:	f006 b91f 	b.w	8019e00 <tanhf>
    if (t2 == 0.0f)
 8013bc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013bc6:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8013bf0 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
 8013bca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013bec <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
 8013bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd2:	d195      	bne.n	8013b00 <tDiodeFilter_tick+0x210>
 8013bd4:	eddf 5a06 	vldr	s11, [pc, #24]	; 8013bf0 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
 8013bd8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013bec <tDiodeFilter_tick+0x2fc>
 8013bdc:	e794      	b.n	8013b08 <tDiodeFilter_tick+0x218>
 8013bde:	bf00      	nop
 8013be0:	43d20000 	.word	0x43d20000
 8013be4:	446c4000 	.word	0x446c4000
 8013be8:	42d20000 	.word	0x42d20000
 8013bec:	358637bd 	.word	0x358637bd
 8013bf0:	3f800008 	.word	0x3f800008

08013bf4 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8013bf4:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013bf6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013bfa:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8013ee4 <tDiodeFilter_tickEfficient+0x2f0>
 8013bfe:	eddf 7aba 	vldr	s15, [pc, #744]	; 8013ee8 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013c02:	eddf 0aba 	vldr	s1, [pc, #744]	; 8013eec <tDiodeFilter_tickEfficient+0x2f8>
 8013c06:	eeb0 1a67 	vmov.f32	s2, s15
{
 8013c0a:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c0e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c12:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c16:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c1a:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8013c1e:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c22:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c26:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8013c2a:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8013c2e:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013c32:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8013c36:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c3a:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013c3e:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c42:	eea4 7a84 	vfma.f32	s14, s9, s8
 8013c46:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c4a:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013c4e:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8013c52:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c56:	ee27 7a22 	vmul.f32	s14, s14, s5
 8013c5a:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8013c5e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013c62:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c66:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013c6a:	ee77 4a20 	vadd.f32	s9, s14, s1
 8013c6e:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c72:	eef0 4a67 	vmov.f32	s9, s15
 8013c76:	eee7 4a04 	vfma.f32	s9, s14, s8
 8013c7a:	eeb0 7a42 	vmov.f32	s14, s4
 8013c7e:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013c82:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8013c86:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8013c8a:	eeb0 1a67 	vmov.f32	s2, s15
 8013c8e:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013c92:	eef0 4a67 	vmov.f32	s9, s15
 8013c96:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013c9a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013c9e:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013ca2:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013ca6:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8013caa:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013cae:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013cb2:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013cb6:	ee24 4a06 	vmul.f32	s8, s8, s12
 8013cba:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 8013cbe:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013cc2:	ee25 5a25 	vmul.f32	s10, s10, s11
 8013cc6:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8013cca:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013cce:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8013cd2:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013cd6:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013cda:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013cde:	eee5 9a88 	vfma.f32	s19, s11, s16
 8013ce2:	eeb0 8a67 	vmov.f32	s16, s15
 8013ce6:	eee1 8a09 	vfma.f32	s17, s2, s18
 8013cea:	eeb0 9a67 	vmov.f32	s18, s15
 8013cee:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013cf2:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013cf6:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013cfa:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8013cfe:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d02:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013d06:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8013d0a:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013d0e:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013d12:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d16:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013d1a:	eea1 9a25 	vfma.f32	s18, s2, s11
 8013d1e:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d22:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8013d26:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013d2a:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d2e:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013d32:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8013d36:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8013d3a:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d3e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d42:	ee31 1a20 	vadd.f32	s2, s2, s1
 8013d46:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d4a:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d4e:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013d52:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d56:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d5a:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d5e:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d62:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013d66:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d6a:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d6e:	eeaa aa87 	vfma.f32	s20, s21, s14
 8013d72:	ee68 aa07 	vmul.f32	s21, s16, s14
 8013d76:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d7a:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013d7e:	eeea 5a82 	vfma.f32	s11, s21, s4
 8013d82:	eeb0 1a65 	vmov.f32	s2, s11
 8013d86:	eef0 5a45 	vmov.f32	s11, s10
 8013d8a:	eeea 5a89 	vfma.f32	s11, s21, s18
 8013d8e:	eee1 5a27 	vfma.f32	s11, s2, s15
 8013d92:	ee35 1a09 	vadd.f32	s2, s10, s18
 8013d96:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013d9a:	ee66 9a87 	vmul.f32	s19, s13, s14
 8013d9e:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013da2:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013da6:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013daa:	eee1 5a06 	vfma.f32	s11, s2, s12
 8013dae:	eeb0 1a66 	vmov.f32	s2, s13
 8013db2:	eea9 1a89 	vfma.f32	s2, s19, s18
 8013db6:	eea2 1a27 	vfma.f32	s2, s4, s15
 8013dba:	ee34 2a04 	vadd.f32	s4, s8, s8
 8013dbe:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013dc2:	eeb0 2a41 	vmov.f32	s4, s2
 8013dc6:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8013dca:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8013dce:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8013dd2:	eef4 5a44 	vcmp.f32	s11, s8
 8013dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013dda:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013dde:	bf14      	ite	ne
 8013de0:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8013de4:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8013ef0 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
 8013de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013dec:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8013df0:	d069      	beq.n	8013ec6 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013df2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013df6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfe:	ee37 2a02 	vadd.f32	s4, s14, s4
 8013e02:	d069      	beq.n	8013ed8 <tDiodeFilter_tickEfficient+0x2e4>
 8013e04:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013e08:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8013e0c:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 8013e10:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013e14:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8013e18:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8013e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013e20:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8013e24:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8013e28:	bf08      	it	eq
 8013e2a:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8013ef0 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
 8013e2e:	eeb0 0a61 	vmov.f32	s0, s3
 8013e32:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013e36:	ee38 4a06 	vadd.f32	s8, s16, s12
 8013e3a:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013e3e:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013e42:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8013e46:	eea6 8a20 	vfma.f32	s16, s12, s1
 8013e4a:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013e4e:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8013e52:	eee7 1a84 	vfma.f32	s3, s15, s8
 8013e56:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013e5a:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013e5e:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8013e62:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013e66:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013e6a:	ee74 1a60 	vsub.f32	s3, s8, s1
 8013e6e:	ee61 1a86 	vmul.f32	s3, s3, s12
 8013e72:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013e76:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013e7a:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013e7e:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013e82:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013e86:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8013e8a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013e8e:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013e92:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013e96:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013e9a:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013e9e:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013ea2:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013ea6:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013eaa:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013eae:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013eb2:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013eb6:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013eba:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8013ebe:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
 8013ec2:	f000 bad1 	b.w	8014468 <LEAF_tanh>
    if (t2 == 0.0f)
 8013ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013eca:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8013ef4 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
 8013ece:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013ef0 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
 8013ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed6:	d195      	bne.n	8013e04 <tDiodeFilter_tickEfficient+0x210>
 8013ed8:	eddf 5a06 	vldr	s11, [pc, #24]	; 8013ef4 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
 8013edc:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013ef0 <tDiodeFilter_tickEfficient+0x2fc>
 8013ee0:	e794      	b.n	8013e0c <tDiodeFilter_tickEfficient+0x218>
 8013ee2:	bf00      	nop
 8013ee4:	43d20000 	.word	0x43d20000
 8013ee8:	446c4000 	.word	0x446c4000
 8013eec:	42d20000 	.word	0x42d20000
 8013ef0:	358637bd 	.word	0x358637bd
 8013ef4:	3f800008 	.word	0x3f800008

08013ef8 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8013ef8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013efc:	4b0d      	ldr	r3, [pc, #52]	; (8013f34 <tDiodeFilter_setFreqFast+0x3c>)
 8013efe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 8013f02:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8013f04:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8013f08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013f10:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8013f14:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f18:	edd0 6a01 	vldr	s13, [r0, #4]
 8013f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f20:	ed90 7a00 	vldr	s14, [r0]
 8013f24:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013f28:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013f2c:	ed81 0a02 	vstr	s0, [r1, #8]
}
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	0801bc14 	.word	0x0801bc14

08013f38 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013f38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013f3c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8013f40:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8013f44:	eef0 0a67 	vmov.f32	s1, s15
{
 8013f48:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8013f4a:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013f4c:	eee0 0a07 	vfma.f32	s1, s0, s14
 8013f50:	eeb0 0a67 	vmov.f32	s0, s15
 8013f54:	f000 fa74 	bl	8014440 <LEAF_clip>
 8013f58:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8013f5c:	bd10      	pop	{r4, pc}
 8013f5e:	bf00      	nop

08013f60 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8013f60:	b570      	push	{r4, r5, r6, lr}
 8013f62:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013f66:	698d      	ldr	r5, [r1, #24]
{
 8013f68:	eef0 8a40 	vmov.f32	s17, s0
 8013f6c:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013f6e:	2038      	movs	r0, #56	; 0x38
 8013f70:	4629      	mov	r1, r5
{
 8013f72:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013f76:	f000 fbe7 	bl	8014748 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013f7a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013fdc <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013f7e:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 8013f80:	2301      	movs	r3, #1
    f->mempool = m;
 8013f82:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013f84:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 8013f88:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013f8a:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8013f8c:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 8013f90:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013f94:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 8013f98:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 8013f9a:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013f9e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013fa2:	f005 fbcd 	bl	8019740 <tan>
 8013fa6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8013faa:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 8013fae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8013fb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8013fb6:	490a      	ldr	r1, [pc, #40]	; (8013fe0 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 8013fb8:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8013fbc:	4b09      	ldr	r3, [pc, #36]	; (8013fe4 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 8013fbe:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013fc2:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8013fc6:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8013fc8:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8013fca:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8013fcc:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 8013fd0:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8013fd4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8013fd6:	ecbd 8b02 	vpop	{d8}
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	40490fdb 	.word	0x40490fdb
 8013fe0:	3dcccccd 	.word	0x3dcccccd
 8013fe4:	3d23d70a 	.word	0x3d23d70a

08013fe8 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8013fe8:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8013fea:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8014228 <tLadderFilter_tick+0x240>
{
 8013fee:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8013ff2:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8013ff4:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8013ff8:	2900      	cmp	r1, #0
 8013ffa:	f340 8110 	ble.w	801421e <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 8014002:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8014006:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 801400a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 801400e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014012:	ed92 7a08 	vldr	s14, [r2, #32]
 8014016:	ee72 2a27 	vadd.f32	s5, s4, s15
 801401a:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 801401e:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8014022:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014026:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 801402a:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801402e:	ee25 9a28 	vmul.f32	s18, s10, s17
 8014032:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014036:	ee62 2a87 	vmul.f32	s5, s5, s14
 801403a:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801403e:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8014042:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8014044:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014048:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801422c <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801404c:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8014050:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8014052:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8014056:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 801405a:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801405c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8014060:	ee26 6a06 	vmul.f32	s12, s12, s12
 8014064:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014068:	ee22 baa5 	vmul.f32	s22, s5, s11
 801406c:	ee26 ca22 	vmul.f32	s24, s12, s5
 8014070:	ee72 5a25 	vadd.f32	s11, s4, s11
 8014074:	ee32 6a06 	vadd.f32	s12, s4, s12
 8014078:	ee66 baa2 	vmul.f32	s23, s13, s5
 801407c:	eecb ea25 	vdiv.f32	s29, s22, s11
 8014080:	ee8c ba06 	vdiv.f32	s22, s24, s12
 8014084:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8014088:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801408c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 8014090:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014094:	ee77 eaee 	vsub.f32	s29, s15, s29
 8014098:	ee77 6acb 	vsub.f32	s13, s15, s22
 801409c:	ee62 5a87 	vmul.f32	s11, s5, s14
 80140a0:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 80140a4:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80140a8:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 80140ac:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80140b0:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 80140b4:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 80140b8:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 80140bc:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 80140c0:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 80140c4:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 80140c8:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80140cc:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 80140d0:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 80140d4:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 80140d8:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80140dc:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 80140e0:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 80140e4:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80140e8:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 80140ec:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80140f0:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 80140f4:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 80140f8:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 80140fc:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8014100:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014104:	ee66 6a26 	vmul.f32	s13, s12, s13
 8014108:	ee65 5a89 	vmul.f32	s11, s11, s18
 801410c:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8014110:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8014114:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014118:	ee2d 7a07 	vmul.f32	s14, s26, s14
 801411c:	ee65 5a8f 	vmul.f32	s11, s11, s30
 8014120:	ee60 ea8e 	vmul.f32	s29, s1, s28
 8014124:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8014128:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801412c:	eeb0 ea67 	vmov.f32	s28, s15
 8014130:	eeab eaad 	vfma.f32	s28, s23, s27
 8014134:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 8014138:	eeb0 ba67 	vmov.f32	s22, s15
 801413c:	eeec 5a84 	vfma.f32	s11, s25, s8
 8014140:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014144:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 8014148:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 801414c:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014150:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 8014154:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 8014158:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801415c:	eef0 ca48 	vmov.f32	s25, s16
 8014160:	eeab da0b 	vfma.f32	s26, s22, s22
 8014164:	eee5 caa5 	vfma.f32	s25, s11, s11
 8014168:	eef1 5acd 	vsqrt.f32	s11, s26
 801416c:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014170:	ee3b ba65 	vsub.f32	s22, s22, s11
 8014174:	eef0 5a40 	vmov.f32	s11, s0
 8014178:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801417c:	eeb0 ba43 	vmov.f32	s22, s6
 8014180:	eea5 ba25 	vfma.f32	s22, s10, s11
 8014184:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014188:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 801418c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014190:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8014194:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014198:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801419c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80141a0:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 80141a4:	ee36 6a66 	vsub.f32	s12, s12, s13
 80141a8:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80141ac:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80141b0:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80141b4:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 80141b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80141bc:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80141c0:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 80141c4:	ee37 7a4c 	vsub.f32	s14, s14, s24
 80141c8:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 80141cc:	f47f af3e 	bne.w	801404c <tLadderFilter_tick+0x64>
 80141d0:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 80141d4:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 80141d8:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 80141dc:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80141e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801422c <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 80141e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80141e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80141ec:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80141f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80141f4:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 80141f8:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80141fc:	eea0 7aa0 	vfma.f32	s14, s1, s1
 8014200:	eef1 7ae5 	vsqrt.f32	s15, s11
 8014204:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 8014208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801420c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014210:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 8014214:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8014218:	ecbd 8b10 	vpop	{d8-d15}
 801421c:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801421e:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 8014222:	ed9f ca03 	vldr	s24, [pc, #12]	; 8014230 <tLadderFilter_tick+0x248>
 8014226:	e7db      	b.n	80141e0 <tLadderFilter_tick+0x1f8>
 8014228:	3c75c28f 	.word	0x3c75c28f
 801422c:	3c23d70a 	.word	0x3c23d70a
 8014230:	00000000 	.word	0x00000000

08014234 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 8014234:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014238:	4b0f      	ldr	r3, [pc, #60]	; (8014278 <tLadderFilter_setFreqFast+0x44>)
 801423a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 801423e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8014240:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8014244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014248:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801424c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8014250:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014254:	edd0 6a01 	vldr	s13, [r0, #4]
 8014258:	ee77 7a87 	vadd.f32	s15, s15, s14
 801425c:	ed90 7a00 	vldr	s14, [r0]
 8014260:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014264:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 8014268:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801426c:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 8014270:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop
 8014278:	0801bc14 	.word	0x0801bc14

0801427c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 801427c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 801427e:	6804      	ldr	r4, [r0, #0]
{
 8014280:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8014284:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8014288:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014298 <tLadderFilter_setQ+0x1c>
 801428c:	f000 f8d8 	bl	8014440 <LEAF_clip>
 8014290:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8014294:	bd10      	pop	{r4, pc}
 8014296:	bf00      	nop
 8014298:	3e4ccccd 	.word	0x3e4ccccd

0801429c <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 801429c:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 80142a0:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80142bc <fastertanf+0x20>
 80142a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80142c0 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 80142a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 80142ac:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 80142b0:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 80142b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop
 80142bc:	3e502de0 	.word	0x3e502de0
 80142c0:	3ea295ea 	.word	0x3ea295ea

080142c4 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80142c4:	ee10 2a10 	vmov	r2, s0
 80142c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80142cc:	4b0d      	ldr	r3, [pc, #52]	; (8014304 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80142ce:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80142d2:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80142d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80142da:	ee00 3a10 	vmov	s0, r3
 80142de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80142e2:	eea0 7a67 	vfms.f32	s14, s0, s15
 80142e6:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80142ea:	ee10 3a10 	vmov	r3, s0
 80142ee:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80142f2:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80142f6:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 80142fa:	336e      	adds	r3, #110	; 0x6e
}
 80142fc:	ee00 3a10 	vmov	s0, r3
 8014300:	4770      	bx	lr
 8014302:	bf00      	nop
 8014304:	5f3759df 	.word	0x5f3759df

08014308 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8014308:	ee10 3a10 	vmov	r3, s0
 801430c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014310:	ee00 3a10 	vmov	s0, r3
}
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop

08014318 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8014318:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801431c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014348 <fasterexpf+0x30>
 8014320:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8014324:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8014328:	ee20 0a00 	vmul.f32	s0, s0, s0
 801432c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014330:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8014334:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014338:	ee20 0a00 	vmul.f32	s0, s0, s0
 801433c:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8014340:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop
 8014348:	3b800000 	.word	0x3b800000

0801434c <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 801434c:	ee10 3a10 	vmov	r3, s0
 8014350:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014374 <fastPowf+0x28>
 8014354:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8014358:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 801435c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014360:	330b      	adds	r3, #11
 8014362:	ee07 3a90 	vmov	s15, r3
 8014366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801436a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 801436e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8014372:	4770      	bx	lr
 8014374:	4e7de250 	.word	0x4e7de250

08014378 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 8014378:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80143f8 <LEAF_shaper+0x80>
 801437c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014384:	d406      	bmi.n	8014394 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8014386:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80143fc <LEAF_shaper+0x84>
 801438a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014392:	dd02      	ble.n	801439a <LEAF_shaper+0x22>
 8014394:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8014400 <LEAF_shaper+0x88>
}
 8014398:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 801439a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801439e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 8014404 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 80143a2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 80143a6:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8014408 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80143aa:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 80143ae:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80143b2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 80143b6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80143ba:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80143be:	eddf 5a13 	vldr	s11, [pc, #76]	; 801440c <LEAF_shaper+0x94>
 80143c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 80143c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80143ca:	ee66 4aa6 	vmul.f32	s9, s13, s13
 80143ce:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 80143d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80143d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80143da:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80143de:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 80143e2:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80143e6:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80143ea:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 80143ee:	ee20 0a80 	vmul.f32	s0, s1, s0
 80143f2:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 80143f6:	4770      	bx	lr
 80143f8:	bfb504f3 	.word	0xbfb504f3
 80143fc:	3fb504f3 	.word	0x3fb504f3
 8014400:	00000000 	.word	0x00000000
 8014404:	3c800000 	.word	0x3c800000
 8014408:	3f272f05 	.word	0x3f272f05
 801440c:	3d4ccccd 	.word	0x3d4ccccd

08014410 <LEAF_round>:
    rnd = fabsf(rnd);
 8014410:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8014414:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014430 <LEAF_round+0x20>
 8014418:	eef4 0ae7 	vcmpe.f32	s1, s15
 801441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014420:	d905      	bls.n	801442e <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8014422:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8014426:	feb8 0a67 	vrinta.f32	s0, s15
 801442a:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 801442e:	4770      	bx	lr
 8014430:	33d6bf95 	.word	0x33d6bf95

08014434 <LEAF_bitwise_xor>:
    return unholy.f;
 8014434:	ee10 3a10 	vmov	r3, s0
 8014438:	4043      	eors	r3, r0
 801443a:	ee00 3a10 	vmov	s0, r3
}
 801443e:	4770      	bx	lr

08014440 <LEAF_clip>:
    if (min > max)
 8014440:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8014444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014448:	dd05      	ble.n	8014456 <LEAF_clip+0x16>
 801444a:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 801444e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8014452:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 8014456:	eeb4 0ae0 	vcmpe.f32	s0, s1
 801445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445e:	dc01      	bgt.n	8014464 <LEAF_clip+0x24>
    else if (val > tempmax)
 8014460:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 8014464:	4770      	bx	lr
 8014466:	bf00      	nop

08014468 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8014468:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 801446c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014474:	d418      	bmi.n	80144a8 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8014476:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801447a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014482:	dd02      	ble.n	801448a <LEAF_tanh+0x22>
        return 1.0f;
 8014484:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8014488:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 801448a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801448e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8014492:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8014496:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801449a:	eee6 7a86 	vfma.f32	s15, s13, s12
 801449e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80144a2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80144a6:	4770      	bx	lr
        return -1.0f;
 80144a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80144ac:	4770      	bx	lr
 80144ae:	bf00      	nop

080144b0 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 80144b0:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 80144b2:	1e4b      	subs	r3, r1, #1
 80144b4:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 80144b8:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 80144ba:	ee07 3a90 	vmov	s15, r3
 80144be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80144c2:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 80144c6:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 80144ca:	dd16      	ble.n	80144fa <LEAF_generate_exp+0x4a>
 80144cc:	4604      	mov	r4, r0
 80144ce:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80144d2:	eeb0 8a60 	vmov.f32	s16, s1
 80144d6:	eef0 8a40 	vmov.f32	s17, s0
 80144da:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 80144de:	eef0 0a48 	vmov.f32	s1, s16
 80144e2:	eeb0 0a68 	vmov.f32	s0, s17
 80144e6:	f005 faff 	bl	8019ae8 <powf>
 80144ea:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 80144ee:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 80144f2:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80144f6:	42a5      	cmp	r5, r4
 80144f8:	d1f1      	bne.n	80144de <LEAF_generate_exp+0x2e>
    }
}
 80144fa:	ecbd 8b04 	vpop	{d8-d9}
 80144fe:	bd38      	pop	{r3, r4, r5, pc}

08014500 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 8014500:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8014502:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8014506:	460d      	mov	r5, r1
 8014508:	4604      	mov	r4, r0
 801450a:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801450e:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8014512:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8014516:	ee81 0a29 	vdiv.f32	s0, s2, s19
 801451a:	f005 f9c1 	bl	80198a0 <logf>
    float increment = 1.0 / (float)(size-1);
 801451e:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 8014520:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 8014522:	ee07 3a90 	vmov	s15, r3
 8014526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801452a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801452e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8014532:	dd19      	ble.n	8014568 <LEAF_generate_table_skew_non_sym+0x68>
 8014534:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 8014570 <LEAF_generate_table_skew_non_sym+0x70>
 8014538:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 801453c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014574 <LEAF_generate_table_skew_non_sym+0x74>
 8014540:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 8014544:	eeb0 0a48 	vmov.f32	s0, s16
 8014548:	f005 f9aa 	bl	80198a0 <logf>
 801454c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014550:	f005 f92a 	bl	80197a8 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 8014554:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8014558:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 801455c:	eee9 7a80 	vfma.f32	s15, s19, s0
 8014560:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8014564:	42a5      	cmp	r5, r4
 8014566:	d1ed      	bne.n	8014544 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 8014568:	ecbd 8b06 	vpop	{d8-d10}
 801456c:	bd38      	pop	{r3, r4, r5, pc}
 801456e:	bf00      	nop
 8014570:	bfb8aa3b 	.word	0xbfb8aa3b
 8014574:	00000000 	.word	0x00000000

08014578 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 8014578:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 801457a:	1e4b      	subs	r3, r1, #1
 801457c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 8014580:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8014582:	ee07 3a90 	vmov	s15, r3
 8014586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 801458a:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 801458e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 8014592:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8014596:	dd29      	ble.n	80145ec <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 8014598:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8014600 <LEAF_generate_mtof+0x88>
 801459c:	eef0 9a40 	vmov.f32	s19, s0
 80145a0:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 80145a2:	eddf 8a18 	vldr	s17, [pc, #96]	; 8014604 <LEAF_generate_mtof+0x8c>
 80145a6:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 80145aa:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8014608 <LEAF_generate_mtof+0x90>
 80145ae:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 80145b2:	ed9f ca16 	vldr	s24, [pc, #88]	; 801460c <LEAF_generate_mtof+0x94>
 80145b6:	eddf ba16 	vldr	s23, [pc, #88]	; 8014610 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 80145ba:	eeb0 0a69 	vmov.f32	s0, s19
 80145be:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 80145c2:	e006      	b.n	80145d2 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 80145c4:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	dd11      	ble.n	80145f2 <LEAF_generate_mtof+0x7a>
 80145ce:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 80145d2:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80145d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145da:	d8f3      	bhi.n	80145c4 <LEAF_generate_mtof+0x4c>
 80145dc:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 80145e0:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80145e4:	42a5      	cmp	r5, r4
        x += increment;
 80145e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 80145ea:	d1e6      	bne.n	80145ba <LEAF_generate_mtof+0x42>
}
 80145ec:	ecbd 8b0a 	vpop	{d8-d12}
 80145f0:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 80145f2:	ee20 0a0c 	vmul.f32	s0, s0, s24
 80145f6:	f005 f8d7 	bl	80197a8 <expf>
 80145fa:	ee60 7a2b 	vmul.f32	s15, s0, s23
 80145fe:	e7ef      	b.n	80145e0 <LEAF_generate_mtof+0x68>
 8014600:	00000000 	.word	0x00000000
 8014604:	c4bb8000 	.word	0xc4bb8000
 8014608:	44bb6000 	.word	0x44bb6000
 801460c:	3d6c9820 	.word	0x3d6c9820
 8014610:	4102d013 	.word	0x4102d013

08014614 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8014614:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 8014618:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014638 <LEAF_interpolation_linear+0x24>
 801461c:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8014620:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 8014624:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8014628:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 801462c:	eee7 0a80 	vfma.f32	s1, s15, s0
 8014630:	eeb0 0a60 	vmov.f32	s0, s1
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop
 8014638:	00000000 	.word	0x00000000

0801463c <ftom>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
}

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 801463c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014644:	dd0b      	ble.n	801465e <ftom+0x22>
 8014646:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014664 <ftom+0x28>
{
 801464a:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 801464c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014650:	f005 f926 	bl	80198a0 <logf>
 8014654:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014668 <ftom+0x2c>
 8014658:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801465c:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 801465e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801466c <ftom+0x30>
}
 8014662:	4770      	bx	lr
 8014664:	3dfa7ed2 	.word	0x3dfa7ed2
 8014668:	418a7fac 	.word	0x418a7fac
 801466c:	c4bb8000 	.word	0xc4bb8000

08014670 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 8014670:	b500      	push	{lr}
 8014672:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 8014674:	eeb0 0ac0 	vabs.f32	s0, s0
 8014678:	a801      	add	r0, sp, #4
 801467a:	f004 ffb1 	bl	80195e0 <frexpf>
    Y += -4.11852516267426f;
 801467e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80146b4 <fasteratodb+0x44>
 8014682:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80146b8 <fasteratodb+0x48>
    Y += 6.02197014179219f;
 8014686:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80146bc <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 801468a:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 801468e:	eddd 7a01 	vldr	s15, [sp, #4]
 8014692:	eddf 5a0b 	vldr	s11, [pc, #44]	; 80146c0 <fasteratodb+0x50>
 8014696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 801469a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80146c4 <fasteratodb+0x54>
    Y += E;
 801469e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 80146a2:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 80146a6:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 80146aa:	ee27 0a86 	vmul.f32	s0, s15, s12
 80146ae:	b003      	add	sp, #12
 80146b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80146b4:	3f9da1a8 	.word	0x3f9da1a8
 80146b8:	c083caf5 	.word	0xc083caf5
 80146bc:	40c0b3fb 	.word	0x40c0b3fb
 80146c0:	404892e0 	.word	0x404892e0
 80146c4:	40c0a8c2 	.word	0x40c0a8c2

080146c8 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 80146c8:	eddf 7a02 	vldr	s15, [pc, #8]	; 80146d4 <fastdbtoa+0xc>
 80146cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80146d0:	f005 b86a 	b.w	80197a8 <expf>
 80146d4:	3debc8e3 	.word	0x3debc8e3

080146d8 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 80146d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80146dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014708 <fasterdbtoa+0x30>
 80146e0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80146e4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80146e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80146ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80146f0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80146f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80146f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80146fc:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8014700:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	39ebc8e3 	.word	0x39ebc8e3

0801470c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 801470c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop

08014714 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8014714:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop

0801471c <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801471c:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 801471e:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014720:	2510      	movs	r5, #16
    pool->usize  = 0;
 8014722:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014724:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014726:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8014728:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 801472a:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014730:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8014732:	440b      	add	r3, r1
 8014734:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8014736:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 801473a:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 801473c:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8014740:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014742:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8014744:	6183      	str	r3, [r0, #24]
}
 8014746:	4770      	bx	lr

08014748 <mpool_alloc>:
{
 8014748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 801474a:	684a      	ldr	r2, [r1, #4]
{
 801474c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801474e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014750:	3301      	adds	r3, #1
 8014752:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8014754:	694b      	ldr	r3, [r1, #20]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d04a      	beq.n	80147f0 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801475a:	1dc4      	adds	r4, r0, #7
 801475c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014760:	e002      	b.n	8014768 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8014762:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8014764:	2b00      	cmp	r3, #0
 8014766:	d043      	beq.n	80147f0 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8014768:	68da      	ldr	r2, [r3, #12]
 801476a:	42a2      	cmp	r2, r4
 801476c:	d3f9      	bcc.n	8014762 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801476e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014770:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8014772:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014776:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014778:	4281      	cmp	r1, r0
 801477a:	d246      	bcs.n	801480a <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801477c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014780:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8014782:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014784:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014786:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014788:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 801478a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801478e:	4429      	add	r1, r5
 8014790:	5111      	str	r1, [r2, r4]
    node->size = size;
 8014792:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8014794:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8014798:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801479c:	429a      	cmp	r2, r3
        pool->head = new_node;
 801479e:	bf08      	it	eq
 80147a0:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80147a4:	685a      	ldr	r2, [r3, #4]
 80147a6:	b10a      	cbz	r2, 80147ac <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80147a8:	6899      	ldr	r1, [r3, #8]
 80147aa:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80147ac:	689a      	ldr	r2, [r3, #8]
 80147ae:	b10a      	cbz	r2, 80147b4 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80147b0:	6859      	ldr	r1, [r3, #4]
 80147b2:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80147b4:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80147b6:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80147b8:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80147bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80147c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80147c4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80147c6:	4422      	add	r2, r4
 80147c8:	4402      	add	r2, r0
 80147ca:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80147ce:	694a      	ldr	r2, [r1, #20]
 80147d0:	42aa      	cmp	r2, r5
 80147d2:	dd0b      	ble.n	80147ec <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80147d4:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80147d6:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80147d8:	b14a      	cbz	r2, 80147ee <mpool_alloc+0xa6>
 80147da:	1e41      	subs	r1, r0, #1
 80147dc:	460a      	mov	r2, r1
 80147de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80147e2:	68dc      	ldr	r4, [r3, #12]
 80147e4:	3202      	adds	r2, #2
 80147e6:	1a12      	subs	r2, r2, r0
 80147e8:	4294      	cmp	r4, r2
 80147ea:	d8f7      	bhi.n	80147dc <mpool_alloc+0x94>
    return node_to_alloc->pool;
 80147ec:	6818      	ldr	r0, [r3, #0]
}
 80147ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80147f0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80147f4:	1a9b      	subs	r3, r3, r2
 80147f6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80147fc:	bf8c      	ite	hi
 80147fe:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014800:	2100      	movls	r1, #0
 8014802:	f004 fe49 	bl	8019498 <LEAF_internalErrorCallback>
        return NULL;
 8014806:	2000      	movs	r0, #0
}
 8014808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801480a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 801480c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801480e:	e7c3      	b.n	8014798 <mpool_alloc+0x50>

08014810 <mpool_calloc>:
{
 8014810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8014812:	684a      	ldr	r2, [r1, #4]
{
 8014814:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8014816:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014818:	3301      	adds	r3, #1
 801481a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 801481c:	694b      	ldr	r3, [r1, #20]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d044      	beq.n	80148ac <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8014822:	1dc4      	adds	r4, r0, #7
 8014824:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014828:	e002      	b.n	8014830 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 801482a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 801482c:	2b00      	cmp	r3, #0
 801482e:	d03d      	beq.n	80148ac <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8014830:	68da      	ldr	r2, [r3, #12]
 8014832:	42a2      	cmp	r2, r4
 8014834:	d3f9      	bcc.n	801482a <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8014836:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014838:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801483a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801483e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014840:	4281      	cmp	r1, r0
 8014842:	d240      	bcs.n	80148c6 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014844:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014848:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801484a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801484c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801484e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014850:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 8014852:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8014856:	4429      	add	r1, r5
 8014858:	5111      	str	r1, [r2, r4]
    node->size = size;
 801485a:	60e8      	str	r0, [r5, #12]
    node->next = next;
 801485c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8014860:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8014864:	429a      	cmp	r2, r3
        pool->head = new_node;
 8014866:	bf08      	it	eq
 8014868:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 801486c:	685a      	ldr	r2, [r3, #4]
 801486e:	b10a      	cbz	r2, 8014874 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8014870:	6899      	ldr	r1, [r3, #8]
 8014872:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8014874:	689a      	ldr	r2, [r3, #8]
 8014876:	b10a      	cbz	r2, 801487c <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8014878:	6859      	ldr	r1, [r3, #4]
 801487a:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 801487c:	2200      	movs	r2, #0
    node->prev = NULL;
 801487e:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014882:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014886:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801488a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801488c:	4401      	add	r1, r0
 801488e:	68d8      	ldr	r0, [r3, #12]
 8014890:	4401      	add	r1, r0
 8014892:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8014896:	68d9      	ldr	r1, [r3, #12]
 8014898:	b131      	cbz	r1, 80148a8 <mpool_calloc+0x98>
 801489a:	4610      	mov	r0, r2
 801489c:	6819      	ldr	r1, [r3, #0]
 801489e:	5488      	strb	r0, [r1, r2]
 80148a0:	3201      	adds	r2, #1
 80148a2:	68d9      	ldr	r1, [r3, #12]
 80148a4:	4291      	cmp	r1, r2
 80148a6:	d8f9      	bhi.n	801489c <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80148a8:	6818      	ldr	r0, [r3, #0]
}
 80148aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80148ac:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80148b0:	1a9b      	subs	r3, r3, r2
 80148b2:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80148b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80148b8:	bf8c      	ite	hi
 80148ba:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80148bc:	2100      	movls	r1, #0
 80148be:	f004 fdeb 	bl	8019498 <LEAF_internalErrorCallback>
        return NULL;
 80148c2:	2000      	movs	r0, #0
}
 80148c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80148c6:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80148c8:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80148ca:	e7c9      	b.n	8014860 <mpool_calloc+0x50>

080148cc <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80148cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80148d0:	699d      	ldr	r5, [r3, #24]
{
 80148d2:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 80148d4:	6868      	ldr	r0, [r5, #4]
 80148d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80148d8:	3301      	adds	r3, #1
 80148da:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 80148dc:	696b      	ldr	r3, [r5, #20]
 80148de:	b91b      	cbnz	r3, 80148e8 <tMempool_init+0x1c>
 80148e0:	e063      	b.n	80149aa <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 80148e2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d060      	beq.n	80149aa <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 80148e8:	68dc      	ldr	r4, [r3, #12]
 80148ea:	2c17      	cmp	r4, #23
 80148ec:	d9f9      	bls.n	80148e2 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 80148ee:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80148f0:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 80148f4:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 80148f6:	6868      	ldr	r0, [r5, #4]
 80148f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80148fa:	4287      	cmp	r7, r0
 80148fc:	d952      	bls.n	80149a4 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80148fe:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014902:	f100 0c18 	add.w	ip, r0, #24
 8014906:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 801490a:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801490c:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 8014910:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014914:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 8014916:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 801491a:	4420      	add	r0, r4
 801491c:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 8014920:	60e7      	str	r7, [r4, #12]
    node->next = next;
 8014922:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 8014926:	6968      	ldr	r0, [r5, #20]
 8014928:	4283      	cmp	r3, r0
        pool->head = new_node;
 801492a:	bf08      	it	eq
 801492c:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 801492e:	6858      	ldr	r0, [r3, #4]
 8014930:	b108      	cbz	r0, 8014936 <tMempool_init+0x6a>
        node->next->prev = node->prev;
 8014932:	689c      	ldr	r4, [r3, #8]
 8014934:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 8014936:	6898      	ldr	r0, [r3, #8]
 8014938:	b108      	cbz	r0, 801493e <tMempool_init+0x72>
        node->prev->next = node->next;
 801493a:	685c      	ldr	r4, [r3, #4]
 801493c:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 801493e:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014940:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8014942:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014946:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801494a:	68e8      	ldr	r0, [r5, #12]
 801494c:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 8014950:	4430      	add	r0, r6
 8014952:	4404      	add	r4, r0
 8014954:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8014956:	f8dc 0014 	ldr.w	r0, [ip, #20]
 801495a:	42b8      	cmp	r0, r7
 801495c:	dd0c      	ble.n	8014978 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801495e:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8014960:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8014962:	b154      	cbz	r4, 801497a <tMempool_init+0xae>
 8014964:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8014968:	4664      	mov	r4, ip
 801496a:	f80c 7f01 	strb.w	r7, [ip, #1]!
 801496e:	68de      	ldr	r6, [r3, #12]
 8014970:	3402      	adds	r4, #2
 8014972:	1a24      	subs	r4, r4, r0
 8014974:	42a6      	cmp	r6, r4
 8014976:	d8f7      	bhi.n	8014968 <tMempool_init+0x9c>
    return node_to_alloc->pool;
 8014978:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 801497a:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801497e:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 8014980:	686b      	ldr	r3, [r5, #4]
 8014982:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014984:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 8014986:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014988:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 801498a:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 801498c:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014992:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8014994:	440b      	add	r3, r1
    node->prev = prev;
 8014996:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 801499a:	600b      	str	r3, [r1, #0]
    node->size = size;
 801499c:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801499e:	6141      	str	r1, [r0, #20]
}
 80149a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 80149a4:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 80149a6:	685c      	ldr	r4, [r3, #4]
 80149a8:	e7bd      	b.n	8014926 <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 80149aa:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80149ae:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 80149b0:	1a52      	subs	r2, r2, r1
 80149b2:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80149b4:	bf94      	ite	ls
 80149b6:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80149b8:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80149ba:	f004 fd6d 	bl	8019498 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80149be:	2300      	movs	r3, #0
 80149c0:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 80149c4:	686a      	ldr	r2, [r5, #4]
 80149c6:	605a      	str	r2, [r3, #4]
 80149c8:	deff      	udf	#255	; 0xff
 80149ca:	bf00      	nop

080149cc <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80149cc:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80149ce:	698c      	ldr	r4, [r1, #24]
{
 80149d0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80149d2:	2018      	movs	r0, #24
 80149d4:	4621      	mov	r1, r4
 80149d6:	f7ff feb7 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80149da:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80149dc:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80149de:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80149e2:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80149e4:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014a00 <tCycle_init+0x34>
    c->phase    =  0;
 80149ea:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149ee:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80149f2:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149f8:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80149fc:	bd38      	pop	{r3, r4, r5, pc}
 80149fe:	bf00      	nop
 8014a00:	4f800000 	.word	0x4f800000

08014a04 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8014a04:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8014a06:	4910      	ldr	r1, [pc, #64]	; (8014a48 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014a08:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014a4c <tCycle_tick+0x48>
    c->phase += c->inc;
 8014a0c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014a10:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 8014a12:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8014a14:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014a16:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8014a1a:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014a1c:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8014a20:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8014a24:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8014a2a:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 8014a2e:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8014a30:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a38:	ed92 7a00 	vldr	s14, [r2]
 8014a3c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8014a40:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014a44:	4770      	bx	lr
 8014a46:	bf00      	nop
 8014a48:	08023294 	.word	0x08023294
 8014a4c:	35000004 	.word	0x35000004

08014a50 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 8014a50:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a52:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8014a56:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a62:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014a66:	4770      	bx	lr

08014a68 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8014a68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014a6c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014a88 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 8014a70:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a76:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014a7a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014a7e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014a82:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014a86:	4770      	bx	lr
 8014a88:	4f800000 	.word	0x4f800000

08014a8c <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 8014a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8014a8e:	698e      	ldr	r6, [r1, #24]
{
 8014a90:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8014a92:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8014a96:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8014a98:	4631      	mov	r1, r6
 8014a9a:	f7ff fe55 	bl	8014748 <mpool_alloc>
 8014a9e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8014aa0:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8014aa2:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014aa4:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8014aa6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8014aaa:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8014b10 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8014aae:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8014ab0:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8014ab4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 8014ab8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8014b14 <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 8014abc:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8014ac0:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8014ac2:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8014ac6:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8014ac8:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8014aca:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8014acc:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8014ad0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8014ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8014ad8:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 8014ada:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8014adc:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8014ade:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8014ae2:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 8014ae6:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 8014ae8:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 8014aea:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 8014aec:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 8014aee:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8014af0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8014af4:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 8014af6:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8014af8:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8014afc:	f004 fd68 	bl	80195d0 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8014b00:	4629      	mov	r1, r5
 8014b02:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8014b06:	2220      	movs	r2, #32
}
 8014b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8014b0c:	f004 bd60 	b.w	80195d0 <memset>
 8014b10:	3b14f209 	.word	0x3b14f209
 8014b14:	43dc0000 	.word	0x43dc0000

08014b18 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8014b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1c:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 8014b20:	6804      	ldr	r4, [r0, #0]
{
 8014b22:	b083      	sub	sp, #12
 8014b24:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 8014b26:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 8014b2a:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014b2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 8014b32:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 8014b36:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8014b3a:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 8014b42:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8014b46:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014b4a:	f340 80f9 	ble.w	8014d40 <tMBPulse_tick+0x228>
 8014b4e:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8014b52:	f1b9 0f00 	cmp.w	r9, #0
 8014b56:	f340 80bd 	ble.w	8014cd4 <tMBPulse_tick+0x1bc>
 8014b5a:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8014b5e:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014b62:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8014b66:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014b6a:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014b6e:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8014b72:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8014b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014b7a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014b7e:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 8014b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8014b86:	2f00      	cmp	r7, #0
 8014b88:	f040 80ef 	bne.w	8014d6a <tMBPulse_tick+0x252>
        if (sw > 0)
 8014b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b90:	f340 81a4 	ble.w	8014edc <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 8014b94:	eef4 aac8 	vcmpe.f32	s21, s16
 8014b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b9c:	f240 8162 	bls.w	8014e64 <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8014ba0:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 8014ba2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014ba6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bae:	f280 8276 	bge.w	801509e <tMBPulse_tick+0x586>
 8014bb2:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8014bb4:	1d33      	adds	r3, r6, #4
 8014bb6:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 8014bba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014bbe:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8014bc2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014bc6:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014bca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	f000 8229 	beq.w	8015026 <tMBPulse_tick+0x50e>
 8014bd4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8014bd8:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014bdc:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014be0:	f04f 0c00 	mov.w	ip, #0
 8014be4:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 8014be8:	4db9      	ldr	r5, [pc, #740]	; (8014ed0 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8014bea:	eba8 030c 	sub.w	r3, r8, ip
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 8014bf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014bfc:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c00:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8014c04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014c08:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014c0c:	b289      	uxth	r1, r1
 8014c0e:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8014c12:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014c14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c18:	b280      	uxth	r0, r0
 8014c1a:	fa1f fa8a 	uxth.w	sl, sl
 8014c1e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8014c22:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 8014c26:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014c2a:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c2c:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 8014c30:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8014c34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014c38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c3c:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8014c40:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 8014c44:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014c48:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c4c:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014c50:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c52:	edda 6a01 	vldr	s13, [sl, #4]
 8014c56:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014c5a:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014c5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014c64:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014c68:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014c6c:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8014c70:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014c72:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014c76:	f0c0 80e8 	bcc.w	8014e4a <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 8014c7a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014c7e:	f10c 0c01 	add.w	ip, ip, #1
 8014c82:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8014c86:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014c88:	4594      	cmp	ip, r2
			c->numBLEPs--;
 8014c8a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014c8e:	dbac      	blt.n	8014bea <tMBPulse_tick+0xd2>
 8014c90:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8014c94:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8014c98:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 8014c9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8014c9e:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8014ca2:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8014ca6:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 8014caa:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 8014cae:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8014cb2:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8014cb6:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 8014cba:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 8014cbe:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8014cc2:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8014cc6:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8014cca:	b003      	add	sp, #12
 8014ccc:	ecbd 8b0c 	vpop	{d8-d13}
 8014cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
 8014cd4:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014cd8:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8014cdc:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8014ce0:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8014ce4:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8014ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cec:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014cf0:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8014cf4:	f040 8457 	bne.w	80155a6 <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
 8014cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014cfc:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8014cfe:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8014d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8014d06:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 8014d0a:	f340 80a6 	ble.w	8014e5a <tMBPulse_tick+0x342>
        if (!k) {
 8014d0e:	2f00      	cmp	r7, #0
 8014d10:	f040 818e 	bne.w	8015030 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 8014d14:	eef4 aacb 	vcmpe.f32	s21, s22
 8014d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1c:	f240 8310 	bls.w	8015340 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
 8014d20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d24:	eeb4 bae7 	vcmpe.f32	s22, s15
 8014d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2c:	f280 81f1 	bge.w	8015112 <tMBPulse_tick+0x5fa>
            if (p >= b) {
 8014d30:	eef4 aac8 	vcmpe.f32	s21, s16
 8014d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d38:	f240 81e1 	bls.w	80150fe <tMBPulse_tick+0x5e6>
 8014d3c:	464f      	mov	r7, r9
 8014d3e:	e739      	b.n	8014bb4 <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 8014d40:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014d44:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8014d48:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8014d4c:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8014d50:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8014d54:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 8014d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8014d5c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014d60:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8014d64:	2f00      	cmp	r7, #0
 8014d66:	f43f af11 	beq.w	8014b8c <tMBPulse_tick+0x74>
        if (sw > 0)
 8014d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d6e:	f340 8129 	ble.w	8014fc4 <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 8014d72:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014d76:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7e:	f6ff af19 	blt.w	8014bb4 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014d82:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8014d86:	eddf 7a54 	vldr	s15, [pc, #336]	; 8014ed8 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 8014d8a:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 8014d8e:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014d90:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8014d94:	eeb0 0a4b 	vmov.f32	s0, s22
 8014d98:	eea8 0a09 	vfma.f32	s0, s16, s18
 8014d9c:	f004 fe4c 	bl	8019a38 <lrintf>
	r -= (float)i;
 8014da0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014da4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014da8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014db0:	3301      	adds	r3, #1
            if (!k && p >= b) {
 8014db2:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014dba:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
 8014dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014dc2:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014dc6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014dca:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014dce:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8014dd2:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014dd6:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014dda:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8014dde:	f103 0301 	add.w	r3, r3, #1
 8014de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014de6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 8014dea:	f200 8306 	bhi.w	80153fa <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8014dee:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8014df2:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 8014df4:	eeb0 0a4b 	vmov.f32	s0, s22
 8014df8:	eea8 0a89 	vfma.f32	s0, s17, s18
 8014dfc:	f004 fe1c 	bl	8019a38 <lrintf>
	r -= (float)i;
 8014e00:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e04:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 8014e08:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 8014e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014e10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e14:	3301      	adds	r3, #1
	r -= (float)i;
 8014e16:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e1e:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014e22:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014e26:	4a2b      	ldr	r2, [pc, #172]	; (8014ed4 <tMBPulse_tick+0x3bc>)
                k = 1;
 8014e28:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014e2a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014e2e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8014e32:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014e36:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014e3a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8014e3e:	443b      	add	r3, r7
 8014e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e44:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8014e48:	e6b4      	b.n	8014bb4 <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014e4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014e4e:	f10c 0c01 	add.w	ip, ip, #1
 8014e52:	4563      	cmp	r3, ip
 8014e54:	f73f aec9 	bgt.w	8014bea <tMBPulse_tick+0xd2>
 8014e58:	e71a      	b.n	8014c90 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 8014e5a:	f100 81be 	bmi.w	80151da <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
 8014e5e:	eeb0 8a68 	vmov.f32	s16, s17
 8014e62:	e6a7      	b.n	8014bb4 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014e64:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8014e68:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8014ed8 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8014e6c:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8014e70:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8014e74:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8014e78:	eeb0 0a6b 	vmov.f32	s0, s23
 8014e7c:	eeab 0a28 	vfma.f32	s0, s22, s17
 8014e80:	f004 fdda 	bl	8019a38 <lrintf>
	r -= (float)i;
 8014e84:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e88:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014e8c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014e94:	4a0f      	ldr	r2, [pc, #60]	; (8014ed4 <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e96:	3301      	adds	r3, #1
                x = -0.5f;
 8014e98:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014ea0:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014ea4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ea8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014eac:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014eb0:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8014eb4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014eb8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014ebc:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ec6:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 8014eca:	2301      	movs	r3, #1
}
 8014ecc:	e669      	b.n	8014ba2 <tMBPulse_tick+0x8a>
 8014ece:	bf00      	nop
 8014ed0:	08029a18 	.word	0x08029a18
 8014ed4:	bf800000 	.word	0xbf800000
 8014ed8:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 8014edc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee4:	f57f ae66 	bpl.w	8014bb4 <tMBPulse_tick+0x9c>
 8014ee8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef0:	f57f ae60 	bpl.w	8014bb4 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014ef4:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8014ef8:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8014ed8 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 8014efc:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
 8014f00:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 8014f04:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8014f08:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 8014f0c:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8014f10:	eeac 0a28 	vfma.f32	s0, s24, s17
 8014f14:	f004 fd90 	bl	8019a38 <lrintf>
	r -= (float)i;
 8014f18:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f1c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014f20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014f28:	4ad0      	ldr	r2, [pc, #832]	; (801526c <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f2a:	3301      	adds	r3, #1
            if (k && p < b) {
 8014f2c:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014f34:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 8014f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014f3c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f40:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014f44:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014f48:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8014f4c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014f50:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014f54:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014f58:	f103 0301 	add.w	r3, r3, #1
 8014f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f60:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8014f64:	f340 8323 	ble.w	80155ae <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
 8014f68:	ee38 ca6a 	vsub.f32	s24, s16, s21
 8014f6c:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014f6e:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8014f72:	eeb0 0a6b 	vmov.f32	s0, s23
 8014f76:	eea8 0a8c 	vfma.f32	s0, s17, s24
 8014f7a:	f004 fd5d 	bl	8019a38 <lrintf>
	r -= (float)i;
 8014f7e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f82:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014f86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f8e:	3301      	adds	r3, #1
                x = 0.5f;
 8014f90:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014f98:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014f9c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014fa0:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014fa4:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014fa8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8014fac:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014fb0:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014fb4:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8014fb8:	3301      	adds	r3, #1
 8014fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fbe:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8014fc2:	e5f7      	b.n	8014bb4 <tMBPulse_tick+0x9c>
        else if (sw < 0)
 8014fc4:	f57f adf6 	bpl.w	8014bb4 <tMBPulse_tick+0x9c>
            if (p < b) {
 8014fc8:	eef4 aac8 	vcmpe.f32	s21, s16
 8014fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd0:	f300 80d0 	bgt.w	8015174 <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
 8014fd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fdc:	f57f adea 	bpl.w	8014bb4 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014fe0:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8014fe4:	eddf 8aa2 	vldr	s17, [pc, #648]	; 8015270 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
 8014fe8:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
 8014fec:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 8014fee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8014ff2:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 8014ff6:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 8014ffa:	eea9 0a28 	vfma.f32	s0, s18, s17
 8014ffe:	f004 fd1b 	bl	8019a38 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015002:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 8015006:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 801500a:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801500e:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015010:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801501c:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015020:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 8015024:	e6fd      	b.n	8014e22 <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
 8015026:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801502a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801502e:	e631      	b.n	8014c94 <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 8015030:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015034:	eeb4 bae8 	vcmpe.f32	s22, s17
 8015038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503c:	f280 811a 	bge.w	8015274 <tMBPulse_tick+0x75c>
 8015040:	eddf ba8b 	vldr	s23, [pc, #556]	; 8015270 <tMBPulse_tick+0x758>
 8015044:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8015048:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801504c:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015050:	f004 fcf2 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015054:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015058:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801505c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015064:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015068:	3301      	adds	r3, #1
                x = 0.5f;
 801506a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801506e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015072:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015076:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801507a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801507e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015082:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015086:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801508a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801508e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015092:	3301      	adds	r3, #1
 8015094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015098:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 801509c:	e648      	b.n	8014d30 <tMBPulse_tick+0x218>
                p -= 1.0f;
 801509e:	eddf 7a74 	vldr	s15, [pc, #464]	; 8015270 <tMBPulse_tick+0x758>
 80150a2:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 80150a6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 80150aa:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80150ac:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 80150b0:	eea9 0a08 	vfma.f32	s0, s18, s16
 80150b4:	f004 fcc0 	bl	8019a38 <lrintf>
	r -= (float)i;
 80150b8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150bc:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80150c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80150c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150c8:	3301      	adds	r3, #1
                x = 0.5f;
 80150ca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80150d2:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 80150d6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150da:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80150de:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80150e2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80150e6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80150ea:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80150ee:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80150f2:	3301      	adds	r3, #1
 80150f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80150f8:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 80150fc:	e55a      	b.n	8014bb4 <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 80150fe:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015270 <tMBPulse_tick+0x758>
 8015102:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 8015106:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 801510a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801510c:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8015110:	e670      	b.n	8014df4 <tMBPulse_tick+0x2dc>
 8015112:	eddf ba57 	vldr	s23, [pc, #348]	; 8015270 <tMBPulse_tick+0x758>
 8015116:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801511a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801511e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015122:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8015126:	eea8 0aab 	vfma.f32	s0, s17, s23
 801512a:	f004 fc85 	bl	8019a38 <lrintf>
	r -= (float)i;
 801512e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015132:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015136:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801513a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801513e:	3301      	adds	r3, #1
                    x = 0.5f;
 8015140:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015148:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 801514c:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015150:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015154:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015158:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801515c:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015160:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015164:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015168:	3301      	adds	r3, #1
 801516a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801516e:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 8015172:	e5dd      	b.n	8014d30 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 8015174:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8015270 <tMBPulse_tick+0x758>
 8015178:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 801517c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015180:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015182:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8015186:	eeab 0a28 	vfma.f32	s0, s22, s17
 801518a:	f004 fc55 	bl	8019a38 <lrintf>
	r -= (float)i;
 801518e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015192:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015196:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801519a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801519e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80151a2:	3301      	adds	r3, #1
                x = 0.5f;
 80151a4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80151a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80151ac:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80151b0:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80151b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80151b8:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80151bc:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 80151c0:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80151c4:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80151c8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80151cc:	3301      	adds	r3, #1
 80151ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151d2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 80151d6:	2700      	movs	r7, #0
}
 80151d8:	e6fc      	b.n	8014fd4 <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 80151da:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80151de:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 80151e2:	2f00      	cmp	r7, #0
 80151e4:	f040 80e5 	bne.w	80153b2 <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
 80151e8:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80151ec:	eddf ba20 	vldr	s23, [pc, #128]	; 8015270 <tMBPulse_tick+0x758>
 80151f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f4:	f100 813c 	bmi.w	8015470 <tMBPulse_tick+0x958>
 80151f8:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 80151fc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8015200:	2701      	movs	r7, #1
 8015202:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 8015206:	eeb0 0a68 	vmov.f32	s0, s17
 801520a:	eea8 0a6b 	vfms.f32	s0, s16, s23
 801520e:	f004 fc13 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015212:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8015216:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801521a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801521e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015222:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015226:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801522a:	4a10      	ldr	r2, [pc, #64]	; (801526c <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801522c:	443b      	add	r3, r7
 801522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015232:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015236:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801523a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801523e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015242:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015246:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801524a:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801524e:	443b      	add	r3, r7
 8015250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015254:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 8015258:	eef4 aacd 	vcmpe.f32	s21, s26
 801525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015260:	f300 80d0 	bgt.w	8015404 <tMBPulse_tick+0x8ec>
 8015264:	eeb0 8a4d 	vmov.f32	s16, s26
 8015268:	e4a4      	b.n	8014bb4 <tMBPulse_tick+0x9c>
 801526a:	bf00      	nop
 801526c:	bf800000 	.word	0xbf800000
 8015270:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8015274:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015278:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8015270 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
 801527c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8015280:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015284:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 8015288:	eeb0 0a6c 	vmov.f32	s0, s25
 801528c:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8015290:	f004 fbd2 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015294:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015298:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801529c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80152a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152a4:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 80152a6:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80152ae:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
 80152b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80152b6:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152ba:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80152be:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80152c2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80152c6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80152ca:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80152ce:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80152d2:	f103 0301 	add.w	r3, r3, #1
 80152d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80152da:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 80152de:	f200 815e 	bhi.w	801559e <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80152e2:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 80152e6:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80152e8:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80152ec:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 80152f0:	eea8 0aab 	vfma.f32	s0, s17, s23
 80152f4:	f004 fba0 	bl	8019a38 <lrintf>
	r -= (float)i;
 80152f8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015300:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015308:	4aad      	ldr	r2, [pc, #692]	; (80155c0 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801530a:	3301      	adds	r3, #1
	r -= (float)i;
 801530c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015314:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015318:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801531c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015320:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8015324:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015328:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801532c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015330:	3301      	adds	r3, #1
 8015332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015336:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 801533a:	f8d5 8000 	ldr.w	r8, [r5]
 801533e:	e683      	b.n	8015048 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8015340:	eddf baa0 	vldr	s23, [pc, #640]	; 80155c4 <tMBPulse_tick+0xaac>
 8015344:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 8015348:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801534c:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8015350:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8015354:	f004 fb70 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015358:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801535c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015360:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015368:	4a95      	ldr	r2, [pc, #596]	; (80155c0 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801536a:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 801536c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015374:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 8015378:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 801537c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015380:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015384:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015388:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 801538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015390:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015394:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015398:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801539c:	f103 0301 	add.w	r3, r3, #1
 80153a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153a4:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 80153a8:	f8d5 8000 	ldr.w	r8, [r5]
 80153ac:	f6ff ae4c 	blt.w	8015048 <tMBPulse_tick+0x530>
 80153b0:	e6b3      	b.n	801511a <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
 80153b2:	eef4 aacb 	vcmpe.f32	s21, s22
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	f300 80ba 	bgt.w	8015532 <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
 80153be:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	f57f af47 	bpl.w	8015258 <tMBPulse_tick+0x740>
 80153ca:	eddf ba7e 	vldr	s23, [pc, #504]	; 80155c4 <tMBPulse_tick+0xaac>
 80153ce:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 80153d2:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 80153d6:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 80153d8:	eeb0 0a48 	vmov.f32	s0, s16
 80153dc:	eea8 0aab 	vfma.f32	s0, s17, s23
 80153e0:	f004 fb2a 	bl	8019a38 <lrintf>
	r -= (float)i;
 80153e4:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 80153e8:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80153ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80153f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153f4:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80153f8:	e715      	b.n	8015226 <tMBPulse_tick+0x70e>
                x = 0.5f;
 80153fa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 80153fe:	2700      	movs	r7, #0
 8015400:	f7ff bbd8 	b.w	8014bb4 <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 8015404:	eddf 7a6f 	vldr	s15, [pc, #444]	; 80155c4 <tMBPulse_tick+0xaac>
 8015408:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
 801540c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015410:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015412:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
 8015416:	464f      	mov	r7, r9
}
 8015418:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 801541c:	eea9 0a28 	vfma.f32	s0, s18, s17
 8015420:	f004 fb0a 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015424:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015428:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801542c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015434:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015438:	3301      	adds	r3, #1
                x = 0.5f;
 801543a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801543e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015442:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015446:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801544a:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801544e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015452:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8015456:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801545a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801545e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8015462:	3301      	adds	r3, #1
 8015464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015468:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 801546c:	f7ff bba2 	b.w	8014bb4 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015470:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8015474:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 8015478:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 801547c:	eeb0 0a6c 	vmov.f32	s0, s25
 8015480:	eea8 0aab 	vfma.f32	s0, s17, s23
 8015484:	f004 fad8 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015488:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801548c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015490:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015498:	4a49      	ldr	r2, [pc, #292]	; (80155c0 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801549a:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 801549c:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80154a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80154a4:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 80154a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80154ac:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80154b0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80154b4:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80154b8:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80154bc:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80154c0:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80154c4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80154c8:	f103 0301 	add.w	r3, r3, #1
 80154cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154d0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 80154d4:	dd70      	ble.n	80155b8 <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
 80154d6:	ee78 8a6a 	vsub.f32	s17, s16, s21
 80154da:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80154dc:	eeb0 0a6c 	vmov.f32	s0, s25
 80154e0:	ee78 8a8b 	vadd.f32	s17, s17, s22
 80154e4:	eea8 0aab 	vfma.f32	s0, s17, s23
 80154e8:	f004 faa6 	bl	8019a38 <lrintf>
	r -= (float)i;
 80154ec:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80154f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80154f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80154f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80154fc:	3301      	adds	r3, #1
	r -= (float)i;
 80154fe:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015506:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801550a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801550e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015512:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8015516:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801551a:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801551e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015522:	3301      	adds	r3, #1
 8015524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015528:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 801552c:	f8d5 8000 	ldr.w	r8, [r5]
 8015530:	e664      	b.n	80151fc <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
 8015532:	eddf ba24 	vldr	s23, [pc, #144]	; 80155c4 <tMBPulse_tick+0xaac>
 8015536:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 801553a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801553e:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8015542:	eeac 0aab 	vfma.f32	s0, s25, s23
 8015546:	f004 fa77 	bl	8019a38 <lrintf>
	r -= (float)i;
 801554a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801554e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015552:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801555a:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 801555c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015564:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 8015568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801556c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015570:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015574:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015578:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801557c:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015580:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015584:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8015588:	f103 0301 	add.w	r3, r3, #1
 801558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015590:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 8015594:	f8d5 8000 	ldr.w	r8, [r5]
 8015598:	f57f ae30 	bpl.w	80151fc <tMBPulse_tick+0x6e4>
 801559c:	e719      	b.n	80153d2 <tMBPulse_tick+0x8ba>
                    x = 0.5f;
 801559e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80155a2:	f7ff bbc5 	b.w	8014d30 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 80155a6:	eeb0 8a68 	vmov.f32	s16, s17
 80155aa:	f7ff baea 	b.w	8014b82 <tMBPulse_tick+0x6a>
                x = -0.5f;
 80155ae:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 80155b2:	2701      	movs	r7, #1
 80155b4:	f7ff bafe 	b.w	8014bb4 <tMBPulse_tick+0x9c>
                    x = -0.5f;
 80155b8:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 80155bc:	2701      	movs	r7, #1
 80155be:	e64b      	b.n	8015258 <tMBPulse_tick+0x740>
 80155c0:	bf800000 	.word	0xbf800000
 80155c4:	42800000 	.word	0x42800000

080155c8 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 80155c8:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80155ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80155ce:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 80155d2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80155d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80155da:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80155de:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80155e2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80155e6:	4770      	bx	lr

080155e8 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 80155e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 80155ec:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 80155ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 80155f2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 80155f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80155fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8015602:	4770      	bx	lr

08015604 <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 8015604:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8015606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801560a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801560e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8015612:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8015616:	eef1 7a67 	vneg.f32	s15, s15
 801561a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801561e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8015622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015626:	eef4 6ac7 	vcmpe.f32	s13, s14
 801562a:	bfcc      	ite	gt
 801562c:	2201      	movgt	r2, #1
 801562e:	2200      	movle	r2, #0
 8015630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015634:	f002 0201 	and.w	r2, r2, #1
 8015638:	bf88      	it	hi
 801563a:	2200      	movhi	r2, #0
 801563c:	b122      	cbz	r2, 8015648 <tMBPulse_sync+0x44>
 801563e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015646:	da04      	bge.n	8015652 <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8015648:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8015660 <tMBPulse_sync+0x5c>
 801564c:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8015650:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8015652:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015656:	ee27 7a06 	vmul.f32	s14, s14, s12
 801565a:	ed83 7a05 	vstr	s14, [r3, #20]
}
 801565e:	4770      	bx	lr
 8015660:	00000000 	.word	0x00000000

08015664 <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 8015664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8015666:	698e      	ldr	r6, [r1, #24]
{
 8015668:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 801566a:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801566e:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8015670:	4631      	mov	r1, r6
 8015672:	f7ff f869 	bl	8014748 <mpool_alloc>
 8015676:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8015678:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801567a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 801567c:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 801567e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8015682:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80156e4 <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8015686:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8015688:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 801568c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8015690:	eddf 7a15 	vldr	s15, [pc, #84]	; 80156e8 <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 8015694:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8015698:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 801569a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801569e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 80156a0:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80156a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 80156a6:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80156a8:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 80156ac:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80156ae:	4b0f      	ldr	r3, [pc, #60]	; (80156ec <tMBTriangle_init+0x88>)
    c->softsync = 0;
 80156b0:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 80156b2:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 80156b4:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80156b6:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80156b8:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80156ba:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80156bc:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 80156be:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80156c2:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80156c6:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 80156ca:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80156ce:	306c      	adds	r0, #108	; 0x6c
 80156d0:	f003 ff7e 	bl	80195d0 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80156d4:	4629      	mov	r1, r5
 80156d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80156da:	2220      	movs	r2, #32
}
 80156dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80156e0:	f003 bf76 	b.w	80195d0 <memset>
 80156e4:	3b14f209 	.word	0x3b14f209
 80156e8:	43dc0000 	.word	0x43dc0000
 80156ec:	11c01200 	.word	0x11c01200

080156f0 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 80156f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156f4:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 80156f8:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80156fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 80156fe:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 8015702:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
 8015704:	ed94 7a03 	vldr	s14, [r4, #12]
{
 8015708:	4607      	mov	r7, r0
    sync = c->sync;
 801570a:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 801570e:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 8015712:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8015716:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 801571a:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 801571e:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 8015722:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 8015726:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 801572a:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 801572c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 801572e:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8015732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 8015736:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 801573a:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801573e:	f340 8181 	ble.w	8015a44 <tMBTriangle_tick+0x354>
 8015742:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8015746:	f1b9 0f00 	cmp.w	r9, #0
 801574a:	f340 8138 	ble.w	80159be <tMBTriangle_tick+0x2ce>
 801574e:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8015752:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8015756:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 801575a:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801575e:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8015762:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 8015766:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 801576a:	ee76 6aab 	vadd.f32	s13, s13, s23
 801576e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8015772:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8015776:	2e00      	cmp	r6, #0
 8015778:	f040 8177 	bne.w	8015a6a <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 801577c:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8015780:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 8015784:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8015788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 801578c:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8015790:	f340 8252 	ble.w	8015c38 <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 8015794:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8015798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579c:	f280 820c 	bge.w	8015bb8 <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80157a0:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 80157a2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80157a6:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80157aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ae:	f280 837b 	bge.w	8015ea8 <tMBTriangle_tick+0x7b8>
 80157b2:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80157b4:	1d2b      	adds	r3, r5, #4
 80157b6:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 80157ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80157be:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80157c2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80157c6:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80157ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f000 80d3 	beq.w	801597a <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80157d4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80157d8:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80157dc:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80157de:	48ea      	ldr	r0, [pc, #936]	; (8015b88 <tMBTriangle_tick+0x498>)
 80157e0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80157e4:	4fe9      	ldr	r7, [pc, #932]	; (8015b8c <tMBTriangle_tick+0x49c>)
 80157e6:	e053      	b.n	8015890 <tMBTriangle_tick+0x1a0>
 80157e8:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 80157ec:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80157f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80157f4:	fa1f fe8e 	uxth.w	lr, lr
 80157f8:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80157fc:	fa1f f989 	uxth.w	r9, r9
 8015800:	b29b      	uxth	r3, r3
 8015802:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8015806:	fa1f f888 	uxth.w	r8, r8
 801580a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801580e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8015812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015816:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 801581a:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 801581e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015822:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015826:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 801582a:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 801582e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 8015832:	ed99 7a00 	vldr	s14, [r9]
 8015836:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801583a:	edd3 5a01 	vldr	s11, [r3, #4]
 801583e:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8015842:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015846:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801584a:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801584e:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8015850:	fa1f fe8e 	uxth.w	lr, lr
 8015854:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015858:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801585c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015860:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015864:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8015868:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801586c:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8015870:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8015874:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8015878:	459e      	cmp	lr, r3
 801587a:	d304      	bcc.n	8015886 <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 801587c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8015880:	3b01      	subs	r3, #1
 8015882:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015886:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801588a:	3201      	adds	r2, #1
 801588c:	4293      	cmp	r3, r2
 801588e:	dd74      	ble.n	801597a <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8015890:	ebac 0302 	sub.w	r3, ip, r2
 8015894:	b29b      	uxth	r3, r3
 8015896:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 801589a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801589e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80158a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80158a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80158aa:	b29b      	uxth	r3, r3
 80158ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80158b4:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80158b8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80158bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c0:	d492      	bmi.n	80157e8 <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80158c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80158c6:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80158d0:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80158d4:	fa1f fe8e 	uxth.w	lr, lr
 80158d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158dc:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80158e0:	fa1f f989 	uxth.w	r9, r9
 80158e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80158e8:	fa1f f888 	uxth.w	r8, r8
 80158ec:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 80158f0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80158f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80158f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80158fc:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8015900:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8015904:	b29b      	uxth	r3, r3
 8015906:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801590a:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801590e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015912:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8015916:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 801591a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801591e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8015922:	edd8 6a01 	vldr	s13, [r8, #4]
 8015926:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801592a:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801592e:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8015932:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015936:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801593a:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801593e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015942:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8015946:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801594a:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801594e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8015952:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015956:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801595a:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 801595e:	3340      	adds	r3, #64	; 0x40
 8015960:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8015964:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8015968:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 801596c:	459e      	cmp	lr, r3
 801596e:	d285      	bcs.n	801587c <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015970:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015974:	3201      	adds	r2, #1
 8015976:	4293      	cmp	r3, r2
 8015978:	dc8a      	bgt.n	8015890 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 801597a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801597e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015982:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 8015986:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8015988:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 801598c:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8015990:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8015994:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 8015998:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 801599c:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 80159a0:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 80159a4:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 80159a8:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 80159ac:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 80159b0:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 80159b4:	b005      	add	sp, #20
 80159b6:	ecbd 8b10 	vpop	{d8-d15}
 80159ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 80159be:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80159c2:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80159c6:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 80159ca:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 80159ce:	eefd caeb 	vcvt.s32.f32	s25, s23
 80159d2:	ee36 9aab 	vadd.f32	s18, s13, s23
 80159d6:	eef8 caec 	vcvt.f32.s32	s25, s25
 80159da:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80159de:	f040 863f 	bne.w	8016660 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
 80159e2:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80159e6:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 80159e8:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 80159ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80159f0:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 80159f4:	f340 80ce 	ble.w	8015b94 <tMBTriangle_tick+0x4a4>
        if (!k) {
 80159f8:	2e00      	cmp	r6, #0
 80159fa:	f040 81e1 	bne.w	8015dc0 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 80159fe:	eef4 9aee 	vcmpe.f32	s19, s29
 8015a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a06:	f240 8449 	bls.w	801629c <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 8015a0a:	eef4 eae8 	vcmpe.f32	s29, s17
 8015a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a12:	f280 82bf 	bge.w	8015f94 <tMBTriangle_tick+0x8a4>
 8015a16:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8015b90 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 8015a1a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015a1e:	ee2c ca27 	vmul.f32	s24, s24, s15
 8015a22:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
 8015a26:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015a2a:	f004 f805 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015a2e:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8015a32:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015a36:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8015a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a3e:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8015a42:	e203      	b.n	8015e4c <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 8015a44:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8015a48:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8015a4c:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 8015a50:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8015a54:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8015a58:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8015a5c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8015a60:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 8015a64:	2e00      	cmp	r6, #0
 8015a66:	f43f ae89 	beq.w	801577c <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 8015a6a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 8015a6e:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 8015a72:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8015a76:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8015a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8015a7e:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8015a82:	f340 815a 	ble.w	8015d3a <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 8015a86:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8015a8a:	eeb4 8acb 	vcmpe.f32	s16, s22
 8015a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a92:	f6ff ae8f 	blt.w	80157b4 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8015a96:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8015a9a:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8015b90 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 8015a9e:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 8015aa2:	683e      	ldr	r6, [r7, #0]
 8015aa4:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8015aa8:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8015aac:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8015ab0:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 8015ab4:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 8015ab8:	f003 ffbe 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015abc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ac0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015ac4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8015ac8:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 8015acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8015ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8015ada:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ade:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ae2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ae6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015aea:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015aee:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8015af2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015af6:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015afa:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015afe:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8015b02:	f103 0301 	add.w	r3, r3, #1
 8015b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b0a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8015b0e:	f200 843e 	bhi.w	801638e <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 8015b12:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 8015b16:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8015b18:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 8015b1c:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8015b20:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8015b24:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8015b28:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b2c:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 8015b30:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8015b34:	f003 ff80 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015b38:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015b40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 8015b44:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 8015b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015b52:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b56:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015b5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015b62:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b66:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b6a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015b6e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b72:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015b76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8015b7a:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015b7c:	4433      	add	r3, r6
 8015b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8015b86:	e615      	b.n	80157b4 <tMBTriangle_tick+0xc4>
 8015b88:	08025314 	.word	0x08025314
 8015b8c:	08029a18 	.word	0x08029a18
 8015b90:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8015b94:	f100 828a 	bmi.w	80160ac <tMBTriangle_tick+0x9bc>
        if (!k) {
 8015b98:	2e00      	cmp	r6, #0
 8015b9a:	f000 81f4 	beq.w	8015f86 <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 8015b9e:	ee79 7a88 	vadd.f32	s15, s19, s16
 8015ba2:	ee7c 6ac9 	vsub.f32	s13, s25, s18
 8015ba6:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 8015baa:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8015bae:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8015bb2:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
 8015bb6:	e5fd      	b.n	80157b4 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 8015bb8:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8015b90 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8015bbc:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 8015bc0:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8015bc4:	f8d7 8000 	ldr.w	r8, [r7]
 8015bc8:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 8015bcc:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8015bd0:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8015bd4:	eeae 0a2c 	vfma.f32	s0, s28, s25
 8015bd8:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8015bdc:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8015be0:	f003 ff2a 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015be4:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015be8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015bec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015bf0:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 8015bf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015bfe:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c02:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c0a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015c0e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c12:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c1a:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015c1e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c22:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015c26:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c30:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8015c34:	2301      	movs	r3, #1
}
 8015c36:	e5b4      	b.n	80157a2 <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 8015c38:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c40:	f57f adb8 	bpl.w	80157b4 <tMBTriangle_tick+0xc4>
 8015c44:	eef5 ba40 	vcmp.f32	s23, #0.0
 8015c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4c:	f57f adb2 	bpl.w	80157b4 <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 8015c50:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
 8015c54:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8015b90 <tMBTriangle_tick+0x4a0>
 8015c58:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8015c5c:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8015c60:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8015c64:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015c68:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8015c6c:	ee67 baab 	vmul.f32	s23, s15, s23
 8015c70:	f003 fee2 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015c74:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c78:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015c7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8015c80:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
 8015c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c88:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015c8a:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8015c92:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 8015c96:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c9a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ca2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8015ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015caa:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015cae:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8015cb2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015cb6:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015cba:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015cbe:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015cc2:	f103 0301 	add.w	r3, r3, #1
 8015cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015cca:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8015cce:	f340 84cb 	ble.w	8016668 <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
 8015cd2:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 8015cd6:	683f      	ldr	r7, [r7, #0]
 8015cd8:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
 8015cdc:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 8015ce0:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8015ce4:	eeac 0a8c 	vfma.f32	s0, s25, s24
 8015ce8:	f003 fea6 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015cec:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cf0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015cf4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cfc:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8015cfe:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015d06:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015d12:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015d16:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d1a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015d1e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d22:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015d26:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015d2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015d2e:	3301      	adds	r3, #1
 8015d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8015d38:	e53c      	b.n	80157b4 <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 8015d3a:	f57f ad3b 	bpl.w	80157b4 <tMBTriangle_tick+0xc4>
            if (p < b) {
 8015d3e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8015d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d46:	f100 8174 	bmi.w	8016032 <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 8015d4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d52:	f57f ad2f 	bpl.w	80157b4 <tMBTriangle_tick+0xc4>
                p += 1.0f;
 8015d56:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015d5a:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8015b90 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 8015d5e:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 8015d62:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8015d64:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8015d68:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 8015d6c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8015d70:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 8015d74:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8015d78:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8015d7c:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8015d80:	f003 fe5a 	bl	8019a38 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 8015d88:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015d8c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d90:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d94:	3301      	adds	r3, #1
	r -= (float)i;
 8015d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015d9e:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015da2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015da6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015daa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015dae:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015db2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015db6:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015dba:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 8015dbe:	e6d8      	b.n	8015b72 <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 8015dc0:	ee3c 9ac9 	vsub.f32	s18, s25, s18
 8015dc4:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 8015dc8:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8015dcc:	eef0 ca4b 	vmov.f32	s25, s22
 8015dd0:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
 8015dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8015dd8:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
 8015ddc:	f280 81e1 	bge.w	80161a2 <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8015de0:	ee3d ea2d 	vadd.f32	s28, s26, s27
 8015de4:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8015b90 <tMBTriangle_tick+0x4a0>
 8015de8:	ee2c ca27 	vmul.f32	s24, s24, s15
 8015dec:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8015df0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015df4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015df8:	f003 fe1e 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015dfc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e00:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e04:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8015e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e0c:	3301      	adds	r3, #1
	r -= (float)i;
 8015e0e:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e16:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e1e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015e22:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e26:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e2e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e32:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e36:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015e3a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015e3e:	3301      	adds	r3, #1
 8015e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e44:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8015e48:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e4c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8015e50:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8015e54:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e58:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8015e5a:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8015e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e66:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e6e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8015e72:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e76:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e7a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e7e:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e82:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e86:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e8a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015e8e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015e92:	f103 0301 	add.w	r3, r3, #1
 8015e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e9a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8015e9e:	d93d      	bls.n	8015f1c <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 8015ea0:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 8015ea4:	464e      	mov	r6, r9
 8015ea6:	e485      	b.n	80157b4 <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 8015ea8:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 8015b90 <tMBTriangle_tick+0x4a0>
 8015eac:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 8015eb0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8015eb4:	683f      	ldr	r7, [r7, #0]
 8015eb6:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8015eba:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8015ebe:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8015ec2:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015ec6:	f003 fdb7 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015eca:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015ed2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015eda:	3301      	adds	r3, #1
	scale *= w;
 8015edc:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 8015ee0:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015ee8:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015eec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ef0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ef4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015ef8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015efc:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015f00:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f04:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f08:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015f0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015f10:	3301      	adds	r3, #1
 8015f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8015f1a:	e44b      	b.n	80157b4 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 8015f1c:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 8015f20:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 8015f22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8015f26:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 8015f2a:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8015f2e:	eee7 7a2d 	vfma.f32	s15, s14, s27
 8015f32:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8015f36:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f3a:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8015f3e:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8015f42:	f003 fd79 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015f46:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015f4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 8015f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015f60:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f68:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f6c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015f70:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f74:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015f78:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f7c:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f80:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015f84:	e5f7      	b.n	8015b76 <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 8015f86:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 8015f8a:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8015f8e:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 8015f92:	e40f      	b.n	80157b4 <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8015f94:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8015f98:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8016334 <tMBTriangle_tick+0xc44>
 8015f9c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8015fa0:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 8015fa4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8015fa8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8015fac:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
 8015fb0:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8015fb4:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8015fb8:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
 8015fbc:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8015fc0:	eeab 0a0c 	vfma.f32	s0, s22, s24
 8015fc4:	f003 fd38 	bl	8019a38 <lrintf>
	r -= (float)i;
 8015fc8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fcc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015fd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fd8:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8015fda:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8015fde:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8015fe6:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fea:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015fee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ff2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015ff6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ffa:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8015ffe:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016002:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016006:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801600a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801600e:	3301      	adds	r3, #1
 8016010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016014:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8016018:	f003 fd0e 	bl	8019a38 <lrintf>
	r -= (float)i;
 801601c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016020:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8016024:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8016028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801602c:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8016030:	e70c      	b.n	8015e4c <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 8016032:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 8016334 <tMBTriangle_tick+0xc44>
 8016036:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801603a:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 801603e:	683e      	ldr	r6, [r7, #0]
 8016040:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8016044:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8016048:	eeab 0a09 	vfma.f32	s0, s22, s18
 801604c:	f003 fcf4 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016050:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016054:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8016058:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 801605c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016060:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016064:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8016066:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 801606a:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801606e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016072:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016076:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801607a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801607e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016082:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016086:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801608a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801608e:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016092:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016096:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801609a:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801609e:	3301      	adds	r3, #1
 80160a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80160a4:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 80160a8:	2600      	movs	r6, #0
}
 80160aa:	e64e      	b.n	8015d4a <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 80160ac:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 80160b0:	2e00      	cmp	r6, #0
 80160b2:	f040 8141 	bne.w	8016338 <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 80160b6:	eef5 eac0 	vcmpe.f32	s29, #0.0
 80160ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160be:	f100 81ac 	bmi.w	801641a <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80160c2:	ee3d 9a2d 	vadd.f32	s18, s26, s27
 80160c6:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8016334 <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 80160ca:	ee6d ea2e 	vmul.f32	s29, s26, s29
 80160ce:	ee2c ca27 	vmul.f32	s24, s24, s15
 80160d2:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
 80160d6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80160da:	eef1 8a48 	vneg.f32	s17, s16
 80160de:	eea8 0a4c 	vfms.f32	s0, s16, s24
 80160e2:	f003 fca9 	bl	8019a38 <lrintf>
	r -= (float)i;
 80160e6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160ea:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80160ee:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 80160f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160f6:	3301      	adds	r3, #1
	r -= (float)i;
 80160f8:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016100:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016104:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016108:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801610c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016110:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016114:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016118:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801611c:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016120:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016124:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016128:	3301      	adds	r3, #1
 801612a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801612e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8016132:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016136:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 801613a:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
 801613e:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016142:	3301      	adds	r3, #1
 8016144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8016148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801614c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016150:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016154:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016158:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801615c:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016160:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016164:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016168:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801616c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016170:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016174:	f103 0301 	add.w	r3, r3, #1
 8016178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801617c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8016180:	f300 810c 	bgt.w	801639c <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 8016184:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8016188:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 801618a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801618e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016192:	eeb0 8a4f 	vmov.f32	s16, s30
 8016196:	ee77 7aa9 	vadd.f32	s15, s15, s19
 801619a:	eee7 8aad 	vfma.f32	s17, s15, s27
 801619e:	f7ff bb09 	b.w	80157b4 <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 80161a2:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80161a6:	eddf 7a63 	vldr	s15, [pc, #396]	; 8016334 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 80161aa:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 80161ae:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80161b2:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 80161b6:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80161ba:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 80161be:	eeac 0a0f 	vfma.f32	s0, s24, s30
 80161c2:	f003 fc39 	bl	8019a38 <lrintf>
	r -= (float)i;
 80161c6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161ca:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80161ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80161d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161d6:	3301      	adds	r3, #1
	scale *= w;
 80161d8:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 80161dc:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80161e4:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161e8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80161f0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 80161f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80161f8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161fc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016200:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016204:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016208:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801620c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016210:	f103 0301 	add.w	r3, r3, #1
 8016214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016218:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 801621c:	f200 81b5 	bhi.w	801658a <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016220:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
 8016224:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016226:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
 801622a:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801622e:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016232:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 8016236:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801623a:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
 801623e:	f003 fbfb 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016242:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016246:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801624a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801624e:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 8016252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016256:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016258:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801625c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016260:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016264:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016268:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801626c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016270:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016274:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016278:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801627c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016280:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016284:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016288:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801628c:	3301      	adds	r3, #1
 801628e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016292:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8016296:	f8d7 8000 	ldr.w	r8, [r7]
 801629a:	e5a9      	b.n	8015df0 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801629c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8016334 <tMBTriangle_tick+0xc44>
 80162a0:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 80162a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80162a8:	ee2c ca07 	vmul.f32	s24, s24, s14
 80162ac:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 80162b0:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 80162b4:	ee27 eaab 	vmul.f32	s28, s15, s23
 80162b8:	f003 fbbe 	bl	8019a38 <lrintf>
	r -= (float)i;
 80162bc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162c0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80162c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80162c8:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 80162cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162d0:	3301      	adds	r3, #1
 80162d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80162d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 80162da:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162de:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80162e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80162e6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80162ea:	eeb0 fa4e 	vmov.f32	s30, s28
 80162ee:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80162f2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80162f6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80162fa:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80162fe:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016302:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016306:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801630a:	f103 0301 	add.w	r3, r3, #1
 801630e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016312:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8016316:	da7d      	bge.n	8016414 <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016318:	ee79 6a88 	vadd.f32	s13, s19, s16
 801631c:	f8d7 8000 	ldr.w	r8, [r7]
 8016320:	ee76 6aac 	vadd.f32	s13, s13, s25
 8016324:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8016328:	eea6 baad 	vfma.f32	s22, s13, s27
 801632c:	eef0 ca4b 	vmov.f32	s25, s22
 8016330:	e55e      	b.n	8015df0 <tMBTriangle_tick+0x700>
 8016332:	bf00      	nop
 8016334:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 8016338:	ee39 7a88 	vadd.f32	s14, s19, s16
 801633c:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
 8016340:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 8016344:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
 8016348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 801634c:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
 8016350:	f300 80da 	bgt.w	8016508 <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
 8016354:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8016358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801635c:	f100 8128 	bmi.w	80165b0 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
 8016360:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8016334 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8016364:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016368:	ee77 eaa8 	vadd.f32	s29, s15, s17
 801636c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8016370:	eef1 8a48 	vneg.f32	s17, s16
 8016374:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8016378:	f003 fb5e 	bl	8019a38 <lrintf>
	r -= (float)i;
 801637c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016380:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8016384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016388:	eedc 7a28 	vfnms.f32	s15, s24, s17
 801638c:	e6d3      	b.n	8016136 <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 801638e:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 8016392:	2600      	movs	r6, #0
                p -= 1.0f;
 8016394:	eeb0 8a6c 	vmov.f32	s16, s25
 8016398:	f7ff ba0c 	b.w	80157b4 <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 801639c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 80163a0:	683f      	ldr	r7, [r7, #0]
 80163a2:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
 80163a6:	464e      	mov	r6, r9
}
 80163a8:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 80163ac:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 80163b0:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
 80163b4:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 80163b8:	eea9 0a0c 	vfma.f32	s0, s18, s24
 80163bc:	f003 fb3c 	bl	8019a38 <lrintf>
	r -= (float)i;
 80163c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80163c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80163c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80163cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80163d0:	3301      	adds	r3, #1
	scale *= w;
 80163d2:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80163d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80163da:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80163de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80163e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80163e6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80163ea:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80163ee:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80163f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80163f6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80163fa:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80163fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016402:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8016406:	3301      	adds	r3, #1
 8016408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801640c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016410:	f7ff b9d0 	b.w	80157b4 <tMBTriangle_tick+0xc4>
 8016414:	f8d7 8000 	ldr.w	r8, [r7]
 8016418:	e5c4      	b.n	8015fa4 <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 801641a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801641e:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 8016334 <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016422:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8016426:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
 801642a:	eeb0 0a67 	vmov.f32	s0, s15
 801642e:	edcd 7a01 	vstr	s15, [sp, #4]
 8016432:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
 8016436:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
 801643a:	eeac 0a0e 	vfma.f32	s0, s24, s28
 801643e:	f003 fafb 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016442:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016446:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801644a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801644e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
 8016452:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016456:	3301      	adds	r3, #1
 8016458:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
 801645c:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016464:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016468:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801646c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016470:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8016474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016478:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801647c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016480:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016484:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016488:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801648c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016490:	f103 0301 	add.w	r3, r3, #1
 8016494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016498:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 801649c:	f340 80ed 	ble.w	801667a <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
 80164a0:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
 80164a4:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 80164a6:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
 80164aa:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
 80164ae:	eeec 7a2c 	vfma.f32	s15, s24, s25
 80164b2:	eeb0 0a67 	vmov.f32	s0, s15
 80164b6:	f003 fabf 	bl	8019a38 <lrintf>
	r -= (float)i;
 80164ba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80164be:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80164c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80164c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80164ca:	3301      	adds	r3, #1
	r -= (float)i;
 80164cc:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80164d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80164d4:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80164d8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80164dc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80164e0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80164e4:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80164e8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80164ec:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80164f0:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80164f4:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80164f8:	3301      	adds	r3, #1
 80164fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80164fe:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8016502:	f8d7 8000 	ldr.w	r8, [r7]
 8016506:	e5e6      	b.n	80160d6 <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 8016508:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 8016334 <tMBTriangle_tick+0xc44>
 801650c:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
 8016510:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016514:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
 8016518:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 801651c:	eeac 0a2c 	vfma.f32	s0, s24, s25
 8016520:	f003 fa8a 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016524:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016528:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801652c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016534:	3301      	adds	r3, #1
	scale *= w;
 8016536:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 801653a:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801653e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016542:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016546:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801654a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801654e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 8016552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016556:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801655a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801655e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016562:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016566:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801656a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801656e:	f103 0301 	add.w	r3, r3, #1
 8016572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016576:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801657a:	d46e      	bmi.n	801665a <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
 801657c:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
 8016580:	f8d7 8000 	ldr.w	r8, [r7]
 8016584:	eeb1 9a4b 	vneg.f32	s18, s22
 8016588:	e5a5      	b.n	80160d6 <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 801658a:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
 801658e:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8016592:	eeac 0a08 	vfma.f32	s0, s24, s16
 8016596:	f003 fa4f 	bl	8019a38 <lrintf>
	r -= (float)i;
 801659a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801659e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80165a2:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80165a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165aa:	eedc 7a08 	vfnms.f32	s15, s24, s16
 80165ae:	e44d      	b.n	8015e4c <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80165b0:	ee3d ba2d 	vadd.f32	s22, s26, s27
 80165b4:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 8016334 <tMBTriangle_tick+0xc44>
 80165b8:	ee2c ca27 	vmul.f32	s24, s24, s15
 80165bc:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 80165c0:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80165c4:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 80165c8:	ee39 9a08 	vadd.f32	s18, s18, s16
 80165cc:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
 80165d0:	eeb0 0a6c 	vmov.f32	s0, s25
 80165d4:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 80165d8:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
 80165dc:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80165e0:	eeb1 9a4b 	vneg.f32	s18, s22
 80165e4:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
 80165e8:	f003 fa26 	bl	8019a38 <lrintf>
	r -= (float)i;
 80165ec:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80165f0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80165f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80165f8:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
 80165fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016600:	3301      	adds	r3, #1
 8016602:	eef1 8a48 	vneg.f32	s17, s16
 8016606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 801660a:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
 801660e:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016612:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016616:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801661a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801661e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016622:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016626:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801662a:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801662e:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016632:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016636:	3301      	adds	r3, #1
 8016638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801663c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8016640:	f003 f9fa 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016644:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016648:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 801664c:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8016650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016654:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8016658:	e56d      	b.n	8016136 <tMBTriangle_tick+0xa46>
 801665a:	f8d7 8000 	ldr.w	r8, [r7]
 801665e:	e7af      	b.n	80165c0 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
 8016660:	eeb0 8a4e 	vmov.f32	s16, s28
 8016664:	f7ff b887 	b.w	8015776 <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 8016668:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 801666c:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801666e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8016672:	eee7 8aad 	vfma.f32	s17, s15, s27
 8016676:	f7ff b89d 	b.w	80157b4 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 801667a:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801667e:	ee79 caef 	vsub.f32	s25, s19, s31
 8016682:	eeb1 9a48 	vneg.f32	s18, s16
 8016686:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
 801668a:	eeb0 0a67 	vmov.f32	s0, s15
 801668e:	f003 f9d3 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016692:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016696:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 801669a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801669e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166a2:	eef0 ea68 	vmov.f32	s29, s17
 80166a6:	eedc 7a09 	vfnms.f32	s15, s24, s18
 80166aa:	e544      	b.n	8016136 <tMBTriangle_tick+0xa46>

080166ac <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 80166ac:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80166ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80166b2:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 80166b6:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80166ba:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80166be:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80166c2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80166c6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 80166ca:	4770      	bx	lr

080166cc <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 80166cc:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 80166ce:	6804      	ldr	r4, [r0, #0]
{
 80166d0:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 80166d4:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80166e8 <tMBTriangle_setWidth+0x1c>
 80166d8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80166ec <tMBTriangle_setWidth+0x20>
 80166dc:	f7fd feb0 	bl	8014440 <LEAF_clip>
    c->waveform = w;
 80166e0:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80166e4:	bd10      	pop	{r4, pc}
 80166e6:	bf00      	nop
 80166e8:	3f7d70a4 	.word	0x3f7d70a4
 80166ec:	00000000 	.word	0x00000000

080166f0 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 80166f0:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80166f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80166f6:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80166fa:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80166fe:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8016702:	eef1 7a67 	vneg.f32	s15, s15
 8016706:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801670a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801670e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016712:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016716:	bfcc      	ite	gt
 8016718:	2201      	movgt	r2, #1
 801671a:	2200      	movle	r2, #0
 801671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016720:	f002 0201 	and.w	r2, r2, #1
 8016724:	bf88      	it	hi
 8016726:	2200      	movhi	r2, #0
 8016728:	b122      	cbz	r2, 8016734 <tMBTriangle_sync+0x44>
 801672a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016732:	da04      	bge.n	801673e <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8016734:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801674c <tMBTriangle_sync+0x5c>
 8016738:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 801673c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801673e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016742:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016746:	ed83 7a05 	vstr	s14, [r3, #20]
}
 801674a:	4770      	bx	lr
 801674c:	00000000 	.word	0x00000000

08016750 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 8016750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8016752:	698e      	ldr	r6, [r1, #24]
{
 8016754:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8016756:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801675a:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 801675c:	4631      	mov	r1, r6
 801675e:	f7fd fff3 	bl	8014748 <mpool_alloc>
 8016762:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8016764:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8016766:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8016768:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 801676a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801676e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80167dc <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8016772:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8016774:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8016778:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 801677c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80167e0 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8016780:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8016784:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8016786:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801678a:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 801678c:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801678e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 8016792:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016794:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 8016798:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 801679a:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 801679c:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 801679e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 80167a2:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80167a4:	490f      	ldr	r1, [pc, #60]	; (80167e4 <tMBSineTri_init+0x94>)
    c->softsync = 0;
 80167a6:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 80167a8:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80167aa:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80167ac:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80167ae:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 80167b0:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 80167b4:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80167b8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80167bc:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80167c0:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80167c4:	4629      	mov	r1, r5
 80167c6:	306c      	adds	r0, #108	; 0x6c
 80167c8:	f002 ff02 	bl	80195d0 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80167cc:	4629      	mov	r1, r5
 80167ce:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80167d2:	2220      	movs	r2, #32
}
 80167d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80167d8:	f002 befa 	b.w	80195d0 <memset>
 80167dc:	3b14f209 	.word	0x3b14f209
 80167e0:	43dc0000 	.word	0x43dc0000
 80167e4:	11c01200 	.word	0x11c01200

080167e8 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 80167e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167ec:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 80167f0:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80167f2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 80167f6:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 80167fa:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 80167fc:	ed94 9a03 	vldr	s18, [r4, #12]
{
 8016800:	4607      	mov	r7, r0
    sync = c->sync;
 8016802:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 8016806:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 801680a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801680e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 8016812:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
 8016816:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 801681a:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 801681e:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 8016822:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 8016826:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 801682e:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8016832:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 8016836:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801683a:	f340 81d8 	ble.w	8016bee <tMBSineTri_tick+0x406>
 801683e:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8016842:	f1b9 0f00 	cmp.w	r9, #0
 8016846:	f340 8189 	ble.w	8016b5c <tMBSineTri_tick+0x374>
 801684a:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801684e:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016852:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 8016856:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801685a:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801685e:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
 8016862:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8016866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801686a:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 801686e:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 8016872:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8016876:	2e00      	cmp	r6, #0
 8016878:	f040 81cc 	bne.w	8016c14 <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 801687c:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8016880:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 8016884:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8016888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 801688c:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 8016890:	f340 82a1 	ble.w	8016dd6 <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 8016894:	eeb4 aac9 	vcmpe.f32	s20, s18
 8016898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689c:	f280 825b 	bge.w	8016d56 <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80168a0:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 80168a2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80168a6:	eeb4 aacb 	vcmpe.f32	s20, s22
 80168aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ae:	f280 83c8 	bge.w	8017042 <tMBSineTri_tick+0x85a>
 80168b2:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 80168b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80168b8:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 80168ba:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80168be:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 80168c2:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 80168c6:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	db0a      	blt.n	80168e6 <tMBSineTri_tick+0xfe>
 80168d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 80168d4:	eef0 7a48 	vmov.f32	s15, s16
 80168d8:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 80168dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80168e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e4:	daf6      	bge.n	80168d4 <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 80168e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80168ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ee:	d50c      	bpl.n	801690a <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 80168f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 80168f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 80168f8:	eef0 7a48 	vmov.f32	s15, s16
 80168fc:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 8016900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016908:	d4f6      	bmi.n	80168f8 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 801690a:	eddf 7abd 	vldr	s15, [pc, #756]	; 8016c00 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801690e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 8016912:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016916:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 801691a:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801691e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016922:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 8016926:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801692a:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 801692e:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 8016932:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 8016936:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 8016938:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 801693c:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 801693e:	49b1      	ldr	r1, [pc, #708]	; (8016c04 <tMBSineTri_tick+0x41c>)
 8016940:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 8016944:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 8016948:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 801694c:	ed91 6a00 	vldr	s12, [r1]
 8016950:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016954:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016958:	eee7 8a26 	vfma.f32	s17, s14, s13
 801695c:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8016960:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8016964:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016968:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801696c:	2b00      	cmp	r3, #0
 801696e:	f000 80d3 	beq.w	8016b18 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016972:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016976:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016978:	48a3      	ldr	r0, [pc, #652]	; (8016c08 <tMBSineTri_tick+0x420>)
 801697a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801697e:	4fa3      	ldr	r7, [pc, #652]	; (8016c0c <tMBSineTri_tick+0x424>)
 8016980:	e053      	b.n	8016a2a <tMBSineTri_tick+0x242>
 8016982:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8016986:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801698a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801698e:	fa1f fe8e 	uxth.w	lr, lr
 8016992:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8016996:	fa1f f989 	uxth.w	r9, r9
 801699a:	b29b      	uxth	r3, r3
 801699c:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80169a0:	fa1f f888 	uxth.w	r8, r8
 80169a4:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80169a8:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80169ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80169b0:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80169b4:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 80169b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80169bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80169c0:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 80169c4:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 80169c8:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 80169cc:	ed99 7a00 	vldr	s14, [r9]
 80169d0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80169d4:	ed93 6a01 	vldr	s12, [r3, #4]
 80169d8:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 80169dc:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80169e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80169e4:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80169e8:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80169ea:	fa1f fe8e 	uxth.w	lr, lr
 80169ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80169f2:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80169f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80169fa:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80169fe:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8016a02:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8016a06:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8016a0a:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8016a0e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8016a12:	459e      	cmp	lr, r3
 8016a14:	d304      	bcc.n	8016a20 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8016a16:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016a20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016a24:	3201      	adds	r2, #1
 8016a26:	4293      	cmp	r3, r2
 8016a28:	dd76      	ble.n	8016b18 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016a2a:	ebac 0302 	sub.w	r3, ip, r2
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8016a34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a3c:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8016a40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016a4e:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8016a52:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5a:	d492      	bmi.n	8016982 <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016a5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a60:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8016a6a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8016a6e:	fa1f fe8e 	uxth.w	lr, lr
 8016a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a76:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8016a7a:	fa1f f989 	uxth.w	r9, r9
 8016a7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016a82:	fa1f f888 	uxth.w	r8, r8
 8016a86:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8016a8a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8016a8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a92:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016a96:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8016a9a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	ee24 7a07 	vmul.f32	s14, s8, s14
 8016aa4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8016aa8:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8016aac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016ab0:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8016ab4:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8016ab8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016abc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8016ac0:	ed98 6a01 	vldr	s12, [r8, #4]
 8016ac4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8016ac8:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8016acc:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016ad0:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8016ad4:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8016ad8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016adc:	ee36 6a64 	vsub.f32	s12, s12, s9
 8016ae0:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8016ae4:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016ae8:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8016aec:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016af0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016af4:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8016af8:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8016afc:	3340      	adds	r3, #64	; 0x40
 8016afe:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8016b02:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8016b06:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8016b0a:	459e      	cmp	lr, r3
 8016b0c:	d283      	bcs.n	8016a16 <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016b0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016b12:	3201      	adds	r2, #1
 8016b14:	4293      	cmp	r3, r2
 8016b16:	dc88      	bgt.n	8016a2a <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8016b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016b1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8016b20:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8016b22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8016b26:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 8016b2a:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8016b2e:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 8016b32:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8016b36:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 8016b3a:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 8016b3e:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 8016b42:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 8016b46:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 8016b4a:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 8016b4e:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 8016b52:	b003      	add	sp, #12
 8016b54:	ecbd 8b10 	vpop	{d8-d15}
 8016b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8016b5c:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016b60:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8016b64:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8016b68:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 8016b6c:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8016b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b74:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8016b78:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
 8016b7c:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8016b80:	f040 8644 	bne.w	801780c <tMBSineTri_tick+0x1024>
        if (sw > 0)
 8016b84:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8016b88:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8016b8a:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 8016b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8016b92:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 8016b96:	f340 80cc 	ble.w	8016d32 <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 8016b9a:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 8016b9e:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 8016ba2:	2e00      	cmp	r6, #0
 8016ba4:	f040 81dd 	bne.w	8016f62 <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 8016ba8:	eeb4 9ace 	vcmpe.f32	s18, s28
 8016bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb0:	f240 844d 	bls.w	801744e <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 8016bb4:	eeb4 eae8 	vcmpe.f32	s28, s17
 8016bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bbc:	f280 82b9 	bge.w	8017132 <tMBSineTri_tick+0x94a>
 8016bc0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016c10 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 8016bc4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016bc8:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016bcc:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 8016bd0:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8016bd4:	f002 ff30 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016bd8:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8016bdc:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016be0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8016be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016be8:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8016bec:	e1fd      	b.n	8016fea <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 8016bee:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016bf2:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8016bf6:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8016bfa:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016bfe:	e630      	b.n	8016862 <tMBSineTri_tick+0x7a>
 8016c00:	45000000 	.word	0x45000000
 8016c04:	08023294 	.word	0x08023294
 8016c08:	08025314 	.word	0x08025314
 8016c0c:	08029a18 	.word	0x08029a18
 8016c10:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 8016c14:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 8016c18:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 8016c1c:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8016c20:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8016c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8016c28:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8016c2c:	f340 8154 	ble.w	8016ed8 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 8016c30:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8016c34:	eeb4 aaeb 	vcmpe.f32	s20, s23
 8016c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c3c:	f6ff ae3a 	blt.w	80168b4 <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 8016c40:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8016c44:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8016c10 <tMBSineTri_tick+0x428>
                p -= 1.0f;
 8016c48:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 8016c4c:	683e      	ldr	r6, [r7, #0]
 8016c4e:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 8016c52:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8016c56:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8016c5a:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 8016c5e:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8016c62:	f002 fee9 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016c66:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c6a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016c6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8016c72:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 8016c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8016c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8016c84:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c88:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016c90:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016c94:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c98:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8016c9c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016ca0:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ca4:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016ca8:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016cac:	f103 0301 	add.w	r3, r3, #1
 8016cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cb4:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8016cb8:	f200 843b 	bhi.w	8017532 <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 8016cbc:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 8016cc0:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016cc2:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 8016cc6:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8016cca:	ee77 7aca 	vsub.f32	s15, s15, s20
 8016cce:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8016cd2:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 8016cd6:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 8016cda:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016cde:	f002 feab 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016ce2:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ce6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016cea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016cee:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 8016cf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016cfc:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d00:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016d08:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016d0c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d10:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d14:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016d18:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d1c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016d20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8016d24:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016d26:	4433      	add	r3, r6
 8016d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016d30:	e5c0      	b.n	80168b4 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8016d32:	f100 828a 	bmi.w	801724a <tMBSineTri_tick+0xa62>
        if (!k) {
 8016d36:	2e00      	cmp	r6, #0
 8016d38:	f000 81f1 	beq.w	801711e <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d3c:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
 8016d40:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d44:	eef0 8a6b 	vmov.f32	s17, s23
 8016d48:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
 8016d4c:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d50:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
 8016d54:	e5ae      	b.n	80168b4 <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 8016d56:	ed1f ea52 	vldr	s28, [pc, #-328]	; 8016c10 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016d5a:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 8016d5e:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8016d62:	f8d7 8000 	ldr.w	r8, [r7]
 8016d66:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 8016d6a:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8016d6e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016d72:	eeae 0a8e 	vfma.f32	s0, s29, s28
 8016d76:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8016d7a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016d7e:	f002 fe5b 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016d82:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d86:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016d8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d8e:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 8016d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d96:	3301      	adds	r3, #1
 8016d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016d9c:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016da0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016da4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016da8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016dac:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016db0:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016db4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016db8:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016dbc:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016dc0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016dc4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016dc8:	3301      	adds	r3, #1
 8016dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016dce:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8016dd2:	2301      	movs	r3, #1
}
 8016dd4:	e565      	b.n	80168a2 <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 8016dd6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dde:	f57f ad69 	bpl.w	80168b4 <tMBSineTri_tick+0xcc>
 8016de2:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8016de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dea:	f57f ad63 	bpl.w	80168b4 <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 8016dee:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
 8016df2:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 8016c10 <tMBSineTri_tick+0x428>
 8016df6:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8016dfa:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8016dfe:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8016e02:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8016e06:	eeae 0a28 	vfma.f32	s0, s28, s17
 8016e0a:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016e0e:	f002 fe13 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016e12:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e16:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016e1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8016e1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
 8016e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e26:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016e28:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8016e30:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 8016e34:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e38:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e40:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8016e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e48:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e4c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016e50:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016e54:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016e58:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016e5c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016e60:	f103 0301 	add.w	r3, r3, #1
 8016e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016e68:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8016e6c:	f340 84d4 	ble.w	8017818 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 8016e70:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8016e74:	683f      	ldr	r7, [r7, #0]
 8016e76:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 8016e7a:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 8016e7e:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8016e82:	eeac 0aad 	vfma.f32	s0, s25, s27
 8016e86:	f002 fdd7 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016e8a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016e92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e9a:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8016e9c:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016ea4:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ea8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016eac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016eb0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016eb4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016eb8:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016ebc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016ec0:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ec4:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8016ecc:	3301      	adds	r3, #1
 8016ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ed2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016ed6:	e4ed      	b.n	80168b4 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8016ed8:	f57f acec 	bpl.w	80168b4 <tMBSineTri_tick+0xcc>
            if (p < b) {
 8016edc:	eeb4 aac9 	vcmpe.f32	s20, s18
 8016ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee4:	f100 8174 	bmi.w	80171d0 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 8016ee8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8016eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef0:	f57f ace0 	bpl.w	80168b4 <tMBSineTri_tick+0xcc>
                p += 1.0f;
 8016ef4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8016ef8:	ed5f babb 	vldr	s23, [pc, #-748]	; 8016c10 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 8016efc:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 8016f00:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8016f02:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8016f06:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 8016f0a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016f0e:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 8016f12:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8016f16:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8016f1a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016f1e:	f002 fd8b 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016f22:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016f2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f2e:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8016f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f36:	3301      	adds	r3, #1
 8016f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016f3c:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f40:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f44:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016f48:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016f4c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f50:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f54:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016f58:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f5c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8016f60:	e6de      	b.n	8016d20 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 8016f62:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8016f66:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8016f6a:	eef0 fa6b 	vmov.f32	s31, s23
 8016f6e:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 8016f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8016f76:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 8016f7a:	f280 81eb 	bge.w	8017354 <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016f7e:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8016f82:	ed5f 7add 	vldr	s15, [pc, #-884]	; 8016c10 <tMBSineTri_tick+0x428>
 8016f86:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016f8a:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 8016f8e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016f92:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8016f96:	f002 fd4f 	bl	8019a38 <lrintf>
	r -= (float)i;
 8016f9a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f9e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016fa2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8016fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016faa:	3301      	adds	r3, #1
	r -= (float)i;
 8016fac:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fb4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016fb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016fbc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016fc0:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016fc4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016fcc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016fd0:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016fd4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016fd8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016fdc:	3301      	adds	r3, #1
 8016fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fe2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8016fe6:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016fea:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016fee:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 8016ff2:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8016ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017000:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017004:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017008:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801700c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017010:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017014:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017018:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801701c:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017020:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017024:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017028:	f103 0301 	add.w	r3, r3, #1
 801702c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017030:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8017034:	d940      	bls.n	80170b8 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 8017036:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 801703a:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 801703c:	eeed 8a0a 	vfma.f32	s17, s26, s20
 8017040:	e438      	b.n	80168b4 <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 8017042:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8017350 <tMBSineTri_tick+0xb68>
 8017046:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 801704a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 801704e:	683f      	ldr	r7, [r7, #0]
 8017050:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8017054:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8017058:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 801705c:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8017060:	f002 fcea 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017064:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017068:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801706c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017074:	3301      	adds	r3, #1
	scale *= w;
 8017076:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 801707a:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801707e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017082:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017086:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801708a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801708e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017092:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017096:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801709a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801709e:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80170a2:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80170a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80170aa:	3301      	adds	r3, #1
 80170ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80170b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80170b4:	f7ff bbfe 	b.w	80168b4 <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80170b8:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 80170bc:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 80170be:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 80170c2:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80170c6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80170ca:	eeab 0a2c 	vfma.f32	s0, s22, s25
 80170ce:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 80170d2:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80170d6:	f002 fcaf 	bl	8019a38 <lrintf>
	r -= (float)i;
 80170da:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80170e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80170e6:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 80170ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170ee:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80170f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80170f8:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017100:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017104:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017108:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801710c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8017110:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017114:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017118:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801711c:	e600      	b.n	8016d20 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 801711e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 8017122:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8017126:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 801712a:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 801712e:	f7ff bbc1 	b.w	80168b4 <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017132:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8017136:	eddf 7a86 	vldr	s15, [pc, #536]	; 8017350 <tMBSineTri_tick+0xb68>
 801713a:	ee6c caa7 	vmul.f32	s25, s25, s15
 801713e:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
 8017142:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8017146:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 801714a:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 801714e:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8017152:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017156:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 801715a:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 801715e:	eeab 0aac 	vfma.f32	s0, s23, s25
 8017162:	f002 fc69 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017166:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801716a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801716e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017176:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8017178:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 801717c:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8017184:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017188:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801718c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017190:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017194:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017198:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801719c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80171a0:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80171a4:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80171a8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80171ac:	3301      	adds	r3, #1
 80171ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171b2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80171b6:	f002 fc3f 	bl	8019a38 <lrintf>
	r -= (float)i;
 80171ba:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171be:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80171c2:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80171c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171ca:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 80171ce:	e70c      	b.n	8016fea <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 80171d0:	eddf ba5f 	vldr	s23, [pc, #380]	; 8017350 <tMBSineTri_tick+0xb68>
 80171d4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80171d8:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 80171dc:	683e      	ldr	r6, [r7, #0]
 80171de:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 80171e2:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 80171e6:	eeab 0a8b 	vfma.f32	s0, s23, s22
 80171ea:	f002 fc25 	bl	8019a38 <lrintf>
	r -= (float)i;
 80171ee:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171f2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 80171f6:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 80171fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80171fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017202:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8017204:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 8017208:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017210:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017214:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017218:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801721c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017220:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017224:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017228:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801722c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017230:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017234:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017238:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801723c:	3301      	adds	r3, #1
 801723e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017242:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8017246:	2600      	movs	r6, #0
}
 8017248:	e64e      	b.n	8016ee8 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 801724a:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 801724e:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 8017252:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 8017256:	2e00      	cmp	r6, #0
 8017258:	f040 8142 	bne.w	80174e0 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 801725c:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8017260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017264:	f100 81ab 	bmi.w	80175be <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 8017268:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801726c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8017350 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017270:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8017274:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 8017278:	eeed ba0e 	vfma.f32	s23, s26, s28
 801727c:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 8017280:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 8017284:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017288:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801728c:	eea8 0aac 	vfma.f32	s0, s17, s25
 8017290:	f002 fbd2 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017294:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017298:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 801729c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 80172a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172a4:	3301      	adds	r3, #1
	r -= (float)i;
 80172a6:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172b2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80172ba:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172be:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80172c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172c6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172ca:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80172ce:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80172d2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80172d6:	3301      	adds	r3, #1
 80172d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172dc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80172e0:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172e4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 80172e8:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 80172ec:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172f0:	3301      	adds	r3, #1
 80172f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 80172f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172fa:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172fe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017302:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017306:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801730a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801730e:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017312:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017316:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801731a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801731e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017322:	f103 0301 	add.w	r3, r3, #1
 8017326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801732a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 801732e:	f300 8107 	bgt.w	8017540 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 8017332:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 8017336:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8017338:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801733c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017340:	eeb0 8a6e 	vmov.f32	s16, s29
 8017344:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017348:	eee7 8aad 	vfma.f32	s17, s15, s27
 801734c:	f7ff bab2 	b.w	80168b4 <tMBSineTri_tick+0xcc>
 8017350:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8017354:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017358:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8017350 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 801735c:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8017360:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017364:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 8017368:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801736c:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 8017370:	eeac 0aaf 	vfma.f32	s0, s25, s31
 8017374:	f002 fb60 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017378:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801737c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017380:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017388:	3301      	adds	r3, #1
	scale *= w;
 801738a:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 801738e:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017396:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801739a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801739e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80173a2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 80173a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80173aa:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80173ae:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80173b2:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80173b6:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80173ba:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80173be:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80173c2:	f103 0301 	add.w	r3, r3, #1
 80173c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80173ca:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 80173ce:	f200 81ae 	bhi.w	801772e <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80173d2:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 80173d6:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 80173d8:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 80173dc:	ee77 7a88 	vadd.f32	s15, s15, s16
 80173e0:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80173e4:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 80173e8:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80173ec:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 80173f0:	eeac 0a8e 	vfma.f32	s0, s25, s28
 80173f4:	f002 fb20 	bl	8019a38 <lrintf>
	r -= (float)i;
 80173f8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173fc:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017400:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017404:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017408:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801740a:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801740e:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017416:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801741a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801741e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017422:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017426:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801742a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801742e:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017432:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017436:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801743a:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801743e:	3301      	adds	r3, #1
 8017440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017444:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8017448:	f8d7 8000 	ldr.w	r8, [r7]
 801744c:	e59f      	b.n	8016f8e <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801744e:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8017350 <tMBSineTri_tick+0xb68>
 8017452:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 8017456:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801745a:	ee6c caa7 	vmul.f32	s25, s25, s15
 801745e:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8017462:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 8017466:	f002 fae7 	bl	8019a38 <lrintf>
	r -= (float)i;
 801746a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801746e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017472:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801747a:	3301      	adds	r3, #1
 801747c:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
 8017480:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 8017484:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801748c:	eeb0 fa6e 	vmov.f32	s30, s29
 8017490:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017494:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017498:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
 801749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80174a0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80174a4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80174a8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80174ac:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80174b0:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80174b4:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80174b8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80174bc:	f103 0301 	add.w	r3, r3, #1
 80174c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174c4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 80174c8:	da76      	bge.n	80175b8 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80174ca:	ee79 7a08 	vadd.f32	s15, s18, s16
 80174ce:	f8d7 8000 	ldr.w	r8, [r7]
 80174d2:	ee37 bacb 	vsub.f32	s22, s15, s22
 80174d6:	eeeb ba2d 	vfma.f32	s23, s22, s27
 80174da:	eef0 fa6b 	vmov.f32	s31, s23
 80174de:	e556      	b.n	8016f8e <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 80174e0:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 80174e4:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 80174e8:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 80174ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 80174f0:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 80174f4:	f300 80d8 	bgt.w	80176a8 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 80174f8:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 80174fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017500:	f100 812a 	bmi.w	8017758 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 8017504:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 8017508:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8017350 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 801750c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017510:	ee6c caa7 	vmul.f32	s25, s25, s15
 8017514:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8017518:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801751c:	f002 fa8c 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017520:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017524:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8017528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801752c:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8017530:	e6d8      	b.n	80172e4 <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 8017532:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 8017536:	2600      	movs	r6, #0
                p -= 1.0f;
 8017538:	eeb0 aa4e 	vmov.f32	s20, s28
 801753c:	f7ff b9ba 	b.w	80168b4 <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 8017540:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8017544:	683f      	ldr	r7, [r7, #0]
 8017546:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 801754a:	464e      	mov	r6, r9
}
 801754c:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8017550:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8017554:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
 8017558:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 801755c:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8017560:	f002 fa6a 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017564:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017568:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801756c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017574:	3301      	adds	r3, #1
	scale *= w;
 8017576:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801757a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801757e:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017582:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017586:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801758a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801758e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017592:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017596:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801759a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801759e:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80175a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80175a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80175aa:	3301      	adds	r3, #1
 80175ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80175b4:	f7ff b97e 	b.w	80168b4 <tMBSineTri_tick+0xcc>
 80175b8:	f8d7 8000 	ldr.w	r8, [r7]
 80175bc:	e5c1      	b.n	8017142 <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 80175be:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 80175c2:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8017350 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80175c6:	ee3d fa2d 	vadd.f32	s30, s26, s27
 80175ca:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 80175ce:	eeb0 0a6f 	vmov.f32	s0, s31
 80175d2:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 80175d6:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 80175da:	eeac 0a8b 	vfma.f32	s0, s25, s22
 80175de:	f002 fa2b 	bl	8019a38 <lrintf>
	r -= (float)i;
 80175e2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175e6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80175ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80175ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175f2:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 80175f4:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80175fc:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 8017600:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017604:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017608:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801760c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017614:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017618:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801761c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017620:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017624:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017628:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801762c:	f103 0301 	add.w	r3, r3, #1
 8017630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017634:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8017638:	f340 80f7 	ble.w	801782a <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 801763c:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 8017640:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 8017642:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 8017646:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 801764a:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 801764e:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 8017652:	eeac 0a8e 	vfma.f32	s0, s25, s28
 8017656:	f002 f9ef 	bl	8019a38 <lrintf>
	r -= (float)i;
 801765a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801765e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017662:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801766a:	3301      	adds	r3, #1
	r -= (float)i;
 801766c:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017674:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017678:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801767c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017680:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017684:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8017688:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801768c:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017690:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017694:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017698:	3301      	adds	r3, #1
 801769a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801769e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 80176a2:	f8d7 8000 	ldr.w	r8, [r7]
 80176a6:	e5eb      	b.n	8017280 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 80176a8:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 80176ac:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 8017350 <tMBSineTri_tick+0xb68>
 80176b0:	ee3b fa49 	vsub.f32	s30, s22, s18
 80176b4:	ee6c caa7 	vmul.f32	s25, s25, s15
 80176b8:	eeb0 0a6b 	vmov.f32	s0, s23
 80176bc:	eeac 0a8f 	vfma.f32	s0, s25, s30
 80176c0:	f002 f9ba 	bl	8019a38 <lrintf>
	r -= (float)i;
 80176c4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176c8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80176cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80176d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176d4:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 80176d6:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80176de:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 80176e2:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176e6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80176ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80176ee:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 80176f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 80176f6:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 80176fa:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80176fe:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8017702:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017706:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801770a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801770e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017712:	f103 0301 	add.w	r3, r3, #1
 8017716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801771a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801771e:	d472      	bmi.n	8017806 <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 8017720:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 8017724:	f8d7 8000 	ldr.w	r8, [r7]
 8017728:	eeb1 ba4f 	vneg.f32	s22, s30
 801772c:	e5a8      	b.n	8017280 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 801772e:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 8017732:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 8017736:	eeac 0a8a 	vfma.f32	s0, s25, s20
 801773a:	f002 f97d 	bl	8019a38 <lrintf>
	r -= (float)i;
 801773e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017742:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8017746:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801774a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 801774e:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 8017752:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 8017756:	e448      	b.n	8016fea <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017758:	ee3d fa2d 	vadd.f32	s30, s26, s27
 801775c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017844 <tMBSineTri_tick+0x105c>
 8017760:	ee6c caa7 	vmul.f32	s25, s25, s15
 8017764:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017768:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801776c:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017770:	ee78 7a4b 	vsub.f32	s15, s16, s22
 8017774:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 8017778:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 801777c:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8017780:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 8017784:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8017788:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 801778c:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 8017790:	f002 f952 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017794:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017798:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801779c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80177a0:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 80177a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80177a8:	3301      	adds	r3, #1
 80177aa:	ee78 8ac8 	vsub.f32	s17, s17, s16
 80177ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80177b2:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 80177b6:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80177ba:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80177be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80177c2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 80177c6:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80177ca:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80177ce:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80177d2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80177d6:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80177da:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80177de:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80177e2:	3301      	adds	r3, #1
 80177e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80177e8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80177ec:	f002 f924 	bl	8019a38 <lrintf>
	r -= (float)i;
 80177f0:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80177f4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80177f8:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80177fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017800:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8017804:	e56e      	b.n	80172e4 <tMBSineTri_tick+0xafc>
 8017806:	f8d7 8000 	ldr.w	r8, [r7]
 801780a:	e7ad      	b.n	8017768 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 801780c:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8017810:	eeb0 aa4b 	vmov.f32	s20, s22
 8017814:	f7ff b82f 	b.w	8016876 <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 8017818:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 801781c:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801781e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017822:	eee7 8aad 	vfma.f32	s17, s15, s27
 8017826:	f7ff b845 	b.w	80168b4 <tMBSineTri_tick+0xcc>
 801782a:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801782e:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 8017832:	eeb0 0a6f 	vmov.f32	s0, s31
 8017836:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801783a:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 801783e:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8017842:	e7d3      	b.n	80177ec <tMBSineTri_tick+0x1004>
 8017844:	42800000 	.word	0x42800000

08017848 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 8017848:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801784a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801784e:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8017852:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017856:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801785a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801785e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8017862:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8017866:	4770      	bx	lr

08017868 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 8017868:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801786e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8017872:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8017876:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801787a:	eef1 7a67 	vneg.f32	s15, s15
 801787e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017882:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801788a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801788e:	bfcc      	ite	gt
 8017890:	2201      	movgt	r2, #1
 8017892:	2200      	movle	r2, #0
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	f002 0201 	and.w	r2, r2, #1
 801789c:	bf88      	it	hi
 801789e:	2200      	movhi	r2, #0
 80178a0:	b122      	cbz	r2, 80178ac <tMBSineTri_sync+0x44>
 80178a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80178a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178aa:	da04      	bge.n	80178b6 <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80178ac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80178c4 <tMBSineTri_sync+0x5c>
 80178b0:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 80178b4:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80178b6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80178ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80178be:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80178c2:	4770      	bx	lr
 80178c4:	00000000 	.word	0x00000000

080178c8 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 80178c8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 80178ca:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 80178ce:	4770      	bx	lr

080178d0 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 80178d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80178d2:	698e      	ldr	r6, [r1, #24]
{
 80178d4:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80178d6:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80178da:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80178dc:	4631      	mov	r1, r6
 80178de:	f7fc ff33 	bl	8014748 <mpool_alloc>
 80178e2:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 80178e4:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 80178e6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80178e8:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80178ea:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80178ec:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8017948 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 80178f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 80178f4:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80178f8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 80178fc:	eddf 7a13 	vldr	s15, [pc, #76]	; 801794c <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 8017900:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8017904:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 8017906:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801790a:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 801790c:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801790e:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 8017910:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017912:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8017916:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 8017918:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 801791a:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 801791c:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801791e:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017922:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8017924:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017928:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801792c:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 801792e:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017932:	f001 fe4d 	bl	80195d0 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8017936:	4629      	mov	r1, r5
 8017938:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801793c:	2220      	movs	r2, #32
}
 801793e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017942:	f001 be45 	b.w	80195d0 <memset>
 8017946:	bf00      	nop
 8017948:	3b14f209 	.word	0x3b14f209
 801794c:	43dc0000 	.word	0x43dc0000

08017950 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 8017950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017954:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 8017958:	6804      	ldr	r4, [r0, #0]
{
 801795a:	b082      	sub	sp, #8
 801795c:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 801795e:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 8017962:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017966:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 801796a:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 801796e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017974:	f340 813d 	ble.w	8017bf2 <tMBSaw_tick+0x2a2>
 8017978:	69a3      	ldr	r3, [r4, #24]
 801797a:	2b00      	cmp	r3, #0
 801797c:	f340 80b1 	ble.w	8017ae2 <tMBSaw_tick+0x192>
 8017980:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 8017984:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017988:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 801798c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8017990:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017994:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8017998:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 801799c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80179a0:	ee37 8a27 	vadd.f32	s16, s14, s15
 80179a4:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 80179a8:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 80179ac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80179b0:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80179b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b8:	f280 8135 	bge.w	8017c26 <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 80179bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80179c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c4:	f100 8193 	bmi.w	8017cee <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 80179c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80179cc:	1d33      	adds	r3, r6, #4
 80179ce:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 80179d2:	ee37 7a48 	vsub.f32	s14, s14, s16
 80179d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80179da:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80179de:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80179e2:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80179e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	f000 817a 	beq.w	8017ce4 <tMBSaw_tick+0x394>
 80179f0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80179f4:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80179f8:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80179fc:	2000      	movs	r0, #0
 80179fe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017a02:	4deb      	ldr	r5, [pc, #940]	; (8017db0 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017a04:	ebae 0300 	sub.w	r3, lr, r0
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8017a0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a16:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017a1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017a22:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8017a26:	b289      	uxth	r1, r1
 8017a28:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8017a2c:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017a2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a32:	fa1f f888 	uxth.w	r8, r8
 8017a36:	fa1f f989 	uxth.w	r9, r9
 8017a3a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8017a3e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8017a42:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 8017a46:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8017a4a:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017a4e:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a50:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 8017a54:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8017a58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017a5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a60:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8017a64:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017a68:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017a6a:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a6e:	edd9 6a01 	vldr	s13, [r9, #4]
 8017a72:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017a76:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017a7a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a7e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017a82:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017a86:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017a8a:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 8017a8e:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017a90:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017a94:	f0c0 80a6 	bcc.w	8017be4 <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 8017a98:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8017aa2:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017aa4:	4290      	cmp	r0, r2
			c->numBLEPs--;
 8017aa6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017aaa:	dbab      	blt.n	8017a04 <tMBSaw_tick+0xb4>
 8017aac:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017ab0:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8017ab4:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017ab6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8017aba:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017abe:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8017ac2:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 8017ac6:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017ac8:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 8017acc:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8017ad0:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8017ad4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8017ad8:	b002      	add	sp, #8
 8017ada:	ecbd 8b08 	vpop	{d8-d11}
 8017ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 8017ae2:	edd4 8a05 	vldr	s17, [r4, #20]
 8017ae6:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 8017aea:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8017aee:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 8017af2:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 8017af6:	eebd 9aca 	vcvt.s32.f32	s18, s20
 8017afa:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8017afe:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8017b02:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8017b06:	f040 815e 	bne.w	8017dc6 <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 8017b0a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 8017b0e:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 8017b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8017b16:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 8017b1a:	f340 80b2 	ble.w	8017c82 <tMBSaw_tick+0x332>
 8017b1e:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 8017b22:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8017b26:	eef4 aacb 	vcmpe.f32	s21, s22
 8017b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2e:	db2d      	blt.n	8017b8c <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 8017b30:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017b34:	eddf ba9f 	vldr	s23, [pc, #636]	; 8017db4 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017b38:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017b3c:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017b40:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 8017b44:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8017b48:	f001 ff76 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017b4c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b50:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017b54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b5c:	3301      	adds	r3, #1
	r -= (float)i;
 8017b5e:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b66:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b6a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b6e:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b72:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017b76:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b7a:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017b7e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8017b82:	3301      	adds	r3, #1
 8017b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b88:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 8017b8c:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8017b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b94:	f100 80da 	bmi.w	8017d4c <tMBSaw_tick+0x3fc>
        if (sw > 0)
 8017b98:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	dc74      	bgt.n	8017c8c <tMBSaw_tick+0x33c>
        else if (sw < 0)
 8017ba2:	f57f af11 	bpl.w	80179c8 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 8017ba6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017baa:	ed9f 9a82 	vldr	s18, [pc, #520]	; 8017db4 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017bae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017bb2:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017bb4:	ee28 9a89 	vmul.f32	s18, s17, s18
 8017bb8:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 8017bbc:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 8017bc0:	eea9 0a28 	vfma.f32	s0, s18, s17
 8017bc4:	f001 ff38 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017bc8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bcc:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017bd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bd8:	3301      	adds	r3, #1
	r -= (float)i;
 8017bda:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017be2:	e06b      	b.n	8017cbc <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017be4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017be8:	3001      	adds	r0, #1
 8017bea:	4283      	cmp	r3, r0
 8017bec:	f73f af0a 	bgt.w	8017a04 <tMBSaw_tick+0xb4>
 8017bf0:	e75c      	b.n	8017aac <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 8017bf2:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 8017bf6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 8017bfa:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 8017bfe:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8017c02:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 8017c06:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 8017c0a:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 8017c0e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8017c12:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8017c16:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 8017c1a:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8017c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c22:	f6ff aecb 	blt.w	80179bc <tMBSaw_tick+0x6c>
        p -= 1.0f;
 8017c26:	eddf 7a63 	vldr	s15, [pc, #396]	; 8017db4 <tMBSaw_tick+0x464>
 8017c2a:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 8017c2e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017c32:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017c34:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 8017c38:	eea8 0a88 	vfma.f32	s0, s17, s16
 8017c3c:	f001 fefc 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017c40:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c44:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017c48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c50:	3301      	adds	r3, #1
	r -= (float)i;
 8017c52:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c5a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c5e:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c62:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c66:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017c6a:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c6e:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017c72:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017c76:	3301      	adds	r3, #1
 8017c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c7c:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017c80:	e6a2      	b.n	80179c8 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 8017c82:	f100 809b 	bmi.w	8017dbc <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 8017c86:	eeb0 8a49 	vmov.f32	s16, s18
 8017c8a:	e74a      	b.n	8017b22 <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 8017c8c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8017db4 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017c90:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017c94:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017c96:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 8017c9a:	eea8 0a88 	vfma.f32	s0, s17, s16
 8017c9e:	f001 fecb 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017ca2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ca6:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017caa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cb2:	3301      	adds	r3, #1
	r -= (float)i;
 8017cb4:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017cbc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cc0:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017cc4:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017cc8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017ccc:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017cd0:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017cd4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017cd8:	3301      	adds	r3, #1
 8017cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cde:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017ce2:	e671      	b.n	80179c8 <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017ce4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017ce8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8017cec:	e6e0      	b.n	8017ab0 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 8017cee:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 8017cf2:	ed9f aa30 	vldr	s20, [pc, #192]	; 8017db4 <tMBSaw_tick+0x464>
 8017cf6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017cfa:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 8017cfc:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 8017d00:	eea8 0a8a 	vfma.f32	s0, s17, s20
 8017d04:	f001 fe98 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017d08:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d0c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017d10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d18:	4a27      	ldr	r2, [pc, #156]	; (8017db8 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d1a:	3301      	adds	r3, #1
	r -= (float)i;
 8017d1c:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d24:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d28:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d2c:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d30:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8017d34:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d38:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d3c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017d40:	3301      	adds	r3, #1
 8017d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d46:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017d4a:	e63d      	b.n	80179c8 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 8017d4c:	ed9f ba19 	vldr	s22, [pc, #100]	; 8017db4 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017d50:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 8017d54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 8017d58:	682f      	ldr	r7, [r5, #0]
 8017d5a:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
 8017d5e:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 8017d62:	eeab 0a09 	vfma.f32	s0, s22, s18
 8017d66:	f001 fe67 	bl	8019a38 <lrintf>
	r -= (float)i;
 8017d6a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017d72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d7a:	4a0f      	ldr	r2, [pc, #60]	; (8017db8 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d7c:	3301      	adds	r3, #1
	r -= (float)i;
 8017d7e:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d86:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d8a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d8e:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d92:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8017d96:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d9a:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017da2:	3301      	adds	r3, #1
 8017da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017da8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 8017dac:	e6f4      	b.n	8017b98 <tMBSaw_tick+0x248>
 8017dae:	bf00      	nop
 8017db0:	08029a18 	.word	0x08029a18
 8017db4:	42800000 	.word	0x42800000
 8017db8:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8017dbc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8017dc0:	ee38 8a47 	vsub.f32	s16, s16, s14
 8017dc4:	e6ad      	b.n	8017b22 <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 8017dc6:	eeb0 8a49 	vmov.f32	s16, s18
 8017dca:	e5ef      	b.n	80179ac <tMBSaw_tick+0x5c>

08017dcc <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 8017dcc:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 8017dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 8017dd2:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 8017dd6:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 8017dda:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8017dde:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 8017de2:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 8017de6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8017dea:	4770      	bx	lr

08017dec <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 8017dec:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017df2:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8017df6:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8017dfa:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017dfe:	eef1 7a67 	vneg.f32	s15, s15
 8017e02:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017e06:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e0e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017e12:	bfcc      	ite	gt
 8017e14:	2201      	movgt	r2, #1
 8017e16:	2200      	movle	r2, #0
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	f002 0201 	and.w	r2, r2, #1
 8017e20:	bf88      	it	hi
 8017e22:	2200      	movhi	r2, #0
 8017e24:	b122      	cbz	r2, 8017e30 <tMBSaw_sync+0x44>
 8017e26:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2e:	da04      	bge.n	8017e3a <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8017e30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8017e48 <tMBSaw_sync+0x5c>
 8017e34:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 8017e38:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8017e3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017e3e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017e42:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8017e46:	4770      	bx	lr
 8017e48:	00000000 	.word	0x00000000

08017e4c <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 8017e4c:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8017e4e:	698d      	ldr	r5, [r1, #24]
{
 8017e50:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017e52:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8017e56:	4629      	mov	r1, r5
 8017e58:	f7fc fc76 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 8017e5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017e60:	6030      	str	r0, [r6, #0]
    c->active = 1;
 8017e62:	2201      	movs	r2, #1
    c->mempool = m;
 8017e64:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017e66:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 8017e68:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8017e6a:	2500      	movs	r5, #0
    c->gain = 1.0f;
 8017e6c:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 8017e70:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017e74:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 8017e78:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 8017e7c:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8017e7e:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8017ed8 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 8017e82:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017edc <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8017e86:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 8017e8a:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 8017e8c:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017e90:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 8017e94:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 8017e96:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017e98:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 8017e9e:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 8017ea0:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ea2:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017ea4:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ea8:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8017eaa:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 8017eae:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 8017eb0:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 8017eb2:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 8017eb4:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 8017eb6:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017eb8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017ebc:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ebe:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 8017ec0:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ec4:	f001 fb84 	bl	80195d0 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8017ec8:	4629      	mov	r1, r5
 8017eca:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8017ece:	2220      	movs	r2, #32
}
 8017ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017ed4:	f001 bb7c 	b.w	80195d0 <memset>
 8017ed8:	3b14f209 	.word	0x3b14f209
 8017edc:	43dc0000 	.word	0x43dc0000

08017ee0 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 8017ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ee4:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 8017ee8:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 8017eea:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 8017eee:	b084      	sub	sp, #16
 8017ef0:	4607      	mov	r7, r0
    sync = c->sync;
 8017ef2:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 8017ef6:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017efa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017efe:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 8017f02:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 8017f06:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017f0a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 8017f0e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 8017f16:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8017f1a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 8017f1e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 8017f22:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017f24:	f340 80d8 	ble.w	80180d8 <tMBSawPulse_tick+0x1f8>
 8017f28:	69a3      	ldr	r3, [r4, #24]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	dd65      	ble.n	8017ffa <tMBSawPulse_tick+0x11a>
 8017f2e:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8017f32:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017f36:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8017f3a:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017f3e:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8017f42:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8017f46:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f4e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017f52:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 8017f56:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 8017f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f040 80d1 	bne.w	8018106 <tMBSawPulse_tick+0x226>
		if (sw > 0)
 8017f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f68:	f340 8210 	ble.w	801838c <tMBSawPulse_tick+0x4ac>
		{
			if (p >= b) {
 8017f6c:	eeb4 8acb 	vcmpe.f32	s16, s22
 8017f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f74:	f280 81cc 	bge.w	8018310 <tMBSawPulse_tick+0x430>
 8017f78:	eddf 5ae3 	vldr	s11, [pc, #908]	; 8018308 <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 8017f7c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017f80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f88:	f2c0 80cb 	blt.w	8018122 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
 8017f8c:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8017f8e:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 8017f92:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f000 81f3 	beq.w	8018382 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 8017f9c:	eddf 7adb 	vldr	s15, [pc, #876]	; 801830c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 8017fa0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 8017fa4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8017fa8:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 8017fac:	eea9 0a08 	vfma.f32	s0, s18, s16
 8017fb0:	f001 fd42 	bl	8019a38 <lrintf>
		r -= (float)i;
 8017fb4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fb8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017fbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8017fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017fc4:	eddf 5ad0 	vldr	s11, [pc, #832]	; 8018308 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fc8:	3301      	adds	r3, #1
		r -= (float)i;
 8017fca:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017fd2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fd6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017fda:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017fde:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017fe2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017fe6:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017fea:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8017fee:	3301      	adds	r3, #1
 8017ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ff4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8017ff8:	e093      	b.n	8018122 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 8017ffa:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8017ffe:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8018002:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8018006:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801800a:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 801800e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018012:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018016:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
 801801a:	f040 8639 	bne.w	8018c90 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
 801801e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018022:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 8018024:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 8018028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801802c:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 8018030:	f340 8117 	ble.w	8018262 <tMBSawPulse_tick+0x382>
		 if (!k)
 8018034:	ee1c 2a90 	vmov	r2, s25
 8018038:	2a00      	cmp	r2, #0
 801803a:	f040 8274 	bne.w	8018526 <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
 801803e:	eeb4 baed 	vcmpe.f32	s22, s27
 8018042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018046:	f240 83c0 	bls.w	80187ca <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
 801804a:	46a0      	mov	r8, r4
    if (c->active)
 801804c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018050:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
 8018054:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018058:	eef4 dae8 	vcmpe.f32	s27, s17
 801805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018060:	f280 82ad 	bge.w	80185be <tMBSawPulse_tick+0x6de>
    if (c->active)
 8018064:	b35a      	cbz	r2, 80180be <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 8018066:	eddf 8aa9 	vldr	s17, [pc, #676]	; 801830c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801806a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 801806e:	ee6d da8d 	vmul.f32	s27, s27, s26
 8018072:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8018076:	eea8 0a28 	vfma.f32	s0, s16, s17
 801807a:	f001 fcdd 	bl	8019a38 <lrintf>
		r -= (float)i;
 801807e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018082:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018086:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801808a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801808e:	3301      	adds	r3, #1
		r -= (float)i;
 8018090:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018098:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801809c:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80180a0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80180a4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80180a8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80180ac:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80180b0:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 80180b4:	3301      	adds	r3, #1
 80180b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80180ba:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
 80180be:	f1b9 0f00 	cmp.w	r9, #0
 80180c2:	f040 8419 	bne.w	80188f8 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
 80180c6:	eeb4 bac8 	vcmpe.f32	s22, s16
 80180ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ce:	f240 80df 	bls.w	8018290 <tMBSawPulse_tick+0x3b0>
		 if (!k)
 80180d2:	eddf 5a8d 	vldr	s11, [pc, #564]	; 8018308 <tMBSawPulse_tick+0x428>
 80180d6:	e024      	b.n	8018122 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 80180d8:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 80180dc:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 80180e0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80180e4:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 80180e8:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 80180ec:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80180f0:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 80180f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 80180f8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80180fc:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 8018100:	2b00      	cmp	r3, #0
 8018102:	f43f af2f 	beq.w	8017f64 <tMBSawPulse_tick+0x84>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 8018106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801810a:	f340 81bd 	ble.w	8018488 <tMBSawPulse_tick+0x5a8>
		{
			if (p >= 1.0f) {
 801810e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018112:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811a:	f280 80ac 	bge.w	8018276 <tMBSawPulse_tick+0x396>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801811e:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8018122:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018126:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 8018128:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801812c:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8018130:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 8018134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018138:	eea6 7a8d 	vfma.f32	s14, s13, s26
 801813c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8018140:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8018144:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018148:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801814c:	2b00      	cmp	r3, #0
 801814e:	f000 81e5 	beq.w	801851c <tMBSawPulse_tick+0x63c>
 8018152:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018156:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801815a:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801815e:	2000      	movs	r0, #0
 8018160:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018164:	4d67      	ldr	r5, [pc, #412]	; (8018304 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018166:	ebae 0300 	sub.w	r3, lr, r0
 801816a:	b29b      	uxth	r3, r3
 801816c:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 8018170:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018178:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801817c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8018180:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018184:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8018188:	b289      	uxth	r1, r1
 801818a:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 801818e:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018190:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018194:	fa1f f888 	uxth.w	r8, r8
 8018198:	fa1f f989 	uxth.w	r9, r9
 801819c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80181a0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80181a4:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 80181a8:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80181ac:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80181b0:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181b2:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 80181b6:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 80181ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80181be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181c2:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80181c6:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80181ca:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80181cc:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181d0:	edd9 6a01 	vldr	s13, [r9, #4]
 80181d4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80181d8:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80181dc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80181e4:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80181e8:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80181ec:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 80181f0:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80181f6:	d32e      	bcc.n	8018256 <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
 80181f8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80181fc:	3001      	adds	r0, #1
 80181fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
 8018202:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018204:	4282      	cmp	r2, r0
			c->numBLEPs--;
 8018206:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801820a:	dcac      	bgt.n	8018166 <tMBSawPulse_tick+0x286>
 801820c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018210:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 8018214:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018218:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 801821c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801821e:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 8018222:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 8018226:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801822a:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 801822e:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018232:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8018236:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 801823a:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 801823c:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 8018240:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 8018244:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018248:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801824c:	b004      	add	sp, #16
 801824e:	ecbd 8b0e 	vpop	{d8-d14}
 8018252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018256:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801825a:	3001      	adds	r0, #1
 801825c:	4283      	cmp	r3, r0
 801825e:	dc82      	bgt.n	8018166 <tMBSawPulse_tick+0x286>
 8018260:	e7d4      	b.n	801820c <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018262:	f100 8229 	bmi.w	80186b8 <tMBSawPulse_tick+0x7d8>
		 if (!k)
 8018266:	ee1c 2a90 	vmov	r2, s25
 801826a:	2a00      	cmp	r2, #0
 801826c:	f040 8197 	bne.w	801859e <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
 8018270:	eeb0 8a68 	vmov.f32	s16, s17
 8018274:	e72d      	b.n	80180d2 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 8018276:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8018278:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801827c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018280:	2b00      	cmp	r3, #0
 8018282:	f040 8161 	bne.w	8018548 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
 8018286:	eeb4 bac8 	vcmpe.f32	s22, s16
 801828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828e:	d878      	bhi.n	8018382 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 8018290:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018292:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018296:	2b00      	cmp	r3, #0
 8018298:	f000 8151 	beq.w	801853e <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
 801829c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801830c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 80182a0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 80182a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80182a8:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
 80182ac:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 80182b0:	eea8 0a89 	vfma.f32	s0, s17, s18
 80182b4:	f001 fbc0 	bl	8019a38 <lrintf>
		r -= (float)i;
 80182b8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182bc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80182c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80182c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182c8:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 80182ca:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80182d6:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 80182da:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182de:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80182e2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80182e6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80182ea:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80182ee:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182f2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80182f6:	3301      	adds	r3, #1
 80182f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182fc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018300:	e70f      	b.n	8018122 <tMBSawPulse_tick+0x242>
 8018302:	bf00      	nop
 8018304:	08029a18 	.word	0x08029a18
 8018308:	00000000 	.word	0x00000000
 801830c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 8018310:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018312:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018316:	2b00      	cmp	r3, #0
 8018318:	f000 814c 	beq.w	80185b4 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
 801831c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 801830c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018320:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 8018324:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018328:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 801832c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018330:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018334:	f001 fb80 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018338:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801833c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018340:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018348:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801834a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801834e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018356:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801835a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801835e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018362:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018366:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801836a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801836e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018372:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018376:	3301      	adds	r3, #1
 8018378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801837c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018380:	e5fc      	b.n	8017f7c <tMBSawPulse_tick+0x9c>
				x = 0.5f;
 8018382:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 8018386:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 8018308 <tMBSawPulse_tick+0x428>
 801838a:	e6ca      	b.n	8018122 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
 801838c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018394:	f57f ae9d 	bpl.w	80180d2 <tMBSawPulse_tick+0x1f2>
 8018398:	eef5 7a40 	vcmp.f32	s15, #0.0
 801839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a0:	f57f ae97 	bpl.w	80180d2 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 80183a4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 80183a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 80183aa:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 80183ae:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 80183b2:	b353      	cbz	r3, 801840a <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
 80183b4:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 80183b8:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 801830c <tMBSawPulse_tick+0x42c>
 80183bc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80183c0:	eea8 0a29 	vfma.f32	s0, s16, s19
 80183c4:	f001 fb38 	bl	8019a38 <lrintf>
		r -= (float)i;
 80183c8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183cc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80183d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80183d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80183d8:	4ab2      	ldr	r2, [pc, #712]	; (80186a4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183da:	3301      	adds	r3, #1
		r -= (float)i;
 80183dc:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80183e4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183e8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80183ec:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80183f0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80183f4:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80183f8:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80183fc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018400:	3301      	adds	r3, #1
 8018402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018406:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 801840a:	eeb4 bae8 	vcmpe.f32	s22, s17
 801840e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018412:	f340 8446 	ble.w	8018ca2 <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
 8018416:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018418:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801841c:	2b00      	cmp	r3, #0
 801841e:	f000 8327 	beq.w	8018a70 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
 8018422:	eddf 7aa4 	vldr	s15, [pc, #656]	; 80186b4 <tMBSawPulse_tick+0x7d4>
 8018426:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801842a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801842e:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 8018432:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018436:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 801843a:	eea9 0a29 	vfma.f32	s0, s18, s19
 801843e:	f001 fafb 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018442:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018446:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801844a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801844e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018452:	eddf 5a97 	vldr	s11, [pc, #604]	; 80186b0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018456:	3301      	adds	r3, #1
		r -= (float)i;
 8018458:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801845c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018460:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018464:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018468:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801846c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018470:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018474:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018478:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801847c:	3301      	adds	r3, #1
 801847e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018482:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018486:	e64c      	b.n	8018122 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
 8018488:	f57f ae49 	bpl.w	801811e <tMBSawPulse_tick+0x23e>
			if (p < b) {
 801848c:	eeb4 8acb 	vcmpe.f32	s16, s22
 8018490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018494:	f100 80cd 	bmi.w	8018632 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
 8018498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801849c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a0:	f57f ae3d 	bpl.w	801811e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 80184a4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 80184a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 80184aa:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 80184ae:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f000 8302 	beq.w	8018abc <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
 80184b8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80184bc:	eddf 9a7d 	vldr	s19, [pc, #500]	; 80186b4 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
 80184c0:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 80184c4:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 80184c8:	eeb0 0a6a 	vmov.f32	s0, s21
 80184cc:	eea9 0a29 	vfma.f32	s0, s18, s19
 80184d0:	f001 fab2 	bl	8019a38 <lrintf>
		r -= (float)i;
 80184d4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184d8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80184dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80184e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80184e4:	4a6f      	ldr	r2, [pc, #444]	; (80186a4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184e6:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80184e8:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80184f0:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 80184f4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184f8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80184fc:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018500:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8018504:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018508:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801850c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018510:	3301      	adds	r3, #1
 8018512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018516:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801851a:	e602      	b.n	8018122 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801851c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018520:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8018524:	e674      	b.n	8018210 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
 8018526:	eef4 dae9 	vcmpe.f32	s27, s19
 801852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801852e:	f280 8159 	bge.w	80187e4 <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
 8018532:	46a0      	mov	r8, r4
    if (c->active)
 8018534:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 8018538:	ee1c 9a90 	vmov	r9, s25
 801853c:	e592      	b.n	8018064 <tMBSawPulse_tick+0x184>
 801853e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 8018542:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018546:	e5ec      	b.n	8018122 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
 8018548:	eddf 9a5a 	vldr	s19, [pc, #360]	; 80186b4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801854c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018550:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018554:	eea9 0a88 	vfma.f32	s0, s19, s16
 8018558:	f001 fa6e 	bl	8019a38 <lrintf>
		r -= (float)i;
 801855c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018560:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018564:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801856c:	3301      	adds	r3, #1
		r -= (float)i;
 801856e:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018576:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801857a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801857e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018582:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018586:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801858a:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801858e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018592:	3301      	adds	r3, #1
 8018594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018598:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801859c:	e673      	b.n	8018286 <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
 801859e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80185a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a6:	f100 815b 	bmi.w	8018860 <tMBSawPulse_tick+0x980>
    c->_k = k;
 80185aa:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 80185ae:	eeb0 8a68 	vmov.f32	s16, s17
 80185b2:	e5b6      	b.n	8018122 <tMBSawPulse_tick+0x242>
 80185b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 80185b8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80185bc:	e4de      	b.n	8017f7c <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
 80185be:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 80185c2:	2a00      	cmp	r2, #0
 80185c4:	f000 810b 	beq.w	80187de <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 80185c8:	eddf 9a3a 	vldr	s19, [pc, #232]	; 80186b4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80185cc:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
 80185d0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 80185d4:	f04f 0900 	mov.w	r9, #0
 80185d8:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
 80185dc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 80185e0:	eeac 0aa9 	vfma.f32	s0, s25, s19
 80185e4:	f001 fa28 	bl	8019a38 <lrintf>
		r -= (float)i;
 80185e8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185ec:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80185f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80185f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185f8:	3301      	adds	r3, #1
		r -= (float)i;
 80185fa:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018602:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018606:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801860a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801860e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018612:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018616:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801861a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801861e:	3301      	adds	r3, #1
 8018620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018624:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018628:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801862c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 8018630:	e518      	b.n	8018064 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
 8018632:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018634:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 8018638:	ee1c 3a90 	vmov	r3, s25
 801863c:	2b00      	cmp	r3, #0
 801863e:	f000 820d 	beq.w	8018a5c <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
 8018642:	eddf 9a1c 	vldr	s19, [pc, #112]	; 80186b4 <tMBSawPulse_tick+0x7d4>
 8018646:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801864a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 801864e:	eddf ca16 	vldr	s25, [pc, #88]	; 80186a8 <tMBSawPulse_tick+0x7c8>
 8018652:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 8018656:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801865a:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801865e:	f001 f9eb 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018662:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018666:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801866a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801866e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018672:	3301      	adds	r3, #1
		r -= (float)i;
 8018674:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801867c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018680:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018684:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018688:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801868c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018690:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018694:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018698:	3301      	adds	r3, #1
 801869a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801869e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80186a2:	e6f9      	b.n	8018498 <tMBSawPulse_tick+0x5b8>
 80186a4:	bf800000 	.word	0xbf800000
 80186a8:	00000000 	.word	0x00000000
 80186ac:	00000001 	.word	0x00000001
 80186b0:	00000000 	.word	0x00000000
 80186b4:	42800000 	.word	0x42800000
		 if (!k)
 80186b8:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 80186bc:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 80186c0:	2a00      	cmp	r2, #0
 80186c2:	f040 80cf 	bne.w	8018864 <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
 80186c6:	eef5 da40 	vcmp.f32	s27, #0.0
 80186ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ce:	d571      	bpl.n	80187b4 <tMBSawPulse_tick+0x8d4>
    if (c->active)
 80186d0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 80186d4:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 80186d8:	2b00      	cmp	r3, #0
 80186da:	f040 8231 	bne.w	8018b40 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
 80186de:	eeb4 baed 	vcmpe.f32	s22, s27
 80186e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e6:	f340 82d7 	ble.w	8018c98 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
 80186ea:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 80186ee:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	f000 81d6 	beq.w	8018aa4 <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
 80186f8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80186fc:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 80186b4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8018700:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 8018704:	ed5f ca17 	vldr	s25, [pc, #-92]	; 80186ac <tMBSawPulse_tick+0x7cc>
 8018708:	ee69 9a29 	vmul.f32	s19, s18, s19
 801870c:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 8018710:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018714:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018718:	f001 f98e 	bl	8019a38 <lrintf>
		r -= (float)i;
 801871c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018720:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018724:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801872c:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 801872e:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018736:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801873a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801873e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018742:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018746:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801874a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801874e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018752:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018756:	3301      	adds	r3, #1
 8018758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801875c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 8018760:	eeb4 bace 	vcmpe.f32	s22, s28
 8018764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018768:	f77f acd9 	ble.w	801811e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801876c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801876e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018772:	2b00      	cmp	r3, #0
 8018774:	f43f ae05 	beq.w	8018382 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 8018778:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 80186b4 <tMBSawPulse_tick+0x7d4>
 801877c:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 8018780:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018784:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 8018788:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801878c:	eea9 0a0e 	vfma.f32	s0, s18, s28
 8018790:	f001 f952 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018794:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018798:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801879c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80187a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80187a4:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 80186b0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187a8:	3301      	adds	r3, #1
		r -= (float)i;
 80187aa:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80187b2:	e655      	b.n	8018460 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
 80187b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187bc:	f100 814b 	bmi.w	8018a56 <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
 80187c0:	eeb0 8a4e 	vmov.f32	s16, s28
 80187c4:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 80186b0 <tMBSawPulse_tick+0x7d0>
 80187c8:	e4ab      	b.n	8018122 <tMBSawPulse_tick+0x242>
    if (c->active)
 80187ca:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	f040 8109 	bne.w	80189e6 <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
 80187d4:	eef4 dae9 	vcmpe.f32	s27, s19
 80187d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187dc:	db0f      	blt.n	80187fe <tMBSawPulse_tick+0x91e>
				x = 0.5f;
 80187de:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80187e2:	e470      	b.n	80180c6 <tMBSawPulse_tick+0x1e6>
    if (c->active)
 80187e4:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 80187e8:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 80187ec:	f1b9 0f00 	cmp.w	r9, #0
 80187f0:	f040 8084 	bne.w	80188fc <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
 80187f4:	eeb4 baed 	vcmpe.f32	s22, s27
 80187f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fc:	d8ef      	bhi.n	80187de <tMBSawPulse_tick+0x8fe>
    if (c->active)
 80187fe:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018802:	2b00      	cmp	r3, #0
 8018804:	d0eb      	beq.n	80187de <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 8018806:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 80186b4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801880a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 801880e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018812:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8018816:	eea8 0a28 	vfma.f32	s0, s16, s17
 801881a:	f001 f90d 	bl	8019a38 <lrintf>
		r -= (float)i;
 801881e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018822:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018826:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801882a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801882e:	3301      	adds	r3, #1
		r -= (float)i;
 8018830:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018838:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801883c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018840:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018844:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018848:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801884c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018850:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018854:	3301      	adds	r3, #1
 8018856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801885a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801885e:	e432      	b.n	80180c6 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 8018860:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 8018864:	eeb4 baed 	vcmpe.f32	s22, s27
 8018868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801886c:	f300 8108 	bgt.w	8018a80 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
 8018870:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 8018874:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 8018878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801887c:	f100 8126 	bmi.w	8018acc <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018880:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 8018884:	b38b      	cbz	r3, 80188ea <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
 8018886:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801888a:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 80186b4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801888e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018892:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018896:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801889a:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
 801889e:	eea9 0aae 	vfma.f32	s0, s19, s29
 80188a2:	f001 f8c9 	bl	8019a38 <lrintf>
		r -= (float)i;
 80188a6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188aa:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80188ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80188b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188b6:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 80188b8:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80188c0:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 80188c4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188c8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80188cc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188d0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80188d4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80188d8:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80188dc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80188e0:	3301      	adds	r3, #1
 80188e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188e6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 80188ea:	ee1c 3a90 	vmov	r3, s25
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	f47f af36 	bne.w	8018760 <tMBSawPulse_tick+0x880>
 80188f4:	683d      	ldr	r5, [r7, #0]
 80188f6:	e6fa      	b.n	80186ee <tMBSawPulse_tick+0x80e>
 80188f8:	683d      	ldr	r5, [r7, #0]
 80188fa:	e780      	b.n	80187fe <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
 80188fc:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8018900:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 80186b4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8018904:	ee78 aa2d 	vadd.f32	s21, s16, s27
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801890e:	eeb0 0a6c 	vmov.f32	s0, s25
 8018912:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 8018916:	f001 f88f 	bl	8019a38 <lrintf>
		r -= (float)i;
 801891a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801891e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018922:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
 801892a:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801892c:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 801892e:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018932:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
 8018936:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 801893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801893e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018942:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018946:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801894a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 801894e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018952:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018956:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801895a:	f102 0201 	add.w	r2, r2, #1
 801895e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8018962:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018966:	f8d7 8000 	ldr.w	r8, [r7]
 801896a:	4645      	mov	r5, r8
    if (c->active)
 801896c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 8018970:	f200 8175 	bhi.w	8018c5e <tMBSawPulse_tick+0xd7e>
    if (c->active)
 8018974:	2a00      	cmp	r2, #0
 8018976:	f43f af42 	beq.w	80187fe <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801897a:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
 801897e:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
 8018982:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
 8018986:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801898a:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 801898e:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018992:	f001 f851 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018996:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801899a:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801899e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80189a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189a6:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80189a8:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80189b0:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 80189b4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189b8:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80189bc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80189c0:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80189c4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189c8:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80189cc:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 80189d0:	444b      	add	r3, r9
 80189d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189d6:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80189da:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 80189de:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 80189e2:	f7ff bb3f 	b.w	8018064 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
 80189e6:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 80186b4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80189ea:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 80189ee:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 80189f2:	f04f 0901 	mov.w	r9, #1
 80189f6:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 80189fa:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 80189fe:	eea8 0aa9 	vfma.f32	s0, s17, s19
 8018a02:	f001 f819 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018a06:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018a0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018a12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a16:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8018a18:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018a20:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018a24:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a28:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018a2c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a30:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8018a34:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a38:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a3c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8018a40:	444b      	add	r3, r9
 8018a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a46:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018a4a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 8018a4e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 8018a52:	f7ff baff 	b.w	8018054 <tMBSawPulse_tick+0x174>
 8018a56:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018a5a:	e711      	b.n	8018880 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
 8018a5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a64:	f100 8100 	bmi.w	8018c68 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
 8018a68:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018a6c:	f7ff bb57 	b.w	801811e <tMBSawPulse_tick+0x23e>
				x = 0.5f;
 8018a70:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018a74:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8018cb4 <tMBSawPulse_tick+0xdd4>
 8018a78:	eeb0 8a68 	vmov.f32	s16, s17
 8018a7c:	f7ff bb51 	b.w	8018122 <tMBSawPulse_tick+0x242>
    if (c->active)
 8018a80:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 8018a84:	ee1c 2a90 	vmov	r2, s25
 8018a88:	2a00      	cmp	r2, #0
 8018a8a:	f040 80b6 	bne.w	8018bfa <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
 8018a8e:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8018a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a96:	f100 80ef 	bmi.w	8018c78 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 8018a9a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 8018a9e:	eeb0 8a4e 	vmov.f32	s16, s28
 8018aa2:	e722      	b.n	80188ea <tMBSawPulse_tick+0xa0a>
			if (p < b) {
 8018aa4:	eeb4 bace 	vcmpe.f32	s22, s28
 8018aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aac:	f73f ac69 	bgt.w	8018382 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 8018ab0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 8018ab4:	eddf ca80 	vldr	s25, [pc, #512]	; 8018cb8 <tMBSawPulse_tick+0xdd8>
 8018ab8:	f7ff bb31 	b.w	801811e <tMBSawPulse_tick+0x23e>
				x = -0.5f;
 8018abc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 8018ac0:	eeb0 8a67 	vmov.f32	s16, s15
 8018ac4:	eef0 5a68 	vmov.f32	s11, s17
 8018ac8:	f7ff bb2b 	b.w	8018122 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
 8018acc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018ad0:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	f000 80cf 	beq.w	8018c78 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 8018ada:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8018cbc <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 8018ade:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 8018ae2:	eddf ca75 	vldr	s25, [pc, #468]	; 8018cb8 <tMBSawPulse_tick+0xdd8>
 8018ae6:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 8018aea:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018aee:	eea8 0a28 	vfma.f32	s0, s16, s17
 8018af2:	f000 ffa1 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018af6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018afa:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018afe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b06:	4a6e      	ldr	r2, [pc, #440]	; (8018cc0 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b08:	3301      	adds	r3, #1
		r -= (float)i;
 8018b0a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018b12:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b16:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018b1a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b1e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8018b22:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b26:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018b2a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018b2e:	3301      	adds	r3, #1
 8018b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b34:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018b38:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018b3a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018b3e:	e69f      	b.n	8018880 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
 8018b40:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8018cbc <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 8018b44:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018b48:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018b4c:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018b50:	f000 ff72 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018b54:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b58:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018b5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b64:	4a56      	ldr	r2, [pc, #344]	; (8018cc0 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b66:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 8018b68:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018b70:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 8018b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018b78:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b7c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018b80:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b84:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8018b88:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b8c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018b90:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8018b94:	f103 0301 	add.w	r3, r3, #1
 8018b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b9c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018ba0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018ba2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 8018ba6:	dd6e      	ble.n	8018c86 <tMBSawPulse_tick+0xda6>
    if (c->active)
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	f43f ad9e 	beq.w	80186ea <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
 8018bae:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 8018bb2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 8018bb6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018bba:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 8018bbe:	eea8 0a29 	vfma.f32	s0, s16, s19
 8018bc2:	f000 ff39 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018bc6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018bca:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018bce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018bd6:	3301      	adds	r3, #1
		r -= (float)i;
 8018bd8:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018be0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018be4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018be8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bec:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018bf0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018bf4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018bf8:	e797      	b.n	8018b2a <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
 8018bfa:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8018cbc <tMBSawPulse_tick+0xddc>
 8018bfe:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 8018c02:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 8018c06:	ee0c 3a90 	vmov	s25, r3
 8018c0a:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 8018c0e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8018c12:	eea9 0a88 	vfma.f32	s0, s19, s16
 8018c16:	f000 ff0f 	bl	8019a38 <lrintf>
		r -= (float)i;
 8018c1a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c1e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c22:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c2a:	3301      	adds	r3, #1
		r -= (float)i;
 8018c2c:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018c34:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c38:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018c3c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c40:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018c44:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c48:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018c4c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018c50:	3301      	adds	r3, #1
 8018c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c56:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018c5a:	683d      	ldr	r5, [r7, #0]
 8018c5c:	e608      	b.n	8018870 <tMBSawPulse_tick+0x990>
 8018c5e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018c62:	4699      	mov	r9, r3
 8018c64:	f7ff b9fe 	b.w	8018064 <tMBSawPulse_tick+0x184>
				p += 1.0f;
 8018c68:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 8018c6c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 8018c70:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 8018c74:	f7ff ba55 	b.w	8018122 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018c78:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018c7c:	eddf ca0e 	vldr	s25, [pc, #56]	; 8018cb8 <tMBSawPulse_tick+0xdd8>
 8018c80:	eeb0 8a4e 	vmov.f32	s16, s28
 8018c84:	e56c      	b.n	8018760 <tMBSawPulse_tick+0x880>
 8018c86:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018c8a:	eddf ca0b 	vldr	s25, [pc, #44]	; 8018cb8 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
 8018c8e:	e5f7      	b.n	8018880 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
 8018c90:	eeb0 8a68 	vmov.f32	s16, s17
 8018c94:	f7ff b95f 	b.w	8017f56 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
 8018c98:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018c9c:	eddf ca06 	vldr	s25, [pc, #24]	; 8018cb8 <tMBSawPulse_tick+0xdd8>
 8018ca0:	e6fd      	b.n	8018a9e <tMBSawPulse_tick+0xbbe>
 8018ca2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018ca6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018caa:	eeb0 8a68 	vmov.f32	s16, s17
 8018cae:	f7ff ba38 	b.w	8018122 <tMBSawPulse_tick+0x242>
 8018cb2:	bf00      	nop
 8018cb4:	00000000 	.word	0x00000000
 8018cb8:	00000001 	.word	0x00000001
 8018cbc:	42800000 	.word	0x42800000
 8018cc0:	bf800000 	.word	0xbf800000

08018cc4 <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 8018cc4:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8018cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 8018cca:	eddf 6a14 	vldr	s13, [pc, #80]	; 8018d1c <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018cce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 8018cd2:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 8018cd6:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018cda:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 8018cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 8018ce2:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ce6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8018cea:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 8018cee:	dc0c      	bgt.n	8018d0a <tMBSawPulse_setFreq+0x46>
 8018cf0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018d20 <tMBSawPulse_setFreq+0x5c>
 8018cf4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfc:	d405      	bmi.n	8018d0a <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 8018cfe:	2201      	movs	r2, #1
 8018d00:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8018d04:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 8018d08:	4770      	bx	lr
    	c->gain = 0.0f;
 8018d0a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8018d24 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 8018d0e:	2200      	movs	r2, #0
 8018d10:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8018d14:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 8018d18:	4770      	bx	lr
 8018d1a:	bf00      	nop
 8018d1c:	45bb8000 	.word	0x45bb8000
 8018d20:	c5bb8000 	.word	0xc5bb8000
 8018d24:	00000000 	.word	0x00000000

08018d28 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 8018d28:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8018d2e:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8018d32:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8018d36:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8018d3a:	eef1 7a67 	vneg.f32	s15, s15
 8018d3e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018d42:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d4a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018d4e:	bfcc      	ite	gt
 8018d50:	2201      	movgt	r2, #1
 8018d52:	2200      	movle	r2, #0
 8018d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d58:	f002 0201 	and.w	r2, r2, #1
 8018d5c:	bf88      	it	hi
 8018d5e:	2200      	movhi	r2, #0
 8018d60:	b122      	cbz	r2, 8018d6c <tMBSawPulse_sync+0x44>
 8018d62:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d6a:	da04      	bge.n	8018d76 <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8018d6c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018d84 <tMBSawPulse_sync+0x5c>
 8018d70:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 8018d74:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018d76:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018d7a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018d7e:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8018d82:	4770      	bx	lr
 8018d84:	00000000 	.word	0x00000000

08018d88 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 8018d88:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8018d8a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8018d8e:	4770      	bx	lr

08018d90 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8018d90:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018d92:	698c      	ldr	r4, [r1, #24]
{
 8018d94:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018d96:	201c      	movs	r0, #28
 8018d98:	4621      	mov	r1, r4
 8018d9a:	f7fb fcd5 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 8018d9e:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018da0:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8018da2:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018da4:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018da6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018dbc <tIntPhasor_init+0x2c>
    c->phase    =  0;
 8018daa:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8018db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018db4:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8018db8:	bd38      	pop	{r3, r4, r5, pc}
 8018dba:	bf00      	nop
 8018dbc:	4f800000 	.word	0x4f800000

08018dc0 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8018dc0:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8018dc2:	eddf 7a06 	vldr	s15, [pc, #24]	; 8018ddc <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8018dc6:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8018dca:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8018dcc:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8018dd0:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8018dd2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8018dd6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dda:	4770      	bx	lr
 8018ddc:	2f80000d 	.word	0x2f80000d

08018de0 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 8018de0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018de2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018de6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018dea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018df2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8018df6:	4770      	bx	lr

08018df8 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8018df8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8018dfc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8018e18 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8018e00:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8018e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e06:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8018e0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018e0e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018e12:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018e16:	4770      	bx	lr
 8018e18:	4f800000 	.word	0x4f800000

08018e1c <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8018e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e1e:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018e22:	698f      	ldr	r7, [r1, #24]
{
 8018e24:	4606      	mov	r6, r0
 8018e26:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018e28:	2010      	movs	r0, #16
 8018e2a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018e2c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018eb4 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018e30:	f7fb fc8a 	bl	8014748 <mpool_alloc>
 8018e34:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8018e36:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018e38:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8018e3a:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018e3c:	201c      	movs	r0, #28
 8018e3e:	4639      	mov	r1, r7
 8018e40:	f7fb fc82 	bl	8014748 <mpool_alloc>
 8018e44:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8018e46:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018e48:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8018e4a:	2700      	movs	r7, #0
 8018e4c:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e52:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018e56:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018e5a:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8018e5c:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018e5e:	4629      	mov	r1, r5
 8018e60:	f7fb fc72 	bl	8014748 <mpool_alloc>
 8018e64:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8018e66:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8018e68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8018e6c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8018e6e:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018e70:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e74:	eddf 6a10 	vldr	s13, [pc, #64]	; 8018eb8 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018e78:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018e7c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8018e80:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e82:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018e84:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e88:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8018e8c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018e92:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8018e96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018e9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018ea2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018eaa:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8018eae:	ecbd 8b02 	vpop	{d8}
 8018eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018eb4:	4f800000 	.word	0x4f800000
 8018eb8:	2f80000d 	.word	0x2f80000d

08018ebc <tSquareLFO_initToPool>:
{
 8018ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ebe:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8018ec2:	680f      	ldr	r7, [r1, #0]
{
 8018ec4:	4606      	mov	r6, r0
 8018ec6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018ec8:	2010      	movs	r0, #16
 8018eca:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018ecc:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018f54 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018ed0:	f7fb fc3a 	bl	8014748 <mpool_alloc>
 8018ed4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8018ed6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018ed8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8018eda:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018edc:	201c      	movs	r0, #28
 8018ede:	4639      	mov	r1, r7
 8018ee0:	f7fb fc32 	bl	8014748 <mpool_alloc>
 8018ee4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8018ee6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018ee8:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8018eea:	2700      	movs	r7, #0
 8018eec:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ef2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018ef6:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018efa:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8018efc:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018efe:	4629      	mov	r1, r5
 8018f00:	f7fb fc22 	bl	8014748 <mpool_alloc>
 8018f04:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8018f06:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 8018f08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8018f0c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8018f0e:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018f10:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018f14:	eddf 6a10 	vldr	s13, [pc, #64]	; 8018f58 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018f18:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018f1c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8018f20:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018f22:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018f24:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018f28:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8018f2c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018f2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018f32:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8018f36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018f3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018f42:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f4a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8018f4e:	ecbd 8b02 	vpop	{d8}
 8018f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f54:	4f800000 	.word	0x4f800000
 8018f58:	2f80000d 	.word	0x2f80000d

08018f5c <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8018f5c:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f5e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018f62:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8018fa0 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8018f66:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8018f68:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8018f6c:	4403      	add	r3, r0
 8018f6e:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8018f70:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8018f74:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8018f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8018f7a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8018f7e:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8018f80:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8018f84:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f86:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8018f8a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8018f92:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018f96:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8018f9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018f9e:	4770      	bx	lr
 8018fa0:	2f80000d 	.word	0x2f80000d

08018fa4 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8018fa4:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8018fa6:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018fa8:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018fac:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018fb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018fb8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8018fbc:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018fbe:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018fc2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018fc6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018fca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018fce:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8018fd2:	4770      	bx	lr

08018fd4 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8018fd4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fd6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801900c <tSquareLFO_setPulseWidth+0x38>
 8018fda:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018fdc:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fe0:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8018fe4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019010 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8018fec:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fee:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8018ff2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8018ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ffa:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8018ffe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019002:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019006:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801900a:	4770      	bx	lr
 801900c:	2f80000d 	.word	0x2f80000d
 8019010:	4f800000 	.word	0x4f800000

08019014 <tSquareLFO_setPhase>:
    int i = phase;
 8019014:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8019018:	eddf 6a13 	vldr	s13, [pc, #76]	; 8019068 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 801901c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801901e:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801906c <tSquareLFO_setPhase+0x58>
    phase -= i;
 8019022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
 8019026:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8019028:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 801902c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019030:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019034:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019038:	689a      	ldr	r2, [r3, #8]
 801903a:	edd3 7a01 	vldr	s15, [r3, #4]
 801903e:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8019042:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019044:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019048:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801904c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8019050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019054:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8019058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801905c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019060:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8019064:	4770      	bx	lr
 8019066:	bf00      	nop
 8019068:	4f800000 	.word	0x4f800000
 801906c:	2f80000d 	.word	0x2f80000d

08019070 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8019070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019072:	460c      	mov	r4, r1
{
 8019074:	4606      	mov	r6, r0
 8019076:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8019078:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801907a:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801907e:	4639      	mov	r1, r7
 8019080:	f7fb fb62 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8019084:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8019086:	6030      	str	r0, [r6, #0]
 8019088:	4604      	mov	r4, r0
    c->mempool = m;
 801908a:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 801908e:	f7ff ff15 	bl	8018ebc <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8019092:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019094:	201c      	movs	r0, #28
 8019096:	4629      	mov	r1, r5
 8019098:	f7fb fb56 	bl	8014748 <mpool_alloc>
    c->phase    =  0;
 801909c:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801909e:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80190a0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80190a2:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80190a4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80190b8 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 80190a8:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80190aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80190ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80190b2:	edc0 7a06 	vstr	s15, [r0, #24]
}
 80190b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b8:	4f800000 	.word	0x4f800000

080190bc <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 80190bc:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 80190be:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 80190c0:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80190c4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801913c <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80190c8:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 80190cc:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 80190ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 80190d2:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 80190d6:	4403      	add	r3, r0
 80190d8:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 80190da:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 80190de:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 80190e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 80190e4:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 80190e6:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 80190e8:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 80190ec:	6884      	ldr	r4, [r0, #8]
 80190ee:	4423      	add	r3, r4
 80190f0:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 80190f2:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 80190f6:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 80190f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 80190fc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019100:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 8019102:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 8019106:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8019108:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801910c:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019110:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8019114:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8019118:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801911c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019120:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 8019124:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019128:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801912c:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8019130:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8019134:	eea6 0a07 	vfma.f32	s0, s12, s14
 8019138:	4770      	bx	lr
 801913a:	bf00      	nop
 801913c:	2f80000d 	.word	0x2f80000d

08019140 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 8019140:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 8019142:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 8019144:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019146:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801914a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801914e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019156:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801915a:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801915c:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019160:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019164:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801916c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8019170:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019172:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019176:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801917a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801917e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019182:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8019186:	4770      	bx	lr

08019188 <tSawSquareLFO_setPhase>:
    int i = phase;
 8019188:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 801918c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80191e4 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 8019190:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019192:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80191e8 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8019196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
 801919a:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 801919c:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 801919e:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 80191a2:	ee20 0a26 	vmul.f32	s0, s0, s13
 80191a6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80191aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80191ae:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80191b2:	6890      	ldr	r0, [r2, #8]
 80191b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80191b8:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 80191bc:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80191be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80191c2:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 80191c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 80191ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 80191d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80191d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80191da:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 80191de:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 80191e0:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 80191e2:	4770      	bx	lr
 80191e4:	4f800000 	.word	0x4f800000
 80191e8:	2f80000d 	.word	0x2f80000d

080191ec <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 80191ec:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 80191ee:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80191f2:	4770      	bx	lr

080191f4 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 80191f4:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80191f6:	698d      	ldr	r5, [r1, #24]
{
 80191f8:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80191fa:	2018      	movs	r0, #24
 80191fc:	4629      	mov	r1, r5
 80191fe:	f7fb faa3 	bl	8014748 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8019202:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019204:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8019206:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019208:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801920a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019240 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 801920e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8019244 <tTriLFO_init+0x50>
    c->phase    =  0;
 8019212:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8019216:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801921a:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
 801921e:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019222:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
 8019226:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019228:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801922c:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019238:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801923c:	bd38      	pop	{r3, r4, r5, pc}
 801923e:	bf00      	nop
 8019240:	4f800000 	.word	0x4f800000
 8019244:	435c0000 	.word	0x435c0000

08019248 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8019248:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801924a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801924e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019278 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 8019252:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8019256:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8019258:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 801925c:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801925e:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8019262:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019266:	ee07 3a90 	vmov	s15, r3
 801926a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801926e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8019272:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019276:	4770      	bx	lr
 8019278:	2ffffff6 	.word	0x2ffffff6

0801927c <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 801927c:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801927e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019282:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019286:	ee20 0a27 	vmul.f32	s0, s0, s15
 801928a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801928e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8019292:	4770      	bx	lr

08019294 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8019294:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 8019298:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801929a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801929e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80192a2:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 80192a6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80192aa:	4770      	bx	lr

080192ac <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 80192ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ae:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80192b2:	698f      	ldr	r7, [r1, #24]
{
 80192b4:	4606      	mov	r6, r0
 80192b6:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80192b8:	2010      	movs	r0, #16
 80192ba:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80192bc:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8019338 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80192c0:	f7fb fa42 	bl	8014748 <mpool_alloc>
 80192c4:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80192c6:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80192c8:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 80192ca:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 80192cc:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80192ce:	4631      	mov	r1, r6
 80192d0:	f7fb fa3a 	bl	8014748 <mpool_alloc>
 80192d4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80192d6:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80192d8:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 80192da:	2600      	movs	r6, #0
    c->freq  = freq;
 80192dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801933c <tSineTriLFO_init+0x90>
    c->phase    =  0;
 80192e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80192e4:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80192e8:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 80192ec:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80192f0:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80192f4:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 80192f6:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80192f8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80192fc:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019308:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 801930c:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801930e:	4629      	mov	r1, r5
 8019310:	f7fb fa1a 	bl	8014748 <mpool_alloc>
 8019314:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8019316:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8019318:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 801931c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801931e:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019322:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8019326:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019328:	ee67 7a88 	vmul.f32	s15, s15, s16
 801932c:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8019330:	ecbd 8b02 	vpop	{d8}
 8019334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019336:	bf00      	nop
 8019338:	4f800000 	.word	0x4f800000
 801933c:	435c0000 	.word	0x435c0000

08019340 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8019340:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 8019342:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 8019344:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8019348:	4a20      	ldr	r2, [pc, #128]	; (80193cc <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801934a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 801934e:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019350:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80193d0 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
 8019354:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019356:	eddf 4a1f 	vldr	s9, [pc, #124]	; 80193d4 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
 801935a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801935e:	4403      	add	r3, r0
 8019360:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
 8019362:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
 8019364:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8019366:	f3c3 0314 	ubfx	r3, r3, #0, #21
 801936a:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 801936e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 8019376:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 8019378:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 801937a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
 801937e:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
 8019380:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8019382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019386:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
 801938a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801938e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8019392:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 8019396:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
 801939a:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801939e:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 80193a2:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 80193a6:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80193aa:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 80193ae:	ee07 3a10 	vmov	s14, r3
 80193b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80193b6:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 80193ba:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 80193be:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
 80193c0:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 80193c4:	eea5 0aa6 	vfma.f32	s0, s11, s13
 80193c8:	4770      	bx	lr
 80193ca:	bf00      	nop
 80193cc:	08023294 	.word	0x08023294
 80193d0:	35000004 	.word	0x35000004
 80193d4:	2ffffff6 	.word	0x2ffffff6

080193d8 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 80193d8:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 80193da:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80193dc:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80193e0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80193e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80193e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193ec:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 80193f0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80193f2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80193f6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80193fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80193fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019402:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8019406:	4770      	bx	lr

08019408 <tSineTriLFO_setPhase>:
    int i = phase;
 8019408:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801940c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8019434 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 8019410:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8019412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 8019416:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8019418:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801941c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019420:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8019424:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8019428:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801942c:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801942e:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 8019432:	4770      	bx	lr
 8019434:	4f800000 	.word	0x4f800000

08019438 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 8019438:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801943a:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801943e:	4770      	bx	lr

08019440 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8019440:	4770      	bx	lr
 8019442:	bf00      	nop

08019444 <LEAF_init>:
{
 8019444:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8019446:	6200      	str	r0, [r0, #32]
{
 8019448:	4604      	mov	r4, r0
 801944a:	461d      	mov	r5, r3
 801944c:	ed2d 8b02 	vpush	{d8}
 8019450:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8019454:	f7fb f962 	bl	801471c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8019458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801945c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8019490 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8019460:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8019462:	4b0c      	ldr	r3, [pc, #48]	; (8019494 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8019464:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8019468:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801946c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801946e:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8019470:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8019474:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8019478:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801947c:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8019480:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019484:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8019488:	ecbd 8b02 	vpop	{d8}
 801948c:	bd38      	pop	{r3, r4, r5, pc}
 801948e:	bf00      	nop
 8019490:	40c90fdb 	.word	0x40c90fdb
 8019494:	08019441 	.word	0x08019441

08019498 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8019498:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801949a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801949e:	2401      	movs	r4, #1
 80194a0:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 80194a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 80194a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80194a8:	4718      	bx	r3
 80194aa:	bf00      	nop

080194ac <arm_sin_f32>:
 80194ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801952c <arm_sin_f32+0x80>
 80194b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80194b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80194b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80194bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c0:	d504      	bpl.n	80194cc <arm_sin_f32+0x20>
 80194c2:	ee17 3a90 	vmov	r3, s15
 80194c6:	3b01      	subs	r3, #1
 80194c8:	ee07 3a90 	vmov	s15, r3
 80194cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194d0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8019530 <arm_sin_f32+0x84>
 80194d4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80194d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80194dc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80194e0:	ee17 3a10 	vmov	r3, s14
 80194e4:	b29b      	uxth	r3, r3
 80194e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194ea:	d21a      	bcs.n	8019522 <arm_sin_f32+0x76>
 80194ec:	ee07 3a10 	vmov	s14, r3
 80194f0:	1c59      	adds	r1, r3, #1
 80194f2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80194f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80194fa:	4a0e      	ldr	r2, [pc, #56]	; (8019534 <arm_sin_f32+0x88>)
 80194fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019504:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019508:	ee30 0a67 	vsub.f32	s0, s0, s15
 801950c:	edd3 6a00 	vldr	s13, [r3]
 8019510:	ed92 7a00 	vldr	s14, [r2]
 8019514:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019518:	ee67 7a87 	vmul.f32	s15, s15, s14
 801951c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019520:	4770      	bx	lr
 8019522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019526:	2101      	movs	r1, #1
 8019528:	2300      	movs	r3, #0
 801952a:	e7e6      	b.n	80194fa <arm_sin_f32+0x4e>
 801952c:	3e22f983 	.word	0x3e22f983
 8019530:	44000000 	.word	0x44000000
 8019534:	08032a20 	.word	0x08032a20

08019538 <__libc_init_array>:
 8019538:	b570      	push	{r4, r5, r6, lr}
 801953a:	4d0d      	ldr	r5, [pc, #52]	; (8019570 <__libc_init_array+0x38>)
 801953c:	4c0d      	ldr	r4, [pc, #52]	; (8019574 <__libc_init_array+0x3c>)
 801953e:	1b64      	subs	r4, r4, r5
 8019540:	10a4      	asrs	r4, r4, #2
 8019542:	2600      	movs	r6, #0
 8019544:	42a6      	cmp	r6, r4
 8019546:	d109      	bne.n	801955c <__libc_init_array+0x24>
 8019548:	4d0b      	ldr	r5, [pc, #44]	; (8019578 <__libc_init_array+0x40>)
 801954a:	4c0c      	ldr	r4, [pc, #48]	; (801957c <__libc_init_array+0x44>)
 801954c:	f002 f90c 	bl	801b768 <_init>
 8019550:	1b64      	subs	r4, r4, r5
 8019552:	10a4      	asrs	r4, r4, #2
 8019554:	2600      	movs	r6, #0
 8019556:	42a6      	cmp	r6, r4
 8019558:	d105      	bne.n	8019566 <__libc_init_array+0x2e>
 801955a:	bd70      	pop	{r4, r5, r6, pc}
 801955c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019560:	4798      	blx	r3
 8019562:	3601      	adds	r6, #1
 8019564:	e7ee      	b.n	8019544 <__libc_init_array+0xc>
 8019566:	f855 3b04 	ldr.w	r3, [r5], #4
 801956a:	4798      	blx	r3
 801956c:	3601      	adds	r6, #1
 801956e:	e7f2      	b.n	8019556 <__libc_init_array+0x1e>
 8019570:	08033cb0 	.word	0x08033cb0
 8019574:	08033cb0 	.word	0x08033cb0
 8019578:	08033cb0 	.word	0x08033cb0
 801957c:	08033cb4 	.word	0x08033cb4

08019580 <__itoa>:
 8019580:	1e93      	subs	r3, r2, #2
 8019582:	2b22      	cmp	r3, #34	; 0x22
 8019584:	b510      	push	{r4, lr}
 8019586:	460c      	mov	r4, r1
 8019588:	d904      	bls.n	8019594 <__itoa+0x14>
 801958a:	2300      	movs	r3, #0
 801958c:	700b      	strb	r3, [r1, #0]
 801958e:	461c      	mov	r4, r3
 8019590:	4620      	mov	r0, r4
 8019592:	bd10      	pop	{r4, pc}
 8019594:	2a0a      	cmp	r2, #10
 8019596:	d109      	bne.n	80195ac <__itoa+0x2c>
 8019598:	2800      	cmp	r0, #0
 801959a:	da07      	bge.n	80195ac <__itoa+0x2c>
 801959c:	232d      	movs	r3, #45	; 0x2d
 801959e:	700b      	strb	r3, [r1, #0]
 80195a0:	4240      	negs	r0, r0
 80195a2:	2101      	movs	r1, #1
 80195a4:	4421      	add	r1, r4
 80195a6:	f000 f841 	bl	801962c <__utoa>
 80195aa:	e7f1      	b.n	8019590 <__itoa+0x10>
 80195ac:	2100      	movs	r1, #0
 80195ae:	e7f9      	b.n	80195a4 <__itoa+0x24>

080195b0 <itoa>:
 80195b0:	f7ff bfe6 	b.w	8019580 <__itoa>

080195b4 <memcpy>:
 80195b4:	440a      	add	r2, r1
 80195b6:	4291      	cmp	r1, r2
 80195b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80195bc:	d100      	bne.n	80195c0 <memcpy+0xc>
 80195be:	4770      	bx	lr
 80195c0:	b510      	push	{r4, lr}
 80195c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80195ca:	4291      	cmp	r1, r2
 80195cc:	d1f9      	bne.n	80195c2 <memcpy+0xe>
 80195ce:	bd10      	pop	{r4, pc}

080195d0 <memset>:
 80195d0:	4402      	add	r2, r0
 80195d2:	4603      	mov	r3, r0
 80195d4:	4293      	cmp	r3, r2
 80195d6:	d100      	bne.n	80195da <memset+0xa>
 80195d8:	4770      	bx	lr
 80195da:	f803 1b01 	strb.w	r1, [r3], #1
 80195de:	e7f9      	b.n	80195d4 <memset+0x4>

080195e0 <frexpf>:
 80195e0:	ee10 3a10 	vmov	r3, s0
 80195e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80195e8:	2100      	movs	r1, #0
 80195ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80195ee:	6001      	str	r1, [r0, #0]
 80195f0:	da19      	bge.n	8019626 <frexpf+0x46>
 80195f2:	b1c2      	cbz	r2, 8019626 <frexpf+0x46>
 80195f4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80195f8:	d10a      	bne.n	8019610 <frexpf+0x30>
 80195fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019628 <frexpf+0x48>
 80195fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019602:	f06f 0118 	mvn.w	r1, #24
 8019606:	ee17 3a90 	vmov	r3, s15
 801960a:	6001      	str	r1, [r0, #0]
 801960c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019610:	6801      	ldr	r1, [r0, #0]
 8019612:	15d2      	asrs	r2, r2, #23
 8019614:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019618:	3a7e      	subs	r2, #126	; 0x7e
 801961a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801961e:	440a      	add	r2, r1
 8019620:	ee00 3a10 	vmov	s0, r3
 8019624:	6002      	str	r2, [r0, #0]
 8019626:	4770      	bx	lr
 8019628:	4c000000 	.word	0x4c000000

0801962c <__utoa>:
 801962c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801962e:	4c1f      	ldr	r4, [pc, #124]	; (80196ac <__utoa+0x80>)
 8019630:	b08b      	sub	sp, #44	; 0x2c
 8019632:	4605      	mov	r5, r0
 8019634:	460b      	mov	r3, r1
 8019636:	466e      	mov	r6, sp
 8019638:	f104 0c20 	add.w	ip, r4, #32
 801963c:	6820      	ldr	r0, [r4, #0]
 801963e:	6861      	ldr	r1, [r4, #4]
 8019640:	4637      	mov	r7, r6
 8019642:	c703      	stmia	r7!, {r0, r1}
 8019644:	3408      	adds	r4, #8
 8019646:	4564      	cmp	r4, ip
 8019648:	463e      	mov	r6, r7
 801964a:	d1f7      	bne.n	801963c <__utoa+0x10>
 801964c:	7921      	ldrb	r1, [r4, #4]
 801964e:	7139      	strb	r1, [r7, #4]
 8019650:	1e91      	subs	r1, r2, #2
 8019652:	6820      	ldr	r0, [r4, #0]
 8019654:	6038      	str	r0, [r7, #0]
 8019656:	2922      	cmp	r1, #34	; 0x22
 8019658:	f04f 0100 	mov.w	r1, #0
 801965c:	d904      	bls.n	8019668 <__utoa+0x3c>
 801965e:	7019      	strb	r1, [r3, #0]
 8019660:	460b      	mov	r3, r1
 8019662:	4618      	mov	r0, r3
 8019664:	b00b      	add	sp, #44	; 0x2c
 8019666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019668:	1e58      	subs	r0, r3, #1
 801966a:	4684      	mov	ip, r0
 801966c:	fbb5 f7f2 	udiv	r7, r5, r2
 8019670:	fb02 5617 	mls	r6, r2, r7, r5
 8019674:	3628      	adds	r6, #40	; 0x28
 8019676:	446e      	add	r6, sp
 8019678:	460c      	mov	r4, r1
 801967a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801967e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8019682:	462e      	mov	r6, r5
 8019684:	42b2      	cmp	r2, r6
 8019686:	f101 0101 	add.w	r1, r1, #1
 801968a:	463d      	mov	r5, r7
 801968c:	d9ee      	bls.n	801966c <__utoa+0x40>
 801968e:	2200      	movs	r2, #0
 8019690:	545a      	strb	r2, [r3, r1]
 8019692:	1919      	adds	r1, r3, r4
 8019694:	1aa5      	subs	r5, r4, r2
 8019696:	42aa      	cmp	r2, r5
 8019698:	dae3      	bge.n	8019662 <__utoa+0x36>
 801969a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801969e:	780e      	ldrb	r6, [r1, #0]
 80196a0:	7006      	strb	r6, [r0, #0]
 80196a2:	3201      	adds	r2, #1
 80196a4:	f801 5901 	strb.w	r5, [r1], #-1
 80196a8:	e7f4      	b.n	8019694 <__utoa+0x68>
 80196aa:	bf00      	nop
 80196ac:	08033224 	.word	0x08033224

080196b0 <with_errnof>:
 80196b0:	b513      	push	{r0, r1, r4, lr}
 80196b2:	4604      	mov	r4, r0
 80196b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80196b8:	f002 f850 	bl	801b75c <__errno>
 80196bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80196c0:	6004      	str	r4, [r0, #0]
 80196c2:	b002      	add	sp, #8
 80196c4:	bd10      	pop	{r4, pc}

080196c6 <xflowf>:
 80196c6:	b130      	cbz	r0, 80196d6 <xflowf+0x10>
 80196c8:	eef1 7a40 	vneg.f32	s15, s0
 80196cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80196d0:	2022      	movs	r0, #34	; 0x22
 80196d2:	f7ff bfed 	b.w	80196b0 <with_errnof>
 80196d6:	eef0 7a40 	vmov.f32	s15, s0
 80196da:	e7f7      	b.n	80196cc <xflowf+0x6>

080196dc <__math_uflowf>:
 80196dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80196e4 <__math_uflowf+0x8>
 80196e0:	f7ff bff1 	b.w	80196c6 <xflowf>
 80196e4:	10000000 	.word	0x10000000

080196e8 <__math_may_uflowf>:
 80196e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80196f0 <__math_may_uflowf+0x8>
 80196ec:	f7ff bfeb 	b.w	80196c6 <xflowf>
 80196f0:	1a200000 	.word	0x1a200000

080196f4 <__math_oflowf>:
 80196f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80196fc <__math_oflowf+0x8>
 80196f8:	f7ff bfe5 	b.w	80196c6 <xflowf>
 80196fc:	70000000 	.word	0x70000000

08019700 <__math_divzerof>:
 8019700:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019704:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019708:	2800      	cmp	r0, #0
 801970a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801970e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801971c <__math_divzerof+0x1c>
 8019712:	2022      	movs	r0, #34	; 0x22
 8019714:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019718:	f7ff bfca 	b.w	80196b0 <with_errnof>
 801971c:	00000000 	.word	0x00000000

08019720 <__math_invalidf>:
 8019720:	eef0 7a40 	vmov.f32	s15, s0
 8019724:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019728:	eef4 7a67 	vcmp.f32	s15, s15
 801972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019730:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019734:	d602      	bvs.n	801973c <__math_invalidf+0x1c>
 8019736:	2021      	movs	r0, #33	; 0x21
 8019738:	f7ff bfba 	b.w	80196b0 <with_errnof>
 801973c:	4770      	bx	lr
	...

08019740 <tan>:
 8019740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019742:	eeb0 7b40 	vmov.f64	d7, d0
 8019746:	ee17 3a90 	vmov	r3, s15
 801974a:	4a15      	ldr	r2, [pc, #84]	; (80197a0 <tan+0x60>)
 801974c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019750:	4293      	cmp	r3, r2
 8019752:	dc07      	bgt.n	8019764 <tan+0x24>
 8019754:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8019798 <tan+0x58>
 8019758:	2001      	movs	r0, #1
 801975a:	b005      	add	sp, #20
 801975c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019760:	f001 b8ba 	b.w	801a8d8 <__kernel_tan>
 8019764:	4a0f      	ldr	r2, [pc, #60]	; (80197a4 <tan+0x64>)
 8019766:	4293      	cmp	r3, r2
 8019768:	dd04      	ble.n	8019774 <tan+0x34>
 801976a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801976e:	b005      	add	sp, #20
 8019770:	f85d fb04 	ldr.w	pc, [sp], #4
 8019774:	4668      	mov	r0, sp
 8019776:	f000 fb97 	bl	8019ea8 <__ieee754_rem_pio2>
 801977a:	0040      	lsls	r0, r0, #1
 801977c:	f000 0002 	and.w	r0, r0, #2
 8019780:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019784:	ed9d 0b00 	vldr	d0, [sp]
 8019788:	f1c0 0001 	rsb	r0, r0, #1
 801978c:	f001 f8a4 	bl	801a8d8 <__kernel_tan>
 8019790:	e7ed      	b.n	801976e <tan+0x2e>
 8019792:	bf00      	nop
 8019794:	f3af 8000 	nop.w
	...
 80197a0:	3fe921fb 	.word	0x3fe921fb
 80197a4:	7fefffff 	.word	0x7fefffff

080197a8 <expf>:
 80197a8:	ee10 2a10 	vmov	r2, s0
 80197ac:	f240 412a 	movw	r1, #1066	; 0x42a
 80197b0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80197b4:	428b      	cmp	r3, r1
 80197b6:	b430      	push	{r4, r5}
 80197b8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80197bc:	d92a      	bls.n	8019814 <expf+0x6c>
 80197be:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80197c2:	d058      	beq.n	8019876 <expf+0xce>
 80197c4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80197c8:	d303      	bcc.n	80197d2 <expf+0x2a>
 80197ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80197ce:	bc30      	pop	{r4, r5}
 80197d0:	4770      	bx	lr
 80197d2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801987c <expf+0xd4>
 80197d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80197da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197de:	dd03      	ble.n	80197e8 <expf+0x40>
 80197e0:	bc30      	pop	{r4, r5}
 80197e2:	2000      	movs	r0, #0
 80197e4:	f7ff bf86 	b.w	80196f4 <__math_oflowf>
 80197e8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019880 <expf+0xd8>
 80197ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80197f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f4:	d503      	bpl.n	80197fe <expf+0x56>
 80197f6:	bc30      	pop	{r4, r5}
 80197f8:	2000      	movs	r0, #0
 80197fa:	f7ff bf6f 	b.w	80196dc <__math_uflowf>
 80197fe:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019884 <expf+0xdc>
 8019802:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801980a:	d503      	bpl.n	8019814 <expf+0x6c>
 801980c:	bc30      	pop	{r4, r5}
 801980e:	2000      	movs	r0, #0
 8019810:	f7ff bf6a 	b.w	80196e8 <__math_may_uflowf>
 8019814:	4b1c      	ldr	r3, [pc, #112]	; (8019888 <expf+0xe0>)
 8019816:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801981a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801981e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8019822:	eeb0 7b44 	vmov.f64	d7, d4
 8019826:	eea5 7b06 	vfma.f64	d7, d5, d6
 801982a:	ee17 0a10 	vmov	r0, s14
 801982e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8019832:	f000 021f 	and.w	r2, r0, #31
 8019836:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801983a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801983e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019842:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8019846:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801984a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801984e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8019852:	684d      	ldr	r5, [r1, #4]
 8019854:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8019858:	2100      	movs	r1, #0
 801985a:	190a      	adds	r2, r1, r4
 801985c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8019860:	eea5 0b07 	vfma.f64	d0, d5, d7
 8019864:	ec43 2b17 	vmov	d7, r2, r3
 8019868:	eea6 0b04 	vfma.f64	d0, d6, d4
 801986c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019870:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019874:	e7ab      	b.n	80197ce <expf+0x26>
 8019876:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801988c <expf+0xe4>
 801987a:	e7a8      	b.n	80197ce <expf+0x26>
 801987c:	42b17217 	.word	0x42b17217
 8019880:	c2cff1b4 	.word	0xc2cff1b4
 8019884:	c2ce8ecf 	.word	0xc2ce8ecf
 8019888:	08033250 	.word	0x08033250
 801988c:	00000000 	.word	0x00000000

08019890 <fabsf>:
 8019890:	ee10 3a10 	vmov	r3, s0
 8019894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019898:	ee00 3a10 	vmov	s0, r3
 801989c:	4770      	bx	lr
	...

080198a0 <logf>:
 80198a0:	ee10 3a10 	vmov	r3, s0
 80198a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80198a8:	b410      	push	{r4}
 80198aa:	d055      	beq.n	8019958 <logf+0xb8>
 80198ac:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80198b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80198b4:	d31a      	bcc.n	80198ec <logf+0x4c>
 80198b6:	005a      	lsls	r2, r3, #1
 80198b8:	d104      	bne.n	80198c4 <logf+0x24>
 80198ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198be:	2001      	movs	r0, #1
 80198c0:	f7ff bf1e 	b.w	8019700 <__math_divzerof>
 80198c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198c8:	d043      	beq.n	8019952 <logf+0xb2>
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	db02      	blt.n	80198d4 <logf+0x34>
 80198ce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80198d2:	d303      	bcc.n	80198dc <logf+0x3c>
 80198d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198d8:	f7ff bf22 	b.w	8019720 <__math_invalidf>
 80198dc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8019960 <logf+0xc0>
 80198e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80198e4:	ee10 3a10 	vmov	r3, s0
 80198e8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80198ec:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80198f0:	491c      	ldr	r1, [pc, #112]	; (8019964 <logf+0xc4>)
 80198f2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80198f6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80198fa:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80198fe:	0dd4      	lsrs	r4, r2, #23
 8019900:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8019904:	05e4      	lsls	r4, r4, #23
 8019906:	ed90 6b00 	vldr	d6, [r0]
 801990a:	1b1b      	subs	r3, r3, r4
 801990c:	ee07 3a90 	vmov	s15, r3
 8019910:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8019914:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019918:	15d2      	asrs	r2, r2, #23
 801991a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801991e:	ed90 6b02 	vldr	d6, [r0, #8]
 8019922:	ee20 4b00 	vmul.f64	d4, d0, d0
 8019926:	ee07 2a90 	vmov	s15, r2
 801992a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801992e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019932:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8019936:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801993a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801993e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8019942:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019946:	eea5 7b04 	vfma.f64	d7, d5, d4
 801994a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801994e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019956:	4770      	bx	lr
 8019958:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019968 <logf+0xc8>
 801995c:	e7f9      	b.n	8019952 <logf+0xb2>
 801995e:	bf00      	nop
 8019960:	4b000000 	.word	0x4b000000
 8019964:	080334b8 	.word	0x080334b8
 8019968:	00000000 	.word	0x00000000

0801996c <log2f>:
 801996c:	ee10 2a10 	vmov	r2, s0
 8019970:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019974:	b410      	push	{r4}
 8019976:	d055      	beq.n	8019a24 <log2f+0xb8>
 8019978:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801997c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019980:	d31a      	bcc.n	80199b8 <log2f+0x4c>
 8019982:	0053      	lsls	r3, r2, #1
 8019984:	d104      	bne.n	8019990 <log2f+0x24>
 8019986:	f85d 4b04 	ldr.w	r4, [sp], #4
 801998a:	2001      	movs	r0, #1
 801998c:	f7ff beb8 	b.w	8019700 <__math_divzerof>
 8019990:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019994:	d043      	beq.n	8019a1e <log2f+0xb2>
 8019996:	2a00      	cmp	r2, #0
 8019998:	db02      	blt.n	80199a0 <log2f+0x34>
 801999a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801999e:	d303      	bcc.n	80199a8 <log2f+0x3c>
 80199a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199a4:	f7ff bebc 	b.w	8019720 <__math_invalidf>
 80199a8:	eddf 7a20 	vldr	s15, [pc, #128]	; 8019a2c <log2f+0xc0>
 80199ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80199b0:	ee10 3a10 	vmov	r3, s0
 80199b4:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 80199b8:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 80199bc:	491c      	ldr	r1, [pc, #112]	; (8019a30 <log2f+0xc4>)
 80199be:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80199c2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80199c6:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 80199ca:	0ddc      	lsrs	r4, r3, #23
 80199cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80199d0:	05e4      	lsls	r4, r4, #23
 80199d2:	ed90 5b00 	vldr	d5, [r0]
 80199d6:	1b12      	subs	r2, r2, r4
 80199d8:	ee07 2a90 	vmov	s15, r2
 80199dc:	15db      	asrs	r3, r3, #23
 80199de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80199e2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80199e6:	ed90 7b02 	vldr	d7, [r0, #8]
 80199ea:	ee26 4b06 	vmul.f64	d4, d6, d6
 80199ee:	ee00 3a10 	vmov	s0, r3
 80199f2:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80199f6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80199fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80199fe:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8019a02:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019a06:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8019a0a:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019a0e:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8019a12:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019a16:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019a1a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a22:	4770      	bx	lr
 8019a24:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019a34 <log2f+0xc8>
 8019a28:	e7f9      	b.n	8019a1e <log2f+0xb2>
 8019a2a:	bf00      	nop
 8019a2c:	4b000000 	.word	0x4b000000
 8019a30:	08033398 	.word	0x08033398
 8019a34:	00000000 	.word	0x00000000

08019a38 <lrintf>:
 8019a38:	ee10 3a10 	vmov	r3, s0
 8019a3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019a40:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8019a44:	281e      	cmp	r0, #30
 8019a46:	b082      	sub	sp, #8
 8019a48:	dc2e      	bgt.n	8019aa8 <lrintf+0x70>
 8019a4a:	1c41      	adds	r1, r0, #1
 8019a4c:	da02      	bge.n	8019a54 <lrintf+0x1c>
 8019a4e:	2000      	movs	r0, #0
 8019a50:	b002      	add	sp, #8
 8019a52:	4770      	bx	lr
 8019a54:	2816      	cmp	r0, #22
 8019a56:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8019a5a:	dd09      	ble.n	8019a70 <lrintf+0x38>
 8019a5c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019a64:	3a96      	subs	r2, #150	; 0x96
 8019a66:	4090      	lsls	r0, r2
 8019a68:	2900      	cmp	r1, #0
 8019a6a:	d0f1      	beq.n	8019a50 <lrintf+0x18>
 8019a6c:	4240      	negs	r0, r0
 8019a6e:	e7ef      	b.n	8019a50 <lrintf+0x18>
 8019a70:	4b10      	ldr	r3, [pc, #64]	; (8019ab4 <lrintf+0x7c>)
 8019a72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019a76:	ed93 7a00 	vldr	s14, [r3]
 8019a7a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019a7e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019a82:	eddd 7a01 	vldr	s15, [sp, #4]
 8019a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a8a:	ee17 3a90 	vmov	r3, s15
 8019a8e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019a92:	d0dc      	beq.n	8019a4e <lrintf+0x16>
 8019a94:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019a98:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8019a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019aa0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019aa4:	40d8      	lsrs	r0, r3
 8019aa6:	e7df      	b.n	8019a68 <lrintf+0x30>
 8019aa8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019aac:	ee17 0a90 	vmov	r0, s15
 8019ab0:	e7ce      	b.n	8019a50 <lrintf+0x18>
 8019ab2:	bf00      	nop
 8019ab4:	080335d8 	.word	0x080335d8

08019ab8 <checkint>:
 8019ab8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019abc:	2b7e      	cmp	r3, #126	; 0x7e
 8019abe:	dd10      	ble.n	8019ae2 <checkint+0x2a>
 8019ac0:	2b96      	cmp	r3, #150	; 0x96
 8019ac2:	dc0c      	bgt.n	8019ade <checkint+0x26>
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019aca:	fa02 f303 	lsl.w	r3, r2, r3
 8019ace:	1e5a      	subs	r2, r3, #1
 8019ad0:	4202      	tst	r2, r0
 8019ad2:	d106      	bne.n	8019ae2 <checkint+0x2a>
 8019ad4:	4203      	tst	r3, r0
 8019ad6:	bf0c      	ite	eq
 8019ad8:	2002      	moveq	r0, #2
 8019ada:	2001      	movne	r0, #1
 8019adc:	4770      	bx	lr
 8019ade:	2002      	movs	r0, #2
 8019ae0:	4770      	bx	lr
 8019ae2:	2000      	movs	r0, #0
 8019ae4:	4770      	bx	lr
	...

08019ae8 <powf>:
 8019ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aea:	ee10 1a10 	vmov	r1, s0
 8019aee:	ee10 4a90 	vmov	r4, s1
 8019af2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8019af6:	0062      	lsls	r2, r4, #1
 8019af8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019afc:	eef0 7a40 	vmov.f32	s15, s0
 8019b00:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8019b04:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019b08:	d252      	bcs.n	8019bb0 <powf+0xc8>
 8019b0a:	4298      	cmp	r0, r3
 8019b0c:	d252      	bcs.n	8019bb4 <powf+0xcc>
 8019b0e:	2000      	movs	r0, #0
 8019b10:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8019b14:	4ca0      	ldr	r4, [pc, #640]	; (8019d98 <powf+0x2b0>)
 8019b16:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8019b1a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8019b1e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8019b22:	0dd2      	lsrs	r2, r2, #23
 8019b24:	05d2      	lsls	r2, r2, #23
 8019b26:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8019b2a:	1a8b      	subs	r3, r1, r2
 8019b2c:	ed95 6b00 	vldr	d6, [r5]
 8019b30:	ee07 3a90 	vmov	s15, r3
 8019b34:	15d2      	asrs	r2, r2, #23
 8019b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019b3a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8019b3e:	ed95 6b02 	vldr	d6, [r5, #8]
 8019b42:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019b46:	ee22 1b02 	vmul.f64	d1, d2, d2
 8019b4a:	ee07 2a90 	vmov	s15, r2
 8019b4e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8019b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019b5a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8019b5e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8019b62:	eea5 3b06 	vfma.f64	d3, d5, d6
 8019b66:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8019b6a:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019b6e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8019b72:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8019b76:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019b7a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8019b7e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8019b82:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019b86:	ee10 3a90 	vmov	r3, s1
 8019b8a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8019b8e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8019b92:	429a      	cmp	r2, r3
 8019b94:	f0c0 80b1 	bcc.w	8019cfa <powf+0x212>
 8019b98:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8019d78 <powf+0x290>
 8019b9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ba4:	dd79      	ble.n	8019c9a <powf+0x1b2>
 8019ba6:	b003      	add	sp, #12
 8019ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bac:	f7ff bda2 	b.w	80196f4 <__math_oflowf>
 8019bb0:	4298      	cmp	r0, r3
 8019bb2:	d32d      	bcc.n	8019c10 <powf+0x128>
 8019bb4:	b952      	cbnz	r2, 8019bcc <powf+0xe4>
 8019bb6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8019bba:	005b      	lsls	r3, r3, #1
 8019bbc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8019bc0:	f240 80c9 	bls.w	8019d56 <powf+0x26e>
 8019bc4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8019bc8:	b003      	add	sp, #12
 8019bca:	bd30      	pop	{r4, r5, pc}
 8019bcc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8019bd0:	d105      	bne.n	8019bde <powf+0xf6>
 8019bd2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8019bd6:	0064      	lsls	r4, r4, #1
 8019bd8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8019bdc:	e7f0      	b.n	8019bc0 <powf+0xd8>
 8019bde:	004b      	lsls	r3, r1, #1
 8019be0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8019be4:	d8ee      	bhi.n	8019bc4 <powf+0xdc>
 8019be6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8019bea:	d1eb      	bne.n	8019bc4 <powf+0xdc>
 8019bec:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019bf0:	f000 80b1 	beq.w	8019d56 <powf+0x26e>
 8019bf4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019bf8:	ea6f 0404 	mvn.w	r4, r4
 8019bfc:	bf34      	ite	cc
 8019bfe:	2300      	movcc	r3, #0
 8019c00:	2301      	movcs	r3, #1
 8019c02:	0fe4      	lsrs	r4, r4, #31
 8019c04:	42a3      	cmp	r3, r4
 8019c06:	f040 80a9 	bne.w	8019d5c <powf+0x274>
 8019c0a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8019c0e:	e7db      	b.n	8019bc8 <powf+0xe0>
 8019c10:	004d      	lsls	r5, r1, #1
 8019c12:	1e6a      	subs	r2, r5, #1
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d31c      	bcc.n	8019c52 <powf+0x16a>
 8019c18:	2900      	cmp	r1, #0
 8019c1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019c1e:	da0f      	bge.n	8019c40 <powf+0x158>
 8019c20:	ee10 0a90 	vmov	r0, s1
 8019c24:	f7ff ff48 	bl	8019ab8 <checkint>
 8019c28:	2801      	cmp	r0, #1
 8019c2a:	d109      	bne.n	8019c40 <powf+0x158>
 8019c2c:	eeb1 0a40 	vneg.f32	s0, s0
 8019c30:	b945      	cbnz	r5, 8019c44 <powf+0x15c>
 8019c32:	2c00      	cmp	r4, #0
 8019c34:	dac8      	bge.n	8019bc8 <powf+0xe0>
 8019c36:	b003      	add	sp, #12
 8019c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c3c:	f7ff bd60 	b.w	8019700 <__math_divzerof>
 8019c40:	2000      	movs	r0, #0
 8019c42:	e7f5      	b.n	8019c30 <powf+0x148>
 8019c44:	2c00      	cmp	r4, #0
 8019c46:	dabf      	bge.n	8019bc8 <powf+0xe0>
 8019c48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019c4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019c50:	e7ba      	b.n	8019bc8 <powf+0xe0>
 8019c52:	2900      	cmp	r1, #0
 8019c54:	da1f      	bge.n	8019c96 <powf+0x1ae>
 8019c56:	ee10 0a90 	vmov	r0, s1
 8019c5a:	f7ff ff2d 	bl	8019ab8 <checkint>
 8019c5e:	b920      	cbnz	r0, 8019c6a <powf+0x182>
 8019c60:	b003      	add	sp, #12
 8019c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c66:	f7ff bd5b 	b.w	8019720 <__math_invalidf>
 8019c6a:	2801      	cmp	r0, #1
 8019c6c:	bf14      	ite	ne
 8019c6e:	2000      	movne	r0, #0
 8019c70:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8019c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019c78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8019c7c:	f4bf af48 	bcs.w	8019b10 <powf+0x28>
 8019c80:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8019d9c <powf+0x2b4>
 8019c84:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019c88:	ee10 3a10 	vmov	r3, s0
 8019c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c90:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8019c94:	e73c      	b.n	8019b10 <powf+0x28>
 8019c96:	2000      	movs	r0, #0
 8019c98:	e7ee      	b.n	8019c78 <powf+0x190>
 8019c9a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8019d80 <powf+0x298>
 8019c9e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca6:	dd10      	ble.n	8019cca <powf+0x1e2>
 8019ca8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8019cac:	2800      	cmp	r0, #0
 8019cae:	d158      	bne.n	8019d62 <powf+0x27a>
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	eddd 7a00 	vldr	s15, [sp]
 8019cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019cbe:	eef4 7a47 	vcmp.f32	s15, s14
 8019cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc6:	f47f af6e 	bne.w	8019ba6 <powf+0xbe>
 8019cca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019d88 <powf+0x2a0>
 8019cce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cd6:	d804      	bhi.n	8019ce2 <powf+0x1fa>
 8019cd8:	b003      	add	sp, #12
 8019cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019cde:	f7ff bcfd 	b.w	80196dc <__math_uflowf>
 8019ce2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8019d90 <powf+0x2a8>
 8019ce6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cee:	d504      	bpl.n	8019cfa <powf+0x212>
 8019cf0:	b003      	add	sp, #12
 8019cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019cf6:	f7ff bcf7 	b.w	80196e8 <__math_may_uflowf>
 8019cfa:	4b29      	ldr	r3, [pc, #164]	; (8019da0 <powf+0x2b8>)
 8019cfc:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8019d00:	ee30 6b07 	vadd.f64	d6, d0, d7
 8019d04:	ee16 2a10 	vmov	r2, s12
 8019d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019d0c:	f002 011f 	and.w	r1, r2, #31
 8019d10:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019d14:	ee30 7b47 	vsub.f64	d7, d0, d7
 8019d18:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019d1c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8019d20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019d24:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8019d28:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8019d2c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019d30:	686d      	ldr	r5, [r5, #4]
 8019d32:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8019d36:	1882      	adds	r2, r0, r2
 8019d38:	2300      	movs	r3, #0
 8019d3a:	1918      	adds	r0, r3, r4
 8019d3c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019d40:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019d44:	ec41 0b17 	vmov	d7, r0, r1
 8019d48:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019d4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019d50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019d54:	e738      	b.n	8019bc8 <powf+0xe0>
 8019d56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019d5a:	e735      	b.n	8019bc8 <powf+0xe0>
 8019d5c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8019da4 <powf+0x2bc>
 8019d60:	e732      	b.n	8019bc8 <powf+0xe0>
 8019d62:	9301      	str	r3, [sp, #4]
 8019d64:	eddd 7a01 	vldr	s15, [sp, #4]
 8019d68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d70:	e7a5      	b.n	8019cbe <powf+0x1d6>
 8019d72:	bf00      	nop
 8019d74:	f3af 8000 	nop.w
 8019d78:	ffd1d571 	.word	0xffd1d571
 8019d7c:	405fffff 	.word	0x405fffff
 8019d80:	ffa3aae2 	.word	0xffa3aae2
 8019d84:	405fffff 	.word	0x405fffff
 8019d88:	00000000 	.word	0x00000000
 8019d8c:	c062c000 	.word	0xc062c000
 8019d90:	00000000 	.word	0x00000000
 8019d94:	c062a000 	.word	0xc062a000
 8019d98:	080335e0 	.word	0x080335e0
 8019d9c:	4b000000 	.word	0x4b000000
 8019da0:	08033250 	.word	0x08033250
 8019da4:	00000000 	.word	0x00000000

08019da8 <tanf>:
 8019da8:	ee10 3a10 	vmov	r3, s0
 8019dac:	b507      	push	{r0, r1, r2, lr}
 8019dae:	4a12      	ldr	r2, [pc, #72]	; (8019df8 <tanf+0x50>)
 8019db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019db4:	4293      	cmp	r3, r2
 8019db6:	dc07      	bgt.n	8019dc8 <tanf+0x20>
 8019db8:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019dfc <tanf+0x54>
 8019dbc:	2001      	movs	r0, #1
 8019dbe:	b003      	add	sp, #12
 8019dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019dc4:	f001 b916 	b.w	801aff4 <__kernel_tanf>
 8019dc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019dcc:	db04      	blt.n	8019dd8 <tanf+0x30>
 8019dce:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019dd2:	b003      	add	sp, #12
 8019dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019dd8:	4668      	mov	r0, sp
 8019dda:	f000 f9a9 	bl	801a130 <__ieee754_rem_pio2f>
 8019dde:	0040      	lsls	r0, r0, #1
 8019de0:	f000 0002 	and.w	r0, r0, #2
 8019de4:	eddd 0a01 	vldr	s1, [sp, #4]
 8019de8:	ed9d 0a00 	vldr	s0, [sp]
 8019dec:	f1c0 0001 	rsb	r0, r0, #1
 8019df0:	f001 f900 	bl	801aff4 <__kernel_tanf>
 8019df4:	e7ed      	b.n	8019dd2 <tanf+0x2a>
 8019df6:	bf00      	nop
 8019df8:	3f490fda 	.word	0x3f490fda
 8019dfc:	00000000 	.word	0x00000000

08019e00 <tanhf>:
 8019e00:	b510      	push	{r4, lr}
 8019e02:	ee10 4a10 	vmov	r4, s0
 8019e06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019e0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019e0e:	ed2d 8b02 	vpush	{d8}
 8019e12:	eeb0 7a40 	vmov.f32	s14, s0
 8019e16:	db0c      	blt.n	8019e32 <tanhf+0x32>
 8019e18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019e1c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8019e20:	2c00      	cmp	r4, #0
 8019e22:	bfac      	ite	ge
 8019e24:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8019e28:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8019e2c:	ecbd 8b02 	vpop	{d8}
 8019e30:	bd10      	pop	{r4, pc}
 8019e32:	4a1b      	ldr	r2, [pc, #108]	; (8019ea0 <tanhf+0xa0>)
 8019e34:	4293      	cmp	r3, r2
 8019e36:	dc30      	bgt.n	8019e9a <tanhf+0x9a>
 8019e38:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8019e3c:	da06      	bge.n	8019e4c <tanhf+0x4c>
 8019e3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019e42:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019e46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019e4a:	e7ef      	b.n	8019e2c <tanhf+0x2c>
 8019e4c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019e50:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8019e54:	db12      	blt.n	8019e7c <tanhf+0x7c>
 8019e56:	f7ff fd1b 	bl	8019890 <fabsf>
 8019e5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e5e:	f001 fab1 	bl	801b3c4 <expm1f>
 8019e62:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019e66:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8019e6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019e6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019e72:	2c00      	cmp	r4, #0
 8019e74:	bfb8      	it	lt
 8019e76:	eeb1 0a40 	vneglt.f32	s0, s0
 8019e7a:	e7d7      	b.n	8019e2c <tanhf+0x2c>
 8019e7c:	f7ff fd08 	bl	8019890 <fabsf>
 8019e80:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8019e84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019e88:	f001 fa9c 	bl	801b3c4 <expm1f>
 8019e8c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8019e90:	eeb1 7a40 	vneg.f32	s14, s0
 8019e94:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019e98:	e7eb      	b.n	8019e72 <tanhf+0x72>
 8019e9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019e9e:	e7e8      	b.n	8019e72 <tanhf+0x72>
 8019ea0:	41afffff 	.word	0x41afffff
 8019ea4:	00000000 	.word	0x00000000

08019ea8 <__ieee754_rem_pio2>:
 8019ea8:	b570      	push	{r4, r5, r6, lr}
 8019eaa:	eeb0 7b40 	vmov.f64	d7, d0
 8019eae:	ee17 5a90 	vmov	r5, s15
 8019eb2:	4b99      	ldr	r3, [pc, #612]	; (801a118 <__ieee754_rem_pio2+0x270>)
 8019eb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019eb8:	429e      	cmp	r6, r3
 8019eba:	b088      	sub	sp, #32
 8019ebc:	4604      	mov	r4, r0
 8019ebe:	dc07      	bgt.n	8019ed0 <__ieee754_rem_pio2+0x28>
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	ed84 0b00 	vstr	d0, [r4]
 8019ec8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019ecc:	2000      	movs	r0, #0
 8019ece:	e01b      	b.n	8019f08 <__ieee754_rem_pio2+0x60>
 8019ed0:	4b92      	ldr	r3, [pc, #584]	; (801a11c <__ieee754_rem_pio2+0x274>)
 8019ed2:	429e      	cmp	r6, r3
 8019ed4:	dc3b      	bgt.n	8019f4e <__ieee754_rem_pio2+0xa6>
 8019ed6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8019eda:	2d00      	cmp	r5, #0
 8019edc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801a0d8 <__ieee754_rem_pio2+0x230>
 8019ee0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8019ee4:	dd19      	ble.n	8019f1a <__ieee754_rem_pio2+0x72>
 8019ee6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019eea:	429e      	cmp	r6, r3
 8019eec:	d00e      	beq.n	8019f0c <__ieee754_rem_pio2+0x64>
 8019eee:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801a0e0 <__ieee754_rem_pio2+0x238>
 8019ef2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8019ef6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019efa:	ed84 5b00 	vstr	d5, [r4]
 8019efe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f02:	ed84 7b02 	vstr	d7, [r4, #8]
 8019f06:	2001      	movs	r0, #1
 8019f08:	b008      	add	sp, #32
 8019f0a:	bd70      	pop	{r4, r5, r6, pc}
 8019f0c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a0e8 <__ieee754_rem_pio2+0x240>
 8019f10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a0f0 <__ieee754_rem_pio2+0x248>
 8019f18:	e7eb      	b.n	8019ef2 <__ieee754_rem_pio2+0x4a>
 8019f1a:	429e      	cmp	r6, r3
 8019f1c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019f20:	d00e      	beq.n	8019f40 <__ieee754_rem_pio2+0x98>
 8019f22:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801a0e0 <__ieee754_rem_pio2+0x238>
 8019f26:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019f2a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019f2e:	ed84 5b00 	vstr	d5, [r4]
 8019f32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f3a:	ed84 7b02 	vstr	d7, [r4, #8]
 8019f3e:	e7e3      	b.n	8019f08 <__ieee754_rem_pio2+0x60>
 8019f40:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a0e8 <__ieee754_rem_pio2+0x240>
 8019f44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019f48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a0f0 <__ieee754_rem_pio2+0x248>
 8019f4c:	e7eb      	b.n	8019f26 <__ieee754_rem_pio2+0x7e>
 8019f4e:	4b74      	ldr	r3, [pc, #464]	; (801a120 <__ieee754_rem_pio2+0x278>)
 8019f50:	429e      	cmp	r6, r3
 8019f52:	dc70      	bgt.n	801a036 <__ieee754_rem_pio2+0x18e>
 8019f54:	f001 f92e 	bl	801b1b4 <fabs>
 8019f58:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019f5c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a0f8 <__ieee754_rem_pio2+0x250>
 8019f60:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019f64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019f68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019f6c:	ee17 0a90 	vmov	r0, s15
 8019f70:	eeb1 4b45 	vneg.f64	d4, d5
 8019f74:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a0d8 <__ieee754_rem_pio2+0x230>
 8019f78:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019f7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a0e0 <__ieee754_rem_pio2+0x238>
 8019f80:	281f      	cmp	r0, #31
 8019f82:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019f86:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019f8a:	dc08      	bgt.n	8019f9e <__ieee754_rem_pio2+0xf6>
 8019f8c:	4b65      	ldr	r3, [pc, #404]	; (801a124 <__ieee754_rem_pio2+0x27c>)
 8019f8e:	1e42      	subs	r2, r0, #1
 8019f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f94:	42b3      	cmp	r3, r6
 8019f96:	d002      	beq.n	8019f9e <__ieee754_rem_pio2+0xf6>
 8019f98:	ed84 6b00 	vstr	d6, [r4]
 8019f9c:	e026      	b.n	8019fec <__ieee754_rem_pio2+0x144>
 8019f9e:	ee16 3a90 	vmov	r3, s13
 8019fa2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019fa6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019faa:	2b10      	cmp	r3, #16
 8019fac:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019fb0:	ddf2      	ble.n	8019f98 <__ieee754_rem_pio2+0xf0>
 8019fb2:	eeb0 6b40 	vmov.f64	d6, d0
 8019fb6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801a0e8 <__ieee754_rem_pio2+0x240>
 8019fba:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801a0f0 <__ieee754_rem_pio2+0x248>
 8019fbe:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019fc2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019fc6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019fca:	eeb0 7b40 	vmov.f64	d7, d0
 8019fce:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019fd2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019fd6:	ee13 3a90 	vmov	r3, s7
 8019fda:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019fde:	1ad3      	subs	r3, r2, r3
 8019fe0:	2b31      	cmp	r3, #49	; 0x31
 8019fe2:	dc17      	bgt.n	801a014 <__ieee754_rem_pio2+0x16c>
 8019fe4:	eeb0 0b46 	vmov.f64	d0, d6
 8019fe8:	ed84 3b00 	vstr	d3, [r4]
 8019fec:	ed94 6b00 	vldr	d6, [r4]
 8019ff0:	2d00      	cmp	r5, #0
 8019ff2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019ff6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019ffa:	ed84 0b02 	vstr	d0, [r4, #8]
 8019ffe:	da83      	bge.n	8019f08 <__ieee754_rem_pio2+0x60>
 801a000:	eeb1 6b46 	vneg.f64	d6, d6
 801a004:	eeb1 0b40 	vneg.f64	d0, d0
 801a008:	ed84 6b00 	vstr	d6, [r4]
 801a00c:	ed84 0b02 	vstr	d0, [r4, #8]
 801a010:	4240      	negs	r0, r0
 801a012:	e779      	b.n	8019f08 <__ieee754_rem_pio2+0x60>
 801a014:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801a100 <__ieee754_rem_pio2+0x258>
 801a018:	eeb0 0b46 	vmov.f64	d0, d6
 801a01c:	eea4 0b03 	vfma.f64	d0, d4, d3
 801a020:	ee36 7b40 	vsub.f64	d7, d6, d0
 801a024:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801a108 <__ieee754_rem_pio2+0x260>
 801a028:	eea4 7b03 	vfma.f64	d7, d4, d3
 801a02c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801a030:	ee30 6b47 	vsub.f64	d6, d0, d7
 801a034:	e7b0      	b.n	8019f98 <__ieee754_rem_pio2+0xf0>
 801a036:	4b3c      	ldr	r3, [pc, #240]	; (801a128 <__ieee754_rem_pio2+0x280>)
 801a038:	429e      	cmp	r6, r3
 801a03a:	dd06      	ble.n	801a04a <__ieee754_rem_pio2+0x1a2>
 801a03c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801a040:	ed80 7b02 	vstr	d7, [r0, #8]
 801a044:	ed80 7b00 	vstr	d7, [r0]
 801a048:	e740      	b.n	8019ecc <__ieee754_rem_pio2+0x24>
 801a04a:	1532      	asrs	r2, r6, #20
 801a04c:	ee10 0a10 	vmov	r0, s0
 801a050:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801a054:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801a058:	ec41 0b17 	vmov	d7, r0, r1
 801a05c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a060:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801a110 <__ieee754_rem_pio2+0x268>
 801a064:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a068:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a06c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a070:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a074:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a078:	a902      	add	r1, sp, #8
 801a07a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a07e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a082:	ed8d 6b04 	vstr	d6, [sp, #16]
 801a086:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a08a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a08e:	2603      	movs	r6, #3
 801a090:	4608      	mov	r0, r1
 801a092:	ed91 7b04 	vldr	d7, [r1, #16]
 801a096:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a09e:	4633      	mov	r3, r6
 801a0a0:	f1a1 0108 	sub.w	r1, r1, #8
 801a0a4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801a0a8:	d0f3      	beq.n	801a092 <__ieee754_rem_pio2+0x1ea>
 801a0aa:	4920      	ldr	r1, [pc, #128]	; (801a12c <__ieee754_rem_pio2+0x284>)
 801a0ac:	9101      	str	r1, [sp, #4]
 801a0ae:	2102      	movs	r1, #2
 801a0b0:	9100      	str	r1, [sp, #0]
 801a0b2:	4621      	mov	r1, r4
 801a0b4:	f000 f978 	bl	801a3a8 <__kernel_rem_pio2>
 801a0b8:	2d00      	cmp	r5, #0
 801a0ba:	f6bf af25 	bge.w	8019f08 <__ieee754_rem_pio2+0x60>
 801a0be:	ed94 7b00 	vldr	d7, [r4]
 801a0c2:	eeb1 7b47 	vneg.f64	d7, d7
 801a0c6:	ed84 7b00 	vstr	d7, [r4]
 801a0ca:	ed94 7b02 	vldr	d7, [r4, #8]
 801a0ce:	eeb1 7b47 	vneg.f64	d7, d7
 801a0d2:	ed84 7b02 	vstr	d7, [r4, #8]
 801a0d6:	e79b      	b.n	801a010 <__ieee754_rem_pio2+0x168>
 801a0d8:	54400000 	.word	0x54400000
 801a0dc:	3ff921fb 	.word	0x3ff921fb
 801a0e0:	1a626331 	.word	0x1a626331
 801a0e4:	3dd0b461 	.word	0x3dd0b461
 801a0e8:	1a600000 	.word	0x1a600000
 801a0ec:	3dd0b461 	.word	0x3dd0b461
 801a0f0:	2e037073 	.word	0x2e037073
 801a0f4:	3ba3198a 	.word	0x3ba3198a
 801a0f8:	6dc9c883 	.word	0x6dc9c883
 801a0fc:	3fe45f30 	.word	0x3fe45f30
 801a100:	2e000000 	.word	0x2e000000
 801a104:	3ba3198a 	.word	0x3ba3198a
 801a108:	252049c1 	.word	0x252049c1
 801a10c:	397b839a 	.word	0x397b839a
 801a110:	00000000 	.word	0x00000000
 801a114:	41700000 	.word	0x41700000
 801a118:	3fe921fb 	.word	0x3fe921fb
 801a11c:	4002d97b 	.word	0x4002d97b
 801a120:	413921fb 	.word	0x413921fb
 801a124:	08033708 	.word	0x08033708
 801a128:	7fefffff 	.word	0x7fefffff
 801a12c:	08033788 	.word	0x08033788

0801a130 <__ieee754_rem_pio2f>:
 801a130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a132:	ee10 6a10 	vmov	r6, s0
 801a136:	4b8e      	ldr	r3, [pc, #568]	; (801a370 <__ieee754_rem_pio2f+0x240>)
 801a138:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801a13c:	429d      	cmp	r5, r3
 801a13e:	b087      	sub	sp, #28
 801a140:	eef0 7a40 	vmov.f32	s15, s0
 801a144:	4604      	mov	r4, r0
 801a146:	dc05      	bgt.n	801a154 <__ieee754_rem_pio2f+0x24>
 801a148:	2300      	movs	r3, #0
 801a14a:	ed80 0a00 	vstr	s0, [r0]
 801a14e:	6043      	str	r3, [r0, #4]
 801a150:	2000      	movs	r0, #0
 801a152:	e01a      	b.n	801a18a <__ieee754_rem_pio2f+0x5a>
 801a154:	4b87      	ldr	r3, [pc, #540]	; (801a374 <__ieee754_rem_pio2f+0x244>)
 801a156:	429d      	cmp	r5, r3
 801a158:	dc46      	bgt.n	801a1e8 <__ieee754_rem_pio2f+0xb8>
 801a15a:	2e00      	cmp	r6, #0
 801a15c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801a378 <__ieee754_rem_pio2f+0x248>
 801a160:	4b86      	ldr	r3, [pc, #536]	; (801a37c <__ieee754_rem_pio2f+0x24c>)
 801a162:	f025 050f 	bic.w	r5, r5, #15
 801a166:	dd1f      	ble.n	801a1a8 <__ieee754_rem_pio2f+0x78>
 801a168:	429d      	cmp	r5, r3
 801a16a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a16e:	d00e      	beq.n	801a18e <__ieee754_rem_pio2f+0x5e>
 801a170:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801a380 <__ieee754_rem_pio2f+0x250>
 801a174:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801a178:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a17c:	ed80 0a00 	vstr	s0, [r0]
 801a180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a184:	2001      	movs	r0, #1
 801a186:	edc4 7a01 	vstr	s15, [r4, #4]
 801a18a:	b007      	add	sp, #28
 801a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a18e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801a384 <__ieee754_rem_pio2f+0x254>
 801a192:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801a388 <__ieee754_rem_pio2f+0x258>
 801a196:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a19a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801a19e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a1a2:	edc0 6a00 	vstr	s13, [r0]
 801a1a6:	e7eb      	b.n	801a180 <__ieee754_rem_pio2f+0x50>
 801a1a8:	429d      	cmp	r5, r3
 801a1aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a1ae:	d00e      	beq.n	801a1ce <__ieee754_rem_pio2f+0x9e>
 801a1b0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801a380 <__ieee754_rem_pio2f+0x250>
 801a1b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801a1b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a1bc:	ed80 0a00 	vstr	s0, [r0]
 801a1c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1c8:	edc4 7a01 	vstr	s15, [r4, #4]
 801a1cc:	e7dd      	b.n	801a18a <__ieee754_rem_pio2f+0x5a>
 801a1ce:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801a384 <__ieee754_rem_pio2f+0x254>
 801a1d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801a388 <__ieee754_rem_pio2f+0x258>
 801a1d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a1da:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a1de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a1e2:	edc0 6a00 	vstr	s13, [r0]
 801a1e6:	e7eb      	b.n	801a1c0 <__ieee754_rem_pio2f+0x90>
 801a1e8:	4b68      	ldr	r3, [pc, #416]	; (801a38c <__ieee754_rem_pio2f+0x25c>)
 801a1ea:	429d      	cmp	r5, r3
 801a1ec:	dc72      	bgt.n	801a2d4 <__ieee754_rem_pio2f+0x1a4>
 801a1ee:	f7ff fb4f 	bl	8019890 <fabsf>
 801a1f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a390 <__ieee754_rem_pio2f+0x260>
 801a1f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a1fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a1fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a206:	ee17 0a90 	vmov	r0, s15
 801a20a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a378 <__ieee754_rem_pio2f+0x248>
 801a20e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a212:	281f      	cmp	r0, #31
 801a214:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a380 <__ieee754_rem_pio2f+0x250>
 801a218:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a21c:	eeb1 6a47 	vneg.f32	s12, s14
 801a220:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a224:	ee16 2a90 	vmov	r2, s13
 801a228:	dc1c      	bgt.n	801a264 <__ieee754_rem_pio2f+0x134>
 801a22a:	495a      	ldr	r1, [pc, #360]	; (801a394 <__ieee754_rem_pio2f+0x264>)
 801a22c:	1e47      	subs	r7, r0, #1
 801a22e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a232:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a236:	428b      	cmp	r3, r1
 801a238:	d014      	beq.n	801a264 <__ieee754_rem_pio2f+0x134>
 801a23a:	6022      	str	r2, [r4, #0]
 801a23c:	ed94 7a00 	vldr	s14, [r4]
 801a240:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a244:	2e00      	cmp	r6, #0
 801a246:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a24a:	ed84 0a01 	vstr	s0, [r4, #4]
 801a24e:	da9c      	bge.n	801a18a <__ieee754_rem_pio2f+0x5a>
 801a250:	eeb1 7a47 	vneg.f32	s14, s14
 801a254:	eeb1 0a40 	vneg.f32	s0, s0
 801a258:	ed84 7a00 	vstr	s14, [r4]
 801a25c:	ed84 0a01 	vstr	s0, [r4, #4]
 801a260:	4240      	negs	r0, r0
 801a262:	e792      	b.n	801a18a <__ieee754_rem_pio2f+0x5a>
 801a264:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a268:	15eb      	asrs	r3, r5, #23
 801a26a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801a26e:	2d08      	cmp	r5, #8
 801a270:	dde3      	ble.n	801a23a <__ieee754_rem_pio2f+0x10a>
 801a272:	eddf 7a44 	vldr	s15, [pc, #272]	; 801a384 <__ieee754_rem_pio2f+0x254>
 801a276:	eddf 5a44 	vldr	s11, [pc, #272]	; 801a388 <__ieee754_rem_pio2f+0x258>
 801a27a:	eef0 6a40 	vmov.f32	s13, s0
 801a27e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a282:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a286:	eea6 0a27 	vfma.f32	s0, s12, s15
 801a28a:	eef0 7a40 	vmov.f32	s15, s0
 801a28e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a292:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a296:	ee15 2a90 	vmov	r2, s11
 801a29a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a29e:	1a5b      	subs	r3, r3, r1
 801a2a0:	2b19      	cmp	r3, #25
 801a2a2:	dc04      	bgt.n	801a2ae <__ieee754_rem_pio2f+0x17e>
 801a2a4:	edc4 5a00 	vstr	s11, [r4]
 801a2a8:	eeb0 0a66 	vmov.f32	s0, s13
 801a2ac:	e7c6      	b.n	801a23c <__ieee754_rem_pio2f+0x10c>
 801a2ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a398 <__ieee754_rem_pio2f+0x268>
 801a2b2:	eeb0 0a66 	vmov.f32	s0, s13
 801a2b6:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a2ba:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a2be:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a39c <__ieee754_rem_pio2f+0x26c>
 801a2c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a2c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a2ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a2ce:	ed84 7a00 	vstr	s14, [r4]
 801a2d2:	e7b3      	b.n	801a23c <__ieee754_rem_pio2f+0x10c>
 801a2d4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a2d8:	db06      	blt.n	801a2e8 <__ieee754_rem_pio2f+0x1b8>
 801a2da:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a2de:	edc0 7a01 	vstr	s15, [r0, #4]
 801a2e2:	edc0 7a00 	vstr	s15, [r0]
 801a2e6:	e733      	b.n	801a150 <__ieee754_rem_pio2f+0x20>
 801a2e8:	15ea      	asrs	r2, r5, #23
 801a2ea:	3a86      	subs	r2, #134	; 0x86
 801a2ec:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a2f0:	ee07 3a90 	vmov	s15, r3
 801a2f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a2f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a3a0 <__ieee754_rem_pio2f+0x270>
 801a2fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a304:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a30c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a318:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a31c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a320:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a328:	edcd 7a05 	vstr	s15, [sp, #20]
 801a32c:	d11e      	bne.n	801a36c <__ieee754_rem_pio2f+0x23c>
 801a32e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a336:	bf14      	ite	ne
 801a338:	2302      	movne	r3, #2
 801a33a:	2301      	moveq	r3, #1
 801a33c:	4919      	ldr	r1, [pc, #100]	; (801a3a4 <__ieee754_rem_pio2f+0x274>)
 801a33e:	9101      	str	r1, [sp, #4]
 801a340:	2102      	movs	r1, #2
 801a342:	9100      	str	r1, [sp, #0]
 801a344:	a803      	add	r0, sp, #12
 801a346:	4621      	mov	r1, r4
 801a348:	f000 fbde 	bl	801ab08 <__kernel_rem_pio2f>
 801a34c:	2e00      	cmp	r6, #0
 801a34e:	f6bf af1c 	bge.w	801a18a <__ieee754_rem_pio2f+0x5a>
 801a352:	edd4 7a00 	vldr	s15, [r4]
 801a356:	eef1 7a67 	vneg.f32	s15, s15
 801a35a:	edc4 7a00 	vstr	s15, [r4]
 801a35e:	edd4 7a01 	vldr	s15, [r4, #4]
 801a362:	eef1 7a67 	vneg.f32	s15, s15
 801a366:	edc4 7a01 	vstr	s15, [r4, #4]
 801a36a:	e779      	b.n	801a260 <__ieee754_rem_pio2f+0x130>
 801a36c:	2303      	movs	r3, #3
 801a36e:	e7e5      	b.n	801a33c <__ieee754_rem_pio2f+0x20c>
 801a370:	3f490fd8 	.word	0x3f490fd8
 801a374:	4016cbe3 	.word	0x4016cbe3
 801a378:	3fc90f80 	.word	0x3fc90f80
 801a37c:	3fc90fd0 	.word	0x3fc90fd0
 801a380:	37354443 	.word	0x37354443
 801a384:	37354400 	.word	0x37354400
 801a388:	2e85a308 	.word	0x2e85a308
 801a38c:	43490f80 	.word	0x43490f80
 801a390:	3f22f984 	.word	0x3f22f984
 801a394:	08033890 	.word	0x08033890
 801a398:	2e85a300 	.word	0x2e85a300
 801a39c:	248d3132 	.word	0x248d3132
 801a3a0:	43800000 	.word	0x43800000
 801a3a4:	08033910 	.word	0x08033910

0801a3a8 <__kernel_rem_pio2>:
 801a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ac:	ed2d 8b06 	vpush	{d8-d10}
 801a3b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801a3b4:	460f      	mov	r7, r1
 801a3b6:	9002      	str	r0, [sp, #8]
 801a3b8:	49c5      	ldr	r1, [pc, #788]	; (801a6d0 <__kernel_rem_pio2+0x328>)
 801a3ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801a3bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801a3c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801a3c4:	9301      	str	r3, [sp, #4]
 801a3c6:	f112 0f14 	cmn.w	r2, #20
 801a3ca:	bfa8      	it	ge
 801a3cc:	2018      	movge	r0, #24
 801a3ce:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801a3d2:	bfb8      	it	lt
 801a3d4:	2000      	movlt	r0, #0
 801a3d6:	f06f 0417 	mvn.w	r4, #23
 801a3da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801a6b8 <__kernel_rem_pio2+0x310>
 801a3de:	bfa4      	itt	ge
 801a3e0:	f1a2 0a03 	subge.w	sl, r2, #3
 801a3e4:	fb9a f0f0 	sdivge	r0, sl, r0
 801a3e8:	fb00 4404 	mla	r4, r0, r4, r4
 801a3ec:	1a46      	subs	r6, r0, r1
 801a3ee:	4414      	add	r4, r2
 801a3f0:	eb09 0c01 	add.w	ip, r9, r1
 801a3f4:	ad1a      	add	r5, sp, #104	; 0x68
 801a3f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	4562      	cmp	r2, ip
 801a3fe:	dd10      	ble.n	801a422 <__kernel_rem_pio2+0x7a>
 801a400:	9a01      	ldr	r2, [sp, #4]
 801a402:	ab1a      	add	r3, sp, #104	; 0x68
 801a404:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a408:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801a40c:	f04f 0c00 	mov.w	ip, #0
 801a410:	45cc      	cmp	ip, r9
 801a412:	dc26      	bgt.n	801a462 <__kernel_rem_pio2+0xba>
 801a414:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801a6b8 <__kernel_rem_pio2+0x310>
 801a418:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a41c:	4616      	mov	r6, r2
 801a41e:	2500      	movs	r5, #0
 801a420:	e015      	b.n	801a44e <__kernel_rem_pio2+0xa6>
 801a422:	42d6      	cmn	r6, r2
 801a424:	d409      	bmi.n	801a43a <__kernel_rem_pio2+0x92>
 801a426:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801a42a:	ee07 3a90 	vmov	s15, r3
 801a42e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a432:	eca5 7b02 	vstmia	r5!, {d7}
 801a436:	3201      	adds	r2, #1
 801a438:	e7e0      	b.n	801a3fc <__kernel_rem_pio2+0x54>
 801a43a:	eeb0 7b46 	vmov.f64	d7, d6
 801a43e:	e7f8      	b.n	801a432 <__kernel_rem_pio2+0x8a>
 801a440:	ecb8 5b02 	vldmia	r8!, {d5}
 801a444:	ed96 6b00 	vldr	d6, [r6]
 801a448:	3501      	adds	r5, #1
 801a44a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a44e:	428d      	cmp	r5, r1
 801a450:	f1a6 0608 	sub.w	r6, r6, #8
 801a454:	ddf4      	ble.n	801a440 <__kernel_rem_pio2+0x98>
 801a456:	ecaa 7b02 	vstmia	sl!, {d7}
 801a45a:	f10c 0c01 	add.w	ip, ip, #1
 801a45e:	3208      	adds	r2, #8
 801a460:	e7d6      	b.n	801a410 <__kernel_rem_pio2+0x68>
 801a462:	ab06      	add	r3, sp, #24
 801a464:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801a6c0 <__kernel_rem_pio2+0x318>
 801a468:	ed9f ab97 	vldr	d10, [pc, #604]	; 801a6c8 <__kernel_rem_pio2+0x320>
 801a46c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801a470:	9303      	str	r3, [sp, #12]
 801a472:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801a476:	464d      	mov	r5, r9
 801a478:	00eb      	lsls	r3, r5, #3
 801a47a:	9304      	str	r3, [sp, #16]
 801a47c:	ab92      	add	r3, sp, #584	; 0x248
 801a47e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a482:	f10d 0b18 	add.w	fp, sp, #24
 801a486:	ab6a      	add	r3, sp, #424	; 0x1a8
 801a488:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801a48c:	465e      	mov	r6, fp
 801a48e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a492:	4628      	mov	r0, r5
 801a494:	2800      	cmp	r0, #0
 801a496:	f1a2 0208 	sub.w	r2, r2, #8
 801a49a:	dc4c      	bgt.n	801a536 <__kernel_rem_pio2+0x18e>
 801a49c:	4620      	mov	r0, r4
 801a49e:	9105      	str	r1, [sp, #20]
 801a4a0:	f000 ff06 	bl	801b2b0 <scalbn>
 801a4a4:	eeb0 8b40 	vmov.f64	d8, d0
 801a4a8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801a4ac:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a4b0:	f000 fe8a 	bl	801b1c8 <floor>
 801a4b4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801a4b8:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a4bc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a4c0:	2c00      	cmp	r4, #0
 801a4c2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801a4c6:	ee17 8a90 	vmov	r8, s15
 801a4ca:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a4ce:	9905      	ldr	r1, [sp, #20]
 801a4d0:	dd43      	ble.n	801a55a <__kernel_rem_pio2+0x1b2>
 801a4d2:	1e68      	subs	r0, r5, #1
 801a4d4:	ab06      	add	r3, sp, #24
 801a4d6:	f1c4 0c18 	rsb	ip, r4, #24
 801a4da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801a4de:	fa46 f20c 	asr.w	r2, r6, ip
 801a4e2:	4490      	add	r8, r2
 801a4e4:	fa02 f20c 	lsl.w	r2, r2, ip
 801a4e8:	1ab6      	subs	r6, r6, r2
 801a4ea:	f1c4 0217 	rsb	r2, r4, #23
 801a4ee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801a4f2:	4116      	asrs	r6, r2
 801a4f4:	2e00      	cmp	r6, #0
 801a4f6:	dd3f      	ble.n	801a578 <__kernel_rem_pio2+0x1d0>
 801a4f8:	f04f 0c00 	mov.w	ip, #0
 801a4fc:	f108 0801 	add.w	r8, r8, #1
 801a500:	4660      	mov	r0, ip
 801a502:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801a506:	4565      	cmp	r5, ip
 801a508:	dc6e      	bgt.n	801a5e8 <__kernel_rem_pio2+0x240>
 801a50a:	2c00      	cmp	r4, #0
 801a50c:	dd04      	ble.n	801a518 <__kernel_rem_pio2+0x170>
 801a50e:	2c01      	cmp	r4, #1
 801a510:	d07f      	beq.n	801a612 <__kernel_rem_pio2+0x26a>
 801a512:	2c02      	cmp	r4, #2
 801a514:	f000 8087 	beq.w	801a626 <__kernel_rem_pio2+0x27e>
 801a518:	2e02      	cmp	r6, #2
 801a51a:	d12d      	bne.n	801a578 <__kernel_rem_pio2+0x1d0>
 801a51c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a520:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a524:	b340      	cbz	r0, 801a578 <__kernel_rem_pio2+0x1d0>
 801a526:	4620      	mov	r0, r4
 801a528:	9105      	str	r1, [sp, #20]
 801a52a:	f000 fec1 	bl	801b2b0 <scalbn>
 801a52e:	9905      	ldr	r1, [sp, #20]
 801a530:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a534:	e020      	b.n	801a578 <__kernel_rem_pio2+0x1d0>
 801a536:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a53a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a53e:	3801      	subs	r0, #1
 801a540:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a544:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a548:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a54c:	eca6 0a01 	vstmia	r6!, {s0}
 801a550:	ed92 0b00 	vldr	d0, [r2]
 801a554:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a558:	e79c      	b.n	801a494 <__kernel_rem_pio2+0xec>
 801a55a:	d105      	bne.n	801a568 <__kernel_rem_pio2+0x1c0>
 801a55c:	1e6a      	subs	r2, r5, #1
 801a55e:	ab06      	add	r3, sp, #24
 801a560:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a564:	15f6      	asrs	r6, r6, #23
 801a566:	e7c5      	b.n	801a4f4 <__kernel_rem_pio2+0x14c>
 801a568:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a56c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a574:	da36      	bge.n	801a5e4 <__kernel_rem_pio2+0x23c>
 801a576:	2600      	movs	r6, #0
 801a578:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a580:	f040 80aa 	bne.w	801a6d8 <__kernel_rem_pio2+0x330>
 801a584:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801a588:	4658      	mov	r0, fp
 801a58a:	2200      	movs	r2, #0
 801a58c:	4548      	cmp	r0, r9
 801a58e:	da52      	bge.n	801a636 <__kernel_rem_pio2+0x28e>
 801a590:	2a00      	cmp	r2, #0
 801a592:	f000 8081 	beq.w	801a698 <__kernel_rem_pio2+0x2f0>
 801a596:	ab06      	add	r3, sp, #24
 801a598:	3c18      	subs	r4, #24
 801a59a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	f000 8087 	beq.w	801a6b2 <__kernel_rem_pio2+0x30a>
 801a5a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a5a8:	4620      	mov	r0, r4
 801a5aa:	f000 fe81 	bl	801b2b0 <scalbn>
 801a5ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a5b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801a6c0 <__kernel_rem_pio2+0x318>
 801a5b6:	a96a      	add	r1, sp, #424	; 0x1a8
 801a5b8:	f103 0208 	add.w	r2, r3, #8
 801a5bc:	1888      	adds	r0, r1, r2
 801a5be:	4659      	mov	r1, fp
 801a5c0:	2900      	cmp	r1, #0
 801a5c2:	f280 80b7 	bge.w	801a734 <__kernel_rem_pio2+0x38c>
 801a5c6:	4659      	mov	r1, fp
 801a5c8:	2900      	cmp	r1, #0
 801a5ca:	f2c0 80d5 	blt.w	801a778 <__kernel_rem_pio2+0x3d0>
 801a5ce:	a86a      	add	r0, sp, #424	; 0x1a8
 801a5d0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801a5d4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801a6b8 <__kernel_rem_pio2+0x310>
 801a5d8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801a6d4 <__kernel_rem_pio2+0x32c>
 801a5dc:	2400      	movs	r4, #0
 801a5de:	ebab 0001 	sub.w	r0, fp, r1
 801a5e2:	e0be      	b.n	801a762 <__kernel_rem_pio2+0x3ba>
 801a5e4:	2602      	movs	r6, #2
 801a5e6:	e787      	b.n	801a4f8 <__kernel_rem_pio2+0x150>
 801a5e8:	f8db 2000 	ldr.w	r2, [fp]
 801a5ec:	b958      	cbnz	r0, 801a606 <__kernel_rem_pio2+0x25e>
 801a5ee:	b122      	cbz	r2, 801a5fa <__kernel_rem_pio2+0x252>
 801a5f0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a5f4:	f8cb 2000 	str.w	r2, [fp]
 801a5f8:	2201      	movs	r2, #1
 801a5fa:	f10c 0c01 	add.w	ip, ip, #1
 801a5fe:	f10b 0b04 	add.w	fp, fp, #4
 801a602:	4610      	mov	r0, r2
 801a604:	e77f      	b.n	801a506 <__kernel_rem_pio2+0x15e>
 801a606:	ebae 0202 	sub.w	r2, lr, r2
 801a60a:	f8cb 2000 	str.w	r2, [fp]
 801a60e:	4602      	mov	r2, r0
 801a610:	e7f3      	b.n	801a5fa <__kernel_rem_pio2+0x252>
 801a612:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a616:	ab06      	add	r3, sp, #24
 801a618:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a61c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a620:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a624:	e778      	b.n	801a518 <__kernel_rem_pio2+0x170>
 801a626:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a62a:	ab06      	add	r3, sp, #24
 801a62c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a630:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a634:	e7f4      	b.n	801a620 <__kernel_rem_pio2+0x278>
 801a636:	ab06      	add	r3, sp, #24
 801a638:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a63c:	3801      	subs	r0, #1
 801a63e:	431a      	orrs	r2, r3
 801a640:	e7a4      	b.n	801a58c <__kernel_rem_pio2+0x1e4>
 801a642:	f10c 0c01 	add.w	ip, ip, #1
 801a646:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801a64a:	2800      	cmp	r0, #0
 801a64c:	d0f9      	beq.n	801a642 <__kernel_rem_pio2+0x29a>
 801a64e:	9b04      	ldr	r3, [sp, #16]
 801a650:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a654:	eb0d 0203 	add.w	r2, sp, r3
 801a658:	9b01      	ldr	r3, [sp, #4]
 801a65a:	18e8      	adds	r0, r5, r3
 801a65c:	ab1a      	add	r3, sp, #104	; 0x68
 801a65e:	1c6e      	adds	r6, r5, #1
 801a660:	3a98      	subs	r2, #152	; 0x98
 801a662:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801a666:	4465      	add	r5, ip
 801a668:	42b5      	cmp	r5, r6
 801a66a:	f6ff af05 	blt.w	801a478 <__kernel_rem_pio2+0xd0>
 801a66e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801a672:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a676:	ee07 3a90 	vmov	s15, r3
 801a67a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a67e:	f04f 0c00 	mov.w	ip, #0
 801a682:	eca0 7b02 	vstmia	r0!, {d7}
 801a686:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801a6b8 <__kernel_rem_pio2+0x310>
 801a68a:	4680      	mov	r8, r0
 801a68c:	458c      	cmp	ip, r1
 801a68e:	dd07      	ble.n	801a6a0 <__kernel_rem_pio2+0x2f8>
 801a690:	eca2 7b02 	vstmia	r2!, {d7}
 801a694:	3601      	adds	r6, #1
 801a696:	e7e7      	b.n	801a668 <__kernel_rem_pio2+0x2c0>
 801a698:	9a03      	ldr	r2, [sp, #12]
 801a69a:	f04f 0c01 	mov.w	ip, #1
 801a69e:	e7d2      	b.n	801a646 <__kernel_rem_pio2+0x29e>
 801a6a0:	ecbe 5b02 	vldmia	lr!, {d5}
 801a6a4:	ed38 6b02 	vldmdb	r8!, {d6}
 801a6a8:	f10c 0c01 	add.w	ip, ip, #1
 801a6ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a6b0:	e7ec      	b.n	801a68c <__kernel_rem_pio2+0x2e4>
 801a6b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a6b6:	e76e      	b.n	801a596 <__kernel_rem_pio2+0x1ee>
	...
 801a6c4:	3e700000 	.word	0x3e700000
 801a6c8:	00000000 	.word	0x00000000
 801a6cc:	41700000 	.word	0x41700000
 801a6d0:	08033c68 	.word	0x08033c68
 801a6d4:	08033c28 	.word	0x08033c28
 801a6d8:	4260      	negs	r0, r4
 801a6da:	eeb0 0b48 	vmov.f64	d0, d8
 801a6de:	f000 fde7 	bl	801b2b0 <scalbn>
 801a6e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801a8c0 <__kernel_rem_pio2+0x518>
 801a6e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ee:	db18      	blt.n	801a722 <__kernel_rem_pio2+0x37a>
 801a6f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801a8c8 <__kernel_rem_pio2+0x520>
 801a6f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a6f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a6fc:	aa06      	add	r2, sp, #24
 801a6fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a702:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a706:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a70a:	f105 0b01 	add.w	fp, r5, #1
 801a70e:	ee10 3a10 	vmov	r3, s0
 801a712:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a716:	ee17 3a10 	vmov	r3, s14
 801a71a:	3418      	adds	r4, #24
 801a71c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a720:	e740      	b.n	801a5a4 <__kernel_rem_pio2+0x1fc>
 801a722:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a726:	aa06      	add	r2, sp, #24
 801a728:	ee10 3a10 	vmov	r3, s0
 801a72c:	46ab      	mov	fp, r5
 801a72e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a732:	e737      	b.n	801a5a4 <__kernel_rem_pio2+0x1fc>
 801a734:	ac06      	add	r4, sp, #24
 801a736:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801a73a:	9401      	str	r4, [sp, #4]
 801a73c:	ee07 4a90 	vmov	s15, r4
 801a740:	3901      	subs	r1, #1
 801a742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a746:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a74a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a74e:	ed20 7b02 	vstmdb	r0!, {d7}
 801a752:	e735      	b.n	801a5c0 <__kernel_rem_pio2+0x218>
 801a754:	ecbc 5b02 	vldmia	ip!, {d5}
 801a758:	ecb5 6b02 	vldmia	r5!, {d6}
 801a75c:	3401      	adds	r4, #1
 801a75e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a762:	454c      	cmp	r4, r9
 801a764:	dc01      	bgt.n	801a76a <__kernel_rem_pio2+0x3c2>
 801a766:	4284      	cmp	r4, r0
 801a768:	ddf4      	ble.n	801a754 <__kernel_rem_pio2+0x3ac>
 801a76a:	ac42      	add	r4, sp, #264	; 0x108
 801a76c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801a770:	ed80 7b00 	vstr	d7, [r0]
 801a774:	3901      	subs	r1, #1
 801a776:	e727      	b.n	801a5c8 <__kernel_rem_pio2+0x220>
 801a778:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801a77a:	2902      	cmp	r1, #2
 801a77c:	dc0a      	bgt.n	801a794 <__kernel_rem_pio2+0x3ec>
 801a77e:	2900      	cmp	r1, #0
 801a780:	dc2c      	bgt.n	801a7dc <__kernel_rem_pio2+0x434>
 801a782:	d045      	beq.n	801a810 <__kernel_rem_pio2+0x468>
 801a784:	f008 0007 	and.w	r0, r8, #7
 801a788:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a78c:	ecbd 8b06 	vpop	{d8-d10}
 801a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a794:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a796:	2a03      	cmp	r2, #3
 801a798:	d1f4      	bne.n	801a784 <__kernel_rem_pio2+0x3dc>
 801a79a:	aa42      	add	r2, sp, #264	; 0x108
 801a79c:	4413      	add	r3, r2
 801a79e:	461a      	mov	r2, r3
 801a7a0:	4619      	mov	r1, r3
 801a7a2:	4658      	mov	r0, fp
 801a7a4:	2800      	cmp	r0, #0
 801a7a6:	f1a1 0108 	sub.w	r1, r1, #8
 801a7aa:	dc54      	bgt.n	801a856 <__kernel_rem_pio2+0x4ae>
 801a7ac:	4659      	mov	r1, fp
 801a7ae:	2901      	cmp	r1, #1
 801a7b0:	f1a2 0208 	sub.w	r2, r2, #8
 801a7b4:	dc5f      	bgt.n	801a876 <__kernel_rem_pio2+0x4ce>
 801a7b6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801a8d0 <__kernel_rem_pio2+0x528>
 801a7ba:	3308      	adds	r3, #8
 801a7bc:	f1bb 0f01 	cmp.w	fp, #1
 801a7c0:	dc69      	bgt.n	801a896 <__kernel_rem_pio2+0x4ee>
 801a7c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a7c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a7ca:	2e00      	cmp	r6, #0
 801a7cc:	d16a      	bne.n	801a8a4 <__kernel_rem_pio2+0x4fc>
 801a7ce:	ed87 5b00 	vstr	d5, [r7]
 801a7d2:	ed87 6b02 	vstr	d6, [r7, #8]
 801a7d6:	ed87 7b04 	vstr	d7, [r7, #16]
 801a7da:	e7d3      	b.n	801a784 <__kernel_rem_pio2+0x3dc>
 801a7dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801a8d0 <__kernel_rem_pio2+0x528>
 801a7e0:	ab42      	add	r3, sp, #264	; 0x108
 801a7e2:	441a      	add	r2, r3
 801a7e4:	465b      	mov	r3, fp
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	da26      	bge.n	801a838 <__kernel_rem_pio2+0x490>
 801a7ea:	b35e      	cbz	r6, 801a844 <__kernel_rem_pio2+0x49c>
 801a7ec:	eeb1 7b46 	vneg.f64	d7, d6
 801a7f0:	ed87 7b00 	vstr	d7, [r7]
 801a7f4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a7f8:	aa44      	add	r2, sp, #272	; 0x110
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a800:	459b      	cmp	fp, r3
 801a802:	da22      	bge.n	801a84a <__kernel_rem_pio2+0x4a2>
 801a804:	b10e      	cbz	r6, 801a80a <__kernel_rem_pio2+0x462>
 801a806:	eeb1 7b47 	vneg.f64	d7, d7
 801a80a:	ed87 7b02 	vstr	d7, [r7, #8]
 801a80e:	e7b9      	b.n	801a784 <__kernel_rem_pio2+0x3dc>
 801a810:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801a8d0 <__kernel_rem_pio2+0x528>
 801a814:	ab42      	add	r3, sp, #264	; 0x108
 801a816:	441a      	add	r2, r3
 801a818:	f1bb 0f00 	cmp.w	fp, #0
 801a81c:	da05      	bge.n	801a82a <__kernel_rem_pio2+0x482>
 801a81e:	b10e      	cbz	r6, 801a824 <__kernel_rem_pio2+0x47c>
 801a820:	eeb1 7b47 	vneg.f64	d7, d7
 801a824:	ed87 7b00 	vstr	d7, [r7]
 801a828:	e7ac      	b.n	801a784 <__kernel_rem_pio2+0x3dc>
 801a82a:	ed32 6b02 	vldmdb	r2!, {d6}
 801a82e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a832:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a836:	e7ef      	b.n	801a818 <__kernel_rem_pio2+0x470>
 801a838:	ed32 7b02 	vldmdb	r2!, {d7}
 801a83c:	3b01      	subs	r3, #1
 801a83e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a842:	e7d0      	b.n	801a7e6 <__kernel_rem_pio2+0x43e>
 801a844:	eeb0 7b46 	vmov.f64	d7, d6
 801a848:	e7d2      	b.n	801a7f0 <__kernel_rem_pio2+0x448>
 801a84a:	ecb2 6b02 	vldmia	r2!, {d6}
 801a84e:	3301      	adds	r3, #1
 801a850:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a854:	e7d4      	b.n	801a800 <__kernel_rem_pio2+0x458>
 801a856:	ed91 7b00 	vldr	d7, [r1]
 801a85a:	ed91 5b02 	vldr	d5, [r1, #8]
 801a85e:	3801      	subs	r0, #1
 801a860:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a864:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a868:	ed81 6b00 	vstr	d6, [r1]
 801a86c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a870:	ed81 7b02 	vstr	d7, [r1, #8]
 801a874:	e796      	b.n	801a7a4 <__kernel_rem_pio2+0x3fc>
 801a876:	ed92 7b00 	vldr	d7, [r2]
 801a87a:	ed92 5b02 	vldr	d5, [r2, #8]
 801a87e:	3901      	subs	r1, #1
 801a880:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a884:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a888:	ed82 6b00 	vstr	d6, [r2]
 801a88c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a890:	ed82 7b02 	vstr	d7, [r2, #8]
 801a894:	e78b      	b.n	801a7ae <__kernel_rem_pio2+0x406>
 801a896:	ed33 6b02 	vldmdb	r3!, {d6}
 801a89a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a89e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a8a2:	e78b      	b.n	801a7bc <__kernel_rem_pio2+0x414>
 801a8a4:	eeb1 5b45 	vneg.f64	d5, d5
 801a8a8:	eeb1 6b46 	vneg.f64	d6, d6
 801a8ac:	ed87 5b00 	vstr	d5, [r7]
 801a8b0:	eeb1 7b47 	vneg.f64	d7, d7
 801a8b4:	ed87 6b02 	vstr	d6, [r7, #8]
 801a8b8:	e78d      	b.n	801a7d6 <__kernel_rem_pio2+0x42e>
 801a8ba:	bf00      	nop
 801a8bc:	f3af 8000 	nop.w
 801a8c0:	00000000 	.word	0x00000000
 801a8c4:	41700000 	.word	0x41700000
 801a8c8:	00000000 	.word	0x00000000
 801a8cc:	3e700000 	.word	0x3e700000
	...

0801a8d8 <__kernel_tan>:
 801a8d8:	eeb0 7b40 	vmov.f64	d7, d0
 801a8dc:	ee17 3a90 	vmov	r3, s15
 801a8e0:	4987      	ldr	r1, [pc, #540]	; (801ab00 <__kernel_tan+0x228>)
 801a8e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a8e6:	428a      	cmp	r2, r1
 801a8e8:	b510      	push	{r4, lr}
 801a8ea:	dc33      	bgt.n	801a954 <__kernel_tan+0x7c>
 801a8ec:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801a8f0:	ee16 1a90 	vmov	r1, s13
 801a8f4:	2900      	cmp	r1, #0
 801a8f6:	d143      	bne.n	801a980 <__kernel_tan+0xa8>
 801a8f8:	ee10 4a10 	vmov	r4, s0
 801a8fc:	1c43      	adds	r3, r0, #1
 801a8fe:	4323      	orrs	r3, r4
 801a900:	4313      	orrs	r3, r2
 801a902:	d108      	bne.n	801a916 <__kernel_tan+0x3e>
 801a904:	f000 fc56 	bl	801b1b4 <fabs>
 801a908:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a90c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a910:	eeb0 0b47 	vmov.f64	d0, d7
 801a914:	bd10      	pop	{r4, pc}
 801a916:	2801      	cmp	r0, #1
 801a918:	d0fa      	beq.n	801a910 <__kernel_tan+0x38>
 801a91a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801a91e:	ec53 2b16 	vmov	r2, r3, d6
 801a922:	460a      	mov	r2, r1
 801a924:	ec43 2b15 	vmov	d5, r2, r3
 801a928:	ee35 7b40 	vsub.f64	d7, d5, d0
 801a92c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a930:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a934:	ee87 4b06 	vdiv.f64	d4, d7, d6
 801a938:	ec53 2b14 	vmov	r2, r3, d4
 801a93c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a940:	460a      	mov	r2, r1
 801a942:	ec43 2b17 	vmov	d7, r2, r3
 801a946:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a94a:	eea1 6b07 	vfma.f64	d6, d1, d7
 801a94e:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a952:	e7dd      	b.n	801a910 <__kernel_tan+0x38>
 801a954:	496b      	ldr	r1, [pc, #428]	; (801ab04 <__kernel_tan+0x22c>)
 801a956:	428a      	cmp	r2, r1
 801a958:	dd12      	ble.n	801a980 <__kernel_tan+0xa8>
 801a95a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 801aa80 <__kernel_tan+0x1a8>
 801a95e:	2b00      	cmp	r3, #0
 801a960:	bfb8      	it	lt
 801a962:	eeb1 7b40 	vneglt.f64	d7, d0
 801a966:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a96a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 801aa88 <__kernel_tan+0x1b0>
 801a96e:	bfb8      	it	lt
 801a970:	eeb1 1b41 	vneglt.f64	d1, d1
 801a974:	ee36 1b41 	vsub.f64	d1, d6, d1
 801a978:	ee31 7b07 	vadd.f64	d7, d1, d7
 801a97c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 801aa90 <__kernel_tan+0x1b8>
 801a980:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a984:	ee25 6b05 	vmul.f64	d6, d5, d5
 801a988:	ed9f 3b43 	vldr	d3, [pc, #268]	; 801aa98 <__kernel_tan+0x1c0>
 801a98c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801aaa0 <__kernel_tan+0x1c8>
 801a990:	eea6 4b03 	vfma.f64	d4, d6, d3
 801a994:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801aaa8 <__kernel_tan+0x1d0>
 801a998:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a99c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801aab0 <__kernel_tan+0x1d8>
 801a9a0:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a9a4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801aab8 <__kernel_tan+0x1e0>
 801a9a8:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a9ac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801aac0 <__kernel_tan+0x1e8>
 801a9b0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801aac8 <__kernel_tan+0x1f0>
 801a9b4:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a9b8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801aad0 <__kernel_tan+0x1f8>
 801a9bc:	eea6 3b02 	vfma.f64	d3, d6, d2
 801a9c0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801aad8 <__kernel_tan+0x200>
 801a9c4:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a9c8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801aae0 <__kernel_tan+0x208>
 801a9cc:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a9d0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801aae8 <__kernel_tan+0x210>
 801a9d4:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a9d8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801aaf0 <__kernel_tan+0x218>
 801a9dc:	4949      	ldr	r1, [pc, #292]	; (801ab04 <__kernel_tan+0x22c>)
 801a9de:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a9e2:	ee27 2b05 	vmul.f64	d2, d7, d5
 801a9e6:	eeb0 6b44 	vmov.f64	d6, d4
 801a9ea:	eeb0 4b41 	vmov.f64	d4, d1
 801a9ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a9f2:	eea6 4b02 	vfma.f64	d4, d6, d2
 801a9f6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 801aaf8 <__kernel_tan+0x220>
 801a9fa:	eea4 1b05 	vfma.f64	d1, d4, d5
 801a9fe:	428a      	cmp	r2, r1
 801aa00:	eea2 1b06 	vfma.f64	d1, d2, d6
 801aa04:	ee37 5b01 	vadd.f64	d5, d7, d1
 801aa08:	dd1d      	ble.n	801aa46 <__kernel_tan+0x16e>
 801aa0a:	ee25 3b05 	vmul.f64	d3, d5, d5
 801aa0e:	179b      	asrs	r3, r3, #30
 801aa10:	ee06 0a90 	vmov	s13, r0
 801aa14:	f003 0302 	and.w	r3, r3, #2
 801aa18:	f1c3 0301 	rsb	r3, r3, #1
 801aa1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801aa20:	ee35 5b06 	vadd.f64	d5, d5, d6
 801aa24:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801aa28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801aa2c:	ee34 1b41 	vsub.f64	d1, d4, d1
 801aa30:	ee37 7b41 	vsub.f64	d7, d7, d1
 801aa34:	eea7 6b45 	vfms.f64	d6, d7, d5
 801aa38:	ee07 3a10 	vmov	s14, r3
 801aa3c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801aa40:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa44:	e764      	b.n	801a910 <__kernel_tan+0x38>
 801aa46:	2801      	cmp	r0, #1
 801aa48:	d016      	beq.n	801aa78 <__kernel_tan+0x1a0>
 801aa4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801aa4e:	ec51 0b15 	vmov	r0, r1, d5
 801aa52:	2000      	movs	r0, #0
 801aa54:	ec41 0b13 	vmov	d3, r0, r1
 801aa58:	ee33 7b47 	vsub.f64	d7, d3, d7
 801aa5c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801aa60:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801aa64:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801aa68:	ec53 2b14 	vmov	r2, r3, d4
 801aa6c:	4602      	mov	r2, r0
 801aa6e:	ec43 2b17 	vmov	d7, r2, r3
 801aa72:	eea3 6b07 	vfma.f64	d6, d3, d7
 801aa76:	e768      	b.n	801a94a <__kernel_tan+0x72>
 801aa78:	eeb0 7b45 	vmov.f64	d7, d5
 801aa7c:	e748      	b.n	801a910 <__kernel_tan+0x38>
 801aa7e:	bf00      	nop
 801aa80:	54442d18 	.word	0x54442d18
 801aa84:	3fe921fb 	.word	0x3fe921fb
 801aa88:	33145c07 	.word	0x33145c07
 801aa8c:	3c81a626 	.word	0x3c81a626
	...
 801aa98:	db605373 	.word	0xdb605373
 801aa9c:	bef375cb 	.word	0xbef375cb
 801aaa0:	a03792a6 	.word	0xa03792a6
 801aaa4:	3f147e88 	.word	0x3f147e88
 801aaa8:	f2f26501 	.word	0xf2f26501
 801aaac:	3f4344d8 	.word	0x3f4344d8
 801aab0:	c9560328 	.word	0xc9560328
 801aab4:	3f6d6d22 	.word	0x3f6d6d22
 801aab8:	8406d637 	.word	0x8406d637
 801aabc:	3f9664f4 	.word	0x3f9664f4
 801aac0:	1110fe7a 	.word	0x1110fe7a
 801aac4:	3fc11111 	.word	0x3fc11111
 801aac8:	74bf7ad4 	.word	0x74bf7ad4
 801aacc:	3efb2a70 	.word	0x3efb2a70
 801aad0:	32f0a7e9 	.word	0x32f0a7e9
 801aad4:	3f12b80f 	.word	0x3f12b80f
 801aad8:	1a8d1068 	.word	0x1a8d1068
 801aadc:	3f3026f7 	.word	0x3f3026f7
 801aae0:	fee08315 	.word	0xfee08315
 801aae4:	3f57dbc8 	.word	0x3f57dbc8
 801aae8:	e96e8493 	.word	0xe96e8493
 801aaec:	3f8226e3 	.word	0x3f8226e3
 801aaf0:	1bb341fe 	.word	0x1bb341fe
 801aaf4:	3faba1ba 	.word	0x3faba1ba
 801aaf8:	55555563 	.word	0x55555563
 801aafc:	3fd55555 	.word	0x3fd55555
 801ab00:	3e2fffff 	.word	0x3e2fffff
 801ab04:	3fe59427 	.word	0x3fe59427

0801ab08 <__kernel_rem_pio2f>:
 801ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0c:	ed2d 8b04 	vpush	{d8-d9}
 801ab10:	b0d9      	sub	sp, #356	; 0x164
 801ab12:	4688      	mov	r8, r1
 801ab14:	9002      	str	r0, [sp, #8]
 801ab16:	49bb      	ldr	r1, [pc, #748]	; (801ae04 <__kernel_rem_pio2f+0x2fc>)
 801ab18:	9866      	ldr	r0, [sp, #408]	; 0x198
 801ab1a:	9301      	str	r3, [sp, #4]
 801ab1c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801ab20:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801ab24:	1e59      	subs	r1, r3, #1
 801ab26:	1d13      	adds	r3, r2, #4
 801ab28:	db27      	blt.n	801ab7a <__kernel_rem_pio2f+0x72>
 801ab2a:	f1b2 0b03 	subs.w	fp, r2, #3
 801ab2e:	bf48      	it	mi
 801ab30:	f102 0b04 	addmi.w	fp, r2, #4
 801ab34:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801ab38:	1c45      	adds	r5, r0, #1
 801ab3a:	00ec      	lsls	r4, r5, #3
 801ab3c:	1a47      	subs	r7, r0, r1
 801ab3e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801ab42:	9403      	str	r4, [sp, #12]
 801ab44:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801ab48:	eb0a 0c01 	add.w	ip, sl, r1
 801ab4c:	ae1c      	add	r6, sp, #112	; 0x70
 801ab4e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801ab52:	2400      	movs	r4, #0
 801ab54:	4564      	cmp	r4, ip
 801ab56:	dd12      	ble.n	801ab7e <__kernel_rem_pio2f+0x76>
 801ab58:	9b01      	ldr	r3, [sp, #4]
 801ab5a:	ac1c      	add	r4, sp, #112	; 0x70
 801ab5c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ab60:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801ab64:	f04f 0c00 	mov.w	ip, #0
 801ab68:	45d4      	cmp	ip, sl
 801ab6a:	dc27      	bgt.n	801abbc <__kernel_rem_pio2f+0xb4>
 801ab6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801ab70:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801ab74:	4627      	mov	r7, r4
 801ab76:	2600      	movs	r6, #0
 801ab78:	e016      	b.n	801aba8 <__kernel_rem_pio2f+0xa0>
 801ab7a:	2000      	movs	r0, #0
 801ab7c:	e7dc      	b.n	801ab38 <__kernel_rem_pio2f+0x30>
 801ab7e:	42e7      	cmn	r7, r4
 801ab80:	bf5d      	ittte	pl
 801ab82:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801ab86:	ee07 3a90 	vmovpl	s15, r3
 801ab8a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ab8e:	eef0 7a47 	vmovmi.f32	s15, s14
 801ab92:	ece6 7a01 	vstmia	r6!, {s15}
 801ab96:	3401      	adds	r4, #1
 801ab98:	e7dc      	b.n	801ab54 <__kernel_rem_pio2f+0x4c>
 801ab9a:	ecf9 6a01 	vldmia	r9!, {s13}
 801ab9e:	ed97 7a00 	vldr	s14, [r7]
 801aba2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aba6:	3601      	adds	r6, #1
 801aba8:	428e      	cmp	r6, r1
 801abaa:	f1a7 0704 	sub.w	r7, r7, #4
 801abae:	ddf4      	ble.n	801ab9a <__kernel_rem_pio2f+0x92>
 801abb0:	eceb 7a01 	vstmia	fp!, {s15}
 801abb4:	f10c 0c01 	add.w	ip, ip, #1
 801abb8:	3404      	adds	r4, #4
 801abba:	e7d5      	b.n	801ab68 <__kernel_rem_pio2f+0x60>
 801abbc:	ab08      	add	r3, sp, #32
 801abbe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801abc2:	eddf 8a93 	vldr	s17, [pc, #588]	; 801ae10 <__kernel_rem_pio2f+0x308>
 801abc6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801ae0c <__kernel_rem_pio2f+0x304>
 801abca:	9304      	str	r3, [sp, #16]
 801abcc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801abd0:	4656      	mov	r6, sl
 801abd2:	00b3      	lsls	r3, r6, #2
 801abd4:	9305      	str	r3, [sp, #20]
 801abd6:	ab58      	add	r3, sp, #352	; 0x160
 801abd8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801abdc:	ac08      	add	r4, sp, #32
 801abde:	ab44      	add	r3, sp, #272	; 0x110
 801abe0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801abe4:	46a4      	mov	ip, r4
 801abe6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801abea:	4637      	mov	r7, r6
 801abec:	2f00      	cmp	r7, #0
 801abee:	f1a0 0004 	sub.w	r0, r0, #4
 801abf2:	dc4f      	bgt.n	801ac94 <__kernel_rem_pio2f+0x18c>
 801abf4:	4628      	mov	r0, r5
 801abf6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801abfa:	f000 fd3f 	bl	801b67c <scalbnf>
 801abfe:	eeb0 8a40 	vmov.f32	s16, s0
 801ac02:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801ac06:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ac0a:	f000 fcf5 	bl	801b5f8 <floorf>
 801ac0e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801ac12:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ac16:	2d00      	cmp	r5, #0
 801ac18:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ac1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ac20:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ac24:	ee17 9a90 	vmov	r9, s15
 801ac28:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ac2c:	dd44      	ble.n	801acb8 <__kernel_rem_pio2f+0x1b0>
 801ac2e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801ac32:	ab08      	add	r3, sp, #32
 801ac34:	f1c5 0e08 	rsb	lr, r5, #8
 801ac38:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801ac3c:	fa47 f00e 	asr.w	r0, r7, lr
 801ac40:	4481      	add	r9, r0
 801ac42:	fa00 f00e 	lsl.w	r0, r0, lr
 801ac46:	1a3f      	subs	r7, r7, r0
 801ac48:	f1c5 0007 	rsb	r0, r5, #7
 801ac4c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801ac50:	4107      	asrs	r7, r0
 801ac52:	2f00      	cmp	r7, #0
 801ac54:	dd3f      	ble.n	801acd6 <__kernel_rem_pio2f+0x1ce>
 801ac56:	f04f 0e00 	mov.w	lr, #0
 801ac5a:	f109 0901 	add.w	r9, r9, #1
 801ac5e:	4673      	mov	r3, lr
 801ac60:	4576      	cmp	r6, lr
 801ac62:	dc6b      	bgt.n	801ad3c <__kernel_rem_pio2f+0x234>
 801ac64:	2d00      	cmp	r5, #0
 801ac66:	dd04      	ble.n	801ac72 <__kernel_rem_pio2f+0x16a>
 801ac68:	2d01      	cmp	r5, #1
 801ac6a:	d078      	beq.n	801ad5e <__kernel_rem_pio2f+0x256>
 801ac6c:	2d02      	cmp	r5, #2
 801ac6e:	f000 8081 	beq.w	801ad74 <__kernel_rem_pio2f+0x26c>
 801ac72:	2f02      	cmp	r7, #2
 801ac74:	d12f      	bne.n	801acd6 <__kernel_rem_pio2f+0x1ce>
 801ac76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ac7a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ac7e:	b353      	cbz	r3, 801acd6 <__kernel_rem_pio2f+0x1ce>
 801ac80:	4628      	mov	r0, r5
 801ac82:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801ac86:	f000 fcf9 	bl	801b67c <scalbnf>
 801ac8a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ac8e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ac92:	e020      	b.n	801acd6 <__kernel_rem_pio2f+0x1ce>
 801ac94:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ac98:	3f01      	subs	r7, #1
 801ac9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aca2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801aca6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801acaa:	ecac 0a01 	vstmia	ip!, {s0}
 801acae:	ed90 0a00 	vldr	s0, [r0]
 801acb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 801acb6:	e799      	b.n	801abec <__kernel_rem_pio2f+0xe4>
 801acb8:	d105      	bne.n	801acc6 <__kernel_rem_pio2f+0x1be>
 801acba:	1e70      	subs	r0, r6, #1
 801acbc:	ab08      	add	r3, sp, #32
 801acbe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801acc2:	11ff      	asrs	r7, r7, #7
 801acc4:	e7c5      	b.n	801ac52 <__kernel_rem_pio2f+0x14a>
 801acc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801acca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801acce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acd2:	da31      	bge.n	801ad38 <__kernel_rem_pio2f+0x230>
 801acd4:	2700      	movs	r7, #0
 801acd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acde:	f040 809b 	bne.w	801ae18 <__kernel_rem_pio2f+0x310>
 801ace2:	1e74      	subs	r4, r6, #1
 801ace4:	46a4      	mov	ip, r4
 801ace6:	2000      	movs	r0, #0
 801ace8:	45d4      	cmp	ip, sl
 801acea:	da4a      	bge.n	801ad82 <__kernel_rem_pio2f+0x27a>
 801acec:	2800      	cmp	r0, #0
 801acee:	d07a      	beq.n	801ade6 <__kernel_rem_pio2f+0x2de>
 801acf0:	ab08      	add	r3, sp, #32
 801acf2:	3d08      	subs	r5, #8
 801acf4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	f000 8081 	beq.w	801ae00 <__kernel_rem_pio2f+0x2f8>
 801acfe:	4628      	mov	r0, r5
 801ad00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad04:	00a5      	lsls	r5, r4, #2
 801ad06:	f000 fcb9 	bl	801b67c <scalbnf>
 801ad0a:	aa44      	add	r2, sp, #272	; 0x110
 801ad0c:	1d2b      	adds	r3, r5, #4
 801ad0e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801ae10 <__kernel_rem_pio2f+0x308>
 801ad12:	18d1      	adds	r1, r2, r3
 801ad14:	4622      	mov	r2, r4
 801ad16:	2a00      	cmp	r2, #0
 801ad18:	f280 80ae 	bge.w	801ae78 <__kernel_rem_pio2f+0x370>
 801ad1c:	4622      	mov	r2, r4
 801ad1e:	2a00      	cmp	r2, #0
 801ad20:	f2c0 80cc 	blt.w	801aebc <__kernel_rem_pio2f+0x3b4>
 801ad24:	a944      	add	r1, sp, #272	; 0x110
 801ad26:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801ad2a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801ae08 <__kernel_rem_pio2f+0x300>
 801ad2e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801ad32:	2000      	movs	r0, #0
 801ad34:	1aa1      	subs	r1, r4, r2
 801ad36:	e0b6      	b.n	801aea6 <__kernel_rem_pio2f+0x39e>
 801ad38:	2702      	movs	r7, #2
 801ad3a:	e78c      	b.n	801ac56 <__kernel_rem_pio2f+0x14e>
 801ad3c:	6820      	ldr	r0, [r4, #0]
 801ad3e:	b94b      	cbnz	r3, 801ad54 <__kernel_rem_pio2f+0x24c>
 801ad40:	b118      	cbz	r0, 801ad4a <__kernel_rem_pio2f+0x242>
 801ad42:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ad46:	6020      	str	r0, [r4, #0]
 801ad48:	2001      	movs	r0, #1
 801ad4a:	f10e 0e01 	add.w	lr, lr, #1
 801ad4e:	3404      	adds	r4, #4
 801ad50:	4603      	mov	r3, r0
 801ad52:	e785      	b.n	801ac60 <__kernel_rem_pio2f+0x158>
 801ad54:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ad58:	6020      	str	r0, [r4, #0]
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	e7f5      	b.n	801ad4a <__kernel_rem_pio2f+0x242>
 801ad5e:	1e74      	subs	r4, r6, #1
 801ad60:	a808      	add	r0, sp, #32
 801ad62:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ad66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ad6a:	f10d 0c20 	add.w	ip, sp, #32
 801ad6e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801ad72:	e77e      	b.n	801ac72 <__kernel_rem_pio2f+0x16a>
 801ad74:	1e74      	subs	r4, r6, #1
 801ad76:	a808      	add	r0, sp, #32
 801ad78:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ad7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ad80:	e7f3      	b.n	801ad6a <__kernel_rem_pio2f+0x262>
 801ad82:	ab08      	add	r3, sp, #32
 801ad84:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ad88:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ad8c:	4318      	orrs	r0, r3
 801ad8e:	e7ab      	b.n	801ace8 <__kernel_rem_pio2f+0x1e0>
 801ad90:	f10c 0c01 	add.w	ip, ip, #1
 801ad94:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801ad98:	2c00      	cmp	r4, #0
 801ad9a:	d0f9      	beq.n	801ad90 <__kernel_rem_pio2f+0x288>
 801ad9c:	9b05      	ldr	r3, [sp, #20]
 801ad9e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ada2:	eb0d 0003 	add.w	r0, sp, r3
 801ada6:	9b01      	ldr	r3, [sp, #4]
 801ada8:	18f4      	adds	r4, r6, r3
 801adaa:	ab1c      	add	r3, sp, #112	; 0x70
 801adac:	1c77      	adds	r7, r6, #1
 801adae:	384c      	subs	r0, #76	; 0x4c
 801adb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801adb4:	4466      	add	r6, ip
 801adb6:	42be      	cmp	r6, r7
 801adb8:	f6ff af0b 	blt.w	801abd2 <__kernel_rem_pio2f+0xca>
 801adbc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801adc0:	f8dd e008 	ldr.w	lr, [sp, #8]
 801adc4:	ee07 3a90 	vmov	s15, r3
 801adc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adcc:	f04f 0c00 	mov.w	ip, #0
 801add0:	ece4 7a01 	vstmia	r4!, {s15}
 801add4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801add8:	46a1      	mov	r9, r4
 801adda:	458c      	cmp	ip, r1
 801addc:	dd07      	ble.n	801adee <__kernel_rem_pio2f+0x2e6>
 801adde:	ece0 7a01 	vstmia	r0!, {s15}
 801ade2:	3701      	adds	r7, #1
 801ade4:	e7e7      	b.n	801adb6 <__kernel_rem_pio2f+0x2ae>
 801ade6:	9804      	ldr	r0, [sp, #16]
 801ade8:	f04f 0c01 	mov.w	ip, #1
 801adec:	e7d2      	b.n	801ad94 <__kernel_rem_pio2f+0x28c>
 801adee:	ecfe 6a01 	vldmia	lr!, {s13}
 801adf2:	ed39 7a01 	vldmdb	r9!, {s14}
 801adf6:	f10c 0c01 	add.w	ip, ip, #1
 801adfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801adfe:	e7ec      	b.n	801adda <__kernel_rem_pio2f+0x2d2>
 801ae00:	3c01      	subs	r4, #1
 801ae02:	e775      	b.n	801acf0 <__kernel_rem_pio2f+0x1e8>
 801ae04:	08033ca4 	.word	0x08033ca4
 801ae08:	08033c78 	.word	0x08033c78
 801ae0c:	43800000 	.word	0x43800000
 801ae10:	3b800000 	.word	0x3b800000
 801ae14:	00000000 	.word	0x00000000
 801ae18:	9b03      	ldr	r3, [sp, #12]
 801ae1a:	eeb0 0a48 	vmov.f32	s0, s16
 801ae1e:	1a98      	subs	r0, r3, r2
 801ae20:	f000 fc2c 	bl	801b67c <scalbnf>
 801ae24:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801ae0c <__kernel_rem_pio2f+0x304>
 801ae28:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae30:	db19      	blt.n	801ae66 <__kernel_rem_pio2f+0x35e>
 801ae32:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801ae10 <__kernel_rem_pio2f+0x308>
 801ae36:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ae3a:	aa08      	add	r2, sp, #32
 801ae3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae40:	1c74      	adds	r4, r6, #1
 801ae42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae46:	3508      	adds	r5, #8
 801ae48:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ae4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ae54:	ee10 3a10 	vmov	r3, s0
 801ae58:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ae5c:	ee17 3a90 	vmov	r3, s15
 801ae60:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ae64:	e74b      	b.n	801acfe <__kernel_rem_pio2f+0x1f6>
 801ae66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ae6a:	aa08      	add	r2, sp, #32
 801ae6c:	ee10 3a10 	vmov	r3, s0
 801ae70:	4634      	mov	r4, r6
 801ae72:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ae76:	e742      	b.n	801acfe <__kernel_rem_pio2f+0x1f6>
 801ae78:	a808      	add	r0, sp, #32
 801ae7a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801ae7e:	9001      	str	r0, [sp, #4]
 801ae80:	ee07 0a90 	vmov	s15, r0
 801ae84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae88:	3a01      	subs	r2, #1
 801ae8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ae8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ae92:	ed61 7a01 	vstmdb	r1!, {s15}
 801ae96:	e73e      	b.n	801ad16 <__kernel_rem_pio2f+0x20e>
 801ae98:	ecfc 6a01 	vldmia	ip!, {s13}
 801ae9c:	ecb6 7a01 	vldmia	r6!, {s14}
 801aea0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aea4:	3001      	adds	r0, #1
 801aea6:	4550      	cmp	r0, sl
 801aea8:	dc01      	bgt.n	801aeae <__kernel_rem_pio2f+0x3a6>
 801aeaa:	4288      	cmp	r0, r1
 801aeac:	ddf4      	ble.n	801ae98 <__kernel_rem_pio2f+0x390>
 801aeae:	a858      	add	r0, sp, #352	; 0x160
 801aeb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aeb4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801aeb8:	3a01      	subs	r2, #1
 801aeba:	e730      	b.n	801ad1e <__kernel_rem_pio2f+0x216>
 801aebc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801aebe:	2a02      	cmp	r2, #2
 801aec0:	dc09      	bgt.n	801aed6 <__kernel_rem_pio2f+0x3ce>
 801aec2:	2a00      	cmp	r2, #0
 801aec4:	dc2a      	bgt.n	801af1c <__kernel_rem_pio2f+0x414>
 801aec6:	d043      	beq.n	801af50 <__kernel_rem_pio2f+0x448>
 801aec8:	f009 0007 	and.w	r0, r9, #7
 801aecc:	b059      	add	sp, #356	; 0x164
 801aece:	ecbd 8b04 	vpop	{d8-d9}
 801aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aed6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801aed8:	2b03      	cmp	r3, #3
 801aeda:	d1f5      	bne.n	801aec8 <__kernel_rem_pio2f+0x3c0>
 801aedc:	ab30      	add	r3, sp, #192	; 0xc0
 801aede:	442b      	add	r3, r5
 801aee0:	461a      	mov	r2, r3
 801aee2:	4619      	mov	r1, r3
 801aee4:	4620      	mov	r0, r4
 801aee6:	2800      	cmp	r0, #0
 801aee8:	f1a1 0104 	sub.w	r1, r1, #4
 801aeec:	dc51      	bgt.n	801af92 <__kernel_rem_pio2f+0x48a>
 801aeee:	4621      	mov	r1, r4
 801aef0:	2901      	cmp	r1, #1
 801aef2:	f1a2 0204 	sub.w	r2, r2, #4
 801aef6:	dc5c      	bgt.n	801afb2 <__kernel_rem_pio2f+0x4aa>
 801aef8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801aefc:	3304      	adds	r3, #4
 801aefe:	2c01      	cmp	r4, #1
 801af00:	dc67      	bgt.n	801afd2 <__kernel_rem_pio2f+0x4ca>
 801af02:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801af06:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801af0a:	2f00      	cmp	r7, #0
 801af0c:	d167      	bne.n	801afde <__kernel_rem_pio2f+0x4d6>
 801af0e:	edc8 6a00 	vstr	s13, [r8]
 801af12:	ed88 7a01 	vstr	s14, [r8, #4]
 801af16:	edc8 7a02 	vstr	s15, [r8, #8]
 801af1a:	e7d5      	b.n	801aec8 <__kernel_rem_pio2f+0x3c0>
 801af1c:	aa30      	add	r2, sp, #192	; 0xc0
 801af1e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801af22:	4413      	add	r3, r2
 801af24:	4622      	mov	r2, r4
 801af26:	2a00      	cmp	r2, #0
 801af28:	da24      	bge.n	801af74 <__kernel_rem_pio2f+0x46c>
 801af2a:	b34f      	cbz	r7, 801af80 <__kernel_rem_pio2f+0x478>
 801af2c:	eef1 7a47 	vneg.f32	s15, s14
 801af30:	edc8 7a00 	vstr	s15, [r8]
 801af34:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801af38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af3c:	aa31      	add	r2, sp, #196	; 0xc4
 801af3e:	2301      	movs	r3, #1
 801af40:	429c      	cmp	r4, r3
 801af42:	da20      	bge.n	801af86 <__kernel_rem_pio2f+0x47e>
 801af44:	b10f      	cbz	r7, 801af4a <__kernel_rem_pio2f+0x442>
 801af46:	eef1 7a67 	vneg.f32	s15, s15
 801af4a:	edc8 7a01 	vstr	s15, [r8, #4]
 801af4e:	e7bb      	b.n	801aec8 <__kernel_rem_pio2f+0x3c0>
 801af50:	aa30      	add	r2, sp, #192	; 0xc0
 801af52:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801ae14 <__kernel_rem_pio2f+0x30c>
 801af56:	4413      	add	r3, r2
 801af58:	2c00      	cmp	r4, #0
 801af5a:	da05      	bge.n	801af68 <__kernel_rem_pio2f+0x460>
 801af5c:	b10f      	cbz	r7, 801af62 <__kernel_rem_pio2f+0x45a>
 801af5e:	eef1 7a67 	vneg.f32	s15, s15
 801af62:	edc8 7a00 	vstr	s15, [r8]
 801af66:	e7af      	b.n	801aec8 <__kernel_rem_pio2f+0x3c0>
 801af68:	ed33 7a01 	vldmdb	r3!, {s14}
 801af6c:	3c01      	subs	r4, #1
 801af6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af72:	e7f1      	b.n	801af58 <__kernel_rem_pio2f+0x450>
 801af74:	ed73 7a01 	vldmdb	r3!, {s15}
 801af78:	3a01      	subs	r2, #1
 801af7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af7e:	e7d2      	b.n	801af26 <__kernel_rem_pio2f+0x41e>
 801af80:	eef0 7a47 	vmov.f32	s15, s14
 801af84:	e7d4      	b.n	801af30 <__kernel_rem_pio2f+0x428>
 801af86:	ecb2 7a01 	vldmia	r2!, {s14}
 801af8a:	3301      	adds	r3, #1
 801af8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af90:	e7d6      	b.n	801af40 <__kernel_rem_pio2f+0x438>
 801af92:	edd1 7a00 	vldr	s15, [r1]
 801af96:	edd1 6a01 	vldr	s13, [r1, #4]
 801af9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801af9e:	3801      	subs	r0, #1
 801afa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801afa4:	ed81 7a00 	vstr	s14, [r1]
 801afa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afac:	edc1 7a01 	vstr	s15, [r1, #4]
 801afb0:	e799      	b.n	801aee6 <__kernel_rem_pio2f+0x3de>
 801afb2:	edd2 7a00 	vldr	s15, [r2]
 801afb6:	edd2 6a01 	vldr	s13, [r2, #4]
 801afba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801afbe:	3901      	subs	r1, #1
 801afc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801afc4:	ed82 7a00 	vstr	s14, [r2]
 801afc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afcc:	edc2 7a01 	vstr	s15, [r2, #4]
 801afd0:	e78e      	b.n	801aef0 <__kernel_rem_pio2f+0x3e8>
 801afd2:	ed33 7a01 	vldmdb	r3!, {s14}
 801afd6:	3c01      	subs	r4, #1
 801afd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801afdc:	e78f      	b.n	801aefe <__kernel_rem_pio2f+0x3f6>
 801afde:	eef1 6a66 	vneg.f32	s13, s13
 801afe2:	eeb1 7a47 	vneg.f32	s14, s14
 801afe6:	edc8 6a00 	vstr	s13, [r8]
 801afea:	ed88 7a01 	vstr	s14, [r8, #4]
 801afee:	eef1 7a67 	vneg.f32	s15, s15
 801aff2:	e790      	b.n	801af16 <__kernel_rem_pio2f+0x40e>

0801aff4 <__kernel_tanf>:
 801aff4:	b508      	push	{r3, lr}
 801aff6:	ee10 3a10 	vmov	r3, s0
 801affa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801affe:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801b002:	eef0 7a40 	vmov.f32	s15, s0
 801b006:	da17      	bge.n	801b038 <__kernel_tanf+0x44>
 801b008:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801b00c:	ee17 1a10 	vmov	r1, s14
 801b010:	bb41      	cbnz	r1, 801b064 <__kernel_tanf+0x70>
 801b012:	1c43      	adds	r3, r0, #1
 801b014:	4313      	orrs	r3, r2
 801b016:	d108      	bne.n	801b02a <__kernel_tanf+0x36>
 801b018:	f7fe fc3a 	bl	8019890 <fabsf>
 801b01c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b020:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b024:	eeb0 0a67 	vmov.f32	s0, s15
 801b028:	bd08      	pop	{r3, pc}
 801b02a:	2801      	cmp	r0, #1
 801b02c:	d0fa      	beq.n	801b024 <__kernel_tanf+0x30>
 801b02e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b032:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b036:	e7f5      	b.n	801b024 <__kernel_tanf+0x30>
 801b038:	494c      	ldr	r1, [pc, #304]	; (801b16c <__kernel_tanf+0x178>)
 801b03a:	428a      	cmp	r2, r1
 801b03c:	db12      	blt.n	801b064 <__kernel_tanf+0x70>
 801b03e:	2b00      	cmp	r3, #0
 801b040:	bfb8      	it	lt
 801b042:	eef1 7a40 	vneglt.f32	s15, s0
 801b046:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801b170 <__kernel_tanf+0x17c>
 801b04a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b04e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801b174 <__kernel_tanf+0x180>
 801b052:	bfb8      	it	lt
 801b054:	eef1 0a60 	vneglt.f32	s1, s1
 801b058:	ee70 0a60 	vsub.f32	s1, s0, s1
 801b05c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801b060:	eddf 0a45 	vldr	s1, [pc, #276]	; 801b178 <__kernel_tanf+0x184>
 801b064:	eddf 5a45 	vldr	s11, [pc, #276]	; 801b17c <__kernel_tanf+0x188>
 801b068:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801b180 <__kernel_tanf+0x18c>
 801b06c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801b184 <__kernel_tanf+0x190>
 801b070:	493e      	ldr	r1, [pc, #248]	; (801b16c <__kernel_tanf+0x178>)
 801b072:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801b076:	428a      	cmp	r2, r1
 801b078:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b07c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801b080:	eddf 5a41 	vldr	s11, [pc, #260]	; 801b188 <__kernel_tanf+0x194>
 801b084:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b088:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801b18c <__kernel_tanf+0x198>
 801b08c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b090:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801b190 <__kernel_tanf+0x19c>
 801b094:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b098:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801b194 <__kernel_tanf+0x1a0>
 801b09c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0a0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801b198 <__kernel_tanf+0x1a4>
 801b0a4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801b0a8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801b19c <__kernel_tanf+0x1a8>
 801b0ac:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b0b0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801b1a0 <__kernel_tanf+0x1ac>
 801b0b4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801b0b8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801b1a4 <__kernel_tanf+0x1b0>
 801b0bc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b0c0:	eddf 5a39 	vldr	s11, [pc, #228]	; 801b1a8 <__kernel_tanf+0x1b4>
 801b0c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801b0c8:	eeb0 7a46 	vmov.f32	s14, s12
 801b0cc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b0d0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801b0d4:	eeb0 6a60 	vmov.f32	s12, s1
 801b0d8:	eea7 6a05 	vfma.f32	s12, s14, s10
 801b0dc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801b1ac <__kernel_tanf+0x1b8>
 801b0e0:	eee6 0a26 	vfma.f32	s1, s12, s13
 801b0e4:	eee5 0a07 	vfma.f32	s1, s10, s14
 801b0e8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801b0ec:	db1d      	blt.n	801b12a <__kernel_tanf+0x136>
 801b0ee:	ee06 0a90 	vmov	s13, r0
 801b0f2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801b0f6:	ee27 6a07 	vmul.f32	s12, s14, s14
 801b0fa:	ee37 7a00 	vadd.f32	s14, s14, s0
 801b0fe:	179b      	asrs	r3, r3, #30
 801b100:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801b104:	f003 0302 	and.w	r3, r3, #2
 801b108:	f1c3 0301 	rsb	r3, r3, #1
 801b10c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801b110:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801b114:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b118:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b11c:	ee07 3a90 	vmov	s15, r3
 801b120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b124:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b128:	e77c      	b.n	801b024 <__kernel_tanf+0x30>
 801b12a:	2801      	cmp	r0, #1
 801b12c:	d01b      	beq.n	801b166 <__kernel_tanf+0x172>
 801b12e:	4b20      	ldr	r3, [pc, #128]	; (801b1b0 <__kernel_tanf+0x1bc>)
 801b130:	ee17 2a10 	vmov	r2, s14
 801b134:	401a      	ands	r2, r3
 801b136:	ee06 2a10 	vmov	s12, r2
 801b13a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801b13e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801b142:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b146:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801b14a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b14e:	ee16 2a90 	vmov	r2, s13
 801b152:	4013      	ands	r3, r2
 801b154:	ee07 3a90 	vmov	s15, r3
 801b158:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b15c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801b160:	eee7 7a26 	vfma.f32	s15, s14, s13
 801b164:	e75e      	b.n	801b024 <__kernel_tanf+0x30>
 801b166:	eef0 7a47 	vmov.f32	s15, s14
 801b16a:	e75b      	b.n	801b024 <__kernel_tanf+0x30>
 801b16c:	3f2ca140 	.word	0x3f2ca140
 801b170:	3f490fda 	.word	0x3f490fda
 801b174:	33222168 	.word	0x33222168
 801b178:	00000000 	.word	0x00000000
 801b17c:	b79bae5f 	.word	0xb79bae5f
 801b180:	38a3f445 	.word	0x38a3f445
 801b184:	37d95384 	.word	0x37d95384
 801b188:	3a1a26c8 	.word	0x3a1a26c8
 801b18c:	3b6b6916 	.word	0x3b6b6916
 801b190:	3cb327a4 	.word	0x3cb327a4
 801b194:	3e088889 	.word	0x3e088889
 801b198:	3895c07a 	.word	0x3895c07a
 801b19c:	398137b9 	.word	0x398137b9
 801b1a0:	3abede48 	.word	0x3abede48
 801b1a4:	3c11371f 	.word	0x3c11371f
 801b1a8:	3d5d0dd1 	.word	0x3d5d0dd1
 801b1ac:	3eaaaaab 	.word	0x3eaaaaab
 801b1b0:	fffff000 	.word	0xfffff000

0801b1b4 <fabs>:
 801b1b4:	ec51 0b10 	vmov	r0, r1, d0
 801b1b8:	ee10 2a10 	vmov	r2, s0
 801b1bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b1c0:	ec43 2b10 	vmov	d0, r2, r3
 801b1c4:	4770      	bx	lr
	...

0801b1c8 <floor>:
 801b1c8:	ee10 1a90 	vmov	r1, s1
 801b1cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b1d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801b1d4:	2b13      	cmp	r3, #19
 801b1d6:	b530      	push	{r4, r5, lr}
 801b1d8:	ee10 0a10 	vmov	r0, s0
 801b1dc:	ee10 5a10 	vmov	r5, s0
 801b1e0:	dc31      	bgt.n	801b246 <floor+0x7e>
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	da15      	bge.n	801b212 <floor+0x4a>
 801b1e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b2a0 <floor+0xd8>
 801b1ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b1ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f6:	dd07      	ble.n	801b208 <floor+0x40>
 801b1f8:	2900      	cmp	r1, #0
 801b1fa:	da4e      	bge.n	801b29a <floor+0xd2>
 801b1fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b200:	4318      	orrs	r0, r3
 801b202:	d001      	beq.n	801b208 <floor+0x40>
 801b204:	4928      	ldr	r1, [pc, #160]	; (801b2a8 <floor+0xe0>)
 801b206:	2000      	movs	r0, #0
 801b208:	460b      	mov	r3, r1
 801b20a:	4602      	mov	r2, r0
 801b20c:	ec43 2b10 	vmov	d0, r2, r3
 801b210:	e020      	b.n	801b254 <floor+0x8c>
 801b212:	4a26      	ldr	r2, [pc, #152]	; (801b2ac <floor+0xe4>)
 801b214:	411a      	asrs	r2, r3
 801b216:	ea01 0402 	and.w	r4, r1, r2
 801b21a:	4304      	orrs	r4, r0
 801b21c:	d01a      	beq.n	801b254 <floor+0x8c>
 801b21e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801b2a0 <floor+0xd8>
 801b222:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b226:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b22e:	ddeb      	ble.n	801b208 <floor+0x40>
 801b230:	2900      	cmp	r1, #0
 801b232:	bfbe      	ittt	lt
 801b234:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801b238:	fa40 f303 	asrlt.w	r3, r0, r3
 801b23c:	18c9      	addlt	r1, r1, r3
 801b23e:	ea21 0102 	bic.w	r1, r1, r2
 801b242:	2000      	movs	r0, #0
 801b244:	e7e0      	b.n	801b208 <floor+0x40>
 801b246:	2b33      	cmp	r3, #51	; 0x33
 801b248:	dd05      	ble.n	801b256 <floor+0x8e>
 801b24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b24e:	d101      	bne.n	801b254 <floor+0x8c>
 801b250:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b254:	bd30      	pop	{r4, r5, pc}
 801b256:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801b25a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b25e:	40e2      	lsrs	r2, r4
 801b260:	4202      	tst	r2, r0
 801b262:	d0f7      	beq.n	801b254 <floor+0x8c>
 801b264:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801b2a0 <floor+0xd8>
 801b268:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b26c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b274:	ddc8      	ble.n	801b208 <floor+0x40>
 801b276:	2900      	cmp	r1, #0
 801b278:	da02      	bge.n	801b280 <floor+0xb8>
 801b27a:	2b14      	cmp	r3, #20
 801b27c:	d103      	bne.n	801b286 <floor+0xbe>
 801b27e:	3101      	adds	r1, #1
 801b280:	ea20 0002 	bic.w	r0, r0, r2
 801b284:	e7c0      	b.n	801b208 <floor+0x40>
 801b286:	2401      	movs	r4, #1
 801b288:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b28c:	fa04 f303 	lsl.w	r3, r4, r3
 801b290:	4418      	add	r0, r3
 801b292:	42a8      	cmp	r0, r5
 801b294:	bf38      	it	cc
 801b296:	1909      	addcc	r1, r1, r4
 801b298:	e7f2      	b.n	801b280 <floor+0xb8>
 801b29a:	2000      	movs	r0, #0
 801b29c:	4601      	mov	r1, r0
 801b29e:	e7b3      	b.n	801b208 <floor+0x40>
 801b2a0:	8800759c 	.word	0x8800759c
 801b2a4:	7e37e43c 	.word	0x7e37e43c
 801b2a8:	bff00000 	.word	0xbff00000
 801b2ac:	000fffff 	.word	0x000fffff

0801b2b0 <scalbn>:
 801b2b0:	ee10 1a90 	vmov	r1, s1
 801b2b4:	b510      	push	{r4, lr}
 801b2b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b2ba:	b98c      	cbnz	r4, 801b2e0 <scalbn+0x30>
 801b2bc:	ee10 3a10 	vmov	r3, s0
 801b2c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b2c4:	430b      	orrs	r3, r1
 801b2c6:	d011      	beq.n	801b2ec <scalbn+0x3c>
 801b2c8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801b390 <scalbn+0xe0>
 801b2cc:	4b3c      	ldr	r3, [pc, #240]	; (801b3c0 <scalbn+0x110>)
 801b2ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b2d2:	4298      	cmp	r0, r3
 801b2d4:	da0b      	bge.n	801b2ee <scalbn+0x3e>
 801b2d6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801b398 <scalbn+0xe8>
 801b2da:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b2de:	e005      	b.n	801b2ec <scalbn+0x3c>
 801b2e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801b2e4:	429c      	cmp	r4, r3
 801b2e6:	d107      	bne.n	801b2f8 <scalbn+0x48>
 801b2e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b2ec:	bd10      	pop	{r4, pc}
 801b2ee:	ee10 1a90 	vmov	r1, s1
 801b2f2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b2f6:	3c36      	subs	r4, #54	; 0x36
 801b2f8:	4404      	add	r4, r0
 801b2fa:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801b2fe:	429c      	cmp	r4, r3
 801b300:	dd0d      	ble.n	801b31e <scalbn+0x6e>
 801b302:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801b3a0 <scalbn+0xf0>
 801b306:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801b3a8 <scalbn+0xf8>
 801b30a:	eeb0 6b47 	vmov.f64	d6, d7
 801b30e:	ee10 3a90 	vmov	r3, s1
 801b312:	2b00      	cmp	r3, #0
 801b314:	fe27 7b05 	vselge.f64	d7, d7, d5
 801b318:	ee27 0b06 	vmul.f64	d0, d7, d6
 801b31c:	e7e6      	b.n	801b2ec <scalbn+0x3c>
 801b31e:	2c00      	cmp	r4, #0
 801b320:	dd0a      	ble.n	801b338 <scalbn+0x88>
 801b322:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b326:	ec53 2b10 	vmov	r2, r3, d0
 801b32a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b32e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801b332:	ec43 2b10 	vmov	d0, r2, r3
 801b336:	e7d9      	b.n	801b2ec <scalbn+0x3c>
 801b338:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801b33c:	da19      	bge.n	801b372 <scalbn+0xc2>
 801b33e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b342:	4298      	cmp	r0, r3
 801b344:	ee10 3a90 	vmov	r3, s1
 801b348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b34c:	dd09      	ble.n	801b362 <scalbn+0xb2>
 801b34e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801b3a0 <scalbn+0xf0>
 801b352:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801b3a8 <scalbn+0xf8>
 801b356:	eeb0 7b40 	vmov.f64	d7, d0
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801b360:	e7bb      	b.n	801b2da <scalbn+0x2a>
 801b362:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801b398 <scalbn+0xe8>
 801b366:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801b3b0 <scalbn+0x100>
 801b36a:	eeb0 7b40 	vmov.f64	d7, d0
 801b36e:	2b00      	cmp	r3, #0
 801b370:	e7f4      	b.n	801b35c <scalbn+0xac>
 801b372:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b376:	ec53 2b10 	vmov	r2, r3, d0
 801b37a:	3436      	adds	r4, #54	; 0x36
 801b37c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b380:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801b384:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801b3b8 <scalbn+0x108>
 801b388:	ec43 2b10 	vmov	d0, r2, r3
 801b38c:	e7a5      	b.n	801b2da <scalbn+0x2a>
 801b38e:	bf00      	nop
 801b390:	00000000 	.word	0x00000000
 801b394:	43500000 	.word	0x43500000
 801b398:	c2f8f359 	.word	0xc2f8f359
 801b39c:	01a56e1f 	.word	0x01a56e1f
 801b3a0:	8800759c 	.word	0x8800759c
 801b3a4:	7e37e43c 	.word	0x7e37e43c
 801b3a8:	8800759c 	.word	0x8800759c
 801b3ac:	fe37e43c 	.word	0xfe37e43c
 801b3b0:	c2f8f359 	.word	0xc2f8f359
 801b3b4:	81a56e1f 	.word	0x81a56e1f
 801b3b8:	00000000 	.word	0x00000000
 801b3bc:	3c900000 	.word	0x3c900000
 801b3c0:	ffff3cb0 	.word	0xffff3cb0

0801b3c4 <expm1f>:
 801b3c4:	ee10 2a10 	vmov	r2, s0
 801b3c8:	497c      	ldr	r1, [pc, #496]	; (801b5bc <expm1f+0x1f8>)
 801b3ca:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b3ce:	428b      	cmp	r3, r1
 801b3d0:	d920      	bls.n	801b414 <expm1f+0x50>
 801b3d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b3d6:	d902      	bls.n	801b3de <expm1f+0x1a>
 801b3d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b3dc:	4770      	bx	lr
 801b3de:	d105      	bne.n	801b3ec <expm1f+0x28>
 801b3e0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b3e4:	2a00      	cmp	r2, #0
 801b3e6:	fe20 0a27 	vselge.f32	s0, s0, s15
 801b3ea:	4770      	bx	lr
 801b3ec:	2a00      	cmp	r2, #0
 801b3ee:	db05      	blt.n	801b3fc <expm1f+0x38>
 801b3f0:	4973      	ldr	r1, [pc, #460]	; (801b5c0 <expm1f+0x1fc>)
 801b3f2:	428b      	cmp	r3, r1
 801b3f4:	d95c      	bls.n	801b4b0 <expm1f+0xec>
 801b3f6:	2000      	movs	r0, #0
 801b3f8:	f7fe b97c 	b.w	80196f4 <__math_oflowf>
 801b3fc:	eddf 7a71 	vldr	s15, [pc, #452]	; 801b5c4 <expm1f+0x200>
 801b400:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b40c:	d550      	bpl.n	801b4b0 <expm1f+0xec>
 801b40e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b412:	4770      	bx	lr
 801b414:	496c      	ldr	r1, [pc, #432]	; (801b5c8 <expm1f+0x204>)
 801b416:	428b      	cmp	r3, r1
 801b418:	d966      	bls.n	801b4e8 <expm1f+0x124>
 801b41a:	496c      	ldr	r1, [pc, #432]	; (801b5cc <expm1f+0x208>)
 801b41c:	428b      	cmp	r3, r1
 801b41e:	d847      	bhi.n	801b4b0 <expm1f+0xec>
 801b420:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801b5d0 <expm1f+0x20c>
 801b424:	2a00      	cmp	r2, #0
 801b426:	bfa7      	ittee	ge
 801b428:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801b42c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 801b5d4 <expm1f+0x210>
 801b430:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 801b5d8 <expm1f+0x214>
 801b434:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801b438:	bfac      	ite	ge
 801b43a:	2301      	movge	r3, #1
 801b43c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b440:	ee37 0a67 	vsub.f32	s0, s14, s15
 801b444:	ee37 7a40 	vsub.f32	s14, s14, s0
 801b448:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b44c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b450:	ee20 4a25 	vmul.f32	s8, s0, s11
 801b454:	ed9f 6a61 	vldr	s12, [pc, #388]	; 801b5dc <expm1f+0x218>
 801b458:	eddf 6a61 	vldr	s13, [pc, #388]	; 801b5e0 <expm1f+0x21c>
 801b45c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 801b5e4 <expm1f+0x220>
 801b460:	ee20 7a04 	vmul.f32	s14, s0, s8
 801b464:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801b468:	eee7 6a06 	vfma.f32	s13, s14, s12
 801b46c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 801b5e8 <expm1f+0x224>
 801b470:	eea6 6a87 	vfma.f32	s12, s13, s14
 801b474:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801b5ec <expm1f+0x228>
 801b478:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b47c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b480:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b484:	eef0 6a46 	vmov.f32	s13, s12
 801b488:	eee5 6a07 	vfma.f32	s13, s10, s14
 801b48c:	eee4 4a66 	vfms.f32	s9, s8, s13
 801b490:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801b494:	eea0 4a64 	vfms.f32	s8, s0, s9
 801b498:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801b49c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801b4a0:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b4a4:	bb73      	cbnz	r3, 801b504 <expm1f+0x140>
 801b4a6:	eef0 7a47 	vmov.f32	s15, s14
 801b4aa:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801b4ae:	e024      	b.n	801b4fa <expm1f+0x136>
 801b4b0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801b4b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b4b8:	2a00      	cmp	r2, #0
 801b4ba:	fe67 7a87 	vselge.f32	s15, s15, s14
 801b4be:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801b5f0 <expm1f+0x22c>
 801b4c2:	eddf 6a43 	vldr	s13, [pc, #268]	; 801b5d0 <expm1f+0x20c>
 801b4c6:	ee40 7a07 	vmla.f32	s15, s0, s14
 801b4ca:	eeb0 7a40 	vmov.f32	s14, s0
 801b4ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b4d2:	ee17 3a90 	vmov	r3, s15
 801b4d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b4de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b5d4 <expm1f+0x210>
 801b4e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b4e6:	e7ab      	b.n	801b440 <expm1f+0x7c>
 801b4e8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801b4ec:	d208      	bcs.n	801b500 <expm1f+0x13c>
 801b4ee:	eddf 7a41 	vldr	s15, [pc, #260]	; 801b5f4 <expm1f+0x230>
 801b4f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b4f6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b4fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b4fe:	4770      	bx	lr
 801b500:	2300      	movs	r3, #0
 801b502:	e7a3      	b.n	801b44c <expm1f+0x88>
 801b504:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801b508:	1c5a      	adds	r2, r3, #1
 801b50a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801b50e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b512:	d106      	bne.n	801b522 <expm1f+0x15e>
 801b514:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b518:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b51c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801b520:	4770      	bx	lr
 801b522:	2b01      	cmp	r3, #1
 801b524:	d118      	bne.n	801b558 <expm1f+0x194>
 801b526:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801b52a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b532:	bf5b      	ittet	pl
 801b534:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801b538:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801b53c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801b540:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801b544:	bf43      	ittte	mi
 801b546:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801b54a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801b54e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801b552:	eeb0 0a46 	vmovpl.f32	s0, s12
 801b556:	4770      	bx	lr
 801b558:	1c5a      	adds	r2, r3, #1
 801b55a:	2a39      	cmp	r2, #57	; 0x39
 801b55c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801b560:	d90b      	bls.n	801b57a <expm1f+0x1b6>
 801b562:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b566:	ee36 0a40 	vsub.f32	s0, s12, s0
 801b56a:	ee10 3a10 	vmov	r3, s0
 801b56e:	440b      	add	r3, r1
 801b570:	ee00 3a10 	vmov	s0, r3
 801b574:	ee30 0a46 	vsub.f32	s0, s0, s12
 801b578:	4770      	bx	lr
 801b57a:	2b16      	cmp	r3, #22
 801b57c:	dc11      	bgt.n	801b5a2 <expm1f+0x1de>
 801b57e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b582:	fa42 f303 	asr.w	r3, r2, r3
 801b586:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801b58a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b58e:	ee07 3a90 	vmov	s15, r3
 801b592:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b596:	ee10 3a10 	vmov	r3, s0
 801b59a:	440b      	add	r3, r1
 801b59c:	ee00 3a10 	vmov	s0, r3
 801b5a0:	4770      	bx	lr
 801b5a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801b5a6:	05db      	lsls	r3, r3, #23
 801b5a8:	ee07 3a10 	vmov	s14, r3
 801b5ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b5b0:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b5b4:	ee37 0a86 	vadd.f32	s0, s15, s12
 801b5b8:	e7ed      	b.n	801b596 <expm1f+0x1d2>
 801b5ba:	bf00      	nop
 801b5bc:	4195b843 	.word	0x4195b843
 801b5c0:	42b17217 	.word	0x42b17217
 801b5c4:	0da24260 	.word	0x0da24260
 801b5c8:	3eb17218 	.word	0x3eb17218
 801b5cc:	3f851591 	.word	0x3f851591
 801b5d0:	3f317180 	.word	0x3f317180
 801b5d4:	3717f7d1 	.word	0x3717f7d1
 801b5d8:	b717f7d1 	.word	0xb717f7d1
 801b5dc:	b457edbb 	.word	0xb457edbb
 801b5e0:	36867e54 	.word	0x36867e54
 801b5e4:	bd088889 	.word	0xbd088889
 801b5e8:	b8a670cd 	.word	0xb8a670cd
 801b5ec:	3ad00d01 	.word	0x3ad00d01
 801b5f0:	3fb8aa3b 	.word	0x3fb8aa3b
 801b5f4:	7149f2ca 	.word	0x7149f2ca

0801b5f8 <floorf>:
 801b5f8:	ee10 3a10 	vmov	r3, s0
 801b5fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b600:	3a7f      	subs	r2, #127	; 0x7f
 801b602:	2a16      	cmp	r2, #22
 801b604:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b608:	dc2a      	bgt.n	801b660 <floorf+0x68>
 801b60a:	2a00      	cmp	r2, #0
 801b60c:	da11      	bge.n	801b632 <floorf+0x3a>
 801b60e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b670 <floorf+0x78>
 801b612:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b616:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b61e:	dd05      	ble.n	801b62c <floorf+0x34>
 801b620:	2b00      	cmp	r3, #0
 801b622:	da23      	bge.n	801b66c <floorf+0x74>
 801b624:	4a13      	ldr	r2, [pc, #76]	; (801b674 <floorf+0x7c>)
 801b626:	2900      	cmp	r1, #0
 801b628:	bf18      	it	ne
 801b62a:	4613      	movne	r3, r2
 801b62c:	ee00 3a10 	vmov	s0, r3
 801b630:	4770      	bx	lr
 801b632:	4911      	ldr	r1, [pc, #68]	; (801b678 <floorf+0x80>)
 801b634:	4111      	asrs	r1, r2
 801b636:	420b      	tst	r3, r1
 801b638:	d0fa      	beq.n	801b630 <floorf+0x38>
 801b63a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b670 <floorf+0x78>
 801b63e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b642:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64a:	ddef      	ble.n	801b62c <floorf+0x34>
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	bfbe      	ittt	lt
 801b650:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b654:	fa40 f202 	asrlt.w	r2, r0, r2
 801b658:	189b      	addlt	r3, r3, r2
 801b65a:	ea23 0301 	bic.w	r3, r3, r1
 801b65e:	e7e5      	b.n	801b62c <floorf+0x34>
 801b660:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b664:	d3e4      	bcc.n	801b630 <floorf+0x38>
 801b666:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b66a:	4770      	bx	lr
 801b66c:	2300      	movs	r3, #0
 801b66e:	e7dd      	b.n	801b62c <floorf+0x34>
 801b670:	7149f2ca 	.word	0x7149f2ca
 801b674:	bf800000 	.word	0xbf800000
 801b678:	007fffff 	.word	0x007fffff

0801b67c <scalbnf>:
 801b67c:	ee10 3a10 	vmov	r3, s0
 801b680:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b684:	d024      	beq.n	801b6d0 <scalbnf+0x54>
 801b686:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b68a:	d302      	bcc.n	801b692 <scalbnf+0x16>
 801b68c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b690:	4770      	bx	lr
 801b692:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b696:	d121      	bne.n	801b6dc <scalbnf+0x60>
 801b698:	4b29      	ldr	r3, [pc, #164]	; (801b740 <scalbnf+0xc4>)
 801b69a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801b744 <scalbnf+0xc8>
 801b69e:	4298      	cmp	r0, r3
 801b6a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b6a4:	db15      	blt.n	801b6d2 <scalbnf+0x56>
 801b6a6:	ee10 3a10 	vmov	r3, s0
 801b6aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b6ae:	3a19      	subs	r2, #25
 801b6b0:	4402      	add	r2, r0
 801b6b2:	2afe      	cmp	r2, #254	; 0xfe
 801b6b4:	dd14      	ble.n	801b6e0 <scalbnf+0x64>
 801b6b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b748 <scalbnf+0xcc>
 801b6ba:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b74c <scalbnf+0xd0>
 801b6be:	ee10 3a10 	vmov	r3, s0
 801b6c2:	eeb0 7a67 	vmov.f32	s14, s15
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801b6cc:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b6d0:	4770      	bx	lr
 801b6d2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b750 <scalbnf+0xd4>
 801b6d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b6da:	4770      	bx	lr
 801b6dc:	0dd2      	lsrs	r2, r2, #23
 801b6de:	e7e7      	b.n	801b6b0 <scalbnf+0x34>
 801b6e0:	2a00      	cmp	r2, #0
 801b6e2:	dd06      	ble.n	801b6f2 <scalbnf+0x76>
 801b6e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b6e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b6ec:	ee00 3a10 	vmov	s0, r3
 801b6f0:	4770      	bx	lr
 801b6f2:	f112 0f16 	cmn.w	r2, #22
 801b6f6:	da19      	bge.n	801b72c <scalbnf+0xb0>
 801b6f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b6fc:	4298      	cmp	r0, r3
 801b6fe:	ee10 3a10 	vmov	r3, s0
 801b702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b706:	dd09      	ble.n	801b71c <scalbnf+0xa0>
 801b708:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801b748 <scalbnf+0xcc>
 801b70c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801b74c <scalbnf+0xd0>
 801b710:	eef0 7a40 	vmov.f32	s15, s0
 801b714:	2b00      	cmp	r3, #0
 801b716:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801b71a:	e7dc      	b.n	801b6d6 <scalbnf+0x5a>
 801b71c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b750 <scalbnf+0xd4>
 801b720:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b754 <scalbnf+0xd8>
 801b724:	eef0 7a40 	vmov.f32	s15, s0
 801b728:	2b00      	cmp	r3, #0
 801b72a:	e7f4      	b.n	801b716 <scalbnf+0x9a>
 801b72c:	3219      	adds	r2, #25
 801b72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b732:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b736:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b758 <scalbnf+0xdc>
 801b73a:	ee07 3a10 	vmov	s14, r3
 801b73e:	e7c5      	b.n	801b6cc <scalbnf+0x50>
 801b740:	ffff3cb0 	.word	0xffff3cb0
 801b744:	4c000000 	.word	0x4c000000
 801b748:	7149f2ca 	.word	0x7149f2ca
 801b74c:	f149f2ca 	.word	0xf149f2ca
 801b750:	0da24260 	.word	0x0da24260
 801b754:	8da24260 	.word	0x8da24260
 801b758:	33000000 	.word	0x33000000

0801b75c <__errno>:
 801b75c:	4b01      	ldr	r3, [pc, #4]	; (801b764 <__errno+0x8>)
 801b75e:	6818      	ldr	r0, [r3, #0]
 801b760:	4770      	bx	lr
 801b762:	bf00      	nop
 801b764:	20000128 	.word	0x20000128

0801b768 <_init>:
 801b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b76a:	bf00      	nop
 801b76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b76e:	bc08      	pop	{r3}
 801b770:	469e      	mov	lr, r3
 801b772:	4770      	bx	lr

0801b774 <_fini>:
 801b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b776:	bf00      	nop
 801b778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b77a:	bc08      	pop	{r3}
 801b77c:	469e      	mov	lr, r3
 801b77e:	4770      	bx	lr
